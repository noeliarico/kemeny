
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,60,74,77,45,63,56,94,82],
[71,0,84,91,58,103,67,84,79],
[57,47,0,69,52,72,48,58,61],
[54,40,62,0,33,59,37,60,55],
[86,73,79,98,0,112,50,88,92],
[68,28,59,72,19,0,30,63,38],
[75,64,83,94,81,101,0,89,88],
[37,47,73,71,43,68,42,0,63],
[49,52,70,76,39,93,43,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,66,71,56,79,81,74,73],
[38,0,51,52,51,65,68,71,43],
[65,80,0,71,64,65,66,82,61],
[60,79,60,0,73,71,67,73,56],
[75,80,67,58,0,79,75,79,59],
[52,66,66,60,52,0,56,69,48],
[50,63,65,64,56,75,0,71,50],
[57,60,49,58,52,62,60,0,55],
[58,88,70,75,72,83,81,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,68,66,84,61,78,59,71],
[60,0,68,57,82,75,78,59,51],
[63,63,0,73,74,67,87,72,78],
[65,74,58,0,71,66,85,57,60],
[47,49,57,60,0,48,73,62,60],
[70,56,64,65,83,0,90,66,54],
[53,53,44,46,58,41,0,47,47],
[72,72,59,74,69,65,84,0,56],
[60,80,53,71,71,77,84,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,63,68,70,61,62,64,78],
[66,0,63,73,72,65,63,64,68],
[68,68,0,72,63,65,59,66,71],
[63,58,59,0,68,68,65,66,69],
[61,59,68,63,0,62,70,56,75],
[70,66,66,63,69,0,66,67,84],
[69,68,72,66,61,65,0,67,80],
[67,67,65,65,75,64,64,0,68],
[53,63,60,62,56,47,51,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,67,67,65,63,62,73,60],
[68,0,65,69,70,62,74,64,67],
[64,66,0,68,60,62,59,68,56],
[64,62,63,0,52,65,62,60,69],
[66,61,71,79,0,64,66,64,65],
[68,69,69,66,67,0,61,69,60],
[69,57,72,69,65,70,0,63,77],
[58,67,63,71,67,62,68,0,66],
[71,64,75,62,66,71,54,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,58,67,63,67,77,58,62],
[63,0,63,64,60,49,61,67,62],
[73,68,0,75,77,61,79,75,74],
[64,67,56,0,70,67,62,68,63],
[68,71,54,61,0,65,64,62,69],
[64,82,70,64,66,0,66,68,63],
[54,70,52,69,67,65,0,64,69],
[73,64,56,63,69,63,67,0,66],
[69,69,57,68,62,68,62,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,64,54,55,67,64,61],
[67,0,72,71,61,67,66,69,64],
[63,59,0,64,53,52,62,65,54],
[67,60,67,0,52,56,55,63,57],
[77,70,78,79,0,65,70,74,69],
[76,64,79,75,66,0,75,75,82],
[64,65,69,76,61,56,0,68,60],
[67,62,66,68,57,56,63,0,60],
[70,67,77,74,62,49,71,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,77,102,91,74,102,53,83],
[59,0,35,84,62,51,77,33,57],
[54,96,0,70,71,48,92,59,63],
[29,47,61,0,77,52,66,45,57],
[40,69,60,54,0,61,70,58,65],
[57,80,83,79,70,0,82,70,80],
[29,54,39,65,61,49,0,31,62],
[78,98,72,86,73,61,100,0,64],
[48,74,68,74,66,51,69,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,71,72,78,55,68,63,59],
[66,0,72,71,68,66,64,75,55],
[60,59,0,70,56,56,54,64,54],
[59,60,61,0,63,56,54,65,60],
[53,63,75,68,0,58,59,64,54],
[76,65,75,75,73,0,64,71,64],
[63,67,77,77,72,67,0,62,68],
[68,56,67,66,67,60,69,0,58],
[72,76,77,71,77,67,63,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,66,70,63,74,83,71,62],
[49,0,47,54,47,54,63,59,62],
[65,84,0,75,66,75,79,78,68],
[61,77,56,0,64,65,72,66,63],
[68,84,65,67,0,80,84,73,71],
[57,77,56,66,51,0,62,66,61],
[48,68,52,59,47,69,0,58,59],
[60,72,53,65,58,65,73,0,62],
[69,69,63,68,60,70,72,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,62,62,69,61,63,58,59],
[63,0,66,65,66,62,71,59,63],
[69,65,0,66,72,57,66,58,61],
[69,66,65,0,66,66,73,71,61],
[62,65,59,65,0,55,66,60,57],
[70,69,74,65,76,0,71,70,70],
[68,60,65,58,65,60,0,60,53],
[73,72,73,60,71,61,71,0,61],
[72,68,70,70,74,61,78,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,64,47,81,26,81,95,81],
[70,0,43,74,81,81,57,95,57],
[67,88,0,67,79,64,80,89,91],
[84,57,64,0,81,50,81,64,81],
[50,50,52,50,0,60,107,51,76],
[105,50,67,81,71,0,104,81,84],
[50,74,51,50,24,27,0,75,37],
[36,36,42,67,80,50,56,0,93],
[50,74,40,50,55,47,94,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,70,75,90,82,83,95,49],
[35,0,50,34,52,63,46,103,61],
[61,81,0,41,70,84,85,107,71],
[56,97,90,0,95,111,85,110,78],
[41,79,61,36,0,73,69,112,50],
[49,68,47,20,58,0,40,77,51],
[48,85,46,46,62,91,0,93,61],
[36,28,24,21,19,54,38,0,25],
[82,70,60,53,81,80,70,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,64,63,53,56,65,58,61],
[73,0,64,63,64,54,60,71,48],
[67,67,0,66,63,59,75,60,58],
[68,68,65,0,64,55,71,55,53],
[78,67,68,67,0,58,68,67,49],
[75,77,72,76,73,0,74,69,59],
[66,71,56,60,63,57,0,64,68],
[73,60,71,76,64,62,67,0,51],
[70,83,73,78,82,72,63,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,73,62,68,59,64,68,57],
[60,0,68,60,66,62,62,63,57],
[58,63,0,59,62,61,61,68,60],
[69,71,72,0,71,67,57,66,59],
[63,65,69,60,0,56,61,63,54],
[72,69,70,64,75,0,68,71,67],
[67,69,70,74,70,63,0,73,65],
[63,68,63,65,68,60,58,0,61],
[74,74,71,72,77,64,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,61,60,64,64,70,65,63],
[59,0,58,66,67,66,69,69,63],
[70,73,0,62,66,67,71,75,66],
[71,65,69,0,75,66,71,67,61],
[67,64,65,56,0,70,65,73,60],
[67,65,64,65,61,0,61,69,58],
[61,62,60,60,66,70,0,66,65],
[66,62,56,64,58,62,65,0,59],
[68,68,65,70,71,73,66,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,61,85,78,66,69,84,71],
[51,0,61,68,79,50,72,63,70],
[70,70,0,66,76,61,73,74,70],
[46,63,65,0,63,56,48,57,69],
[53,52,55,68,0,49,51,57,56],
[65,81,70,75,82,0,76,75,76],
[62,59,58,83,80,55,0,73,74],
[47,68,57,74,74,56,58,0,71],
[60,61,61,62,75,55,57,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,70,58,72,80,75,73,64],
[52,0,66,54,58,53,59,60,58],
[61,65,0,46,59,67,61,74,54],
[73,77,85,0,76,58,72,86,71],
[59,73,72,55,0,69,69,68,60],
[51,78,64,73,62,0,62,84,60],
[56,72,70,59,62,69,0,74,53],
[58,71,57,45,63,47,57,0,65],
[67,73,77,60,71,71,78,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,75,65,78,69,66,64],
[64,0,68,69,65,64,56,81,61],
[63,63,0,66,59,72,59,71,56],
[56,62,65,0,60,69,59,66,48],
[66,66,72,71,0,71,67,70,54],
[53,67,59,62,60,0,56,63,54],
[62,75,72,72,64,75,0,75,67],
[65,50,60,65,61,68,56,0,51],
[67,70,75,83,77,77,64,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,64,62,58,68,67,70,55],
[56,0,79,70,67,79,67,76,69],
[67,52,0,72,68,63,61,77,62],
[69,61,59,0,54,64,68,75,48],
[73,64,63,77,0,55,71,77,49],
[63,52,68,67,76,0,61,73,65],
[64,64,70,63,60,70,0,81,73],
[61,55,54,56,54,58,50,0,57],
[76,62,69,83,82,66,58,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,47,74,66,72,82,80,62],
[64,0,59,61,69,69,77,79,67],
[84,72,0,76,72,65,88,82,66],
[57,70,55,0,52,58,76,76,50],
[65,62,59,79,0,60,69,77,55],
[59,62,66,73,71,0,78,63,59],
[49,54,43,55,62,53,0,65,51],
[51,52,49,55,54,68,66,0,46],
[69,64,65,81,76,72,80,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,56,59,62,54,55,57,54],
[70,0,69,65,65,66,64,61,59],
[75,62,0,61,61,59,57,50,57],
[72,66,70,0,73,77,60,64,65],
[69,66,70,58,0,67,60,60,59],
[77,65,72,54,64,0,61,64,50],
[76,67,74,71,71,70,0,69,62],
[74,70,81,67,71,67,62,0,66],
[77,72,74,66,72,81,69,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,74,63,67,67,57,65,75],
[52,0,63,55,60,54,63,57,59],
[57,68,0,64,53,57,57,69,75],
[68,76,67,0,68,69,75,65,71],
[64,71,78,63,0,60,61,68,66],
[64,77,74,62,71,0,68,69,69],
[74,68,74,56,70,63,0,63,65],
[66,74,62,66,63,62,68,0,65],
[56,72,56,60,65,62,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,58,81,65,71,71,66,69],
[56,0,59,64,60,63,69,62,65],
[73,72,0,66,71,73,76,64,65],
[50,67,65,0,62,61,62,59,56],
[66,71,60,69,0,65,66,63,60],
[60,68,58,70,66,0,69,58,59],
[60,62,55,69,65,62,0,63,60],
[65,69,67,72,68,73,68,0,66],
[62,66,66,75,71,72,71,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,55,52,55,47,53,72],
[69,0,61,69,53,58,61,66,76],
[68,70,0,68,62,61,54,68,64],
[76,62,63,0,50,58,66,62,72],
[79,78,69,81,0,65,64,73,80],
[76,73,70,73,66,0,61,71,67],
[84,70,77,65,67,70,0,68,68],
[78,65,63,69,58,60,63,0,82],
[59,55,67,59,51,64,63,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,72,73,68,62,66,79,66],
[60,0,64,64,64,69,55,66,58],
[59,67,0,65,70,68,59,65,53],
[58,67,66,0,67,68,58,61,65],
[63,67,61,64,0,68,63,65,62],
[69,62,63,63,63,0,64,64,61],
[65,76,72,73,68,67,0,72,58],
[52,65,66,70,66,67,59,0,55],
[65,73,78,66,69,70,73,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,84,84,65,104,69,67,98],
[38,0,70,63,50,50,63,31,59],
[47,61,0,13,28,46,27,29,47],
[47,68,118,0,70,67,57,52,92],
[66,81,103,61,0,80,74,64,98],
[27,81,85,64,51,0,62,44,72],
[62,68,104,74,57,69,0,58,70],
[64,100,102,79,67,87,73,0,98],
[33,72,84,39,33,59,61,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,68,77,67,65,82,77,64],
[62,0,56,68,58,65,69,61,60],
[63,75,0,71,62,68,73,65,63],
[54,63,60,0,53,53,68,59,53],
[64,73,69,78,0,68,77,70,68],
[66,66,63,78,63,0,68,65,68],
[49,62,58,63,54,63,0,70,60],
[54,70,66,72,61,66,61,0,61],
[67,71,68,78,63,63,71,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,81,69,71,65,76,63,74],
[63,0,77,69,68,66,74,73,61],
[50,54,0,40,60,56,67,56,65],
[62,62,91,0,74,73,77,76,72],
[60,63,71,57,0,63,65,63,65],
[66,65,75,58,68,0,71,58,61],
[55,57,64,54,66,60,0,63,65],
[68,58,75,55,68,73,68,0,55],
[57,70,66,59,66,70,66,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,75,71,51,45,75,66,53],
[57,0,85,58,58,51,46,44,76],
[56,46,0,37,74,41,35,53,47],
[60,73,94,0,77,58,73,58,67],
[80,73,57,54,0,49,55,37,68],
[86,80,90,73,82,0,86,58,76],
[56,85,96,58,76,45,0,67,68],
[65,87,78,73,94,73,64,0,69],
[78,55,84,64,63,55,63,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,68,70,66,66,71,58,67],
[62,0,60,55,58,64,68,61,64],
[63,71,0,60,67,64,71,67,69],
[61,76,71,0,66,71,75,72,66],
[65,73,64,65,0,66,67,66,60],
[65,67,67,60,65,0,68,58,66],
[60,63,60,56,64,63,0,65,64],
[73,70,64,59,65,73,66,0,63],
[64,67,62,65,71,65,67,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,69,77,70,70,71,61,64],
[59,0,59,66,70,61,70,52,61],
[62,72,0,64,63,66,75,61,63],
[54,65,67,0,74,62,73,54,63],
[61,61,68,57,0,56,83,58,65],
[61,70,65,69,75,0,76,69,67],
[60,61,56,58,48,55,0,46,55],
[70,79,70,77,73,62,85,0,68],
[67,70,68,68,66,64,76,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,50,62,47,64,48,61,56],
[77,0,61,68,66,63,53,64,50],
[81,70,0,72,63,75,49,62,58],
[69,63,59,0,61,56,41,63,54],
[84,65,68,70,0,75,58,75,66],
[67,68,56,75,56,0,57,59,58],
[83,78,82,90,73,74,0,72,62],
[70,67,69,68,56,72,59,0,65],
[75,81,73,77,65,73,69,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,65,67,55,54,65,58,62],
[75,0,70,77,61,62,69,74,70],
[66,61,0,71,59,64,63,64,65],
[64,54,60,0,59,51,60,62,59],
[76,70,72,72,0,65,70,76,69],
[77,69,67,80,66,0,66,74,62],
[66,62,68,71,61,65,0,68,64],
[73,57,67,69,55,57,63,0,66],
[69,61,66,72,62,69,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,73,76,64,72,67,83],
[64,0,62,77,62,73,68,63,78],
[62,69,0,72,70,62,64,71,78],
[58,54,59,0,61,59,58,58,76],
[55,69,61,70,0,74,67,65,79],
[67,58,69,72,57,0,53,62,72],
[59,63,67,73,64,78,0,61,79],
[64,68,60,73,66,69,70,0,80],
[48,53,53,55,52,59,52,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,76,68,76,77,81,59,72],
[52,0,62,70,63,78,67,67,65],
[55,69,0,66,65,70,73,70,68],
[63,61,65,0,64,77,75,63,69],
[55,68,66,67,0,72,78,54,66],
[54,53,61,54,59,0,65,55,50],
[50,64,58,56,53,66,0,57,60],
[72,64,61,68,77,76,74,0,69],
[59,66,63,62,65,81,71,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,50,57,46,25,76,61,39],
[72,0,47,33,68,47,55,47,47],
[81,84,0,78,61,84,68,68,70],
[74,98,53,0,57,53,90,58,88],
[85,63,70,74,0,59,85,74,74],
[106,84,47,78,72,0,59,87,70],
[55,76,63,41,46,72,0,41,41],
[70,84,63,73,57,44,90,0,73],
[92,84,61,43,57,61,90,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,65,89,82,67,70,79,73],
[44,0,54,70,50,54,68,69,43],
[66,77,0,93,65,75,70,73,71],
[42,61,38,0,58,61,50,61,50],
[49,81,66,73,0,50,55,76,61],
[64,77,56,70,81,0,62,75,56],
[61,63,61,81,76,69,0,80,78],
[52,62,58,70,55,56,51,0,46],
[58,88,60,81,70,75,53,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,23,74,61,46,54,75,72],
[94,0,68,79,93,57,88,72,93],
[108,63,0,76,90,67,52,61,86],
[57,52,55,0,58,47,61,50,64],
[70,38,41,73,0,56,52,59,76],
[85,74,64,84,75,0,74,69,98],
[77,43,79,70,79,57,0,68,75],
[56,59,70,81,72,62,63,0,77],
[59,38,45,67,55,33,56,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,92,63,82,78,95,67,52],
[77,0,94,69,99,75,95,65,97],
[39,37,0,60,53,52,78,47,41],
[68,62,71,0,59,87,87,57,54],
[49,32,78,72,0,39,95,44,50],
[53,56,79,44,92,0,77,63,66],
[36,36,53,44,36,54,0,47,44],
[64,66,84,74,87,68,84,0,64],
[79,34,90,77,81,65,87,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,64,70,66,69,61,64,64],
[71,0,61,67,74,64,60,68,66],
[67,70,0,68,69,60,66,65,51],
[61,64,63,0,66,61,60,58,50],
[65,57,62,65,0,65,61,57,67],
[62,67,71,70,66,0,67,60,60],
[70,71,65,71,70,64,0,67,71],
[67,63,66,73,74,71,64,0,60],
[67,65,80,81,64,71,60,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,63,55,65,62,60,67,62],
[72,0,76,68,73,67,70,72,65],
[68,55,0,62,62,59,58,69,63],
[76,63,69,0,71,64,63,77,74],
[66,58,69,60,0,63,63,67,70],
[69,64,72,67,68,0,65,75,69],
[71,61,73,68,68,66,0,76,69],
[64,59,62,54,64,56,55,0,66],
[69,66,68,57,61,62,62,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,73,58,78,62,76,74],
[69,0,65,80,67,72,64,67,73],
[68,66,0,78,72,84,45,70,82],
[58,51,53,0,59,64,45,77,46],
[73,64,59,72,0,82,69,57,61],
[53,59,47,67,49,0,47,59,58],
[69,67,86,86,62,84,0,79,79],
[55,64,61,54,74,72,52,0,58],
[57,58,49,85,70,73,52,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,66,72,71,63,69,61,72],
[57,0,59,72,56,65,64,74,74],
[65,72,0,74,77,83,73,80,75],
[59,59,57,0,69,70,66,74,62],
[60,75,54,62,0,62,64,64,74],
[68,66,48,61,69,0,73,65,74],
[62,67,58,65,67,58,0,65,77],
[70,57,51,57,67,66,66,0,67],
[59,57,56,69,57,57,54,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,53,0,60,3,43,29,42],
[78,0,73,51,102,54,93,75,105],
[78,58,0,58,55,51,78,31,85],
[131,80,73,0,97,69,90,62,76],
[71,29,76,34,0,54,93,47,90],
[128,77,80,62,77,0,77,49,87],
[88,38,53,41,38,54,0,7,37],
[102,56,100,69,84,82,124,0,77],
[89,26,46,55,41,44,94,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,59,65,60,67,66,57,79],
[66,0,62,68,60,74,65,68,64],
[72,69,0,76,61,76,74,69,84],
[66,63,55,0,65,58,71,51,74],
[71,71,70,66,0,66,69,58,78],
[64,57,55,73,65,0,71,58,70],
[65,66,57,60,62,60,0,57,74],
[74,63,62,80,73,73,74,0,82],
[52,67,47,57,53,61,57,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,65,69,68,65,75,75,73],
[64,0,58,65,58,68,69,68,62],
[66,73,0,62,64,65,74,65,68],
[62,66,69,0,70,64,72,70,61],
[63,73,67,61,0,65,77,64,76],
[66,63,66,67,66,0,71,68,61],
[56,62,57,59,54,60,0,55,61],
[56,63,66,61,67,63,76,0,68],
[58,69,63,70,55,70,70,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,72,68,65,70,64,67],
[67,0,59,72,64,64,66,63,57],
[62,72,0,62,64,71,62,64,59],
[59,59,69,0,64,65,61,59,56],
[63,67,67,67,0,65,56,67,67],
[66,67,60,66,66,0,69,67,68],
[61,65,69,70,75,62,0,58,54],
[67,68,67,72,64,64,73,0,62],
[64,74,72,75,64,63,77,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,81,68,70,55,75,71,69],
[64,0,69,61,63,51,77,65,65],
[50,62,0,58,62,50,67,60,60],
[63,70,73,0,68,66,79,70,70],
[61,68,69,63,0,64,73,66,65],
[76,80,81,65,67,0,86,71,66],
[56,54,64,52,58,45,0,59,61],
[60,66,71,61,65,60,72,0,66],
[62,66,71,61,66,65,70,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,70,73,70,79,57,56,61],
[76,0,63,78,68,85,67,80,72],
[61,68,0,77,84,76,67,72,70],
[58,53,54,0,60,61,51,59,74],
[61,63,47,71,0,68,55,63,64],
[52,46,55,70,63,0,56,62,62],
[74,64,64,80,76,75,0,70,73],
[75,51,59,72,68,69,61,0,60],
[70,59,61,57,67,69,58,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,90,72,86,81,101,87,62],
[54,0,67,57,71,74,63,70,60],
[41,64,0,67,88,88,75,88,65],
[59,74,64,0,93,100,101,92,67],
[45,60,43,38,0,74,57,59,44],
[50,57,43,31,57,0,50,57,32],
[30,68,56,30,74,81,0,71,41],
[44,61,43,39,72,74,60,0,45],
[69,71,66,64,87,99,90,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,70,54,56,54,57,60,60],
[71,0,73,69,60,57,63,61,69],
[61,58,0,63,63,62,56,61,62],
[77,62,68,0,59,60,60,62,66],
[75,71,68,72,0,70,65,68,61],
[77,74,69,71,61,0,68,72,68],
[74,68,75,71,66,63,0,62,61],
[71,70,70,69,63,59,69,0,69],
[71,62,69,65,70,63,70,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,82,74,64,75,60,73,69],
[69,0,72,64,82,70,54,42,59],
[49,59,0,55,55,73,48,54,61],
[57,67,76,0,72,66,61,71,63],
[67,49,76,59,0,73,53,57,83],
[56,61,58,65,58,0,44,49,62],
[71,77,83,70,78,87,0,63,69],
[58,89,77,60,74,82,68,0,72],
[62,72,70,68,48,69,62,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,57,56,56,57,59,72,52],
[69,0,56,58,55,65,61,61,53],
[74,75,0,59,66,70,55,68,61],
[75,73,72,0,73,78,59,70,67],
[75,76,65,58,0,54,72,66,63],
[74,66,61,53,77,0,65,79,64],
[72,70,76,72,59,66,0,72,62],
[59,70,63,61,65,52,59,0,67],
[79,78,70,64,68,67,69,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,60,67,68,62,71,62,73],
[69,0,68,75,67,67,69,67,65],
[71,63,0,68,63,70,66,66,64],
[64,56,63,0,62,59,64,71,67],
[63,64,68,69,0,74,73,67,68],
[69,64,61,72,57,0,63,60,65],
[60,62,65,67,58,68,0,74,65],
[69,64,65,60,64,71,57,0,67],
[58,66,67,64,63,66,66,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,65,80,75,80,75,84,75],
[55,0,56,51,49,66,60,72,66],
[66,75,0,68,64,81,79,76,67],
[51,80,63,0,77,71,67,80,65],
[56,82,67,54,0,60,62,63,67],
[51,65,50,60,71,0,61,73,63],
[56,71,52,64,69,70,0,69,64],
[47,59,55,51,68,58,62,0,59],
[56,65,64,66,64,68,67,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,59,61,66,71,60,61,69],
[66,0,66,71,71,73,65,69,64],
[72,65,0,56,66,53,66,75,65],
[70,60,75,0,63,78,56,74,59],
[65,60,65,68,0,57,63,67,60],
[60,58,78,53,74,0,53,66,60],
[71,66,65,75,68,78,0,61,69],
[70,62,56,57,64,65,70,0,59],
[62,67,66,72,71,71,62,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,72,63,68,65,76,68,66],
[67,0,67,69,82,58,77,60,66],
[59,64,0,56,59,63,68,71,67],
[68,62,75,0,67,61,77,66,64],
[63,49,72,64,0,58,65,49,59],
[66,73,68,70,73,0,72,63,65],
[55,54,63,54,66,59,0,62,65],
[63,71,60,65,82,68,69,0,79],
[65,65,64,67,72,66,66,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,65,59,59,74,67,57,67],
[59,0,59,55,64,65,63,59,62],
[66,72,0,60,59,72,66,62,64],
[72,76,71,0,62,72,65,61,68],
[72,67,72,69,0,72,65,65,69],
[57,66,59,59,59,0,54,65,59],
[64,68,65,66,66,77,0,64,68],
[74,72,69,70,66,66,67,0,61],
[64,69,67,63,62,72,63,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,23,64,73,73,71,45,103],
[45,0,50,100,100,84,50,81,90],
[108,81,0,83,86,70,64,67,114],
[67,31,48,0,73,67,62,74,87],
[58,31,45,58,0,61,57,42,70],
[58,47,61,64,70,0,78,72,100],
[60,81,67,69,74,53,0,50,88],
[86,50,64,57,89,59,81,0,110],
[28,41,17,44,61,31,43,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,73,71,66,77,70,62,71],
[64,0,65,64,69,65,62,53,49],
[58,66,0,79,68,74,59,63,54],
[60,67,52,0,55,67,59,48,56],
[65,62,63,76,0,67,65,66,63],
[54,66,57,64,64,0,57,45,52],
[61,69,72,72,66,74,0,63,49],
[69,78,68,83,65,86,68,0,66],
[60,82,77,75,68,79,82,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,83,107,63,67,58,94,76],
[39,0,54,81,51,46,51,93,62],
[48,77,0,84,55,85,80,67,78],
[24,50,47,0,21,53,56,69,59],
[68,80,76,110,0,53,61,110,57],
[64,85,46,78,78,0,78,82,51],
[73,80,51,75,70,53,0,74,59],
[37,38,64,62,21,49,57,0,39],
[55,69,53,72,74,80,72,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,53,60,69,63,64,66,62],
[65,0,57,70,57,66,61,67,76],
[78,74,0,69,68,76,59,65,67],
[71,61,62,0,67,72,75,62,65],
[62,74,63,64,0,62,67,61,67],
[68,65,55,59,69,0,67,53,65],
[67,70,72,56,64,64,0,60,73],
[65,64,66,69,70,78,71,0,68],
[69,55,64,66,64,66,58,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,63,114,106,97,61,84,69],
[56,0,56,114,71,92,48,71,56],
[68,75,0,114,106,99,110,84,45],
[17,17,17,0,35,62,39,40,26],
[25,60,25,96,0,48,58,59,12],
[34,39,32,69,83,0,72,28,32],
[70,83,21,92,73,59,0,40,12],
[47,60,47,91,72,103,91,0,56],
[62,75,86,105,119,99,119,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,52,59,50,69,70,53,46],
[72,0,62,67,63,66,71,70,72],
[79,69,0,79,75,80,65,65,68],
[72,64,52,0,68,79,79,61,55],
[81,68,56,63,0,87,90,65,72],
[62,65,51,52,44,0,72,68,50],
[61,60,66,52,41,59,0,57,49],
[78,61,66,70,66,63,74,0,76],
[85,59,63,76,59,81,82,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,52,45,59,44,52,63,48],
[82,0,60,62,66,64,58,64,55],
[79,71,0,64,73,71,64,72,55],
[86,69,67,0,73,61,69,77,57],
[72,65,58,58,0,59,66,71,55],
[87,67,60,70,72,0,52,65,68],
[79,73,67,62,65,79,0,62,62],
[68,67,59,54,60,66,69,0,56],
[83,76,76,74,76,63,69,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,68,60,59,60,88,60,66],
[59,0,69,47,53,58,59,47,68],
[63,62,0,53,70,73,74,51,85],
[71,84,78,0,58,63,91,58,83],
[72,78,61,73,0,69,81,68,82],
[71,73,58,68,62,0,78,70,77],
[43,72,57,40,50,53,0,43,45],
[71,84,80,73,63,61,88,0,82],
[65,63,46,48,49,54,86,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,77,69,76,72,71,65,71],
[58,0,57,66,70,63,64,53,60],
[54,74,0,59,70,65,61,67,70],
[62,65,72,0,77,65,59,56,62],
[55,61,61,54,0,62,60,59,58],
[59,68,66,66,69,0,62,56,65],
[60,67,70,72,71,69,0,71,58],
[66,78,64,75,72,75,60,0,63],
[60,71,61,69,73,66,73,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,66,63,67,58,63,60,66],
[68,0,71,78,76,66,64,68,75],
[65,60,0,66,59,67,68,58,59],
[68,53,65,0,57,64,63,62,64],
[64,55,72,74,0,66,62,66,61],
[73,65,64,67,65,0,53,67,75],
[68,67,63,68,69,78,0,57,63],
[71,63,73,69,65,64,74,0,61],
[65,56,72,67,70,56,68,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,50,57,62,64,56,67,65],
[71,0,61,68,63,71,69,73,73],
[81,70,0,64,75,76,70,79,76],
[74,63,67,0,70,79,65,73,68],
[69,68,56,61,0,71,70,69,67],
[67,60,55,52,60,0,63,57,59],
[75,62,61,66,61,68,0,69,63],
[64,58,52,58,62,74,62,0,71],
[66,58,55,63,64,72,68,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,64,62,54,69,67,64,66],
[72,0,59,65,65,70,69,72,71],
[67,72,0,69,63,60,72,67,68],
[69,66,62,0,62,64,62,69,69],
[77,66,68,69,0,65,68,74,78],
[62,61,71,67,66,0,71,63,76],
[64,62,59,69,63,60,0,65,61],
[67,59,64,62,57,68,66,0,69],
[65,60,63,62,53,55,70,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,75,70,54,59,58,64,58],
[60,0,67,69,54,66,68,71,60],
[56,64,0,58,49,64,63,57,53],
[61,62,73,0,62,72,68,68,69],
[77,77,82,69,0,71,76,65,67],
[72,65,67,59,60,0,66,62,66],
[73,63,68,63,55,65,0,60,62],
[67,60,74,63,66,69,71,0,72],
[73,71,78,62,64,65,69,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,68,62,74,67,71,57,66],
[61,0,62,64,64,66,63,57,60],
[63,69,0,62,68,62,65,61,67],
[69,67,69,0,67,72,71,62,71],
[57,67,63,64,0,63,65,57,64],
[64,65,69,59,68,0,64,59,67],
[60,68,66,60,66,67,0,64,61],
[74,74,70,69,74,72,67,0,63],
[65,71,64,60,67,64,70,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,81,76,63,96,77,78,75],
[59,0,71,73,55,78,63,83,38],
[50,60,0,61,63,83,60,66,48],
[55,58,70,0,58,70,64,67,55],
[68,76,68,73,0,97,82,73,58],
[35,53,48,61,34,0,52,50,33],
[54,68,71,67,49,79,0,75,43],
[53,48,65,64,58,81,56,0,28],
[56,93,83,76,73,98,88,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,79,83,69,61,66,58,64],
[55,0,73,87,76,74,75,63,72],
[52,58,0,73,67,63,71,69,65],
[48,44,58,0,58,65,79,67,49],
[62,55,64,73,0,64,74,70,56],
[70,57,68,66,67,0,65,59,58],
[65,56,60,52,57,66,0,58,56],
[73,68,62,64,61,72,73,0,73],
[67,59,66,82,75,73,75,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,60,72,70,73,71,73,69],
[56,0,66,74,60,68,67,64,55],
[71,65,0,66,63,65,59,68,61],
[59,57,65,0,70,62,62,70,56],
[61,71,68,61,0,62,60,67,62],
[58,63,66,69,69,0,72,72,67],
[60,64,72,69,71,59,0,70,63],
[58,67,63,61,64,59,61,0,54],
[62,76,70,75,69,64,68,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,55,48,65,63,67,62,59],
[71,0,51,71,78,57,77,71,67],
[76,80,0,67,54,69,68,48,59],
[83,60,64,0,48,57,74,67,69],
[66,53,77,83,0,43,77,86,76],
[68,74,62,74,88,0,58,64,57],
[64,54,63,57,54,73,0,48,59],
[69,60,83,64,45,67,83,0,72],
[72,64,72,62,55,74,72,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,63,64,63,80,61,67,62],
[66,0,67,70,70,66,79,64,64],
[68,64,0,58,53,52,59,50,54],
[67,61,73,0,62,61,66,60,69],
[68,61,78,69,0,71,67,63,62],
[51,65,79,70,60,0,54,62,56],
[70,52,72,65,64,77,0,65,54],
[64,67,81,71,68,69,66,0,64],
[69,67,77,62,69,75,77,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,57,69,55,65,73,39],
[64,0,73,71,71,93,89,55,75],
[64,58,0,53,53,57,63,60,87],
[74,60,78,0,45,97,87,90,61],
[62,60,78,86,0,68,87,58,97],
[76,38,74,34,63,0,45,54,75],
[66,42,68,44,44,86,0,64,51],
[58,76,71,41,73,77,67,0,63],
[92,56,44,70,34,56,80,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,64,59,69,63,62,65,66],
[60,0,54,60,61,58,64,67,58],
[67,77,0,68,68,72,79,76,65],
[72,71,63,0,60,61,72,65,67],
[62,70,63,71,0,59,70,80,62],
[68,73,59,70,72,0,66,74,63],
[69,67,52,59,61,65,0,60,59],
[66,64,55,66,51,57,71,0,59],
[65,73,66,64,69,68,72,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,40,61,28,40,69,51,65],
[69,0,68,87,70,59,88,62,86],
[91,63,0,96,74,80,84,88,85],
[70,44,35,0,52,44,65,41,56],
[103,61,57,79,0,50,73,73,89],
[91,72,51,87,81,0,79,63,81],
[62,43,47,66,58,52,0,59,60],
[80,69,43,90,58,68,72,0,81],
[66,45,46,75,42,50,71,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,59,55,59,63,68,60,49],
[72,0,54,74,66,62,69,65,62],
[72,77,0,71,62,67,73,71,61],
[76,57,60,0,68,71,66,74,62],
[72,65,69,63,0,71,75,72,76],
[68,69,64,60,60,0,65,64,60],
[63,62,58,65,56,66,0,59,55],
[71,66,60,57,59,67,72,0,56],
[82,69,70,69,55,71,76,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,81,63,76,66,83,65],
[66,0,62,71,65,74,66,69,72],
[65,69,0,72,73,78,65,69,71],
[50,60,59,0,59,67,58,65,63],
[68,66,58,72,0,80,59,69,68],
[55,57,53,64,51,0,61,59,63],
[65,65,66,73,72,70,0,73,63],
[48,62,62,66,62,72,58,0,62],
[66,59,60,68,63,68,68,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,68,72,64,40,61,69,51],
[86,0,62,83,71,76,87,103,73],
[63,69,0,87,57,56,65,75,56],
[59,48,44,0,48,32,64,66,37],
[67,60,74,83,0,33,78,78,65],
[91,55,75,99,98,0,91,91,75],
[70,44,66,67,53,40,0,70,52],
[62,28,56,65,53,40,61,0,44],
[80,58,75,94,66,56,79,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,68,58,51,85,82,86,84],
[82,0,83,63,69,90,77,83,76],
[63,48,0,68,48,69,77,72,50],
[73,68,63,0,40,59,69,70,63],
[80,62,83,91,0,78,92,93,80],
[46,41,62,72,53,0,68,68,54],
[49,54,54,62,39,63,0,56,57],
[45,48,59,61,38,63,75,0,52],
[47,55,81,68,51,77,74,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,69,61,68,67,67,82,59],
[72,0,65,57,78,67,70,82,69],
[62,66,0,66,74,61,60,70,59],
[70,74,65,0,74,68,69,83,70],
[63,53,57,57,0,60,52,75,65],
[64,64,70,63,71,0,61,86,58],
[64,61,71,62,79,70,0,82,75],
[49,49,61,48,56,45,49,0,45],
[72,62,72,61,66,73,56,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,62,65,69,74,62,65,54],
[70,0,64,57,65,72,69,68,66],
[69,67,0,63,65,83,65,68,58],
[66,74,68,0,59,84,71,66,67],
[62,66,66,72,0,80,65,70,59],
[57,59,48,47,51,0,62,50,51],
[69,62,66,60,66,69,0,59,58],
[66,63,63,65,61,81,72,0,58],
[77,65,73,64,72,80,73,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,64,65,67,76,65,69,68],
[62,0,68,65,67,76,71,66,65],
[67,63,0,61,64,69,64,58,69],
[66,66,70,0,73,65,63,64,66],
[64,64,67,58,0,72,63,65,63],
[55,55,62,66,59,0,56,56,67],
[66,60,67,68,68,75,0,66,70],
[62,65,73,67,66,75,65,0,65],
[63,66,62,65,68,64,61,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,84,69,73,77,73,63,88],
[47,0,80,73,52,75,66,50,65],
[47,51,0,57,54,56,68,63,62],
[62,58,74,0,58,72,67,77,54],
[58,79,77,73,0,68,51,64,70],
[54,56,75,59,63,0,77,70,49],
[58,65,63,64,80,54,0,67,62],
[68,81,68,54,67,61,64,0,75],
[43,66,69,77,61,82,69,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,57,71,57,50,74,75,68],
[58,0,65,66,55,69,56,64,74],
[74,66,0,51,66,62,55,54,68],
[60,65,80,0,64,70,64,58,67],
[74,76,65,67,0,69,65,70,72],
[81,62,69,61,62,0,69,66,78],
[57,75,76,67,66,62,0,61,62],
[56,67,77,73,61,65,70,0,65],
[63,57,63,64,59,53,69,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,60,62,61,66,74,69,53],
[65,0,59,64,48,68,67,56,52],
[71,72,0,58,66,73,85,67,74],
[69,67,73,0,56,69,69,66,59],
[70,83,65,75,0,71,81,70,60],
[65,63,58,62,60,0,67,60,55],
[57,64,46,62,50,64,0,59,49],
[62,75,64,65,61,71,72,0,57],
[78,79,57,72,71,76,82,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,54,66,63,52,71,49,77],
[56,0,74,49,69,57,72,56,57],
[77,57,0,49,55,48,66,46,72],
[65,82,82,0,78,65,80,84,81],
[68,62,76,53,0,38,62,70,64],
[79,74,83,66,93,0,58,60,69],
[60,59,65,51,69,73,0,56,62],
[82,75,85,47,61,71,75,0,68],
[54,74,59,50,67,62,69,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,62,61,74,61,65,68,61],
[66,0,64,66,70,55,64,70,57],
[69,67,0,73,71,55,68,68,57],
[70,65,58,0,75,58,67,63,55],
[57,61,60,56,0,51,49,58,52],
[70,76,76,73,80,0,69,64,66],
[66,67,63,64,82,62,0,64,58],
[63,61,63,68,73,67,67,0,65],
[70,74,74,76,79,65,73,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,79,73,66,54,69,82,72],
[67,0,72,62,59,55,77,77,61],
[52,59,0,61,49,44,66,62,73],
[58,69,70,0,63,53,75,73,69],
[65,72,82,68,0,67,64,75,66],
[77,76,87,78,64,0,79,79,81],
[62,54,65,56,67,52,0,65,58],
[49,54,69,58,56,52,66,0,80],
[59,70,58,62,65,50,73,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,83,74,74,71,71,77,76],
[66,0,73,76,72,69,76,63,68],
[48,58,0,72,47,53,53,73,52],
[57,55,59,0,62,58,44,64,54],
[57,59,84,69,0,63,43,68,71],
[60,62,78,73,68,0,73,73,73],
[60,55,78,87,88,58,0,76,83],
[54,68,58,67,63,58,55,0,59],
[55,63,79,77,60,58,48,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,69,65,65,66,73,68,70],
[60,0,53,60,63,57,65,58,53],
[62,78,0,66,73,64,75,60,63],
[66,71,65,0,63,70,65,62,64],
[66,68,58,68,0,61,68,58,60],
[65,74,67,61,70,0,67,75,57],
[58,66,56,66,63,64,0,62,68],
[63,73,71,69,73,56,69,0,74],
[61,78,68,67,71,74,63,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,59,54,63,72,52,69,54],
[76,0,63,71,72,79,63,62,66],
[72,68,0,67,64,78,71,63,59],
[77,60,64,0,67,68,62,66,49],
[68,59,67,64,0,70,61,65,63],
[59,52,53,63,61,0,55,59,49],
[79,68,60,69,70,76,0,69,65],
[62,69,68,65,66,72,62,0,58],
[77,65,72,82,68,82,66,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,40,44,32,65,43,69,60],
[65,0,56,55,47,51,54,61,69],
[91,75,0,80,47,79,68,70,73],
[87,76,51,0,66,62,54,61,66],
[99,84,84,65,0,90,72,83,84],
[66,80,52,69,41,0,58,76,72],
[88,77,63,77,59,73,0,73,105],
[62,70,61,70,48,55,58,0,64],
[71,62,58,65,47,59,26,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,72,72,79,81,65,71,79],
[61,0,77,71,65,78,74,73,82],
[59,54,0,53,49,55,60,60,61],
[59,60,78,0,72,68,62,74,72],
[52,66,82,59,0,53,61,55,64],
[50,53,76,63,78,0,62,68,67],
[66,57,71,69,70,69,0,69,64],
[60,58,71,57,76,63,62,0,68],
[52,49,70,59,67,64,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,76,72,72,78,62,67,76],
[62,0,60,67,62,58,60,58,71],
[55,71,0,65,64,61,70,63,69],
[59,64,66,0,76,67,68,56,89],
[59,69,67,55,0,72,60,58,69],
[53,73,70,64,59,0,62,53,76],
[69,71,61,63,71,69,0,64,86],
[64,73,68,75,73,78,67,0,90],
[55,60,62,42,62,55,45,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,62,88,66,74,69,78,75],
[45,0,63,61,41,48,58,58,48],
[69,68,0,74,45,68,64,64,53],
[43,70,57,0,45,60,44,65,48],
[65,90,86,86,0,78,75,87,77],
[57,83,63,71,53,0,51,68,52],
[62,73,67,87,56,80,0,74,55],
[53,73,67,66,44,63,57,0,53],
[56,83,78,83,54,79,76,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,75,69,68,82,64,74,73],
[63,0,65,75,52,69,53,65,73],
[56,66,0,65,63,60,67,60,59],
[62,56,66,0,65,62,68,61,52],
[63,79,68,66,0,76,67,74,60],
[49,62,71,69,55,0,52,64,71],
[67,78,64,63,64,79,0,78,71],
[57,66,71,70,57,67,53,0,62],
[58,58,72,79,71,60,60,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,77,77,55,71,75,76,66],
[69,0,62,76,66,63,66,71,73],
[54,69,0,69,49,60,57,59,70],
[54,55,62,0,46,51,54,50,63],
[76,65,82,85,0,79,79,79,69],
[60,68,71,80,52,0,65,64,73],
[56,65,74,77,52,66,0,58,73],
[55,60,72,81,52,67,73,0,83],
[65,58,61,68,62,58,58,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,56,56,49,69,49,66,56],
[82,0,86,82,64,80,54,63,53],
[75,45,0,64,70,75,68,83,68],
[75,49,67,0,51,66,58,80,58],
[82,67,61,80,0,88,57,56,67],
[62,51,56,65,43,0,44,34,35],
[82,77,63,73,74,87,0,46,72],
[65,68,48,51,75,97,85,0,52],
[75,78,63,73,64,96,59,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,69,72,78,47,45,55,51],
[69,0,63,60,83,49,55,54,68],
[62,68,0,58,76,49,55,58,63],
[59,71,73,0,78,50,46,63,66],
[53,48,55,53,0,35,54,48,55],
[84,82,82,81,96,0,80,57,71],
[86,76,76,85,77,51,0,78,74],
[76,77,73,68,83,74,53,0,85],
[80,63,68,65,76,60,57,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,64,62,61,65,65,65,64],
[71,0,68,68,67,62,70,73,69],
[67,63,0,73,68,57,71,73,63],
[69,63,58,0,56,53,69,64,57],
[70,64,63,75,0,61,75,74,65],
[66,69,74,78,70,0,75,73,65],
[66,61,60,62,56,56,0,67,57],
[66,58,58,67,57,58,64,0,58],
[67,62,68,74,66,66,74,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,63,42,55,42,53,33,54],
[107,0,55,57,80,38,60,80,110],
[68,76,0,68,90,68,90,58,76],
[89,74,63,0,112,88,101,94,85],
[76,51,41,19,0,28,77,58,50],
[89,93,63,43,103,0,80,72,92],
[78,71,41,30,54,51,0,50,80],
[98,51,73,37,73,59,81,0,96],
[77,21,55,46,81,39,51,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,57,48,59,69,73,55,83],
[60,0,53,59,61,77,63,50,78],
[74,78,0,54,74,76,65,62,67],
[83,72,77,0,93,93,59,69,97],
[72,70,57,38,0,80,48,51,86],
[62,54,55,38,51,0,68,44,62],
[58,68,66,72,83,63,0,56,83],
[76,81,69,62,80,87,75,0,87],
[48,53,64,34,45,69,48,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,67,64,67,69,55,68,66],
[72,0,73,63,69,63,59,62,69],
[64,58,0,62,65,68,54,59,72],
[67,68,69,0,73,61,66,69,71],
[64,62,66,58,0,63,65,70,64],
[62,68,63,70,68,0,58,65,65],
[76,72,77,65,66,73,0,72,68],
[63,69,72,62,61,66,59,0,64],
[65,62,59,60,67,66,63,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,61,73,57,61,52,63,66],
[64,0,53,69,55,61,55,51,51],
[70,78,0,71,64,52,59,62,60],
[58,62,60,0,56,61,47,58,53],
[74,76,67,75,0,66,66,56,60],
[70,70,79,70,65,0,67,66,63],
[79,76,72,84,65,64,0,71,70],
[68,80,69,73,75,65,60,0,71],
[65,80,71,78,71,68,61,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,59,56,60,64,44,62,53],
[70,0,70,55,72,68,62,72,60],
[72,61,0,71,74,73,67,68,77],
[75,76,60,0,84,81,78,68,70],
[71,59,57,47,0,78,49,48,58],
[67,63,58,50,53,0,50,55,55],
[87,69,64,53,82,81,0,74,71],
[69,59,63,63,83,76,57,0,70],
[78,71,54,61,73,76,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,64,73,58,50,62,55,57],
[83,0,69,70,60,57,82,67,70],
[67,62,0,54,52,60,62,63,70],
[58,61,77,0,59,56,66,49,67],
[73,71,79,72,0,59,61,62,75],
[81,74,71,75,72,0,82,63,81],
[69,49,69,65,70,49,0,62,67],
[76,64,68,82,69,68,69,0,71],
[74,61,61,64,56,50,64,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,62,73,73,68,69,73,57],
[57,0,69,72,66,61,74,65,61],
[69,62,0,70,69,65,67,66,51],
[58,59,61,0,54,56,65,57,51],
[58,65,62,77,0,63,69,64,66],
[63,70,66,75,68,0,70,66,61],
[62,57,64,66,62,61,0,60,47],
[58,66,65,74,67,65,71,0,59],
[74,70,80,80,65,70,84,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,83,53,62,59,72,57,71],
[49,0,92,57,74,79,49,27,58],
[48,39,0,57,59,64,45,47,64],
[78,74,74,0,46,63,53,66,54],
[69,57,72,85,0,87,66,46,71],
[72,52,67,68,44,0,74,54,71],
[59,82,86,78,65,57,0,41,65],
[74,104,84,65,85,77,90,0,74],
[60,73,67,77,60,60,66,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,63,49,58,74,55,58,55],
[73,0,60,57,63,67,61,61,62],
[68,71,0,69,66,78,58,61,63],
[82,74,62,0,70,83,72,67,71],
[73,68,65,61,0,70,58,59,62],
[57,64,53,48,61,0,57,59,60],
[76,70,73,59,73,74,0,70,72],
[73,70,70,64,72,72,61,0,72],
[76,69,68,60,69,71,59,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,55,60,68,57,63,60,59],
[75,0,70,72,66,69,67,64,67],
[76,61,0,67,69,61,67,63,66],
[71,59,64,0,61,58,60,74,64],
[63,65,62,70,0,65,74,63,72],
[74,62,70,73,66,0,69,73,76],
[68,64,64,71,57,62,0,77,73],
[71,67,68,57,68,58,54,0,60],
[72,64,65,67,59,55,58,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,57,67,70,59,69,79,67],
[74,0,65,79,74,80,70,77,54],
[74,66,0,75,80,76,66,76,65],
[64,52,56,0,70,68,62,69,58],
[61,57,51,61,0,62,53,64,56],
[72,51,55,63,69,0,59,74,60],
[62,61,65,69,78,72,0,77,57],
[52,54,55,62,67,57,54,0,49],
[64,77,66,73,75,71,74,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,53,61,58,60,58,66,65],
[74,0,72,72,65,66,60,72,72],
[78,59,0,64,65,63,67,72,72],
[70,59,67,0,62,62,67,61,65],
[73,66,66,69,0,66,74,65,70],
[71,65,68,69,65,0,70,70,74],
[73,71,64,64,57,61,0,74,70],
[65,59,59,70,66,61,57,0,64],
[66,59,59,66,61,57,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,65,65,68,55,63,65,65],
[74,0,76,72,75,61,76,66,80],
[66,55,0,69,62,64,65,71,65],
[66,59,62,0,67,66,61,68,72],
[63,56,69,64,0,62,59,66,67],
[76,70,67,65,69,0,70,68,65],
[68,55,66,70,72,61,0,68,66],
[66,65,60,63,65,63,63,0,63],
[66,51,66,59,64,66,65,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,59,68,57,58,60,69,61],
[70,0,59,62,60,60,61,68,70],
[72,72,0,67,57,61,66,68,66],
[63,69,64,0,58,62,73,61,76],
[74,71,74,73,0,67,69,73,59],
[73,71,70,69,64,0,74,66,67],
[71,70,65,58,62,57,0,72,75],
[62,63,63,70,58,65,59,0,76],
[70,61,65,55,72,64,56,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,65,67,77,61,61,79,79],
[60,0,67,66,64,54,57,68,65],
[66,64,0,76,65,54,56,67,67],
[64,65,55,0,68,46,46,67,57],
[54,67,66,63,0,52,50,68,60],
[70,77,77,85,79,0,69,85,62],
[70,74,75,85,81,62,0,80,71],
[52,63,64,64,63,46,51,0,69],
[52,66,64,74,71,69,60,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,66,74,75,62,63,69,85],
[64,0,75,69,89,59,92,81,84],
[65,56,0,83,84,74,78,88,94],
[57,62,48,0,69,61,60,67,81],
[56,42,47,62,0,56,48,49,64],
[69,72,57,70,75,0,87,58,83],
[68,39,53,71,83,44,0,70,93],
[62,50,43,64,82,73,61,0,79],
[46,47,37,50,67,48,38,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,75,101,89,48,63,47,75],
[56,0,86,63,86,7,93,88,72],
[56,45,0,101,86,45,54,44,117],
[30,68,30,0,68,75,54,35,105],
[42,45,45,63,0,12,59,45,79],
[83,124,86,56,119,0,93,91,77],
[68,38,77,77,72,38,0,44,80],
[84,43,87,96,86,40,87,0,107],
[56,59,14,26,52,54,51,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,80,69,77,61,73,75,64],
[58,0,66,66,55,57,68,63,53],
[51,65,0,61,63,52,64,60,57],
[62,65,70,0,63,72,64,67,68],
[54,76,68,68,0,62,68,68,70],
[70,74,79,59,69,0,65,69,72],
[58,63,67,67,63,66,0,68,58],
[56,68,71,64,63,62,63,0,64],
[67,78,74,63,61,59,73,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,72,72,61,63,69,76,92],
[61,0,76,72,49,53,62,66,68],
[59,55,0,60,51,54,70,55,72],
[59,59,71,0,64,73,65,62,71],
[70,82,80,67,0,50,69,76,86],
[68,78,77,58,81,0,78,74,68],
[62,69,61,66,62,53,0,65,67],
[55,65,76,69,55,57,66,0,79],
[39,63,59,60,45,63,64,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,77,69,61,68,58,78,72],
[60,0,74,68,54,64,56,70,67],
[54,57,0,62,48,57,50,67,67],
[62,63,69,0,55,57,57,73,64],
[70,77,83,76,0,65,64,83,78],
[63,67,74,74,66,0,66,79,69],
[73,75,81,74,67,65,0,89,83],
[53,61,64,58,48,52,42,0,59],
[59,64,64,67,53,62,48,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,61,57,55,59,55,51,71],
[72,0,63,61,69,65,71,67,77],
[70,68,0,62,58,62,62,65,66],
[74,70,69,0,65,68,56,72,73],
[76,62,73,66,0,63,63,60,70],
[72,66,69,63,68,0,63,55,70],
[76,60,69,75,68,68,0,63,73],
[80,64,66,59,71,76,68,0,70],
[60,54,65,58,61,61,58,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,81,71,81,69,72,64,72],
[59,0,68,62,69,61,68,66,64],
[50,63,0,63,72,62,70,59,55],
[60,69,68,0,74,72,68,69,59],
[50,62,59,57,0,61,63,69,59],
[62,70,69,59,70,0,71,72,62],
[59,63,61,63,68,60,0,61,62],
[67,65,72,62,62,59,70,0,58],
[59,67,76,72,72,69,69,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,72,67,73,74,56,76,68],
[66,0,61,60,64,67,58,65,68],
[59,70,0,68,69,68,59,67,65],
[64,71,63,0,66,67,58,64,65],
[58,67,62,65,0,63,62,72,69],
[57,64,63,64,68,0,63,60,69],
[75,73,72,73,69,68,0,71,65],
[55,66,64,67,59,71,60,0,62],
[63,63,66,66,62,62,66,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,59,61,63,61,64,60,63],
[57,0,53,63,68,51,58,51,56],
[72,78,0,69,70,62,69,67,63],
[70,68,62,0,68,62,53,71,64],
[68,63,61,63,0,66,60,67,64],
[70,80,69,69,65,0,68,70,60],
[67,73,62,78,71,63,0,75,69],
[71,80,64,60,64,61,56,0,59],
[68,75,68,67,67,71,62,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,56,69,13,33,56,0,53],
[95,0,56,105,56,63,56,63,56],
[75,75,0,131,75,108,95,36,75],
[62,26,0,0,26,89,59,0,56],
[118,75,56,105,0,69,56,69,86],
[98,68,23,42,62,0,82,6,92],
[75,75,36,72,75,49,0,36,69],
[131,68,95,131,62,125,95,0,92],
[78,75,56,75,45,39,62,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,77,67,57,61,81,70,59],
[73,0,82,85,67,65,81,77,68],
[54,49,0,68,68,56,55,61,50],
[64,46,63,0,45,44,60,68,53],
[74,64,63,86,0,58,59,68,59],
[70,66,75,87,73,0,76,74,62],
[50,50,76,71,72,55,0,61,49],
[61,54,70,63,63,57,70,0,52],
[72,63,81,78,72,69,82,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,68,71,64,82,75,78,70],
[49,0,59,65,63,57,64,66,61],
[63,72,0,66,67,70,71,75,65],
[60,66,65,0,66,61,63,71,64],
[67,68,64,65,0,70,70,73,65],
[49,74,61,70,61,0,66,74,60],
[56,67,60,68,61,65,0,78,74],
[53,65,56,60,58,57,53,0,60],
[61,70,66,67,66,71,57,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,58,67,64,64,68,59,64],
[81,0,75,64,67,73,65,71,81],
[73,56,0,61,69,72,69,71,69],
[64,67,70,0,67,67,72,59,74],
[67,64,62,64,0,66,62,60,75],
[67,58,59,64,65,0,56,54,60],
[63,66,62,59,69,75,0,63,71],
[72,60,60,72,71,77,68,0,79],
[67,50,62,57,56,71,60,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,56,60,62,63,62,53,54],
[73,0,66,69,69,70,69,62,65],
[75,65,0,73,73,67,67,63,70],
[71,62,58,0,65,70,64,59,61],
[69,62,58,66,0,64,66,59,62],
[68,61,64,61,67,0,63,58,60],
[69,62,64,67,65,68,0,69,63],
[78,69,68,72,72,73,62,0,67],
[77,66,61,70,69,71,68,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,64,72,65,60,62,73,72],
[71,0,65,71,73,73,65,72,77],
[67,66,0,67,69,70,61,70,74],
[59,60,64,0,65,58,59,68,61],
[66,58,62,66,0,67,57,60,69],
[71,58,61,73,64,0,59,65,72],
[69,66,70,72,74,72,0,63,71],
[58,59,61,63,71,66,68,0,67],
[59,54,57,70,62,59,60,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,69,72,66,69,62,66,70],
[62,0,60,63,69,65,53,62,64],
[62,71,0,66,72,65,58,62,71],
[59,68,65,0,71,63,67,62,68],
[65,62,59,60,0,56,59,62,72],
[62,66,66,68,75,0,66,70,73],
[69,78,73,64,72,65,0,67,76],
[65,69,69,69,69,61,64,0,63],
[61,67,60,63,59,58,55,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,63,76,72,61,64,60,65],
[64,0,52,72,65,65,70,50,68],
[68,79,0,76,62,67,67,64,76],
[55,59,55,0,56,62,65,60,58],
[59,66,69,75,0,71,69,64,68],
[70,66,64,69,60,0,72,57,62],
[67,61,64,66,62,59,0,60,73],
[71,81,67,71,67,74,71,0,62],
[66,63,55,73,63,69,58,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,59,65,54,62,57,59,62],
[79,0,67,62,66,81,69,59,65],
[72,64,0,58,66,87,74,75,69],
[66,69,73,0,66,75,68,71,51],
[77,65,65,65,0,83,77,69,65],
[69,50,44,56,48,0,56,56,61],
[74,62,57,63,54,75,0,51,61],
[72,72,56,60,62,75,80,0,66],
[69,66,62,80,66,70,70,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,63,62,62,61,55,56,69],
[72,0,74,67,67,62,67,65,78],
[68,57,0,64,70,65,63,67,72],
[69,64,67,0,68,64,60,63,71],
[69,64,61,63,0,54,60,51,65],
[70,69,66,67,77,0,65,68,75],
[76,64,68,71,71,66,0,66,72],
[75,66,64,68,80,63,65,0,68],
[62,53,59,60,66,56,59,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,75,74,71,74,81,73,72],
[66,0,67,69,71,72,72,67,61],
[56,64,0,60,69,67,63,58,65],
[57,62,71,0,71,75,64,67,67],
[60,60,62,60,0,64,65,65,63],
[57,59,64,56,67,0,68,61,56],
[50,59,68,67,66,63,0,67,60],
[58,64,73,64,66,70,64,0,66],
[59,70,66,64,68,75,71,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,66,68,64,71,68,65],
[66,0,64,64,70,63,70,72,67],
[66,67,0,69,68,62,66,64,67],
[65,67,62,0,67,66,68,62,65],
[63,61,63,64,0,65,61,64,62],
[67,68,69,65,66,0,72,66,69],
[60,61,65,63,70,59,0,61,70],
[63,59,67,69,67,65,70,0,70],
[66,64,64,66,69,62,61,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,54,68,61,60,62,64,58],
[74,0,64,73,67,62,68,64,63],
[77,67,0,78,59,70,75,69,68],
[63,58,53,0,56,73,58,64,51],
[70,64,72,75,0,78,78,61,70],
[71,69,61,58,53,0,59,60,59],
[69,63,56,73,53,72,0,59,67],
[67,67,62,67,70,71,72,0,71],
[73,68,63,80,61,72,64,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,68,76,71,62,71,88,72],
[52,0,64,77,59,70,66,70,71],
[63,67,0,84,62,61,81,82,78],
[55,54,47,0,61,54,54,76,63],
[60,72,69,70,0,70,76,80,68],
[69,61,70,77,61,0,77,83,71],
[60,65,50,77,55,54,0,80,56],
[43,61,49,55,51,48,51,0,56],
[59,60,53,68,63,60,75,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,62,65,49,54,65,56,64],
[70,0,78,83,74,71,68,69,60],
[69,53,0,63,63,64,67,57,62],
[66,48,68,0,58,57,63,59,57],
[82,57,68,73,0,73,72,64,57],
[77,60,67,74,58,0,68,67,65],
[66,63,64,68,59,63,0,63,68],
[75,62,74,72,67,64,68,0,69],
[67,71,69,74,74,66,63,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,67,89,70,68,67,64,63],
[56,0,58,73,59,48,65,51,62],
[64,73,0,76,63,59,73,64,68],
[42,58,55,0,45,47,65,52,55],
[61,72,68,86,0,58,68,73,55],
[63,83,72,84,73,0,71,73,66],
[64,66,58,66,63,60,0,65,59],
[67,80,67,79,58,58,66,0,58],
[68,69,63,76,76,65,72,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,42,68,66,99,68,69,67],
[59,0,45,81,71,95,45,71,56],
[89,86,0,74,60,94,55,77,62],
[63,50,57,0,49,64,46,55,52],
[65,60,71,82,0,92,65,65,62],
[32,36,37,67,39,0,50,49,46],
[63,86,76,85,66,81,0,68,69],
[62,60,54,76,66,82,63,0,56],
[64,75,69,79,69,85,62,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,70,69,70,70,70,69,68],
[74,0,71,67,72,64,71,65,69],
[61,60,0,62,68,67,65,59,63],
[62,64,69,0,68,67,68,66,69],
[61,59,63,63,0,72,65,57,66],
[61,67,64,64,59,0,65,66,65],
[61,60,66,63,66,66,0,63,66],
[62,66,72,65,74,65,68,0,71],
[63,62,68,62,65,66,65,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,68,62,71,73,67,85,70],
[59,0,65,67,66,65,68,84,63],
[63,66,0,63,64,68,70,77,75],
[69,64,68,0,63,68,69,84,70],
[60,65,67,68,0,66,62,78,70],
[58,66,63,63,65,0,61,72,66],
[64,63,61,62,69,70,0,76,66],
[46,47,54,47,53,59,55,0,56],
[61,68,56,61,61,65,65,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,68,70,61,45,64,49,60],
[75,0,85,78,82,75,95,64,58],
[63,46,0,63,72,53,58,57,51],
[61,53,68,0,71,56,66,61,60],
[70,49,59,60,0,42,65,67,54],
[86,56,78,75,89,0,92,56,78],
[67,36,73,65,66,39,0,52,70],
[82,67,74,70,64,75,79,0,75],
[71,73,80,71,77,53,61,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,64,61,67,76,74,72,74],
[60,0,58,70,63,63,66,71,67],
[67,73,0,57,58,67,72,66,67],
[70,61,74,0,72,66,75,75,88],
[64,68,73,59,0,69,60,70,68],
[55,68,64,65,62,0,66,72,70],
[57,65,59,56,71,65,0,65,60],
[59,60,65,56,61,59,66,0,64],
[57,64,64,43,63,61,71,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,66,65,67,72,71,66,70],
[59,0,68,76,60,77,68,61,65],
[65,63,0,68,68,72,73,65,72],
[66,55,63,0,59,68,65,55,63],
[64,71,63,72,0,80,75,66,66],
[59,54,59,63,51,0,65,58,58],
[60,63,58,66,56,66,0,59,66],
[65,70,66,76,65,73,72,0,62],
[61,66,59,68,65,73,65,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,68,64,70,63,54,69,59],
[74,0,66,60,71,67,65,59,63],
[63,65,0,62,67,63,61,58,65],
[67,71,69,0,66,67,59,60,74],
[61,60,64,65,0,59,58,61,56],
[68,64,68,64,72,0,57,63,79],
[77,66,70,72,73,74,0,66,65],
[62,72,73,71,70,68,65,0,65],
[72,68,66,57,75,52,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,61,65,64,54,70,60,61],
[67,0,65,69,73,65,70,71,64],
[70,66,0,64,64,59,70,59,56],
[66,62,67,0,58,63,68,63,71],
[67,58,67,73,0,58,69,64,65],
[77,66,72,68,73,0,73,65,73],
[61,61,61,63,62,58,0,61,60],
[71,60,72,68,67,66,70,0,58],
[70,67,75,60,66,58,71,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,72,71,70,51,76,86,62],
[62,0,70,74,55,72,62,73,62],
[59,61,0,68,61,52,52,72,62],
[60,57,63,0,65,57,58,78,55],
[61,76,70,66,0,54,67,82,70],
[80,59,79,74,77,0,85,80,73],
[55,69,79,73,64,46,0,66,62],
[45,58,59,53,49,51,65,0,50],
[69,69,69,76,61,58,69,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,62,48,65,60,56,51,52],
[72,0,69,69,63,66,66,57,59],
[69,62,0,60,65,42,58,61,58],
[83,62,71,0,70,63,75,61,60],
[66,68,66,61,0,56,63,60,64],
[71,65,89,68,75,0,68,70,69],
[75,65,73,56,68,63,0,65,56],
[80,74,70,70,71,61,66,0,64],
[79,72,73,71,67,62,75,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,88,45,40,101,60,70,87],
[70,0,83,55,20,86,85,54,76],
[43,48,0,49,15,44,44,58,71],
[86,76,82,0,15,76,84,53,86],
[91,111,116,116,0,91,104,63,95],
[30,45,87,55,40,0,65,35,72],
[71,46,87,47,27,66,0,55,42],
[61,77,73,78,68,96,76,0,87],
[44,55,60,45,36,59,89,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,77,77,66,65,64,76,58],
[72,0,75,90,52,63,72,72,59],
[54,56,0,67,82,62,59,74,72],
[54,41,64,0,53,32,33,61,36],
[65,79,49,78,0,71,66,73,67],
[66,68,69,99,60,0,58,89,51],
[67,59,72,98,65,73,0,98,72],
[55,59,57,70,58,42,33,0,47],
[73,72,59,95,64,80,59,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,62,66,62,60,49,57,72],
[70,0,61,64,66,69,67,70,66],
[69,70,0,65,52,71,59,62,65],
[65,67,66,0,59,70,65,73,76],
[69,65,79,72,0,76,66,76,68],
[71,62,60,61,55,0,63,60,69],
[82,64,72,66,65,68,0,56,77],
[74,61,69,58,55,71,75,0,64],
[59,65,66,55,63,62,54,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,58,75,85,107,54,73,107],
[84,0,66,90,55,108,64,60,74],
[73,65,0,79,65,109,71,53,109],
[56,41,52,0,39,116,72,53,91],
[46,76,66,92,0,98,59,64,88],
[24,23,22,15,33,0,37,39,80],
[77,67,60,59,72,94,0,80,105],
[58,71,78,78,67,92,51,0,89],
[24,57,22,40,43,51,26,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,62,61,74,70,71,74,80],
[61,0,61,59,70,73,59,65,63],
[69,70,0,55,68,76,74,67,67],
[70,72,76,0,69,77,71,76,61],
[57,61,63,62,0,80,73,66,61],
[61,58,55,54,51,0,63,60,59],
[60,72,57,60,58,68,0,74,73],
[57,66,64,55,65,71,57,0,63],
[51,68,64,70,70,72,58,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,69,75,70,65,66,63,63],
[63,0,67,76,68,69,65,68,69],
[62,64,0,66,68,61,67,69,71],
[56,55,65,0,72,59,61,61,67],
[61,63,63,59,0,62,55,64,69],
[66,62,70,72,69,0,57,65,68],
[65,66,64,70,76,74,0,68,75],
[68,63,62,70,67,66,63,0,67],
[68,62,60,64,62,63,56,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,71,59,59,91,70,77,66],
[67,0,63,60,65,71,58,72,56],
[60,68,0,70,57,81,79,84,83],
[72,71,61,0,68,71,49,67,59],
[72,66,74,63,0,82,61,99,76],
[40,60,50,60,49,0,71,58,40],
[61,73,52,82,70,60,0,66,61],
[54,59,47,64,32,73,65,0,80],
[65,75,48,72,55,91,70,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,69,54,58,63,63,54,52],
[77,0,78,66,65,67,72,64,78],
[62,53,0,56,55,64,55,54,57],
[77,65,75,0,65,67,72,64,72],
[73,66,76,66,0,70,73,69,62],
[68,64,67,64,61,0,77,69,62],
[68,59,76,59,58,54,0,66,62],
[77,67,77,67,62,62,65,0,64],
[79,53,74,59,69,69,69,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,78,72,75,82,69,66,63],
[44,0,70,65,64,55,58,45,61],
[53,61,0,46,69,70,65,57,55],
[59,66,85,0,78,65,61,64,73],
[56,67,62,53,0,70,68,55,58],
[49,76,61,66,61,0,66,60,60],
[62,73,66,70,63,65,0,64,65],
[65,86,74,67,76,71,67,0,72],
[68,70,76,58,73,71,66,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,59,62,64,56,64,63,60],
[69,0,63,67,59,62,66,61,68],
[72,68,0,66,60,64,76,65,64],
[69,64,65,0,60,61,62,67,60],
[67,72,71,71,0,59,67,60,69],
[75,69,67,70,72,0,72,61,65],
[67,65,55,69,64,59,0,66,65],
[68,70,66,64,71,70,65,0,69],
[71,63,67,71,62,66,66,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,63,61,61,61,73,70,69],
[75,0,80,73,58,73,81,79,77],
[68,51,0,57,56,65,75,74,72],
[70,58,74,0,73,78,84,73,74],
[70,73,75,58,0,66,72,70,66],
[70,58,66,53,65,0,75,68,76],
[58,50,56,47,59,56,0,59,55],
[61,52,57,58,61,63,72,0,68],
[62,54,59,57,65,55,76,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,87,97,72,48,72,38,86],
[64,0,66,95,88,66,77,83,102],
[44,65,0,76,82,46,58,63,82],
[34,36,55,0,41,47,24,21,36],
[59,43,49,90,0,61,52,84,87],
[83,65,85,84,70,0,73,65,70],
[59,54,73,107,79,58,0,94,93],
[93,48,68,110,47,66,37,0,61],
[45,29,49,95,44,61,38,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,58,77,89,67,74,70,74],
[63,0,59,86,71,70,72,66,78],
[73,72,0,79,61,42,54,56,74],
[54,45,52,0,39,57,36,69,49],
[42,60,70,92,0,62,72,62,80],
[64,61,89,74,69,0,61,74,80],
[57,59,77,95,59,70,0,71,79],
[61,65,75,62,69,57,60,0,64],
[57,53,57,82,51,51,52,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,84,61,70,91,66,62,49],
[43,0,76,74,39,104,75,66,61],
[47,55,0,80,55,78,87,68,56],
[70,57,51,0,70,87,66,57,58],
[61,92,76,61,0,91,51,62,61],
[40,27,53,44,40,0,66,61,32],
[65,56,44,65,80,65,0,67,54],
[69,65,63,74,69,70,64,0,70],
[82,70,75,73,70,99,77,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,67,63,63,71,53,61,57],
[69,0,77,75,73,75,60,68,62],
[64,54,0,66,62,62,53,51,56],
[68,56,65,0,63,74,68,58,62],
[68,58,69,68,0,74,68,70,63],
[60,56,69,57,57,0,60,55,50],
[78,71,78,63,63,71,0,75,65],
[70,63,80,73,61,76,56,0,68],
[74,69,75,69,68,81,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,81,74,67,76,75,71,59],
[51,0,82,72,82,74,69,69,64],
[50,49,0,59,60,60,67,68,47],
[57,59,72,0,70,62,63,75,66],
[64,49,71,61,0,65,72,67,65],
[55,57,71,69,66,0,66,71,61],
[56,62,64,68,59,65,0,64,55],
[60,62,63,56,64,60,67,0,50],
[72,67,84,65,66,70,76,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,81,69,61,57,70,63,56],
[60,0,68,64,60,57,67,59,58],
[50,63,0,65,49,53,61,62,60],
[62,67,66,0,63,68,75,65,68],
[70,71,82,68,0,56,66,73,67],
[74,74,78,63,75,0,83,81,65],
[61,64,70,56,65,48,0,71,62],
[68,72,69,66,58,50,60,0,55],
[75,73,71,63,64,66,69,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,65,64,67,67,74,73,65],
[69,0,70,63,74,69,78,67,69],
[66,61,0,62,72,64,67,61,68],
[67,68,69,0,70,68,72,57,65],
[64,57,59,61,0,60,64,62,60],
[64,62,67,63,71,0,74,72,69],
[57,53,64,59,67,57,0,65,69],
[58,64,70,74,69,59,66,0,64],
[66,62,63,66,71,62,62,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,59,65,62,68,62,63,68],
[62,0,62,72,65,62,63,71,64],
[72,69,0,67,61,62,64,62,65],
[66,59,64,0,60,64,63,64,67],
[69,66,70,71,0,65,66,64,71],
[63,69,69,67,66,0,65,73,72],
[69,68,67,68,65,66,0,66,74],
[68,60,69,67,67,58,65,0,63],
[63,67,66,64,60,59,57,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,62,66,62,62,61,61,62],
[64,0,70,63,66,68,60,66,69],
[69,61,0,65,62,67,68,66,67],
[65,68,66,0,69,64,73,71,69],
[69,65,69,62,0,61,76,61,61],
[69,63,64,67,70,0,67,66,73],
[70,71,63,58,55,64,0,56,61],
[70,65,65,60,70,65,75,0,72],
[69,62,64,62,70,58,70,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,70,72,61,59,62,61,58],
[69,0,80,67,68,67,75,59,51],
[61,51,0,55,52,60,65,65,45],
[59,64,76,0,50,69,68,61,54],
[70,63,79,81,0,79,81,68,66],
[72,64,71,62,52,0,65,67,45],
[69,56,66,63,50,66,0,63,50],
[70,72,66,70,63,64,68,0,60],
[73,80,86,77,65,86,81,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,85,68,64,65,79,88,70],
[47,0,57,68,62,61,78,73,73],
[46,74,0,74,60,58,81,70,69],
[63,63,57,0,72,56,73,64,82],
[67,69,71,59,0,54,75,72,77],
[66,70,73,75,77,0,64,67,81],
[52,53,50,58,56,67,0,76,69],
[43,58,61,67,59,64,55,0,58],
[61,58,62,49,54,50,62,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,77,80,62,56,82,71,68],
[61,0,75,78,62,67,78,63,52],
[54,56,0,58,50,40,46,66,55],
[51,53,73,0,66,53,70,52,51],
[69,69,81,65,0,55,65,80,59],
[75,64,91,78,76,0,80,71,58],
[49,53,85,61,66,51,0,62,45],
[60,68,65,79,51,60,69,0,51],
[63,79,76,80,72,73,86,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,73,81,95,98,51,67,73],
[45,0,79,80,77,75,48,41,60],
[58,52,0,73,67,83,59,56,62],
[50,51,58,0,69,78,46,41,38],
[36,54,64,62,0,58,37,32,59],
[33,56,48,53,73,0,46,49,57],
[80,83,72,85,94,85,0,53,60],
[64,90,75,90,99,82,78,0,68],
[58,71,69,93,72,74,71,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,55,76,83,66,71,43,59],
[56,0,46,60,60,77,59,34,50],
[76,85,0,68,93,82,63,64,64],
[55,71,63,0,84,76,66,71,69],
[48,71,38,47,0,57,54,75,51],
[65,54,49,55,74,0,66,50,40],
[60,72,68,65,77,65,0,58,74],
[88,97,67,60,56,81,73,0,44],
[72,81,67,62,80,91,57,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,54,101,75,77,66,68,66],
[52,0,57,73,71,61,76,73,58],
[77,74,0,83,82,81,77,59,63],
[30,58,48,0,62,70,53,39,49],
[56,60,49,69,0,59,59,53,52],
[54,70,50,61,72,0,57,58,61],
[65,55,54,78,72,74,0,47,47],
[63,58,72,92,78,73,84,0,50],
[65,73,68,82,79,70,84,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,64,72,70,68,74,62,65],
[75,0,81,77,64,83,67,79,78],
[67,50,0,58,63,77,65,63,65],
[59,54,73,0,66,66,56,65,61],
[61,67,68,65,0,77,67,68,74],
[63,48,54,65,54,0,67,71,70],
[57,64,66,75,64,64,0,57,77],
[69,52,68,66,63,60,74,0,68],
[66,53,66,70,57,61,54,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,64,61,62,69,66,61,52],
[66,0,62,68,74,57,68,52,55],
[67,69,0,60,72,64,74,54,59],
[70,63,71,0,68,61,78,62,71],
[69,57,59,63,0,68,66,53,57],
[62,74,67,70,63,0,69,60,65],
[65,63,57,53,65,62,0,56,54],
[70,79,77,69,78,71,75,0,64],
[79,76,72,60,74,66,77,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,72,64,59,64,55,70,55],
[70,0,75,69,67,61,60,74,66],
[59,56,0,61,50,62,52,70,55],
[67,62,70,0,65,66,60,71,68],
[72,64,81,66,0,65,65,69,60],
[67,70,69,65,66,0,62,70,61],
[76,71,79,71,66,69,0,74,63],
[61,57,61,60,62,61,57,0,58],
[76,65,76,63,71,70,68,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,3,49,0,86,94,46,45],
[45,0,48,94,45,86,48,46,45],
[128,83,0,131,37,83,94,46,82],
[82,37,0,0,37,37,45,46,82],
[131,86,94,94,0,86,94,49,94],
[45,45,48,94,45,0,48,46,45],
[37,83,37,86,37,83,0,83,82],
[85,85,85,85,82,85,48,0,82],
[86,86,49,49,37,86,49,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,61,71,59,73,56,76],
[63,0,70,54,57,65,72,77,79],
[61,61,0,62,72,61,59,61,64],
[70,77,69,0,62,57,74,72,61],
[60,74,59,69,0,60,67,67,60],
[72,66,70,74,71,0,66,58,71],
[58,59,72,57,64,65,0,64,74],
[75,54,70,59,64,73,67,0,65],
[55,52,67,70,71,60,57,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,64,63,53,63,57,63,63],
[65,0,66,58,50,73,54,58,64],
[67,65,0,70,53,61,63,63,59],
[68,73,61,0,60,60,54,60,64],
[78,81,78,71,0,82,63,70,69],
[68,58,70,71,49,0,64,74,62],
[74,77,68,77,68,67,0,62,72],
[68,73,68,71,61,57,69,0,66],
[68,67,72,67,62,69,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,61,68,52,53,58,74,75],
[64,0,53,67,49,61,59,62,67],
[70,78,0,67,52,76,69,78,87],
[63,64,64,0,56,55,74,71,67],
[79,82,79,75,0,53,73,67,75],
[78,70,55,76,78,0,69,78,69],
[73,72,62,57,58,62,0,77,77],
[57,69,53,60,64,53,54,0,72],
[56,64,44,64,56,62,54,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,47,79,61,71,69,49,67],
[53,0,52,61,73,72,69,54,56],
[84,79,0,69,65,70,75,69,87],
[52,70,62,0,69,56,59,50,48],
[70,58,66,62,0,51,81,66,66],
[60,59,61,75,80,0,64,59,57],
[62,62,56,72,50,67,0,47,64],
[82,77,62,81,65,72,84,0,62],
[64,75,44,83,65,74,67,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,63,74,68,64,64,67,66],
[50,0,56,57,51,60,51,60,53],
[68,75,0,64,67,68,64,75,64],
[57,74,67,0,59,66,61,63,60],
[63,80,64,72,0,68,67,67,66],
[67,71,63,65,63,0,64,65,58],
[67,80,67,70,64,67,0,62,64],
[64,71,56,68,64,66,69,0,60],
[65,78,67,71,65,73,67,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,53,43,52,68,57,38,57],
[67,0,70,66,60,48,64,55,82],
[78,61,0,57,65,71,78,61,71],
[88,65,74,0,70,73,82,76,83],
[79,71,66,61,0,63,89,62,62],
[63,83,60,58,68,0,82,37,53],
[74,67,53,49,42,49,0,66,50],
[93,76,70,55,69,94,65,0,84],
[74,49,60,48,69,78,81,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,70,65,59,77,65,82,81],
[59,0,69,67,69,66,62,70,76],
[61,62,0,69,60,66,72,74,77],
[66,64,62,0,70,71,77,75,71],
[72,62,71,61,0,75,71,82,78],
[54,65,65,60,56,0,61,72,76],
[66,69,59,54,60,70,0,65,80],
[49,61,57,56,49,59,66,0,74],
[50,55,54,60,53,55,51,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,76,72,57,78,76,68,85],
[45,0,65,61,51,71,59,63,59],
[55,66,0,65,70,60,65,59,57],
[59,70,66,0,49,66,63,51,55],
[74,80,61,82,0,62,65,68,79],
[53,60,71,65,69,0,69,58,82],
[55,72,66,68,66,62,0,60,55],
[63,68,72,80,63,73,71,0,71],
[46,72,74,76,52,49,76,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,54,63,63,63,66,64,74],
[70,0,51,67,63,64,70,73,73],
[77,80,0,71,68,74,62,61,71],
[68,64,60,0,68,64,61,71,76],
[68,68,63,63,0,59,69,68,70],
[68,67,57,67,72,0,80,67,73],
[65,61,69,70,62,51,0,65,63],
[67,58,70,60,63,64,66,0,66],
[57,58,60,55,61,58,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,71,58,83,69,47,81],
[72,0,50,66,49,64,70,43,46],
[66,81,0,77,54,77,69,77,80],
[60,65,54,0,55,70,61,63,48],
[73,82,77,76,0,101,73,57,54],
[48,67,54,61,30,0,58,70,53],
[62,61,62,70,58,73,0,56,66],
[84,88,54,68,74,61,75,0,88],
[50,85,51,83,77,78,65,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,64,66,66,66,76,61,62],
[76,0,72,67,70,70,75,61,62],
[67,59,0,61,65,69,74,70,62],
[65,64,70,0,72,74,75,59,70],
[65,61,66,59,0,57,75,71,70],
[65,61,62,57,74,0,71,63,64],
[55,56,57,56,56,60,0,58,60],
[70,70,61,72,60,68,73,0,70],
[69,69,69,61,61,67,71,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,53,68,43,57,53,57,52],
[77,0,64,60,61,60,58,64,64],
[78,67,0,71,61,54,64,71,68],
[63,71,60,0,57,49,62,59,55],
[88,70,70,74,0,69,56,67,63],
[74,71,77,82,62,0,75,75,63],
[78,73,67,69,75,56,0,66,60],
[74,67,60,72,64,56,65,0,65],
[79,67,63,76,68,68,71,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,64,71,66,66,59,65,61],
[67,0,80,75,60,62,56,58,66],
[67,51,0,73,64,65,62,65,68],
[60,56,58,0,56,55,66,66,64],
[65,71,67,75,0,64,61,64,64],
[65,69,66,76,67,0,51,69,53],
[72,75,69,65,70,80,0,73,67],
[66,73,66,65,67,62,58,0,70],
[70,65,63,67,67,78,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,70,83,91,91,66,58,71],
[77,0,69,60,67,86,83,61,98],
[61,62,0,80,83,80,84,74,55],
[48,71,51,0,76,81,72,41,83],
[40,64,48,55,0,62,62,47,79],
[40,45,51,50,69,0,57,42,85],
[65,48,47,59,69,74,0,57,66],
[73,70,57,90,84,89,74,0,89],
[60,33,76,48,52,46,65,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,76,57,78,60,67,67,75],
[77,0,71,57,70,66,70,58,68],
[55,60,0,50,68,58,67,59,64],
[74,74,81,0,75,60,65,61,71],
[53,61,63,56,0,60,60,60,65],
[71,65,73,71,71,0,64,71,73],
[64,61,64,66,71,67,0,67,72],
[64,73,72,70,71,60,64,0,71],
[56,63,67,60,66,58,59,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,75,70,60,69,59,71,62],
[56,0,72,71,58,70,59,63,57],
[56,59,0,58,59,54,55,51,45],
[61,60,73,0,62,68,53,58,49],
[71,73,72,69,0,74,63,67,69],
[62,61,77,63,57,0,64,61,53],
[72,72,76,78,68,67,0,58,67],
[60,68,80,73,64,70,73,0,62],
[69,74,86,82,62,78,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,68,53,64,57,58,61,68],
[72,0,65,74,74,73,68,73,76],
[63,66,0,61,63,67,65,58,68],
[78,57,70,0,68,66,64,61,72],
[67,57,68,63,0,67,66,65,67],
[74,58,64,65,64,0,63,52,67],
[73,63,66,67,65,68,0,63,70],
[70,58,73,70,66,79,68,0,72],
[63,55,63,59,64,64,61,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,60,67,67,74,65,67,66],
[67,0,59,57,59,67,65,64,55],
[71,72,0,76,68,75,84,76,60],
[64,74,55,0,60,72,73,62,64],
[64,72,63,71,0,79,77,75,66],
[57,64,56,59,52,0,64,70,55],
[66,66,47,58,54,67,0,59,48],
[64,67,55,69,56,61,72,0,63],
[65,76,71,67,65,76,83,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,67,69,68,68,74,61,66],
[71,0,64,56,67,65,72,57,65],
[64,67,0,59,66,67,82,57,68],
[62,75,72,0,59,72,70,65,71],
[63,64,65,72,0,64,73,69,72],
[63,66,64,59,67,0,75,65,77],
[57,59,49,61,58,56,0,43,59],
[70,74,74,66,62,66,88,0,75],
[65,66,63,60,59,54,72,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,75,62,66,71,74,59,75],
[69,0,76,73,63,65,71,72,74],
[56,55,0,61,60,55,63,57,60],
[69,58,70,0,76,61,66,57,72],
[65,68,71,55,0,61,70,59,66],
[60,66,76,70,70,0,72,67,66],
[57,60,68,65,61,59,0,63,68],
[72,59,74,74,72,64,68,0,68],
[56,57,71,59,65,65,63,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,62,64,71,49,56,63,48],
[68,0,66,77,87,46,53,74,57],
[69,65,0,85,79,69,66,85,77],
[67,54,46,0,66,61,64,67,64],
[60,44,52,65,0,42,53,61,66],
[82,85,62,70,89,0,72,93,70],
[75,78,65,67,78,59,0,63,59],
[68,57,46,64,70,38,68,0,42],
[83,74,54,67,65,61,72,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,65,61,63,64,64,64,70],
[67,0,69,59,60,58,64,59,76],
[66,62,0,61,60,57,70,61,67],
[70,72,70,0,68,64,63,69,70],
[68,71,71,63,0,66,67,71,72],
[67,73,74,67,65,0,73,67,74],
[67,67,61,68,64,58,0,64,66],
[67,72,70,62,60,64,67,0,69],
[61,55,64,61,59,57,65,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,51,53,61,63,51,55,56],
[75,0,68,70,78,73,74,63,71],
[80,63,0,56,68,74,61,62,60],
[78,61,75,0,68,84,78,65,68],
[70,53,63,63,0,71,65,64,68],
[68,58,57,47,60,0,54,50,53],
[80,57,70,53,66,77,0,60,65],
[76,68,69,66,67,81,71,0,65],
[75,60,71,63,63,78,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,78,74,65,58,62,78,66],
[68,0,59,59,65,74,64,71,65],
[53,72,0,69,67,78,73,76,67],
[57,72,62,0,60,67,66,64,66],
[66,66,64,71,0,59,61,79,58],
[73,57,53,64,72,0,52,56,75],
[69,67,58,65,70,79,0,79,59],
[53,60,55,67,52,75,52,0,52],
[65,66,64,65,73,56,72,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,59,59,46,60,54,58,74],
[68,0,63,58,58,71,60,52,71],
[72,68,0,66,61,64,61,68,72],
[72,73,65,0,62,66,62,67,64],
[85,73,70,69,0,72,65,69,73],
[71,60,67,65,59,0,59,58,74],
[77,71,70,69,66,72,0,60,79],
[73,79,63,64,62,73,71,0,81],
[57,60,59,67,58,57,52,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,28,52,16,28,28,51,23],
[80,0,19,64,24,71,59,58,66],
[103,112,0,80,56,112,112,63,68],
[79,67,51,0,55,67,67,39,23],
[115,107,75,76,0,107,91,91,63],
[103,60,19,64,24,0,35,58,23],
[103,72,19,64,40,96,0,58,68],
[80,73,68,92,40,73,73,0,45],
[108,65,63,108,68,108,63,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,41,50,62,75,54,69,75],
[61,0,72,59,67,68,72,48,65],
[90,59,0,60,64,61,55,78,92],
[81,72,71,0,82,79,63,56,94],
[69,64,67,49,0,50,63,68,59],
[56,63,70,52,81,0,66,67,63],
[77,59,76,68,68,65,0,57,80],
[62,83,53,75,63,64,74,0,66],
[56,66,39,37,72,68,51,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,62,57,71,65,62,64,73],
[42,0,49,47,64,56,52,49,60],
[69,82,0,62,68,69,56,63,59],
[74,84,69,0,83,63,78,76,71],
[60,67,63,48,0,55,43,55,51],
[66,75,62,68,76,0,68,66,57],
[69,79,75,53,88,63,0,67,71],
[67,82,68,55,76,65,64,0,70],
[58,71,72,60,80,74,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,69,79,74,68,76,63,83],
[66,0,64,77,72,72,93,78,81],
[62,67,0,73,81,71,70,91,91],
[52,54,58,0,68,65,71,65,65],
[57,59,50,63,0,54,67,70,60],
[63,59,60,66,77,0,64,78,80],
[55,38,61,60,64,67,0,62,68],
[68,53,40,66,61,53,69,0,71],
[48,50,40,66,71,51,63,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,80,59,59,73,60,67,63],
[50,0,62,43,54,39,55,49,60],
[51,69,0,45,45,63,57,42,57],
[72,88,86,0,79,79,73,63,71],
[72,77,86,52,0,54,73,72,74],
[58,92,68,52,77,0,72,73,76],
[71,76,74,58,58,59,0,58,69],
[64,82,89,68,59,58,73,0,62],
[68,71,74,60,57,55,62,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,73,58,68,69,74,73,68],
[72,0,71,69,62,70,81,71,69],
[58,60,0,64,56,56,71,52,70],
[73,62,67,0,62,63,73,64,69],
[63,69,75,69,0,68,74,60,64],
[62,61,75,68,63,0,64,67,58],
[57,50,60,58,57,67,0,63,59],
[58,60,79,67,71,64,68,0,66],
[63,62,61,62,67,73,72,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,58,62,59,65,56,64,64],
[69,0,56,63,60,63,64,63,64],
[73,75,0,64,67,65,64,65,69],
[69,68,67,0,68,62,66,66,68],
[72,71,64,63,0,58,68,63,66],
[66,68,66,69,73,0,75,60,69],
[75,67,67,65,63,56,0,65,64],
[67,68,66,65,68,71,66,0,67],
[67,67,62,63,65,62,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,78,31,53,73,74,25,72],
[57,0,66,74,51,53,82,37,83],
[53,65,0,38,68,64,74,39,41],
[100,57,93,0,68,105,99,77,105],
[78,80,63,63,0,72,66,46,67],
[58,78,67,26,59,0,71,47,56],
[57,49,57,32,65,60,0,28,54],
[106,94,92,54,85,84,103,0,104],
[59,48,90,26,64,75,77,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,74,70,65,55,77,76,82],
[69,0,75,55,80,73,97,86,65],
[57,56,0,48,63,55,74,77,70],
[61,76,83,0,74,59,81,85,76],
[66,51,68,57,0,64,64,67,58],
[76,58,76,72,67,0,78,82,92],
[54,34,57,50,67,53,0,65,45],
[55,45,54,46,64,49,66,0,55],
[49,66,61,55,73,39,86,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,60,60,47,74,44,54,65],
[78,0,77,72,91,62,77,79,79],
[71,54,0,75,78,89,56,57,70],
[71,59,56,0,56,78,63,72,74],
[84,40,53,75,0,72,54,66,71],
[57,69,42,53,59,0,42,61,45],
[87,54,75,68,77,89,0,85,69],
[77,52,74,59,65,70,46,0,67],
[66,52,61,57,60,86,62,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,57,61,74,78,75,85,72],
[62,0,72,78,65,85,70,80,68],
[74,59,0,86,75,96,66,80,61],
[70,53,45,0,53,81,48,70,53],
[57,66,56,78,0,86,66,71,71],
[53,46,35,50,45,0,50,55,43],
[56,61,65,83,65,81,0,78,70],
[46,51,51,61,60,76,53,0,54],
[59,63,70,78,60,88,61,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,91,85,84,87,64,64,73],
[30,0,78,95,80,77,46,65,54],
[40,53,0,80,68,66,46,55,54],
[46,36,51,0,72,68,26,58,54],
[47,51,63,59,0,72,56,55,45],
[44,54,65,63,59,0,42,53,37],
[67,85,85,105,75,89,0,93,62],
[67,66,76,73,76,78,38,0,71],
[58,77,77,77,86,94,69,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,62,64,65,65,69,63,60],
[75,0,61,74,62,65,73,68,64],
[69,70,0,72,72,77,71,72,63],
[67,57,59,0,68,64,65,60,61],
[66,69,59,63,0,72,70,68,76],
[66,66,54,67,59,0,74,58,63],
[62,58,60,66,61,57,0,58,68],
[68,63,59,71,63,73,73,0,64],
[71,67,68,70,55,68,63,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,58,76,82,63,62,77,67],
[70,0,56,65,74,58,62,56,60],
[73,75,0,67,72,83,64,74,67],
[55,66,64,0,66,58,64,63,70],
[49,57,59,65,0,49,46,74,50],
[68,73,48,73,82,0,60,67,67],
[69,69,67,67,85,71,0,68,61],
[54,75,57,68,57,64,63,0,59],
[64,71,64,61,81,64,70,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,75,69,68,68,61,66,60],
[59,0,75,70,67,63,61,62,68],
[56,56,0,53,56,59,56,54,64],
[62,61,78,0,63,64,62,55,61],
[63,64,75,68,0,69,62,63,63],
[63,68,72,67,62,0,62,61,65],
[70,70,75,69,69,69,0,65,66],
[65,69,77,76,68,70,66,0,67],
[71,63,67,70,68,66,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,66,77,72,81,69,61,73],
[52,0,50,61,59,54,48,48,50],
[65,81,0,68,70,75,75,70,67],
[54,70,63,0,63,74,61,56,66],
[59,72,61,68,0,63,52,51,79],
[50,77,56,57,68,0,51,56,61],
[62,83,56,70,79,80,0,58,73],
[70,83,61,75,80,75,73,0,84],
[58,81,64,65,52,70,58,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,131,57,87,87,0,87,57],
[74,0,74,30,30,87,30,30,87],
[0,57,0,57,30,87,0,0,57],
[74,101,74,0,30,131,0,30,57],
[44,101,101,101,0,101,0,57,57],
[44,44,44,0,30,0,0,0,57],
[131,101,131,131,131,131,0,87,57],
[44,101,131,101,74,131,44,0,101],
[74,44,74,74,74,74,74,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,67,74,39,59,70,60,57],
[63,0,50,66,43,59,71,72,49],
[64,81,0,64,69,53,46,52,66],
[57,65,67,0,26,33,65,77,54],
[92,88,62,105,0,77,84,73,70],
[72,72,78,98,54,0,88,84,72],
[61,60,85,66,47,43,0,73,61],
[71,59,79,54,58,47,58,0,82],
[74,82,65,77,61,59,70,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,73,74,68,79,70,86,61],
[48,0,64,63,63,60,57,75,57],
[58,67,0,59,63,77,59,76,64],
[57,68,72,0,73,67,59,89,75],
[63,68,68,58,0,77,60,80,59],
[52,71,54,64,54,0,64,78,55],
[61,74,72,72,71,67,0,79,69],
[45,56,55,42,51,53,52,0,56],
[70,74,67,56,72,76,62,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,71,68,77,72,61,73,60],
[55,0,60,58,59,61,55,57,62],
[60,71,0,57,77,72,60,64,69],
[63,73,74,0,72,64,67,72,70],
[54,72,54,59,0,64,58,64,50],
[59,70,59,67,67,0,57,64,62],
[70,76,71,64,73,74,0,77,72],
[58,74,67,59,67,67,54,0,65],
[71,69,62,61,81,69,59,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,48,48,63,65,57,66,63],
[58,0,50,55,39,67,54,55,62],
[83,81,0,78,64,89,76,87,69],
[83,76,53,0,59,85,80,77,71],
[68,92,67,72,0,83,58,72,72],
[66,64,42,46,48,0,66,68,63],
[74,77,55,51,73,65,0,74,71],
[65,76,44,54,59,63,57,0,53],
[68,69,62,60,59,68,60,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,48,108,107,108,87,82,104],
[20,0,20,102,53,102,56,102,56],
[83,111,0,91,83,111,59,85,83],
[23,29,40,0,49,87,29,31,29],
[24,78,48,82,0,88,54,52,50],
[23,29,20,44,43,0,29,48,46],
[44,75,72,102,77,102,0,72,70],
[49,29,46,100,79,83,59,0,76],
[27,75,48,102,81,85,61,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,66,64,66,59,63,63],
[66,0,72,57,65,65,69,72,62],
[64,59,0,53,61,68,52,74,57],
[65,74,78,0,59,61,60,69,67],
[67,66,70,72,0,67,62,62,55],
[65,66,63,70,64,0,70,73,56],
[72,62,79,71,69,61,0,73,69],
[68,59,57,62,69,58,58,0,60],
[68,69,74,64,76,75,62,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,58,75,73,65,59,61,79],
[57,0,69,71,80,60,55,63,77],
[73,62,0,81,85,56,68,72,75],
[56,60,50,0,74,59,50,64,68],
[58,51,46,57,0,52,48,56,73],
[66,71,75,72,79,0,70,64,67],
[72,76,63,81,83,61,0,73,70],
[70,68,59,67,75,67,58,0,72],
[52,54,56,63,58,64,61,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,78,67,71,73,64,60,69],
[68,0,74,73,72,62,67,62,68],
[53,57,0,64,65,63,59,56,56],
[64,58,67,0,64,64,63,59,63],
[60,59,66,67,0,67,58,55,62],
[58,69,68,67,64,0,62,49,61],
[67,64,72,68,73,69,0,71,64],
[71,69,75,72,76,82,60,0,62],
[62,63,75,68,69,70,67,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,51,75,70,58,58,61,62],
[63,0,62,57,65,67,58,59,65],
[80,69,0,60,63,74,58,80,65],
[56,74,71,0,75,68,68,92,69],
[61,66,68,56,0,64,61,75,75],
[73,64,57,63,67,0,60,66,64],
[73,73,73,63,70,71,0,69,65],
[70,72,51,39,56,65,62,0,69],
[69,66,66,62,56,67,66,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,34,49,60,54,38,51,85],
[73,0,55,71,33,69,74,67,64],
[97,76,0,48,54,84,64,72,72],
[82,60,83,0,72,104,68,124,93],
[71,98,77,59,0,93,71,75,124],
[77,62,47,27,38,0,54,50,58],
[93,57,67,63,60,77,0,84,77],
[80,64,59,7,56,81,47,0,76],
[46,67,59,38,7,73,54,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,87,69,73,80,78,49,60],
[65,0,83,77,76,73,71,63,49],
[44,48,0,51,51,59,52,53,47],
[62,54,80,0,49,80,55,61,61],
[58,55,80,82,0,89,79,65,66],
[51,58,72,51,42,0,70,39,58],
[53,60,79,76,52,61,0,62,66],
[82,68,78,70,66,92,69,0,57],
[71,82,84,70,65,73,65,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,64,67,73,72,69,72,66],
[59,0,50,55,63,74,59,70,61],
[67,81,0,68,71,66,61,67,70],
[64,76,63,0,75,76,60,70,72],
[58,68,60,56,0,70,55,63,64],
[59,57,65,55,61,0,68,65,60],
[62,72,70,71,76,63,0,69,63],
[59,61,64,61,68,66,62,0,66],
[65,70,61,59,67,71,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,59,75,67,52,72,67,62],
[68,0,54,64,72,65,79,80,67],
[72,77,0,92,78,78,82,84,63],
[56,67,39,0,71,57,77,68,68],
[64,59,53,60,0,53,67,74,56],
[79,66,53,74,78,0,84,76,60],
[59,52,49,54,64,47,0,71,53],
[64,51,47,63,57,55,60,0,54],
[69,64,68,63,75,71,78,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,66,69,65,66,68,68,66],
[69,0,63,71,71,70,67,76,70],
[65,68,0,78,69,71,70,80,71],
[62,60,53,0,65,61,60,72,61],
[66,60,62,66,0,64,66,73,66],
[65,61,60,70,67,0,67,70,66],
[63,64,61,71,65,64,0,75,68],
[63,55,51,59,58,61,56,0,65],
[65,61,60,70,65,65,63,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,58,60,53,60,78,51,57],
[72,0,77,71,78,68,54,60,58],
[73,54,0,66,77,77,61,68,65],
[71,60,65,0,65,66,47,64,75],
[78,53,54,66,0,58,53,52,55],
[71,63,54,65,73,0,58,67,60],
[53,77,70,84,78,73,0,65,68],
[80,71,63,67,79,64,66,0,68],
[74,73,66,56,76,71,63,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,65,89,68,89,131,89,89],
[87,0,89,45,24,45,87,89,45],
[66,42,0,66,66,66,66,110,66],
[42,86,65,0,24,86,131,107,87],
[63,107,65,107,0,107,107,107,107],
[42,86,65,45,24,0,131,107,87],
[0,44,65,0,24,0,0,44,45],
[42,42,21,24,24,24,87,0,45],
[42,86,65,44,24,44,86,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,90,98,75,104,63,98,104],
[56,0,96,90,61,123,99,125,88],
[41,35,0,49,41,110,84,64,56],
[33,41,82,0,32,108,76,117,88],
[56,70,90,99,0,125,99,99,70],
[27,8,21,23,6,0,43,23,35],
[68,32,47,55,32,88,0,76,88],
[33,6,67,14,32,108,55,0,47],
[27,43,75,43,61,96,43,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,66,70,62,66,65,65,72],
[73,0,65,79,80,75,75,67,88],
[65,66,0,67,70,62,71,64,74],
[61,52,64,0,72,54,60,64,76],
[69,51,61,59,0,71,57,53,63],
[65,56,69,77,60,0,64,61,66],
[66,56,60,71,74,67,0,66,67],
[66,64,67,67,78,70,65,0,81],
[59,43,57,55,68,65,64,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,71,61,62,72,60,60],
[61,0,59,70,75,51,65,49,48],
[65,72,0,74,74,49,84,68,61],
[60,61,57,0,55,50,75,58,65],
[70,56,57,76,0,60,69,58,62],
[69,80,82,81,71,0,96,58,75],
[59,66,47,56,62,35,0,41,43],
[71,82,63,73,73,73,90,0,71],
[71,83,70,66,69,56,88,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,60,76,71,67,68,67,46],
[60,0,72,63,67,50,71,60,43],
[71,59,0,84,67,74,59,67,56],
[55,68,47,0,64,68,71,74,47],
[60,64,64,67,0,63,61,63,57],
[64,81,57,63,68,0,70,75,61],
[63,60,72,60,70,61,0,77,66],
[64,71,64,57,68,56,54,0,66],
[85,88,75,84,74,70,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,65,61,56,60,75,60,72],
[56,0,67,67,66,68,84,65,71],
[66,64,0,61,61,58,69,65,57],
[70,64,70,0,61,60,71,78,51],
[75,65,70,70,0,68,66,70,69],
[71,63,73,71,63,0,81,72,55],
[56,47,62,60,65,50,0,63,62],
[71,66,66,53,61,59,68,0,73],
[59,60,74,80,62,76,69,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,74,53,60,75,56,75,56],
[73,0,76,66,72,68,59,62,59],
[57,55,0,61,52,61,54,69,60],
[78,65,70,0,69,71,65,72,71],
[71,59,79,62,0,75,59,77,55],
[56,63,70,60,56,0,61,57,59],
[75,72,77,66,72,70,0,82,65],
[56,69,62,59,54,74,49,0,55],
[75,72,71,60,76,72,66,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,57,69,45,67,70,72,79],
[48,0,50,79,40,56,42,54,85],
[74,81,0,85,74,70,63,69,94],
[62,52,46,0,43,62,56,76,70],
[86,91,57,88,0,90,82,103,73],
[64,75,61,69,41,0,45,78,80],
[61,89,68,75,49,86,0,88,86],
[59,77,62,55,28,53,43,0,75],
[52,46,37,61,58,51,45,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,67,60,67,65,69,66,74],
[54,0,64,58,59,71,65,73,62],
[64,67,0,63,68,63,62,63,62],
[71,73,68,0,53,69,68,68,64],
[64,72,63,78,0,62,66,69,78],
[66,60,68,62,69,0,67,69,68],
[62,66,69,63,65,64,0,59,60],
[65,58,68,63,62,62,72,0,63],
[57,69,69,67,53,63,71,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,46,59,68,69,54,67,62],
[56,0,58,71,62,73,65,54,44],
[85,73,0,74,71,75,78,65,75],
[72,60,57,0,55,58,66,61,63],
[63,69,60,76,0,73,66,60,68],
[62,58,56,73,58,0,61,50,53],
[77,66,53,65,65,70,0,64,61],
[64,77,66,70,71,81,67,0,62],
[69,87,56,68,63,78,70,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,60,79,76,65,69,72,70],
[68,0,63,76,69,70,62,67,65],
[71,68,0,74,68,61,62,74,74],
[52,55,57,0,59,64,58,62,58],
[55,62,63,72,0,69,49,65,70],
[66,61,70,67,62,0,55,67,66],
[62,69,69,73,82,76,0,72,66],
[59,64,57,69,66,64,59,0,67],
[61,66,57,73,61,65,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,66,62,73,58,67,61],
[64,0,66,73,73,75,66,63,71],
[64,65,0,70,64,74,66,65,62],
[65,58,61,0,68,60,58,58,66],
[69,58,67,63,0,70,60,61,65],
[58,56,57,71,61,0,61,60,57],
[73,65,65,73,71,70,0,66,68],
[64,68,66,73,70,71,65,0,71],
[70,60,69,65,66,74,63,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,68,67,70,71,60,58,75],
[70,0,67,62,81,78,68,67,80],
[63,64,0,69,64,64,49,54,73],
[64,69,62,0,82,73,52,58,66],
[61,50,67,49,0,73,58,55,69],
[60,53,67,58,58,0,48,64,61],
[71,63,82,79,73,83,0,72,76],
[73,64,77,73,76,67,59,0,74],
[56,51,58,65,62,70,55,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,69,75,79,82,70,68,62],
[66,0,79,69,73,80,67,61,69],
[62,52,0,71,68,66,60,61,69],
[56,62,60,0,66,80,57,56,63],
[52,58,63,65,0,70,62,62,61],
[49,51,65,51,61,0,51,57,59],
[61,64,71,74,69,80,0,68,75],
[63,70,70,75,69,74,63,0,63],
[69,62,62,68,70,72,56,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,63,60,60,74,64,58,58],
[75,0,60,64,60,63,49,61,72],
[68,71,0,68,66,73,64,62,72],
[71,67,63,0,63,68,54,52,61],
[71,71,65,68,0,67,68,56,57],
[57,68,58,63,64,0,66,54,63],
[67,82,67,77,63,65,0,66,57],
[73,70,69,79,75,77,65,0,72],
[73,59,59,70,74,68,74,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,49,59,49,61,54,64,58],
[61,0,54,53,47,55,51,60,64],
[82,77,0,61,67,69,71,68,70],
[72,78,70,0,59,78,76,75,77],
[82,84,64,72,0,72,73,68,67],
[70,76,62,53,59,0,58,59,61],
[77,80,60,55,58,73,0,65,51],
[67,71,63,56,63,72,66,0,54],
[73,67,61,54,64,70,80,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,57,88,57,74,43,85,66],
[81,0,76,73,80,83,79,82,64],
[74,55,0,79,65,43,60,67,51],
[43,58,52,0,42,57,31,57,67],
[74,51,66,89,0,64,70,89,72],
[57,48,88,74,67,0,53,71,73],
[88,52,71,100,61,78,0,81,71],
[46,49,64,74,42,60,50,0,53],
[65,67,80,64,59,58,60,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,73,61,69,67,74,77,68],
[58,0,78,64,66,63,63,78,62],
[58,53,0,57,58,60,56,67,68],
[70,67,74,0,77,63,58,76,66],
[62,65,73,54,0,68,59,76,59],
[64,68,71,68,63,0,64,88,71],
[57,68,75,73,72,67,0,64,66],
[54,53,64,55,55,43,67,0,51],
[63,69,63,65,72,60,65,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,64,61,61,61,54,43,63],
[78,0,63,63,68,69,80,66,73],
[67,68,0,77,59,67,63,67,72],
[70,68,54,0,60,58,61,64,68],
[70,63,72,71,0,68,73,59,67],
[70,62,64,73,63,0,63,69,80],
[77,51,68,70,58,68,0,71,76],
[88,65,64,67,72,62,60,0,70],
[68,58,59,63,64,51,55,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,74,72,68,71,65,66,80],
[69,0,71,74,65,79,73,79,61],
[57,60,0,65,64,70,59,66,57],
[59,57,66,0,56,60,72,66,65],
[63,66,67,75,0,68,61,67,78],
[60,52,61,71,63,0,58,70,68],
[66,58,72,59,70,73,0,59,47],
[65,52,65,65,64,61,72,0,60],
[51,70,74,66,53,63,84,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,63,64,60,64,69,67,65],
[71,0,72,65,67,61,70,65,69],
[68,59,0,65,60,61,71,68,68],
[67,66,66,0,59,69,68,68,66],
[71,64,71,72,0,65,73,68,70],
[67,70,70,62,66,0,74,75,71],
[62,61,60,63,58,57,0,62,70],
[64,66,63,63,63,56,69,0,65],
[66,62,63,65,61,60,61,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,81,66,65,65,77,69,62],
[50,0,56,58,34,41,44,34,42],
[50,75,0,58,55,44,62,51,58],
[65,73,73,0,54,58,56,52,54],
[66,97,76,77,0,74,74,65,63],
[66,90,87,73,57,0,72,76,60],
[54,87,69,75,57,59,0,64,70],
[62,97,80,79,66,55,67,0,65],
[69,89,73,77,68,71,61,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,68,77,78,65,77,76,73],
[54,0,71,68,72,72,69,78,65],
[63,60,0,68,69,58,58,64,57],
[54,63,63,0,61,66,65,63,57],
[53,59,62,70,0,56,58,57,50],
[66,59,73,65,75,0,68,73,56],
[54,62,73,66,73,63,0,72,62],
[55,53,67,68,74,58,59,0,55],
[58,66,74,74,81,75,69,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,88,77,69,45,102,72,94],
[66,0,67,72,86,48,63,72,60],
[43,64,0,67,67,56,55,93,76],
[54,59,64,0,72,65,90,68,74],
[62,45,64,59,0,56,81,67,76],
[86,83,75,66,75,0,80,61,75],
[29,68,76,41,50,51,0,86,84],
[59,59,38,63,64,70,45,0,60],
[37,71,55,57,55,56,47,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,56,49,60,62,54,50,60],
[74,0,69,55,77,75,59,57,66],
[75,62,0,64,69,67,54,63,64],
[82,76,67,0,72,64,64,59,65],
[71,54,62,59,0,43,51,45,60],
[69,56,64,67,88,0,65,67,67],
[77,72,77,67,80,66,0,67,65],
[81,74,68,72,86,64,64,0,71],
[71,65,67,66,71,64,66,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,73,66,63,73,69,67,71],
[65,0,75,67,78,74,71,66,75],
[58,56,0,78,75,62,66,62,73],
[65,64,53,0,72,68,72,67,79],
[68,53,56,59,0,78,62,72,83],
[58,57,69,63,53,0,69,71,76],
[62,60,65,59,69,62,0,65,78],
[64,65,69,64,59,60,66,0,76],
[60,56,58,52,48,55,53,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,58,59,72,65,61,69,61],
[69,0,60,69,74,79,63,72,60],
[73,71,0,65,80,73,61,77,65],
[72,62,66,0,73,76,61,68,60],
[59,57,51,58,0,68,57,54,66],
[66,52,58,55,63,0,54,61,60],
[70,68,70,70,74,77,0,70,61],
[62,59,54,63,77,70,61,0,63],
[70,71,66,71,65,71,70,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,73,69,76,73,65,60,70],
[66,0,68,63,79,65,68,59,65],
[58,63,0,64,76,75,57,55,68],
[62,68,67,0,78,60,65,52,57],
[55,52,55,53,0,60,60,50,59],
[58,66,56,71,71,0,59,63,68],
[66,63,74,66,71,72,0,60,76],
[71,72,76,79,81,68,71,0,64],
[61,66,63,74,72,63,55,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,71,56,55,49,61,53,63],
[66,0,67,62,68,50,64,62,68],
[60,64,0,56,47,42,61,46,65],
[75,69,75,0,64,55,71,58,73],
[76,63,84,67,0,55,72,70,74],
[82,81,89,76,76,0,82,63,81],
[70,67,70,60,59,49,0,44,68],
[78,69,85,73,61,68,87,0,79],
[68,63,66,58,57,50,63,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,78,76,70,72,75,71,62],
[66,0,67,55,65,76,75,69,64],
[53,64,0,54,59,67,67,66,57],
[55,76,77,0,66,71,78,69,62],
[61,66,72,65,0,69,65,84,65],
[59,55,64,60,62,0,66,66,68],
[56,56,64,53,66,65,0,72,59],
[60,62,65,62,47,65,59,0,69],
[69,67,74,69,66,63,72,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,72,65,62,52,64,53,72],
[59,0,68,61,69,63,70,71,72],
[59,63,0,55,63,52,51,63,68],
[66,70,76,0,68,55,57,67,79],
[69,62,68,63,0,64,58,64,73],
[79,68,79,76,67,0,63,62,87],
[67,61,80,74,73,68,0,67,76],
[78,60,68,64,67,69,64,0,69],
[59,59,63,52,58,44,55,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,76,95,82,75,74,72,58],
[61,0,64,71,68,79,44,65,57],
[55,67,0,76,67,83,64,65,51],
[36,60,55,0,57,66,44,59,48],
[49,63,64,74,0,76,46,63,51],
[56,52,48,65,55,0,39,57,48],
[57,87,67,87,85,92,0,66,68],
[59,66,66,72,68,74,65,0,58],
[73,74,80,83,80,83,63,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,88,81,76,68,43,89,70],
[44,0,43,69,50,87,5,32,49],
[43,88,0,64,43,62,49,63,37],
[50,62,67,0,61,94,49,64,38],
[55,81,88,70,0,81,70,81,50],
[63,44,69,37,50,0,5,46,49],
[88,126,82,82,61,126,0,64,70],
[42,99,68,67,50,85,67,0,47],
[61,82,94,93,81,82,61,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,59,55,64,60,63,65,67],
[61,0,51,59,58,64,49,50,58],
[72,80,0,63,75,68,68,68,70],
[76,72,68,0,75,72,66,62,66],
[67,73,56,56,0,66,58,61,56],
[71,67,63,59,65,0,64,64,60],
[68,82,63,65,73,67,0,62,66],
[66,81,63,69,70,67,69,0,70],
[64,73,61,65,75,71,65,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,58,65,54,58,62,52,62],
[51,0,60,54,46,37,48,40,47],
[73,71,0,52,56,50,57,50,54],
[66,77,79,0,56,54,64,49,69],
[77,85,75,75,0,71,71,60,73],
[73,94,81,77,60,0,69,68,77],
[69,83,74,67,60,62,0,62,68],
[79,91,81,82,71,63,69,0,66],
[69,84,77,62,58,54,63,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,58,48,52,60,61,55,50],
[70,0,64,61,56,72,63,66,57],
[73,67,0,57,66,69,69,66,58],
[83,70,74,0,61,72,76,69,65],
[79,75,65,70,0,69,82,69,68],
[71,59,62,59,62,0,70,62,62],
[70,68,62,55,49,61,0,60,61],
[76,65,65,62,62,69,71,0,58],
[81,74,73,66,63,69,70,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,58,70,61,69,70,68,79],
[58,0,67,68,75,70,75,68,71],
[73,64,0,65,74,70,60,67,66],
[61,63,66,0,66,66,55,62,72],
[70,56,57,65,0,66,63,60,62],
[62,61,61,65,65,0,61,68,73],
[61,56,71,76,68,70,0,67,80],
[63,63,64,69,71,63,64,0,71],
[52,60,65,59,69,58,51,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,51,55,68,59,91,50,69],
[82,0,69,50,69,77,82,52,81],
[80,62,0,64,62,81,83,72,88],
[76,81,67,0,76,69,107,99,59],
[63,62,69,55,0,81,100,78,88],
[72,54,50,62,50,0,82,60,55],
[40,49,48,24,31,49,0,58,48],
[81,79,59,32,53,71,73,0,67],
[62,50,43,72,43,76,83,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,69,71,66,67,63,67,67],
[61,0,71,69,59,68,58,69,64],
[62,60,0,65,65,70,58,63,56],
[60,62,66,0,67,71,62,58,60],
[65,72,66,64,0,66,54,63,64],
[64,63,61,60,65,0,58,69,60],
[68,73,73,69,77,73,0,65,69],
[64,62,68,73,68,62,66,0,58],
[64,67,75,71,67,71,62,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,70,57,60,60,58,68,63],
[73,0,76,63,64,79,54,70,65],
[61,55,0,58,51,71,55,58,64],
[74,68,73,0,63,71,62,72,73],
[71,67,80,68,0,85,71,65,70],
[71,52,60,60,46,0,58,61,62],
[73,77,76,69,60,73,0,63,72],
[63,61,73,59,66,70,68,0,66],
[68,66,67,58,61,69,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,65,82,63,65,77,82,60],
[56,0,62,75,50,63,55,67,65],
[66,69,0,78,60,72,60,78,64],
[49,56,53,0,58,63,59,58,57],
[68,81,71,73,0,67,56,72,58],
[66,68,59,68,64,0,54,58,51],
[54,76,71,72,75,77,0,84,68],
[49,64,53,73,59,73,47,0,50],
[71,66,67,74,73,80,63,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,66,66,69,72,73,65,78],
[60,0,54,63,71,55,69,68,62],
[65,77,0,72,77,69,78,69,80],
[65,68,59,0,68,67,66,69,69],
[62,60,54,63,0,60,62,68,67],
[59,76,62,64,71,0,77,73,77],
[58,62,53,65,69,54,0,68,72],
[66,63,62,62,63,58,63,0,62],
[53,69,51,62,64,54,59,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,76,75,76,66,80,60,89],
[51,0,78,69,73,71,76,62,56],
[55,53,0,61,49,70,72,66,67],
[56,62,70,0,50,59,58,55,54],
[55,58,82,81,0,87,72,64,75],
[65,60,61,72,44,0,77,56,75],
[51,55,59,73,59,54,0,55,60],
[71,69,65,76,67,75,76,0,70],
[42,75,64,77,56,56,71,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,82,64,55,71,69,35,64],
[49,0,73,46,53,31,52,42,56],
[49,58,0,29,32,44,62,25,53],
[67,85,102,0,71,62,79,59,78],
[76,78,99,60,0,78,72,70,90],
[60,100,87,69,53,0,92,68,72],
[62,79,69,52,59,39,0,66,70],
[96,89,106,72,61,63,65,0,73],
[67,75,78,53,41,59,61,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,79,78,66,92,61,75,64],
[64,0,38,59,65,96,52,51,60],
[52,93,0,74,68,109,62,99,70],
[53,72,57,0,48,76,45,58,63],
[65,66,63,83,0,109,48,74,83],
[39,35,22,55,22,0,23,36,45],
[70,79,69,86,83,108,0,83,58],
[56,80,32,73,57,95,48,0,59],
[67,71,61,68,48,86,73,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,65,63,66,73,70,69,72],
[59,0,67,74,74,73,66,67,70],
[66,64,0,63,64,75,66,68,67],
[68,57,68,0,62,65,65,64,78],
[65,57,67,69,0,69,70,61,72],
[58,58,56,66,62,0,66,60,69],
[61,65,65,66,61,65,0,62,72],
[62,64,63,67,70,71,69,0,72],
[59,61,64,53,59,62,59,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,60,78,59,73,80,87,65],
[62,0,56,59,59,47,69,75,50],
[71,75,0,80,67,58,60,68,66],
[53,72,51,0,47,38,44,61,47],
[72,72,64,84,0,59,66,83,63],
[58,84,73,93,72,0,68,81,67],
[51,62,71,87,65,63,0,72,56],
[44,56,63,70,48,50,59,0,38],
[66,81,65,84,68,64,75,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,78,63,67,69,74,66,76],
[72,0,65,67,60,64,63,69,72],
[53,66,0,45,54,53,50,53,67],
[68,64,86,0,64,72,70,68,78],
[64,71,77,67,0,59,67,64,69],
[62,67,78,59,72,0,73,77,74],
[57,68,81,61,64,58,0,76,75],
[65,62,78,63,67,54,55,0,63],
[55,59,64,53,62,57,56,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,75,90,77,44,61,61,51],
[58,0,67,52,71,62,63,58,66],
[56,64,0,78,61,57,64,62,55],
[41,79,53,0,64,47,77,56,48],
[54,60,70,67,0,76,77,64,74],
[87,69,74,84,55,0,68,70,71],
[70,68,67,54,54,63,0,53,70],
[70,73,69,75,67,61,78,0,72],
[80,65,76,83,57,60,61,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,55,74,66,57,72,60,68],
[73,0,57,68,60,57,68,63,63],
[76,74,0,82,66,56,83,73,72],
[57,63,49,0,53,56,59,60,61],
[65,71,65,78,0,66,78,61,71],
[74,74,75,75,65,0,79,69,74],
[59,63,48,72,53,52,0,57,63],
[71,68,58,71,70,62,74,0,65],
[63,68,59,70,60,57,68,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,69,59,42,60,55,47,55],
[72,0,54,52,60,55,55,39,53],
[62,77,0,68,69,54,68,70,72],
[72,79,63,0,70,64,59,63,74],
[89,71,62,61,0,66,70,49,64],
[71,76,77,67,65,0,57,55,70],
[76,76,63,72,61,74,0,66,67],
[84,92,61,68,82,76,65,0,71],
[76,78,59,57,67,61,64,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,60,86,51,64,64,87,90],
[77,0,81,93,55,76,92,79,72],
[71,50,0,75,45,55,86,66,81],
[45,38,56,0,56,69,64,70,69],
[80,76,86,75,0,65,90,62,82],
[67,55,76,62,66,0,59,53,69],
[67,39,45,67,41,72,0,51,46],
[44,52,65,61,69,78,80,0,70],
[41,59,50,62,49,62,85,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,65,62,63,81,72,74,67],
[55,0,63,57,61,61,52,62,68],
[66,68,0,60,56,78,59,55,79],
[69,74,71,0,68,71,66,60,61],
[68,70,75,63,0,72,64,73,77],
[50,70,53,60,59,0,58,48,62],
[59,79,72,65,67,73,0,67,63],
[57,69,76,71,58,83,64,0,77],
[64,63,52,70,54,69,68,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,60,62,76,62,70,62,63],
[70,0,64,59,65,68,66,62,63],
[71,67,0,67,77,67,78,73,61],
[69,72,64,0,71,77,72,68,61],
[55,66,54,60,0,65,68,63,56],
[69,63,64,54,66,0,61,61,59],
[61,65,53,59,63,70,0,64,55],
[69,69,58,63,68,70,67,0,67],
[68,68,70,70,75,72,76,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,77,69,72,71,66,49,67],
[59,0,62,67,67,63,72,71,64],
[54,69,0,71,68,54,57,54,57],
[62,64,60,0,73,66,68,59,69],
[59,64,63,58,0,63,66,59,67],
[60,68,77,65,68,0,65,52,71],
[65,59,74,63,65,66,0,53,61],
[82,60,77,72,72,79,78,0,72],
[64,67,74,62,64,60,70,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,78,85,74,62,68,74,66],
[40,0,65,45,44,48,64,40,26],
[53,66,0,56,58,54,64,65,61],
[46,86,75,0,50,52,68,51,65],
[57,87,73,81,0,66,82,63,75],
[69,83,77,79,65,0,77,84,71],
[63,67,67,63,49,54,0,68,56],
[57,91,66,80,68,47,63,0,75],
[65,105,70,66,56,60,75,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,70,73,65,82,67,71],
[62,0,73,73,73,75,69,61,49],
[60,58,0,72,71,67,74,55,63],
[61,58,59,0,60,61,72,61,56],
[58,58,60,71,0,65,71,64,49],
[66,56,64,70,66,0,69,66,62],
[49,62,57,59,60,62,0,51,57],
[64,70,76,70,67,65,80,0,61],
[60,82,68,75,82,69,74,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,60,62,81,81,79,60],
[62,0,68,70,58,59,64,52,74],
[60,63,0,62,67,70,78,81,83],
[71,61,69,0,53,70,76,68,68],
[69,73,64,78,0,73,80,79,54],
[50,72,61,61,58,0,70,67,55],
[50,67,53,55,51,61,0,58,39],
[52,79,50,63,52,64,73,0,74],
[71,57,48,63,77,76,92,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,60,73,79,68,66,64,85],
[69,0,68,92,76,87,66,60,81],
[71,63,0,82,94,80,76,67,85],
[58,39,49,0,66,70,52,54,72],
[52,55,37,65,0,62,53,51,61],
[63,44,51,61,69,0,50,47,70],
[65,65,55,79,78,81,0,49,85],
[67,71,64,77,80,84,82,0,86],
[46,50,46,59,70,61,46,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,65,75,68,64,58,69,71],
[64,0,62,70,63,61,60,63,65],
[66,69,0,69,66,64,68,60,66],
[56,61,62,0,61,58,55,61,61],
[63,68,65,70,0,65,63,66,72],
[67,70,67,73,66,0,64,68,69],
[73,71,63,76,68,67,0,64,70],
[62,68,71,70,65,63,67,0,63],
[60,66,65,70,59,62,61,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,71,69,62,68,55,57,63],
[66,0,68,73,70,59,56,63,52],
[60,63,0,70,54,62,61,54,48],
[62,58,61,0,65,53,50,51,56],
[69,61,77,66,0,60,63,61,66],
[63,72,69,78,71,0,60,68,78],
[76,75,70,81,68,71,0,61,71],
[74,68,77,80,70,63,70,0,64],
[68,79,83,75,65,53,60,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,56,82,75,58,75,54,74],
[53,0,40,73,67,53,52,35,50],
[75,91,0,77,66,62,58,53,74],
[49,58,54,0,59,68,51,46,52],
[56,64,65,72,0,61,60,66,61],
[73,78,69,63,70,0,67,60,90],
[56,79,73,80,71,64,0,41,61],
[77,96,78,85,65,71,90,0,85],
[57,81,57,79,70,41,70,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,63,57,55,61,73,76,67],
[70,0,62,68,65,70,78,85,78],
[68,69,0,63,70,67,78,81,83],
[74,63,68,0,82,66,83,88,87],
[76,66,61,49,0,66,79,75,90],
[70,61,64,65,65,0,82,75,78],
[58,53,53,48,52,49,0,61,64],
[55,46,50,43,56,56,70,0,59],
[64,53,48,44,41,53,67,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,60,72,62,61,66,58,68],
[66,0,72,71,69,74,64,68,75],
[71,59,0,69,59,63,60,59,68],
[59,60,62,0,56,60,60,56,62],
[69,62,72,75,0,63,70,65,72],
[70,57,68,71,68,0,68,60,66],
[65,67,71,71,61,63,0,63,70],
[73,63,72,75,66,71,68,0,74],
[63,56,63,69,59,65,61,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,70,108,65,104,70,70,74],
[72,0,69,96,84,97,67,54,80],
[61,62,0,99,92,102,83,67,78],
[23,35,32,0,23,50,55,38,36],
[66,47,39,108,0,102,62,75,67],
[27,34,29,81,29,0,32,38,53],
[61,64,48,76,69,99,0,59,54],
[61,77,64,93,56,93,72,0,75],
[57,51,53,95,64,78,77,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,68,59,71,66,71,51,58],
[68,0,71,68,68,73,82,67,58],
[63,60,0,56,67,62,69,58,55],
[72,63,75,0,71,60,74,55,60],
[60,63,64,60,0,60,66,65,62],
[65,58,69,71,71,0,71,61,68],
[60,49,62,57,65,60,0,64,52],
[80,64,73,76,66,70,67,0,74],
[73,73,76,71,69,63,79,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,82,79,80,72,92,105,65],
[46,0,62,65,65,53,75,60,62],
[49,69,0,65,54,48,88,95,59],
[52,66,66,0,86,60,90,105,63],
[51,66,77,45,0,47,75,86,55],
[59,78,83,71,84,0,86,83,88],
[39,56,43,41,56,45,0,61,16],
[26,71,36,26,45,48,70,0,26],
[66,69,72,68,76,43,115,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,62,68,61,53,66,71],
[67,0,64,65,62,59,73,70,74],
[62,67,0,54,73,67,74,75,73],
[69,66,77,0,53,73,78,86,76],
[63,69,58,78,0,77,72,72,76],
[70,72,64,58,54,0,65,67,71],
[78,58,57,53,59,66,0,79,82],
[65,61,56,45,59,64,52,0,63],
[60,57,58,55,55,60,49,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,64,85,74,77,78,70,69],
[58,0,61,70,68,62,72,59,57],
[67,70,0,77,70,65,75,65,62],
[46,61,54,0,62,55,58,57,58],
[57,63,61,69,0,62,70,59,66],
[54,69,66,76,69,0,72,61,56],
[53,59,56,73,61,59,0,53,56],
[61,72,66,74,72,70,78,0,65],
[62,74,69,73,65,75,75,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,63,64,59,58,63,54,51],
[53,0,55,61,65,56,60,61,50],
[68,76,0,70,65,57,68,51,68],
[67,70,61,0,72,64,68,62,64],
[72,66,66,59,0,65,60,50,65],
[73,75,74,67,66,0,57,46,68],
[68,71,63,63,71,74,0,62,69],
[77,70,80,69,81,85,69,0,64],
[80,81,63,67,66,63,62,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,63,62,59,65,66,62,63],
[70,0,66,61,57,70,63,58,71],
[68,65,0,53,64,56,59,60,56],
[69,70,78,0,66,69,76,70,61],
[72,74,67,65,0,65,71,60,68],
[66,61,75,62,66,0,67,50,66],
[65,68,72,55,60,64,0,62,72],
[69,73,71,61,71,81,69,0,67],
[68,60,75,70,63,65,59,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,49,48,47,31,70,54,44],
[75,0,82,61,64,70,89,83,69],
[82,49,0,78,38,60,111,56,28],
[83,70,53,0,40,52,57,46,40],
[84,67,93,91,0,50,95,73,77],
[100,61,71,79,81,0,124,59,59],
[61,42,20,74,36,7,0,25,30],
[77,48,75,85,58,72,106,0,33],
[87,62,103,91,54,72,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,65,72,65,79,56,73,52],
[78,0,82,82,79,70,63,85,47],
[66,49,0,69,51,80,66,63,51],
[59,49,62,0,41,67,43,65,34],
[66,52,80,90,0,71,59,63,62],
[52,61,51,64,60,0,60,82,61],
[75,68,65,88,72,71,0,97,72],
[58,46,68,66,68,49,34,0,42],
[79,84,80,97,69,70,59,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,68,70,72,70,67,76,65],
[58,0,65,59,61,64,61,60,64],
[63,66,0,66,64,61,64,68,65],
[61,72,65,0,69,70,65,72,71],
[59,70,67,62,0,74,68,71,69],
[61,67,70,61,57,0,72,70,69],
[64,70,67,66,63,59,0,63,67],
[55,71,63,59,60,61,68,0,60],
[66,67,66,60,62,62,64,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,82,87,94,78,73,66,71],
[67,0,87,93,87,64,81,73,84],
[49,44,0,62,82,67,65,52,70],
[44,38,69,0,82,56,72,54,66],
[37,44,49,49,0,36,58,48,46],
[53,67,64,75,95,0,91,72,77],
[58,50,66,59,73,40,0,46,64],
[65,58,79,77,83,59,85,0,64],
[60,47,61,65,85,54,67,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,82,64,50,67,74,67,64],
[63,0,87,91,73,75,87,94,66],
[49,44,0,66,52,63,64,90,55],
[67,40,65,0,45,49,67,66,52],
[81,58,79,86,0,62,73,92,77],
[64,56,68,82,69,0,85,87,79],
[57,44,67,64,58,46,0,68,49],
[64,37,41,65,39,44,63,0,62],
[67,65,76,79,54,52,82,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,68,67,65,63,64,52,57],
[66,0,62,58,55,62,53,58,62],
[63,69,0,62,62,51,50,59,60],
[64,73,69,0,75,68,57,60,67],
[66,76,69,56,0,63,68,54,52],
[68,69,80,63,68,0,62,57,61],
[67,78,81,74,63,69,0,62,75],
[79,73,72,71,77,74,69,0,56],
[74,69,71,64,79,70,56,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,70,69,65,58,67,69,67],
[70,0,68,68,67,58,71,65,71],
[61,63,0,61,70,66,62,67,68],
[62,63,70,0,73,64,73,62,69],
[66,64,61,58,0,66,69,69,69],
[73,73,65,67,65,0,68,79,74],
[64,60,69,58,62,63,0,68,70],
[62,66,64,69,62,52,63,0,64],
[64,60,63,62,62,57,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,73,67,64,71,66,59,60],
[68,0,73,67,55,73,67,61,61],
[58,58,0,65,59,67,61,59,54],
[64,64,66,0,60,69,71,63,55],
[67,76,72,71,0,66,59,57,66],
[60,58,64,62,65,0,64,66,59],
[65,64,70,60,72,67,0,60,61],
[72,70,72,68,74,65,71,0,60],
[71,70,77,76,65,72,70,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,19,42,19,19,36,36,36],
[63,0,71,42,82,82,99,99,99],
[112,60,0,53,62,82,80,60,28],
[89,89,78,0,89,57,74,89,74],
[112,49,69,42,0,88,69,17,44],
[112,49,49,74,43,0,112,60,49],
[95,32,51,57,62,19,0,51,68],
[95,32,71,42,114,71,80,0,63],
[95,32,103,57,87,82,63,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,51,58,65,63,57,62,69],
[71,0,58,63,63,68,61,68,69],
[80,73,0,66,73,78,69,63,78],
[73,68,65,0,73,85,62,70,73],
[66,68,58,58,0,72,60,66,67],
[68,63,53,46,59,0,58,56,59],
[74,70,62,69,71,73,0,63,72],
[69,63,68,61,65,75,68,0,67],
[62,62,53,58,64,72,59,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,61,67,65,64,70,71,62],
[63,0,53,70,65,55,61,68,55],
[70,78,0,75,65,67,72,78,70],
[64,61,56,0,57,53,61,64,56],
[66,66,66,74,0,53,70,73,64],
[67,76,64,78,78,0,75,73,65],
[61,70,59,70,61,56,0,67,62],
[60,63,53,67,58,58,64,0,62],
[69,76,61,75,67,66,69,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,70,78,63,70,62,61,55],
[62,0,68,70,69,66,68,72,60],
[61,63,0,73,60,69,65,58,71],
[53,61,58,0,53,67,55,58,58],
[68,62,71,78,0,72,63,65,72],
[61,65,62,64,59,0,53,56,48],
[69,63,66,76,68,78,0,69,61],
[70,59,73,73,66,75,62,0,63],
[76,71,60,73,59,83,70,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,61,72,71,76,63,69,73],
[73,0,76,75,72,81,64,75,78],
[70,55,0,66,72,73,67,71,69],
[59,56,65,0,68,75,65,61,61],
[60,59,59,63,0,80,60,70,66],
[55,50,58,56,51,0,56,58,60],
[68,67,64,66,71,75,0,66,63],
[62,56,60,70,61,73,65,0,67],
[58,53,62,70,65,71,68,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,90,82,56,46,55,75,80],
[42,0,70,54,35,39,38,73,56],
[41,61,0,54,24,39,19,55,72],
[49,77,77,0,30,36,22,54,68],
[75,96,107,101,0,69,57,78,90],
[85,92,92,95,62,0,69,75,91],
[76,93,112,109,74,62,0,81,89],
[56,58,76,77,53,56,50,0,73],
[51,75,59,63,41,40,42,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,75,65,62,68,73,79,61],
[57,0,60,66,61,56,56,65,60],
[56,71,0,63,61,60,59,68,62],
[66,65,68,0,66,66,65,82,64],
[69,70,70,65,0,64,70,79,63],
[63,75,71,65,67,0,57,80,59],
[58,75,72,66,61,74,0,77,68],
[52,66,63,49,52,51,54,0,56],
[70,71,69,67,68,72,63,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,66,71,66,69,79,63,83],
[46,0,53,58,65,82,56,70,56],
[65,78,0,75,66,80,66,79,75],
[60,73,56,0,51,78,77,63,75],
[65,66,65,80,0,85,67,69,74],
[62,49,51,53,46,0,53,65,41],
[52,75,65,54,64,78,0,77,73],
[68,61,52,68,62,66,54,0,62],
[48,75,56,56,57,90,58,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,77,51,78,67,65,55,77],
[75,0,76,59,78,67,76,66,75],
[54,55,0,46,65,57,49,50,77],
[80,72,85,0,71,62,73,54,84],
[53,53,66,60,0,71,66,57,63],
[64,64,74,69,60,0,68,51,71],
[66,55,82,58,65,63,0,50,72],
[76,65,81,77,74,80,81,0,71],
[54,56,54,47,68,60,59,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,62,67,62,61,66,75],
[69,0,64,70,73,57,69,72,72],
[70,67,0,68,75,68,55,60,70],
[69,61,63,0,78,54,58,66,64],
[64,58,56,53,0,50,55,62,52],
[69,74,63,77,81,0,73,74,81],
[70,62,76,73,76,58,0,68,75],
[65,59,71,65,69,57,63,0,65],
[56,59,61,67,79,50,56,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,75,64,80,89,95,69,73],
[56,0,73,61,68,65,74,70,58],
[56,58,0,67,64,70,75,62,58],
[67,70,64,0,72,79,77,61,56],
[51,63,67,59,0,73,71,56,59],
[42,66,61,52,58,0,70,54,52],
[36,57,56,54,60,61,0,56,48],
[62,61,69,70,75,77,75,0,65],
[58,73,73,75,72,79,83,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,67,90,67,59,82,68,76],
[57,0,55,92,74,72,46,87,77],
[64,76,0,86,77,35,48,81,80],
[41,39,45,0,57,38,38,65,57],
[64,57,54,74,0,53,52,52,63],
[72,59,96,93,78,0,53,78,66],
[49,85,83,93,79,78,0,91,97],
[63,44,50,66,79,53,40,0,71],
[55,54,51,74,68,65,34,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,50,67,58,69,77,80,68],
[53,0,44,50,58,50,74,83,59],
[81,87,0,63,60,70,89,99,74],
[64,81,68,0,76,61,87,76,80],
[73,73,71,55,0,50,82,89,73],
[62,81,61,70,81,0,96,84,86],
[54,57,42,44,49,35,0,76,57],
[51,48,32,55,42,47,55,0,57],
[63,72,57,51,58,45,74,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,53,60,67,73,74,76,67],
[60,0,64,76,64,73,79,63,70],
[78,67,0,62,72,82,75,66,77],
[71,55,69,0,64,76,74,73,74],
[64,67,59,67,0,75,74,76,65],
[58,58,49,55,56,0,68,56,64],
[57,52,56,57,57,63,0,61,61],
[55,68,65,58,55,75,70,0,63],
[64,61,54,57,66,67,70,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,62,73,67,62,62,62,63],
[66,0,55,63,64,66,59,64,62],
[69,76,0,71,71,71,70,65,67],
[58,68,60,0,57,60,69,57,67],
[64,67,60,74,0,59,56,69,67],
[69,65,60,71,72,0,73,68,69],
[69,72,61,62,75,58,0,65,68],
[69,67,66,74,62,63,66,0,70],
[68,69,64,64,64,62,63,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,49,75,56,68,63,53,42],
[90,0,79,93,93,61,69,87,46],
[82,52,0,68,68,50,53,64,41],
[56,38,63,0,67,51,40,63,44],
[75,38,63,64,0,64,63,55,48],
[63,70,81,80,67,0,62,79,65],
[68,62,78,91,68,69,0,67,71],
[78,44,67,68,76,52,64,0,49],
[89,85,90,87,83,66,60,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,77,53,56,73,90,50,64],
[67,0,69,52,70,73,74,55,73],
[54,62,0,40,68,49,64,58,44],
[78,79,91,0,64,80,93,71,78],
[75,61,63,67,0,64,78,61,71],
[58,58,82,51,67,0,70,59,59],
[41,57,67,38,53,61,0,48,55],
[81,76,73,60,70,72,83,0,73],
[67,58,87,53,60,72,76,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,21,69,62,46,82,38,41],
[72,0,38,73,83,42,66,38,39],
[110,93,0,104,122,55,97,68,91],
[62,58,27,0,63,47,75,21,56],
[69,48,9,68,0,27,69,27,38],
[85,89,76,84,104,0,78,47,62],
[49,65,34,56,62,53,0,60,43],
[93,93,63,110,104,84,71,0,76],
[90,92,40,75,93,69,88,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,78,65,66,71,63,60,45],
[78,0,81,81,76,66,75,81,62],
[53,50,0,56,60,55,61,57,56],
[66,50,75,0,72,55,71,69,60],
[65,55,71,59,0,52,58,56,58],
[60,65,76,76,79,0,71,62,64],
[68,56,70,60,73,60,0,57,69],
[71,50,74,62,75,69,74,0,62],
[86,69,75,71,73,67,62,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,68,70,64,69,59,65],
[63,0,71,65,64,62,72,66,63],
[61,60,0,60,61,58,56,64,63],
[63,66,71,0,58,57,61,66,71],
[61,67,70,73,0,63,72,68,66],
[67,69,73,74,68,0,69,68,65],
[62,59,75,70,59,62,0,71,63],
[72,65,67,65,63,63,60,0,61],
[66,68,68,60,65,66,68,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,65,68,64,72,77,70,65],
[64,0,80,67,69,65,78,73,68],
[66,51,0,66,69,68,74,66,58],
[63,64,65,0,64,66,74,56,67],
[67,62,62,67,0,64,78,60,64],
[59,66,63,65,67,0,73,64,68],
[54,53,57,57,53,58,0,42,65],
[61,58,65,75,71,67,89,0,74],
[66,63,73,64,67,63,66,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,61,77,72,76,68,70,79],
[61,0,60,69,71,66,57,56,70],
[70,71,0,68,75,68,73,74,60],
[54,62,63,0,68,78,69,72,68],
[59,60,56,63,0,63,50,64,57],
[55,65,63,53,68,0,59,76,66],
[63,74,58,62,81,72,0,71,79],
[61,75,57,59,67,55,60,0,69],
[52,61,71,63,74,65,52,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,105,70,78,60,102,75,92],
[48,0,87,45,58,63,70,66,55],
[26,44,0,46,31,45,57,60,43],
[61,86,85,0,68,73,62,76,68],
[53,73,100,63,0,58,75,71,67],
[71,68,86,58,73,0,78,77,87],
[29,61,74,69,56,53,0,64,54],
[56,65,71,55,60,54,67,0,68],
[39,76,88,63,64,44,77,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,69,67,59,65,63,58,69],
[63,0,62,67,61,65,66,56,73],
[62,69,0,80,62,68,64,60,72],
[64,64,51,0,61,57,54,54,60],
[72,70,69,70,0,68,62,51,74],
[66,66,63,74,63,0,66,62,67],
[68,65,67,77,69,65,0,67,67],
[73,75,71,77,80,69,64,0,71],
[62,58,59,71,57,64,64,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,67,78,65,62,71,65,59],
[60,0,64,71,63,64,63,67,63],
[64,67,0,69,78,59,76,64,75],
[53,60,62,0,52,52,66,46,54],
[66,68,53,79,0,67,80,61,75],
[69,67,72,79,64,0,78,56,78],
[60,68,55,65,51,53,0,49,47],
[66,64,67,85,70,75,82,0,78],
[72,68,56,77,56,53,84,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,64,62,67,66,67,63,66],
[56,0,58,65,60,61,48,63,63],
[67,73,0,59,70,61,61,62,69],
[69,66,72,0,79,76,72,59,68],
[64,71,61,52,0,68,65,69,63],
[65,70,70,55,63,0,63,65,56],
[64,83,70,59,66,68,0,62,71],
[68,68,69,72,62,66,69,0,70],
[65,68,62,63,68,75,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,76,70,91,53,66,90,63],
[72,0,79,60,75,68,69,79,67],
[55,52,0,64,60,43,47,61,57],
[61,71,67,0,86,43,56,75,56],
[40,56,71,45,0,33,64,62,55],
[78,63,88,88,98,0,68,101,84],
[65,62,84,75,67,63,0,75,60],
[41,52,70,56,69,30,56,0,67],
[68,64,74,75,76,47,71,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,61,67,62,70,66,72,68],
[62,0,64,69,58,67,58,65,62],
[70,67,0,76,66,72,74,69,65],
[64,62,55,0,63,65,66,65,61],
[69,73,65,68,0,73,85,73,68],
[61,64,59,66,58,0,64,62,57],
[65,73,57,65,46,67,0,69,66],
[59,66,62,66,58,69,62,0,59],
[63,69,66,70,63,74,65,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,75,65,68,67,68,65,69],
[73,0,71,62,71,65,71,74,73],
[56,60,0,53,56,58,56,53,60],
[66,69,78,0,74,73,65,68,72],
[63,60,75,57,0,71,65,77,73],
[64,66,73,58,60,0,71,68,71],
[63,60,75,66,66,60,0,65,57],
[66,57,78,63,54,63,66,0,65],
[62,58,71,59,58,60,74,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,69,64,75,64,71,68,72],
[53,0,58,61,72,61,68,55,64],
[62,73,0,65,71,58,75,57,66],
[67,70,66,0,74,70,75,61,68],
[56,59,60,57,0,50,72,64,60],
[67,70,73,61,81,0,71,63,63],
[60,63,56,56,59,60,0,57,64],
[63,76,74,70,67,68,74,0,69],
[59,67,65,63,71,68,67,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,80,83,72,79,79,76,78],
[71,0,76,74,68,85,82,66,62],
[51,55,0,61,61,68,62,59,65],
[48,57,70,0,67,63,72,62,61],
[59,63,70,64,0,65,77,56,63],
[52,46,63,68,66,0,51,47,64],
[52,49,69,59,54,80,0,58,62],
[55,65,72,69,75,84,73,0,75],
[53,69,66,70,68,67,69,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,76,79,70,70,62,67,66],
[41,0,70,59,64,73,72,67,55],
[55,61,0,57,57,57,56,66,44],
[52,72,74,0,63,64,48,49,52],
[61,67,74,68,0,65,68,45,62],
[61,58,74,67,66,0,70,66,71],
[69,59,75,83,63,61,0,69,77],
[64,64,65,82,86,65,62,0,74],
[65,76,87,79,69,60,54,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,75,66,72,68,59,76,91],
[52,0,80,68,72,66,51,84,76],
[56,51,0,37,44,70,19,34,36],
[65,63,94,0,68,91,48,70,73],
[59,59,87,63,0,98,73,89,91],
[63,65,61,40,33,0,31,46,49],
[72,80,112,83,58,100,0,87,94],
[55,47,97,61,42,85,44,0,64],
[40,55,95,58,40,82,37,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,80,44,81,56,78,64,83],
[85,0,73,76,100,58,70,81,86],
[51,58,0,37,85,66,70,45,70],
[87,55,94,0,78,85,84,100,89],
[50,31,46,53,0,72,39,63,58],
[75,73,65,46,59,0,72,69,68],
[53,61,61,47,92,59,0,49,72],
[67,50,86,31,68,62,82,0,56],
[48,45,61,42,73,63,59,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,71,76,64,71,74,68,64],
[47,0,58,55,57,58,62,57,50],
[60,73,0,67,66,71,73,69,60],
[55,76,64,0,59,77,74,64,58],
[67,74,65,72,0,69,78,78,74],
[60,73,60,54,62,0,65,68,63],
[57,69,58,57,53,66,0,60,58],
[63,74,62,67,53,63,71,0,59],
[67,81,71,73,57,68,73,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,64,62,57,51,72,75,71],
[49,0,54,45,39,49,50,48,52],
[67,77,0,70,64,60,59,83,70],
[69,86,61,0,60,46,65,66,67],
[74,92,67,71,0,79,97,58,76],
[80,82,71,85,52,0,80,69,69],
[59,81,72,66,34,51,0,52,56],
[56,83,48,65,73,62,79,0,66],
[60,79,61,64,55,62,75,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,59,85,70,69,68,65,74],
[58,0,65,90,65,70,77,80,75],
[72,66,0,99,56,59,85,70,66],
[46,41,32,0,50,54,41,61,50],
[61,66,75,81,0,67,81,78,71],
[62,61,72,77,64,0,60,71,72],
[63,54,46,90,50,71,0,76,70],
[66,51,61,70,53,60,55,0,69],
[57,56,65,81,60,59,61,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,64,76,67,59,70,60,68],
[66,0,64,72,76,67,68,60,61],
[67,67,0,74,80,62,70,69,78],
[55,59,57,0,65,53,67,61,53],
[64,55,51,66,0,52,65,61,64],
[72,64,69,78,79,0,79,73,74],
[61,63,61,64,66,52,0,57,68],
[71,71,62,70,70,58,74,0,68],
[63,70,53,78,67,57,63,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,57,64,55,59,82,65,71],
[81,0,56,72,68,47,78,64,70],
[74,75,0,69,74,71,85,63,71],
[67,59,62,0,62,64,68,54,73],
[76,63,57,69,0,59,94,60,76],
[72,84,60,67,72,0,75,69,77],
[49,53,46,63,37,56,0,47,56],
[66,67,68,77,71,62,84,0,68],
[60,61,60,58,55,54,75,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,55,68,78,65,85,76,62],
[46,0,55,53,71,66,74,54,48],
[76,76,0,67,76,61,106,67,79],
[63,78,64,0,80,64,94,78,74],
[53,60,55,51,0,83,76,62,44],
[66,65,70,67,48,0,79,73,61],
[46,57,25,37,55,52,0,59,41],
[55,77,64,53,69,58,72,0,51],
[69,83,52,57,87,70,90,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,56,59,62,47,71,66,74],
[72,0,61,57,67,62,70,68,84],
[75,70,0,66,72,65,74,73,68],
[72,74,65,0,76,67,74,65,80],
[69,64,59,55,0,57,68,68,72],
[84,69,66,64,74,0,80,73,79],
[60,61,57,57,63,51,0,64,71],
[65,63,58,66,63,58,67,0,66],
[57,47,63,51,59,52,60,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,67,67,66,64,66,67,67],
[68,0,70,70,67,71,70,68,64],
[64,61,0,71,71,70,76,67,58],
[64,61,60,0,57,66,65,64,57],
[65,64,60,74,0,71,66,66,61],
[67,60,61,65,60,0,62,64,51],
[65,61,55,66,65,69,0,66,63],
[64,63,64,67,65,67,65,0,66],
[64,67,73,74,70,80,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,52,56,70,54,60,61,65],
[73,0,62,61,72,56,60,62,63],
[79,69,0,65,77,65,55,63,68],
[75,70,66,0,75,64,70,66,60],
[61,59,54,56,0,59,59,58,59],
[77,75,66,67,72,0,65,66,66],
[71,71,76,61,72,66,0,58,69],
[70,69,68,65,73,65,73,0,72],
[66,68,63,71,72,65,62,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,57,74,67,57,64,60,54],
[72,0,61,79,73,61,76,74,52],
[74,70,0,71,76,67,64,58,67],
[57,52,60,0,66,47,51,61,48],
[64,58,55,65,0,67,63,69,61],
[74,70,64,84,64,0,59,76,51],
[67,55,67,80,68,72,0,71,65],
[71,57,73,70,62,55,60,0,59],
[77,79,64,83,70,80,66,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,85,109,76,75,52,85,78],
[58,0,77,87,82,85,80,97,108],
[46,54,0,66,65,53,45,37,90],
[22,44,65,0,70,69,46,45,78],
[55,49,66,61,0,53,53,60,83],
[56,46,78,62,78,0,21,44,90],
[79,51,86,85,78,110,0,67,94],
[46,34,94,86,71,87,64,0,91],
[53,23,41,53,48,41,37,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,81,51,67,68,71,82,70],
[73,0,47,66,60,68,67,65,84],
[50,84,0,58,63,56,52,66,56],
[80,65,73,0,77,84,81,96,78],
[64,71,68,54,0,83,75,69,62],
[63,63,75,47,48,0,49,71,76],
[60,64,79,50,56,82,0,64,58],
[49,66,65,35,62,60,67,0,69],
[61,47,75,53,69,55,73,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,65,59,51,67,62,64,78],
[60,0,58,65,55,45,62,58,59],
[66,73,0,58,57,55,70,49,66],
[72,66,73,0,56,58,72,68,63],
[80,76,74,75,0,58,74,73,79],
[64,86,76,73,73,0,75,63,64],
[69,69,61,59,57,56,0,65,67],
[67,73,82,63,58,68,66,0,62],
[53,72,65,68,52,67,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,64,57,61,62,68,60,59],
[75,0,58,58,65,62,68,64,67],
[67,73,0,62,73,61,66,55,77],
[74,73,69,0,77,70,76,67,65],
[70,66,58,54,0,59,65,63,67],
[69,69,70,61,72,0,67,62,69],
[63,63,65,55,66,64,0,60,61],
[71,67,76,64,68,69,71,0,73],
[72,64,54,66,64,62,70,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,55,51,69,37,47,92,53],
[92,0,64,79,81,83,87,93,80],
[76,67,0,61,69,69,80,95,105],
[80,52,70,0,63,71,79,109,87],
[62,50,62,68,0,45,77,96,63],
[94,48,62,60,86,0,58,91,87],
[84,44,51,52,54,73,0,96,66],
[39,38,36,22,35,40,35,0,55],
[78,51,26,44,68,44,65,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,64,65,62,55,63,58,63],
[77,0,76,61,71,69,66,68,67],
[67,55,0,61,61,77,77,52,62],
[66,70,70,0,59,70,69,59,73],
[69,60,70,72,0,72,68,67,68],
[76,62,54,61,59,0,73,71,61],
[68,65,54,62,63,58,0,67,73],
[73,63,79,72,64,60,64,0,67],
[68,64,69,58,63,70,58,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,62,74,78,65,71,77,70],
[73,0,78,59,83,76,82,67,71],
[69,53,0,71,71,67,80,69,78],
[57,72,60,0,72,62,84,59,72],
[53,48,60,59,0,59,73,56,64],
[66,55,64,69,72,0,68,67,79],
[60,49,51,47,58,63,0,58,64],
[54,64,62,72,75,64,73,0,67],
[61,60,53,59,67,52,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,62,70,68,62,59,62,60],
[65,0,66,64,63,65,57,60,60],
[69,65,0,71,64,67,69,67,63],
[61,67,60,0,65,59,62,54,62],
[63,68,67,66,0,65,60,63,58],
[69,66,64,72,66,0,66,64,69],
[72,74,62,69,71,65,0,58,66],
[69,71,64,77,68,67,73,0,63],
[71,71,68,69,73,62,65,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,66,67,59,73,67,56,63],
[69,0,65,67,57,82,75,67,67],
[65,66,0,61,72,64,70,64,57],
[64,64,70,0,68,69,72,63,62],
[72,74,59,63,0,64,67,62,62],
[58,49,67,62,67,0,67,67,69],
[64,56,61,59,64,64,0,52,51],
[75,64,67,68,69,64,79,0,67],
[68,64,74,69,69,62,80,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,58,86,79,57,91,76,75],
[74,0,60,72,62,68,76,86,79],
[73,71,0,75,61,52,78,64,63],
[45,59,56,0,59,53,61,84,70],
[52,69,70,72,0,94,73,75,62],
[74,63,79,78,37,0,57,74,66],
[40,55,53,70,58,74,0,75,69],
[55,45,67,47,56,57,56,0,69],
[56,52,68,61,69,65,62,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,68,54,76,67,53,69,62],
[57,0,63,55,58,55,53,61,52],
[63,68,0,71,57,45,61,65,59],
[77,76,60,0,64,58,79,74,68],
[55,73,74,67,0,72,76,74,70],
[64,76,86,73,59,0,66,79,70],
[78,78,70,52,55,65,0,68,68],
[62,70,66,57,57,52,63,0,49],
[69,79,72,63,61,61,63,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,72,59,63,60,63,61,58],
[63,0,67,69,58,59,57,65,69],
[59,64,0,64,61,59,54,67,61],
[72,62,67,0,55,58,61,63,63],
[68,73,70,76,0,59,66,70,69],
[71,72,72,73,72,0,60,64,72],
[68,74,77,70,65,71,0,70,71],
[70,66,64,68,61,67,61,0,71],
[73,62,70,68,62,59,60,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,74,72,75,54,90,64,68],
[70,0,55,66,77,53,82,71,74],
[57,76,0,69,76,67,52,85,63],
[59,65,62,0,39,61,60,67,59],
[56,54,55,92,0,68,58,87,64],
[77,78,64,70,63,0,63,80,74],
[41,49,79,71,73,68,0,58,68],
[67,60,46,64,44,51,73,0,56],
[63,57,68,72,67,57,63,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,61,62,54,63,57,62,65],
[65,0,65,66,57,63,58,62,59],
[70,66,0,65,59,67,65,60,67],
[69,65,66,0,60,70,61,70,69],
[77,74,72,71,0,70,69,70,65],
[68,68,64,61,61,0,59,61,68],
[74,73,66,70,62,72,0,64,66],
[69,69,71,61,61,70,67,0,68],
[66,72,64,62,66,63,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,62,64,65,62,61,67,61],
[67,0,64,76,70,67,72,74,67],
[69,67,0,61,75,70,70,74,68],
[67,55,70,0,73,61,74,72,69],
[66,61,56,58,0,61,62,67,69],
[69,64,61,70,70,0,74,68,68],
[70,59,61,57,69,57,0,62,62],
[64,57,57,59,64,63,69,0,61],
[70,64,63,62,62,63,69,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,58,63,67,68,59,59,59],
[63,0,64,61,59,66,70,64,66],
[73,67,0,66,70,69,74,69,62],
[68,70,65,0,69,67,68,67,69],
[64,72,61,62,0,64,75,69,72],
[63,65,62,64,67,0,60,66,71],
[72,61,57,63,56,71,0,64,67],
[72,67,62,64,62,65,67,0,63],
[72,65,69,62,59,60,64,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,56,62,38,55,81,50,70],
[53,0,43,48,33,33,55,56,66],
[75,88,0,63,61,59,87,66,80],
[69,83,68,0,52,59,94,65,48],
[93,98,70,79,0,74,85,61,87],
[76,98,72,72,57,0,90,78,84],
[50,76,44,37,46,41,0,49,53],
[81,75,65,66,70,53,82,0,90],
[61,65,51,83,44,47,78,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,70,70,73,63,77,70,60],
[54,0,58,61,69,63,72,77,62],
[61,73,0,81,80,53,63,82,64],
[61,70,50,0,59,57,57,78,60],
[58,62,51,72,0,58,61,76,69],
[68,68,78,74,73,0,63,74,77],
[54,59,68,74,70,68,0,74,63],
[61,54,49,53,55,57,57,0,56],
[71,69,67,71,62,54,68,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,68,65,63,67,74,68,58],
[57,0,64,65,59,66,70,65,58],
[63,67,0,66,63,59,65,68,61],
[66,66,65,0,58,61,64,65,60],
[68,72,68,73,0,62,76,66,63],
[64,65,72,70,69,0,69,66,66],
[57,61,66,67,55,62,0,68,52],
[63,66,63,66,65,65,63,0,56],
[73,73,70,71,68,65,79,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,79,64,85,78,77,71,72],
[61,0,71,64,60,80,63,58,58],
[52,60,0,59,56,69,61,62,61],
[67,67,72,0,71,86,65,65,78],
[46,71,75,60,0,71,60,61,70],
[53,51,62,45,60,0,51,54,52],
[54,68,70,66,71,80,0,63,53],
[60,73,69,66,70,77,68,0,61],
[59,73,70,53,61,79,78,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,53,74,54,58,70,66,59],
[67,0,50,66,64,59,55,59,71],
[78,81,0,76,74,68,70,64,73],
[57,65,55,0,56,55,64,56,66],
[77,67,57,75,0,63,67,68,69],
[73,72,63,76,68,0,67,70,63],
[61,76,61,67,64,64,0,65,71],
[65,72,67,75,63,61,66,0,62],
[72,60,58,65,62,68,60,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,63,77,59,57,58,41,38],
[77,0,57,83,70,66,62,66,68],
[68,74,0,103,90,76,69,74,62],
[54,48,28,0,61,37,40,61,47],
[72,61,41,70,0,51,53,55,41],
[74,65,55,94,80,0,51,57,65],
[73,69,62,91,78,80,0,78,49],
[90,65,57,70,76,74,53,0,66],
[93,63,69,84,90,66,82,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,78,48,78,77,78,78,27],
[41,0,70,44,49,77,62,78,49],
[53,61,0,44,31,81,93,101,48],
[83,87,87,0,43,81,87,82,66],
[53,82,100,88,0,100,106,101,67],
[54,54,50,50,31,0,93,106,31],
[53,69,38,44,25,38,0,40,17],
[53,53,30,49,30,25,91,0,30],
[104,82,83,65,64,100,114,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,68,51,59,51,54,66,57],
[76,0,62,65,64,56,51,73,74],
[63,69,0,57,58,60,52,62,50],
[80,66,74,0,64,63,66,78,67],
[72,67,73,67,0,58,65,75,52],
[80,75,71,68,73,0,69,81,64],
[77,80,79,65,66,62,0,75,78],
[65,58,69,53,56,50,56,0,56],
[74,57,81,64,79,67,53,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,83,83,62,74,69,68,70],
[58,0,72,74,70,65,62,70,65],
[48,59,0,74,55,57,60,71,67],
[48,57,57,0,63,58,56,58,68],
[69,61,76,68,0,64,69,61,64],
[57,66,74,73,67,0,68,64,68],
[62,69,71,75,62,63,0,64,72],
[63,61,60,73,70,67,67,0,66],
[61,66,64,63,67,63,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,71,65,59,60,81,49,64],
[78,0,79,68,68,79,86,47,77],
[60,52,0,55,63,44,66,69,61],
[66,63,76,0,75,56,77,62,71],
[72,63,68,56,0,53,50,51,58],
[71,52,87,75,78,0,72,55,73],
[50,45,65,54,81,59,0,52,65],
[82,84,62,69,80,76,79,0,77],
[67,54,70,60,73,58,66,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,45,56,61,60,63,53],
[68,0,61,53,55,47,55,54,63],
[60,70,0,46,55,51,65,52,65],
[86,78,85,0,65,66,65,68,70],
[75,76,76,66,0,72,62,77,62],
[70,84,80,65,59,0,66,61,71],
[71,76,66,66,69,65,0,60,73],
[68,77,79,63,54,70,71,0,76],
[78,68,66,61,69,60,58,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,54,55,57,70,67,66],
[69,0,60,65,68,66,68,71,64],
[68,71,0,65,65,73,74,72,68],
[77,66,66,0,67,68,65,70,68],
[76,63,66,64,0,73,71,76,74],
[74,65,58,63,58,0,74,73,65],
[61,63,57,66,60,57,0,66,72],
[64,60,59,61,55,58,65,0,67],
[65,67,63,63,57,66,59,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,64,61,70,71,70,64,59],
[57,0,60,58,58,59,64,60,56],
[67,71,0,67,64,67,71,65,65],
[70,73,64,0,70,69,72,68,70],
[61,73,67,61,0,78,66,66,61],
[60,72,64,62,53,0,67,73,66],
[61,67,60,59,65,64,0,56,55],
[67,71,66,63,65,58,75,0,58],
[72,75,66,61,70,65,76,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,71,64,76,84,67,82,67],
[38,0,61,70,55,65,39,59,58],
[60,70,0,63,68,56,49,72,62],
[67,61,68,0,67,50,65,75,50],
[55,76,63,64,0,65,43,64,62],
[47,66,75,81,66,0,52,63,51],
[64,92,82,66,88,79,0,78,74],
[49,72,59,56,67,68,53,0,71],
[64,73,69,81,69,80,57,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,60,64,63,75,63,70,68],
[65,0,58,56,53,68,66,68,68],
[71,73,0,63,58,71,67,72,68],
[67,75,68,0,66,77,57,70,64],
[68,78,73,65,0,74,67,73,65],
[56,63,60,54,57,0,59,60,60],
[68,65,64,74,64,72,0,74,65],
[61,63,59,61,58,71,57,0,66],
[63,63,63,67,66,71,66,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,77,58,58,64,68,63,70],
[55,0,59,58,55,49,65,70,72],
[54,72,0,55,62,60,69,66,61],
[73,73,76,0,69,59,57,58,71],
[73,76,69,62,0,52,67,68,77],
[67,82,71,72,79,0,68,63,76],
[63,66,62,74,64,63,0,69,77],
[68,61,65,73,63,68,62,0,73],
[61,59,70,60,54,55,54,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,78,61,80,82,79,71,66],
[63,0,60,62,66,63,66,59,61],
[53,71,0,51,69,62,63,63,47],
[70,69,80,0,77,72,72,82,63],
[51,65,62,54,0,69,65,68,66],
[49,68,69,59,62,0,73,59,68],
[52,65,68,59,66,58,0,64,61],
[60,72,68,49,63,72,67,0,64],
[65,70,84,68,65,63,70,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,79,76,57,59,75,60,69],
[63,0,47,62,59,60,72,70,75],
[52,84,0,77,53,50,76,59,73],
[55,69,54,0,63,54,69,79,57],
[74,72,78,68,0,77,83,65,93],
[72,71,81,77,54,0,78,77,63],
[56,59,55,62,48,53,0,74,56],
[71,61,72,52,66,54,57,0,61],
[62,56,58,74,38,68,75,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,57,69,67,73,56,75,54],
[56,0,58,50,58,54,37,63,49],
[74,73,0,71,72,74,63,75,68],
[62,81,60,0,67,62,58,74,53],
[64,73,59,64,0,58,56,73,60],
[58,77,57,69,73,0,58,73,54],
[75,94,68,73,75,73,0,90,65],
[56,68,56,57,58,58,41,0,42],
[77,82,63,78,71,77,66,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,59,68,71,65,73,68,52],
[74,0,72,81,70,50,73,71,67],
[72,59,0,70,79,64,76,63,71],
[63,50,61,0,71,45,61,55,58],
[60,61,52,60,0,61,75,57,68],
[66,81,67,86,70,0,56,85,61],
[58,58,55,70,56,75,0,68,60],
[63,60,68,76,74,46,63,0,55],
[79,64,60,73,63,70,71,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,70,61,70,67,71,68,72],
[67,0,70,70,79,77,82,63,63],
[61,61,0,67,79,69,70,64,71],
[70,61,64,0,71,68,67,67,67],
[61,52,52,60,0,56,65,53,65],
[64,54,62,63,75,0,71,59,69],
[60,49,61,64,66,60,0,61,64],
[63,68,67,64,78,72,70,0,67],
[59,68,60,64,66,62,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,62,68,65,66,60,66,67],
[64,0,63,61,67,66,66,66,65],
[69,68,0,75,67,66,64,67,67],
[63,70,56,0,68,68,60,68,65],
[66,64,64,63,0,67,69,67,68],
[65,65,65,63,64,0,63,67,64],
[71,65,67,71,62,68,0,65,66],
[65,65,64,63,64,64,66,0,61],
[64,66,64,66,63,67,65,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,65,47,70,76,63,65,71],
[67,0,77,68,61,68,65,58,77],
[66,54,0,65,59,75,64,58,75],
[84,63,66,0,71,80,75,82,78],
[61,70,72,60,0,70,80,64,77],
[55,63,56,51,61,0,74,63,69],
[68,66,67,56,51,57,0,58,74],
[66,73,73,49,67,68,73,0,79],
[60,54,56,53,54,62,57,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,74,65,74,80,66,72],
[67,0,70,63,67,74,74,68,63],
[64,61,0,71,67,72,69,68,58],
[57,68,60,0,58,71,62,58,65],
[66,64,64,73,0,71,61,63,66],
[57,57,59,60,60,0,62,61,59],
[51,57,62,69,70,69,0,59,67],
[65,63,63,73,68,70,72,0,74],
[59,68,73,66,65,72,64,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,75,59,72,68,76,70,64],
[76,0,75,64,70,79,73,74,67],
[56,56,0,53,67,64,66,63,64],
[72,67,78,0,81,75,71,69,65],
[59,61,64,50,0,63,63,72,63],
[63,52,67,56,68,0,57,60,56],
[55,58,65,60,68,74,0,67,65],
[61,57,68,62,59,71,64,0,65],
[67,64,67,66,68,75,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,68,65,73,69,63,71,81],
[56,0,62,65,67,65,65,75,71],
[63,69,0,65,66,76,68,72,71],
[66,66,66,0,67,71,63,71,75],
[58,64,65,64,0,72,66,72,65],
[62,66,55,60,59,0,63,70,70],
[68,66,63,68,65,68,0,78,80],
[60,56,59,60,59,61,53,0,75],
[50,60,60,56,66,61,51,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,62,59,78,51,53,66,74],
[75,0,70,65,70,70,71,65,77],
[69,61,0,62,70,70,62,77,75],
[72,66,69,0,70,64,62,59,74],
[53,61,61,61,0,52,52,63,62],
[80,61,61,67,79,0,62,77,85],
[78,60,69,69,79,69,0,68,70],
[65,66,54,72,68,54,63,0,69],
[57,54,56,57,69,46,61,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,77,83,72,73,65,63,71],
[57,0,76,65,65,68,59,59,60],
[54,55,0,67,56,69,55,52,59],
[48,66,64,0,60,68,59,59,70],
[59,66,75,71,0,68,62,70,55],
[58,63,62,63,63,0,54,50,55],
[66,72,76,72,69,77,0,56,71],
[68,72,79,72,61,81,75,0,71],
[60,71,72,61,76,76,60,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,51,68,57,76,68,74,59],
[68,0,60,74,65,71,66,77,66],
[80,71,0,69,63,75,71,68,61],
[63,57,62,0,68,63,65,62,62],
[74,66,68,63,0,68,68,71,61],
[55,60,56,68,63,0,76,67,58],
[63,65,60,66,63,55,0,68,54],
[57,54,63,69,60,64,63,0,63],
[72,65,70,69,70,73,77,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,69,52,54,50,45,68,70],
[55,0,68,52,58,49,53,51,60],
[62,63,0,62,67,48,59,59,74],
[79,79,69,0,67,71,64,53,70],
[77,73,64,64,0,48,65,59,76],
[81,82,83,60,83,0,78,84,77],
[86,78,72,67,66,53,0,69,68],
[63,80,72,78,72,47,62,0,94],
[61,71,57,61,55,54,63,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,50,68,71,67,57,93,93],
[38,0,62,45,57,69,59,75,63],
[81,69,0,51,60,98,45,59,78],
[63,86,80,0,73,85,47,63,91],
[60,74,71,58,0,82,68,55,60],
[64,62,33,46,49,0,26,53,56],
[74,72,86,84,63,105,0,60,75],
[38,56,72,68,76,78,71,0,48],
[38,68,53,40,71,75,56,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,50,71,63,61,63,61,61],
[54,0,51,63,71,63,54,66,67],
[81,80,0,79,66,66,69,59,72],
[60,68,52,0,66,60,58,63,68],
[68,60,65,65,0,61,58,57,51],
[70,68,65,71,70,0,70,48,63],
[68,77,62,73,73,61,0,68,64],
[70,65,72,68,74,83,63,0,72],
[70,64,59,63,80,68,67,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,73,60,55,54,68,57,60],
[71,0,72,63,59,64,64,55,60],
[58,59,0,48,52,59,59,46,51],
[71,68,83,0,63,66,67,55,63],
[76,72,79,68,0,67,67,64,65],
[77,67,72,65,64,0,68,67,69],
[63,67,72,64,64,63,0,64,59],
[74,76,85,76,67,64,67,0,65],
[71,71,80,68,66,62,72,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,66,38,90,77,54,44,29],
[84,0,40,84,104,68,50,88,50],
[65,91,0,65,85,71,71,68,77],
[93,47,66,0,90,94,53,91,29],
[41,27,46,41,0,74,34,21,30],
[54,63,60,37,57,0,70,38,60],
[77,81,60,78,97,61,0,61,60],
[87,43,63,40,110,93,70,0,29],
[102,81,54,102,101,71,71,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,70,67,57,73,60,78,61],
[65,0,83,83,59,78,86,74,64],
[61,48,0,69,51,61,65,70,54],
[64,48,62,0,58,58,59,68,49],
[74,72,80,73,0,70,74,63,63],
[58,53,70,73,61,0,55,77,45],
[71,45,66,72,57,76,0,84,66],
[53,57,61,63,68,54,47,0,52],
[70,67,77,82,68,86,65,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,67,69,66,67,61,71,77],
[70,0,70,67,59,50,69,67,77],
[64,61,0,69,62,71,75,80,68],
[62,64,62,0,72,74,69,80,89],
[65,72,69,59,0,60,75,78,78],
[64,81,60,57,71,0,60,75,73],
[70,62,56,62,56,71,0,67,65],
[60,64,51,51,53,56,64,0,72],
[54,54,63,42,53,58,66,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,66,62,62,68,79,64,56],
[58,0,63,63,62,72,72,54,71],
[65,68,0,74,72,76,76,78,76],
[69,68,57,0,70,75,70,75,74],
[69,69,59,61,0,62,68,67,58],
[63,59,55,56,69,0,66,59,57],
[52,59,55,61,63,65,0,67,61],
[67,77,53,56,64,72,64,0,59],
[75,60,55,57,73,74,70,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,73,47,51,66,61,36,38],
[72,0,76,45,49,68,65,41,64],
[58,55,0,48,60,39,58,51,53],
[84,86,83,0,51,76,73,68,81],
[80,82,71,80,0,61,75,86,98],
[65,63,92,55,70,0,63,66,81],
[70,66,73,58,56,68,0,55,72],
[95,90,80,63,45,65,76,0,104],
[93,67,78,50,33,50,59,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,73,60,53,69,62,66,66],
[85,0,83,68,69,68,70,65,76],
[58,48,0,67,69,71,69,66,76],
[71,63,64,0,65,73,75,54,79],
[78,62,62,66,0,63,50,71,81],
[62,63,60,58,68,0,78,54,88],
[69,61,62,56,81,53,0,55,85],
[65,66,65,77,60,77,76,0,68],
[65,55,55,52,50,43,46,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,61,70,62,62,69,62,67],
[71,0,58,70,59,63,70,61,70],
[70,73,0,69,61,67,66,65,63],
[61,61,62,0,58,55,66,63,60],
[69,72,70,73,0,61,71,63,66],
[69,68,64,76,70,0,73,67,77],
[62,61,65,65,60,58,0,60,70],
[69,70,66,68,68,64,71,0,66],
[64,61,68,71,65,54,61,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,84,7,46,85,84,38,85],
[85,0,46,46,77,123,85,46,123],
[47,85,0,47,85,85,85,8,85],
[124,85,84,0,39,124,124,84,124],
[85,54,46,92,0,123,85,46,124],
[46,8,46,7,8,0,46,0,47],
[47,46,46,7,46,85,0,46,85],
[93,85,123,47,85,131,85,0,131],
[46,8,46,7,7,84,46,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,60,59,56,75,57,55,42],
[95,0,75,81,81,76,83,87,57],
[71,56,0,57,48,94,68,64,58],
[72,50,74,0,71,81,63,53,62],
[75,50,83,60,0,88,62,65,66],
[56,55,37,50,43,0,56,53,52],
[74,48,63,68,69,75,0,79,54],
[76,44,67,78,66,78,52,0,59],
[89,74,73,69,65,79,77,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,81,105,105,105,44,82,105],
[26,0,56,40,18,25,42,28,64],
[50,75,0,49,49,49,70,52,52],
[26,91,82,0,91,73,68,50,50],
[26,113,82,40,0,87,70,66,90],
[26,106,82,58,44,0,68,46,90],
[87,89,61,63,61,63,0,89,63],
[49,103,79,81,65,85,42,0,87],
[26,67,79,81,41,41,68,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,47,66,60,81,68,74,77],
[80,0,70,87,63,81,71,76,82],
[84,61,0,85,68,71,83,68,72],
[65,44,46,0,48,63,60,66,54],
[71,68,63,83,0,71,66,70,78],
[50,50,60,68,60,0,66,58,54],
[63,60,48,71,65,65,0,68,80],
[57,55,63,65,61,73,63,0,61],
[54,49,59,77,53,77,51,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,76,66,87,101,67,64,76],
[69,0,52,64,72,68,64,55,61],
[55,79,0,72,61,72,64,55,83],
[65,67,59,0,52,76,47,59,69],
[44,59,70,79,0,77,61,68,75],
[30,63,59,55,54,0,44,52,47],
[64,67,67,84,70,87,0,67,72],
[67,76,76,72,63,79,64,0,59],
[55,70,48,62,56,84,59,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,51,65,60,55,63,59,56],
[71,0,61,61,55,57,65,60,58],
[80,70,0,69,75,63,77,70,65],
[66,70,62,0,63,66,64,64,68],
[71,76,56,68,0,64,71,64,63],
[76,74,68,65,67,0,72,58,65],
[68,66,54,67,60,59,0,66,59],
[72,71,61,67,67,73,65,0,66],
[75,73,66,63,68,66,72,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,61,67,66,49,72,66,76],
[47,0,60,63,70,43,61,72,59],
[70,71,0,65,77,67,102,97,87],
[64,68,66,0,65,53,83,58,84],
[65,61,54,66,0,67,86,85,84],
[82,88,64,78,64,0,64,66,69],
[59,70,29,48,45,67,0,51,52],
[65,59,34,73,46,65,80,0,65],
[55,72,44,47,47,62,79,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,59,59,66,61,57,74],
[64,0,69,63,63,64,72,80,54],
[67,62,0,68,72,66,83,70,61],
[72,68,63,0,65,77,77,82,74],
[72,68,59,66,0,77,93,69,66],
[65,67,65,54,54,0,90,67,74],
[70,59,48,54,38,41,0,57,54],
[74,51,61,49,62,64,74,0,63],
[57,77,70,57,65,57,77,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,51,70,70,80,58,63,58],
[64,0,58,60,55,71,62,51,70],
[80,73,0,70,73,85,72,60,68],
[61,71,61,0,80,85,66,62,69],
[61,76,58,51,0,81,67,71,62],
[51,60,46,46,50,0,47,49,49],
[73,69,59,65,64,84,0,61,67],
[68,80,71,69,60,82,70,0,84],
[73,61,63,62,69,82,64,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,50,66,56,58,67,65,61],
[70,0,65,79,67,62,67,54,56],
[81,66,0,65,57,64,65,63,71],
[65,52,66,0,68,66,57,58,56],
[75,64,74,63,0,65,66,65,57],
[73,69,67,65,66,0,68,64,68],
[64,64,66,74,65,63,0,65,68],
[66,77,68,73,66,67,66,0,63],
[70,75,60,75,74,63,63,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,58,50,79,58,79,53,48],
[68,0,75,87,73,67,91,66,44],
[73,56,0,66,79,39,86,97,55],
[81,44,65,0,73,72,93,86,56],
[52,58,52,58,0,54,95,74,51],
[73,64,92,59,77,0,108,96,66],
[52,40,45,38,36,23,0,61,32],
[78,65,34,45,57,35,70,0,56],
[83,87,76,75,80,65,99,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,0,40,33,56,56,65,39],
[72,0,42,95,72,95,95,95,42],
[131,89,0,73,56,56,56,95,69],
[91,36,58,0,33,95,52,72,58],
[98,59,75,98,0,95,128,84,58],
[75,36,75,36,36,0,66,78,75],
[75,36,75,79,3,65,0,65,39],
[66,36,36,59,47,53,66,0,58],
[92,89,62,73,73,56,92,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,70,65,61,61,70,72,67],
[70,0,66,69,64,61,60,69,70],
[61,65,0,60,53,60,61,60,51],
[66,62,71,0,69,63,63,74,66],
[70,67,78,62,0,63,65,64,64],
[70,70,71,68,68,0,70,70,64],
[61,71,70,68,66,61,0,73,61],
[59,62,71,57,67,61,58,0,61],
[64,61,80,65,67,67,70,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,66,64,60,65,66,70,71],
[55,0,62,74,59,65,66,61,63],
[65,69,0,66,61,66,53,53,55],
[67,57,65,0,52,61,58,62,61],
[71,72,70,79,0,71,64,64,69],
[66,66,65,70,60,0,58,62,65],
[65,65,78,73,67,73,0,71,61],
[61,70,78,69,67,69,60,0,64],
[60,68,76,70,62,66,70,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,65,69,63,62,76,62,63],
[64,0,64,72,67,71,73,73,63],
[66,67,0,62,69,65,65,56,72],
[62,59,69,0,66,69,60,67,53],
[68,64,62,65,0,70,66,74,57],
[69,60,66,62,61,0,73,68,63],
[55,58,66,71,65,58,0,62,53],
[69,58,75,64,57,63,69,0,69],
[68,68,59,78,74,68,78,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,56,65,58,69,64,67,60],
[71,0,69,64,70,66,77,66,61],
[75,62,0,61,71,60,70,72,56],
[66,67,70,0,61,59,70,69,65],
[73,61,60,70,0,61,70,64,74],
[62,65,71,72,70,0,76,76,63],
[67,54,61,61,61,55,0,65,61],
[64,65,59,62,67,55,66,0,55],
[71,70,75,66,57,68,70,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,55,61,58,60,64,61,69],
[58,0,54,52,53,54,65,56,59],
[76,77,0,72,72,64,76,66,71],
[70,79,59,0,64,69,68,64,72],
[73,78,59,67,0,68,77,63,66],
[71,77,67,62,63,0,75,60,63],
[67,66,55,63,54,56,0,45,64],
[70,75,65,67,68,71,86,0,74],
[62,72,60,59,65,68,67,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,68,63,62,64,62,65,65],
[69,0,61,64,68,73,73,62,68],
[63,70,0,61,64,76,70,64,60],
[68,67,70,0,69,69,66,64,68],
[69,63,67,62,0,71,72,68,70],
[67,58,55,62,60,0,68,59,67],
[69,58,61,65,59,63,0,63,65],
[66,69,67,67,63,72,68,0,67],
[66,63,71,63,61,64,66,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,71,81,62,65,59,75,71],
[69,0,75,81,59,60,68,74,70],
[60,56,0,76,57,50,64,77,61],
[50,50,55,0,43,45,49,66,64],
[69,72,74,88,0,59,59,70,63],
[66,71,81,86,72,0,77,78,62],
[72,63,67,82,72,54,0,80,70],
[56,57,54,65,61,53,51,0,57],
[60,61,70,67,68,69,61,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,68,69,67,66,71,66,69],
[68,0,70,71,61,67,70,68,66],
[63,61,0,65,57,66,71,62,74],
[62,60,66,0,57,60,62,63,63],
[64,70,74,74,0,72,65,69,71],
[65,64,65,71,59,0,65,71,64],
[60,61,60,69,66,66,0,65,64],
[65,63,69,68,62,60,66,0,68],
[62,65,57,68,60,67,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,71,57,84,72,75,76,70],
[46,0,55,59,59,41,55,58,40],
[60,76,0,74,72,67,56,65,75],
[74,72,57,0,65,58,53,77,60],
[47,72,59,66,0,45,49,54,37],
[59,90,64,73,86,0,71,59,60],
[56,76,75,78,82,60,0,83,66],
[55,73,66,54,77,72,48,0,60],
[61,91,56,71,94,71,65,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,78,61,84,71,78,65,65],
[44,0,67,70,91,59,75,66,58],
[53,64,0,69,93,52,69,56,39],
[70,61,62,0,80,76,79,60,55],
[47,40,38,51,0,42,55,59,29],
[60,72,79,55,89,0,91,68,67],
[53,56,62,52,76,40,0,45,38],
[66,65,75,71,72,63,86,0,49],
[66,73,92,76,102,64,93,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,49,60,57,67,63,57,65],
[71,0,63,71,75,79,77,71,59],
[82,68,0,67,63,82,69,69,64],
[71,60,64,0,67,70,60,56,66],
[74,56,68,64,0,77,59,69,79],
[64,52,49,61,54,0,67,55,65],
[68,54,62,71,72,64,0,65,61],
[74,60,62,75,62,76,66,0,82],
[66,72,67,65,52,66,70,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,59,65,67,65,65,71,67],
[64,0,63,71,67,64,73,63,66],
[72,68,0,75,64,72,71,69,75],
[66,60,56,0,53,61,64,64,67],
[64,64,67,78,0,68,74,67,78],
[66,67,59,70,63,0,68,67,77],
[66,58,60,67,57,63,0,57,65],
[60,68,62,67,64,64,74,0,73],
[64,65,56,64,53,54,66,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,70,69,62,65,59,59,65],
[69,0,69,70,68,62,66,66,79],
[61,62,0,64,65,58,65,66,66],
[62,61,67,0,62,54,60,62,68],
[69,63,66,69,0,58,62,63,67],
[66,69,73,77,73,0,67,60,72],
[72,65,66,71,69,64,0,64,66],
[72,65,65,69,68,71,67,0,75],
[66,52,65,63,64,59,65,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,66,52,65,69,58,58,59],
[74,0,51,71,74,69,62,72,60],
[65,80,0,62,81,71,68,69,66],
[79,60,69,0,75,70,59,66,72],
[66,57,50,56,0,60,59,70,65],
[62,62,60,61,71,0,60,53,53],
[73,69,63,72,72,71,0,77,69],
[73,59,62,65,61,78,54,0,63],
[72,71,65,59,66,78,62,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,75,67,77,65,67,62,76],
[62,0,79,68,73,65,62,72,61],
[56,52,0,58,66,53,57,57,61],
[64,63,73,0,79,70,69,68,76],
[54,58,65,52,0,53,61,53,64],
[66,66,78,61,78,0,59,72,68],
[64,69,74,62,70,72,0,69,73],
[69,59,74,63,78,59,62,0,65],
[55,70,70,55,67,63,58,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,89,82,66,86,95,79,63],
[48,0,78,78,53,74,88,58,62],
[42,53,0,55,43,69,76,42,63],
[49,53,76,0,65,67,69,62,54],
[65,78,88,66,0,84,77,57,81],
[45,57,62,64,47,0,81,58,49],
[36,43,55,62,54,50,0,46,54],
[52,73,89,69,74,73,85,0,65],
[68,69,68,77,50,82,77,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,70,67,64,71,62,72,70],
[72,0,68,85,64,72,63,66,76],
[61,63,0,69,64,63,72,65,69],
[64,46,62,0,58,70,60,68,59],
[67,67,67,73,0,74,65,82,71],
[60,59,68,61,57,0,61,77,66],
[69,68,59,71,66,70,0,76,69],
[59,65,66,63,49,54,55,0,66],
[61,55,62,72,60,65,62,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,64,73,64,72,79,78,58],
[76,0,74,63,72,78,73,84,66],
[67,57,0,64,69,60,73,75,62],
[58,68,67,0,72,56,66,72,55],
[67,59,62,59,0,64,66,68,55],
[59,53,71,75,67,0,71,76,65],
[52,58,58,65,65,60,0,63,52],
[53,47,56,59,63,55,68,0,51],
[73,65,69,76,76,66,79,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,61,54,66,52,68,56,61],
[76,0,59,58,71,53,71,62,54],
[70,72,0,61,71,64,66,71,66],
[77,73,70,0,71,65,58,60,76],
[65,60,60,60,0,56,64,56,54],
[79,78,67,66,75,0,64,69,71],
[63,60,65,73,67,67,0,56,72],
[75,69,60,71,75,62,75,0,70],
[70,77,65,55,77,60,59,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,69,64,65,72,67,66],
[61,0,55,66,66,60,66,69,63],
[66,76,0,66,64,76,70,68,63],
[62,65,65,0,67,67,71,66,66],
[67,65,67,64,0,60,59,61,65],
[66,71,55,64,71,0,66,63,63],
[59,65,61,60,72,65,0,64,64],
[64,62,63,65,70,68,67,0,59],
[65,68,68,65,66,68,67,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,85,55,52,53,67,66,66],
[74,0,80,54,55,73,72,63,76],
[46,51,0,48,56,71,60,44,40],
[76,77,83,0,77,74,72,66,65],
[79,76,75,54,0,76,61,69,65],
[78,58,60,57,55,0,67,56,66],
[64,59,71,59,70,64,0,54,53],
[65,68,87,65,62,75,77,0,88],
[65,55,91,66,66,65,78,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,72,91,75,57,42,65,44],
[70,0,66,82,72,59,68,77,70],
[59,65,0,78,67,63,49,64,47],
[40,49,53,0,61,60,39,45,39],
[56,59,64,70,0,56,44,58,22],
[74,72,68,71,75,0,77,83,64],
[89,63,82,92,87,54,0,80,43],
[66,54,67,86,73,48,51,0,50],
[87,61,84,92,109,67,88,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,73,98,88,62,79,102,76],
[45,0,31,61,72,54,55,71,42],
[58,100,0,82,88,72,84,71,81],
[33,70,49,0,67,70,68,86,66],
[43,59,43,64,0,51,50,52,50],
[69,77,59,61,80,0,70,75,60],
[52,76,47,63,81,61,0,66,43],
[29,60,60,45,79,56,65,0,70],
[55,89,50,65,81,71,88,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,62,66,67,79,66,79,75],
[62,0,63,72,64,67,75,74,64],
[69,68,0,70,49,73,67,78,70],
[65,59,61,0,55,68,67,73,68],
[64,67,82,76,0,69,76,85,74],
[52,64,58,63,62,0,62,64,67],
[65,56,64,64,55,69,0,61,73],
[52,57,53,58,46,67,70,0,65],
[56,67,61,63,57,64,58,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,62,56,76,62,63,66,70],
[74,0,67,66,73,66,70,64,68],
[69,64,0,66,77,71,64,64,73],
[75,65,65,0,83,67,61,71,68],
[55,58,54,48,0,57,56,59,63],
[69,65,60,64,74,0,69,69,72],
[68,61,67,70,75,62,0,71,73],
[65,67,67,60,72,62,60,0,74],
[61,63,58,63,68,59,58,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,55,80,75,59,59,81,64],
[52,0,69,78,93,74,88,97,89],
[76,62,0,65,79,59,77,85,64],
[51,53,66,0,61,34,55,60,74],
[56,38,52,70,0,62,72,67,78],
[72,57,72,97,69,0,78,88,82],
[72,43,54,76,59,53,0,54,69],
[50,34,46,71,64,43,77,0,55],
[67,42,67,57,53,49,62,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,62,66,65,72,61,57,68],
[63,0,57,68,65,68,70,66,70],
[69,74,0,69,75,78,68,65,63],
[65,63,62,0,76,71,73,63,75],
[66,66,56,55,0,57,61,49,66],
[59,63,53,60,74,0,59,55,57],
[70,61,63,58,70,72,0,51,69],
[74,65,66,68,82,76,80,0,74],
[63,61,68,56,65,74,62,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,77,83,60,78,69,68,69],
[62,0,59,77,67,62,58,56,63],
[54,72,0,82,72,74,76,73,63],
[48,54,49,0,55,55,71,49,52],
[71,64,59,76,0,75,70,63,72],
[53,69,57,76,56,0,57,53,53],
[62,73,55,60,61,74,0,73,62],
[63,75,58,82,68,78,58,0,74],
[62,68,68,79,59,78,69,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,60,61,56,76,71,63,67],
[73,0,76,69,76,81,68,58,63],
[71,55,0,69,60,75,71,73,68],
[70,62,62,0,59,76,72,83,79],
[75,55,71,72,0,71,74,75,87],
[55,50,56,55,60,0,80,60,66],
[60,63,60,59,57,51,0,60,66],
[68,73,58,48,56,71,71,0,71],
[64,68,63,52,44,65,65,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,60,61,62,57,81,58,56],
[70,0,54,58,66,61,69,58,65],
[71,77,0,71,65,63,72,61,72],
[70,73,60,0,64,56,68,55,69],
[69,65,66,67,0,68,76,69,71],
[74,70,68,75,63,0,82,73,69],
[50,62,59,63,55,49,0,57,55],
[73,73,70,76,62,58,74,0,75],
[75,66,59,62,60,62,76,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,68,56,56,63,64,51,54],
[68,0,54,53,62,56,61,61,61],
[63,77,0,66,75,54,71,60,65],
[75,78,65,0,76,68,77,69,74],
[75,69,56,55,0,70,70,55,55],
[68,75,77,63,61,0,77,65,67],
[67,70,60,54,61,54,0,54,69],
[80,70,71,62,76,66,77,0,64],
[77,70,66,57,76,64,62,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,63,70,65,70,71,58],
[67,0,69,72,74,62,79,68,60],
[65,62,0,68,67,67,76,68,55],
[68,59,63,0,63,65,79,65,58],
[61,57,64,68,0,65,77,61,62],
[66,69,64,66,66,0,81,71,57],
[61,52,55,52,54,50,0,54,59],
[60,63,63,66,70,60,77,0,66],
[73,71,76,73,69,74,72,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,56,69,61,64,59,64,55],
[74,0,58,66,62,72,71,64,67],
[75,73,0,78,73,73,73,72,65],
[62,65,53,0,54,72,60,61,52],
[70,69,58,77,0,63,70,69,63],
[67,59,58,59,68,0,60,62,58],
[72,60,58,71,61,71,0,62,59],
[67,67,59,70,62,69,69,0,66],
[76,64,66,79,68,73,72,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,66,65,62,67,63,63,64],
[69,0,73,61,63,62,71,61,61],
[65,58,0,62,65,66,65,56,55],
[66,70,69,0,65,70,67,73,60],
[69,68,66,66,0,66,72,65,71],
[64,69,65,61,65,0,64,64,64],
[68,60,66,64,59,67,0,59,63],
[68,70,75,58,66,67,72,0,70],
[67,70,76,71,60,67,68,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,66,53,65,64,49,84,79],
[68,0,66,61,66,64,59,67,68],
[65,65,0,55,67,57,63,63,71],
[78,70,76,0,62,83,74,75,77],
[66,65,64,69,0,76,60,60,59],
[67,67,74,48,55,0,64,70,64],
[82,72,68,57,71,67,0,74,77],
[47,64,68,56,71,61,57,0,65],
[52,63,60,54,72,67,54,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,63,61,56,56,58,55,64],
[62,0,66,60,55,58,60,54,60],
[68,65,0,59,54,59,60,56,63],
[70,71,72,0,71,59,70,63,67],
[75,76,77,60,0,71,69,56,71],
[75,73,72,72,60,0,70,64,65],
[73,71,71,61,62,61,0,66,71],
[76,77,75,68,75,67,65,0,70],
[67,71,68,64,60,66,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,81,73,74,58,73,78,65],
[65,0,80,68,66,77,73,69,71],
[50,51,0,65,69,60,56,61,53],
[58,63,66,0,58,58,63,52,63],
[57,65,62,73,0,73,65,60,70],
[73,54,71,73,58,0,74,62,60],
[58,58,75,68,66,57,0,56,64],
[53,62,70,79,71,69,75,0,69],
[66,60,78,68,61,71,67,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,72,58,63,63,67,62,64],
[69,0,71,65,74,64,71,69,74],
[59,60,0,59,68,61,67,59,70],
[73,66,72,0,72,68,77,59,77],
[68,57,63,59,0,65,74,57,67],
[68,67,70,63,66,0,74,58,68],
[64,60,64,54,57,57,0,56,59],
[69,62,72,72,74,73,75,0,75],
[67,57,61,54,64,63,72,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,66,61,67,45,71,72,77],
[62,0,69,69,72,69,73,78,80],
[65,62,0,71,66,80,78,73,75],
[70,62,60,0,70,70,67,86,87],
[64,59,65,61,0,61,77,85,75],
[86,62,51,61,70,0,69,79,83],
[60,58,53,64,54,62,0,75,84],
[59,53,58,45,46,52,56,0,76],
[54,51,56,44,56,48,47,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,79,74,33,46,29,38,38],
[71,0,68,96,21,63,76,63,63],
[52,63,0,51,43,61,33,58,35],
[57,35,80,0,40,83,13,48,43],
[98,110,88,91,0,73,71,62,90],
[85,68,70,48,58,0,21,56,53],
[102,55,98,118,60,110,0,80,71],
[93,68,73,83,69,75,51,0,76],
[93,68,96,88,41,78,60,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,83,71,78,79,62,96,76],
[51,0,72,59,66,73,71,78,63],
[48,59,0,63,71,77,57,80,72],
[60,72,68,0,73,87,62,92,73],
[53,65,60,58,0,65,54,77,69],
[52,58,54,44,66,0,55,75,76],
[69,60,74,69,77,76,0,90,71],
[35,53,51,39,54,56,41,0,59],
[55,68,59,58,62,55,60,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,74,67,75,73,65,68],
[64,0,49,68,77,64,72,59,58],
[61,82,0,84,68,80,75,63,61],
[57,63,47,0,57,59,57,46,52],
[64,54,63,74,0,75,62,68,59],
[56,67,51,72,56,0,58,44,55],
[58,59,56,74,69,73,0,64,53],
[66,72,68,85,63,87,67,0,60],
[63,73,70,79,72,76,78,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,79,57,82,61,65,56,75],
[69,0,81,75,88,74,56,74,82],
[52,50,0,59,78,56,49,50,68],
[74,56,72,0,86,72,70,63,75],
[49,43,53,45,0,51,41,48,47],
[70,57,75,59,80,0,67,56,67],
[66,75,82,61,90,64,0,57,66],
[75,57,81,68,83,75,74,0,77],
[56,49,63,56,84,64,65,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,63,58,61,72,59,63,62],
[53,0,53,56,60,56,49,44,49],
[68,78,0,69,61,69,56,71,62],
[73,75,62,0,71,64,55,62,60],
[70,71,70,60,0,78,50,69,68],
[59,75,62,67,53,0,56,62,62],
[72,82,75,76,81,75,0,70,63],
[68,87,60,69,62,69,61,0,75],
[69,82,69,71,63,69,68,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,59,59,64,72,54,69,68],
[73,0,77,75,75,83,62,71,80],
[72,54,0,62,61,66,66,69,72],
[72,56,69,0,64,72,58,60,77],
[67,56,70,67,0,73,69,71,62],
[59,48,65,59,58,0,46,63,67],
[77,69,65,73,62,85,0,71,77],
[62,60,62,71,60,68,60,0,71],
[63,51,59,54,69,64,54,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,56,77,68,68,72,80,46],
[76,0,64,63,46,65,71,81,52],
[75,67,0,77,68,68,73,87,54],
[54,68,54,0,84,86,68,68,70],
[63,85,63,47,0,60,46,84,67],
[63,66,63,45,71,0,68,71,59],
[59,60,58,63,85,63,0,80,55],
[51,50,44,63,47,60,51,0,68],
[85,79,77,61,64,72,76,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,68,63,62,65,66,69,67],
[62,0,71,67,57,70,60,68,60],
[63,60,0,70,64,71,60,63,66],
[68,64,61,0,63,61,54,59,61],
[69,74,67,68,0,69,65,75,70],
[66,61,60,70,62,0,63,66,61],
[65,71,71,77,66,68,0,71,73],
[62,63,68,72,56,65,60,0,70],
[64,71,65,70,61,70,58,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,75,72,68,74,66,67,64],
[43,0,63,57,53,58,50,50,53],
[56,68,0,71,67,56,61,63,56],
[59,74,60,0,62,50,71,60,60],
[63,78,64,69,0,61,65,67,68],
[57,73,75,81,70,0,71,66,79],
[65,81,70,60,66,60,0,60,66],
[64,81,68,71,64,65,71,0,56],
[67,78,75,71,63,52,65,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,66,63,56,49,60,66,77],
[70,0,60,42,52,45,59,49,73],
[65,71,0,60,69,63,63,60,64],
[68,89,71,0,62,67,61,54,68],
[75,79,62,69,0,70,54,63,72],
[82,86,68,64,61,0,68,77,77],
[71,72,68,70,77,63,0,65,75],
[65,82,71,77,68,54,66,0,76],
[54,58,67,63,59,54,56,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,75,62,65,69,71,64],
[66,0,62,71,60,58,69,68,76],
[64,69,0,65,59,68,67,65,72],
[56,60,66,0,65,67,67,69,64],
[69,71,72,66,0,59,68,63,74],
[66,73,63,64,72,0,74,68,66],
[62,62,64,64,63,57,0,60,60],
[60,63,66,62,68,63,71,0,64],
[67,55,59,67,57,65,71,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,56,44,73,72,78,45,67],
[69,0,65,57,68,74,73,66,66],
[75,66,0,60,65,89,80,60,68],
[87,74,71,0,90,84,85,61,72],
[58,63,66,41,0,70,80,57,63],
[59,57,42,47,61,0,59,48,65],
[53,58,51,46,51,72,0,58,54],
[86,65,71,70,74,83,73,0,75],
[64,65,63,59,68,66,77,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,75,64,47,47,57,56,53],
[76,0,69,70,63,48,66,60,69],
[56,62,0,67,59,53,62,54,54],
[67,61,64,0,72,52,62,57,59],
[84,68,72,59,0,62,75,56,61],
[84,83,78,79,69,0,75,81,61],
[74,65,69,69,56,56,0,62,63],
[75,71,77,74,75,50,69,0,71],
[78,62,77,72,70,70,68,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,55,49,50,59,53,46,34],
[72,0,73,69,63,68,60,44,53],
[76,58,0,55,68,61,72,49,60],
[82,62,76,0,77,79,72,59,70],
[81,68,63,54,0,58,70,53,71],
[72,63,70,52,73,0,71,67,58],
[78,71,59,59,61,60,0,47,51],
[85,87,82,72,78,64,84,0,78],
[97,78,71,61,60,73,80,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,72,78,70,71,70,62,71],
[56,0,55,60,67,58,55,46,54],
[59,76,0,73,66,64,59,58,67],
[53,71,58,0,66,69,65,55,65],
[61,64,65,65,0,70,65,67,67],
[60,73,67,62,61,0,56,66,58],
[61,76,72,66,66,75,0,59,61],
[69,85,73,76,64,65,72,0,64],
[60,77,64,66,64,73,70,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,78,76,74,69,72,76,76],
[69,0,63,66,69,59,68,70,70],
[53,68,0,62,63,62,70,61,73],
[55,65,69,0,69,56,67,60,71],
[57,62,68,62,0,69,63,66,71],
[62,72,69,75,62,0,65,78,76],
[59,63,61,64,68,66,0,69,70],
[55,61,70,71,65,53,62,0,66],
[55,61,58,60,60,55,61,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,68,72,58,67,63,66,69],
[58,0,63,61,56,59,58,59,57],
[63,68,0,74,71,58,67,57,66],
[59,70,57,0,54,62,63,64,63],
[73,75,60,77,0,63,69,61,63],
[64,72,73,69,68,0,65,65,72],
[68,73,64,68,62,66,0,70,67],
[65,72,74,67,70,66,61,0,62],
[62,74,65,68,68,59,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,79,65,76,66,58,71,75],
[56,0,76,52,47,63,56,73,49],
[52,55,0,36,48,48,51,61,63],
[66,79,95,0,57,60,75,91,66],
[55,84,83,74,0,63,42,70,96],
[65,68,83,71,68,0,62,80,82],
[73,75,80,56,89,69,0,90,73],
[60,58,70,40,61,51,41,0,63],
[56,82,68,65,35,49,58,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,105,69,88,58,67,98,78],
[58,0,88,84,63,80,29,58,79],
[26,43,0,31,48,25,27,39,63],
[62,47,100,0,62,75,48,92,48],
[43,68,83,69,0,56,64,68,76],
[73,51,106,56,75,0,62,96,60],
[64,102,104,83,67,69,0,78,75],
[33,73,92,39,63,35,53,0,73],
[53,52,68,83,55,71,56,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,70,73,79,89,82,75,63],
[42,0,47,51,72,65,62,69,47],
[61,84,0,71,78,85,100,77,76],
[58,80,60,0,58,77,90,78,72],
[52,59,53,73,0,81,69,72,65],
[42,66,46,54,50,0,69,54,56],
[49,69,31,41,62,62,0,62,50],
[56,62,54,53,59,77,69,0,50],
[68,84,55,59,66,75,81,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,71,59,62,52,66,46,72],
[55,0,52,51,54,53,57,51,63],
[60,79,0,51,76,62,73,61,64],
[72,80,80,0,71,67,67,64,73],
[69,77,55,60,0,41,50,56,58],
[79,78,69,64,90,0,77,66,74],
[65,74,58,64,81,54,0,74,68],
[85,80,70,67,75,65,57,0,75],
[59,68,67,58,73,57,63,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,51,54,51,54,63,59,64],
[72,0,54,69,58,64,66,71,78],
[80,77,0,76,78,81,84,64,76],
[77,62,55,0,69,69,77,65,69],
[80,73,53,62,0,56,64,54,72],
[77,67,50,62,75,0,62,52,65],
[68,65,47,54,67,69,0,46,63],
[72,60,67,66,77,79,85,0,66],
[67,53,55,62,59,66,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,63,77,54,81,71,84,51],
[64,0,56,64,60,59,75,95,52],
[68,75,0,69,65,71,80,90,71],
[54,67,62,0,52,79,76,73,52],
[77,71,66,79,0,83,75,89,62],
[50,72,60,52,48,0,56,64,63],
[60,56,51,55,56,75,0,71,74],
[47,36,41,58,42,67,60,0,52],
[80,79,60,79,69,68,57,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,71,56,78,75,66,52,53],
[67,0,59,63,82,77,75,51,55],
[60,72,0,66,88,79,67,60,66],
[75,68,65,0,90,75,74,67,62],
[53,49,43,41,0,55,66,51,50],
[56,54,52,56,76,0,61,57,52],
[65,56,64,57,65,70,0,52,64],
[79,80,71,64,80,74,79,0,63],
[78,76,65,69,81,79,67,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,79,52,58,60,35,27,44],
[69,0,82,86,79,107,83,65,56],
[52,49,0,49,24,71,60,37,48],
[79,45,82,0,60,78,78,55,56],
[73,52,107,71,0,81,84,55,61],
[71,24,60,53,50,0,76,53,54],
[96,48,71,53,47,55,0,55,66],
[104,66,94,76,76,78,76,0,60],
[87,75,83,75,70,77,65,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,72,77,66,81,78,65,75],
[54,0,64,70,61,55,59,77,64],
[59,67,0,70,74,73,47,70,58],
[54,61,61,0,75,69,68,77,55],
[65,70,57,56,0,62,63,72,62],
[50,76,58,62,69,0,68,66,61],
[53,72,84,63,68,63,0,67,62],
[66,54,61,54,59,65,64,0,46],
[56,67,73,76,69,70,69,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,64,66,70,63,77,71,65],
[61,0,67,74,54,71,64,76,66],
[67,64,0,79,58,73,72,71,57],
[65,57,52,0,54,61,62,67,63],
[61,77,73,77,0,76,87,79,67],
[68,60,58,70,55,0,68,57,54],
[54,67,59,69,44,63,0,59,55],
[60,55,60,64,52,74,72,0,62],
[66,65,74,68,64,77,76,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,71,73,74,69,75,67,65],
[64,0,68,68,68,70,63,72,68],
[60,63,0,69,63,57,68,64,65],
[58,63,62,0,63,63,63,65,57],
[57,63,68,68,0,68,62,58,70],
[62,61,74,68,63,0,68,65,68],
[56,68,63,68,69,63,0,62,59],
[64,59,67,66,73,66,69,0,67],
[66,63,66,74,61,63,72,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,63,72,59,31,31,64,31],
[114,0,90,86,88,77,59,97,71],
[68,41,0,70,81,56,34,74,1],
[59,45,61,0,64,33,43,58,34],
[72,43,50,67,0,67,38,70,26],
[100,54,75,98,64,0,46,63,18],
[100,72,97,88,93,85,0,74,49],
[67,34,57,73,61,68,57,0,38],
[100,60,130,97,105,113,82,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,31,83,83,99,53,67],
[66,0,68,52,84,57,97,81,82],
[66,63,0,56,54,60,89,58,68],
[100,79,75,0,67,67,79,68,65],
[48,47,77,64,0,69,81,63,83],
[48,74,71,64,62,0,118,64,92],
[32,34,42,52,50,13,0,36,33],
[78,50,73,63,68,67,95,0,93],
[64,49,63,66,48,39,98,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,87,75,68,58,69,77],
[69,0,65,79,75,75,58,78,77],
[70,66,0,73,70,71,70,74,64],
[44,52,58,0,55,51,43,65,60],
[56,56,61,76,0,61,56,61,54],
[63,56,60,80,70,0,62,59,71],
[73,73,61,88,75,69,0,84,83],
[62,53,57,66,70,72,47,0,70],
[54,54,67,71,77,60,48,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,83,48,77,59,50,75,55],
[59,0,76,75,83,76,59,72,58],
[48,55,0,57,72,60,50,72,48],
[83,56,74,0,81,63,72,77,83],
[54,48,59,50,0,61,63,56,52],
[72,55,71,68,70,0,45,75,60],
[81,72,81,59,68,86,0,88,70],
[56,59,59,54,75,56,43,0,44],
[76,73,83,48,79,71,61,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,77,59,67,72,63,68,64],
[58,0,55,60,55,66,58,60,53],
[54,76,0,62,52,54,63,59,61],
[72,71,69,0,62,63,62,71,72],
[64,76,79,69,0,73,73,77,73],
[59,65,77,68,58,0,65,64,63],
[68,73,68,69,58,66,0,75,57],
[63,71,72,60,54,67,56,0,66],
[67,78,70,59,58,68,74,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,57,61,65,63,65,59],
[69,0,69,65,66,77,64,69,74],
[68,62,0,71,69,63,69,72,66],
[74,66,60,0,67,69,75,74,74],
[70,65,62,64,0,65,73,72,66],
[66,54,68,62,66,0,69,64,72],
[68,67,62,56,58,62,0,59,57],
[66,62,59,57,59,67,72,0,69],
[72,57,65,57,65,59,74,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,77,72,76,69,78,63,81],
[69,0,82,75,68,77,69,63,66],
[54,49,0,65,58,58,60,59,72],
[59,56,66,0,68,64,63,63,75],
[55,63,73,63,0,69,72,68,64],
[62,54,73,67,62,0,68,64,75],
[53,62,71,68,59,63,0,57,71],
[68,68,72,68,63,67,74,0,70],
[50,65,59,56,67,56,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,76,63,52,60,66,63,76],
[65,0,72,69,67,63,65,71,69],
[55,59,0,55,66,53,60,59,62],
[68,62,76,0,67,64,71,72,68],
[79,64,65,64,0,60,71,63,68],
[71,68,78,67,71,0,72,61,76],
[65,66,71,60,60,59,0,56,62],
[68,60,72,59,68,70,75,0,82],
[55,62,69,63,63,55,69,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,60,59,72,68,66,47,65],
[49,0,61,68,68,37,47,54,37],
[71,70,0,67,64,77,70,52,71],
[72,63,64,0,80,47,59,63,61],
[59,63,67,51,0,55,54,62,54],
[63,94,54,84,76,0,52,65,43],
[65,84,61,72,77,79,0,83,65],
[84,77,79,68,69,66,48,0,46],
[66,94,60,70,77,88,66,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,68,66,64,69,79,70,59],
[53,0,51,59,65,52,55,45,55],
[63,80,0,78,70,74,79,66,69],
[65,72,53,0,68,68,79,67,56],
[67,66,61,63,0,68,70,68,59],
[62,79,57,63,63,0,69,74,60],
[52,76,52,52,61,62,0,69,64],
[61,86,65,64,63,57,62,0,53],
[72,76,62,75,72,71,67,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,53,70,58,63,58,65,54],
[68,0,58,63,60,68,67,62,64],
[78,73,0,74,65,72,75,76,68],
[61,68,57,0,59,56,61,62,55],
[73,71,66,72,0,63,69,68,65],
[68,63,59,75,68,0,69,66,62],
[73,64,56,70,62,62,0,74,63],
[66,69,55,69,63,65,57,0,65],
[77,67,63,76,66,69,68,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,80,71,64,74,69,80,64],
[59,0,63,65,67,63,59,62,59],
[51,68,0,57,60,52,52,56,56],
[60,66,74,0,63,66,56,74,66],
[67,64,71,68,0,58,66,68,74],
[57,68,79,65,73,0,57,74,68],
[62,72,79,75,65,74,0,65,67],
[51,69,75,57,63,57,66,0,66],
[67,72,75,65,57,63,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,67,72,75,69,73,72,65],
[59,0,65,58,72,74,70,60,70],
[64,66,0,65,74,72,67,76,64],
[59,73,66,0,66,75,71,80,67],
[56,59,57,65,0,69,61,61,61],
[62,57,59,56,62,0,62,67,65],
[58,61,64,60,70,69,0,63,62],
[59,71,55,51,70,64,68,0,72],
[66,61,67,64,70,66,69,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,58,64,50,55,70,53,56],
[80,0,66,80,74,82,81,60,61],
[73,65,0,68,52,67,72,58,65],
[67,51,63,0,55,63,76,54,51],
[81,57,79,76,0,73,92,68,57],
[76,49,64,68,58,0,66,50,50],
[61,50,59,55,39,65,0,40,64],
[78,71,73,77,63,81,91,0,73],
[75,70,66,80,74,81,67,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,72,64,63,55,66,66,71],
[68,0,73,74,65,56,64,59,66],
[59,58,0,67,60,57,58,62,73],
[67,57,64,0,58,68,59,57,64],
[68,66,71,73,0,53,66,55,71],
[76,75,74,63,78,0,68,62,88],
[65,67,73,72,65,63,0,57,73],
[65,72,69,74,76,69,74,0,68],
[60,65,58,67,60,43,58,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,77,74,70,76,89,68,76],
[68,0,85,73,79,61,91,65,89],
[54,46,0,57,72,36,65,53,75],
[57,58,74,0,72,67,58,61,74],
[61,52,59,59,0,58,74,53,72],
[55,70,95,64,73,0,69,61,71],
[42,40,66,73,57,62,0,69,78],
[63,66,78,70,78,70,62,0,85],
[55,42,56,57,59,60,53,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,70,59,57,81,65,62,61],
[62,0,64,54,62,62,63,55,55],
[61,67,0,64,72,77,65,61,71],
[72,77,67,0,67,72,64,58,66],
[74,69,59,64,0,72,61,72,52],
[50,69,54,59,59,0,54,50,61],
[66,68,66,67,70,77,0,64,69],
[69,76,70,73,59,81,67,0,70],
[70,76,60,65,79,70,62,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,64,69,78,66,69,79,62],
[57,0,69,69,66,64,72,72,56],
[67,62,0,70,62,62,64,75,60],
[62,62,61,0,49,62,55,64,63],
[53,65,69,82,0,59,67,74,59],
[65,67,69,69,72,0,62,75,50],
[62,59,67,76,64,69,0,79,68],
[52,59,56,67,57,56,52,0,45],
[69,75,71,68,72,81,63,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,74,70,71,76,67,69,71],
[66,0,76,73,71,68,65,62,69],
[57,55,0,62,64,72,52,63,65],
[61,58,69,0,68,70,66,59,68],
[60,60,67,63,0,67,56,68,67],
[55,63,59,61,64,0,59,62,65],
[64,66,79,65,75,72,0,73,72],
[62,69,68,72,63,69,58,0,70],
[60,62,66,63,64,66,59,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,75,66,66,60,67,86,59],
[84,0,82,69,70,58,65,94,77],
[56,49,0,49,55,59,53,69,56],
[65,62,82,0,57,67,75,90,67],
[65,61,76,74,0,76,75,90,67],
[71,73,72,64,55,0,71,85,71],
[64,66,78,56,56,60,0,84,54],
[45,37,62,41,41,46,47,0,43],
[72,54,75,64,64,60,77,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,77,48,68,74,81,68,60],
[69,0,75,81,74,58,61,71,59],
[54,56,0,59,53,52,53,62,72],
[83,50,72,0,66,74,75,78,70],
[63,57,78,65,0,58,71,74,54],
[57,73,79,57,73,0,57,56,60],
[50,70,78,56,60,74,0,67,60],
[63,60,69,53,57,75,64,0,72],
[71,72,59,61,77,71,71,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,70,74,71,82,75,84,76],
[66,0,63,63,71,65,72,76,73],
[61,68,0,67,64,72,63,74,63],
[57,68,64,0,59,53,62,66,59],
[60,60,67,72,0,73,70,71,64],
[49,66,59,78,58,0,67,77,72],
[56,59,68,69,61,64,0,80,68],
[47,55,57,65,60,54,51,0,54],
[55,58,68,72,67,59,63,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,65,62,65,70,67,71,70],
[71,0,66,62,59,75,65,64,69],
[66,65,0,68,60,71,66,66,82],
[69,69,63,0,67,78,68,70,76],
[66,72,71,64,0,78,69,69,81],
[61,56,60,53,53,0,61,62,72],
[64,66,65,63,62,70,0,59,71],
[60,67,65,61,62,69,72,0,78],
[61,62,49,55,50,59,60,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,58,64,47,58,39,63,90],
[23,0,23,54,23,46,23,23,90],
[73,108,0,80,65,88,70,81,100],
[67,77,51,0,59,74,70,40,90],
[84,108,66,72,0,76,55,81,100],
[73,85,43,57,55,0,47,81,100],
[92,108,61,61,76,84,0,73,100],
[68,108,50,91,50,50,58,0,115],
[41,41,31,41,31,31,31,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,54,64,59,64,59,67],
[62,0,64,56,62,66,69,71,58],
[66,67,0,66,69,64,74,73,61],
[77,75,65,0,65,70,73,65,64],
[67,69,62,66,0,57,68,71,64],
[72,65,67,61,74,0,70,65,68],
[67,62,57,58,63,61,0,55,53],
[72,60,58,66,60,66,76,0,69],
[64,73,70,67,67,63,78,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,68,52,58,61,49,56,60],
[62,0,58,49,50,51,49,50,48],
[63,73,0,53,57,71,57,62,61],
[79,82,78,0,67,63,59,74,60],
[73,81,74,64,0,65,70,73,68],
[70,80,60,68,66,0,69,52,54],
[82,82,74,72,61,62,0,68,59],
[75,81,69,57,58,79,63,0,56],
[71,83,70,71,63,77,72,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,57,59,60,61,62,67,61],
[70,0,63,72,68,76,72,72,74],
[74,68,0,69,64,70,72,68,70],
[72,59,62,0,61,65,71,70,66],
[71,63,67,70,0,76,74,71,66],
[70,55,61,66,55,0,65,66,65],
[69,59,59,60,57,66,0,65,60],
[64,59,63,61,60,65,66,0,60],
[70,57,61,65,65,66,71,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,92,72,73,63,60,79,89],
[50,0,74,47,59,42,63,52,79],
[39,57,0,64,55,58,57,55,83],
[59,84,67,0,57,64,70,62,98],
[58,72,76,74,0,57,52,60,67],
[68,89,73,67,74,0,52,57,77],
[71,68,74,61,79,79,0,58,73],
[52,79,76,69,71,74,73,0,90],
[42,52,48,33,64,54,58,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,73,89,72,58,78,66,71],
[59,0,69,84,66,64,78,63,74],
[58,62,0,78,66,73,73,67,75],
[42,47,53,0,45,40,60,48,59],
[59,65,65,86,0,65,79,66,73],
[73,67,58,91,66,0,71,60,67],
[53,53,58,71,52,60,0,58,56],
[65,68,64,83,65,71,73,0,75],
[60,57,56,72,58,64,75,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,59,59,67,70,49,62,69],
[73,0,77,69,65,61,61,67,83],
[72,54,0,79,68,68,68,63,79],
[72,62,52,0,65,53,55,60,65],
[64,66,63,66,0,70,59,69,71],
[61,70,63,78,61,0,61,72,63],
[82,70,63,76,72,70,0,68,68],
[69,64,68,71,62,59,63,0,79],
[62,48,52,66,60,68,63,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,69,83,84,46,80,63,67],
[58,0,80,76,69,56,70,62,57],
[62,51,0,75,64,54,66,67,67],
[48,55,56,0,64,49,70,60,50],
[47,62,67,67,0,48,64,74,59],
[85,75,77,82,83,0,70,81,65],
[51,61,65,61,67,61,0,61,57],
[68,69,64,71,57,50,70,0,62],
[64,74,64,81,72,66,74,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,72,63,68,67,71,68],
[64,0,71,64,62,61,64,68,68],
[61,60,0,68,61,63,71,72,71],
[59,67,63,0,65,61,68,73,66],
[68,69,70,66,0,62,71,76,68],
[63,70,68,70,69,0,67,69,69],
[64,67,60,63,60,64,0,69,60],
[60,63,59,58,55,62,62,0,62],
[63,63,60,65,63,62,71,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,68,66,63,72,64,71,72],
[66,0,69,64,64,70,70,62,69],
[63,62,0,67,65,64,63,64,59],
[65,67,64,0,70,75,71,65,74],
[68,67,66,61,0,64,72,69,66],
[59,61,67,56,67,0,66,63,62],
[67,61,68,60,59,65,0,66,68],
[60,69,67,66,62,68,65,0,70],
[59,62,72,57,65,69,63,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,45,91,45,45,91,91,85],
[40,0,45,46,40,40,46,46,40],
[86,86,0,86,86,86,86,86,40],
[40,85,45,0,40,85,131,86,40],
[86,91,45,91,0,91,91,46,85],
[86,91,45,46,40,0,46,46,40],
[40,85,45,0,40,85,0,0,40],
[40,85,45,45,85,85,131,0,85],
[46,91,91,91,46,91,91,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,90,91,91,66,80,69,61],
[57,0,70,57,80,64,63,52,63],
[41,61,0,75,79,50,77,46,64],
[40,74,56,0,85,57,87,70,70],
[40,51,52,46,0,35,51,43,38],
[65,67,81,74,96,0,68,72,77],
[51,68,54,44,80,63,0,54,68],
[62,79,85,61,88,59,77,0,72],
[70,68,67,61,93,54,63,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,30,93,93,85,32,61,116],
[101,0,23,78,101,55,32,63,86],
[101,108,0,78,101,85,47,93,116],
[38,53,53,0,85,53,32,30,53],
[38,30,30,46,0,53,32,61,84],
[46,76,46,78,78,0,78,46,86],
[99,99,84,99,99,53,0,61,84],
[70,68,38,101,70,85,70,0,55],
[15,45,15,78,47,45,47,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,71,51,61,67,58,63,61],
[77,0,80,58,71,63,69,68,67],
[60,51,0,57,65,66,41,53,43],
[80,73,74,0,79,85,75,65,71],
[70,60,66,52,0,72,57,53,42],
[64,68,65,46,59,0,68,56,47],
[73,62,90,56,74,63,0,69,58],
[68,63,78,66,78,75,62,0,66],
[70,64,88,60,89,84,73,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,73,78,69,80,70,74,70],
[68,0,78,76,74,70,70,80,56],
[58,53,0,55,67,54,65,66,58],
[53,55,76,0,71,58,70,58,57],
[62,57,64,60,0,61,63,64,62],
[51,61,77,73,70,0,54,72,59],
[61,61,66,61,68,77,0,62,52],
[57,51,65,73,67,59,69,0,56],
[61,75,73,74,69,72,79,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,93,53,57,58,70,72,88],
[38,0,118,50,56,74,72,90,111],
[38,13,0,40,31,29,64,20,53],
[78,81,91,0,82,47,81,86,90],
[74,75,100,49,0,45,84,86,102],
[73,57,102,84,86,0,110,83,99],
[61,59,67,50,47,21,0,45,48],
[59,41,111,45,45,48,86,0,91],
[43,20,78,41,29,32,83,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,60,70,74,68,66,73,79],
[49,0,56,61,63,58,67,60,76],
[71,75,0,76,76,62,75,77,84],
[61,70,55,0,70,64,70,66,71],
[57,68,55,61,0,60,60,63,66],
[63,73,69,67,71,0,77,71,77],
[65,64,56,61,71,54,0,61,76],
[58,71,54,65,68,60,70,0,69],
[52,55,47,60,65,54,55,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,63,50,58,67,62,61,55],
[79,0,73,60,55,69,72,56,58],
[68,58,0,60,57,69,58,64,62],
[81,71,71,0,64,72,73,63,79],
[73,76,74,67,0,85,74,77,61],
[64,62,62,59,46,0,55,58,71],
[69,59,73,58,57,76,0,70,67],
[70,75,67,68,54,73,61,0,77],
[76,73,69,52,70,60,64,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,71,73,70,70,73,62,76],
[58,0,61,70,61,76,70,63,67],
[60,70,0,73,69,62,75,66,73],
[58,61,58,0,61,69,60,57,65],
[61,70,62,70,0,71,67,56,72],
[61,55,69,62,60,0,72,59,67],
[58,61,56,71,64,59,0,53,66],
[69,68,65,74,75,72,78,0,72],
[55,64,58,66,59,64,65,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,70,73,60,75,57,58,71],
[57,0,58,54,62,59,47,51,75],
[61,73,0,72,68,71,56,62,70],
[58,77,59,0,58,69,67,57,70],
[71,69,63,73,0,78,75,66,85],
[56,72,60,62,53,0,72,68,70],
[74,84,75,64,56,59,0,60,74],
[73,80,69,74,65,63,71,0,87],
[60,56,61,61,46,61,57,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,64,71,65,37,57,65,38],
[62,0,51,74,63,65,66,78,63],
[67,80,0,64,96,74,47,73,78],
[60,57,67,0,65,65,67,58,69],
[66,68,35,66,0,23,27,36,46],
[94,66,57,66,108,0,84,67,55],
[74,65,84,64,104,47,0,58,72],
[66,53,58,73,95,64,73,0,77],
[93,68,53,62,85,76,59,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,72,63,52,51,62,60,59],
[68,0,74,63,61,55,65,65,62],
[59,57,0,62,49,62,58,71,61],
[68,68,69,0,60,60,62,60,61],
[79,70,82,71,0,61,77,77,70],
[80,76,69,71,70,0,61,72,72],
[69,66,73,69,54,70,0,68,61],
[71,66,60,71,54,59,63,0,65],
[72,69,70,70,61,59,70,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,55,66,72,66,65,63,76],
[72,0,68,71,80,87,74,63,76],
[76,63,0,71,78,82,77,65,78],
[65,60,60,0,67,75,67,70,66],
[59,51,53,64,0,58,57,54,66],
[65,44,49,56,73,0,64,54,67],
[66,57,54,64,74,67,0,50,71],
[68,68,66,61,77,77,81,0,80],
[55,55,53,65,65,64,60,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,73,65,70,66,74,73,73],
[59,0,68,58,65,62,68,71,67],
[58,63,0,56,64,57,59,66,66],
[66,73,75,0,73,65,68,73,70],
[61,66,67,58,0,60,66,63,65],
[65,69,74,66,71,0,77,68,59],
[57,63,72,63,65,54,0,63,59],
[58,60,65,58,68,63,68,0,60],
[58,64,65,61,66,72,72,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,83,62,91,68,76,91,95],
[62,0,86,56,64,67,64,90,93],
[48,45,0,45,72,55,56,66,70],
[69,75,86,0,81,58,75,84,92],
[40,67,59,50,0,64,60,70,66],
[63,64,76,73,67,0,74,79,89],
[55,67,75,56,71,57,0,80,79],
[40,41,65,47,61,52,51,0,69],
[36,38,61,39,65,42,52,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,63,68,69,70,69,77,70],
[62,0,56,64,64,64,67,61,64],
[68,75,0,63,70,65,66,73,68],
[63,67,68,0,62,59,67,70,71],
[62,67,61,69,0,61,57,74,61],
[61,67,66,72,70,0,68,75,67],
[62,64,65,64,74,63,0,80,69],
[54,70,58,61,57,56,51,0,59],
[61,67,63,60,70,64,62,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,63,56,48,64,74,56,56],
[61,0,56,58,64,66,73,73,64],
[68,75,0,68,50,61,72,74,55],
[75,73,63,0,70,69,70,68,67],
[83,67,81,61,0,54,66,66,55],
[67,65,70,62,77,0,73,62,64],
[57,58,59,61,65,58,0,59,47],
[75,58,57,63,65,69,72,0,50],
[75,67,76,64,76,67,84,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,30,50,14,45,59,74,59],
[113,0,94,76,78,62,113,117,102],
[101,37,0,50,42,38,63,73,53],
[81,55,81,0,60,71,102,112,90],
[117,53,89,71,0,59,94,100,74],
[86,69,93,60,72,0,107,96,82],
[72,18,68,29,37,24,0,100,53],
[57,14,58,19,31,35,31,0,49],
[72,29,78,41,57,49,78,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,77,46,69,75,58,58,86],
[40,0,63,50,65,84,66,58,69],
[54,68,0,63,64,76,73,64,73],
[85,81,68,0,77,79,58,75,81],
[62,66,67,54,0,84,57,61,78],
[56,47,55,52,47,0,49,64,57],
[73,65,58,73,74,82,0,75,102],
[73,73,67,56,70,67,56,0,80],
[45,62,58,50,53,74,29,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,75,66,57,81,67,77,71],
[56,0,76,79,64,65,72,61,67],
[56,55,0,65,72,62,60,66,72],
[65,52,66,0,66,68,47,56,58],
[74,67,59,65,0,55,62,53,74],
[50,66,69,63,76,0,62,56,64],
[64,59,71,84,69,69,0,59,72],
[54,70,65,75,78,75,72,0,60],
[60,64,59,73,57,67,59,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,56,52,44,60,73,55,59],
[76,0,55,62,46,72,82,71,84],
[75,76,0,63,70,72,68,68,75],
[79,69,68,0,57,63,79,80,68],
[87,85,61,74,0,95,82,66,87],
[71,59,59,68,36,0,80,63,66],
[58,49,63,52,49,51,0,47,56],
[76,60,63,51,65,68,84,0,78],
[72,47,56,63,44,65,75,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,92,77,97,74,74,65,92],
[48,0,68,63,69,51,56,63,68],
[39,63,0,50,72,46,43,57,59],
[54,68,81,0,82,68,67,76,77],
[34,62,59,49,0,46,46,57,70],
[57,80,85,63,85,0,78,70,79],
[57,75,88,64,85,53,0,69,82],
[66,68,74,55,74,61,62,0,69],
[39,63,72,54,61,52,49,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,57,57,72,63,65,58,63],
[72,0,67,57,53,52,63,52,68],
[74,64,0,66,69,68,79,67,68],
[74,74,65,0,77,69,73,68,72],
[59,78,62,54,0,62,57,55,59],
[68,79,63,62,69,0,65,65,78],
[66,68,52,58,74,66,0,59,69],
[73,79,64,63,76,66,72,0,76],
[68,63,63,59,72,53,62,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,66,63,67,69,65,55,57],
[64,0,55,53,70,65,58,49,57],
[65,76,0,63,72,65,69,61,57],
[68,78,68,0,74,77,73,66,63],
[64,61,59,57,0,58,61,47,58],
[62,66,66,54,73,0,64,57,59],
[66,73,62,58,70,67,0,60,51],
[76,82,70,65,84,74,71,0,71],
[74,74,74,68,73,72,80,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,46,73,67,53,69,61,57],
[75,0,57,64,68,64,81,69,64],
[85,74,0,70,69,61,72,73,74],
[58,67,61,0,67,60,67,64,60],
[64,63,62,64,0,69,71,64,66],
[78,67,70,71,62,0,87,65,73],
[62,50,59,64,60,44,0,59,66],
[70,62,58,67,67,66,72,0,69],
[74,67,57,71,65,58,65,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,64,81,88,88,97,74,97],
[37,0,48,51,70,47,42,56,71],
[67,83,0,64,82,62,75,71,75],
[50,80,67,0,72,63,67,54,84],
[43,61,49,59,0,48,58,42,68],
[43,84,69,68,83,0,67,65,74],
[34,89,56,64,73,64,0,72,72],
[57,75,60,77,89,66,59,0,87],
[34,60,56,47,63,57,59,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,71,70,66,80,76,59,68],
[55,0,67,65,61,69,65,55,48],
[60,64,0,63,50,73,68,55,51],
[61,66,68,0,59,69,72,53,57],
[65,70,81,72,0,75,79,70,66],
[51,62,58,62,56,0,61,64,53],
[55,66,63,59,52,70,0,59,59],
[72,76,76,78,61,67,72,0,67],
[63,83,80,74,65,78,72,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,64,63,73,58,72,59,55],
[74,0,60,75,73,77,77,75,70],
[67,71,0,80,78,73,78,72,65],
[68,56,51,0,59,55,75,60,58],
[58,58,53,72,0,62,84,65,50],
[73,54,58,76,69,0,80,62,64],
[59,54,53,56,47,51,0,49,59],
[72,56,59,71,66,69,82,0,62],
[76,61,66,73,81,67,72,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,76,77,66,70,70,77,80],
[67,0,69,77,69,63,61,67,74],
[55,62,0,72,62,52,57,59,58],
[54,54,59,0,58,48,52,59,62],
[65,62,69,73,0,64,63,66,71],
[61,68,79,83,67,0,65,65,69],
[61,70,74,79,68,66,0,67,76],
[54,64,72,72,65,66,64,0,71],
[51,57,73,69,60,62,55,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,63,70,74,61,66,59,64],
[70,0,63,72,78,64,67,71,68],
[68,68,0,71,69,69,63,68,68],
[61,59,60,0,65,68,56,69,61],
[57,53,62,66,0,59,57,59,63],
[70,67,62,63,72,0,63,54,67],
[65,64,68,75,74,68,0,69,70],
[72,60,63,62,72,77,62,0,63],
[67,63,63,70,68,64,61,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,52,68,53,83,115,83,68],
[27,0,28,64,30,53,50,52,37],
[79,103,0,74,61,92,105,82,95],
[63,67,57,0,74,77,76,88,57],
[78,101,70,57,0,94,85,77,76],
[48,78,39,54,37,0,62,79,54],
[16,81,26,55,46,69,0,67,30],
[48,79,49,43,54,52,64,0,48],
[63,94,36,74,55,77,101,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,69,73,55,68,67,68,68],
[61,0,68,68,55,60,62,70,60],
[62,63,0,69,57,70,56,66,58],
[58,63,62,0,58,67,61,61,57],
[76,76,74,73,0,67,65,71,70],
[63,71,61,64,64,0,59,67,70],
[64,69,75,70,66,72,0,70,61],
[63,61,65,70,60,64,61,0,59],
[63,71,73,74,61,61,70,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,49,111,60,72,69,65,104],
[55,0,55,103,47,80,60,81,59],
[82,76,0,90,62,92,60,95,61],
[20,28,41,0,22,46,31,27,36],
[71,84,69,109,0,83,57,76,65],
[59,51,39,85,48,0,52,58,68],
[62,71,71,100,74,79,0,84,63],
[66,50,36,104,55,73,47,0,50],
[27,72,70,95,66,63,68,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,62,59,56,61,58,67,66],
[83,0,73,62,67,72,67,76,76],
[69,58,0,50,48,63,58,60,68],
[72,69,81,0,63,74,76,76,79],
[75,64,83,68,0,71,70,77,71],
[70,59,68,57,60,0,65,67,72],
[73,64,73,55,61,66,0,66,67],
[64,55,71,55,54,64,65,0,65],
[65,55,63,52,60,59,64,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,72,74,75,64,67,67,69],
[56,0,53,53,67,65,64,48,64],
[59,78,0,71,75,63,62,70,76],
[57,78,60,0,74,65,58,56,80],
[56,64,56,57,0,61,52,52,60],
[67,66,68,66,70,0,60,85,68],
[64,67,69,73,79,71,0,58,67],
[64,83,61,75,79,46,73,0,67],
[62,67,55,51,71,63,64,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,55,34,66,50,59,44,48],
[77,0,68,63,62,69,79,54,55],
[76,63,0,70,83,59,82,84,49],
[97,68,61,0,89,49,87,61,69],
[65,69,48,42,0,65,68,40,33],
[81,62,72,82,66,0,87,70,55],
[72,52,49,44,63,44,0,57,35],
[87,77,47,70,91,61,74,0,74],
[83,76,82,62,98,76,96,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,77,69,79,88,91,79,59],
[63,0,78,48,55,60,64,40,62],
[54,53,0,62,48,67,54,42,45],
[62,83,69,0,88,69,70,50,57],
[52,76,83,43,0,78,57,53,61],
[43,71,64,62,53,0,71,53,55],
[40,67,77,61,74,60,0,58,52],
[52,91,89,81,78,78,73,0,67],
[72,69,86,74,70,76,79,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,71,74,65,77,60,71,72],
[63,0,62,71,58,70,64,62,66],
[60,69,0,68,68,75,68,68,70],
[57,60,63,0,62,76,57,58,60],
[66,73,63,69,0,78,62,66,62],
[54,61,56,55,53,0,60,64,51],
[71,67,63,74,69,71,0,61,61],
[60,69,63,73,65,67,70,0,66],
[59,65,61,71,69,80,70,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,52,54,47,48,58,39,51],
[93,0,67,81,69,70,63,68,70],
[79,64,0,75,73,55,80,58,82],
[77,50,56,0,72,47,51,49,65],
[84,62,58,59,0,47,53,57,58],
[83,61,76,84,84,0,67,64,80],
[73,68,51,80,78,64,0,51,72],
[92,63,73,82,74,67,80,0,75],
[80,61,49,66,73,51,59,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,57,72,61,53,55,53,58],
[83,0,59,66,72,55,60,55,67],
[74,72,0,75,80,74,60,68,78],
[59,65,56,0,70,62,55,53,64],
[70,59,51,61,0,61,56,55,65],
[78,76,57,69,70,0,75,58,76],
[76,71,71,76,75,56,0,62,73],
[78,76,63,78,76,73,69,0,67],
[73,64,53,67,66,55,58,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,53,52,58,61,57,69,67],
[52,0,55,49,46,38,38,50,47],
[78,76,0,66,69,66,63,84,86],
[79,82,65,0,73,62,72,79,75],
[73,85,62,58,0,69,65,72,74],
[70,93,65,69,62,0,63,64,71],
[74,93,68,59,66,68,0,78,70],
[62,81,47,52,59,67,53,0,55],
[64,84,45,56,57,60,61,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,79,62,65,62,52,48,64],
[50,0,74,35,45,47,63,49,67],
[52,57,0,59,57,43,55,32,62],
[69,96,72,0,82,83,63,60,84],
[66,86,74,49,0,70,79,70,88],
[69,84,88,48,61,0,67,79,92],
[79,68,76,68,52,64,0,57,75],
[83,82,99,71,61,52,74,0,72],
[67,64,69,47,43,39,56,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,61,65,66,54,66,66,79],
[84,0,59,78,86,84,78,77,85],
[70,72,0,68,70,69,65,78,74],
[66,53,63,0,66,63,65,61,68],
[65,45,61,65,0,58,44,45,63],
[77,47,62,68,73,0,54,63,76],
[65,53,66,66,87,77,0,70,75],
[65,54,53,70,86,68,61,0,77],
[52,46,57,63,68,55,56,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,54,47,72,45,48,52,69],
[75,0,62,51,73,63,64,57,79],
[77,69,0,60,85,80,71,64,81],
[84,80,71,0,89,83,62,63,96],
[59,58,46,42,0,42,50,59,72],
[86,68,51,48,89,0,66,76,82],
[83,67,60,69,81,65,0,59,82],
[79,74,67,68,72,55,72,0,87],
[62,52,50,35,59,49,49,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,72,76,68,68,78,74,64],
[51,0,69,68,65,66,66,63,57],
[59,62,0,70,59,70,65,66,56],
[55,63,61,0,60,70,61,65,56],
[63,66,72,71,0,69,82,75,66],
[63,65,61,61,62,0,64,71,59],
[53,65,66,70,49,67,0,69,59],
[57,68,65,66,56,60,62,0,54],
[67,74,75,75,65,72,72,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,53,79,62,58,76,80,66],
[58,0,53,77,72,64,64,65,65],
[78,78,0,77,70,75,74,70,61],
[52,54,54,0,48,64,58,57,47],
[69,59,61,83,0,66,62,68,58],
[73,67,56,67,65,0,66,74,66],
[55,67,57,73,69,65,0,63,54],
[51,66,61,74,63,57,68,0,49],
[65,66,70,84,73,65,77,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,54,75,87,61,56,73,76],
[75,0,61,60,75,48,56,53,59],
[77,70,0,71,87,68,74,63,73],
[56,71,60,0,74,49,62,59,62],
[44,56,44,57,0,53,66,53,64],
[70,83,63,82,78,0,76,64,72],
[75,75,57,69,65,55,0,65,58],
[58,78,68,72,78,67,66,0,60],
[55,72,58,69,67,59,73,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,64,58,56,68,66,73,60],
[72,0,68,62,62,69,57,68,68],
[67,63,0,68,68,73,61,71,70],
[73,69,63,0,64,90,73,71,66],
[75,69,63,67,0,80,68,69,65],
[63,62,58,41,51,0,44,58,44],
[65,74,70,58,63,87,0,76,68],
[58,63,60,60,62,73,55,0,66],
[71,63,61,65,66,87,63,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,65,66,68,88,79,63,83],
[69,0,51,56,56,69,68,60,61],
[66,80,0,59,75,78,83,77,73],
[65,75,72,0,77,83,82,88,84],
[63,75,56,54,0,73,72,72,73],
[43,62,53,48,58,0,64,61,62],
[52,63,48,49,59,67,0,64,65],
[68,71,54,43,59,70,67,0,65],
[48,70,58,47,58,69,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,71,63,59,53,61,54,72],
[45,0,71,44,51,48,59,46,58],
[60,60,0,49,49,78,61,43,55],
[68,87,82,0,68,65,71,74,72],
[72,80,82,63,0,61,85,68,77],
[78,83,53,66,70,0,77,51,70],
[70,72,70,60,46,54,0,70,63],
[77,85,88,57,63,80,61,0,82],
[59,73,76,59,54,61,68,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,71,56,69,59,65,51,60],
[69,0,65,57,56,59,68,63,65],
[60,66,0,60,66,64,69,56,51],
[75,74,71,0,77,69,74,65,71],
[62,75,65,54,0,61,57,61,62],
[72,72,67,62,70,0,72,61,70],
[66,63,62,57,74,59,0,67,66],
[80,68,75,66,70,70,64,0,77],
[71,66,80,60,69,61,65,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,72,53,66,59,54,40,63],
[76,0,79,61,62,66,75,60,75],
[59,52,0,58,56,65,68,45,72],
[78,70,73,0,64,63,65,70,79],
[65,69,75,67,0,60,69,60,69],
[72,65,66,68,71,0,70,65,77],
[77,56,63,66,62,61,0,69,76],
[91,71,86,61,71,66,62,0,89],
[68,56,59,52,62,54,55,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,69,99,65,63,74,76,99],
[55,0,75,82,68,76,73,77,68],
[62,56,0,59,59,75,56,65,87],
[32,49,72,0,39,69,37,53,45],
[66,63,72,92,0,64,73,79,86],
[68,55,56,62,67,0,62,64,68],
[57,58,75,94,58,69,0,72,75],
[55,54,66,78,52,67,59,0,68],
[32,63,44,86,45,63,56,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,72,60,71,59,81,69,67],
[59,0,57,45,66,57,59,57,56],
[59,74,0,54,56,68,84,61,54],
[71,86,77,0,64,68,73,77,74],
[60,65,75,67,0,60,83,71,69],
[72,74,63,63,71,0,70,60,57],
[50,72,47,58,48,61,0,62,52],
[62,74,70,54,60,71,69,0,63],
[64,75,77,57,62,74,79,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,77,56,57,56,52,69,63],
[55,0,51,42,44,54,56,60,52],
[54,80,0,54,58,60,61,66,58],
[75,89,77,0,79,67,74,90,65],
[74,87,73,52,0,60,60,90,75],
[75,77,71,64,71,0,64,79,68],
[79,75,70,57,71,67,0,72,64],
[62,71,65,41,41,52,59,0,58],
[68,79,73,66,56,63,67,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,53,64,58,58,74,57,78],
[69,0,63,73,68,61,74,65,78],
[78,68,0,73,71,61,82,66,77],
[67,58,58,0,65,57,63,56,70],
[73,63,60,66,0,66,74,61,73],
[73,70,70,74,65,0,81,59,87],
[57,57,49,68,57,50,0,58,75],
[74,66,65,75,70,72,73,0,81],
[53,53,54,61,58,44,56,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,58,65,61,68,71,68,72],
[71,0,61,61,64,64,75,69,68],
[73,70,0,67,68,65,78,77,83],
[66,70,64,0,66,72,74,71,78],
[70,67,63,65,0,63,64,60,68],
[63,67,66,59,68,0,75,69,74],
[60,56,53,57,67,56,0,56,72],
[63,62,54,60,71,62,75,0,67],
[59,63,48,53,63,57,59,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,61,65,63,64,80,76,58],
[71,0,58,61,60,73,69,66,58],
[70,73,0,66,46,64,73,70,66],
[66,70,65,0,71,72,92,73,60],
[68,71,85,60,0,62,62,66,64],
[67,58,67,59,69,0,76,65,65],
[51,62,58,39,69,55,0,65,70],
[55,65,61,58,65,66,66,0,60],
[73,73,65,71,67,66,61,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,58,69,72,95,68,73,69],
[41,0,52,41,45,78,62,73,50],
[73,79,0,71,39,84,51,53,67],
[62,90,60,0,56,72,78,73,73],
[59,86,92,75,0,106,67,76,67],
[36,53,47,59,25,0,37,42,63],
[63,69,80,53,64,94,0,53,45],
[58,58,78,58,55,89,78,0,61],
[62,81,64,58,64,68,86,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,46,56,53,64,53,69,78],
[72,0,73,80,54,70,56,82,71],
[85,58,0,72,54,67,60,73,67],
[75,51,59,0,76,66,60,66,50],
[78,77,77,55,0,71,61,74,72],
[67,61,64,65,60,0,73,69,60],
[78,75,71,71,70,58,0,66,73],
[62,49,58,65,57,62,65,0,48],
[53,60,64,81,59,71,58,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,60,59,53,69,75,56,63],
[64,0,50,51,45,61,64,50,44],
[71,81,0,66,51,69,75,73,74],
[72,80,65,0,71,72,68,67,77],
[78,86,80,60,0,72,77,78,78],
[62,70,62,59,59,0,71,70,73],
[56,67,56,63,54,60,0,55,60],
[75,81,58,64,53,61,76,0,68],
[68,87,57,54,53,58,71,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,73,54,41,74,61,84,74],
[77,0,57,89,68,83,73,85,100],
[58,74,0,78,57,98,88,94,68],
[77,42,53,0,59,69,65,59,86],
[90,63,74,72,0,95,74,89,91],
[57,48,33,62,36,0,46,69,62],
[70,58,43,66,57,85,0,68,70],
[47,46,37,72,42,62,63,0,47],
[57,31,63,45,40,69,61,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,62,53,61,68,46,42,54],
[94,0,76,74,72,90,76,60,74],
[69,55,0,60,72,66,63,55,76],
[78,57,71,0,67,72,70,73,75],
[70,59,59,64,0,65,57,58,57],
[63,41,65,59,66,0,58,57,61],
[85,55,68,61,74,73,0,62,74],
[89,71,76,58,73,74,69,0,77],
[77,57,55,56,74,70,57,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,63,67,68,67,67,70,73],
[56,0,62,53,62,51,57,66,49],
[68,69,0,62,52,65,66,63,67],
[64,78,69,0,60,71,82,88,72],
[63,69,79,71,0,79,58,63,72],
[64,80,66,60,52,0,71,66,67],
[64,74,65,49,73,60,0,70,62],
[61,65,68,43,68,65,61,0,63],
[58,82,64,59,59,64,69,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,57,42,43,41,56,51,50],
[91,0,75,80,75,64,66,50,75],
[74,56,0,57,53,55,48,40,61],
[89,51,74,0,64,55,50,64,55],
[88,56,78,67,0,60,59,45,62],
[90,67,76,76,71,0,66,56,84],
[75,65,83,81,72,65,0,67,89],
[80,81,91,67,86,75,64,0,65],
[81,56,70,76,69,47,42,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,71,76,75,74,80,74,76],
[66,0,63,72,65,70,59,69,69],
[60,68,0,71,65,60,62,62,64],
[55,59,60,0,59,63,63,62,61],
[56,66,66,72,0,72,74,73,71],
[57,61,71,68,59,0,65,65,64],
[51,72,69,68,57,66,0,77,65],
[57,62,69,69,58,66,54,0,67],
[55,62,67,70,60,67,66,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,81,77,54,64,86,81,63],
[61,0,87,82,67,78,77,82,59],
[50,44,0,73,55,58,61,56,55],
[54,49,58,0,46,51,56,53,38],
[77,64,76,85,0,67,86,70,73],
[67,53,73,80,64,0,66,58,69],
[45,54,70,75,45,65,0,78,46],
[50,49,75,78,61,73,53,0,54],
[68,72,76,93,58,62,85,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,61,63,46,54,64,44,54],
[74,0,67,69,57,50,61,62,71],
[70,64,0,77,69,48,70,63,60],
[68,62,54,0,58,54,51,62,56],
[85,74,62,73,0,68,71,68,63],
[77,81,83,77,63,0,72,74,67],
[67,70,61,80,60,59,0,57,53],
[87,69,68,69,63,57,74,0,62],
[77,60,71,75,68,64,78,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,62,63,69,62,69,60,69],
[63,0,72,69,60,65,63,61,70],
[69,59,0,67,66,65,69,66,71],
[68,62,64,0,68,65,55,61,69],
[62,71,65,63,0,69,69,65,70],
[69,66,66,66,62,0,57,69,57],
[62,68,62,76,62,74,0,64,63],
[71,70,65,70,66,62,67,0,73],
[62,61,60,62,61,74,68,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,58,66,59,71,62,56,62],
[82,0,63,70,72,69,62,67,65],
[73,68,0,67,73,72,59,61,77],
[65,61,64,0,67,64,50,55,72],
[72,59,58,64,0,68,48,67,61],
[60,62,59,67,63,0,60,68,72],
[69,69,72,81,83,71,0,64,65],
[75,64,70,76,64,63,67,0,68],
[69,66,54,59,70,59,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,59,77,62,63,76,73,69],
[67,0,68,72,68,65,69,67,67],
[72,63,0,67,65,60,64,71,63],
[54,59,64,0,55,57,57,67,61],
[69,63,66,76,0,68,69,61,67],
[68,66,71,74,63,0,66,73,70],
[55,62,67,74,62,65,0,65,67],
[58,64,60,64,70,58,66,0,61],
[62,64,68,70,64,61,64,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,72,60,56,74,67,65,68],
[59,0,66,58,66,75,63,66,75],
[59,65,0,60,64,69,61,61,74],
[71,73,71,0,69,82,74,64,78],
[75,65,67,62,0,74,68,73,76],
[57,56,62,49,57,0,54,69,72],
[64,68,70,57,63,77,0,66,77],
[66,65,70,67,58,62,65,0,83],
[63,56,57,53,55,59,54,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,70,50,73,59,75,79,64],
[55,0,54,54,64,60,63,64,63],
[61,77,0,65,70,58,71,67,64],
[81,77,66,0,64,74,86,91,78],
[58,67,61,67,0,62,75,90,70],
[72,71,73,57,69,0,83,73,61],
[56,68,60,45,56,48,0,66,64],
[52,67,64,40,41,58,65,0,63],
[67,68,67,53,61,70,67,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,70,48,33,63,54,36,51],
[84,0,77,82,52,67,81,78,85],
[61,54,0,34,14,37,67,32,52],
[83,49,97,0,51,76,74,82,66],
[98,79,117,80,0,54,71,73,79],
[68,64,94,55,77,0,66,83,52],
[77,50,64,57,60,65,0,50,68],
[95,53,99,49,58,48,81,0,78],
[80,46,79,65,52,79,63,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,59,68,65,58,76,69,72],
[62,0,72,75,63,67,71,71,65],
[72,59,0,71,66,67,78,74,66],
[63,56,60,0,58,59,66,64,54],
[66,68,65,73,0,65,70,71,66],
[73,64,64,72,66,0,63,70,66],
[55,60,53,65,61,68,0,54,62],
[62,60,57,67,60,61,77,0,61],
[59,66,65,77,65,65,69,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,69,66,69,62,68,69,74],
[57,0,63,65,68,62,65,69,66],
[62,68,0,59,69,55,54,62,60],
[65,66,72,0,70,71,63,62,65],
[62,63,62,61,0,54,59,66,68],
[69,69,76,60,77,0,62,69,68],
[63,66,77,68,72,69,0,70,72],
[62,62,69,69,65,62,61,0,65],
[57,65,71,66,63,63,59,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,57,52,54,52,58,61,52],
[82,0,68,67,63,70,63,72,59],
[74,63,0,66,69,69,62,69,65],
[79,64,65,0,60,69,68,73,69],
[77,68,62,71,0,69,64,68,65],
[79,61,62,62,62,0,62,70,58],
[73,68,69,63,67,69,0,72,64],
[70,59,62,58,63,61,59,0,54],
[79,72,66,62,66,73,67,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,52,45,42,42,30,29,38],
[103,0,87,76,87,50,74,60,73],
[79,44,0,85,78,49,43,50,29],
[86,55,46,0,81,68,54,46,47],
[89,44,53,50,0,40,56,47,45],
[89,81,82,63,91,0,86,69,78],
[101,57,88,77,75,45,0,55,65],
[102,71,81,85,84,62,76,0,72],
[93,58,102,84,86,53,66,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,52,51,82,85,64,54,65],
[66,0,55,40,70,61,63,42,49],
[79,76,0,71,85,81,39,63,77],
[80,91,60,0,95,79,75,85,97],
[49,61,46,36,0,58,45,62,59],
[46,70,50,52,73,0,49,48,77],
[67,68,92,56,86,82,0,66,73],
[77,89,68,46,69,83,65,0,76],
[66,82,54,34,72,54,58,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,83,95,71,71,65,49,43],
[26,0,12,46,77,6,34,61,14],
[48,119,0,91,79,119,65,63,57],
[36,85,40,0,71,28,22,85,79],
[60,54,52,60,0,54,0,20,14],
[60,125,12,103,77,0,77,75,57],
[66,97,66,109,131,54,0,109,97],
[82,70,68,46,111,56,22,0,70],
[88,117,74,52,117,74,34,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,56,81,66,77,68,71,68],
[66,0,71,77,65,81,76,88,82],
[75,60,0,71,66,83,63,75,74],
[50,54,60,0,54,70,51,68,73],
[65,66,65,77,0,70,66,61,78],
[54,50,48,61,61,0,46,60,64],
[63,55,68,80,65,85,0,81,77],
[60,43,56,63,70,71,50,0,67],
[63,49,57,58,53,67,54,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,101,131,52,101,101,101,101],
[30,0,49,131,0,131,79,79,0],
[30,82,0,131,30,82,79,30,0],
[0,0,0,0,0,0,49,0,0],
[79,131,101,131,0,131,79,79,49],
[30,0,49,131,0,0,79,79,0],
[30,52,52,82,52,52,0,52,0],
[30,52,101,131,52,52,79,0,0],
[30,131,131,131,82,131,131,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,89,71,54,68,75,92,91],
[56,0,103,78,69,81,74,80,61],
[42,28,0,45,21,51,47,62,42],
[60,53,86,0,42,73,60,78,69],
[77,62,110,89,0,94,86,95,63],
[63,50,80,58,37,0,60,78,54],
[56,57,84,71,45,71,0,85,57],
[39,51,69,53,36,53,46,0,41],
[40,70,89,62,68,77,74,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,48,53,51,95,80,67,57],
[64,0,66,54,66,98,77,61,58],
[83,65,0,72,80,74,89,87,67],
[78,77,59,0,81,74,90,75,75],
[80,65,51,50,0,81,113,57,48],
[36,33,57,57,50,0,74,48,45],
[51,54,42,41,18,57,0,25,41],
[64,70,44,56,74,83,106,0,61],
[74,73,64,56,83,86,90,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,57,52,57,61,71,69,69],
[70,0,75,72,70,65,71,77,71],
[74,56,0,70,51,74,53,74,68],
[79,59,61,0,39,71,52,69,61],
[74,61,80,92,0,72,77,81,93],
[70,66,57,60,59,0,61,75,64],
[60,60,78,79,54,70,0,81,78],
[62,54,57,62,50,56,50,0,52],
[62,60,63,70,38,67,53,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,70,57,69,53,59,52,52],
[62,0,75,64,74,52,62,52,65],
[61,56,0,54,66,64,69,53,61],
[74,67,77,0,71,63,72,68,62],
[62,57,65,60,0,54,55,63,58],
[78,79,67,68,77,0,72,59,70],
[72,69,62,59,76,59,0,69,68],
[79,79,78,63,68,72,62,0,64],
[79,66,70,69,73,61,63,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,68,50,59,63,82,75,78],
[60,0,82,70,75,69,67,81,84],
[63,49,0,41,45,61,72,72,60],
[81,61,90,0,59,57,72,85,72],
[72,56,86,72,0,65,79,85,79],
[68,62,70,74,66,0,78,88,88],
[49,64,59,59,52,53,0,70,61],
[56,50,59,46,46,43,61,0,65],
[53,47,71,59,52,43,70,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,80,58,85,64,61,79,70],
[51,0,72,58,73,75,62,80,77],
[51,59,0,58,57,67,53,67,71],
[73,73,73,0,72,85,66,95,65],
[46,58,74,59,0,63,62,69,63],
[67,56,64,46,68,0,81,74,67],
[70,69,78,65,69,50,0,74,82],
[52,51,64,36,62,57,57,0,56],
[61,54,60,66,68,64,49,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,102,77,53,64,49,71,53],
[73,0,84,80,65,67,61,83,78],
[29,47,0,74,42,37,49,58,67],
[54,51,57,0,40,62,50,62,62],
[78,66,89,91,0,49,73,67,74],
[67,64,94,69,82,0,81,58,48],
[82,70,82,81,58,50,0,56,57],
[60,48,73,69,64,73,75,0,49],
[78,53,64,69,57,83,74,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,74,69,72,71,80,71,65],
[62,0,72,66,72,66,76,68,67],
[57,59,0,58,67,61,68,71,54],
[62,65,73,0,73,67,75,74,67],
[59,59,64,58,0,64,71,70,62],
[60,65,70,64,67,0,72,69,69],
[51,55,63,56,60,59,0,59,55],
[60,63,60,57,61,62,72,0,64],
[66,64,77,64,69,62,76,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,63,66,61,66,59,80],
[64,0,69,61,65,61,61,65,76],
[64,62,0,56,69,55,59,55,76],
[68,70,75,0,70,66,62,67,73],
[65,66,62,61,0,64,62,64,76],
[70,70,76,65,67,0,59,68,78],
[65,70,72,69,69,72,0,68,75],
[72,66,76,64,67,63,63,0,78],
[51,55,55,58,55,53,56,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,52,47,37,57,52,47,53],
[75,0,65,57,71,73,62,72,56],
[79,66,0,59,53,58,52,48,55],
[84,74,72,0,65,69,72,69,72],
[94,60,78,66,0,78,73,56,59],
[74,58,73,62,53,0,52,50,64],
[79,69,79,59,58,79,0,60,71],
[84,59,83,62,75,81,71,0,71],
[78,75,76,59,72,67,60,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,66,66,59,68,60,66],
[67,0,71,64,65,63,69,67,67],
[65,60,0,62,60,68,72,67,60],
[65,67,69,0,68,64,68,74,63],
[65,66,71,63,0,66,64,67,70],
[72,68,63,67,65,0,72,70,67],
[63,62,59,63,67,59,0,68,62],
[71,64,64,57,64,61,63,0,60],
[65,64,71,68,61,64,69,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,61,66,59,68,58,59,65],
[61,0,56,65,69,64,63,60,56],
[70,75,0,68,76,71,66,60,73],
[65,66,63,0,62,69,61,51,61],
[72,62,55,69,0,68,53,60,56],
[63,67,60,62,63,0,65,61,59],
[73,68,65,70,78,66,0,66,69],
[72,71,71,80,71,70,65,0,66],
[66,75,58,70,75,72,62,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,57,60,56,63,51,68,61],
[65,0,48,61,61,56,52,58,55],
[74,83,0,67,72,81,62,77,70],
[71,70,64,0,75,71,63,65,73],
[75,70,59,56,0,63,63,66,60],
[68,75,50,60,68,0,70,71,64],
[80,79,69,68,68,61,0,72,68],
[63,73,54,66,65,60,59,0,67],
[70,76,61,58,71,67,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,63,78,79,92,82,74,73],
[59,0,67,67,66,77,70,57,68],
[68,64,0,60,63,84,75,65,61],
[53,64,71,0,69,79,78,76,68],
[52,65,68,62,0,78,81,71,64],
[39,54,47,52,53,0,57,59,58],
[49,61,56,53,50,74,0,56,52],
[57,74,66,55,60,72,75,0,66],
[58,63,70,63,67,73,79,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,68,64,54,66,75,64,60],
[61,0,68,64,65,68,71,58,72],
[63,63,0,60,65,65,68,65,73],
[67,67,71,0,67,65,64,58,80],
[77,66,66,64,0,70,73,61,70],
[65,63,66,66,61,0,62,66,70],
[56,60,63,67,58,69,0,60,64],
[67,73,66,73,70,65,71,0,70],
[71,59,58,51,61,61,67,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,47,60,57,77,74,91,68],
[62,0,51,77,66,73,75,75,77],
[84,80,0,73,64,79,93,85,60],
[71,54,58,0,45,75,59,90,49],
[74,65,67,86,0,84,88,95,67],
[54,58,52,56,47,0,73,67,58],
[57,56,38,72,43,58,0,81,48],
[40,56,46,41,36,64,50,0,43],
[63,54,71,82,64,73,83,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,65,81,72,74,63,75,64],
[68,0,68,73,67,65,62,66,68],
[66,63,0,82,62,74,63,68,74],
[50,58,49,0,61,59,53,40,61],
[59,64,69,70,0,69,62,59,72],
[57,66,57,72,62,0,69,65,62],
[68,69,68,78,69,62,0,65,65],
[56,65,63,91,72,66,66,0,72],
[67,63,57,70,59,69,66,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,71,81,75,60,76,80,66],
[55,0,55,64,65,55,62,61,60],
[60,76,0,68,68,71,63,71,66],
[50,67,63,0,61,67,61,67,66],
[56,66,63,70,0,55,62,66,55],
[71,76,60,64,76,0,72,76,73],
[55,69,68,70,69,59,0,70,61],
[51,70,60,64,65,55,61,0,66],
[65,71,65,65,76,58,70,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,75,55,50,84,67,50,83],
[78,0,74,78,81,94,61,81,95],
[56,57,0,69,62,73,52,60,82],
[76,53,62,0,70,86,64,64,89],
[81,50,69,61,0,74,57,44,99],
[47,37,58,45,57,0,30,53,84],
[64,70,79,67,74,101,0,63,105],
[81,50,71,67,87,78,68,0,96],
[48,36,49,42,32,47,26,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,80,68,78,69,66,77,70],
[75,0,79,64,62,59,67,89,77],
[51,52,0,58,38,55,51,55,53],
[63,67,73,0,55,54,74,66,51],
[53,69,93,76,0,70,47,65,74],
[62,72,76,77,61,0,54,69,61],
[65,64,80,57,84,77,0,79,60],
[54,42,76,65,66,62,52,0,64],
[61,54,78,80,57,70,71,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,69,70,71,75,66,69,64],
[68,0,60,68,66,66,65,61,63],
[62,71,0,73,70,69,66,57,64],
[61,63,58,0,66,57,70,58,65],
[60,65,61,65,0,58,56,58,60],
[56,65,62,74,73,0,71,61,66],
[65,66,65,61,75,60,0,59,62],
[62,70,74,73,73,70,72,0,69],
[67,68,67,66,71,65,69,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,61,67,60,64,62,67,64],
[66,0,67,68,72,62,65,74,68],
[70,64,0,67,65,67,73,70,69],
[64,63,64,0,68,68,67,71,67],
[71,59,66,63,0,63,60,68,66],
[67,69,64,63,68,0,63,70,65],
[69,66,58,64,71,68,0,76,63],
[64,57,61,60,63,61,55,0,58],
[67,63,62,64,65,66,68,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,69,78,54,71,63,84,53],
[72,0,70,63,70,59,54,74,51],
[62,61,0,60,80,55,73,70,66],
[53,68,71,0,66,43,66,65,62],
[77,61,51,65,0,63,66,75,70],
[60,72,76,88,68,0,57,83,60],
[68,77,58,65,65,74,0,85,66],
[47,57,61,66,56,48,46,0,46],
[78,80,65,69,61,71,65,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,65,70,78,70,76,66,72],
[60,0,69,66,67,64,65,62,68],
[66,62,0,68,76,69,67,69,71],
[61,65,63,0,76,65,62,66,69],
[53,64,55,55,0,54,64,58,61],
[61,67,62,66,77,0,63,66,72],
[55,66,64,69,67,68,0,57,60],
[65,69,62,65,73,65,74,0,73],
[59,63,60,62,70,59,71,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,68,49,59,48,70,44,83],
[72,0,63,68,71,74,63,76,82],
[63,68,0,47,50,51,58,51,52],
[82,63,84,0,85,77,83,69,90],
[72,60,81,46,0,59,72,59,71],
[83,57,80,54,72,0,67,71,77],
[61,68,73,48,59,64,0,59,78],
[87,55,80,62,72,60,72,0,82],
[48,49,79,41,60,54,53,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,42,50,50,53,74,67,65],
[73,0,54,55,50,53,72,61,69],
[89,77,0,70,63,71,83,80,74],
[81,76,61,0,65,74,77,77,73],
[81,81,68,66,0,63,93,80,76],
[78,78,60,57,68,0,84,76,83],
[57,59,48,54,38,47,0,74,61],
[64,70,51,54,51,55,57,0,62],
[66,62,57,58,55,48,70,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,60,77,78,59,59,67,62],
[55,0,76,58,39,86,66,65,59],
[71,55,0,77,72,38,69,62,74],
[54,73,54,0,67,45,58,66,72],
[53,92,59,64,0,53,64,54,61],
[72,45,93,86,78,0,79,62,80],
[72,65,62,73,67,52,0,46,67],
[64,66,69,65,77,69,85,0,69],
[69,72,57,59,70,51,64,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,68,74,72,65,62,86,76],
[65,0,77,73,76,71,73,82,76],
[63,54,0,55,74,67,59,77,68],
[57,58,76,0,61,51,57,73,68],
[59,55,57,70,0,61,57,64,64],
[66,60,64,80,70,0,62,70,69],
[69,58,72,74,74,69,0,85,81],
[45,49,54,58,67,61,46,0,55],
[55,55,63,63,67,62,50,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,75,68,62,73,69,71],
[63,0,60,69,58,68,65,61,65],
[67,71,0,71,68,73,77,65,78],
[56,62,60,0,61,62,60,62,65],
[63,73,63,70,0,70,69,64,70],
[69,63,58,69,61,0,71,65,72],
[58,66,54,71,62,60,0,60,67],
[62,70,66,69,67,66,71,0,71],
[60,66,53,66,61,59,64,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,68,62,61,62,65,61,56],
[68,0,61,66,58,62,68,60,59],
[63,70,0,62,57,65,72,62,57],
[69,65,69,0,69,63,69,70,62],
[70,73,74,62,0,68,71,64,66],
[69,69,66,68,63,0,76,67,66],
[66,63,59,62,60,55,0,55,49],
[70,71,69,61,67,64,76,0,67],
[75,72,74,69,65,65,82,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,69,88,75,81,77,86,87],
[66,0,63,68,66,68,78,63,68],
[62,68,0,74,74,79,59,72,67],
[43,63,57,0,59,64,54,64,71],
[56,65,57,72,0,76,71,68,74],
[50,63,52,67,55,0,72,57,72],
[54,53,72,77,60,59,0,79,73],
[45,68,59,67,63,74,52,0,72],
[44,63,64,60,57,59,58,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,58,78,73,56,59,69,62],
[64,0,54,69,69,65,68,69,69],
[73,77,0,72,72,68,60,68,81],
[53,62,59,0,69,48,59,64,58],
[58,62,59,62,0,58,61,59,67],
[75,66,63,83,73,0,72,72,74],
[72,63,71,72,70,59,0,69,74],
[62,62,63,67,72,59,62,0,56],
[69,62,50,73,64,57,57,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,68,79,75,66,64,82,69],
[65,0,60,75,65,66,63,75,72],
[63,71,0,78,62,61,69,75,81],
[52,56,53,0,63,62,55,63,65],
[56,66,69,68,0,64,69,71,72],
[65,65,70,69,67,0,66,79,73],
[67,68,62,76,62,65,0,77,75],
[49,56,56,68,60,52,54,0,63],
[62,59,50,66,59,58,56,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,57,73,62,61,69,58],
[67,0,71,65,78,58,61,64,64],
[63,60,0,67,77,64,64,64,60],
[74,66,64,0,75,68,66,65,66],
[58,53,54,56,0,55,57,56,50],
[69,73,67,63,76,0,66,73,60],
[70,70,67,65,74,65,0,75,62],
[62,67,67,66,75,58,56,0,58],
[73,67,71,65,81,71,69,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,58,72,68,78,80,96,67],
[66,0,80,61,66,50,86,70,62],
[73,51,0,54,66,69,67,95,52],
[59,70,77,0,61,32,73,64,58],
[63,65,65,70,0,55,64,67,58],
[53,81,62,99,76,0,73,91,66],
[51,45,64,58,67,58,0,56,43],
[35,61,36,67,64,40,75,0,55],
[64,69,79,73,73,65,88,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,80,110,63,64,47,58,97],
[61,0,80,80,75,75,62,87,96],
[51,51,0,73,62,61,64,64,77],
[21,51,58,0,59,27,19,45,43],
[68,56,69,72,0,65,30,56,64],
[67,56,70,104,66,0,24,53,81],
[84,69,67,112,101,107,0,60,73],
[73,44,67,86,75,78,71,0,80],
[34,35,54,88,67,50,58,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,53,54,64,54,58,54],
[63,0,60,60,59,63,67,61,58],
[61,71,0,62,61,56,61,61,54],
[78,71,69,0,69,63,72,62,57],
[77,72,70,62,0,59,63,69,65],
[67,68,75,68,72,0,72,71,65],
[77,64,70,59,68,59,0,59,66],
[73,70,70,69,62,60,72,0,66],
[77,73,77,74,66,66,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,62,67,63,66,45,64,74],
[65,0,68,71,67,65,60,86,80],
[69,63,0,75,72,59,67,81,74],
[64,60,56,0,62,57,51,72,60],
[68,64,59,69,0,66,61,72,68],
[65,66,72,74,65,0,57,71,76],
[86,71,64,80,70,74,0,66,81],
[67,45,50,59,59,60,65,0,70],
[57,51,57,71,63,55,50,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,65,58,68,61,66,53,63],
[67,0,70,63,64,66,70,70,60],
[66,61,0,51,64,54,72,55,53],
[73,68,80,0,61,60,74,64,63],
[63,67,67,70,0,61,69,53,69],
[70,65,77,71,70,0,72,66,72],
[65,61,59,57,62,59,0,55,63],
[78,61,76,67,78,65,76,0,73],
[68,71,78,68,62,59,68,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,71,56,56,59,61,66],
[67,0,71,69,62,60,57,57,69],
[62,60,0,63,61,57,60,54,67],
[60,62,68,0,61,64,68,65,67],
[75,69,70,70,0,62,65,64,71],
[75,71,74,67,69,0,70,66,65],
[72,74,71,63,66,61,0,67,69],
[70,74,77,66,67,65,64,0,72],
[65,62,64,64,60,66,62,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,53,71,56,92,68,69,89],
[69,0,62,85,79,76,90,66,87],
[78,69,0,89,65,75,89,87,103],
[60,46,42,0,71,50,76,55,66],
[75,52,66,60,0,65,88,76,88],
[39,55,56,81,66,0,84,53,85],
[63,41,42,55,43,47,0,56,62],
[62,65,44,76,55,78,75,0,100],
[42,44,28,65,43,46,69,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,66,67,51,77,70,60,66],
[56,0,60,66,59,81,78,67,69],
[65,71,0,62,70,70,71,67,75],
[64,65,69,0,62,63,74,77,69],
[80,72,61,69,0,80,92,76,71],
[54,50,61,68,51,0,63,70,72],
[61,53,60,57,39,68,0,45,53],
[71,64,64,54,55,61,86,0,64],
[65,62,56,62,60,59,78,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,63,74,67,66,74,73,68],
[62,0,54,68,72,49,60,66,66],
[68,77,0,82,78,63,68,70,61],
[57,63,49,0,64,59,63,51,52],
[64,59,53,67,0,60,68,64,64],
[65,82,68,72,71,0,70,79,64],
[57,71,63,68,63,61,0,66,69],
[58,65,61,80,67,52,65,0,55],
[63,65,70,79,67,67,62,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,50,45,96,91,91,91,96],
[81,0,0,0,51,46,91,91,51],
[81,131,0,81,86,46,126,91,51],
[86,131,50,0,86,96,126,91,96],
[35,80,45,45,0,91,45,91,96],
[40,85,85,35,40,0,80,80,51],
[40,40,5,5,86,51,0,51,51],
[40,40,40,40,40,51,80,0,51],
[35,80,80,35,35,80,80,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,77,61,65,67,62,64,68],
[68,0,74,64,68,79,63,70,71],
[54,57,0,54,67,56,43,57,55],
[70,67,77,0,75,77,61,74,76],
[66,63,64,56,0,80,58,61,66],
[64,52,75,54,51,0,48,53,63],
[69,68,88,70,73,83,0,65,71],
[67,61,74,57,70,78,66,0,65],
[63,60,76,55,65,68,60,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,77,81,62,68,66,86,77],
[57,0,61,58,72,68,50,65,51],
[54,70,0,69,60,62,68,73,43],
[50,73,62,0,77,57,46,65,53],
[69,59,71,54,0,61,52,56,52],
[63,63,69,74,70,0,70,81,52],
[65,81,63,85,79,61,0,78,76],
[45,66,58,66,75,50,53,0,55],
[54,80,88,78,79,79,55,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,67,58,61,61,64,54,62],
[62,0,72,64,66,69,66,63,68],
[64,59,0,60,59,62,62,54,62],
[73,67,71,0,70,60,69,70,66],
[70,65,72,61,0,62,67,60,64],
[70,62,69,71,69,0,67,69,72],
[67,65,69,62,64,64,0,61,67],
[77,68,77,61,71,62,70,0,66],
[69,63,69,65,67,59,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,64,70,52,67,70,76,67],
[77,0,86,95,53,81,64,77,59],
[67,45,0,61,53,80,65,69,56],
[61,36,70,0,55,61,61,57,61],
[79,78,78,76,0,64,59,72,68],
[64,50,51,70,67,0,59,69,51],
[61,67,66,70,72,72,0,73,82],
[55,54,62,74,59,62,58,0,64],
[64,72,75,70,63,80,49,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,64,78,70,62,76,84,69],
[52,0,52,76,52,61,51,61,67],
[67,79,0,74,69,68,59,64,64],
[53,55,57,0,55,56,54,63,57],
[61,79,62,76,0,65,67,66,68],
[69,70,63,75,66,0,68,67,68],
[55,80,72,77,64,63,0,60,67],
[47,70,67,68,65,64,71,0,60],
[62,64,67,74,63,63,64,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,73,83,59,81,84,65,72],
[57,0,84,92,63,75,78,72,78],
[58,47,0,79,66,48,54,59,66],
[48,39,52,0,51,63,40,49,40],
[72,68,65,80,0,75,65,56,70],
[50,56,83,68,56,0,59,55,72],
[47,53,77,91,66,72,0,54,74],
[66,59,72,82,75,76,77,0,77],
[59,53,65,91,61,59,57,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,58,49,58,63,61,67,52],
[71,0,61,64,70,63,71,67,61],
[73,70,0,60,58,64,72,69,62],
[82,67,71,0,64,64,68,72,74],
[73,61,73,67,0,67,69,70,68],
[68,68,67,67,64,0,75,73,57],
[70,60,59,63,62,56,0,78,61],
[64,64,62,59,61,58,53,0,53],
[79,70,69,57,63,74,70,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,64,63,67,63,61,63],
[64,0,67,62,68,71,72,60,66],
[61,64,0,57,60,65,57,61,61],
[67,69,74,0,71,74,65,69,79],
[68,63,71,60,0,72,63,58,65],
[64,60,66,57,59,0,59,60,59],
[68,59,74,66,68,72,0,67,68],
[70,71,70,62,73,71,64,0,66],
[68,65,70,52,66,72,63,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,67,64,78,67,69,71,82],
[60,0,59,55,67,57,56,68,74],
[64,72,0,59,68,55,64,67,73],
[67,76,72,0,81,64,70,80,76],
[53,64,63,50,0,51,53,69,73],
[64,74,76,67,80,0,65,76,74],
[62,75,67,61,78,66,0,68,78],
[60,63,64,51,62,55,63,0,72],
[49,57,58,55,58,57,53,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,73,64,61,65,67,79,67],
[60,0,75,69,64,65,68,78,70],
[58,56,0,66,58,67,66,66,67],
[67,62,65,0,67,58,59,71,71],
[70,67,73,64,0,64,68,79,62],
[66,66,64,73,67,0,68,81,69],
[64,63,65,72,63,63,0,70,70],
[52,53,65,60,52,50,61,0,62],
[64,61,64,60,69,62,61,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,65,64,49,43,52,54,73],
[68,0,77,69,62,57,59,54,71],
[66,54,0,64,55,60,45,52,68],
[67,62,67,0,62,58,49,55,72],
[82,69,76,69,0,60,66,62,73],
[88,74,71,73,71,0,63,68,86],
[79,72,86,82,65,68,0,69,79],
[77,77,79,76,69,63,62,0,82],
[58,60,63,59,58,45,52,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,84,66,93,81,62,79,89],
[59,0,72,68,85,80,77,58,74],
[47,59,0,57,71,71,43,65,79],
[65,63,74,0,85,70,65,77,72],
[38,46,60,46,0,51,51,61,69],
[50,51,60,61,80,0,38,72,84],
[69,54,88,66,80,93,0,66,85],
[52,73,66,54,70,59,65,0,70],
[42,57,52,59,62,47,46,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,72,56,61,53,67,56,74],
[73,0,68,47,66,60,64,64,70],
[59,63,0,58,73,51,72,64,78],
[75,84,73,0,65,56,97,68,92],
[70,65,58,66,0,57,74,60,74],
[78,71,80,75,74,0,61,57,72],
[64,67,59,34,57,70,0,71,76],
[75,67,67,63,71,74,60,0,77],
[57,61,53,39,57,59,55,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,70,73,64,70,83,80,77],
[62,0,69,72,66,66,88,78,72],
[61,62,0,68,60,65,77,71,76],
[58,59,63,0,71,61,84,70,68],
[67,65,71,60,0,68,86,79,75],
[61,65,66,70,63,0,75,66,81],
[48,43,54,47,45,56,0,59,68],
[51,53,60,61,52,65,72,0,69],
[54,59,55,63,56,50,63,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,71,67,98,55,86,92,99],
[38,0,52,54,80,44,78,65,68],
[60,79,0,44,69,43,80,51,68],
[64,77,87,0,82,66,85,86,89],
[33,51,62,49,0,42,78,54,58],
[76,87,88,65,89,0,96,81,79],
[45,53,51,46,53,35,0,54,58],
[39,66,80,45,77,50,77,0,77],
[32,63,63,42,73,52,73,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,59,64,61,55,58,55,64],
[72,0,70,74,67,65,70,62,80],
[72,61,0,73,67,68,67,71,69],
[67,57,58,0,67,55,56,64,66],
[70,64,64,64,0,58,54,63,65],
[76,66,63,76,73,0,65,67,76],
[73,61,64,75,77,66,0,67,72],
[76,69,60,67,68,64,64,0,66],
[67,51,62,65,66,55,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,84,61,67,70,66,74,58],
[64,0,66,58,61,65,64,76,62],
[47,65,0,53,47,53,49,76,59],
[70,73,78,0,71,66,57,75,70],
[64,70,84,60,0,61,60,73,65],
[61,66,78,65,70,0,68,68,62],
[65,67,82,74,71,63,0,68,63],
[57,55,55,56,58,63,63,0,46],
[73,69,72,61,66,69,68,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,51,74,68,63,66,69,58],
[61,0,52,61,60,59,50,61,56],
[80,79,0,80,72,70,61,72,58],
[57,70,51,0,60,59,57,61,55],
[63,71,59,71,0,61,62,68,64],
[68,72,61,72,70,0,57,65,55],
[65,81,70,74,69,74,0,71,66],
[62,70,59,70,63,66,60,0,60],
[73,75,73,76,67,76,65,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,61,66,60,64,61,78,58],
[70,0,73,75,71,64,63,68,66],
[70,58,0,70,64,61,71,63,66],
[65,56,61,0,68,63,70,61,58],
[71,60,67,63,0,72,62,76,61],
[67,67,70,68,59,0,59,80,62],
[70,68,60,61,69,72,0,78,59],
[53,63,68,70,55,51,53,0,65],
[73,65,65,73,70,69,72,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,64,70,65,82,84,76,83],
[62,0,67,69,59,80,81,73,73],
[67,64,0,72,66,92,80,79,70],
[61,62,59,0,58,84,66,70,70],
[66,72,65,73,0,83,73,74,78],
[49,51,39,47,48,0,53,58,57],
[47,50,51,65,58,78,0,59,63],
[55,58,52,61,57,73,72,0,69],
[48,58,61,61,53,74,68,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,68,65,60,62,67,56,82],
[66,0,80,82,64,64,71,69,88],
[63,51,0,60,48,62,65,54,61],
[66,49,71,0,65,84,70,70,85],
[71,67,83,66,0,70,74,60,82],
[69,67,69,47,61,0,71,61,62],
[64,60,66,61,57,60,0,56,67],
[75,62,77,61,71,70,75,0,78],
[49,43,70,46,49,69,64,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,58,61,60,58,60,60,60],
[74,0,69,69,61,60,61,64,63],
[73,62,0,72,67,60,69,62,61],
[70,62,59,0,58,62,53,56,63],
[71,70,64,73,0,65,66,63,66],
[73,71,71,69,66,0,59,65,68],
[71,70,62,78,65,72,0,73,64],
[71,67,69,75,68,66,58,0,65],
[71,68,70,68,65,63,67,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,38,73,58,69,46,66,67],
[85,0,83,87,77,77,47,58,84],
[93,48,0,81,77,99,65,66,84],
[58,44,50,0,72,58,41,60,75],
[73,54,54,59,0,86,61,44,72],
[62,54,32,73,45,0,20,46,49],
[85,84,66,90,70,111,0,74,57],
[65,73,65,71,87,85,57,0,89],
[64,47,47,56,59,82,74,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,64,71,64,76,75,62,67],
[65,0,71,68,62,76,66,67,64],
[67,60,0,60,58,71,72,67,60],
[60,63,71,0,57,64,79,60,67],
[67,69,73,74,0,77,60,63,70],
[55,55,60,67,54,0,61,55,67],
[56,65,59,52,71,70,0,57,63],
[69,64,64,71,68,76,74,0,72],
[64,67,71,64,61,64,68,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,62,78,83,62,73,66,55],
[72,0,69,73,72,73,73,62,70],
[69,62,0,75,77,57,68,60,61],
[53,58,56,0,62,75,53,67,46],
[48,59,54,69,0,59,64,56,54],
[69,58,74,56,72,0,66,60,57],
[58,58,63,78,67,65,0,65,52],
[65,69,71,64,75,71,66,0,49],
[76,61,70,85,77,74,79,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,69,66,71,66,72,70,81],
[70,0,67,62,69,58,63,67,76],
[62,64,0,66,73,58,63,66,80],
[65,69,65,0,67,61,60,68,76],
[60,62,58,64,0,61,60,70,71],
[65,73,73,70,70,0,69,68,77],
[59,68,68,71,71,62,0,67,73],
[61,64,65,63,61,63,64,0,70],
[50,55,51,55,60,54,58,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,61,65,61,58,64,68,66],
[71,0,65,70,73,66,64,75,70],
[70,66,0,71,72,69,68,74,65],
[66,61,60,0,65,67,64,63,63],
[70,58,59,66,0,61,60,65,60],
[73,65,62,64,70,0,69,67,69],
[67,67,63,67,71,62,0,67,62],
[63,56,57,68,66,64,64,0,57],
[65,61,66,68,71,62,69,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,65,67,54,62,59,65,67],
[60,0,58,67,57,64,52,61,58],
[66,73,0,66,63,66,52,64,63],
[64,64,65,0,51,50,51,55,68],
[77,74,68,80,0,69,62,66,77],
[69,67,65,81,62,0,58,67,68],
[72,79,79,80,69,73,0,61,66],
[66,70,67,76,65,64,70,0,66],
[64,73,68,63,54,63,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,62,57,67,64,58,71,54],
[54,0,70,60,81,66,77,65,57],
[69,61,0,59,67,52,51,67,59],
[74,71,72,0,71,56,67,66,52],
[64,50,64,60,0,49,66,54,57],
[67,65,79,75,82,0,67,72,62],
[73,54,80,64,65,64,0,67,49],
[60,66,64,65,77,59,64,0,66],
[77,74,72,79,74,69,82,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,83,75,66,71,57,56,73],
[79,0,70,80,59,77,51,83,55],
[48,61,0,78,52,54,43,42,64],
[56,51,53,0,65,65,60,54,67],
[65,72,79,66,0,82,73,50,53],
[60,54,77,66,49,0,60,46,53],
[74,80,88,71,58,71,0,81,57],
[75,48,89,77,81,85,50,0,88],
[58,76,67,64,78,78,74,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,70,65,64,61,54,76,63],
[69,0,79,80,74,71,61,74,70],
[61,52,0,69,70,58,56,79,60],
[66,51,62,0,68,63,47,67,54],
[67,57,61,63,0,51,55,72,55],
[70,60,73,68,80,0,63,82,66],
[77,70,75,84,76,68,0,71,63],
[55,57,52,64,59,49,60,0,47],
[68,61,71,77,76,65,68,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,57,50,56,64,69,62,66],
[74,0,65,64,65,74,75,75,61],
[74,66,0,58,57,70,74,67,60],
[81,67,73,0,68,77,89,73,62],
[75,66,74,63,0,74,84,72,70],
[67,57,61,54,57,0,76,61,55],
[62,56,57,42,47,55,0,58,53],
[69,56,64,58,59,70,73,0,60],
[65,70,71,69,61,76,78,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,57,62,66,47,61,53,62],
[80,0,71,71,73,65,84,74,70],
[74,60,0,67,70,71,75,68,75],
[69,60,64,0,72,59,71,63,78],
[65,58,61,59,0,51,70,50,67],
[84,66,60,72,80,0,80,67,80],
[70,47,56,60,61,51,0,59,62],
[78,57,63,68,81,64,72,0,73],
[69,61,56,53,64,51,69,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,48,57,53,54,58,41,70],
[86,0,71,77,57,85,67,68,78],
[83,60,0,67,59,71,65,67,75],
[74,54,64,0,67,71,72,62,70],
[78,74,72,64,0,80,67,62,81],
[77,46,60,60,51,0,59,56,64],
[73,64,66,59,64,72,0,55,67],
[90,63,64,69,69,75,76,0,75],
[61,53,56,61,50,67,64,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,73,75,60,83,59,75,77],
[55,0,49,59,55,65,51,71,59],
[58,82,0,79,68,79,68,67,91],
[56,72,52,0,60,79,67,74,71],
[71,76,63,71,0,79,77,73,65],
[48,66,52,52,52,0,43,63,62],
[72,80,63,64,54,88,0,72,78],
[56,60,64,57,58,68,59,0,61],
[54,72,40,60,66,69,53,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,69,70,69,77,60,69,74],
[58,0,74,63,67,73,61,65,62],
[62,57,0,68,73,80,64,73,68],
[61,68,63,0,78,71,70,79,62],
[62,64,58,53,0,78,73,62,71],
[54,58,51,60,53,0,58,53,58],
[71,70,67,61,58,73,0,68,73],
[62,66,58,52,69,78,63,0,64],
[57,69,63,69,60,73,58,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,72,66,72,73,72,48,69],
[63,0,68,57,64,62,66,53,72],
[59,63,0,58,67,73,63,67,60],
[65,74,73,0,71,69,64,59,72],
[59,67,64,60,0,64,69,53,71],
[58,69,58,62,67,0,67,56,61],
[59,65,68,67,62,64,0,57,72],
[83,78,64,72,78,75,74,0,86],
[62,59,71,59,60,70,59,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,79,74,47,90,84,61,36],
[77,0,90,110,50,89,78,44,36],
[52,41,0,80,43,91,69,41,27],
[57,21,51,0,34,46,62,28,32],
[84,81,88,97,0,90,64,70,70],
[41,42,40,85,41,0,57,25,27],
[47,53,62,69,67,74,0,71,29],
[70,87,90,103,61,106,60,0,34],
[95,95,104,99,61,104,102,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,59,58,40,67,52,71,76],
[73,0,72,61,55,68,55,71,78],
[72,59,0,60,62,61,72,71,64],
[73,70,71,0,83,72,55,81,78],
[91,76,69,48,0,69,68,73,76],
[64,63,70,59,62,0,61,66,82],
[79,76,59,76,63,70,0,80,77],
[60,60,60,50,58,65,51,0,64],
[55,53,67,53,55,49,54,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,109,86,105,67,58,84,74],
[47,0,97,67,88,59,75,67,55],
[22,34,0,33,85,38,28,50,55],
[45,64,98,0,96,77,35,85,78],
[26,43,46,35,0,61,44,54,67],
[64,72,93,54,70,0,66,100,109],
[73,56,103,96,87,65,0,95,88],
[47,64,81,46,77,31,36,0,84],
[57,76,76,53,64,22,43,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,49,56,53,39,41,45,39],
[84,0,69,67,64,56,67,57,61],
[82,62,0,75,70,47,53,63,53],
[75,64,56,0,66,46,47,57,67],
[78,67,61,65,0,59,70,55,63],
[92,75,84,85,72,0,59,79,72],
[90,64,78,84,61,72,0,72,77],
[86,74,68,74,76,52,59,0,61],
[92,70,78,64,68,59,54,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,54,62,58,56,51,53,47],
[78,0,70,84,81,75,63,78,79],
[77,61,0,88,82,74,69,79,68],
[69,47,43,0,52,58,27,40,48],
[73,50,49,79,0,65,48,62,62],
[75,56,57,73,66,0,53,65,52],
[80,68,62,104,83,78,0,77,65],
[78,53,52,91,69,66,54,0,63],
[84,52,63,83,69,79,66,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,65,66,65,94,54,69,62],
[41,0,62,69,58,76,58,61,67],
[66,69,0,71,49,68,56,64,72],
[65,62,60,0,62,69,41,37,50],
[66,73,82,69,0,80,62,65,84],
[37,55,63,62,51,0,40,45,64],
[77,73,75,90,69,91,0,64,85],
[62,70,67,94,66,86,67,0,75],
[69,64,59,81,47,67,46,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,51,72,52,66,76,81],
[62,0,47,49,56,43,63,65,70],
[66,84,0,61,69,67,57,76,76],
[80,82,70,0,58,80,80,72,57],
[59,75,62,73,0,75,69,88,52],
[79,88,64,51,56,0,58,82,65],
[65,68,74,51,62,73,0,86,76],
[55,66,55,59,43,49,45,0,58],
[50,61,55,74,79,66,55,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,63,86,79,70,98,69,79],
[38,0,67,96,43,51,117,51,84],
[68,64,0,51,73,73,96,64,83],
[45,35,80,0,72,67,72,35,54],
[52,88,58,59,0,74,126,65,107],
[61,80,58,64,57,0,117,56,89],
[33,14,35,59,5,14,0,36,32],
[62,80,67,96,66,75,95,0,89],
[52,47,48,77,24,42,99,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,73,62,62,69,65,66,73],
[71,0,71,72,70,74,66,59,78],
[58,60,0,59,65,60,61,60,67],
[69,59,72,0,59,64,66,70,70],
[69,61,66,72,0,63,65,69,75],
[62,57,71,67,68,0,60,69,67],
[66,65,70,65,66,71,0,65,73],
[65,72,71,61,62,62,66,0,74],
[58,53,64,61,56,64,58,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,64,63,64,55,69,59,65],
[77,0,75,64,65,64,77,71,63],
[67,56,0,73,62,56,66,74,56],
[68,67,58,0,71,62,76,77,70],
[67,66,69,60,0,67,68,76,68],
[76,67,75,69,64,0,76,78,71],
[62,54,65,55,63,55,0,61,52],
[72,60,57,54,55,53,70,0,57],
[66,68,75,61,63,60,79,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,60,67,57,58,48,68,58],
[64,0,56,62,42,53,43,58,47],
[71,75,0,80,52,65,50,73,61],
[64,69,51,0,45,67,47,69,57],
[74,89,79,86,0,79,67,72,63],
[73,78,66,64,52,0,43,66,56],
[83,88,81,84,64,88,0,77,71],
[63,73,58,62,59,65,54,0,53],
[73,84,70,74,68,75,60,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,58,62,59,70,57,76],
[67,0,72,67,71,60,68,60,73],
[64,59,0,61,59,52,64,61,70],
[73,64,70,0,73,72,72,68,77],
[69,60,72,58,0,64,62,56,72],
[72,71,79,59,67,0,79,72,82],
[61,63,67,59,69,52,0,60,79],
[74,71,70,63,75,59,71,0,84],
[55,58,61,54,59,49,52,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,58,60,62,68,51,55,53],
[59,0,64,62,76,60,63,59,64],
[73,67,0,67,63,68,66,67,49],
[71,69,64,0,66,67,63,59,61],
[69,55,68,65,0,62,57,59,57],
[63,71,63,64,69,0,59,60,67],
[80,68,65,68,74,72,0,74,57],
[76,72,64,72,72,71,57,0,63],
[78,67,82,70,74,64,74,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,33,34,68,52,68,84,68],
[102,0,60,61,95,79,68,85,112],
[98,71,0,85,81,58,81,81,81],
[97,70,46,0,97,84,86,80,107],
[63,36,50,34,0,34,36,33,61],
[79,52,73,47,97,0,98,97,98],
[63,63,50,45,95,33,0,68,96],
[47,46,50,51,98,34,63,0,47],
[63,19,50,24,70,33,35,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,52,64,74,71,73,61,70],
[67,0,60,71,60,69,64,58,64],
[79,71,0,65,64,75,71,71,72],
[67,60,66,0,70,73,68,69,70],
[57,71,67,61,0,69,69,69,64],
[60,62,56,58,62,0,62,69,71],
[58,67,60,63,62,69,0,69,74],
[70,73,60,62,62,62,62,0,60],
[61,67,59,61,67,60,57,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,103,67,70,80,67,73,88],
[66,0,103,88,78,84,96,88,51],
[28,28,0,73,43,43,43,75,63],
[64,43,58,0,49,59,71,86,43],
[61,53,88,82,0,76,103,73,50],
[51,47,88,72,55,0,73,73,33],
[64,35,88,60,28,58,0,73,40],
[58,43,56,45,58,58,58,0,63],
[43,80,68,88,81,98,91,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,36,66,34,38,58,14],
[89,0,78,90,105,70,69,64,79],
[89,53,0,81,101,66,62,75,42],
[95,41,50,0,78,43,42,68,41],
[65,26,30,53,0,38,45,53,19],
[97,61,65,88,93,0,52,98,44],
[93,62,69,89,86,79,0,87,60],
[73,67,56,63,78,33,44,0,43],
[117,52,89,90,112,87,71,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,61,62,70,70,66,75,77],
[65,0,65,66,74,76,62,71,73],
[70,66,0,66,73,65,69,70,76],
[69,65,65,0,71,73,70,77,70],
[61,57,58,60,0,68,61,62,68],
[61,55,66,58,63,0,65,61,69],
[65,69,62,61,70,66,0,67,71],
[56,60,61,54,69,70,64,0,70],
[54,58,55,61,63,62,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,82,62,70,66,65,71,69],
[66,0,65,68,59,63,60,64,63],
[49,66,0,63,62,62,58,62,59],
[69,63,68,0,63,58,59,65,60],
[61,72,69,68,0,61,69,69,61],
[65,68,69,73,70,0,66,74,70],
[66,71,73,72,62,65,0,67,66],
[60,67,69,66,62,57,64,0,64],
[62,68,72,71,70,61,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,76,74,67,63,63,67,62],
[74,0,75,73,63,74,74,76,65],
[55,56,0,51,54,56,66,64,56],
[57,58,80,0,57,63,59,61,69],
[64,68,77,74,0,55,68,75,76],
[68,57,75,68,76,0,79,73,67],
[68,57,65,72,63,52,0,68,64],
[64,55,67,70,56,58,63,0,54],
[69,66,75,62,55,64,67,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,83,69,66,73,61,66,89],
[25,0,71,49,62,52,39,38,65],
[48,60,0,81,60,46,49,35,70],
[62,82,50,0,59,58,44,35,67],
[65,69,71,72,0,65,60,49,66],
[58,79,85,73,66,0,47,54,91],
[70,92,82,87,71,84,0,62,96],
[65,93,96,96,82,77,69,0,103],
[42,66,61,64,65,40,35,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,62,56,60,54,63,71,58],
[68,0,72,57,62,56,66,64,65],
[69,59,0,56,72,61,69,58,64],
[75,74,75,0,65,65,82,70,72],
[71,69,59,66,0,69,70,71,70],
[77,75,70,66,62,0,73,74,74],
[68,65,62,49,61,58,0,61,57],
[60,67,73,61,60,57,70,0,69],
[73,66,67,59,61,57,74,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,73,77,62,59,73,79,74],
[55,0,76,82,64,73,73,87,88],
[58,55,0,66,57,75,53,76,64],
[54,49,65,0,75,69,51,79,47],
[69,67,74,56,0,85,68,74,55],
[72,58,56,62,46,0,49,78,50],
[58,58,78,80,63,82,0,77,72],
[52,44,55,52,57,53,54,0,44],
[57,43,67,84,76,81,59,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,51,44,63,66,52,51,59],
[67,0,55,50,65,46,48,42,51],
[80,76,0,72,67,66,53,61,74],
[87,81,59,0,79,75,66,75,62],
[68,66,64,52,0,66,52,53,63],
[65,85,65,56,65,0,46,58,59],
[79,83,78,65,79,85,0,65,78],
[80,89,70,56,78,73,66,0,69],
[72,80,57,69,68,72,53,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,59,72,79,73,65,73,76],
[63,0,63,55,67,69,67,52,71],
[72,68,0,70,80,87,65,68,70],
[59,76,61,0,80,78,64,68,75],
[52,64,51,51,0,65,59,62,73],
[58,62,44,53,66,0,49,52,75],
[66,64,66,67,72,82,0,63,71],
[58,79,63,63,69,79,68,0,83],
[55,60,61,56,58,56,60,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,45,66,52,51,64,57,76],
[72,0,58,72,57,81,62,64,65],
[86,73,0,66,67,66,87,58,92],
[65,59,65,0,41,77,60,58,64],
[79,74,64,90,0,61,78,63,76],
[80,50,65,54,70,0,79,73,84],
[67,69,44,71,53,52,0,51,69],
[74,67,73,73,68,58,80,0,60],
[55,66,39,67,55,47,62,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,70,60,21,81,64,40,60],
[104,0,124,90,80,64,78,68,84],
[61,7,0,33,21,54,21,40,81],
[71,41,98,0,21,54,24,54,74],
[110,51,110,110,0,91,64,64,70],
[50,67,77,77,40,0,57,47,77],
[67,53,110,107,67,74,0,107,107],
[91,63,91,77,67,84,24,0,51],
[71,47,50,57,61,54,24,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,55,60,61,53,61,52,51],
[63,0,58,57,59,53,65,63,54],
[76,73,0,70,65,59,73,58,60],
[71,74,61,0,58,57,69,57,63],
[70,72,66,73,0,59,72,60,58],
[78,78,72,74,72,0,73,64,68],
[70,66,58,62,59,58,0,55,51],
[79,68,73,74,71,67,76,0,63],
[80,77,71,68,73,63,80,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,81,71,71,92,57,73,86],
[67,0,73,73,79,73,61,60,67],
[50,58,0,66,77,80,54,49,70],
[60,58,65,0,62,82,64,57,55],
[60,52,54,69,0,77,51,61,65],
[39,58,51,49,54,0,48,38,55],
[74,70,77,67,80,83,0,65,70],
[58,71,82,74,70,93,66,0,70],
[45,64,61,76,66,76,61,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,65,69,39,75,59,59,51],
[69,0,67,62,42,72,54,54,47],
[66,64,0,64,57,65,53,58,47],
[62,69,67,0,45,86,64,57,67],
[92,89,74,86,0,73,74,74,61],
[56,59,66,45,58,0,49,39,43],
[72,77,78,67,57,82,0,64,49],
[72,77,73,74,57,92,67,0,62],
[80,84,84,64,70,88,82,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,59,59,69,59,66,68,70],
[55,0,47,49,63,47,64,55,70],
[72,84,0,72,70,65,78,64,66],
[72,82,59,0,72,67,70,73,69],
[62,68,61,59,0,55,65,63,60],
[72,84,66,64,76,0,79,73,84],
[65,67,53,61,66,52,0,64,72],
[63,76,67,58,68,58,67,0,72],
[61,61,65,62,71,47,59,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,73,73,69,55,66,67,67],
[55,0,62,73,61,58,60,70,62],
[58,69,0,75,62,58,65,62,60],
[58,58,56,0,53,49,66,54,51],
[62,70,69,78,0,71,64,76,71],
[76,73,73,82,60,0,76,81,69],
[65,71,66,65,67,55,0,68,62],
[64,61,69,77,55,50,63,0,63],
[64,69,71,80,60,62,69,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,68,63,63,70,68,70,64],
[63,0,65,68,76,65,69,79,72],
[63,66,0,65,71,64,63,68,64],
[68,63,66,0,73,63,66,67,65],
[68,55,60,58,0,62,64,70,55],
[61,66,67,68,69,0,71,70,66],
[63,62,68,65,67,60,0,72,61],
[61,52,63,64,61,61,59,0,57],
[67,59,67,66,76,65,70,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,64,73,57,56,57,54,65],
[60,0,53,68,61,51,45,58,55],
[67,78,0,64,65,68,72,72,65],
[58,63,67,0,61,62,60,64,70],
[74,70,66,70,0,66,68,60,66],
[75,80,63,69,65,0,61,60,68],
[74,86,59,71,63,70,0,65,79],
[77,73,59,67,71,71,66,0,71],
[66,76,66,61,65,63,52,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,71,75,68,67,74,64,62],
[64,0,74,64,65,66,68,61,74],
[60,57,0,58,60,56,62,56,62],
[56,67,73,0,58,64,67,59,55],
[63,66,71,73,0,71,74,71,65],
[64,65,75,67,60,0,70,73,65],
[57,63,69,64,57,61,0,60,63],
[67,70,75,72,60,58,71,0,65],
[69,57,69,76,66,66,68,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,78,55,44,45,69,56,31],
[71,0,66,42,42,39,59,40,37],
[53,65,0,49,39,36,57,41,22],
[76,89,82,0,44,55,82,56,43],
[87,89,92,87,0,58,100,78,68],
[86,92,95,76,73,0,100,88,52],
[62,72,74,49,31,31,0,43,20],
[75,91,90,75,53,43,88,0,59],
[100,94,109,88,63,79,111,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,65,55,70,59,59,62,67],
[67,0,73,64,70,63,61,67,68],
[66,58,0,67,67,54,59,64,64],
[76,67,64,0,74,63,63,59,67],
[61,61,64,57,0,63,61,69,73],
[72,68,77,68,68,0,62,55,70],
[72,70,72,68,70,69,0,58,63],
[69,64,67,72,62,76,73,0,58],
[64,63,67,64,58,61,68,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,64,62,56,60,60,63,71],
[62,0,59,67,61,57,59,63,61],
[67,72,0,64,63,60,70,56,61],
[69,64,67,0,60,66,67,64,68],
[75,70,68,71,0,63,65,64,67],
[71,74,71,65,68,0,74,68,71],
[71,72,61,64,66,57,0,61,62],
[68,68,75,67,67,63,70,0,73],
[60,70,70,63,64,60,69,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,65,63,41,76,62,49,61],
[87,0,77,76,74,79,84,57,88],
[66,54,0,60,47,55,55,57,71],
[68,55,71,0,52,53,53,65,72],
[90,57,84,79,0,77,76,85,93],
[55,52,76,78,54,0,51,56,83],
[69,47,76,78,55,80,0,67,71],
[82,74,74,66,46,75,64,0,86],
[70,43,60,59,38,48,60,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,61,76,71,74,64,70,68],
[56,0,57,64,67,61,69,62,67],
[70,74,0,69,65,73,71,76,67],
[55,67,62,0,65,70,61,66,65],
[60,64,66,66,0,59,69,67,62],
[57,70,58,61,72,0,70,63,60],
[67,62,60,70,62,61,0,66,66],
[61,69,55,65,64,68,65,0,69],
[63,64,64,66,69,71,65,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,68,63,60,66,65,68,60],
[66,0,75,71,66,71,66,69,58],
[63,56,0,61,61,61,65,63,64],
[68,60,70,0,72,69,73,71,64],
[71,65,70,59,0,67,65,64,73],
[65,60,70,62,64,0,71,64,59],
[66,65,66,58,66,60,0,61,52],
[63,62,68,60,67,67,70,0,63],
[71,73,67,67,58,72,79,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,68,70,75,64,72,69,59],
[56,0,71,65,75,71,73,69,62],
[63,60,0,67,67,69,67,67,66],
[61,66,64,0,73,70,68,68,58],
[56,56,64,58,0,64,66,62,63],
[67,60,62,61,67,0,74,65,64],
[59,58,64,63,65,57,0,61,58],
[62,62,64,63,69,66,70,0,60],
[72,69,65,73,68,67,73,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,72,61,70,60,76,73,71],
[65,0,76,68,79,73,72,57,60],
[59,55,0,62,66,57,55,51,53],
[70,63,69,0,64,68,76,67,65],
[61,52,65,67,0,50,61,49,56],
[71,58,74,63,81,0,76,58,65],
[55,59,76,55,70,55,0,52,60],
[58,74,80,64,82,73,79,0,77],
[60,71,78,66,75,66,71,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,85,104,76,81,58,79,71],
[66,0,83,73,52,53,59,82,75],
[46,48,0,53,47,48,41,41,46],
[27,58,78,0,44,46,52,71,45],
[55,79,84,87,0,87,67,77,81],
[50,78,83,85,44,0,53,100,69],
[73,72,90,79,64,78,0,80,75],
[52,49,90,60,54,31,51,0,61],
[60,56,85,86,50,62,56,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,65,72,73,71,78,66,70],
[63,0,60,73,69,66,71,67,62],
[66,71,0,80,67,76,74,60,74],
[59,58,51,0,60,61,70,57,65],
[58,62,64,71,0,67,70,62,72],
[60,65,55,70,64,0,68,55,62],
[53,60,57,61,61,63,0,65,62],
[65,64,71,74,69,76,66,0,71],
[61,69,57,66,59,69,69,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,62,57,77,44,56,60,61],
[79,0,83,86,84,67,62,85,93],
[69,48,0,34,67,44,56,76,54],
[74,45,97,0,96,46,74,75,69],
[54,47,64,35,0,42,40,58,58],
[87,64,87,85,89,0,77,94,83],
[75,69,75,57,91,54,0,85,74],
[71,46,55,56,73,37,46,0,58],
[70,38,77,62,73,48,57,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,69,62,65,66,92,93,81],
[58,0,68,63,69,86,80,81,75],
[62,63,0,70,54,88,76,95,65],
[69,68,61,0,78,84,74,61,81],
[66,62,77,53,0,87,82,79,65],
[65,45,43,47,44,0,87,73,50],
[39,51,55,57,49,44,0,78,41],
[38,50,36,70,52,58,53,0,48],
[50,56,66,50,66,81,90,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,69,68,88,73,61,70,70],
[44,0,48,46,73,59,49,46,49],
[62,83,0,69,86,74,65,65,71],
[63,85,62,0,93,88,73,71,79],
[43,58,45,38,0,55,46,48,48],
[58,72,57,43,76,0,58,58,55],
[70,82,66,58,85,73,0,70,58],
[61,85,66,60,83,73,61,0,60],
[61,82,60,52,83,76,73,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,62,56,56,65,63,62,52],
[64,0,61,62,57,65,60,66,54],
[69,70,0,64,55,56,55,63,57],
[75,69,67,0,60,63,66,64,58],
[75,74,76,71,0,70,67,64,63],
[66,66,75,68,61,0,66,75,67],
[68,71,76,65,64,65,0,72,71],
[69,65,68,67,67,56,59,0,71],
[79,77,74,73,68,64,60,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,59,72,66,69,67,70,67],
[72,0,73,68,65,77,71,75,66],
[72,58,0,61,62,65,67,61,56],
[59,63,70,0,68,74,64,67,60],
[65,66,69,63,0,72,68,68,61],
[62,54,66,57,59,0,63,61,67],
[64,60,64,67,63,68,0,64,61],
[61,56,70,64,63,70,67,0,58],
[64,65,75,71,70,64,70,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,54,52,65,60,54,81],
[67,0,84,81,69,73,65,78,86],
[63,47,0,54,56,70,50,40,66],
[77,50,77,0,73,71,71,51,74],
[79,62,75,58,0,70,63,53,65],
[66,58,61,60,61,0,66,45,73],
[71,66,81,60,68,65,0,60,73],
[77,53,91,80,78,86,71,0,92],
[50,45,65,57,66,58,58,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,59,61,60,56,70,67,66],
[79,0,67,71,57,61,69,68,62],
[72,64,0,60,60,58,69,70,74],
[70,60,71,0,57,64,67,58,67],
[71,74,71,74,0,74,64,80,85],
[75,70,73,67,57,0,64,67,61],
[61,62,62,64,67,67,0,59,73],
[64,63,61,73,51,64,72,0,68],
[65,69,57,64,46,70,58,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,100,64,86,83,99,84,67],
[32,0,41,15,52,46,15,39,33],
[31,90,0,29,66,58,58,41,43],
[67,116,102,0,52,83,97,69,62],
[45,79,65,79,0,59,83,49,62],
[48,85,73,48,72,0,85,82,57],
[32,116,73,34,48,46,0,67,54],
[47,92,90,62,82,49,64,0,58],
[64,98,88,69,69,74,77,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,62,63,75,58,59,64,64],
[61,0,67,61,67,50,66,67,68],
[69,64,0,61,65,74,67,70,61],
[68,70,70,0,65,72,74,80,65],
[56,64,66,66,0,69,61,67,63],
[73,81,57,59,62,0,69,81,70],
[72,65,64,57,70,62,0,63,63],
[67,64,61,51,64,50,68,0,48],
[67,63,70,66,68,61,68,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,61,64,55,55,61,65,72],
[61,0,60,65,48,55,62,63,70],
[70,71,0,71,67,67,64,74,76],
[67,66,60,0,63,64,57,67,63],
[76,83,64,68,0,59,72,69,73],
[76,76,64,67,72,0,78,78,78],
[70,69,67,74,59,53,0,65,62],
[66,68,57,64,62,53,66,0,61],
[59,61,55,68,58,53,69,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,60,59,65,70,54,77,72],
[65,0,66,66,76,69,69,69,68],
[71,65,0,62,72,66,72,71,78],
[72,65,69,0,66,70,64,68,64],
[66,55,59,65,0,64,65,66,66],
[61,62,65,61,67,0,51,60,60],
[77,62,59,67,66,80,0,68,64],
[54,62,60,63,65,71,63,0,67],
[59,63,53,67,65,71,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,59,75,70,64,71,68,65],
[67,0,68,75,65,70,77,69,68],
[72,63,0,71,74,74,79,79,71],
[56,56,60,0,65,55,65,63,56],
[61,66,57,66,0,55,62,67,68],
[67,61,57,76,76,0,75,76,70],
[60,54,52,66,69,56,0,69,64],
[63,62,52,68,64,55,62,0,61],
[66,63,60,75,63,61,67,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,63,68,70,66,72,57],
[66,0,64,58,63,69,55,79,61],
[66,67,0,60,61,70,56,71,53],
[68,73,71,0,63,76,52,72,60],
[63,68,70,68,0,77,62,77,59],
[61,62,61,55,54,0,53,65,47],
[65,76,75,79,69,78,0,79,67],
[59,52,60,59,54,66,52,0,49],
[74,70,78,71,72,84,64,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,76,61,76,62,64,67,61],
[50,0,44,51,54,59,59,39,55],
[55,87,0,62,66,74,66,62,64],
[70,80,69,0,77,63,75,54,82],
[55,77,65,54,0,64,61,43,53],
[69,72,57,68,67,0,72,66,62],
[67,72,65,56,70,59,0,50,62],
[64,92,69,77,88,65,81,0,82],
[70,76,67,49,78,69,69,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,64,60,62,72,69,67,72],
[68,0,70,70,71,79,70,69,65],
[67,61,0,70,61,68,64,67,66],
[71,61,61,0,58,57,71,60,56],
[69,60,70,73,0,75,72,69,76],
[59,52,63,74,56,0,58,65,77],
[62,61,67,60,59,73,0,64,72],
[64,62,64,71,62,66,67,0,73],
[59,66,65,75,55,54,59,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,78,64,65,74,58,65,68],
[67,0,80,73,62,70,60,73,73],
[53,51,0,50,60,57,53,53,68],
[67,58,81,0,58,67,51,65,77],
[66,69,71,73,0,64,66,71,75],
[57,61,74,64,67,0,67,66,79],
[73,71,78,80,65,64,0,70,83],
[66,58,78,66,60,65,61,0,67],
[63,58,63,54,56,52,48,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,63,67,80,66,69,74,64],
[64,0,59,71,82,73,63,65,61],
[68,72,0,78,82,73,61,73,62],
[64,60,53,0,75,58,67,58,53],
[51,49,49,56,0,52,60,66,66],
[65,58,58,73,79,0,83,75,63],
[62,68,70,64,71,48,0,71,61],
[57,66,58,73,65,56,60,0,50],
[67,70,69,78,65,68,70,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,79,81,63,69,64,69,64],
[56,0,64,58,50,60,49,67,55],
[52,67,0,61,63,61,54,63,61],
[50,73,70,0,54,62,59,67,66],
[68,81,68,77,0,77,66,73,61],
[62,71,70,69,54,0,67,62,62],
[67,82,77,72,65,64,0,69,62],
[62,64,68,64,58,69,62,0,65],
[67,76,70,65,70,69,69,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,60,82,107,115,98,86,88],
[57,0,61,59,42,98,110,74,74],
[71,70,0,79,72,99,96,101,59],
[49,72,52,0,75,115,98,86,60],
[24,89,59,56,0,76,86,74,58],
[16,33,32,16,55,0,63,47,33],
[33,21,35,33,45,68,0,54,40],
[45,57,30,45,57,84,77,0,62],
[43,57,72,71,73,98,91,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,71,76,70,67,72,68,69],
[69,0,72,73,69,68,65,76,59],
[60,59,0,80,63,56,72,66,58],
[55,58,51,0,60,56,56,57,55],
[61,62,68,71,0,57,81,67,69],
[64,63,75,75,74,0,71,69,65],
[59,66,59,75,50,60,0,70,50],
[63,55,65,74,64,62,61,0,73],
[62,72,73,76,62,66,81,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,57,61,66,60,64,59,60],
[70,0,55,66,67,58,64,64,63],
[74,76,0,67,76,71,72,73,64],
[70,65,64,0,71,67,67,60,66],
[65,64,55,60,0,60,66,56,59],
[71,73,60,64,71,0,64,64,71],
[67,67,59,64,65,67,0,65,63],
[72,67,58,71,75,67,66,0,68],
[71,68,67,65,72,60,68,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,57,68,66,55,69,61,64],
[70,0,62,59,76,58,66,57,68],
[74,69,0,71,79,59,67,73,72],
[63,72,60,0,83,74,71,57,58],
[65,55,52,48,0,61,54,58,69],
[76,73,72,57,70,0,65,57,72],
[62,65,64,60,77,66,0,56,76],
[70,74,58,74,73,74,75,0,79],
[67,63,59,73,62,59,55,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,77,37,72,37,56,59,51],
[70,0,68,68,76,64,60,71,57],
[54,63,0,55,71,40,57,59,77],
[94,63,76,0,83,80,83,81,76],
[59,55,60,48,0,47,37,63,37],
[94,67,91,51,84,0,45,56,79],
[75,71,74,48,94,86,0,68,58],
[72,60,72,50,68,75,63,0,63],
[80,74,54,55,94,52,73,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,63,69,57,65,65,61,62],
[66,0,64,75,72,58,69,61,59],
[68,67,0,67,70,66,53,65,63],
[62,56,64,0,71,67,63,60,64],
[74,59,61,60,0,63,67,66,57],
[66,73,65,64,68,0,65,59,70],
[66,62,78,68,64,66,0,63,69],
[70,70,66,71,65,72,68,0,76],
[69,72,68,67,74,61,62,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,55,57,63,60,54,97],
[69,0,98,98,75,106,49,95,109],
[68,33,0,98,42,91,29,83,97],
[76,33,33,0,39,78,33,8,74],
[74,56,89,92,0,74,83,78,105],
[68,25,40,53,57,0,37,52,54],
[71,82,102,98,48,94,0,80,97],
[77,36,48,123,53,79,51,0,82],
[34,22,34,57,26,77,34,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,67,65,67,63,57,65,67],
[74,0,67,72,67,55,73,67,56],
[64,64,0,62,70,66,68,63,70],
[66,59,69,0,73,56,59,65,59],
[64,64,61,58,0,56,64,49,49],
[68,76,65,75,75,0,69,73,58],
[74,58,63,72,67,62,0,75,55],
[66,64,68,66,82,58,56,0,67],
[64,75,61,72,82,73,76,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,74,69,65,56,64,81,56],
[56,0,57,69,49,72,64,79,71],
[57,74,0,58,57,54,50,62,53],
[62,62,73,0,65,61,59,82,60],
[66,82,74,66,0,79,74,85,56],
[75,59,77,70,52,0,60,89,54],
[67,67,81,72,57,71,0,93,74],
[50,52,69,49,46,42,38,0,39],
[75,60,78,71,75,77,57,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,57,49,52,62,58,55,64],
[82,0,70,70,63,72,74,66,75],
[74,61,0,55,57,68,60,55,65],
[82,61,76,0,62,76,65,57,71],
[79,68,74,69,0,76,71,61,68],
[69,59,63,55,55,0,59,55,58],
[73,57,71,66,60,72,0,58,62],
[76,65,76,74,70,76,73,0,72],
[67,56,66,60,63,73,69,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,59,62,58,59,63,58,68],
[78,0,64,66,73,76,65,79,74],
[72,67,0,75,61,71,73,65,80],
[69,65,56,0,58,70,68,68,74],
[73,58,70,73,0,72,65,72,76],
[72,55,60,61,59,0,66,60,67],
[68,66,58,63,66,65,0,70,73],
[73,52,66,63,59,71,61,0,75],
[63,57,51,57,55,64,58,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,63,53,60,54,48,66,54],
[78,0,68,64,72,66,58,62,66],
[68,63,0,62,67,66,67,58,60],
[78,67,69,0,69,71,62,65,60],
[71,59,64,62,0,60,69,60,62],
[77,65,65,60,71,0,61,66,68],
[83,73,64,69,62,70,0,64,63],
[65,69,73,66,71,65,67,0,62],
[77,65,71,71,69,63,68,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,66,70,84,69,64,72,63],
[62,0,62,68,71,69,68,76,59],
[65,69,0,64,80,74,72,80,66],
[61,63,67,0,72,66,59,67,59],
[47,60,51,59,0,63,44,57,51],
[62,62,57,65,68,0,52,68,61],
[67,63,59,72,87,79,0,71,70],
[59,55,51,64,74,63,60,0,63],
[68,72,65,72,80,70,61,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,62,62,74,70,88,67,56],
[63,0,59,55,59,65,71,42,53],
[69,72,0,69,80,70,81,53,66],
[69,76,62,0,61,81,69,58,88],
[57,72,51,70,0,54,63,57,63],
[61,66,61,50,77,0,82,64,53],
[43,60,50,62,68,49,0,53,65],
[64,89,78,73,74,67,78,0,65],
[75,78,65,43,68,78,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,68,62,64,67,61,68,61],
[68,0,74,62,59,67,69,68,61],
[63,57,0,58,58,57,69,58,60],
[69,69,73,0,64,67,79,62,67],
[67,72,73,67,0,64,72,69,65],
[64,64,74,64,67,0,73,64,58],
[70,62,62,52,59,58,0,61,56],
[63,63,73,69,62,67,70,0,63],
[70,70,71,64,66,73,75,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,66,54,67,71,61,65,63],
[81,0,68,72,65,78,65,78,76],
[65,63,0,69,67,76,67,78,76],
[77,59,62,0,65,84,63,65,77],
[64,66,64,66,0,84,66,75,66],
[60,53,55,47,47,0,55,57,54],
[70,66,64,68,65,76,0,78,80],
[66,53,53,66,56,74,53,0,69],
[68,55,55,54,65,77,51,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,58,66,47,59,57,55,52],
[76,0,61,72,59,62,65,68,67],
[73,70,0,83,66,59,69,67,60],
[65,59,48,0,55,52,61,61,53],
[84,72,65,76,0,65,74,70,58],
[72,69,72,79,66,0,73,79,65],
[74,66,62,70,57,58,0,60,64],
[76,63,64,70,61,52,71,0,64],
[79,64,71,78,73,66,67,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,106,104,63,55,50,75,45],
[48,0,97,66,50,61,66,84,65],
[25,34,0,57,54,48,23,58,10],
[27,65,74,0,53,78,36,61,66],
[68,81,77,78,0,51,53,92,48],
[76,70,83,53,80,0,67,70,57],
[81,65,108,95,78,64,0,121,82],
[56,47,73,70,39,61,10,0,26],
[86,66,121,65,83,74,49,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,49,62,62,65,60,59,53],
[78,0,56,72,64,67,63,65,62],
[82,75,0,70,64,69,63,76,67],
[69,59,61,0,61,63,68,73,62],
[69,67,67,70,0,70,62,68,63],
[66,64,62,68,61,0,58,74,60],
[71,68,68,63,69,73,0,81,57],
[72,66,55,58,63,57,50,0,57],
[78,69,64,69,68,71,74,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,40,55,56,57,32,87,52],
[103,0,72,87,75,97,92,106,50],
[91,59,0,71,78,64,59,106,59],
[76,44,60,0,91,75,48,91,55],
[75,56,53,40,0,81,73,93,66],
[74,34,67,56,50,0,59,73,31],
[99,39,72,83,58,72,0,109,47],
[44,25,25,40,38,58,22,0,29],
[79,81,72,76,65,100,84,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,66,37,56,52,54,65,37],
[83,0,70,55,49,72,62,74,77],
[65,61,0,44,42,48,46,72,48],
[94,76,87,0,86,60,72,94,54],
[75,82,89,45,0,76,68,83,64],
[79,59,83,71,55,0,48,93,36],
[77,69,85,59,63,83,0,90,75],
[66,57,59,37,48,38,41,0,25],
[94,54,83,77,67,95,56,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,64,58,62,57,62,62],
[68,0,72,61,63,59,59,62,69],
[60,59,0,63,56,64,52,53,59],
[67,70,68,0,59,60,63,66,63],
[73,68,75,72,0,70,64,65,64],
[69,72,67,71,61,0,66,57,69],
[74,72,79,68,67,65,0,66,59],
[69,69,78,65,66,74,65,0,66],
[69,62,72,68,67,62,72,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,61,63,61,75,67,60,62],
[61,0,60,63,69,62,63,65,61],
[70,71,0,59,69,79,76,75,67],
[68,68,72,0,64,78,70,70,67],
[70,62,62,67,0,74,68,65,74],
[56,69,52,53,57,0,58,66,55],
[64,68,55,61,63,73,0,67,65],
[71,66,56,61,66,65,64,0,64],
[69,70,64,64,57,76,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,56,63,51,60,67,57,67],
[74,0,72,62,61,67,75,68,80],
[75,59,0,61,59,58,74,63,68],
[68,69,70,0,54,59,66,53,62],
[80,70,72,77,0,74,78,61,76],
[71,64,73,72,57,0,75,60,83],
[64,56,57,65,53,56,0,68,75],
[74,63,68,78,70,71,63,0,73],
[64,51,63,69,55,48,56,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,55,60,64,58,67,58,64],
[70,0,66,82,64,62,81,70,71],
[76,65,0,64,65,61,66,59,69],
[71,49,67,0,58,58,65,66,70],
[67,67,66,73,0,54,68,58,57],
[73,69,70,73,77,0,69,65,72],
[64,50,65,66,63,62,0,60,65],
[73,61,72,65,73,66,71,0,61],
[67,60,62,61,74,59,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,87,44,60,61,40,43,57],
[92,0,73,65,65,81,67,61,56],
[44,58,0,47,64,42,45,19,71],
[87,66,84,0,76,83,59,34,61],
[71,66,67,55,0,66,60,44,57],
[70,50,89,48,65,0,45,70,57],
[91,64,86,72,71,86,0,60,78],
[88,70,112,97,87,61,71,0,78],
[74,75,60,70,74,74,53,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,63,69,68,71,59,65,53],
[68,0,64,58,66,56,67,71,67],
[68,67,0,61,77,65,69,77,60],
[62,73,70,0,62,64,74,70,67],
[63,65,54,69,0,74,64,73,74],
[60,75,66,67,57,0,68,78,63],
[72,64,62,57,67,63,0,77,59],
[66,60,54,61,58,53,54,0,59],
[78,64,71,64,57,68,72,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,60,54,68,18,49,47,49],
[81,0,102,86,93,41,78,62,53],
[71,29,0,46,62,14,77,43,40],
[77,45,85,0,74,29,82,92,60],
[63,38,69,57,0,49,81,75,67],
[113,90,117,102,82,0,93,92,57],
[82,53,54,49,50,38,0,78,43],
[84,69,88,39,56,39,53,0,64],
[82,78,91,71,64,74,88,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,85,82,74,82,53,71,91],
[45,0,75,70,57,49,32,34,78],
[46,56,0,75,58,51,42,44,68],
[49,61,56,0,52,49,51,46,56],
[57,74,73,79,0,68,72,74,73],
[49,82,80,82,63,0,53,63,76],
[78,99,89,80,59,78,0,72,97],
[60,97,87,85,57,68,59,0,80],
[40,53,63,75,58,55,34,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,67,70,70,76,71,59,68],
[60,0,65,69,71,64,67,54,75],
[64,66,0,68,61,57,60,59,62],
[61,62,63,0,52,66,60,53,67],
[61,60,70,79,0,70,63,71,61],
[55,67,74,65,61,0,65,61,57],
[60,64,71,71,68,66,0,57,70],
[72,77,72,78,60,70,74,0,68],
[63,56,69,64,70,74,61,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,72,66,73,69,60,75,58],
[44,0,65,52,57,54,41,60,45],
[59,66,0,58,74,60,63,64,57],
[65,79,73,0,67,73,61,68,55],
[58,74,57,64,0,67,45,61,49],
[62,77,71,58,64,0,71,68,67],
[71,90,68,70,86,60,0,61,64],
[56,71,67,63,70,63,70,0,59],
[73,86,74,76,82,64,67,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,55,79,78,68,74,65,61],
[64,0,60,72,66,61,71,71,66],
[76,71,0,89,69,71,78,65,76],
[52,59,42,0,53,65,60,55,53],
[53,65,62,78,0,53,63,62,60],
[63,70,60,66,78,0,77,65,69],
[57,60,53,71,68,54,0,64,62],
[66,60,66,76,69,66,67,0,67],
[70,65,55,78,71,62,69,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,67,62,76,60,62,65],
[64,0,72,56,62,73,58,63,62],
[62,59,0,53,60,60,54,68,65],
[64,75,78,0,63,69,68,72,71],
[69,69,71,68,0,73,65,64,73],
[55,58,71,62,58,0,55,64,67],
[71,73,77,63,66,76,0,74,78],
[69,68,63,59,67,67,57,0,61],
[66,69,66,60,58,64,53,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,46,54,57,46,55,51,54],
[80,0,68,74,71,66,57,63,61],
[85,63,0,70,69,56,65,69,63],
[77,57,61,0,61,49,52,53,54],
[74,60,62,70,0,50,64,59,58],
[85,65,75,82,81,0,72,57,70],
[76,74,66,79,67,59,0,69,71],
[80,68,62,78,72,74,62,0,67],
[77,70,68,77,73,61,60,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,55,58,64,61,67,71,64],
[67,0,67,73,64,61,71,70,69],
[76,64,0,65,72,66,73,73,72],
[73,58,66,0,67,68,74,69,74],
[67,67,59,64,0,65,72,71,69],
[70,70,65,63,66,0,70,71,73],
[64,60,58,57,59,61,0,65,57],
[60,61,58,62,60,60,66,0,59],
[67,62,59,57,62,58,74,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,62,52,65,71,82,58,71],
[64,0,71,72,42,63,88,80,73],
[69,60,0,91,55,72,66,49,71],
[79,59,40,0,56,93,73,54,80],
[66,89,76,75,0,65,92,74,67],
[60,68,59,38,66,0,86,72,55],
[49,43,65,58,39,45,0,57,45],
[73,51,82,77,57,59,74,0,63],
[60,58,60,51,64,76,86,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,77,65,71,64,71,67,71],
[59,0,62,58,59,63,62,61,61],
[54,69,0,68,71,70,62,66,65],
[66,73,63,0,68,63,71,68,73],
[60,72,60,63,0,65,67,61,63],
[67,68,61,68,66,0,68,65,62],
[60,69,69,60,64,63,0,65,67],
[64,70,65,63,70,66,66,0,68],
[60,70,66,58,68,69,64,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,62,62,61,65,66,61,63],
[71,0,67,74,68,72,70,65,74],
[69,64,0,68,61,65,69,65,71],
[69,57,63,0,63,71,67,65,68],
[70,63,70,68,0,70,66,66,67],
[66,59,66,60,61,0,67,62,61],
[65,61,62,64,65,64,0,57,68],
[70,66,66,66,65,69,74,0,68],
[68,57,60,63,64,70,63,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,63,65,65,54,76,62,58],
[60,0,72,62,64,70,63,70,62],
[68,59,0,59,67,49,61,63,61],
[66,69,72,0,78,68,76,61,73],
[66,67,64,53,0,63,69,53,63],
[77,61,82,63,68,0,79,69,62],
[55,68,70,55,62,52,0,59,67],
[69,61,68,70,78,62,72,0,80],
[73,69,70,58,68,69,64,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,62,101,101,48,48,101,48],
[69,0,78,117,101,78,48,101,78],
[69,53,0,101,101,0,0,101,0],
[30,14,30,0,62,30,0,62,30],
[30,30,30,69,0,30,0,53,30],
[83,53,131,101,101,0,39,101,30],
[83,83,131,131,131,92,0,131,44],
[30,30,30,69,78,30,0,0,30],
[83,53,131,101,101,101,87,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,104,94,98,64,96,97,76],
[50,0,87,67,64,54,74,71,45],
[27,44,0,41,64,47,57,61,28],
[37,64,90,0,54,36,63,64,38],
[33,67,67,77,0,54,66,69,42],
[67,77,84,95,77,0,85,73,35],
[35,57,74,68,65,46,0,76,39],
[34,60,70,67,62,58,55,0,30],
[55,86,103,93,89,96,92,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,73,50,48,56,54,54,61],
[68,0,71,67,66,60,62,78,69],
[58,60,0,63,57,51,66,69,68],
[81,64,68,0,70,71,70,71,70],
[83,65,74,61,0,56,63,84,71],
[75,71,80,60,75,0,72,84,71],
[77,69,65,61,68,59,0,76,80],
[77,53,62,60,47,47,55,0,64],
[70,62,63,61,60,60,51,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,71,62,69,67,70,74,67],
[59,0,61,76,77,60,76,80,66],
[60,70,0,53,77,58,66,92,57],
[69,55,78,0,77,53,70,76,73],
[62,54,54,54,0,47,49,63,52],
[64,71,73,78,84,0,75,84,74],
[61,55,65,61,82,56,0,75,74],
[57,51,39,55,68,47,56,0,55],
[64,65,74,58,79,57,57,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,77,69,65,70,67,64],
[62,0,78,68,63,77,65,62,70],
[60,53,0,68,65,64,67,65,63],
[54,63,63,0,60,70,80,75,65],
[62,68,66,71,0,63,74,59,71],
[66,54,67,61,68,0,61,63,65],
[61,66,64,51,57,70,0,59,69],
[64,69,66,56,72,68,72,0,64],
[67,61,68,66,60,66,62,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,72,55,65,73,69,63],
[67,0,76,67,67,68,71,73,61],
[63,55,0,60,56,69,66,64,55],
[59,64,71,0,52,60,69,57,69],
[76,64,75,79,0,63,79,72,68],
[66,63,62,71,68,0,72,67,68],
[58,60,65,62,52,59,0,68,56],
[62,58,67,74,59,64,63,0,58],
[68,70,76,62,63,63,75,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,50,53,42,31,53,49,45],
[94,0,84,83,65,78,81,71,96],
[81,47,0,40,56,46,74,59,47],
[78,48,91,0,62,66,78,77,61],
[89,66,75,69,0,41,83,66,59],
[100,53,85,65,90,0,82,73,80],
[78,50,57,53,48,49,0,64,60],
[82,60,72,54,65,58,67,0,71],
[86,35,84,70,72,51,71,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,88,88,93,41,93,52,41],
[126,0,126,88,93,41,93,90,88],
[43,5,0,57,57,5,57,57,5],
[43,43,74,0,93,41,131,95,41],
[38,38,74,38,0,79,74,38,74],
[90,90,126,90,52,0,126,90,52],
[38,38,74,0,57,5,0,90,0],
[79,41,74,36,93,41,41,0,41],
[90,43,126,90,57,79,131,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,87,27,5,27,114,51,82],
[85,0,85,25,44,23,75,90,126],
[44,46,0,66,48,69,114,51,78],
[104,106,65,0,62,106,106,65,106],
[126,87,83,69,0,110,114,47,124],
[104,108,62,25,21,0,116,67,126],
[17,56,17,25,17,15,0,17,81],
[80,41,80,66,84,64,114,0,78],
[49,5,53,25,7,5,50,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,45,37,50,51,53,41,52],
[88,0,52,66,60,68,65,57,68],
[86,79,0,63,67,60,76,64,60],
[94,65,68,0,70,79,81,67,80],
[81,71,64,61,0,77,75,55,65],
[80,63,71,52,54,0,73,46,50],
[78,66,55,50,56,58,0,44,60],
[90,74,67,64,76,85,87,0,84],
[79,63,71,51,66,81,71,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,78,75,70,83,104,96,51],
[48,0,71,56,7,71,84,40,57],
[53,60,0,75,33,70,69,59,64],
[56,75,56,0,57,44,69,35,35],
[61,124,98,74,0,78,104,55,77],
[48,60,61,87,53,0,75,40,48],
[27,47,62,62,27,56,0,26,42],
[35,91,72,96,76,91,105,0,79],
[80,74,67,96,54,83,89,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,66,63,73,65,74,70,69],
[64,0,65,60,74,65,70,57,73],
[65,66,0,64,71,54,61,62,71],
[68,71,67,0,70,68,74,62,67],
[58,57,60,61,0,53,72,56,65],
[66,66,77,63,78,0,74,67,72],
[57,61,70,57,59,57,0,65,68],
[61,74,69,69,75,64,66,0,71],
[62,58,60,64,66,59,63,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,70,61,65,70,73,66,72],
[65,0,64,62,70,66,64,65,70],
[61,67,0,67,70,69,68,70,74],
[70,69,64,0,68,66,73,73,73],
[66,61,61,63,0,71,67,68,68],
[61,65,62,65,60,0,59,63,68],
[58,67,63,58,64,72,0,74,71],
[65,66,61,58,63,68,57,0,66],
[59,61,57,58,63,63,60,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,70,76,52,48,90,56,71],
[80,0,70,48,38,55,75,63,63],
[61,61,0,74,64,53,85,55,68],
[55,83,57,0,41,68,84,51,51],
[79,93,67,90,0,42,117,96,95],
[83,76,78,63,89,0,99,76,77],
[41,56,46,47,14,32,0,49,43],
[75,68,76,80,35,55,82,0,77],
[60,68,63,80,36,54,88,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,81,62,68,80,81,75,90],
[62,0,64,64,80,77,83,75,75],
[50,67,0,62,65,72,66,72,75],
[69,67,69,0,82,64,78,80,83],
[63,51,66,49,0,65,71,66,70],
[51,54,59,67,66,0,62,78,74],
[50,48,65,53,60,69,0,75,65],
[56,56,59,51,65,53,56,0,75],
[41,56,56,48,61,57,66,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,57,55,69,53,58,56,51],
[50,0,58,35,53,46,52,20,42],
[74,73,0,57,86,55,62,44,72],
[76,96,74,0,68,65,84,67,56],
[62,78,45,63,0,79,56,71,57],
[78,85,76,66,52,0,63,81,65],
[73,79,69,47,75,68,0,90,54],
[75,111,87,64,60,50,41,0,54],
[80,89,59,75,74,66,77,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,62,67,60,65,60,61,64],
[62,0,66,71,68,64,49,64,63],
[69,65,0,67,66,66,66,58,59],
[64,60,64,0,67,61,64,58,68],
[71,63,65,64,0,66,63,66,69],
[66,67,65,70,65,0,60,66,56],
[71,82,65,67,68,71,0,70,65],
[70,67,73,73,65,65,61,0,72],
[67,68,72,63,62,75,66,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,59,61,74,65,70,53,86],
[66,0,76,64,78,69,69,63,87],
[72,55,0,65,81,71,70,52,67],
[70,67,66,0,82,62,69,61,95],
[57,53,50,49,0,60,62,61,69],
[66,62,60,69,71,0,67,66,83],
[61,62,61,62,69,64,0,69,89],
[78,68,79,70,70,65,62,0,83],
[45,44,64,36,62,48,42,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,78,74,63,75,75,71,71],
[63,0,67,62,65,69,67,58,64],
[53,64,0,64,73,69,71,58,61],
[57,69,67,0,67,69,81,63,63],
[68,66,58,64,0,73,73,59,66],
[56,62,62,62,58,0,62,56,61],
[56,64,60,50,58,69,0,56,74],
[60,73,73,68,72,75,75,0,77],
[60,67,70,68,65,70,57,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,77,68,64,61,73,64,71],
[69,0,85,71,65,76,72,70,64],
[54,46,0,55,60,58,71,51,55],
[63,60,76,0,65,62,80,69,71],
[67,66,71,66,0,79,78,77,59],
[70,55,73,69,52,0,83,63,64],
[58,59,60,51,53,48,0,59,59],
[67,61,80,62,54,68,72,0,67],
[60,67,76,60,72,67,72,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,58,67,81,66,74,72,52],
[70,0,68,74,88,63,76,87,64],
[73,63,0,68,80,62,83,72,71],
[64,57,63,0,63,67,72,69,62],
[50,43,51,68,0,45,65,66,52],
[65,68,69,64,86,0,74,78,57],
[57,55,48,59,66,57,0,48,43],
[59,44,59,62,65,53,83,0,56],
[79,67,60,69,79,74,88,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,73,84,38,59,65,49,40],
[29,0,29,53,40,42,57,50,42],
[58,102,0,88,58,56,78,56,65],
[47,78,43,0,63,70,81,72,51],
[93,91,73,68,0,66,64,48,67],
[72,89,75,61,65,0,59,51,90],
[66,74,53,50,67,72,0,55,81],
[82,81,75,59,83,80,76,0,81],
[91,89,66,80,64,41,50,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,80,67,83,74,79,70,71],
[66,0,71,64,70,71,70,61,71],
[51,60,0,64,57,57,71,45,61],
[64,67,67,0,68,68,73,77,71],
[48,61,74,63,0,76,71,64,68],
[57,60,74,63,55,0,71,61,68],
[52,61,60,58,60,60,0,61,66],
[61,70,86,54,67,70,70,0,75],
[60,60,70,60,63,63,65,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,62,93,54,72,90,81,78],
[40,0,53,40,31,45,58,49,57],
[69,78,0,74,57,62,68,82,59],
[38,91,57,0,68,64,70,67,66],
[77,100,74,63,0,74,81,80,69],
[59,86,69,67,57,0,77,74,70],
[41,73,63,61,50,54,0,72,61],
[50,82,49,64,51,57,59,0,53],
[53,74,72,65,62,61,70,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,66,69,62,70,62,70],
[67,0,62,72,72,50,63,66,60],
[64,69,0,74,65,56,68,71,65],
[65,59,57,0,72,50,64,54,62],
[62,59,66,59,0,59,60,55,67],
[69,81,75,81,72,0,75,63,69],
[61,68,63,67,71,56,0,57,67],
[69,65,60,77,76,68,74,0,66],
[61,71,66,69,64,62,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,57,64,48,71,58,67,55],
[70,0,78,64,68,68,77,86,81],
[74,53,0,54,56,64,65,73,70],
[67,67,77,0,57,82,72,85,73],
[83,63,75,74,0,94,81,88,80],
[60,63,67,49,37,0,58,57,55],
[73,54,66,59,50,73,0,65,70],
[64,45,58,46,43,74,66,0,62],
[76,50,61,58,51,76,61,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,64,66,65,67,65,71,67],
[60,0,58,56,66,63,60,63,64],
[67,73,0,63,74,83,55,68,67],
[65,75,68,0,68,70,66,68,68],
[66,65,57,63,0,71,66,72,68],
[64,68,48,61,60,0,53,62,63],
[66,71,76,65,65,78,0,65,67],
[60,68,63,63,59,69,66,0,59],
[64,67,64,63,63,68,64,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,65,72,73,77,68,71,64],
[76,0,67,74,73,74,68,71,65],
[66,64,0,69,70,70,60,74,69],
[59,57,62,0,71,65,56,59,59],
[58,58,61,60,0,56,57,61,58],
[54,57,61,66,75,0,65,65,61],
[63,63,71,75,74,66,0,71,66],
[60,60,57,72,70,66,60,0,66],
[67,66,62,72,73,70,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,68,66,78,83,67,71,69],
[68,0,66,63,77,78,72,68,65],
[63,65,0,64,80,70,78,60,62],
[65,68,67,0,73,82,71,66,69],
[53,54,51,58,0,64,58,47,57],
[48,53,61,49,67,0,55,61,62],
[64,59,53,60,73,76,0,60,64],
[60,63,71,65,84,70,71,0,67],
[62,66,69,62,74,69,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,65,57,67,66,57,68],
[61,0,64,65,55,66,69,60,69],
[65,67,0,67,66,67,66,55,68],
[66,66,64,0,63,69,62,62,68],
[74,76,65,68,0,75,79,62,70],
[64,65,64,62,56,0,58,66,65],
[65,62,65,69,52,73,0,59,67],
[74,71,76,69,69,65,72,0,72],
[63,62,63,63,61,66,64,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,78,84,62,60,70,49,78],
[68,0,67,79,63,65,63,56,71],
[53,64,0,62,62,49,59,52,59],
[47,52,69,0,57,60,56,45,62],
[69,68,69,74,0,66,60,67,73],
[71,66,82,71,65,0,65,56,72],
[61,68,72,75,71,66,0,46,72],
[82,75,79,86,64,75,85,0,81],
[53,60,72,69,58,59,59,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,47,74,53,58,78,56,76],
[71,0,61,72,75,60,81,79,68],
[84,70,0,87,69,57,72,62,71],
[57,59,44,0,56,59,72,54,70],
[78,56,62,75,0,69,76,73,69],
[73,71,74,72,62,0,63,70,76],
[53,50,59,59,55,68,0,64,66],
[75,52,69,77,58,61,67,0,68],
[55,63,60,61,62,55,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,70,88,71,99,97,64,72],
[55,0,46,76,52,89,69,55,68],
[61,85,0,86,83,82,75,74,84],
[43,55,45,0,45,60,56,29,59],
[60,79,48,86,0,83,90,66,89],
[32,42,49,71,48,0,57,36,73],
[34,62,56,75,41,74,0,41,61],
[67,76,57,102,65,95,90,0,88],
[59,63,47,72,42,58,70,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,79,73,71,71,66,68,78],
[71,0,78,75,79,61,72,70,61],
[52,53,0,46,68,53,56,53,60],
[58,56,85,0,64,64,68,62,67],
[60,52,63,67,0,63,67,59,61],
[60,70,78,67,68,0,74,75,63],
[65,59,75,63,64,57,0,60,66],
[63,61,78,69,72,56,71,0,64],
[53,70,71,64,70,68,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,49,70,59,53,60,69,71],
[76,0,50,63,71,57,61,77,64],
[82,81,0,79,66,59,79,79,87],
[61,68,52,0,75,71,66,62,76],
[72,60,65,56,0,69,73,83,65],
[78,74,72,60,62,0,71,80,81],
[71,70,52,65,58,60,0,77,75],
[62,54,52,69,48,51,54,0,65],
[60,67,44,55,66,50,56,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,82,64,57,63,46,70,69],
[72,0,71,60,67,75,67,67,69],
[49,60,0,58,49,53,56,62,56],
[67,71,73,0,75,59,77,72,65],
[74,64,82,56,0,73,59,73,70],
[68,56,78,72,58,0,59,70,67],
[85,64,75,54,72,72,0,76,72],
[61,64,69,59,58,61,55,0,56],
[62,62,75,66,61,64,59,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,62,71,63,62,63,64,59],
[70,0,67,66,60,62,56,63,64],
[69,64,0,71,67,64,61,63,65],
[60,65,60,0,71,56,53,60,71],
[68,71,64,60,0,75,60,73,69],
[69,69,67,75,56,0,70,66,71],
[68,75,70,78,71,61,0,62,67],
[67,68,68,71,58,65,69,0,66],
[72,67,66,60,62,60,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,78,79,65,80,65,69,77],
[61,0,70,73,65,76,64,63,70],
[53,61,0,64,63,69,71,58,66],
[52,58,67,0,58,62,52,62,67],
[66,66,68,73,0,72,60,75,69],
[51,55,62,69,59,0,60,57,65],
[66,67,60,79,71,71,0,57,70],
[62,68,73,69,56,74,74,0,66],
[54,61,65,64,62,66,61,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,63,72,70,68,68,63,68],
[64,0,62,64,72,67,51,68,73],
[68,69,0,72,69,69,65,66,66],
[59,67,59,0,59,66,58,68,63],
[61,59,62,72,0,69,60,67,64],
[63,64,62,65,62,0,58,67,69],
[63,80,66,73,71,73,0,68,70],
[68,63,65,63,64,64,63,0,63],
[63,58,65,68,67,62,61,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,65,65,63,63,57,64,65],
[70,0,70,68,63,68,63,69,66],
[66,61,0,61,63,65,68,65,68],
[66,63,70,0,68,68,67,72,65],
[68,68,68,63,0,70,63,68,68],
[68,63,66,63,61,0,64,67,60],
[74,68,63,64,68,67,0,72,63],
[67,62,66,59,63,64,59,0,61],
[66,65,63,66,63,71,68,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,69,72,65,52,97,65,87],
[49,0,67,71,56,53,85,47,67],
[62,64,0,77,75,56,98,63,89],
[59,60,54,0,54,38,75,54,64],
[66,75,56,77,0,53,98,67,68],
[79,78,75,93,78,0,100,59,78],
[34,46,33,56,33,31,0,43,38],
[66,84,68,77,64,72,88,0,69],
[44,64,42,67,63,53,93,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,60,54,51,54,58,60,50],
[67,0,49,59,56,63,55,74,66],
[71,82,0,73,67,63,56,72,66],
[77,72,58,0,73,58,61,68,56],
[80,75,64,58,0,56,70,78,63],
[77,68,68,73,75,0,79,81,65],
[73,76,75,70,61,52,0,72,56],
[71,57,59,63,53,50,59,0,61],
[81,65,65,75,68,66,75,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,82,79,61,68,86,73,68],
[62,0,68,59,73,86,95,71,84],
[49,63,0,57,63,73,69,60,74],
[52,72,74,0,62,64,71,57,64],
[70,58,68,69,0,84,96,48,75],
[63,45,58,67,47,0,75,62,73],
[45,36,62,60,35,56,0,49,86],
[58,60,71,74,83,69,82,0,73],
[63,47,57,67,56,58,45,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,60,65,71,61,72,72,67],
[73,0,66,73,79,61,77,86,78],
[71,65,0,80,68,62,73,76,64],
[66,58,51,0,72,66,66,75,60],
[60,52,63,59,0,50,76,76,55],
[70,70,69,65,81,0,78,83,59],
[59,54,58,65,55,53,0,79,61],
[59,45,55,56,55,48,52,0,54],
[64,53,67,71,76,72,70,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,66,71,78,77,57,76,70],
[72,0,70,64,78,76,79,71,61],
[65,61,0,60,68,67,51,68,61],
[60,67,71,0,65,71,61,76,61],
[53,53,63,66,0,59,55,76,51],
[54,55,64,60,72,0,39,66,52],
[74,52,80,70,76,92,0,92,73],
[55,60,63,55,55,65,39,0,42],
[61,70,70,70,80,79,58,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,69,63,79,68,68,71,70],
[62,0,74,57,58,60,56,68,71],
[62,57,0,62,79,63,65,72,68],
[68,74,69,0,85,59,62,71,68],
[52,73,52,46,0,52,48,63,59],
[63,71,68,72,79,0,63,82,72],
[63,75,66,69,83,68,0,75,79],
[60,63,59,60,68,49,56,0,59],
[61,60,63,63,72,59,52,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,75,83,88,75,77,82,83],
[68,0,51,79,70,61,68,52,64],
[56,80,0,84,69,56,82,72,75],
[48,52,47,0,57,56,40,73,62],
[43,61,62,74,0,51,65,64,70],
[56,70,75,75,80,0,63,80,81],
[54,63,49,91,66,68,0,65,75],
[49,79,59,58,67,51,66,0,70],
[48,67,56,69,61,50,56,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,95,91,97,91,48,115,91],
[43,0,85,73,84,91,41,73,67],
[36,46,0,12,54,6,30,36,12],
[40,58,119,0,114,108,71,96,67],
[34,47,77,17,0,77,0,74,44],
[40,40,125,23,54,0,24,43,50],
[83,90,101,60,131,107,0,113,66],
[16,58,95,35,57,88,18,0,68],
[40,64,119,64,87,81,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,56,63,70,52,63,64,62],
[67,0,65,66,70,61,67,50,66],
[75,66,0,68,68,67,66,65,66],
[68,65,63,0,73,54,72,69,59],
[61,61,63,58,0,57,67,55,54],
[79,70,64,77,74,0,78,67,61],
[68,64,65,59,64,53,0,61,55],
[67,81,66,62,76,64,70,0,60],
[69,65,65,72,77,70,76,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,64,58,55,44,48,59,59],
[66,0,52,59,47,42,54,49,53],
[67,79,0,76,70,48,58,59,63],
[73,72,55,0,62,66,62,69,66],
[76,84,61,69,0,56,57,70,57],
[87,89,83,65,75,0,70,75,69],
[83,77,73,69,74,61,0,73,84],
[72,82,72,62,61,56,58,0,64],
[72,78,68,65,74,62,47,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,51,64,54,55,67,74,58],
[68,0,56,59,53,53,59,63,61],
[80,75,0,67,74,63,67,66,57],
[67,72,64,0,56,60,64,68,64],
[77,78,57,75,0,63,66,73,68],
[76,78,68,71,68,0,64,79,62],
[64,72,64,67,65,67,0,68,58],
[57,68,65,63,58,52,63,0,60],
[73,70,74,67,63,69,73,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,65,67,66,61,68,51,64],
[63,0,65,58,54,62,71,60,69],
[66,66,0,66,61,57,65,65,63],
[64,73,65,0,60,63,76,57,69],
[65,77,70,71,0,73,74,67,68],
[70,69,74,68,58,0,72,67,74],
[63,60,66,55,57,59,0,57,62],
[80,71,66,74,64,64,74,0,66],
[67,62,68,62,63,57,69,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,65,66,59,65,61,72,51],
[74,0,66,77,68,70,74,74,61],
[66,65,0,71,66,65,65,66,60],
[65,54,60,0,64,62,58,63,59],
[72,63,65,67,0,70,75,67,53],
[66,61,66,69,61,0,66,70,69],
[70,57,66,73,56,65,0,64,59],
[59,57,65,68,64,61,67,0,52],
[80,70,71,72,78,62,72,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,57,60,65,68,54,60,71],
[69,0,51,66,65,66,59,64,65],
[74,80,0,80,71,85,65,82,89],
[71,65,51,0,61,57,69,65,73],
[66,66,60,70,0,68,67,76,76],
[63,65,46,74,63,0,53,59,68],
[77,72,66,62,64,78,0,60,74],
[71,67,49,66,55,72,71,0,62],
[60,66,42,58,55,63,57,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,64,69,60,63,67,64,66],
[62,0,65,67,60,56,65,65,60],
[67,66,0,71,64,58,71,64,57],
[62,64,60,0,65,61,73,65,56],
[71,71,67,66,0,60,72,59,70],
[68,75,73,70,71,0,77,70,63],
[64,66,60,58,59,54,0,57,57],
[67,66,67,66,72,61,74,0,65],
[65,71,74,75,61,68,74,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,58,60,38,60,58,48,60],
[78,0,69,83,73,83,82,78,65],
[73,62,0,57,46,82,61,71,69],
[71,48,74,0,50,75,48,72,69],
[93,58,85,81,0,84,68,95,74],
[71,48,49,56,47,0,55,62,52],
[73,49,70,83,63,76,0,95,67],
[83,53,60,59,36,69,36,0,52],
[71,66,62,62,57,79,64,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,56,83,58,56,56,68,69],
[50,0,61,64,57,69,55,47,72],
[75,70,0,90,59,56,71,65,74],
[48,67,41,0,48,55,66,58,83],
[73,74,72,83,0,50,73,62,75],
[75,62,75,76,81,0,73,77,88],
[75,76,60,65,58,58,0,67,75],
[63,84,66,73,69,54,64,0,71],
[62,59,57,48,56,43,56,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,47,58,56,56,57,84,76],
[66,0,53,71,59,68,61,88,79],
[84,78,0,66,54,74,61,95,84],
[73,60,65,0,56,64,70,82,88],
[75,72,77,75,0,79,59,91,90],
[75,63,57,67,52,0,63,78,80],
[74,70,70,61,72,68,0,91,79],
[47,43,36,49,40,53,40,0,58],
[55,52,47,43,41,51,52,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,65,84,72,77,84,82,71],
[59,0,59,66,69,65,80,82,61],
[66,72,0,71,66,70,81,81,62],
[47,65,60,0,58,57,66,66,54],
[59,62,65,73,0,65,71,81,60],
[54,66,61,74,66,0,87,77,71],
[47,51,50,65,60,44,0,57,58],
[49,49,50,65,50,54,74,0,61],
[60,70,69,77,71,60,73,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,77,75,76,72,75,84,64],
[56,0,79,74,60,52,60,70,63],
[54,52,0,52,59,52,50,58,65],
[56,57,79,0,61,59,63,64,66],
[55,71,72,70,0,70,60,67,62],
[59,79,79,72,61,0,74,76,63],
[56,71,81,68,71,57,0,85,71],
[47,61,73,67,64,55,46,0,58],
[67,68,66,65,69,68,60,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,77,70,75,63,78,78,59],
[67,0,59,61,72,65,66,61,60],
[54,72,0,61,71,72,71,70,70],
[61,70,70,0,81,67,76,77,65],
[56,59,60,50,0,56,63,67,53],
[68,66,59,64,75,0,72,57,49],
[53,65,60,55,68,59,0,67,56],
[53,70,61,54,64,74,64,0,57],
[72,71,61,66,78,82,75,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,76,87,100,112,81,65,90],
[10,0,46,44,29,56,49,35,40],
[55,85,0,52,91,55,49,74,58],
[44,87,79,0,46,56,65,71,67],
[31,102,40,85,0,56,61,61,34],
[19,75,76,75,75,0,49,68,61],
[50,82,82,66,70,82,0,30,71],
[66,96,57,60,70,63,101,0,57],
[41,91,73,64,97,70,60,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,72,58,62,56,59,66,64],
[42,0,57,44,53,50,42,56,59],
[59,74,0,56,75,58,53,58,54],
[73,87,75,0,80,63,51,61,76],
[69,78,56,51,0,70,50,49,54],
[75,81,73,68,61,0,56,62,70],
[72,89,78,80,81,75,0,64,80],
[65,75,73,70,82,69,67,0,53],
[67,72,77,55,77,61,51,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,62,73,62,70,61,67,71],
[62,0,68,66,66,69,53,65,57],
[69,63,0,65,62,72,67,67,69],
[58,65,66,0,57,65,57,55,66],
[69,65,69,74,0,69,66,64,71],
[61,62,59,66,62,0,64,67,70],
[70,78,64,74,65,67,0,71,69],
[64,66,64,76,67,64,60,0,66],
[60,74,62,65,60,61,62,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,29,43,47,41,52,43,19],
[95,0,58,50,56,52,68,75,53],
[102,73,0,64,74,50,74,78,73],
[88,81,67,0,75,41,84,71,71],
[84,75,57,56,0,66,61,60,68],
[90,79,81,90,65,0,89,66,64],
[79,63,57,47,70,42,0,66,55],
[88,56,53,60,71,65,65,0,64],
[112,78,58,60,63,67,76,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,68,71,61,76,72,75,70],
[61,0,74,68,72,68,79,77,69],
[63,57,0,59,67,64,62,69,57],
[60,63,72,0,68,70,72,74,67],
[70,59,64,63,0,67,70,69,64],
[55,63,67,61,64,0,66,64,66],
[59,52,69,59,61,65,0,64,68],
[56,54,62,57,62,67,67,0,63],
[61,62,74,64,67,65,63,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,80,80,67,73,77,65,84],
[58,0,63,72,72,64,62,60,76],
[51,68,0,65,65,63,67,62,78],
[51,59,66,0,61,63,63,64,71],
[64,59,66,70,0,67,65,66,81],
[58,67,68,68,64,0,74,68,79],
[54,69,64,68,66,57,0,67,77],
[66,71,69,67,65,63,64,0,77],
[47,55,53,60,50,52,54,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,59,73,75,73,55,67,77],
[71,0,66,62,79,60,54,71,63],
[72,65,0,79,83,67,68,63,76],
[58,69,52,0,78,62,59,70,74],
[56,52,48,53,0,55,48,62,66],
[58,71,64,69,76,0,63,59,64],
[76,77,63,72,83,68,0,81,77],
[64,60,68,61,69,72,50,0,77],
[54,68,55,57,65,67,54,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,62,62,65,73,72,64,70],
[59,0,61,66,69,72,76,64,66],
[69,70,0,60,62,67,73,63,72],
[69,65,71,0,70,74,83,68,73],
[66,62,69,61,0,66,69,67,68],
[58,59,64,57,65,0,66,63,60],
[59,55,58,48,62,65,0,62,61],
[67,67,68,63,64,68,69,0,65],
[61,65,59,58,63,71,70,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,58,62,62,62,60,61,62],
[65,0,64,66,62,61,63,65,53],
[73,67,0,71,66,58,67,65,66],
[69,65,60,0,68,61,61,69,58],
[69,69,65,63,0,64,65,65,62],
[69,70,73,70,67,0,61,66,65],
[71,68,64,70,66,70,0,69,67],
[70,66,66,62,66,65,62,0,63],
[69,78,65,73,69,66,64,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,57,40,37,40,75,49,67],
[22,0,54,60,57,54,75,46,89],
[74,77,0,8,89,31,23,43,37],
[91,71,123,0,123,86,91,48,57],
[94,74,42,8,0,53,45,22,45],
[91,77,100,45,78,0,40,80,74],
[56,56,108,40,86,91,0,80,66],
[82,85,88,83,109,51,51,0,77],
[64,42,94,74,86,57,65,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,83,68,73,70,66,72,53],
[61,0,78,76,77,75,72,66,65],
[48,53,0,64,58,58,62,57,62],
[63,55,67,0,66,65,51,54,74],
[58,54,73,65,0,60,64,63,54],
[61,56,73,66,71,0,77,56,68],
[65,59,69,80,67,54,0,58,69],
[59,65,74,77,68,75,73,0,67],
[78,66,69,57,77,63,62,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,53,58,58,63,61,60],
[66,0,61,67,62,65,64,71,63],
[66,70,0,70,67,64,65,70,66],
[78,64,61,0,65,63,64,72,54],
[73,69,64,66,0,67,66,72,61],
[73,66,67,68,64,0,71,64,58],
[68,67,66,67,65,60,0,66,67],
[70,60,61,59,59,67,65,0,59],
[71,68,65,77,70,73,64,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,64,76,74,69,49,68,54],
[78,0,63,63,80,58,48,68,57],
[67,68,0,85,73,79,60,72,76],
[55,68,46,0,60,70,52,67,55],
[57,51,58,71,0,68,31,57,69],
[62,73,52,61,63,0,43,69,52],
[82,83,71,79,100,88,0,92,63],
[63,63,59,64,74,62,39,0,57],
[77,74,55,76,62,79,68,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,55,50,71,90,68,71,76],
[39,0,56,56,55,69,51,63,63],
[76,75,0,73,61,80,75,84,77],
[81,75,58,0,63,89,54,85,77],
[60,76,70,68,0,74,70,71,79],
[41,62,51,42,57,0,48,63,76],
[63,80,56,77,61,83,0,71,78],
[60,68,47,46,60,68,60,0,81],
[55,68,54,54,52,55,53,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,68,67,71,61,73,80,69],
[63,0,62,66,57,72,76,71,68],
[63,69,0,73,74,66,71,73,71],
[64,65,58,0,70,67,68,77,68],
[60,74,57,61,0,62,70,76,65],
[70,59,65,64,69,0,57,74,69],
[58,55,60,63,61,74,0,66,56],
[51,60,58,54,55,57,65,0,50],
[62,63,60,63,66,62,75,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,65,69,53,57,59,61,58],
[58,0,63,57,56,53,63,62,57],
[66,68,0,71,74,70,63,69,69],
[62,74,60,0,56,57,53,61,63],
[78,75,57,75,0,60,64,69,66],
[74,78,61,74,71,0,60,61,61],
[72,68,68,78,67,71,0,65,62],
[70,69,62,70,62,70,66,0,65],
[73,74,62,68,65,70,69,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,57,73,52,70,62,53,53],
[70,0,70,59,60,72,71,57,54],
[74,61,0,79,67,78,53,69,43],
[58,72,52,0,46,76,58,63,54],
[79,71,64,85,0,79,70,69,53],
[61,59,53,55,52,0,52,48,51],
[69,60,78,73,61,79,0,60,67],
[78,74,62,68,62,83,71,0,73],
[78,77,88,77,78,80,64,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,56,48,51,58,56,55,57],
[73,0,66,51,54,56,66,67,56],
[75,65,0,61,62,58,54,51,63],
[83,80,70,0,65,67,64,80,64],
[80,77,69,66,0,57,62,58,69],
[73,75,73,64,74,0,55,71,73],
[75,65,77,67,69,76,0,73,68],
[76,64,80,51,73,60,58,0,61],
[74,75,68,67,62,58,63,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,66,57,63,53,67,54,55],
[65,0,71,48,61,52,65,57,53],
[65,60,0,57,59,60,71,52,64],
[74,83,74,0,66,72,72,56,65],
[68,70,72,65,0,58,56,49,73],
[78,79,71,59,73,0,63,50,66],
[64,66,60,59,75,68,0,58,63],
[77,74,79,75,82,81,73,0,62],
[76,78,67,66,58,65,68,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,69,64,53,54,77,68,47],
[71,0,57,42,53,45,73,61,50],
[62,74,0,62,57,51,81,65,67],
[67,89,69,0,59,66,89,66,63],
[78,78,74,72,0,55,88,68,62],
[77,86,80,65,76,0,89,81,69],
[54,58,50,42,43,42,0,45,52],
[63,70,66,65,63,50,86,0,66],
[84,81,64,68,69,62,79,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,62,83,65,65,66,64,64],
[62,0,51,60,52,52,54,53,46],
[69,80,0,80,71,63,64,54,73],
[48,71,51,0,61,59,62,52,59],
[66,79,60,70,0,66,59,48,61],
[66,79,68,72,65,0,77,60,58],
[65,77,67,69,72,54,0,52,61],
[67,78,77,79,83,71,79,0,65],
[67,85,58,72,70,73,70,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,77,70,65,75,69,63,52],
[60,0,76,70,69,68,62,60,54],
[54,55,0,60,61,57,65,58,53],
[61,61,71,0,61,69,62,63,56],
[66,62,70,70,0,70,68,61,67],
[56,63,74,62,61,0,59,57,56],
[62,69,66,69,63,72,0,57,56],
[68,71,73,68,70,74,74,0,60],
[79,77,78,75,64,75,75,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,58,73,63,67,65,50,61],
[70,0,58,81,68,62,62,58,63],
[73,73,0,76,70,68,62,68,64],
[58,50,55,0,64,58,56,56,63],
[68,63,61,67,0,55,60,61,57],
[64,69,63,73,76,0,64,60,64],
[66,69,69,75,71,67,0,61,64],
[81,73,63,75,70,71,70,0,68],
[70,68,67,68,74,67,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,59,68,65,72,69,69,67],
[67,0,64,52,65,54,67,71,55],
[72,67,0,67,67,69,69,67,65],
[63,79,64,0,74,72,72,70,66],
[66,66,64,57,0,67,67,65,59],
[59,77,62,59,64,0,61,70,62],
[62,64,62,59,64,70,0,64,59],
[62,60,64,61,66,61,67,0,57],
[64,76,66,65,72,69,72,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,90,71,67,72,74,59,91],
[61,0,76,82,56,72,61,55,55],
[41,55,0,73,55,56,50,49,68],
[60,49,58,0,48,31,56,57,50],
[64,75,76,83,0,48,65,84,69],
[59,59,75,100,83,0,58,81,93],
[57,70,81,75,66,73,0,63,86],
[72,76,82,74,47,50,68,0,73],
[40,76,63,81,62,38,45,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,61,73,82,65,64,69,77],
[63,0,59,77,73,77,78,65,80],
[70,72,0,82,72,73,73,64,74],
[58,54,49,0,48,50,71,63,53],
[49,58,59,83,0,63,55,61,70],
[66,54,58,81,68,0,62,51,72],
[67,53,58,60,76,69,0,49,77],
[62,66,67,68,70,80,82,0,81],
[54,51,57,78,61,59,54,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,70,61,72,71,74,61,62],
[69,0,70,63,70,74,69,71,61],
[61,61,0,59,60,77,65,62,66],
[70,68,72,0,71,75,68,56,64],
[59,61,71,60,0,70,70,58,64],
[60,57,54,56,61,0,66,55,60],
[57,62,66,63,61,65,0,52,51],
[70,60,69,75,73,76,79,0,65],
[69,70,65,67,67,71,80,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,75,78,78,87,70,59,68],
[72,0,69,70,69,71,74,66,56],
[56,62,0,55,73,76,62,66,57],
[53,61,76,0,70,92,54,59,63],
[53,62,58,61,0,66,48,55,48],
[44,60,55,39,65,0,52,66,51],
[61,57,69,77,83,79,0,60,67],
[72,65,65,72,76,65,71,0,57],
[63,75,74,68,83,80,64,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,49,78,84,82,66,68,97],
[64,0,49,63,83,92,62,82,99],
[82,82,0,51,87,90,93,73,92],
[53,68,80,0,77,82,88,74,101],
[47,48,44,54,0,89,48,38,46],
[49,39,41,49,42,0,28,54,72],
[65,69,38,43,83,103,0,74,59],
[63,49,58,57,93,77,57,0,74],
[34,32,39,30,85,59,72,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,68,67,62,77,58,62,65],
[69,0,71,70,65,67,54,62,63],
[63,60,0,66,64,74,66,60,74],
[64,61,65,0,52,66,59,66,67],
[69,66,67,79,0,75,53,71,74],
[54,64,57,65,56,0,51,68,70],
[73,77,65,72,78,80,0,78,85],
[69,69,71,65,60,63,53,0,69],
[66,68,57,64,57,61,46,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,90,61,85,69,62,72,63],
[50,0,82,69,67,73,64,61,70],
[41,49,0,43,60,58,60,44,53],
[70,62,88,0,74,60,54,55,69],
[46,64,71,57,0,61,47,43,58],
[62,58,73,71,70,0,71,62,60],
[69,67,71,77,84,60,0,56,69],
[59,70,87,76,88,69,75,0,74],
[68,61,78,62,73,71,62,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,63,78,72,68,64,73,78],
[64,0,58,70,71,58,66,68,69],
[68,73,0,84,84,62,67,81,84],
[53,61,47,0,62,48,50,56,63],
[59,60,47,69,0,55,56,73,63],
[63,73,69,83,76,0,73,67,76],
[67,65,64,81,75,58,0,77,70],
[58,63,50,75,58,64,54,0,71],
[53,62,47,68,68,55,61,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,72,87,65,73,84,76,81],
[54,0,61,86,68,70,68,64,61],
[59,70,0,83,67,69,62,68,81],
[44,45,48,0,51,48,49,51,58],
[66,63,64,80,0,63,65,63,77],
[58,61,62,83,68,0,73,72,81],
[47,63,69,82,66,58,0,57,76],
[55,67,63,80,68,59,74,0,74],
[50,70,50,73,54,50,55,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,71,65,77,68,62,68,61],
[70,0,72,69,71,76,57,63,69],
[60,59,0,63,58,65,58,65,67],
[66,62,68,0,67,67,63,59,70],
[54,60,73,64,0,68,54,61,59],
[63,55,66,64,63,0,51,59,58],
[69,74,73,68,77,80,0,67,63],
[63,68,66,72,70,72,64,0,62],
[70,62,64,61,72,73,68,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,67,52,67,71,55,67,55],
[75,0,65,67,63,70,60,69,62],
[64,66,0,44,58,63,55,66,49],
[79,64,87,0,70,75,62,73,67],
[64,68,73,61,0,85,60,82,66],
[60,61,68,56,46,0,62,70,53],
[76,71,76,69,71,69,0,63,63],
[64,62,65,58,49,61,68,0,46],
[76,69,82,64,65,78,68,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,54,56,68,70,67,64],
[63,0,66,62,56,61,66,65,60],
[67,65,0,65,59,64,68,68,65],
[77,69,66,0,59,76,74,71,67],
[75,75,72,72,0,65,74,71,58],
[63,70,67,55,66,0,65,65,62],
[61,65,63,57,57,66,0,62,61],
[64,66,63,60,60,66,69,0,60],
[67,71,66,64,73,69,70,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,60,65,62,59,55,63,66],
[67,0,57,59,67,61,50,56,61],
[71,74,0,71,63,71,67,59,76],
[66,72,60,0,68,75,61,59,61],
[69,64,68,63,0,66,61,62,66],
[72,70,60,56,65,0,63,61,64],
[76,81,64,70,70,68,0,61,67],
[68,75,72,72,69,70,70,0,64],
[65,70,55,70,65,67,64,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,43,68,64,62,46,41,68],
[119,0,64,80,67,82,83,57,104],
[88,67,0,97,55,73,89,68,98],
[63,51,34,0,52,65,54,25,77],
[67,64,76,79,0,78,48,67,84],
[69,49,58,66,53,0,53,50,87],
[85,48,42,77,83,78,0,47,74],
[90,74,63,106,64,81,84,0,118],
[63,27,33,54,47,44,57,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,76,67,75,72,80,62,75],
[61,0,71,60,74,67,77,63,66],
[55,60,0,56,67,65,71,62,63],
[64,71,75,0,75,73,77,63,67],
[56,57,64,56,0,62,69,56,69],
[59,64,66,58,69,0,67,68,64],
[51,54,60,54,62,64,0,58,66],
[69,68,69,68,75,63,73,0,74],
[56,65,68,64,62,67,65,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,60,66,70,67,61,51,70],
[68,0,65,68,78,57,64,61,71],
[71,66,0,66,80,72,63,74,72],
[65,63,65,0,73,70,69,65,70],
[61,53,51,58,0,57,60,58,68],
[64,74,59,61,74,0,67,63,67],
[70,67,68,62,71,64,0,65,70],
[80,70,57,66,73,68,66,0,68],
[61,60,59,61,63,64,61,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,28,59,28,28,28,59,83],
[92,0,96,68,45,76,57,52,68],
[103,35,0,68,45,87,48,63,68],
[72,63,63,0,65,80,92,76,57],
[103,86,86,66,0,74,55,42,86],
[103,55,44,51,57,0,55,99,88],
[103,74,83,39,76,76,0,87,68],
[72,79,68,55,89,32,44,0,88],
[48,63,63,74,45,43,63,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,0,36,39,15,11,23,50],
[93,0,93,54,60,59,59,68,72],
[131,38,0,50,60,61,54,68,89],
[95,77,81,0,90,73,67,49,104],
[92,71,71,41,0,37,16,59,80],
[116,72,70,58,94,0,86,68,88],
[120,72,77,64,115,45,0,57,79],
[108,63,63,82,72,63,74,0,101],
[81,59,42,27,51,43,52,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,64,69,69,73,63,66,67],
[68,0,60,62,55,67,59,66,66],
[67,71,0,69,72,72,62,71,71],
[62,69,62,0,59,73,62,68,75],
[62,76,59,72,0,71,67,61,68],
[58,64,59,58,60,0,56,58,65],
[68,72,69,69,64,75,0,71,70],
[65,65,60,63,70,73,60,0,69],
[64,65,60,56,63,66,61,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,73,75,74,61,77,73,77],
[68,0,66,63,60,69,72,68,62],
[58,65,0,63,57,61,65,74,68],
[56,68,68,0,62,55,80,66,68],
[57,71,74,69,0,54,58,78,65],
[70,62,70,76,77,0,78,73,74],
[54,59,66,51,73,53,0,65,68],
[58,63,57,65,53,58,66,0,68],
[54,69,63,63,66,57,63,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,50,34,79,57,54,70,65],
[9,0,45,22,71,35,49,41,19],
[81,86,0,22,91,81,79,71,65],
[97,109,109,0,96,113,87,87,49],
[52,60,40,35,0,47,44,44,52],
[74,96,50,18,84,0,45,54,45],
[77,82,52,44,87,86,0,57,48],
[61,90,60,44,87,77,74,0,77],
[66,112,66,82,79,86,83,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,67,70,68,90,67,58,69],
[54,0,36,66,53,64,55,26,59],
[64,95,0,84,88,96,80,79,76],
[61,65,47,0,49,72,52,41,53],
[63,78,43,82,0,79,78,45,67],
[41,67,35,59,52,0,53,48,58],
[64,76,51,79,53,78,0,62,67],
[73,105,52,90,86,83,69,0,82],
[62,72,55,78,64,73,64,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,67,61,52,85,64,48,76],
[62,0,64,62,68,81,66,69,78],
[64,67,0,65,77,78,46,47,60],
[70,69,66,0,68,70,54,48,78],
[79,63,54,63,0,67,37,52,73],
[46,50,53,61,64,0,51,51,65],
[67,65,85,77,94,80,0,67,89],
[83,62,84,83,79,80,64,0,96],
[55,53,71,53,58,66,42,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,50,45,55,46,44,45,54],
[86,0,61,50,56,59,66,56,61],
[81,70,0,70,69,61,70,65,85],
[86,81,61,0,81,70,86,71,61],
[76,75,62,50,0,52,70,60,71],
[85,72,70,61,79,0,70,71,82],
[87,65,61,45,61,61,0,59,68],
[86,75,66,60,71,60,72,0,70],
[77,70,46,70,60,49,63,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,63,52,67,54,73,68,63],
[68,0,67,51,62,52,80,61,53],
[68,64,0,54,62,63,78,41,53],
[79,80,77,0,62,74,73,69,65],
[64,69,69,69,0,61,84,75,73],
[77,79,68,57,70,0,79,69,61],
[58,51,53,58,47,52,0,56,62],
[63,70,90,62,56,62,75,0,68],
[68,78,78,66,58,70,69,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,64,58,75,66,64,64,68],
[71,0,60,71,79,62,66,71,66],
[67,71,0,74,74,53,64,67,71],
[73,60,57,0,57,59,49,59,81],
[56,52,57,74,0,61,59,62,67],
[65,69,78,72,70,0,48,73,73],
[67,65,67,82,72,83,0,70,65],
[67,60,64,72,69,58,61,0,65],
[63,65,60,50,64,58,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,73,58,53,55,59,63,56],
[73,0,72,57,56,61,74,68,69],
[58,59,0,60,62,55,73,66,56],
[73,74,71,0,69,61,73,63,73],
[78,75,69,62,0,65,76,78,84],
[76,70,76,70,66,0,73,62,72],
[72,57,58,58,55,58,0,63,56],
[68,63,65,68,53,69,68,0,58],
[75,62,75,58,47,59,75,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,80,53,71,64,60,65,59],
[74,0,76,68,69,72,64,65,72],
[51,55,0,65,62,59,52,56,63],
[78,63,66,0,67,75,67,68,69],
[60,62,69,64,0,60,64,65,68],
[67,59,72,56,71,0,65,69,70],
[71,67,79,64,67,66,0,68,68],
[66,66,75,63,66,62,63,0,69],
[72,59,68,62,63,61,63,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,63,72,74,70,73,71],
[64,0,72,62,65,71,74,62,66],
[61,59,0,63,67,61,64,67,61],
[68,69,68,0,74,72,65,73,73],
[59,66,64,57,0,63,69,72,68],
[57,60,70,59,68,0,66,60,67],
[61,57,67,66,62,65,0,66,67],
[58,69,64,58,59,71,65,0,65],
[60,65,70,58,63,64,64,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,77,72,87,66,65,85,84],
[61,0,77,68,87,70,67,81,92],
[54,54,0,73,80,65,67,76,73],
[59,63,58,0,64,56,67,72,70],
[44,44,51,67,0,70,59,65,75],
[65,61,66,75,61,0,74,68,82],
[66,64,64,64,72,57,0,73,70],
[46,50,55,59,66,63,58,0,65],
[47,39,58,61,56,49,61,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,77,72,98,86,54,75,63],
[35,0,29,65,69,71,62,71,60],
[54,102,0,74,97,69,78,85,71],
[59,66,57,0,85,59,69,83,66],
[33,62,34,46,0,50,34,67,56],
[45,60,62,72,81,0,53,56,42],
[77,69,53,62,97,78,0,68,79],
[56,60,46,48,64,75,63,0,44],
[68,71,60,65,75,89,52,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,69,70,64,73,61,80,73],
[75,0,57,94,73,77,64,81,68],
[62,74,0,77,60,77,60,70,50],
[61,37,54,0,42,68,63,82,44],
[67,58,71,89,0,71,91,86,65],
[58,54,54,63,60,0,54,59,62],
[70,67,71,68,40,77,0,70,69],
[51,50,61,49,45,72,61,0,45],
[58,63,81,87,66,69,62,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,74,75,70,77,79,66,67],
[74,0,65,64,77,72,56,73,68],
[57,66,0,62,70,64,75,94,68],
[56,67,69,0,81,64,78,83,74],
[61,54,61,50,0,65,48,68,76],
[54,59,67,67,66,0,74,67,49],
[52,75,56,53,83,57,0,74,60],
[65,58,37,48,63,64,57,0,67],
[64,63,63,57,55,82,71,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,64,73,58,54,69,73,78],
[66,0,74,76,67,79,62,87,89],
[67,57,0,71,63,59,49,69,81],
[58,55,60,0,60,37,51,62,73],
[73,64,68,71,0,49,55,74,77],
[77,52,72,94,82,0,66,70,92],
[62,69,82,80,76,65,0,62,85],
[58,44,62,69,57,61,69,0,75],
[53,42,50,58,54,39,46,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,131,131,100,43,57,74,74],
[74,0,74,131,74,43,100,74,74],
[0,57,0,100,57,0,57,31,0],
[0,0,31,0,0,0,57,31,0],
[31,57,74,131,0,0,57,31,74],
[88,88,131,131,131,0,57,31,74],
[74,31,74,74,74,74,0,74,74],
[57,57,100,100,100,100,57,0,43],
[57,57,131,131,57,57,57,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,72,69,62,63,66,70,71],
[65,0,75,67,62,68,69,63,67],
[59,56,0,65,63,64,64,64,62],
[62,64,66,0,69,61,64,68,67],
[69,69,68,62,0,73,76,71,68],
[68,63,67,70,58,0,66,69,69],
[65,62,67,67,55,65,0,65,68],
[61,68,67,63,60,62,66,0,67],
[60,64,69,64,63,62,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,69,67,66,74,75,65,60],
[60,0,70,60,63,65,69,58,67],
[62,61,0,54,63,56,57,51,65],
[64,71,77,0,63,67,71,64,74],
[65,68,68,68,0,67,71,65,70],
[57,66,75,64,64,0,79,68,62],
[56,62,74,60,60,52,0,59,58],
[66,73,80,67,66,63,72,0,66],
[71,64,66,57,61,69,73,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,96,92,113,57,79,92,92],
[0,0,40,35,113,0,1,35,92],
[35,91,0,35,74,17,1,52,91],
[39,96,96,0,113,57,79,92,57],
[18,18,57,18,0,18,1,18,57],
[74,131,114,74,113,0,40,75,92],
[52,130,130,52,130,91,0,91,91],
[39,96,79,39,113,56,40,0,96],
[39,39,40,74,74,39,40,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,68,77,63,67,70,83,81],
[76,0,66,78,71,61,74,62,73],
[63,65,0,74,75,69,67,73,76],
[54,53,57,0,57,60,63,60,63],
[68,60,56,74,0,73,55,79,71],
[64,70,62,71,58,0,61,71,73],
[61,57,64,68,76,70,0,71,72],
[48,69,58,71,52,60,60,0,67],
[50,58,55,68,60,58,59,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,65,74,96,49,60,61,75],
[52,0,70,78,86,67,75,70,80],
[66,61,0,63,91,42,42,53,85],
[57,53,68,0,78,61,63,22,68],
[35,45,40,53,0,42,49,32,44],
[82,64,89,70,89,0,73,44,61],
[71,56,89,68,82,58,0,54,72],
[70,61,78,109,99,87,77,0,74],
[56,51,46,63,87,70,59,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,71,60,65,79,72,59,78],
[60,0,69,60,64,77,70,59,71],
[60,62,0,66,56,62,54,58,73],
[71,71,65,0,64,76,74,80,81],
[66,67,75,67,0,86,59,72,73],
[52,54,69,55,45,0,56,53,70],
[59,61,77,57,72,75,0,67,74],
[72,72,73,51,59,78,64,0,82],
[53,60,58,50,58,61,57,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,76,61,62,78,63,71],
[68,0,69,65,68,63,69,54,60],
[60,62,0,72,70,59,80,67,80],
[55,66,59,0,63,61,62,52,63],
[70,63,61,68,0,69,77,61,75],
[69,68,72,70,62,0,70,64,77],
[53,62,51,69,54,61,0,59,72],
[68,77,64,79,70,67,72,0,77],
[60,71,51,68,56,54,59,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,66,64,54,57,59,60,50],
[86,0,72,76,66,59,76,74,65],
[65,59,0,61,49,59,55,59,46],
[67,55,70,0,51,63,62,67,53],
[77,65,82,80,0,63,69,77,72],
[74,72,72,68,68,0,70,73,60],
[72,55,76,69,62,61,0,72,56],
[71,57,72,64,54,58,59,0,53],
[81,66,85,78,59,71,75,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,60,69,65,67,67,66,65],
[51,0,49,72,73,53,66,75,66],
[71,82,0,76,65,80,79,76,72],
[62,59,55,0,51,70,66,67,53],
[66,58,66,80,0,60,70,81,65],
[64,78,51,61,71,0,80,71,72],
[64,65,52,65,61,51,0,65,64],
[65,56,55,64,50,60,66,0,70],
[66,65,59,78,66,59,67,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,51,54,67,64,58,56,60],
[71,0,55,59,70,73,70,58,75],
[80,76,0,65,70,70,72,67,73],
[77,72,66,0,67,72,66,61,68],
[64,61,61,64,0,69,73,61,66],
[67,58,61,59,62,0,69,60,65],
[73,61,59,65,58,62,0,54,64],
[75,73,64,70,70,71,77,0,78],
[71,56,58,63,65,66,67,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,78,81,56,70,92,81,72],
[70,0,72,70,62,69,80,76,51],
[53,59,0,84,75,65,81,78,71],
[50,61,47,0,50,54,67,74,73],
[75,69,56,81,0,69,84,76,80],
[61,62,66,77,62,0,91,77,75],
[39,51,50,64,47,40,0,56,49],
[50,55,53,57,55,54,75,0,43],
[59,80,60,58,51,56,82,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,75,65,63,63,70,72],
[64,0,68,71,63,65,64,67,75],
[67,63,0,74,71,66,66,67,62],
[56,60,57,0,64,59,53,57,60],
[66,68,60,67,0,62,61,66,67],
[68,66,65,72,69,0,62,74,71],
[68,67,65,78,70,69,0,64,75],
[61,64,64,74,65,57,67,0,75],
[59,56,69,71,64,60,56,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,52,76,77,57,42,51,56],
[74,0,69,80,91,62,89,89,80],
[79,62,0,75,87,72,91,66,69],
[55,51,56,0,64,60,46,65,59],
[54,40,44,67,0,56,58,46,51],
[74,69,59,71,75,0,73,68,63],
[89,42,40,85,73,58,0,74,70],
[80,42,65,66,85,63,57,0,60],
[75,51,62,72,80,68,61,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,59,71,74,72,64,89,63],
[73,0,61,66,81,80,63,82,82],
[72,70,0,63,76,63,67,88,74],
[60,65,68,0,67,65,63,83,57],
[57,50,55,64,0,59,65,67,55],
[59,51,68,66,72,0,67,71,63],
[67,68,64,68,66,64,0,73,69],
[42,49,43,48,64,60,58,0,44],
[68,49,57,74,76,68,62,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,67,57,52,65,64,68,66],
[61,0,65,38,54,59,69,64,41],
[64,66,0,60,77,68,71,83,74],
[74,93,71,0,70,65,91,79,69],
[79,77,54,61,0,69,72,60,61],
[66,72,63,66,62,0,76,67,50],
[67,62,60,40,59,55,0,63,47],
[63,67,48,52,71,64,68,0,65],
[65,90,57,62,70,81,84,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,53,83,63,51,62,102,87],
[53,0,43,73,66,65,70,76,64],
[78,88,0,65,56,44,61,85,82],
[48,58,66,0,57,62,46,79,61],
[68,65,75,74,0,73,61,85,95],
[80,66,87,69,58,0,62,79,93],
[69,61,70,85,70,69,0,91,84],
[29,55,46,52,46,52,40,0,56],
[44,67,49,70,36,38,47,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,72,60,65,55,71,63,63],
[71,0,79,71,75,66,63,70,63],
[59,52,0,52,70,67,66,60,57],
[71,60,79,0,83,62,70,81,50],
[66,56,61,48,0,50,54,67,53],
[76,65,64,69,81,0,78,55,64],
[60,68,65,61,77,53,0,54,67],
[68,61,71,50,64,76,77,0,70],
[68,68,74,81,78,67,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,48,52,68,62,55,53,66],
[67,0,48,73,71,73,61,58,69],
[83,83,0,69,72,74,74,62,74],
[79,58,62,0,80,72,66,71,70],
[63,60,59,51,0,57,63,51,64],
[69,58,57,59,74,0,70,48,68],
[76,70,57,65,68,61,0,66,63],
[78,73,69,60,80,83,65,0,71],
[65,62,57,61,67,63,68,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,69,64,84,82,72,66,55],
[54,0,72,83,84,59,73,70,45],
[62,59,0,47,61,40,53,61,51],
[67,48,84,0,79,69,66,68,70],
[47,47,70,52,0,48,37,48,60],
[49,72,91,62,83,0,85,68,59],
[59,58,78,65,94,46,0,49,65],
[65,61,70,63,83,63,82,0,62],
[76,86,80,61,71,72,66,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,61,65,74,61,62,69,61],
[60,0,60,62,64,65,61,58,61],
[70,71,0,63,62,73,71,69,68],
[66,69,68,0,68,63,64,67,57],
[57,67,69,63,0,67,65,63,63],
[70,66,58,68,64,0,69,66,54],
[69,70,60,67,66,62,0,62,60],
[62,73,62,64,68,65,69,0,65],
[70,70,63,74,68,77,71,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,58,74,65,69,78,68,64],
[56,0,57,66,60,66,66,63,60],
[73,74,0,72,69,74,75,65,73],
[57,65,59,0,55,64,66,57,55],
[66,71,62,76,0,72,70,65,71],
[62,65,57,67,59,0,66,64,65],
[53,65,56,65,61,65,0,61,54],
[63,68,66,74,66,67,70,0,66],
[67,71,58,76,60,66,77,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,64,64,70,70,65,65,70],
[59,0,52,51,57,60,51,66,47],
[67,79,0,67,69,72,72,67,63],
[67,80,64,0,70,69,70,71,63],
[61,74,62,61,0,72,66,63,61],
[61,71,59,62,59,0,67,69,52],
[66,80,59,61,65,64,0,74,51],
[66,65,64,60,68,62,57,0,61],
[61,84,68,68,70,79,80,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,64,62,71,62,71,63],
[72,0,66,70,67,74,63,67,65],
[66,65,0,69,64,68,68,62,66],
[67,61,62,0,68,66,61,66,67],
[69,64,67,63,0,66,56,53,65],
[60,57,63,65,65,0,62,62,57],
[69,68,63,70,75,69,0,67,67],
[60,64,69,65,78,69,64,0,63],
[68,66,65,64,66,74,64,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,61,63,71,75,81,64,74],
[71,0,62,75,72,74,77,68,81],
[70,69,0,65,80,72,82,70,71],
[68,56,66,0,65,76,70,65,62],
[60,59,51,66,0,73,73,64,72],
[56,57,59,55,58,0,57,55,66],
[50,54,49,61,58,74,0,57,66],
[67,63,61,66,67,76,74,0,74],
[57,50,60,69,59,65,65,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,66,66,72,66,52,63,54],
[57,0,54,45,56,68,46,45,46],
[65,77,0,51,60,69,50,57,51],
[65,86,80,0,54,68,80,70,49],
[59,75,71,77,0,68,56,59,67],
[65,63,62,63,63,0,64,64,52],
[79,85,81,51,75,67,0,68,57],
[68,86,74,61,72,67,63,0,66],
[77,85,80,82,64,79,74,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,24,41,35,43,79,63,60],
[80,0,55,80,51,60,72,76,83],
[107,76,0,93,64,83,82,90,76],
[90,51,38,0,57,78,81,68,70],
[96,80,67,74,0,56,85,96,94],
[88,71,48,53,75,0,74,68,73],
[52,59,49,50,46,57,0,81,82],
[68,55,41,63,35,63,50,0,76],
[71,48,55,61,37,58,49,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,79,92,80,79,76,62,74],
[75,0,90,80,82,72,74,68,57],
[52,41,0,55,76,33,36,70,48],
[39,51,76,0,82,50,52,69,54],
[51,49,55,49,0,53,51,68,50],
[52,59,98,81,78,0,66,72,75],
[55,57,95,79,80,65,0,57,44],
[69,63,61,62,63,59,74,0,58],
[57,74,83,77,81,56,87,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,66,62,70,75,57,57,64],
[62,0,70,70,78,66,69,68,74],
[65,61,0,63,70,71,52,60,71],
[69,61,68,0,69,88,76,74,75],
[61,53,61,62,0,64,61,73,74],
[56,65,60,43,67,0,50,66,59],
[74,62,79,55,70,81,0,77,59],
[74,63,71,57,58,65,54,0,55],
[67,57,60,56,57,72,72,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,59,69,65,72,63,66,63],
[63,0,60,72,67,75,69,70,68],
[72,71,0,61,69,80,63,75,72],
[62,59,70,0,66,75,59,75,68],
[66,64,62,65,0,77,58,77,70],
[59,56,51,56,54,0,51,59,54],
[68,62,68,72,73,80,0,80,70],
[65,61,56,56,54,72,51,0,58],
[68,63,59,63,61,77,61,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,67,68,61,68,68,68,56],
[54,0,56,62,60,59,65,68,61],
[64,75,0,64,56,58,69,69,67],
[63,69,67,0,73,64,65,68,69],
[70,71,75,58,0,54,59,62,61],
[63,72,73,67,77,0,68,74,65],
[63,66,62,66,72,63,0,65,64],
[63,63,62,63,69,57,66,0,57],
[75,70,64,62,70,66,67,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,70,66,85,66,71,60,65],
[60,0,72,66,71,64,76,67,67],
[61,59,0,59,84,67,75,69,72],
[65,65,72,0,70,63,69,63,68],
[46,60,47,61,0,48,64,61,60],
[65,67,64,68,83,0,67,65,67],
[60,55,56,62,67,64,0,59,64],
[71,64,62,68,70,66,72,0,64],
[66,64,59,63,71,64,67,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,70,54,61,65,65,74,68],
[68,0,76,62,68,68,61,66,72],
[61,55,0,57,65,50,49,61,62],
[77,69,74,0,72,63,67,66,61],
[70,63,66,59,0,57,58,64,70],
[66,63,81,68,74,0,60,71,71],
[66,70,82,64,73,71,0,75,73],
[57,65,70,65,67,60,56,0,67],
[63,59,69,70,61,60,58,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,67,47,71,51,63,52,58],
[69,0,74,80,75,73,56,70,59],
[64,57,0,68,71,64,68,65,57],
[84,51,63,0,63,56,58,70,52],
[60,56,60,68,0,59,46,50,52],
[80,58,67,75,72,0,62,60,55],
[68,75,63,73,85,69,0,63,70],
[79,61,66,61,81,71,68,0,60],
[73,72,74,79,79,76,61,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,72,71,63,70,74,66,72],
[55,0,61,69,58,55,72,60,59],
[59,70,0,63,63,65,79,70,68],
[60,62,68,0,62,59,70,67,67],
[68,73,68,69,0,76,64,75,67],
[61,76,66,72,55,0,66,70,59],
[57,59,52,61,67,65,0,59,64],
[65,71,61,64,56,61,72,0,68],
[59,72,63,64,64,72,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,70,71,65,56,68,74,56],
[73,0,73,73,57,59,60,72,71],
[61,58,0,62,61,57,64,67,55],
[60,58,69,0,60,71,58,63,67],
[66,74,70,71,0,62,61,63,75],
[75,72,74,60,69,0,69,75,73],
[63,71,67,73,70,62,0,67,66],
[57,59,64,68,68,56,64,0,71],
[75,60,76,64,56,58,65,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,74,69,66,74,60,75,64],
[50,0,69,54,60,75,56,72,74],
[57,62,0,59,58,60,60,69,76],
[62,77,72,0,73,64,71,75,73],
[65,71,73,58,0,67,67,71,71],
[57,56,71,67,64,0,68,72,71],
[71,75,71,60,64,63,0,74,73],
[56,59,62,56,60,59,57,0,73],
[67,57,55,58,60,60,58,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,52,42,59,78,78,55,92],
[53,0,38,1,18,17,33,60,62],
[79,93,0,62,66,63,80,77,42],
[89,130,69,0,35,128,114,90,90],
[72,113,65,96,0,96,110,88,74],
[53,114,68,3,35,0,78,73,64],
[53,98,51,17,21,53,0,73,62],
[76,71,54,41,43,58,58,0,62],
[39,69,89,41,57,67,69,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,70,62,62,57,53,67,52],
[73,0,70,68,65,64,65,75,70],
[61,61,0,64,64,59,55,61,55],
[69,63,67,0,66,73,64,71,68],
[69,66,67,65,0,58,67,66,62],
[74,67,72,58,73,0,66,70,68],
[78,66,76,67,64,65,0,72,70],
[64,56,70,60,65,61,59,0,59],
[79,61,76,63,69,63,61,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,47,28,55,41,74,46,46],
[79,0,47,68,53,48,39,42,50],
[84,84,0,74,59,78,57,46,82],
[103,63,57,0,34,76,60,22,32],
[76,78,72,97,0,45,54,47,72],
[90,83,53,55,86,0,84,42,80],
[57,92,74,71,77,47,0,74,71],
[85,89,85,109,84,89,57,0,104],
[85,81,49,99,59,51,60,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,84,70,64,91,84,83,57],
[79,0,56,79,92,110,92,75,75],
[47,75,0,98,71,77,112,93,101],
[61,52,33,0,77,70,111,83,97],
[67,39,60,54,0,93,84,56,64],
[40,21,54,61,38,0,94,57,47],
[47,39,19,20,47,37,0,49,60],
[48,56,38,48,75,74,82,0,85],
[74,56,30,34,67,84,71,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,54,72,60,81,66,68,74],
[58,0,65,76,70,83,56,64,81],
[77,66,0,71,68,89,63,61,71],
[59,55,60,0,53,77,63,57,65],
[71,61,63,78,0,96,71,73,78],
[50,48,42,54,35,0,57,38,57],
[65,75,68,68,60,74,0,60,68],
[63,67,70,74,58,93,71,0,79],
[57,50,60,66,53,74,63,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,68,66,71,66,60,59,64],
[68,0,60,61,64,69,66,67,72],
[63,71,0,61,69,74,66,67,66],
[65,70,70,0,78,69,75,67,80],
[60,67,62,53,0,67,70,73,73],
[65,62,57,62,64,0,66,64,66],
[71,65,65,56,61,65,0,69,71],
[72,64,64,64,58,67,62,0,73],
[67,59,65,51,58,65,60,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,81,65,78,71,74,61,86],
[59,0,77,63,72,80,61,45,66],
[50,54,0,51,56,55,55,43,54],
[66,68,80,0,85,78,72,49,67],
[53,59,75,46,0,69,62,49,71],
[60,51,76,53,62,0,57,50,68],
[57,70,76,59,69,74,0,45,57],
[70,86,88,82,82,81,86,0,65],
[45,65,77,64,60,63,74,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,74,79,65,75,81,75,79],
[50,0,55,67,49,60,63,62,64],
[57,76,0,74,49,66,69,60,69],
[52,64,57,0,59,62,66,63,62],
[66,82,82,72,0,64,73,73,73],
[56,71,65,69,67,0,67,69,67],
[50,68,62,65,58,64,0,61,65],
[56,69,71,68,58,62,70,0,63],
[52,67,62,69,58,64,66,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,64,69,57,71,64,73,76],
[66,0,64,60,65,68,66,73,77],
[67,67,0,68,71,70,63,67,82],
[62,71,63,0,62,73,57,74,80],
[74,66,60,69,0,75,71,80,79],
[60,63,61,58,56,0,62,63,74],
[67,65,68,74,60,69,0,70,71],
[58,58,64,57,51,68,61,0,66],
[55,54,49,51,52,57,60,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,78,65,75,66,70,76,72],
[60,0,71,59,66,69,53,68,63],
[53,60,0,57,60,65,66,67,64],
[66,72,74,0,71,63,70,82,63],
[56,65,71,60,0,62,60,75,63],
[65,62,66,68,69,0,64,72,75],
[61,78,65,61,71,67,0,70,64],
[55,63,64,49,56,59,61,0,62],
[59,68,67,68,68,56,67,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,69,62,61,61,70,69,67],
[66,0,64,74,65,75,66,68,69],
[62,67,0,67,71,64,66,63,68],
[69,57,64,0,66,65,65,70,67],
[70,66,60,65,0,66,67,68,69],
[70,56,67,66,65,0,65,63,65],
[61,65,65,66,64,66,0,64,66],
[62,63,68,61,63,68,67,0,73],
[64,62,63,64,62,66,65,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,79,73,76,73,69,73,58],
[67,0,79,72,77,79,69,62,72],
[52,52,0,69,73,61,63,63,55],
[58,59,62,0,68,66,54,56,53],
[55,54,58,63,0,61,56,56,61],
[58,52,70,65,70,0,62,66,65],
[62,62,68,77,75,69,0,64,66],
[58,69,68,75,75,65,67,0,67],
[73,59,76,78,70,66,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,72,76,68,65,72,77,73],
[61,0,60,72,60,65,73,63,74],
[59,71,0,75,65,71,70,74,68],
[55,59,56,0,58,56,65,69,60],
[63,71,66,73,0,67,73,68,61],
[66,66,60,75,64,0,74,71,60],
[59,58,61,66,58,57,0,61,64],
[54,68,57,62,63,60,70,0,62],
[58,57,63,71,70,71,67,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,66,70,64,62,57,58,74],
[63,0,58,47,48,43,53,48,61],
[65,73,0,49,47,37,65,47,68],
[61,84,82,0,65,60,67,73,87],
[67,83,84,66,0,73,88,64,80],
[69,88,94,71,58,0,78,69,93],
[74,78,66,64,43,53,0,55,73],
[73,83,84,58,67,62,76,0,96],
[57,70,63,44,51,38,58,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,60,69,56,68,56,63,75],
[91,0,69,78,65,64,69,73,76],
[71,62,0,83,54,78,47,87,101],
[62,53,48,0,57,68,60,80,83],
[75,66,77,74,0,84,64,82,93],
[63,67,53,63,47,0,27,66,48],
[75,62,84,71,67,104,0,88,79],
[68,58,44,51,49,65,43,0,82],
[56,55,30,48,38,83,52,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,74,76,63,56,56,53,65],
[55,0,84,78,64,56,65,56,64],
[57,47,0,80,46,54,47,51,44],
[55,53,51,0,40,56,53,43,50],
[68,67,85,91,0,62,65,56,65],
[75,75,77,75,69,0,65,65,60],
[75,66,84,78,66,66,0,71,62],
[78,75,80,88,75,66,60,0,70],
[66,67,87,81,66,71,69,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,65,59,55,57,58,57,58],
[76,0,64,63,52,57,71,52,60],
[66,67,0,62,64,56,72,67,65],
[72,68,69,0,59,57,75,64,62],
[76,79,67,72,0,61,75,55,61],
[74,74,75,74,70,0,74,69,65],
[73,60,59,56,56,57,0,54,59],
[74,79,64,67,76,62,77,0,68],
[73,71,66,69,70,66,72,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,52,63,73,52,46,63,59],
[73,0,70,63,74,72,61,61,78],
[79,61,0,72,64,69,50,66,70],
[68,68,59,0,71,76,65,63,68],
[58,57,67,60,0,64,60,62,64],
[79,59,62,55,67,0,53,63,59],
[85,70,81,66,71,78,0,63,72],
[68,70,65,68,69,68,68,0,68],
[72,53,61,63,67,72,59,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,68,66,78,77,63,79,79],
[58,0,74,59,69,75,69,77,76],
[63,57,0,67,58,71,60,73,72],
[65,72,64,0,69,69,69,68,76],
[53,62,73,62,0,71,61,72,78],
[54,56,60,62,60,0,58,65,79],
[68,62,71,62,70,73,0,70,74],
[52,54,58,63,59,66,61,0,66],
[52,55,59,55,53,52,57,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,48,59,42,56,62,58,66],
[73,0,78,86,48,66,58,65,76],
[83,53,0,84,55,68,70,69,64],
[72,45,47,0,56,46,68,72,72],
[89,83,76,75,0,65,74,76,74],
[75,65,63,85,66,0,67,74,60],
[69,73,61,63,57,64,0,62,46],
[73,66,62,59,55,57,69,0,69],
[65,55,67,59,57,71,85,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,71,64,67,81,71,73,62],
[63,0,66,55,52,65,65,62,54],
[60,65,0,60,61,68,72,64,60],
[67,76,71,0,66,73,81,76,65],
[64,79,70,65,0,70,68,73,66],
[50,66,63,58,61,0,65,65,58],
[60,66,59,50,63,66,0,64,56],
[58,69,67,55,58,66,67,0,61],
[69,77,71,66,65,73,75,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,70,68,67,71,60,71,70],
[60,0,66,59,55,68,60,66,63],
[61,65,0,58,68,62,57,66,67],
[63,72,73,0,63,71,66,76,64],
[64,76,63,68,0,77,59,70,75],
[60,63,69,60,54,0,54,61,70],
[71,71,74,65,72,77,0,77,74],
[60,65,65,55,61,70,54,0,59],
[61,68,64,67,56,61,57,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,65,75,76,73,79,68,65],
[49,0,51,57,59,54,61,61,51],
[66,80,0,70,60,61,79,73,65],
[56,74,61,0,59,69,71,64,63],
[55,72,71,72,0,63,72,65,64],
[58,77,70,62,68,0,73,66,66],
[52,70,52,60,59,58,0,59,59],
[63,70,58,67,66,65,72,0,49],
[66,80,66,68,67,65,72,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,68,59,51,66,56,58,71],
[78,0,78,72,63,70,71,61,73],
[63,53,0,68,55,63,63,56,67],
[72,59,63,0,67,57,66,60,78],
[80,68,76,64,0,69,62,68,77],
[65,61,68,74,62,0,69,63,78],
[75,60,68,65,69,62,0,58,77],
[73,70,75,71,63,68,73,0,84],
[60,58,64,53,54,53,54,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,72,64,70,69,90,84,78],
[58,0,67,61,55,54,65,73,66],
[59,64,0,68,66,65,84,78,75],
[67,70,63,0,74,73,67,73,72],
[61,76,65,57,0,63,84,65,72],
[62,77,66,58,68,0,90,67,79],
[41,66,47,64,47,41,0,56,68],
[47,58,53,58,66,64,75,0,71],
[53,65,56,59,59,52,63,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,66,63,74,69,62,72,65],
[62,0,67,67,75,75,70,72,66],
[65,64,0,57,66,67,58,70,65],
[68,64,74,0,71,69,67,72,69],
[57,56,65,60,0,59,64,69,60],
[62,56,64,62,72,0,64,65,64],
[69,61,73,64,67,67,0,76,67],
[59,59,61,59,62,66,55,0,41],
[66,65,66,62,71,67,64,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,74,60,70,80,75,66,71],
[62,0,69,63,61,74,70,63,70],
[57,62,0,56,63,70,63,66,57],
[71,68,75,0,72,77,63,67,73],
[61,70,68,59,0,72,63,61,71],
[51,57,61,54,59,0,58,55,54],
[56,61,68,68,68,73,0,63,61],
[65,68,65,64,70,76,68,0,72],
[60,61,74,58,60,77,70,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,75,66,51,64,57,58,68],
[83,0,82,67,70,53,73,69,87],
[56,49,0,66,44,41,49,38,75],
[65,64,65,0,63,52,46,55,61],
[80,61,87,68,0,49,78,63,85],
[67,78,90,79,82,0,77,55,76],
[74,58,82,85,53,54,0,57,72],
[73,62,93,76,68,76,74,0,67],
[63,44,56,70,46,55,59,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,59,70,56,61,64,64,74],
[54,0,63,64,53,63,67,63,71],
[72,68,0,75,58,63,72,73,76],
[61,67,56,0,48,55,66,55,68],
[75,78,73,83,0,60,67,61,77],
[70,68,68,76,71,0,64,63,75],
[67,64,59,65,64,67,0,61,78],
[67,68,58,76,70,68,70,0,78],
[57,60,55,63,54,56,53,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,71,77,66,52,60,69,60],
[69,0,68,85,67,56,74,67,65],
[60,63,0,79,57,66,69,65,64],
[54,46,52,0,57,57,66,64,53],
[65,64,74,74,0,52,64,62,58],
[79,75,65,74,79,0,67,72,61],
[71,57,62,65,67,64,0,65,54],
[62,64,66,67,69,59,66,0,72],
[71,66,67,78,73,70,77,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,63,64,64,69,66,87,71],
[65,0,69,68,62,61,54,74,63],
[68,62,0,73,58,69,75,71,70],
[67,63,58,0,56,66,66,66,77],
[67,69,73,75,0,67,63,86,60],
[62,70,62,65,64,0,53,75,67],
[65,77,56,65,68,78,0,79,70],
[44,57,60,65,45,56,52,0,58],
[60,68,61,54,71,64,61,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,87,109,100,82,81,99,85],
[67,0,68,86,52,72,68,67,87],
[44,63,0,69,51,66,37,46,57],
[22,45,62,0,53,77,61,30,69],
[31,79,80,78,0,70,84,42,66],
[49,59,65,54,61,0,56,56,49],
[50,63,94,70,47,75,0,65,59],
[32,64,85,101,89,75,66,0,103],
[46,44,74,62,65,82,72,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,66,66,80,64,85,82,77],
[49,0,50,50,61,53,60,50,47],
[65,81,0,63,78,66,65,74,52],
[65,81,68,0,84,67,68,77,63],
[51,70,53,47,0,47,69,63,57],
[67,78,65,64,84,0,71,65,57],
[46,71,66,63,62,60,0,73,61],
[49,81,57,54,68,66,58,0,55],
[54,84,79,68,74,74,70,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,59,47,62,52,42,45,62],
[77,0,70,50,61,56,49,64,62],
[72,61,0,61,63,61,53,63,57],
[84,81,70,0,72,62,61,70,64],
[69,70,68,59,0,43,55,58,62],
[79,75,70,69,88,0,69,81,65],
[89,82,78,70,76,62,0,73,73],
[86,67,68,61,73,50,58,0,74],
[69,69,74,67,69,66,58,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,72,68,64,76,78,80,72],
[51,0,58,63,56,58,56,70,55],
[59,73,0,67,56,65,66,66,72],
[63,68,64,0,67,76,68,73,77],
[67,75,75,64,0,69,74,78,70],
[55,73,66,55,62,0,58,70,70],
[53,75,65,63,57,73,0,56,68],
[51,61,65,58,53,61,75,0,65],
[59,76,59,54,61,61,63,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,64,64,69,62,64,64,63],
[62,0,68,75,71,68,68,67,61],
[67,63,0,71,73,62,65,63,69],
[67,56,60,0,63,59,61,56,58],
[62,60,58,68,0,55,58,67,55],
[69,63,69,72,76,0,72,79,65],
[67,63,66,70,73,59,0,63,64],
[67,64,68,75,64,52,68,0,65],
[68,70,62,73,76,66,67,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,73,83,47,67,52,78,94],
[46,0,61,45,53,59,33,70,83],
[58,70,0,77,71,58,69,75,87],
[48,86,54,0,67,54,51,78,87],
[84,78,60,64,0,65,44,85,100],
[64,72,73,77,66,0,56,63,79],
[79,98,62,80,87,75,0,79,101],
[53,61,56,53,46,68,52,0,83],
[37,48,44,44,31,52,30,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,63,74,57,68,66,60,54],
[63,0,61,69,62,69,65,52,60],
[68,70,0,74,66,70,79,68,60],
[57,62,57,0,57,68,57,60,57],
[74,69,65,74,0,73,70,64,56],
[63,62,61,63,58,0,59,54,62],
[65,66,52,74,61,72,0,53,52],
[71,79,63,71,67,77,78,0,67],
[77,71,71,74,75,69,79,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,61,86,83,87,40,83,107],
[5,0,40,67,42,0,40,21,65],
[70,91,0,91,86,45,85,83,86],
[45,64,40,0,61,64,40,61,64],
[48,89,45,70,0,69,40,45,49],
[44,131,86,67,62,0,40,102,70],
[91,91,46,91,91,91,0,88,91],
[48,110,48,70,86,29,43,0,70],
[24,66,45,67,82,61,40,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,74,54,89,81,45,71,51],
[69,0,49,70,75,60,59,61,40],
[57,82,0,64,77,34,52,44,58],
[77,61,67,0,98,81,66,71,63],
[42,56,54,33,0,61,36,61,62],
[50,71,97,50,70,0,59,69,60],
[86,72,79,65,95,72,0,84,66],
[60,70,87,60,70,62,47,0,50],
[80,91,73,68,69,71,65,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,64,73,66,59,69,75,67],
[62,0,66,76,68,59,71,73,72],
[67,65,0,67,63,65,70,61,56],
[58,55,64,0,57,54,69,59,48],
[65,63,68,74,0,61,77,73,67],
[72,72,66,77,70,0,72,75,64],
[62,60,61,62,54,59,0,60,51],
[56,58,70,72,58,56,71,0,58],
[64,59,75,83,64,67,80,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,53,63,76,80,69,78,65],
[57,0,70,77,70,86,64,68,55],
[78,61,0,86,63,76,60,65,61],
[68,54,45,0,64,73,58,53,55],
[55,61,68,67,0,76,64,63,49],
[51,45,55,58,55,0,52,43,57],
[62,67,71,73,67,79,0,85,61],
[53,63,66,78,68,88,46,0,70],
[66,76,70,76,82,74,70,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,44,66,55,61,58,48,40],
[80,0,71,72,62,71,74,86,77],
[87,60,0,76,73,77,58,70,62],
[65,59,55,0,55,61,59,57,48],
[76,69,58,76,0,65,68,64,50],
[70,60,54,70,66,0,54,68,61],
[73,57,73,72,63,77,0,75,59],
[83,45,61,74,67,63,56,0,55],
[91,54,69,83,81,70,72,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,50,68,55,72,47,61,41],
[64,0,52,67,71,81,61,61,49],
[81,79,0,57,62,79,64,69,54],
[63,64,74,0,62,71,64,66,66],
[76,60,69,69,0,71,62,64,58],
[59,50,52,60,60,0,53,54,53],
[84,70,67,67,69,78,0,58,50],
[70,70,62,65,67,77,73,0,61],
[90,82,77,65,73,78,81,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,71,75,63,70,61,61,66],
[61,0,65,69,57,62,58,64,61],
[60,66,0,67,57,67,57,68,61],
[56,62,64,0,62,60,63,60,60],
[68,74,74,69,0,66,69,70,64],
[61,69,64,71,65,0,60,59,69],
[70,73,74,68,62,71,0,74,65],
[70,67,63,71,61,72,57,0,60],
[65,70,70,71,67,62,66,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,71,57,65,60,55,63,50],
[84,0,79,67,76,80,60,74,68],
[60,52,0,57,80,63,61,67,73],
[74,64,74,0,78,76,68,73,71],
[66,55,51,53,0,66,42,58,61],
[71,51,68,55,65,0,51,66,54],
[76,71,70,63,89,80,0,86,58],
[68,57,64,58,73,65,45,0,57],
[81,63,58,60,70,77,73,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,88,131,89,108,67,131,46],
[42,0,66,109,86,86,87,109,66],
[43,65,0,86,64,86,87,87,43],
[0,22,45,0,44,88,67,109,23],
[42,45,67,87,0,64,43,65,43],
[23,45,45,43,67,0,67,87,23],
[64,44,44,64,88,64,0,110,44],
[0,22,44,22,66,44,21,0,0],
[85,65,88,108,88,108,87,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,64,67,66,72,68,65,68],
[69,0,72,63,84,71,70,72,64],
[67,59,0,62,68,68,69,72,70],
[64,68,69,0,76,72,73,71,69],
[65,47,63,55,0,66,65,61,67],
[59,60,63,59,65,0,74,65,64],
[63,61,62,58,66,57,0,59,63],
[66,59,59,60,70,66,72,0,67],
[63,67,61,62,64,67,68,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,76,76,74,77,64,66,81],
[64,0,73,70,73,75,62,66,77],
[55,58,0,68,60,66,52,53,60],
[55,61,63,0,56,68,51,64,62],
[57,58,71,75,0,64,66,65,66],
[54,56,65,63,67,0,54,58,61],
[67,69,79,80,65,77,0,59,77],
[65,65,78,67,66,73,72,0,70],
[50,54,71,69,65,70,54,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,72,67,72,69,68,61,66],
[75,0,74,77,59,65,75,70,66],
[59,57,0,60,55,52,54,52,56],
[64,54,71,0,56,69,61,60,65],
[59,72,76,75,0,61,67,65,67],
[62,66,79,62,70,0,63,64,63],
[63,56,77,70,64,68,0,69,62],
[70,61,79,71,66,67,62,0,74],
[65,65,75,66,64,68,69,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,72,80,91,52,73,62,81],
[53,0,47,75,69,56,71,64,52],
[59,84,0,91,91,70,74,82,76],
[51,56,40,0,58,54,63,60,54],
[40,62,40,73,0,53,65,59,60],
[79,75,61,77,78,0,77,80,65],
[58,60,57,68,66,54,0,55,53],
[69,67,49,71,72,51,76,0,55],
[50,79,55,77,71,66,78,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,68,68,79,71,69,64],
[63,0,82,80,62,84,68,65,76],
[61,49,0,61,62,76,60,60,64],
[63,51,70,0,71,72,64,67,64],
[63,69,69,60,0,77,54,60,70],
[52,47,55,59,54,0,59,54,55],
[60,63,71,67,77,72,0,62,66],
[62,66,71,64,71,77,69,0,69],
[67,55,67,67,61,76,65,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,75,67,76,59,65,73,66],
[61,0,67,59,76,66,61,72,66],
[56,64,0,63,69,55,68,63,62],
[64,72,68,0,76,49,70,74,61],
[55,55,62,55,0,59,49,60,57],
[72,65,76,82,72,0,69,73,72],
[66,70,63,61,82,62,0,75,69],
[58,59,68,57,71,58,56,0,61],
[65,65,69,70,74,59,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,66,65,65,43,22,44,44],
[87,0,109,109,109,65,87,109,110],
[65,22,0,87,65,65,44,22,66],
[66,22,44,0,65,22,22,22,44],
[66,22,66,66,0,22,22,44,88],
[88,66,66,109,109,0,44,66,110],
[109,44,87,109,109,87,0,65,88],
[87,22,109,109,87,65,66,0,66],
[87,21,65,87,43,21,43,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,80,51,79,69,67,69,76],
[67,0,72,67,72,63,68,67,70],
[51,59,0,58,70,67,64,60,73],
[80,64,73,0,74,73,73,66,79],
[52,59,61,57,0,59,70,50,75],
[62,68,64,58,72,0,76,65,73],
[64,63,67,58,61,55,0,54,74],
[62,64,71,65,81,66,77,0,79],
[55,61,58,52,56,58,57,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,53,66,59,73,65,61,64],
[57,0,61,63,57,70,63,61,52],
[78,70,0,62,64,79,66,62,76],
[65,68,69,0,65,85,64,69,68],
[72,74,67,66,0,75,63,61,67],
[58,61,52,46,56,0,53,46,54],
[66,68,65,67,68,78,0,61,64],
[70,70,69,62,70,85,70,0,77],
[67,79,55,63,64,77,67,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,64,64,65,66,72,69],
[62,0,67,71,62,61,68,74,70],
[66,64,0,77,63,70,60,67,66],
[67,60,54,0,60,58,61,58,67],
[67,69,68,71,0,68,64,67,84],
[66,70,61,73,63,0,61,59,76],
[65,63,71,70,67,70,0,76,69],
[59,57,64,73,64,72,55,0,76],
[62,61,65,64,47,55,62,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,72,62,63,56,65,65,71],
[58,0,59,67,68,67,76,69,76],
[59,72,0,76,62,67,75,62,65],
[69,64,55,0,70,61,66,59,68],
[68,63,69,61,0,61,67,58,68],
[75,64,64,70,70,0,82,59,75],
[66,55,56,65,64,49,0,52,57],
[66,62,69,72,73,72,79,0,74],
[60,55,66,63,63,56,74,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,63,58,71,58,49,69,63],
[74,0,63,71,73,66,67,69,69],
[68,68,0,68,74,60,60,72,75],
[73,60,63,0,72,62,63,71,71],
[60,58,57,59,0,63,59,67,62],
[73,65,71,69,68,0,68,69,68],
[82,64,71,68,72,63,0,77,76],
[62,62,59,60,64,62,54,0,64],
[68,62,56,60,69,63,55,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,52,64,57,92,64,69,66],
[48,0,57,56,61,73,54,57,46],
[79,74,0,64,70,90,56,62,75],
[67,75,67,0,65,81,63,71,66],
[74,70,61,66,0,93,57,67,78],
[39,58,41,50,38,0,60,44,54],
[67,77,75,68,74,71,0,58,53],
[62,74,69,60,64,87,73,0,72],
[65,85,56,65,53,77,78,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,67,66,85,57,49,39,75],
[75,0,63,93,89,71,68,68,86],
[64,68,0,73,87,69,73,55,90],
[65,38,58,0,75,71,44,47,69],
[46,42,44,56,0,55,57,45,75],
[74,60,62,60,76,0,61,50,80],
[82,63,58,87,74,70,0,55,75],
[92,63,76,84,86,81,76,0,79],
[56,45,41,62,56,51,56,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,65,54,87,86,81,66,57],
[55,0,55,53,65,71,56,50,54],
[66,76,0,62,74,78,86,59,72],
[77,78,69,0,69,78,78,62,74],
[44,66,57,62,0,83,80,52,50],
[45,60,53,53,48,0,60,41,53],
[50,75,45,53,51,71,0,46,49],
[65,81,72,69,79,90,85,0,79],
[74,77,59,57,81,78,82,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,53,62,50,62,59,57,52],
[76,0,74,64,62,75,73,59,73],
[78,57,0,65,70,70,68,67,74],
[69,67,66,0,63,58,70,57,59],
[81,69,61,68,0,72,71,70,64],
[69,56,61,73,59,0,60,51,54],
[72,58,63,61,60,71,0,59,58],
[74,72,64,74,61,80,72,0,69],
[79,58,57,72,67,77,73,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,70,63,65,67,69,68,75],
[61,0,62,70,65,67,70,58,62],
[61,69,0,74,66,79,70,73,68],
[68,61,57,0,60,68,64,59,73],
[66,66,65,71,0,74,64,72,71],
[64,64,52,63,57,0,61,55,62],
[62,61,61,67,67,70,0,69,65],
[63,73,58,72,59,76,62,0,63],
[56,69,63,58,60,69,66,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,51,58,58,54,51,66,61],
[75,0,72,69,76,66,70,64,79],
[80,59,0,68,64,63,69,74,73],
[73,62,63,0,53,57,57,59,62],
[73,55,67,78,0,62,69,70,74],
[77,65,68,74,69,0,62,69,62],
[80,61,62,74,62,69,0,62,70],
[65,67,57,72,61,62,69,0,65],
[70,52,58,69,57,69,61,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,67,63,73,72,61,60,64],
[80,0,75,65,76,86,69,68,78],
[64,56,0,60,76,82,67,64,63],
[68,66,71,0,80,73,59,64,75],
[58,55,55,51,0,78,52,54,60],
[59,45,49,58,53,0,52,57,60],
[70,62,64,72,79,79,0,68,68],
[71,63,67,67,77,74,63,0,69],
[67,53,68,56,71,71,63,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,63,66,55,61,63,58,53],
[78,0,83,73,68,69,67,68,63],
[68,48,0,67,57,61,58,55,60],
[65,58,64,0,52,69,61,68,50],
[76,63,74,79,0,74,71,76,72],
[70,62,70,62,57,0,60,62,60],
[68,64,73,70,60,71,0,73,60],
[73,63,76,63,55,69,58,0,54],
[78,68,71,81,59,71,71,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,84,62,80,75,72,68,69],
[67,0,65,59,61,59,74,55,64],
[47,66,0,67,62,58,65,63,72],
[69,72,64,0,61,66,81,52,56],
[51,70,69,70,0,80,85,59,73],
[56,72,73,65,51,0,76,50,73],
[59,57,66,50,46,55,0,53,69],
[63,76,68,79,72,81,78,0,82],
[62,67,59,75,58,58,62,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,70,64,74,76,61,61,68],
[66,0,69,63,67,63,67,58,72],
[61,62,0,59,77,69,64,61,64],
[67,68,72,0,84,73,73,63,70],
[57,64,54,47,0,61,52,50,58],
[55,68,62,58,70,0,57,60,61],
[70,64,67,58,79,74,0,60,64],
[70,73,70,68,81,71,71,0,65],
[63,59,67,61,73,70,67,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,74,78,63,57,67,69,70],
[52,0,69,66,58,58,67,58,76],
[57,62,0,62,72,55,48,64,56],
[53,65,69,0,73,63,55,67,74],
[68,73,59,58,0,48,46,60,69],
[74,73,76,68,83,0,64,83,82],
[64,64,83,76,85,67,0,81,77],
[62,73,67,64,71,48,50,0,68],
[61,55,75,57,62,49,54,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,51,62,52,49,53,62,61],
[80,0,65,75,79,79,75,66,67],
[80,66,0,77,62,76,69,67,72],
[69,56,54,0,64,64,78,75,70],
[79,52,69,67,0,73,70,75,86],
[82,52,55,67,58,0,63,71,46],
[78,56,62,53,61,68,0,60,67],
[69,65,64,56,56,60,71,0,79],
[70,64,59,61,45,85,64,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,64,71,46,49,78,67,45],
[77,0,52,70,76,64,68,67,70],
[67,79,0,83,50,64,95,71,56],
[60,61,48,0,55,66,89,63,73],
[85,55,81,76,0,58,76,59,59],
[82,67,67,65,73,0,78,76,72],
[53,63,36,42,55,53,0,49,61],
[64,64,60,68,72,55,82,0,69],
[86,61,75,58,72,59,70,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,62,63,64,57,61,63,56],
[58,0,58,65,58,53,55,53,50],
[69,73,0,77,67,66,72,64,62],
[68,66,54,0,63,56,62,61,64],
[67,73,64,68,0,65,67,72,68],
[74,78,65,75,66,0,72,76,66],
[70,76,59,69,64,59,0,62,61],
[68,78,67,70,59,55,69,0,59],
[75,81,69,67,63,65,70,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,81,77,63,73,64,66,63],
[78,0,87,80,60,75,87,86,69],
[50,44,0,62,50,58,59,54,55],
[54,51,69,0,52,58,70,54,61],
[68,71,81,79,0,82,83,66,64],
[58,56,73,73,49,0,65,71,66],
[67,44,72,61,48,66,0,85,71],
[65,45,77,77,65,60,46,0,72],
[68,62,76,70,67,65,60,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,75,64,60,65,80,68,61],
[63,0,65,58,55,65,54,57,61],
[56,66,0,55,66,69,56,57,54],
[67,73,76,0,67,72,61,62,64],
[71,76,65,64,0,62,69,60,58],
[66,66,62,59,69,0,66,59,61],
[51,77,75,70,62,65,0,66,59],
[63,74,74,69,71,72,65,0,67],
[70,70,77,67,73,70,72,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,51,79,78,104,104,78,53],
[79,0,77,52,51,52,104,104,79],
[80,54,0,54,54,80,80,80,53],
[52,79,77,0,77,79,104,104,52],
[53,80,77,54,0,80,78,80,53],
[27,79,51,52,51,0,104,105,53],
[27,27,51,27,53,27,0,54,53],
[53,27,51,27,51,26,77,0,53],
[78,52,78,79,78,78,78,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,70,59,64,67,59,67,70],
[61,0,65,62,66,68,64,63,70],
[61,66,0,65,63,66,68,58,73],
[72,69,66,0,67,64,63,65,76],
[67,65,68,64,0,75,66,63,71],
[64,63,65,67,56,0,64,64,65],
[72,67,63,68,65,67,0,61,76],
[64,68,73,66,68,67,70,0,81],
[61,61,58,55,60,66,55,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,60,64,65,64,64,61,65],
[66,0,67,74,68,73,77,65,70],
[71,64,0,71,65,79,77,72,74],
[67,57,60,0,67,70,74,65,69],
[66,63,66,64,0,70,75,60,70],
[67,58,52,61,61,0,69,60,74],
[67,54,54,57,56,62,0,59,69],
[70,66,59,66,71,71,72,0,66],
[66,61,57,62,61,57,62,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,65,70,79,75,73,82,62],
[55,0,65,71,70,67,69,71,63],
[66,66,0,73,77,72,69,71,61],
[61,60,58,0,63,68,65,61,71],
[52,61,54,68,0,68,64,54,60],
[56,64,59,63,63,0,68,71,65],
[58,62,62,66,67,63,0,71,65],
[49,60,60,70,77,60,60,0,60],
[69,68,70,60,71,66,66,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,47,58,56,47,47,47,50],
[95,0,72,87,68,77,71,79,64],
[84,59,0,70,81,57,71,82,62],
[73,44,61,0,45,51,52,60,37],
[75,63,50,86,0,53,53,63,59],
[84,54,74,80,78,0,69,71,69],
[84,60,60,79,78,62,0,67,62],
[84,52,49,71,68,60,64,0,54],
[81,67,69,94,72,62,69,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,60,52,51,72,35,64,60],
[61,0,74,72,81,77,63,83,76],
[71,57,0,68,74,65,55,84,58],
[79,59,63,0,58,57,55,72,73],
[80,50,57,73,0,62,59,66,62],
[59,54,66,74,69,0,65,64,64],
[96,68,76,76,72,66,0,69,65],
[67,48,47,59,65,67,62,0,68],
[71,55,73,58,69,67,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,61,69,68,61,60,76,69],
[70,0,62,70,64,64,59,70,62],
[70,69,0,73,68,65,74,68,57],
[62,61,58,0,55,60,53,59,53],
[63,67,63,76,0,68,60,77,57],
[70,67,66,71,63,0,56,70,57],
[71,72,57,78,71,75,0,71,64],
[55,61,63,72,54,61,60,0,54],
[62,69,74,78,74,74,67,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,60,70,53,53,60,55,62],
[70,0,68,53,62,64,53,62,52],
[71,63,0,56,53,58,62,58,64],
[61,78,75,0,65,66,70,72,67],
[78,69,78,66,0,59,71,76,69],
[78,67,73,65,72,0,82,71,71],
[71,78,69,61,60,49,0,63,71],
[76,69,73,59,55,60,68,0,72],
[69,79,67,64,62,60,60,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,62,61,70,61,70,62,66],
[56,0,55,65,66,50,79,61,52],
[69,76,0,69,79,75,74,78,62],
[70,66,62,0,68,53,74,74,67],
[61,65,52,63,0,48,64,71,55],
[70,81,56,78,83,0,86,74,72],
[61,52,57,57,67,45,0,64,57],
[69,70,53,57,60,57,67,0,60],
[65,79,69,64,76,59,74,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,75,54,53,69,55,57,49],
[78,0,95,71,63,74,72,68,63],
[56,36,0,52,44,54,52,45,33],
[77,60,79,0,62,79,62,60,52],
[78,68,87,69,0,64,63,54,61],
[62,57,77,52,67,0,59,52,51],
[76,59,79,69,68,72,0,66,56],
[74,63,86,71,77,79,65,0,66],
[82,68,98,79,70,80,75,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,66,63,64,52,64,67,59],
[64,0,64,61,67,58,74,73,61],
[65,67,0,52,60,49,75,71,68],
[68,70,79,0,72,64,74,70,62],
[67,64,71,59,0,59,73,76,70],
[79,73,82,67,72,0,67,80,63],
[67,57,56,57,58,64,0,65,64],
[64,58,60,61,55,51,66,0,58],
[72,70,63,69,61,68,67,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,72,72,62,66,69,67,63],
[52,0,62,54,53,55,69,71,49],
[59,69,0,46,49,55,61,75,71],
[59,77,85,0,59,68,66,75,60],
[69,78,82,72,0,71,79,86,64],
[65,76,76,63,60,0,67,72,66],
[62,62,70,65,52,64,0,76,60],
[64,60,56,56,45,59,55,0,51],
[68,82,60,71,67,65,71,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,69,69,81,66,74,73,69],
[72,0,67,67,68,58,74,70,61],
[62,64,0,64,74,62,64,80,63],
[62,64,67,0,74,67,67,72,67],
[50,63,57,57,0,48,63,59,59],
[65,73,69,64,83,0,67,64,59],
[57,57,67,64,68,64,0,81,64],
[58,61,51,59,72,67,50,0,67],
[62,70,68,64,72,72,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,66,59,54,55,62,45,68],
[75,0,68,75,66,58,59,53,74],
[65,63,0,68,61,53,61,58,68],
[72,56,63,0,56,58,52,45,67],
[77,65,70,75,0,60,63,69,79],
[76,73,78,73,71,0,74,57,80],
[69,72,70,79,68,57,0,65,87],
[86,78,73,86,62,74,66,0,73],
[63,57,63,64,52,51,44,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,54,75,68,80,81,85,97],
[60,0,71,72,65,76,91,63,75],
[77,60,0,52,52,41,80,56,62],
[56,59,79,0,47,63,64,55,67],
[63,66,79,84,0,67,82,62,66],
[51,55,90,68,64,0,91,60,88],
[50,40,51,67,49,40,0,61,53],
[46,68,75,76,69,71,70,0,67],
[34,56,69,64,65,43,78,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,61,66,56,74,73,70,61],
[58,0,55,68,58,69,60,70,58],
[70,76,0,68,68,70,81,66,64],
[65,63,63,0,68,70,59,66,59],
[75,73,63,63,0,72,72,68,72],
[57,62,61,61,59,0,65,73,65],
[58,71,50,72,59,66,0,71,63],
[61,61,65,65,63,58,60,0,55],
[70,73,67,72,59,66,68,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,62,59,56,62,48,54,55],
[65,0,61,62,71,64,59,57,59],
[69,70,0,64,69,71,61,67,64],
[72,69,67,0,72,72,62,66,59],
[75,60,62,59,0,63,57,66,58],
[69,67,60,59,68,0,67,58,57],
[83,72,70,69,74,64,0,64,65],
[77,74,64,65,65,73,67,0,66],
[76,72,67,72,73,74,66,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,60,61,65,63,63,58,58],
[63,0,63,65,50,55,58,59,57],
[71,68,0,70,65,59,64,61,63],
[70,66,61,0,72,69,67,68,59],
[66,81,66,59,0,70,63,70,59],
[68,76,72,62,61,0,67,65,64],
[68,73,67,64,68,64,0,64,67],
[73,72,70,63,61,66,67,0,66],
[73,74,68,72,72,67,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,81,83,74,77,65,85,70],
[54,0,75,73,49,65,65,74,68],
[50,56,0,71,54,70,50,79,60],
[48,58,60,0,47,64,56,65,58],
[57,82,77,84,0,79,65,79,81],
[54,66,61,67,52,0,60,69,53],
[66,66,81,75,66,71,0,71,65],
[46,57,52,66,52,62,60,0,64],
[61,63,71,73,50,78,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,73,61,63,74,79,46,65],
[61,0,73,59,70,64,61,48,66],
[58,58,0,52,55,73,68,50,53],
[70,72,79,0,68,79,65,69,66],
[68,61,76,63,0,74,75,55,68],
[57,67,58,52,57,0,57,46,65],
[52,70,63,66,56,74,0,51,74],
[85,83,81,62,76,85,80,0,92],
[66,65,78,65,63,66,57,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,65,69,60,64,71,78,77],
[58,0,58,51,48,52,52,59,53],
[66,73,0,64,63,71,78,78,73],
[62,80,67,0,59,66,69,74,75],
[71,83,68,72,0,57,68,78,74],
[67,79,60,65,74,0,67,77,71],
[60,79,53,62,63,64,0,65,62],
[53,72,53,57,53,54,66,0,50],
[54,78,58,56,57,60,69,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,60,71,64,47,48,55,50],
[71,0,62,67,57,61,53,58,69],
[71,69,0,69,71,67,65,64,62],
[60,64,62,0,51,51,59,46,59],
[67,74,60,80,0,66,63,57,66],
[84,70,64,80,65,0,66,60,74],
[83,78,66,72,68,65,0,74,86],
[76,73,67,85,74,71,57,0,73],
[81,62,69,72,65,57,45,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,66,63,64,70,69,65,68],
[65,0,60,62,67,67,56,56,60],
[65,71,0,61,60,68,61,57,70],
[68,69,70,0,59,67,60,71,58],
[67,64,71,72,0,68,54,64,62],
[61,64,63,64,63,0,50,56,55],
[62,75,70,71,77,81,0,68,59],
[66,75,74,60,67,75,63,0,65],
[63,71,61,73,69,76,72,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,62,68,63,61,66,81],
[66,0,66,63,56,66,58,67,85],
[65,65,0,65,64,69,61,62,72],
[69,68,66,0,69,68,54,69,80],
[63,75,67,62,0,65,59,55,80],
[68,65,62,63,66,0,56,59,81],
[70,73,70,77,72,75,0,65,89],
[65,64,69,62,76,72,66,0,65],
[50,46,59,51,51,50,42,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,57,65,58,63,63,73,67],
[67,0,64,68,57,73,69,60,68],
[74,67,0,69,70,69,65,71,70],
[66,63,62,0,62,67,65,65,74],
[73,74,61,69,0,71,67,71,73],
[68,58,62,64,60,0,70,72,62],
[68,62,66,66,64,61,0,75,65],
[58,71,60,66,60,59,56,0,60],
[64,63,61,57,58,69,66,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,62,74,66,59,69,70,66],
[74,0,66,80,71,64,78,71,75],
[69,65,0,83,74,75,76,72,74],
[57,51,48,0,63,62,67,64,65],
[65,60,57,68,0,63,69,64,68],
[72,67,56,69,68,0,73,79,73],
[62,53,55,64,62,58,0,68,64],
[61,60,59,67,67,52,63,0,65],
[65,56,57,66,63,58,67,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,64,57,68,60,60,64,63],
[71,0,56,54,65,61,62,72,59],
[67,75,0,67,72,64,67,66,71],
[74,77,64,0,82,69,62,72,77],
[63,66,59,49,0,59,54,56,68],
[71,70,67,62,72,0,67,69,69],
[71,69,64,69,77,64,0,73,65],
[67,59,65,59,75,62,58,0,64],
[68,72,60,54,63,62,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,68,68,65,70,62,74,64],
[60,0,67,62,59,72,66,67,67],
[63,64,0,64,67,66,68,77,64],
[63,69,67,0,64,70,71,64,66],
[66,72,64,67,0,72,63,60,63],
[61,59,65,61,59,0,62,65,66],
[69,65,63,60,68,69,0,67,61],
[57,64,54,67,71,66,64,0,65],
[67,64,67,65,68,65,70,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,60,71,55,54,61,40,61],
[40,0,46,54,51,53,56,51,51],
[71,85,0,71,72,72,69,64,65],
[60,77,60,0,61,65,58,67,72],
[76,80,59,70,0,57,60,48,60],
[77,78,59,66,74,0,75,50,50],
[70,75,62,73,71,56,0,69,72],
[91,80,67,64,83,81,62,0,63],
[70,80,66,59,71,81,59,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,86,83,75,64,82,64,66],
[55,0,71,75,68,58,56,60,57],
[45,60,0,84,70,51,61,58,65],
[48,56,47,0,54,40,52,49,42],
[56,63,61,77,0,43,65,53,58],
[67,73,80,91,88,0,75,68,65],
[49,75,70,79,66,56,0,58,61],
[67,71,73,82,78,63,73,0,66],
[65,74,66,89,73,66,70,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,53,75,82,88,56,61,72],
[56,0,53,65,62,77,45,45,60],
[78,78,0,69,74,91,61,61,85],
[56,66,62,0,46,71,45,60,55],
[49,69,57,85,0,86,68,59,62],
[43,54,40,60,45,0,48,42,47],
[75,86,70,86,63,83,0,69,87],
[70,86,70,71,72,89,62,0,85],
[59,71,46,76,69,84,44,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,68,60,70,59,71,66,56],
[71,0,84,69,80,64,76,62,63],
[63,47,0,64,67,61,65,50,50],
[71,62,67,0,64,64,68,64,60],
[61,51,64,67,0,59,64,57,55],
[72,67,70,67,72,0,58,62,47],
[60,55,66,63,67,73,0,54,61],
[65,69,81,67,74,69,77,0,66],
[75,68,81,71,76,84,70,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,85,83,87,64,78,77,65],
[72,0,70,93,65,55,79,70,68],
[46,61,0,71,57,71,68,77,68],
[48,38,60,0,58,56,72,68,52],
[44,66,74,73,0,71,84,74,64],
[67,76,60,75,60,0,72,61,62],
[53,52,63,59,47,59,0,67,50],
[54,61,54,63,57,70,64,0,50],
[66,63,63,79,67,69,81,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,62,69,58,70,66,60,57],
[69,0,62,64,56,70,64,63,68],
[69,69,0,69,62,63,68,55,58],
[62,67,62,0,48,70,62,61,64],
[73,75,69,83,0,75,72,70,65],
[61,61,68,61,56,0,69,61,64],
[65,67,63,69,59,62,0,60,64],
[71,68,76,70,61,70,71,0,66],
[74,63,73,67,66,67,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,73,70,60,59,63,60,80],
[62,0,76,54,54,68,58,65,66],
[58,55,0,51,42,59,53,54,63],
[61,77,80,0,58,61,56,69,76],
[71,77,89,73,0,64,68,79,82],
[72,63,72,70,67,0,61,65,75],
[68,73,78,75,63,70,0,71,79],
[71,66,77,62,52,66,60,0,74],
[51,65,68,55,49,56,52,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,61,66,69,61,57,71,66],
[54,0,58,55,66,65,69,69,55],
[70,73,0,66,73,71,72,71,62],
[65,76,65,0,62,60,65,61,61],
[62,65,58,69,0,59,55,62,62],
[70,66,60,71,72,0,66,71,68],
[74,62,59,66,76,65,0,62,60],
[60,62,60,70,69,60,69,0,55],
[65,76,69,70,69,63,71,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,69,73,68,84,73,70,87],
[87,0,81,63,85,85,88,82,91],
[62,50,0,70,61,71,74,59,70],
[58,68,61,0,54,77,77,62,68],
[63,46,70,77,0,71,77,66,80],
[47,46,60,54,60,0,66,70,68],
[58,43,57,54,54,65,0,54,57],
[61,49,72,69,65,61,77,0,61],
[44,40,61,63,51,63,74,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,61,61,73,57,71,63,58],
[67,0,67,72,80,65,69,71,59],
[70,64,0,65,75,61,67,71,73],
[70,59,66,0,76,65,70,61,62],
[58,51,56,55,0,53,55,60,47],
[74,66,70,66,78,0,71,70,64],
[60,62,64,61,76,60,0,63,51],
[68,60,60,70,71,61,68,0,60],
[73,72,58,69,84,67,80,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,76,67,70,69,64,65,71],
[70,0,72,69,63,74,67,65,61],
[55,59,0,69,52,60,67,59,62],
[64,62,62,0,56,62,57,56,59],
[61,68,79,75,0,72,77,72,70],
[62,57,71,69,59,0,68,69,65],
[67,64,64,74,54,63,0,61,61],
[66,66,72,75,59,62,70,0,64],
[60,70,69,72,61,66,70,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,69,87,79,65,75,90,67],
[61,0,39,50,51,62,67,58,50],
[62,92,0,81,85,72,98,82,72],
[44,81,50,0,49,57,64,56,55],
[52,80,46,82,0,72,78,70,60],
[66,69,59,74,59,0,71,64,58],
[56,64,33,67,53,60,0,58,45],
[41,73,49,75,61,67,73,0,53],
[64,81,59,76,71,73,86,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,53,54,54,48,58,58,56],
[68,0,58,58,45,53,56,68,61],
[78,73,0,63,78,72,72,71,68],
[77,73,68,0,65,68,68,74,79],
[77,86,53,66,0,65,65,81,67],
[83,78,59,63,66,0,66,64,70],
[73,75,59,63,66,65,0,70,68],
[73,63,60,57,50,67,61,0,65],
[75,70,63,52,64,61,63,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,80,59,63,64,64,90,65],
[57,0,68,56,44,49,41,71,46],
[51,63,0,48,57,48,42,59,64],
[72,75,83,0,85,60,83,84,78],
[68,87,74,46,0,72,69,78,70],
[67,82,83,71,59,0,73,75,63],
[67,90,89,48,62,58,0,66,78],
[41,60,72,47,53,56,65,0,63],
[66,85,67,53,61,68,53,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,75,76,77,64,80,75,69],
[63,0,46,66,67,47,80,65,67],
[56,85,0,63,66,57,80,59,77],
[55,65,68,0,64,71,75,69,76],
[54,64,65,67,0,55,69,65,62],
[67,84,74,60,76,0,93,62,81],
[51,51,51,56,62,38,0,59,54],
[56,66,72,62,66,69,72,0,71],
[62,64,54,55,69,50,77,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,83,72,71,37,61,65,47],
[61,0,83,69,69,62,60,68,66],
[48,48,0,60,64,48,53,43,48],
[59,62,71,0,57,62,56,59,65],
[60,62,67,74,0,68,63,54,60],
[94,69,83,69,63,0,81,58,86],
[70,71,78,75,68,50,0,46,70],
[66,63,88,72,77,73,85,0,57],
[84,65,83,66,71,45,61,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,50,59,54,70,56,65,56],
[65,0,64,50,55,68,65,64,52],
[81,67,0,62,64,68,69,67,60],
[72,81,69,0,68,81,72,83,58],
[77,76,67,63,0,93,66,76,68],
[61,63,63,50,38,0,59,70,50],
[75,66,62,59,65,72,0,65,52],
[66,67,64,48,55,61,66,0,50],
[75,79,71,73,63,81,79,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,69,67,69,70,63,72,75],
[71,0,65,80,77,77,74,78,73],
[62,66,0,61,67,73,81,90,80],
[64,51,70,0,65,64,59,70,64],
[62,54,64,66,0,62,58,70,49],
[61,54,58,67,69,0,61,69,70],
[68,57,50,72,73,70,0,75,69],
[59,53,41,61,61,62,56,0,56],
[56,58,51,67,82,61,62,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,78,66,84,68,87,55,66],
[56,0,58,62,76,57,80,69,53],
[53,73,0,52,84,66,91,69,63],
[65,69,79,0,82,66,71,69,73],
[47,55,47,49,0,45,69,57,41],
[63,74,65,65,86,0,89,82,71],
[44,51,40,60,62,42,0,50,58],
[76,62,62,62,74,49,81,0,65],
[65,78,68,58,90,60,73,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,58,61,58,54,61,62,69],
[83,0,66,76,64,66,73,71,72],
[73,65,0,62,67,57,70,69,71],
[70,55,69,0,62,58,69,54,65],
[73,67,64,69,0,64,66,63,60],
[77,65,74,73,67,0,74,67,80],
[70,58,61,62,65,57,0,55,76],
[69,60,62,77,68,64,76,0,70],
[62,59,60,66,71,51,55,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,66,68,76,59,72,55,61],
[62,0,58,67,75,59,72,66,66],
[65,73,0,76,76,65,74,63,64],
[63,64,55,0,68,58,73,60,62],
[55,56,55,63,0,56,63,65,55],
[72,72,66,73,75,0,75,66,63],
[59,59,57,58,68,56,0,54,55],
[76,65,68,71,66,65,77,0,63],
[70,65,67,69,76,68,76,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,62,73,61,63,80,61,75],
[66,0,70,73,59,63,73,60,72],
[69,61,0,68,58,51,71,65,70],
[58,58,63,0,53,56,69,55,68],
[70,72,73,78,0,62,78,69,77],
[68,68,80,75,69,0,80,67,63],
[51,58,60,62,53,51,0,62,65],
[70,71,66,76,62,64,69,0,78],
[56,59,61,63,54,68,66,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,51,62,58,53,64,47,53],
[63,0,60,58,60,59,68,53,60],
[80,71,0,76,76,68,72,71,65],
[69,73,55,0,52,59,68,66,65],
[73,71,55,79,0,60,74,61,62],
[78,72,63,72,71,0,70,72,73],
[67,63,59,63,57,61,0,61,57],
[84,78,60,65,70,59,70,0,68],
[78,71,66,66,69,58,74,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,65,60,56,57,65,65,65],
[73,0,63,70,65,70,72,72,67],
[66,68,0,67,68,60,61,67,62],
[71,61,64,0,69,66,76,70,72],
[75,66,63,62,0,70,70,70,61],
[74,61,71,65,61,0,71,62,64],
[66,59,70,55,61,60,0,68,56],
[66,59,64,61,61,69,63,0,67],
[66,64,69,59,70,67,75,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,64,61,64,66,69,58,61],
[69,0,66,61,62,68,66,75,74],
[67,65,0,63,58,56,67,66,73],
[70,70,68,0,57,76,70,74,71],
[67,69,73,74,0,63,80,67,71],
[65,63,75,55,68,0,76,68,62],
[62,65,64,61,51,55,0,64,55],
[73,56,65,57,64,63,67,0,67],
[70,57,58,60,60,69,76,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,57,51,64,68,56,53,49],
[80,0,65,71,65,87,70,75,71],
[74,66,0,60,72,77,72,62,74],
[80,60,71,0,77,81,72,65,73],
[67,66,59,54,0,66,69,57,55],
[63,44,54,50,65,0,61,37,67],
[75,61,59,59,62,70,0,59,66],
[78,56,69,66,74,94,72,0,69],
[82,60,57,58,76,64,65,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,73,67,65,62,61,64,51],
[67,0,69,59,58,76,78,72,70],
[58,62,0,64,67,71,64,61,59],
[64,72,67,0,68,66,63,68,61],
[66,73,64,63,0,70,66,74,57],
[69,55,60,65,61,0,71,74,57],
[70,53,67,68,65,60,0,72,61],
[67,59,70,63,57,57,59,0,56],
[80,61,72,70,74,74,70,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,74,64,70,56,82,59,74],
[59,0,78,60,46,57,62,55,67],
[57,53,0,55,54,44,62,54,67],
[67,71,76,0,71,69,71,62,84],
[61,85,77,60,0,62,69,55,77],
[75,74,87,62,69,0,84,74,72],
[49,69,69,60,62,47,0,61,75],
[72,76,77,69,76,57,70,0,91],
[57,64,64,47,54,59,56,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,72,60,71,67,75,68,75],
[66,0,76,71,70,64,68,72,73],
[59,55,0,62,67,59,73,68,69],
[71,60,69,0,70,71,80,75,71],
[60,61,64,61,0,64,68,71,78],
[64,67,72,60,67,0,69,65,72],
[56,63,58,51,63,62,0,58,66],
[63,59,63,56,60,66,73,0,70],
[56,58,62,60,53,59,65,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,49,69,85,70,44,61,53],
[84,0,60,69,104,90,76,69,83],
[82,71,0,76,88,65,73,71,76],
[62,62,55,0,79,72,63,56,57],
[46,27,43,52,0,59,38,30,46],
[61,41,66,59,72,0,58,67,46],
[87,55,58,68,93,73,0,61,61],
[70,62,60,75,101,64,70,0,61],
[78,48,55,74,85,85,70,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,57,75,82,83,69,71,61],
[62,0,60,55,67,67,53,64,49],
[74,71,0,70,82,77,63,69,60],
[56,76,61,0,80,75,52,69,63],
[49,64,49,51,0,73,55,60,50],
[48,64,54,56,58,0,50,55,46],
[62,78,68,79,76,81,0,79,68],
[60,67,62,62,71,76,52,0,57],
[70,82,71,68,81,85,63,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,69,68,80,66,65,61,68],
[65,0,71,64,72,69,62,69,68],
[62,60,0,64,72,65,58,61,63],
[63,67,67,0,71,70,67,71,63],
[51,59,59,60,0,65,55,54,61],
[65,62,66,61,66,0,62,60,71],
[66,69,73,64,76,69,0,62,73],
[70,62,70,60,77,71,69,0,72],
[63,63,68,68,70,60,58,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,70,65,56,65,67,69,67],
[65,0,67,80,67,60,76,74,74],
[61,64,0,67,54,70,62,61,57],
[66,51,64,0,54,61,74,72,60],
[75,64,77,77,0,70,76,81,71],
[66,71,61,70,61,0,67,76,60],
[64,55,69,57,55,64,0,63,54],
[62,57,70,59,50,55,68,0,56],
[64,57,74,71,60,71,77,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,71,58,55,58,61,58,51],
[61,0,63,65,65,61,62,54,65],
[60,68,0,41,49,32,69,51,59],
[73,66,90,0,75,75,67,65,82],
[76,66,82,56,0,64,77,62,70],
[73,70,99,56,67,0,72,66,64],
[70,69,62,64,54,59,0,54,62],
[73,77,80,66,69,65,77,0,67],
[80,66,72,49,61,67,69,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,62,58,73,59,72,59,61],
[66,0,67,63,60,62,73,67,65],
[69,64,0,75,78,67,85,75,70],
[73,68,56,0,74,52,73,70,68],
[58,71,53,57,0,57,76,56,63],
[72,69,64,79,74,0,78,81,74],
[59,58,46,58,55,53,0,64,61],
[72,64,56,61,75,50,67,0,57],
[70,66,61,63,68,57,70,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,71,47,65,72,58,62,50],
[74,0,72,55,59,60,49,71,66],
[60,59,0,64,66,59,67,66,59],
[84,76,67,0,82,71,61,82,75],
[66,72,65,49,0,78,54,67,56],
[59,71,72,60,53,0,44,74,55],
[73,82,64,70,77,87,0,77,67],
[69,60,65,49,64,57,54,0,53],
[81,65,72,56,75,76,64,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,60,72,66,67,76,67,60],
[68,0,56,66,67,63,70,60,62],
[71,75,0,71,73,63,81,74,69],
[59,65,60,0,62,64,70,65,60],
[65,64,58,69,0,50,64,66,57],
[64,68,68,67,81,0,75,71,72],
[55,61,50,61,67,56,0,57,58],
[64,71,57,66,65,60,74,0,59],
[71,69,62,71,74,59,73,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,73,52,69,61,61,63],
[67,0,76,72,66,69,65,68,65],
[64,55,0,66,59,71,69,64,60],
[58,59,65,0,59,57,58,59,54],
[79,65,72,72,0,59,69,64,64],
[62,62,60,74,72,0,67,65,72],
[70,66,62,73,62,64,0,60,61],
[70,63,67,72,67,66,71,0,60],
[68,66,71,77,67,59,70,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,64,55,74,59,52,41,56],
[89,0,65,76,82,70,90,68,81],
[67,66,0,75,86,63,67,57,76],
[76,55,56,0,72,59,67,50,71],
[57,49,45,59,0,48,64,48,62],
[72,61,68,72,83,0,66,62,73],
[79,41,64,64,67,65,0,42,69],
[90,63,74,81,83,69,89,0,77],
[75,50,55,60,69,58,62,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,70,63,66,67,80,71,79],
[55,0,65,62,55,61,73,59,70],
[61,66,0,69,61,70,72,72,73],
[68,69,62,0,52,68,68,66,74],
[65,76,70,79,0,77,83,74,84],
[64,70,61,63,54,0,79,75,77],
[51,58,59,63,48,52,0,47,67],
[60,72,59,65,57,56,84,0,70],
[52,61,58,57,47,54,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,51,59,64,50,68,60,61],
[54,0,52,72,77,63,75,49,70],
[80,79,0,82,75,77,73,66,59],
[72,59,49,0,75,68,74,57,54],
[67,54,56,56,0,56,67,56,59],
[81,68,54,63,75,0,78,69,66],
[63,56,58,57,64,53,0,57,51],
[71,82,65,74,75,62,74,0,76],
[70,61,72,77,72,65,80,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,64,77,78,64,65,66,68],
[61,0,61,69,77,54,60,58,70],
[67,70,0,66,66,67,66,63,69],
[54,62,65,0,73,55,69,51,68],
[53,54,65,58,0,52,61,56,69],
[67,77,64,76,79,0,68,70,75],
[66,71,65,62,70,63,0,62,80],
[65,73,68,80,75,61,69,0,77],
[63,61,62,63,62,56,51,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,53,55,61,72,66,62,55],
[67,0,53,56,66,72,61,58,59],
[78,78,0,69,70,81,66,62,68],
[76,75,62,0,73,73,64,67,64],
[70,65,61,58,0,70,71,61,55],
[59,59,50,58,61,0,63,57,55],
[65,70,65,67,60,68,0,63,55],
[69,73,69,64,70,74,68,0,57],
[76,72,63,67,76,76,76,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,55,72,74,55,61,63,79],
[64,0,69,79,83,68,72,60,88],
[76,62,0,87,65,52,69,79,79],
[59,52,44,0,50,35,51,56,69],
[57,48,66,81,0,65,69,62,68],
[76,63,79,96,66,0,76,78,82],
[70,59,62,80,62,55,0,70,76],
[68,71,52,75,69,53,61,0,77],
[52,43,52,62,63,49,55,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,63,81,83,67,68,77,89],
[50,0,49,62,67,56,54,63,78],
[68,82,0,79,68,56,62,75,70],
[50,69,52,0,57,61,62,78,69],
[48,64,63,74,0,67,51,60,74],
[64,75,75,70,64,0,77,65,56],
[63,77,69,69,80,54,0,69,75],
[54,68,56,53,71,66,62,0,74],
[42,53,61,62,57,75,56,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,58,60,71,86,69,75,87],
[59,0,69,63,68,85,68,79,76],
[73,62,0,62,75,78,69,79,73],
[71,68,69,0,72,64,80,70,75],
[60,63,56,59,0,84,64,83,81],
[45,46,53,67,47,0,69,73,60],
[62,63,62,51,67,62,0,77,62],
[56,52,52,61,48,58,54,0,72],
[44,55,58,56,50,71,69,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,75,70,70,59,64,88,71],
[50,0,69,59,48,59,68,77,66],
[56,62,0,55,60,55,47,69,68],
[61,72,76,0,57,55,60,84,75],
[61,83,71,74,0,57,66,91,77],
[72,72,76,76,74,0,63,83,76],
[67,63,84,71,65,68,0,87,85],
[43,54,62,47,40,48,44,0,65],
[60,65,63,56,54,55,46,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,74,48,54,69,80,64,81],
[48,0,82,69,57,56,60,56,68],
[57,49,0,20,42,54,60,58,68],
[83,62,111,0,68,75,91,86,95],
[77,74,89,63,0,84,93,64,89],
[62,75,77,56,47,0,79,58,89],
[51,71,71,40,38,52,0,60,64],
[67,75,73,45,67,73,71,0,81],
[50,63,63,36,42,42,67,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,75,51,67,73,60,64,69],
[61,0,63,73,61,79,60,61,63],
[56,68,0,73,60,75,46,63,74],
[80,58,58,0,56,66,65,62,70],
[64,70,71,75,0,84,69,51,79],
[58,52,56,65,47,0,36,72,45],
[71,71,85,66,62,95,0,80,84],
[67,70,68,69,80,59,51,0,73],
[62,68,57,61,52,86,47,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,59,46,75,48,65,64,59],
[75,0,65,73,85,62,77,75,72],
[72,66,0,49,68,57,59,64,62],
[85,58,82,0,92,67,64,87,79],
[56,46,63,39,0,42,46,53,43],
[83,69,74,64,89,0,73,79,53],
[66,54,72,67,85,58,0,67,70],
[67,56,67,44,78,52,64,0,47],
[72,59,69,52,88,78,61,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,62,59,72,67,56,56,66],
[73,0,63,69,78,77,75,60,60],
[69,68,0,67,77,71,71,55,63],
[72,62,64,0,68,67,59,59,65],
[59,53,54,63,0,63,56,56,56],
[64,54,60,64,68,0,61,64,54],
[75,56,60,72,75,70,0,71,70],
[75,71,76,72,75,67,60,0,67],
[65,71,68,66,75,77,61,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,65,63,61,65,72,87,69],
[64,0,59,68,59,65,66,76,64],
[66,72,0,67,67,69,64,76,63],
[68,63,64,0,76,65,66,73,65],
[70,72,64,55,0,70,66,74,61],
[66,66,62,66,61,0,69,80,68],
[59,65,67,65,65,62,0,68,62],
[44,55,55,58,57,51,63,0,54],
[62,67,68,66,70,63,69,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,55,61,62,55,59,69,62],
[62,0,58,64,63,66,57,65,63],
[76,73,0,75,69,61,65,68,70],
[70,67,56,0,56,62,64,64,57],
[69,68,62,75,0,64,66,70,76],
[76,65,70,69,67,0,66,68,70],
[72,74,66,67,65,65,0,68,59],
[62,66,63,67,61,63,63,0,63],
[69,68,61,74,55,61,72,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,64,60,59,53,73,76,62],
[69,0,56,53,67,65,85,87,72],
[67,75,0,60,62,76,82,79,79],
[71,78,71,0,64,70,90,82,77],
[72,64,69,67,0,64,75,80,70],
[78,66,55,61,67,0,70,77,77],
[58,46,49,41,56,61,0,55,49],
[55,44,52,49,51,54,76,0,56],
[69,59,52,54,61,54,82,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,67,66,61,73,64,54,62],
[57,0,65,71,57,60,73,62,57],
[64,66,0,73,70,61,70,62,72],
[65,60,58,0,63,49,74,65,57],
[70,74,61,68,0,67,69,58,67],
[58,71,70,82,64,0,78,75,65],
[67,58,61,57,62,53,0,61,60],
[77,69,69,66,73,56,70,0,59],
[69,74,59,74,64,66,71,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,64,73,66,72,71,64,63],
[62,0,57,68,68,65,66,57,63],
[67,74,0,65,77,76,74,71,75],
[58,63,66,0,71,69,64,64,65],
[65,63,54,60,0,66,51,60,57],
[59,66,55,62,65,0,57,63,53],
[60,65,57,67,80,74,0,58,66],
[67,74,60,67,71,68,73,0,63],
[68,68,56,66,74,78,65,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,64,60,55,57,57,65,62],
[60,0,60,57,62,73,65,61,63],
[67,71,0,70,67,74,66,65,65],
[71,74,61,0,66,69,68,63,67],
[76,69,64,65,0,68,65,73,68],
[74,58,57,62,63,0,54,64,53],
[74,66,65,63,66,77,0,79,63],
[66,70,66,68,58,67,52,0,64],
[69,68,66,64,63,78,68,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,60,81,70,68,73,67],
[61,0,63,57,73,64,62,72,59],
[66,68,0,58,59,62,58,72,61],
[71,74,73,0,79,67,66,70,64],
[50,58,72,52,0,69,51,71,61],
[61,67,69,64,62,0,59,80,61],
[63,69,73,65,80,72,0,77,76],
[58,59,59,61,60,51,54,0,51],
[64,72,70,67,70,70,55,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,62,72,64,52,68,70,64],
[69,0,68,77,74,59,75,81,71],
[69,63,0,77,74,68,68,84,66],
[59,54,54,0,57,69,73,63,58],
[67,57,57,74,0,52,67,65,70],
[79,72,63,62,79,0,72,83,73],
[63,56,63,58,64,59,0,69,71],
[61,50,47,68,66,48,62,0,55],
[67,60,65,73,61,58,60,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,73,63,75,64,70,65,75],
[63,0,72,66,73,69,68,74,69],
[58,59,0,66,62,60,60,69,65],
[68,65,65,0,68,63,57,69,68],
[56,58,69,63,0,58,57,71,67],
[67,62,71,68,73,0,57,67,74],
[61,63,71,74,74,74,0,71,71],
[66,57,62,62,60,64,60,0,64],
[56,62,66,63,64,57,60,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,70,73,84,68,75,58,62],
[52,0,71,76,65,61,73,67,71],
[61,60,0,77,77,73,77,61,69],
[58,55,54,0,66,62,64,47,60],
[47,66,54,65,0,52,60,48,56],
[63,70,58,69,79,0,70,69,74],
[56,58,54,67,71,61,0,50,63],
[73,64,70,84,83,62,81,0,71],
[69,60,62,71,75,57,68,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,59,56,62,64,64,60,60],
[80,0,74,72,69,65,80,74,71],
[72,57,0,54,60,55,67,62,63],
[75,59,77,0,64,63,73,62,72],
[69,62,71,67,0,67,77,67,68],
[67,66,76,68,64,0,76,65,71],
[67,51,64,58,54,55,0,54,59],
[71,57,69,69,64,66,77,0,70],
[71,60,68,59,63,60,72,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,73,75,70,66,68,58,68],
[53,0,54,51,62,50,63,53,70],
[58,77,0,66,63,54,60,59,61],
[56,80,65,0,69,52,70,66,66],
[61,69,68,62,0,48,61,55,65],
[65,81,77,79,83,0,75,65,76],
[63,68,71,61,70,56,0,62,67],
[73,78,72,65,76,66,69,0,70],
[63,61,70,65,66,55,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,61,72,61,65,63,70,56],
[75,0,75,74,75,52,71,77,72],
[70,56,0,62,59,53,61,69,51],
[59,57,69,0,66,45,63,80,65],
[70,56,72,65,0,73,59,71,65],
[66,79,78,86,58,0,70,86,59],
[68,60,70,68,72,61,0,77,54],
[61,54,62,51,60,45,54,0,62],
[75,59,80,66,66,72,77,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,65,56,72,81,74,60,64],
[75,0,60,57,66,81,53,81,65],
[66,71,0,64,73,93,68,75,61],
[75,74,67,0,60,88,68,74,69],
[59,65,58,71,0,93,63,76,61],
[50,50,38,43,38,0,33,51,34],
[57,78,63,63,68,98,0,70,69],
[71,50,56,57,55,80,61,0,50],
[67,66,70,62,70,97,62,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,65,87,71,76,67,73,61],
[53,0,75,75,64,50,53,66,48],
[66,56,0,74,62,65,56,66,54],
[44,56,57,0,51,54,45,60,44],
[60,67,69,80,0,67,54,75,63],
[55,81,66,77,64,0,63,90,68],
[64,78,75,86,77,68,0,83,80],
[58,65,65,71,56,41,48,0,52],
[70,83,77,87,68,63,51,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,51,44,69,58,66,57,74],
[73,0,71,56,72,65,64,67,88],
[80,60,0,44,67,72,57,79,67],
[87,75,87,0,90,73,57,76,94],
[62,59,64,41,0,79,73,71,74],
[73,66,59,58,52,0,55,57,71],
[65,67,74,74,58,76,0,55,84],
[74,64,52,55,60,74,76,0,86],
[57,43,64,37,57,60,47,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,79,65,72,56,61,70,62],
[35,0,49,48,42,56,60,56,66],
[52,82,0,57,63,49,67,57,62],
[66,83,74,0,69,56,60,74,79],
[59,89,68,62,0,51,59,77,63],
[75,75,82,75,80,0,60,74,103],
[70,71,64,71,72,71,0,76,63],
[61,75,74,57,54,57,55,0,79],
[69,65,69,52,68,28,68,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,82,79,99,80,72,52,66],
[68,0,72,76,65,79,81,56,73],
[49,59,0,70,76,54,72,75,66],
[52,55,61,0,69,69,62,48,59],
[32,66,55,62,0,51,65,65,48],
[51,52,77,62,80,0,62,57,63],
[59,50,59,69,66,69,0,63,80],
[79,75,56,83,66,74,68,0,65],
[65,58,65,72,83,68,51,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,57,68,54,58,73,65,70],
[68,0,46,70,37,61,59,53,64],
[74,85,0,65,58,64,72,60,76],
[63,61,66,0,48,60,52,61,62],
[77,94,73,83,0,78,68,58,80],
[73,70,67,71,53,0,67,70,72],
[58,72,59,79,63,64,0,62,68],
[66,78,71,70,73,61,69,0,66],
[61,67,55,69,51,59,63,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,65,46,64,61,60,59,51],
[77,0,65,66,74,67,70,67,64],
[66,66,0,53,62,59,62,59,51],
[85,65,78,0,81,65,67,70,70],
[67,57,69,50,0,56,66,61,59],
[70,64,72,66,75,0,77,62,69],
[71,61,69,64,65,54,0,66,62],
[72,64,72,61,70,69,65,0,63],
[80,67,80,61,72,62,69,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,61,57,65,57,61,64,63],
[66,0,61,72,71,63,67,66,61],
[70,70,0,64,70,69,74,72,65],
[74,59,67,0,78,63,70,64,63],
[66,60,61,53,0,57,69,61,58],
[74,68,62,68,74,0,68,60,69],
[70,64,57,61,62,63,0,60,64],
[67,65,59,67,70,71,71,0,70],
[68,70,66,68,73,62,67,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,66,71,61,62,60,69,65],
[65,0,61,63,63,68,52,74,62],
[65,70,0,70,59,66,70,63,77],
[60,68,61,0,71,72,61,60,65],
[70,68,72,60,0,57,70,76,70],
[69,63,65,59,74,0,60,66,72],
[71,79,61,70,61,71,0,75,72],
[62,57,68,71,55,65,56,0,67],
[66,69,54,66,61,59,59,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,74,63,64,60,72,71,66],
[53,0,60,55,59,52,65,60,52],
[57,71,0,60,70,65,74,63,57],
[68,76,71,0,66,66,79,73,65],
[67,72,61,65,0,60,77,60,62],
[71,79,66,65,71,0,75,61,66],
[59,66,57,52,54,56,0,55,57],
[60,71,68,58,71,70,76,0,57],
[65,79,74,66,69,65,74,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,71,69,59,74,65,67,89],
[58,0,64,67,74,65,60,70,67],
[60,67,0,48,53,60,55,59,61],
[62,64,83,0,70,60,61,79,71],
[72,57,78,61,0,74,65,77,96],
[57,66,71,71,57,0,69,77,71],
[66,71,76,70,66,62,0,80,73],
[64,61,72,52,54,54,51,0,63],
[42,64,70,60,35,60,58,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,55,53,56,51,64,61,58],
[90,0,59,65,71,66,77,84,77],
[76,72,0,66,70,66,66,83,63],
[78,66,65,0,60,61,62,85,64],
[75,60,61,71,0,59,76,71,71],
[80,65,65,70,72,0,79,84,62],
[67,54,65,69,55,52,0,80,57],
[70,47,48,46,60,47,51,0,45],
[73,54,68,67,60,69,74,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,57,75,65,58,73,69],
[62,0,53,60,65,70,65,55,57],
[66,78,0,85,78,71,67,67,63],
[74,71,46,0,72,70,39,28,47],
[56,66,53,59,0,59,38,55,47],
[66,61,60,61,72,0,73,54,56],
[73,66,64,92,93,58,0,75,76],
[58,76,64,103,76,77,56,0,51],
[62,74,68,84,84,75,55,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,65,76,69,76,62,81,66],
[67,0,72,78,73,83,65,78,68],
[66,59,0,64,66,67,70,77,70],
[55,53,67,0,62,60,56,62,50],
[62,58,65,69,0,64,63,76,65],
[55,48,64,71,67,0,62,71,67],
[69,66,61,75,68,69,0,75,76],
[50,53,54,69,55,60,56,0,61],
[65,63,61,81,66,64,55,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,70,69,61,61,44,52,43],
[77,0,70,77,78,60,104,78,70],
[61,61,0,67,53,70,97,78,43],
[62,54,64,0,63,54,98,72,44],
[70,53,78,68,0,78,88,95,52],
[70,71,61,77,53,0,80,88,61],
[87,27,34,33,43,51,0,78,52],
[79,53,53,59,36,43,53,0,44],
[88,61,88,87,79,70,79,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,65,70,72,76,78,72,68],
[69,0,59,73,93,64,74,78,69],
[66,72,0,52,89,70,55,58,70],
[61,58,79,0,80,82,75,69,80],
[59,38,42,51,0,48,45,42,57],
[55,67,61,49,83,0,68,55,68],
[53,57,76,56,86,63,0,59,61],
[59,53,73,62,89,76,72,0,80],
[63,62,61,51,74,63,70,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,64,67,57,69,61,73,68],
[65,0,77,76,65,63,65,72,72],
[67,54,0,64,59,54,54,59,66],
[64,55,67,0,48,61,60,60,64],
[74,66,72,83,0,72,49,65,73],
[62,68,77,70,59,0,66,74,70],
[70,66,77,71,82,65,0,70,69],
[58,59,72,71,66,57,61,0,64],
[63,59,65,67,58,61,62,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,69,66,77,66,69,64,71],
[62,0,62,65,72,64,62,67,63],
[62,69,0,66,61,52,56,60,65],
[65,66,65,0,70,69,65,60,63],
[54,59,70,61,0,61,62,62,59],
[65,67,79,62,70,0,70,52,70],
[62,69,75,66,69,61,0,66,62],
[67,64,71,71,69,79,65,0,73],
[60,68,66,68,72,61,69,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,65,72,68,65,64,67,53],
[58,0,54,60,67,61,56,63,55],
[66,77,0,67,69,64,61,73,61],
[59,71,64,0,68,62,61,69,60],
[63,64,62,63,0,62,67,66,61],
[66,70,67,69,69,0,63,70,66],
[67,75,70,70,64,68,0,68,59],
[64,68,58,62,65,61,63,0,61],
[78,76,70,71,70,65,72,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,65,68,67,78,62,70,75],
[68,0,67,70,63,80,65,69,65],
[66,64,0,58,66,74,65,79,75],
[63,61,73,0,57,72,55,63,63],
[64,68,65,74,0,79,66,80,73],
[53,51,57,59,52,0,52,57,62],
[69,66,66,76,65,79,0,72,70],
[61,62,52,68,51,74,59,0,64],
[56,66,56,68,58,69,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,69,64,69,71,58,65,64],
[80,0,77,73,67,78,68,69,63],
[62,54,0,64,63,67,69,63,64],
[67,58,67,0,65,68,60,63,66],
[62,64,68,66,0,69,62,67,66],
[60,53,64,63,62,0,66,62,64],
[73,63,62,71,69,65,0,62,60],
[66,62,68,68,64,69,69,0,60],
[67,68,67,65,65,67,71,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,67,46,60,64,64,64,56],
[75,0,78,56,54,82,77,80,68],
[64,53,0,60,61,77,74,69,69],
[85,75,71,0,72,78,66,86,62],
[71,77,70,59,0,70,74,82,73],
[67,49,54,53,61,0,67,65,62],
[67,54,57,65,57,64,0,79,76],
[67,51,62,45,49,66,52,0,52],
[75,63,62,69,58,69,55,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,61,66,77,59,62,79,81],
[62,0,44,89,70,71,61,62,69],
[70,87,0,99,75,62,71,75,86],
[65,42,32,0,51,53,58,54,64],
[54,61,56,80,0,55,61,64,65],
[72,60,69,78,76,0,63,59,65],
[69,70,60,73,70,68,0,63,63],
[52,69,56,77,67,72,68,0,57],
[50,62,45,67,66,66,68,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,77,104,104,77,52,78,53],
[27,0,51,79,105,52,79,78,53],
[54,80,0,79,106,52,79,53,80],
[27,52,52,0,52,53,53,79,27],
[27,26,25,79,0,26,53,27,0],
[54,79,79,78,105,0,53,105,54],
[79,52,52,78,78,78,0,78,52],
[53,53,78,52,104,26,53,0,53],
[78,78,51,104,131,77,79,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,69,75,63,63,62,62,74],
[66,0,79,61,70,63,61,61,69],
[62,52,0,71,59,59,65,68,75],
[56,70,60,0,71,67,59,63,79],
[68,61,72,60,0,61,62,56,61],
[68,68,72,64,70,0,64,62,80],
[69,70,66,72,69,67,0,55,78],
[69,70,63,68,75,69,76,0,71],
[57,62,56,52,70,51,53,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,74,71,74,67,75,75,59],
[65,0,66,72,77,70,71,72,64],
[57,65,0,66,68,63,61,67,67],
[60,59,65,0,66,68,64,60,62],
[57,54,63,65,0,61,63,70,59],
[64,61,68,63,70,0,70,71,65],
[56,60,70,67,68,61,0,66,64],
[56,59,64,71,61,60,65,0,62],
[72,67,64,69,72,66,67,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,78,67,58,66,57,65,60],
[61,0,60,66,54,52,59,52,59],
[53,71,0,66,67,59,59,61,61],
[64,65,65,0,55,64,63,55,55],
[73,77,64,76,0,72,58,61,55],
[65,79,72,67,59,0,45,60,53],
[74,72,72,68,73,86,0,59,68],
[66,79,70,76,70,71,72,0,64],
[71,72,70,76,76,78,63,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,53,65,56,51,55,48,54],
[76,0,58,58,58,50,52,50,54],
[78,73,0,66,68,57,61,58,66],
[66,73,65,0,69,58,58,52,73],
[75,73,63,62,0,68,66,66,63],
[80,81,74,73,63,0,71,66,75],
[76,79,70,73,65,60,0,57,63],
[83,81,73,79,65,65,74,0,67],
[77,77,65,58,68,56,68,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,51,64,68,71,77,75,64],
[75,0,67,66,66,62,66,77,61],
[80,64,0,66,67,71,71,75,73],
[67,65,65,0,66,72,70,69,76],
[63,65,64,65,0,72,67,79,61],
[60,69,60,59,59,0,66,80,63],
[54,65,60,61,64,65,0,76,71],
[56,54,56,62,52,51,55,0,57],
[67,70,58,55,70,68,60,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,62,70,66,70,51,54],
[68,0,71,56,83,65,66,75,69],
[60,60,0,55,74,70,66,71,46],
[69,75,76,0,77,84,76,61,70],
[61,48,57,54,0,65,53,58,48],
[65,66,61,47,66,0,55,54,48],
[61,65,65,55,78,76,0,58,68],
[80,56,60,70,73,77,73,0,56],
[77,62,85,61,83,83,63,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,59,74,54,67,61,62,65],
[70,0,72,78,68,68,63,61,69],
[72,59,0,73,55,69,54,68,76],
[57,53,58,0,55,69,55,60,55],
[77,63,76,76,0,68,66,70,71],
[64,63,62,62,63,0,55,64,64],
[70,68,77,76,65,76,0,68,74],
[69,70,63,71,61,67,63,0,63],
[66,62,55,76,60,67,57,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,76,73,74,64,76,69,79],
[58,0,78,82,81,71,76,67,67],
[55,53,0,66,79,49,68,70,56],
[58,49,65,0,74,57,55,70,56],
[57,50,52,57,0,54,54,59,49],
[67,60,82,74,77,0,66,73,68],
[55,55,63,76,77,65,0,66,69],
[62,64,61,61,72,58,65,0,60],
[52,64,75,75,82,63,62,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,56,49,56,58,51,56,57],
[75,0,73,69,60,62,73,58,75],
[75,58,0,68,67,61,62,63,65],
[82,62,63,0,61,66,61,58,57],
[75,71,64,70,0,60,68,67,75],
[73,69,70,65,71,0,66,64,63],
[80,58,69,70,63,65,0,66,66],
[75,73,68,73,64,67,65,0,64],
[74,56,66,74,56,68,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,55,43,56,57,58,53,51],
[56,0,55,44,49,52,48,59,41],
[76,76,0,43,53,54,63,56,62],
[88,87,88,0,70,65,74,73,66],
[75,82,78,61,0,67,71,72,64],
[74,79,77,66,64,0,66,83,68],
[73,83,68,57,60,65,0,75,51],
[78,72,75,58,59,48,56,0,59],
[80,90,69,65,67,63,80,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,78,71,75,65,66,67,63],
[57,0,67,65,71,57,60,56,59],
[53,64,0,63,69,55,56,54,58],
[60,66,68,0,68,59,64,57,59],
[56,60,62,63,0,61,56,58,59],
[66,74,76,72,70,0,64,61,68],
[65,71,75,67,75,67,0,67,70],
[64,75,77,74,73,70,64,0,67],
[68,72,73,72,72,63,61,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,66,65,71,95,75,64,75],
[70,0,74,68,54,69,68,63,78],
[65,57,0,67,45,84,64,48,60],
[66,63,64,0,56,85,77,49,73],
[60,77,86,75,0,80,75,69,68],
[36,62,47,46,51,0,55,48,50],
[56,63,67,54,56,76,0,67,65],
[67,68,83,82,62,83,64,0,75],
[56,53,71,58,63,81,66,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,66,79,62,70,74,75,63],
[64,0,65,77,63,75,77,69,76],
[65,66,0,80,60,67,71,64,72],
[52,54,51,0,50,56,64,56,60],
[69,68,71,81,0,63,70,75,70],
[61,56,64,75,68,0,67,62,63],
[57,54,60,67,61,64,0,61,56],
[56,62,67,75,56,69,70,0,57],
[68,55,59,71,61,68,75,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,72,66,64,74,79,57,67],
[62,0,66,71,65,78,71,66,71],
[59,65,0,60,64,78,73,52,61],
[65,60,71,0,58,68,68,56,65],
[67,66,67,73,0,74,69,57,68],
[57,53,53,63,57,0,63,55,58],
[52,60,58,63,62,68,0,63,68],
[74,65,79,75,74,76,68,0,71],
[64,60,70,66,63,73,63,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,76,78,60,70,66,72,65],
[70,0,67,79,65,75,72,73,67],
[55,64,0,75,61,68,64,64,69],
[53,52,56,0,54,58,54,63,58],
[71,66,70,77,0,64,69,72,68],
[61,56,63,73,67,0,60,61,61],
[65,59,67,77,62,71,0,66,72],
[59,58,67,68,59,70,65,0,62],
[66,64,62,73,63,70,59,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,83,62,84,51,73,61,63],
[80,0,92,92,92,53,82,71,72],
[48,39,0,51,72,70,62,60,61],
[69,39,80,0,80,70,49,90,49],
[47,39,59,51,0,49,50,69,58],
[80,78,61,61,82,0,80,90,62],
[58,49,69,82,81,51,0,80,71],
[70,60,71,41,62,41,51,0,41],
[68,59,70,82,73,69,60,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,52,78,78,91,77,65,78],
[41,0,40,53,52,66,66,40,53],
[79,91,0,78,38,91,78,52,91],
[53,78,53,0,51,104,91,78,104],
[53,79,93,80,0,91,79,66,80],
[40,65,40,27,40,0,79,67,65],
[54,65,53,40,52,52,0,54,79],
[66,91,79,53,65,64,77,0,78],
[53,78,40,27,51,66,52,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,47,80,113,81,79,100,115],
[46,0,46,63,79,48,46,63,63],
[84,85,0,84,116,99,49,68,116],
[51,68,47,0,98,83,49,85,115],
[18,52,15,33,0,18,15,18,33],
[50,83,32,48,113,0,48,100,84],
[52,85,82,82,116,83,0,85,99],
[31,68,63,46,113,31,46,0,80],
[16,68,15,16,98,47,32,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,57,48,57,55,65,60,58],
[71,0,65,57,72,59,69,61,67],
[74,66,0,66,69,58,70,62,71],
[83,74,65,0,69,68,79,63,76],
[74,59,62,62,0,52,79,65,64],
[76,72,73,63,79,0,86,68,86],
[66,62,61,52,52,45,0,60,68],
[71,70,69,68,66,63,71,0,74],
[73,64,60,55,67,45,63,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,64,62,51,63,64,52,53],
[72,0,60,68,55,66,70,68,61],
[67,71,0,68,64,72,62,63,67],
[69,63,63,0,61,70,66,60,55],
[80,76,67,70,0,64,75,66,61],
[68,65,59,61,67,0,72,63,61],
[67,61,69,65,56,59,0,65,49],
[79,63,68,71,65,68,66,0,62],
[78,70,64,76,70,70,82,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,82,89,74,65,47,62,66],
[46,0,58,74,41,38,27,48,44],
[49,73,0,76,72,47,45,57,69],
[42,57,55,0,54,45,52,48,46],
[57,90,59,77,0,45,59,81,45],
[66,93,84,86,86,0,56,89,70],
[84,104,86,79,72,75,0,68,63],
[69,83,74,83,50,42,63,0,64],
[65,87,62,85,86,61,68,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,74,67,69,59,67,68,71],
[57,0,63,64,63,49,51,63,52],
[57,68,0,74,60,58,69,66,56],
[64,67,57,0,68,55,64,62,63],
[62,68,71,63,0,68,68,69,66],
[72,82,73,76,63,0,69,78,72],
[64,80,62,67,63,62,0,71,71],
[63,68,65,69,62,53,60,0,65],
[60,79,75,68,65,59,60,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,71,58,71,63,56,82,71],
[67,0,84,77,68,62,66,73,78],
[60,47,0,62,54,56,53,65,66],
[73,54,69,0,64,62,57,64,78],
[60,63,77,67,0,61,61,71,77],
[68,69,75,69,70,0,59,83,75],
[75,65,78,74,70,72,0,82,70],
[49,58,66,67,60,48,49,0,64],
[60,53,65,53,54,56,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,71,67,65,66,66,67,51],
[70,0,67,72,58,79,69,68,62],
[60,64,0,71,66,69,70,60,61],
[64,59,60,0,57,58,67,66,63],
[66,73,65,74,0,74,70,73,69],
[65,52,62,73,57,0,69,65,57],
[65,62,61,64,61,62,0,62,57],
[64,63,71,65,58,66,69,0,60],
[80,69,70,68,62,74,74,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,58,72,68,68,64,65],
[63,0,62,54,67,70,74,74,65],
[61,69,0,58,75,69,61,64,64],
[73,77,73,0,69,68,66,60,66],
[59,64,56,62,0,67,70,62,65],
[63,61,62,63,64,0,71,59,62],
[63,57,70,65,61,60,0,57,55],
[67,57,67,71,69,72,74,0,68],
[66,66,67,65,66,69,76,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,62,59,62,55,63,67,58],
[72,0,64,69,69,61,63,65,68],
[69,67,0,60,63,67,65,68,57],
[72,62,71,0,68,74,71,74,67],
[69,62,68,63,0,60,63,65,69],
[76,70,64,57,71,0,67,73,74],
[68,68,66,60,68,64,0,62,68],
[64,66,63,57,66,58,69,0,60],
[73,63,74,64,62,57,63,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,69,70,66,65,75,72,66],
[63,0,65,59,69,77,85,70,76],
[62,66,0,64,58,73,72,67,69],
[61,72,67,0,74,67,75,70,69],
[65,62,73,57,0,68,81,69,71],
[66,54,58,64,63,0,72,65,63],
[56,46,59,56,50,59,0,65,56],
[59,61,64,61,62,66,66,0,68],
[65,55,62,62,60,68,75,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,79,71,70,64,70,72,68],
[65,0,64,64,64,73,55,72,55],
[52,67,0,63,58,63,54,62,66],
[60,67,68,0,68,63,75,69,62],
[61,67,73,63,0,72,65,66,72],
[67,58,68,68,59,0,63,71,66],
[61,76,77,56,66,68,0,68,69],
[59,59,69,62,65,60,63,0,59],
[63,76,65,69,59,65,62,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,77,60,64,67,67,72],
[61,0,71,74,51,64,70,59,67],
[65,60,0,75,57,62,72,68,70],
[54,57,56,0,50,59,55,52,51],
[71,80,74,81,0,68,71,64,70],
[67,67,69,72,63,0,74,63,70],
[64,61,59,76,60,57,0,61,74],
[64,72,63,79,67,68,70,0,71],
[59,64,61,80,61,61,57,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,59,61,61,67,67,60,67],
[67,0,68,61,61,67,63,75,64],
[72,63,0,54,66,64,61,60,69],
[70,70,77,0,68,62,72,64,67],
[70,70,65,63,0,66,71,69,67],
[64,64,67,69,65,0,65,69,72],
[64,68,70,59,60,66,0,66,66],
[71,56,71,67,62,62,65,0,71],
[64,67,62,64,64,59,65,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,66,78,71,79,72,63,68],
[63,0,60,74,72,72,79,74,70],
[65,71,0,75,76,81,80,60,70],
[53,57,56,0,50,71,72,60,58],
[60,59,55,81,0,82,62,63,59],
[52,59,50,60,49,0,57,57,57],
[59,52,51,59,69,74,0,59,71],
[68,57,71,71,68,74,72,0,69],
[63,61,61,73,72,74,60,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,66,77,60,65,77,91,57],
[55,0,58,55,57,61,61,61,73],
[65,73,0,63,66,66,64,74,63],
[54,76,68,0,69,71,70,94,66],
[71,74,65,62,0,68,77,85,65],
[66,70,65,60,63,0,81,80,74],
[54,70,67,61,54,50,0,72,68],
[40,70,57,37,46,51,59,0,56],
[74,58,68,65,66,57,63,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,59,68,69,65,69,60,73],
[64,0,66,73,60,74,68,65,69],
[72,65,0,67,69,71,68,75,70],
[63,58,64,0,60,65,65,63,70],
[62,71,62,71,0,71,68,65,72],
[66,57,60,66,60,0,67,74,73],
[62,63,63,66,63,64,0,64,64],
[71,66,56,68,66,57,67,0,68],
[58,62,61,61,59,58,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,70,77,78,68,74,65,66],
[56,0,65,68,68,73,78,61,66],
[61,66,0,73,68,68,82,67,74],
[54,63,58,0,56,63,65,63,55],
[53,63,63,75,0,68,70,57,63],
[63,58,63,68,63,0,72,62,69],
[57,53,49,66,61,59,0,55,60],
[66,70,64,68,74,69,76,0,66],
[65,65,57,76,68,62,71,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,64,56,76,71,78,67,71],
[68,0,72,63,85,81,63,70,68],
[67,59,0,56,61,62,40,80,57],
[75,68,75,0,98,81,61,74,63],
[55,46,70,33,0,64,60,55,56],
[60,50,69,50,67,0,57,56,53],
[53,68,91,70,71,74,0,76,78],
[64,61,51,57,76,75,55,0,56],
[60,63,74,68,75,78,53,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,57,76,66,71,61,55,66],
[68,0,69,76,61,73,60,59,66],
[74,62,0,70,59,62,66,70,66],
[55,55,61,0,62,78,60,54,61],
[65,70,72,69,0,70,58,67,69],
[60,58,69,53,61,0,63,58,66],
[70,71,65,71,73,68,0,67,79],
[76,72,61,77,64,73,64,0,69],
[65,65,65,70,62,65,52,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,65,40,57,61,72,43,38],
[64,0,67,27,69,58,53,50,56],
[66,64,0,56,66,57,66,53,55],
[91,104,75,0,77,70,72,65,77],
[74,62,65,54,0,56,55,66,55],
[70,73,74,61,75,0,64,74,61],
[59,78,65,59,76,67,0,66,55],
[88,81,78,66,65,57,65,0,62],
[93,75,76,54,76,70,76,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,58,69,68,62,62,66,61],
[65,0,65,74,75,66,67,72,64],
[73,66,0,71,72,65,64,71,71],
[62,57,60,0,57,61,58,67,63],
[63,56,59,74,0,62,63,63,67],
[69,65,66,70,69,0,68,74,71],
[69,64,67,73,68,63,0,63,64],
[65,59,60,64,68,57,68,0,58],
[70,67,60,68,64,60,67,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,51,62,53,53,55,60,67],
[73,0,53,60,52,66,63,57,59],
[80,78,0,68,65,66,71,69,67],
[69,71,63,0,67,50,66,54,65],
[78,79,66,64,0,58,76,74,65],
[78,65,65,81,73,0,69,59,70],
[76,68,60,65,55,62,0,65,68],
[71,74,62,77,57,72,66,0,65],
[64,72,64,66,66,61,63,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,75,66,68,66,74,61,68],
[71,0,66,60,65,65,75,61,71],
[56,65,0,59,59,68,63,64,68],
[65,71,72,0,64,66,78,64,70],
[63,66,72,67,0,60,65,64,71],
[65,66,63,65,71,0,70,67,76],
[57,56,68,53,66,61,0,60,66],
[70,70,67,67,67,64,71,0,73],
[63,60,63,61,60,55,65,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,55,71,68,73,63,55,68],
[57,0,53,46,57,61,70,55,65],
[76,78,0,65,72,69,74,64,78],
[60,85,66,0,57,70,66,71,71],
[63,74,59,74,0,66,67,64,70],
[58,70,62,61,65,0,65,54,69],
[68,61,57,65,64,66,0,57,65],
[76,76,67,60,67,77,74,0,83],
[63,66,53,60,61,62,66,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,58,58,55,55,61,63,62],
[54,0,59,54,58,54,54,60,48],
[73,72,0,65,63,66,68,68,58],
[73,77,66,0,67,70,60,64,74],
[76,73,68,64,0,66,67,64,73],
[76,77,65,61,65,0,68,70,69],
[70,77,63,71,64,63,0,70,62],
[68,71,63,67,67,61,61,0,62],
[69,83,73,57,58,62,69,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,63,63,57,70,65,67,63],
[83,0,68,64,67,82,77,78,82],
[68,63,0,63,63,72,71,78,69],
[68,67,68,0,62,74,74,77,75],
[74,64,68,69,0,76,74,76,76],
[61,49,59,57,55,0,67,68,69],
[66,54,60,57,57,64,0,63,61],
[64,53,53,54,55,63,68,0,62],
[68,49,62,56,55,62,70,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,61,60,74,58,71,63,62],
[66,0,67,68,61,62,84,72,59],
[70,64,0,71,59,66,75,63,69],
[71,63,60,0,56,55,71,61,57],
[57,70,72,75,0,66,83,77,68],
[73,69,65,76,65,0,71,74,61],
[60,47,56,60,48,60,0,57,52],
[68,59,68,70,54,57,74,0,59],
[69,72,62,74,63,70,79,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,54,59,69,66,70,66,63],
[74,0,66,68,85,76,79,61,76],
[77,65,0,73,73,71,71,65,71],
[72,63,58,0,69,73,75,66,67],
[62,46,58,62,0,62,61,57,63],
[65,55,60,58,69,0,66,57,70],
[61,52,60,56,70,65,0,61,69],
[65,70,66,65,74,74,70,0,70],
[68,55,60,64,68,61,62,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,55,48,50,60,42,72,69],
[61,0,71,63,51,73,44,66,72],
[76,60,0,68,55,82,61,54,84],
[83,68,63,0,73,66,57,71,62],
[81,80,76,58,0,76,46,72,66],
[71,58,49,65,55,0,45,67,49],
[89,87,70,74,85,86,0,85,65],
[59,65,77,60,59,64,46,0,65],
[62,59,47,69,65,82,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,71,66,74,79,56,76,56],
[56,0,77,55,75,62,72,56,64],
[60,54,0,64,61,67,67,72,55],
[65,76,67,0,83,54,65,87,70],
[57,56,70,48,0,60,47,59,55],
[52,69,64,77,71,0,62,61,47],
[75,59,64,66,84,69,0,69,49],
[55,75,59,44,72,70,62,0,61],
[75,67,76,61,76,84,82,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,59,61,49,74,85,74,81],
[59,0,22,57,45,45,48,37,70],
[72,109,0,82,72,60,62,61,59],
[70,74,49,0,61,45,60,13,46],
[82,86,59,70,0,68,72,36,82],
[57,86,71,86,63,0,62,60,106],
[46,83,69,71,59,69,0,71,82],
[57,94,70,118,95,71,60,0,83],
[50,61,72,85,49,25,49,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,53,50,61,65,78,69,62],
[59,0,61,57,58,67,72,64,49],
[78,70,0,69,64,71,77,83,70],
[81,74,62,0,69,69,83,68,65],
[70,73,67,62,0,64,71,71,56],
[66,64,60,62,67,0,66,72,49],
[53,59,54,48,60,65,0,63,61],
[62,67,48,63,60,59,68,0,61],
[69,82,61,66,75,82,70,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,82,61,66,66,71,64,59],
[80,0,78,54,67,72,65,73,69],
[49,53,0,57,52,61,64,51,58],
[70,77,74,0,67,71,61,72,74],
[65,64,79,64,0,78,70,73,74],
[65,59,70,60,53,0,67,58,63],
[60,66,67,70,61,64,0,56,69],
[67,58,80,59,58,73,75,0,60],
[72,62,73,57,57,68,62,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,64,69,66,60,64,68,52],
[80,0,76,62,67,54,68,74,67],
[67,55,0,63,63,47,59,57,59],
[62,69,68,0,70,66,66,65,62],
[65,64,68,61,0,54,66,68,65],
[71,77,84,65,77,0,73,70,76],
[67,63,72,65,65,58,0,68,64],
[63,57,74,66,63,61,63,0,57],
[79,64,72,69,66,55,67,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,45,0,0,43,0,0,43],
[131,0,45,88,43,88,88,88,88],
[86,86,0,43,86,43,43,43,43],
[131,43,88,0,86,88,131,88,88],
[131,88,45,45,0,88,88,88,88],
[88,43,88,43,43,0,43,43,43],
[131,43,88,0,43,88,0,88,43],
[131,43,88,43,43,88,43,0,43],
[88,43,88,43,43,88,88,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,59,72,61,61,66,61,60],
[73,0,66,67,72,78,61,75,79],
[72,65,0,65,63,68,58,66,69],
[59,64,66,0,65,64,64,60,73],
[70,59,68,66,0,81,60,65,71],
[70,53,63,67,50,0,60,61,65],
[65,70,73,67,71,71,0,70,76],
[70,56,65,71,66,70,61,0,63],
[71,52,62,58,60,66,55,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,61,78,62,72,64,69,69],
[54,0,53,68,53,63,61,57,62],
[70,78,0,74,73,71,65,77,67],
[53,63,57,0,63,70,67,68,72],
[69,78,58,68,0,75,75,65,70],
[59,68,60,61,56,0,61,62,59],
[67,70,66,64,56,70,0,62,69],
[62,74,54,63,66,69,69,0,72],
[62,69,64,59,61,72,62,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,105,61,76,74,58,60,73],
[57,0,73,44,44,42,44,29,44],
[26,58,0,42,31,43,27,13,43],
[70,87,89,0,31,45,41,58,44],
[55,87,100,100,0,72,68,55,71],
[57,89,88,86,59,0,58,57,76],
[73,87,104,90,63,73,0,73,73],
[71,102,118,73,76,74,58,0,60],
[58,87,88,87,60,55,58,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,57,54,71,68,63,77],
[72,0,66,72,65,72,68,77,79],
[66,65,0,72,56,77,67,65,76],
[74,59,59,0,56,70,70,74,78],
[77,66,75,75,0,65,71,72,78],
[60,59,54,61,66,0,59,68,78],
[63,63,64,61,60,72,0,70,70],
[68,54,66,57,59,63,61,0,72],
[54,52,55,53,53,53,61,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,52,61,60,66,54,58,56],
[73,0,69,64,68,74,71,66,67],
[79,62,0,72,76,72,66,75,68],
[70,67,59,0,66,74,63,72,63],
[71,63,55,65,0,66,62,68,69],
[65,57,59,57,65,0,60,62,55],
[77,60,65,68,69,71,0,63,68],
[73,65,56,59,63,69,68,0,72],
[75,64,63,68,62,76,63,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,64,63,62,76,59,65,57],
[53,0,60,51,53,75,62,59,58],
[67,71,0,65,59,77,62,78,62],
[68,80,66,0,74,75,65,71,71],
[69,78,72,57,0,75,67,74,74],
[55,56,54,56,56,0,56,62,49],
[72,69,69,66,64,75,0,72,67],
[66,72,53,60,57,69,59,0,57],
[74,73,69,60,57,82,64,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,70,78,70,70,66,64,68],
[54,0,61,66,68,69,68,59,68],
[61,70,0,70,72,60,54,49,72],
[53,65,61,0,54,68,56,52,58],
[61,63,59,77,0,62,55,50,70],
[61,62,71,63,69,0,59,55,70],
[65,63,77,75,76,72,0,68,68],
[67,72,82,79,81,76,63,0,75],
[63,63,59,73,61,61,63,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,80,64,78,78,72,72,77],
[53,0,64,60,70,66,52,71,64],
[51,67,0,55,62,61,48,64,70],
[67,71,76,0,72,69,63,60,68],
[53,61,69,59,0,56,61,65,69],
[53,65,70,62,75,0,54,61,63],
[59,79,83,68,70,77,0,74,80],
[59,60,67,71,66,70,57,0,59],
[54,67,61,63,62,68,51,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,60,53,65,56,70,61,58],
[73,0,72,70,70,67,62,72,65],
[71,59,0,79,71,60,73,64,70],
[78,61,52,0,58,69,66,59,68],
[66,61,60,73,0,65,71,64,65],
[75,64,71,62,66,0,69,77,71],
[61,69,58,65,60,62,0,75,60],
[70,59,67,72,67,54,56,0,68],
[73,66,61,63,66,60,71,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,65,61,76,67,64,61,67],
[52,0,65,59,58,54,50,53,52],
[66,66,0,60,66,52,65,53,59],
[70,72,71,0,71,75,63,61,58],
[55,73,65,60,0,65,61,58,53],
[64,77,79,56,66,0,65,57,60],
[67,81,66,68,70,66,0,68,61],
[70,78,78,70,73,74,63,0,66],
[64,79,72,73,78,71,70,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,58,56,55,64,54,63,50],
[82,0,63,66,63,77,49,69,59],
[73,68,0,69,61,72,55,74,68],
[75,65,62,0,58,63,49,63,62],
[76,68,70,73,0,65,66,74,64],
[67,54,59,68,66,0,56,71,59],
[77,82,76,82,65,75,0,78,75],
[68,62,57,68,57,60,53,0,62],
[81,72,63,69,67,72,56,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,69,60,52,67,61,62,74],
[73,0,69,61,52,57,61,67,75],
[62,62,0,60,55,54,69,71,50],
[71,70,71,0,61,62,68,77,62],
[79,79,76,70,0,68,82,85,60],
[64,74,77,69,63,0,71,69,59],
[70,70,62,63,49,60,0,64,62],
[69,64,60,54,46,62,67,0,54],
[57,56,81,69,71,72,69,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,73,83,83,55,85,62,74],
[40,0,40,47,58,38,68,47,58],
[58,91,0,74,83,84,67,93,75],
[48,84,57,0,65,75,85,92,48],
[48,73,48,66,0,74,66,74,67],
[76,93,47,56,57,0,86,73,47],
[46,63,64,46,65,45,0,64,46],
[69,84,38,39,57,58,67,0,67],
[57,73,56,83,64,84,85,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,86,76,65,83,64,87,67],
[64,0,76,82,69,80,67,77,72],
[45,55,0,60,51,74,48,75,49],
[55,49,71,0,57,77,58,76,61],
[66,62,80,74,0,69,64,79,70],
[48,51,57,54,62,0,53,68,52],
[67,64,83,73,67,78,0,83,70],
[44,54,56,55,52,63,48,0,54],
[64,59,82,70,61,79,61,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,66,70,74,74,64,61],
[66,0,64,60,63,70,72,64,68],
[64,67,0,59,62,65,70,60,57],
[65,71,72,0,66,67,73,79,69],
[61,68,69,65,0,60,65,67,68],
[57,61,66,64,71,0,70,61,61],
[57,59,61,58,66,61,0,68,62],
[67,67,71,52,64,70,63,0,61],
[70,63,74,62,63,70,69,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,68,67,67,67,59,74,63],
[63,0,59,64,66,65,60,64,57],
[63,72,0,68,65,75,69,80,72],
[64,67,63,0,65,77,66,73,60],
[64,65,66,66,0,81,63,68,65],
[64,66,56,54,50,0,57,67,56],
[72,71,62,65,68,74,0,80,76],
[57,67,51,58,63,64,51,0,61],
[68,74,59,71,66,75,55,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,66,76,67,72,66,73,61],
[62,0,71,70,63,73,61,65,72],
[65,60,0,70,54,66,62,61,56],
[55,61,61,0,56,78,68,72,63],
[64,68,77,75,0,78,73,70,73],
[59,58,65,53,53,0,68,56,59],
[65,70,69,63,58,63,0,62,66],
[58,66,70,59,61,75,69,0,66],
[70,59,75,68,58,72,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,87,68,70,78,65,73,58],
[67,0,89,90,78,89,83,78,61],
[44,42,0,64,52,58,57,54,65],
[63,41,67,0,72,64,66,79,65],
[61,53,79,59,0,66,55,73,65],
[53,42,73,67,65,0,58,64,56],
[66,48,74,65,76,73,0,84,70],
[58,53,77,52,58,67,47,0,61],
[73,70,66,66,66,75,61,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,71,64,58,62,71,68],
[69,0,69,71,67,68,64,73,73],
[70,62,0,67,69,58,66,67,65],
[60,60,64,0,62,68,70,65,69],
[67,64,62,69,0,63,66,66,63],
[73,63,73,63,68,0,65,70,71],
[69,67,65,61,65,66,0,70,64],
[60,58,64,66,65,61,61,0,68],
[63,58,66,62,68,60,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,61,60,76,51,55,75,54],
[71,0,63,57,58,54,45,74,43],
[70,68,0,63,50,64,69,84,47],
[71,74,68,0,59,70,71,79,67],
[55,73,81,72,0,73,84,83,58],
[80,77,67,61,58,0,80,66,55],
[76,86,62,60,47,51,0,82,42],
[56,57,47,52,48,65,49,0,49],
[77,88,84,64,73,76,89,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,66,63,66,64,73,70,72],
[59,0,64,60,70,66,65,57,62],
[65,67,0,59,67,66,58,58,72],
[68,71,72,0,67,72,76,64,69],
[65,61,64,64,0,64,66,56,58],
[67,65,65,59,67,0,59,54,63],
[58,66,73,55,65,72,0,67,69],
[61,74,73,67,75,77,64,0,73],
[59,69,59,62,73,68,62,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,61,67,65,67,69,67,61],
[60,0,61,66,61,65,65,59,55],
[70,70,0,72,63,70,71,61,70],
[64,65,59,0,60,61,59,57,66],
[66,70,68,71,0,67,73,71,65],
[64,66,61,70,64,0,73,59,65],
[62,66,60,72,58,58,0,69,56],
[64,72,70,74,60,72,62,0,63],
[70,76,61,65,66,66,75,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,74,66,71,61,79,76,69],
[49,0,86,55,70,57,63,47,57],
[57,45,0,60,65,63,55,60,51],
[65,76,71,0,70,73,63,62,82],
[60,61,66,61,0,58,60,59,71],
[70,74,68,58,73,0,64,64,63],
[52,68,76,68,71,67,0,65,68],
[55,84,71,69,72,67,66,0,78],
[62,74,80,49,60,68,63,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,62,70,52,57,66,82,75],
[58,0,75,75,77,49,79,70,87],
[69,56,0,42,61,51,80,67,61],
[61,56,89,0,51,79,61,86,93],
[79,54,70,80,0,57,69,74,73],
[74,82,80,52,74,0,75,71,99],
[65,52,51,70,62,56,0,65,63],
[49,61,64,45,57,60,66,0,72],
[56,44,70,38,58,32,68,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,71,66,67,64,63,66,67],
[60,0,61,63,61,68,50,65,58],
[60,70,0,66,65,60,58,68,65],
[65,68,65,0,71,72,68,67,65],
[64,70,66,60,0,65,61,61,62],
[67,63,71,59,66,0,64,63,63],
[68,81,73,63,70,67,0,65,66],
[65,66,63,64,70,68,66,0,59],
[64,73,66,66,69,68,65,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,56,58,73,71,82,72,64],
[66,0,66,75,66,56,65,65,57],
[75,65,0,73,88,87,89,80,72],
[73,56,58,0,73,72,89,56,73],
[58,65,43,58,0,72,82,58,65],
[60,75,44,59,59,0,91,68,76],
[49,66,42,42,49,40,0,40,56],
[59,66,51,75,73,63,91,0,74],
[67,74,59,58,66,55,75,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,74,78,64,77,74,76,65],
[72,0,76,75,67,75,68,65,61],
[57,55,0,70,62,62,55,60,57],
[53,56,61,0,58,67,65,62,63],
[67,64,69,73,0,77,72,72,74],
[54,56,69,64,54,0,66,60,59],
[57,63,76,66,59,65,0,55,56],
[55,66,71,69,59,71,76,0,69],
[66,70,74,68,57,72,75,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,76,68,67,62,62,69],
[64,0,71,81,70,74,68,74,73],
[64,60,0,63,63,66,63,63,63],
[55,50,68,0,58,61,57,62,56],
[63,61,68,73,0,66,68,70,62],
[64,57,65,70,65,0,64,69,66],
[69,63,68,74,63,67,0,72,62],
[69,57,68,69,61,62,59,0,57],
[62,58,68,75,69,65,69,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,70,71,66,70,66,62,69],
[53,0,60,69,57,58,58,61,62],
[61,71,0,69,59,57,65,56,71],
[60,62,62,0,56,58,67,57,64],
[65,74,72,75,0,70,72,58,70],
[61,73,74,73,61,0,62,60,68],
[65,73,66,64,59,69,0,68,68],
[69,70,75,74,73,71,63,0,67],
[62,69,60,67,61,63,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,62,74,57,61,66,63,67],
[58,0,51,72,54,59,58,68,55],
[69,80,0,78,68,63,60,77,73],
[57,59,53,0,50,49,58,50,62],
[74,77,63,81,0,59,72,63,67],
[70,72,68,82,72,0,68,71,64],
[65,73,71,73,59,63,0,61,56],
[68,63,54,81,68,60,70,0,64],
[64,76,58,69,64,67,75,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,92,63,68,61,54,51,75],
[69,0,62,49,38,58,53,59,64],
[39,69,0,44,55,44,35,38,43],
[68,82,87,0,49,38,43,56,59],
[63,93,76,82,0,75,42,75,83],
[70,73,87,93,56,0,55,44,62],
[77,78,96,88,89,76,0,72,62],
[80,72,93,75,56,87,59,0,57],
[56,67,88,72,48,69,69,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,79,75,58,60,71,68,64],
[69,0,58,74,48,68,66,53,50],
[52,73,0,80,74,55,66,79,64],
[56,57,51,0,53,40,63,57,46],
[73,83,57,78,0,59,70,78,63],
[71,63,76,91,72,0,69,81,73],
[60,65,65,68,61,62,0,74,57],
[63,78,52,74,53,50,57,0,56],
[67,81,67,85,68,58,74,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,59,65,71,59,66,68,68],
[61,0,67,70,65,65,63,70,73],
[72,64,0,64,66,69,62,62,79],
[66,61,67,0,65,60,61,62,66],
[60,66,65,66,0,58,67,68,71],
[72,66,62,71,73,0,67,68,67],
[65,68,69,70,64,64,0,67,74],
[63,61,69,69,63,63,64,0,71],
[63,58,52,65,60,64,57,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,65,68,57,57,67,60,61],
[75,0,58,54,61,76,78,63,65],
[66,73,0,68,64,72,71,61,71],
[63,77,63,0,73,61,76,56,66],
[74,70,67,58,0,64,65,64,71],
[74,55,59,70,67,0,69,78,66],
[64,53,60,55,66,62,0,43,60],
[71,68,70,75,67,53,88,0,76],
[70,66,60,65,60,65,71,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,74,70,69,79,69,68,65],
[59,0,70,56,61,61,61,61,58],
[57,61,0,71,63,63,64,56,60],
[61,75,60,0,64,65,70,55,69],
[62,70,68,67,0,59,57,61,63],
[52,70,68,66,72,0,73,66,65],
[62,70,67,61,74,58,0,61,67],
[63,70,75,76,70,65,70,0,67],
[66,73,71,62,68,66,64,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,78,78,53,56,50,60,48],
[62,0,77,67,59,45,61,58,64],
[53,54,0,78,58,58,69,49,46],
[53,64,53,0,56,48,68,60,43],
[78,72,73,75,0,59,74,64,73],
[75,86,73,83,72,0,99,82,61],
[81,70,62,63,57,32,0,56,58],
[71,73,82,71,67,49,75,0,42],
[83,67,85,88,58,70,73,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,76,62,77,67,74,67,64],
[66,0,75,61,67,68,78,72,61],
[55,56,0,60,55,52,64,58,66],
[69,70,71,0,61,60,65,65,60],
[54,64,76,70,0,58,62,63,60],
[64,63,79,71,73,0,66,61,68],
[57,53,67,66,69,65,0,60,60],
[64,59,73,66,68,70,71,0,61],
[67,70,65,71,71,63,71,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,73,70,67,68,79,73,81],
[66,0,88,69,74,82,79,70,64],
[58,43,0,63,77,83,71,61,60],
[61,62,68,0,63,78,69,68,69],
[64,57,54,68,0,64,65,70,63],
[63,49,48,53,67,0,65,64,53],
[52,52,60,62,66,66,0,55,54],
[58,61,70,63,61,67,76,0,71],
[50,67,71,62,68,78,77,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,67,65,58,64,54,56,57],
[78,0,88,79,70,78,58,70,75],
[64,43,0,64,63,55,46,55,66],
[66,52,67,0,58,62,57,60,66],
[73,61,68,73,0,69,64,69,67],
[67,53,76,69,62,0,55,66,62],
[77,73,85,74,67,76,0,65,72],
[75,61,76,71,62,65,66,0,65],
[74,56,65,65,64,69,59,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,68,69,67,59,78,67,65],
[56,0,64,40,49,51,54,62,52],
[63,67,0,55,61,54,53,66,57],
[62,91,76,0,80,66,76,79,68],
[64,82,70,51,0,65,69,71,63],
[72,80,77,65,66,0,75,66,69],
[53,77,78,55,62,56,0,63,53],
[64,69,65,52,60,65,68,0,60],
[66,79,74,63,68,62,78,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,68,59,55,55,55,74,70],
[50,0,49,53,56,52,51,60,68],
[63,82,0,67,62,71,71,72,78],
[72,78,64,0,66,61,59,66,65],
[76,75,69,65,0,68,73,76,72],
[76,79,60,70,63,0,65,73,67],
[76,80,60,72,58,66,0,70,62],
[57,71,59,65,55,58,61,0,78],
[61,63,53,66,59,64,69,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,62,42,39,49,51,58,49],
[79,0,61,60,59,58,61,69,68],
[69,70,0,49,79,78,50,60,67],
[89,71,82,0,61,70,52,79,59],
[92,72,52,70,0,80,71,92,59],
[82,73,53,61,51,0,62,41,50],
[80,70,81,79,60,69,0,70,48],
[73,62,71,52,39,90,61,0,60],
[82,63,64,72,72,81,83,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,70,65,66,70,64,66,70],
[53,0,52,49,57,51,52,47,54],
[61,79,0,59,71,79,66,70,73],
[66,82,72,0,82,75,71,63,75],
[65,74,60,49,0,60,57,64,66],
[61,80,52,56,71,0,63,55,66],
[67,79,65,60,74,68,0,68,65],
[65,84,61,68,67,76,63,0,72],
[61,77,58,56,65,65,66,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,70,55,76,57,67,67,61],
[69,0,77,73,77,70,68,62,70],
[61,54,0,70,71,65,64,57,63],
[76,58,61,0,83,53,71,57,69],
[55,54,60,48,0,54,59,56,59],
[74,61,66,78,77,0,77,62,69],
[64,63,67,60,72,54,0,57,61],
[64,69,74,74,75,69,74,0,72],
[70,61,68,62,72,62,70,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,50,65,61,53,56,61,70],
[75,0,61,71,73,76,78,64,77],
[81,70,0,74,84,69,65,76,71],
[66,60,57,0,54,54,42,46,64],
[70,58,47,77,0,59,54,44,76],
[78,55,62,77,72,0,65,73,75],
[75,53,66,89,77,66,0,67,81],
[70,67,55,85,87,58,64,0,89],
[61,54,60,67,55,56,50,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,83,78,64,72,63,62],
[67,0,62,73,78,77,86,70,75],
[65,69,0,72,71,63,76,70,68],
[48,58,59,0,59,59,59,71,59],
[53,53,60,72,0,45,76,59,62],
[67,54,68,72,86,0,68,64,60],
[59,45,55,72,55,63,0,68,55],
[68,61,61,60,72,67,63,0,53],
[69,56,63,72,69,71,76,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,65,81,65,49,33,99,81],
[82,0,98,64,82,98,64,66,64],
[66,33,0,48,67,16,33,83,32],
[50,67,83,0,83,67,67,83,99],
[66,49,64,48,0,48,32,66,48],
[82,33,115,64,83,0,49,83,65],
[98,67,98,64,99,82,0,99,82],
[32,65,48,48,65,48,32,0,64],
[50,67,99,32,83,66,49,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,65,65,65,61,48,54,60],
[77,0,60,62,60,69,60,56,67],
[66,71,0,70,55,63,68,64,61],
[66,69,61,0,68,70,62,67,63],
[66,71,76,63,0,79,59,55,67],
[70,62,68,61,52,0,53,61,68],
[83,71,63,69,72,78,0,70,69],
[77,75,67,64,76,70,61,0,65],
[71,64,70,68,64,63,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,71,69,59,71,66,74,65],
[59,0,64,59,55,55,56,59,54],
[60,67,0,66,67,76,63,67,61],
[62,72,65,0,60,74,66,71,61],
[72,76,64,71,0,68,69,67,68],
[60,76,55,57,63,0,60,59,56],
[65,75,68,65,62,71,0,69,64],
[57,72,64,60,64,72,62,0,65],
[66,77,70,70,63,75,67,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,60,63,74,66,73,67,69],
[60,0,60,60,78,73,68,62,69],
[71,71,0,72,63,74,62,68,59],
[68,71,59,0,66,71,75,54,62],
[57,53,68,65,0,69,67,60,66],
[65,58,57,60,62,0,59,58,66],
[58,63,69,56,64,72,0,60,65],
[64,69,63,77,71,73,71,0,67],
[62,62,72,69,65,65,66,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,60,77,68,71,54,53,57],
[55,0,56,47,59,51,61,52,44],
[71,75,0,75,74,60,70,56,71],
[54,84,56,0,61,56,62,55,49],
[63,72,57,70,0,57,64,54,51],
[60,80,71,75,74,0,72,58,57],
[77,70,61,69,67,59,0,54,56],
[78,79,75,76,77,73,77,0,58],
[74,87,60,82,80,74,75,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,86,54,68,68,71,68,85],
[60,0,77,59,60,42,68,54,71],
[45,54,0,31,47,49,57,58,83],
[77,72,100,0,59,63,79,72,89],
[63,71,84,72,0,67,78,69,88],
[63,89,82,68,64,0,61,57,69],
[60,63,74,52,53,70,0,48,65],
[63,77,73,59,62,74,83,0,69],
[46,60,48,42,43,62,66,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,89,72,80,79,72,94,58],
[75,0,103,94,97,45,73,88,43],
[42,28,0,63,43,59,28,52,29],
[59,37,68,0,59,52,52,83,37],
[51,34,88,72,0,52,71,81,42],
[52,86,72,79,79,0,50,72,36],
[59,58,103,79,60,81,0,81,73],
[37,43,79,48,50,59,50,0,37],
[73,88,102,94,89,95,58,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,62,68,75,67,69,71,70],
[62,0,66,73,69,73,66,66,77],
[69,65,0,73,72,54,59,82,58],
[63,58,58,0,69,73,69,74,69],
[56,62,59,62,0,66,59,65,57],
[64,58,77,58,65,0,65,71,57],
[62,65,72,62,72,66,0,74,67],
[60,65,49,57,66,60,57,0,56],
[61,54,73,62,74,74,64,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,75,68,70,72,82,71,62],
[57,0,70,57,66,65,61,73,57],
[56,61,0,70,69,57,66,74,57],
[63,74,61,0,79,76,71,72,67],
[61,65,62,52,0,56,61,66,68],
[59,66,74,55,75,0,69,72,74],
[49,70,65,60,70,62,0,71,70],
[60,58,57,59,65,59,60,0,60],
[69,74,74,64,63,57,61,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,70,75,52,55,68,75,72],
[59,0,64,62,54,54,45,59,68],
[61,67,0,72,54,58,46,63,64],
[56,69,59,0,54,69,51,67,55],
[79,77,77,77,0,78,65,82,81],
[76,77,73,62,53,0,62,74,72],
[63,86,85,80,66,69,0,83,74],
[56,72,68,64,49,57,48,0,72],
[59,63,67,76,50,59,57,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,52,54,64,63,53,50,70],
[73,0,65,71,75,77,90,71,80],
[79,66,0,60,79,77,76,63,82],
[77,60,71,0,89,77,81,67,83],
[67,56,52,42,0,57,64,44,66],
[68,54,54,54,74,0,82,68,87],
[78,41,55,50,67,49,0,57,62],
[81,60,68,64,87,63,74,0,76],
[61,51,49,48,65,44,69,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,68,84,82,70,68,71,69],
[68,0,69,75,68,70,70,65,73],
[63,62,0,71,64,37,53,57,65],
[47,56,60,0,51,55,44,56,49],
[49,63,67,80,0,60,56,76,78],
[61,61,94,76,71,0,67,68,59],
[63,61,78,87,75,64,0,66,65],
[60,66,74,75,55,63,65,0,72],
[62,58,66,82,53,72,66,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,64,61,62,45,62,73,76],
[77,0,80,72,63,72,84,70,82],
[67,51,0,64,57,41,71,63,71],
[70,59,67,0,63,62,84,72,64],
[69,68,74,68,0,57,88,75,76],
[86,59,90,69,74,0,91,72,82],
[69,47,60,47,43,40,0,52,68],
[58,61,68,59,56,59,79,0,71],
[55,49,60,67,55,49,63,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,88,75,75,69,62,83,68],
[56,0,78,65,65,63,69,69,66],
[43,53,0,51,57,59,48,52,58],
[56,66,80,0,69,77,57,69,63],
[56,66,74,62,0,65,62,72,62],
[62,68,72,54,66,0,56,66,55],
[69,62,83,74,69,75,0,73,67],
[48,62,79,62,59,65,58,0,57],
[63,65,73,68,69,76,64,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,61,69,50,60,63,60,67],
[63,0,71,62,61,72,86,77,70],
[70,60,0,67,65,60,86,68,60],
[62,69,64,0,61,63,74,60,67],
[81,70,66,70,0,63,71,66,78],
[71,59,71,68,68,0,75,72,79],
[68,45,45,57,60,56,0,57,63],
[71,54,63,71,65,59,74,0,64],
[64,61,71,64,53,52,68,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,67,48,69,60,51,62,52],
[94,0,76,68,70,80,75,80,65],
[64,55,0,57,66,67,52,59,50],
[83,63,74,0,70,82,66,71,79],
[62,61,65,61,0,73,72,57,60],
[71,51,64,49,58,0,77,51,52],
[80,56,79,65,59,54,0,65,75],
[69,51,72,60,74,80,66,0,60],
[79,66,81,52,71,79,56,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,62,72,64,62,66,68,59],
[68,0,70,72,76,65,66,71,68],
[69,61,0,74,68,64,71,72,67],
[59,59,57,0,62,54,56,69,54],
[67,55,63,69,0,55,60,71,54],
[69,66,67,77,76,0,70,77,60],
[65,65,60,75,71,61,0,68,61],
[63,60,59,62,60,54,63,0,60],
[72,63,64,77,77,71,70,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,74,62,69,65,68,57,68],
[62,0,67,64,71,63,61,65,75],
[57,64,0,72,80,57,73,67,71],
[69,67,59,0,66,64,73,68,74],
[62,60,51,65,0,50,62,60,67],
[66,68,74,67,81,0,77,65,74],
[63,70,58,58,69,54,0,63,63],
[74,66,64,63,71,66,68,0,72],
[63,56,60,57,64,57,68,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,70,58,60,71,67,69,65],
[67,0,73,61,65,64,72,65,65],
[61,58,0,57,65,54,61,61,54],
[73,70,74,0,66,65,70,73,65],
[71,66,66,65,0,61,70,74,56],
[60,67,77,66,70,0,68,68,61],
[64,59,70,61,61,63,0,62,66],
[62,66,70,58,57,63,69,0,62],
[66,66,77,66,75,70,65,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,61,66,62,55,54,67,51],
[70,0,64,65,61,65,63,63,65],
[70,67,0,70,64,57,65,66,63],
[65,66,61,0,66,56,66,60,53],
[69,70,67,65,0,64,60,61,65],
[76,66,74,75,67,0,64,69,66],
[77,68,66,65,71,67,0,70,67],
[64,68,65,71,70,62,61,0,63],
[80,66,68,78,66,65,64,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,80,66,60,69,87,77,86],
[51,0,57,63,46,68,71,77,78],
[51,74,0,67,68,87,75,67,93],
[65,68,64,0,57,71,89,78,80],
[71,85,63,74,0,75,90,65,94],
[62,63,44,60,56,0,76,66,86],
[44,60,56,42,41,55,0,56,68],
[54,54,64,53,66,65,75,0,76],
[45,53,38,51,37,45,63,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,60,71,62,78,58,72,74],
[61,0,62,56,65,61,55,65,63],
[71,69,0,56,68,74,54,57,57],
[60,75,75,0,75,76,74,73,69],
[69,66,63,56,0,71,55,67,63],
[53,70,57,55,60,0,61,56,58],
[73,76,77,57,76,70,0,81,73],
[59,66,74,58,64,75,50,0,57],
[57,68,74,62,68,73,58,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,63,89,67,61,45,60,78],
[53,0,57,73,52,45,37,66,53],
[68,74,0,90,49,56,43,61,69],
[42,58,41,0,36,46,30,46,50],
[64,79,82,95,0,73,62,73,56],
[70,86,75,85,58,0,45,69,70],
[86,94,88,101,69,86,0,80,65],
[71,65,70,85,58,62,51,0,68],
[53,78,62,81,75,61,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,55,61,58,49,51,65,55],
[71,0,57,57,56,71,59,64,65],
[76,74,0,65,61,62,62,73,68],
[70,74,66,0,62,72,73,69,71],
[73,75,70,69,0,66,62,75,68],
[82,60,69,59,65,0,64,73,75],
[80,72,69,58,69,67,0,68,73],
[66,67,58,62,56,58,63,0,66],
[76,66,63,60,63,56,58,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,67,68,68,75,60,69,67],
[73,0,62,81,73,77,78,63,67],
[64,69,0,65,74,74,76,59,66],
[63,50,66,0,56,59,73,56,64],
[63,58,57,75,0,77,64,51,60],
[56,54,57,72,54,0,64,60,53],
[71,53,55,58,67,67,0,64,68],
[62,68,72,75,80,71,67,0,69],
[64,64,65,67,71,78,63,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,50,61,63,66,79,62,43],
[92,0,63,85,71,66,76,68,67],
[81,68,0,86,81,64,86,88,80],
[70,46,45,0,52,42,64,57,52],
[68,60,50,79,0,45,54,72,61],
[65,65,67,89,86,0,80,61,74],
[52,55,45,67,77,51,0,65,44],
[69,63,43,74,59,70,66,0,61],
[88,64,51,79,70,57,87,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,69,72,69,60,68,69,70],
[66,0,78,72,70,64,65,71,65],
[62,53,0,64,61,65,61,57,66],
[59,59,67,0,66,65,68,65,70],
[62,61,70,65,0,62,67,66,68],
[71,67,66,66,69,0,67,64,70],
[63,66,70,63,64,64,0,66,72],
[62,60,74,66,65,67,65,0,75],
[61,66,65,61,63,61,59,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,31,0,64,0,31,0,0],
[100,0,65,67,98,0,98,34,33],
[100,66,0,100,131,33,131,67,66],
[131,64,31,0,64,31,97,34,64],
[67,33,0,67,0,33,67,34,33],
[131,131,98,100,98,0,131,34,131],
[100,33,0,34,64,0,0,34,33],
[131,97,64,97,97,97,97,0,97],
[131,98,65,67,98,0,98,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,74,63,64,74,64,71],
[64,0,66,67,58,62,71,68,68],
[61,65,0,63,51,57,62,69,71],
[57,64,68,0,64,63,64,66,75],
[68,73,80,67,0,69,64,79,89],
[67,69,74,68,62,0,58,75,66],
[57,60,69,67,67,73,0,76,80],
[67,63,62,65,52,56,55,0,62],
[60,63,60,56,42,65,51,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,56,49,90,49,77,48,52],
[70,0,57,51,61,44,63,53,46],
[75,74,0,85,86,68,89,56,65],
[82,80,46,0,80,86,80,66,81],
[41,70,45,51,0,50,41,46,45],
[82,87,63,45,81,0,85,72,65],
[54,68,42,51,90,46,0,71,42],
[83,78,75,65,85,59,60,0,58],
[79,85,66,50,86,66,89,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,60,78,57,63,63,69,75],
[53,0,46,59,49,52,46,62,53],
[71,85,0,73,66,74,62,70,66],
[53,72,58,0,58,55,58,66,62],
[74,82,65,73,0,67,58,71,71],
[68,79,57,76,64,0,64,75,81],
[68,85,69,73,73,67,0,71,65],
[62,69,61,65,60,56,60,0,63],
[56,78,65,69,60,50,66,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,70,59,69,63,72,55,69],
[60,0,63,62,67,64,69,64,72],
[61,68,0,56,64,73,69,61,64],
[72,69,75,0,70,76,74,71,61],
[62,64,67,61,0,68,75,67,68],
[68,67,58,55,63,0,66,65,60],
[59,62,62,57,56,65,0,61,72],
[76,67,70,60,64,66,70,0,60],
[62,59,67,70,63,71,59,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,68,47,54,66,53,59,55],
[84,0,66,61,62,74,58,62,76],
[63,65,0,62,58,62,53,62,66],
[84,70,69,0,64,77,71,71,74],
[77,69,73,67,0,77,67,61,76],
[65,57,69,54,54,0,65,59,67],
[78,73,78,60,64,66,0,78,66],
[72,69,69,60,70,72,53,0,66],
[76,55,65,57,55,64,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,75,70,67,67,65,66,73],
[60,0,70,63,57,64,75,61,64],
[56,61,0,53,61,68,67,65,59],
[61,68,78,0,64,72,68,62,64],
[64,74,70,67,0,65,74,66,67],
[64,67,63,59,66,0,68,58,70],
[66,56,64,63,57,63,0,59,56],
[65,70,66,69,65,73,72,0,67],
[58,67,72,67,64,61,75,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,32,57,78,62,66,46,59],
[70,0,41,80,50,60,44,61,56],
[99,90,0,89,81,87,65,83,67],
[74,51,42,0,67,65,56,55,53],
[53,81,50,64,0,76,51,74,69],
[69,71,44,66,55,0,57,56,48],
[65,87,66,75,80,74,0,65,67],
[85,70,48,76,57,75,66,0,62],
[72,75,64,78,62,83,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,61,48,63,67,53,65,73],
[65,0,71,61,70,65,66,76,62],
[70,60,0,71,71,59,58,73,74],
[83,70,60,0,73,66,57,64,73],
[68,61,60,58,0,73,60,61,62],
[64,66,72,65,58,0,63,65,62],
[78,65,73,74,71,68,0,80,71],
[66,55,58,67,70,66,51,0,71],
[58,69,57,58,69,69,60,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,63,59,63,69,96,70,52],
[72,0,63,76,58,54,99,70,90],
[68,68,0,61,83,72,96,94,78],
[72,55,70,0,65,55,98,69,80],
[68,73,48,66,0,79,64,94,56],
[62,77,59,76,52,0,68,67,60],
[35,32,35,33,67,63,0,70,34],
[61,61,37,62,37,64,61,0,44],
[79,41,53,51,75,71,97,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,108,107,58,71,115,76,76],
[73,0,91,90,73,71,91,74,58],
[23,40,0,66,59,47,72,24,42],
[24,41,65,0,59,47,75,58,40],
[73,58,72,72,0,37,64,72,58],
[60,60,84,84,94,0,91,76,78],
[16,40,59,56,67,40,0,33,42],
[55,57,107,73,59,55,98,0,68],
[55,73,89,91,73,53,89,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,62,60,74,63,63,73,61],
[67,0,71,70,77,62,73,79,70],
[69,60,0,71,75,67,63,68,61],
[71,61,60,0,71,74,62,75,65],
[57,54,56,60,0,55,65,70,56],
[68,69,64,57,76,0,63,76,60],
[68,58,68,69,66,68,0,80,66],
[58,52,63,56,61,55,51,0,59],
[70,61,70,66,75,71,65,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,64,67,66,70,74,72,74],
[75,0,71,59,63,61,80,65,73],
[67,60,0,56,63,57,73,71,72],
[64,72,75,0,73,73,81,74,86],
[65,68,68,58,0,71,86,74,78],
[61,70,74,58,60,0,94,62,72],
[57,51,58,50,45,37,0,53,67],
[59,66,60,57,57,69,78,0,76],
[57,58,59,45,53,59,64,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,58,67,63,79,62,77,63],
[58,0,57,72,61,61,64,73,63],
[73,74,0,80,69,84,73,70,64],
[64,59,51,0,60,71,62,64,58],
[68,70,62,71,0,63,59,61,64],
[52,70,47,60,68,0,51,62,60],
[69,67,58,69,72,80,0,66,72],
[54,58,61,67,70,69,65,0,66],
[68,68,67,73,67,71,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,73,64,66,61,61,62,59],
[63,0,75,63,61,65,62,73,65],
[58,56,0,60,55,60,61,62,59],
[67,68,71,0,72,57,63,62,59],
[65,70,76,59,0,63,61,68,64],
[70,66,71,74,68,0,65,67,63],
[70,69,70,68,70,66,0,64,67],
[69,58,69,69,63,64,67,0,62],
[72,66,72,72,67,68,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,64,69,71,64,59,83,61],
[78,0,75,59,73,72,64,76,77],
[67,56,0,51,73,55,55,58,63],
[62,72,80,0,70,71,64,79,76],
[60,58,58,61,0,54,66,75,62],
[67,59,76,60,77,0,62,71,64],
[72,67,76,67,65,69,0,75,64],
[48,55,73,52,56,60,56,0,64],
[70,54,68,55,69,67,67,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,62,64,68,60,75,72],
[64,0,61,66,66,67,67,73,65],
[63,70,0,67,67,65,67,84,68],
[69,65,64,0,61,80,72,79,74],
[67,65,64,70,0,78,71,81,64],
[63,64,66,51,53,0,59,70,70],
[71,64,64,59,60,72,0,79,76],
[56,58,47,52,50,61,52,0,56],
[59,66,63,57,67,61,55,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,59,62,57,66,52,59,51],
[70,0,66,66,61,67,57,65,63],
[72,65,0,59,61,73,57,63,59],
[69,65,72,0,59,74,69,62,55],
[74,70,70,72,0,75,64,64,63],
[65,64,58,57,56,0,56,61,62],
[79,74,74,62,67,75,0,72,67],
[72,66,68,69,67,70,59,0,59],
[80,68,72,76,68,69,64,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,70,72,72,63,70,69,68],
[61,0,68,73,72,69,71,69,61],
[61,63,0,64,57,61,69,64,60],
[59,58,67,0,63,65,69,67,68],
[59,59,74,68,0,65,70,71,59],
[68,62,70,66,66,0,70,71,66],
[61,60,62,62,61,61,0,64,66],
[62,62,67,64,60,60,67,0,62],
[63,70,71,63,72,65,65,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,69,64,69,64,66,69,74],
[84,0,71,68,69,79,70,63,80],
[62,60,0,69,62,67,75,69,71],
[67,63,62,0,70,67,70,56,71],
[62,62,69,61,0,72,67,63,66],
[67,52,64,64,59,0,72,57,75],
[65,61,56,61,64,59,0,67,64],
[62,68,62,75,68,74,64,0,63],
[57,51,60,60,65,56,67,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,56,75,36,56,57,46,73],
[79,0,57,57,49,76,77,58,76],
[75,74,0,46,66,47,68,64,93],
[56,74,85,0,58,75,75,56,66],
[95,82,65,73,0,77,77,74,94],
[75,55,84,56,54,0,68,84,76],
[74,54,63,56,54,63,0,63,65],
[85,73,67,75,57,47,68,0,56],
[58,55,38,65,37,55,66,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,48,66,64,58,51,48,57],
[90,0,66,70,68,65,77,63,72],
[83,65,0,66,71,62,69,55,75],
[65,61,65,0,51,62,63,61,73],
[67,63,60,80,0,65,71,72,81],
[73,66,69,69,66,0,62,57,76],
[80,54,62,68,60,69,0,59,74],
[83,68,76,70,59,74,72,0,83],
[74,59,56,58,50,55,57,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,60,69,63,59,64,61,60],
[69,0,63,76,59,59,63,69,65],
[71,68,0,79,71,63,61,74,66],
[62,55,52,0,61,55,60,57,50],
[68,72,60,70,0,73,73,64,59],
[72,72,68,76,58,0,67,63,61],
[67,68,70,71,58,64,0,66,60],
[70,62,57,74,67,68,65,0,60],
[71,66,65,81,72,70,71,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,61,57,61,53,58,50,45],
[79,0,72,58,72,69,63,61,64],
[70,59,0,68,66,69,57,66,62],
[74,73,63,0,72,68,67,58,58],
[70,59,65,59,0,60,50,56,56],
[78,62,62,63,71,0,63,69,60],
[73,68,74,64,81,68,0,58,67],
[81,70,65,73,75,62,73,0,69],
[86,67,69,73,75,71,64,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,74,62,57,68,62,69,66],
[68,0,85,68,68,72,69,65,67],
[57,46,0,48,56,58,48,55,54],
[69,63,83,0,57,59,62,62,64],
[74,63,75,74,0,65,58,64,65],
[63,59,73,72,66,0,58,73,68],
[69,62,83,69,73,73,0,68,68],
[62,66,76,69,67,58,63,0,67],
[65,64,77,67,66,63,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,62,46,61,61,52,49,53],
[78,0,75,65,68,70,53,65,60],
[69,56,0,66,82,72,72,69,68],
[85,66,65,0,76,48,84,64,75],
[70,63,49,55,0,55,57,56,58],
[70,61,59,83,76,0,79,75,75],
[79,78,59,47,74,52,0,69,64],
[82,66,62,67,75,56,62,0,58],
[78,71,63,56,73,56,67,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,55,50,59,59,61,60,54],
[72,0,74,66,67,63,66,65,68],
[76,57,0,57,63,54,62,65,64],
[81,65,74,0,75,72,66,73,73],
[72,64,68,56,0,66,62,66,62],
[72,68,77,59,65,0,67,71,73],
[70,65,69,65,69,64,0,68,66],
[71,66,66,58,65,60,63,0,68],
[77,63,67,58,69,58,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,62,70,72,67,71,71,74],
[56,0,57,61,62,57,56,72,68],
[69,74,0,67,67,61,71,82,72],
[61,70,64,0,70,62,61,77,72],
[59,69,64,61,0,58,60,73,62],
[64,74,70,69,73,0,69,69,76],
[60,75,60,70,71,62,0,68,74],
[60,59,49,54,58,62,63,0,57],
[57,63,59,59,69,55,57,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,62,73,63,86,67,66,57],
[74,0,64,64,65,89,63,70,57],
[69,67,0,56,67,73,62,61,41],
[58,67,75,0,70,84,61,70,68],
[68,66,64,61,0,78,60,65,74],
[45,42,58,47,53,0,51,39,47],
[64,68,69,70,71,80,0,63,73],
[65,61,70,61,66,92,68,0,66],
[74,74,90,63,57,84,58,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,82,77,89,72,58,76,68],
[62,0,72,75,79,66,48,69,60],
[49,59,0,59,62,70,48,68,58],
[54,56,72,0,64,66,47,54,48],
[42,52,69,67,0,71,44,58,58],
[59,65,61,65,60,0,59,69,70],
[73,83,83,84,87,72,0,79,58],
[55,62,63,77,73,62,52,0,61],
[63,71,73,83,73,61,73,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,81,60,82,72,56,74,63],
[54,0,63,48,73,63,55,56,69],
[50,68,0,62,71,56,56,51,60],
[71,83,69,0,83,79,68,65,74],
[49,58,60,48,0,68,54,46,57],
[59,68,75,52,63,0,55,56,52],
[75,76,75,63,77,76,0,71,69],
[57,75,80,66,85,75,60,0,78],
[68,62,71,57,74,79,62,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,74,73,63,58,52,51,70],
[70,0,68,68,59,66,71,52,69],
[57,63,0,72,59,57,60,64,59],
[58,63,59,0,61,51,65,50,61],
[68,72,72,70,0,78,59,61,70],
[73,65,74,80,53,0,66,55,75],
[79,60,71,66,72,65,0,67,64],
[80,79,67,81,70,76,64,0,67],
[61,62,72,70,61,56,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,61,66,66,64,64,64,69],
[65,0,64,65,62,62,62,63,58],
[70,67,0,68,65,66,69,73,63],
[65,66,63,0,66,68,72,61,66],
[65,69,66,65,0,73,71,62,63],
[67,69,65,63,58,0,61,60,62],
[67,69,62,59,60,70,0,58,62],
[67,68,58,70,69,71,73,0,71],
[62,73,68,65,68,69,69,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,62,62,64,57,69,66,58],
[73,0,77,78,65,71,69,75,69],
[69,54,0,57,69,62,56,55,66],
[69,53,74,0,56,62,56,65,56],
[67,66,62,75,0,67,69,66,68],
[74,60,69,69,64,0,71,65,63],
[62,62,75,75,62,60,0,65,59],
[65,56,76,66,65,66,66,0,70],
[73,62,65,75,63,68,72,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,86,65,87,65,86,65,87],
[44,0,42,45,87,87,64,67,87],
[45,89,0,67,89,67,67,45,67],
[66,86,64,0,64,64,86,64,87],
[44,44,42,67,0,67,64,67,67],
[66,44,64,67,64,0,86,22,87],
[45,67,64,45,67,45,0,45,45],
[66,64,86,67,64,109,86,0,109],
[44,44,64,44,64,44,86,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,60,61,63,64,59,67,54],
[72,0,70,72,68,64,68,73,71],
[71,61,0,64,70,68,60,76,62],
[70,59,67,0,69,69,65,70,63],
[68,63,61,62,0,68,69,65,64],
[67,67,63,62,63,0,56,69,58],
[72,63,71,66,62,75,0,76,68],
[64,58,55,61,66,62,55,0,61],
[77,60,69,68,67,73,63,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,68,74,66,68,63,70,76],
[63,0,75,72,63,77,66,61,71],
[63,56,0,65,59,62,60,68,68],
[57,59,66,0,59,68,62,63,63],
[65,68,72,72,0,64,68,64,65],
[63,54,69,63,67,0,61,65,69],
[68,65,71,69,63,70,0,71,69],
[61,70,63,68,67,66,60,0,76],
[55,60,63,68,66,62,62,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,58,66,67,67,60,58,59],
[67,0,61,68,70,67,67,67,76],
[73,70,0,69,70,71,68,65,72],
[65,63,62,0,63,59,55,61,57],
[64,61,61,68,0,61,59,66,58],
[64,64,60,72,70,0,61,67,66],
[71,64,63,76,72,70,0,73,63],
[73,64,66,70,65,64,58,0,71],
[72,55,59,74,73,65,68,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,74,69,64,62,46,64,80],
[81,0,73,69,78,64,74,68,88],
[57,58,0,69,67,62,67,58,85],
[62,62,62,0,74,61,48,57,69],
[67,53,64,57,0,55,57,65,79],
[69,67,69,70,76,0,61,63,74],
[85,57,64,83,74,70,0,60,94],
[67,63,73,74,66,68,71,0,87],
[51,43,46,62,52,57,37,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,53,52,71,54,81,61,73],
[58,0,63,59,49,57,67,69,63],
[78,68,0,61,80,67,80,73,72],
[79,72,70,0,64,59,72,70,72],
[60,82,51,67,0,66,79,66,61],
[77,74,64,72,65,0,77,72,75],
[50,64,51,59,52,54,0,62,58],
[70,62,58,61,65,59,69,0,66],
[58,68,59,59,70,56,73,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,37,60,26,37,49,49,74],
[81,0,71,59,72,60,60,83,84],
[94,60,0,108,84,73,71,95,96],
[71,72,23,0,61,72,48,95,84],
[105,59,47,70,0,70,72,95,83],
[94,71,58,59,61,0,59,94,107],
[82,71,60,83,59,72,0,72,84],
[82,48,36,36,36,37,59,0,96],
[57,47,35,47,48,24,47,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,74,70,56,67,78,78,71],
[63,0,66,70,60,61,66,62,71],
[57,65,0,67,67,69,59,73,64],
[61,61,64,0,65,65,63,65,69],
[75,71,64,66,0,68,73,81,68],
[64,70,62,66,63,0,76,66,76],
[53,65,72,68,58,55,0,69,64],
[53,69,58,66,50,65,62,0,62],
[60,60,67,62,63,55,67,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,76,64,71,68,79,66,70],
[48,0,54,51,56,55,63,55,50],
[55,77,0,69,71,63,68,63,65],
[67,80,62,0,81,66,76,61,67],
[60,75,60,50,0,56,62,63,52],
[63,76,68,65,75,0,76,79,62],
[52,68,63,55,69,55,0,68,63],
[65,76,68,70,68,52,63,0,52],
[61,81,66,64,79,69,68,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,61,60,51,73,29,63,52],
[71,0,73,55,56,70,44,65,44],
[70,58,0,75,53,79,62,67,47],
[71,76,56,0,72,78,70,74,52],
[80,75,78,59,0,69,60,78,49],
[58,61,52,53,62,0,53,60,47],
[102,87,69,61,71,78,0,89,66],
[68,66,64,57,53,71,42,0,41],
[79,87,84,79,82,84,65,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,56,60,56,72,67,49,60],
[83,0,79,60,74,88,86,60,70],
[75,52,0,65,75,84,75,71,74],
[71,71,66,0,65,72,75,62,59],
[75,57,56,66,0,85,58,59,65],
[59,43,47,59,46,0,65,49,53],
[64,45,56,56,73,66,0,47,56],
[82,71,60,69,72,82,84,0,79],
[71,61,57,72,66,78,75,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,63,68,74,71,70,79,67],
[58,0,68,63,72,71,61,65,67],
[68,63,0,65,77,82,63,73,69],
[63,68,66,0,69,71,63,69,62],
[57,59,54,62,0,60,64,61,55],
[60,60,49,60,71,0,65,70,57],
[61,70,68,68,67,66,0,67,59],
[52,66,58,62,70,61,64,0,65],
[64,64,62,69,76,74,72,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,71,80,71,65,71,61,64],
[55,0,69,57,68,57,64,59,68],
[60,62,0,62,70,65,75,58,54],
[51,74,69,0,67,56,70,54,67],
[60,63,61,64,0,63,76,61,67],
[66,74,66,75,68,0,64,71,70],
[60,67,56,61,55,67,0,38,50],
[70,72,73,77,70,60,93,0,72],
[67,63,77,64,64,61,81,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,74,88,62,63,67,74,65],
[63,0,60,80,67,70,58,75,55],
[57,71,0,76,64,55,53,70,63],
[43,51,55,0,45,50,63,52,57],
[69,64,67,86,0,68,69,63,53],
[68,61,76,81,63,0,74,70,59],
[64,73,78,68,62,57,0,59,67],
[57,56,61,79,68,61,72,0,57],
[66,76,68,74,78,72,64,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,84,71,96,72,85,64,86],
[50,0,64,63,75,46,65,58,69],
[47,67,0,57,73,63,72,64,74],
[60,68,74,0,74,58,73,60,71],
[35,56,58,57,0,51,51,58,61],
[59,85,68,73,80,0,79,67,75],
[46,66,59,58,80,52,0,57,74],
[67,73,67,71,73,64,74,0,78],
[45,62,57,60,70,56,57,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,82,76,54,58,65,65,60],
[74,0,86,74,66,68,61,57,70],
[49,45,0,64,50,52,53,37,50],
[55,57,67,0,57,47,58,53,64],
[77,65,81,74,0,68,64,57,71],
[73,63,79,84,63,0,64,69,73],
[66,70,78,73,67,67,0,58,70],
[66,74,94,78,74,62,73,0,71],
[71,61,81,67,60,58,61,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,80,65,72,85,69,83,83],
[61,0,64,65,52,63,62,59,54],
[51,67,0,79,65,56,72,76,71],
[66,66,52,0,61,69,64,63,67],
[59,79,66,70,0,65,70,65,58],
[46,68,75,62,66,0,68,73,66],
[62,69,59,67,61,63,0,89,70],
[48,72,55,68,66,58,42,0,49],
[48,77,60,64,73,65,61,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,54,64,59,62,62,77],
[63,0,63,73,62,62,58,65,80],
[67,68,0,65,67,59,62,72,79],
[77,58,66,0,62,74,65,69,73],
[67,69,64,69,0,52,74,64,68],
[72,69,72,57,79,0,63,71,83],
[69,73,69,66,57,68,0,67,64],
[69,66,59,62,67,60,64,0,70],
[54,51,52,58,63,48,67,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,63,47,49,74,55,60,67],
[60,0,78,66,62,62,54,60,61],
[68,53,0,66,65,68,56,70,63],
[84,65,65,0,70,68,56,74,53],
[82,69,66,61,0,72,58,66,62],
[57,69,63,63,59,0,48,69,53],
[76,77,75,75,73,83,0,81,59],
[71,71,61,57,65,62,50,0,55],
[64,70,68,78,69,78,72,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,77,68,68,80,64,72,69],
[64,0,66,63,66,70,59,68,63],
[54,65,0,67,67,66,62,60,54],
[63,68,64,0,67,72,65,71,56],
[63,65,64,64,0,74,70,70,59],
[51,61,65,59,57,0,52,51,50],
[67,72,69,66,61,79,0,70,63],
[59,63,71,60,61,80,61,0,60],
[62,68,77,75,72,81,68,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,75,75,79,62,58,76,87],
[41,0,69,56,66,45,53,66,75],
[56,62,0,54,58,60,59,76,66],
[56,75,77,0,80,67,66,72,75],
[52,65,73,51,0,40,44,73,65],
[69,86,71,64,91,0,50,67,71],
[73,78,72,65,87,81,0,81,66],
[55,65,55,59,58,64,50,0,64],
[44,56,65,56,66,60,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,52,69,68,57,65,63,52],
[62,0,65,68,51,59,68,68,56],
[79,66,0,78,70,70,83,80,62],
[62,63,53,0,61,56,72,67,50],
[63,80,61,70,0,66,81,73,64],
[74,72,61,75,65,0,80,76,70],
[66,63,48,59,50,51,0,65,42],
[68,63,51,64,58,55,66,0,65],
[79,75,69,81,67,61,89,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,60,67,71,59,72,73,58],
[63,0,61,66,78,60,77,72,55],
[71,70,0,65,77,71,78,75,71],
[64,65,66,0,68,62,68,65,64],
[60,53,54,63,0,60,58,60,53],
[72,71,60,69,71,0,65,68,60],
[59,54,53,63,73,66,0,66,58],
[58,59,56,66,71,63,65,0,51],
[73,76,60,67,78,71,73,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,67,70,72,65,78,71,72],
[49,0,55,61,71,50,58,52,63],
[64,76,0,74,75,72,79,68,67],
[61,70,57,0,66,58,62,65,73],
[59,60,56,65,0,65,64,53,55],
[66,81,59,73,66,0,67,52,66],
[53,73,52,69,67,64,0,62,61],
[60,79,63,66,78,79,69,0,76],
[59,68,64,58,76,65,70,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,58,55,59,52,57,59,61],
[68,0,63,58,58,54,55,50,60],
[73,68,0,66,71,64,70,64,55],
[76,73,65,0,75,66,64,77,75],
[72,73,60,56,0,68,69,71,68],
[79,77,67,65,63,0,69,69,68],
[74,76,61,67,62,62,0,69,63],
[72,81,67,54,60,62,62,0,70],
[70,71,76,56,63,63,68,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,79,68,66,74,63,79,70],
[57,0,63,56,57,66,57,61,45],
[52,68,0,69,63,69,71,68,62],
[63,75,62,0,77,65,71,71,63],
[65,74,68,54,0,61,67,66,60],
[57,65,62,66,70,0,68,71,63],
[68,74,60,60,64,63,0,66,63],
[52,70,63,60,65,60,65,0,56],
[61,86,69,68,71,68,68,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,64,61,75,79,75,85,85],
[51,0,62,68,63,42,73,73,84],
[67,69,0,67,60,62,68,72,79],
[70,63,64,0,63,73,68,69,68],
[56,68,71,68,0,81,78,79,78],
[52,89,69,58,50,0,73,73,83],
[56,58,63,63,53,58,0,50,52],
[46,58,59,62,52,58,81,0,60],
[46,47,52,63,53,48,79,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,76,65,64,73,82,74,67],
[71,0,80,65,66,75,75,69,76],
[55,51,0,55,65,70,64,56,70],
[66,66,76,0,63,64,82,73,68],
[67,65,66,68,0,69,84,69,74],
[58,56,61,67,62,0,76,71,70],
[49,56,67,49,47,55,0,63,55],
[57,62,75,58,62,60,68,0,67],
[64,55,61,63,57,61,76,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,73,95,59,48,88,62,50],
[82,0,71,92,68,70,84,58,46],
[58,60,0,83,45,69,51,49,35],
[36,39,48,0,34,38,51,25,38],
[72,63,86,97,0,49,76,76,76],
[83,61,62,93,82,0,64,62,39],
[43,47,80,80,55,67,0,56,45],
[69,73,82,106,55,69,75,0,48],
[81,85,96,93,55,92,86,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,76,66,62,60,93,68,70],
[60,0,66,70,57,55,83,63,72],
[55,65,0,56,63,67,63,71,57],
[65,61,75,0,69,59,72,60,71],
[69,74,68,62,0,47,75,68,68],
[71,76,64,72,84,0,85,80,75],
[38,48,68,59,56,46,0,49,60],
[63,68,60,71,63,51,82,0,67],
[61,59,74,60,63,56,71,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,50,56,73,61,52,57,61],
[62,0,67,64,65,63,60,63,50],
[81,64,0,62,70,65,51,62,66],
[75,67,69,0,52,63,55,61,72],
[58,66,61,79,0,61,59,58,70],
[70,68,66,68,70,0,56,66,71],
[79,71,80,76,72,75,0,59,63],
[74,68,69,70,73,65,72,0,64],
[70,81,65,59,61,60,68,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,60,62,62,71,69,62,69],
[66,0,58,62,67,62,67,63,65],
[71,73,0,70,64,70,80,67,69],
[69,69,61,0,64,68,72,59,73],
[69,64,67,67,0,68,67,64,70],
[60,69,61,63,63,0,67,62,64],
[62,64,51,59,64,64,0,56,65],
[69,68,64,72,67,69,75,0,75],
[62,66,62,58,61,67,66,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,73,59,66,64,58,66,49],
[59,0,59,54,65,63,61,49,70],
[58,72,0,49,71,59,61,54,57],
[72,77,82,0,71,72,54,68,62],
[65,66,60,60,0,66,48,55,75],
[67,68,72,59,65,0,70,48,58],
[73,70,70,77,83,61,0,76,66],
[65,82,77,63,76,83,55,0,62],
[82,61,74,69,56,73,65,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,92,74,77,77,56,54,84],
[63,0,90,56,67,51,78,59,59],
[39,41,0,73,66,66,55,48,66],
[57,75,58,0,66,69,66,58,75],
[54,64,65,65,0,41,54,40,67],
[54,80,65,62,90,0,69,72,73],
[75,53,76,65,77,62,0,52,78],
[77,72,83,73,91,59,79,0,82],
[47,72,65,56,64,58,53,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,67,62,60,59,54,59,52],
[72,0,73,59,72,62,56,71,60],
[64,58,0,49,50,48,47,47,49],
[69,72,82,0,72,70,51,75,66],
[71,59,81,59,0,44,59,68,54],
[72,69,83,61,87,0,74,62,50],
[77,75,84,80,72,57,0,81,84],
[72,60,84,56,63,69,50,0,48],
[79,71,82,65,77,81,47,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,48,54,62,56,48,61,60],
[65,0,59,63,60,64,54,65,61],
[83,72,0,71,73,62,69,77,65],
[77,68,60,0,60,66,55,70,54],
[69,71,58,71,0,57,57,68,69],
[75,67,69,65,74,0,66,72,60],
[83,77,62,76,74,65,0,87,77],
[70,66,54,61,63,59,44,0,65],
[71,70,66,77,62,71,54,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,75,72,70,62,68,64,70],
[61,0,68,69,69,59,61,54,66],
[56,63,0,67,66,59,57,58,60],
[59,62,64,0,68,58,52,64,63],
[61,62,65,63,0,63,53,65,66],
[69,72,72,73,68,0,67,67,63],
[63,70,74,79,78,64,0,62,60],
[67,77,73,67,66,64,69,0,78],
[61,65,71,68,65,68,71,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,69,84,71,82,77,68,72],
[68,0,64,68,67,76,74,60,68],
[62,67,0,73,53,56,72,60,76],
[47,63,58,0,55,72,59,61,62],
[60,64,78,76,0,75,76,76,68],
[49,55,75,59,56,0,62,59,60],
[54,57,59,72,55,69,0,60,69],
[63,71,71,70,55,72,71,0,77],
[59,63,55,69,63,71,62,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,70,69,63,72,73,76,70],
[57,0,62,68,61,57,71,72,55],
[61,69,0,68,68,57,65,63,64],
[62,63,63,0,62,56,62,66,58],
[68,70,63,69,0,58,71,65,68],
[59,74,74,75,73,0,81,77,76],
[58,60,66,69,60,50,0,65,57],
[55,59,68,65,66,54,66,0,61],
[61,76,67,73,63,55,74,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,56,68,59,70,61,63,65],
[64,0,59,68,53,73,67,65,70],
[75,72,0,76,55,75,65,64,73],
[63,63,55,0,56,70,59,66,63],
[72,78,76,75,0,77,77,66,65],
[61,58,56,61,54,0,58,56,59],
[70,64,66,72,54,73,0,61,68],
[68,66,67,65,65,75,70,0,75],
[66,61,58,68,66,72,63,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,66,59,56,65,71,44,65],
[99,0,87,78,64,91,82,81,73],
[65,44,0,52,61,64,52,49,61],
[72,53,79,0,80,66,83,73,71],
[75,67,70,51,0,65,71,53,82],
[66,40,67,65,66,0,71,65,75],
[60,49,79,48,60,60,0,59,75],
[87,50,82,58,78,66,72,0,81],
[66,58,70,60,49,56,56,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,77,60,68,75,64,63,67],
[61,0,68,66,65,75,70,63,69],
[54,63,0,62,60,69,57,55,62],
[71,65,69,0,70,72,64,63,76],
[63,66,71,61,0,74,66,67,68],
[56,56,62,59,57,0,59,62,63],
[67,61,74,67,65,72,0,67,64],
[68,68,76,68,64,69,64,0,71],
[64,62,69,55,63,68,67,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,94,75,58,97,58,69,86],
[59,0,79,82,67,90,76,77,89],
[37,52,0,59,32,75,51,69,70],
[56,49,72,0,57,84,80,90,80],
[73,64,99,74,0,87,64,74,93],
[34,41,56,47,44,0,47,40,47],
[73,55,80,51,67,84,0,67,93],
[62,54,62,41,57,91,64,0,69],
[45,42,61,51,38,84,38,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,59,56,62,57,62,53,63],
[60,0,64,52,79,59,64,54,70],
[72,67,0,67,66,69,82,62,73],
[75,79,64,0,83,68,83,74,80],
[69,52,65,48,0,67,58,58,58],
[74,72,62,63,64,0,63,59,69],
[69,67,49,48,73,68,0,58,79],
[78,77,69,57,73,72,73,0,85],
[68,61,58,51,73,62,52,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,64,66,54,68,57,76,69],
[48,0,43,47,39,56,40,58,58],
[67,88,0,50,60,71,57,54,73],
[65,84,81,0,61,86,68,96,75],
[77,92,71,70,0,56,74,89,91],
[63,75,60,45,75,0,57,77,66],
[74,91,74,63,57,74,0,82,74],
[55,73,77,35,42,54,49,0,54],
[62,73,58,56,40,65,57,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,68,65,67,65,63,66,64],
[62,0,63,65,64,64,64,61,70],
[63,68,0,72,60,65,67,67,64],
[66,66,59,0,74,68,70,73,69],
[64,67,71,57,0,64,60,71,71],
[66,67,66,63,67,0,62,68,65],
[68,67,64,61,71,69,0,66,66],
[65,70,64,58,60,63,65,0,58],
[67,61,67,62,60,66,65,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,61,74,59,66,69,59,69],
[68,0,61,68,62,70,60,70,72],
[70,70,0,59,58,70,71,76,67],
[57,63,72,0,66,67,73,64,77],
[72,69,73,65,0,74,77,73,80],
[65,61,61,64,57,0,67,60,78],
[62,71,60,58,54,64,0,57,81],
[72,61,55,67,58,71,74,0,71],
[62,59,64,54,51,53,50,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,39,39,18,19,19,39,59],
[73,0,38,74,55,38,37,74,77],
[92,93,0,74,92,55,74,74,94],
[92,57,57,0,36,37,37,55,57],
[113,76,39,95,0,57,19,56,78],
[112,93,76,94,74,0,57,94,77],
[112,94,57,94,112,74,0,74,59],
[92,57,57,76,75,37,57,0,59],
[72,54,37,74,53,54,72,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,63,50,33,62,57,61,67],
[90,0,65,81,69,72,72,68,90],
[68,66,0,52,58,72,74,65,75],
[81,50,79,0,68,66,65,78,63],
[98,62,73,63,0,66,91,88,76],
[69,59,59,65,65,0,64,81,68],
[74,59,57,66,40,67,0,60,66],
[70,63,66,53,43,50,71,0,67],
[64,41,56,68,55,63,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,66,66,70,60,68,77,76],
[60,0,65,63,67,62,63,70,68],
[65,66,0,65,70,65,67,71,70],
[65,68,66,0,67,64,73,68,64],
[61,64,61,64,0,63,70,67,66],
[71,69,66,67,68,0,66,70,65],
[63,68,64,58,61,65,0,61,60],
[54,61,60,63,64,61,70,0,58],
[55,63,61,67,65,66,71,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,53,57,58,54,62,58,51],
[78,0,63,52,66,65,64,61,62],
[78,68,0,70,60,67,70,71,54],
[74,79,61,0,71,66,79,63,66],
[73,65,71,60,0,66,75,65,57],
[77,66,64,65,65,0,69,68,65],
[69,67,61,52,56,62,0,66,59],
[73,70,60,68,66,63,65,0,68],
[80,69,77,65,74,66,72,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,67,77,67,49,60,62,64],
[77,0,79,81,67,69,69,65,65],
[64,52,0,66,55,55,48,60,50],
[54,50,65,0,52,49,51,56,46],
[64,64,76,79,0,58,61,66,70],
[82,62,76,82,73,0,50,67,66],
[71,62,83,80,70,81,0,71,62],
[69,66,71,75,65,64,60,0,58],
[67,66,81,85,61,65,69,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,57,46,50,63,66,60,57],
[85,0,75,72,78,68,76,63,75],
[74,56,0,60,68,78,72,68,66],
[85,59,71,0,61,71,77,59,64],
[81,53,63,70,0,61,65,56,53],
[68,63,53,60,70,0,57,48,63],
[65,55,59,54,66,74,0,54,62],
[71,68,63,72,75,83,77,0,65],
[74,56,65,67,78,68,69,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,70,56,57,61,72,65,60],
[62,0,57,60,58,49,64,58,59],
[61,74,0,59,49,56,65,55,66],
[75,71,72,0,73,53,78,62,62],
[74,73,82,58,0,73,74,75,68],
[70,82,75,78,58,0,72,81,71],
[59,67,66,53,57,59,0,61,62],
[66,73,76,69,56,50,70,0,74],
[71,72,65,69,63,60,69,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,64,73,76,77,51,55,76],
[76,0,77,80,87,70,65,59,65],
[67,54,0,71,64,51,49,66,67],
[58,51,60,0,79,71,55,45,57],
[55,44,67,52,0,55,48,45,58],
[54,61,80,60,76,0,37,55,57],
[80,66,82,76,83,94,0,58,58],
[76,72,65,86,86,76,73,0,73],
[55,66,64,74,73,74,73,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,62,57,57,58,56,58,74],
[71,0,61,59,56,69,64,61,76],
[69,70,0,60,58,70,72,68,80],
[74,72,71,0,63,70,63,70,80],
[74,75,73,68,0,65,76,72,74],
[73,62,61,61,66,0,74,69,73],
[75,67,59,68,55,57,0,65,73],
[73,70,63,61,59,62,66,0,78],
[57,55,51,51,57,58,58,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,58,62,47,63,64,60,53],
[60,0,54,66,60,67,72,63,63],
[73,77,0,69,47,65,68,66,59],
[69,65,62,0,41,50,60,60,59],
[84,71,84,90,0,62,78,76,69],
[68,64,66,81,69,0,71,71,69],
[67,59,63,71,53,60,0,67,53],
[71,68,65,71,55,60,64,0,66],
[78,68,72,72,62,62,78,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,67,64,67,61,65,55,65],
[72,0,67,68,71,72,72,63,66],
[64,64,0,76,68,61,65,71,70],
[67,63,55,0,64,66,60,64,58],
[64,60,63,67,0,69,59,63,68],
[70,59,70,65,62,0,70,56,67],
[66,59,66,71,72,61,0,60,70],
[76,68,60,67,68,75,71,0,65],
[66,65,61,73,63,64,61,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,63,74,72,66,74,83,65],
[43,0,59,74,57,59,81,66,64],
[68,72,0,69,62,60,84,82,66],
[57,57,62,0,43,62,68,76,63],
[59,74,69,88,0,70,88,90,77],
[65,72,71,69,61,0,77,72,67],
[57,50,47,63,43,54,0,60,43],
[48,65,49,55,41,59,71,0,58],
[66,67,65,68,54,64,88,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,64,70,60,62,67,71,70],
[67,0,82,56,68,71,65,72,77],
[67,49,0,56,56,58,60,60,65],
[61,75,75,0,68,59,56,69,67],
[71,63,75,63,0,55,53,67,61],
[69,60,73,72,76,0,68,64,64],
[64,66,71,75,78,63,0,69,69],
[60,59,71,62,64,67,62,0,57],
[61,54,66,64,70,67,62,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,78,69,72,66,64,86,71],
[72,0,64,83,77,71,70,77,76],
[53,67,0,76,68,49,60,63,68],
[62,48,55,0,64,62,62,65,64],
[59,54,63,67,0,59,54,69,67],
[65,60,82,69,72,0,56,76,74],
[67,61,71,69,77,75,0,84,70],
[45,54,68,66,62,55,47,0,53],
[60,55,63,67,64,57,61,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,70,54,86,59,61,70,71],
[72,0,78,61,82,62,72,65,53],
[61,53,0,53,70,61,80,68,58],
[77,70,78,0,70,72,63,75,49],
[45,49,61,61,0,66,60,71,43],
[72,69,70,59,65,0,73,72,57],
[70,59,51,68,71,58,0,84,59],
[61,66,63,56,60,59,47,0,44],
[60,78,73,82,88,74,72,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,76,62,55,62,66,65,66],
[71,0,80,73,62,80,77,66,62],
[55,51,0,60,66,64,67,56,65],
[69,58,71,0,77,67,77,54,59],
[76,69,65,54,0,81,80,72,62],
[69,51,67,64,50,0,72,55,63],
[65,54,64,54,51,59,0,57,53],
[66,65,75,77,59,76,74,0,74],
[65,69,66,72,69,68,78,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,71,65,60,64,44,76,65],
[69,0,80,67,58,63,53,67,60],
[60,51,0,57,54,45,41,67,55],
[66,64,74,0,64,57,53,67,68],
[71,73,77,67,0,66,57,79,63],
[67,68,86,74,65,0,57,79,64],
[87,78,90,78,74,74,0,87,62],
[55,64,64,64,52,52,44,0,56],
[66,71,76,63,68,67,69,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,76,72,66,74,64,94,69],
[64,0,66,74,63,77,56,74,66],
[55,65,0,61,64,66,64,71,72],
[59,57,70,0,66,55,57,70,59],
[65,68,67,65,0,69,80,74,79],
[57,54,65,76,62,0,49,66,63],
[67,75,67,74,51,82,0,74,63],
[37,57,60,61,57,65,57,0,53],
[62,65,59,72,52,68,68,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,85,53,78,75,77,75,45],
[70,0,87,53,77,68,83,61,71],
[46,44,0,61,62,74,75,22,63],
[78,78,70,0,62,60,83,61,46],
[53,54,69,69,0,66,94,53,45],
[56,63,57,71,65,0,70,53,63],
[54,48,56,48,37,61,0,47,54],
[56,70,109,70,78,78,84,0,54],
[86,60,68,85,86,68,77,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,52,76,69,86,79,76,62],
[76,0,57,75,61,75,86,69,59],
[79,74,0,76,55,78,86,67,81],
[55,56,55,0,63,62,66,55,70],
[62,70,76,68,0,80,75,77,70],
[45,56,53,69,51,0,57,59,54],
[52,45,45,65,56,74,0,56,52],
[55,62,64,76,54,72,75,0,71],
[69,72,50,61,61,77,79,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,50,48,59,70,53,59,67],
[64,0,61,76,75,68,66,69,62],
[81,70,0,68,74,70,64,65,81],
[83,55,63,0,67,83,63,63,68],
[72,56,57,64,0,67,52,50,67],
[61,63,61,48,64,0,50,57,70],
[78,65,67,68,79,81,0,67,79],
[72,62,66,68,81,74,64,0,68],
[64,69,50,63,64,61,52,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,70,60,50,61,62,54,56],
[69,0,68,64,60,73,69,61,52],
[61,63,0,61,56,53,56,49,57],
[71,67,70,0,71,69,64,65,64],
[81,71,75,60,0,76,71,54,59],
[70,58,78,62,55,0,69,61,66],
[69,62,75,67,60,62,0,67,62],
[77,70,82,66,77,70,64,0,69],
[75,79,74,67,72,65,69,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,69,63,71,67,71,77,76],
[65,0,69,58,65,61,68,66,69],
[62,62,0,60,53,64,72,59,76],
[68,73,71,0,70,72,65,72,79],
[60,66,78,61,0,72,72,75,71],
[64,70,67,59,59,0,69,71,78],
[60,63,59,66,59,62,0,65,74],
[54,65,72,59,56,60,66,0,68],
[55,62,55,52,60,53,57,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,56,64,69,75,67,79,66],
[54,0,72,67,71,65,58,76,60],
[75,59,0,63,64,82,66,73,64],
[67,64,68,0,75,71,62,71,59],
[62,60,67,56,0,62,59,71,56],
[56,66,49,60,69,0,54,77,66],
[64,73,65,69,72,77,0,73,68],
[52,55,58,60,60,54,58,0,62],
[65,71,67,72,75,65,63,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,67,72,59,57,79,89,85],
[62,0,71,57,58,58,52,68,70],
[64,60,0,62,52,51,53,72,62],
[59,74,69,0,54,63,56,75,84],
[72,73,79,77,0,68,60,89,76],
[74,73,80,68,63,0,70,86,86],
[52,79,78,75,71,61,0,84,85],
[42,63,59,56,42,45,47,0,69],
[46,61,69,47,55,45,46,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,61,64,66,61,65,63,72],
[61,0,54,61,67,64,61,63,62],
[70,77,0,76,74,68,71,55,67],
[67,70,55,0,61,56,58,57,62],
[65,64,57,70,0,64,68,57,64],
[70,67,63,75,67,0,72,62,72],
[66,70,60,73,63,59,0,66,63],
[68,68,76,74,74,69,65,0,66],
[59,69,64,69,67,59,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,67,70,68,66,68,68,67],
[70,0,62,61,63,61,64,67,60],
[64,69,0,65,65,64,66,66,67],
[61,70,66,0,64,62,70,66,64],
[63,68,66,67,0,68,66,65,62],
[65,70,67,69,63,0,69,73,68],
[63,67,65,61,65,62,0,64,57],
[63,64,65,65,66,58,67,0,59],
[64,71,64,67,69,63,74,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,80,49,70,70,83,59,59],
[70,0,50,81,70,40,52,60,58],
[51,81,0,71,71,70,71,89,68],
[82,50,60,0,51,80,72,59,59],
[61,61,60,80,0,71,82,81,59],
[61,91,61,51,60,0,52,89,80],
[48,79,60,59,49,79,0,78,68],
[72,71,42,72,50,42,53,0,59],
[72,73,63,72,72,51,63,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,59,61,69,67,65,60,67],
[61,0,48,66,80,59,62,70,59],
[72,83,0,64,76,70,65,73,69],
[70,65,67,0,78,64,72,70,71],
[62,51,55,53,0,53,71,55,60],
[64,72,61,67,78,0,74,69,67],
[66,69,66,59,60,57,0,70,61],
[71,61,58,61,76,62,61,0,67],
[64,72,62,60,71,64,70,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,79,105,79,53,53,78,79],
[53,0,79,53,79,27,53,53,27],
[52,52,0,53,79,53,53,26,53],
[26,78,78,0,26,79,79,52,52],
[52,52,52,105,0,53,53,52,52],
[78,104,78,52,78,0,52,104,52],
[78,78,78,52,78,79,0,52,52],
[53,78,105,79,79,27,79,0,79],
[52,104,78,79,79,79,79,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,56,61,55,52,57,71,56],
[71,0,70,67,59,55,68,69,61],
[75,61,0,67,60,52,66,67,62],
[70,64,64,0,65,56,66,69,60],
[76,72,71,66,0,60,69,84,69],
[79,76,79,75,71,0,76,75,64],
[74,63,65,65,62,55,0,76,64],
[60,62,64,62,47,56,55,0,57],
[75,70,69,71,62,67,67,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,57,54,56,48,64,63,54],
[78,0,64,77,77,69,79,69,70],
[74,67,0,63,73,64,68,67,68],
[77,54,68,0,72,72,74,72,59],
[75,54,58,59,0,63,59,62,55],
[83,62,67,59,68,0,70,68,69],
[67,52,63,57,72,61,0,64,63],
[68,62,64,59,69,63,67,0,65],
[77,61,63,72,76,62,68,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,74,63,61,49,73,61,53],
[78,0,76,71,72,55,73,62,53],
[57,55,0,73,52,40,55,62,48],
[68,60,58,0,57,46,61,68,48],
[70,59,79,74,0,46,67,53,46],
[82,76,91,85,85,0,81,68,63],
[58,58,76,70,64,50,0,48,57],
[70,69,69,63,78,63,83,0,70],
[78,78,83,83,85,68,74,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,53,57,55,58,64,64,63],
[61,0,61,33,56,68,49,49,62],
[78,70,0,59,63,60,54,76,65],
[74,98,72,0,58,78,66,80,88],
[76,75,68,73,0,90,64,67,70],
[73,63,71,53,41,0,60,63,77],
[67,82,77,65,67,71,0,62,72],
[67,82,55,51,64,68,69,0,69],
[68,69,66,43,61,54,59,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,71,60,62,72,58,66],
[62,0,61,64,64,66,62,56,63],
[66,70,0,67,59,76,75,70,69],
[60,67,64,0,55,58,59,56,52],
[71,67,72,76,0,67,61,66,57],
[69,65,55,73,64,0,58,63,64],
[59,69,56,72,70,73,0,67,70],
[73,75,61,75,65,68,64,0,64],
[65,68,62,79,74,67,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,56,60,54,72,65,61,65],
[77,0,75,66,67,73,72,66,62],
[75,56,0,64,60,67,65,57,68],
[71,65,67,0,70,71,71,68,68],
[77,64,71,61,0,76,73,68,68],
[59,58,64,60,55,0,53,54,67],
[66,59,66,60,58,78,0,63,69],
[70,65,74,63,63,77,68,0,79],
[66,69,63,63,63,64,62,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,56,59,71,66,70,49,43],
[63,0,66,61,77,70,67,66,69],
[75,65,0,58,68,57,61,50,57],
[72,70,73,0,78,79,76,66,60],
[60,54,63,53,0,63,58,44,60],
[65,61,74,52,68,0,59,55,50],
[61,64,70,55,73,72,0,52,64],
[82,65,81,65,87,76,79,0,70],
[88,62,74,71,71,81,67,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,76,65,67,72,61,77,70],
[58,0,60,60,59,54,62,58,64],
[55,71,0,62,63,61,54,59,65],
[66,71,69,0,68,68,66,63,62],
[64,72,68,63,0,67,60,64,66],
[59,77,70,63,64,0,62,60,63],
[70,69,77,65,71,69,0,69,66],
[54,73,72,68,67,71,62,0,67],
[61,67,66,69,65,68,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,53,56,49,82,86,55,65],
[82,0,48,77,68,75,65,41,69],
[78,83,0,70,45,93,75,63,70],
[75,54,61,0,53,63,75,61,55],
[82,63,86,78,0,79,65,54,62],
[49,56,38,68,52,0,55,51,52],
[45,66,56,56,66,76,0,66,65],
[76,90,68,70,77,80,65,0,71],
[66,62,61,76,69,79,66,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,60,66,60,56,66,70,66],
[77,0,67,74,74,62,75,84,89],
[71,64,0,70,65,68,70,81,71],
[65,57,61,0,53,51,64,77,67],
[71,57,66,78,0,65,78,71,84],
[75,69,63,80,66,0,69,81,79],
[65,56,61,67,53,62,0,72,60],
[61,47,50,54,60,50,59,0,61],
[65,42,60,64,47,52,71,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,61,62,55,61,54,58,81],
[65,0,63,72,70,59,65,57,78],
[70,68,0,56,57,69,71,58,75],
[69,59,75,0,70,63,63,56,76],
[76,61,74,61,0,69,59,66,80],
[70,72,62,68,62,0,62,51,73],
[77,66,60,68,72,69,0,60,84],
[73,74,73,75,65,80,71,0,84],
[50,53,56,55,51,58,47,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,70,67,64,52,53,87,71],
[55,0,60,74,56,57,65,85,83],
[61,71,0,77,68,54,70,85,74],
[64,57,54,0,68,62,77,85,81],
[67,75,63,63,0,76,58,90,65],
[79,74,77,69,55,0,78,101,78],
[78,66,61,54,73,53,0,90,77],
[44,46,46,46,41,30,41,0,49],
[60,48,57,50,66,53,54,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,43,0,131,131,43,0,86],
[88,0,88,88,131,88,88,45,131],
[88,43,0,88,131,88,88,45,43],
[131,43,43,0,131,131,43,88,86],
[0,0,0,0,0,45,0,0,0],
[0,43,43,0,86,0,43,0,86],
[88,43,43,88,131,88,0,88,43],
[131,86,86,43,131,131,43,0,86],
[45,0,88,45,131,45,88,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,59,59,47,45,49,55,58],
[64,0,53,76,66,68,51,48,59],
[72,78,0,79,79,81,71,72,54],
[72,55,52,0,73,67,55,54,50],
[84,65,52,58,0,72,64,67,64],
[86,63,50,64,59,0,64,63,57],
[82,80,60,76,67,67,0,63,65],
[76,83,59,77,64,68,68,0,73],
[73,72,77,81,67,74,66,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,62,56,73,59,56,57,65],
[69,0,72,68,85,78,65,68,70],
[69,59,0,61,59,67,62,64,66],
[75,63,70,0,69,70,69,56,72],
[58,46,72,62,0,68,58,63,65],
[72,53,64,61,63,0,55,48,67],
[75,66,69,62,73,76,0,71,77],
[74,63,67,75,68,83,60,0,69],
[66,61,65,59,66,64,54,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,76,76,90,65,85,71,81],
[64,0,77,73,79,71,82,67,80],
[55,54,0,51,66,73,71,70,55],
[55,58,80,0,82,78,82,85,77],
[41,52,65,49,0,67,64,75,62],
[66,60,58,53,64,0,72,63,63],
[46,49,60,49,67,59,0,51,70],
[60,64,61,46,56,68,80,0,62],
[50,51,76,54,69,68,61,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,79,69,65,58,64,70,51],
[62,0,69,73,55,50,64,73,62],
[52,62,0,72,56,72,48,58,49],
[62,58,59,0,61,52,57,64,63],
[66,76,75,70,0,54,71,79,75],
[73,81,59,79,77,0,70,77,68],
[67,67,83,74,60,61,0,72,70],
[61,58,73,67,52,54,59,0,52],
[80,69,82,68,56,63,61,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,51,77,67,64,71,54,55],
[72,0,70,69,86,67,77,58,62],
[80,61,0,67,82,80,91,72,72],
[54,62,64,0,68,50,73,56,58],
[64,45,49,63,0,49,62,56,48],
[67,64,51,81,82,0,78,69,71],
[60,54,40,58,69,53,0,61,73],
[77,73,59,75,75,62,70,0,61],
[76,69,59,73,83,60,58,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,57,64,66,64,53,58],
[63,0,63,58,63,64,66,60,57],
[67,68,0,73,62,72,62,62,57],
[74,73,58,0,67,69,73,64,66],
[67,68,69,64,0,69,68,59,60],
[65,67,59,62,62,0,70,62,65],
[67,65,69,58,63,61,0,59,59],
[78,71,69,67,72,69,72,0,61],
[73,74,74,65,71,66,72,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,57,63,65,72,77,58,71],
[62,0,64,55,55,74,72,60,56],
[74,67,0,62,65,74,70,73,64],
[68,76,69,0,66,63,84,70,67],
[66,76,66,65,0,73,73,60,64],
[59,57,57,68,58,0,66,52,66],
[54,59,61,47,58,65,0,50,49],
[73,71,58,61,71,79,81,0,66],
[60,75,67,64,67,65,82,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,65,67,58,60,73,62,57],
[74,0,70,68,64,70,76,68,60],
[66,61,0,56,59,58,66,61,57],
[64,63,75,0,62,64,72,68,60],
[73,67,72,69,0,71,67,69,63],
[71,61,73,67,60,0,71,67,60],
[58,55,65,59,64,60,0,62,59],
[69,63,70,63,62,64,69,0,67],
[74,71,74,71,68,71,72,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,61,66,62,65,65,74,64],
[66,0,69,65,63,62,67,68,67],
[70,62,0,65,65,66,72,74,66],
[65,66,66,0,59,64,71,70,62],
[69,68,66,72,0,67,59,75,73],
[66,69,65,67,64,0,72,69,66],
[66,64,59,60,72,59,0,69,68],
[57,63,57,61,56,62,62,0,67],
[67,64,65,69,58,65,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,42,77,72,75,95,68,88],
[67,0,67,77,67,75,73,58,75],
[89,64,0,93,96,97,88,87,82],
[54,54,38,0,68,55,70,55,83],
[59,64,35,63,0,61,68,51,74],
[56,56,34,76,70,0,84,55,59],
[36,58,43,61,63,47,0,57,59],
[63,73,44,76,80,76,74,0,97],
[43,56,49,48,57,72,72,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,59,51,73,60,82,79,71],
[54,0,57,53,49,61,51,56,69],
[72,74,0,85,65,66,74,69,73],
[80,78,46,0,75,66,85,62,81],
[58,82,66,56,0,65,73,63,77],
[71,70,65,65,66,0,72,75,80],
[49,80,57,46,58,59,0,68,66],
[52,75,62,69,68,56,63,0,59],
[60,62,58,50,54,51,65,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,73,61,60,65,68,63],
[66,0,75,80,66,62,71,70,71],
[66,56,0,71,63,65,64,73,56],
[58,51,60,0,67,55,62,61,68],
[70,65,68,64,0,58,71,74,65],
[71,69,66,76,73,0,75,69,64],
[66,60,67,69,60,56,0,64,60],
[63,61,58,70,57,62,67,0,68],
[68,60,75,63,66,67,71,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,74,81,93,54,82,63,73],
[41,0,47,31,67,41,61,55,54],
[57,84,0,63,95,56,65,83,64],
[50,100,68,0,104,66,72,81,82],
[38,64,36,27,0,17,26,52,62],
[77,90,75,65,114,0,71,84,90],
[49,70,66,59,105,60,0,95,67],
[68,76,48,50,79,47,36,0,75],
[58,77,67,49,69,41,64,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,69,55,59,62,51,67,52],
[74,0,77,59,82,60,55,72,66],
[62,54,0,44,57,50,62,71,50],
[76,72,87,0,69,59,62,76,60],
[72,49,74,62,0,49,52,71,61],
[69,71,81,72,82,0,55,87,55],
[80,76,69,69,79,76,0,75,61],
[64,59,60,55,60,44,56,0,53],
[79,65,81,71,70,76,70,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,76,64,61,75,74,71,72],
[73,0,100,85,75,90,61,95,68],
[55,31,0,55,33,53,28,56,44],
[67,46,76,0,61,80,52,82,53],
[70,56,98,70,0,68,56,92,68],
[56,41,78,51,63,0,50,73,55],
[57,70,103,79,75,81,0,89,66],
[60,36,75,49,39,58,42,0,41],
[59,63,87,78,63,76,65,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,59,63,59,54,64,64,56],
[72,0,54,74,73,56,66,75,55],
[72,77,0,73,64,60,69,61,64],
[68,57,58,0,56,53,61,69,62],
[72,58,67,75,0,63,71,73,61],
[77,75,71,78,68,0,61,62,65],
[67,65,62,70,60,70,0,68,68],
[67,56,70,62,58,69,63,0,58],
[75,76,67,69,70,66,63,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,71,66,61,57,75,64,65],
[71,0,74,55,68,71,81,82,73],
[60,57,0,63,61,65,71,63,72],
[65,76,68,0,74,68,79,74,78],
[70,63,70,57,0,67,64,67,68],
[74,60,66,63,64,0,67,68,64],
[56,50,60,52,67,64,0,66,74],
[67,49,68,57,64,63,65,0,62],
[66,58,59,53,63,67,57,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,64,71,82,73,80,66,65],
[58,0,57,59,67,62,72,64,57],
[67,74,0,61,74,62,70,71,53],
[60,72,70,0,75,69,78,69,62],
[49,64,57,56,0,46,70,62,57],
[58,69,69,62,85,0,72,69,66],
[51,59,61,53,61,59,0,63,58],
[65,67,60,62,69,62,68,0,61],
[66,74,78,69,74,65,73,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,58,76,68,65,77,64,68],
[59,0,59,78,75,77,71,63,68],
[73,72,0,70,78,73,66,63,77],
[55,53,61,0,64,59,67,65,70],
[63,56,53,67,0,56,54,68,67],
[66,54,58,72,75,0,64,66,64],
[54,60,65,64,77,67,0,58,66],
[67,68,68,66,63,65,73,0,66],
[63,63,54,61,64,67,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,61,67,79,97,60,61,63],
[60,0,53,71,59,83,57,43,57],
[70,78,0,60,63,83,61,51,58],
[64,60,71,0,77,86,76,73,85],
[52,72,68,54,0,84,71,44,65],
[34,48,48,45,47,0,45,39,54],
[71,74,70,55,60,86,0,50,69],
[70,88,80,58,87,92,81,0,76],
[68,74,73,46,66,77,62,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,72,68,71,59,62,65,63],
[58,0,54,70,75,49,49,54,59],
[59,77,0,66,66,65,68,64,76],
[63,61,65,0,71,65,55,66,62],
[60,56,65,60,0,59,57,53,61],
[72,82,66,66,72,0,65,60,66],
[69,82,63,76,74,66,0,76,67],
[66,77,67,65,78,71,55,0,76],
[68,72,55,69,70,65,64,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,59,63,61,67,57,70,57],
[61,0,67,70,69,63,70,67,69],
[72,64,0,68,64,71,64,70,67],
[68,61,63,0,57,64,62,66,62],
[70,62,67,74,0,70,64,70,69],
[64,68,60,67,61,0,61,72,53],
[74,61,67,69,67,70,0,66,63],
[61,64,61,65,61,59,65,0,56],
[74,62,64,69,62,78,68,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,81,60,72,73,79,84],
[68,0,67,78,61,71,72,64,81],
[60,64,0,84,66,75,66,70,65],
[50,53,47,0,53,74,65,66,65],
[71,70,65,78,0,70,74,75,80],
[59,60,56,57,61,0,64,59,71],
[58,59,65,66,57,67,0,77,63],
[52,67,61,65,56,72,54,0,74],
[47,50,66,66,51,60,68,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,69,65,63,77,62,79,74],
[55,0,59,63,52,71,64,62,64],
[62,72,0,60,74,76,69,81,78],
[66,68,71,0,72,76,87,72,64],
[68,79,57,59,0,74,78,66,61],
[54,60,55,55,57,0,62,54,62],
[69,67,62,44,53,69,0,63,60],
[52,69,50,59,65,77,68,0,54],
[57,67,53,67,70,69,71,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,62,62,53,53,45,52,51],
[72,0,59,56,57,57,50,54,53],
[69,72,0,72,66,63,64,67,66],
[69,75,59,0,75,60,67,72,62],
[78,74,65,56,0,63,46,71,54],
[78,74,68,71,68,0,86,62,75],
[86,81,67,64,85,45,0,61,54],
[79,77,64,59,60,69,70,0,59],
[80,78,65,69,77,56,77,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,63,72,73,61,72,67,67],
[68,0,63,66,69,73,64,71,64],
[68,68,0,64,69,70,67,71,69],
[59,65,67,0,64,62,63,59,65],
[58,62,62,67,0,65,68,64,69],
[70,58,61,69,66,0,64,68,67],
[59,67,64,68,63,67,0,71,63],
[64,60,60,72,67,63,60,0,61],
[64,67,62,66,62,64,68,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,67,64,56,86,43,75,54],
[74,0,50,60,83,85,50,72,84],
[64,81,0,78,58,83,68,89,76],
[67,71,53,0,67,99,68,82,68],
[75,48,73,64,0,71,44,76,76],
[45,46,48,32,60,0,40,70,44],
[88,81,63,63,87,91,0,92,75],
[56,59,42,49,55,61,39,0,57],
[77,47,55,63,55,87,56,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,61,69,70,87,61,56,71],
[30,0,30,40,34,24,58,34,41],
[70,101,0,63,86,72,79,63,63],
[62,91,68,0,69,71,56,71,57],
[61,97,45,62,0,70,64,73,56],
[44,107,59,60,61,0,69,48,71],
[70,73,52,75,67,62,0,72,45],
[75,97,68,60,58,83,59,0,53],
[60,90,68,74,75,60,86,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,59,68,50,68,70,57,67],
[65,0,65,69,47,67,79,66,68],
[72,66,0,75,55,74,77,73,67],
[63,62,56,0,55,53,65,61,58],
[81,84,76,76,0,73,81,73,62],
[63,64,57,78,58,0,74,72,64],
[61,52,54,66,50,57,0,60,54],
[74,65,58,70,58,59,71,0,59],
[64,63,64,73,69,67,77,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,58,61,76,66,84,65,66],
[59,0,58,60,69,56,65,56,56],
[73,73,0,70,68,63,73,69,70],
[70,71,61,0,69,61,76,62,61],
[55,62,63,62,0,57,63,57,60],
[65,75,68,70,74,0,76,69,71],
[47,66,58,55,68,55,0,58,53],
[66,75,62,69,74,62,73,0,71],
[65,75,61,70,71,60,78,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,59,68,71,59,80,69,79],
[58,0,67,70,72,67,76,75,74],
[72,64,0,66,74,55,70,60,75],
[63,61,65,0,60,62,70,59,75],
[60,59,57,71,0,57,74,52,65],
[72,64,76,69,74,0,74,67,75],
[51,55,61,61,57,57,0,51,56],
[62,56,71,72,79,64,80,0,70],
[52,57,56,56,66,56,75,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,63,60,62,68,56,58,51],
[62,0,65,52,51,59,52,62,55],
[68,66,0,69,66,62,57,52,65],
[71,79,62,0,72,73,65,52,70],
[69,80,65,59,0,63,67,58,66],
[63,72,69,58,68,0,72,68,59],
[75,79,74,66,64,59,0,64,62],
[73,69,79,79,73,63,67,0,58],
[80,76,66,61,65,72,69,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,68,74,65,73,62,59,66],
[55,0,57,63,64,69,62,61,59],
[63,74,0,61,73,78,62,53,54],
[57,68,70,0,65,72,60,61,52],
[66,67,58,66,0,63,50,68,53],
[58,62,53,59,68,0,51,62,53],
[69,69,69,71,81,80,0,75,57],
[72,70,78,70,63,69,56,0,66],
[65,72,77,79,78,78,74,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,68,73,66,70,60,63,66],
[66,0,75,81,55,82,74,65,72],
[63,56,0,71,54,61,57,63,62],
[58,50,60,0,51,69,61,63,70],
[65,76,77,80,0,79,66,69,69],
[61,49,70,62,52,0,57,54,66],
[71,57,74,70,65,74,0,66,72],
[68,66,68,68,62,77,65,0,79],
[65,59,69,61,62,65,59,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,69,72,65,68,75,64,77],
[58,0,71,66,61,69,66,60,66],
[62,60,0,64,62,76,61,68,63],
[59,65,67,0,67,75,60,68,72],
[66,70,69,64,0,80,73,69,71],
[63,62,55,56,51,0,59,56,60],
[56,65,70,71,58,72,0,64,69],
[67,71,63,63,62,75,67,0,79],
[54,65,68,59,60,71,62,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,54,57,58,64,67,65,70],
[59,0,67,57,71,63,62,67,54],
[77,64,0,69,83,66,61,70,69],
[74,74,62,0,62,70,68,59,73],
[73,60,48,69,0,59,56,62,67],
[67,68,65,61,72,0,64,69,67],
[64,69,70,63,75,67,0,69,73],
[66,64,61,72,69,62,62,0,64],
[61,77,62,58,64,64,58,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,64,63,61,58,71,66,77],
[60,0,64,59,59,60,65,59,67],
[67,67,0,66,61,60,68,60,68],
[68,72,65,0,66,56,70,60,76],
[70,72,70,65,0,67,64,73,71],
[73,71,71,75,64,0,66,69,79],
[60,66,63,61,67,65,0,66,75],
[65,72,71,71,58,62,65,0,68],
[54,64,63,55,60,52,56,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,65,70,73,74,70,67],
[62,0,67,60,65,76,61,69,68],
[60,64,0,60,59,64,67,61,62],
[66,71,71,0,66,78,66,69,63],
[61,66,72,65,0,73,72,72,67],
[58,55,67,53,58,0,59,58,59],
[57,70,64,65,59,72,0,69,64],
[61,62,70,62,59,73,62,0,65],
[64,63,69,68,64,72,67,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,70,80,79,68,74,63,62],
[78,0,77,83,87,65,81,69,68],
[61,54,0,69,68,57,66,53,58],
[51,48,62,0,66,51,62,53,51],
[52,44,63,65,0,60,63,52,55],
[63,66,74,80,71,0,72,61,64],
[57,50,65,69,68,59,0,66,60],
[68,62,78,78,79,70,65,0,68],
[69,63,73,80,76,67,71,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,60,68,59,74,64,71,61],
[64,0,60,70,58,69,63,77,61],
[71,71,0,81,65,73,70,75,72],
[63,61,50,0,58,80,58,65,56],
[72,73,66,73,0,68,66,73,63],
[57,62,58,51,63,0,61,65,63],
[67,68,61,73,65,70,0,78,61],
[60,54,56,66,58,66,53,0,55],
[70,70,59,75,68,68,70,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,65,54,42,45,66,44,87],
[55,0,97,66,86,53,68,77,67],
[66,34,0,33,25,45,56,35,57],
[77,65,98,0,43,45,89,64,55],
[89,45,106,88,0,87,90,78,90],
[86,78,86,86,44,0,68,65,75],
[65,63,75,42,41,63,0,53,53],
[87,54,96,67,53,66,78,0,89],
[44,64,74,76,41,56,78,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,69,68,71,70,67,69,61],
[53,0,46,52,59,56,60,56,60],
[62,85,0,65,64,66,70,64,66],
[63,79,66,0,67,75,71,64,62],
[60,72,67,64,0,61,61,59,70],
[61,75,65,56,70,0,62,67,65],
[64,71,61,60,70,69,0,63,62],
[62,75,67,67,72,64,68,0,70],
[70,71,65,69,61,66,69,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,75,69,63,61,68,66,65],
[52,0,58,65,52,55,64,58,62],
[56,73,0,69,63,67,72,63,56],
[62,66,62,0,60,71,66,67,63],
[68,79,68,71,0,66,73,64,74],
[70,76,64,60,65,0,72,68,68],
[63,67,59,65,58,59,0,61,61],
[65,73,68,64,67,63,70,0,70],
[66,69,75,68,57,63,70,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,54,61,56,74,65,51,62],
[66,0,53,58,72,73,58,71,52],
[77,78,0,69,71,83,76,85,64],
[70,73,62,0,81,92,75,67,68],
[75,59,60,50,0,79,53,74,55],
[57,58,48,39,52,0,64,63,56],
[66,73,55,56,78,67,0,72,61],
[80,60,46,64,57,68,59,0,49],
[69,79,67,63,76,75,70,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,37,44,47,52,46,54,53],
[73,0,39,76,69,39,66,67,65],
[94,92,0,98,86,64,75,94,80],
[87,55,33,0,70,31,33,52,48],
[84,62,45,61,0,46,45,40,63],
[79,92,67,100,85,0,92,70,57],
[85,65,56,98,86,39,0,85,72],
[77,64,37,79,91,61,46,0,56],
[78,66,51,83,68,74,59,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,54,57,51,66,64,64,81],
[64,0,52,62,68,80,75,66,73],
[77,79,0,74,61,74,82,68,91],
[74,69,57,0,63,64,76,69,76],
[80,63,70,68,0,90,71,60,88],
[65,51,57,67,41,0,72,49,76],
[67,56,49,55,60,59,0,44,72],
[67,65,63,62,71,82,87,0,67],
[50,58,40,55,43,55,59,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,71,83,81,70,61,68,86],
[59,0,54,68,55,61,62,56,57],
[60,77,0,81,72,71,50,53,60],
[48,63,50,0,61,63,37,49,56],
[50,76,59,70,0,61,47,47,59],
[61,70,60,68,70,0,54,48,69],
[70,69,81,94,84,77,0,64,95],
[63,75,78,82,84,83,67,0,77],
[45,74,71,75,72,62,36,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,73,65,72,59,70,67,63],
[77,0,78,58,67,71,71,66,66],
[58,53,0,54,57,63,60,65,56],
[66,73,77,0,77,84,72,80,61],
[59,64,74,54,0,68,63,65,62],
[72,60,68,47,63,0,55,63,70],
[61,60,71,59,68,76,0,59,64],
[64,65,66,51,66,68,72,0,62],
[68,65,75,70,69,61,67,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,55,55,131,36,75,92,94],
[18,0,37,37,93,36,57,37,58],
[76,94,0,94,131,54,75,57,76],
[76,94,37,0,113,73,75,37,58],
[0,38,0,18,0,36,20,0,57],
[95,95,77,58,95,0,77,76,58],
[56,74,56,56,111,54,0,37,76],
[39,94,74,94,131,55,94,0,113],
[37,73,55,73,74,73,55,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,72,63,66,57,66,53,50],
[71,0,62,71,82,58,63,59,65],
[59,69,0,62,63,58,63,56,56],
[68,60,69,0,62,63,55,68,57],
[65,49,68,69,0,57,65,49,49],
[74,73,73,68,74,0,78,61,56],
[65,68,68,76,66,53,0,58,63],
[78,72,75,63,82,70,73,0,68],
[81,66,75,74,82,75,68,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,66,98,64,97,66,98,131],
[33,0,32,32,32,65,32,65,65],
[65,99,0,64,64,97,32,131,65],
[33,99,67,0,65,97,32,99,33],
[67,99,67,66,0,97,34,99,99],
[34,66,34,34,34,0,34,66,34],
[65,99,99,99,97,97,0,99,65],
[33,66,0,32,32,65,32,0,33],
[0,66,66,98,32,97,66,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,80,59,65,62,58,70,57],
[61,0,60,62,81,64,68,81,65],
[51,71,0,80,66,62,71,67,72],
[72,69,51,0,78,45,73,69,77],
[66,50,65,53,0,54,69,61,58],
[69,67,69,86,77,0,59,84,86],
[73,63,60,58,62,72,0,65,71],
[61,50,64,62,70,47,66,0,81],
[74,66,59,54,73,45,60,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,72,64,70,61,66,67,66],
[61,0,76,70,71,70,68,71,65],
[59,55,0,61,76,65,67,66,62],
[67,61,70,0,75,67,70,63,61],
[61,60,55,56,0,66,56,59,55],
[70,61,66,64,65,0,72,71,55],
[65,63,64,61,75,59,0,68,65],
[64,60,65,68,72,60,63,0,64],
[65,66,69,70,76,76,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,51,80,100,70,71,80,60],
[61,0,32,59,61,50,42,62,41],
[80,99,0,70,110,61,81,91,100],
[51,72,61,0,50,51,71,62,70],
[31,70,21,81,0,42,43,52,41],
[61,81,70,80,89,0,81,61,91],
[60,89,50,60,88,50,0,71,91],
[51,69,40,69,79,70,60,0,69],
[71,90,31,61,90,40,40,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,66,70,68,56,76,69,57],
[62,0,64,64,71,66,61,72,73],
[65,67,0,65,65,72,70,63,59],
[61,67,66,0,75,65,66,65,67],
[63,60,66,56,0,62,67,61,79],
[75,65,59,66,69,0,80,62,82],
[55,70,61,65,64,51,0,59,62],
[62,59,68,66,70,69,72,0,70],
[74,58,72,64,52,49,69,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,55,45,42,40,55,65,62],
[89,0,91,56,100,86,67,86,64],
[76,40,0,53,65,86,65,64,62],
[86,75,78,0,85,84,65,96,72],
[89,31,66,46,0,41,45,76,63],
[91,45,45,47,90,0,55,89,52],
[76,64,66,66,86,76,0,74,73],
[66,45,67,35,55,42,57,0,64],
[69,67,69,59,68,79,58,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,63,75,65,77,56,59,86],
[71,0,64,56,56,52,57,49,86],
[68,67,0,56,89,72,64,59,82],
[56,75,75,0,65,86,64,58,79],
[66,75,42,66,0,70,64,72,79],
[54,79,59,45,61,0,54,45,75],
[75,74,67,67,67,77,0,60,87],
[72,82,72,73,59,86,71,0,105],
[45,45,49,52,52,56,44,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,68,71,72,63,73,61,80],
[70,0,68,71,73,71,62,66,74],
[63,63,0,70,63,61,58,59,65],
[60,60,61,0,56,64,57,61,68],
[59,58,68,75,0,65,56,54,62],
[68,60,70,67,66,0,65,63,62],
[58,69,73,74,75,66,0,65,66],
[70,65,72,70,77,68,66,0,64],
[51,57,66,63,69,69,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,67,64,80,67,80,78],
[62,0,73,68,63,72,49,77,71],
[60,58,0,65,59,60,47,59,72],
[64,63,66,0,65,70,49,71,70],
[67,68,72,66,0,74,49,77,79],
[51,59,71,61,57,0,51,72,67],
[64,82,84,82,82,80,0,86,75],
[51,54,72,60,54,59,45,0,68],
[53,60,59,61,52,64,56,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,62,59,78,56,67,72,62],
[74,0,67,59,57,59,57,56,62],
[69,64,0,59,59,46,62,58,65],
[72,72,72,0,65,60,66,80,65],
[53,74,72,66,0,71,67,71,74],
[75,72,85,71,60,0,70,90,78],
[64,74,69,65,64,61,0,70,73],
[59,75,73,51,60,41,61,0,58],
[69,69,66,66,57,53,58,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,62,80,81,82,81,98,80],
[49,0,45,33,61,66,66,48,65],
[69,86,0,33,81,69,86,100,82],
[51,98,98,0,79,84,83,83,49],
[50,70,50,52,0,68,70,82,66],
[49,65,62,47,63,0,67,65,49],
[50,65,45,48,61,64,0,97,79],
[33,83,31,48,49,66,34,0,48],
[51,66,49,82,65,82,52,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,68,62,71,57,66,79,87],
[50,0,52,57,63,52,51,57,69],
[63,79,0,69,52,58,70,74,78],
[69,74,62,0,67,67,68,63,69],
[60,68,79,64,0,58,63,67,80],
[74,79,73,64,73,0,61,72,85],
[65,80,61,63,68,70,0,67,76],
[52,74,57,68,64,59,64,0,82],
[44,62,53,62,51,46,55,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,79,75,45,71,46,57,50],
[85,0,92,89,64,71,59,64,71],
[52,39,0,61,52,61,37,48,51],
[56,42,70,0,57,57,51,54,40],
[86,67,79,74,0,67,59,68,62],
[60,60,70,74,64,0,61,61,33],
[85,72,94,80,72,70,0,73,57],
[74,67,83,77,63,70,58,0,61],
[81,60,80,91,69,98,74,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,57,57,70,60,66,59,69],
[75,0,63,74,76,73,73,69,75],
[74,68,0,69,73,63,67,64,83],
[74,57,62,0,73,64,69,57,71],
[61,55,58,58,0,59,57,54,67],
[71,58,68,67,72,0,64,62,69],
[65,58,64,62,74,67,0,61,75],
[72,62,67,74,77,69,70,0,75],
[62,56,48,60,64,62,56,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,57,57,59,59,68,57,71],
[65,0,60,60,60,54,61,64,64],
[74,71,0,63,64,64,81,63,73],
[74,71,68,0,65,68,80,66,72],
[72,71,67,66,0,58,67,68,74],
[72,77,67,63,73,0,70,73,75],
[63,70,50,51,64,61,0,62,68],
[74,67,68,65,63,58,69,0,68],
[60,67,58,59,57,56,63,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,51,33,61,42,60,71,41],
[80,0,70,71,61,42,70,68,60],
[80,61,0,32,51,63,61,70,20],
[98,60,99,0,68,62,71,99,49],
[70,70,80,63,0,73,82,102,51],
[89,89,68,69,58,0,79,100,67],
[71,61,70,60,49,52,0,60,70],
[60,63,61,32,29,31,71,0,49],
[90,71,111,82,80,64,61,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,71,86,79,86,63,66,74],
[44,0,72,80,63,88,66,67,83],
[60,59,0,80,87,71,36,56,69],
[45,51,51,0,50,87,37,38,62],
[52,68,44,81,0,58,52,54,79],
[45,43,60,44,73,0,43,46,77],
[68,65,95,94,79,88,0,60,74],
[65,64,75,93,77,85,71,0,88],
[57,48,62,69,52,54,57,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,69,60,71,67,64,73,62],
[49,0,47,51,54,58,46,63,57],
[62,84,0,69,70,71,67,72,67],
[71,80,62,0,65,65,64,71,67],
[60,77,61,66,0,61,63,61,75],
[64,73,60,66,70,0,57,71,60],
[67,85,64,67,68,74,0,72,70],
[58,68,59,60,70,60,59,0,65],
[69,74,64,64,56,71,61,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,72,65,79,73,65,81,68],
[67,0,75,69,65,81,64,91,67],
[59,56,0,57,73,66,58,71,63],
[66,62,74,0,73,80,67,76,61],
[52,66,58,58,0,68,54,70,61],
[58,50,65,51,63,0,55,68,62],
[66,67,73,64,77,76,0,81,81],
[50,40,60,55,61,63,50,0,57],
[63,64,68,70,70,69,50,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,60,64,63,72,61,78,68],
[49,0,68,58,63,71,49,69,69],
[71,63,0,55,61,68,52,64,65],
[67,73,76,0,72,72,64,65,75],
[68,68,70,59,0,59,69,69,68],
[59,60,63,59,72,0,49,71,60],
[70,82,79,67,62,82,0,80,73],
[53,62,67,66,62,60,51,0,71],
[63,62,66,56,63,71,58,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,70,49,65,60,72,64,57],
[74,0,81,53,73,77,91,80,73],
[61,50,0,69,61,66,56,68,69],
[82,78,62,0,70,62,62,79,76],
[66,58,70,61,0,58,65,87,68],
[71,54,65,69,73,0,68,90,60],
[59,40,75,69,66,63,0,83,55],
[67,51,63,52,44,41,48,0,60],
[74,58,62,55,63,71,76,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,52,53,69,46,58,56,47],
[71,0,59,43,68,55,55,61,52],
[79,72,0,58,72,57,61,62,61],
[78,88,73,0,88,76,65,68,72],
[62,63,59,43,0,61,60,52,58],
[85,76,74,55,70,0,63,64,67],
[73,76,70,66,71,68,0,63,55],
[75,70,69,63,79,67,68,0,73],
[84,79,70,59,73,64,76,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,71,67,69,71,74,66,59],
[55,0,64,71,62,74,69,55,59],
[60,67,0,63,58,64,68,58,57],
[64,60,68,0,67,62,70,65,63],
[62,69,73,64,0,73,72,63,66],
[60,57,67,69,58,0,68,64,62],
[57,62,63,61,59,63,0,53,59],
[65,76,73,66,68,67,78,0,61],
[72,72,74,68,65,69,72,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,53,67,58,55,53,65,54],
[71,0,71,62,63,64,61,67,55],
[78,60,0,72,69,70,61,70,57],
[64,69,59,0,66,63,62,74,62],
[73,68,62,65,0,77,68,66,67],
[76,67,61,68,54,0,63,80,68],
[78,70,70,69,63,68,0,76,65],
[66,64,61,57,65,51,55,0,61],
[77,76,74,69,64,63,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,53,64,62,53,54,52,64],
[71,0,68,65,61,73,63,72,63],
[78,63,0,62,66,62,62,59,63],
[67,66,69,0,63,71,55,73,61],
[69,70,65,68,0,60,69,64,67],
[78,58,69,60,71,0,70,66,74],
[77,68,69,76,62,61,0,65,61],
[79,59,72,58,67,65,66,0,66],
[67,68,68,70,64,57,70,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,65,80,58,65,79,62,57],
[74,0,69,75,66,58,78,77,77],
[66,62,0,70,72,70,75,74,63],
[51,56,61,0,58,65,80,64,68],
[73,65,59,73,0,78,76,79,70],
[66,73,61,66,53,0,84,79,61],
[52,53,56,51,55,47,0,64,57],
[69,54,57,67,52,52,67,0,53],
[74,54,68,63,61,70,74,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,63,81,69,62,59,82,80],
[59,0,70,84,59,66,51,71,67],
[68,61,0,95,61,57,68,79,84],
[50,47,36,0,56,39,29,54,55],
[62,72,70,75,0,61,57,74,72],
[69,65,74,92,70,0,70,85,82],
[72,80,63,102,74,61,0,92,97],
[49,60,52,77,57,46,39,0,70],
[51,64,47,76,59,49,34,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,57,63,59,54,61,58,68],
[67,0,66,68,68,59,63,70,73],
[74,65,0,56,66,66,66,70,70],
[68,63,75,0,67,64,67,65,76],
[72,63,65,64,0,61,65,72,67],
[77,72,65,67,70,0,61,75,71],
[70,68,65,64,66,70,0,68,71],
[73,61,61,66,59,56,63,0,66],
[63,58,61,55,64,60,60,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,50,64,66,60,47,59,63],
[70,0,62,60,68,67,63,61,67],
[81,69,0,74,74,74,65,62,64],
[67,71,57,0,63,68,57,61,59],
[65,63,57,68,0,59,64,57,57],
[71,64,57,63,72,0,63,64,52],
[84,68,66,74,67,68,0,64,71],
[72,70,69,70,74,67,67,0,63],
[68,64,67,72,74,79,60,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,49,55,67,63,61,64,67],
[60,0,46,65,88,70,71,68,57],
[82,85,0,69,87,67,58,88,79],
[76,66,62,0,84,82,65,64,63],
[64,43,44,47,0,57,58,39,47],
[68,61,64,49,74,0,61,57,70],
[70,60,73,66,73,70,0,79,71],
[67,63,43,67,92,74,52,0,67],
[64,74,52,68,84,61,60,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,63,68,72,65,62,69,71],
[68,0,62,74,69,75,60,60,67],
[68,69,0,63,74,70,71,79,63],
[63,57,68,0,65,70,56,64,63],
[59,62,57,66,0,59,53,54,56],
[66,56,61,61,72,0,64,70,72],
[69,71,60,75,78,67,0,66,56],
[62,71,52,67,77,61,65,0,58],
[60,64,68,68,75,59,75,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,37,24,36,69,37,36,58],
[97,0,74,75,59,97,73,50,85],
[94,57,0,69,81,82,81,70,81],
[107,56,62,0,44,82,85,37,69],
[95,72,50,87,0,107,87,50,119],
[62,34,49,49,24,0,74,37,35],
[94,58,50,46,44,57,0,25,69],
[95,81,61,94,81,94,106,0,106],
[73,46,50,62,12,96,62,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,58,77,60,52,57,63,67],
[75,0,58,72,64,57,59,67,57],
[73,73,0,84,69,58,67,64,69],
[54,59,47,0,52,51,60,60,64],
[71,67,62,79,0,61,66,73,64],
[79,74,73,80,70,0,64,73,76],
[74,72,64,71,65,67,0,78,74],
[68,64,67,71,58,58,53,0,66],
[64,74,62,67,67,55,57,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,63,74,65,69,65,72,66],
[67,0,75,69,67,63,73,68,62],
[68,56,0,74,64,62,72,69,68],
[57,62,57,0,51,53,66,63,52],
[66,64,67,80,0,76,75,75,67],
[62,68,69,78,55,0,69,71,67],
[66,58,59,65,56,62,0,60,56],
[59,63,62,68,56,60,71,0,56],
[65,69,63,79,64,64,75,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,67,62,70,66,60,68,61],
[75,0,84,63,75,75,66,74,69],
[64,47,0,57,66,59,51,70,63],
[69,68,74,0,80,69,62,78,68],
[61,56,65,51,0,61,55,64,58],
[65,56,72,62,70,0,67,73,66],
[71,65,80,69,76,64,0,71,77],
[63,57,61,53,67,58,60,0,55],
[70,62,68,63,73,65,54,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,45,51,37,47,51,42,49],
[90,0,65,79,68,71,70,59,73],
[86,66,0,78,61,60,70,66,80],
[80,52,53,0,65,63,69,55,66],
[94,63,70,66,0,85,67,65,69],
[84,60,71,68,46,0,57,63,69],
[80,61,61,62,64,74,0,50,72],
[89,72,65,76,66,68,81,0,85],
[82,58,51,65,62,62,59,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,72,71,65,67,73,78,89],
[69,0,63,58,58,63,70,81,66],
[59,68,0,66,64,65,76,79,71],
[60,73,65,0,75,68,78,84,81],
[66,73,67,56,0,69,66,80,67],
[64,68,66,63,62,0,81,82,76],
[58,61,55,53,65,50,0,55,62],
[53,50,52,47,51,49,76,0,64],
[42,65,60,50,64,55,69,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,53,58,65,56,78,65],
[66,0,70,65,66,68,67,75,62],
[65,61,0,74,59,54,58,70,59],
[78,66,57,0,66,70,71,81,66],
[73,65,72,65,0,68,65,82,81],
[66,63,77,61,63,0,57,66,70],
[75,64,73,60,66,74,0,67,64],
[53,56,61,50,49,65,64,0,49],
[66,69,72,65,50,61,67,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,68,78,72,75,65,80],
[63,0,66,60,72,69,72,69,67],
[61,65,0,57,68,65,66,61,68],
[63,71,74,0,67,70,72,67,68],
[53,59,63,64,0,59,67,61,68],
[59,62,66,61,72,0,64,66,67],
[56,59,65,59,64,67,0,56,64],
[66,62,70,64,70,65,75,0,75],
[51,64,63,63,63,64,67,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,73,60,61,65,58,60,76],
[61,0,60,62,74,66,61,64,63],
[58,71,0,62,66,64,64,76,71],
[71,69,69,0,54,59,66,84,63],
[70,57,65,77,0,66,66,70,72],
[66,65,67,72,65,0,67,54,74],
[73,70,67,65,65,64,0,62,67],
[71,67,55,47,61,77,69,0,53],
[55,68,60,68,59,57,64,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,82,78,67,56,66,53,59],
[63,0,70,89,51,62,67,61,59],
[49,61,0,65,51,58,77,42,71],
[53,42,66,0,56,63,78,45,59],
[64,80,80,75,0,82,87,54,70],
[75,69,73,68,49,0,70,54,49],
[65,64,54,53,44,61,0,47,48],
[78,70,89,86,77,77,84,0,60],
[72,72,60,72,61,82,83,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,71,76,60,70,70,68,60],
[63,0,73,75,67,60,68,80,65],
[60,58,0,78,61,68,59,57,56],
[55,56,53,0,48,65,53,59,62],
[71,64,70,83,0,80,58,66,74],
[61,71,63,66,51,0,54,70,57],
[61,63,72,78,73,77,0,67,75],
[63,51,74,72,65,61,64,0,65],
[71,66,75,69,57,74,56,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,60,66,65,65,59,75,64],
[73,0,69,69,72,65,59,79,70],
[71,62,0,65,65,68,68,76,66],
[65,62,66,0,62,64,67,70,65],
[66,59,66,69,0,64,61,73,60],
[66,66,63,67,67,0,67,73,67],
[72,72,63,64,70,64,0,79,68],
[56,52,55,61,58,58,52,0,57],
[67,61,65,66,71,64,63,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,57,69,62,72,69,76,63],
[62,0,60,67,65,79,71,55,66],
[74,71,0,71,67,87,82,74,62],
[62,64,60,0,59,72,68,73,66],
[69,66,64,72,0,80,75,67,68],
[59,52,44,59,51,0,58,54,56],
[62,60,49,63,56,73,0,65,62],
[55,76,57,58,64,77,66,0,59],
[68,65,69,65,63,75,69,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,55,56,77,65,73,57],
[66,0,69,61,68,75,64,75,54],
[65,62,0,55,63,78,67,70,57],
[76,70,76,0,70,81,70,81,62],
[75,63,68,61,0,80,71,79,72],
[54,56,53,50,51,0,65,70,55],
[66,67,64,61,60,66,0,62,54],
[58,56,61,50,52,61,69,0,53],
[74,77,74,69,59,76,77,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,74,78,76,72,75,65],
[64,0,70,81,67,74,60,77,52],
[62,61,0,79,72,81,65,74,66],
[57,50,52,0,61,58,41,69,50],
[53,64,59,70,0,74,56,65,70],
[55,57,50,73,57,0,59,47,55],
[59,71,66,90,75,72,0,69,74],
[56,54,57,62,66,84,62,0,75],
[66,79,65,81,61,76,57,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,68,58,65,54,65,50,62],
[72,0,73,59,77,68,76,70,71],
[63,58,0,57,70,58,65,58,60],
[73,72,74,0,74,69,68,65,70],
[66,54,61,57,0,55,64,50,55],
[77,63,73,62,76,0,68,58,74],
[66,55,66,63,67,63,0,58,71],
[81,61,73,66,81,73,73,0,67],
[69,60,71,61,76,57,60,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,0,0,45,45,0,0,0],
[91,0,45,45,91,45,46,46,45],
[131,86,0,40,131,85,86,86,85],
[131,86,91,0,91,85,86,86,45],
[86,40,0,40,0,40,40,40,0],
[86,86,46,46,91,0,46,46,46],
[131,85,45,45,91,85,0,40,45],
[131,85,45,45,91,85,91,0,45],
[131,86,46,86,131,85,86,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,68,84,84,63,65,65,86],
[61,0,55,58,71,64,55,77,63],
[63,76,0,75,78,64,52,71,73],
[47,73,56,0,68,64,50,75,65],
[47,60,53,63,0,40,50,63,54],
[68,67,67,67,91,0,75,53,61],
[66,76,79,81,81,56,0,69,66],
[66,54,60,56,68,78,62,0,57],
[45,68,58,66,77,70,65,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,75,85,67,74,60,71,65],
[67,0,69,79,66,72,64,67,62],
[56,62,0,71,79,83,70,60,70],
[46,52,60,0,53,56,54,58,44],
[64,65,52,78,0,66,61,52,56],
[57,59,48,75,65,0,54,58,48],
[71,67,61,77,70,77,0,66,57],
[60,64,71,73,79,73,65,0,69],
[66,69,61,87,75,83,74,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,63,60,72,74,80,68,60],
[68,0,62,62,62,62,78,70,53],
[68,69,0,62,61,57,70,63,53],
[71,69,69,0,59,60,76,60,59],
[59,69,70,72,0,55,78,61,65],
[57,69,74,71,76,0,68,64,67],
[51,53,61,55,53,63,0,56,59],
[63,61,68,71,70,67,75,0,67],
[71,78,78,72,66,64,72,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,62,70,54,62,64,67,69],
[63,0,67,68,61,57,61,66,69],
[69,64,0,71,57,61,65,73,77],
[61,63,60,0,67,58,59,67,75],
[77,70,74,64,0,80,72,68,71],
[69,74,70,73,51,0,67,68,79],
[67,70,66,72,59,64,0,67,84],
[64,65,58,64,63,63,64,0,76],
[62,62,54,56,60,52,47,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,54,106,51,51,54,28,0],
[77,0,105,103,51,77,105,79,51],
[77,26,0,78,51,77,77,0,25],
[25,28,53,0,51,51,53,53,25],
[80,80,80,80,0,79,80,54,80],
[80,54,54,80,52,0,80,28,54],
[77,26,54,78,51,51,0,0,25],
[103,52,131,78,77,103,131,0,77],
[131,80,106,106,51,77,106,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,74,62,51,60,70,94,51],
[74,0,75,63,54,53,58,99,68],
[57,56,0,63,48,65,70,93,66],
[69,68,68,0,56,57,81,78,62],
[80,77,83,75,0,63,81,91,79],
[71,78,66,74,68,0,75,88,60],
[61,73,61,50,50,56,0,81,65],
[37,32,38,53,40,43,50,0,49],
[80,63,65,69,52,71,66,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,66,77,66,68,70,66,63],
[59,0,69,73,75,71,66,74,73],
[65,62,0,61,65,60,65,62,62],
[54,58,70,0,71,56,65,67,65],
[65,56,66,60,0,63,63,66,62],
[63,60,71,75,68,0,69,70,71],
[61,65,66,66,68,62,0,62,68],
[65,57,69,64,65,61,69,0,67],
[68,58,69,66,69,60,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,67,56,55,60,65,64],
[66,0,68,68,49,58,57,66,57],
[66,63,0,68,57,67,68,72,62],
[64,63,63,0,53,64,60,60,65],
[75,82,74,78,0,68,65,72,67],
[76,73,64,67,63,0,66,72,71],
[71,74,63,71,66,65,0,69,65],
[66,65,59,71,59,59,62,0,61],
[67,74,69,66,64,60,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,58,58,68,59,65,56,59],
[69,0,61,54,67,44,54,65,57],
[73,70,0,61,64,58,73,57,68],
[73,77,70,0,72,59,73,76,61],
[63,64,67,59,0,67,67,72,62],
[72,87,73,72,64,0,64,70,74],
[66,77,58,58,64,67,0,53,54],
[75,66,74,55,59,61,78,0,52],
[72,74,63,70,69,57,77,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,71,67,63,64,63,61,62],
[64,0,64,47,54,59,54,71,54],
[60,67,0,58,58,57,65,70,54],
[64,84,73,0,71,67,70,74,60],
[68,77,73,60,0,63,64,75,62],
[67,72,74,64,68,0,63,71,66],
[68,77,66,61,67,68,0,69,54],
[70,60,61,57,56,60,62,0,58],
[69,77,77,71,69,65,77,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,77,68,61,62,43,50,52],
[62,0,83,84,78,72,73,60,63],
[54,48,0,65,64,58,52,54,49],
[63,47,66,0,67,74,41,52,52],
[70,53,67,64,0,56,43,49,62],
[69,59,73,57,75,0,53,72,69],
[88,58,79,90,88,78,0,68,86],
[81,71,77,79,82,59,63,0,59],
[79,68,82,79,69,62,45,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,82,65,76,74,71,74,68],
[70,0,78,73,78,70,71,71,61],
[49,53,0,67,59,68,62,65,60],
[66,58,64,0,71,66,62,65,59],
[55,53,72,60,0,62,57,64,62],
[57,61,63,65,69,0,65,66,64],
[60,60,69,69,74,66,0,64,59],
[57,60,66,66,67,65,67,0,63],
[63,70,71,72,69,67,72,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,65,62,60,63,63,63,55],
[59,0,57,73,54,43,57,74,68],
[66,74,0,48,67,47,74,64,64],
[69,58,83,0,71,75,77,85,67],
[71,77,64,60,0,73,71,79,69],
[68,88,84,56,58,0,69,69,77],
[68,74,57,54,60,62,0,63,66],
[68,57,67,46,52,62,68,0,46],
[76,63,67,64,62,54,65,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,79,68,65,62,82,85,74],
[72,0,68,74,70,68,64,84,67],
[52,63,0,71,75,63,64,68,62],
[63,57,60,0,76,70,65,68,61],
[66,61,56,55,0,74,67,59,70],
[69,63,68,61,57,0,66,67,70],
[49,67,67,66,64,65,0,66,69],
[46,47,63,63,72,64,65,0,58],
[57,64,69,70,61,61,62,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,66,77,61,74,54,69,72],
[59,0,52,65,49,67,50,58,60],
[65,79,0,85,69,66,56,75,65],
[54,66,46,0,44,55,52,65,68],
[70,82,62,87,0,79,72,73,76],
[57,64,65,76,52,0,62,70,74],
[77,81,75,79,59,69,0,71,66],
[62,73,56,66,58,61,60,0,56],
[59,71,66,63,55,57,65,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,56,70,71,63,78,63],
[67,0,62,52,68,69,51,56,58],
[64,69,0,52,63,69,53,58,55],
[75,79,79,0,65,73,68,72,78],
[61,63,68,66,0,70,58,56,53],
[60,62,62,58,61,0,69,68,62],
[68,80,78,63,73,62,0,62,58],
[53,75,73,59,75,63,69,0,71],
[68,73,76,53,78,69,73,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,75,64,66,72,66,63,66],
[57,0,67,74,61,76,61,59,71],
[56,64,0,62,55,71,75,61,64],
[67,57,69,0,58,76,57,70,60],
[65,70,76,73,0,84,74,71,74],
[59,55,60,55,47,0,57,59,81],
[65,70,56,74,57,74,0,66,67],
[68,72,70,61,60,72,65,0,67],
[65,60,67,71,57,50,64,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,74,75,75,67,74,72,75],
[69,0,80,84,73,59,71,76,84],
[57,51,0,66,58,63,65,55,60],
[56,47,65,0,64,59,69,65,71],
[56,58,73,67,0,71,73,66,72],
[64,72,68,72,60,0,76,72,73],
[57,60,66,62,58,55,0,66,61],
[59,55,76,66,65,59,65,0,66],
[56,47,71,60,59,58,70,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,62,67,74,66,62,66,71],
[62,0,59,66,65,63,61,63,61],
[69,72,0,64,63,64,55,60,61],
[64,65,67,0,70,60,71,68,67],
[57,66,68,61,0,53,61,63,64],
[65,68,67,71,78,0,68,66,73],
[69,70,76,60,70,63,0,65,68],
[65,68,71,63,68,65,66,0,72],
[60,70,70,64,67,58,63,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,68,59,74,81,69,73,64],
[71,0,51,60,65,72,66,62,60],
[63,80,0,65,65,73,66,67,63],
[72,71,66,0,70,73,67,66,62],
[57,66,66,61,0,67,60,60,61],
[50,59,58,58,64,0,54,52,56],
[62,65,65,64,71,77,0,64,74],
[58,69,64,65,71,79,67,0,68],
[67,71,68,69,70,75,57,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,78,61,67,50,56,68,58],
[66,0,70,69,70,69,58,66,70],
[53,61,0,65,69,60,66,62,60],
[70,62,66,0,60,62,58,62,56],
[64,61,62,71,0,56,55,62,62],
[81,62,71,69,75,0,64,72,70],
[75,73,65,73,76,67,0,67,65],
[63,65,69,69,69,59,64,0,60],
[73,61,71,75,69,61,66,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,72,67,73,57,67,71,75],
[64,0,71,76,69,60,68,65,68],
[59,60,0,60,55,58,70,61,69],
[64,55,71,0,72,58,68,65,68],
[58,62,76,59,0,60,64,59,66],
[74,71,73,73,71,0,67,65,73],
[64,63,61,63,67,64,0,66,63],
[60,66,70,66,72,66,65,0,72],
[56,63,62,63,65,58,68,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,60,54,62,76,63,70,69],
[76,0,63,66,66,72,73,68,79],
[71,68,0,68,72,83,60,59,76],
[77,65,63,0,95,91,90,70,72],
[69,65,59,36,0,93,57,43,70],
[55,59,48,40,38,0,58,42,51],
[68,58,71,41,74,73,0,61,69],
[61,63,72,61,88,89,70,0,64],
[62,52,55,59,61,80,62,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,58,66,76,59,63,66],
[64,0,60,59,76,77,70,67,67],
[63,71,0,62,72,62,62,54,65],
[73,72,69,0,74,74,68,61,75],
[65,55,59,57,0,61,61,58,61],
[55,54,69,57,70,0,57,62,67],
[72,61,69,63,70,74,0,62,73],
[68,64,77,70,73,69,69,0,75],
[65,64,66,56,70,64,58,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,42,42,87,0,86,86,42],
[44,0,42,42,87,0,86,86,42],
[89,89,0,87,87,45,89,86,131],
[89,89,44,0,45,89,89,44,89],
[44,44,44,86,0,44,44,44,44],
[131,131,86,42,87,0,131,86,131],
[45,45,42,42,87,0,0,86,87],
[45,45,45,87,87,45,45,0,45],
[89,89,0,42,87,0,44,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,59,70,68,63,66,77,67],
[53,0,60,61,72,67,66,80,64],
[72,71,0,69,77,53,72,79,76],
[61,70,62,0,69,61,53,66,69],
[63,59,54,62,0,50,67,66,65],
[68,64,78,70,81,0,68,75,76],
[65,65,59,78,64,63,0,69,65],
[54,51,52,65,65,56,62,0,62],
[64,67,55,62,66,55,66,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,65,65,70,59,64,51,62],
[63,0,61,71,62,66,68,69,63],
[66,70,0,65,64,68,68,64,62],
[66,60,66,0,70,65,58,63,66],
[61,69,67,61,0,66,63,62,64],
[72,65,63,66,65,0,66,67,72],
[67,63,63,73,68,65,0,64,67],
[80,62,67,68,69,64,67,0,70],
[69,68,69,65,67,59,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,66,63,84,61,55,68,65],
[62,0,74,67,80,64,63,65,70],
[65,57,0,76,77,74,59,60,58],
[68,64,55,0,68,62,59,62,50],
[47,51,54,63,0,51,54,54,58],
[70,67,57,69,80,0,56,68,73],
[76,68,72,72,77,75,0,68,57],
[63,66,71,69,77,63,63,0,71],
[66,61,73,81,73,58,74,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,52,70,66,67,68,70,72],
[53,0,35,87,67,77,70,75,66],
[79,96,0,88,85,85,83,89,59],
[61,44,43,0,60,76,64,91,53],
[65,64,46,71,0,64,61,68,65],
[64,54,46,55,67,0,71,50,67],
[63,61,48,67,70,60,0,63,64],
[61,56,42,40,63,81,68,0,49],
[59,65,72,78,66,64,67,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,69,61,69,57,60,72,62],
[70,0,62,62,61,58,72,69,75],
[62,69,0,62,57,59,65,69,72],
[70,69,69,0,55,59,64,74,67],
[62,70,74,76,0,66,74,79,77],
[74,73,72,72,65,0,73,88,79],
[71,59,66,67,57,58,0,69,75],
[59,62,62,57,52,43,62,0,70],
[69,56,59,64,54,52,56,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,84,82,95,73,71,77,84],
[66,0,73,55,91,81,67,55,66],
[47,58,0,64,86,89,53,64,61],
[49,76,67,0,84,91,71,64,73],
[36,40,45,47,0,47,43,40,57],
[58,50,42,40,84,0,47,42,48],
[60,64,78,60,88,84,0,51,54],
[54,76,67,67,91,89,80,0,60],
[47,65,70,58,74,83,77,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,70,55,66,51,70,62,51],
[67,0,90,61,74,68,73,79,69],
[61,41,0,47,50,61,56,54,52],
[76,70,84,0,74,74,88,74,64],
[65,57,81,57,0,59,69,68,55],
[80,63,70,57,72,0,78,64,61],
[61,58,75,43,62,53,0,55,50],
[69,52,77,57,63,67,76,0,51],
[80,62,79,67,76,70,81,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,102,87,84,60,74,102,69],
[47,0,117,74,73,46,76,75,71],
[29,14,0,29,14,15,59,43,29],
[44,57,102,0,87,76,74,87,72],
[47,58,117,44,0,45,76,58,55],
[71,85,116,55,86,0,100,87,71],
[57,55,72,57,55,31,0,42,55],
[29,56,88,44,73,44,89,0,40],
[62,60,102,59,76,60,76,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,68,73,63,67,61,70,57],
[66,0,64,75,55,56,65,65,58],
[63,67,0,74,60,69,61,67,70],
[58,56,57,0,54,59,59,65,59],
[68,76,71,77,0,70,69,77,64],
[64,75,62,72,61,0,65,71,66],
[70,66,70,72,62,66,0,70,64],
[61,66,64,66,54,60,61,0,68],
[74,73,61,72,67,65,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,56,68,66,44,73,51,66],
[58,0,49,66,66,44,48,52,53],
[75,82,0,80,88,59,70,55,58],
[63,65,51,0,71,40,60,61,51],
[65,65,43,60,0,58,52,47,44],
[87,87,72,91,73,0,80,75,57],
[58,83,61,71,79,51,0,60,57],
[80,79,76,70,84,56,71,0,69],
[65,78,73,80,87,74,74,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,65,79,65,66,80,62,66],
[60,0,54,66,64,68,68,63,51],
[66,77,0,81,69,78,83,58,66],
[52,65,50,0,61,61,71,58,52],
[66,67,62,70,0,59,74,66,64],
[65,63,53,70,72,0,75,58,61],
[51,63,48,60,57,56,0,54,60],
[69,68,73,73,65,73,77,0,67],
[65,80,65,79,67,70,71,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,66,56,74,69,71,76,73],
[75,0,69,66,78,70,80,84,65],
[65,62,0,60,82,76,68,83,65],
[75,65,71,0,76,76,78,74,74],
[57,53,49,55,0,68,71,75,56],
[62,61,55,55,63,0,62,67,62],
[60,51,63,53,60,69,0,59,64],
[55,47,48,57,56,64,72,0,57],
[58,66,66,57,75,69,67,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,44,44,65,88,108,86,86],
[23,0,23,23,44,44,67,23,44],
[87,108,0,63,108,65,131,63,108],
[87,108,68,0,87,65,110,86,110],
[66,87,23,44,0,44,89,65,86],
[43,87,66,66,87,0,66,44,87],
[23,64,0,21,42,65,0,42,63],
[45,108,68,45,66,87,89,0,89],
[45,87,23,21,45,44,68,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,73,63,72,73,63,70,54],
[71,0,73,74,69,71,71,67,64],
[58,58,0,55,60,73,66,63,60],
[68,57,76,0,68,81,78,71,64],
[59,62,71,63,0,72,66,64,62],
[58,60,58,50,59,0,63,49,58],
[68,60,65,53,65,68,0,57,65],
[61,64,68,60,67,82,74,0,71],
[77,67,71,67,69,73,66,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,84,61,59,66,88,68,69],
[63,0,79,57,42,66,72,57,63],
[47,52,0,39,43,51,48,35,49],
[70,74,92,0,57,65,64,74,73],
[72,89,88,74,0,64,72,54,62],
[65,65,80,66,67,0,79,62,66],
[43,59,83,67,59,52,0,64,50],
[63,74,96,57,77,69,67,0,56],
[62,68,82,58,69,65,81,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,81,65,83,70,75,69,57],
[46,0,67,59,41,62,67,53,41],
[50,64,0,56,56,55,50,55,37],
[66,72,75,0,75,76,80,44,67],
[48,90,75,56,0,87,75,73,51],
[61,69,76,55,44,0,75,51,49],
[56,64,81,51,56,56,0,58,51],
[62,78,76,87,58,80,73,0,57],
[74,90,94,64,80,82,80,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,71,54,63,54,69,58,69],
[78,0,78,70,73,83,62,63,91],
[60,53,0,61,61,46,58,59,64],
[77,61,70,0,73,63,56,70,74],
[68,58,70,58,0,56,53,73,70],
[77,48,85,68,75,0,59,54,81],
[62,69,73,75,78,72,0,80,102],
[73,68,72,61,58,77,51,0,74],
[62,40,67,57,61,50,29,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,61,66,70,64,80,65,66],
[61,0,61,62,64,68,66,60,58],
[70,70,0,67,68,76,74,62,66],
[65,69,64,0,73,82,79,70,63],
[61,67,63,58,0,64,75,60,61],
[67,63,55,49,67,0,78,69,55],
[51,65,57,52,56,53,0,56,57],
[66,71,69,61,71,62,75,0,70],
[65,73,65,68,70,76,74,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,95,39,37,95,38,76,58],
[93,0,93,75,75,75,93,56,95],
[36,38,0,75,37,38,37,38,38],
[92,56,56,0,74,74,56,37,56],
[94,56,94,57,0,112,74,75,57],
[36,56,93,57,19,0,55,37,76],
[93,38,94,75,57,76,0,57,75],
[55,75,93,94,56,94,74,0,76],
[73,36,93,75,74,55,56,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,67,61,64,56,72,66,64],
[65,0,59,47,67,51,64,57,56],
[64,72,0,58,55,54,79,60,55],
[70,84,73,0,74,70,76,62,63],
[67,64,76,57,0,51,78,63,55],
[75,80,77,61,80,0,82,65,66],
[59,67,52,55,53,49,0,58,50],
[65,74,71,69,68,66,73,0,55],
[67,75,76,68,76,65,81,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,61,57,79,56,70,44],
[61,0,44,55,48,74,63,65,58],
[65,87,0,67,55,77,62,64,61],
[70,76,64,0,60,63,74,64,41],
[74,83,76,71,0,78,64,83,76],
[52,57,54,68,53,0,64,58,76],
[75,68,69,57,67,67,0,53,65],
[61,66,67,67,48,73,78,0,58],
[87,73,70,90,55,55,66,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,58,60,63,63,57,65,67],
[67,0,59,51,66,66,62,64,58],
[73,72,0,57,67,66,71,67,69],
[71,80,74,0,71,74,70,76,65],
[68,65,64,60,0,64,68,75,71],
[68,65,65,57,67,0,64,66,65],
[74,69,60,61,63,67,0,69,73],
[66,67,64,55,56,65,62,0,59],
[64,73,62,66,60,66,58,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,62,62,66,62,68,63,68],
[64,0,57,59,73,70,62,49,66],
[69,74,0,66,63,70,64,52,65],
[69,72,65,0,76,66,67,53,76],
[65,58,68,55,0,56,67,51,71],
[69,61,61,65,75,0,64,57,63],
[63,69,67,64,64,67,0,68,62],
[68,82,79,78,80,74,63,0,75],
[63,65,66,55,60,68,69,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,63,64,49,57,52,55,50],
[63,0,64,71,65,66,55,67,67],
[68,67,0,74,61,64,69,62,52],
[67,60,57,0,64,58,75,62,50],
[82,66,70,67,0,73,70,72,54],
[74,65,67,73,58,0,73,65,63],
[79,76,62,56,61,58,0,57,62],
[76,64,69,69,59,66,74,0,67],
[81,64,79,81,77,68,69,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,62,74,78,72,80,64,76],
[61,0,65,82,83,72,78,73,75],
[69,66,0,72,76,69,76,62,71],
[57,49,59,0,65,70,64,57,61],
[53,48,55,66,0,66,70,57,58],
[59,59,62,61,65,0,70,60,67],
[51,53,55,67,61,61,0,62,59],
[67,58,69,74,74,71,69,0,66],
[55,56,60,70,73,64,72,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,62,82,64,50,62,88,70],
[41,0,54,62,45,28,39,51,36],
[69,77,0,64,59,52,59,70,59],
[49,69,67,0,63,50,53,64,62],
[67,86,72,68,0,70,88,67,59],
[81,103,79,81,61,0,55,71,62],
[69,92,72,78,43,76,0,72,58],
[43,80,61,67,64,60,59,0,64],
[61,95,72,69,72,69,73,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,76,74,74,63,71,63,74],
[65,0,69,66,73,65,65,71,76],
[55,62,0,62,66,59,64,64,64],
[57,65,69,0,69,70,62,69,72],
[57,58,65,62,0,52,59,59,62],
[68,66,72,61,79,0,64,67,77],
[60,66,67,69,72,67,0,70,65],
[68,60,67,62,72,64,61,0,68],
[57,55,67,59,69,54,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,75,63,88,62,58,50],
[64,0,81,76,78,79,72,66,62],
[64,50,0,77,46,81,80,52,61],
[56,55,54,0,58,73,87,64,59],
[68,53,85,73,0,77,82,67,66],
[43,52,50,58,54,0,62,57,57],
[69,59,51,44,49,69,0,35,45],
[73,65,79,67,64,74,96,0,62],
[81,69,70,72,65,74,86,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,70,73,69,64,66,65,65],
[66,0,65,67,64,66,64,63,68],
[61,66,0,62,65,74,67,68,65],
[58,64,69,0,66,66,70,67,58],
[62,67,66,65,0,70,73,68,68],
[67,65,57,65,61,0,73,59,62],
[65,67,64,61,58,58,0,60,63],
[66,68,63,64,63,72,71,0,67],
[66,63,66,73,63,69,68,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,67,70,65,65,60,63,79],
[75,0,65,79,68,80,75,71,83],
[64,66,0,56,59,60,66,55,64],
[61,52,75,0,60,63,68,66,71],
[66,63,72,71,0,74,68,67,77],
[66,51,71,68,57,0,67,68,76],
[71,56,65,63,63,64,0,63,73],
[68,60,76,65,64,63,68,0,56],
[52,48,67,60,54,55,58,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,87,80,105,95,62,97,79],
[70,0,90,51,92,74,57,92,74],
[44,41,0,33,67,64,48,61,52],
[51,80,98,0,81,72,46,66,65],
[26,39,64,50,0,47,32,82,49],
[36,57,67,59,84,0,32,59,34],
[69,74,83,85,99,99,0,93,49],
[34,39,70,65,49,72,38,0,48],
[52,57,79,66,82,97,82,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,65,78,91,65,79,77,89],
[64,0,78,52,78,78,78,77,51],
[66,53,0,51,51,51,51,64,63],
[53,79,80,0,90,77,77,64,64],
[40,53,80,41,0,51,51,26,66],
[66,53,80,54,80,0,77,67,79],
[52,53,80,54,80,54,0,92,78],
[54,54,67,67,105,64,39,0,105],
[42,80,68,67,65,52,53,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,61,75,70,74,65,66,63],
[70,0,72,73,64,80,65,70,65],
[70,59,0,76,69,61,74,69,69],
[56,58,55,0,61,70,64,70,57],
[61,67,62,70,0,80,66,68,66],
[57,51,70,61,51,0,57,64,51],
[66,66,57,67,65,74,0,70,60],
[65,61,62,61,63,67,61,0,65],
[68,66,62,74,65,80,71,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,79,55,79,73,68,60,79],
[44,0,63,42,77,62,74,46,65],
[52,68,0,44,79,73,63,55,59],
[76,89,87,0,89,78,67,57,82],
[52,54,52,42,0,70,65,50,72],
[58,69,58,53,61,0,56,49,52],
[63,57,68,64,66,75,0,64,56],
[71,85,76,74,81,82,67,0,64],
[52,66,72,49,59,79,75,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,59,69,75,71,74,70,65],
[61,0,62,69,69,65,66,61,68],
[72,69,0,69,76,69,69,65,66],
[62,62,62,0,70,62,60,58,54],
[56,62,55,61,0,68,65,62,54],
[60,66,62,69,63,0,66,69,71],
[57,65,62,71,66,65,0,65,63],
[61,70,66,73,69,62,66,0,62],
[66,63,65,77,77,60,68,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,60,72,80,65,82,75,72],
[61,0,73,62,73,67,61,65,66],
[71,58,0,57,83,66,72,71,69],
[59,69,74,0,78,70,69,76,66],
[51,58,48,53,0,55,68,64,53],
[66,64,65,61,76,0,74,63,70],
[49,70,59,62,63,57,0,64,70],
[56,66,60,55,67,68,67,0,64],
[59,65,62,65,78,61,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,76,71,79,79,76,61,58],
[63,0,60,69,70,73,66,59,55],
[55,71,0,62,70,70,60,61,57],
[60,62,69,0,71,69,74,67,55],
[52,61,61,60,0,72,66,62,54],
[52,58,61,62,59,0,65,66,64],
[55,65,71,57,65,66,0,48,59],
[70,72,70,64,69,65,83,0,70],
[73,76,74,76,77,67,72,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,89,78,79,78,79,84,89],
[68,0,77,80,67,61,81,84,70],
[42,54,0,56,63,48,72,57,68],
[53,51,75,0,62,69,72,70,77],
[52,64,68,69,0,70,77,83,68],
[53,70,83,62,61,0,76,65,64],
[52,50,59,59,54,55,0,57,65],
[47,47,74,61,48,66,74,0,70],
[42,61,63,54,63,67,66,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,59,79,65,53,76,69,61],
[61,0,60,63,59,63,68,64,66],
[72,71,0,72,70,72,79,59,68],
[52,68,59,0,48,61,70,61,68],
[66,72,61,83,0,70,75,76,58],
[78,68,59,70,61,0,71,67,65],
[55,63,52,61,56,60,0,56,53],
[62,67,72,70,55,64,75,0,59],
[70,65,63,63,73,66,78,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,72,68,71,72,69,75,60],
[55,0,69,58,62,63,67,63,58],
[59,62,0,57,61,78,54,74,62],
[63,73,74,0,81,72,77,83,66],
[60,69,70,50,0,67,64,70,63],
[59,68,53,59,64,0,57,66,64],
[62,64,77,54,67,74,0,67,55],
[56,68,57,48,61,65,64,0,51],
[71,73,69,65,68,67,76,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,63,69,78,77,65,79,71],
[60,0,69,60,70,71,70,61,67],
[68,62,0,59,68,66,58,67,60],
[62,71,72,0,75,77,69,77,71],
[53,61,63,56,0,56,56,65,59],
[54,60,65,54,75,0,57,69,60],
[66,61,73,62,75,74,0,67,65],
[52,70,64,54,66,62,64,0,53],
[60,64,71,60,72,71,66,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,47,53,54,51,55,54,48],
[82,0,65,71,75,69,68,83,65],
[84,66,0,64,67,60,62,78,64],
[78,60,67,0,71,62,69,77,61],
[77,56,64,60,0,60,67,70,56],
[80,62,71,69,71,0,57,74,71],
[76,63,69,62,64,74,0,70,64],
[77,48,53,54,61,57,61,0,55],
[83,66,67,70,75,60,67,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,58,65,69,67,50,67,66],
[64,0,75,67,87,76,47,77,84],
[73,56,0,55,95,67,67,75,106],
[66,64,76,0,88,86,58,77,105],
[62,44,36,43,0,56,26,65,53],
[64,55,64,45,75,0,56,84,91],
[81,84,64,73,105,75,0,74,105],
[64,54,56,54,66,47,57,0,73],
[65,47,25,26,78,40,26,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,68,57,84,80,69,55,71],
[66,0,56,59,84,65,76,64,64],
[63,75,0,78,82,66,65,65,76],
[74,72,53,0,74,63,60,55,66],
[47,47,49,57,0,58,52,49,52],
[51,66,65,68,73,0,58,49,67],
[62,55,66,71,79,73,0,67,66],
[76,67,66,76,82,82,64,0,73],
[60,67,55,65,79,64,65,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,65,60,57,59,59,58,67],
[73,0,70,65,67,68,63,61,74],
[66,61,0,58,65,58,65,65,67],
[71,66,73,0,70,69,76,63,64],
[74,64,66,61,0,63,69,69,66],
[72,63,73,62,68,0,69,62,63],
[72,68,66,55,62,62,0,68,66],
[73,70,66,68,62,69,63,0,64],
[64,57,64,67,65,68,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,60,66,63,61,57,64,59],
[72,0,72,82,73,65,73,75,71],
[71,59,0,68,60,66,59,64,65],
[65,49,63,0,62,62,58,61,57],
[68,58,71,69,0,66,65,60,65],
[70,66,65,69,65,0,65,66,61],
[74,58,72,73,66,66,0,68,70],
[67,56,67,70,71,65,63,0,61],
[72,60,66,74,66,70,61,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,67,59,54,61,52,61],
[66,0,65,63,57,61,72,59,65],
[64,66,0,62,53,64,67,69,67],
[64,68,69,0,72,56,66,71,64],
[72,74,78,59,0,73,69,66,77],
[77,70,67,75,58,0,79,74,68],
[70,59,64,65,62,52,0,59,58],
[79,72,62,60,65,57,72,0,59],
[70,66,64,67,54,63,73,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,70,65,66,77,53,67,65],
[62,0,64,67,49,71,56,51,72],
[61,67,0,63,46,69,48,46,63],
[66,64,68,0,57,58,60,61,58],
[65,82,85,74,0,78,63,73,72],
[54,60,62,73,53,0,49,51,52],
[78,75,83,71,68,82,0,63,87],
[64,80,85,70,58,80,68,0,69],
[66,59,68,73,59,79,44,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,65,69,38,66,61,62,51],
[79,0,63,71,58,78,69,82,53],
[66,68,0,58,52,65,67,67,67],
[62,60,73,0,54,70,49,82,64],
[93,73,79,77,0,85,56,81,64],
[65,53,66,61,46,0,53,59,54],
[70,62,64,82,75,78,0,84,58],
[69,49,64,49,50,72,47,0,48],
[80,78,64,67,67,77,73,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,69,62,74,82,59,68,70],
[78,0,86,55,70,78,72,79,68],
[62,45,0,63,63,77,50,62,56],
[69,76,68,0,85,88,62,74,76],
[57,61,68,46,0,74,52,56,57],
[49,53,54,43,57,0,47,56,68],
[72,59,81,69,79,84,0,67,61],
[63,52,69,57,75,75,64,0,67],
[61,63,75,55,74,63,70,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,67,88,86,87,67,65,66],
[78,0,54,88,87,64,68,67,66],
[64,77,0,98,108,88,69,77,54],
[43,43,33,0,63,45,46,33,54],
[45,44,23,68,0,56,34,43,32],
[44,67,43,86,75,0,57,65,43],
[64,63,62,85,97,74,0,42,53],
[66,64,54,98,88,66,89,0,87],
[65,65,77,77,99,88,78,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,78,65,73,59,64,69,63],
[51,0,74,62,62,63,61,78,69],
[53,57,0,54,54,65,70,74,55],
[66,69,77,0,68,62,79,80,71],
[58,69,77,63,0,63,78,68,57],
[72,68,66,69,68,0,76,77,62],
[67,70,61,52,53,55,0,74,43],
[62,53,57,51,63,54,57,0,54],
[68,62,76,60,74,69,88,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,68,65,68,71,82,71,65],
[49,0,64,63,63,46,68,69,68],
[63,67,0,75,57,57,68,71,66],
[66,68,56,0,68,49,61,79,76],
[63,68,74,63,0,62,66,77,78],
[60,85,74,82,69,0,75,77,79],
[49,63,63,70,65,56,0,61,63],
[60,62,60,52,54,54,70,0,63],
[66,63,65,55,53,52,68,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,71,82,84,65,72,72,83],
[58,0,60,63,60,59,53,61,56],
[60,71,0,65,63,64,57,63,60],
[49,68,66,0,66,59,62,61,76],
[47,71,68,65,0,60,55,60,69],
[66,72,67,72,71,0,63,66,64],
[59,78,74,69,76,68,0,68,70],
[59,70,68,70,71,65,63,0,71],
[48,75,71,55,62,67,61,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,58,77,72,69,63,63,74],
[69,0,62,74,73,56,74,62,64],
[73,69,0,88,61,70,77,70,64],
[54,57,43,0,67,59,69,49,59],
[59,58,70,64,0,60,62,66,62],
[62,75,61,72,71,0,70,81,73],
[68,57,54,62,69,61,0,69,47],
[68,69,61,82,65,50,62,0,54],
[57,67,67,72,69,58,84,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,65,64,63,70,56,71],
[61,0,59,64,66,53,66,53,69],
[66,72,0,67,57,50,58,59,57],
[66,67,64,0,61,61,60,66,69],
[67,65,74,70,0,66,61,71,62],
[68,78,81,70,65,0,65,72,66],
[61,65,73,71,70,66,0,57,73],
[75,78,72,65,60,59,74,0,67],
[60,62,74,62,69,65,58,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,73,64,74,74,71,76,60],
[59,0,69,68,73,62,69,81,66],
[58,62,0,79,70,73,74,76,68],
[67,63,52,0,62,55,60,64,52],
[57,58,61,69,0,61,79,73,62],
[57,69,58,76,70,0,66,81,59],
[60,62,57,71,52,65,0,77,62],
[55,50,55,67,58,50,54,0,51],
[71,65,63,79,69,72,69,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,56,59,63,50,53,59,59],
[72,0,67,64,65,58,65,65,66],
[75,64,0,76,71,68,64,73,64],
[72,67,55,0,68,59,57,64,63],
[68,66,60,63,0,63,62,71,66],
[81,73,63,72,68,0,71,71,68],
[78,66,67,74,69,60,0,71,67],
[72,66,58,67,60,60,60,0,62],
[72,65,67,68,65,63,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,62,51,64,70,73,60,68],
[61,0,63,67,63,72,67,59,62],
[69,68,0,64,73,74,74,66,73],
[80,64,67,0,74,74,71,70,79],
[67,68,58,57,0,65,57,60,66],
[61,59,57,57,66,0,61,63,76],
[58,64,57,60,74,70,0,53,70],
[71,72,65,61,71,68,78,0,78],
[63,69,58,52,65,55,61,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,78,59,82,62,66,77,65],
[60,0,66,65,79,53,65,62,62],
[53,65,0,71,80,63,68,65,66],
[72,66,60,0,82,59,66,60,72],
[49,52,51,49,0,54,47,55,47],
[69,78,68,72,77,0,69,62,69],
[65,66,63,65,84,62,0,56,68],
[54,69,66,71,76,69,75,0,76],
[66,69,65,59,84,62,63,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,67,48,65,63,65,56,68],
[63,0,55,64,70,64,73,42,66],
[64,76,0,60,75,62,76,71,78],
[83,67,71,0,79,74,85,58,78],
[66,61,56,52,0,75,80,68,81],
[68,67,69,57,56,0,74,66,74],
[66,58,55,46,51,57,0,58,49],
[75,89,60,73,63,65,73,0,65],
[63,65,53,53,50,57,82,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,52,58,63,58,62,64,57],
[63,0,51,58,61,64,57,68,60],
[79,80,0,61,68,60,69,70,66],
[73,73,70,0,58,57,72,68,67],
[68,70,63,73,0,63,65,70,68],
[73,67,71,74,68,0,72,74,65],
[69,74,62,59,66,59,0,66,62],
[67,63,61,63,61,57,65,0,65],
[74,71,65,64,63,66,69,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,71,78,77,65,66,68,61],
[56,0,77,77,78,67,80,68,71],
[60,54,0,77,55,54,62,54,55],
[53,54,54,0,63,39,54,39,44],
[54,53,76,68,0,60,60,54,56],
[66,64,77,92,71,0,68,68,60],
[65,51,69,77,71,63,0,62,66],
[63,63,77,92,77,63,69,0,71],
[70,60,76,87,75,71,65,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,57,64,55,70,58,57,60],
[67,0,57,67,56,74,58,60,56],
[74,74,0,68,73,81,68,72,64],
[67,64,63,0,61,72,62,58,68],
[76,75,58,70,0,75,57,71,62],
[61,57,50,59,56,0,54,59,54],
[73,73,63,69,74,77,0,68,58],
[74,71,59,73,60,72,63,0,60],
[71,75,67,63,69,77,73,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,58,66,77,77,83,73,80],
[55,0,54,54,56,55,59,77,63],
[73,77,0,64,65,70,69,74,75],
[65,77,67,0,60,71,62,68,81],
[54,75,66,71,0,76,75,77,71],
[54,76,61,60,55,0,72,66,73],
[48,72,62,69,56,59,0,69,70],
[58,54,57,63,54,65,62,0,78],
[51,68,56,50,60,58,61,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,67,74,64,67,80,68,66],
[59,0,60,56,56,47,63,58,56],
[64,71,0,64,62,61,70,69,64],
[57,75,67,0,69,65,69,58,63],
[67,75,69,62,0,68,75,58,63],
[64,84,70,66,63,0,76,71,75],
[51,68,61,62,56,55,0,53,60],
[63,73,62,73,73,60,78,0,65],
[65,75,67,68,68,56,71,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,69,57,50,50,48,61,60],
[79,0,76,65,76,68,66,71,66],
[62,55,0,56,61,57,55,59,57],
[74,66,75,0,63,53,58,72,57],
[81,55,70,68,0,56,54,62,62],
[81,63,74,78,75,0,66,65,62],
[83,65,76,73,77,65,0,72,64],
[70,60,72,59,69,66,59,0,60],
[71,65,74,74,69,69,67,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,70,61,64,60,52,61,69],
[79,0,74,73,80,62,67,72,76],
[61,57,0,60,75,62,65,61,67],
[70,58,71,0,72,69,76,67,72],
[67,51,56,59,0,67,62,75,67],
[71,69,69,62,64,0,68,78,73],
[79,64,66,55,69,63,0,60,67],
[70,59,70,64,56,53,71,0,77],
[62,55,64,59,64,58,64,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,59,50,66,68,77,69,76],
[69,0,66,61,70,76,77,66,70],
[72,65,0,64,62,76,72,72,72],
[81,70,67,0,69,83,64,74,71],
[65,61,69,62,0,74,76,69,77],
[63,55,55,48,57,0,75,66,71],
[54,54,59,67,55,56,0,58,64],
[62,65,59,57,62,65,73,0,66],
[55,61,59,60,54,60,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,70,76,61,83,62,65,68],
[73,0,69,72,74,81,68,60,62],
[61,62,0,75,63,76,65,65,71],
[55,59,56,0,49,71,57,61,58],
[70,57,68,82,0,84,70,69,72],
[48,50,55,60,47,0,45,63,53],
[69,63,66,74,61,86,0,70,61],
[66,71,66,70,62,68,61,0,70],
[63,69,60,73,59,78,70,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,61,53,65,70,63,52,59],
[72,0,74,61,70,77,68,67,63],
[70,57,0,64,79,71,76,65,61],
[78,70,67,0,67,82,72,72,63],
[66,61,52,64,0,66,70,65,59],
[61,54,60,49,65,0,62,63,61],
[68,63,55,59,61,69,0,61,67],
[79,64,66,59,66,68,70,0,64],
[72,68,70,68,72,70,64,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,74,58,55,59,64,54,57],
[54,0,66,52,49,65,49,40,52],
[57,65,0,55,67,66,52,51,55],
[73,79,76,0,63,72,83,73,66],
[76,82,64,68,0,71,71,68,60],
[72,66,65,59,60,0,59,52,62],
[67,82,79,48,60,72,0,61,60],
[77,91,80,58,63,79,70,0,73],
[74,79,76,65,71,69,71,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,67,72,68,65,73,72,75],
[59,0,63,52,62,59,64,73,61],
[64,68,0,55,54,57,60,60,63],
[59,79,76,0,63,70,64,71,69],
[63,69,77,68,0,72,61,74,75],
[66,72,74,61,59,0,71,70,77],
[58,67,71,67,70,60,0,68,70],
[59,58,71,60,57,61,63,0,67],
[56,70,68,62,56,54,61,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,73,66,63,57,71,68,69],
[54,0,73,58,60,59,74,61,61],
[58,58,0,49,59,54,60,69,59],
[65,73,82,0,63,63,66,65,75],
[68,71,72,68,0,57,65,65,71],
[74,72,77,68,74,0,65,77,74],
[60,57,71,65,66,66,0,66,60],
[63,70,62,66,66,54,65,0,63],
[62,70,72,56,60,57,71,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,59,55,66,55,39,56,59],
[68,0,66,55,64,68,46,62,58],
[72,65,0,68,67,67,66,69,58],
[76,76,63,0,80,80,60,78,76],
[65,67,64,51,0,63,41,50,57],
[76,63,64,51,68,0,46,57,71],
[92,85,65,71,90,85,0,73,76],
[75,69,62,53,81,74,58,0,66],
[72,73,73,55,74,60,55,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,62,67,66,72,72,67],
[64,0,54,58,62,52,62,70,70],
[67,77,0,71,72,66,76,79,58],
[69,73,60,0,56,66,67,80,66],
[64,69,59,75,0,62,70,79,68],
[65,79,65,65,69,0,81,88,62],
[59,69,55,64,61,50,0,63,65],
[59,61,52,51,52,43,68,0,57],
[64,61,73,65,63,69,66,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,71,69,57,58,53,39,53],
[71,0,68,76,72,56,72,69,55],
[60,63,0,64,54,60,49,59,43],
[62,55,67,0,47,58,45,55,54],
[74,59,77,84,0,77,68,60,70],
[73,75,71,73,54,0,60,57,63],
[78,59,82,86,63,71,0,67,64],
[92,62,72,76,71,74,64,0,76],
[78,76,88,77,61,68,67,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,79,26,53,52,79,79,53],
[52,0,26,52,52,26,0,26,53],
[52,105,0,26,26,52,26,26,27],
[105,79,105,0,53,105,79,79,79],
[78,79,105,78,0,78,52,79,105],
[79,105,79,26,53,0,79,53,53],
[52,131,105,52,79,52,0,105,79],
[52,105,105,52,52,78,26,0,79],
[78,78,104,52,26,78,52,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,69,57,61,59,53,63],
[64,0,67,67,56,60,56,67,73],
[64,64,0,76,64,50,52,69,61],
[62,64,55,0,58,57,46,50,63],
[74,75,67,73,0,68,55,62,83],
[70,71,81,74,63,0,65,61,74],
[72,75,79,85,76,66,0,57,76],
[78,64,62,81,69,70,74,0,82],
[68,58,70,68,48,57,55,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,51,57,70,65,66,67,59],
[62,0,69,62,67,65,65,64,56],
[80,62,0,58,83,73,65,63,67],
[74,69,73,0,75,65,80,58,58],
[61,64,48,56,0,63,69,70,62],
[66,66,58,66,68,0,65,69,63],
[65,66,66,51,62,66,0,71,62],
[64,67,68,73,61,62,60,0,52],
[72,75,64,73,69,68,69,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,73,66,67,64,75,69,75],
[66,0,61,70,60,69,86,59,63],
[58,70,0,62,60,61,86,65,73],
[65,61,69,0,61,54,77,61,65],
[64,71,71,70,0,73,79,61,74],
[67,62,70,77,58,0,78,66,73],
[56,45,45,54,52,53,0,51,55],
[62,72,66,70,70,65,80,0,75],
[56,68,58,66,57,58,76,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,58,65,72,62,67,57,67],
[69,0,84,50,69,71,60,74,78],
[73,47,0,53,60,60,55,55,57],
[66,81,78,0,77,78,72,64,76],
[59,62,71,54,0,64,65,64,68],
[69,60,71,53,67,0,61,61,60],
[64,71,76,59,66,70,0,67,65],
[74,57,76,67,67,70,64,0,73],
[64,53,74,55,63,71,66,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,54,55,44,57,34,56,46],
[65,0,86,65,65,46,55,77,55],
[77,45,0,56,55,58,56,79,77],
[76,66,75,0,54,56,68,100,89],
[87,66,76,77,0,46,66,88,88],
[74,85,73,75,85,0,64,74,85],
[97,76,75,63,65,67,0,68,87],
[75,54,52,31,43,57,63,0,64],
[85,76,54,42,43,46,44,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,53,53,78,92,65,78,76],
[67,0,78,51,76,78,38,66,76],
[78,53,0,91,80,80,79,80,91],
[78,80,40,0,91,92,81,91,77],
[53,55,51,40,0,55,41,66,92],
[39,53,51,39,76,0,38,39,62],
[66,93,52,50,90,93,0,80,75],
[53,65,51,40,65,92,51,0,65],
[55,55,40,54,39,69,56,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,80,71,67,63,78,66,67],
[53,0,77,64,58,50,56,62,65],
[51,54,0,49,49,56,52,57,50],
[60,67,82,0,66,70,72,79,73],
[64,73,82,65,0,54,76,62,70],
[68,81,75,61,77,0,62,75,72],
[53,75,79,59,55,69,0,72,70],
[65,69,74,52,69,56,59,0,49],
[64,66,81,58,61,59,61,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,73,70,69,71,61,62,73],
[61,0,69,70,69,64,66,73,62],
[58,62,0,66,64,63,60,67,69],
[61,61,65,0,65,64,61,60,63],
[62,62,67,66,0,60,58,60,61],
[60,67,68,67,71,0,64,66,72],
[70,65,71,70,73,67,0,69,69],
[69,58,64,71,71,65,62,0,66],
[58,69,62,68,70,59,62,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,60,64,69,63,64,65,68],
[67,0,63,66,62,71,67,68,69],
[71,68,0,78,69,67,72,58,76],
[67,65,53,0,70,64,76,62,67],
[62,69,62,61,0,65,64,58,66],
[68,60,64,67,66,0,62,60,68],
[67,64,59,55,67,69,0,59,60],
[66,63,73,69,73,71,72,0,74],
[63,62,55,64,65,63,71,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,76,72,73,85,76,65,74],
[64,0,74,64,76,63,72,72,71],
[55,57,0,59,66,69,67,58,66],
[59,67,72,0,63,69,71,69,73],
[58,55,65,68,0,68,72,62,78],
[46,68,62,62,63,0,66,60,60],
[55,59,64,60,59,65,0,55,60],
[66,59,73,62,69,71,76,0,67],
[57,60,65,58,53,71,71,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,65,71,75,67,75,61,73],
[53,0,56,76,67,73,67,59,81],
[66,75,0,60,68,51,77,67,67],
[60,55,71,0,56,52,72,59,60],
[56,64,63,75,0,66,85,51,68],
[64,58,80,79,65,0,84,69,78],
[56,64,54,59,46,47,0,50,65],
[70,72,64,72,80,62,81,0,68],
[58,50,64,71,63,53,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,56,63,73,65,60,74],
[69,0,66,74,65,70,56,70,72],
[70,65,0,67,65,78,69,70,69],
[75,57,64,0,67,73,61,58,69],
[68,66,66,64,0,73,56,56,63],
[58,61,53,58,58,0,54,60,67],
[66,75,62,70,75,77,0,67,73],
[71,61,61,73,75,71,64,0,75],
[57,59,62,62,68,64,58,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,69,66,66,62,63,68,69],
[53,0,64,61,55,46,54,60,63],
[62,67,0,68,56,65,58,68,71],
[65,70,63,0,62,64,55,72,70],
[65,76,75,69,0,72,70,72,85],
[69,85,66,67,59,0,63,72,62],
[68,77,73,76,61,68,0,70,72],
[63,71,63,59,59,59,61,0,75],
[62,68,60,61,46,69,59,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,55,55,52,44,44,76,68],
[55,0,67,56,55,45,22,64,54],
[76,64,0,76,64,64,42,53,64],
[76,75,55,0,87,76,63,76,75],
[79,76,67,44,0,57,44,88,57],
[87,86,67,55,74,0,74,65,64],
[87,109,89,68,87,57,0,87,76],
[55,67,78,55,43,66,44,0,78],
[63,77,67,56,74,67,55,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,72,60,72,57,61,80,67],
[58,0,74,69,57,61,74,66,61],
[59,57,0,68,50,63,70,71,69],
[71,62,63,0,72,72,80,74,59],
[59,74,81,59,0,62,68,84,73],
[74,70,68,59,69,0,84,74,70],
[70,57,61,51,63,47,0,70,70],
[51,65,60,57,47,57,61,0,59],
[64,70,62,72,58,61,61,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,42,51,26,52,15,13,40],
[119,0,80,51,65,78,65,40,78],
[89,51,0,64,36,49,25,27,64],
[80,80,67,0,27,41,54,54,66],
[105,66,95,104,0,81,81,54,92],
[79,53,82,90,50,0,56,54,53],
[116,66,106,77,50,75,0,66,78],
[118,91,104,77,77,77,65,0,90],
[91,53,67,65,39,78,53,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,60,69,64,60,67,65,68],
[71,0,67,73,72,74,63,71,70],
[71,64,0,64,58,67,63,61,67],
[62,58,67,0,54,61,53,60,66],
[67,59,73,77,0,68,63,68,72],
[71,57,64,70,63,0,73,59,64],
[64,68,68,78,68,58,0,74,66],
[66,60,70,71,63,72,57,0,70],
[63,61,64,65,59,67,65,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,65,80,68,72,70,69,58],
[57,0,62,65,67,55,68,63,54],
[66,69,0,69,72,56,72,69,66],
[51,66,62,0,65,58,69,61,57],
[63,64,59,66,0,62,73,65,67],
[59,76,75,73,69,0,77,69,61],
[61,63,59,62,58,54,0,55,49],
[62,68,62,70,66,62,76,0,58],
[73,77,65,74,64,70,82,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,62,68,66,65,73,65,70],
[58,0,55,64,59,61,65,59,63],
[69,76,0,70,65,64,67,70,67],
[63,67,61,0,70,68,66,66,64],
[65,72,66,61,0,69,70,61,63],
[66,70,67,63,62,0,70,63,66],
[58,66,64,65,61,61,0,55,62],
[66,72,61,65,70,68,76,0,75],
[61,68,64,67,68,65,69,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,57,56,67,67,67,59,58],
[66,0,69,63,76,68,66,67,68],
[74,62,0,64,72,70,62,57,67],
[75,68,67,0,75,71,75,62,72],
[64,55,59,56,0,55,63,52,62],
[64,63,61,60,76,0,64,60,63],
[64,65,69,56,68,67,0,61,69],
[72,64,74,69,79,71,70,0,74],
[73,63,64,59,69,68,62,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,87,89,57,58,44,74,57],
[28,0,56,41,28,45,72,46,41],
[44,75,0,56,56,43,71,44,26],
[42,90,75,0,43,59,58,75,40],
[74,103,75,88,0,45,89,61,101],
[73,86,88,72,86,0,73,61,72],
[87,59,60,73,42,58,0,43,60],
[57,85,87,56,70,70,88,0,56],
[74,90,105,91,30,59,71,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,59,63,71,61,72,69,65],
[53,0,43,52,45,42,60,62,63],
[72,88,0,66,61,56,87,85,77],
[68,79,65,0,71,68,83,82,80],
[60,86,70,60,0,58,75,79,79],
[70,89,75,63,73,0,86,75,94],
[59,71,44,48,56,45,0,64,59],
[62,69,46,49,52,56,67,0,68],
[66,68,54,51,52,37,72,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,64,74,74,77,45,75,54],
[24,0,42,40,32,22,26,42,0],
[67,89,0,53,56,68,57,87,57],
[57,91,78,0,67,70,48,112,56],
[57,99,75,64,0,79,58,74,79],
[54,109,63,61,52,0,79,63,55],
[86,105,74,83,73,52,0,95,52],
[56,89,44,19,57,68,36,0,56],
[77,131,74,75,52,76,79,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,33,32,32,0,32,32,34],
[98,0,65,32,64,32,32,66,66],
[98,66,0,32,98,66,32,66,66],
[99,99,99,0,66,34,98,66,34],
[99,67,33,65,0,67,32,67,67],
[131,99,65,97,64,0,64,98,131],
[99,99,99,33,99,67,0,99,67],
[99,65,65,65,64,33,32,0,67],
[97,65,65,97,64,0,64,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,74,75,62,78,72,54,63],
[76,0,76,75,68,62,54,60,67],
[57,55,0,67,50,70,54,53,50],
[56,56,64,0,51,74,60,60,53],
[69,63,81,80,0,83,58,63,63],
[53,69,61,57,48,0,44,49,55],
[59,77,77,71,73,87,0,65,57],
[77,71,78,71,68,82,66,0,61],
[68,64,81,78,68,76,74,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,66,66,67,82,98,82],
[66,0,67,67,50,66,81,64,85],
[65,64,0,35,65,67,65,65,50],
[65,64,96,0,79,50,65,62,99],
[65,81,66,52,0,49,66,47,69],
[64,65,64,81,82,0,83,61,67],
[49,50,66,66,65,48,0,79,69],
[33,67,66,69,84,70,52,0,84],
[49,46,81,32,62,64,62,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,59,68,88,69,78,72,61],
[41,0,61,42,69,40,80,42,62],
[72,70,0,81,88,48,81,81,94],
[63,89,50,0,90,59,89,61,61],
[43,62,43,41,0,31,59,64,61],
[62,91,83,72,100,0,80,69,93],
[53,51,50,42,72,51,0,52,41],
[59,89,50,70,67,62,79,0,41],
[70,69,37,70,70,38,90,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,72,62,77,70,76,65,63],
[64,0,60,57,59,65,63,68,51],
[59,71,0,69,78,64,66,63,69],
[69,74,62,0,68,73,70,71,65],
[54,72,53,63,0,62,58,60,68],
[61,66,67,58,69,0,65,63,64],
[55,68,65,61,73,66,0,65,69],
[66,63,68,60,71,68,66,0,60],
[68,80,62,66,63,67,62,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,72,80,75,69,72,65,72],
[58,0,65,66,62,66,64,51,60],
[59,66,0,57,67,64,73,70,58],
[51,65,74,0,66,70,66,60,61],
[56,69,64,65,0,68,72,50,57],
[62,65,67,61,63,0,73,59,57],
[59,67,58,65,59,58,0,53,61],
[66,80,61,71,81,72,78,0,70],
[59,71,73,70,74,74,70,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,61,81,78,71,81,80,72],
[52,0,54,69,64,60,69,64,67],
[70,77,0,75,70,64,83,90,62],
[50,62,56,0,60,67,61,72,64],
[53,67,61,71,0,61,72,76,63],
[60,71,67,64,70,0,70,86,63],
[50,62,48,70,59,61,0,61,67],
[51,67,41,59,55,45,70,0,59],
[59,64,69,67,68,68,64,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,60,79,87,59,61,73,59],
[80,0,77,64,72,61,56,70,62],
[71,54,0,64,78,53,63,67,69],
[52,67,67,0,84,36,52,74,43],
[44,59,53,47,0,44,62,59,60],
[72,70,78,95,87,0,62,86,77],
[70,75,68,79,69,69,0,67,53],
[58,61,64,57,72,45,64,0,69],
[72,69,62,88,71,54,78,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,69,70,64,74,64,64,54],
[69,0,62,67,72,69,70,82,64],
[62,69,0,73,65,71,63,82,54],
[61,64,58,0,65,76,69,84,63],
[67,59,66,66,0,75,62,65,68],
[57,62,60,55,56,0,67,72,53],
[67,61,68,62,69,64,0,67,62],
[67,49,49,47,66,59,64,0,56],
[77,67,77,68,63,78,69,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,68,69,67,76,72,64,70],
[70,0,61,68,65,72,68,67,63],
[63,70,0,73,66,79,80,73,73],
[62,63,58,0,61,69,60,68,63],
[64,66,65,70,0,73,61,67,71],
[55,59,52,62,58,0,58,64,55],
[59,63,51,71,70,73,0,66,66],
[67,64,58,63,64,67,65,0,65],
[61,68,58,68,60,76,65,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,58,59,57,56,63,47,62],
[70,0,53,67,56,71,80,65,69],
[73,78,0,66,52,69,81,60,74],
[72,64,65,0,61,67,62,67,57],
[74,75,79,70,0,74,85,65,80],
[75,60,62,64,57,0,67,68,68],
[68,51,50,69,46,64,0,57,74],
[84,66,71,64,66,63,74,0,68],
[69,62,57,74,51,63,57,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,72,65,58,67,83,76,70],
[59,0,64,59,45,56,77,67,62],
[59,67,0,70,67,66,70,71,63],
[66,72,61,0,58,53,70,67,62],
[73,86,64,73,0,74,85,66,74],
[64,75,65,78,57,0,77,70,69],
[48,54,61,61,46,54,0,60,55],
[55,64,60,64,65,61,71,0,55],
[61,69,68,69,57,62,76,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,75,63,70,71,67,62,70],
[64,0,70,60,60,64,61,66,66],
[56,61,0,68,62,64,60,57,61],
[68,71,63,0,71,72,64,62,60],
[61,71,69,60,0,76,67,60,67],
[60,67,67,59,55,0,58,66,61],
[64,70,71,67,64,73,0,69,63],
[69,65,74,69,71,65,62,0,82],
[61,65,70,71,64,70,68,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,67,45,67,60,56,58,49],
[75,0,81,66,69,67,75,76,62],
[64,50,0,47,64,61,61,57,52],
[86,65,84,0,66,65,67,69,72],
[64,62,67,65,0,58,64,54,59],
[71,64,70,66,73,0,75,65,63],
[75,56,70,64,67,56,0,61,54],
[73,55,74,62,77,66,70,0,63],
[82,69,79,59,72,68,77,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,62,66,69,69,66,79,71],
[69,0,80,70,60,76,68,85,69],
[69,51,0,64,62,68,56,67,64],
[65,61,67,0,60,68,57,72,66],
[62,71,69,71,0,71,61,75,67],
[62,55,63,63,60,0,56,67,67],
[65,63,75,74,70,75,0,84,78],
[52,46,64,59,56,64,47,0,54],
[60,62,67,65,64,64,53,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,67,53,69,65,70,59,59],
[76,0,66,57,76,75,73,53,62],
[64,65,0,41,57,51,56,59,57],
[78,74,90,0,76,81,68,74,61],
[62,55,74,55,0,59,69,46,50],
[66,56,80,50,72,0,64,58,46],
[61,58,75,63,62,67,0,53,56],
[72,78,72,57,85,73,78,0,70],
[72,69,74,70,81,85,75,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,76,65,77,66,66,75,67],
[63,0,70,60,78,67,61,63,64],
[55,61,0,63,69,52,59,67,64],
[66,71,68,0,79,72,62,72,62],
[54,53,62,52,0,57,47,63,55],
[65,64,79,59,74,0,62,78,63],
[65,70,72,69,84,69,0,76,66],
[56,68,64,59,68,53,55,0,58],
[64,67,67,69,76,68,65,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,79,96,87,79,53,90,105],
[43,0,79,78,72,79,70,81,79],
[52,52,0,54,71,51,71,98,70],
[35,53,77,0,80,69,44,89,77],
[44,59,60,51,0,71,53,72,79],
[52,52,80,62,60,0,51,87,80],
[78,61,60,87,78,80,0,96,88],
[41,50,33,42,59,44,35,0,41],
[26,52,61,54,52,51,43,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,59,64,58,63,55,69],
[67,0,63,68,62,68,60,55,65],
[62,68,0,57,73,65,55,61,77],
[72,63,74,0,71,81,69,68,64],
[67,69,58,60,0,71,57,68,76],
[73,63,66,50,60,0,65,58,54],
[68,71,76,62,74,66,0,72,71],
[76,76,70,63,63,73,59,0,56],
[62,66,54,67,55,77,60,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,71,65,70,63,62,71,86],
[59,0,66,58,47,65,53,57,66],
[60,65,0,62,46,53,62,69,68],
[66,73,69,0,52,67,54,67,73],
[61,84,85,79,0,72,70,72,82],
[68,66,78,64,59,0,56,65,67],
[69,78,69,77,61,75,0,80,79],
[60,74,62,64,59,66,51,0,68],
[45,65,63,58,49,64,52,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,66,67,65,70,65,83,68],
[72,0,61,67,62,66,67,72,62],
[65,70,0,68,65,70,67,77,60],
[64,64,63,0,63,66,66,74,62],
[66,69,66,68,0,63,68,78,71],
[61,65,61,65,68,0,72,78,62],
[66,64,64,65,63,59,0,81,61],
[48,59,54,57,53,53,50,0,55],
[63,69,71,69,60,69,70,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,72,58,62,61,63,75,62],
[64,0,55,53,53,57,63,72,66],
[59,76,0,72,69,72,68,71,70],
[73,78,59,0,63,67,72,81,81],
[69,78,62,68,0,57,69,75,74],
[70,74,59,64,74,0,66,74,70],
[68,68,63,59,62,65,0,60,74],
[56,59,60,50,56,57,71,0,68],
[69,65,61,50,57,61,57,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,89,80,80,56,80,57,48],
[51,0,92,69,80,72,58,55,67],
[42,39,0,54,69,53,41,43,56],
[51,62,77,0,73,54,46,49,69],
[51,51,62,58,0,45,58,34,58],
[75,59,78,77,86,0,63,73,68],
[51,73,90,85,73,68,0,62,78],
[74,76,88,82,97,58,69,0,68],
[83,64,75,62,73,63,53,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,70,75,69,73,65,72,61],
[66,0,71,71,56,60,65,69,69],
[61,60,0,67,57,56,59,62,67],
[56,60,64,0,58,59,55,54,62],
[62,75,74,73,0,66,67,75,65],
[58,71,75,72,65,0,74,76,65],
[66,66,72,76,64,57,0,73,72],
[59,62,69,77,56,55,58,0,67],
[70,62,64,69,66,66,59,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,69,65,72,80,66,78,69],
[65,0,64,64,78,79,71,76,64],
[62,67,0,66,62,71,61,70,63],
[66,67,65,0,68,70,60,64,64],
[59,53,69,63,0,55,59,58,52],
[51,52,60,61,76,0,65,66,54],
[65,60,70,71,72,66,0,71,73],
[53,55,61,67,73,65,60,0,56],
[62,67,68,67,79,77,58,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,69,68,70,82,69,67],
[66,0,70,72,66,74,75,64,62],
[64,61,0,65,60,65,63,57,65],
[62,59,66,0,67,73,62,68,63],
[63,65,71,64,0,65,75,63,69],
[61,57,66,58,66,0,63,54,60],
[49,56,68,69,56,68,0,54,63],
[62,67,74,63,68,77,77,0,64],
[64,69,66,68,62,71,68,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,73,62,56,65,57,60,69],
[53,0,63,62,61,62,61,64,67],
[58,68,0,59,64,64,61,61,63],
[69,69,72,0,63,62,55,59,58],
[75,70,67,68,0,68,62,64,67],
[66,69,67,69,63,0,56,68,62],
[74,70,70,76,69,75,0,61,72],
[71,67,70,72,67,63,70,0,68],
[62,64,68,73,64,69,59,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,47,64,70,54,61,57,62],
[66,0,66,62,79,55,59,71,75],
[84,65,0,73,71,60,78,72,70],
[67,69,58,0,74,66,67,66,65],
[61,52,60,57,0,57,57,62,66],
[77,76,71,65,74,0,80,74,72],
[70,72,53,64,74,51,0,63,65],
[74,60,59,65,69,57,68,0,70],
[69,56,61,66,65,59,66,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,74,70,65,77,85,81,70],
[49,0,62,58,63,64,66,78,56],
[57,69,0,63,59,73,67,70,62],
[61,73,68,0,74,65,80,83,62],
[66,68,72,57,0,69,80,77,67],
[54,67,58,66,62,0,74,71,66],
[46,65,64,51,51,57,0,67,54],
[50,53,61,48,54,60,64,0,56],
[61,75,69,69,64,65,77,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,63,78,68,69,64,79],
[72,0,68,60,77,75,73,56,75],
[66,63,0,66,74,68,76,62,73],
[68,71,65,0,75,79,69,68,76],
[53,54,57,56,0,65,62,49,68],
[63,56,63,52,66,0,49,54,65],
[62,58,55,62,69,82,0,66,71],
[67,75,69,63,82,77,65,0,83],
[52,56,58,55,63,66,60,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,74,70,72,76,64,66,76],
[56,0,66,70,78,66,77,66,77],
[57,65,0,59,70,76,69,71,59],
[61,61,72,0,62,71,75,63,78],
[59,53,61,69,0,53,64,60,67],
[55,65,55,60,78,0,59,58,65],
[67,54,62,56,67,72,0,65,64],
[65,65,60,68,71,73,66,0,76],
[55,54,72,53,64,66,67,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,74,80,73,73,66,79,65],
[71,0,76,78,68,64,64,82,62],
[57,55,0,72,67,52,56,68,58],
[51,53,59,0,65,60,50,69,53],
[58,63,64,66,0,62,56,67,67],
[58,67,79,71,69,0,65,78,65],
[65,67,75,81,75,66,0,79,70],
[52,49,63,62,64,53,52,0,54],
[66,69,73,78,64,66,61,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,53,51,38,72,55,60,47],
[80,0,75,78,84,79,57,78,77],
[78,56,0,74,49,80,66,75,66],
[80,53,57,0,72,79,76,70,69],
[93,47,82,59,0,76,70,62,58],
[59,52,51,52,55,0,64,57,57],
[76,74,65,55,61,67,0,74,65],
[71,53,56,61,69,74,57,0,62],
[84,54,65,62,73,74,66,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,33,98,65,66,131,98,131],
[66,0,33,33,66,99,66,33,98],
[98,98,0,131,65,98,131,131,131],
[33,98,0,0,33,66,99,33,98],
[66,65,66,98,0,66,66,66,98],
[65,32,33,65,65,0,65,65,65],
[0,65,0,32,65,66,0,33,98],
[33,98,0,98,65,66,98,0,98],
[0,33,0,33,33,66,33,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,52,71,72,67,67,74,68],
[53,0,49,55,64,62,62,71,67],
[79,82,0,75,79,65,72,86,80],
[60,76,56,0,74,60,59,68,63],
[59,67,52,57,0,61,58,63,54],
[64,69,66,71,70,0,71,73,62],
[64,69,59,72,73,60,0,67,70],
[57,60,45,63,68,58,64,0,61],
[63,64,51,68,77,69,61,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,76,51,67,67,59,40,67],
[66,0,64,68,72,67,67,59,76],
[55,67,0,57,70,68,58,50,63],
[80,63,74,0,67,65,72,66,78],
[64,59,61,64,0,70,59,48,70],
[64,64,63,66,61,0,68,56,72],
[72,64,73,59,72,63,0,51,74],
[91,72,81,65,83,75,80,0,77],
[64,55,68,53,61,59,57,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,52,46,65,65,50,73,69],
[70,0,72,68,69,87,59,73,67],
[79,59,0,59,73,71,70,74,68],
[85,63,72,0,73,76,68,83,76],
[66,62,58,58,0,73,62,69,65],
[66,44,60,55,58,0,51,70,66],
[81,72,61,63,69,80,0,73,66],
[58,58,57,48,62,61,58,0,56],
[62,64,63,55,66,65,65,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,72,64,68,66,81,54,65],
[66,0,71,72,63,56,73,75,64],
[59,60,0,51,67,63,81,79,79],
[67,59,80,0,80,80,69,78,73],
[63,68,64,51,0,63,60,71,61],
[65,75,68,51,68,0,74,89,68],
[50,58,50,62,71,57,0,54,59],
[77,56,52,53,60,42,77,0,71],
[66,67,52,58,70,63,72,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,63,60,70,61,71,70,60],
[61,0,69,68,54,66,76,66,60],
[68,62,0,64,65,63,66,63,74],
[71,63,67,0,54,52,57,60,64],
[61,77,66,77,0,65,68,67,69],
[70,65,68,79,66,0,79,67,73],
[60,55,65,74,63,52,0,56,60],
[61,65,68,71,64,64,75,0,71],
[71,71,57,67,62,58,71,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,78,51,25,51,78,78,78],
[53,0,26,0,0,26,53,27,51],
[53,105,0,52,27,53,53,27,51],
[80,131,79,0,53,53,53,53,78],
[106,131,104,78,0,78,53,78,104],
[80,105,78,78,53,0,53,53,78],
[53,78,78,78,78,78,0,78,51],
[53,104,104,78,53,78,53,0,104],
[53,80,80,53,27,53,80,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,72,66,65,58,62,63,63],
[76,0,70,69,62,73,69,68,68],
[59,61,0,71,57,58,64,62,68],
[65,62,60,0,65,59,64,53,61],
[66,69,74,66,0,63,75,70,61],
[73,58,73,72,68,0,70,74,72],
[69,62,67,67,56,61,0,64,65],
[68,63,69,78,61,57,67,0,74],
[68,63,63,70,70,59,66,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,60,33,45,48,34,47,23],
[108,0,83,82,71,108,95,96,58],
[71,48,0,46,34,59,35,48,48],
[98,49,85,0,71,84,59,48,61],
[86,60,97,60,0,74,46,85,60],
[83,23,72,47,57,0,23,47,69],
[97,36,96,72,85,108,0,61,71],
[84,35,83,83,46,84,70,0,58],
[108,73,83,70,71,62,60,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,73,65,54,60,57,57,58],
[61,0,64,54,54,60,52,55,56],
[58,67,0,54,54,50,52,60,50],
[66,77,77,0,73,69,60,75,59],
[77,77,77,58,0,68,52,69,70],
[71,71,81,62,63,0,57,68,68],
[74,79,79,71,79,74,0,75,62],
[74,76,71,56,62,63,56,0,57],
[73,75,81,72,61,63,69,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,72,56,72,56,74,62,66],
[60,0,61,54,55,69,55,64,70],
[59,70,0,65,71,77,61,79,84],
[75,77,66,0,69,79,65,71,85],
[59,76,60,62,0,57,70,62,73],
[75,62,54,52,74,0,58,67,75],
[57,76,70,66,61,73,0,70,74],
[69,67,52,60,69,64,61,0,67],
[65,61,47,46,58,56,57,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,63,70,66,67,63,65,65],
[68,0,64,74,70,80,65,74,67],
[68,67,0,64,68,71,65,74,66],
[61,57,67,0,62,71,67,65,62],
[65,61,63,69,0,63,56,70,58],
[64,51,60,60,68,0,61,74,63],
[68,66,66,64,75,70,0,71,62],
[66,57,57,66,61,57,60,0,53],
[66,64,65,69,73,68,69,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,52,75,69,58,57,50,65],
[55,0,43,82,76,52,61,44,74],
[79,88,0,77,79,74,64,73,73],
[56,49,54,0,62,58,49,48,65],
[62,55,52,69,0,45,45,36,48],
[73,79,57,73,86,0,74,50,67],
[74,70,67,82,86,57,0,47,69],
[81,87,58,83,95,81,84,0,81],
[66,57,58,66,83,64,62,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,57,76,71,59,70,61,61],
[67,0,65,75,78,77,82,68,66],
[74,66,0,75,75,62,82,69,68],
[55,56,56,0,61,58,69,53,53],
[60,53,56,70,0,54,67,69,54],
[72,54,69,73,77,0,76,64,71],
[61,49,49,62,64,55,0,57,59],
[70,63,62,78,62,67,74,0,67],
[70,65,63,78,77,60,72,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,69,58,78,71,59,82,50],
[70,0,47,69,81,70,64,68,65],
[62,84,0,79,77,64,79,79,68],
[73,62,52,0,82,72,83,68,66],
[53,50,54,49,0,69,66,48,62],
[60,61,67,59,62,0,68,74,66],
[72,67,52,48,65,63,0,80,63],
[49,63,52,63,83,57,51,0,64],
[81,66,63,65,69,65,68,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,52,55,70,71,67,63,56],
[66,0,70,68,78,73,62,74,74],
[79,61,0,54,83,70,89,70,77],
[76,63,77,0,73,71,70,75,77],
[61,53,48,58,0,56,64,51,65],
[60,58,61,60,75,0,68,59,56],
[64,69,42,61,67,63,0,69,65],
[68,57,61,56,80,72,62,0,65],
[75,57,54,54,66,75,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,52,59,46,62,59,59,62],
[74,0,64,68,46,75,58,65,75],
[79,67,0,71,59,72,66,70,78],
[72,63,60,0,60,72,58,66,88],
[85,85,72,71,0,72,73,63,88],
[69,56,59,59,59,0,58,72,71],
[72,73,65,73,58,73,0,70,86],
[72,66,61,65,68,59,61,0,71],
[69,56,53,43,43,60,45,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,65,68,59,70,54,64,73],
[86,0,72,77,63,68,64,74,80],
[66,59,0,73,68,69,67,71,84],
[63,54,58,0,57,64,58,62,70],
[72,68,63,74,0,70,64,78,79],
[61,63,62,67,61,0,58,71,76],
[77,67,64,73,67,73,0,66,73],
[67,57,60,69,53,60,65,0,64],
[58,51,47,61,52,55,58,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,92,77,55,83,92,81,94],
[37,0,73,68,48,49,72,29,74],
[39,58,0,64,53,64,73,59,74],
[54,63,67,0,43,59,90,53,68],
[76,83,78,88,0,79,98,62,82],
[48,82,67,72,52,0,81,36,84],
[39,59,58,41,33,50,0,30,72],
[50,102,72,78,69,95,101,0,89],
[37,57,57,63,49,47,59,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,75,59,62,59,66,55,62],
[68,0,77,52,62,54,59,57,59],
[56,54,0,49,61,49,53,53,54],
[72,79,82,0,76,66,67,65,70],
[69,69,70,55,0,61,68,62,64],
[72,77,82,65,70,0,65,70,64],
[65,72,78,64,63,66,0,70,68],
[76,74,78,66,69,61,61,0,67],
[69,72,77,61,67,67,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,69,64,78,86,63,62,68],
[65,0,75,67,65,74,77,71,63],
[62,56,0,50,60,71,68,59,64],
[67,64,81,0,60,81,63,62,67],
[53,66,71,71,0,78,67,61,65],
[45,57,60,50,53,0,53,57,51],
[68,54,63,68,64,78,0,62,71],
[69,60,72,69,70,74,69,0,68],
[63,68,67,64,66,80,60,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,62,81,58,77,72,98,77],
[61,0,70,82,60,77,73,99,88],
[69,61,0,60,59,70,66,86,84],
[50,49,71,0,63,62,44,99,66],
[73,71,72,68,0,76,61,89,83],
[54,54,61,69,55,0,60,108,69],
[59,58,65,87,70,71,0,105,85],
[33,32,45,32,42,23,26,0,65],
[54,43,47,65,48,62,46,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,51,57,71,72,61,61,54],
[62,0,61,62,73,56,56,51,56],
[80,70,0,72,81,67,64,72,66],
[74,69,59,0,75,60,59,53,60],
[60,58,50,56,0,60,55,53,56],
[59,75,64,71,71,0,60,65,60],
[70,75,67,72,76,71,0,68,61],
[70,80,59,78,78,66,63,0,60],
[77,75,65,71,75,71,70,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,64,64,73,66,60,74,52],
[58,0,63,57,50,73,65,75,48],
[67,68,0,61,76,51,53,68,58],
[67,74,70,0,78,58,69,64,66],
[58,81,55,53,0,62,65,70,66],
[65,58,80,73,69,0,81,77,60],
[71,66,78,62,66,50,0,67,49],
[57,56,63,67,61,54,64,0,51],
[79,83,73,65,65,71,82,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,73,80,72,62,65,66,69],
[55,0,77,61,61,52,55,45,67],
[58,54,0,49,63,45,45,60,58],
[51,70,82,0,71,58,68,69,73],
[59,70,68,60,0,70,58,70,79],
[69,79,86,73,61,0,61,64,64],
[66,76,86,63,73,70,0,65,85],
[65,86,71,62,61,67,66,0,64],
[62,64,73,58,52,67,46,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,59,67,59,55,63,62,63],
[61,0,60,64,56,55,61,59,69],
[72,71,0,73,68,58,70,77,80],
[64,67,58,0,62,58,64,71,67],
[72,75,63,69,0,59,63,69,65],
[76,76,73,73,72,0,64,70,68],
[68,70,61,67,68,67,0,68,70],
[69,72,54,60,62,61,63,0,67],
[68,62,51,64,66,63,61,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,61,69,61,70,65,70,69],
[75,0,64,82,76,74,98,76,83],
[70,67,0,63,57,70,66,68,72],
[62,49,68,0,66,74,66,69,81],
[70,55,74,65,0,70,65,68,72],
[61,57,61,57,61,0,59,70,66],
[66,33,65,65,66,72,0,74,70],
[61,55,63,62,63,61,57,0,64],
[62,48,59,50,59,65,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,70,67,70,63,70,68,67],
[54,0,70,60,59,59,68,63,58],
[61,61,0,61,59,59,68,68,59],
[64,71,70,0,63,65,75,66,63],
[61,72,72,68,0,71,72,78,60],
[68,72,72,66,60,0,69,73,71],
[61,63,63,56,59,62,0,71,62],
[63,68,63,65,53,58,60,0,58],
[64,73,72,68,71,60,69,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,49,53,63,64,80,65,63],
[75,0,67,53,72,68,64,55,54],
[82,64,0,80,56,80,101,71,71],
[78,78,51,0,66,81,92,69,79],
[68,59,75,65,0,65,96,60,66],
[67,63,51,50,66,0,66,56,71],
[51,67,30,39,35,65,0,48,49],
[66,76,60,62,71,75,83,0,67],
[68,77,60,52,65,60,82,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,63,63,66,68,67,66,58],
[78,0,72,65,66,76,68,79,75],
[68,59,0,60,69,72,59,63,65],
[68,66,71,0,66,72,68,71,61],
[65,65,62,65,0,82,73,66,60],
[63,55,59,59,49,0,60,59,50],
[64,63,72,63,58,71,0,78,64],
[65,52,68,60,65,72,53,0,60],
[73,56,66,70,71,81,67,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,57,52,57,52,53,63,65],
[75,0,67,66,68,59,70,73,67],
[74,64,0,63,69,67,65,76,79],
[79,65,68,0,71,66,76,71,70],
[74,63,62,60,0,60,66,73,68],
[79,72,64,65,71,0,71,73,70],
[78,61,66,55,65,60,0,72,71],
[68,58,55,60,58,58,59,0,60],
[66,64,52,61,63,61,60,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,58,62,62,63,69,61,66],
[66,0,59,53,57,49,59,65,52],
[73,72,0,74,69,66,64,74,84],
[69,78,57,0,58,69,44,68,60],
[69,74,62,73,0,77,69,66,61],
[68,82,65,62,54,0,69,86,78],
[62,72,67,87,62,62,0,68,79],
[70,66,57,63,65,45,63,0,71],
[65,79,47,71,70,53,52,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,64,90,39,29,47,56,70],
[86,0,71,84,54,61,69,46,59],
[67,60,0,55,65,56,49,51,54],
[41,47,76,0,40,47,55,44,59],
[92,77,66,91,0,67,55,80,65],
[102,70,75,84,64,0,66,69,71],
[84,62,82,76,76,65,0,56,75],
[75,85,80,87,51,62,75,0,67],
[61,72,77,72,66,60,56,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,78,67,66,65,65,68,78],
[60,0,61,59,62,70,60,65,64],
[53,70,0,54,61,61,62,64,67],
[64,72,77,0,63,74,69,69,70],
[65,69,70,68,0,67,69,69,64],
[66,61,70,57,64,0,59,67,63],
[66,71,69,62,62,72,0,66,63],
[63,66,67,62,62,64,65,0,58],
[53,67,64,61,67,68,68,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,64,65,65,65,64,62,67],
[61,0,65,59,76,66,68,66,61],
[67,66,0,66,69,63,62,68,67],
[66,72,65,0,74,61,73,62,70],
[66,55,62,57,0,67,62,57,54],
[66,65,68,70,64,0,70,56,61],
[67,63,69,58,69,61,0,57,65],
[69,65,63,69,74,75,74,0,59],
[64,70,64,61,77,70,66,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,62,63,52,83,70,49,69],
[49,0,92,80,73,72,79,61,72],
[69,39,0,69,51,82,70,48,78],
[68,51,62,0,30,52,59,40,71],
[79,58,80,101,0,82,91,70,70],
[48,59,49,79,49,0,56,47,48],
[61,52,61,72,40,75,0,40,68],
[82,70,83,91,61,84,91,0,80],
[62,59,53,60,61,83,63,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,60,64,66,69,63,66],
[66,0,68,65,63,69,72,62,58],
[65,63,0,67,60,65,69,66,62],
[71,66,64,0,54,61,63,60,53],
[67,68,71,77,0,81,73,69,64],
[65,62,66,70,50,0,70,58,53],
[62,59,62,68,58,61,0,65,56],
[68,69,65,71,62,73,66,0,64],
[65,73,69,78,67,78,75,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,74,71,76,65,71,73],
[68,0,63,69,68,77,61,60,68],
[60,68,0,65,61,58,60,54,73],
[57,62,66,0,64,60,61,56,61],
[60,63,70,67,0,75,66,67,71],
[55,54,73,71,56,0,57,60,60],
[66,70,71,70,65,74,0,66,67],
[60,71,77,75,64,71,65,0,64],
[58,63,58,70,60,71,64,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,53,76,96,69,82,70,55],
[80,0,71,70,92,75,74,74,61],
[78,60,0,63,83,64,85,65,75],
[55,61,68,0,84,56,83,69,74],
[35,39,48,47,0,51,55,54,48],
[62,56,67,75,80,0,79,71,72],
[49,57,46,48,76,52,0,51,50],
[61,57,66,62,77,60,80,0,58],
[76,70,56,57,83,59,81,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,72,58,66,66,69,72,74],
[65,0,66,59,63,63,68,71,65],
[59,65,0,64,60,52,63,66,65],
[73,72,67,0,59,64,74,72,66],
[65,68,71,72,0,62,71,77,71],
[65,68,79,67,69,0,71,74,75],
[62,63,68,57,60,60,0,62,55],
[59,60,65,59,54,57,69,0,73],
[57,66,66,65,60,56,76,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,63,63,60,56,73,64,60],
[67,0,69,67,66,52,74,75,61],
[68,62,0,64,53,62,62,77,69],
[68,64,67,0,59,61,71,75,65],
[71,65,78,72,0,64,71,79,77],
[75,79,69,70,67,0,73,84,64],
[58,57,69,60,60,58,0,68,56],
[67,56,54,56,52,47,63,0,52],
[71,70,62,66,54,67,75,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,51,48,41,44,42,39,31],
[73,0,49,57,55,61,65,61,54],
[80,82,0,84,81,85,76,64,76],
[83,74,47,0,61,69,65,46,61],
[90,76,50,70,0,71,85,67,74],
[87,70,46,62,60,0,56,54,51],
[89,66,55,66,46,75,0,46,56],
[92,70,67,85,64,77,85,0,71],
[100,77,55,70,57,80,75,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,64,51,71,63,59,71,72],
[55,0,58,54,65,58,63,51,69],
[67,73,0,61,74,63,68,70,70],
[80,77,70,0,71,66,67,60,76],
[60,66,57,60,0,61,60,58,71],
[68,73,68,65,70,0,56,61,63],
[72,68,63,64,71,75,0,65,74],
[60,80,61,71,73,70,66,0,81],
[59,62,61,55,60,68,57,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,70,78,62,66,64,60,75],
[50,0,54,59,51,56,58,55,60],
[61,77,0,70,57,57,58,63,73],
[53,72,61,0,56,56,56,59,69],
[69,80,74,75,0,68,73,62,79],
[65,75,74,75,63,0,70,69,72],
[67,73,73,75,58,61,0,61,69],
[71,76,68,72,69,62,70,0,74],
[56,71,58,62,52,59,62,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,85,74,78,61,70,84,75],
[65,0,79,86,63,77,82,75,71],
[46,52,0,56,48,69,65,62,54],
[57,45,75,0,42,62,68,59,67],
[53,68,83,89,0,57,72,78,68],
[70,54,62,69,74,0,78,66,65],
[61,49,66,63,59,53,0,56,54],
[47,56,69,72,53,65,75,0,53],
[56,60,77,64,63,66,77,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,62,65,67,70,56,62,69],
[72,0,69,69,71,70,63,75,76],
[69,62,0,70,70,61,65,69,69],
[66,62,61,0,70,56,62,61,73],
[64,60,61,61,0,63,66,65,69],
[61,61,70,75,68,0,68,62,71],
[75,68,66,69,65,63,0,74,72],
[69,56,62,70,66,69,57,0,71],
[62,55,62,58,62,60,59,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,59,59,51,60,60,61,63],
[73,0,73,67,71,81,60,74,66],
[72,58,0,48,59,70,69,58,58],
[72,64,83,0,58,73,51,63,70],
[80,60,72,73,0,76,68,64,74],
[71,50,61,58,55,0,54,61,52],
[71,71,62,80,63,77,0,69,69],
[70,57,73,68,67,70,62,0,71],
[68,65,73,61,57,79,62,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,64,65,72,57,65,69,69],
[66,0,78,72,77,60,75,67,73],
[67,53,0,62,60,64,63,60,71],
[66,59,69,0,63,58,69,69,63],
[59,54,71,68,0,62,69,53,66],
[74,71,67,73,69,0,64,65,77],
[66,56,68,62,62,67,0,61,64],
[62,64,71,62,78,66,70,0,74],
[62,58,60,68,65,54,67,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,80,71,40,72,78,51,70],
[60,0,79,71,69,79,80,80,81],
[51,52,0,62,41,81,60,81,71],
[60,60,69,0,80,78,69,90,69],
[91,62,90,51,0,68,58,61,81],
[59,52,50,53,63,0,60,63,72],
[53,51,71,62,73,71,0,64,72],
[80,51,50,41,70,68,67,0,79],
[61,50,60,62,50,59,59,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,63,68,67,72,72,72,64],
[60,0,58,57,61,65,63,68,63],
[68,73,0,63,64,67,69,71,62],
[63,74,68,0,68,61,63,71,67],
[64,70,67,63,0,77,75,71,73],
[59,66,64,70,54,0,62,64,61],
[59,68,62,68,56,69,0,62,65],
[59,63,60,60,60,67,69,0,57],
[67,68,69,64,58,70,66,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,21,67,53,76,56,77,56],
[65,0,20,76,54,43,54,54,88],
[110,111,0,89,86,88,56,99,99],
[64,55,42,0,53,32,54,54,87],
[78,77,45,78,0,65,55,44,78],
[55,88,43,99,66,0,43,54,77],
[75,77,75,77,76,88,0,65,99],
[54,77,32,77,87,77,66,0,66],
[75,43,32,44,53,54,32,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,55,61,64,55,63,61,62],
[57,0,70,61,70,50,58,61,50],
[76,61,0,60,65,52,67,64,61],
[70,70,71,0,73,62,75,76,70],
[67,61,66,58,0,65,75,76,73],
[76,81,79,69,66,0,68,66,65],
[68,73,64,56,56,63,0,71,62],
[70,70,67,55,55,65,60,0,53],
[69,81,70,61,58,66,69,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,80,70,62,66,75,60,76],
[79,0,89,57,61,66,70,74,74],
[51,42,0,50,46,45,49,42,57],
[61,74,81,0,71,63,63,64,82],
[69,70,85,60,0,69,64,71,78],
[65,65,86,68,62,0,73,55,64],
[56,61,82,68,67,58,0,51,60],
[71,57,89,67,60,76,80,0,69],
[55,57,74,49,53,67,71,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,55,63,77,68,77,78,92],
[57,0,54,80,70,88,68,67,76],
[76,77,0,68,67,74,66,65,79],
[68,51,63,0,60,62,57,66,65],
[54,61,64,71,0,71,80,64,81],
[63,43,57,69,60,0,57,52,60],
[54,63,65,74,51,74,0,62,69],
[53,64,66,65,67,79,69,0,80],
[39,55,52,66,50,71,62,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,57,49,57,61,68,59,61],
[66,0,61,52,70,62,74,75,56],
[74,70,0,70,65,82,80,78,74],
[82,79,61,0,65,65,69,69,67],
[74,61,66,66,0,70,84,77,74],
[70,69,49,66,61,0,73,68,62],
[63,57,51,62,47,58,0,63,61],
[72,56,53,62,54,63,68,0,65],
[70,75,57,64,57,69,70,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,62,58,65,63,68,65,58],
[76,0,76,66,71,66,61,76,63],
[69,55,0,55,65,65,61,74,59],
[73,65,76,0,66,65,58,71,73],
[66,60,66,65,0,62,61,65,64],
[68,65,66,66,69,0,64,75,64],
[63,70,70,73,70,67,0,69,62],
[66,55,57,60,66,56,62,0,58],
[73,68,72,58,67,67,69,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,47,59,67,62,67,62],
[64,0,75,65,59,69,56,67,66],
[61,56,0,53,60,52,61,55,60],
[84,66,78,0,61,69,61,58,64],
[72,72,71,70,0,67,68,70,64],
[64,62,79,62,64,0,65,67,73],
[69,75,70,70,63,66,0,64,61],
[64,64,76,73,61,64,67,0,70],
[69,65,71,67,67,58,70,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,53,62,55,46,67,56,63],
[72,0,67,68,79,63,67,64,66],
[78,64,0,65,66,54,64,65,70],
[69,63,66,0,76,52,65,61,65],
[76,52,65,55,0,54,62,73,57],
[85,68,77,79,77,0,61,70,63],
[64,64,67,66,69,70,0,71,61],
[75,67,66,70,58,61,60,0,60],
[68,65,61,66,74,68,70,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,70,46,65,69,71,61,73],
[88,0,83,72,77,84,76,58,91],
[61,48,0,64,67,71,71,67,79],
[85,59,67,0,76,77,78,78,87],
[66,54,64,55,0,78,75,65,79],
[62,47,60,54,53,0,70,57,72],
[60,55,60,53,56,61,0,60,74],
[70,73,64,53,66,74,71,0,84],
[58,40,52,44,52,59,57,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,68,60,63,56,63,54,63],
[63,0,54,50,49,56,54,52,58],
[63,77,0,55,69,65,48,67,58],
[71,81,76,0,72,76,65,73,79],
[68,82,62,59,0,57,64,63,71],
[75,75,66,55,74,0,66,66,65],
[68,77,83,66,67,65,0,70,79],
[77,79,64,58,68,65,61,0,65],
[68,73,73,52,60,66,52,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,61,63,65,79,66,60,68],
[64,0,65,61,60,74,66,63,58],
[70,66,0,69,81,65,67,67,58],
[68,70,62,0,64,70,66,62,59],
[66,71,50,67,0,72,68,70,67],
[52,57,66,61,59,0,58,62,62],
[65,65,64,65,63,73,0,65,53],
[71,68,64,69,61,69,66,0,71],
[63,73,73,72,64,69,78,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,67,74,73,76,63,70,80],
[65,0,65,66,55,70,66,68,70],
[64,66,0,76,64,72,71,61,81],
[57,65,55,0,61,56,47,57,56],
[58,76,67,70,0,66,71,59,67],
[55,61,59,75,65,0,64,49,65],
[68,65,60,84,60,67,0,53,70],
[61,63,70,74,72,82,78,0,69],
[51,61,50,75,64,66,61,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,58,61,57,76,63,59,54],
[72,0,60,65,79,68,72,62,68],
[73,71,0,70,77,81,73,65,56],
[70,66,61,0,65,78,64,60,58],
[74,52,54,66,0,72,80,71,71],
[55,63,50,53,59,0,54,55,57],
[68,59,58,67,51,77,0,66,62],
[72,69,66,71,60,76,65,0,68],
[77,63,75,73,60,74,69,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,75,75,66,78,62,73],
[61,0,65,68,62,59,83,66,70],
[66,66,0,76,71,58,84,66,72],
[56,63,55,0,61,63,74,56,48],
[56,69,60,70,0,69,68,64,64],
[65,72,73,68,62,0,75,60,69],
[53,48,47,57,63,56,0,44,55],
[69,65,65,75,67,71,87,0,64],
[58,61,59,83,67,62,76,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,71,75,74,63,63,74,70],
[69,0,71,78,61,63,78,76,69],
[60,60,0,78,63,65,71,74,61],
[56,53,53,0,65,65,69,59,66],
[57,70,68,66,0,65,66,61,61],
[68,68,66,66,66,0,71,67,64],
[68,53,60,62,65,60,0,65,58],
[57,55,57,72,70,64,66,0,63],
[61,62,70,65,70,67,73,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,58,61,60,55,51,56,49],
[77,0,68,81,74,77,71,66,62],
[73,63,0,74,61,72,61,61,58],
[70,50,57,0,63,65,54,55,53],
[71,57,70,68,0,74,60,61,63],
[76,54,59,66,57,0,60,58,63],
[80,60,70,77,71,71,0,69,69],
[75,65,70,76,70,73,62,0,77],
[82,69,73,78,68,68,62,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,79,80,67,83,65,67,73],
[59,0,75,70,66,75,69,72,77],
[52,56,0,70,66,75,57,74,75],
[51,61,61,0,82,68,67,55,71],
[64,65,65,49,0,69,67,64,65],
[48,56,56,63,62,0,47,68,66],
[66,62,74,64,64,84,0,72,71],
[64,59,57,76,67,63,59,0,78],
[58,54,56,60,66,65,60,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,66,66,65,68,66,62,72],
[55,0,54,61,55,58,63,57,58],
[65,77,0,66,72,75,73,65,69],
[65,70,65,0,66,66,66,61,65],
[66,76,59,65,0,60,60,61,71],
[63,73,56,65,71,0,73,65,76],
[65,68,58,65,71,58,0,68,64],
[69,74,66,70,70,66,63,0,70],
[59,73,62,66,60,55,67,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,33,53,22,25,32,32,33],
[63,0,54,55,45,66,66,42,63],
[98,77,0,85,44,55,86,61,74],
[78,76,46,0,67,90,81,54,68],
[109,86,87,64,0,97,97,86,86],
[106,65,76,41,34,0,66,73,61],
[99,65,45,50,34,65,0,52,54],
[99,89,70,77,45,58,79,0,76],
[98,68,57,63,45,70,77,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,59,64,66,58,68,63,56],
[60,0,75,73,76,71,73,70,65],
[72,56,0,74,60,62,75,58,64],
[67,58,57,0,56,68,59,51,72],
[65,55,71,75,0,67,73,54,63],
[73,60,69,63,64,0,81,59,63],
[63,58,56,72,58,50,0,52,58],
[68,61,73,80,77,72,79,0,63],
[75,66,67,59,68,68,73,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,45,68,52,63,53,44,52],
[61,0,54,75,47,42,69,53,71],
[86,77,0,76,71,64,71,53,62],
[63,56,55,0,53,57,44,44,39],
[79,84,60,78,0,56,71,37,55],
[68,89,67,74,75,0,69,59,53],
[78,62,60,87,60,62,0,60,61],
[87,78,78,87,94,72,71,0,63],
[79,60,69,92,76,78,70,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,82,59,75,76,74,81,72],
[51,0,67,62,66,70,46,57,70],
[49,64,0,49,47,76,67,53,58],
[72,69,82,0,66,76,54,61,70],
[56,65,84,65,0,79,58,59,64],
[55,61,55,55,52,0,60,55,52],
[57,85,64,77,73,71,0,70,73],
[50,74,78,70,72,76,61,0,72],
[59,61,73,61,67,79,58,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,77,70,63,51,74,67,59],
[73,0,74,73,62,57,84,75,64],
[54,57,0,60,52,42,55,53,55],
[61,58,71,0,62,66,69,68,66],
[68,69,79,69,0,65,79,74,78],
[80,74,89,65,66,0,89,68,76],
[57,47,76,62,52,42,0,53,54],
[64,56,78,63,57,63,78,0,60],
[72,67,76,65,53,55,77,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,72,64,66,59,62,67,44],
[71,0,64,56,65,64,63,61,66],
[59,67,0,69,67,57,70,58,71],
[67,75,62,0,77,60,79,64,64],
[65,66,64,54,0,62,77,66,60],
[72,67,74,71,69,0,77,58,66],
[69,68,61,52,54,54,0,58,55],
[64,70,73,67,65,73,73,0,64],
[87,65,60,67,71,65,76,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,66,74,70,69,68,71,54],
[70,0,66,65,54,67,61,82,70],
[65,65,0,86,63,72,76,69,55],
[57,66,45,0,61,66,57,67,46],
[61,77,68,70,0,59,60,66,63],
[62,64,59,65,72,0,66,63,42],
[63,70,55,74,71,65,0,71,49],
[60,49,62,64,65,68,60,0,65],
[77,61,76,85,68,89,82,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,62,68,71,68,62,75,62],
[74,0,66,68,62,76,65,77,71],
[69,65,0,61,78,74,69,80,73],
[63,63,70,0,74,74,63,67,61],
[60,69,53,57,0,66,63,71,61],
[63,55,57,57,65,0,57,74,71],
[69,66,62,68,68,74,0,74,77],
[56,54,51,64,60,57,57,0,54],
[69,60,58,70,70,60,54,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,77,68,63,83,63,79,73],
[61,0,65,63,65,74,68,73,68],
[54,66,0,56,59,70,54,70,57],
[63,68,75,0,71,71,57,68,68],
[68,66,72,60,0,71,62,67,68],
[48,57,61,60,60,0,57,57,60],
[68,63,77,74,69,74,0,70,63],
[52,58,61,63,64,74,61,0,73],
[58,63,74,63,63,71,68,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,72,59,69,62,69,63,56],
[71,0,85,70,69,60,65,75,66],
[59,46,0,56,54,51,57,59,56],
[72,61,75,0,70,68,77,70,69],
[62,62,77,61,0,64,65,62,63],
[69,71,80,63,67,0,66,66,68],
[62,66,74,54,66,65,0,69,71],
[68,56,72,61,69,65,62,0,64],
[75,65,75,62,68,63,60,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,76,64,68,72,67,71,77],
[74,0,78,65,81,64,66,72,72],
[55,53,0,53,62,53,51,64,60],
[67,66,78,0,71,61,66,59,81],
[63,50,69,60,0,56,60,69,69],
[59,67,78,70,75,0,70,64,81],
[64,65,80,65,71,61,0,69,68],
[60,59,67,72,62,67,62,0,72],
[54,59,71,50,62,50,63,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,73,57,62,59,66,67,66],
[70,0,67,65,73,65,67,67,70],
[58,64,0,54,63,64,57,62,71],
[74,66,77,0,75,70,65,73,69],
[69,58,68,56,0,65,61,70,69],
[72,66,67,61,66,0,56,68,66],
[65,64,74,66,70,75,0,61,62],
[64,64,69,58,61,63,70,0,63],
[65,61,60,62,62,65,69,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,82,61,71,72,70,80,72],
[39,0,55,48,59,70,57,58,50],
[49,76,0,52,62,62,45,70,50],
[70,83,79,0,75,70,57,69,70],
[60,72,69,56,0,64,63,68,55],
[59,61,69,61,67,0,74,56,74],
[61,74,86,74,68,57,0,63,68],
[51,73,61,62,63,75,68,0,59],
[59,81,81,61,76,57,63,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,64,58,61,61,65,67,66],
[72,0,67,69,65,72,70,78,72],
[67,64,0,65,72,63,76,77,77],
[73,62,66,0,71,69,82,75,92],
[70,66,59,60,0,64,65,69,77],
[70,59,68,62,67,0,74,70,70],
[66,61,55,49,66,57,0,71,67],
[64,53,54,56,62,61,60,0,66],
[65,59,54,39,54,61,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,76,56,71,80,85,66,73],
[56,0,58,50,66,69,74,56,67],
[55,73,0,58,69,58,74,54,64],
[75,81,73,0,93,72,85,64,83],
[60,65,62,38,0,66,74,59,68],
[51,62,73,59,65,0,81,64,57],
[46,57,57,46,57,50,0,61,58],
[65,75,77,67,72,67,70,0,65],
[58,64,67,48,63,74,73,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,79,69,77,73,65,65,69],
[69,0,64,62,59,64,70,65,72],
[52,67,0,59,56,69,65,64,71],
[62,69,72,0,70,76,75,72,67],
[54,72,75,61,0,65,68,61,73],
[58,67,62,55,66,0,65,63,60],
[66,61,66,56,63,66,0,59,58],
[66,66,67,59,70,68,72,0,61],
[62,59,60,64,58,71,73,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,48,72,36,83,84,59,73],
[71,0,70,93,59,119,94,82,72],
[83,61,0,83,72,84,96,71,97],
[59,38,48,0,48,61,84,49,60],
[95,72,59,83,0,107,71,83,83],
[48,12,47,70,24,0,72,48,36],
[47,37,35,47,60,59,0,48,47],
[72,49,60,82,48,83,83,0,73],
[58,59,34,71,48,95,84,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,61,78,74,66,73,69,64],
[70,0,68,78,74,66,79,64,68],
[70,63,0,79,76,65,82,77,66],
[53,53,52,0,63,58,69,65,59],
[57,57,55,68,0,59,73,60,58],
[65,65,66,73,72,0,72,72,60],
[58,52,49,62,58,59,0,58,54],
[62,67,54,66,71,59,73,0,58],
[67,63,65,72,73,71,77,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,64,66,65,77,68,62,69],
[61,0,68,62,54,64,66,48,63],
[67,63,0,59,65,76,64,67,66],
[65,69,72,0,60,74,78,60,70],
[66,77,66,71,0,80,72,57,64],
[54,67,55,57,51,0,64,52,56],
[63,65,67,53,59,67,0,55,63],
[69,83,64,71,74,79,76,0,78],
[62,68,65,61,67,75,68,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,77,66,72,68,76,73,85],
[76,0,68,71,74,65,84,67,81],
[54,63,0,54,63,52,59,60,68],
[65,60,77,0,68,61,71,63,81],
[59,57,68,63,0,65,82,71,80],
[63,66,79,70,66,0,73,61,69],
[55,47,72,60,49,58,0,61,52],
[58,64,71,68,60,70,70,0,66],
[46,50,63,50,51,62,79,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,61,76,70,58,60,58,72],
[72,0,56,74,58,69,72,69,76],
[70,75,0,65,67,71,70,68,72],
[55,57,66,0,60,68,69,59,64],
[61,73,64,71,0,67,64,66,69],
[73,62,60,63,64,0,72,65,75],
[71,59,61,62,67,59,0,60,69],
[73,62,63,72,65,66,71,0,73],
[59,55,59,67,62,56,62,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,60,73,71,95,83,60,72],
[46,0,48,37,35,72,60,50,48],
[71,83,0,38,60,60,36,61,47],
[58,94,93,0,59,85,95,84,70],
[60,96,71,72,0,85,72,96,59],
[36,59,71,46,46,0,47,59,46],
[48,71,95,36,59,84,0,60,35],
[71,81,70,47,35,72,71,0,46],
[59,83,84,61,72,85,96,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,49,70,63,65,70,64,56],
[64,0,69,72,55,59,61,69,72],
[82,62,0,82,66,65,69,77,65],
[61,59,49,0,60,49,58,63,64],
[68,76,65,71,0,71,68,65,64],
[66,72,66,82,60,0,61,73,61],
[61,70,62,73,63,70,0,74,64],
[67,62,54,68,66,58,57,0,68],
[75,59,66,67,67,70,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,64,80,62,56,67,75,72],
[49,0,49,67,60,55,52,58,64],
[67,82,0,83,63,67,78,63,66],
[51,64,48,0,55,42,56,66,49],
[69,71,68,76,0,71,64,64,75],
[75,76,64,89,60,0,61,74,74],
[64,79,53,75,67,70,0,68,65],
[56,73,68,65,67,57,63,0,78],
[59,67,65,82,56,57,66,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,54,30,61,59,39,42,43],
[85,0,61,63,67,77,71,55,57],
[77,70,0,64,76,52,58,56,55],
[101,68,67,0,78,66,60,51,66],
[70,64,55,53,0,57,45,52,69],
[72,54,79,65,74,0,52,63,64],
[92,60,73,71,86,79,0,77,69],
[89,76,75,80,79,68,54,0,68],
[88,74,76,65,62,67,62,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,58,65,64,70,67,81],
[64,0,66,60,64,59,67,58,60],
[63,65,0,55,66,53,64,60,69],
[73,71,76,0,73,66,70,65,87],
[66,67,65,58,0,59,65,66,78],
[67,72,78,65,72,0,68,81,75],
[61,64,67,61,66,63,0,66,68],
[64,73,71,66,65,50,65,0,74],
[50,71,62,44,53,56,63,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,64,65,64,97,131,97,131],
[34,0,0,65,0,31,67,31,67],
[67,131,0,98,64,64,67,64,131],
[66,66,33,0,33,97,66,66,100],
[67,131,67,98,0,64,100,97,98],
[34,100,67,34,67,0,67,33,100],
[0,64,64,65,31,64,0,31,98],
[34,100,67,65,34,98,100,0,67],
[0,64,0,31,33,31,33,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,90,59,71,61,81,79,73],
[62,0,84,67,69,51,78,67,73],
[41,47,0,48,53,36,79,45,48],
[72,64,83,0,75,65,68,56,71],
[60,62,78,56,0,73,89,67,58],
[70,80,95,66,58,0,77,68,70],
[50,53,52,63,42,54,0,57,41],
[52,64,86,75,64,63,74,0,62],
[58,58,83,60,73,61,90,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,57,60,60,67,59,57,65],
[62,0,61,55,52,59,61,66,65],
[74,70,0,62,62,68,58,76,73],
[71,76,69,0,75,67,65,73,67],
[71,79,69,56,0,65,63,74,74],
[64,72,63,64,66,0,67,67,80],
[72,70,73,66,68,64,0,65,76],
[74,65,55,58,57,64,66,0,66],
[66,66,58,64,57,51,55,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,77,82,67,67,68,65,91],
[58,0,58,58,67,66,61,58,77],
[54,73,0,73,61,64,51,47,75],
[49,73,58,0,66,65,54,62,72],
[64,64,70,65,0,65,50,54,73],
[64,65,67,66,66,0,61,73,80],
[63,70,80,77,81,70,0,74,87],
[66,73,84,69,77,58,57,0,90],
[40,54,56,59,58,51,44,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,61,61,68,70,69,64,69],
[62,0,68,55,58,56,63,59,67],
[70,63,0,59,63,56,70,72,73],
[70,76,72,0,77,65,79,72,81],
[63,73,68,54,0,66,63,61,79],
[61,75,75,66,65,0,69,65,76],
[62,68,61,52,68,62,0,70,69],
[67,72,59,59,70,66,61,0,65],
[62,64,58,50,52,55,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,53,61,53,64,66,63,62],
[61,0,50,62,47,64,59,67,63],
[78,81,0,63,61,79,70,69,68],
[70,69,68,0,62,75,70,60,60],
[78,84,70,69,0,70,71,64,64],
[67,67,52,56,61,0,54,60,51],
[65,72,61,61,60,77,0,58,65],
[68,64,62,71,67,71,73,0,71],
[69,68,63,71,67,80,66,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,63,61,81,56,61,59,60],
[56,0,59,66,65,60,64,48,68],
[68,72,0,72,82,62,68,62,64],
[70,65,59,0,66,59,76,48,69],
[50,66,49,65,0,54,56,47,66],
[75,71,69,72,77,0,75,57,76],
[70,67,63,55,75,56,0,55,63],
[72,83,69,83,84,74,76,0,63],
[71,63,67,62,65,55,68,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,57,61,66,58,66,63,47],
[65,0,66,64,71,59,66,60,60],
[74,65,0,65,72,63,72,73,63],
[70,67,66,0,70,61,72,66,61],
[65,60,59,61,0,52,66,65,57],
[73,72,68,70,79,0,71,64,64],
[65,65,59,59,65,60,0,61,51],
[68,71,58,65,66,67,70,0,68],
[84,71,68,70,74,67,80,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,65,73,65,56,64,59,49],
[80,0,64,74,69,64,53,71,70],
[66,67,0,72,68,49,73,65,60],
[58,57,59,0,61,45,56,60,54],
[66,62,63,70,0,54,59,57,65],
[75,67,82,86,77,0,76,62,72],
[67,78,58,75,72,55,0,66,76],
[72,60,66,71,74,69,65,0,72],
[82,61,71,77,66,59,55,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,66,72,56,66,64,61,68],
[55,0,67,65,56,59,51,59,57],
[65,64,0,72,55,56,54,61,52],
[59,66,59,0,63,60,63,57,60],
[75,75,76,68,0,68,62,61,67],
[65,72,75,71,63,0,62,60,63],
[67,80,77,68,69,69,0,67,61],
[70,72,70,74,70,71,64,0,70],
[63,74,79,71,64,68,70,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,83,48,82,65,97,82,83],
[35,0,70,35,84,32,35,52,53],
[48,61,0,51,81,30,80,52,85],
[83,96,80,0,100,80,97,50,101],
[49,47,50,31,0,31,15,49,50],
[66,99,101,51,100,0,50,52,69],
[34,96,51,34,116,81,0,52,69],
[49,79,79,81,82,79,79,0,114],
[48,78,46,30,81,62,62,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,70,75,55,38,60,65,66],
[75,0,73,89,52,66,68,92,68],
[61,58,0,71,63,54,78,79,79],
[56,42,60,0,59,39,53,58,54],
[76,79,68,72,0,49,76,79,83],
[93,65,77,92,82,0,85,95,84],
[71,63,53,78,55,46,0,63,54],
[66,39,52,73,52,36,68,0,52],
[65,63,52,77,48,47,77,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,61,59,61,59,62,58,67],
[61,0,65,74,67,70,71,64,71],
[70,66,0,65,63,65,66,58,70],
[72,57,66,0,63,66,61,64,64],
[70,64,68,68,0,65,69,61,62],
[72,61,66,65,66,0,67,67,73],
[69,60,65,70,62,64,0,55,70],
[73,67,73,67,70,64,76,0,70],
[64,60,61,67,69,58,61,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,56,70,71,52,61,63,57],
[64,0,63,69,59,59,57,62,51],
[75,68,0,75,75,57,65,63,64],
[61,62,56,0,61,67,67,59,52],
[60,72,56,70,0,51,55,67,52],
[79,72,74,64,80,0,67,67,74],
[70,74,66,64,76,64,0,63,58],
[68,69,68,72,64,64,68,0,74],
[74,80,67,79,79,57,73,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,41,54,43,74,87,67,42],
[82,0,85,70,78,66,92,94,63],
[90,46,0,74,63,78,91,76,41],
[77,61,57,0,62,67,91,75,67],
[88,53,68,69,0,79,89,87,75],
[57,65,53,64,52,0,95,58,45],
[44,39,40,40,42,36,0,50,42],
[64,37,55,56,44,73,81,0,42],
[89,68,90,64,56,86,89,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,67,93,68,93,65,65,93],
[35,0,35,58,46,54,29,61,73],
[64,96,0,82,64,89,74,71,76],
[38,73,49,0,56,75,37,37,69],
[63,85,67,75,0,80,63,62,66],
[38,77,42,56,51,0,47,51,69],
[66,102,57,94,68,84,0,73,91],
[66,70,60,94,69,80,58,0,65],
[38,58,55,62,65,62,40,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,49,60,58,63,60,56,50],
[80,0,63,82,63,65,71,69,57],
[82,68,0,81,74,58,78,60,71],
[71,49,50,0,68,46,66,49,40],
[73,68,57,63,0,57,64,56,56],
[68,66,73,85,74,0,70,65,65],
[71,60,53,65,67,61,0,67,63],
[75,62,71,82,75,66,64,0,62],
[81,74,60,91,75,66,68,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,66,70,60,67,54,60],
[63,0,64,63,68,62,59,60,64],
[67,67,0,66,66,61,56,65,67],
[65,68,65,0,70,65,65,62,68],
[61,63,65,61,0,53,53,58,56],
[71,69,70,66,78,0,60,67,60],
[64,72,75,66,78,71,0,64,76],
[77,71,66,69,73,64,67,0,65],
[71,67,64,63,75,71,55,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,51,69,55,64,56,67,64],
[66,0,59,67,59,57,62,68,67],
[80,72,0,76,70,70,61,81,78],
[62,64,55,0,56,62,61,62,58],
[76,72,61,75,0,71,69,71,73],
[67,74,61,69,60,0,64,60,65],
[75,69,70,70,62,67,0,70,72],
[64,63,50,69,60,71,61,0,64],
[67,64,53,73,58,66,59,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,69,64,72,74,81,64,71],
[46,0,53,52,52,60,64,51,52],
[62,78,0,62,64,70,64,73,66],
[67,79,69,0,68,69,69,75,65],
[59,79,67,63,0,64,77,64,76],
[57,71,61,62,67,0,68,57,54],
[50,67,67,62,54,63,0,61,55],
[67,80,58,56,67,74,70,0,65],
[60,79,65,66,55,77,76,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,71,64,78,63,66,68],
[64,0,60,73,63,74,75,61,65],
[63,71,0,82,67,70,73,66,71],
[60,58,49,0,54,75,50,51,63],
[67,68,64,77,0,74,66,70,54],
[53,57,61,56,57,0,58,66,59],
[68,56,58,81,65,73,0,65,61],
[65,70,65,80,61,65,66,0,66],
[63,66,60,68,77,72,70,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,74,77,79,68,64,73,72],
[57,0,64,66,75,46,69,64,68],
[57,67,0,62,68,62,56,57,57],
[54,65,69,0,78,62,68,62,60],
[52,56,63,53,0,64,63,57,63],
[63,85,69,69,67,0,62,58,63],
[67,62,75,63,68,69,0,64,72],
[58,67,74,69,74,73,67,0,65],
[59,63,74,71,68,68,59,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,63,74,71,66,63,65,66],
[70,0,65,71,68,66,62,61,61],
[68,66,0,74,64,71,67,69,67],
[57,60,57,0,60,63,60,57,63],
[60,63,67,71,0,60,54,60,60],
[65,65,60,68,71,0,58,69,71],
[68,69,64,71,77,73,0,67,67],
[66,70,62,74,71,62,64,0,68],
[65,70,64,68,71,60,64,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,59,66,58,75,51,66,55],
[74,0,66,77,73,68,59,77,77],
[72,65,0,73,72,72,70,78,74],
[65,54,58,0,61,62,47,63,50],
[73,58,59,70,0,62,62,74,67],
[56,63,59,69,69,0,61,72,68],
[80,72,61,84,69,70,0,76,70],
[65,54,53,68,57,59,55,0,61],
[76,54,57,81,64,63,61,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,56,76,67,59,69,58,61],
[61,0,69,73,65,57,84,76,68],
[75,62,0,68,60,60,81,53,63],
[55,58,63,0,70,60,74,48,55],
[64,66,71,61,0,65,77,63,53],
[72,74,71,71,66,0,87,67,53],
[62,47,50,57,54,44,0,53,50],
[73,55,78,83,68,64,78,0,59],
[70,63,68,76,78,78,81,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,65,71,70,71,79,74,64],
[57,0,74,80,67,63,76,72,62],
[66,57,0,63,63,62,69,66,60],
[60,51,68,0,61,73,63,77,67],
[61,64,68,70,0,64,70,71,70],
[60,68,69,58,67,0,58,81,59],
[52,55,62,68,61,73,0,60,71],
[57,59,65,54,60,50,71,0,55],
[67,69,71,64,61,72,60,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,63,69,77,64,72,73,69],
[61,0,56,74,66,66,64,58,66],
[68,75,0,70,77,71,61,72,74],
[62,57,61,0,73,68,72,73,66],
[54,65,54,58,0,51,67,68,70],
[67,65,60,63,80,0,67,70,89],
[59,67,70,59,64,64,0,84,72],
[58,73,59,58,63,61,47,0,60],
[62,65,57,65,61,42,59,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,71,82,61,50,52,80,80],
[60,0,90,101,58,47,71,78,109],
[60,41,0,82,40,37,61,60,70],
[49,30,49,0,40,27,52,70,80],
[70,73,91,91,0,58,70,92,101],
[81,84,94,104,73,0,53,102,92],
[79,60,70,79,61,78,0,79,98],
[51,53,71,61,39,29,52,0,51],
[51,22,61,51,30,39,33,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,57,79,68,66,76,71,65],
[68,0,53,68,62,68,67,58,67],
[74,78,0,79,86,79,84,64,79],
[52,63,52,0,57,60,66,53,64],
[63,69,45,74,0,64,64,64,56],
[65,63,52,71,67,0,66,67,65],
[55,64,47,65,67,65,0,56,58],
[60,73,67,78,67,64,75,0,63],
[66,64,52,67,75,66,73,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,52,66,56,77,66,67,66],
[73,0,69,63,74,81,67,72,67],
[79,62,0,70,57,78,54,69,67],
[65,68,61,0,65,81,63,62,73],
[75,57,74,66,0,64,66,71,64],
[54,50,53,50,67,0,54,61,59],
[65,64,77,68,65,77,0,69,68],
[64,59,62,69,60,70,62,0,69],
[65,64,64,58,67,72,63,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,70,50,58,64,68,56,63],
[79,0,63,67,71,71,75,81,66],
[61,68,0,55,52,63,68,65,55],
[81,64,76,0,68,66,80,77,69],
[73,60,79,63,0,74,72,74,74],
[67,60,68,65,57,0,68,58,58],
[63,56,63,51,59,63,0,52,50],
[75,50,66,54,57,73,79,0,72],
[68,65,76,62,57,73,81,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,64,63,62,62,72,65,79],
[76,0,60,71,80,75,81,67,81],
[67,71,0,63,68,76,76,77,79],
[68,60,68,0,71,69,80,69,69],
[69,51,63,60,0,66,73,66,68],
[69,56,55,62,65,0,76,62,63],
[59,50,55,51,58,55,0,63,61],
[66,64,54,62,65,69,68,0,70],
[52,50,52,62,63,68,70,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,77,58,82,62,53,67],
[67,0,58,74,68,66,49,56,66],
[64,73,0,88,63,76,59,62,64],
[54,57,43,0,49,62,39,41,51],
[73,63,68,82,0,77,64,69,75],
[49,65,55,69,54,0,45,48,60],
[69,82,72,92,67,86,0,64,68],
[78,75,69,90,62,83,67,0,60],
[64,65,67,80,56,71,63,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,73,69,58,70,60,59,69],
[66,0,67,72,56,62,59,59,74],
[58,64,0,73,60,66,58,59,65],
[62,59,58,0,52,59,61,60,60],
[73,75,71,79,0,73,61,57,71],
[61,69,65,72,58,0,69,55,78],
[71,72,73,70,70,62,0,68,78],
[72,72,72,71,74,76,63,0,75],
[62,57,66,71,60,53,53,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,60,62,60,63,70,55,63],
[66,0,66,68,63,56,76,57,58],
[71,65,0,66,56,63,79,59,70],
[69,63,65,0,60,63,67,61,59],
[71,68,75,71,0,63,77,66,67],
[68,75,68,68,68,0,76,65,67],
[61,55,52,64,54,55,0,53,57],
[76,74,72,70,65,66,78,0,66],
[68,73,61,72,64,64,74,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,68,73,65,62,50,58,69],
[76,0,70,68,61,62,65,76,58],
[63,61,0,57,49,65,59,69,63],
[58,63,74,0,59,64,59,60,64],
[66,70,82,72,0,69,55,65,68],
[69,69,66,67,62,0,66,65,72],
[81,66,72,72,76,65,0,76,75],
[73,55,62,71,66,66,55,0,75],
[62,73,68,67,63,59,56,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,62,63,66,67,69,62],
[69,0,55,60,59,61,59,66,62],
[70,76,0,65,64,61,70,80,62],
[69,71,66,0,67,68,69,68,61],
[68,72,67,64,0,67,75,68,72],
[65,70,70,63,64,0,63,68,65],
[64,72,61,62,56,68,0,67,61],
[62,65,51,63,63,63,64,0,61],
[69,69,69,70,59,66,70,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,67,67,63,78,69,64,61],
[69,0,68,58,57,77,66,57,53],
[64,63,0,68,65,78,70,60,63],
[64,73,63,0,60,67,61,60,47],
[68,74,66,71,0,66,63,64,49],
[53,54,53,64,65,0,61,50,52],
[62,65,61,70,68,70,0,60,69],
[67,74,71,71,67,81,71,0,64],
[70,78,68,84,82,79,62,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,65,76,67,73,73,75,68],
[52,0,60,68,47,46,70,59,62],
[66,71,0,61,58,54,73,58,57],
[55,63,70,0,55,59,76,55,53],
[64,84,73,76,0,53,91,62,70],
[58,85,77,72,78,0,82,74,76],
[58,61,58,55,40,49,0,58,39],
[56,72,73,76,69,57,73,0,66],
[63,69,74,78,61,55,92,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,75,78,92,57,76,61,81],
[73,0,91,89,71,70,80,59,103],
[56,40,0,66,75,57,71,74,87],
[53,42,65,0,40,57,49,40,65],
[39,60,56,91,0,71,54,51,81],
[74,61,74,74,60,0,66,47,87],
[55,51,60,82,77,65,0,52,77],
[70,72,57,91,80,84,79,0,90],
[50,28,44,66,50,44,54,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,67,68,67,76,68,69,69],
[70,0,68,70,55,69,56,66,62],
[64,63,0,58,58,71,65,72,64],
[63,61,73,0,51,68,57,71,64],
[64,76,73,80,0,73,70,72,64],
[55,62,60,63,58,0,61,65,64],
[63,75,66,74,61,70,0,70,73],
[62,65,59,60,59,66,61,0,55],
[62,69,67,67,67,67,58,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,73,69,61,60,62,62,61],
[62,0,69,68,56,58,63,61,59],
[58,62,0,54,65,55,59,60,52],
[62,63,77,0,64,61,64,67,65],
[70,75,66,67,0,63,72,70,67],
[71,73,76,70,68,0,76,75,64],
[69,68,72,67,59,55,0,67,61],
[69,70,71,64,61,56,64,0,58],
[70,72,79,66,64,67,70,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,74,58,50,73,73,70,70],
[63,0,74,62,55,57,64,64,48],
[57,57,0,62,58,61,54,62,46],
[73,69,69,0,71,66,60,66,57],
[81,76,73,60,0,62,63,73,65],
[58,74,70,65,69,0,63,77,48],
[58,67,77,71,68,68,0,70,71],
[61,67,69,65,58,54,61,0,51],
[61,83,85,74,66,83,60,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,65,72,75,71,67,70,69],
[54,0,59,59,69,61,62,61,56],
[66,72,0,69,63,68,61,68,65],
[59,72,62,0,74,69,66,67,70],
[56,62,68,57,0,67,61,62,64],
[60,70,63,62,64,0,66,70,66],
[64,69,70,65,70,65,0,64,66],
[61,70,63,64,69,61,67,0,59],
[62,75,66,61,67,65,65,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,74,80,75,55,56,68,68],
[60,0,69,69,52,49,48,53,65],
[57,62,0,76,55,51,51,40,53],
[51,62,55,0,59,45,58,38,60],
[56,79,76,72,0,55,59,60,82],
[76,82,80,86,76,0,65,54,75],
[75,83,80,73,72,66,0,55,76],
[63,78,91,93,71,77,76,0,73],
[63,66,78,71,49,56,55,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,57,67,64,65,68,64,62],
[75,0,57,61,70,62,71,66,65],
[74,74,0,66,73,62,77,77,69],
[64,70,65,0,73,65,71,66,61],
[67,61,58,58,0,59,68,65,62],
[66,69,69,66,72,0,75,64,66],
[63,60,54,60,63,56,0,59,50],
[67,65,54,65,66,67,72,0,61],
[69,66,62,70,69,65,81,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,57,59,65,63,67,81,58],
[72,0,58,67,78,77,80,90,74],
[74,73,0,65,79,77,81,77,81],
[72,64,66,0,77,80,72,81,71],
[66,53,52,54,0,72,59,75,56],
[68,54,54,51,59,0,59,62,61],
[64,51,50,59,72,72,0,79,62],
[50,41,54,50,56,69,52,0,45],
[73,57,50,60,75,70,69,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,58,58,63,53,58,62,61],
[65,0,65,67,52,67,75,66,61],
[73,66,0,69,74,60,74,66,75],
[73,64,62,0,54,70,63,61,56],
[68,79,57,77,0,65,66,74,69],
[78,64,71,61,66,0,60,57,70],
[73,56,57,68,65,71,0,63,71],
[69,65,65,70,57,74,68,0,71],
[70,70,56,75,62,61,60,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,62,62,59,70,61,58,62],
[65,0,62,62,63,64,56,72,61],
[69,69,0,67,62,70,67,66,69],
[69,69,64,0,69,67,68,65,69],
[72,68,69,62,0,75,63,74,62],
[61,67,61,64,56,0,59,63,61],
[70,75,64,63,68,72,0,72,65],
[73,59,65,66,57,68,59,0,64],
[69,70,62,62,69,70,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,77,71,62,71,77,80],
[64,0,68,89,67,78,70,81,83],
[63,63,0,79,82,69,63,59,70],
[54,42,52,0,53,52,48,46,56],
[60,64,49,78,0,74,78,70,69],
[69,53,62,79,57,0,63,66,75],
[60,61,68,83,53,68,0,65,73],
[54,50,72,85,61,65,66,0,69],
[51,48,61,75,62,56,58,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,66,55,57,61,66,56,56],
[52,0,61,65,54,64,67,57,49],
[65,70,0,66,57,62,67,55,53],
[76,66,65,0,54,78,77,68,66],
[74,77,74,77,0,79,78,61,64],
[70,67,69,53,52,0,66,56,47],
[65,64,64,54,53,65,0,43,54],
[75,74,76,63,70,75,88,0,59],
[75,82,78,65,67,84,77,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,72,65,68,69,77,73,69],
[57,0,58,57,59,59,69,58,57],
[59,73,0,70,66,64,70,61,64],
[66,74,61,0,67,64,72,65,68],
[63,72,65,64,0,68,71,62,60],
[62,72,67,67,63,0,70,61,68],
[54,62,61,59,60,61,0,58,61],
[58,73,70,66,69,70,73,0,67],
[62,74,67,63,71,63,70,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,58,54,69,60,51,57,51],
[71,0,66,72,80,70,68,61,68],
[73,65,0,67,93,70,65,59,62],
[77,59,64,0,85,78,67,69,74],
[62,51,38,46,0,64,42,56,56],
[71,61,61,53,67,0,63,57,53],
[80,63,66,64,89,68,0,64,74],
[74,70,72,62,75,74,67,0,65],
[80,63,69,57,75,78,57,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,78,75,63,69,68,58,60],
[58,0,75,62,62,61,66,65,60],
[53,56,0,58,48,56,54,60,56],
[56,69,73,0,63,66,63,62,65],
[68,69,83,68,0,64,69,67,63],
[62,70,75,65,67,0,67,59,64],
[63,65,77,68,62,64,0,63,63],
[73,66,71,69,64,72,68,0,68],
[71,71,75,66,68,67,68,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,59,94,90,74,61,67,82],
[46,0,53,54,63,50,48,34,44],
[72,78,0,74,77,84,62,56,54],
[37,77,57,0,65,53,42,37,38],
[41,68,54,66,0,58,41,51,69],
[57,81,47,78,73,0,58,69,70],
[70,83,69,89,90,73,0,60,73],
[64,97,75,94,80,62,71,0,70],
[49,87,77,93,62,61,58,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,63,50,63,68,73,62,64],
[60,0,61,66,60,61,71,63,62],
[68,70,0,74,80,87,86,66,59],
[81,65,57,0,76,71,86,70,67],
[68,71,51,55,0,82,72,67,63],
[63,70,44,60,49,0,72,64,60],
[58,60,45,45,59,59,0,54,64],
[69,68,65,61,64,67,77,0,62],
[67,69,72,64,68,71,67,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,56,64,73,63,67,65],
[67,0,75,68,67,76,65,62,64],
[64,56,0,69,66,69,63,58,69],
[75,63,62,0,54,79,66,58,69],
[67,64,65,77,0,73,68,62,68],
[58,55,62,52,58,0,52,48,63],
[68,66,68,65,63,79,0,61,72],
[64,69,73,73,69,83,70,0,82],
[66,67,62,62,63,68,59,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,71,55,69,76,49,70,56],
[69,0,75,53,63,76,53,72,63],
[60,56,0,61,62,69,57,69,61],
[76,78,70,0,68,86,70,79,62],
[62,68,69,63,0,75,65,72,61],
[55,55,62,45,56,0,54,65,59],
[82,78,74,61,66,77,0,73,73],
[61,59,62,52,59,66,58,0,53],
[75,68,70,69,70,72,58,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,65,74,77,85,65,92,70],
[65,0,66,65,66,83,60,78,79],
[66,65,0,78,65,77,65,65,74],
[57,66,53,0,65,57,59,68,62],
[54,65,66,66,0,69,68,68,69],
[46,48,54,74,62,0,51,55,51],
[66,71,66,72,63,80,0,64,63],
[39,53,66,63,63,76,67,0,65],
[61,52,57,69,62,80,68,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,60,70,71,59,77,70,60],
[61,0,58,58,65,61,70,65,57],
[71,73,0,65,69,70,72,61,64],
[61,73,66,0,65,59,74,67,68],
[60,66,62,66,0,62,76,70,66],
[72,70,61,72,69,0,78,71,63],
[54,61,59,57,55,53,0,53,51],
[61,66,70,64,61,60,78,0,67],
[71,74,67,63,65,68,80,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,72,55,54,56,55,44,62],
[77,0,83,59,78,66,62,79,68],
[59,48,0,37,44,48,52,43,52],
[76,72,94,0,70,63,77,65,68],
[77,53,87,61,0,51,47,82,76],
[75,65,83,68,80,0,76,79,70],
[76,69,79,54,84,55,0,69,85],
[87,52,88,66,49,52,62,0,65],
[69,63,79,63,55,61,46,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,51,60,68,63,64,56,56],
[74,0,75,89,77,67,67,55,74],
[80,56,0,89,73,77,67,70,78],
[71,42,42,0,65,51,64,58,63],
[63,54,58,66,0,44,59,61,62],
[68,64,54,80,87,0,73,58,72],
[67,64,64,67,72,58,0,66,64],
[75,76,61,73,70,73,65,0,81],
[75,57,53,68,69,59,67,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,77,46,65,87,85,47,85],
[88,0,88,75,79,77,77,77,65],
[54,43,0,44,88,53,64,45,79],
[85,56,87,0,67,73,64,78,110],
[66,52,43,64,0,53,75,52,66],
[44,54,78,58,78,0,65,66,69],
[46,54,67,67,56,66,0,46,46],
[84,54,86,53,79,65,85,0,76],
[46,66,52,21,65,62,85,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,68,61,62,57,56,67,67],
[65,0,65,62,57,65,75,71,67],
[63,66,0,60,59,55,63,74,68],
[70,69,71,0,68,55,69,71,64],
[69,74,72,63,0,74,70,73,68],
[74,66,76,76,57,0,72,64,74],
[75,56,68,62,61,59,0,63,73],
[64,60,57,60,58,67,68,0,64],
[64,64,63,67,63,57,58,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,71,73,64,67,71,64,67],
[71,0,70,73,65,77,72,68,71],
[60,61,0,69,63,64,68,66,65],
[58,58,62,0,50,56,59,56,50],
[67,66,68,81,0,72,60,63,61],
[64,54,67,75,59,0,66,54,57],
[60,59,63,72,71,65,0,60,64],
[67,63,65,75,68,77,71,0,68],
[64,60,66,81,70,74,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,68,68,77,72,84,64,66],
[72,0,62,51,63,78,73,71,68],
[63,69,0,70,70,70,65,75,67],
[63,80,61,0,81,72,77,83,71],
[54,68,61,50,0,64,66,56,57],
[59,53,61,59,67,0,76,62,52],
[47,58,66,54,65,55,0,59,51],
[67,60,56,48,75,69,72,0,55],
[65,63,64,60,74,79,80,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,62,56,65,49,54,48,59],
[95,0,79,70,88,72,63,73,72],
[69,52,0,68,95,67,69,75,75],
[75,61,63,0,79,60,58,50,64],
[66,43,36,52,0,52,41,51,59],
[82,59,64,71,79,0,75,65,78],
[77,68,62,73,90,56,0,76,62],
[83,58,56,81,80,66,55,0,65],
[72,59,56,67,72,53,69,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,58,54,56,58,64,61,55],
[79,0,67,65,46,60,51,68,65],
[73,64,0,58,62,65,73,77,67],
[77,66,73,0,58,63,76,74,70],
[75,85,69,73,0,65,76,63,78],
[73,71,66,68,66,0,69,64,63],
[67,80,58,55,55,62,0,62,67],
[70,63,54,57,68,67,69,0,69],
[76,66,64,61,53,68,64,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,40,61,54,65,65,52,51],
[73,0,64,66,74,62,64,60,60],
[91,67,0,67,68,70,88,60,66],
[70,65,64,0,56,68,64,59,53],
[77,57,63,75,0,78,68,58,67],
[66,69,61,63,53,0,60,69,63],
[66,67,43,67,63,71,0,57,53],
[79,71,71,72,73,62,74,0,58],
[80,71,65,78,64,68,78,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,57,52,62,66,65,56,67],
[58,0,58,54,65,60,57,51,63],
[74,73,0,71,64,64,68,64,76],
[79,77,60,0,75,70,63,66,68],
[69,66,67,56,0,65,61,66,64],
[65,71,67,61,66,0,65,60,65],
[66,74,63,68,70,66,0,67,72],
[75,80,67,65,65,71,64,0,70],
[64,68,55,63,67,66,59,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,71,56,71,66,74,61,69],
[60,0,66,58,68,67,56,57,60],
[60,65,0,51,61,65,59,52,58],
[75,73,80,0,66,75,65,68,63],
[60,63,70,65,0,63,62,62,65],
[65,64,66,56,68,0,65,61,61],
[57,75,72,66,69,66,0,66,67],
[70,74,79,63,69,70,65,0,69],
[62,71,73,68,66,70,64,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,71,73,65,66,68,92,75],
[57,0,55,73,55,65,59,71,66],
[60,76,0,83,74,61,65,82,78],
[58,58,48,0,54,54,47,75,61],
[66,76,57,77,0,63,49,78,70],
[65,66,70,77,68,0,70,87,64],
[63,72,66,84,82,61,0,82,73],
[39,60,49,56,53,44,49,0,50],
[56,65,53,70,61,67,58,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,71,65,81,62,74,72,74],
[53,0,52,45,64,56,63,53,57],
[60,79,0,62,74,69,74,57,72],
[66,86,69,0,79,72,71,59,79],
[50,67,57,52,0,53,73,56,72],
[69,75,62,59,78,0,69,70,71],
[57,68,57,60,58,62,0,49,66],
[59,78,74,72,75,61,82,0,65],
[57,74,59,52,59,60,65,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,46,61,50,62,61,61,57],
[76,0,68,64,70,80,73,72,67],
[85,63,0,71,67,65,57,62,71],
[70,67,60,0,67,77,80,72,56],
[81,61,64,64,0,56,73,73,55],
[69,51,66,54,75,0,71,65,50],
[70,58,74,51,58,60,0,73,69],
[70,59,69,59,58,66,58,0,52],
[74,64,60,75,76,81,62,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,60,56,58,60,73,66,65],
[73,0,69,68,65,73,72,75,80],
[71,62,0,71,67,67,69,70,73],
[75,63,60,0,65,66,72,71,74],
[73,66,64,66,0,65,72,73,75],
[71,58,64,65,66,0,75,72,72],
[58,59,62,59,59,56,0,71,66],
[65,56,61,60,58,59,60,0,65],
[66,51,58,57,56,59,65,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,57,65,71,79,60,60,61],
[71,0,58,65,73,80,65,56,72],
[74,73,0,64,72,81,64,73,70],
[66,66,67,0,76,80,70,63,70],
[60,58,59,55,0,64,70,58,57],
[52,51,50,51,67,0,53,48,64],
[71,66,67,61,61,78,0,53,72],
[71,75,58,68,73,83,78,0,70],
[70,59,61,61,74,67,59,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,60,77,75,76,73,66,82],
[63,0,67,76,62,70,69,57,79],
[71,64,0,64,63,69,55,71,73],
[54,55,67,0,49,61,56,52,74],
[56,69,68,82,0,69,46,55,74],
[55,61,62,70,62,0,54,61,72],
[58,62,76,75,85,77,0,72,75],
[65,74,60,79,76,70,59,0,79],
[49,52,58,57,57,59,56,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,61,70,64,82,62,85,55],
[61,0,73,63,57,71,51,77,38],
[70,58,0,53,61,59,57,71,54],
[61,68,78,0,58,78,67,82,61],
[67,74,70,73,0,70,58,84,55],
[49,60,72,53,61,0,56,73,57],
[69,80,74,64,73,75,0,83,66],
[46,54,60,49,47,58,48,0,32],
[76,93,77,70,76,74,65,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,77,70,70,71,88,77,62],
[44,0,61,62,71,74,70,80,88],
[54,70,0,72,51,72,80,79,71],
[61,69,59,0,26,65,80,61,69],
[61,60,80,105,0,89,97,87,96],
[60,57,59,66,42,0,58,67,58],
[43,61,51,51,34,73,0,88,59],
[54,51,52,70,44,64,43,0,69],
[69,43,60,62,35,73,72,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,49,53,59,43,49,59,44],
[86,0,65,56,67,52,63,69,62],
[82,66,0,70,75,62,65,78,66],
[78,75,61,0,59,67,70,69,70],
[72,64,56,72,0,55,59,70,53],
[88,79,69,64,76,0,71,75,68],
[82,68,66,61,72,60,0,74,73],
[72,62,53,62,61,56,57,0,57],
[87,69,65,61,78,63,58,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,67,85,64,79,65,64,75],
[60,0,70,59,48,58,51,61,56],
[64,61,0,61,69,69,62,50,73],
[46,72,70,0,70,55,52,66,72],
[67,83,62,61,0,70,54,62,62],
[52,73,62,76,61,0,55,49,66],
[66,80,69,79,77,76,0,65,70],
[67,70,81,65,69,82,66,0,74],
[56,75,58,59,69,65,61,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,67,64,62,76,64,60,61],
[70,0,72,65,73,77,65,66,71],
[64,59,0,59,60,81,53,65,67],
[67,66,72,0,57,73,59,70,63],
[69,58,71,74,0,78,78,65,75],
[55,54,50,58,53,0,48,55,54],
[67,66,78,72,53,83,0,66,75],
[71,65,66,61,66,76,65,0,70],
[70,60,64,68,56,77,56,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,63,88,86,70,70,73,70],
[75,0,65,63,77,61,54,71,84],
[68,66,0,74,79,90,74,64,82],
[43,68,57,0,74,58,61,64,65],
[45,54,52,57,0,61,46,62,59],
[61,70,41,73,70,0,65,65,85],
[61,77,57,70,85,66,0,61,76],
[58,60,67,67,69,66,70,0,74],
[61,47,49,66,72,46,55,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,64,66,60,61,69,53,66],
[60,0,65,65,62,64,61,56,60],
[67,66,0,66,65,70,68,63,61],
[65,66,65,0,65,60,65,53,54],
[71,69,66,66,0,66,61,66,66],
[70,67,61,71,65,0,70,61,63],
[62,70,63,66,70,61,0,56,64],
[78,75,68,78,65,70,75,0,63],
[65,71,70,77,65,68,67,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,66,65,89,82,77,71,74],
[70,0,58,57,74,57,63,72,56],
[65,73,0,99,78,85,57,72,71],
[66,74,32,0,67,61,60,79,62],
[42,57,53,64,0,68,37,43,46],
[49,74,46,70,63,0,55,55,59],
[54,68,74,71,94,76,0,84,73],
[60,59,59,52,88,76,47,0,81],
[57,75,60,69,85,72,58,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,67,69,64,73,69,78],
[67,0,64,62,74,70,81,72,80],
[63,67,0,64,68,70,75,69,78],
[64,69,67,0,62,68,72,73,81],
[62,57,63,69,0,69,68,69,71],
[67,61,61,63,62,0,61,62,74],
[58,50,56,59,63,70,0,63,73],
[62,59,62,58,62,69,68,0,79],
[53,51,53,50,60,57,58,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,69,64,56,59,69,47,60],
[84,0,70,74,55,65,77,79,75],
[62,61,0,54,54,54,70,60,62],
[67,57,77,0,69,68,66,60,58],
[75,76,77,62,0,72,70,62,83],
[72,66,77,63,59,0,76,69,67],
[62,54,61,65,61,55,0,60,62],
[84,52,71,71,69,62,71,0,67],
[71,56,69,73,48,64,69,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,77,77,74,71,68,64,70],
[47,0,50,52,68,49,59,54,50],
[54,81,0,57,72,64,66,58,60],
[54,79,74,0,74,60,63,70,66],
[57,63,59,57,0,64,58,61,59],
[60,82,67,71,67,0,63,69,65],
[63,72,65,68,73,68,0,61,60],
[67,77,73,61,70,62,70,0,55],
[61,81,71,65,72,66,71,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,69,63,73,69,67,64,60],
[59,0,58,61,64,64,70,63,60],
[62,73,0,73,76,70,71,69,65],
[68,70,58,0,65,60,63,64,59],
[58,67,55,66,0,59,61,62,57],
[62,67,61,71,72,0,63,60,54],
[64,61,60,68,70,68,0,65,69],
[67,68,62,67,69,71,66,0,56],
[71,71,66,72,74,77,62,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,72,74,61,62,57,66,62],
[73,0,73,76,66,64,66,68,60],
[59,58,0,70,49,58,59,61,51],
[57,55,61,0,46,44,64,54,42],
[70,65,82,85,0,65,81,73,81],
[69,67,73,87,66,0,70,55,61],
[74,65,72,67,50,61,0,60,58],
[65,63,70,77,58,76,71,0,76],
[69,71,80,89,50,70,73,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,54,69,56,42,77,91,61],
[74,0,77,76,81,63,87,83,81],
[77,54,0,69,64,53,77,94,67],
[62,55,62,0,50,64,60,78,45],
[75,50,67,81,0,61,82,76,62],
[89,68,78,67,70,0,77,101,65],
[54,44,54,71,49,54,0,66,49],
[40,48,37,53,55,30,65,0,48],
[70,50,64,86,69,66,82,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,69,62,57,84,67,70,72],
[74,0,73,68,70,76,78,55,79],
[62,58,0,69,65,77,59,60,76],
[69,63,62,0,59,70,64,52,68],
[74,61,66,72,0,74,74,71,86],
[47,55,54,61,57,0,56,52,63],
[64,53,72,67,57,75,0,67,60],
[61,76,71,79,60,79,64,0,85],
[59,52,55,63,45,68,71,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,55,56,62,61,53,55,54],
[58,0,60,59,57,56,52,52,57],
[76,71,0,69,79,73,68,61,67],
[75,72,62,0,75,69,63,48,63],
[69,74,52,56,0,60,52,52,64],
[70,75,58,62,71,0,62,70,65],
[78,79,63,68,79,69,0,78,64],
[76,79,70,83,79,61,53,0,63],
[77,74,64,68,67,66,67,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,59,75,60,62,66,53],
[64,0,59,63,74,71,56,59,57],
[64,72,0,60,72,68,72,67,76],
[72,68,71,0,79,75,75,64,76],
[56,57,59,52,0,49,51,61,63],
[71,60,63,56,82,0,67,76,75],
[69,75,59,56,80,64,0,71,66],
[65,72,64,67,70,55,60,0,58],
[78,74,55,55,68,56,65,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,57,62,49,76,57,58,71],
[67,0,51,61,54,58,60,50,74],
[74,80,0,70,61,74,81,66,76],
[69,70,61,0,55,70,66,60,79],
[82,77,70,76,0,84,67,64,83],
[55,73,57,61,47,0,62,53,76],
[74,71,50,65,64,69,0,60,75],
[73,81,65,71,67,78,71,0,94],
[60,57,55,52,48,55,56,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,70,63,65,58,53,44,60],
[78,0,71,71,61,74,73,64,56],
[61,60,0,54,63,55,61,49,52],
[68,60,77,0,60,62,61,70,69],
[66,70,68,71,0,71,58,62,54],
[73,57,76,69,60,0,70,57,65],
[78,58,70,70,73,61,0,66,58],
[87,67,82,61,69,74,65,0,79],
[71,75,79,62,77,66,73,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,76,36,36,92,58,75,76],
[38,0,77,19,57,38,58,19,58],
[55,54,0,17,55,73,19,17,36],
[95,112,114,0,57,92,76,56,76],
[95,74,76,74,0,112,57,56,76],
[39,93,58,39,19,0,39,20,39],
[73,73,112,55,74,92,0,55,92],
[56,112,114,75,75,111,76,0,95],
[55,73,95,55,55,92,39,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,72,63,58,60,49,62,60],
[71,0,75,82,76,72,72,79,65],
[59,56,0,61,69,58,55,62,61],
[68,49,70,0,70,59,57,67,68],
[73,55,62,61,0,57,61,59,59],
[71,59,73,72,74,0,64,65,65],
[82,59,76,74,70,67,0,70,68],
[69,52,69,64,72,66,61,0,64],
[71,66,70,63,72,66,63,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,79,69,65,69,72,61,70],
[67,0,72,63,74,64,72,73,65],
[52,59,0,63,59,67,60,59,62],
[62,68,68,0,64,65,67,57,66],
[66,57,72,67,0,76,65,61,61],
[62,67,64,66,55,0,63,62,68],
[59,59,71,64,66,68,0,64,65],
[70,58,72,74,70,69,67,0,63],
[61,66,69,65,70,63,66,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,53,47,49,69,71,60,56],
[72,0,76,66,68,80,66,71,61],
[78,55,0,65,62,73,73,61,59],
[84,65,66,0,61,91,66,66,75],
[82,63,69,70,0,84,71,56,75],
[62,51,58,40,47,0,57,49,55],
[60,65,58,65,60,74,0,55,49],
[71,60,70,65,75,82,76,0,73],
[75,70,72,56,56,76,82,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,83,68,83,88,79,65,79],
[55,0,81,65,73,84,75,58,77],
[48,50,0,54,49,60,59,42,60],
[63,66,77,0,70,65,72,64,71],
[48,58,82,61,0,64,56,75,68],
[43,47,71,66,67,0,61,57,60],
[52,56,72,59,75,70,0,60,68],
[66,73,89,67,56,74,71,0,71],
[52,54,71,60,63,71,63,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,70,86,83,78,69,69,63],
[56,0,64,70,71,77,61,60,59],
[61,67,0,69,75,81,65,62,63],
[45,61,62,0,61,64,64,65,68],
[48,60,56,70,0,59,59,61,61],
[53,54,50,67,72,0,51,49,58],
[62,70,66,67,72,80,0,73,67],
[62,71,69,66,70,82,58,0,65],
[68,72,68,63,70,73,64,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,63,63,75,70,52,57,55],
[73,0,67,79,81,73,64,71,72],
[68,64,0,76,78,63,66,70,61],
[68,52,55,0,75,61,55,65,72],
[56,50,53,56,0,61,54,54,51],
[61,58,68,70,70,0,61,61,63],
[79,67,65,76,77,70,0,75,78],
[74,60,61,66,77,70,56,0,76],
[76,59,70,59,80,68,53,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,76,62,68,60,57,57,62],
[72,0,62,71,65,63,67,63,68],
[55,69,0,61,60,63,53,64,64],
[69,60,70,0,62,74,70,62,72],
[63,66,71,69,0,56,56,68,63],
[71,68,68,57,75,0,55,68,81],
[74,64,78,61,75,76,0,76,74],
[74,68,67,69,63,63,55,0,71],
[69,63,67,59,68,50,57,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,70,65,72,63,70,77,77],
[62,0,63,77,78,63,57,67,69],
[61,68,0,72,77,71,59,70,68],
[66,54,59,0,71,55,58,58,61],
[59,53,54,60,0,58,63,66,59],
[68,68,60,76,73,0,62,78,75],
[61,74,72,73,68,69,0,80,64],
[54,64,61,73,65,53,51,0,66],
[54,62,63,70,72,56,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,54,70,64,60,68,60,73],
[61,0,53,58,61,52,59,60,56],
[77,78,0,67,70,93,82,63,74],
[61,73,64,0,61,74,70,56,75],
[67,70,61,70,0,73,70,70,74],
[71,79,38,57,58,0,66,62,66],
[63,72,49,61,61,65,0,54,60],
[71,71,68,75,61,69,77,0,65],
[58,75,57,56,57,65,71,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,52,63,63,62,55,51,69],
[80,0,64,72,68,61,66,70,74],
[79,67,0,72,64,61,60,65,75],
[68,59,59,0,63,61,63,74,64],
[68,63,67,68,0,66,58,62,66],
[69,70,70,70,65,0,74,64,76],
[76,65,71,68,73,57,0,71,75],
[80,61,66,57,69,67,60,0,70],
[62,57,56,67,65,55,56,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,53,71,74,69,75,63,71],
[70,0,51,63,68,68,70,54,63],
[78,80,0,65,85,79,78,69,86],
[60,68,66,0,75,74,65,74,70],
[57,63,46,56,0,70,62,55,55],
[62,63,52,57,61,0,71,68,63],
[56,61,53,66,69,60,0,60,61],
[68,77,62,57,76,63,71,0,77],
[60,68,45,61,76,68,70,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,63,75,72,77,76,73,70],
[61,0,54,96,67,61,61,97,73],
[68,77,0,85,81,84,56,88,73],
[56,35,46,0,65,67,51,69,59],
[59,64,50,66,0,44,59,62,65],
[54,70,47,64,87,0,46,86,63],
[55,70,75,80,72,85,0,72,81],
[58,34,43,62,69,45,59,0,64],
[61,58,58,72,66,68,50,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,66,46,85,63,58,86,76],
[72,0,45,72,86,70,61,74,84],
[65,86,0,67,61,73,66,60,79],
[85,59,64,0,86,71,73,78,91],
[46,45,70,45,0,51,67,59,64],
[68,61,58,60,80,0,67,80,73],
[73,70,65,58,64,64,0,66,76],
[45,57,71,53,72,51,65,0,63],
[55,47,52,40,67,58,55,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,64,69,71,66,69,76,78],
[61,0,67,61,67,58,67,73,68],
[67,64,0,62,69,69,69,64,65],
[62,70,69,0,74,78,71,79,75],
[60,64,62,57,0,70,57,64,64],
[65,73,62,53,61,0,51,66,71],
[62,64,62,60,74,80,0,71,69],
[55,58,67,52,67,65,60,0,72],
[53,63,66,56,67,60,62,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,67,75,66,61,53,66,62],
[54,0,50,48,48,46,45,43,50],
[64,81,0,67,63,66,58,56,65],
[56,83,64,0,65,68,56,63,63],
[65,83,68,66,0,65,69,77,69],
[70,85,65,63,66,0,61,66,72],
[78,86,73,75,62,70,0,65,73],
[65,88,75,68,54,65,66,0,66],
[69,81,66,68,62,59,58,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,64,44,56,45,45,46,50],
[81,0,83,72,68,57,59,67,55],
[67,48,0,59,73,69,59,67,54],
[87,59,72,0,70,70,51,76,49],
[75,63,58,61,0,53,75,69,76],
[86,74,62,61,78,0,63,68,71],
[86,72,72,80,56,68,0,58,58],
[85,64,64,55,62,63,73,0,64],
[81,76,77,82,55,60,73,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,38,69,45,70,52,44,60],
[88,0,70,89,76,92,116,60,85],
[93,61,0,68,68,85,76,51,93],
[62,42,63,0,51,68,83,69,76],
[86,55,63,80,0,66,78,48,65],
[61,39,46,63,65,0,82,77,82],
[79,15,55,48,53,49,0,44,62],
[87,71,80,62,83,54,87,0,99],
[71,46,38,55,66,49,69,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,51,66,53,65,61,88,42],
[66,0,53,67,66,61,57,78,66],
[80,78,0,68,78,79,66,92,48],
[65,64,63,0,73,59,50,90,45],
[78,65,53,58,0,65,46,85,70],
[66,70,52,72,66,0,66,87,53],
[70,74,65,81,85,65,0,91,75],
[43,53,39,41,46,44,40,0,49],
[89,65,83,86,61,78,56,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,67,64,65,72,64,67],
[66,0,67,65,75,68,75,67,68],
[66,64,0,68,69,70,78,77,68],
[64,66,63,0,69,69,70,73,63],
[67,56,62,62,0,62,64,63,62],
[66,63,61,62,69,0,66,70,55],
[59,56,53,61,67,65,0,69,66],
[67,64,54,58,68,61,62,0,64],
[64,63,63,68,69,76,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,63,70,69,51,64,57,65],
[73,0,77,58,73,58,72,62,69],
[68,54,0,62,65,53,66,56,54],
[61,73,69,0,79,82,85,74,67],
[62,58,66,52,0,65,63,48,47],
[80,73,78,49,66,0,69,63,56],
[67,59,65,46,68,62,0,53,52],
[74,69,75,57,83,68,78,0,75],
[66,62,77,64,84,75,79,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,78,73,73,61,71,62,92],
[72,0,66,70,68,71,57,51,68],
[53,65,0,80,77,71,45,52,84],
[58,61,51,0,69,59,59,52,74],
[58,63,54,62,0,51,40,54,71],
[70,60,60,72,80,0,52,62,78],
[60,74,86,72,91,79,0,68,95],
[69,80,79,79,77,69,63,0,79],
[39,63,47,57,60,53,36,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,87,32,44,55,57,46,67],
[55,0,86,55,34,44,46,67,33],
[44,45,0,21,22,33,22,56,45],
[99,76,110,0,79,110,56,77,77],
[87,97,109,52,0,64,67,78,55],
[76,87,98,21,67,0,46,57,55],
[74,85,109,75,64,85,0,65,75],
[85,64,75,54,53,74,66,0,76],
[64,98,86,54,76,76,56,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,65,64,75,76,66,70,68],
[73,0,73,66,62,75,70,61,69],
[66,58,0,56,56,69,64,60,59],
[67,65,75,0,57,72,72,57,66],
[56,69,75,74,0,77,76,69,73],
[55,56,62,59,54,0,55,64,58],
[65,61,67,59,55,76,0,53,67],
[61,70,71,74,62,67,78,0,71],
[63,62,72,65,58,73,64,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,64,56,57,63,65,66,62],
[68,0,56,57,65,61,50,65,70],
[67,75,0,66,72,64,55,68,70],
[75,74,65,0,65,61,71,72,70],
[74,66,59,66,0,68,65,63,63],
[68,70,67,70,63,0,79,86,75],
[66,81,76,60,66,52,0,69,69],
[65,66,63,59,68,45,62,0,72],
[69,61,61,61,68,56,62,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,68,55,61,68,52,59,60],
[71,0,68,51,62,80,59,60,46],
[63,63,0,53,49,66,39,47,59],
[76,80,78,0,60,69,51,59,61],
[70,69,82,71,0,76,67,74,61],
[63,51,65,62,55,0,46,49,41],
[79,72,92,80,64,85,0,52,84],
[72,71,84,72,57,82,79,0,66],
[71,85,72,70,70,90,47,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,78,63,63,63,62,66,61],
[55,0,71,53,60,62,55,58,57],
[53,60,0,60,55,55,58,56,62],
[68,78,71,0,62,70,67,68,78],
[68,71,76,69,0,69,69,59,70],
[68,69,76,61,62,0,65,64,71],
[69,76,73,64,62,66,0,66,67],
[65,73,75,63,72,67,65,0,66],
[70,74,69,53,61,60,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,62,72,60,60,55,50,52],
[72,0,60,72,66,70,60,63,65],
[69,71,0,63,66,59,55,59,55],
[59,59,68,0,66,61,54,52,56],
[71,65,65,65,0,65,54,62,60],
[71,61,72,70,66,0,72,67,73],
[76,71,76,77,77,59,0,60,70],
[81,68,72,79,69,64,71,0,75],
[79,66,76,75,71,58,61,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,96,74,63,75,76,54,78],
[50,0,55,48,42,61,43,37,38],
[35,76,0,70,44,47,52,55,35],
[57,83,61,0,58,65,61,67,49],
[68,89,87,73,0,84,79,57,81],
[56,70,84,66,47,0,54,36,55],
[55,88,79,70,52,77,0,44,43],
[77,94,76,64,74,95,87,0,65],
[53,93,96,82,50,76,88,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,61,51,56,71,49,60,58],
[64,0,59,62,50,56,60,65,57],
[70,72,0,66,72,66,63,67,62],
[80,69,65,0,65,60,63,71,59],
[75,81,59,66,0,69,69,67,68],
[60,75,65,71,62,0,61,71,73],
[82,71,68,68,62,70,0,78,72],
[71,66,64,60,64,60,53,0,58],
[73,74,69,72,63,58,59,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,76,69,59,72,71,70,73],
[65,0,64,71,68,65,60,66,67],
[55,67,0,65,60,71,62,73,68],
[62,60,66,0,58,61,62,68,63],
[72,63,71,73,0,76,73,78,71],
[59,66,60,70,55,0,64,65,66],
[60,71,69,69,58,67,0,68,70],
[61,65,58,63,53,66,63,0,68],
[58,64,63,68,60,65,61,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,75,57,55,76,75,94,95],
[55,0,93,37,55,74,92,54,95],
[56,38,0,38,74,75,111,37,95],
[74,94,93,0,55,95,73,94,95],
[76,76,57,76,0,95,57,76,95],
[55,57,56,36,36,0,55,37,95],
[56,39,20,58,74,76,0,39,58],
[37,77,94,37,55,94,92,0,95],
[36,36,36,36,36,36,73,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,55,77,68,65,69,69,58],
[57,0,61,71,66,60,66,63,65],
[76,70,0,79,62,60,64,72,62],
[54,60,52,0,57,54,51,61,54],
[63,65,69,74,0,69,69,62,70],
[66,71,71,77,62,0,82,73,71],
[62,65,67,80,62,49,0,75,59],
[62,68,59,70,69,58,56,0,62],
[73,66,69,77,61,60,72,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,47,65,53,85,60,75,69],
[70,0,62,63,62,68,76,85,73],
[84,69,0,65,72,98,73,93,70],
[66,68,66,0,67,81,56,70,64],
[78,69,59,64,0,75,55,79,78],
[46,63,33,50,56,0,53,60,64],
[71,55,58,75,76,78,0,82,82],
[56,46,38,61,52,71,49,0,66],
[62,58,61,67,53,67,49,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,69,63,73,65,58,58,69],
[69,0,59,46,74,68,60,53,70],
[62,72,0,55,80,67,61,64,64],
[68,85,76,0,84,72,80,62,54],
[58,57,51,47,0,59,57,55,61],
[66,63,64,59,72,0,67,57,56],
[73,71,70,51,74,64,0,75,61],
[73,78,67,69,76,74,56,0,63],
[62,61,67,77,70,75,70,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,72,70,66,62,62,70,67],
[67,0,62,67,57,67,60,83,51],
[59,69,0,62,64,78,68,78,54],
[61,64,69,0,61,67,62,66,53],
[65,74,67,70,0,67,59,66,56],
[69,64,53,64,64,0,59,63,59],
[69,71,63,69,72,72,0,63,56],
[61,48,53,65,65,68,68,0,61],
[64,80,77,78,75,72,75,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,74,63,79,95,63,71,84],
[48,0,77,60,75,83,75,74,82],
[57,54,0,73,57,85,65,73,80],
[68,71,58,0,79,77,69,69,73],
[52,56,74,52,0,76,55,61,57],
[36,48,46,54,55,0,50,52,68],
[68,56,66,62,76,81,0,61,69],
[60,57,58,62,70,79,70,0,73],
[47,49,51,58,74,63,62,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,65,67,72,67,70,70,67],
[63,0,67,72,67,67,70,72,69],
[66,64,0,61,65,66,59,64,71],
[64,59,70,0,71,67,68,65,66],
[59,64,66,60,0,65,67,67,60],
[64,64,65,64,66,0,62,62,66],
[61,61,72,63,64,69,0,57,69],
[61,59,67,66,64,69,74,0,69],
[64,62,60,65,71,65,62,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,79,71,66,70,64,63,66],
[65,0,76,70,69,69,73,66,64],
[52,55,0,67,59,52,60,51,57],
[60,61,64,0,62,64,61,54,61],
[65,62,72,69,0,59,56,58,64],
[61,62,79,67,72,0,65,60,67],
[67,58,71,70,75,66,0,61,65],
[68,65,80,77,73,71,70,0,68],
[65,67,74,70,67,64,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,62,63,71,68,64,63,58],
[68,0,69,67,85,70,62,79,60],
[69,62,0,81,78,73,71,77,72],
[68,64,50,0,57,66,64,56,68],
[60,46,53,74,0,55,60,67,47],
[63,61,58,65,76,0,61,65,59],
[67,69,60,67,71,70,0,79,52],
[68,52,54,75,64,66,52,0,51],
[73,71,59,63,84,72,79,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,63,69,67,68,59,61,49],
[71,0,64,60,59,66,55,63,66],
[68,67,0,67,73,76,61,65,59],
[62,71,64,0,63,67,67,70,57],
[64,72,58,68,0,66,57,67,65],
[63,65,55,64,65,0,61,58,62],
[72,76,70,64,74,70,0,73,71],
[70,68,66,61,64,73,58,0,60],
[82,65,72,74,66,69,60,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,75,83,64,70,76,69,66],
[57,0,68,79,60,62,68,63,59],
[56,63,0,71,64,66,58,56,70],
[48,52,60,0,62,52,67,57,57],
[67,71,67,69,0,66,75,59,67],
[61,69,65,79,65,0,78,61,76],
[55,63,73,64,56,53,0,60,77],
[62,68,75,74,72,70,71,0,58],
[65,72,61,74,64,55,54,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,60,52,56,55,42,50,60],
[81,0,69,71,66,72,63,67,75],
[71,62,0,64,68,54,59,65,57],
[79,60,67,0,61,70,69,54,64],
[75,65,63,70,0,60,71,58,56],
[76,59,77,61,71,0,65,67,71],
[89,68,72,62,60,66,0,58,73],
[81,64,66,77,73,64,73,0,80],
[71,56,74,67,75,60,58,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,71,58,72,65,65,71,58],
[76,0,71,68,69,64,71,73,69],
[60,60,0,72,74,68,66,68,61],
[73,63,59,0,66,70,69,75,63],
[59,62,57,65,0,63,64,67,60],
[66,67,63,61,68,0,70,70,60],
[66,60,65,62,67,61,0,65,60],
[60,58,63,56,64,61,66,0,59],
[73,62,70,68,71,71,71,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,81,84,93,70,98,67,86],
[70,0,52,62,92,61,82,52,81],
[50,79,0,70,72,58,83,47,69],
[47,69,61,0,58,46,64,38,74],
[38,39,59,73,0,59,74,46,66],
[61,70,73,85,72,0,84,48,79],
[33,49,48,67,57,47,0,54,46],
[64,79,84,93,85,83,77,0,78],
[45,50,62,57,65,52,85,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,65,61,70,54,63,67,68],
[64,0,70,68,69,57,64,68,67],
[66,61,0,66,77,66,60,70,72],
[70,63,65,0,65,57,62,61,64],
[61,62,54,66,0,59,62,63,61],
[77,74,65,74,72,0,65,69,76],
[68,67,71,69,69,66,0,63,73],
[64,63,61,70,68,62,68,0,73],
[63,64,59,67,70,55,58,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,59,64,53,54,63,77,56],
[63,0,64,78,54,54,59,67,47],
[72,67,0,69,72,65,65,68,65],
[67,53,62,0,63,61,53,75,66],
[78,77,59,68,0,54,71,78,70],
[77,77,66,70,77,0,74,85,65],
[68,72,66,78,60,57,0,75,70],
[54,64,63,56,53,46,56,0,49],
[75,84,66,65,61,66,61,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,63,66,57,60,64,56,59],
[76,0,69,52,61,62,64,60,65],
[68,62,0,56,59,46,60,59,66],
[65,79,75,0,68,70,77,69,66],
[74,70,72,63,0,56,64,70,56],
[71,69,85,61,75,0,68,74,74],
[67,67,71,54,67,63,0,66,57],
[75,71,72,62,61,57,65,0,59],
[72,66,65,65,75,57,74,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,69,71,65,67,71,62,66],
[65,0,64,73,55,66,66,54,66],
[62,67,0,70,57,61,66,60,69],
[60,58,61,0,64,65,60,59,72],
[66,76,74,67,0,74,76,60,71],
[64,65,70,66,57,0,69,67,72],
[60,65,65,71,55,62,0,54,60],
[69,77,71,72,71,64,77,0,72],
[65,65,62,59,60,59,71,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,71,69,73,61,67,70,74],
[76,0,67,76,72,66,68,65,73],
[60,64,0,68,72,66,68,58,60],
[62,55,63,0,66,57,69,66,70],
[58,59,59,65,0,56,59,59,67],
[70,65,65,74,75,0,69,68,75],
[64,63,63,62,72,62,0,71,71],
[61,66,73,65,72,63,60,0,82],
[57,58,71,61,64,56,60,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,63,64,82,68,66,82,83],
[46,0,61,56,50,64,63,64,65],
[68,70,0,62,71,57,71,84,68],
[67,75,69,0,75,60,61,82,77],
[49,81,60,56,0,48,63,67,67],
[63,67,74,71,83,0,80,80,73],
[65,68,60,70,68,51,0,75,74],
[49,67,47,49,64,51,56,0,65],
[48,66,63,54,64,58,57,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,75,56,56,61,65,56,58],
[75,0,72,56,70,80,69,62,71],
[56,59,0,59,69,73,65,71,72],
[75,75,72,0,64,80,65,70,72],
[75,61,62,67,0,72,62,64,77],
[70,51,58,51,59,0,58,61,64],
[66,62,66,66,69,73,0,65,67],
[75,69,60,61,67,70,66,0,64],
[73,60,59,59,54,67,64,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,58,45,57,49,58,54,56],
[70,0,70,56,68,63,58,84,68],
[73,61,0,63,73,62,68,74,73],
[86,75,68,0,68,73,64,77,68],
[74,63,58,63,0,59,65,72,68],
[82,68,69,58,72,0,64,82,71],
[73,73,63,67,66,67,0,74,63],
[77,47,57,54,59,49,57,0,59],
[75,63,58,63,63,60,68,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,48,82,82,82,131,98,67],
[49,0,48,66,82,82,82,82,34],
[83,83,0,100,82,50,98,83,84],
[49,65,31,0,48,66,80,66,66],
[49,49,49,83,0,82,83,66,50],
[49,49,81,65,49,0,81,98,34],
[0,49,33,51,48,50,0,34,34],
[33,49,48,65,65,33,97,0,50],
[64,97,47,65,81,97,97,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,50,59,49,67,53,58,50],
[74,0,61,70,64,67,60,67,53],
[81,70,0,75,57,75,62,69,61],
[72,61,56,0,61,67,68,74,58],
[82,67,74,70,0,76,72,62,68],
[64,64,56,64,55,0,59,62,54],
[78,71,69,63,59,72,0,63,62],
[73,64,62,57,69,69,68,0,52],
[81,78,70,73,63,77,69,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,58,63,76,65,55,59],
[69,0,73,72,80,74,64,63,69],
[68,58,0,69,70,79,65,73,66],
[73,59,62,0,64,71,66,57,60],
[68,51,61,67,0,70,68,65,48],
[55,57,52,60,61,0,54,58,48],
[66,67,66,65,63,77,0,66,61],
[76,68,58,74,66,73,65,0,58],
[72,62,65,71,83,83,70,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,77,92,71,68,63,75,62],
[49,0,40,55,49,32,47,59,46],
[54,91,0,76,63,53,46,68,61],
[39,76,55,0,55,26,41,60,49],
[60,82,68,76,0,39,47,66,62],
[63,99,78,105,92,0,82,103,95],
[68,84,85,90,84,49,0,82,63],
[56,72,63,71,65,28,49,0,58],
[69,85,70,82,69,36,68,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,64,78,79,67,73,72,70],
[55,0,65,62,70,55,70,60,59],
[67,66,0,65,72,64,71,68,73],
[53,69,66,0,69,57,71,66,73],
[52,61,59,62,0,62,62,62,68],
[64,76,67,74,69,0,76,62,68],
[58,61,60,60,69,55,0,68,66],
[59,71,63,65,69,69,63,0,72],
[61,72,58,58,63,63,65,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,67,63,76,66,66,70,68],
[60,0,63,60,67,65,61,66,57],
[64,68,0,50,81,52,60,61,63],
[68,71,81,0,70,62,70,69,71],
[55,64,50,61,0,61,58,72,59],
[65,66,79,69,70,0,64,71,65],
[65,70,71,61,73,67,0,63,74],
[61,65,70,62,59,60,68,0,65],
[63,74,68,60,72,66,57,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,78,64,74,71,67,65,68],
[70,0,82,83,73,62,72,70,70],
[53,49,0,56,69,65,66,59,58],
[67,48,75,0,62,63,66,62,57],
[57,58,62,69,0,55,65,65,50],
[60,69,66,68,76,0,64,69,66],
[64,59,65,65,66,67,0,57,57],
[66,61,72,69,66,62,74,0,63],
[63,61,73,74,81,65,74,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,60,77,72,67,56,65,67],
[65,0,60,67,75,71,62,74,69],
[71,71,0,83,82,75,64,72,62],
[54,64,48,0,65,59,61,62,57],
[59,56,49,66,0,66,63,66,55],
[64,60,56,72,65,0,51,60,57],
[75,69,67,70,68,80,0,63,57],
[66,57,59,69,65,71,68,0,69],
[64,62,69,74,76,74,74,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,54,81,63,75,63,66,63],
[71,0,70,75,65,64,68,72,60],
[77,61,0,70,66,68,64,63,66],
[50,56,61,0,49,69,61,57,54],
[68,66,65,82,0,75,70,65,74],
[56,67,63,62,56,0,65,69,66],
[68,63,67,70,61,66,0,61,57],
[65,59,68,74,66,62,70,0,72],
[68,71,65,77,57,65,74,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,74,72,58,73,66,60,69],
[68,0,57,51,54,60,48,58,58],
[57,74,0,60,61,61,55,66,66],
[59,80,71,0,65,61,58,65,55],
[73,77,70,66,0,62,61,58,64],
[58,71,70,70,69,0,58,63,67],
[65,83,76,73,70,73,0,65,75],
[71,73,65,66,73,68,66,0,63],
[62,73,65,76,67,64,56,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,44,67,79,53,50,66,63],
[75,0,63,65,89,54,67,75,68],
[87,68,0,69,92,85,67,65,67],
[64,66,62,0,80,62,43,62,65],
[52,42,39,51,0,32,31,62,52],
[78,77,46,69,99,0,60,62,77],
[81,64,64,88,100,71,0,69,78],
[65,56,66,69,69,69,62,0,52],
[68,63,64,66,79,54,53,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,65,56,56,66,58,70],
[69,0,61,72,63,55,73,57,68],
[70,70,0,66,63,54,69,59,62],
[66,59,65,0,60,61,83,59,67],
[75,68,68,71,0,68,83,68,61],
[75,76,77,70,63,0,77,70,72],
[65,58,62,48,48,54,0,51,59],
[73,74,72,72,63,61,80,0,69],
[61,63,69,64,70,59,72,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,82,65,66,65,48,98,49],
[67,0,51,48,16,83,52,83,34],
[49,80,0,98,64,63,63,116,65],
[66,83,33,0,65,80,66,65,66],
[65,115,67,66,0,67,50,83,68],
[66,48,68,51,64,0,34,84,47],
[83,79,68,65,81,97,0,116,64],
[33,48,15,66,48,47,15,0,15],
[82,97,66,65,63,84,67,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,62,69,76,63,65,68,57],
[63,0,70,72,76,63,74,64,61],
[69,61,0,68,81,73,70,70,65],
[62,59,63,0,70,72,71,68,67],
[55,55,50,61,0,61,57,61,55],
[68,68,58,59,70,0,65,62,58],
[66,57,61,60,74,66,0,63,62],
[63,67,61,63,70,69,68,0,60],
[74,70,66,64,76,73,69,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,70,68,70,61,67,62,63],
[72,0,71,79,66,76,66,56,69],
[61,60,0,68,65,75,68,68,66],
[63,52,63,0,62,70,67,59,64],
[61,65,66,69,0,71,70,53,63],
[70,55,56,61,60,0,70,57,65],
[64,65,63,64,61,61,0,64,64],
[69,75,63,72,78,74,67,0,65],
[68,62,65,67,68,66,67,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,58,67,75,63,58,62,62],
[69,0,69,69,70,63,62,78,70],
[73,62,0,72,68,65,69,72,69],
[64,62,59,0,63,59,62,63,59],
[56,61,63,68,0,53,56,61,66],
[68,68,66,72,78,0,63,66,71],
[73,69,62,69,75,68,0,72,67],
[69,53,59,68,70,65,59,0,62],
[69,61,62,72,65,60,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,26,26,105,52,0,51,52],
[51,0,26,51,103,103,26,25,52],
[105,105,0,51,105,77,25,51,77],
[105,80,80,0,105,77,54,77,52],
[26,28,26,26,0,52,0,25,52],
[79,28,54,54,79,0,54,53,54],
[131,105,106,77,131,77,0,77,52],
[80,106,80,54,106,78,54,0,80],
[79,79,54,79,79,77,79,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,50,62,50,65,41,51,52],
[84,0,67,71,70,75,72,76,63],
[81,64,0,64,58,63,51,71,55],
[69,60,67,0,64,70,71,68,64],
[81,61,73,67,0,80,65,70,67],
[66,56,68,61,51,0,65,60,64],
[90,59,80,60,66,66,0,76,74],
[80,55,60,63,61,71,55,0,53],
[79,68,76,67,64,67,57,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,63,63,50,70,58,63,57],
[71,0,64,71,65,67,70,64,64],
[68,67,0,64,59,67,58,65,67],
[68,60,67,0,61,76,62,70,59],
[81,66,72,70,0,79,62,68,68],
[61,64,64,55,52,0,60,63,51],
[73,61,73,69,69,71,0,63,58],
[68,67,66,61,63,68,68,0,58],
[74,67,64,72,63,80,73,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,74,67,61,66,68,55,87],
[50,0,73,53,46,66,46,51,69],
[57,58,0,57,63,75,59,51,64],
[64,78,74,0,51,76,56,73,82],
[70,85,68,80,0,83,69,59,80],
[65,65,56,55,48,0,55,53,65],
[63,85,72,75,62,76,0,76,83],
[76,80,80,58,72,78,55,0,81],
[44,62,67,49,51,66,48,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,62,51,59,52,68,51,63],
[74,0,73,66,71,72,73,63,71],
[69,58,0,58,67,73,72,66,75],
[80,65,73,0,64,71,79,60,68],
[72,60,64,67,0,66,75,73,72],
[79,59,58,60,65,0,79,62,67],
[63,58,59,52,56,52,0,59,64],
[80,68,65,71,58,69,72,0,66],
[68,60,56,63,59,64,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,48,54,42,40,31,42,40],
[92,0,68,82,72,50,72,60,71],
[83,63,0,55,53,65,75,64,53],
[77,49,76,0,80,40,69,49,51],
[89,59,78,51,0,61,81,90,51],
[91,81,66,91,70,0,82,81,52],
[100,59,56,62,50,49,0,59,62],
[89,71,67,82,41,50,72,0,62],
[91,60,78,80,80,79,69,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,75,46,71,72,69,66,65],
[37,0,50,55,62,50,41,35,61],
[56,81,0,55,87,67,64,39,73],
[85,76,76,0,107,61,79,57,68],
[60,69,44,24,0,37,54,46,63],
[59,81,64,70,94,0,61,55,59],
[62,90,67,52,77,70,0,59,72],
[65,96,92,74,85,76,72,0,91],
[66,70,58,63,68,72,59,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,61,59,53,48,39,77,74],
[78,0,64,57,57,51,58,80,70],
[70,67,0,63,53,54,55,75,73],
[72,74,68,0,58,66,50,84,73],
[78,74,78,73,0,50,59,80,74],
[83,80,77,65,81,0,78,77,81],
[92,73,76,81,72,53,0,89,80],
[54,51,56,47,51,54,42,0,61],
[57,61,58,58,57,50,51,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,87,69,71,71,65,69,69],
[56,0,67,65,59,47,59,75,80],
[44,64,0,57,53,52,47,45,59],
[62,66,74,0,63,63,56,75,65],
[60,72,78,68,0,64,58,58,75],
[60,84,79,68,67,0,71,71,77],
[66,72,84,75,73,60,0,70,88],
[62,56,86,56,73,60,61,0,72],
[62,51,72,66,56,54,43,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,63,78,66,69,68,66,67],
[67,0,71,70,64,73,75,75,77],
[68,60,0,70,67,71,64,67,65],
[53,61,61,0,60,59,56,63,70],
[65,67,64,71,0,67,69,74,70],
[62,58,60,72,64,0,67,69,63],
[63,56,67,75,62,64,0,74,66],
[65,56,64,68,57,62,57,0,64],
[64,54,66,61,61,68,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,54,63,62,64,64,62,69],
[65,0,68,64,66,68,76,70,62],
[77,63,0,70,71,74,66,80,66],
[68,67,61,0,63,66,69,63,64],
[69,65,60,68,0,71,71,74,68],
[67,63,57,65,60,0,70,68,61],
[67,55,65,62,60,61,0,66,66],
[69,61,51,68,57,63,65,0,67],
[62,69,65,67,63,70,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,82,63,74,65,60,75,69],
[52,0,68,63,65,57,51,60,62],
[49,63,0,60,58,56,60,60,52],
[68,68,71,0,65,60,59,66,71],
[57,66,73,66,0,69,68,62,61],
[66,74,75,71,62,0,80,67,63],
[71,80,71,72,63,51,0,67,66],
[56,71,71,65,69,64,64,0,60],
[62,69,79,60,70,68,65,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,73,71,66,72,63,65,64],
[73,0,67,64,60,70,57,64,66],
[58,64,0,71,61,67,61,59,58],
[60,67,60,0,64,72,55,63,65],
[65,71,70,67,0,63,62,60,63],
[59,61,64,59,68,0,61,64,62],
[68,74,70,76,69,70,0,71,64],
[66,67,72,68,71,67,60,0,61],
[67,65,73,66,68,69,67,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,65,46,52,50,62,56,67],
[55,0,52,44,40,54,37,44,46],
[66,79,0,58,50,60,70,58,73],
[85,87,73,0,56,81,63,63,87],
[79,91,81,75,0,68,59,84,91],
[81,77,71,50,63,0,69,63,81],
[69,94,61,68,72,62,0,87,76],
[75,87,73,68,47,68,44,0,77],
[64,85,58,44,40,50,55,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,72,56,55,59,61,68,66],
[56,0,60,62,66,57,56,72,59],
[59,71,0,74,65,61,66,79,57],
[75,69,57,0,63,60,70,72,59],
[76,65,66,68,0,60,68,68,64],
[72,74,70,71,71,0,69,78,62],
[70,75,65,61,63,62,0,64,62],
[63,59,52,59,63,53,67,0,54],
[65,72,74,72,67,69,69,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,50,66,58,72,37,51,72],
[70,0,58,55,77,65,69,70,71],
[81,73,0,81,75,76,70,61,71],
[65,76,50,0,70,86,51,50,67],
[73,54,56,61,0,65,50,57,58],
[59,66,55,45,66,0,54,48,60],
[94,62,61,80,81,77,0,65,63],
[80,61,70,81,74,83,66,0,81],
[59,60,60,64,73,71,68,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,62,70,60,65,64,69,66],
[61,0,64,66,67,64,68,63,61],
[69,67,0,70,56,65,73,55,64],
[61,65,61,0,66,61,68,71,55],
[71,64,75,65,0,62,66,67,61],
[66,67,66,70,69,0,66,60,59],
[67,63,58,63,65,65,0,62,57],
[62,68,76,60,64,71,69,0,56],
[65,70,67,76,70,72,74,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,69,64,72,67,67,75,69],
[75,0,78,69,79,69,64,73,72],
[62,53,0,65,60,62,53,61,59],
[67,62,66,0,79,72,66,80,72],
[59,52,71,52,0,60,61,68,55],
[64,62,69,59,71,0,61,70,57],
[64,67,78,65,70,70,0,76,66],
[56,58,70,51,63,61,55,0,56],
[62,59,72,59,76,74,65,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,63,71,79,65,65,75,75],
[57,0,57,62,64,64,60,66,62],
[68,74,0,65,76,68,66,77,66],
[60,69,66,0,66,69,70,69,68],
[52,67,55,65,0,54,64,62,60],
[66,67,63,62,77,0,60,71,64],
[66,71,65,61,67,71,0,70,67],
[56,65,54,62,69,60,61,0,64],
[56,69,65,63,71,67,64,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,72,78,57,74,78,76,69],
[65,0,77,77,65,73,78,69,84],
[59,54,0,64,52,66,61,75,58],
[53,54,67,0,67,62,63,65,56],
[74,66,79,64,0,67,66,68,78],
[57,58,65,69,64,0,73,79,78],
[53,53,70,68,65,58,0,67,68],
[55,62,56,66,63,52,64,0,53],
[62,47,73,75,53,53,63,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,56,48,59,77,72,61,68],
[78,0,69,57,70,80,78,86,79],
[75,62,0,50,66,67,71,65,64],
[83,74,81,0,60,70,80,77,79],
[72,61,65,71,0,74,75,70,76],
[54,51,64,61,57,0,65,58,67],
[59,53,60,51,56,66,0,64,63],
[70,45,66,54,61,73,67,0,67],
[63,52,67,52,55,64,68,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,71,69,79,70,65,75,73],
[58,0,62,59,71,68,60,58,54],
[60,69,0,71,75,77,64,65,62],
[62,72,60,0,58,62,60,62,66],
[52,60,56,73,0,60,50,57,53],
[61,63,54,69,71,0,62,70,70],
[66,71,67,71,81,69,0,62,68],
[56,73,66,69,74,61,69,0,57],
[58,77,69,65,78,61,63,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,65,80,62,60,67,71,67],
[52,0,53,69,57,42,55,58,54],
[66,78,0,91,81,63,79,73,72],
[51,62,40,0,53,50,57,56,56],
[69,74,50,78,0,66,83,78,78],
[71,89,68,81,65,0,77,74,75],
[64,76,52,74,48,54,0,69,69],
[60,73,58,75,53,57,62,0,63],
[64,77,59,75,53,56,62,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,76,71,58,61,49,54,59],
[70,0,67,77,69,75,65,67,78],
[55,64,0,58,68,58,44,58,64],
[60,54,73,0,42,47,50,45,70],
[73,62,63,89,0,88,59,76,69],
[70,56,73,84,43,0,51,65,71],
[82,66,87,81,72,80,0,71,65],
[77,64,73,86,55,66,60,0,77],
[72,53,67,61,62,60,66,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,73,52,77,65,72,66,66],
[68,0,63,59,83,68,65,66,69],
[58,68,0,59,67,63,70,60,58],
[79,72,72,0,78,80,79,71,53],
[54,48,64,53,0,75,60,55,48],
[66,63,68,51,56,0,63,70,68],
[59,66,61,52,71,68,0,68,60],
[65,65,71,60,76,61,63,0,60],
[65,62,73,78,83,63,71,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,54,46,37,45,50,59,69],
[66,0,51,47,54,58,61,60,67],
[77,80,0,66,70,72,65,70,72],
[85,84,65,0,66,80,78,83,80],
[94,77,61,65,0,56,74,72,69],
[86,73,59,51,75,0,74,65,75],
[81,70,66,53,57,57,0,79,66],
[72,71,61,48,59,66,52,0,67],
[62,64,59,51,62,56,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,75,68,57,59,67,81,43],
[77,0,57,81,72,88,70,85,72],
[56,74,0,81,66,62,66,77,55],
[63,50,50,0,69,58,57,65,45],
[74,59,65,62,0,74,72,76,43],
[72,43,69,73,57,0,57,76,36],
[64,61,65,74,59,74,0,76,55],
[50,46,54,66,55,55,55,0,44],
[88,59,76,86,88,95,76,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,70,63,60,64,58,68,66],
[77,0,70,72,47,72,68,77,57],
[61,61,0,54,56,49,42,61,45],
[68,59,77,0,32,69,58,75,56],
[71,84,75,99,0,71,68,76,64],
[67,59,82,62,60,0,48,66,61],
[73,63,89,73,63,83,0,82,78],
[63,54,70,56,55,65,49,0,63],
[65,74,86,75,67,70,53,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,66,68,59,58,68,61,66],
[58,0,62,57,59,56,60,60,62],
[65,69,0,62,63,64,70,62,64],
[63,74,69,0,66,62,69,65,68],
[72,72,68,65,0,67,71,68,72],
[73,75,67,69,64,0,70,63,66],
[63,71,61,62,60,61,0,68,59],
[70,71,69,66,63,68,63,0,62],
[65,69,67,63,59,65,72,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,70,59,67,80,84,60,62],
[62,0,61,51,68,69,67,59,57],
[61,70,0,60,85,74,66,76,69],
[72,80,71,0,81,93,79,64,73],
[64,63,46,50,0,63,58,55,43],
[51,62,57,38,68,0,65,65,62],
[47,64,65,52,73,66,0,71,69],
[71,72,55,67,76,66,60,0,52],
[69,74,62,58,88,69,62,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,86,76,73,65,80,72,83],
[49,0,57,66,64,52,68,45,50],
[45,74,0,80,65,63,75,63,57],
[55,65,51,0,63,66,67,55,53],
[58,67,66,68,0,63,70,50,62],
[66,79,68,65,68,0,71,54,63],
[51,63,56,64,61,60,0,44,57],
[59,86,68,76,81,77,87,0,63],
[48,81,74,78,69,68,74,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,61,60,51,59,73,49,54],
[76,0,64,72,78,74,74,68,79],
[70,67,0,66,72,67,83,61,76],
[71,59,65,0,70,68,71,68,74],
[80,53,59,61,0,76,65,67,68],
[72,57,64,63,55,0,67,63,62],
[58,57,48,60,66,64,0,60,51],
[82,63,70,63,64,68,71,0,77],
[77,52,55,57,63,69,80,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,64,59,58,61,79,71,71],
[59,0,61,64,54,59,71,62,59],
[67,70,0,63,61,70,72,71,66],
[72,67,68,0,66,56,76,71,71],
[73,77,70,65,0,74,78,64,82],
[70,72,61,75,57,0,80,71,70],
[52,60,59,55,53,51,0,54,62],
[60,69,60,60,67,60,77,0,74],
[60,72,65,60,49,61,69,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,67,66,72,66,43,66,64],
[50,0,54,66,60,29,46,55,43],
[64,77,0,72,78,60,61,83,63],
[65,65,59,0,80,42,49,66,61],
[59,71,53,51,0,52,55,62,65],
[65,102,71,89,79,0,76,86,81],
[88,85,70,82,76,55,0,77,51],
[65,76,48,65,69,45,54,0,73],
[67,88,68,70,66,50,80,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,94,84,59,84,64,59,77],
[78,0,93,88,58,88,59,58,58],
[37,38,0,68,40,87,47,40,58],
[47,43,63,0,38,83,62,17,29],
[72,73,91,93,0,102,73,48,67],
[47,43,44,48,29,0,36,36,48],
[67,72,84,69,58,95,0,77,68],
[72,73,91,114,83,95,54,0,78],
[54,73,73,102,64,83,63,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,72,71,64,78,63,76,68],
[44,0,57,59,44,59,62,45,50],
[59,74,0,76,56,73,72,53,67],
[60,72,55,0,51,69,66,50,58],
[67,87,75,80,0,84,67,55,74],
[53,72,58,62,47,0,66,48,46],
[68,69,59,65,64,65,0,55,63],
[55,86,78,81,76,83,76,0,81],
[63,81,64,73,57,85,68,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,65,62,62,58,57,62,62],
[68,0,63,58,72,64,64,61,59],
[66,68,0,57,70,59,62,63,53],
[69,73,74,0,69,68,66,69,58],
[69,59,61,62,0,57,63,63,64],
[73,67,72,63,74,0,70,75,66],
[74,67,69,65,68,61,0,61,60],
[69,70,68,62,68,56,70,0,59],
[69,72,78,73,67,65,71,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,52,62,62,53,56,62,55],
[75,0,68,76,69,56,68,66,66],
[79,63,0,68,66,65,65,62,69],
[69,55,63,0,71,61,50,64,60],
[69,62,65,60,0,57,55,59,58],
[78,75,66,70,74,0,65,64,72],
[75,63,66,81,76,66,0,74,68],
[69,65,69,67,72,67,57,0,63],
[76,65,62,71,73,59,63,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,67,68,75,69,70,63,51],
[65,0,54,67,53,61,60,66,58],
[64,77,0,67,71,78,72,84,71],
[63,64,64,0,69,63,57,74,67],
[56,78,60,62,0,59,59,73,61],
[62,70,53,68,72,0,60,72,57],
[61,71,59,74,72,71,0,78,56],
[68,65,47,57,58,59,53,0,42],
[80,73,60,64,70,74,75,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,69,65,74,62,57,61,69],
[70,0,73,71,73,75,66,59,78],
[62,58,0,66,64,71,65,54,63],
[66,60,65,0,71,65,61,56,60],
[57,58,67,60,0,72,55,64,57],
[69,56,60,66,59,0,60,69,57],
[74,65,66,70,76,71,0,72,77],
[70,72,77,75,67,62,59,0,69],
[62,53,68,71,74,74,54,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,84,60,65,63,72,62,75],
[52,0,66,56,59,53,71,53,63],
[47,65,0,58,59,58,63,58,66],
[71,75,73,0,65,63,73,68,74],
[66,72,72,66,0,66,60,60,72],
[68,78,73,68,65,0,77,71,78],
[59,60,68,58,71,54,0,60,64],
[69,78,73,63,71,60,71,0,74],
[56,68,65,57,59,53,67,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,54,62,51,76,62,66,67],
[73,0,72,82,67,81,51,84,42],
[77,59,0,65,69,76,72,74,63],
[69,49,66,0,50,67,59,85,45],
[80,64,62,81,0,74,69,74,64],
[55,50,55,64,57,0,54,67,52],
[69,80,59,72,62,77,0,78,66],
[65,47,57,46,57,64,53,0,52],
[64,89,68,86,67,79,65,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,59,59,70,60,65,70],
[66,0,73,71,64,71,67,77,72],
[65,58,0,55,72,65,60,69,59],
[72,60,76,0,78,66,82,76,61],
[72,67,59,53,0,66,71,63,66],
[61,60,66,65,65,0,68,69,68],
[71,64,71,49,60,63,0,62,63],
[66,54,62,55,68,62,69,0,59],
[61,59,72,70,65,63,68,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,64,63,54,62,65,63,70],
[76,0,67,62,56,86,59,59,73],
[67,64,0,68,62,77,58,68,71],
[68,69,63,0,63,82,68,85,71],
[77,75,69,68,0,77,65,89,82],
[69,45,54,49,54,0,45,57,65],
[66,72,73,63,66,86,0,75,82],
[68,72,63,46,42,74,56,0,82],
[61,58,60,60,49,66,49,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,72,70,76,64,73,76,69],
[59,0,67,60,71,62,61,58,69],
[59,64,0,67,74,70,70,70,75],
[61,71,64,0,76,58,72,66,74],
[55,60,57,55,0,52,59,60,64],
[67,69,61,73,79,0,77,76,78],
[58,70,61,59,72,54,0,68,70],
[55,73,61,65,71,55,63,0,64],
[62,62,56,57,67,53,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,62,71,58,64,60,66,67],
[56,0,52,53,55,56,55,54,61],
[69,79,0,60,54,59,58,62,61],
[60,78,71,0,57,60,55,64,58],
[73,76,77,74,0,64,66,62,64],
[67,75,72,71,67,0,62,65,71],
[71,76,73,76,65,69,0,64,70],
[65,77,69,67,69,66,67,0,72],
[64,70,70,73,67,60,61,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,72,64,74,77,70,60,89],
[58,0,54,54,48,61,62,56,76],
[59,77,0,73,70,77,69,55,78],
[67,77,58,0,65,65,68,61,72],
[57,83,61,66,0,72,63,55,77],
[54,70,54,66,59,0,65,49,73],
[61,69,62,63,68,66,0,68,84],
[71,75,76,70,76,82,63,0,81],
[42,55,53,59,54,58,47,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,28,61,65,86,60,44,46],
[83,0,52,70,69,93,70,65,54],
[103,79,0,88,82,112,96,60,67],
[70,61,43,0,78,78,73,69,55],
[66,62,49,53,0,77,61,70,39],
[45,38,19,53,54,0,53,45,45],
[71,61,35,58,70,78,0,62,32],
[87,66,71,62,61,86,69,0,65],
[85,77,64,76,92,86,99,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,66,73,63,62,75,66,64],
[64,0,60,77,71,71,80,59,73],
[65,71,0,78,63,69,80,70,69],
[58,54,53,0,61,68,67,57,56],
[68,60,68,70,0,83,74,58,61],
[69,60,62,63,48,0,67,50,60],
[56,51,51,64,57,64,0,40,57],
[65,72,61,74,73,81,91,0,72],
[67,58,62,75,70,71,74,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,75,62,74,71,63,75,69],
[60,0,70,74,80,73,72,78,54],
[56,61,0,69,67,70,57,73,54],
[69,57,62,0,73,70,59,69,61],
[57,51,64,58,0,65,57,59,48],
[60,58,61,61,66,0,63,68,53],
[68,59,74,72,74,68,0,64,64],
[56,53,58,62,72,63,67,0,52],
[62,77,77,70,83,78,67,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,59,59,65,61,61,52,65],
[66,0,77,60,65,72,69,62,75],
[72,54,0,62,66,63,62,62,63],
[72,71,69,0,67,73,69,65,62],
[66,66,65,64,0,68,67,71,75],
[70,59,68,58,63,0,59,56,67],
[70,62,69,62,64,72,0,61,62],
[79,69,69,66,60,75,70,0,72],
[66,56,68,69,56,64,69,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,57,53,62,66,61,57,69],
[65,0,55,51,62,60,62,49,66],
[74,76,0,70,74,66,64,65,74],
[78,80,61,0,68,73,72,64,69],
[69,69,57,63,0,72,62,59,67],
[65,71,65,58,59,0,68,63,59],
[70,69,67,59,69,63,0,64,65],
[74,82,66,67,72,68,67,0,65],
[62,65,57,62,64,72,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,73,70,66,64,63,62,67],
[62,0,63,65,63,62,57,57,62],
[58,68,0,67,61,67,74,67,57],
[61,66,64,0,65,54,60,51,60],
[65,68,70,66,0,68,60,57,59],
[67,69,64,77,63,0,64,70,65],
[68,74,57,71,71,67,0,66,61],
[69,74,64,80,74,61,65,0,71],
[64,69,74,71,72,66,70,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,69,62,67,64,59,71,82],
[73,0,48,56,58,70,58,61,86],
[62,83,0,65,76,71,56,68,87],
[69,75,66,0,73,64,65,76,82],
[64,73,55,58,0,82,66,73,75],
[67,61,60,67,49,0,50,62,74],
[72,73,75,66,65,81,0,80,93],
[60,70,63,55,58,69,51,0,72],
[49,45,44,49,56,57,38,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,50,59,74,68,59,64,64],
[73,0,70,81,72,75,74,65,81],
[81,61,0,74,88,74,71,78,68],
[72,50,57,0,65,69,67,61,67],
[57,59,43,66,0,62,64,50,53],
[63,56,57,62,69,0,76,54,59],
[72,57,60,64,67,55,0,54,65],
[67,66,53,70,81,77,77,0,79],
[67,50,63,64,78,72,66,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,66,75,68,65,68,67,71],
[65,0,70,84,65,50,62,68,69],
[65,61,0,77,50,43,68,51,49],
[56,47,54,0,37,48,57,60,33],
[63,66,81,94,0,69,77,73,77],
[66,81,88,83,62,0,73,73,67],
[63,69,63,74,54,58,0,76,62],
[64,63,80,71,58,58,55,0,63],
[60,62,82,98,54,64,69,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,68,63,63,70,59,61,78],
[57,0,65,62,66,69,66,67,70],
[63,66,0,55,66,71,60,56,69],
[68,69,76,0,75,70,66,63,76],
[68,65,65,56,0,70,75,66,75],
[61,62,60,61,61,0,58,56,71],
[72,65,71,65,56,73,0,64,73],
[70,64,75,68,65,75,67,0,73],
[53,61,62,55,56,60,58,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,51,56,59,52,66,65,69],
[53,0,56,58,52,52,62,50,68],
[80,75,0,66,58,69,74,72,64],
[75,73,65,0,71,50,93,59,83],
[72,79,73,60,0,58,84,65,69],
[79,79,62,81,73,0,75,75,72],
[65,69,57,38,47,56,0,61,47],
[66,81,59,72,66,56,70,0,71],
[62,63,67,48,62,59,84,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,69,68,61,62,62,76,70],
[72,0,65,78,66,67,69,81,71],
[62,66,0,75,63,51,61,74,67],
[63,53,56,0,70,50,54,77,65],
[70,65,68,61,0,66,60,67,61],
[69,64,80,81,65,0,71,79,73],
[69,62,70,77,71,60,0,68,60],
[55,50,57,54,64,52,63,0,52],
[61,60,64,66,70,58,71,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,69,69,67,66,72,76,65],
[69,0,71,73,61,69,68,72,69],
[62,60,0,72,57,68,60,73,59],
[62,58,59,0,56,56,66,66,58],
[64,70,74,75,0,75,71,64,68],
[65,62,63,75,56,0,68,69,57],
[59,63,71,65,60,63,0,74,61],
[55,59,58,65,67,62,57,0,53],
[66,62,72,73,63,74,70,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,67,52,64,67,57,60,70],
[51,0,71,45,49,47,38,52,53],
[64,60,0,60,53,52,56,68,60],
[79,86,71,0,65,55,59,61,68],
[67,82,78,66,0,60,67,64,71],
[64,84,79,76,71,0,53,71,71],
[74,93,75,72,64,78,0,78,75],
[71,79,63,70,67,60,53,0,71],
[61,78,71,63,60,60,56,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,69,68,65,63,65,71,56],
[72,0,68,71,64,64,72,77,70],
[62,63,0,65,65,65,70,72,63],
[63,60,66,0,71,71,61,69,57],
[66,67,66,60,0,64,57,64,57],
[68,67,66,60,67,0,64,72,57],
[66,59,61,70,74,67,0,66,60],
[60,54,59,62,67,59,65,0,52],
[75,61,68,74,74,74,71,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,84,82,84,64,85,62,89],
[65,0,87,70,72,64,79,71,74],
[47,44,0,64,59,51,74,54,68],
[49,61,67,0,71,49,62,48,66],
[47,59,72,60,0,57,71,56,59],
[67,67,80,82,74,0,78,65,89],
[46,52,57,69,60,53,0,55,60],
[69,60,77,83,75,66,76,0,76],
[42,57,63,65,72,42,71,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,87,61,62,70,88,79,94],
[61,0,57,33,32,41,74,32,57],
[44,74,0,45,43,45,79,69,68],
[70,98,86,0,51,70,101,77,84],
[69,99,88,80,0,87,103,62,108],
[61,90,86,61,44,0,95,55,93],
[43,57,52,30,28,36,0,45,58],
[52,99,62,54,69,76,86,0,76],
[37,74,63,47,23,38,73,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,95,62,72,73,56,71,97],
[72,0,69,51,59,71,69,70,60],
[36,62,0,38,35,35,48,37,73],
[69,80,93,0,58,58,56,70,81],
[59,72,96,73,0,84,70,86,85],
[58,60,96,73,47,0,68,84,98],
[75,62,83,75,61,63,0,74,97],
[60,61,94,61,45,47,57,0,96],
[34,71,58,50,46,33,34,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,77,78,78,62,72,70,63],
[53,0,60,61,53,53,60,58,61],
[54,71,0,74,68,64,68,64,65],
[53,70,57,0,60,47,61,53,56],
[53,78,63,71,0,46,61,58,60],
[69,78,67,84,85,0,75,65,68],
[59,71,63,70,70,56,0,61,54],
[61,73,67,78,73,66,70,0,61],
[68,70,66,75,71,63,77,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,62,70,68,72,66,69,69],
[64,0,59,69,54,71,60,64,64],
[69,72,0,67,73,65,68,71,76],
[61,62,64,0,60,62,62,67,75],
[63,77,58,71,0,70,66,58,67],
[59,60,66,69,61,0,58,66,70],
[65,71,63,69,65,73,0,69,79],
[62,67,60,64,73,65,62,0,74],
[62,67,55,56,64,61,52,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,72,68,56,68,75,60,67],
[63,0,59,63,64,62,67,65,61],
[59,72,0,53,62,67,63,47,66],
[63,68,78,0,70,66,73,72,72],
[75,67,69,61,0,63,76,64,73],
[63,69,64,65,68,0,77,55,74],
[56,64,68,58,55,54,0,59,61],
[71,66,84,59,67,76,72,0,78],
[64,70,65,59,58,57,70,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,66,62,72,66,80,72,59],
[49,0,55,55,56,52,65,67,48],
[65,76,0,62,66,62,80,60,67],
[69,76,69,0,74,82,86,81,63],
[59,75,65,57,0,60,78,69,57],
[65,79,69,49,71,0,74,64,65],
[51,66,51,45,53,57,0,60,42],
[59,64,71,50,62,67,71,0,60],
[72,83,64,68,74,66,89,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,62,47,57,53,63,57,67],
[79,0,58,75,69,76,69,63,63],
[69,73,0,73,70,69,61,62,64],
[84,56,58,0,68,70,70,63,66],
[74,62,61,63,0,59,57,56,66],
[78,55,62,61,72,0,69,62,71],
[68,62,70,61,74,62,0,69,65],
[74,68,69,68,75,69,62,0,65],
[64,68,67,65,65,60,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,74,76,68,50,60,63,77],
[68,0,74,79,66,44,73,66,63],
[57,57,0,58,55,41,38,65,73],
[55,52,73,0,74,47,59,53,66],
[63,65,76,57,0,42,50,68,72],
[81,87,90,84,89,0,62,88,93],
[71,58,93,72,81,69,0,76,70],
[68,65,66,78,63,43,55,0,68],
[54,68,58,65,59,38,61,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,70,70,60,53,79,60,60],
[75,0,73,68,69,71,78,63,66],
[61,58,0,58,65,73,86,54,75],
[61,63,73,0,57,57,72,68,65],
[71,62,66,74,0,57,83,58,68],
[78,60,58,74,74,0,80,64,72],
[52,53,45,59,48,51,0,53,68],
[71,68,77,63,73,67,78,0,75],
[71,65,56,66,63,59,63,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,72,58,56,48,59,66,60],
[71,0,82,71,65,67,65,65,68],
[59,49,0,48,59,51,44,47,44],
[73,60,83,0,71,66,60,67,60],
[75,66,72,60,0,63,60,62,64],
[83,64,80,65,68,0,57,65,60],
[72,66,87,71,71,74,0,67,63],
[65,66,84,64,69,66,64,0,57],
[71,63,87,71,67,71,68,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,79,60,82,67,68,73,71],
[60,0,68,76,60,70,73,77,70],
[52,63,0,53,72,72,64,71,66],
[71,55,78,0,76,70,70,68,67],
[49,71,59,55,0,64,52,70,76],
[64,61,59,61,67,0,64,71,84],
[63,58,67,61,79,67,0,69,69],
[58,54,60,63,61,60,62,0,61],
[60,61,65,64,55,47,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,67,73,63,68,68,66,66],
[53,0,56,71,64,57,67,61,58],
[64,75,0,73,70,67,64,74,63],
[58,60,58,0,58,64,62,65,51],
[68,67,61,73,0,67,74,64,67],
[63,74,64,67,64,0,61,57,58],
[63,64,67,69,57,70,0,64,56],
[65,70,57,66,67,74,67,0,61],
[65,73,68,80,64,73,75,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,72,66,43,50,63,63,53],
[75,0,75,66,54,61,66,65,63],
[59,56,0,62,57,74,60,69,62],
[65,65,69,0,60,67,76,70,64],
[88,77,74,71,0,71,82,80,65],
[81,70,57,64,60,0,65,62,63],
[68,65,71,55,49,66,0,78,70],
[68,66,62,61,51,69,53,0,59],
[78,68,69,67,66,68,61,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,75,80,68,68,65,76,74],
[60,0,68,74,68,72,59,68,68],
[56,63,0,66,79,74,50,51,65],
[51,57,65,0,68,72,58,68,61],
[63,63,52,63,0,63,66,63,75],
[63,59,57,59,68,0,69,53,66],
[66,72,81,73,65,62,0,71,80],
[55,63,80,63,68,78,60,0,67],
[57,63,66,70,56,65,51,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,59,48,71,52,52,63,52],
[60,0,56,69,61,57,71,63,78],
[72,75,0,69,76,70,59,82,73],
[83,62,62,0,63,57,67,56,69],
[60,70,55,68,0,64,66,66,66],
[79,74,61,74,67,0,67,72,73],
[79,60,72,64,65,64,0,66,79],
[68,68,49,75,65,59,65,0,63],
[79,53,58,62,65,58,52,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,54,66,54,44,61,65,79],
[72,0,59,72,57,65,63,76,77],
[77,72,0,74,60,58,58,77,73],
[65,59,57,0,65,57,71,59,61],
[77,74,71,66,0,57,55,73,70],
[87,66,73,74,74,0,55,73,68],
[70,68,73,60,76,76,0,65,58],
[66,55,54,72,58,58,66,0,61],
[52,54,58,70,61,63,73,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,64,66,70,67,66,70],
[64,0,62,76,69,60,68,71,71],
[63,69,0,68,55,66,67,72,70],
[67,55,63,0,53,64,66,60,72],
[65,62,76,78,0,69,75,72,74],
[61,71,65,67,62,0,67,65,75],
[64,63,64,65,56,64,0,73,78],
[65,60,59,71,59,66,58,0,72],
[61,60,61,59,57,56,53,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,80,57,72,71,75,69,86],
[51,0,67,54,59,47,53,70,75],
[51,64,0,39,68,38,55,72,68],
[74,77,92,0,75,61,61,80,96],
[59,72,63,56,0,63,49,70,73],
[60,84,93,70,68,0,63,77,84],
[56,78,76,70,82,68,0,76,86],
[62,61,59,51,61,54,55,0,85],
[45,56,63,35,58,47,45,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,55,52,54,60,60,59,58],
[74,0,78,52,66,62,68,75,69],
[76,53,0,59,58,56,54,65,61],
[79,79,72,0,62,59,68,66,65],
[77,65,73,69,0,66,59,84,61],
[71,69,75,72,65,0,59,71,65],
[71,63,77,63,72,72,0,77,72],
[72,56,66,65,47,60,54,0,57],
[73,62,70,66,70,66,59,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,81,79,78,70,71,67,69],
[67,0,76,71,65,64,71,66,66],
[50,55,0,63,56,62,62,65,54],
[52,60,68,0,63,69,66,66,61],
[53,66,75,68,0,66,73,63,58],
[61,67,69,62,65,0,67,67,62],
[60,60,69,65,58,64,0,66,65],
[64,65,66,65,68,64,65,0,67],
[62,65,77,70,73,69,66,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,48,49,48,65,48,38,65],
[81,0,81,73,81,67,64,71,70],
[83,50,0,77,68,71,51,65,82],
[82,58,54,0,57,60,68,63,81],
[83,50,63,74,0,56,83,67,89],
[66,64,60,71,75,0,66,64,97],
[83,67,80,63,48,65,0,61,82],
[93,60,66,68,64,67,70,0,74],
[66,61,49,50,42,34,49,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,68,59,67,71,58,55,72],
[70,0,71,64,68,71,65,60,73],
[63,60,0,56,67,68,59,63,59],
[72,67,75,0,73,78,54,68,80],
[64,63,64,58,0,65,66,64,74],
[60,60,63,53,66,0,57,53,61],
[73,66,72,77,65,74,0,69,65],
[76,71,68,63,67,78,62,0,73],
[59,58,72,51,57,70,66,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,60,46,55,61,57,58,57],
[67,0,55,56,53,63,63,65,54],
[71,76,0,60,69,73,68,66,65],
[85,75,71,0,60,72,74,63,77],
[76,78,62,71,0,65,77,74,83],
[70,68,58,59,66,0,68,61,61],
[74,68,63,57,54,63,0,54,68],
[73,66,65,68,57,70,77,0,69],
[74,77,66,54,48,70,63,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,57,67,64,63,67,70],
[64,0,64,55,73,68,62,62,72],
[64,67,0,64,78,62,68,63,65],
[74,76,67,0,85,66,62,73,68],
[64,58,53,46,0,47,44,50,58],
[67,63,69,65,84,0,67,63,69],
[68,69,63,69,87,64,0,62,68],
[64,69,68,58,81,68,69,0,67],
[61,59,66,63,73,62,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,75,84,64,83,83,75,72],
[63,0,72,77,70,66,63,64,85],
[56,59,0,61,54,75,62,67,62],
[47,54,70,0,60,64,80,61,60],
[67,61,77,71,0,72,70,71,80],
[48,65,56,67,59,0,62,57,68],
[48,68,69,51,61,69,0,66,55],
[56,67,64,70,60,74,65,0,67],
[59,46,69,71,51,63,76,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,57,60,59,66,55,57,62],
[72,0,63,69,62,63,60,57,74],
[74,68,0,66,67,63,64,65,72],
[71,62,65,0,66,65,59,56,63],
[72,69,64,65,0,68,62,69,62],
[65,68,68,66,63,0,66,69,63],
[76,71,67,72,69,65,0,71,73],
[74,74,66,75,62,62,60,0,72],
[69,57,59,68,69,68,58,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 131, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_9_131.csv", index=False, header=False)

import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,179,169,143,183,162,177,169],
[161,0,163,167,177,155,160,174],
[171,177,0,170,183,177,166,178],
[197,173,170,0,180,178,179,178],
[157,163,157,160,0,158,168,183],
[178,185,163,162,182,0,166,167],
[163,180,174,161,172,174,0,169],
[171,166,162,162,157,173,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,174,153,184,182,168,180],
[192,0,214,170,165,194,187,199],
[166,126,0,133,163,166,175,164],
[187,170,207,0,180,236,179,205],
[156,175,177,160,0,174,177,196],
[158,146,174,104,166,0,160,185],
[172,153,165,161,163,180,0,191],
[160,141,176,135,144,155,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,178,171,152,177,164,156],
[164,0,173,176,151,166,162,148],
[162,167,0,177,165,173,166,161],
[169,164,163,0,169,176,149,158],
[188,189,175,171,0,172,160,165],
[163,174,167,164,168,0,153,160],
[176,178,174,191,180,187,0,170],
[184,192,179,182,175,180,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,146,168,171,174,167,187],
[182,0,164,160,179,169,156,175],
[194,176,0,164,179,183,163,183],
[172,180,176,0,183,180,164,177],
[169,161,161,157,0,170,172,165],
[166,171,157,160,170,0,162,179],
[173,184,177,176,168,178,0,181],
[153,165,157,163,175,161,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,171,162,145,140,152,173],
[189,0,181,175,168,156,170,182],
[169,159,0,169,157,154,161,191],
[178,165,171,0,158,171,152,193],
[195,172,183,182,0,163,168,183],
[200,184,186,169,177,0,175,179],
[188,170,179,188,172,165,0,191],
[167,158,149,147,157,161,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,207,160,197,175,187,140],
[185,0,198,202,193,191,170,154],
[133,142,0,152,163,148,137,133],
[180,138,188,0,175,156,175,164],
[143,147,177,165,0,136,149,147],
[165,149,192,184,204,0,163,150],
[153,170,203,165,191,177,0,174],
[200,186,207,176,193,190,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,161,173,167,177,175,172],
[174,0,171,162,168,167,170,177],
[179,169,0,162,175,177,164,184],
[167,178,178,0,180,168,171,180],
[173,172,165,160,0,160,156,167],
[163,173,163,172,180,0,159,185],
[165,170,176,169,184,181,0,178],
[168,163,156,160,173,155,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,210,191,193,182,208,189],
[171,0,186,165,182,169,194,172],
[130,154,0,139,161,162,154,176],
[149,175,201,0,212,178,211,191],
[147,158,179,128,0,158,170,195],
[158,171,178,162,182,0,150,158],
[132,146,186,129,170,190,0,158],
[151,168,164,149,145,182,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,166,175,172,174,174,172],
[170,0,169,139,167,156,138,170],
[174,171,0,169,170,167,170,199],
[165,201,171,0,169,199,137,181],
[168,173,170,171,0,177,201,177],
[166,184,173,141,163,0,183,200],
[166,202,170,203,139,157,0,172],
[168,170,141,159,163,140,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,158,150,161,162,164,162],
[185,0,177,165,167,180,179,173],
[182,163,0,164,176,162,164,173],
[190,175,176,0,171,177,171,164],
[179,173,164,169,0,178,160,173],
[178,160,178,163,162,0,176,168],
[176,161,176,169,180,164,0,166],
[178,167,167,176,167,172,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,150,207,211,184,173,167],
[146,0,136,211,193,120,108,101],
[190,204,0,223,218,231,145,164],
[133,129,117,0,166,132,123,141],
[129,147,122,174,0,179,136,161],
[156,220,109,208,161,0,138,209],
[167,232,195,217,204,202,0,163],
[173,239,176,199,179,131,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,178,184,193,192,187,188],
[211,0,190,225,213,214,165,215],
[162,150,0,188,165,166,161,210],
[156,115,152,0,165,183,167,164],
[147,127,175,175,0,122,160,187],
[148,126,174,157,218,0,162,172],
[153,175,179,173,180,178,0,168],
[152,125,130,176,153,168,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,187,165,159,171,170,170],
[177,0,179,164,191,170,193,175],
[153,161,0,156,182,159,186,183],
[175,176,184,0,169,172,177,176],
[181,149,158,171,0,160,179,176],
[169,170,181,168,180,0,181,173],
[170,147,154,163,161,159,0,162],
[170,165,157,164,164,167,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,163,171,169,173,171,172],
[153,0,155,148,163,171,162,158],
[177,185,0,165,182,179,169,164],
[169,192,175,0,174,183,174,171],
[171,177,158,166,0,169,178,171],
[167,169,161,157,171,0,171,169],
[169,178,171,166,162,169,0,169],
[168,182,176,169,169,171,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,177,168,164,169,174,177],
[157,0,169,171,149,167,164,172],
[163,171,0,176,163,176,179,152],
[172,169,164,0,170,171,169,157],
[176,191,177,170,0,168,174,168],
[171,173,164,169,172,0,182,171],
[166,176,161,171,166,158,0,153],
[163,168,188,183,172,169,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,160,173,175,176,184,179],
[151,0,148,176,151,163,150,189],
[180,192,0,174,165,198,183,184],
[167,164,166,0,163,175,175,160],
[165,189,175,177,0,167,178,155],
[164,177,142,165,173,0,136,174],
[156,190,157,165,162,204,0,185],
[161,151,156,180,185,166,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,172,186,182,156,173,177],
[154,0,187,160,183,153,160,165],
[168,153,0,149,181,142,168,167],
[154,180,191,0,195,182,181,177],
[158,157,159,145,0,129,175,150],
[184,187,198,158,211,0,184,174],
[167,180,172,159,165,156,0,170],
[163,175,173,163,190,166,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,174,171,172,191,168,195],
[155,0,177,157,164,168,154,178],
[166,163,0,169,156,168,173,168],
[169,183,171,0,179,187,166,168],
[168,176,184,161,0,175,175,171],
[149,172,172,153,165,0,162,147],
[172,186,167,174,165,178,0,187],
[145,162,172,172,169,193,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,167,169,172,173,184,169],
[157,0,169,181,166,163,168,158],
[173,171,0,168,157,172,167,168],
[171,159,172,0,168,172,157,161],
[168,174,183,172,0,167,176,175],
[167,177,168,168,173,0,174,172],
[156,172,173,183,164,166,0,172],
[171,182,172,179,165,168,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,171,181,157,175,179,176],
[164,0,162,169,163,180,167,182],
[169,178,0,178,164,170,145,182],
[159,171,162,0,175,178,178,185],
[183,177,176,165,0,167,145,201],
[165,160,170,162,173,0,173,176],
[161,173,195,162,195,167,0,193],
[164,158,158,155,139,164,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,176,159,167,189,163,175],
[161,0,162,157,164,174,148,175],
[164,178,0,169,188,193,154,173],
[181,183,171,0,174,202,153,194],
[173,176,152,166,0,194,150,186],
[151,166,147,138,146,0,173,185],
[177,192,186,187,190,167,0,190],
[165,165,167,146,154,155,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,140,127,140,149,171,168],
[197,0,161,159,175,170,192,151],
[200,179,0,172,189,173,200,160],
[213,181,168,0,193,185,192,175],
[200,165,151,147,0,142,163,164],
[191,170,167,155,198,0,183,174],
[169,148,140,148,177,157,0,158],
[172,189,180,165,176,166,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,189,170,167,164,182,176],
[161,0,180,180,173,170,170,171],
[151,160,0,170,149,153,163,159],
[170,160,170,0,168,161,164,169],
[173,167,191,172,0,161,179,172],
[176,170,187,179,179,0,172,181],
[158,170,177,176,161,168,0,175],
[164,169,181,171,168,159,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,185,173,178,171,174,160],
[151,0,176,162,159,163,155,162],
[155,164,0,158,157,156,151,153],
[167,178,182,0,169,186,174,184],
[162,181,183,171,0,180,162,177],
[169,177,184,154,160,0,158,162],
[166,185,189,166,178,182,0,162],
[180,178,187,156,163,178,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,168,146,144,156,164,161],
[178,0,185,170,176,183,187,171],
[172,155,0,168,155,160,163,165],
[194,170,172,0,174,173,180,172],
[196,164,185,166,0,177,177,171],
[184,157,180,167,163,0,162,166],
[176,153,177,160,163,178,0,178],
[179,169,175,168,169,174,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,166,189,181,176,173,177],
[175,0,175,190,186,183,167,181],
[174,165,0,191,176,172,150,168],
[151,150,149,0,165,169,148,158],
[159,154,164,175,0,177,152,160],
[164,157,168,171,163,0,142,145],
[167,173,190,192,188,198,0,180],
[163,159,172,182,180,195,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,166,145,182,179,181,143],
[154,0,137,159,128,208,169,162],
[174,203,0,169,160,206,188,177],
[195,181,171,0,159,201,172,159],
[158,212,180,181,0,207,171,179],
[161,132,134,139,133,0,156,140],
[159,171,152,168,169,184,0,151],
[197,178,163,181,161,200,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,145,148,184,167,137,166],
[174,0,174,155,211,187,182,192],
[195,166,0,173,171,175,175,172],
[192,185,167,0,183,164,169,168],
[156,129,169,157,0,153,142,144],
[173,153,165,176,187,0,172,181],
[203,158,165,171,198,168,0,167],
[174,148,168,172,196,159,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,187,163,157,189,179,163],
[145,0,175,179,161,189,157,180],
[153,165,0,150,150,157,184,145],
[177,161,190,0,165,188,189,175],
[183,179,190,175,0,190,194,160],
[151,151,183,152,150,0,158,137],
[161,183,156,151,146,182,0,151],
[177,160,195,165,180,203,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,177,177,154,168,167,157],
[167,0,166,179,161,182,159,172],
[163,174,0,171,172,167,157,166],
[163,161,169,0,163,165,152,166],
[186,179,168,177,0,184,174,193],
[172,158,173,175,156,0,158,171],
[173,181,183,188,166,182,0,166],
[183,168,174,174,147,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,160,147,167,158,174,195],
[201,0,180,186,177,178,145,190],
[180,160,0,184,210,153,188,185],
[193,154,156,0,191,163,207,199],
[173,163,130,149,0,130,156,174],
[182,162,187,177,210,0,184,187],
[166,195,152,133,184,156,0,165],
[145,150,155,141,166,153,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,179,173,170,182,179,178],
[176,0,175,165,172,172,183,174],
[161,165,0,153,162,171,172,191],
[167,175,187,0,180,176,168,180],
[170,168,178,160,0,185,179,174],
[158,168,169,164,155,0,180,175],
[161,157,168,172,161,160,0,165],
[162,166,149,160,166,165,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,141,144,141,117,126,195],
[157,0,156,164,182,98,89,178],
[199,184,0,164,155,128,143,246],
[196,176,176,0,179,136,192,196],
[199,158,185,161,0,104,128,198],
[223,242,212,204,236,0,165,239],
[214,251,197,148,212,175,0,218],
[145,162,94,144,142,101,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,165,181,188,179,175,176],
[178,0,176,190,179,175,184,168],
[175,164,0,175,169,160,163,166],
[159,150,165,0,177,164,155,145],
[152,161,171,163,0,161,158,148],
[161,165,180,176,179,0,184,172],
[165,156,177,185,182,156,0,175],
[164,172,174,195,192,168,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,197,130,219,152,242,168],
[98,0,53,75,40,65,127,41],
[143,287,0,202,180,167,300,167],
[210,265,138,0,114,167,249,145],
[121,300,160,226,0,226,300,226],
[188,275,173,173,114,0,209,16],
[98,213,40,91,40,131,0,79],
[172,299,173,195,114,324,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,174,144,196,200,184,184],
[161,0,141,167,175,197,187,175],
[166,199,0,158,176,187,185,161],
[196,173,182,0,209,185,199,167],
[144,165,164,131,0,192,170,154],
[140,143,153,155,148,0,199,115],
[156,153,155,141,170,141,0,125],
[156,165,179,173,186,225,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,172,173,165,172,181,172],
[161,0,163,172,163,157,162,167],
[168,177,0,182,175,171,174,172],
[167,168,158,0,156,166,166,160],
[175,177,165,184,0,168,173,171],
[168,183,169,174,172,0,172,173],
[159,178,166,174,167,168,0,159],
[168,173,168,180,169,167,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,175,143,155,170,172,168],
[174,0,174,171,158,156,160,156],
[165,166,0,160,149,168,172,156],
[197,169,180,0,149,177,182,190],
[185,182,191,191,0,169,176,179],
[170,184,172,163,171,0,158,174],
[168,180,168,158,164,182,0,155],
[172,184,184,150,161,166,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,190,193,179,176,166,177],
[147,0,154,179,161,157,152,158],
[150,186,0,173,161,158,154,165],
[147,161,167,0,142,162,127,147],
[161,179,179,198,0,169,155,174],
[164,183,182,178,171,0,175,184],
[174,188,186,213,185,165,0,189],
[163,182,175,193,166,156,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,177,162,147,170,163,182],
[164,0,175,168,147,163,162,167],
[163,165,0,156,157,172,178,181],
[178,172,184,0,174,184,166,172],
[193,193,183,166,0,180,169,193],
[170,177,168,156,160,0,173,177],
[177,178,162,174,171,167,0,193],
[158,173,159,168,147,163,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,193,172,165,172,169,202],
[157,0,195,153,179,187,195,208],
[147,145,0,148,139,176,166,165],
[168,187,192,0,175,197,187,193],
[175,161,201,165,0,187,194,190],
[168,153,164,143,153,0,156,162],
[171,145,174,153,146,184,0,162],
[138,132,175,147,150,178,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,171,173,162,168,159,161],
[161,0,162,156,160,162,164,155],
[169,178,0,166,167,164,170,165],
[167,184,174,0,178,168,170,175],
[178,180,173,162,0,166,179,164],
[172,178,176,172,174,0,183,163],
[181,176,170,170,161,157,0,158],
[179,185,175,165,176,177,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,152,176,182,183,158,166],
[164,0,152,167,159,154,148,161],
[188,188,0,190,166,171,167,180],
[164,173,150,0,168,145,157,157],
[158,181,174,172,0,162,152,168],
[157,186,169,195,178,0,170,180],
[182,192,173,183,188,170,0,199],
[174,179,160,183,172,160,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,173,168,151,155,160,170],
[202,0,195,179,170,189,172,209],
[167,145,0,162,161,149,151,167],
[172,161,178,0,161,160,162,186],
[189,170,179,179,0,180,163,203],
[185,151,191,180,160,0,179,189],
[180,168,189,178,177,161,0,176],
[170,131,173,154,137,151,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,172,156,181,168,162,176],
[194,0,182,160,178,175,172,158],
[168,158,0,146,169,153,161,157],
[184,180,194,0,170,183,161,179],
[159,162,171,170,0,164,174,168],
[172,165,187,157,176,0,167,166],
[178,168,179,179,166,173,0,170],
[164,182,183,161,172,174,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,158,171,190,161,178,162],
[151,0,158,160,175,159,161,168],
[182,182,0,169,198,179,174,182],
[169,180,171,0,186,179,177,193],
[150,165,142,154,0,152,170,162],
[179,181,161,161,188,0,182,173],
[162,179,166,163,170,158,0,159],
[178,172,158,147,178,167,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,176,167,184,183,179,175],
[166,0,167,161,170,178,162,158],
[164,173,0,166,192,163,179,167],
[173,179,174,0,180,163,155,165],
[156,170,148,160,0,159,158,166],
[157,162,177,177,181,0,179,186],
[161,178,161,185,182,161,0,175],
[165,182,173,175,174,154,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,175,168,188,152,187,158],
[188,0,207,170,199,180,170,185],
[165,133,0,167,164,136,178,157],
[172,170,173,0,181,144,194,151],
[152,141,176,159,0,145,162,169],
[188,160,204,196,195,0,190,174],
[153,170,162,146,178,150,0,150],
[182,155,183,189,171,166,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,160,172,182,169,169,191],
[162,0,166,165,159,167,156,184],
[180,174,0,164,165,176,170,191],
[168,175,176,0,174,173,181,182],
[158,181,175,166,0,185,173,197],
[171,173,164,167,155,0,155,172],
[171,184,170,159,167,185,0,183],
[149,156,149,158,143,168,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,150,177,176,171,177,162],
[175,0,162,190,195,158,183,179],
[190,178,0,179,190,167,196,182],
[163,150,161,0,149,153,168,148],
[164,145,150,191,0,153,177,167],
[169,182,173,187,187,0,198,183],
[163,157,144,172,163,142,0,154],
[178,161,158,192,173,157,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,173,169,161,186,173,165],
[155,0,153,147,155,173,163,161],
[167,187,0,175,172,172,185,161],
[171,193,165,0,166,173,181,168],
[179,185,168,174,0,178,188,172],
[154,167,168,167,162,0,168,161],
[167,177,155,159,152,172,0,168],
[175,179,179,172,168,179,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,137,194,210,204,245,209],
[156,0,178,205,170,170,207,164],
[203,162,0,184,184,149,159,195],
[146,135,156,0,172,160,156,113],
[130,170,156,168,0,161,208,167],
[136,170,191,180,179,0,175,145],
[95,133,181,184,132,165,0,130],
[131,176,145,227,173,195,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,160,173,177,160,150,170],
[168,0,175,198,183,167,169,152],
[180,165,0,184,195,154,168,155],
[167,142,156,0,179,171,151,160],
[163,157,145,161,0,149,152,160],
[180,173,186,169,191,0,176,194],
[190,171,172,189,188,164,0,163],
[170,188,185,180,180,146,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,165,169,170,179,160,178],
[178,0,159,163,173,169,176,157],
[175,181,0,183,156,171,189,184],
[171,177,157,0,178,172,161,166],
[170,167,184,162,0,191,158,174],
[161,171,169,168,149,0,163,169],
[180,164,151,179,182,177,0,171],
[162,183,156,174,166,171,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,159,159,172,185,189,164],
[172,0,162,136,183,148,176,157],
[181,178,0,150,151,175,192,179],
[181,204,190,0,175,201,189,158],
[168,157,189,165,0,187,193,178],
[155,192,165,139,153,0,174,169],
[151,164,148,151,147,166,0,148],
[176,183,161,182,162,171,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,177,153,153,167,180,154],
[165,0,172,154,162,154,159,156],
[163,168,0,168,155,164,169,140],
[187,186,172,0,170,164,180,158],
[187,178,185,170,0,180,178,181],
[173,186,176,176,160,0,181,189],
[160,181,171,160,162,159,0,160],
[186,184,200,182,159,151,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,179,183,174,177,175,169],
[159,0,172,189,162,157,161,162],
[161,168,0,179,163,176,157,163],
[157,151,161,0,159,146,151,154],
[166,178,177,181,0,179,165,155],
[163,183,164,194,161,0,153,162],
[165,179,183,189,175,187,0,174],
[171,178,177,186,185,178,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,187,179,176,176,164,155],
[168,0,171,181,164,166,175,152],
[153,169,0,173,166,167,155,150],
[161,159,167,0,163,177,173,155],
[164,176,174,177,0,170,165,171],
[164,174,173,163,170,0,163,158],
[176,165,185,167,175,177,0,161],
[185,188,190,185,169,182,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,162,174,149,158,155,163],
[173,0,159,166,160,136,161,163],
[178,181,0,178,194,164,173,178],
[166,174,162,0,172,159,171,168],
[191,180,146,168,0,176,169,170],
[182,204,176,181,164,0,184,167],
[185,179,167,169,171,156,0,163],
[177,177,162,172,170,173,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,158,184,148,177,167,155],
[199,0,172,189,184,183,197,169],
[182,168,0,181,197,182,164,181],
[156,151,159,0,157,164,174,144],
[192,156,143,183,0,163,158,148],
[163,157,158,176,177,0,169,153],
[173,143,176,166,182,171,0,186],
[185,171,159,196,192,187,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,172,162,149,161,171,141],
[155,0,149,178,167,159,168,172],
[168,191,0,180,171,174,180,166],
[178,162,160,0,154,169,147,157],
[191,173,169,186,0,169,171,152],
[179,181,166,171,171,0,174,184],
[169,172,160,193,169,166,0,172],
[199,168,174,183,188,156,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,155,168,164,164,175,154],
[173,0,160,168,158,157,178,149],
[185,180,0,160,173,174,180,163],
[172,172,180,0,172,174,182,163],
[176,182,167,168,0,194,199,179],
[176,183,166,166,146,0,181,164],
[165,162,160,158,141,159,0,153],
[186,191,177,177,161,176,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,161,173,187,160,141,151],
[182,0,163,180,183,184,174,172],
[179,177,0,171,187,155,149,179],
[167,160,169,0,195,140,142,155],
[153,157,153,145,0,174,144,155],
[180,156,185,200,166,0,160,179],
[199,166,191,198,196,180,0,186],
[189,168,161,185,185,161,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,174,176,168,181,175,195],
[140,0,145,153,142,161,135,171],
[166,195,0,194,181,180,179,184],
[164,187,146,0,168,201,168,168],
[172,198,159,172,0,190,165,199],
[159,179,160,139,150,0,154,154],
[165,205,161,172,175,186,0,189],
[145,169,156,172,141,186,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,152,193,164,171,161,172],
[168,0,151,187,177,161,188,171],
[188,189,0,202,168,198,185,192],
[147,153,138,0,145,153,145,135],
[176,163,172,195,0,152,195,181],
[169,179,142,187,188,0,160,177],
[179,152,155,195,145,180,0,180],
[168,169,148,205,159,163,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,189,166,159,183,153,169],
[173,0,176,160,145,183,137,171],
[151,164,0,167,134,166,139,146],
[174,180,173,0,157,159,144,159],
[181,195,206,183,0,188,154,178],
[157,157,174,181,152,0,133,138],
[187,203,201,196,186,207,0,165],
[171,169,194,181,162,202,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,174,170,180,161,189,171],
[172,0,187,178,175,168,169,171],
[166,153,0,157,169,156,158,158],
[170,162,183,0,161,168,167,164],
[160,165,171,179,0,171,168,171],
[179,172,184,172,169,0,179,175],
[151,171,182,173,172,161,0,169],
[169,169,182,176,169,165,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,154,152,150,160,155,157],
[178,0,166,168,170,178,183,173],
[186,174,0,170,182,184,182,174],
[188,172,170,0,167,183,173,164],
[190,170,158,173,0,173,175,183],
[180,162,156,157,167,0,175,163],
[185,157,158,167,165,165,0,165],
[183,167,166,176,157,177,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,137,176,178,197,177,148],
[162,0,144,156,165,159,152,112],
[203,196,0,168,173,150,180,169],
[164,184,172,0,197,170,169,183],
[162,175,167,143,0,187,175,118],
[143,181,190,170,153,0,179,172],
[163,188,160,171,165,161,0,163],
[192,228,171,157,222,168,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,164,178,185,163,169,174],
[170,0,169,181,184,167,168,162],
[176,171,0,180,193,156,178,164],
[162,159,160,0,173,113,183,170],
[155,156,147,167,0,151,152,168],
[177,173,184,227,189,0,166,185],
[171,172,162,157,188,174,0,182],
[166,178,176,170,172,155,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,180,184,170,157,167,187],
[177,0,156,205,181,153,167,177],
[160,184,0,189,195,183,154,186],
[156,135,151,0,188,121,151,152],
[170,159,145,152,0,164,157,175],
[183,187,157,219,176,0,176,187],
[173,173,186,189,183,164,0,182],
[153,163,154,188,165,153,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,160,161,155,163,179,145],
[175,0,157,170,172,177,195,168],
[180,183,0,170,175,186,205,178],
[179,170,170,0,169,193,198,169],
[185,168,165,171,0,172,198,160],
[177,163,154,147,168,0,187,164],
[161,145,135,142,142,153,0,137],
[195,172,162,171,180,176,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,190,203,179,188,168,209],
[204,0,201,192,167,175,166,194],
[150,139,0,153,167,150,160,174],
[137,148,187,0,207,143,168,200],
[161,173,173,133,0,155,186,186],
[152,165,190,197,185,0,181,231],
[172,174,180,172,154,159,0,165],
[131,146,166,140,154,109,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,174,153,117,142,115,138],
[195,0,156,190,150,160,135,169],
[166,184,0,185,169,182,153,173],
[187,150,155,0,153,182,117,166],
[223,190,171,187,0,152,170,192],
[198,180,158,158,188,0,164,213],
[225,205,187,223,170,176,0,188],
[202,171,167,174,148,127,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,165,185,172,163,185,182],
[170,0,167,179,178,181,186,181],
[175,173,0,176,155,166,169,170],
[155,161,164,0,164,151,166,158],
[168,162,185,176,0,173,182,174],
[177,159,174,189,167,0,182,168],
[155,154,171,174,158,158,0,166],
[158,159,170,182,166,172,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,169,207,197,167,169,169],
[175,0,161,198,195,175,183,174],
[171,179,0,193,195,168,177,170],
[133,142,147,0,159,139,144,136],
[143,145,145,181,0,154,173,159],
[173,165,172,201,186,0,175,165],
[171,157,163,196,167,165,0,157],
[171,166,170,204,181,175,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,215,194,250,151,187,180],
[157,0,207,197,173,121,168,192],
[125,133,0,168,134,81,154,138],
[146,143,172,0,161,159,159,155],
[90,167,206,179,0,117,130,138],
[189,219,259,181,223,0,206,146],
[153,172,186,181,210,134,0,187],
[160,148,202,185,202,194,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,184,173,172,169,157,172],
[166,0,179,184,179,183,161,151],
[156,161,0,164,165,174,147,156],
[167,156,176,0,163,187,168,140],
[168,161,175,177,0,181,158,149],
[171,157,166,153,159,0,153,153],
[183,179,193,172,182,187,0,152],
[168,189,184,200,191,187,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,196,138,212,227,229,264],
[139,0,162,201,179,191,174,239],
[144,178,0,180,177,227,244,214],
[202,139,160,0,177,132,208,199],
[128,161,163,163,0,136,182,172],
[113,149,113,208,204,0,255,250],
[111,166,96,132,158,85,0,225],
[76,101,126,141,168,90,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,166,171,175,161,181,174],
[185,0,166,172,183,163,173,190],
[174,174,0,163,169,170,172,169],
[169,168,177,0,175,168,171,177],
[165,157,171,165,0,157,168,174],
[179,177,170,172,183,0,174,184],
[159,167,168,169,172,166,0,172],
[166,150,171,163,166,156,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,148,148,155,144,163,162],
[189,0,152,195,189,163,178,176],
[192,188,0,173,203,167,183,180],
[192,145,167,0,179,174,174,199],
[185,151,137,161,0,162,154,178],
[196,177,173,166,178,0,191,189],
[177,162,157,166,186,149,0,178],
[178,164,160,141,162,151,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,196,195,148,116,153,172],
[153,0,167,156,183,149,145,157],
[144,173,0,135,119,93,143,170],
[145,184,205,0,177,94,154,181],
[192,157,221,163,0,171,181,229],
[224,191,247,246,169,0,191,226],
[187,195,197,186,159,149,0,180],
[168,183,170,159,111,114,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,164,170,163,172,182,170],
[172,0,173,169,178,177,184,168],
[176,167,0,170,177,196,176,166],
[170,171,170,0,182,182,182,184],
[177,162,163,158,0,176,176,161],
[168,163,144,158,164,0,170,159],
[158,156,164,158,164,170,0,163],
[170,172,174,156,179,181,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,176,141,182,141,218,107],
[192,0,202,221,219,147,222,139],
[164,138,0,113,181,137,150,91],
[199,119,227,0,181,194,166,202],
[158,121,159,159,0,136,156,144],
[199,193,203,146,204,0,185,176],
[122,118,190,174,184,155,0,148],
[233,201,249,138,196,164,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,172,180,174,170,183,162],
[169,0,161,160,163,157,150,152],
[168,179,0,167,171,168,169,156],
[160,180,173,0,173,161,165,178],
[166,177,169,167,0,157,159,171],
[170,183,172,179,183,0,178,173],
[157,190,171,175,181,162,0,174],
[178,188,184,162,169,167,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,149,179,168,197,137,184],
[162,0,159,141,160,198,158,187],
[191,181,0,196,164,224,160,152],
[161,199,144,0,187,205,170,189],
[172,180,176,153,0,204,192,184],
[143,142,116,135,136,0,124,165],
[203,182,180,170,148,216,0,184],
[156,153,188,151,156,175,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,176,174,173,149,159,153],
[162,0,191,185,159,175,191,181],
[164,149,0,215,154,145,178,145],
[166,155,125,0,151,163,189,159],
[167,181,186,189,0,149,200,169],
[191,165,195,177,191,0,192,185],
[181,149,162,151,140,148,0,165],
[187,159,195,181,171,155,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,173,177,199,172,147,171],
[161,0,162,158,175,163,155,176],
[167,178,0,172,183,151,164,176],
[163,182,168,0,183,178,160,171],
[141,165,157,157,0,165,174,164],
[168,177,189,162,175,0,165,169],
[193,185,176,180,166,175,0,166],
[169,164,164,169,176,171,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,173,166,191,171,192,178],
[153,0,169,134,152,168,174,146],
[167,171,0,150,161,160,155,136],
[174,206,190,0,193,186,183,139],
[149,188,179,147,0,158,155,127],
[169,172,180,154,182,0,170,159],
[148,166,185,157,185,170,0,115],
[162,194,204,201,213,181,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,169,170,165,166,165,170],
[171,0,162,177,173,174,161,151],
[171,178,0,173,161,179,167,167],
[170,163,167,0,174,162,167,159],
[175,167,179,166,0,164,165,172],
[174,166,161,178,176,0,175,168],
[175,179,173,173,175,165,0,164],
[170,189,173,181,168,172,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,195,216,227,151,193,216],
[148,0,202,226,189,193,206,195],
[145,138,0,194,200,135,155,188],
[124,114,146,0,170,124,155,145],
[113,151,140,170,0,120,167,168],
[189,147,205,216,220,0,194,181],
[147,134,185,185,173,146,0,160],
[124,145,152,195,172,159,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,171,156,172,170,174,160],
[152,0,156,160,174,167,160,149],
[169,184,0,155,164,160,183,182],
[184,180,185,0,189,173,185,164],
[168,166,176,151,0,171,173,172],
[170,173,180,167,169,0,190,181],
[166,180,157,155,167,150,0,175],
[180,191,158,176,168,159,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,132,165,135,123,161,114],
[195,0,164,195,185,182,190,173],
[208,176,0,190,167,179,168,134],
[175,145,150,0,168,162,155,138],
[205,155,173,172,0,167,179,161],
[217,158,161,178,173,0,166,155],
[179,150,172,185,161,174,0,165],
[226,167,206,202,179,185,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,135,160,146,144,171,168],
[195,0,167,146,143,173,179,162],
[205,173,0,171,143,179,181,175],
[180,194,169,0,181,174,192,174],
[194,197,197,159,0,153,182,177],
[196,167,161,166,187,0,196,187],
[169,161,159,148,158,144,0,164],
[172,178,165,166,163,153,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,168,152,180,180,154,148],
[166,0,175,166,191,172,142,145],
[172,165,0,154,143,162,148,140],
[188,174,186,0,182,163,173,148],
[160,149,197,158,0,184,151,125],
[160,168,178,177,156,0,169,150],
[186,198,192,167,189,171,0,180],
[192,195,200,192,215,190,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,178,189,170,192,185,186],
[139,0,170,144,164,170,159,164],
[162,170,0,149,147,152,134,170],
[151,196,191,0,150,173,190,199],
[170,176,193,190,0,183,168,189],
[148,170,188,167,157,0,173,195],
[155,181,206,150,172,167,0,171],
[154,176,170,141,151,145,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,185,155,210,188,200,182],
[174,0,197,171,184,192,188,139],
[155,143,0,140,175,160,183,138],
[185,169,200,0,181,196,213,156],
[130,156,165,159,0,185,176,123],
[152,148,180,144,155,0,161,128],
[140,152,157,127,164,179,0,140],
[158,201,202,184,217,212,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,166,179,171,163,182,179],
[174,0,172,176,170,183,189,193],
[174,168,0,175,163,159,174,179],
[161,164,165,0,177,155,191,182],
[169,170,177,163,0,162,191,181],
[177,157,181,185,178,0,186,190],
[158,151,166,149,149,154,0,176],
[161,147,161,158,159,150,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,156,157,151,147,157,152],
[184,0,180,177,156,175,175,168],
[184,160,0,167,156,164,165,157],
[183,163,173,0,160,172,169,171],
[189,184,184,180,0,168,183,176],
[193,165,176,168,172,0,178,170],
[183,165,175,171,157,162,0,163],
[188,172,183,169,164,170,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,165,146,159,160,180,187],
[169,0,176,171,180,180,178,191],
[175,164,0,157,172,168,171,171],
[194,169,183,0,187,177,190,189],
[181,160,168,153,0,164,183,167],
[180,160,172,163,176,0,190,165],
[160,162,169,150,157,150,0,172],
[153,149,169,151,173,175,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,199,153,142,158,162,162],
[156,0,192,170,159,168,197,183],
[141,148,0,145,132,160,148,170],
[187,170,195,0,171,161,186,171],
[198,181,208,169,0,174,187,178],
[182,172,180,179,166,0,177,205],
[178,143,192,154,153,163,0,180],
[178,157,170,169,162,135,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,200,166,163,160,176,179],
[168,0,185,168,166,167,156,194],
[140,155,0,157,155,150,131,157],
[174,172,183,0,165,161,156,186],
[177,174,185,175,0,150,160,173],
[180,173,190,179,190,0,158,183],
[164,184,209,184,180,182,0,178],
[161,146,183,154,167,157,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,193,200,182,176,187,167],
[170,0,176,197,221,157,195,175],
[147,164,0,164,160,186,144,153],
[140,143,176,0,209,187,165,154],
[158,119,180,131,0,167,140,133],
[164,183,154,153,173,0,166,155],
[153,145,196,175,200,174,0,167],
[173,165,187,186,207,185,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,156,166,185,170,164,163],
[168,0,164,181,154,177,162,171],
[184,176,0,164,186,175,180,166],
[174,159,176,0,168,144,139,159],
[155,186,154,172,0,156,157,154],
[170,163,165,196,184,0,166,164],
[176,178,160,201,183,174,0,164],
[177,169,174,181,186,176,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,168,184,162,177,179,179],
[186,0,198,158,169,192,195,184],
[172,142,0,161,170,192,187,182],
[156,182,179,0,167,168,187,166],
[178,171,170,173,0,161,186,193],
[163,148,148,172,179,0,184,183],
[161,145,153,153,154,156,0,164],
[161,156,158,174,147,157,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,181,157,145,131,200,161],
[162,0,214,214,151,232,176,181],
[159,126,0,167,152,152,180,147],
[183,126,173,0,136,208,171,176],
[195,189,188,204,0,170,185,176],
[209,108,188,132,170,0,180,138],
[140,164,160,169,155,160,0,152],
[179,159,193,164,164,202,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,172,142,176,153,173,194],
[152,0,175,175,192,182,194,198],
[168,165,0,164,197,146,181,195],
[198,165,176,0,203,185,194,202],
[164,148,143,137,0,120,152,177],
[187,158,194,155,220,0,171,215],
[167,146,159,146,188,169,0,179],
[146,142,145,138,163,125,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,170,159,194,166,156,159],
[160,0,163,156,169,151,152,162],
[170,177,0,154,168,146,143,173],
[181,184,186,0,174,171,179,161],
[146,171,172,166,0,164,149,159],
[174,189,194,169,176,0,187,174],
[184,188,197,161,191,153,0,175],
[181,178,167,179,181,166,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,146,177,171,148,159,171],
[177,0,186,166,184,160,166,169],
[194,154,0,162,177,158,164,182],
[163,174,178,0,173,168,156,163],
[169,156,163,167,0,168,153,144],
[192,180,182,172,172,0,179,170],
[181,174,176,184,187,161,0,173],
[169,171,158,177,196,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,175,168,179,184,174,168],
[163,0,165,167,203,174,168,186],
[165,175,0,139,153,177,159,150],
[172,173,201,0,168,178,171,179],
[161,137,187,172,0,177,145,163],
[156,166,163,162,163,0,153,148],
[166,172,181,169,195,187,0,162],
[172,154,190,161,177,192,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,175,172,171,165,154,159],
[181,0,173,153,171,172,158,159],
[165,167,0,186,158,140,185,168],
[168,187,154,0,152,191,183,174],
[169,169,182,188,0,198,179,153],
[175,168,200,149,142,0,181,159],
[186,182,155,157,161,159,0,176],
[181,181,172,166,187,181,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,157,162,166,161,156,178],
[170,0,160,160,170,174,165,158],
[183,180,0,159,170,190,183,190],
[178,180,181,0,169,182,174,169],
[174,170,170,171,0,169,155,170],
[179,166,150,158,171,0,147,175],
[184,175,157,166,185,193,0,185],
[162,182,150,171,170,165,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,165,169,145,168,174,175],
[171,0,162,178,156,174,186,179],
[175,178,0,167,168,188,177,170],
[171,162,173,0,166,175,189,171],
[195,184,172,174,0,184,190,165],
[172,166,152,165,156,0,180,166],
[166,154,163,151,150,160,0,151],
[165,161,170,169,175,174,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,150,145,152,146,166,154],
[181,0,170,166,174,178,178,162],
[190,170,0,145,172,157,163,164],
[195,174,195,0,161,156,188,162],
[188,166,168,179,0,165,184,164],
[194,162,183,184,175,0,169,175],
[174,162,177,152,156,171,0,167],
[186,178,176,178,176,165,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,186,173,160,160,147,177],
[191,0,188,175,168,184,147,178],
[154,152,0,156,161,176,159,171],
[167,165,184,0,159,170,154,178],
[180,172,179,181,0,171,164,181],
[180,156,164,170,169,0,174,194],
[193,193,181,186,176,166,0,199],
[163,162,169,162,159,146,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,161,165,161,176,161,179],
[173,0,181,161,168,185,169,173],
[179,159,0,174,172,186,170,179],
[175,179,166,0,174,180,171,172],
[179,172,168,166,0,180,175,165],
[164,155,154,160,160,0,164,163],
[179,171,170,169,165,176,0,185],
[161,167,161,168,175,177,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,147,153,154,149,153,168],
[181,0,166,174,178,164,165,179],
[193,174,0,160,184,170,173,189],
[187,166,180,0,181,165,169,181],
[186,162,156,159,0,164,155,166],
[191,176,170,175,176,0,174,178],
[187,175,167,171,185,166,0,189],
[172,161,151,159,174,162,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,120,153,118,114,107,104],
[240,0,192,239,233,176,167,196],
[220,148,0,188,164,179,139,149],
[187,101,152,0,135,134,113,122],
[222,107,176,205,0,141,115,163],
[226,164,161,206,199,0,186,137],
[233,173,201,227,225,154,0,265],
[236,144,191,218,177,203,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,160,155,178,171,163,158],
[155,0,152,155,168,160,155,149],
[180,188,0,163,186,178,179,176],
[185,185,177,0,182,181,171,162],
[162,172,154,158,0,158,171,157],
[169,180,162,159,182,0,160,152],
[177,185,161,169,169,180,0,172],
[182,191,164,178,183,188,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,188,183,135,211,167,152],
[172,0,190,193,129,225,165,141],
[152,150,0,151,115,157,104,144],
[157,147,189,0,169,218,195,174],
[205,211,225,171,0,243,173,155],
[129,115,183,122,97,0,110,93],
[173,175,236,145,167,230,0,164],
[188,199,196,166,185,247,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,163,173,184,173,181,178],
[165,0,173,146,150,166,169,166],
[177,167,0,175,159,169,164,173],
[167,194,165,0,179,146,190,179],
[156,190,181,161,0,181,173,175],
[167,174,171,194,159,0,176,179],
[159,171,176,150,167,164,0,165],
[162,174,167,161,165,161,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,167,148,159,165,152,131],
[182,0,180,166,173,202,184,158],
[173,160,0,149,153,154,152,174],
[192,174,191,0,181,190,158,158],
[181,167,187,159,0,172,143,157],
[175,138,186,150,168,0,170,156],
[188,156,188,182,197,170,0,165],
[209,182,166,182,183,184,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,184,169,182,201,192,172],
[154,0,164,152,174,177,167,157],
[156,176,0,162,164,186,175,164],
[171,188,178,0,163,192,177,177],
[158,166,176,177,0,187,163,168],
[139,163,154,148,153,0,160,144],
[148,173,165,163,177,180,0,176],
[168,183,176,163,172,196,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,171,181,170,169,183,173],
[155,0,164,181,167,174,180,181],
[169,176,0,175,165,178,170,162],
[159,159,165,0,161,158,177,163],
[170,173,175,179,0,185,188,180],
[171,166,162,182,155,0,170,164],
[157,160,170,163,152,170,0,161],
[167,159,178,177,160,176,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,168,168,152,161,171,181],
[167,0,248,170,229,106,194,240],
[172,92,0,95,164,129,115,171],
[172,170,245,0,239,178,251,204],
[188,111,176,101,0,157,172,187],
[179,234,211,162,183,0,201,245],
[169,146,225,89,168,139,0,191],
[159,100,169,136,153,95,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,202,177,188,167,182,167],
[169,0,212,199,186,191,196,199],
[138,128,0,167,146,151,138,156],
[163,141,173,0,170,181,181,170],
[152,154,194,170,0,179,182,183],
[173,149,189,159,161,0,168,184],
[158,144,202,159,158,172,0,192],
[173,141,184,170,157,156,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,127,164,155,181,147,134],
[176,0,135,135,136,156,138,129],
[213,205,0,176,140,193,153,171],
[176,205,164,0,148,166,152,147],
[185,204,200,192,0,179,187,156],
[159,184,147,174,161,0,129,133],
[193,202,187,188,153,211,0,169],
[206,211,169,193,184,207,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,154,172,173,178,175,167],
[170,0,182,168,160,166,157,173],
[186,158,0,173,151,175,161,188],
[168,172,167,0,161,186,165,186],
[167,180,189,179,0,183,201,188],
[162,174,165,154,157,0,183,156],
[165,183,179,175,139,157,0,159],
[173,167,152,154,152,184,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,191,179,177,179,159,176],
[183,0,173,181,185,185,167,180],
[149,167,0,169,163,172,165,172],
[161,159,171,0,170,179,167,177],
[163,155,177,170,0,166,171,174],
[161,155,168,161,174,0,163,170],
[181,173,175,173,169,177,0,175],
[164,160,168,163,166,170,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,179,167,178,186,183,189],
[152,0,154,146,167,165,158,164],
[161,186,0,180,181,175,190,189],
[173,194,160,0,174,180,178,182],
[162,173,159,166,0,163,161,159],
[154,175,165,160,177,0,167,183],
[157,182,150,162,179,173,0,174],
[151,176,151,158,181,157,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,187,175,182,192,177,183],
[178,0,167,167,166,169,175,182],
[153,173,0,179,164,187,165,180],
[165,173,161,0,183,195,171,166],
[158,174,176,157,0,164,173,172],
[148,171,153,145,176,0,189,167],
[163,165,175,169,167,151,0,188],
[157,158,160,174,168,173,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,157,174,180,170,161,186],
[154,0,161,178,177,146,165,175],
[183,179,0,184,188,189,159,181],
[166,162,156,0,167,156,151,182],
[160,163,152,173,0,151,159,184],
[170,194,151,184,189,0,182,204],
[179,175,181,189,181,158,0,200],
[154,165,159,158,156,136,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,170,178,173,178,197,175],
[171,0,175,179,169,186,187,180],
[170,165,0,172,158,182,176,169],
[162,161,168,0,165,193,180,180],
[167,171,182,175,0,180,185,167],
[162,154,158,147,160,0,161,163],
[143,153,164,160,155,179,0,163],
[165,160,171,160,173,177,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,158,174,171,180,172,173],
[177,0,162,173,164,176,180,176],
[182,178,0,175,165,175,182,164],
[166,167,165,0,167,170,187,171],
[169,176,175,173,0,169,181,173],
[160,164,165,170,171,0,177,169],
[168,160,158,153,159,163,0,173],
[167,164,176,169,167,171,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,167,158,171,163,168,179],
[168,0,160,179,172,182,177,179],
[173,180,0,169,171,174,174,169],
[182,161,171,0,179,160,178,165],
[169,168,169,161,0,176,172,168],
[177,158,166,180,164,0,165,171],
[172,163,166,162,168,175,0,168],
[161,161,171,175,172,169,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,177,149,170,183,184,173],
[170,0,174,182,157,154,141,201],
[163,166,0,151,162,159,171,166],
[191,158,189,0,180,179,157,180],
[170,183,178,160,0,163,211,183],
[157,186,181,161,177,0,182,171],
[156,199,169,183,129,158,0,181],
[167,139,174,160,157,169,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,180,162,163,135,148,163],
[124,0,147,137,104,76,123,69],
[160,193,0,150,158,160,105,150],
[178,203,190,0,181,167,124,162],
[177,236,182,159,0,141,179,185],
[205,264,180,173,199,0,149,207],
[192,217,235,216,161,191,0,191],
[177,271,190,178,155,133,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,178,162,178,171,175,189],
[185,0,168,146,161,171,182,182],
[162,172,0,170,175,161,172,176],
[178,194,170,0,165,160,167,161],
[162,179,165,175,0,175,171,165],
[169,169,179,180,165,0,157,189],
[165,158,168,173,169,183,0,169],
[151,158,164,179,175,151,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,184,190,199,186,170,196],
[160,0,147,179,180,159,145,173],
[156,193,0,183,182,166,149,173],
[150,161,157,0,162,157,150,151],
[141,160,158,178,0,169,163,153],
[154,181,174,183,171,0,168,171],
[170,195,191,190,177,172,0,174],
[144,167,167,189,187,169,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,274,161,306,134,255,297],
[187,0,220,196,212,168,206,219],
[66,120,0,75,156,55,173,151],
[179,144,265,0,287,142,174,217],
[34,128,184,53,0,53,132,214],
[206,172,285,198,287,0,166,209],
[85,134,167,166,208,174,0,183],
[43,121,189,123,126,131,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,150,135,163,154,151,163],
[203,0,165,190,207,181,212,187],
[190,175,0,192,206,165,190,156],
[205,150,148,0,184,177,214,150],
[177,133,134,156,0,147,191,136],
[186,159,175,163,193,0,194,177],
[189,128,150,126,149,146,0,166],
[177,153,184,190,204,163,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,161,161,172,180,172,186],
[161,0,146,164,159,178,169,178],
[179,194,0,171,167,191,184,189],
[179,176,169,0,169,186,184,189],
[168,181,173,171,0,155,188,180],
[160,162,149,154,185,0,160,183],
[168,171,156,156,152,180,0,191],
[154,162,151,151,160,157,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,162,158,157,149,181,150],
[185,0,182,168,168,173,177,163],
[178,158,0,176,163,156,161,172],
[182,172,164,0,183,168,190,182],
[183,172,177,157,0,166,176,166],
[191,167,184,172,174,0,187,178],
[159,163,179,150,164,153,0,157],
[190,177,168,158,174,162,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,168,181,191,183,189,192],
[154,0,157,156,169,168,159,180],
[172,183,0,180,186,174,165,181],
[159,184,160,0,184,169,169,184],
[149,171,154,156,0,162,169,175],
[157,172,166,171,178,0,162,165],
[151,181,175,171,171,178,0,180],
[148,160,159,156,165,175,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,192,176,175,204,200,168],
[173,0,208,164,193,185,202,171],
[148,132,0,154,165,163,172,150],
[164,176,186,0,153,186,182,153],
[165,147,175,187,0,191,200,173],
[136,155,177,154,149,0,174,162],
[140,138,168,158,140,166,0,118],
[172,169,190,187,167,178,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,186,188,178,176,222,177],
[187,0,195,188,184,139,187,197],
[154,145,0,170,171,169,203,203],
[152,152,170,0,166,150,192,175],
[162,156,169,174,0,140,170,146],
[164,201,171,190,200,0,168,183],
[118,153,137,148,170,172,0,139],
[163,143,137,165,194,157,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,184,157,123,138,124,101],
[169,0,183,227,151,165,148,152],
[156,157,0,192,165,155,167,103],
[183,113,148,0,114,144,114,106],
[217,189,175,226,0,163,167,114],
[202,175,185,196,177,0,133,208],
[216,192,173,226,173,207,0,151],
[239,188,237,234,226,132,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,183,163,172,197,213,150],
[160,0,148,123,129,160,177,171],
[157,192,0,170,167,190,185,188],
[177,217,170,0,150,218,226,211],
[168,211,173,190,0,177,186,184],
[143,180,150,122,163,0,163,155],
[127,163,155,114,154,177,0,167],
[190,169,152,129,156,185,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,167,171,180,166,153,159],
[162,0,173,173,182,160,160,176],
[173,167,0,167,169,162,153,151],
[169,167,173,0,180,169,170,176],
[160,158,171,160,0,166,152,165],
[174,180,178,171,174,0,160,159],
[187,180,187,170,188,180,0,175],
[181,164,189,164,175,181,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,147,159,151,154,156,151],
[158,0,181,207,155,188,193,193],
[193,159,0,201,167,184,185,153],
[181,133,139,0,115,169,161,139],
[189,185,173,225,0,163,188,169],
[186,152,156,171,177,0,163,155],
[184,147,155,179,152,177,0,152],
[189,147,187,201,171,185,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,162,180,174,161,157,170],
[165,0,160,173,166,162,163,155],
[178,180,0,185,175,175,170,168],
[160,167,155,0,158,165,153,144],
[166,174,165,182,0,167,165,162],
[179,178,165,175,173,0,160,173],
[183,177,170,187,175,180,0,177],
[170,185,172,196,178,167,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,173,173,181,164,169,179],
[169,0,170,161,184,170,158,173],
[167,170,0,161,177,169,158,179],
[167,179,179,0,187,174,164,183],
[159,156,163,153,0,172,160,167],
[176,170,171,166,168,0,174,168],
[171,182,182,176,180,166,0,183],
[161,167,161,157,173,172,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,164,187,174,167,177,150],
[188,0,172,182,173,166,175,161],
[176,168,0,175,165,168,180,143],
[153,158,165,0,152,160,172,153],
[166,167,175,188,0,161,175,175],
[173,174,172,180,179,0,179,162],
[163,165,160,168,165,161,0,156],
[190,179,197,187,165,178,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,181,143,172,183,165,152],
[158,0,178,175,170,165,168,149],
[159,162,0,161,153,162,143,162],
[197,165,179,0,181,170,147,181],
[168,170,187,159,0,164,180,183],
[157,175,178,170,176,0,176,174],
[175,172,197,193,160,164,0,183],
[188,191,178,159,157,166,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,174,178,182,189,167,181],
[153,0,177,169,155,163,155,172],
[166,163,0,183,145,156,146,160],
[162,171,157,0,156,159,156,163],
[158,185,195,184,0,176,177,179],
[151,177,184,181,164,0,162,172],
[173,185,194,184,163,178,0,187],
[159,168,180,177,161,168,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,184,155,161,181,180,167],
[179,0,189,163,168,173,150,197],
[156,151,0,150,161,153,164,151],
[185,177,190,0,174,185,164,197],
[179,172,179,166,0,173,176,200],
[159,167,187,155,167,0,183,188],
[160,190,176,176,164,157,0,185],
[173,143,189,143,140,152,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,163,169,185,160,160,154],
[181,0,157,177,186,168,170,152],
[177,183,0,171,183,158,155,165],
[171,163,169,0,177,162,154,157],
[155,154,157,163,0,143,148,150],
[180,172,182,178,197,0,168,169],
[180,170,185,186,192,172,0,171],
[186,188,175,183,190,171,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,171,160,170,167,156,168],
[160,0,160,156,163,163,151,169],
[169,180,0,164,181,176,163,177],
[180,184,176,0,177,182,170,174],
[170,177,159,163,0,162,152,161],
[173,177,164,158,178,0,158,168],
[184,189,177,170,188,182,0,184],
[172,171,163,166,179,172,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,172,161,173,168,159,179],
[189,0,166,167,180,191,159,180],
[168,174,0,179,179,169,151,176],
[179,173,161,0,167,181,170,188],
[167,160,161,173,0,186,164,175],
[172,149,171,159,154,0,158,172],
[181,181,189,170,176,182,0,192],
[161,160,164,152,165,168,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,177,167,165,175,158,191],
[193,0,185,193,173,191,170,191],
[163,155,0,176,155,160,162,184],
[173,147,164,0,149,165,147,180],
[175,167,185,191,0,187,158,186],
[165,149,180,175,153,0,167,174],
[182,170,178,193,182,173,0,191],
[149,149,156,160,154,166,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,168,166,171,181,169,173],
[187,0,180,164,174,181,178,161],
[172,160,0,163,185,176,192,182],
[174,176,177,0,135,194,201,166],
[169,166,155,205,0,176,158,177],
[159,159,164,146,164,0,163,159],
[171,162,148,139,182,177,0,157],
[167,179,158,174,163,181,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,171,160,168,175,171,188],
[162,0,167,166,166,162,166,174],
[169,173,0,173,177,171,161,182],
[180,174,167,0,170,168,178,176],
[172,174,163,170,0,176,164,188],
[165,178,169,172,164,0,175,175],
[169,174,179,162,176,165,0,193],
[152,166,158,164,152,165,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,167,143,113,140,192,158],
[202,0,161,185,132,197,191,169],
[173,179,0,168,171,148,221,150],
[197,155,172,0,131,165,188,153],
[227,208,169,209,0,228,255,199],
[200,143,192,175,112,0,184,132],
[148,149,119,152,85,156,0,125],
[182,171,190,187,141,208,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,198,203,186,154,178,231],
[151,0,189,184,147,180,186,146],
[142,151,0,152,157,125,189,162],
[137,156,188,0,158,131,166,154],
[154,193,183,182,0,145,186,181],
[186,160,215,209,195,0,178,180],
[162,154,151,174,154,162,0,177],
[109,194,178,186,159,160,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,158,162,179,210,173,174],
[178,0,167,158,163,180,184,164],
[182,173,0,174,165,180,188,179],
[178,182,166,0,176,190,181,174],
[161,177,175,164,0,160,167,194],
[130,160,160,150,180,0,151,170],
[167,156,152,159,173,189,0,192],
[166,176,161,166,146,170,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,153,197,181,204,174,191],
[155,0,150,143,205,144,196,202],
[187,190,0,178,159,127,146,204],
[143,197,162,0,147,167,165,170],
[159,135,181,193,0,173,176,183],
[136,196,213,173,167,0,202,185],
[166,144,194,175,164,138,0,205],
[149,138,136,170,157,155,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,183,173,173,179,170,172],
[192,0,165,130,183,198,171,176],
[157,175,0,180,188,167,154,189],
[167,210,160,0,181,187,184,168],
[167,157,152,159,0,160,166,187],
[161,142,173,153,180,0,168,173],
[170,169,186,156,174,172,0,179],
[168,164,151,172,153,167,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,170,186,196,180,189,188],
[124,0,132,135,133,128,143,138],
[170,208,0,183,193,188,201,175],
[154,205,157,0,171,157,183,164],
[144,207,147,169,0,163,187,145],
[160,212,152,183,177,0,185,180],
[151,197,139,157,153,155,0,155],
[152,202,165,176,195,160,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,150,144,154,154,138,144],
[190,0,179,166,169,162,160,160],
[190,161,0,159,167,164,148,150],
[196,174,181,0,177,168,161,177],
[186,171,173,163,0,167,169,162],
[186,178,176,172,173,0,170,161],
[202,180,192,179,171,170,0,174],
[196,180,190,163,178,179,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,166,189,149,149,156,174],
[177,0,183,200,210,170,189,196],
[174,157,0,201,186,175,167,186],
[151,140,139,0,141,143,136,150],
[191,130,154,199,0,153,172,175],
[191,170,165,197,187,0,177,187],
[184,151,173,204,168,163,0,193],
[166,144,154,190,165,153,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,197,179,146,153,162,169],
[165,0,156,148,150,144,155,151],
[143,184,0,194,174,157,153,168],
[161,192,146,0,175,164,147,184],
[194,190,166,165,0,171,172,172],
[187,196,183,176,169,0,165,181],
[178,185,187,193,168,175,0,186],
[171,189,172,156,168,159,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,167,178,167,170,161,171],
[160,0,173,173,171,150,155,165],
[173,167,0,172,171,160,164,164],
[162,167,168,0,152,155,161,160],
[173,169,169,188,0,168,172,168],
[170,190,180,185,172,0,164,187],
[179,185,176,179,168,176,0,169],
[169,175,176,180,172,153,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,174,171,162,166,171,153],
[171,0,164,153,149,161,150,144],
[166,176,0,149,166,178,157,170],
[169,187,191,0,167,175,168,164],
[178,191,174,173,0,164,162,178],
[174,179,162,165,176,0,163,172],
[169,190,183,172,178,177,0,177],
[187,196,170,176,162,168,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,153,165,151,150,157,161],
[185,0,172,184,183,161,181,182],
[187,168,0,196,180,184,179,192],
[175,156,144,0,171,157,164,167],
[189,157,160,169,0,167,178,178],
[190,179,156,183,173,0,177,176],
[183,159,161,176,162,163,0,168],
[179,158,148,173,162,164,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,162,184,158,154,163,166],
[190,0,172,160,189,151,175,185],
[178,168,0,185,161,174,162,182],
[156,180,155,0,167,174,154,172],
[182,151,179,173,0,154,171,167],
[186,189,166,166,186,0,171,175],
[177,165,178,186,169,169,0,193],
[174,155,158,168,173,165,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,185,195,165,185,163,162],
[166,0,175,179,160,162,160,162],
[155,165,0,178,170,189,171,173],
[145,161,162,0,160,168,160,165],
[175,180,170,180,0,186,176,166],
[155,178,151,172,154,0,154,155],
[177,180,169,180,164,186,0,173],
[178,178,167,175,174,185,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,196,144,166,199,144,165],
[183,0,189,161,167,189,160,176],
[144,151,0,140,129,197,136,159],
[196,179,200,0,200,216,155,200],
[174,173,211,140,0,217,184,191],
[141,151,143,124,123,0,141,151],
[196,180,204,185,156,199,0,167],
[175,164,181,140,149,189,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,184,187,170,178,175,173],
[165,0,175,177,170,177,160,156],
[156,165,0,184,155,158,160,160],
[153,163,156,0,151,165,156,158],
[170,170,185,189,0,184,168,168],
[162,163,182,175,156,0,159,163],
[165,180,180,184,172,181,0,167],
[167,184,180,182,172,177,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,179,153,173,171,184,168],
[183,0,184,167,170,172,199,170],
[161,156,0,167,170,162,167,163],
[187,173,173,0,166,161,170,159],
[167,170,170,174,0,181,193,183],
[169,168,178,179,159,0,190,167],
[156,141,173,170,147,150,0,183],
[172,170,177,181,157,173,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,168,158,175,165,166,154],
[189,0,170,176,176,180,176,173],
[172,170,0,164,179,185,172,177],
[182,164,176,0,176,176,176,156],
[165,164,161,164,0,162,143,166],
[175,160,155,164,178,0,157,178],
[174,164,168,164,197,183,0,177],
[186,167,163,184,174,162,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,154,140,175,164,175,175],
[174,0,164,169,187,168,187,169],
[186,176,0,157,176,153,173,176],
[200,171,183,0,184,159,173,195],
[165,153,164,156,0,173,179,184],
[176,172,187,181,167,0,172,186],
[165,153,167,167,161,168,0,171],
[165,171,164,145,156,154,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,173,181,166,166,191,145],
[149,0,143,175,158,167,183,168],
[167,197,0,200,177,190,164,158],
[159,165,140,0,160,164,165,140],
[174,182,163,180,0,161,182,153],
[174,173,150,176,179,0,154,183],
[149,157,176,175,158,186,0,151],
[195,172,182,200,187,157,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,155,158,176,177,169,151],
[202,0,196,167,192,173,189,154],
[185,144,0,166,186,176,194,177],
[182,173,174,0,180,182,170,174],
[164,148,154,160,0,169,173,150],
[163,167,164,158,171,0,183,165],
[171,151,146,170,167,157,0,149],
[189,186,163,166,190,175,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,174,161,200,193,191,204],
[143,0,168,146,210,153,159,173],
[166,172,0,166,188,184,186,208],
[179,194,174,0,205,170,163,192],
[140,130,152,135,0,140,133,144],
[147,187,156,170,200,0,160,184],
[149,181,154,177,207,180,0,212],
[136,167,132,148,196,156,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,176,167,151,160,174,176],
[184,0,178,177,171,164,177,185],
[164,162,0,155,156,162,156,173],
[173,163,185,0,176,170,179,173],
[189,169,184,164,0,170,176,173],
[180,176,178,170,170,0,183,176],
[166,163,184,161,164,157,0,168],
[164,155,167,167,167,164,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,170,174,174,169,175,185],
[148,0,176,187,185,181,167,194],
[170,164,0,199,182,175,179,200],
[166,153,141,0,150,188,171,173],
[166,155,158,190,0,171,177,183],
[171,159,165,152,169,0,166,181],
[165,173,161,169,163,174,0,175],
[155,146,140,167,157,159,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,143,157,173,162,171,139],
[160,0,147,164,165,149,164,149],
[197,193,0,186,168,177,171,169],
[183,176,154,0,172,156,188,153],
[167,175,172,168,0,148,164,160],
[178,191,163,184,192,0,180,174],
[169,176,169,152,176,160,0,160],
[201,191,171,187,180,166,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,197,167,188,193,197,181],
[157,0,178,166,164,161,190,183],
[143,162,0,162,194,182,202,183],
[173,174,178,0,160,181,168,162],
[152,176,146,180,0,162,167,165],
[147,179,158,159,178,0,164,160],
[143,150,138,172,173,176,0,145],
[159,157,157,178,175,180,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,173,167,166,170,151,169],
[164,0,174,168,182,148,153,174],
[167,166,0,164,185,150,144,170],
[173,172,176,0,176,153,162,180],
[174,158,155,164,0,154,142,166],
[170,192,190,187,186,0,172,182],
[189,187,196,178,198,168,0,190],
[171,166,170,160,174,158,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,173,182,186,190,163,166],
[169,0,163,175,179,180,177,183],
[167,177,0,176,169,161,178,169],
[158,165,164,0,181,169,168,161],
[154,161,171,159,0,166,173,160],
[150,160,179,171,174,0,164,170],
[177,163,162,172,167,176,0,162],
[174,157,171,179,180,170,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,163,166,156,160,164,172],
[163,0,168,183,163,185,171,182],
[177,172,0,176,170,169,163,182],
[174,157,164,0,166,166,160,174],
[184,177,170,174,0,151,171,182],
[180,155,171,174,189,0,188,171],
[176,169,177,180,169,152,0,190],
[168,158,158,166,158,169,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,164,145,156,156,156,157],
[168,0,165,155,163,172,172,155],
[176,175,0,155,175,180,170,167],
[195,185,185,0,180,177,170,187],
[184,177,165,160,0,162,170,164],
[184,168,160,163,178,0,159,158],
[184,168,170,170,170,181,0,164],
[183,185,173,153,176,182,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,189,171,177,161,166,181],
[177,0,168,209,189,186,173,186],
[151,172,0,175,183,165,156,160],
[169,131,165,0,188,164,155,162],
[163,151,157,152,0,155,136,171],
[179,154,175,176,185,0,142,167],
[174,167,184,185,204,198,0,190],
[159,154,180,178,169,173,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,182,171,177,186,165,154],
[151,0,163,146,152,161,165,143],
[158,177,0,150,169,164,179,162],
[169,194,190,0,179,176,185,164],
[163,188,171,161,0,173,179,170],
[154,179,176,164,167,0,175,153],
[175,175,161,155,161,165,0,164],
[186,197,178,176,170,187,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,164,191,159,183,177,176],
[158,0,164,178,177,178,166,168],
[176,176,0,203,176,192,186,160],
[149,162,137,0,195,183,155,150],
[181,163,164,145,0,180,154,157],
[157,162,148,157,160,0,175,139],
[163,174,154,185,186,165,0,162],
[164,172,180,190,183,201,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,180,178,177,168,157,160],
[160,0,161,163,165,169,139,158],
[160,179,0,187,177,171,170,170],
[162,177,153,0,178,170,154,168],
[163,175,163,162,0,155,149,143],
[172,171,169,170,185,0,171,167],
[183,201,170,186,191,169,0,171],
[180,182,170,172,197,173,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,159,164,157,174,158,182],
[200,0,169,181,177,183,168,193],
[181,171,0,182,158,179,163,179],
[176,159,158,0,158,157,153,182],
[183,163,182,182,0,181,174,181],
[166,157,161,183,159,0,168,174],
[182,172,177,187,166,172,0,184],
[158,147,161,158,159,166,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,157,156,153,125,157,136],
[179,0,158,155,148,151,166,144],
[183,182,0,156,162,162,179,158],
[184,185,184,0,157,174,188,182],
[187,192,178,183,0,157,182,173],
[215,189,178,166,183,0,184,186],
[183,174,161,152,158,156,0,148],
[204,196,182,158,167,154,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,165,194,166,178,158,178],
[159,0,157,162,165,178,159,181],
[175,183,0,185,164,186,162,198],
[146,178,155,0,159,159,151,181],
[174,175,176,181,0,185,170,171],
[162,162,154,181,155,0,149,177],
[182,181,178,189,170,191,0,193],
[162,159,142,159,169,163,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,172,177,177,160,191,171],
[197,0,172,162,191,199,219,173],
[168,168,0,169,182,186,202,167],
[163,178,171,0,166,178,211,181],
[163,149,158,174,0,171,198,160],
[180,141,154,162,169,0,193,150],
[149,121,138,129,142,147,0,127],
[169,167,173,159,180,190,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,174,162,143,177,198,186],
[175,0,177,155,170,188,202,179],
[166,163,0,163,172,164,188,153],
[178,185,177,0,154,176,191,176],
[197,170,168,186,0,176,198,182],
[163,152,176,164,164,0,194,170],
[142,138,152,149,142,146,0,155],
[154,161,187,164,158,170,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,186,185,152,180,163,159],
[193,0,172,199,165,185,200,190],
[154,168,0,188,185,186,199,173],
[155,141,152,0,133,155,145,145],
[188,175,155,207,0,199,172,169],
[160,155,154,185,141,0,166,168],
[177,140,141,195,168,174,0,146],
[181,150,167,195,171,172,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,174,183,163,155,158,159],
[178,0,182,189,184,169,181,173],
[166,158,0,174,160,156,160,155],
[157,151,166,0,155,156,160,170],
[177,156,180,185,0,144,161,175],
[185,171,184,184,196,0,166,183],
[182,159,180,180,179,174,0,185],
[181,167,185,170,165,157,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,148,132,164,178,173,174],
[189,0,180,179,177,195,159,184],
[192,160,0,166,194,197,181,184],
[208,161,174,0,163,203,171,174],
[176,163,146,177,0,189,185,164],
[162,145,143,137,151,0,157,152],
[167,181,159,169,155,183,0,152],
[166,156,156,166,176,188,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,163,170,174,149,156,184],
[183,0,167,183,174,173,183,193],
[177,173,0,182,169,155,166,183],
[170,157,158,0,179,176,170,187],
[166,166,171,161,0,166,164,189],
[191,167,185,164,174,0,177,200],
[184,157,174,170,176,163,0,167],
[156,147,157,153,151,140,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,167,182,163,173,175,177],
[165,0,187,185,172,181,188,175],
[173,153,0,171,161,173,185,167],
[158,155,169,0,174,164,173,170],
[177,168,179,166,0,176,187,173],
[167,159,167,176,164,0,177,171],
[165,152,155,167,153,163,0,173],
[163,165,173,170,167,169,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,175,162,180,172,172,158],
[167,0,165,156,150,128,156,147],
[165,175,0,164,163,161,175,160],
[178,184,176,0,185,175,164,160],
[160,190,177,155,0,158,175,140],
[168,212,179,165,182,0,172,174],
[168,184,165,176,165,168,0,144],
[182,193,180,180,200,166,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,158,130,139,188,164,170],
[141,0,150,114,160,109,133,149],
[182,190,0,163,182,192,202,201],
[210,226,177,0,133,172,177,175],
[201,180,158,207,0,187,167,164],
[152,231,148,168,153,0,154,179],
[176,207,138,163,173,186,0,136],
[170,191,139,165,176,161,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,187,166,186,212,164,219],
[182,0,167,175,184,201,221,233],
[153,173,0,157,160,179,204,223],
[174,165,183,0,154,149,177,192],
[154,156,180,186,0,196,185,187],
[128,139,161,191,144,0,200,177],
[176,119,136,163,155,140,0,203],
[121,107,117,148,153,163,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,178,176,174,177,189,178],
[184,0,176,159,167,164,182,173],
[162,164,0,169,170,153,178,161],
[164,181,171,0,174,173,182,169],
[166,173,170,166,0,161,196,177],
[163,176,187,167,179,0,203,184],
[151,158,162,158,144,137,0,161],
[162,167,179,171,163,156,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,177,189,172,169,172,164],
[182,0,175,194,198,170,159,198],
[163,165,0,161,170,164,162,166],
[151,146,179,0,159,156,132,161],
[168,142,170,181,0,164,161,158],
[171,170,176,184,176,0,140,170],
[168,181,178,208,179,200,0,186],
[176,142,174,179,182,170,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,140,183,169,181,183,160],
[156,0,155,195,155,159,180,155],
[200,185,0,185,189,167,185,172],
[157,145,155,0,141,176,151,155],
[171,185,151,199,0,156,173,163],
[159,181,173,164,184,0,162,171],
[157,160,155,189,167,178,0,170],
[180,185,168,185,177,169,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,188,187,172,179,183,180],
[175,0,179,181,167,182,165,165],
[152,161,0,180,165,174,174,155],
[153,159,160,0,158,179,159,162],
[168,173,175,182,0,197,170,172],
[161,158,166,161,143,0,177,167],
[157,175,166,181,170,163,0,163],
[160,175,185,178,168,173,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,164,164,166,174,168,170],
[155,0,170,155,160,166,158,167],
[176,170,0,153,166,176,167,158],
[176,185,187,0,170,180,168,178],
[174,180,174,170,0,166,184,182],
[166,174,164,160,174,0,174,182],
[172,182,173,172,156,166,0,176],
[170,173,182,162,158,158,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,169,182,179,207,199,191],
[155,0,176,177,171,200,165,164],
[171,164,0,186,158,188,166,160],
[158,163,154,0,166,182,154,172],
[161,169,182,174,0,192,175,177],
[133,140,152,158,148,0,143,133],
[141,175,174,186,165,197,0,165],
[149,176,180,168,163,207,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,169,166,179,172,178,176],
[167,0,161,169,168,183,169,171],
[171,179,0,161,181,181,167,164],
[174,171,179,0,174,189,176,154],
[161,172,159,166,0,175,163,161],
[168,157,159,151,165,0,162,162],
[162,171,173,164,177,178,0,169],
[164,169,176,186,179,178,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,168,148,171,168,156,148],
[171,0,165,157,180,172,171,161],
[172,175,0,187,171,154,193,155],
[192,183,153,0,163,154,178,163],
[169,160,169,177,0,149,173,175],
[172,168,186,186,191,0,164,159],
[184,169,147,162,167,176,0,178],
[192,179,185,177,165,181,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,164,158,160,171,182,168],
[176,0,175,163,174,165,174,166],
[176,165,0,179,171,172,162,168],
[182,177,161,0,176,171,170,162],
[180,166,169,164,0,160,164,176],
[169,175,168,169,180,0,176,182],
[158,166,178,170,176,164,0,168],
[172,174,172,178,164,158,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,183,181,166,180,186,222],
[145,0,159,205,162,151,211,240],
[157,181,0,153,147,149,218,245],
[159,135,187,0,155,179,199,243],
[174,178,193,185,0,140,176,211],
[160,189,191,161,200,0,219,245],
[154,129,122,141,164,121,0,194],
[118,100,95,97,129,95,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,164,188,188,181,176,182],
[169,0,172,171,185,153,177,157],
[176,168,0,173,172,151,173,160],
[152,169,167,0,166,164,166,174],
[152,155,168,174,0,156,154,177],
[159,187,189,176,184,0,181,174],
[164,163,167,174,186,159,0,168],
[158,183,180,166,163,166,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,164,187,176,184,173,178],
[161,0,149,166,158,164,174,163],
[176,191,0,159,178,179,176,181],
[153,174,181,0,182,173,160,160],
[164,182,162,158,0,183,159,174],
[156,176,161,167,157,0,157,183],
[167,166,164,180,181,183,0,174],
[162,177,159,180,166,157,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,157,167,145,139,147,139],
[189,0,170,169,171,147,167,183],
[183,170,0,170,150,148,168,191],
[173,171,170,0,152,145,155,164],
[195,169,190,188,0,175,175,191],
[201,193,192,195,165,0,206,193],
[193,173,172,185,165,134,0,181],
[201,157,149,176,149,147,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,187,173,164,177,176,167],
[169,0,194,189,175,164,177,166],
[153,146,0,171,156,159,168,174],
[167,151,169,0,159,155,179,171],
[176,165,184,181,0,176,165,183],
[163,176,181,185,164,0,166,174],
[164,163,172,161,175,174,0,157],
[173,174,166,169,157,166,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,150,153,155,149,165,150],
[178,0,160,167,171,166,176,171],
[190,180,0,158,175,178,187,177],
[187,173,182,0,165,169,174,169],
[185,169,165,175,0,179,176,182],
[191,174,162,171,161,0,173,183],
[175,164,153,166,164,167,0,167],
[190,169,163,171,158,157,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,160,141,145,143,175,173],
[181,0,182,190,192,167,132,185],
[180,158,0,169,176,166,182,192],
[199,150,171,0,167,155,166,210],
[195,148,164,173,0,181,200,197],
[197,173,174,185,159,0,190,202],
[165,208,158,174,140,150,0,198],
[167,155,148,130,143,138,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,175,186,147,170,170,173],
[166,0,146,188,165,166,148,166],
[165,194,0,215,162,185,159,183],
[154,152,125,0,158,160,133,162],
[193,175,178,182,0,170,158,164],
[170,174,155,180,170,0,147,144],
[170,192,181,207,182,193,0,194],
[167,174,157,178,176,196,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,191,156,177,174,188,199],
[139,0,199,155,134,155,160,171],
[149,141,0,136,124,167,157,156],
[184,185,204,0,160,171,189,200],
[163,206,216,180,0,169,199,192],
[166,185,173,169,171,0,170,174],
[152,180,183,151,141,170,0,181],
[141,169,184,140,148,166,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,188,165,178,182,207,190],
[151,0,160,176,155,159,167,184],
[152,180,0,175,188,182,181,175],
[175,164,165,0,158,159,171,174],
[162,185,152,182,0,186,187,169],
[158,181,158,181,154,0,164,166],
[133,173,159,169,153,176,0,172],
[150,156,165,166,171,174,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,164,167,160,161,169,177],
[171,0,169,169,165,173,180,169],
[176,171,0,170,159,177,169,154],
[173,171,170,0,171,169,178,182],
[180,175,181,169,0,165,183,174],
[179,167,163,171,175,0,172,175],
[171,160,171,162,157,168,0,166],
[163,171,186,158,166,165,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,157,171,170,159,170,165],
[175,0,170,165,174,164,157,165],
[183,170,0,167,166,167,152,169],
[169,175,173,0,179,173,163,174],
[170,166,174,161,0,170,168,171],
[181,176,173,167,170,0,172,167],
[170,183,188,177,172,168,0,172],
[175,175,171,166,169,173,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,195,199,200,184,181,154],
[214,0,184,218,198,170,187,175],
[145,156,0,168,142,164,174,141],
[141,122,172,0,174,146,182,144],
[140,142,198,166,0,163,159,156],
[156,170,176,194,177,0,193,159],
[159,153,166,158,181,147,0,170],
[186,165,199,196,184,181,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,172,184,157,164,172,190],
[163,0,168,187,174,187,174,194],
[168,172,0,200,162,190,151,198],
[156,153,140,0,140,156,139,174],
[183,166,178,200,0,155,159,207],
[176,153,150,184,185,0,167,208],
[168,166,189,201,181,173,0,193],
[150,146,142,166,133,132,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,196,159,189,173,166,182],
[181,0,206,151,162,175,150,179],
[144,134,0,153,146,140,136,168],
[181,189,187,0,168,201,178,201],
[151,178,194,172,0,157,155,184],
[167,165,200,139,183,0,148,174],
[174,190,204,162,185,192,0,189],
[158,161,172,139,156,166,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,205,238,128,200,184,150],
[157,0,125,164,139,141,156,153],
[135,215,0,212,120,198,185,152],
[102,176,128,0,118,77,135,124],
[212,201,220,222,0,179,162,174],
[140,199,142,263,161,0,220,121],
[156,184,155,205,178,120,0,146],
[190,187,188,216,166,219,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,190,191,197,204,180,179],
[177,0,158,188,187,187,137,182],
[150,182,0,201,162,190,149,181],
[149,152,139,0,157,162,145,171],
[143,153,178,183,0,181,130,165],
[136,153,150,178,159,0,140,176],
[160,203,191,195,210,200,0,195],
[161,158,159,169,175,164,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,136,216,187,140,208,176],
[233,0,186,196,184,198,217,160],
[204,154,0,247,174,202,214,187],
[124,144,93,0,151,101,155,201],
[153,156,166,189,0,137,162,155],
[200,142,138,239,203,0,199,161],
[132,123,126,185,178,141,0,129],
[164,180,153,139,185,179,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,188,193,161,275,229,223],
[109,0,118,126,111,154,208,129],
[152,222,0,149,188,227,262,197],
[147,214,191,0,169,228,248,193],
[179,229,152,171,0,222,222,175],
[65,186,113,112,118,0,181,145],
[111,132,78,92,118,159,0,116],
[117,211,143,147,165,195,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,171,146,173,157,164,160],
[169,0,164,160,181,167,165,157],
[169,176,0,156,182,158,171,173],
[194,180,184,0,177,164,176,173],
[167,159,158,163,0,153,153,165],
[183,173,182,176,187,0,173,167],
[176,175,169,164,187,167,0,175],
[180,183,167,167,175,173,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,188,177,175,166,169,175],
[178,0,174,180,175,176,164,178],
[152,166,0,162,161,166,164,162],
[163,160,178,0,170,156,174,178],
[165,165,179,170,0,168,181,169],
[174,164,174,184,172,0,163,179],
[171,176,176,166,159,177,0,178],
[165,162,178,162,171,161,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,185,184,185,177,177,184],
[170,0,178,193,189,164,171,198],
[155,162,0,169,174,171,160,173],
[156,147,171,0,183,158,155,183],
[155,151,166,157,0,175,163,183],
[163,176,169,182,165,0,169,171],
[163,169,180,185,177,171,0,197],
[156,142,167,157,157,169,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,164,167,166,164,171,176],
[189,0,175,179,193,167,187,184],
[176,165,0,180,187,172,189,182],
[173,161,160,0,156,169,166,175],
[174,147,153,184,0,160,170,169],
[176,173,168,171,180,0,172,191],
[169,153,151,174,170,168,0,174],
[164,156,158,165,171,149,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,200,178,203,185,193,182],
[189,0,204,169,182,187,183,174],
[140,136,0,144,144,164,137,166],
[162,171,196,0,214,201,190,215],
[137,158,196,126,0,148,153,155],
[155,153,176,139,192,0,148,159],
[147,157,203,150,187,192,0,182],
[158,166,174,125,185,181,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,149,130,165,158,190,136],
[177,0,165,112,171,187,147,131],
[191,175,0,142,198,161,171,173],
[210,228,198,0,197,221,172,167],
[175,169,142,143,0,206,166,162],
[182,153,179,119,134,0,180,138],
[150,193,169,168,174,160,0,176],
[204,209,167,173,178,202,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,159,163,159,169,168,175],
[185,0,178,180,160,182,196,191],
[181,162,0,171,167,170,168,167],
[177,160,169,0,174,187,168,176],
[181,180,173,166,0,194,173,170],
[171,158,170,153,146,0,167,167],
[172,144,172,172,167,173,0,170],
[165,149,173,164,170,173,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,158,148,157,177,182,169],
[176,0,163,153,153,184,181,166],
[182,177,0,167,142,169,197,172],
[192,187,173,0,192,181,198,170],
[183,187,198,148,0,177,203,176],
[163,156,171,159,163,0,178,165],
[158,159,143,142,137,162,0,141],
[171,174,168,170,164,175,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,159,160,156,161,141,169],
[162,0,164,173,149,155,170,167],
[181,176,0,177,163,198,172,168],
[180,167,163,0,149,157,162,162],
[184,191,177,191,0,182,174,164],
[179,185,142,183,158,0,159,153],
[199,170,168,178,166,181,0,188],
[171,173,172,178,176,187,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,171,170,162,192,161,179],
[167,0,182,171,179,170,160,188],
[169,158,0,157,177,165,163,163],
[170,169,183,0,187,192,188,177],
[178,161,163,153,0,166,157,176],
[148,170,175,148,174,0,165,167],
[179,180,177,152,183,175,0,172],
[161,152,177,163,164,173,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,169,195,177,181,195,186],
[174,0,170,196,191,197,197,194],
[171,170,0,179,176,187,175,204],
[145,144,161,0,150,176,160,171],
[163,149,164,190,0,209,181,195],
[159,143,153,164,131,0,163,179],
[145,143,165,180,159,177,0,173],
[154,146,136,169,145,161,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,185,214,168,176,194,202],
[173,0,175,189,156,138,216,174],
[155,165,0,197,165,139,183,166],
[126,151,143,0,122,120,137,130],
[172,184,175,218,0,170,188,191],
[164,202,201,220,170,0,183,194],
[146,124,157,203,152,157,0,160],
[138,166,174,210,149,146,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,160,179,169,161,179,171],
[185,0,185,183,157,159,187,180],
[180,155,0,180,157,167,172,156],
[161,157,160,0,162,175,177,167],
[171,183,183,178,0,161,174,174],
[179,181,173,165,179,0,190,180],
[161,153,168,163,166,150,0,158],
[169,160,184,173,166,160,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,158,160,170,162,169,174],
[181,0,151,170,176,162,182,177],
[182,189,0,174,183,164,164,185],
[180,170,166,0,177,180,176,173],
[170,164,157,163,0,172,178,176],
[178,178,176,160,168,0,171,176],
[171,158,176,164,162,169,0,180],
[166,163,155,167,164,164,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,188,174,171,183,195,187],
[174,0,204,172,185,200,174,170],
[152,136,0,144,145,153,150,145],
[166,168,196,0,178,184,196,153],
[169,155,195,162,0,180,178,171],
[157,140,187,156,160,0,159,165],
[145,166,190,144,162,181,0,188],
[153,170,195,187,169,175,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,166,173,169,169,165,163],
[162,0,162,157,159,161,155,160],
[174,178,0,163,177,179,164,173],
[167,183,177,0,169,170,160,169],
[171,181,163,171,0,172,176,179],
[171,179,161,170,168,0,169,165],
[175,185,176,180,164,171,0,180],
[177,180,167,171,161,175,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,162,175,169,167,187,153],
[159,0,154,153,173,168,186,156],
[178,186,0,173,187,161,190,171],
[165,187,167,0,180,168,179,164],
[171,167,153,160,0,168,172,173],
[173,172,179,172,172,0,186,162],
[153,154,150,161,168,154,0,147],
[187,184,169,176,167,178,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,161,174,163,167,180,172],
[179,0,160,184,178,167,165,167],
[179,180,0,193,175,168,196,168],
[166,156,147,0,155,160,170,170],
[177,162,165,185,0,175,188,164],
[173,173,172,180,165,0,178,171],
[160,175,144,170,152,162,0,159],
[168,173,172,170,176,169,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,166,179,175,166,175,175],
[178,0,171,183,177,173,160,167],
[174,169,0,172,176,169,173,173],
[161,157,168,0,164,169,160,162],
[165,163,164,176,0,171,161,181],
[174,167,171,171,169,0,158,176],
[165,180,167,180,179,182,0,173],
[165,173,167,178,159,164,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,175,187,182,172,193,169],
[175,0,160,142,126,120,136,175],
[165,180,0,166,138,173,179,169],
[153,198,174,0,143,155,178,191],
[158,214,202,197,0,186,189,215],
[168,220,167,185,154,0,197,180],
[147,204,161,162,151,143,0,160],
[171,165,171,149,125,160,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,153,132,140,158,150,156],
[209,0,158,172,180,167,155,163],
[187,182,0,157,183,169,140,179],
[208,168,183,0,184,194,174,181],
[200,160,157,156,0,190,161,152],
[182,173,171,146,150,0,166,155],
[190,185,200,166,179,174,0,186],
[184,177,161,159,188,185,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,139,198,146,161,169,176],
[160,0,125,185,171,104,122,131],
[201,215,0,231,184,141,177,138],
[142,155,109,0,152,101,125,103],
[194,169,156,188,0,137,181,109],
[179,236,199,239,203,0,210,164],
[171,218,163,215,159,130,0,135],
[164,209,202,237,231,176,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,170,185,178,170,175,172],
[157,0,154,171,167,171,163,159],
[170,186,0,166,164,179,169,168],
[155,169,174,0,177,170,157,167],
[162,173,176,163,0,171,162,164],
[170,169,161,170,169,0,169,159],
[165,177,171,183,178,171,0,183],
[168,181,172,173,176,181,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,167,167,170,161,178,171],
[162,0,152,156,164,153,159,158],
[173,188,0,167,181,167,174,174],
[173,184,173,0,193,173,167,181],
[170,176,159,147,0,156,162,171],
[179,187,173,167,184,0,185,175],
[162,181,166,173,178,155,0,166],
[169,182,166,159,169,165,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,157,172,178,167,187,174],
[171,0,168,168,171,163,170,173],
[183,172,0,166,176,173,174,170],
[168,172,174,0,166,161,180,179],
[162,169,164,174,0,170,169,172],
[173,177,167,179,170,0,176,176],
[153,170,166,160,171,164,0,172],
[166,167,170,161,168,164,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,178,168,152,176,150,159],
[172,0,180,177,157,157,144,161],
[162,160,0,166,138,149,145,135],
[172,163,174,0,154,145,157,137],
[188,183,202,186,0,178,169,182],
[164,183,191,195,162,0,164,168],
[190,196,195,183,171,176,0,158],
[181,179,205,203,158,172,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,193,187,175,156,173,199],
[175,0,192,182,179,166,164,205],
[147,148,0,173,152,140,170,170],
[153,158,167,0,168,162,160,174],
[165,161,188,172,0,177,175,184],
[184,174,200,178,163,0,185,197],
[167,176,170,180,165,155,0,205],
[141,135,170,166,156,143,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,169,156,170,153,195,176],
[164,0,163,161,167,162,172,192],
[171,177,0,172,162,178,173,201],
[184,179,168,0,180,175,188,210],
[170,173,178,160,0,171,178,180],
[187,178,162,165,169,0,191,196],
[145,168,167,152,162,149,0,183],
[164,148,139,130,160,144,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,169,191,159,166,175,173],
[164,0,181,188,197,166,172,182],
[171,159,0,192,171,172,146,168],
[149,152,148,0,173,140,172,167],
[181,143,169,167,0,154,152,155],
[174,174,168,200,186,0,167,171],
[165,168,194,168,188,173,0,178],
[167,158,172,173,185,169,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,171,170,170,172,165,176],
[161,0,156,185,159,162,174,190],
[169,184,0,191,172,179,168,187],
[170,155,149,0,144,161,152,171],
[170,181,168,196,0,180,172,187],
[168,178,161,179,160,0,171,174],
[175,166,172,188,168,169,0,176],
[164,150,153,169,153,166,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,154,174,156,171,170,176],
[179,0,145,177,188,175,167,196],
[186,195,0,190,173,164,194,200],
[166,163,150,0,168,169,157,175],
[184,152,167,172,0,172,173,190],
[169,165,176,171,168,0,176,183],
[170,173,146,183,167,164,0,200],
[164,144,140,165,150,157,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,181,191,172,172,167,170],
[161,0,167,177,175,175,165,178],
[159,173,0,171,168,184,167,182],
[149,163,169,0,181,165,177,174],
[168,165,172,159,0,157,172,165],
[168,165,156,175,183,0,174,174],
[173,175,173,163,168,166,0,169],
[170,162,158,166,175,166,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,153,163,155,169,170,157],
[176,0,154,162,169,160,182,151],
[187,186,0,159,183,170,196,179],
[177,178,181,0,176,160,188,171],
[185,171,157,164,0,168,189,162],
[171,180,170,180,172,0,185,156],
[170,158,144,152,151,155,0,133],
[183,189,161,169,178,184,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,174,168,168,166,167,156],
[183,0,190,171,169,171,182,191],
[166,150,0,166,153,153,171,160],
[172,169,174,0,167,172,177,173],
[172,171,187,173,0,168,176,170],
[174,169,187,168,172,0,180,178],
[173,158,169,163,164,160,0,170],
[184,149,180,167,170,162,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,199,164,166,172,146,165],
[179,0,205,188,180,167,150,175],
[141,135,0,145,139,139,124,144],
[176,152,195,0,157,161,155,153],
[174,160,201,183,0,182,171,170],
[168,173,201,179,158,0,145,175],
[194,190,216,185,169,195,0,189],
[175,165,196,187,170,165,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,178,188,179,187,192,164],
[148,0,168,161,155,175,168,161],
[162,172,0,175,179,190,174,174],
[152,179,165,0,165,176,166,156],
[161,185,161,175,0,179,172,164],
[153,165,150,164,161,0,172,147],
[148,172,166,174,168,168,0,159],
[176,179,166,184,176,193,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,173,178,167,184,172,185],
[166,0,184,163,176,171,156,139],
[167,156,0,174,157,157,162,150],
[162,177,166,0,164,147,171,161],
[173,164,183,176,0,166,162,168],
[156,169,183,193,174,0,182,165],
[168,184,178,169,178,158,0,164],
[155,201,190,179,172,175,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,172,150,168,154,200,178],
[189,0,195,208,166,208,217,180],
[168,145,0,152,164,155,202,166],
[190,132,188,0,146,166,219,164],
[172,174,176,194,0,148,215,187],
[186,132,185,174,192,0,208,165],
[140,123,138,121,125,132,0,128],
[162,160,174,176,153,175,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,205,175,177,191,165,196],
[154,0,174,165,145,173,171,171],
[135,166,0,151,152,148,164,164],
[165,175,189,0,170,185,185,184],
[163,195,188,170,0,186,179,199],
[149,167,192,155,154,0,157,176],
[175,169,176,155,161,183,0,181],
[144,169,176,156,141,164,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,186,170,174,177,173,183],
[157,0,180,178,173,149,151,174],
[154,160,0,168,177,165,168,172],
[170,162,172,0,172,169,163,169],
[166,167,163,168,0,164,168,168],
[163,191,175,171,176,0,165,170],
[167,189,172,177,172,175,0,175],
[157,166,168,171,172,170,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,172,156,165,198,175,213],
[149,0,148,149,150,179,188,174],
[168,192,0,162,174,177,190,187],
[184,191,178,0,164,172,182,188],
[175,190,166,176,0,172,187,197],
[142,161,163,168,168,0,173,169],
[165,152,150,158,153,167,0,180],
[127,166,153,152,143,171,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,168,174,151,175,171,169],
[176,0,177,167,179,183,180,190],
[172,163,0,173,157,173,163,174],
[166,173,167,0,159,170,171,168],
[189,161,183,181,0,178,173,176],
[165,157,167,170,162,0,167,184],
[169,160,177,169,167,173,0,168],
[171,150,166,172,164,156,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,150,180,178,196,224,212],
[100,0,125,169,117,153,179,163],
[190,215,0,169,196,188,189,185],
[160,171,171,0,173,184,180,180],
[162,223,144,167,0,220,159,169],
[144,187,152,156,120,0,176,169],
[116,161,151,160,181,164,0,154],
[128,177,155,160,171,171,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,158,165,145,167,161,162],
[177,0,164,174,166,176,169,173],
[182,176,0,165,168,174,171,173],
[175,166,175,0,174,193,162,181],
[195,174,172,166,0,186,175,180],
[173,164,166,147,154,0,171,160],
[179,171,169,178,165,169,0,165],
[178,167,167,159,160,180,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,153,174,186,171,157,186],
[154,0,158,180,167,174,161,174],
[187,182,0,178,168,189,172,173],
[166,160,162,0,168,169,149,176],
[154,173,172,172,0,176,153,176],
[169,166,151,171,164,0,135,169],
[183,179,168,191,187,205,0,186],
[154,166,167,164,164,171,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,184,167,164,176,173,173],
[178,0,175,185,175,169,169,186],
[156,165,0,148,154,172,171,160],
[173,155,192,0,174,173,189,184],
[176,165,186,166,0,170,185,183],
[164,171,168,167,170,0,167,183],
[167,171,169,151,155,173,0,177],
[167,154,180,156,157,157,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,163,178,168,174,159,176],
[175,0,163,177,167,173,179,183],
[177,177,0,185,157,180,159,160],
[162,163,155,0,156,168,151,184],
[172,173,183,184,0,170,197,177],
[166,167,160,172,170,0,175,171],
[181,161,181,189,143,165,0,179],
[164,157,180,156,163,169,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,168,183,192,188,175,173],
[169,0,176,173,175,163,166,157],
[172,164,0,188,200,167,174,170],
[157,167,152,0,186,164,168,166],
[148,165,140,154,0,158,144,157],
[152,177,173,176,182,0,171,176],
[165,174,166,172,196,169,0,181],
[167,183,170,174,183,164,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,159,164,148,157,151,142],
[180,0,179,166,192,179,194,160],
[181,161,0,175,158,180,153,153],
[176,174,165,0,150,180,172,181],
[192,148,182,190,0,177,172,161],
[183,161,160,160,163,0,160,157],
[189,146,187,168,168,180,0,149],
[198,180,187,159,179,183,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,181,197,178,176,178,167],
[161,0,181,179,173,189,175,172],
[159,159,0,188,171,150,174,154],
[143,161,152,0,160,150,165,143],
[162,167,169,180,0,167,176,163],
[164,151,190,190,173,0,173,159],
[162,165,166,175,164,167,0,149],
[173,168,186,197,177,181,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,200,174,196,150,192,191],
[155,0,168,163,168,154,161,127],
[140,172,0,160,178,152,175,145],
[166,177,180,0,174,184,189,180],
[144,172,162,166,0,150,149,129],
[190,186,188,156,190,0,165,169],
[148,179,165,151,191,175,0,151],
[149,213,195,160,211,171,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,185,172,169,163,177,195],
[164,0,183,168,142,158,148,183],
[155,157,0,165,154,152,149,166],
[168,172,175,0,137,144,144,159],
[171,198,186,203,0,163,172,198],
[177,182,188,196,177,0,159,199],
[163,192,191,196,168,181,0,211],
[145,157,174,181,142,141,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,173,156,178,169,201,182],
[170,0,111,128,160,175,164,145],
[167,229,0,176,176,202,199,185],
[184,212,164,0,194,213,221,175],
[162,180,164,146,0,170,177,179],
[171,165,138,127,170,0,174,160],
[139,176,141,119,163,166,0,168],
[158,195,155,165,161,180,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,173,157,142,175,156,165],
[185,0,183,166,170,174,165,179],
[167,157,0,152,145,159,154,158],
[183,174,188,0,176,182,170,195],
[198,170,195,164,0,191,172,197],
[165,166,181,158,149,0,157,180],
[184,175,186,170,168,183,0,177],
[175,161,182,145,143,160,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,162,168,171,153,179,160],
[179,0,172,172,165,178,178,169],
[178,168,0,177,181,165,174,171],
[172,168,163,0,167,150,182,170],
[169,175,159,173,0,168,181,175],
[187,162,175,190,172,0,179,173],
[161,162,166,158,159,161,0,173],
[180,171,169,170,165,167,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,153,148,142,162,167,173],
[178,0,174,165,173,160,166,173],
[187,166,0,161,150,154,166,179],
[192,175,179,0,178,170,182,175],
[198,167,190,162,0,169,173,181],
[178,180,186,170,171,0,171,202],
[173,174,174,158,167,169,0,166],
[167,167,161,165,159,138,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,158,162,174,164,172,181],
[176,0,168,158,188,160,176,179],
[182,172,0,167,177,171,167,176],
[178,182,173,0,172,169,174,189],
[166,152,163,168,0,166,179,161],
[176,180,169,171,174,0,168,178],
[168,164,173,166,161,172,0,174],
[159,161,164,151,179,162,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,157,154,169,181,169,147],
[187,0,187,171,168,198,199,189],
[183,153,0,184,182,196,177,150],
[186,169,156,0,175,187,180,175],
[171,172,158,165,0,185,180,179],
[159,142,144,153,155,0,167,138],
[171,141,163,160,160,173,0,151],
[193,151,190,165,161,202,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,161,182,183,176,191,192],
[160,0,194,205,184,184,202,180],
[179,146,0,197,171,183,169,162],
[158,135,143,0,136,186,155,153],
[157,156,169,204,0,184,197,171],
[164,156,157,154,156,0,172,144],
[149,138,171,185,143,168,0,166],
[148,160,178,187,169,196,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,190,156,172,195,168,164],
[174,0,188,156,191,194,164,185],
[150,152,0,176,158,180,167,159],
[184,184,164,0,198,199,182,194],
[168,149,182,142,0,202,155,155],
[145,146,160,141,138,0,166,148],
[172,176,173,158,185,174,0,187],
[176,155,181,146,185,192,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,165,168,186,167,183,175],
[161,0,162,169,188,170,184,153],
[175,178,0,170,188,166,181,158],
[172,171,170,0,192,179,186,170],
[154,152,152,148,0,149,159,150],
[173,170,174,161,191,0,172,184],
[157,156,159,154,181,168,0,146],
[165,187,182,170,190,156,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,185,187,180,188,143,161],
[172,0,176,167,165,156,172,161],
[155,164,0,183,159,171,158,154],
[153,173,157,0,189,166,179,182],
[160,175,181,151,0,167,165,178],
[152,184,169,174,173,0,175,180],
[197,168,182,161,175,165,0,178],
[179,179,186,158,162,160,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,157,183,182,184,175,159],
[166,0,154,173,184,182,179,166],
[183,186,0,181,175,203,186,168],
[157,167,159,0,164,174,165,164],
[158,156,165,176,0,175,145,173],
[156,158,137,166,165,0,140,165],
[165,161,154,175,195,200,0,160],
[181,174,172,176,167,175,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,199,150,152,152,129,154],
[173,0,186,153,173,178,167,185],
[141,154,0,149,144,168,137,136],
[190,187,191,0,180,177,160,161],
[188,167,196,160,0,167,139,189],
[188,162,172,163,173,0,158,144],
[211,173,203,180,201,182,0,167],
[186,155,204,179,151,196,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,167,177,163,167,164,181],
[179,0,177,186,173,170,182,182],
[173,163,0,188,163,155,179,172],
[163,154,152,0,147,150,155,173],
[177,167,177,193,0,169,183,179],
[173,170,185,190,171,0,168,173],
[176,158,161,185,157,172,0,173],
[159,158,168,167,161,167,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,156,178,161,188,160,161],
[192,0,160,153,175,178,175,180],
[184,180,0,174,181,191,184,161],
[162,187,166,0,189,194,189,184],
[179,165,159,151,0,167,151,151],
[152,162,149,146,173,0,148,165],
[180,165,156,151,189,192,0,190],
[179,160,179,156,189,175,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,168,162,144,159,173,161],
[181,0,178,166,158,175,168,171],
[172,162,0,187,150,171,186,154],
[178,174,153,0,148,163,164,174],
[196,182,190,192,0,184,166,203],
[181,165,169,177,156,0,181,153],
[167,172,154,176,174,159,0,174],
[179,169,186,166,137,187,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,178,174,178,170,179,159],
[172,0,149,164,158,139,141,144],
[162,191,0,177,139,164,145,166],
[166,176,163,0,174,179,184,183],
[162,182,201,166,0,148,167,166],
[170,201,176,161,192,0,176,183],
[161,199,195,156,173,164,0,161],
[181,196,174,157,174,157,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,159,132,155,146,149,143],
[186,0,182,183,173,182,147,178],
[181,158,0,169,178,188,170,154],
[208,157,171,0,159,174,164,159],
[185,167,162,181,0,171,175,143],
[194,158,152,166,169,0,167,164],
[191,193,170,176,165,173,0,145],
[197,162,186,181,197,176,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,133,141,144,153,141,155],
[198,0,163,144,165,180,89,129],
[207,177,0,184,181,156,133,187],
[199,196,156,0,198,156,156,210],
[196,175,159,142,0,158,150,158],
[187,160,184,184,182,0,122,162],
[199,251,207,184,190,218,0,167],
[185,211,153,130,182,178,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,176,161,154,165,170,168],
[169,0,167,160,174,169,162,170],
[164,173,0,150,156,166,167,165],
[179,180,190,0,164,171,171,176],
[186,166,184,176,0,184,183,177],
[175,171,174,169,156,0,175,183],
[170,178,173,169,157,165,0,163],
[172,170,175,164,163,157,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,165,181,180,180,188,183],
[176,0,170,189,162,203,189,179],
[175,170,0,189,157,186,190,167],
[159,151,151,0,152,174,192,166],
[160,178,183,188,0,179,184,179],
[160,137,154,166,161,0,186,174],
[152,151,150,148,156,154,0,178],
[157,161,173,174,161,166,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,174,163,183,250,206,193],
[168,0,160,210,166,188,166,170],
[166,180,0,173,213,178,147,197],
[177,130,167,0,171,179,181,199],
[157,174,127,169,0,211,140,197],
[90,152,162,161,129,0,134,157],
[134,174,193,159,200,206,0,188],
[147,170,143,141,143,183,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,173,165,164,175,170,164],
[177,0,168,174,150,172,159,163],
[167,172,0,163,162,148,177,163],
[175,166,177,0,153,156,155,154],
[176,190,178,187,0,167,175,159],
[165,168,192,184,173,0,181,171],
[170,181,163,185,165,159,0,172],
[176,177,177,186,181,169,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,182,156,177,148,158,183],
[187,0,178,137,132,176,134,140],
[158,162,0,145,163,120,116,160],
[184,203,195,0,183,138,194,220],
[163,208,177,157,0,133,173,220],
[192,164,220,202,207,0,174,189],
[182,206,224,146,167,166,0,212],
[157,200,180,120,120,151,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,179,184,168,162,178,171],
[170,0,186,185,155,168,178,162],
[161,154,0,183,172,174,168,156],
[156,155,157,0,155,161,162,153],
[172,185,168,185,0,177,173,176],
[178,172,166,179,163,0,165,163],
[162,162,172,178,167,175,0,168],
[169,178,184,187,164,177,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,158,149,156,154,151,156],
[180,0,164,163,169,165,155,166],
[182,176,0,171,169,176,168,172],
[191,177,169,0,171,176,171,182],
[184,171,171,169,0,186,176,175],
[186,175,164,164,154,0,186,170],
[189,185,172,169,164,154,0,164],
[184,174,168,158,165,170,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,180,179,165,165,157,142],
[173,0,143,186,166,177,143,156],
[160,197,0,206,171,161,148,173],
[161,154,134,0,164,180,138,141],
[175,174,169,176,0,153,163,151],
[175,163,179,160,187,0,178,177],
[183,197,192,202,177,162,0,181],
[198,184,167,199,189,163,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,180,182,157,159,170,163],
[156,0,176,164,149,150,151,169],
[160,164,0,161,160,161,173,156],
[158,176,179,0,140,162,157,168],
[183,191,180,200,0,180,167,166],
[181,190,179,178,160,0,155,170],
[170,189,167,183,173,185,0,184],
[177,171,184,172,174,170,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,170,161,178,168,163,172],
[169,0,158,163,162,170,163,161],
[170,182,0,159,161,161,166,171],
[179,177,181,0,181,183,178,167],
[162,178,179,159,0,155,179,170],
[172,170,179,157,185,0,166,176],
[177,177,174,162,161,174,0,164],
[168,179,169,173,170,164,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,164,162,159,168,173,190],
[160,0,176,145,124,196,144,164],
[176,164,0,176,146,210,159,192],
[178,195,164,0,143,226,153,215],
[181,216,194,197,0,239,162,224],
[172,144,130,114,101,0,145,164],
[167,196,181,187,178,195,0,181],
[150,176,148,125,116,176,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,217,160,154,171,169,169],
[148,0,163,169,163,156,141,137],
[123,177,0,154,143,171,154,151],
[180,171,186,0,157,144,173,169],
[186,177,197,183,0,148,152,157],
[169,184,169,196,192,0,166,186],
[171,199,186,167,188,174,0,165],
[171,203,189,171,183,154,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,167,173,173,169,179,168],
[172,0,166,160,174,166,184,170],
[173,174,0,176,183,173,176,153],
[167,180,164,0,180,177,185,163],
[167,166,157,160,0,179,160,159],
[171,174,167,163,161,0,186,156],
[161,156,164,155,180,154,0,160],
[172,170,187,177,181,184,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,168,152,186,207,163,158],
[181,0,184,177,166,210,222,193],
[172,156,0,191,155,202,198,149],
[188,163,149,0,159,181,180,161],
[154,174,185,181,0,202,182,182],
[133,130,138,159,138,0,166,119],
[177,118,142,160,158,174,0,158],
[182,147,191,179,158,221,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,180,222,170,208,179,163],
[201,0,170,205,163,178,155,171],
[160,170,0,208,136,155,165,151],
[118,135,132,0,146,152,119,148],
[170,177,204,194,0,180,176,207],
[132,162,185,188,160,0,138,164],
[161,185,175,221,164,202,0,170],
[177,169,189,192,133,176,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,185,182,167,184,181,170],
[171,0,183,179,173,186,182,165],
[155,157,0,174,155,183,169,162],
[158,161,166,0,159,169,165,163],
[173,167,185,181,0,167,174,162],
[156,154,157,171,173,0,165,140],
[159,158,171,175,166,175,0,160],
[170,175,178,177,178,200,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,169,186,186,162,180,165],
[194,0,168,187,176,152,183,178],
[171,172,0,186,182,170,198,199],
[154,153,154,0,156,146,160,153],
[154,164,158,184,0,156,160,166],
[178,188,170,194,184,0,189,192],
[160,157,142,180,180,151,0,172],
[175,162,141,187,174,148,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,172,156,158,152,178,145],
[191,0,192,176,182,169,181,183],
[168,148,0,163,168,160,176,173],
[184,164,177,0,177,178,185,186],
[182,158,172,163,0,170,167,168],
[188,171,180,162,170,0,179,177],
[162,159,164,155,173,161,0,159],
[195,157,167,154,172,163,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,181,157,190,187,188,164],
[142,0,148,156,163,146,144,156],
[159,192,0,169,175,170,187,171],
[183,184,171,0,177,164,166,177],
[150,177,165,163,0,163,183,174],
[153,194,170,176,177,0,172,173],
[152,196,153,174,157,168,0,154],
[176,184,169,163,166,167,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,183,149,155,173,175,151],
[171,0,196,150,164,181,172,154],
[157,144,0,143,147,144,147,169],
[191,190,197,0,156,169,187,174],
[185,176,193,184,0,200,179,169],
[167,159,196,171,140,0,164,158],
[165,168,193,153,161,176,0,181],
[189,186,171,166,171,182,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,183,165,171,163,170,184],
[156,0,169,167,159,163,158,159],
[157,171,0,163,171,160,163,170],
[175,173,177,0,160,165,171,183],
[169,181,169,180,0,172,169,164],
[177,177,180,175,168,0,156,183],
[170,182,177,169,171,184,0,166],
[156,181,170,157,176,157,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,93,83,104,111,131,161],
[231,0,115,139,141,164,195,139],
[247,225,0,157,177,192,223,232],
[257,201,183,0,139,221,239,186],
[236,199,163,201,0,116,268,208],
[229,176,148,119,224,0,226,198],
[209,145,117,101,72,114,0,190],
[179,201,108,154,132,142,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,163,163,175,176,169,168],
[160,0,185,167,184,178,184,159],
[177,155,0,172,182,186,168,174],
[177,173,168,0,176,172,178,167],
[165,156,158,164,0,155,155,158],
[164,162,154,168,185,0,168,166],
[171,156,172,162,185,172,0,166],
[172,181,166,173,182,174,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,157,169,181,179,162,166],
[168,0,179,175,166,181,164,174],
[183,161,0,182,174,176,150,177],
[171,165,158,0,173,187,162,175],
[159,174,166,167,0,180,164,167],
[161,159,164,153,160,0,158,175],
[178,176,190,178,176,182,0,166],
[174,166,163,165,173,165,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,165,171,158,164,172,189],
[164,0,164,170,163,173,174,180],
[175,176,0,174,169,163,175,180],
[169,170,166,0,150,163,163,176],
[182,177,171,190,0,161,185,175],
[176,167,177,177,179,0,184,179],
[168,166,165,177,155,156,0,177],
[151,160,160,164,165,161,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,170,178,169,173,169,173],
[159,0,155,175,176,164,158,199],
[170,185,0,184,176,182,191,187],
[162,165,156,0,174,169,167,202],
[171,164,164,166,0,164,156,177],
[167,176,158,171,176,0,188,190],
[171,182,149,173,184,152,0,189],
[167,141,153,138,163,150,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,192,166,160,208,174,154],
[186,0,196,174,175,169,173,174],
[148,144,0,148,150,158,169,143],
[174,166,192,0,163,180,179,172],
[180,165,190,177,0,187,177,166],
[132,171,182,160,153,0,191,162],
[166,167,171,161,163,149,0,150],
[186,166,197,168,174,178,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,174,196,189,146,199,190],
[135,0,140,153,151,146,168,144],
[166,200,0,203,164,172,184,161],
[144,187,137,0,150,161,155,167],
[151,189,176,190,0,154,162,166],
[194,194,168,179,186,0,184,152],
[141,172,156,185,178,156,0,147],
[150,196,179,173,174,188,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,174,159,170,177,172,182],
[168,0,178,165,178,166,160,161],
[166,162,0,157,179,161,160,188],
[181,175,183,0,193,168,162,182],
[170,162,161,147,0,166,150,166],
[163,174,179,172,174,0,165,190],
[168,180,180,178,190,175,0,187],
[158,179,152,158,174,150,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,151,157,162,159,150,174],
[169,0,151,156,156,161,165,148],
[189,189,0,175,170,178,162,171],
[183,184,165,0,161,204,146,176],
[178,184,170,179,0,180,176,171],
[181,179,162,136,160,0,172,167],
[190,175,178,194,164,168,0,169],
[166,192,169,164,169,173,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,173,176,171,198,165,187],
[176,0,182,175,193,165,166,175],
[167,158,0,171,179,188,176,184],
[164,165,169,0,157,197,160,191],
[169,147,161,183,0,171,170,153],
[142,175,152,143,169,0,168,172],
[175,174,164,180,170,172,0,163],
[153,165,156,149,187,168,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,163,168,173,178,182,142],
[161,0,161,158,129,176,191,152],
[177,179,0,161,142,155,178,154],
[172,182,179,0,152,176,191,173],
[167,211,198,188,0,195,204,163],
[162,164,185,164,145,0,193,159],
[158,149,162,149,136,147,0,142],
[198,188,186,167,177,181,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,157,182,131,179,174,144],
[214,0,208,211,171,183,222,167],
[183,132,0,171,137,163,150,156],
[158,129,169,0,107,161,183,144],
[209,169,203,233,0,200,212,188],
[161,157,177,179,140,0,159,139],
[166,118,190,157,128,181,0,188],
[196,173,184,196,152,201,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,173,163,179,173,168,164],
[179,0,177,178,184,182,168,173],
[167,163,0,180,186,173,167,164],
[177,162,160,0,170,160,163,158],
[161,156,154,170,0,172,166,158],
[167,158,167,180,168,0,174,171],
[172,172,173,177,174,166,0,172],
[176,167,176,182,182,169,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,161,136,186,152,195,191],
[184,0,158,132,165,156,168,184],
[179,182,0,158,217,172,219,213],
[204,208,182,0,208,153,209,224],
[154,175,123,132,0,143,181,158],
[188,184,168,187,197,0,211,215],
[145,172,121,131,159,129,0,182],
[149,156,127,116,182,125,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,200,161,171,177,177,167],
[168,0,189,189,169,170,184,177],
[140,151,0,165,163,162,168,159],
[179,151,175,0,162,175,181,168],
[169,171,177,178,0,182,184,177],
[163,170,178,165,158,0,151,172],
[163,156,172,159,156,189,0,164],
[173,163,181,172,163,168,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,160,125,152,144,168,186],
[197,0,172,150,171,163,189,165],
[180,168,0,173,122,143,108,161],
[215,190,167,0,149,180,170,185],
[188,169,218,191,0,132,207,216],
[196,177,197,160,208,0,167,203],
[172,151,232,170,133,173,0,213],
[154,175,179,155,124,137,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,157,176,178,194,173,186],
[190,0,134,187,145,165,174,188],
[183,206,0,198,200,219,167,202],
[164,153,142,0,162,177,156,158],
[162,195,140,178,0,198,174,199],
[146,175,121,163,142,0,126,128],
[167,166,173,184,166,214,0,214],
[154,152,138,182,141,212,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,158,168,185,149,161,172],
[204,0,176,181,183,168,167,173],
[182,164,0,194,166,171,179,168],
[172,159,146,0,142,153,158,167],
[155,157,174,198,0,148,191,162],
[191,172,169,187,192,0,179,195],
[179,173,161,182,149,161,0,157],
[168,167,172,173,178,145,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,181,170,173,173,174,179],
[165,0,170,165,169,177,174,179],
[159,170,0,173,168,168,176,176],
[170,175,167,0,164,167,175,182],
[167,171,172,176,0,172,182,167],
[167,163,172,173,168,0,179,172],
[166,166,164,165,158,161,0,163],
[161,161,164,158,173,168,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,190,175,171,173,170,149],
[166,0,176,152,167,156,165,171],
[150,164,0,156,171,146,164,159],
[165,188,184,0,175,160,175,162],
[169,173,169,165,0,162,172,157],
[167,184,194,180,178,0,172,169],
[170,175,176,165,168,168,0,158],
[191,169,181,178,183,171,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,178,175,164,153,204,142],
[171,0,164,183,199,185,195,156],
[162,176,0,169,182,189,206,171],
[165,157,171,0,173,164,184,142],
[176,141,158,167,0,162,179,166],
[187,155,151,176,178,0,184,162],
[136,145,134,156,161,156,0,135],
[198,184,169,198,174,178,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,156,165,150,163,153,148],
[185,0,180,173,165,161,184,174],
[184,160,0,179,174,152,169,159],
[175,167,161,0,172,163,161,157],
[190,175,166,168,0,167,152,158],
[177,179,188,177,173,0,182,153],
[187,156,171,179,188,158,0,152],
[192,166,181,183,182,187,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,126,178,143,153,172,178],
[209,0,169,164,205,182,197,171],
[214,171,0,162,166,159,189,187],
[162,176,178,0,157,137,175,165],
[197,135,174,183,0,156,193,180],
[187,158,181,203,184,0,216,159],
[168,143,151,165,147,124,0,154],
[162,169,153,175,160,181,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,169,172,160,175,163,175],
[182,0,183,183,174,187,167,173],
[171,157,0,181,190,180,156,168],
[168,157,159,0,176,171,164,167],
[180,166,150,164,0,173,163,169],
[165,153,160,169,167,0,154,171],
[177,173,184,176,177,186,0,166],
[165,167,172,173,171,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,166,164,163,158,158,155],
[176,0,168,186,173,178,170,179],
[174,172,0,189,174,182,163,174],
[176,154,151,0,159,159,155,154],
[177,167,166,181,0,173,182,163],
[182,162,158,181,167,0,168,158],
[182,170,177,185,158,172,0,151],
[185,161,166,186,177,182,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,160,198,146,192,172,171],
[189,0,174,176,183,188,174,158],
[180,166,0,199,176,212,174,167],
[142,164,141,0,128,161,159,143],
[194,157,164,212,0,199,172,194],
[148,152,128,179,141,0,174,154],
[168,166,166,181,168,166,0,125],
[169,182,173,197,146,186,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,208,194,53,204,147,125],
[246,0,175,196,142,143,163,192],
[132,165,0,206,120,186,159,163],
[146,144,134,0,134,183,104,190],
[287,198,220,206,0,174,168,236],
[136,197,154,157,166,0,143,157],
[193,177,181,236,172,197,0,129],
[215,148,177,150,104,183,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,173,178,175,196,172,189],
[172,0,165,170,172,177,162,170],
[167,175,0,172,176,187,164,183],
[162,170,168,0,190,196,173,184],
[165,168,164,150,0,192,163,181],
[144,163,153,144,148,0,145,167],
[168,178,176,167,177,195,0,190],
[151,170,157,156,159,173,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,160,158,178,150,168,156],
[180,0,171,178,172,174,167,170],
[180,169,0,155,180,158,177,180],
[182,162,185,0,203,174,173,194],
[162,168,160,137,0,158,157,141],
[190,166,182,166,182,0,186,186],
[172,173,163,167,183,154,0,176],
[184,170,160,146,199,154,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,152,161,164,168,167,146],
[198,0,169,175,164,195,159,162],
[188,171,0,167,169,172,166,163],
[179,165,173,0,186,180,184,183],
[176,176,171,154,0,179,175,173],
[172,145,168,160,161,0,174,153],
[173,181,174,156,165,166,0,169],
[194,178,177,157,167,187,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,168,201,177,230,202,194],
[125,0,165,162,163,174,159,174],
[172,175,0,161,181,194,194,154],
[139,178,179,0,181,182,168,148],
[163,177,159,159,0,175,157,150],
[110,166,146,158,165,0,154,136],
[138,181,146,172,183,186,0,155],
[146,166,186,192,190,204,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,163,164,151,156,153,155],
[181,0,169,161,166,164,165,160],
[177,171,0,164,167,175,174,171],
[176,179,176,0,173,167,179,175],
[189,174,173,167,0,169,170,175],
[184,176,165,173,171,0,172,169],
[187,175,166,161,170,168,0,173],
[185,180,169,165,165,171,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,175,190,170,183,167,171],
[158,0,159,178,167,156,151,173],
[165,181,0,182,173,177,177,166],
[150,162,158,0,147,149,159,158],
[170,173,167,193,0,168,167,167],
[157,184,163,191,172,0,168,179],
[173,189,163,181,173,172,0,176],
[169,167,174,182,173,161,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,189,170,201,175,194,168],
[177,0,188,166,187,190,180,178],
[151,152,0,167,167,156,167,139],
[170,174,173,0,188,152,175,179],
[139,153,173,152,0,159,167,161],
[165,150,184,188,181,0,186,182],
[146,160,173,165,173,154,0,170],
[172,162,201,161,179,158,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,182,159,159,161,166,173],
[169,0,146,141,162,167,172,158],
[158,194,0,166,186,159,177,150],
[181,199,174,0,182,188,175,164],
[181,178,154,158,0,167,167,170],
[179,173,181,152,173,0,178,166],
[174,168,163,165,173,162,0,157],
[167,182,190,176,170,174,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,159,162,169,184,170,178],
[148,0,151,158,164,162,165,167],
[181,189,0,190,174,182,167,170],
[178,182,150,0,151,176,165,166],
[171,176,166,189,0,173,163,177],
[156,178,158,164,167,0,152,179],
[170,175,173,175,177,188,0,185],
[162,173,170,174,163,161,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,186,199,167,179,190,183],
[155,0,179,157,152,189,157,153],
[154,161,0,180,157,152,150,169],
[141,183,160,0,164,178,149,167],
[173,188,183,176,0,199,168,183],
[161,151,188,162,141,0,152,181],
[150,183,190,191,172,188,0,168],
[157,187,171,173,157,159,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,216,130,166,169,221,154],
[177,0,116,171,125,240,178,176],
[124,224,0,163,186,182,219,154],
[210,169,177,0,184,229,204,214],
[174,215,154,156,0,196,243,168],
[171,100,158,111,144,0,207,153],
[119,162,121,136,97,133,0,131],
[186,164,186,126,172,187,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,175,189,170,182,169,165],
[141,0,146,164,145,161,152,151],
[165,194,0,177,193,186,175,176],
[151,176,163,0,161,182,177,173],
[170,195,147,179,0,150,170,171],
[158,179,154,158,190,0,168,165],
[171,188,165,163,170,172,0,161],
[175,189,164,167,169,175,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,182,172,158,180,179,186],
[174,0,170,156,152,187,159,174],
[158,170,0,166,151,162,155,176],
[168,184,174,0,170,185,156,193],
[182,188,189,170,0,195,179,195],
[160,153,178,155,145,0,155,163],
[161,181,185,184,161,185,0,193],
[154,166,164,147,145,177,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,175,176,158,181,160,159],
[171,0,175,158,155,157,166,182],
[165,165,0,175,155,169,176,168],
[164,182,165,0,173,173,176,179],
[182,185,185,167,0,170,201,183],
[159,183,171,167,170,0,182,192],
[180,174,164,164,139,158,0,152],
[181,158,172,161,157,148,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,192,165,188,189,180,184],
[147,0,180,144,179,182,187,163],
[148,160,0,144,163,189,180,156],
[175,196,196,0,173,192,186,164],
[152,161,177,167,0,178,194,166],
[151,158,151,148,162,0,161,148],
[160,153,160,154,146,179,0,156],
[156,177,184,176,174,192,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,180,151,176,173,168,184],
[169,0,179,144,184,179,163,180],
[160,161,0,172,176,161,156,174],
[189,196,168,0,196,166,196,194],
[164,156,164,144,0,152,156,175],
[167,161,179,174,188,0,154,186],
[172,177,184,144,184,186,0,179],
[156,160,166,146,165,154,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,184,154,197,243,166,185],
[133,0,170,157,156,113,134,125],
[156,170,0,116,143,204,109,150],
[186,183,224,0,216,197,171,169],
[143,184,197,124,0,158,155,147],
[97,227,136,143,182,0,134,163],
[174,206,231,169,185,206,0,157],
[155,215,190,171,193,177,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,162,161,162,176,154,153],
[182,0,171,171,182,179,167,167],
[178,169,0,167,160,183,161,172],
[179,169,173,0,181,184,165,169],
[178,158,180,159,0,167,162,155],
[164,161,157,156,173,0,163,161],
[186,173,179,175,178,177,0,169],
[187,173,168,171,185,179,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,170,169,167,183,164,183],
[166,0,167,163,170,162,161,171],
[170,173,0,160,174,188,167,188],
[171,177,180,0,160,187,165,183],
[173,170,166,180,0,175,172,175],
[157,178,152,153,165,0,155,178],
[176,179,173,175,168,185,0,180],
[157,169,152,157,165,162,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,171,178,154,155,167,176],
[172,0,166,173,155,163,181,174],
[169,174,0,165,163,159,181,162],
[162,167,175,0,166,171,174,179],
[186,185,177,174,0,158,178,187],
[185,177,181,169,182,0,187,172],
[173,159,159,166,162,153,0,166],
[164,166,178,161,153,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,163,178,174,163,175,167],
[169,0,158,168,168,149,167,164],
[177,182,0,170,184,179,195,175],
[162,172,170,0,188,143,163,153],
[166,172,156,152,0,149,169,160],
[177,191,161,197,191,0,183,182],
[165,173,145,177,171,157,0,173],
[173,176,165,187,180,158,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,166,169,154,175,168,171],
[167,0,166,159,152,171,171,168],
[174,174,0,164,170,175,167,168],
[171,181,176,0,161,180,195,175],
[186,188,170,179,0,178,185,168],
[165,169,165,160,162,0,161,163],
[172,169,173,145,155,179,0,156],
[169,172,172,165,172,177,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,166,180,162,186,168,180],
[164,0,157,163,175,157,171,176],
[174,183,0,180,182,174,167,174],
[160,177,160,0,179,167,140,170],
[178,165,158,161,0,169,150,164],
[154,183,166,173,171,0,154,170],
[172,169,173,200,190,186,0,186],
[160,164,166,170,176,170,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,164,164,184,157,169,183],
[171,0,170,172,177,158,155,177],
[176,170,0,176,175,165,160,187],
[176,168,164,0,180,176,173,184],
[156,163,165,160,0,154,167,180],
[183,182,175,164,186,0,174,199],
[171,185,180,167,173,166,0,182],
[157,163,153,156,160,141,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,196,168,157,149,160,146],
[167,0,160,175,190,148,195,209],
[144,180,0,163,154,116,170,163],
[172,165,177,0,151,175,160,153],
[183,150,186,189,0,172,191,178],
[191,192,224,165,168,0,198,192],
[180,145,170,180,149,142,0,152],
[194,131,177,187,162,148,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,175,173,154,177,160,162],
[171,0,158,138,138,143,132,161],
[165,182,0,142,146,168,153,179],
[167,202,198,0,184,181,161,187],
[186,202,194,156,0,189,147,171],
[163,197,172,159,151,0,154,163],
[180,208,187,179,193,186,0,169],
[178,179,161,153,169,177,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,186,166,170,175,178,176],
[175,0,181,174,165,171,176,168],
[154,159,0,157,151,169,168,160],
[174,166,183,0,177,176,181,174],
[170,175,189,163,0,174,178,171],
[165,169,171,164,166,0,173,172],
[162,164,172,159,162,167,0,158],
[164,172,180,166,169,168,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,188,176,187,183,160,175],
[159,0,162,159,155,150,142,138],
[152,178,0,157,185,170,159,170],
[164,181,183,0,170,169,158,159],
[153,185,155,170,0,173,157,134],
[157,190,170,171,167,0,154,144],
[180,198,181,182,183,186,0,169],
[165,202,170,181,206,196,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,261,153,168,189,179,130],
[149,0,174,146,138,107,146,130],
[79,166,0,119,84,116,131,94],
[187,194,221,0,152,122,165,144],
[172,202,256,188,0,196,162,194],
[151,233,224,218,144,0,179,154],
[161,194,209,175,178,161,0,162],
[210,210,246,196,146,186,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,176,164,168,153,157,172],
[193,0,177,184,191,170,187,181],
[164,163,0,162,160,158,182,159],
[176,156,178,0,155,163,164,177],
[172,149,180,185,0,169,178,166],
[187,170,182,177,171,0,180,178],
[183,153,158,176,162,160,0,170],
[168,159,181,163,174,162,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,180,177,170,164,176,189],
[158,0,163,159,160,162,151,130],
[160,177,0,161,144,181,172,180],
[163,181,179,0,169,181,178,168],
[170,180,196,171,0,189,194,169],
[176,178,159,159,151,0,166,168],
[164,189,168,162,146,174,0,146],
[151,210,160,172,171,172,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,188,167,166,195,174,198],
[150,0,181,183,187,186,173,207],
[152,159,0,179,161,194,169,197],
[173,157,161,0,162,184,160,203],
[174,153,179,178,0,191,177,192],
[145,154,146,156,149,0,155,185],
[166,167,171,180,163,185,0,191],
[142,133,143,137,148,155,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,156,164,161,199,177,188],
[168,0,176,178,176,177,157,187],
[184,164,0,167,183,185,201,185],
[176,162,173,0,146,157,167,170],
[179,164,157,194,0,188,173,193],
[141,163,155,183,152,0,172,187],
[163,183,139,173,167,168,0,184],
[152,153,155,170,147,153,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,172,192,168,182,170,179],
[184,0,170,187,170,179,171,183],
[168,170,0,183,165,157,177,173],
[148,153,157,0,169,158,155,164],
[172,170,175,171,0,172,171,179],
[158,161,183,182,168,0,168,180],
[170,169,163,185,169,172,0,169],
[161,157,167,176,161,160,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,162,174,164,165,176,158],
[190,0,174,167,182,175,174,185],
[178,166,0,177,168,169,168,152],
[166,173,163,0,174,158,173,172],
[176,158,172,166,0,168,168,162],
[175,165,171,182,172,0,172,177],
[164,166,172,167,172,168,0,164],
[182,155,188,168,178,163,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,144,139,148,155,174,154],
[189,0,153,160,177,172,176,181],
[196,187,0,161,182,193,166,191],
[201,180,179,0,191,169,194,197],
[192,163,158,149,0,175,179,168],
[185,168,147,171,165,0,183,185],
[166,164,174,146,161,157,0,161],
[186,159,149,143,172,155,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,235,213,189,190,225,185],
[172,0,206,190,166,141,208,160],
[105,134,0,185,185,141,199,178],
[127,150,155,0,164,109,162,157],
[151,174,155,176,0,183,204,191],
[150,199,199,231,157,0,214,181],
[115,132,141,178,136,126,0,166],
[155,180,162,183,149,159,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,172,177,168,177,170,186],
[164,0,184,182,174,183,181,189],
[168,156,0,182,168,179,172,179],
[163,158,158,0,156,182,160,177],
[172,166,172,184,0,190,175,178],
[163,157,161,158,150,0,175,175],
[170,159,168,180,165,165,0,171],
[154,151,161,163,162,165,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,170,161,174,161,154,150],
[171,0,180,164,188,180,177,179],
[170,160,0,156,175,155,166,163],
[179,176,184,0,188,169,170,174],
[166,152,165,152,0,160,164,161],
[179,160,185,171,180,0,166,173],
[186,163,174,170,176,174,0,162],
[190,161,177,166,179,167,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,181,205,169,180,177,173],
[155,0,142,179,150,151,149,140],
[159,198,0,189,162,184,163,172],
[135,161,151,0,129,132,134,144],
[171,190,178,211,0,185,169,176],
[160,189,156,208,155,0,158,183],
[163,191,177,206,171,182,0,172],
[167,200,168,196,164,157,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,188,177,162,164,193,191],
[171,0,149,181,185,148,186,194],
[152,191,0,184,159,164,198,193],
[163,159,156,0,167,147,191,183],
[178,155,181,173,0,171,205,180],
[176,192,176,193,169,0,187,198],
[147,154,142,149,135,153,0,153],
[149,146,147,157,160,142,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,171,170,153,187,165,187],
[178,0,174,191,169,187,182,184],
[169,166,0,185,161,178,166,165],
[170,149,155,0,141,157,161,163],
[187,171,179,199,0,184,170,171],
[153,153,162,183,156,0,162,153],
[175,158,174,179,170,178,0,160],
[153,156,175,177,169,187,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,174,163,160,186,168,170],
[168,0,174,164,174,182,165,170],
[166,166,0,172,176,188,164,175],
[177,176,168,0,183,185,170,174],
[180,166,164,157,0,189,171,171],
[154,158,152,155,151,0,167,160],
[172,175,176,170,169,173,0,172],
[170,170,165,166,169,180,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,175,186,167,183,185,178],
[162,0,168,177,168,159,176,181],
[165,172,0,185,172,149,161,175],
[154,163,155,0,164,153,180,166],
[173,172,168,176,0,172,182,167],
[157,181,191,187,168,0,178,165],
[155,164,179,160,158,162,0,156],
[162,159,165,174,173,175,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,178,199,171,176,199,182],
[170,0,173,182,197,184,194,177],
[162,167,0,191,181,165,175,133],
[141,158,149,0,156,152,153,145],
[169,143,159,184,0,168,186,136],
[164,156,175,188,172,0,172,161],
[141,146,165,187,154,168,0,148],
[158,163,207,195,204,179,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,171,186,174,181,160,143],
[150,0,133,149,161,143,151,146],
[169,207,0,165,182,152,171,154],
[154,191,175,0,194,179,170,173],
[166,179,158,146,0,162,146,129],
[159,197,188,161,178,0,156,152],
[180,189,169,170,194,184,0,163],
[197,194,186,167,211,188,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,174,174,184,174,170,176],
[160,0,170,159,163,167,152,174],
[166,170,0,167,168,158,157,162],
[166,181,173,0,170,157,177,165],
[156,177,172,170,0,166,172,178],
[166,173,182,183,174,0,171,173],
[170,188,183,163,168,169,0,173],
[164,166,178,175,162,167,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,190,195,202,171,149,227],
[181,0,163,227,187,203,181,210],
[150,177,0,172,164,175,159,141],
[145,113,168,0,153,142,145,130],
[138,153,176,187,0,156,193,209],
[169,137,165,198,184,0,167,154],
[191,159,181,195,147,173,0,167],
[113,130,199,210,131,186,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,175,170,164,172,171,187],
[156,0,161,159,165,155,166,167],
[165,179,0,166,173,174,172,181],
[170,181,174,0,163,164,164,175],
[176,175,167,177,0,170,164,174],
[168,185,166,176,170,0,162,176],
[169,174,168,176,176,178,0,183],
[153,173,159,165,166,164,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,176,170,169,173,156,162],
[174,0,178,171,179,182,162,158],
[164,162,0,156,153,160,169,157],
[170,169,184,0,160,176,167,168],
[171,161,187,180,0,169,167,167],
[167,158,180,164,171,0,170,165],
[184,178,171,173,173,170,0,175],
[178,182,183,172,173,175,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,169,172,181,166,178,179],
[161,0,176,166,163,152,174,170],
[171,164,0,169,182,177,181,175],
[168,174,171,0,174,169,180,178],
[159,177,158,166,0,167,173,170],
[174,188,163,171,173,0,189,173],
[162,166,159,160,167,151,0,171],
[161,170,165,162,170,167,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,168,203,181,166,194,160],
[179,0,161,176,178,165,181,173],
[172,179,0,196,176,168,199,168],
[137,164,144,0,152,155,179,127],
[159,162,164,188,0,151,163,154],
[174,175,172,185,189,0,185,161],
[146,159,141,161,177,155,0,154],
[180,167,172,213,186,179,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,172,172,155,179,189,191],
[149,0,163,157,158,160,179,188],
[168,177,0,165,171,176,196,182],
[168,183,175,0,171,194,179,196],
[185,182,169,169,0,194,213,201],
[161,180,164,146,146,0,187,177],
[151,161,144,161,127,153,0,183],
[149,152,158,144,139,163,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,172,177,169,175,169,187],
[161,0,168,177,161,180,171,174],
[168,172,0,170,164,169,173,162],
[163,163,170,0,157,163,162,168],
[171,179,176,183,0,179,168,175],
[165,160,171,177,161,0,176,183],
[171,169,167,178,172,164,0,177],
[153,166,178,172,165,157,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,176,166,175,170,166,155],
[173,0,166,175,185,181,174,168],
[164,174,0,167,175,165,152,155],
[174,165,173,0,182,159,168,164],
[165,155,165,158,0,164,166,147],
[170,159,175,181,176,0,171,171],
[174,166,188,172,174,169,0,165],
[185,172,185,176,193,169,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,185,191,167,144,145,156],
[207,0,169,160,192,174,167,171],
[155,171,0,127,157,165,137,171],
[149,180,213,0,139,166,189,133],
[173,148,183,201,0,161,181,163],
[196,166,175,174,179,0,165,180],
[195,173,203,151,159,175,0,162],
[184,169,169,207,177,160,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,193,174,199,245,141,168],
[178,0,179,185,183,236,187,161],
[147,161,0,186,137,180,201,182],
[166,155,154,0,111,187,174,200],
[141,157,203,229,0,206,188,181],
[95,104,160,153,134,0,186,130],
[199,153,139,166,152,154,0,160],
[172,179,158,140,159,210,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,186,173,176,172,171,169],
[154,0,173,167,160,158,160,163],
[154,167,0,163,172,157,165,165],
[167,173,177,0,175,168,165,165],
[164,180,168,165,0,173,168,174],
[168,182,183,172,167,0,164,168],
[169,180,175,175,172,176,0,166],
[171,177,175,175,166,172,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,183,175,201,169,180,197],
[173,0,168,168,180,194,196,188],
[157,172,0,156,173,162,158,185],
[165,172,184,0,190,180,207,169],
[139,160,167,150,0,163,175,173],
[171,146,178,160,177,0,184,178],
[160,144,182,133,165,156,0,170],
[143,152,155,171,167,162,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,176,177,186,198,204,169],
[148,0,165,136,154,160,179,154],
[164,175,0,176,181,200,182,173],
[163,204,164,0,186,192,185,190],
[154,186,159,154,0,192,169,168],
[142,180,140,148,148,0,167,154],
[136,161,158,155,171,173,0,136],
[171,186,167,150,172,186,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,168,167,174,195,167,180],
[159,0,174,176,173,189,173,182],
[172,166,0,174,156,174,174,176],
[173,164,166,0,172,193,171,172],
[166,167,184,168,0,184,180,189],
[145,151,166,147,156,0,156,158],
[173,167,166,169,160,184,0,179],
[160,158,164,168,151,182,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,148,164,172,171,165,165],
[181,0,168,183,164,173,164,183],
[192,172,0,175,174,170,184,171],
[176,157,165,0,161,155,179,178],
[168,176,166,179,0,161,165,182],
[169,167,170,185,179,0,189,177],
[175,176,156,161,175,151,0,172],
[175,157,169,162,158,163,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,146,179,163,181,173,154],
[180,0,162,211,190,181,193,172],
[194,178,0,196,181,185,187,167],
[161,129,144,0,163,162,156,141],
[177,150,159,177,0,160,158,141],
[159,159,155,178,180,0,174,157],
[167,147,153,184,182,166,0,142],
[186,168,173,199,199,183,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,142,139,146,174,141,157],
[199,0,177,173,165,193,172,168],
[198,163,0,157,167,171,168,169],
[201,167,183,0,190,185,179,183],
[194,175,173,150,0,175,173,177],
[166,147,169,155,165,0,158,161],
[199,168,172,161,167,182,0,176],
[183,172,171,157,163,179,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,161,189,141,157,152,159],
[191,0,192,227,169,183,184,181],
[179,148,0,199,171,150,162,150],
[151,113,141,0,142,131,154,134],
[199,171,169,198,0,168,187,162],
[183,157,190,209,172,0,185,139],
[188,156,178,186,153,155,0,153],
[181,159,190,206,178,201,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,181,177,172,178,166,179],
[168,0,162,191,180,183,154,145],
[159,178,0,182,173,160,158,147],
[163,149,158,0,159,166,154,147],
[168,160,167,181,0,165,145,164],
[162,157,180,174,175,0,154,155],
[174,186,182,186,195,186,0,170],
[161,195,193,193,176,185,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,9,0,178,169,0,178],
[171,0,171,171,340,331,162,178],
[331,169,0,162,178,331,331,178],
[340,169,178,0,178,331,331,178],
[162,0,162,162,0,162,162,9],
[171,9,9,9,178,0,9,9],
[340,178,9,9,178,331,0,178],
[162,162,162,162,331,331,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,160,175,166,187,176,180],
[172,0,184,186,154,203,201,181],
[180,156,0,184,173,199,192,194],
[165,154,156,0,157,183,186,183],
[174,186,167,183,0,208,194,197],
[153,137,141,157,132,0,179,156],
[164,139,148,154,146,161,0,155],
[160,159,146,157,143,184,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,104,261,104,6,195,104],
[334,0,189,261,224,120,189,268],
[236,151,0,213,274,170,239,340],
[79,79,127,0,133,29,148,177],
[236,116,66,207,0,79,141,236],
[334,220,170,311,261,0,239,311],
[145,151,101,192,199,101,0,249],
[236,72,0,163,104,29,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,148,168,156,155,172,150],
[174,0,150,156,164,152,165,153],
[192,190,0,183,167,168,191,180],
[172,184,157,0,170,174,170,176],
[184,176,173,170,0,171,179,169],
[185,188,172,166,169,0,177,177],
[168,175,149,170,161,163,0,154],
[190,187,160,164,171,163,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,178,170,176,171,167,155],
[177,0,153,158,155,161,159,138],
[162,187,0,172,164,173,168,172],
[170,182,168,0,182,167,180,165],
[164,185,176,158,0,178,184,157],
[169,179,167,173,162,0,172,148],
[173,181,172,160,156,168,0,158],
[185,202,168,175,183,192,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,194,176,156,171,169,156],
[180,0,179,172,166,174,176,165],
[146,161,0,156,156,148,162,158],
[164,168,184,0,169,168,188,174],
[184,174,184,171,0,172,168,167],
[169,166,192,172,168,0,186,174],
[171,164,178,152,172,154,0,161],
[184,175,182,166,173,166,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,179,189,176,170,175,190],
[164,0,155,185,177,167,168,191],
[161,185,0,199,173,174,171,188],
[151,155,141,0,154,168,163,154],
[164,163,167,186,0,171,162,185],
[170,173,166,172,169,0,180,185],
[165,172,169,177,178,160,0,194],
[150,149,152,186,155,155,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,179,157,176,160,155,161],
[175,0,169,154,180,154,152,169],
[161,171,0,148,161,153,160,155],
[183,186,192,0,184,170,188,179],
[164,160,179,156,0,160,166,163],
[180,186,187,170,180,0,173,170],
[185,188,180,152,174,167,0,173],
[179,171,185,161,177,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,243,245,185,147,136,241],
[136,0,199,197,181,203,167,156],
[97,141,0,211,182,138,141,156],
[95,143,129,0,142,132,114,193],
[155,159,158,198,0,194,170,144],
[193,137,202,208,146,0,123,158],
[204,173,199,226,170,217,0,167],
[99,184,184,147,196,182,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,158,153,182,154,179,166],
[171,0,165,157,175,144,178,181],
[182,175,0,169,174,160,185,170],
[187,183,171,0,170,184,199,176],
[158,165,166,170,0,174,172,170],
[186,196,180,156,166,0,188,178],
[161,162,155,141,168,152,0,156],
[174,159,170,164,170,162,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,171,182,218,148,170,159],
[158,0,170,155,165,166,187,174],
[169,170,0,176,154,151,193,170],
[158,185,164,0,149,174,163,183],
[122,175,186,191,0,133,169,168],
[192,174,189,166,207,0,205,179],
[170,153,147,177,171,135,0,165],
[181,166,170,157,172,161,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,172,172,153,166,156,159],
[180,0,185,187,160,178,160,179],
[168,155,0,201,163,185,145,176],
[168,153,139,0,148,179,170,160],
[187,180,177,192,0,195,166,178],
[174,162,155,161,145,0,150,168],
[184,180,195,170,174,190,0,192],
[181,161,164,180,162,172,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,132,161,167,163,180,155],
[215,0,161,181,160,197,200,178],
[208,179,0,174,172,167,221,177],
[179,159,166,0,153,179,194,183],
[173,180,168,187,0,187,205,178],
[177,143,173,161,153,0,188,159],
[160,140,119,146,135,152,0,150],
[185,162,163,157,162,181,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,179,171,169,156,171,163],
[184,0,170,168,189,177,169,175],
[161,170,0,159,172,157,157,175],
[169,172,181,0,185,184,192,200],
[171,151,168,155,0,162,158,162],
[184,163,183,156,178,0,163,165],
[169,171,183,148,182,177,0,157],
[177,165,165,140,178,175,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,172,146,204,171,186,188],
[192,0,155,155,165,138,167,146],
[168,185,0,189,135,166,189,133],
[194,185,151,0,103,163,174,104],
[136,175,205,237,0,188,220,179],
[169,202,174,177,152,0,212,174],
[154,173,151,166,120,128,0,160],
[152,194,207,236,161,166,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,157,162,158,173,173,163],
[156,0,143,142,157,169,164,161],
[183,197,0,157,194,173,185,170],
[178,198,183,0,165,194,185,182],
[182,183,146,175,0,186,162,181],
[167,171,167,146,154,0,165,167],
[167,176,155,155,178,175,0,167],
[177,179,170,158,159,173,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,174,178,182,173,170,172],
[160,0,167,177,180,183,175,167],
[166,173,0,164,154,164,175,179],
[162,163,176,0,158,176,171,172],
[158,160,186,182,0,175,187,172],
[167,157,176,164,165,0,189,179],
[170,165,165,169,153,151,0,171],
[168,173,161,168,168,161,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,133,183,194,134,152,207],
[143,0,117,156,134,103,117,168],
[207,223,0,219,165,184,223,233],
[157,184,121,0,184,167,156,210],
[146,206,175,156,0,161,200,208],
[206,237,156,173,179,0,181,213],
[188,223,117,184,140,159,0,192],
[133,172,107,130,132,127,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,210,170,180,170,168,209],
[163,0,201,181,206,203,167,191],
[130,139,0,149,138,168,145,169],
[170,159,191,0,185,186,173,237],
[160,134,202,155,0,182,145,173],
[170,137,172,154,158,0,154,202],
[172,173,195,167,195,186,0,192],
[131,149,171,103,167,138,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,221,206,159,253,191,221],
[87,0,87,87,87,149,119,87],
[119,253,0,119,206,181,119,159],
[134,253,221,0,221,253,191,221],
[181,253,134,119,0,181,191,221],
[87,191,159,87,159,0,191,159],
[149,221,221,149,149,149,0,221],
[119,253,181,119,119,181,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,171,165,167,160,163,158],
[160,0,161,160,152,160,156,148],
[169,179,0,166,167,150,163,151],
[175,180,174,0,167,170,166,162],
[173,188,173,173,0,171,181,161],
[180,180,190,170,169,0,177,170],
[177,184,177,174,159,163,0,163],
[182,192,189,178,179,170,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,178,172,170,201,163,175],
[156,0,161,169,158,174,170,167],
[162,179,0,166,172,192,176,172],
[168,171,174,0,157,194,170,178],
[170,182,168,183,0,195,173,164],
[139,166,148,146,145,0,153,157],
[177,170,164,170,167,187,0,172],
[165,173,168,162,176,183,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,163,177,177,164,178,174],
[183,0,179,179,168,169,188,157],
[177,161,0,173,188,180,196,173],
[163,161,167,0,169,173,183,173],
[163,172,152,171,0,161,177,165],
[176,171,160,167,179,0,194,171],
[162,152,144,157,163,146,0,161],
[166,183,167,167,175,169,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,167,173,173,171,164,160],
[155,0,166,153,175,157,178,165],
[173,174,0,162,179,175,182,173],
[167,187,178,0,185,178,193,173],
[167,165,161,155,0,166,174,159],
[169,183,165,162,174,0,179,170],
[176,162,158,147,166,161,0,160],
[180,175,167,167,181,170,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,177,149,198,195,171,181],
[172,0,165,175,183,207,185,187],
[163,175,0,181,189,219,176,202],
[191,165,159,0,163,191,174,171],
[142,157,151,177,0,173,153,151],
[145,133,121,149,167,0,132,147],
[169,155,164,166,187,208,0,178],
[159,153,138,169,189,193,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,152,149,156,156,156,164],
[180,0,162,175,168,157,166,171],
[188,178,0,177,177,160,179,173],
[191,165,163,0,172,171,160,178],
[184,172,163,168,0,163,173,170],
[184,183,180,169,177,0,181,176],
[184,174,161,180,167,159,0,178],
[176,169,167,162,170,164,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,163,129,188,160,162,159],
[177,0,163,160,177,142,175,158],
[177,177,0,158,179,168,159,178],
[211,180,182,0,182,169,163,189],
[152,163,161,158,0,138,156,158],
[180,198,172,171,202,0,181,170],
[178,165,181,177,184,159,0,166],
[181,182,162,151,182,170,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,159,173,143,156,165,181],
[177,0,160,188,162,171,184,165],
[181,180,0,189,170,178,187,177],
[167,152,151,0,152,161,159,173],
[197,178,170,188,0,175,189,193],
[184,169,162,179,165,0,160,186],
[175,156,153,181,151,180,0,171],
[159,175,163,167,147,154,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,174,167,167,171,166,170],
[176,0,181,180,155,180,175,169],
[166,159,0,173,171,168,171,169],
[173,160,167,0,151,168,176,184],
[173,185,169,189,0,188,181,193],
[169,160,172,172,152,0,164,175],
[174,165,169,164,159,176,0,172],
[170,171,171,156,147,165,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,174,149,169,250,147,128],
[69,0,137,67,142,123,81,149],
[166,203,0,158,109,217,59,127],
[191,273,182,0,194,230,122,180],
[171,198,231,146,0,201,171,105],
[90,217,123,110,139,0,115,124],
[193,259,281,218,169,225,0,229],
[212,191,213,160,235,216,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,174,183,181,192,174,156],
[149,0,145,189,163,154,145,159],
[166,195,0,210,194,170,164,170],
[157,151,130,0,153,147,125,163],
[159,177,146,187,0,174,150,159],
[148,186,170,193,166,0,166,175],
[166,195,176,215,190,174,0,193],
[184,181,170,177,181,165,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,200,170,188,205,153,230],
[164,0,188,147,136,179,149,165],
[140,152,0,134,142,158,125,155],
[170,193,206,0,212,171,175,156],
[152,204,198,128,0,159,131,160],
[135,161,182,169,181,0,148,220],
[187,191,215,165,209,192,0,205],
[110,175,185,184,180,120,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,157,173,164,174,166,167],
[177,0,167,177,178,169,170,169],
[183,173,0,184,164,176,164,165],
[167,163,156,0,166,173,166,177],
[176,162,176,174,0,181,163,168],
[166,171,164,167,159,0,156,163],
[174,170,176,174,177,184,0,181],
[173,171,175,163,172,177,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,176,153,155,192,166,177],
[167,0,171,134,162,186,168,182],
[164,169,0,138,163,162,169,163],
[187,206,202,0,168,198,205,180],
[185,178,177,172,0,188,161,162],
[148,154,178,142,152,0,171,152],
[174,172,171,135,179,169,0,170],
[163,158,177,160,178,188,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,177,182,166,186,179,182],
[160,0,174,176,162,181,172,176],
[163,166,0,166,154,182,169,169],
[158,164,174,0,168,179,166,178],
[174,178,186,172,0,179,174,166],
[154,159,158,161,161,0,171,174],
[161,168,171,174,166,169,0,165],
[158,164,171,162,174,166,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,176,183,175,177,156,159],
[177,0,171,179,155,179,156,166],
[164,169,0,154,175,193,148,162],
[157,161,186,0,162,166,134,154],
[165,185,165,178,0,177,171,160],
[163,161,147,174,163,0,150,172],
[184,184,192,206,169,190,0,171],
[181,174,178,186,180,168,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,173,160,172,187,192,168],
[170,0,186,173,153,190,184,164],
[167,154,0,167,174,179,179,172],
[180,167,173,0,173,207,188,208],
[168,187,166,167,0,201,171,187],
[153,150,161,133,139,0,154,154],
[148,156,161,152,169,186,0,179],
[172,176,168,132,153,186,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,132,236,240,125,169,191],
[130,0,168,231,177,123,213,170],
[208,172,0,270,198,164,183,202],
[104,109,70,0,128,95,102,125],
[100,163,142,212,0,154,128,137],
[215,217,176,245,186,0,206,164],
[171,127,157,238,212,134,0,165],
[149,170,138,215,203,176,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,235,167,211,171,191,229],
[91,0,177,58,31,153,95,164],
[105,163,0,105,65,96,47,147],
[173,282,235,0,160,262,142,211],
[129,309,275,180,0,242,233,231],
[169,187,244,78,98,0,78,140],
[149,245,293,198,107,262,0,262],
[111,176,193,129,109,200,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,166,135,140,141,128,196],
[210,0,232,178,182,246,140,198],
[174,108,0,89,147,173,112,143],
[205,162,251,0,208,247,180,200],
[200,158,193,132,0,163,130,206],
[199,94,167,93,177,0,114,148],
[212,200,228,160,210,226,0,223],
[144,142,197,140,134,192,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,162,165,164,147,156,160],
[173,0,174,174,161,170,167,167],
[178,166,0,162,163,165,176,158],
[175,166,178,0,162,163,177,158],
[176,179,177,178,0,162,171,163],
[193,170,175,177,178,0,176,168],
[184,173,164,163,169,164,0,182],
[180,173,182,182,177,172,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,166,149,169,179,164,173],
[164,0,182,172,181,192,171,173],
[174,158,0,167,192,185,187,147],
[191,168,173,0,195,194,165,164],
[171,159,148,145,0,171,154,154],
[161,148,155,146,169,0,149,160],
[176,169,153,175,186,191,0,183],
[167,167,193,176,186,180,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,171,163,188,177,198,171],
[162,0,156,169,163,170,179,165],
[169,184,0,186,169,181,207,167],
[177,171,154,0,170,164,165,150],
[152,177,171,170,0,177,184,174],
[163,170,159,176,163,0,188,167],
[142,161,133,175,156,152,0,154],
[169,175,173,190,166,173,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,166,155,160,333,278,221],
[197,0,125,204,180,261,236,261],
[174,215,0,146,157,243,155,180],
[185,136,194,0,251,271,252,254],
[180,160,183,89,0,271,216,187],
[7,79,97,69,69,0,134,43],
[62,104,185,88,124,206,0,124],
[119,79,160,86,153,297,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,204,195,185,159,195,217],
[148,0,181,188,172,154,171,200],
[136,159,0,165,159,163,191,197],
[145,152,175,0,145,174,174,155],
[155,168,181,195,0,174,165,188],
[181,186,177,166,166,0,174,213],
[145,169,149,166,175,166,0,195],
[123,140,143,185,152,127,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,170,192,181,162,178,169],
[179,0,181,186,181,180,182,160],
[170,159,0,183,186,162,167,159],
[148,154,157,0,169,169,171,173],
[159,159,154,171,0,158,170,167],
[178,160,178,171,182,0,186,165],
[162,158,173,169,170,154,0,161],
[171,180,181,167,173,175,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,168,173,162,165,155,185],
[173,0,177,188,175,164,173,182],
[172,163,0,178,170,183,148,186],
[167,152,162,0,177,172,143,169],
[178,165,170,163,0,184,148,177],
[175,176,157,168,156,0,146,168],
[185,167,192,197,192,194,0,202],
[155,158,154,171,163,172,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,184,194,198,170,186,169],
[163,0,184,182,195,169,179,172],
[156,156,0,184,174,160,174,170],
[146,158,156,0,170,146,168,158],
[142,145,166,170,0,159,156,164],
[170,171,180,194,181,0,183,177],
[154,161,166,172,184,157,0,169],
[171,168,170,182,176,163,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,162,156,168,159,158,147],
[174,0,178,183,178,169,182,177],
[178,162,0,179,170,167,143,157],
[184,157,161,0,181,166,162,145],
[172,162,170,159,0,177,167,168],
[181,171,173,174,163,0,161,157],
[182,158,197,178,173,179,0,156],
[193,163,183,195,172,183,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,156,169,162,175,155,144],
[174,0,206,180,175,164,182,158],
[184,134,0,134,132,144,178,175],
[171,160,206,0,161,168,199,153],
[178,165,208,179,0,146,204,168],
[165,176,196,172,194,0,200,162],
[185,158,162,141,136,140,0,160],
[196,182,165,187,172,178,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,159,152,178,158,167,173],
[172,0,154,164,153,173,170,165],
[181,186,0,181,170,167,168,168],
[188,176,159,0,173,173,165,180],
[162,187,170,167,0,165,181,174],
[182,167,173,167,175,0,167,170],
[173,170,172,175,159,173,0,173],
[167,175,172,160,166,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,163,175,168,163,179,178],
[179,0,176,170,184,176,185,178],
[177,164,0,171,168,162,187,181],
[165,170,169,0,186,176,180,179],
[172,156,172,154,0,175,171,170],
[177,164,178,164,165,0,191,170],
[161,155,153,160,169,149,0,159],
[162,162,159,161,170,170,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,165,185,181,175,179,175],
[147,0,161,180,176,162,164,166],
[175,179,0,180,170,174,176,176],
[155,160,160,0,162,169,148,155],
[159,164,170,178,0,169,155,172],
[165,178,166,171,171,0,171,177],
[161,176,164,192,185,169,0,175],
[165,174,164,185,168,163,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,164,155,148,182,155,142],
[156,0,154,140,137,186,164,133],
[176,186,0,174,152,191,167,171],
[185,200,166,0,166,202,184,129],
[192,203,188,174,0,198,172,156],
[158,154,149,138,142,0,176,131],
[185,176,173,156,168,164,0,148],
[198,207,169,211,184,209,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,169,160,177,176,170,173],
[167,0,160,172,174,172,165,173],
[171,180,0,163,186,177,167,175],
[180,168,177,0,186,172,172,172],
[163,166,154,154,0,169,158,154],
[164,168,163,168,171,0,162,160],
[170,175,173,168,182,178,0,166],
[167,167,165,168,186,180,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,174,171,164,179,159,161],
[186,0,194,167,181,167,171,167],
[166,146,0,161,160,162,158,141],
[169,173,179,0,153,175,159,164],
[176,159,180,187,0,159,161,169],
[161,173,178,165,181,0,180,182],
[181,169,182,181,179,160,0,166],
[179,173,199,176,171,158,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,171,169,168,155,156,167],
[169,0,166,185,169,159,179,172],
[169,174,0,183,157,176,163,165],
[171,155,157,0,156,160,160,155],
[172,171,183,184,0,170,173,175],
[185,181,164,180,170,0,178,159],
[184,161,177,180,167,162,0,173],
[173,168,175,185,165,181,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,167,177,188,182,200,162],
[152,0,141,146,158,130,165,164],
[173,199,0,169,194,168,179,171],
[163,194,171,0,198,153,170,150],
[152,182,146,142,0,118,160,135],
[158,210,172,187,222,0,195,178],
[140,175,161,170,180,145,0,140],
[178,176,169,190,205,162,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,166,164,183,201,208,174],
[138,0,133,159,143,167,184,146],
[174,207,0,187,166,204,186,177],
[176,181,153,0,156,185,210,162],
[157,197,174,184,0,174,200,157],
[139,173,136,155,166,0,177,163],
[132,156,154,130,140,163,0,142],
[166,194,163,178,183,177,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,156,183,173,186,166,202],
[138,0,138,146,186,177,150,154],
[184,202,0,151,182,168,170,165],
[157,194,189,0,177,181,171,168],
[167,154,158,163,0,158,162,153],
[154,163,172,159,182,0,144,177],
[174,190,170,169,178,196,0,168],
[138,186,175,172,187,163,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,164,156,171,160,154,160],
[163,0,155,163,169,144,165,164],
[176,185,0,175,182,170,173,179],
[184,177,165,0,185,163,174,164],
[169,171,158,155,0,151,168,158],
[180,196,170,177,189,0,189,177],
[186,175,167,166,172,151,0,157],
[180,176,161,176,182,163,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,177,171,177,179,178,152],
[164,0,162,172,166,187,160,180],
[163,178,0,173,188,189,183,173],
[169,168,167,0,171,186,179,174],
[163,174,152,169,0,158,151,138],
[161,153,151,154,182,0,167,179],
[162,180,157,161,189,173,0,157],
[188,160,167,166,202,161,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,203,184,170,186,174,176],
[156,0,201,152,141,177,177,158],
[137,139,0,141,138,170,138,141],
[156,188,199,0,157,160,152,190],
[170,199,202,183,0,170,183,187],
[154,163,170,180,170,0,160,146],
[166,163,202,188,157,180,0,178],
[164,182,199,150,153,194,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,202,153,195,176,194,183],
[170,0,186,170,177,169,190,159],
[138,154,0,134,197,161,184,140],
[187,170,206,0,184,175,182,203],
[145,163,143,156,0,147,214,156],
[164,171,179,165,193,0,187,160],
[146,150,156,158,126,153,0,151],
[157,181,200,137,184,180,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,195,161,169,154,164,203],
[151,0,152,165,206,148,173,186],
[145,188,0,163,184,179,182,179],
[179,175,177,0,196,131,179,200],
[171,134,156,144,0,134,166,150],
[186,192,161,209,206,0,198,199],
[176,167,158,161,174,142,0,193],
[137,154,161,140,190,141,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,175,172,170,174,170,178],
[184,0,172,166,173,182,177,170],
[165,168,0,165,179,182,192,177],
[168,174,175,0,175,191,175,176],
[170,167,161,165,0,182,163,158],
[166,158,158,149,158,0,154,167],
[170,163,148,165,177,186,0,158],
[162,170,163,164,182,173,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,160,165,182,170,172,178],
[172,0,188,162,180,172,165,175],
[180,152,0,175,164,164,173,172],
[175,178,165,0,163,169,169,170],
[158,160,176,177,0,173,181,172],
[170,168,176,171,167,0,165,174],
[168,175,167,171,159,175,0,178],
[162,165,168,170,168,166,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,166,178,155,157,167,151],
[177,0,176,179,169,177,173,172],
[174,164,0,181,159,165,180,164],
[162,161,159,0,144,175,167,154],
[185,171,181,196,0,176,183,167],
[183,163,175,165,164,0,173,160],
[173,167,160,173,157,167,0,163],
[189,168,176,186,173,180,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,170,164,165,159,176,168],
[161,0,169,178,161,165,170,157],
[170,171,0,180,168,160,158,159],
[176,162,160,0,161,159,154,170],
[175,179,172,179,0,155,167,159],
[181,175,180,181,185,0,166,174],
[164,170,182,186,173,174,0,179],
[172,183,181,170,181,166,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,175,191,174,168,181,171],
[170,0,170,184,170,179,179,170],
[165,170,0,180,165,170,175,167],
[149,156,160,0,168,167,158,168],
[166,170,175,172,0,172,174,165],
[172,161,170,173,168,0,168,162],
[159,161,165,182,166,172,0,161],
[169,170,173,172,175,178,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,187,271,192,182,230,194],
[184,0,169,232,165,221,204,208],
[153,171,0,232,195,155,199,177],
[69,108,108,0,140,166,133,90],
[148,175,145,200,0,200,230,202],
[158,119,185,174,140,0,205,93],
[110,136,141,207,110,135,0,122],
[146,132,163,250,138,247,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,158,168,147,167,161,159],
[180,0,168,174,155,161,172,168],
[182,172,0,169,170,171,162,178],
[172,166,171,0,161,174,164,172],
[193,185,170,179,0,173,166,177],
[173,179,169,166,167,0,155,170],
[179,168,178,176,174,185,0,179],
[181,172,162,168,163,170,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,173,158,162,139,185,160],
[188,0,169,158,183,168,180,167],
[167,171,0,156,171,136,180,170],
[182,182,184,0,158,152,181,169],
[178,157,169,182,0,155,163,163],
[201,172,204,188,185,0,163,214],
[155,160,160,159,177,177,0,175],
[180,173,170,171,177,126,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,179,178,180,189,177,169],
[152,0,165,158,169,182,178,166],
[161,175,0,170,169,180,172,160],
[162,182,170,0,147,180,177,179],
[160,171,171,193,0,184,198,181],
[151,158,160,160,156,0,167,164],
[163,162,168,163,142,173,0,161],
[171,174,180,161,159,176,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,177,215,221,201,166,194],
[134,0,185,170,197,174,174,148],
[163,155,0,173,163,191,165,141],
[125,170,167,0,178,196,162,153],
[119,143,177,162,0,183,123,141],
[139,166,149,144,157,0,148,119],
[174,166,175,178,217,192,0,170],
[146,192,199,187,199,221,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,174,165,167,178,163,168],
[172,0,174,179,181,177,168,166],
[166,166,0,183,166,175,167,163],
[175,161,157,0,157,175,165,164],
[173,159,174,183,0,177,170,175],
[162,163,165,165,163,0,159,155],
[177,172,173,175,170,181,0,175],
[172,174,177,176,165,185,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,147,178,205,155,166,168],
[165,0,163,148,209,175,166,162],
[193,177,0,181,176,157,174,167],
[162,192,159,0,171,157,174,172],
[135,131,164,169,0,152,167,157],
[185,165,183,183,188,0,163,178],
[174,174,166,166,173,177,0,170],
[172,178,173,168,183,162,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,163,157,162,174,160,162],
[177,0,179,170,176,183,168,165],
[177,161,0,160,162,176,161,167],
[183,170,180,0,170,181,172,176],
[178,164,178,170,0,174,167,167],
[166,157,164,159,166,0,152,158],
[180,172,179,168,173,188,0,180],
[178,175,173,164,173,182,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,143,182,155,188,202,189],
[145,0,156,164,156,161,171,169],
[197,184,0,161,177,182,182,151],
[158,176,179,0,158,167,172,177],
[185,184,163,182,0,190,200,194],
[152,179,158,173,150,0,158,173],
[138,169,158,168,140,182,0,151],
[151,171,189,163,146,167,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,178,182,191,181,161,171],
[157,0,179,170,175,181,158,160],
[162,161,0,171,171,184,141,158],
[158,170,169,0,174,172,152,156],
[149,165,169,166,0,168,154,147],
[159,159,156,168,172,0,149,143],
[179,182,199,188,186,191,0,169],
[169,180,182,184,193,197,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,175,166,175,194,176,200],
[161,0,152,166,178,161,158,149],
[165,188,0,186,168,172,161,157],
[174,174,154,0,196,165,184,196],
[165,162,172,144,0,178,164,152],
[146,179,168,175,162,0,187,197],
[164,182,179,156,176,153,0,148],
[140,191,183,144,188,143,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,147,144,156,209,84,129],
[147,0,155,130,159,151,116,122],
[193,185,0,183,190,198,170,180],
[196,210,157,0,191,224,141,144],
[184,181,150,149,0,186,89,165],
[131,189,142,116,154,0,107,150],
[256,224,170,199,251,233,0,186],
[211,218,160,196,175,190,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,147,159,181,174,191,176],
[152,0,142,146,163,176,166,164],
[193,198,0,178,197,205,208,160],
[181,194,162,0,178,185,194,148],
[159,177,143,162,0,180,174,160],
[166,164,135,155,160,0,177,165],
[149,174,132,146,166,163,0,149],
[164,176,180,192,180,175,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,166,160,176,163,170,165],
[174,0,183,173,185,168,185,178],
[174,157,0,169,184,167,176,190],
[180,167,171,0,170,163,168,169],
[164,155,156,170,0,184,186,173],
[177,172,173,177,156,0,168,180],
[170,155,164,172,154,172,0,157],
[175,162,150,171,167,160,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,177,150,166,172,146,170],
[170,0,165,161,147,181,170,184],
[163,175,0,145,155,173,144,162],
[190,179,195,0,163,190,170,166],
[174,193,185,177,0,195,185,170],
[168,159,167,150,145,0,167,164],
[194,170,196,170,155,173,0,161],
[170,156,178,174,170,176,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,172,180,177,166,191,176],
[161,0,158,167,161,166,171,180],
[168,182,0,165,177,186,173,178],
[160,173,175,0,174,176,163,177],
[163,179,163,166,0,170,175,179],
[174,174,154,164,170,0,167,172],
[149,169,167,177,165,173,0,172],
[164,160,162,163,161,168,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,167,193,171,167,170,187],
[151,0,154,167,162,170,168,156],
[173,186,0,189,181,162,169,186],
[147,173,151,0,157,153,161,173],
[169,178,159,183,0,155,164,177],
[173,170,178,187,185,0,171,192],
[170,172,171,179,176,169,0,175],
[153,184,154,167,163,148,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,164,164,158,169,168,175],
[154,0,166,163,167,173,163,181],
[176,174,0,166,169,167,157,180],
[176,177,174,0,173,168,177,175],
[182,173,171,167,0,179,171,172],
[171,167,173,172,161,0,171,183],
[172,177,183,163,169,169,0,182],
[165,159,160,165,168,157,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,169,167,163,154,171,168],
[166,0,177,176,186,156,181,161],
[171,163,0,167,148,161,158,161],
[173,164,173,0,162,163,183,161],
[177,154,192,178,0,177,175,182],
[186,184,179,177,163,0,172,168],
[169,159,182,157,165,168,0,169],
[172,179,179,179,158,172,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,151,156,143,161,170,175],
[180,0,164,172,167,177,184,177],
[189,176,0,167,157,185,158,174],
[184,168,173,0,185,185,169,188],
[197,173,183,155,0,187,198,198],
[179,163,155,155,153,0,172,167],
[170,156,182,171,142,168,0,199],
[165,163,166,152,142,173,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,184,161,174,175,159,163],
[154,0,152,135,154,175,130,149],
[156,188,0,135,184,174,162,162],
[179,205,205,0,183,207,176,168],
[166,186,156,157,0,171,150,151],
[165,165,166,133,169,0,152,162],
[181,210,178,164,190,188,0,176],
[177,191,178,172,189,178,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,186,175,176,184,190,197],
[174,0,183,181,178,162,170,186],
[154,157,0,183,168,176,194,210],
[165,159,157,0,162,178,174,174],
[164,162,172,178,0,159,171,188],
[156,178,164,162,181,0,190,182],
[150,170,146,166,169,150,0,196],
[143,154,130,166,152,158,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,168,171,174,170,168,169],
[184,0,176,176,174,169,163,177],
[172,164,0,177,177,160,174,182],
[169,164,163,0,175,166,165,169],
[166,166,163,165,0,178,171,166],
[170,171,180,174,162,0,176,163],
[172,177,166,175,169,164,0,170],
[171,163,158,171,174,177,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,169,173,155,172,160,165],
[167,0,176,164,165,166,170,160],
[171,164,0,190,165,165,157,163],
[167,176,150,0,178,175,162,163],
[185,175,175,162,0,191,161,176],
[168,174,175,165,149,0,160,155],
[180,170,183,178,179,180,0,185],
[175,180,177,177,164,185,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,178,175,201,180,185,160],
[174,0,167,174,209,180,172,176],
[162,173,0,160,205,187,177,177],
[165,166,180,0,195,178,165,167],
[139,131,135,145,0,135,143,135],
[160,160,153,162,205,0,155,156],
[155,168,163,175,197,185,0,135],
[180,164,163,173,205,184,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,177,179,170,165,168,180],
[174,0,181,162,182,166,188,180],
[163,159,0,171,158,180,168,179],
[161,178,169,0,157,174,183,155],
[170,158,182,183,0,188,187,165],
[175,174,160,166,152,0,157,153],
[172,152,172,157,153,183,0,160],
[160,160,161,185,175,187,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,186,190,186,175,192,168],
[157,0,170,155,178,165,182,165],
[154,170,0,166,181,166,186,155],
[150,185,174,0,173,179,188,173],
[154,162,159,167,0,161,180,151],
[165,175,174,161,179,0,197,157],
[148,158,154,152,160,143,0,150],
[172,175,185,167,189,183,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,154,170,224,133,119,173],
[166,0,154,166,199,162,173,154],
[186,186,0,183,251,159,164,201],
[170,174,157,0,158,154,138,161],
[116,141,89,182,0,129,121,142],
[207,178,181,186,211,0,152,176],
[221,167,176,202,219,188,0,202],
[167,186,139,179,198,164,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,169,170,178,178,177,177],
[159,0,183,179,175,174,168,173],
[171,157,0,173,158,167,168,177],
[170,161,167,0,164,177,170,169],
[162,165,182,176,0,169,167,165],
[162,166,173,163,171,0,184,156],
[163,172,172,170,173,156,0,171],
[163,167,163,171,175,184,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,151,172,173,153,169,157],
[198,0,182,197,177,140,180,162],
[189,158,0,183,148,156,170,169],
[168,143,157,0,146,140,168,152],
[167,163,192,194,0,164,176,173],
[187,200,184,200,176,0,184,160],
[171,160,170,172,164,156,0,157],
[183,178,171,188,167,180,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,154,179,167,166,171,174],
[187,0,170,172,176,152,163,167],
[186,170,0,190,174,177,174,178],
[161,168,150,0,155,151,168,172],
[173,164,166,185,0,156,172,175],
[174,188,163,189,184,0,190,189],
[169,177,166,172,168,150,0,171],
[166,173,162,168,165,151,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,153,158,177,156,156,171],
[174,0,176,170,187,167,178,179],
[187,164,0,186,165,168,181,178],
[182,170,154,0,177,164,157,177],
[163,153,175,163,0,160,157,163],
[184,173,172,176,180,0,170,163],
[184,162,159,183,183,170,0,170],
[169,161,162,163,177,177,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,166,157,189,161,154,166],
[183,0,183,183,192,176,178,166],
[174,157,0,195,204,174,179,181],
[183,157,145,0,188,172,172,169],
[151,148,136,152,0,145,155,149],
[179,164,166,168,195,0,174,170],
[186,162,161,168,185,166,0,159],
[174,174,159,171,191,170,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,171,177,189,189,174,171],
[172,0,195,166,173,179,182,178],
[169,145,0,166,172,163,160,166],
[163,174,174,0,172,187,183,174],
[151,167,168,168,0,163,173,155],
[151,161,177,153,177,0,177,155],
[166,158,180,157,167,163,0,157],
[169,162,174,166,185,185,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,178,186,168,185,172,181],
[162,0,179,182,162,163,157,172],
[162,161,0,170,170,165,168,165],
[154,158,170,0,158,165,155,180],
[172,178,170,182,0,188,176,173],
[155,177,175,175,152,0,152,171],
[168,183,172,185,164,188,0,187],
[159,168,175,160,167,169,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,150,144,155,172,177,158],
[181,0,169,155,180,175,170,166],
[190,171,0,171,160,166,182,157],
[196,185,169,0,168,188,191,188],
[185,160,180,172,0,174,176,165],
[168,165,174,152,166,0,184,171],
[163,170,158,149,164,156,0,158],
[182,174,183,152,175,169,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,184,171,169,189,189,183],
[152,0,166,145,183,173,158,175],
[156,174,0,163,163,166,177,181],
[169,195,177,0,173,202,193,190],
[171,157,177,167,0,165,162,163],
[151,167,174,138,175,0,166,165],
[151,182,163,147,178,174,0,183],
[157,165,159,150,177,175,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,166,206,171,200,191,185],
[165,0,167,204,176,182,182,162],
[174,173,0,203,180,186,162,185],
[134,136,137,0,163,157,173,136],
[169,164,160,177,0,178,190,177],
[140,158,154,183,162,0,156,171],
[149,158,178,167,150,184,0,167],
[155,178,155,204,163,169,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,134,211,131,208,89,81],
[182,0,182,259,124,153,124,74],
[206,158,0,216,187,116,187,148],
[129,81,124,0,89,89,89,71],
[209,216,153,251,0,148,71,219],
[132,187,224,251,192,0,103,142],
[251,216,153,251,269,237,0,219],
[259,266,192,269,121,198,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,169,171,161,174,174,179],
[175,0,174,165,160,183,177,192],
[171,166,0,160,162,165,158,157],
[169,175,180,0,172,187,176,166],
[179,180,178,168,0,170,160,183],
[166,157,175,153,170,0,154,178],
[166,163,182,164,180,186,0,173],
[161,148,183,174,157,162,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,181,170,182,185,163,169],
[155,0,152,153,177,172,143,144],
[159,188,0,177,189,197,167,173],
[170,187,163,0,193,178,154,161],
[158,163,151,147,0,180,147,151],
[155,168,143,162,160,0,155,145],
[177,197,173,186,193,185,0,170],
[171,196,167,179,189,195,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,181,184,168,164,183,175],
[161,0,170,166,154,162,168,149],
[159,170,0,180,171,170,176,146],
[156,174,160,0,160,154,181,156],
[172,186,169,180,0,164,182,168],
[176,178,170,186,176,0,177,168],
[157,172,164,159,158,163,0,159],
[165,191,194,184,172,172,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,176,170,177,166,177,189],
[170,0,188,165,167,176,184,167],
[164,152,0,154,164,175,171,170],
[170,175,186,0,167,172,167,167],
[163,173,176,173,0,156,174,163],
[174,164,165,168,184,0,177,165],
[163,156,169,173,166,163,0,160],
[151,173,170,173,177,175,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,176,172,170,170,176,169],
[168,0,142,159,148,159,157,147],
[164,198,0,186,187,172,192,178],
[168,181,154,0,166,158,169,169],
[170,192,153,174,0,173,183,166],
[170,181,168,182,167,0,182,177],
[164,183,148,171,157,158,0,160],
[171,193,162,171,174,163,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,179,172,178,162,165,176],
[161,0,166,162,161,147,162,177],
[161,174,0,175,178,181,162,160],
[168,178,165,0,171,173,170,184],
[162,179,162,169,0,162,172,171],
[178,193,159,167,178,0,166,190],
[175,178,178,170,168,174,0,175],
[164,163,180,156,169,150,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,168,190,174,180,172,173],
[160,0,164,163,151,175,171,176],
[172,176,0,174,158,195,173,182],
[150,177,166,0,171,180,169,162],
[166,189,182,169,0,178,171,162],
[160,165,145,160,162,0,159,158],
[168,169,167,171,169,181,0,171],
[167,164,158,178,178,182,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,161,160,170,264,198,208],
[194,0,158,225,184,257,201,196],
[179,182,0,167,205,206,182,179],
[180,115,173,0,185,194,200,221],
[170,156,135,155,0,236,170,195],
[76,83,134,146,104,0,135,105],
[142,139,158,140,170,205,0,138],
[132,144,161,119,145,235,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,155,196,172,212,136,183],
[148,0,185,167,158,214,174,199],
[185,155,0,205,164,224,159,169],
[144,173,135,0,163,205,143,150],
[168,182,176,177,0,195,149,167],
[128,126,116,135,145,0,120,129],
[204,166,181,197,191,220,0,171],
[157,141,171,190,173,211,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,165,163,160,161,158,148],
[188,0,176,181,173,171,159,165],
[175,164,0,186,173,161,161,179],
[177,159,154,0,155,164,152,149],
[180,167,167,185,0,170,174,177],
[179,169,179,176,170,0,161,158],
[182,181,179,188,166,179,0,144],
[192,175,161,191,163,182,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,165,166,170,182,174,159],
[185,0,186,183,167,198,175,170],
[175,154,0,169,172,184,181,158],
[174,157,171,0,175,176,158,161],
[170,173,168,165,0,164,158,164],
[158,142,156,164,176,0,168,157],
[166,165,159,182,182,172,0,168],
[181,170,182,179,176,183,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,168,145,147,185,191,165],
[159,0,168,146,167,163,178,164],
[172,172,0,149,177,168,190,167],
[195,194,191,0,161,178,231,173],
[193,173,163,179,0,210,219,204],
[155,177,172,162,130,0,202,171],
[149,162,150,109,121,138,0,155],
[175,176,173,167,136,169,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,156,183,162,173,158,157],
[191,0,165,169,171,165,184,175],
[184,175,0,166,158,180,165,184],
[157,171,174,0,188,187,193,198],
[178,169,182,152,0,183,178,196],
[167,175,160,153,157,0,174,177],
[182,156,175,147,162,166,0,177],
[183,165,156,142,144,163,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,172,171,173,165,173,159],
[168,0,157,162,171,161,163,160],
[168,183,0,170,168,175,169,177],
[169,178,170,0,174,163,160,169],
[167,169,172,166,0,157,157,177],
[175,179,165,177,183,0,161,170],
[167,177,171,180,183,179,0,162],
[181,180,163,171,163,170,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,137,168,170,177,186,139],
[160,0,149,147,159,168,164,144],
[203,191,0,182,192,165,187,159],
[172,193,158,0,173,155,180,149],
[170,181,148,167,0,149,173,171],
[163,172,175,185,191,0,168,151],
[154,176,153,160,167,172,0,145],
[201,196,181,191,169,189,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,180,181,179,164,173,174],
[164,0,175,180,173,158,176,165],
[160,165,0,178,163,160,157,163],
[159,160,162,0,174,177,154,178],
[161,167,177,166,0,162,165,173],
[176,182,180,163,178,0,173,188],
[167,164,183,186,175,167,0,187],
[166,175,177,162,167,152,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,171,160,165,170,172,164],
[160,0,176,171,172,182,181,187],
[169,164,0,162,175,166,178,180],
[180,169,178,0,178,170,180,191],
[175,168,165,162,0,166,168,175],
[170,158,174,170,174,0,166,178],
[168,159,162,160,172,174,0,182],
[176,153,160,149,165,162,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,147,171,152,162,151,152],
[179,0,141,205,183,147,193,176],
[193,199,0,162,180,186,194,184],
[169,135,178,0,158,169,158,158],
[188,157,160,182,0,182,179,144],
[178,193,154,171,158,0,153,132],
[189,147,146,182,161,187,0,148],
[188,164,156,182,196,208,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,170,166,175,184,170,165],
[165,0,157,161,162,165,162,163],
[170,183,0,166,175,179,178,176],
[174,179,174,0,174,181,166,167],
[165,178,165,166,0,164,163,160],
[156,175,161,159,176,0,176,173],
[170,178,162,174,177,164,0,161],
[175,177,164,173,180,167,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,165,145,168,166,166,154],
[163,0,168,178,169,164,183,161],
[175,172,0,165,184,175,171,164],
[195,162,175,0,173,181,166,178],
[172,171,156,167,0,161,170,162],
[174,176,165,159,179,0,172,171],
[174,157,169,174,170,168,0,181],
[186,179,176,162,178,169,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,219,182,122,200,234,165],
[135,0,165,176,162,114,172,138],
[121,175,0,193,121,138,174,136],
[158,164,147,0,185,161,191,168],
[218,178,219,155,0,205,237,164],
[140,226,202,179,135,0,246,193],
[106,168,166,149,103,94,0,106],
[175,202,204,172,176,147,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,182,176,183,191,181,149],
[181,0,180,176,192,186,177,169],
[158,160,0,170,189,190,187,168],
[164,164,170,0,189,187,191,176],
[157,148,151,151,0,157,171,157],
[149,154,150,153,183,0,176,163],
[159,163,153,149,169,164,0,141],
[191,171,172,164,183,177,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,158,166,172,177,171,183],
[165,0,153,157,142,168,174,171],
[182,187,0,168,181,178,185,195],
[174,183,172,0,156,167,178,169],
[168,198,159,184,0,165,183,178],
[163,172,162,173,175,0,178,164],
[169,166,155,162,157,162,0,159],
[157,169,145,171,162,176,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,159,178,176,154,174,189],
[155,0,154,185,182,160,183,183],
[181,186,0,180,193,175,164,207],
[162,155,160,0,153,150,154,206],
[164,158,147,187,0,156,157,196],
[186,180,165,190,184,0,192,199],
[166,157,176,186,183,148,0,196],
[151,157,133,134,144,141,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,183,148,139,178,150,171],
[224,0,173,188,177,218,163,181],
[157,167,0,181,165,194,179,164],
[192,152,159,0,156,178,178,156],
[201,163,175,184,0,175,162,188],
[162,122,146,162,165,0,153,154],
[190,177,161,162,178,187,0,162],
[169,159,176,184,152,186,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,165,189,165,181,178,177],
[192,0,159,202,170,195,204,183],
[175,181,0,211,166,193,183,180],
[151,138,129,0,110,156,167,142],
[175,170,174,230,0,192,186,170],
[159,145,147,184,148,0,172,161],
[162,136,157,173,154,168,0,147],
[163,157,160,198,170,179,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,182,184,167,185,175,172],
[163,0,180,176,171,171,171,164],
[158,160,0,164,149,179,161,160],
[156,164,176,0,164,173,159,165],
[173,169,191,176,0,182,180,164],
[155,169,161,167,158,0,159,166],
[165,169,179,181,160,181,0,176],
[168,176,180,175,176,174,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,154,180,179,138,166,176],
[178,0,168,163,179,179,182,172],
[186,172,0,190,182,162,189,173],
[160,177,150,0,177,168,181,162],
[161,161,158,163,0,148,170,157],
[202,161,178,172,192,0,185,186],
[174,158,151,159,170,155,0,171],
[164,168,167,178,183,154,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,176,155,142,159,154,164],
[198,0,181,192,180,169,179,182],
[164,159,0,158,147,142,162,167],
[185,148,182,0,162,157,172,159],
[198,160,193,178,0,173,166,172],
[181,171,198,183,167,0,188,188],
[186,161,178,168,174,152,0,170],
[176,158,173,181,168,152,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,193,168,130,151,139,168],
[175,0,136,171,186,170,138,143],
[147,204,0,118,201,159,158,222],
[172,169,222,0,200,219,187,234],
[210,154,139,140,0,187,144,149],
[189,170,181,121,153,0,168,172],
[201,202,182,153,196,172,0,208],
[172,197,118,106,191,168,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,176,174,188,167,160,181],
[181,0,186,163,177,165,154,176],
[164,154,0,155,170,177,156,176],
[166,177,185,0,167,177,171,175],
[152,163,170,173,0,169,162,162],
[173,175,163,163,171,0,163,175],
[180,186,184,169,178,177,0,176],
[159,164,164,165,178,165,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,177,162,150,147,187,172],
[166,0,166,168,159,152,171,180],
[163,174,0,163,154,165,177,175],
[178,172,177,0,158,179,186,184],
[190,181,186,182,0,159,194,202],
[193,188,175,161,181,0,199,190],
[153,169,163,154,146,141,0,161],
[168,160,165,156,138,150,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,145,171,166,134,175,141],
[172,0,164,168,182,163,176,150],
[195,176,0,176,171,172,174,159],
[169,172,164,0,175,131,150,149],
[174,158,169,165,0,178,182,152],
[206,177,168,209,162,0,189,202],
[165,164,166,190,158,151,0,127],
[199,190,181,191,188,138,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,178,197,170,178,179,176],
[165,0,157,169,165,164,178,161],
[162,183,0,174,178,170,169,174],
[143,171,166,0,153,190,158,166],
[170,175,162,187,0,171,159,171],
[162,176,170,150,169,0,160,157],
[161,162,171,182,181,180,0,188],
[164,179,166,174,169,183,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,170,171,179,179,209,201],
[146,0,172,160,169,185,165,156],
[170,168,0,145,162,179,165,141],
[169,180,195,0,188,197,168,158],
[161,171,178,152,0,156,178,161],
[161,155,161,143,184,0,183,172],
[131,175,175,172,162,157,0,140],
[139,184,199,182,179,168,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,167,179,174,155,162,158],
[151,0,171,161,173,169,158,165],
[173,169,0,179,170,160,157,170],
[161,179,161,0,179,147,164,158],
[166,167,170,161,0,172,169,166],
[185,171,180,193,168,0,170,177],
[178,182,183,176,171,170,0,153],
[182,175,170,182,174,163,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,131,188,206,161,195,187],
[197,0,115,137,154,186,170,181],
[209,225,0,175,251,163,213,218],
[152,203,165,0,202,185,151,157],
[134,186,89,138,0,143,153,156],
[179,154,177,155,197,0,188,196],
[145,170,127,189,187,152,0,167],
[153,159,122,183,184,144,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,198,176,162,166,173,171],
[171,0,171,174,172,166,167,163],
[142,169,0,157,157,172,164,152],
[164,166,183,0,159,156,162,168],
[178,168,183,181,0,163,159,162],
[174,174,168,184,177,0,179,171],
[167,173,176,178,181,161,0,162],
[169,177,188,172,178,169,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,161,167,140,171,159,103],
[194,0,160,166,128,180,195,125],
[179,180,0,183,137,190,168,137],
[173,174,157,0,125,182,174,140],
[200,212,203,215,0,212,168,180],
[169,160,150,158,128,0,176,124],
[181,145,172,166,172,164,0,159],
[237,215,203,200,160,216,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,164,164,177,176,189,167],
[187,0,163,181,169,173,170,163],
[176,177,0,169,171,179,177,190],
[176,159,171,0,178,177,178,162],
[163,171,169,162,0,174,175,161],
[164,167,161,163,166,0,178,177],
[151,170,163,162,165,162,0,156],
[173,177,150,178,179,163,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,219,221,183,120,156,161],
[160,0,237,221,197,150,159,157],
[121,103,0,111,156,140,108,149],
[119,119,229,0,189,123,185,165],
[157,143,184,151,0,125,100,140],
[220,190,200,217,215,0,178,170],
[184,181,232,155,240,162,0,119],
[179,183,191,175,200,170,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,171,166,177,183,174,176],
[183,0,185,177,162,170,190,182],
[169,155,0,158,185,160,167,167],
[174,163,182,0,168,151,180,171],
[163,178,155,172,0,152,154,178],
[157,170,180,189,188,0,186,183],
[166,150,173,160,186,154,0,171],
[164,158,173,169,162,157,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,168,180,193,159,184,193],
[163,0,158,194,205,175,211,181],
[172,182,0,180,193,158,209,176],
[160,146,160,0,185,118,195,195],
[147,135,147,155,0,130,177,152],
[181,165,182,222,210,0,189,205],
[156,129,131,145,163,151,0,160],
[147,159,164,145,188,135,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,167,207,177,192,177,169],
[158,0,193,187,177,180,175,177],
[173,147,0,175,165,183,158,174],
[133,153,165,0,150,145,162,176],
[163,163,175,190,0,166,168,198],
[148,160,157,195,174,0,163,154],
[163,165,182,178,172,177,0,186],
[171,163,166,164,142,186,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,100,112,187,120,113,139],
[224,0,124,107,176,169,124,170],
[240,216,0,176,212,144,179,145],
[228,233,164,0,217,140,160,195],
[153,164,128,123,0,146,120,136],
[220,171,196,200,194,0,136,153],
[227,216,161,180,220,204,0,221],
[201,170,195,145,204,187,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,163,172,165,150,169,162],
[159,0,156,179,156,137,175,154],
[177,184,0,187,163,174,179,166],
[168,161,153,0,157,145,167,161],
[175,184,177,183,0,148,179,163],
[190,203,166,195,192,0,195,190],
[171,165,161,173,161,145,0,160],
[178,186,174,179,177,150,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,174,181,161,176,180,176],
[157,0,159,161,160,168,159,158],
[166,181,0,176,153,183,172,172],
[159,179,164,0,162,159,174,167],
[179,180,187,178,0,184,170,173],
[164,172,157,181,156,0,156,163],
[160,181,168,166,170,184,0,162],
[164,182,168,173,167,177,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,144,181,182,173,162,169],
[146,0,129,152,154,149,135,146],
[196,211,0,153,188,195,159,168],
[159,188,187,0,168,187,189,213],
[158,186,152,172,0,193,167,214],
[167,191,145,153,147,0,165,217],
[178,205,181,151,173,175,0,172],
[171,194,172,127,126,123,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,180,153,172,175,173,181],
[167,0,185,170,166,173,162,173],
[160,155,0,146,158,165,163,148],
[187,170,194,0,179,182,182,184],
[168,174,182,161,0,169,169,157],
[165,167,175,158,171,0,178,169],
[167,178,177,158,171,162,0,159],
[159,167,192,156,183,171,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,163,145,168,150,161,161],
[156,0,154,136,172,167,162,157],
[177,186,0,174,176,163,174,182],
[195,204,166,0,189,169,172,192],
[172,168,164,151,0,171,179,173],
[190,173,177,171,169,0,165,170],
[179,178,166,168,161,175,0,177],
[179,183,158,148,167,170,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,129,83,130,141,150,102],
[188,0,186,139,174,190,190,137],
[211,154,0,205,171,220,200,141],
[257,201,135,0,149,238,201,160],
[210,166,169,191,0,236,218,177],
[199,150,120,102,104,0,157,81],
[190,150,140,139,122,183,0,146],
[238,203,199,180,163,259,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,182,166,176,168,174,173],
[178,0,170,170,172,172,175,171],
[158,170,0,161,177,156,168,173],
[174,170,179,0,174,172,181,174],
[164,168,163,166,0,171,181,170],
[172,168,184,168,169,0,178,189],
[166,165,172,159,159,162,0,173],
[167,169,167,166,170,151,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,164,159,157,150,160,163],
[179,0,170,171,177,172,180,170],
[176,170,0,161,175,169,175,172],
[181,169,179,0,177,178,180,181],
[183,163,165,163,0,178,172,173],
[190,168,171,162,162,0,180,171],
[180,160,165,160,168,160,0,171],
[177,170,168,159,167,169,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,164,237,181,208,207,222],
[129,0,133,190,165,142,201,172],
[176,207,0,211,194,165,226,211],
[103,150,129,0,123,167,177,164],
[159,175,146,217,0,170,195,188],
[132,198,175,173,170,0,156,180],
[133,139,114,163,145,184,0,167],
[118,168,129,176,152,160,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,160,167,171,190,174,168],
[175,0,169,173,173,181,168,174],
[180,171,0,179,178,179,169,177],
[173,167,161,0,168,176,163,166],
[169,167,162,172,0,181,173,173],
[150,159,161,164,159,0,158,163],
[166,172,171,177,167,182,0,178],
[172,166,163,174,167,177,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,175,176,154,186,161,183],
[194,0,159,166,171,185,180,189],
[165,181,0,178,168,181,177,187],
[164,174,162,0,159,181,172,189],
[186,169,172,181,0,187,185,195],
[154,155,159,159,153,0,153,176],
[179,160,163,168,155,187,0,168],
[157,151,153,151,145,164,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,149,186,195,200,169,144],
[176,0,153,167,198,201,177,169],
[191,187,0,200,180,203,193,168],
[154,173,140,0,201,175,160,163],
[145,142,160,139,0,180,138,164],
[140,139,137,165,160,0,143,180],
[171,163,147,180,202,197,0,155],
[196,171,172,177,176,160,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,188,171,159,185,164,174],
[188,0,197,169,180,173,192,179],
[152,143,0,182,156,187,157,156],
[169,171,158,0,175,145,164,189],
[181,160,184,165,0,162,159,173],
[155,167,153,195,178,0,162,172],
[176,148,183,176,181,178,0,178],
[166,161,184,151,167,168,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,155,177,173,126,145,153],
[172,0,162,163,183,130,148,127],
[185,178,0,169,161,147,180,191],
[163,177,171,0,210,162,151,181],
[167,157,179,130,0,174,159,155],
[214,210,193,178,166,0,198,190],
[195,192,160,189,181,142,0,151],
[187,213,149,159,185,150,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,179,169,201,143,166,146],
[120,0,198,186,157,135,131,117],
[161,142,0,161,202,124,184,129],
[171,154,179,0,194,179,191,146],
[139,183,138,146,0,124,168,101],
[197,205,216,161,216,0,188,185],
[174,209,156,149,172,152,0,136],
[194,223,211,194,239,155,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,162,163,166,181,186,172],
[160,0,165,164,176,175,172,171],
[178,175,0,181,164,189,182,176],
[177,176,159,0,166,180,177,184],
[174,164,176,174,0,185,166,177],
[159,165,151,160,155,0,183,165],
[154,168,158,163,174,157,0,171],
[168,169,164,156,163,175,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,152,175,180,191,171,148],
[171,0,170,191,180,206,182,172],
[188,170,0,168,175,181,178,168],
[165,149,172,0,174,179,177,153],
[160,160,165,166,0,167,155,168],
[149,134,159,161,173,0,157,141],
[169,158,162,163,185,183,0,151],
[192,168,172,187,172,199,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,146,148,153,151,173,144],
[187,0,169,166,186,159,191,179],
[194,171,0,158,177,167,169,169],
[192,174,182,0,174,154,188,167],
[187,154,163,166,0,155,173,168],
[189,181,173,186,185,0,189,168],
[167,149,171,152,167,151,0,150],
[196,161,171,173,172,172,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,169,153,159,143,157,156],
[183,0,181,181,185,165,178,166],
[171,159,0,158,169,173,159,160],
[187,159,182,0,173,175,180,178],
[181,155,171,167,0,163,169,179],
[197,175,167,165,177,0,180,163],
[183,162,181,160,171,160,0,171],
[184,174,180,162,161,177,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,171,172,179,159,199,189],
[150,0,156,156,144,149,150,154],
[169,184,0,189,155,172,170,150],
[168,184,151,0,189,158,149,163],
[161,196,185,151,0,173,158,157],
[181,191,168,182,167,0,149,158],
[141,190,170,191,182,191,0,165],
[151,186,190,177,183,182,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,157,169,165,168,161,153],
[185,0,177,194,183,167,173,177],
[183,163,0,173,167,159,150,165],
[171,146,167,0,168,146,151,158],
[175,157,173,172,0,164,160,159],
[172,173,181,194,176,0,168,158],
[179,167,190,189,180,172,0,156],
[187,163,175,182,181,182,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,180,163,193,141,196,156],
[194,0,170,178,191,115,206,163],
[160,170,0,174,200,175,191,171],
[177,162,166,0,172,144,169,163],
[147,149,140,168,0,125,154,152],
[199,225,165,196,215,0,201,201],
[144,134,149,171,186,139,0,125],
[184,177,169,177,188,139,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,161,186,160,142,141,171],
[181,0,167,169,147,159,160,151],
[179,173,0,183,159,182,168,167],
[154,171,157,0,140,149,155,147],
[180,193,181,200,0,171,178,166],
[198,181,158,191,169,0,184,170],
[199,180,172,185,162,156,0,169],
[169,189,173,193,174,170,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,184,170,180,172,170,180],
[187,0,192,167,212,187,198,203],
[156,148,0,148,162,175,174,172],
[170,173,192,0,204,197,182,190],
[160,128,178,136,0,166,171,170],
[168,153,165,143,174,0,166,164],
[170,142,166,158,169,174,0,177],
[160,137,168,150,170,176,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,122,125,182,147,150,134],
[180,0,145,172,202,189,179,156],
[218,195,0,158,213,202,162,179],
[215,168,182,0,203,204,183,169],
[158,138,127,137,0,154,140,145],
[193,151,138,136,186,0,164,149],
[190,161,178,157,200,176,0,165],
[206,184,161,171,195,191,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,182,151,157,187,157,162],
[157,0,159,166,164,168,154,161],
[158,181,0,180,168,180,152,166],
[189,174,160,0,160,196,174,197],
[183,176,172,180,0,182,163,189],
[153,172,160,144,158,0,153,163],
[183,186,188,166,177,187,0,172],
[178,179,174,143,151,177,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,154,147,163,154,136,137],
[191,0,179,147,191,156,154,170],
[186,161,0,163,172,153,147,163],
[193,193,177,0,194,163,173,168],
[177,149,168,146,0,161,146,158],
[186,184,187,177,179,0,164,184],
[204,186,193,167,194,176,0,190],
[203,170,177,172,182,156,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,185,161,179,182,182,188],
[170,0,185,177,176,158,162,175],
[155,155,0,179,166,158,164,169],
[179,163,161,0,187,167,163,177],
[161,164,174,153,0,155,159,160],
[158,182,182,173,185,0,160,186],
[158,178,176,177,181,180,0,174],
[152,165,171,163,180,154,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,145,120,186,190,211,146],
[186,0,146,140,140,208,192,160],
[195,194,0,138,126,235,178,155],
[220,200,202,0,168,220,178,192],
[154,200,214,172,0,196,234,196],
[150,132,105,120,144,0,175,96],
[129,148,162,162,106,165,0,140],
[194,180,185,148,144,244,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,170,185,166,172,175,178],
[167,0,178,196,178,201,185,177],
[170,162,0,175,158,177,160,172],
[155,144,165,0,158,167,173,171],
[174,162,182,182,0,185,179,178],
[168,139,163,173,155,0,170,160],
[165,155,180,167,161,170,0,162],
[162,163,168,169,162,180,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,197,170,164,155,177,186],
[153,0,164,155,167,157,160,173],
[143,176,0,152,147,142,137,163],
[170,185,188,0,186,178,157,187],
[176,173,193,154,0,162,138,146],
[185,183,198,162,178,0,160,189],
[163,180,203,183,202,180,0,194],
[154,167,177,153,194,151,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,175,181,164,199,160,177],
[158,0,160,177,157,188,160,179],
[165,180,0,168,170,175,173,149],
[159,163,172,0,154,184,154,160],
[176,183,170,186,0,181,182,187],
[141,152,165,156,159,0,150,160],
[180,180,167,186,158,190,0,185],
[163,161,191,180,153,180,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,160,169,179,191,160,179],
[142,0,172,170,147,151,136,147],
[180,168,0,189,172,177,131,154],
[171,170,151,0,171,161,153,154],
[161,193,168,169,0,167,170,196],
[149,189,163,179,173,0,150,184],
[180,204,209,187,170,190,0,171],
[161,193,186,186,144,156,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,175,159,158,155,158,159],
[178,0,167,160,163,160,168,150],
[165,173,0,143,174,173,162,169],
[181,180,197,0,175,162,177,167],
[182,177,166,165,0,183,185,168],
[185,180,167,178,157,0,167,171],
[182,172,178,163,155,173,0,171],
[181,190,171,173,172,169,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,166,187,175,170,148,157],
[152,0,179,189,182,152,158,153],
[174,161,0,190,174,147,160,133],
[153,151,150,0,152,151,154,165],
[165,158,166,188,0,160,162,158],
[170,188,193,189,180,0,196,174],
[192,182,180,186,178,144,0,168],
[183,187,207,175,182,166,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,173,162,168,164,177,162],
[177,0,168,151,174,170,182,174],
[167,172,0,174,170,165,181,173],
[178,189,166,0,178,174,187,174],
[172,166,170,162,0,163,170,162],
[176,170,175,166,177,0,170,171],
[163,158,159,153,170,170,0,167],
[178,166,167,166,178,169,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,170,165,167,177,162,170],
[141,0,162,153,153,168,145,167],
[170,178,0,173,169,179,173,169],
[175,187,167,0,173,173,177,178],
[173,187,171,167,0,180,177,178],
[163,172,161,167,160,0,153,182],
[178,195,167,163,163,187,0,182],
[170,173,171,162,162,158,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,182,179,186,168,188,173],
[164,0,167,159,171,149,171,168],
[158,173,0,163,186,177,171,173],
[161,181,177,0,187,162,183,169],
[154,169,154,153,0,154,163,163],
[172,191,163,178,186,0,186,174],
[152,169,169,157,177,154,0,164],
[167,172,167,171,177,166,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,160,171,189,174,166,158],
[189,0,163,186,196,176,165,188],
[180,177,0,175,196,187,179,168],
[169,154,165,0,190,168,160,157],
[151,144,144,150,0,165,146,151],
[166,164,153,172,175,0,169,165],
[174,175,161,180,194,171,0,179],
[182,152,172,183,189,175,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,170,182,177,166,172,159],
[182,0,165,179,182,174,167,159],
[170,175,0,174,180,176,161,154],
[158,161,166,0,169,172,165,156],
[163,158,160,171,0,170,166,172],
[174,166,164,168,170,0,160,168],
[168,173,179,175,174,180,0,173],
[181,181,186,184,168,172,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,166,177,165,158,173,177],
[184,0,155,181,170,172,174,174],
[174,185,0,170,177,174,181,170],
[163,159,170,0,168,151,178,166],
[175,170,163,172,0,162,180,182],
[182,168,166,189,178,0,169,178],
[167,166,159,162,160,171,0,156],
[163,166,170,174,158,162,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,186,174,175,175,177,172],
[173,0,169,170,177,184,160,165],
[154,171,0,168,168,171,159,168],
[166,170,172,0,157,177,173,159],
[165,163,172,183,0,172,161,170],
[165,156,169,163,168,0,162,171],
[163,180,181,167,179,178,0,172],
[168,175,172,181,170,169,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,168,163,151,168,155,175],
[167,0,175,157,165,167,153,162],
[172,165,0,160,165,174,169,157],
[177,183,180,0,173,158,177,192],
[189,175,175,167,0,184,182,176],
[172,173,166,182,156,0,151,164],
[185,187,171,163,158,189,0,174],
[165,178,183,148,164,176,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,147,164,164,171,189,161],
[185,0,166,175,205,188,187,151],
[193,174,0,147,191,209,184,183],
[176,165,193,0,186,230,172,174],
[176,135,149,154,0,126,130,131],
[169,152,131,110,214,0,129,135],
[151,153,156,168,210,211,0,165],
[179,189,157,166,209,205,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,169,148,161,161,165,166],
[176,0,170,173,168,179,168,168],
[171,170,0,165,165,164,164,162],
[192,167,175,0,169,182,163,169],
[179,172,175,171,0,173,167,172],
[179,161,176,158,167,0,181,151],
[175,172,176,177,173,159,0,175],
[174,172,178,171,168,189,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,168,164,182,199,166,159],
[166,0,184,182,206,194,195,163],
[172,156,0,157,193,187,155,160],
[176,158,183,0,182,173,168,172],
[158,134,147,158,0,153,175,139],
[141,146,153,167,187,0,147,175],
[174,145,185,172,165,193,0,149],
[181,177,180,168,201,165,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,163,168,180,154,156,166],
[180,0,172,168,168,167,170,164],
[177,168,0,180,159,166,172,186],
[172,172,160,0,180,169,152,159],
[160,172,181,160,0,162,145,153],
[186,173,174,171,178,0,148,180],
[184,170,168,188,195,192,0,171],
[174,176,154,181,187,160,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,176,168,162,152,197,164],
[159,0,200,184,151,161,187,183],
[164,140,0,161,139,161,220,156],
[172,156,179,0,179,178,200,162],
[178,189,201,161,0,191,219,179],
[188,179,179,162,149,0,195,176],
[143,153,120,140,121,145,0,138],
[176,157,184,178,161,164,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,152,158,158,158,171,176],
[158,0,162,152,160,134,132,146],
[188,178,0,186,178,165,169,182],
[182,188,154,0,172,180,198,172],
[182,180,162,168,0,160,182,146],
[182,206,175,160,180,0,182,162],
[169,208,171,142,158,158,0,161],
[164,194,158,168,194,178,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,174,171,196,170,158,183],
[145,0,172,152,180,169,171,172],
[166,168,0,164,185,176,167,173],
[169,188,176,0,189,178,158,180],
[144,160,155,151,0,132,143,153],
[170,171,164,162,208,0,166,173],
[182,169,173,182,197,174,0,186],
[157,168,167,160,187,167,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,173,182,167,175,177,166],
[168,0,169,172,176,170,189,159],
[167,171,0,161,175,165,153,169],
[158,168,179,0,176,175,170,172],
[173,164,165,164,0,167,166,170],
[165,170,175,165,173,0,169,168],
[163,151,187,170,174,171,0,179],
[174,181,171,168,170,172,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,146,136,146,150,148,150],
[188,0,152,155,157,160,165,160],
[194,188,0,174,162,173,159,165],
[204,185,166,0,172,170,173,174],
[194,183,178,168,0,168,173,176],
[190,180,167,170,172,0,172,172],
[192,175,181,167,167,168,0,167],
[190,180,175,166,164,168,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,174,183,181,172,169,173],
[177,0,184,174,184,157,174,168],
[166,156,0,164,164,144,152,159],
[157,166,176,0,171,154,175,159],
[159,156,176,169,0,163,176,167],
[168,183,196,186,177,0,181,172],
[171,166,188,165,164,159,0,154],
[167,172,181,181,173,168,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,174,179,198,189,240,196],
[190,0,161,162,142,143,218,152],
[166,179,0,176,163,157,254,208],
[161,178,164,0,140,157,220,155],
[142,198,177,200,0,175,237,172],
[151,197,183,183,165,0,213,199],
[100,122,86,120,103,127,0,196],
[144,188,132,185,168,141,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,160,151,181,155,168,163],
[178,0,169,158,172,177,174,150],
[180,171,0,167,178,164,193,175],
[189,182,173,0,179,164,184,184],
[159,168,162,161,0,152,164,160],
[185,163,176,176,188,0,177,180],
[172,166,147,156,176,163,0,158],
[177,190,165,156,180,160,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,163,135,147,178,185,147],
[219,0,156,194,177,180,180,218],
[177,184,0,154,161,146,193,154],
[205,146,186,0,152,185,159,223],
[193,163,179,188,0,212,228,188],
[162,160,194,155,128,0,222,166],
[155,160,147,181,112,118,0,187],
[193,122,186,117,152,174,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,156,202,196,177,182,173],
[158,0,167,191,207,167,176,162],
[184,173,0,188,198,161,171,169],
[138,149,152,0,180,154,143,157],
[144,133,142,160,0,159,139,136],
[163,173,179,186,181,0,165,164],
[158,164,169,197,201,175,0,166],
[167,178,171,183,204,176,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,132,139,195,156,183,168],
[183,0,250,167,121,194,217,203],
[208,90,0,180,147,220,220,174],
[201,173,160,0,213,241,218,231],
[145,219,193,127,0,220,238,199],
[184,146,120,99,120,0,122,150],
[157,123,120,122,102,218,0,155],
[172,137,166,109,141,190,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,166,174,184,184,189,179],
[168,0,172,176,176,177,170,168],
[174,168,0,163,160,159,169,159],
[166,164,177,0,183,188,176,174],
[156,164,180,157,0,180,159,158],
[156,163,181,152,160,0,162,179],
[151,170,171,164,181,178,0,168],
[161,172,181,166,182,161,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,200,148,182,138,157,142],
[193,0,199,222,186,169,189,194],
[140,141,0,167,143,120,142,158],
[192,118,173,0,173,174,177,157],
[158,154,197,167,0,165,168,148],
[202,171,220,166,175,0,183,182],
[183,151,198,163,172,157,0,167],
[198,146,182,183,192,158,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,159,148,148,156,175,174],
[160,0,174,135,131,154,173,161],
[181,166,0,147,122,141,173,158],
[192,205,193,0,180,191,219,161],
[192,209,218,160,0,182,199,201],
[184,186,199,149,158,0,209,165],
[165,167,167,121,141,131,0,162],
[166,179,182,179,139,175,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,157,143,178,157,170,178],
[173,0,166,161,171,180,179,186],
[183,174,0,170,180,193,179,192],
[197,179,170,0,174,174,178,193],
[162,169,160,166,0,164,164,167],
[183,160,147,166,176,0,174,187],
[170,161,161,162,176,166,0,185],
[162,154,148,147,173,153,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,48,284,284,193,292,332],
[153,0,193,292,284,193,153,201],
[292,147,0,292,284,292,292,292],
[56,48,48,0,284,193,153,193],
[56,56,56,56,0,201,201,201],
[147,147,48,147,139,0,147,340],
[48,187,48,187,139,193,0,332],
[8,139,48,147,139,0,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,199,183,165,178,185,167],
[165,0,173,163,159,163,174,156],
[141,167,0,148,145,151,146,144],
[157,177,192,0,174,179,158,168],
[175,181,195,166,0,183,179,175],
[162,177,189,161,157,0,165,163],
[155,166,194,182,161,175,0,155],
[173,184,196,172,165,177,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,162,172,180,166,172,174],
[160,0,162,176,180,162,165,163],
[178,178,0,191,188,164,162,183],
[168,164,149,0,166,163,156,165],
[160,160,152,174,0,160,157,161],
[174,178,176,177,180,0,162,173],
[168,175,178,184,183,178,0,182],
[166,177,157,175,179,167,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,169,186,169,170,175,170],
[168,0,159,182,170,151,159,174],
[171,181,0,179,175,177,164,186],
[154,158,161,0,156,155,156,170],
[171,170,165,184,0,167,168,176],
[170,189,163,185,173,0,160,175],
[165,181,176,184,172,180,0,187],
[170,166,154,170,164,165,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,156,154,158,159,163,158],
[174,0,161,165,177,162,166,161],
[184,179,0,168,175,163,171,160],
[186,175,172,0,183,177,167,169],
[182,163,165,157,0,161,162,172],
[181,178,177,163,179,0,172,155],
[177,174,169,173,178,168,0,173],
[182,179,180,171,168,185,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,176,167,176,195,164,160],
[176,0,153,152,173,183,171,153],
[164,187,0,176,177,193,150,181],
[173,188,164,0,147,166,140,166],
[164,167,163,193,0,181,151,162],
[145,157,147,174,159,0,138,162],
[176,169,190,200,189,202,0,192],
[180,187,159,174,178,178,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,188,160,180,172,199,173],
[168,0,188,169,182,181,193,154],
[152,152,0,157,178,158,210,150],
[180,171,183,0,196,184,206,163],
[160,158,162,144,0,150,166,139],
[168,159,182,156,190,0,194,157],
[141,147,130,134,174,146,0,118],
[167,186,190,177,201,183,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,121,148,198,189,181,140],
[147,0,128,141,155,133,176,181],
[219,212,0,215,241,173,260,166],
[192,199,125,0,206,181,206,203],
[142,185,99,134,0,152,182,143],
[151,207,167,159,188,0,233,173],
[159,164,80,134,158,107,0,156],
[200,159,174,137,197,167,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,146,179,181,162,193,188],
[182,0,163,185,160,175,177,185],
[194,177,0,146,193,189,178,200],
[161,155,194,0,186,175,165,187],
[159,180,147,154,0,146,169,172],
[178,165,151,165,194,0,184,181],
[147,163,162,175,171,156,0,172],
[152,155,140,153,168,159,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,151,182,177,168,164,151],
[190,0,186,196,179,160,167,161],
[189,154,0,175,157,194,176,161],
[158,144,165,0,168,169,157,181],
[163,161,183,172,0,188,183,147],
[172,180,146,171,152,0,200,130],
[176,173,164,183,157,140,0,171],
[189,179,179,159,193,210,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,138,150,173,202,183,214],
[152,0,161,146,179,131,194,182],
[202,179,0,165,179,166,217,185],
[190,194,175,0,164,180,201,180],
[167,161,161,176,0,160,199,181],
[138,209,174,160,180,0,196,187],
[157,146,123,139,141,144,0,168],
[126,158,155,160,159,153,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,154,163,150,179,148,162],
[169,0,151,159,148,175,167,174],
[186,189,0,173,167,179,173,186],
[177,181,167,0,173,173,165,179],
[190,192,173,167,0,185,189,188],
[161,165,161,167,155,0,174,180],
[192,173,167,175,151,166,0,176],
[178,166,154,161,152,160,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,157,161,166,181,170,174],
[176,0,143,140,154,165,147,158],
[183,197,0,162,178,190,181,183],
[179,200,178,0,169,190,170,186],
[174,186,162,171,0,169,161,171],
[159,175,150,150,171,0,160,156],
[170,193,159,170,179,180,0,177],
[166,182,157,154,169,184,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,146,150,158,147,161,179],
[182,0,170,165,173,183,182,175],
[194,170,0,163,166,166,180,163],
[190,175,177,0,168,173,174,186],
[182,167,174,172,0,163,174,184],
[193,157,174,167,177,0,175,189],
[179,158,160,166,166,165,0,178],
[161,165,177,154,156,151,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,179,146,141,156,163,160],
[184,0,195,175,168,168,170,160],
[161,145,0,138,142,170,145,145],
[194,165,202,0,186,196,190,171],
[199,172,198,154,0,175,170,177],
[184,172,170,144,165,0,169,155],
[177,170,195,150,170,171,0,161],
[180,180,195,169,163,185,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,186,185,165,173,182,189],
[164,0,178,165,161,182,179,171],
[154,162,0,171,157,177,159,160],
[155,175,169,0,156,171,175,162],
[175,179,183,184,0,179,176,169],
[167,158,163,169,161,0,169,158],
[158,161,181,165,164,171,0,170],
[151,169,180,178,171,182,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,157,155,164,164,174,164],
[167,0,155,177,169,177,169,171],
[183,185,0,169,181,186,189,189],
[185,163,171,0,182,196,177,182],
[176,171,159,158,0,187,178,170],
[176,163,154,144,153,0,170,159],
[166,171,151,163,162,170,0,167],
[176,169,151,158,170,181,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,139,151,152,165,171,163],
[190,0,172,183,168,181,177,188],
[201,168,0,184,174,187,186,197],
[189,157,156,0,171,174,174,191],
[188,172,166,169,0,178,174,184],
[175,159,153,166,162,0,177,176],
[169,163,154,166,166,163,0,175],
[177,152,143,149,156,164,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,155,155,185,147,182,157],
[191,0,156,162,191,160,211,170],
[185,184,0,154,214,185,213,157],
[185,178,186,0,188,195,195,152],
[155,149,126,152,0,182,205,161],
[193,180,155,145,158,0,179,141],
[158,129,127,145,135,161,0,171],
[183,170,183,188,179,199,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,178,174,176,176,172,171],
[170,0,166,154,166,161,158,170],
[162,174,0,165,165,172,166,180],
[166,186,175,0,168,169,169,177],
[164,174,175,172,0,165,167,171],
[164,179,168,171,175,0,166,175],
[168,182,174,171,173,174,0,180],
[169,170,160,163,169,165,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,161,185,160,178,185,163],
[172,0,170,187,176,177,192,162],
[179,170,0,201,171,171,185,172],
[155,153,139,0,148,161,174,157],
[180,164,169,192,0,188,199,172],
[162,163,169,179,152,0,182,163],
[155,148,155,166,141,158,0,160],
[177,178,168,183,168,177,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,171,169,172,169,180,186],
[166,0,181,177,183,166,180,181],
[169,159,0,172,164,161,166,157],
[171,163,168,0,166,163,179,174],
[168,157,176,174,0,173,151,161],
[171,174,179,177,167,0,180,171],
[160,160,174,161,189,160,0,163],
[154,159,183,166,179,169,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,190,165,166,184,172,185],
[181,0,201,177,159,179,183,180],
[150,139,0,153,158,172,172,169],
[175,163,187,0,163,175,169,177],
[174,181,182,177,0,196,159,190],
[156,161,168,165,144,0,153,157],
[168,157,168,171,181,187,0,187],
[155,160,171,163,150,183,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,163,144,160,151,167,157],
[171,0,158,161,164,164,167,145],
[177,182,0,156,147,174,171,150],
[196,179,184,0,178,164,179,166],
[180,176,193,162,0,170,191,154],
[189,176,166,176,170,0,195,171],
[173,173,169,161,149,145,0,141],
[183,195,190,174,186,169,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,215,176,139,198,176,235],
[159,0,218,153,179,191,190,195],
[125,122,0,144,98,182,159,155],
[164,187,196,0,189,180,204,194],
[201,161,242,151,0,208,204,164],
[142,149,158,160,132,0,199,165],
[164,150,181,136,136,141,0,170],
[105,145,185,146,176,175,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,159,156,169,158,196,173],
[152,0,171,163,154,167,208,150],
[181,169,0,157,186,176,190,153],
[184,177,183,0,161,160,204,182],
[171,186,154,179,0,155,202,169],
[182,173,164,180,185,0,207,153],
[144,132,150,136,138,133,0,135],
[167,190,187,158,171,187,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,185,197,198,151,163,184],
[164,0,161,169,177,148,150,148],
[155,179,0,175,181,183,174,179],
[143,171,165,0,191,132,165,143],
[142,163,159,149,0,142,158,150],
[189,192,157,208,198,0,193,179],
[177,190,166,175,182,147,0,163],
[156,192,161,197,190,161,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,161,166,173,177,184,174],
[165,0,144,167,171,158,167,168],
[179,196,0,164,200,187,193,180],
[174,173,176,0,170,165,170,175],
[167,169,140,170,0,154,170,182],
[163,182,153,175,186,0,197,174],
[156,173,147,170,170,143,0,161],
[166,172,160,165,158,166,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,177,191,160,168,140,171],
[178,0,160,185,151,168,142,166],
[163,180,0,190,163,183,159,176],
[149,155,150,0,144,164,130,154],
[180,189,177,196,0,167,165,158],
[172,172,157,176,173,0,162,150],
[200,198,181,210,175,178,0,166],
[169,174,164,186,182,190,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,186,163,193,169,181,189],
[144,0,148,135,165,162,150,178],
[154,192,0,164,172,144,158,174],
[177,205,176,0,179,153,183,177],
[147,175,168,161,0,145,149,178],
[171,178,196,187,195,0,165,192],
[159,190,182,157,191,175,0,207],
[151,162,166,163,162,148,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,176,147,160,190,179,145],
[152,0,163,154,145,145,162,129],
[164,177,0,166,187,190,180,183],
[193,186,174,0,171,194,175,170],
[180,195,153,169,0,177,173,157],
[150,195,150,146,163,0,172,155],
[161,178,160,165,167,168,0,148],
[195,211,157,170,183,185,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,187,186,163,177,200,159],
[170,0,189,172,170,177,147,148],
[153,151,0,163,162,151,144,141],
[154,168,177,0,141,163,172,171],
[177,170,178,199,0,166,175,167],
[163,163,189,177,174,0,165,139],
[140,193,196,168,165,175,0,145],
[181,192,199,169,173,201,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,176,174,165,182,156,170],
[159,0,175,167,159,167,157,155],
[164,165,0,178,165,168,161,160],
[166,173,162,0,158,164,161,158],
[175,181,175,182,0,176,169,167],
[158,173,172,176,164,0,165,161],
[184,183,179,179,171,175,0,166],
[170,185,180,182,173,179,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,170,161,165,168,161,162],
[158,0,152,168,160,177,153,162],
[170,188,0,166,180,183,153,168],
[179,172,174,0,153,174,181,165],
[175,180,160,187,0,193,165,182],
[172,163,157,166,147,0,148,151],
[179,187,187,159,175,192,0,174],
[178,178,172,175,158,189,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,203,146,148,202,197,141],
[171,0,196,149,134,172,178,169],
[137,144,0,114,129,148,125,111],
[194,191,226,0,187,214,175,155],
[192,206,211,153,0,229,177,193],
[138,168,192,126,111,0,136,158],
[143,162,215,165,163,204,0,165],
[199,171,229,185,147,182,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,166,171,186,188,179,180],
[201,0,177,180,191,202,170,192],
[174,163,0,168,176,158,144,160],
[169,160,172,0,160,178,160,165],
[154,149,164,180,0,171,148,169],
[152,138,182,162,169,0,146,167],
[161,170,196,180,192,194,0,190],
[160,148,180,175,171,173,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,176,195,171,168,175,170],
[167,0,171,176,170,177,179,162],
[164,169,0,182,178,185,166,174],
[145,164,158,0,166,162,145,141],
[169,170,162,174,0,178,174,164],
[172,163,155,178,162,0,162,156],
[165,161,174,195,166,178,0,151],
[170,178,166,199,176,184,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,180,179,182,188,195,161],
[161,0,166,181,172,194,181,157],
[160,174,0,172,168,188,174,158],
[161,159,168,0,170,178,182,138],
[158,168,172,170,0,163,176,168],
[152,146,152,162,177,0,168,170],
[145,159,166,158,164,172,0,143],
[179,183,182,202,172,170,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,144,164,167,169,179,168],
[189,0,170,173,183,191,175,231],
[196,170,0,164,178,157,205,196],
[176,167,176,0,195,166,170,188],
[173,157,162,145,0,168,171,181],
[171,149,183,174,172,0,176,178],
[161,165,135,170,169,164,0,188],
[172,109,144,152,159,162,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,180,192,168,179,189,220],
[141,0,150,167,158,173,162,172],
[160,190,0,200,180,195,161,201],
[148,173,140,0,173,167,167,197],
[172,182,160,167,0,186,162,191],
[161,167,145,173,154,0,162,179],
[151,178,179,173,178,178,0,188],
[120,168,139,143,149,161,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,163,226,200,185,194,205],
[134,0,140,188,133,140,162,126],
[177,200,0,213,142,175,167,177],
[114,152,127,0,145,144,134,156],
[140,207,198,195,0,185,194,211],
[155,200,165,196,155,0,211,193],
[146,178,173,206,146,129,0,147],
[135,214,163,184,129,147,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,166,167,192,185,171,156],
[169,0,161,166,205,181,190,180],
[174,179,0,160,187,162,181,175],
[173,174,180,0,193,176,163,154],
[148,135,153,147,0,149,137,148],
[155,159,178,164,191,0,166,169],
[169,150,159,177,203,174,0,148],
[184,160,165,186,192,171,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,167,161,155,145,175,151],
[194,0,161,195,176,178,191,170],
[173,179,0,165,160,162,173,169],
[179,145,175,0,152,150,172,156],
[185,164,180,188,0,177,187,174],
[195,162,178,190,163,0,191,168],
[165,149,167,168,153,149,0,154],
[189,170,171,184,166,172,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,153,171,153,158,164,163],
[183,0,166,186,159,177,176,184],
[187,174,0,177,175,170,183,178],
[169,154,163,0,158,162,169,166],
[187,181,165,182,0,171,185,190],
[182,163,170,178,169,0,186,181],
[176,164,157,171,155,154,0,169],
[177,156,162,174,150,159,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,164,166,172,175,159,156],
[171,0,161,157,172,187,162,160],
[176,179,0,180,182,188,170,163],
[174,183,160,0,176,175,172,172],
[168,168,158,164,0,180,164,163],
[165,153,152,165,160,0,155,144],
[181,178,170,168,176,185,0,178],
[184,180,177,168,177,196,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,168,169,172,171,169,161],
[152,0,171,160,158,161,156,158],
[172,169,0,162,170,159,189,176],
[171,180,178,0,184,170,177,178],
[168,182,170,156,0,167,177,171],
[169,179,181,170,173,0,186,191],
[171,184,151,163,163,154,0,163],
[179,182,164,162,169,149,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,122,126,129,100,159,153],
[219,0,166,189,180,185,201,176],
[218,174,0,184,175,161,235,176],
[214,151,156,0,132,161,171,123],
[211,160,165,208,0,175,213,142],
[240,155,179,179,165,0,205,143],
[181,139,105,169,127,135,0,116],
[187,164,164,217,198,197,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,176,172,179,165,194,181],
[166,0,182,174,171,170,187,195],
[164,158,0,159,174,176,183,198],
[168,166,181,0,160,168,197,186],
[161,169,166,180,0,176,194,182],
[175,170,164,172,164,0,192,183],
[146,153,157,143,146,148,0,168],
[159,145,142,154,158,157,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,192,178,194,155,183,220],
[142,0,169,159,207,172,180,162],
[148,171,0,160,171,135,164,159],
[162,181,180,0,191,153,173,183],
[146,133,169,149,0,122,167,134],
[185,168,205,187,218,0,184,207],
[157,160,176,167,173,156,0,191],
[120,178,181,157,206,133,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,140,166,156,181,158,169],
[195,0,140,154,148,161,160,189],
[200,200,0,163,178,206,176,207],
[174,186,177,0,175,185,168,196],
[184,192,162,165,0,173,170,189],
[159,179,134,155,167,0,154,166],
[182,180,164,172,170,186,0,185],
[171,151,133,144,151,174,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,170,164,173,184,167,190],
[164,0,165,145,178,175,176,169],
[170,175,0,160,160,183,171,192],
[176,195,180,0,169,191,173,181],
[167,162,180,171,0,182,170,165],
[156,165,157,149,158,0,158,172],
[173,164,169,167,170,182,0,176],
[150,171,148,159,175,168,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,168,177,167,167,175,175],
[165,0,167,182,175,180,176,165],
[172,173,0,183,171,169,184,179],
[163,158,157,0,150,165,158,159],
[173,165,169,190,0,171,181,180],
[173,160,171,175,169,0,172,168],
[165,164,156,182,159,168,0,170],
[165,175,161,181,160,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,155,182,158,163,164,163],
[193,0,166,175,177,197,163,177],
[185,174,0,181,170,190,179,177],
[158,165,159,0,170,181,157,161],
[182,163,170,170,0,195,168,181],
[177,143,150,159,145,0,149,154],
[176,177,161,183,172,191,0,179],
[177,163,163,179,159,186,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,167,156,164,166,159,160],
[174,0,173,169,169,157,168,161],
[173,167,0,177,155,164,169,160],
[184,171,163,0,157,176,173,164],
[176,171,185,183,0,173,167,173],
[174,183,176,164,167,0,167,171],
[181,172,171,167,173,173,0,170],
[180,179,180,176,167,169,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,161,148,165,153,148,151],
[185,0,163,178,176,167,177,163],
[179,177,0,176,174,152,170,159],
[192,162,164,0,169,172,186,179],
[175,164,166,171,0,167,162,159],
[187,173,188,168,173,0,176,164],
[192,163,170,154,178,164,0,169],
[189,177,181,161,181,176,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,158,170,172,169,167,158],
[174,0,182,172,174,178,180,166],
[182,158,0,167,174,165,170,164],
[170,168,173,0,180,167,172,167],
[168,166,166,160,0,165,173,161],
[171,162,175,173,175,0,174,170],
[173,160,170,168,167,166,0,166],
[182,174,176,173,179,170,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,177,150,145,121,101,114],
[233,0,187,209,215,160,166,166],
[163,153,0,167,115,99,112,106],
[190,131,173,0,147,114,126,128],
[195,125,225,193,0,210,173,168],
[219,180,241,226,130,0,118,164],
[239,174,228,214,167,222,0,182],
[226,174,234,212,172,176,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,179,176,172,163,178,184],
[177,0,178,202,150,174,156,174],
[161,162,0,188,187,172,169,179],
[164,138,152,0,132,165,136,168],
[168,190,153,208,0,179,147,174],
[177,166,168,175,161,0,143,198],
[162,184,171,204,193,197,0,203],
[156,166,161,172,166,142,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,172,159,194,169,168,176],
[168,0,169,156,181,174,162,172],
[168,171,0,165,188,166,171,173],
[181,184,175,0,199,175,167,187],
[146,159,152,141,0,163,144,159],
[171,166,174,165,177,0,167,173],
[172,178,169,173,196,173,0,172],
[164,168,167,153,181,167,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,156,157,173,164,156,151],
[182,0,171,181,160,165,159,188],
[184,169,0,177,179,184,168,187],
[183,159,163,0,191,181,182,185],
[167,180,161,149,0,169,155,174],
[176,175,156,159,171,0,159,177],
[184,181,172,158,185,181,0,185],
[189,152,153,155,166,163,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,340,293,164,293,293,129],
[211,0,340,211,164,164,164,211],
[0,0,0,0,164,0,164,0],
[47,129,340,0,164,129,164,129],
[176,176,176,176,0,129,176,176],
[47,176,340,211,211,0,211,47],
[47,176,176,176,164,129,0,176],
[211,129,340,211,164,293,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,170,171,170,165,170,162],
[179,0,163,151,162,137,176,146],
[170,177,0,146,167,170,183,168],
[169,189,194,0,183,171,180,177],
[170,178,173,157,0,152,176,167],
[175,203,170,169,188,0,175,183],
[170,164,157,160,164,165,0,157],
[178,194,172,163,173,157,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,148,155,145,135,155,131],
[197,0,173,154,172,166,146,162],
[192,167,0,176,167,162,168,172],
[185,186,164,0,184,175,180,154],
[195,168,173,156,0,171,161,164],
[205,174,178,165,169,0,181,174],
[185,194,172,160,179,159,0,144],
[209,178,168,186,176,166,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,184,171,142,149,179,157],
[203,0,204,176,159,144,176,161],
[156,136,0,144,144,136,162,149],
[169,164,196,0,166,151,163,169],
[198,181,196,174,0,184,182,152],
[191,196,204,189,156,0,197,179],
[161,164,178,177,158,143,0,166],
[183,179,191,171,188,161,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,171,231,231,231,119,209],
[158,0,86,49,146,87,119,27],
[169,254,0,60,199,87,142,232],
[109,291,280,0,340,169,201,221],
[109,194,141,0,0,131,190,109],
[109,253,253,171,209,0,201,221],
[221,221,198,139,150,139,0,221],
[131,313,108,119,231,119,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,155,177,156,137,141,178],
[181,0,158,174,171,167,153,183],
[185,182,0,166,172,154,160,175],
[163,166,174,0,165,151,161,170],
[184,169,168,175,0,161,151,202],
[203,173,186,189,179,0,174,170],
[199,187,180,179,189,166,0,201],
[162,157,165,170,138,170,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,167,171,170,175,191,167],
[156,0,151,164,157,158,177,160],
[173,189,0,175,169,168,182,164],
[169,176,165,0,174,164,179,163],
[170,183,171,166,0,169,198,168],
[165,182,172,176,171,0,184,179],
[149,163,158,161,142,156,0,152],
[173,180,176,177,172,161,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,166,145,187,152,147,150],
[163,0,163,176,201,150,173,169],
[174,177,0,190,148,148,167,143],
[195,164,150,0,170,174,145,178],
[153,139,192,170,0,156,165,154],
[188,190,192,166,184,0,172,178],
[193,167,173,195,175,168,0,183],
[190,171,197,162,186,162,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,138,170,149,156,174,161],
[183,0,179,174,168,158,174,168],
[202,161,0,183,170,172,198,183],
[170,166,157,0,150,151,181,165],
[191,172,170,190,0,167,198,189],
[184,182,168,189,173,0,194,170],
[166,166,142,159,142,146,0,176],
[179,172,157,175,151,170,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,164,167,155,155,205,171],
[225,0,162,193,207,156,231,175],
[176,178,0,174,126,164,177,149],
[173,147,166,0,186,178,224,153],
[185,133,214,154,0,182,230,191],
[185,184,176,162,158,0,167,181],
[135,109,163,116,110,173,0,138],
[169,165,191,187,149,159,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,172,168,153,195,176,154],
[169,0,168,177,131,160,171,170],
[168,172,0,165,154,184,159,151],
[172,163,175,0,176,186,175,171],
[187,209,186,164,0,192,209,167],
[145,180,156,154,148,0,154,152],
[164,169,181,165,131,186,0,141],
[186,170,189,169,173,188,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,178,180,174,192,160,194],
[187,0,162,187,190,190,181,200],
[162,178,0,194,185,184,173,177],
[160,153,146,0,180,159,172,176],
[166,150,155,160,0,157,159,165],
[148,150,156,181,183,0,158,184],
[180,159,167,168,181,182,0,171],
[146,140,163,164,175,156,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,191,174,173,178,188,169],
[158,0,174,170,194,173,191,175],
[149,166,0,164,157,172,180,156],
[166,170,176,0,177,189,181,159],
[167,146,183,163,0,178,177,154],
[162,167,168,151,162,0,173,162],
[152,149,160,159,163,167,0,158],
[171,165,184,181,186,178,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,160,153,168,164,164,179],
[180,0,182,178,177,190,185,153],
[180,158,0,176,171,171,189,164],
[187,162,164,0,176,170,180,167],
[172,163,169,164,0,168,179,147],
[176,150,169,170,172,0,185,144],
[176,155,151,160,161,155,0,142],
[161,187,176,173,193,196,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,206,179,186,193,159,202],
[149,0,215,173,177,182,137,179],
[134,125,0,178,159,176,140,184],
[161,167,162,0,183,190,176,168],
[154,163,181,157,0,177,170,154],
[147,158,164,150,163,0,125,177],
[181,203,200,164,170,215,0,175],
[138,161,156,172,186,163,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,167,153,157,156,156,167],
[173,0,187,180,182,175,152,180],
[173,153,0,166,135,170,143,131],
[187,160,174,0,167,191,125,152],
[183,158,205,173,0,168,131,181],
[184,165,170,149,172,0,197,196],
[184,188,197,215,209,143,0,186],
[173,160,209,188,159,144,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,137,186,146,124,153,104],
[224,0,193,236,220,169,154,154],
[203,147,0,205,194,146,184,141],
[154,104,135,0,160,104,136,118],
[194,120,146,180,0,74,153,122],
[216,171,194,236,266,0,167,230],
[187,186,156,204,187,173,0,154],
[236,186,199,222,218,110,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,208,144,169,164,177,215],
[194,0,237,132,217,171,160,212],
[132,103,0,136,171,163,151,169],
[196,208,204,0,200,169,204,231],
[171,123,169,140,0,156,146,198],
[176,169,177,171,184,0,188,216],
[163,180,189,136,194,152,0,160],
[125,128,171,109,142,124,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,179,168,170,166,173,156],
[162,0,173,157,166,164,161,143],
[161,167,0,157,155,171,159,155],
[172,183,183,0,164,179,164,171],
[170,174,185,176,0,173,173,170],
[174,176,169,161,167,0,160,164],
[167,179,181,176,167,180,0,169],
[184,197,185,169,170,176,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,166,167,166,183,171,164],
[160,0,154,183,167,194,158,163],
[174,186,0,155,152,184,162,176],
[173,157,185,0,153,191,160,177],
[174,173,188,187,0,205,179,170],
[157,146,156,149,135,0,170,131],
[169,182,178,180,161,170,0,150],
[176,177,164,163,170,209,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,153,129,143,130,141,125],
[194,0,135,138,139,162,154,152],
[187,205,0,160,163,166,135,139],
[211,202,180,0,155,184,179,157],
[197,201,177,185,0,192,158,179],
[210,178,174,156,148,0,144,160],
[199,186,205,161,182,196,0,159],
[215,188,201,183,161,180,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,170,184,179,166,162,177],
[176,0,164,178,171,165,166,181],
[170,176,0,173,176,153,170,164],
[156,162,167,0,169,164,161,173],
[161,169,164,171,0,173,161,159],
[174,175,187,176,167,0,173,174],
[178,174,170,179,179,167,0,166],
[163,159,176,167,181,166,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,139,166,129,136,137,129],
[199,0,156,188,149,123,160,158],
[201,184,0,176,160,157,170,193],
[174,152,164,0,138,151,153,167],
[211,191,180,202,0,176,173,161],
[204,217,183,189,164,0,170,168],
[203,180,170,187,167,170,0,180],
[211,182,147,173,179,172,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,159,156,175,172,148,173],
[165,0,160,141,156,162,155,173],
[181,180,0,177,174,168,162,182],
[184,199,163,0,165,172,164,189],
[165,184,166,175,0,170,173,178],
[168,178,172,168,170,0,166,186],
[192,185,178,176,167,174,0,174],
[167,167,158,151,162,154,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,159,161,157,168,169,178],
[185,0,163,165,186,182,168,171],
[181,177,0,170,176,160,179,179],
[179,175,170,0,185,179,178,187],
[183,154,164,155,0,170,178,180],
[172,158,180,161,170,0,180,173],
[171,172,161,162,162,160,0,183],
[162,169,161,153,160,167,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,186,192,172,180,179,169],
[158,0,160,170,146,163,165,157],
[154,180,0,187,165,178,191,169],
[148,170,153,0,152,164,169,146],
[168,194,175,188,0,178,192,181],
[160,177,162,176,162,0,170,167],
[161,175,149,171,148,170,0,159],
[171,183,171,194,159,173,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,170,187,164,176,172,151],
[176,0,171,168,173,165,170,144],
[170,169,0,154,157,167,160,173],
[153,172,186,0,156,172,173,170],
[176,167,183,184,0,174,170,161],
[164,175,173,168,166,0,162,173],
[168,170,180,167,170,178,0,158],
[189,196,167,170,179,167,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,193,149,176,176,194,171],
[151,0,193,146,148,174,166,164],
[147,147,0,141,162,159,160,151],
[191,194,199,0,160,182,191,170],
[164,192,178,180,0,171,178,180],
[164,166,181,158,169,0,153,160],
[146,174,180,149,162,187,0,158],
[169,176,189,170,160,180,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,182,179,192,167,176,182],
[167,0,165,155,170,147,155,159],
[158,175,0,173,162,165,154,171],
[161,185,167,0,186,162,173,174],
[148,170,178,154,0,167,155,172],
[173,193,175,178,173,0,170,171],
[164,185,186,167,185,170,0,182],
[158,181,169,166,168,169,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,186,174,168,174,174,174],
[170,0,178,172,167,173,175,179],
[154,162,0,162,165,159,166,166],
[166,168,178,0,174,167,168,174],
[172,173,175,166,0,169,176,171],
[166,167,181,173,171,0,183,161],
[166,165,174,172,164,157,0,160],
[166,161,174,166,169,179,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,172,148,151,158,163,170],
[188,0,182,173,163,169,160,161],
[168,158,0,166,153,185,165,154],
[192,167,174,0,173,171,182,157],
[189,177,187,167,0,175,172,188],
[182,171,155,169,165,0,169,156],
[177,180,175,158,168,171,0,168],
[170,179,186,183,152,184,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,150,162,171,165,164,169],
[165,0,177,172,183,170,173,175],
[190,163,0,173,188,161,168,179],
[178,168,167,0,190,160,174,213],
[169,157,152,150,0,163,155,163],
[175,170,179,180,177,0,171,186],
[176,167,172,166,185,169,0,193],
[171,165,161,127,177,154,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,175,174,175,184,166,176],
[166,0,170,173,186,181,170,177],
[165,170,0,168,193,179,161,190],
[166,167,172,0,183,190,170,192],
[165,154,147,157,0,173,159,181],
[156,159,161,150,167,0,157,170],
[174,170,179,170,181,183,0,183],
[164,163,150,148,159,170,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,168,171,162,175,191,161],
[176,0,164,176,171,159,193,177],
[172,176,0,166,168,184,187,173],
[169,164,174,0,159,169,181,168],
[178,169,172,181,0,172,185,164],
[165,181,156,171,168,0,173,172],
[149,147,153,159,155,167,0,150],
[179,163,167,172,176,168,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,182,161,171,148,199,207],
[149,0,166,167,185,170,172,171],
[158,174,0,184,163,184,179,167],
[179,173,156,0,177,208,196,178],
[169,155,177,163,0,174,168,172],
[192,170,156,132,166,0,132,191],
[141,168,161,144,172,208,0,181],
[133,169,173,162,168,149,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,163,200,179,185,181,181],
[156,0,169,162,170,186,183,183],
[177,171,0,180,186,174,169,190],
[140,178,160,0,182,170,185,185],
[161,170,154,158,0,165,178,167],
[155,154,166,170,175,0,185,180],
[159,157,171,155,162,155,0,165],
[159,157,150,155,173,160,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,140,157,130,144,131,152],
[195,0,150,166,154,170,148,142],
[200,190,0,176,157,193,165,169],
[183,174,164,0,159,168,155,162],
[210,186,183,181,0,172,169,175],
[196,170,147,172,168,0,159,159],
[209,192,175,185,171,181,0,165],
[188,198,171,178,165,181,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,153,164,182,167,168,186],
[194,0,162,173,185,161,182,183],
[187,178,0,169,181,184,169,187],
[176,167,171,0,187,171,172,180],
[158,155,159,153,0,158,159,175],
[173,179,156,169,182,0,169,178],
[172,158,171,168,181,171,0,167],
[154,157,153,160,165,162,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,161,189,153,144,151,167],
[171,0,182,184,165,151,168,180],
[179,158,0,173,174,177,181,179],
[151,156,167,0,159,153,164,162],
[187,175,166,181,0,187,171,187],
[196,189,163,187,153,0,179,177],
[189,172,159,176,169,161,0,175],
[173,160,161,178,153,163,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,159,181,176,180,170,169],
[154,0,156,157,148,158,147,154],
[181,184,0,179,168,171,182,166],
[159,183,161,0,177,167,162,172],
[164,192,172,163,0,163,169,159],
[160,182,169,173,177,0,179,170],
[170,193,158,178,171,161,0,168],
[171,186,174,168,181,170,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,172,188,187,189,185,169],
[163,0,195,183,196,179,171,179],
[168,145,0,184,173,175,173,162],
[152,157,156,0,178,171,163,160],
[153,144,167,162,0,157,152,147],
[151,161,165,169,183,0,180,149],
[155,169,167,177,188,160,0,159],
[171,161,178,180,193,191,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,134,149,156,146,144,144],
[207,0,149,177,170,178,170,163],
[206,191,0,193,179,185,161,188],
[191,163,147,0,189,170,167,141],
[184,170,161,151,0,149,159,172],
[194,162,155,170,191,0,165,157],
[196,170,179,173,181,175,0,158],
[196,177,152,199,168,183,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,170,161,152,153,154,163],
[165,0,180,160,153,149,154,149],
[170,160,0,152,166,150,147,159],
[179,180,188,0,174,177,156,164],
[188,187,174,166,0,171,163,164],
[187,191,190,163,169,0,174,153],
[186,186,193,184,177,166,0,175],
[177,191,181,176,176,187,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,149,166,108,132,147,174],
[114,0,107,189,100,144,170,209],
[191,233,0,183,163,160,109,264],
[174,151,157,0,105,160,109,210],
[232,240,177,235,0,222,153,225],
[208,196,180,180,118,0,133,182],
[193,170,231,231,187,207,0,199],
[166,131,76,130,115,158,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,146,147,156,130,119,135],
[209,0,195,173,223,191,228,163],
[194,145,0,203,186,151,146,182],
[193,167,137,0,172,122,164,168],
[184,117,154,168,0,197,123,141],
[210,149,189,218,143,0,153,162],
[221,112,194,176,217,187,0,209],
[205,177,158,172,199,178,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,159,171,162,158,158,178],
[166,0,163,155,149,156,164,173],
[181,177,0,173,170,176,164,169],
[169,185,167,0,161,172,169,158],
[178,191,170,179,0,187,174,183],
[182,184,164,168,153,0,176,162],
[182,176,176,171,166,164,0,163],
[162,167,171,182,157,178,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,178,167,171,158,163,168],
[188,0,180,177,169,189,174,176],
[162,160,0,172,151,161,163,166],
[173,163,168,0,154,162,168,159],
[169,171,189,186,0,178,166,181],
[182,151,179,178,162,0,166,170],
[177,166,177,172,174,174,0,180],
[172,164,174,181,159,170,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,165,161,175,186,163,173],
[166,0,151,150,161,176,163,162],
[175,189,0,159,157,178,189,172],
[179,190,181,0,166,188,179,168],
[165,179,183,174,0,192,171,172],
[154,164,162,152,148,0,150,159],
[177,177,151,161,169,190,0,174],
[167,178,168,172,168,181,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,171,177,174,170,174,183],
[165,0,162,170,174,169,174,165],
[169,178,0,169,171,167,175,165],
[163,170,171,0,164,169,184,162],
[166,166,169,176,0,167,170,174],
[170,171,173,171,173,0,163,173],
[166,166,165,156,170,177,0,168],
[157,175,175,178,166,167,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,162,162,175,171,163,182],
[159,0,169,172,162,168,167,161],
[178,171,0,160,164,176,180,169],
[178,168,180,0,175,178,172,171],
[165,178,176,165,0,176,173,167],
[169,172,164,162,164,0,160,166],
[177,173,160,168,167,180,0,161],
[158,179,171,169,173,174,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,171,180,165,176,177,179],
[158,0,162,155,149,154,168,173],
[169,178,0,163,164,168,160,175],
[160,185,177,0,170,170,176,187],
[175,191,176,170,0,167,166,180],
[164,186,172,170,173,0,173,190],
[163,172,180,164,174,167,0,175],
[161,167,165,153,160,150,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,201,214,211,190,200,194],
[173,0,198,191,195,162,200,161],
[139,142,0,137,160,156,145,157],
[126,149,203,0,172,165,164,157],
[129,145,180,168,0,124,159,146],
[150,178,184,175,216,0,170,181],
[140,140,195,176,181,170,0,164],
[146,179,183,183,194,159,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,169,196,214,192,176,208],
[132,0,152,166,167,162,173,158],
[171,188,0,172,187,166,191,185],
[144,174,168,0,159,159,164,171],
[126,173,153,181,0,148,160,161],
[148,178,174,181,192,0,167,183],
[164,167,149,176,180,173,0,175],
[132,182,155,169,179,157,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,158,156,159,152,162,169],
[176,0,185,179,171,150,174,173],
[182,155,0,164,167,146,168,150],
[184,161,176,0,161,171,175,182],
[181,169,173,179,0,172,179,164],
[188,190,194,169,168,0,184,194],
[178,166,172,165,161,156,0,147],
[171,167,190,158,176,146,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,173,193,189,176,161,192],
[160,0,164,185,191,184,194,184],
[167,176,0,199,208,188,182,175],
[147,155,141,0,175,184,163,157],
[151,149,132,165,0,171,160,189],
[164,156,152,156,169,0,148,146],
[179,146,158,177,180,192,0,170],
[148,156,165,183,151,194,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,171,184,163,160,171,171],
[173,0,173,172,179,168,179,176],
[169,167,0,164,169,153,170,165],
[156,168,176,0,163,155,183,140],
[177,161,171,177,0,175,163,171],
[180,172,187,185,165,0,180,177],
[169,161,170,157,177,160,0,152],
[169,164,175,200,169,163,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,174,205,178,189,170,182],
[160,0,170,192,172,170,161,186],
[166,170,0,198,199,166,149,210],
[135,148,142,0,139,150,132,153],
[162,168,141,201,0,168,161,176],
[151,170,174,190,172,0,155,163],
[170,179,191,208,179,185,0,188],
[158,154,130,187,164,177,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,179,170,186,167,157,163],
[160,0,158,177,169,160,149,156],
[161,182,0,161,181,152,162,145],
[170,163,179,0,182,157,173,160],
[154,171,159,158,0,158,172,150],
[173,180,188,183,182,0,172,166],
[183,191,178,167,168,168,0,171],
[177,184,195,180,190,174,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,158,231,126,106,126,178],
[214,0,132,214,146,128,161,147],
[182,208,0,183,202,182,170,174],
[109,126,157,0,155,126,108,159],
[214,194,138,185,0,122,176,202],
[234,212,158,214,218,0,151,152],
[214,179,170,232,164,189,0,191],
[162,193,166,181,138,188,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,167,169,173,173,175,175],
[165,0,171,164,179,170,170,172],
[173,169,0,177,170,169,167,176],
[171,176,163,0,185,171,163,163],
[167,161,170,155,0,175,184,162],
[167,170,171,169,165,0,178,160],
[165,170,173,177,156,162,0,170],
[165,168,164,177,178,180,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,128,194,171,188,188,184],
[147,0,137,168,153,176,170,170],
[212,203,0,182,186,170,202,203],
[146,172,158,0,173,171,196,151],
[169,187,154,167,0,181,197,184],
[152,164,170,169,159,0,180,164],
[152,170,138,144,143,160,0,167],
[156,170,137,189,156,176,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,157,149,182,163,177,152],
[154,0,182,148,164,202,188,144],
[183,158,0,226,182,171,186,143],
[191,192,114,0,185,165,155,160],
[158,176,158,155,0,180,166,148],
[177,138,169,175,160,0,174,179],
[163,152,154,185,174,166,0,150],
[188,196,197,180,192,161,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,173,159,171,164,157,187],
[188,0,189,170,181,178,164,183],
[167,151,0,156,171,175,164,167],
[181,170,184,0,182,177,172,184],
[169,159,169,158,0,177,158,182],
[176,162,165,163,163,0,156,175],
[183,176,176,168,182,184,0,177],
[153,157,173,156,158,165,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,204,173,198,182,163,216],
[166,0,204,172,211,213,182,234],
[136,136,0,151,175,169,153,193],
[167,168,189,0,179,186,149,194],
[142,129,165,161,0,175,127,201],
[158,127,171,154,165,0,127,201],
[177,158,187,191,213,213,0,205],
[124,106,147,146,139,139,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,173,178,157,166,179,169],
[170,0,162,155,164,182,188,172],
[167,178,0,178,158,186,181,177],
[162,185,162,0,181,192,198,175],
[183,176,182,159,0,189,174,173],
[174,158,154,148,151,0,155,160],
[161,152,159,142,166,185,0,162],
[171,168,163,165,167,180,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,162,167,195,162,159,166],
[175,0,171,171,202,161,153,180],
[178,169,0,163,193,171,163,171],
[173,169,177,0,195,179,171,165],
[145,138,147,145,0,152,143,146],
[178,179,169,161,188,0,172,165],
[181,187,177,169,197,168,0,159],
[174,160,169,175,194,175,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,153,167,168,159,171,164],
[178,0,171,190,169,151,173,167],
[187,169,0,185,156,155,166,175],
[173,150,155,0,150,146,161,140],
[172,171,184,190,0,165,181,173],
[181,189,185,194,175,0,179,163],
[169,167,174,179,159,161,0,160],
[176,173,165,200,167,177,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,166,172,171,174,211,196],
[166,0,193,201,178,194,206,169],
[174,147,0,199,158,133,212,165],
[168,139,141,0,171,123,187,129],
[169,162,182,169,0,142,187,162],
[166,146,207,217,198,0,225,162],
[129,134,128,153,153,115,0,144],
[144,171,175,211,178,178,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,146,103,64,40,114,191],
[283,0,263,263,174,157,224,230],
[194,77,0,230,115,79,174,151],
[237,77,110,0,44,20,67,164],
[276,166,225,296,0,225,256,256],
[300,183,261,320,115,0,224,201],
[226,116,166,273,84,116,0,194],
[149,110,189,176,84,139,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,205,197,205,152,157,141],
[166,0,217,146,171,159,180,137],
[135,123,0,163,157,115,138,118],
[143,194,177,0,213,171,197,160],
[135,169,183,127,0,171,137,156],
[188,181,225,169,169,0,135,175],
[183,160,202,143,203,205,0,137],
[199,203,222,180,184,165,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,156,172,172,183,167,183],
[156,0,150,155,161,173,161,164],
[184,190,0,184,165,189,197,186],
[168,185,156,0,157,169,169,171],
[168,179,175,183,0,168,179,172],
[157,167,151,171,172,0,162,167],
[173,179,143,171,161,178,0,169],
[157,176,154,169,168,173,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,174,182,160,218,168,172],
[160,0,190,178,152,199,167,179],
[166,150,0,157,157,193,160,159],
[158,162,183,0,160,215,152,181],
[180,188,183,180,0,195,187,155],
[122,141,147,125,145,0,135,122],
[172,173,180,188,153,205,0,157],
[168,161,181,159,185,218,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,182,153,172,179,163,169],
[169,0,180,166,179,182,178,185],
[158,160,0,174,173,184,171,182],
[187,174,166,0,193,188,172,163],
[168,161,167,147,0,170,154,147],
[161,158,156,152,170,0,155,160],
[177,162,169,168,186,185,0,171],
[171,155,158,177,193,180,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,179,170,164,186,194,163],
[156,0,158,172,169,183,180,172],
[161,182,0,162,177,184,180,179],
[170,168,178,0,181,186,181,170],
[176,171,163,159,0,183,177,173],
[154,157,156,154,157,0,160,160],
[146,160,160,159,163,180,0,165],
[177,168,161,170,167,180,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,172,146,193,192,151,115],
[187,0,173,181,170,202,152,134],
[168,167,0,162,180,212,154,173],
[194,159,178,0,200,220,148,174],
[147,170,160,140,0,228,156,118],
[148,138,128,120,112,0,114,117],
[189,188,186,192,184,226,0,148],
[225,206,167,166,222,223,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,200,174,177,182,173,180],
[171,0,180,178,174,159,160,173],
[140,160,0,150,166,165,161,158],
[166,162,190,0,180,171,168,177],
[163,166,174,160,0,160,174,171],
[158,181,175,169,180,0,167,172],
[167,180,179,172,166,173,0,165],
[160,167,182,163,169,168,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,187,168,154,192,170,160],
[159,0,166,163,169,178,149,182],
[153,174,0,191,173,167,169,179],
[172,177,149,0,163,170,170,173],
[186,171,167,177,0,160,165,167],
[148,162,173,170,180,0,169,161],
[170,191,171,170,175,171,0,187],
[180,158,161,167,173,179,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,165,182,180,180,181,186],
[156,0,174,166,178,157,177,182],
[175,166,0,195,203,161,219,195],
[158,174,145,0,174,176,179,181],
[160,162,137,166,0,174,162,178],
[160,183,179,164,166,0,191,198],
[159,163,121,161,178,149,0,184],
[154,158,145,159,162,142,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,144,131,154,158,152,156],
[167,0,157,147,172,168,179,173],
[196,183,0,179,183,209,198,152],
[209,193,161,0,211,193,178,166],
[186,168,157,129,0,176,163,167],
[182,172,131,147,164,0,167,149],
[188,161,142,162,177,173,0,166],
[184,167,188,174,173,191,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,157,167,159,163,164,142],
[189,0,185,195,170,181,190,184],
[183,155,0,171,156,177,158,165],
[173,145,169,0,153,162,158,159],
[181,170,184,187,0,192,187,169],
[177,159,163,178,148,0,172,172],
[176,150,182,182,153,168,0,157],
[198,156,175,181,171,168,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,139,158,140,139,151,155],
[186,0,136,163,168,159,188,174],
[201,204,0,173,191,170,185,176],
[182,177,167,0,197,185,216,197],
[200,172,149,143,0,156,181,149],
[201,181,170,155,184,0,189,185],
[189,152,155,124,159,151,0,146],
[185,166,164,143,191,155,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,164,163,181,163,156,158],
[168,0,174,160,174,165,166,172],
[176,166,0,171,188,173,175,188],
[177,180,169,0,189,175,158,184],
[159,166,152,151,0,162,155,158],
[177,175,167,165,178,0,167,165],
[184,174,165,182,185,173,0,170],
[182,168,152,156,182,175,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,173,168,169,170,179,177],
[175,0,159,152,176,161,191,176],
[167,181,0,177,184,172,170,190],
[172,188,163,0,179,174,169,184],
[171,164,156,161,0,176,167,163],
[170,179,168,166,164,0,190,183],
[161,149,170,171,173,150,0,174],
[163,164,150,156,177,157,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,176,176,155,146,189,165],
[151,0,176,165,138,150,168,146],
[164,164,0,165,141,178,172,155],
[164,175,175,0,142,149,160,160],
[185,202,199,198,0,164,187,175],
[194,190,162,191,176,0,189,164],
[151,172,168,180,153,151,0,148],
[175,194,185,180,165,176,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,163,159,157,162,166,174],
[181,0,171,168,174,170,181,181],
[177,169,0,178,175,162,185,177],
[181,172,162,0,176,168,171,191],
[183,166,165,164,0,173,183,193],
[178,170,178,172,167,0,190,190],
[174,159,155,169,157,150,0,167],
[166,159,163,149,147,150,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,175,163,161,150,150,139],
[197,0,166,193,186,164,200,147],
[165,174,0,193,191,162,157,164],
[177,147,147,0,190,171,172,176],
[179,154,149,150,0,151,175,162],
[190,176,178,169,189,0,158,133],
[190,140,183,168,165,182,0,167],
[201,193,176,164,178,207,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,172,183,166,172,188,185],
[178,0,174,175,159,143,189,167],
[168,166,0,168,168,149,181,177],
[157,165,172,0,166,150,174,167],
[174,181,172,174,0,156,180,163],
[168,197,191,190,184,0,198,177],
[152,151,159,166,160,142,0,173],
[155,173,163,173,177,163,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,175,157,162,160,171,177],
[159,0,169,162,152,166,162,166],
[165,171,0,170,174,166,177,185],
[183,178,170,0,174,181,183,200],
[178,188,166,166,0,176,179,190],
[180,174,174,159,164,0,179,181],
[169,178,163,157,161,161,0,179],
[163,174,155,140,150,159,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,159,169,177,155,157,163],
[160,0,178,167,198,173,167,183],
[181,162,0,173,193,166,158,161],
[171,173,167,0,179,147,156,174],
[163,142,147,161,0,149,151,158],
[185,167,174,193,191,0,176,174],
[183,173,182,184,189,164,0,171],
[177,157,179,166,182,166,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,140,160,154,152,146,170],
[187,0,175,183,181,193,168,170],
[200,165,0,175,169,171,163,177],
[180,157,165,0,163,152,151,166],
[186,159,171,177,0,152,175,191],
[188,147,169,188,188,0,161,175],
[194,172,177,189,165,179,0,177],
[170,170,163,174,149,165,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,183,145,156,134,132,144],
[206,0,225,209,202,183,168,190],
[157,115,0,172,165,159,163,181],
[195,131,168,0,192,150,152,152],
[184,138,175,148,0,146,132,158],
[206,157,181,190,194,0,171,174],
[208,172,177,188,208,169,0,157],
[196,150,159,188,182,166,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,158,166,156,161,168,175],
[156,0,164,138,145,169,171,179],
[182,176,0,176,180,166,164,179],
[174,202,164,0,162,146,187,167],
[184,195,160,178,0,179,178,201],
[179,171,174,194,161,0,174,180],
[172,169,176,153,162,166,0,174],
[165,161,161,173,139,160,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,160,175,184,150,190,150],
[173,0,172,182,191,155,183,171],
[180,168,0,170,166,152,181,165],
[165,158,170,0,179,161,175,151],
[156,149,174,161,0,145,157,162],
[190,185,188,179,195,0,184,167],
[150,157,159,165,183,156,0,159],
[190,169,175,189,178,173,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,189,153,200,144,165,180],
[162,0,211,180,211,181,189,192],
[151,129,0,170,187,166,189,196],
[187,160,170,0,176,172,193,188],
[140,129,153,164,0,152,175,142],
[196,159,174,168,188,0,197,205],
[175,151,151,147,165,143,0,153],
[160,148,144,152,198,135,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,170,161,172,171,174,171],
[156,0,158,166,167,171,159,152],
[170,182,0,169,167,175,162,162],
[179,174,171,0,167,180,181,168],
[168,173,173,173,0,174,170,170],
[169,169,165,160,166,0,164,159],
[166,181,178,159,170,176,0,172],
[169,188,178,172,170,181,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,149,137,166,138,159,151],
[209,0,186,175,193,174,166,187],
[191,154,0,177,171,158,156,147],
[203,165,163,0,174,164,168,168],
[174,147,169,166,0,159,175,163],
[202,166,182,176,181,0,168,165],
[181,174,184,172,165,172,0,171],
[189,153,193,172,177,175,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,140,163,159,160,146,159],
[210,0,190,178,170,173,155,171],
[200,150,0,166,169,164,165,167],
[177,162,174,0,162,162,161,164],
[181,170,171,178,0,164,158,157],
[180,167,176,178,176,0,168,180],
[194,185,175,179,182,172,0,166],
[181,169,173,176,183,160,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,171,152,159,185,171,177],
[187,0,176,174,171,177,175,159],
[169,164,0,164,164,171,159,177],
[188,166,176,0,168,186,177,171],
[181,169,176,172,0,176,174,168],
[155,163,169,154,164,0,157,165],
[169,165,181,163,166,183,0,169],
[163,181,163,169,172,175,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,176,174,174,178,173,171],
[171,0,165,182,183,160,166,168],
[164,175,0,169,164,163,160,160],
[166,158,171,0,177,176,165,162],
[166,157,176,163,0,162,150,164],
[162,180,177,164,178,0,156,174],
[167,174,180,175,190,184,0,182],
[169,172,180,178,176,166,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,160,185,147,141,142,169],
[217,0,168,214,163,159,176,165],
[180,172,0,205,165,170,176,194],
[155,126,135,0,149,96,113,146],
[193,177,175,191,0,154,199,184],
[199,181,170,244,186,0,191,172],
[198,164,164,227,141,149,0,175],
[171,175,146,194,156,168,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,162,163,171,176,190,163],
[175,0,168,158,158,190,158,169],
[178,172,0,156,151,197,178,155],
[177,182,184,0,182,183,173,157],
[169,182,189,158,0,191,180,173],
[164,150,143,157,149,0,163,154],
[150,182,162,167,160,177,0,180],
[177,171,185,183,167,186,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,175,180,164,173,166,173],
[179,0,177,176,164,177,168,171],
[165,163,0,170,158,163,161,175],
[160,164,170,0,173,173,178,180],
[176,176,182,167,0,194,172,192],
[167,163,177,167,146,0,156,175],
[174,172,179,162,168,184,0,188],
[167,169,165,160,148,165,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,172,173,134,171,173,179],
[163,0,139,159,169,164,167,166],
[168,201,0,183,176,189,174,193],
[167,181,157,0,150,178,185,167],
[206,171,164,190,0,183,192,199],
[169,176,151,162,157,0,182,168],
[167,173,166,155,148,158,0,174],
[161,174,147,173,141,172,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,157,153,164,147,153,142],
[187,0,188,164,165,168,170,177],
[183,152,0,151,157,158,160,160],
[187,176,189,0,171,170,174,180],
[176,175,183,169,0,176,166,175],
[193,172,182,170,164,0,157,174],
[187,170,180,166,174,183,0,162],
[198,163,180,160,165,166,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,169,171,174,204,192,178],
[148,0,167,152,148,187,186,165],
[171,173,0,170,143,169,176,162],
[169,188,170,0,149,196,181,174],
[166,192,197,191,0,200,197,182],
[136,153,171,144,140,0,160,165],
[148,154,164,159,143,180,0,147],
[162,175,178,166,158,175,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,165,170,164,153,174,164],
[162,0,159,172,191,156,169,177],
[175,181,0,163,179,156,170,170],
[170,168,177,0,183,156,170,155],
[176,149,161,157,0,170,169,164],
[187,184,184,184,170,0,171,178],
[166,171,170,170,171,169,0,168],
[176,163,170,185,176,162,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,173,184,169,186,167,162],
[171,0,167,166,167,161,182,163],
[167,173,0,186,175,172,182,178],
[156,174,154,0,166,175,170,170],
[171,173,165,174,0,173,183,176],
[154,179,168,165,167,0,169,170],
[173,158,158,170,157,171,0,165],
[178,177,162,170,164,170,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,163,169,167,151,165,170],
[180,0,167,162,173,164,172,169],
[177,173,0,165,174,164,169,175],
[171,178,175,0,183,179,165,183],
[173,167,166,157,0,188,162,174],
[189,176,176,161,152,0,154,171],
[175,168,171,175,178,186,0,194],
[170,171,165,157,166,169,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,159,195,175,186,181,172],
[178,0,175,174,165,182,177,167],
[181,165,0,179,149,171,178,167],
[145,166,161,0,149,167,169,178],
[165,175,191,191,0,173,171,179],
[154,158,169,173,167,0,165,175],
[159,163,162,171,169,175,0,180],
[168,173,173,162,161,165,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,168,172,185,191,178,176],
[171,0,162,171,168,187,170,178],
[172,178,0,176,181,183,170,173],
[168,169,164,0,164,187,169,165],
[155,172,159,176,0,180,169,166],
[149,153,157,153,160,0,153,153],
[162,170,170,171,171,187,0,162],
[164,162,167,175,174,187,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,170,220,166,172,196,201],
[128,0,128,138,147,129,144,169],
[170,212,0,205,175,171,197,195],
[120,202,135,0,160,169,166,186],
[174,193,165,180,0,162,175,201],
[168,211,169,171,178,0,182,208],
[144,196,143,174,165,158,0,199],
[139,171,145,154,139,132,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,177,176,164,191,166,173],
[164,0,173,164,150,179,169,173],
[163,167,0,171,169,191,163,169],
[164,176,169,0,148,183,163,148],
[176,190,171,192,0,187,170,180],
[149,161,149,157,153,0,141,157],
[174,171,177,177,170,199,0,167],
[167,167,171,192,160,183,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,177,180,161,153,194,156],
[182,0,203,159,145,158,163,186],
[163,137,0,166,133,152,151,162],
[160,181,174,0,163,151,149,192],
[179,195,207,177,0,164,231,176],
[187,182,188,189,176,0,162,167],
[146,177,189,191,109,178,0,185],
[184,154,178,148,164,173,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,173,168,189,199,149,188],
[146,0,160,165,174,146,170,187],
[167,180,0,191,173,170,169,194],
[172,175,149,0,166,139,167,157],
[151,166,167,174,0,187,175,195],
[141,194,170,201,153,0,163,215],
[191,170,171,173,165,177,0,190],
[152,153,146,183,145,125,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,164,162,164,162,174,157],
[175,0,179,163,162,163,179,168],
[176,161,0,168,167,166,186,167],
[178,177,172,0,165,173,196,172],
[176,178,173,175,0,169,187,167],
[178,177,174,167,171,0,189,186],
[166,161,154,144,153,151,0,153],
[183,172,173,168,173,154,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,176,174,174,184,185,174],
[172,0,176,176,165,195,181,179],
[164,164,0,187,174,196,193,177],
[166,164,153,0,159,156,177,162],
[166,175,166,181,0,162,183,160],
[156,145,144,184,178,0,173,157],
[155,159,147,163,157,167,0,160],
[166,161,163,178,180,183,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,155,173,162,162,170,175],
[174,0,178,160,177,162,177,161],
[185,162,0,174,187,166,172,166],
[167,180,166,0,184,165,154,159],
[178,163,153,156,0,149,157,161],
[178,178,174,175,191,0,189,161],
[170,163,168,186,183,151,0,165],
[165,179,174,181,179,179,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,170,143,173,162,152,150],
[170,0,159,138,170,167,170,175],
[170,181,0,156,165,161,146,159],
[197,202,184,0,191,170,184,176],
[167,170,175,149,0,155,170,163],
[178,173,179,170,185,0,162,162],
[188,170,194,156,170,178,0,177],
[190,165,181,164,177,178,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,161,178,166,192,177,194],
[143,0,172,148,149,163,174,181],
[179,168,0,167,179,190,164,197],
[162,192,173,0,158,172,152,170],
[174,191,161,182,0,194,189,177],
[148,177,150,168,146,0,156,149],
[163,166,176,188,151,184,0,183],
[146,159,143,170,163,191,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,172,184,172,192,162,168],
[171,0,167,185,173,190,172,162],
[168,173,0,179,185,183,168,177],
[156,155,161,0,169,171,153,158],
[168,167,155,171,0,173,175,167],
[148,150,157,169,167,0,152,148],
[178,168,172,187,165,188,0,167],
[172,178,163,182,173,192,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,179,167,157,158,169,149],
[176,0,168,166,162,154,156,148],
[161,172,0,171,152,165,168,143],
[173,174,169,0,174,154,163,150],
[183,178,188,166,0,177,163,157],
[182,186,175,186,163,0,167,146],
[171,184,172,177,177,173,0,170],
[191,192,197,190,183,194,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,149,180,159,170,173,166],
[172,0,160,171,164,159,156,160],
[191,180,0,167,174,172,175,168],
[160,169,173,0,157,158,163,160],
[181,176,166,183,0,170,169,165],
[170,181,168,182,170,0,170,169],
[167,184,165,177,171,170,0,171],
[174,180,172,180,175,171,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,178,175,176,174,174,160],
[164,0,160,166,176,157,159,168],
[162,180,0,170,178,158,173,169],
[165,174,170,0,184,164,158,174],
[164,164,162,156,0,168,165,170],
[166,183,182,176,172,0,164,171],
[166,181,167,182,175,176,0,168],
[180,172,171,166,170,169,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,212,198,180,269,233,160],
[102,0,190,165,189,187,194,122],
[128,150,0,137,116,286,166,208],
[142,175,203,0,189,321,167,186],
[160,151,224,151,0,317,166,222],
[71,153,54,19,23,0,60,126],
[107,146,174,173,174,280,0,126],
[180,218,132,154,118,214,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,164,177,176,164,197,181],
[154,0,147,158,147,156,160,169],
[176,193,0,187,180,168,196,194],
[163,182,153,0,161,172,181,185],
[164,193,160,179,0,167,188,194],
[176,184,172,168,173,0,174,179],
[143,180,144,159,152,166,0,177],
[159,171,146,155,146,161,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,165,174,153,183,173,169],
[183,0,149,166,165,170,185,177],
[175,191,0,184,176,186,190,160],
[166,174,156,0,159,171,177,171],
[187,175,164,181,0,176,178,164],
[157,170,154,169,164,0,173,163],
[167,155,150,163,162,167,0,157],
[171,163,180,169,176,177,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,160,149,152,154,159,171],
[177,0,168,151,155,161,166,171],
[180,172,0,155,153,164,169,162],
[191,189,185,0,170,186,179,184],
[188,185,187,170,0,171,188,188],
[186,179,176,154,169,0,178,181],
[181,174,171,161,152,162,0,175],
[169,169,178,156,152,159,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,247,231,247,147,62,247],
[177,0,340,324,239,178,93,340],
[93,0,0,93,177,93,93,178],
[109,16,247,0,100,0,93,194],
[93,101,163,240,0,85,93,194],
[193,162,247,340,255,0,255,340],
[278,247,247,247,247,85,0,247],
[93,0,162,146,146,0,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,164,159,164,186,173,154],
[166,0,161,167,164,168,161,160],
[176,179,0,165,167,176,174,167],
[181,173,175,0,166,161,176,175],
[176,176,173,174,0,174,166,167],
[154,172,164,179,166,0,180,178],
[167,179,166,164,174,160,0,172],
[186,180,173,165,173,162,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,192,203,134,104,157,185],
[194,0,161,153,134,122,177,101],
[148,179,0,205,99,138,166,109],
[137,187,135,0,147,137,194,91],
[206,206,241,193,0,101,134,137],
[236,218,202,203,239,0,262,156],
[183,163,174,146,206,78,0,130],
[155,239,231,249,203,184,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,163,161,157,164,149,167],
[186,0,184,190,186,185,185,170],
[177,156,0,178,163,169,182,174],
[179,150,162,0,154,157,156,161],
[183,154,177,186,0,182,170,168],
[176,155,171,183,158,0,179,180],
[191,155,158,184,170,161,0,167],
[173,170,166,179,172,160,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,212,198,211,254,181,157],
[158,0,144,166,194,179,134,192],
[128,196,0,160,163,176,171,178],
[142,174,180,0,176,199,160,129],
[129,146,177,164,0,197,177,129],
[86,161,164,141,143,0,131,161],
[159,206,169,180,163,209,0,141],
[183,148,162,211,211,179,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,185,155,162,175,165,179],
[173,0,172,161,164,178,177,172],
[155,168,0,165,162,165,169,170],
[185,179,175,0,168,160,172,173],
[178,176,178,172,0,173,183,170],
[165,162,175,180,167,0,177,169],
[175,163,171,168,157,163,0,172],
[161,168,170,167,170,171,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,177,190,185,190,167,199],
[148,0,166,186,168,169,163,180],
[163,174,0,195,190,177,183,180],
[150,154,145,0,136,148,147,165],
[155,172,150,204,0,166,160,184],
[150,171,163,192,174,0,180,185],
[173,177,157,193,180,160,0,185],
[141,160,160,175,156,155,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,166,182,171,163,138,187],
[182,0,207,177,199,184,113,225],
[174,133,0,231,188,143,174,175],
[158,163,109,0,162,138,152,143],
[169,141,152,178,0,103,147,121],
[177,156,197,202,237,0,162,232],
[202,227,166,188,193,178,0,233],
[153,115,165,197,219,108,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,162,168,185,183,147,188],
[192,0,168,193,169,216,158,187],
[178,172,0,162,152,225,184,220],
[172,147,178,0,157,180,131,201],
[155,171,188,183,0,201,157,211],
[157,124,115,160,139,0,113,158],
[193,182,156,209,183,227,0,229],
[152,153,120,139,129,182,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,163,161,173,149,170,195],
[192,0,170,179,179,178,155,191],
[177,170,0,152,176,172,156,198],
[179,161,188,0,183,191,169,211],
[167,161,164,157,0,175,170,199],
[191,162,168,149,165,0,171,208],
[170,185,184,171,170,169,0,202],
[145,149,142,129,141,132,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,79,151,111,130,169,119],
[245,0,175,134,171,182,194,152],
[261,165,0,193,156,183,224,227],
[189,206,147,0,131,185,180,170],
[229,169,184,209,0,171,202,213],
[210,158,157,155,169,0,185,211],
[171,146,116,160,138,155,0,168],
[221,188,113,170,127,129,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,184,167,163,181,178,175],
[167,0,181,186,202,194,137,172],
[156,159,0,149,173,170,137,143],
[173,154,191,0,209,175,163,174],
[177,138,167,131,0,178,148,173],
[159,146,170,165,162,0,146,159],
[162,203,203,177,192,194,0,203],
[165,168,197,166,167,181,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,221,157,161,155,182,189,160],
[119,0,139,167,132,164,202,135],
[183,201,0,161,191,163,161,178],
[179,173,179,0,179,188,165,182],
[185,208,149,161,0,173,192,178],
[158,176,177,152,167,0,156,180],
[151,138,179,175,148,184,0,150],
[180,205,162,158,162,160,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,149,134,144,163,147,140],
[174,0,165,150,160,179,170,148],
[191,175,0,174,159,174,164,148],
[206,190,166,0,170,182,175,158],
[196,180,181,170,0,179,187,173],
[177,161,166,158,161,0,142,145],
[193,170,176,165,153,198,0,143],
[200,192,192,182,167,195,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,168,192,174,176,168,175],
[156,0,166,174,172,194,171,170],
[172,174,0,185,172,173,159,170],
[148,166,155,0,155,163,163,160],
[166,168,168,185,0,180,158,165],
[164,146,167,177,160,0,171,164],
[172,169,181,177,182,169,0,172],
[165,170,170,180,175,176,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,165,141,163,159,168,160],
[180,0,170,152,181,172,164,157],
[175,170,0,158,178,180,181,167],
[199,188,182,0,200,176,185,168],
[177,159,162,140,0,160,162,146],
[181,168,160,164,180,0,174,173],
[172,176,159,155,178,166,0,152],
[180,183,173,172,194,167,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,159,180,172,166,164,167],
[173,0,161,173,165,162,161,158],
[181,179,0,175,166,159,160,162],
[160,167,165,0,162,155,161,150],
[168,175,174,178,0,172,174,169],
[174,178,181,185,168,0,167,175],
[176,179,180,179,166,173,0,173],
[173,182,178,190,171,165,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,186,163,174,171,143,152],
[186,0,187,185,174,187,162,173],
[154,153,0,154,163,162,139,152],
[177,155,186,0,169,178,156,160],
[166,166,177,171,0,169,158,146],
[169,153,178,162,171,0,152,146],
[197,178,201,184,182,188,0,161],
[188,167,188,180,194,194,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,166,155,176,182,162,163],
[171,0,159,162,172,176,155,183],
[174,181,0,170,165,185,161,185],
[185,178,170,0,171,183,173,189],
[164,168,175,169,0,177,166,183],
[158,164,155,157,163,0,150,165],
[178,185,179,167,174,190,0,182],
[177,157,155,151,157,175,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,150,131,134,175,138,137],
[185,0,205,154,157,210,177,160],
[190,135,0,159,128,213,195,139],
[209,186,181,0,178,223,180,147],
[206,183,212,162,0,196,177,135],
[165,130,127,117,144,0,151,108],
[202,163,145,160,163,189,0,183],
[203,180,201,193,205,232,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,170,182,173,205,193,189],
[163,0,181,174,179,172,184,182],
[170,159,0,164,179,184,174,178],
[158,166,176,0,172,170,175,172],
[167,161,161,168,0,158,181,178],
[135,168,156,170,182,0,178,172],
[147,156,166,165,159,162,0,177],
[151,158,162,168,162,168,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,175,165,180,171,210,186],
[170,0,165,160,170,161,208,157],
[165,175,0,159,168,139,188,166],
[175,180,181,0,172,168,220,161],
[160,170,172,168,0,166,172,167],
[169,179,201,172,174,0,218,168],
[130,132,152,120,168,122,0,159],
[154,183,174,179,173,172,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,195,189,170,165,155,167],
[139,0,178,160,154,130,178,131],
[145,162,0,154,164,162,142,156],
[151,180,186,0,166,152,145,170],
[170,186,176,174,0,161,166,169],
[175,210,178,188,179,0,157,175],
[185,162,198,195,174,183,0,169],
[173,209,184,170,171,165,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,159,184,187,168,187,175],
[170,0,188,174,171,197,185,191],
[181,152,0,188,166,189,172,166],
[156,166,152,0,162,188,156,159],
[153,169,174,178,0,175,182,170],
[172,143,151,152,165,0,143,136],
[153,155,168,184,158,197,0,176],
[165,149,174,181,170,204,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,181,173,162,164,168,157],
[171,0,174,167,162,167,161,169],
[159,166,0,164,163,174,170,177],
[167,173,176,0,168,150,168,173],
[178,178,177,172,0,157,168,171],
[176,173,166,190,183,0,171,175],
[172,179,170,172,172,169,0,178],
[183,171,163,167,169,165,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,163,173,166,163,171,174],
[181,0,190,174,180,153,181,174],
[177,150,0,175,157,162,187,173],
[167,166,165,0,150,187,179,156],
[174,160,183,190,0,183,167,174],
[177,187,178,153,157,0,180,161],
[169,159,153,161,173,160,0,148],
[166,166,167,184,166,179,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,182,198,158,180,170,177],
[148,0,187,177,162,184,143,168],
[158,153,0,148,162,156,133,158],
[142,163,192,0,150,179,170,161],
[182,178,178,190,0,169,184,188],
[160,156,184,161,171,0,140,161],
[170,197,207,170,156,200,0,173],
[163,172,182,179,152,179,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,150,145,179,177,179,187],
[172,0,136,181,184,180,177,177],
[190,204,0,184,184,174,162,177],
[195,159,156,0,188,158,185,168],
[161,156,156,152,0,159,151,146],
[163,160,166,182,181,0,190,159],
[161,163,178,155,189,150,0,153],
[153,163,163,172,194,181,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,159,160,162,151,156,163],
[185,0,165,183,165,163,172,173],
[181,175,0,168,177,174,177,166],
[180,157,172,0,158,140,169,168],
[178,175,163,182,0,170,173,191],
[189,177,166,200,170,0,191,190],
[184,168,163,171,167,149,0,164],
[177,167,174,172,149,150,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,189,175,179,177,175,177],
[184,0,180,194,168,179,179,180],
[151,160,0,174,164,149,154,160],
[165,146,166,0,165,159,159,166],
[161,172,176,175,0,180,185,171],
[163,161,191,181,160,0,158,178],
[165,161,186,181,155,182,0,180],
[163,160,180,174,169,162,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,159,155,146,165,167,168],
[164,0,148,154,154,156,164,163],
[181,192,0,174,163,183,176,179],
[185,186,166,0,172,182,187,181],
[194,186,177,168,0,188,189,180],
[175,184,157,158,152,0,171,174],
[173,176,164,153,151,169,0,175],
[172,177,161,159,160,166,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,165,165,162,169,178,160],
[174,0,158,153,172,159,172,168],
[175,182,0,173,168,164,172,168],
[175,187,167,0,175,173,186,171],
[178,168,172,165,0,169,173,170],
[171,181,176,167,171,0,186,170],
[162,168,168,154,167,154,0,155],
[180,172,172,169,170,170,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,161,186,164,185,183,184],
[146,0,166,176,176,196,182,193],
[179,174,0,197,172,177,165,179],
[154,164,143,0,159,185,165,173],
[176,164,168,181,0,183,168,175],
[155,144,163,155,157,0,160,160],
[157,158,175,175,172,180,0,170],
[156,147,161,167,165,180,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,162,170,180,194,161,181],
[184,0,181,175,175,184,169,191],
[178,159,0,166,154,174,166,173],
[170,165,174,0,174,186,169,180],
[160,165,186,166,0,190,174,202],
[146,156,166,154,150,0,156,185],
[179,171,174,171,166,184,0,188],
[159,149,167,160,138,155,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,150,161,159,159,172,174],
[182,0,162,166,157,163,191,189],
[190,178,0,179,167,184,183,187],
[179,174,161,0,163,179,187,180],
[181,183,173,177,0,165,182,170],
[181,177,156,161,175,0,193,182],
[168,149,157,153,158,147,0,165],
[166,151,153,160,170,158,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,169,177,173,162,178,168],
[171,0,173,182,178,176,173,170],
[171,167,0,174,171,163,169,173],
[163,158,166,0,177,165,172,158],
[167,162,169,163,0,149,163,160],
[178,164,177,175,191,0,167,177],
[162,167,171,168,177,173,0,171],
[172,170,167,182,180,163,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,172,164,170,170,178,166],
[164,0,163,160,168,169,176,165],
[168,177,0,168,183,167,181,174],
[176,180,172,0,174,168,192,171],
[170,172,157,166,0,163,168,160],
[170,171,173,172,177,0,184,161],
[162,164,159,148,172,156,0,149],
[174,175,166,169,180,179,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,173,153,164,156,182,160],
[178,0,169,176,170,169,178,164],
[167,171,0,160,159,172,155,178],
[187,164,180,0,171,168,189,185],
[176,170,181,169,0,162,188,166],
[184,171,168,172,178,0,174,171],
[158,162,185,151,152,166,0,159],
[180,176,162,155,174,169,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,183,164,179,173,182,181],
[148,0,182,174,179,175,172,163],
[157,158,0,164,175,167,168,169],
[176,166,176,0,180,167,164,177],
[161,161,165,160,0,164,164,170],
[167,165,173,173,176,0,169,177],
[158,168,172,176,176,171,0,176],
[159,177,171,163,170,163,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,164,178,168,181,152,171],
[176,0,169,171,176,166,160,178],
[176,171,0,173,174,169,175,171],
[162,169,167,0,157,174,153,160],
[172,164,166,183,0,164,161,175],
[159,174,171,166,176,0,154,181],
[188,180,165,187,179,186,0,173],
[169,162,169,180,165,159,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,171,174,160,191,157,158],
[150,0,159,179,152,170,146,151],
[169,181,0,162,177,188,147,167],
[166,161,178,0,179,174,171,165],
[180,188,163,161,0,196,160,178],
[149,170,152,166,144,0,136,142],
[183,194,193,169,180,204,0,181],
[182,189,173,175,162,198,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,164,179,162,170,161,165],
[168,0,173,175,159,171,164,171],
[176,167,0,198,167,177,168,178],
[161,165,142,0,156,160,161,157],
[178,181,173,184,0,167,163,177],
[170,169,163,180,173,0,166,159],
[179,176,172,179,177,174,0,166],
[175,169,162,183,163,181,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,40,114,206,184,114,40],
[244,0,122,82,166,152,82,152],
[300,218,0,166,166,244,74,292],
[226,258,174,0,148,174,104,258],
[134,174,174,192,0,248,178,174],
[156,188,96,166,92,0,96,148],
[226,258,266,236,162,244,0,218],
[300,188,48,82,166,192,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,159,151,153,152,169,144],
[171,0,156,174,180,168,162,170],
[181,184,0,167,168,158,193,163],
[189,166,173,0,166,161,174,160],
[187,160,172,174,0,155,177,155],
[188,172,182,179,185,0,180,165],
[171,178,147,166,163,160,0,147],
[196,170,177,180,185,175,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,165,178,212,216,174,186],
[191,0,164,195,182,214,180,192],
[175,176,0,164,197,211,185,199],
[162,145,176,0,170,190,181,161],
[128,158,143,170,0,187,160,165],
[124,126,129,150,153,0,161,151],
[166,160,155,159,180,179,0,182],
[154,148,141,179,175,189,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,237,237,184,142,184,134],
[156,0,134,176,134,81,173,134],
[103,206,0,279,245,184,287,237],
[103,164,61,0,142,134,192,184],
[156,206,95,198,0,53,153,156],
[198,259,156,206,287,0,153,237],
[156,167,53,148,187,187,0,187],
[206,206,103,156,184,103,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,156,169,200,153,191,171],
[138,0,151,144,167,144,178,182],
[184,189,0,178,177,147,205,195],
[171,196,162,0,165,189,213,200],
[140,173,163,175,0,151,186,164],
[187,196,193,151,189,0,222,206],
[149,162,135,127,154,118,0,141],
[169,158,145,140,176,134,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,161,164,157,160,162,171],
[175,0,157,178,164,154,147,168],
[179,183,0,168,168,175,159,179],
[176,162,172,0,164,150,164,167],
[183,176,172,176,0,168,170,189],
[180,186,165,190,172,0,171,181],
[178,193,181,176,170,169,0,185],
[169,172,161,173,151,159,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,159,172,164,163,156,176],
[182,0,185,179,176,179,169,169],
[181,155,0,183,160,174,165,171],
[168,161,157,0,162,164,146,166],
[176,164,180,178,0,170,170,172],
[177,161,166,176,170,0,163,165],
[184,171,175,194,170,177,0,188],
[164,171,169,174,168,175,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,178,163,182,167,187,173],
[164,0,179,170,181,171,169,171],
[162,161,0,172,166,163,164,164],
[177,170,168,0,180,172,167,163],
[158,159,174,160,0,158,175,168],
[173,169,177,168,182,0,170,168],
[153,171,176,173,165,170,0,170],
[167,169,176,177,172,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,168,175,181,182,171,174],
[168,0,165,158,183,169,142,176],
[172,175,0,166,183,171,170,180],
[165,182,174,0,189,181,168,173],
[159,157,157,151,0,153,146,156],
[158,171,169,159,187,0,157,168],
[169,198,170,172,194,183,0,181],
[166,164,160,167,184,172,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,175,158,174,177,166,185],
[160,0,184,168,168,170,161,171],
[165,156,0,159,171,160,156,170],
[182,172,181,0,178,169,174,170],
[166,172,169,162,0,185,164,172],
[163,170,180,171,155,0,164,178],
[174,179,184,166,176,176,0,176],
[155,169,170,170,168,162,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,195,194,157,154,177,172],
[184,0,202,177,161,180,158,164],
[145,138,0,160,135,160,136,147],
[146,163,180,0,165,167,166,155],
[183,179,205,175,0,225,173,159],
[186,160,180,173,115,0,166,149],
[163,182,204,174,167,174,0,173],
[168,176,193,185,181,191,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,206,162,115,163,146,156],
[184,0,181,171,141,181,173,170],
[134,159,0,139,145,149,147,170],
[178,169,201,0,179,167,188,194],
[225,199,195,161,0,183,181,189],
[177,159,191,173,157,0,165,216],
[194,167,193,152,159,175,0,195],
[184,170,170,146,151,124,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,179,162,187,179,147,161],
[151,0,158,151,169,160,143,152],
[161,182,0,158,184,160,154,159],
[178,189,182,0,187,174,162,181],
[153,171,156,153,0,154,145,167],
[161,180,180,166,186,0,175,163],
[193,197,186,178,195,165,0,183],
[179,188,181,159,173,177,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,167,171,169,158,167,196],
[172,0,173,197,171,206,164,202],
[173,167,0,177,160,162,155,179],
[169,143,163,0,134,179,154,209],
[171,169,180,206,0,227,193,197],
[182,134,178,161,113,0,153,171],
[173,176,185,186,147,187,0,159],
[144,138,161,131,143,169,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,167,145,219,206,168,199],
[166,0,186,179,246,203,149,215],
[173,154,0,140,175,203,173,199],
[195,161,200,0,251,226,187,276],
[121,94,165,89,0,199,117,167],
[134,137,137,114,141,0,104,179],
[172,191,167,153,223,236,0,221],
[141,125,141,64,173,161,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,178,176,186,166,177,172],
[175,0,183,170,179,175,177,174],
[162,157,0,167,163,161,158,162],
[164,170,173,0,173,160,164,157],
[154,161,177,167,0,158,175,169],
[174,165,179,180,182,0,170,171],
[163,163,182,176,165,170,0,167],
[168,166,178,183,171,169,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,183,195,188,189,184,168],
[164,0,208,175,210,190,178,154],
[157,132,0,156,174,168,152,157],
[145,165,184,0,176,168,155,132],
[152,130,166,164,0,170,144,138],
[151,150,172,172,170,0,148,156],
[156,162,188,185,196,192,0,176],
[172,186,183,208,202,184,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,168,182,176,191,184,177],
[157,0,173,182,179,177,178,180],
[172,167,0,167,170,185,176,168],
[158,158,173,0,171,172,171,168],
[164,161,170,169,0,170,179,166],
[149,163,155,168,170,0,177,160],
[156,162,164,169,161,163,0,155],
[163,160,172,172,174,180,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,169,158,186,174,160,167],
[170,0,191,180,197,195,169,194],
[171,149,0,163,181,193,155,165],
[182,160,177,0,182,185,170,196],
[154,143,159,158,0,163,138,162],
[166,145,147,155,177,0,142,162],
[180,171,185,170,202,198,0,183],
[173,146,175,144,178,178,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,161,172,162,163,169,166],
[170,0,178,179,182,162,186,180],
[179,162,0,174,168,172,176,172],
[168,161,166,0,175,163,178,160],
[178,158,172,165,0,171,182,166],
[177,178,168,177,169,0,179,163],
[171,154,164,162,158,161,0,169],
[174,160,168,180,174,177,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,171,175,174,200,161,188],
[139,0,137,159,162,163,160,159],
[169,203,0,165,199,181,180,173],
[165,181,175,0,191,157,178,175],
[166,178,141,149,0,161,160,171],
[140,177,159,183,179,0,162,145],
[179,180,160,162,180,178,0,162],
[152,181,167,165,169,195,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,179,156,176,183,165,157],
[168,0,195,180,184,176,169,182],
[161,145,0,158,166,162,154,160],
[184,160,182,0,169,165,157,162],
[164,156,174,171,0,177,160,182],
[157,164,178,175,163,0,174,180],
[175,171,186,183,180,166,0,173],
[183,158,180,178,158,160,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,160,166,171,147,173,162],
[165,0,153,186,146,143,144,170],
[180,187,0,170,183,173,162,158],
[174,154,170,0,172,163,137,149],
[169,194,157,168,0,133,153,159],
[193,197,167,177,207,0,180,181],
[167,196,178,203,187,160,0,174],
[178,170,182,191,181,159,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,211,214,212,197,176,229],
[176,0,203,217,189,159,190,221],
[129,137,0,192,152,173,119,175],
[126,123,148,0,164,130,148,167],
[128,151,188,176,0,204,167,178],
[143,181,167,210,136,0,175,210],
[164,150,221,192,173,165,0,181],
[111,119,165,173,162,130,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,163,183,144,161,148,149],
[198,0,217,195,178,137,178,177],
[177,123,0,185,102,142,156,139],
[157,145,155,0,149,150,134,142],
[196,162,238,191,0,174,179,204],
[179,203,198,190,166,0,183,156],
[192,162,184,206,161,157,0,157],
[191,163,201,198,136,184,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,202,153,168,152,161,193],
[169,0,194,151,170,158,163,193],
[138,146,0,152,155,142,148,197],
[187,189,188,0,170,169,175,206],
[172,170,185,170,0,173,161,210],
[188,182,198,171,167,0,154,214],
[179,177,192,165,179,186,0,200],
[147,147,143,134,130,126,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,154,185,186,150,183,168],
[178,0,157,182,186,181,205,182],
[186,183,0,183,185,157,193,192],
[155,158,157,0,160,145,173,163],
[154,154,155,180,0,136,166,161],
[190,159,183,195,204,0,196,201],
[157,135,147,167,174,144,0,145],
[172,158,148,177,179,139,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,180,187,152,172,183,169],
[177,0,176,186,173,174,172,170],
[160,164,0,160,160,163,166,157],
[153,154,180,0,157,161,174,164],
[188,167,180,183,0,171,186,184],
[168,166,177,179,169,0,175,164],
[157,168,174,166,154,165,0,164],
[171,170,183,176,156,176,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,170,186,166,188,155,167],
[160,0,166,154,164,179,152,174],
[170,174,0,167,177,173,141,171],
[154,186,173,0,161,187,163,179],
[174,176,163,179,0,170,172,163],
[152,161,167,153,170,0,154,161],
[185,188,199,177,168,186,0,175],
[173,166,169,161,177,179,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,160,155,163,158,156,161],
[195,0,167,175,170,182,180,194],
[180,173,0,150,168,156,148,168],
[185,165,190,0,175,166,176,185],
[177,170,172,165,0,161,161,163],
[182,158,184,174,179,0,168,180],
[184,160,192,164,179,172,0,182],
[179,146,172,155,177,160,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,165,170,167,191,179,174],
[160,0,169,168,176,176,172,174],
[175,171,0,185,170,192,188,187],
[170,172,155,0,171,183,183,174],
[173,164,170,169,0,198,199,158],
[149,164,148,157,142,0,163,160],
[161,168,152,157,141,177,0,151],
[166,166,153,166,182,180,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,173,159,191,189,186,186],
[153,0,166,146,158,140,161,181],
[167,174,0,165,183,175,197,193],
[181,194,175,0,181,143,194,160],
[149,182,157,159,0,155,174,148],
[151,200,165,197,185,0,185,170],
[154,179,143,146,166,155,0,182],
[154,159,147,180,192,170,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,185,165,156,164,181,142],
[163,0,164,151,142,166,188,151],
[155,176,0,153,148,159,188,170],
[175,189,187,0,180,171,172,164],
[184,198,192,160,0,180,192,173],
[176,174,181,169,160,0,150,176],
[159,152,152,168,148,190,0,152],
[198,189,170,176,167,164,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,187,172,189,146,197,187],
[173,0,165,144,169,185,207,172],
[153,175,0,137,175,152,192,152],
[168,196,203,0,201,170,216,168],
[151,171,165,139,0,169,197,139],
[194,155,188,170,171,0,212,167],
[143,133,148,124,143,128,0,138],
[153,168,188,172,201,173,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,190,168,170,181,171,206],
[139,0,159,154,150,146,146,171],
[150,181,0,159,158,161,162,180],
[172,186,181,0,154,164,169,182],
[170,190,182,186,0,175,177,206],
[159,194,179,176,165,0,176,183],
[169,194,178,171,163,164,0,188],
[134,169,160,158,134,157,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,171,162,174,175,165,172],
[176,0,168,174,171,179,179,165],
[169,172,0,164,169,168,175,170],
[178,166,176,0,166,176,184,176],
[166,169,171,174,0,167,169,163],
[165,161,172,164,173,0,165,171],
[175,161,165,156,171,175,0,172],
[168,175,170,164,177,169,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,167,179,177,170,179,165],
[176,0,183,171,177,174,169,161],
[173,157,0,157,156,174,166,160],
[161,169,183,0,165,176,171,156],
[163,163,184,175,0,174,177,171],
[170,166,166,164,166,0,173,156],
[161,171,174,169,163,167,0,159],
[175,179,180,184,169,184,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,187,160,160,158,145,149],
[163,0,158,159,123,139,142,154],
[153,182,0,157,166,151,171,155],
[180,181,183,0,150,168,164,167],
[180,217,174,190,0,159,163,180],
[182,201,189,172,181,0,167,167],
[195,198,169,176,177,173,0,168],
[191,186,185,173,160,173,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,171,175,178,166,188,170],
[164,0,144,183,165,150,168,154],
[169,196,0,185,183,175,168,176],
[165,157,155,0,176,146,166,161],
[162,175,157,164,0,156,169,173],
[174,190,165,194,184,0,149,181],
[152,172,172,174,171,191,0,185],
[170,186,164,179,167,159,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,183,174,164,170,166,165],
[164,0,189,172,170,166,161,172],
[157,151,0,171,161,157,153,148],
[166,168,169,0,170,154,163,160],
[176,170,179,170,0,167,164,161],
[170,174,183,186,173,0,171,169],
[174,179,187,177,176,169,0,173],
[175,168,192,180,179,171,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,177,161,185,173,195,169],
[167,0,170,175,188,163,195,158],
[163,170,0,171,175,175,183,159],
[179,165,169,0,187,169,177,181],
[155,152,165,153,0,172,173,174],
[167,177,165,171,168,0,199,164],
[145,145,157,163,167,141,0,157],
[171,182,181,159,166,176,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,161,174,180,169,190,171],
[151,0,138,150,152,131,163,146],
[179,202,0,170,166,170,178,174],
[166,190,170,0,168,157,173,164],
[160,188,174,172,0,164,169,154],
[171,209,170,183,176,0,178,169],
[150,177,162,167,171,162,0,154],
[169,194,166,176,186,171,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,167,128,153,225,159,184],
[157,0,174,156,153,208,160,166],
[173,166,0,151,171,229,159,190],
[212,184,189,0,174,225,167,179],
[187,187,169,166,0,230,181,177],
[115,132,111,115,110,0,126,117],
[181,180,181,173,159,214,0,187],
[156,174,150,161,163,223,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,169,170,162,177,173,166],
[162,0,160,156,161,156,163,161],
[171,180,0,188,167,179,178,173],
[170,184,152,0,161,164,174,166],
[178,179,173,179,0,182,175,161],
[163,184,161,176,158,0,175,167],
[167,177,162,166,165,165,0,155],
[174,179,167,174,179,173,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,176,164,177,167,170,159],
[186,0,187,155,166,164,167,171],
[164,153,0,170,177,172,178,169],
[176,185,170,0,167,168,167,175],
[163,174,163,173,0,164,176,161],
[173,176,168,172,176,0,198,191],
[170,173,162,173,164,142,0,152],
[181,169,171,165,179,149,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,180,159,171,176,168,189],
[167,0,165,171,181,167,151,190],
[160,175,0,170,180,161,177,179],
[181,169,170,0,163,162,176,185],
[169,159,160,177,0,158,169,176],
[164,173,179,178,182,0,160,187],
[172,189,163,164,171,180,0,184],
[151,150,161,155,164,153,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,197,152,158,179,192,154],
[144,0,212,145,121,155,217,151],
[143,128,0,164,92,92,200,195],
[188,195,176,0,185,160,199,196],
[182,219,248,155,0,158,251,166],
[161,185,248,180,182,0,207,160],
[148,123,140,141,89,133,0,133],
[186,189,145,144,174,180,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,175,163,168,177,170,181],
[151,0,169,138,149,168,159,158],
[165,171,0,165,158,164,155,189],
[177,202,175,0,180,181,165,179],
[172,191,182,160,0,187,175,173],
[163,172,176,159,153,0,175,172],
[170,181,185,175,165,165,0,181],
[159,182,151,161,167,168,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,168,167,174,179,178,166],
[167,0,150,174,176,177,165,176],
[172,190,0,169,169,175,177,180],
[173,166,171,0,189,181,176,169],
[166,164,171,151,0,176,172,162],
[161,163,165,159,164,0,167,155],
[162,175,163,164,168,173,0,168],
[174,164,160,171,178,185,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,179,165,193,169,177,175],
[173,0,182,161,187,170,175,170],
[161,158,0,171,190,172,171,174],
[175,179,169,0,186,169,170,169],
[147,153,150,154,0,160,153,156],
[171,170,168,171,180,0,168,169],
[163,165,169,170,187,172,0,181],
[165,170,166,171,184,171,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,177,182,164,157,173,178],
[170,0,168,155,162,150,155,173],
[163,172,0,173,158,154,158,158],
[158,185,167,0,157,165,161,171],
[176,178,182,183,0,170,177,191],
[183,190,186,175,170,0,173,175],
[167,185,182,179,163,167,0,184],
[162,167,182,169,149,165,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,169,161,158,154,158,169],
[127,0,170,147,142,145,144,152],
[171,170,0,163,149,140,133,155],
[179,193,177,0,142,159,137,159],
[182,198,191,198,0,163,189,163],
[186,195,200,181,177,0,166,172],
[182,196,207,203,151,174,0,183],
[171,188,185,181,177,168,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,179,172,166,159,174,167],
[176,0,199,183,189,173,165,172],
[161,141,0,157,165,142,156,156],
[168,157,183,0,169,151,177,167],
[174,151,175,171,0,150,167,153],
[181,167,198,189,190,0,170,170],
[166,175,184,163,173,170,0,174],
[173,168,184,173,187,170,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,160,143,148,163,158,165],
[187,0,179,159,185,171,173,172],
[180,161,0,165,172,195,154,186],
[197,181,175,0,184,187,165,176],
[192,155,168,156,0,187,183,188],
[177,169,145,153,153,0,165,178],
[182,167,186,175,157,175,0,173],
[175,168,154,164,152,162,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,179,180,161,192,149,177],
[166,0,178,161,166,162,149,162],
[161,162,0,155,157,170,151,164],
[160,179,185,0,165,171,145,163],
[179,174,183,175,0,200,170,174],
[148,178,170,169,140,0,150,159],
[191,191,189,195,170,190,0,166],
[163,178,176,177,166,181,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,166,167,138,163,143,147],
[191,0,194,179,189,169,183,191],
[174,146,0,162,149,159,164,170],
[173,161,178,0,177,167,168,158],
[202,151,191,163,0,171,180,159],
[177,171,181,173,169,0,173,141],
[197,157,176,172,160,167,0,170],
[193,149,170,182,181,199,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,182,166,175,167,166,156],
[177,0,188,172,179,162,174,166],
[158,152,0,180,170,158,184,164],
[174,168,160,0,179,172,183,170],
[165,161,170,161,0,165,183,165],
[173,178,182,168,175,0,182,175],
[174,166,156,157,157,158,0,151],
[184,174,176,170,175,165,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,169,167,176,173,157,166],
[153,0,175,173,162,160,156,170],
[171,165,0,168,167,162,160,180],
[173,167,172,0,175,167,169,179],
[164,178,173,165,0,182,168,163],
[167,180,178,173,158,0,152,173],
[183,184,180,171,172,188,0,163],
[174,170,160,161,177,167,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,171,148,165,148,156,170],
[146,0,150,124,143,149,141,145],
[169,190,0,163,158,148,158,177],
[192,216,177,0,160,160,157,186],
[175,197,182,180,0,167,149,168],
[192,191,192,180,173,0,170,180],
[184,199,182,183,191,170,0,191],
[170,195,163,154,172,160,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,165,173,178,182,165,172],
[179,0,167,176,173,174,169,169],
[175,173,0,165,168,169,166,170],
[167,164,175,0,169,160,167,166],
[162,167,172,171,0,177,165,166],
[158,166,171,180,163,0,163,170],
[175,171,174,173,175,177,0,170],
[168,171,170,174,174,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,190,176,155,163,174,194],
[150,0,188,168,191,207,210,212],
[150,152,0,184,126,176,195,201],
[164,172,156,0,120,139,173,176],
[185,149,214,220,0,210,192,200],
[177,133,164,201,130,0,177,199],
[166,130,145,167,148,163,0,238],
[146,128,139,164,140,141,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,169,204,177,202,171,177],
[149,0,148,180,160,167,130,157],
[171,192,0,199,191,163,158,184],
[136,160,141,0,173,147,132,169],
[163,180,149,167,0,148,133,171],
[138,173,177,193,192,0,168,177],
[169,210,182,208,207,172,0,197],
[163,183,156,171,169,163,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,178,155,159,164,160,159],
[166,0,187,162,179,170,168,169],
[162,153,0,147,144,163,156,171],
[185,178,193,0,166,172,157,156],
[181,161,196,174,0,179,149,179],
[176,170,177,168,161,0,156,164],
[180,172,184,183,191,184,0,165],
[181,171,169,184,161,176,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,201,203,177,200,182,194],
[184,0,162,169,160,200,141,159],
[139,178,0,171,160,173,139,224],
[137,171,169,0,157,207,156,192],
[163,180,180,183,0,174,212,198],
[140,140,167,133,166,0,156,191],
[158,199,201,184,128,184,0,162],
[146,181,116,148,142,149,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,152,145,159,111,97,175],
[139,0,174,167,146,110,133,166],
[188,166,0,193,172,150,139,203],
[195,173,147,0,117,154,107,181],
[181,194,168,223,0,179,176,212],
[229,230,190,186,161,0,159,219],
[243,207,201,233,164,181,0,230],
[165,174,137,159,128,121,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,173,160,171,159,182,189],
[161,0,175,165,166,146,164,174],
[167,165,0,165,160,172,186,172],
[180,175,175,0,166,170,181,176],
[169,174,180,174,0,160,185,171],
[181,194,168,170,180,0,195,189],
[158,176,154,159,155,145,0,165],
[151,166,168,164,169,151,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,146,168,186,138,198,161],
[161,0,169,148,194,138,197,145],
[194,171,0,163,141,144,184,192],
[172,192,177,0,185,170,185,176],
[154,146,199,155,0,147,207,161],
[202,202,196,170,193,0,198,194],
[142,143,156,155,133,142,0,162],
[179,195,148,164,179,146,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,161,177,178,160,169,170],
[150,0,161,168,177,159,163,177],
[179,179,0,200,183,182,164,183],
[163,172,140,0,168,160,173,186],
[162,163,157,172,0,165,161,173],
[180,181,158,180,175,0,164,163],
[171,177,176,167,179,176,0,186],
[170,163,157,154,167,177,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,161,179,174,160,168,177],
[160,0,150,154,173,154,156,159],
[179,190,0,171,171,164,182,161],
[161,186,169,0,174,172,181,158],
[166,167,169,166,0,145,183,168],
[180,186,176,168,195,0,182,167],
[172,184,158,159,157,158,0,154],
[163,181,179,182,172,173,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,192,173,166,217,218,258],
[169,0,172,129,142,143,167,250],
[148,168,0,214,218,160,244,250],
[167,211,126,0,189,102,180,251],
[174,198,122,151,0,140,205,225],
[123,197,180,238,200,0,150,242],
[122,173,96,160,135,190,0,239],
[82,90,90,89,115,98,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,168,187,171,179,179,182],
[168,0,164,155,159,169,171,179],
[172,176,0,170,174,160,183,181],
[153,185,170,0,165,154,161,167],
[169,181,166,175,0,157,181,187],
[161,171,180,186,183,0,185,197],
[161,169,157,179,159,155,0,165],
[158,161,159,173,153,143,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,124,151,170,146,158,166],
[172,0,143,164,167,152,167,164],
[216,197,0,174,193,168,201,206],
[189,176,166,0,166,180,186,164],
[170,173,147,174,0,171,181,170],
[194,188,172,160,169,0,192,175],
[182,173,139,154,159,148,0,154],
[174,176,134,176,170,165,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,166,158,177,176,168,165],
[182,0,181,154,168,174,166,159],
[174,159,0,155,159,176,154,157],
[182,186,185,0,177,182,177,169],
[163,172,181,163,0,160,174,171],
[164,166,164,158,180,0,174,163],
[172,174,186,163,166,166,0,175],
[175,181,183,171,169,177,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,188,162,172,171,167,175],
[172,0,177,167,164,147,177,163],
[152,163,0,148,160,163,166,157],
[178,173,192,0,181,170,188,172],
[168,176,180,159,0,185,177,193],
[169,193,177,170,155,0,177,170],
[173,163,174,152,163,163,0,176],
[165,177,183,168,147,170,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,166,182,156,162,169,159],
[165,0,166,180,158,159,173,158],
[174,174,0,177,174,172,178,167],
[158,160,163,0,150,156,174,157],
[184,182,166,190,0,169,169,177],
[178,181,168,184,171,0,185,162],
[171,167,162,166,171,155,0,157],
[181,182,173,183,163,178,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,185,197,199,167,161,215],
[137,0,156,147,162,145,154,156],
[155,184,0,184,184,172,176,161],
[143,193,156,0,180,164,140,197],
[141,178,156,160,0,152,154,155],
[173,195,168,176,188,0,175,179],
[179,186,164,200,186,165,0,183],
[125,184,179,143,185,161,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,173,192,158,180,181,157],
[172,0,178,169,174,187,189,175],
[167,162,0,169,167,163,185,164],
[148,171,171,0,180,175,185,148],
[182,166,173,160,0,181,192,172],
[160,153,177,165,159,0,183,178],
[159,151,155,155,148,157,0,133],
[183,165,176,192,168,162,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,168,188,176,171,172,174],
[143,0,154,168,170,156,164,162],
[172,186,0,182,178,165,177,179],
[152,172,158,0,163,157,158,164],
[164,170,162,177,0,155,165,166],
[169,184,175,183,185,0,170,170],
[168,176,163,182,175,170,0,172],
[166,178,161,176,174,170,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,167,160,196,165,172,153],
[170,0,167,175,195,180,189,177],
[173,173,0,174,180,158,166,157],
[180,165,166,0,177,166,186,156],
[144,145,160,163,0,168,154,166],
[175,160,182,174,172,0,186,170],
[168,151,174,154,186,154,0,145],
[187,163,183,184,174,170,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,184,245,281,218,259,130],
[146,0,128,187,204,214,263,211],
[156,212,0,213,287,207,286,151],
[95,153,127,0,152,150,173,89],
[59,136,53,188,0,143,209,107],
[122,126,133,190,197,0,239,65],
[81,77,54,167,131,101,0,16],
[210,129,189,251,233,275,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,153,186,149,172,160,162],
[187,0,162,193,182,189,165,195],
[187,178,0,184,176,177,170,188],
[154,147,156,0,173,169,148,163],
[191,158,164,167,0,171,171,167],
[168,151,163,171,169,0,156,184],
[180,175,170,192,169,184,0,188],
[178,145,152,177,173,156,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,171,161,155,148,196,158],
[183,0,187,165,155,175,192,168],
[169,153,0,152,149,172,198,171],
[179,175,188,0,155,149,184,172],
[185,185,191,185,0,166,194,184],
[192,165,168,191,174,0,183,178],
[144,148,142,156,146,157,0,149],
[182,172,169,168,156,162,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,167,166,173,172,188,172],
[183,0,166,176,157,176,179,160],
[173,174,0,177,166,171,182,161],
[174,164,163,0,152,161,172,160],
[167,183,174,188,0,167,180,164],
[168,164,169,179,173,0,195,168],
[152,161,158,168,160,145,0,160],
[168,180,179,180,176,172,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,163,162,170,198,181,161],
[166,0,159,182,162,190,182,173],
[177,181,0,154,179,173,171,164],
[178,158,186,0,178,194,175,189],
[170,178,161,162,0,175,182,166],
[142,150,167,146,165,0,166,159],
[159,158,169,165,158,174,0,160],
[179,167,176,151,174,181,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,177,180,178,150,174,175],
[163,0,190,177,186,173,181,182],
[163,150,0,171,170,146,159,168],
[160,163,169,0,169,162,168,173],
[162,154,170,171,0,149,154,168],
[190,167,194,178,191,0,184,200],
[166,159,181,172,186,156,0,171],
[165,158,172,167,172,140,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,176,170,156,190,197,182],
[150,0,165,151,168,187,184,171],
[164,175,0,149,160,175,187,163],
[170,189,191,0,175,196,173,181],
[184,172,180,165,0,177,177,187],
[150,153,165,144,163,0,156,153],
[143,156,153,167,163,184,0,165],
[158,169,177,159,153,187,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,196,180,170,145,153,143],
[191,0,196,167,135,171,144,148],
[144,144,0,161,110,136,121,147],
[160,173,179,0,154,133,142,163],
[170,205,230,186,0,156,167,179],
[195,169,204,207,184,0,217,150],
[187,196,219,198,173,123,0,152],
[197,192,193,177,161,190,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,162,170,160,156,152,162],
[201,0,175,190,163,172,172,184],
[178,165,0,194,185,181,171,197],
[170,150,146,0,157,155,165,151],
[180,177,155,183,0,170,169,169],
[184,168,159,185,170,0,172,188],
[188,168,169,175,171,168,0,186],
[178,156,143,189,171,152,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,183,168,170,184,178,176],
[124,0,159,153,136,149,133,159],
[157,181,0,161,151,164,157,170],
[172,187,179,0,170,174,158,192],
[170,204,189,170,0,183,140,169],
[156,191,176,166,157,0,190,166],
[162,207,183,182,200,150,0,189],
[164,181,170,148,171,174,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,170,170,261,170,170,170],
[79,0,79,79,0,170,170,0],
[170,261,0,170,170,170,170,170],
[170,261,170,0,91,194,170,194],
[79,340,170,249,0,249,170,170],
[170,170,170,146,91,0,237,0],
[170,170,170,170,170,103,0,24],
[170,340,170,146,170,340,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,149,153,158,152,167,171],
[163,0,156,164,166,172,159,191],
[191,184,0,179,173,170,172,180],
[187,176,161,0,175,193,190,178],
[182,174,167,165,0,174,178,172],
[188,168,170,147,166,0,179,159],
[173,181,168,150,162,161,0,168],
[169,149,160,162,168,181,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,164,138,166,147,177,177],
[186,0,187,153,177,185,194,184],
[176,153,0,163,157,182,174,161],
[202,187,177,0,167,191,195,196],
[174,163,183,173,0,177,169,175],
[193,155,158,149,163,0,177,189],
[163,146,166,145,171,163,0,163],
[163,156,179,144,165,151,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,175,193,166,162,142,163],
[181,0,204,220,167,204,161,256],
[165,136,0,207,179,146,195,181],
[147,120,133,0,139,139,152,169],
[174,173,161,201,0,154,132,168],
[178,136,194,201,186,0,185,198],
[198,179,145,188,208,155,0,183],
[177,84,159,171,172,142,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,143,142,147,152,154,160],
[188,0,152,163,160,175,170,177],
[197,188,0,169,182,190,175,181],
[198,177,171,0,181,178,164,182],
[193,180,158,159,0,183,171,174],
[188,165,150,162,157,0,157,164],
[186,170,165,176,169,183,0,176],
[180,163,159,158,166,176,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,169,150,166,172,153,157],
[183,0,191,160,157,171,166,179],
[171,149,0,165,149,163,148,159],
[190,180,175,0,175,171,169,182],
[174,183,191,165,0,176,175,175],
[168,169,177,169,164,0,161,167],
[187,174,192,171,165,179,0,171],
[183,161,181,158,165,173,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,163,171,163,164,161,167],
[176,0,166,181,163,169,164,169],
[177,174,0,174,170,176,169,177],
[169,159,166,0,167,177,171,180],
[177,177,170,173,0,170,164,176],
[176,171,164,163,170,0,163,170],
[179,176,171,169,176,177,0,183],
[173,171,163,160,164,170,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,182,153,183,153,185,164],
[172,0,164,163,167,169,180,179],
[158,176,0,174,170,172,189,164],
[187,177,166,0,182,166,180,173],
[157,173,170,158,0,158,150,180],
[187,171,168,174,182,0,188,167],
[155,160,151,160,190,152,0,179],
[176,161,176,167,160,173,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,155,163,184,188,173,181],
[165,0,162,153,188,170,162,185],
[185,178,0,171,189,176,175,168],
[177,187,169,0,198,173,168,169],
[156,152,151,142,0,163,162,152],
[152,170,164,167,177,0,156,165],
[167,178,165,172,178,184,0,179],
[159,155,172,171,188,175,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,176,164,172,145,146,160],
[190,0,203,172,181,195,168,193],
[164,137,0,162,177,178,183,164],
[176,168,178,0,161,168,137,194],
[168,159,163,179,0,186,173,192],
[195,145,162,172,154,0,142,168],
[194,172,157,203,167,198,0,214],
[180,147,176,146,148,172,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,124,150,181,145,125,154],
[192,0,183,179,176,204,161,193],
[216,157,0,182,157,187,178,191],
[190,161,158,0,184,167,161,179],
[159,164,183,156,0,167,138,185],
[195,136,153,173,173,0,132,185],
[215,179,162,179,202,208,0,178],
[186,147,149,161,155,155,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,147,181,171,171,169,171],
[140,0,127,170,138,144,169,176],
[193,213,0,187,167,162,185,206],
[159,170,153,0,154,150,156,158],
[169,202,173,186,0,171,180,201],
[169,196,178,190,169,0,201,198],
[171,171,155,184,160,139,0,183],
[169,164,134,182,139,142,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,182,171,166,172,166,167],
[173,0,181,180,177,172,172,155],
[158,159,0,168,163,158,161,157],
[169,160,172,0,162,152,155,156],
[174,163,177,178,0,160,172,166],
[168,168,182,188,180,0,172,174],
[174,168,179,185,168,168,0,164],
[173,185,183,184,174,166,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,172,183,194,177,173,159],
[172,0,179,179,190,159,163,167],
[168,161,0,168,178,171,155,170],
[157,161,172,0,179,156,158,162],
[146,150,162,161,0,163,161,172],
[163,181,169,184,177,0,163,179],
[167,177,185,182,179,177,0,157],
[181,173,170,178,168,161,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,135,165,164,139,164,149],
[174,0,154,174,152,137,165,146],
[205,186,0,175,164,179,190,179],
[175,166,165,0,157,135,190,165],
[176,188,176,183,0,158,204,171],
[201,203,161,205,182,0,206,184],
[176,175,150,150,136,134,0,165],
[191,194,161,175,169,156,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,174,170,164,178,172,167],
[183,0,176,174,172,166,173,171],
[166,164,0,170,171,164,164,156],
[170,166,170,0,156,163,174,166],
[176,168,169,184,0,153,174,165],
[162,174,176,177,187,0,167,188],
[168,167,176,166,166,173,0,161],
[173,169,184,174,175,152,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,172,168,165,172,165,182],
[182,0,163,169,164,160,170,175],
[168,177,0,164,157,160,162,168],
[172,171,176,0,169,149,166,181],
[175,176,183,171,0,162,158,176],
[168,180,180,191,178,0,160,181],
[175,170,178,174,182,180,0,187],
[158,165,172,159,164,159,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,154,178,145,186,162,162],
[170,0,157,186,149,175,208,186],
[186,183,0,196,170,208,204,204],
[162,154,144,0,151,176,195,174],
[195,191,170,189,0,206,205,178],
[154,165,132,164,134,0,167,173],
[178,132,136,145,135,173,0,173],
[178,154,136,166,162,167,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,161,178,188,162,173,210],
[165,0,165,209,185,178,154,185],
[179,175,0,168,195,163,206,176],
[162,131,172,0,212,176,201,146],
[152,155,145,128,0,168,201,146],
[178,162,177,164,172,0,158,178],
[167,186,134,139,139,182,0,159],
[130,155,164,194,194,162,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,178,168,173,168,166,165],
[160,0,186,166,174,168,170,173],
[162,154,0,154,178,159,160,153],
[172,174,186,0,169,168,155,182],
[167,166,162,171,0,172,154,142],
[172,172,181,172,168,0,168,160],
[174,170,180,185,186,172,0,175],
[175,167,187,158,198,180,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,165,172,159,169,185,170],
[162,0,152,153,161,152,168,156],
[175,188,0,169,165,167,182,166],
[168,187,171,0,174,170,190,167],
[181,179,175,166,0,167,188,167],
[171,188,173,170,173,0,187,174],
[155,172,158,150,152,153,0,161],
[170,184,174,173,173,166,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,175,162,173,155,159,166],
[179,0,173,166,183,170,161,163],
[165,167,0,158,179,159,153,161],
[178,174,182,0,172,164,161,165],
[167,157,161,168,0,159,154,160],
[185,170,181,176,181,0,171,173],
[181,179,187,179,186,169,0,176],
[174,177,179,175,180,167,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,172,167,160,180,159,173],
[172,0,167,174,168,186,165,170],
[168,173,0,175,169,187,170,180],
[173,166,165,0,176,169,164,162],
[180,172,171,164,0,184,181,171],
[160,154,153,171,156,0,158,158],
[181,175,170,176,159,182,0,177],
[167,170,160,178,169,182,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,171,168,181,177,195,192],
[164,0,170,176,175,175,180,176],
[169,170,0,170,169,168,172,174],
[172,164,170,0,175,176,182,173],
[159,165,171,165,0,169,181,173],
[163,165,172,164,171,0,179,171],
[145,160,168,158,159,161,0,168],
[148,164,166,167,167,169,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,173,169,160,179,173,169],
[169,0,179,167,194,183,180,181],
[167,161,0,157,167,167,146,166],
[171,173,183,0,182,195,161,172],
[180,146,173,158,0,170,157,154],
[161,157,173,145,170,0,151,153],
[167,160,194,179,183,189,0,159],
[171,159,174,168,186,187,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,148,156,157,171,161,158],
[177,0,150,165,154,180,173,183],
[192,190,0,173,180,199,190,168],
[184,175,167,0,168,184,179,165],
[183,186,160,172,0,188,181,173],
[169,160,141,156,152,0,167,162],
[179,167,150,161,159,173,0,167],
[182,157,172,175,167,178,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,182,157,175,162,156,174],
[161,0,181,180,183,155,154,172],
[158,159,0,161,162,157,142,166],
[183,160,179,0,179,172,171,177],
[165,157,178,161,0,171,169,172],
[178,185,183,168,169,0,177,177],
[184,186,198,169,171,163,0,183],
[166,168,174,163,168,163,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,176,193,202,169,190,165],
[156,0,172,195,186,170,167,163],
[164,168,0,192,190,192,194,179],
[147,145,148,0,169,159,158,145],
[138,154,150,171,0,145,155,154],
[171,170,148,181,195,0,180,169],
[150,173,146,182,185,160,0,152],
[175,177,161,195,186,171,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,173,162,182,165,173,161],
[168,0,165,158,175,186,162,177],
[167,175,0,172,187,157,165,167],
[178,182,168,0,194,189,179,191],
[158,165,153,146,0,142,152,158],
[175,154,183,151,198,0,164,156],
[167,178,175,161,188,176,0,164],
[179,163,173,149,182,184,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,214,212,185,200,180,204],
[171,0,216,194,203,194,118,154],
[126,124,0,96,130,139,98,133],
[128,146,244,0,175,158,120,158],
[155,137,210,165,0,186,178,157],
[140,146,201,182,154,0,136,112],
[160,222,242,220,162,204,0,223],
[136,186,207,182,183,228,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,169,177,181,169,174,158],
[160,0,173,181,158,158,151,161],
[171,167,0,162,149,158,173,143],
[163,159,178,0,146,166,145,152],
[159,182,191,194,0,182,162,158],
[171,182,182,174,158,0,175,151],
[166,189,167,195,178,165,0,174],
[182,179,197,188,182,189,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,165,157,173,166,177,172],
[178,0,176,164,173,169,185,176],
[175,164,0,150,161,159,177,180],
[183,176,190,0,157,180,185,181],
[167,167,179,183,0,174,187,185],
[174,171,181,160,166,0,176,189],
[163,155,163,155,153,164,0,160],
[168,164,160,159,155,151,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,182,176,189,170,177,175],
[162,0,188,173,165,169,176,168],
[158,152,0,144,143,162,170,156],
[164,167,196,0,172,173,165,169],
[151,175,197,168,0,177,180,165],
[170,171,178,167,163,0,161,168],
[163,164,170,175,160,179,0,157],
[165,172,184,171,175,172,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,147,159,139,169,152,150],
[197,0,151,157,141,166,165,178],
[193,189,0,166,175,204,191,212],
[181,183,174,0,149,179,162,214],
[201,199,165,191,0,177,183,193],
[171,174,136,161,163,0,145,194],
[188,175,149,178,157,195,0,192],
[190,162,128,126,147,146,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,188,193,191,168,239,240],
[141,0,198,156,170,191,191,214],
[152,142,0,123,171,156,198,182],
[147,184,217,0,188,201,194,243],
[149,170,169,152,0,182,217,229],
[172,149,184,139,158,0,207,230],
[101,149,142,146,123,133,0,182],
[100,126,158,97,111,110,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,183,181,193,174,159,167],
[161,0,153,152,188,164,163,168],
[157,187,0,172,183,191,178,160],
[159,188,168,0,184,171,157,175],
[147,152,157,156,0,151,166,167],
[166,176,149,169,189,0,180,183],
[181,177,162,183,174,160,0,174],
[173,172,180,165,173,157,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,182,180,166,167,180,180],
[168,0,163,159,175,170,164,171],
[158,177,0,173,166,164,164,167],
[160,181,167,0,172,178,181,167],
[174,165,174,168,0,166,163,168],
[173,170,176,162,174,0,179,176],
[160,176,176,159,177,161,0,170],
[160,169,173,173,172,164,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,212,236,243,170,185,198],
[139,0,162,225,202,176,178,205],
[128,178,0,209,191,183,134,158],
[104,115,131,0,178,115,132,156],
[97,138,149,162,0,128,142,143],
[170,164,157,225,212,0,177,203],
[155,162,206,208,198,163,0,197],
[142,135,182,184,197,137,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,179,180,185,160,186,169],
[163,0,161,161,170,151,169,162],
[161,179,0,179,181,168,173,171],
[160,179,161,0,178,163,176,170],
[155,170,159,162,0,148,162,161],
[180,189,172,177,192,0,180,169],
[154,171,167,164,178,160,0,163],
[171,178,169,170,179,171,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,171,155,174,165,191,155],
[205,0,132,172,113,127,154,175],
[169,208,0,185,119,146,237,162],
[185,168,155,0,93,106,181,177],
[166,227,221,247,0,175,240,269],
[175,213,194,234,165,0,201,211],
[149,186,103,159,100,139,0,134],
[185,165,178,163,71,129,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,161,147,151,141,132,139],
[196,0,173,177,165,180,143,175],
[179,167,0,191,176,208,199,193],
[193,163,149,0,209,183,173,170],
[189,175,164,131,0,171,142,145],
[199,160,132,157,169,0,147,148],
[208,197,141,167,198,193,0,183],
[201,165,147,170,195,192,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,173,167,176,170,163,170],
[166,0,172,171,162,164,170,177],
[167,168,0,157,174,176,156,166],
[173,169,183,0,164,156,167,175],
[164,178,166,176,0,160,168,170],
[170,176,164,184,180,0,166,167],
[177,170,184,173,172,174,0,171],
[170,163,174,165,170,173,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,201,177,167,152,164,172],
[175,0,219,201,178,180,170,184],
[139,121,0,141,152,129,149,142],
[163,139,199,0,165,155,161,168],
[173,162,188,175,0,148,169,179],
[188,160,211,185,192,0,177,181],
[176,170,191,179,171,163,0,166],
[168,156,198,172,161,159,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,151,179,189,187,188,175],
[146,0,157,158,175,157,179,166],
[189,183,0,180,189,193,184,169],
[161,182,160,0,185,176,186,175],
[151,165,151,155,0,168,176,175],
[153,183,147,164,172,0,196,168],
[152,161,156,154,164,144,0,149],
[165,174,171,165,165,172,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,179,154,169,170,184,167],
[177,0,189,177,181,167,182,174],
[161,151,0,162,157,175,190,165],
[186,163,178,0,175,172,197,177],
[171,159,183,165,0,170,192,174],
[170,173,165,168,170,0,167,165],
[156,158,150,143,148,173,0,146],
[173,166,175,163,166,175,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,149,131,141,158,158,148],
[181,0,184,157,158,173,177,166],
[191,156,0,171,168,186,191,178],
[209,183,169,0,170,194,191,169],
[199,182,172,170,0,188,194,180],
[182,167,154,146,152,0,177,156],
[182,163,149,149,146,163,0,153],
[192,174,162,171,160,184,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,154,188,159,146,182,175],
[173,0,168,190,171,170,159,187],
[186,172,0,194,161,155,167,196],
[152,150,146,0,155,144,152,188],
[181,169,179,185,0,163,164,186],
[194,170,185,196,177,0,176,191],
[158,181,173,188,176,164,0,189],
[165,153,144,152,154,149,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,172,163,155,167,166,169],
[163,0,166,152,168,151,163,169],
[168,174,0,155,165,169,172,173],
[177,188,185,0,184,170,187,176],
[185,172,175,156,0,158,193,170],
[173,189,171,170,182,0,195,187],
[174,177,168,153,147,145,0,173],
[171,171,167,164,170,153,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,192,187,162,199,175,186],
[169,0,192,166,171,194,177,165],
[148,148,0,161,152,166,157,137],
[153,174,179,0,164,189,156,176],
[178,169,188,176,0,170,177,174],
[141,146,174,151,170,0,145,146],
[165,163,183,184,163,195,0,168],
[154,175,203,164,166,194,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,156,162,150,160,142,168],
[178,0,170,170,164,172,163,173],
[184,170,0,181,173,168,172,175],
[178,170,159,0,165,170,171,180],
[190,176,167,175,0,175,164,179],
[180,168,172,170,165,0,167,167],
[198,177,168,169,176,173,0,177],
[172,167,165,160,161,173,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,185,182,167,165,181,192],
[155,0,179,174,154,159,180,174],
[155,161,0,190,156,139,153,154],
[158,166,150,0,120,138,138,159],
[173,186,184,220,0,193,168,170],
[175,181,201,202,147,0,200,203],
[159,160,187,202,172,140,0,190],
[148,166,186,181,170,137,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,162,167,157,145,134,133],
[169,0,131,169,147,152,140,162],
[178,209,0,168,155,165,150,151],
[173,171,172,0,175,163,165,167],
[183,193,185,165,0,170,151,183],
[195,188,175,177,170,0,169,160],
[206,200,190,175,189,171,0,157],
[207,178,189,173,157,180,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,171,187,179,174,175,180],
[180,0,174,195,189,184,161,175],
[169,166,0,178,172,178,184,183],
[153,145,162,0,171,179,154,172],
[161,151,168,169,0,163,165,156],
[166,156,162,161,177,0,159,171],
[165,179,156,186,175,181,0,166],
[160,165,157,168,184,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,150,170,163,174,174,169],
[133,0,151,127,144,141,140,147],
[190,189,0,167,162,151,179,185],
[170,213,173,0,178,180,196,200],
[177,196,178,162,0,167,179,186],
[166,199,189,160,173,0,176,165],
[166,200,161,144,161,164,0,185],
[171,193,155,140,154,175,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,195,162,150,182,179,179],
[184,0,176,154,170,184,163,188],
[145,164,0,150,161,164,151,166],
[178,186,190,0,169,197,183,196],
[190,170,179,171,0,187,182,176],
[158,156,176,143,153,0,155,167],
[161,177,189,157,158,185,0,173],
[161,152,174,144,164,173,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,178,166,178,164,177,177],
[164,0,181,168,185,171,153,184],
[162,159,0,163,176,161,160,177],
[174,172,177,0,177,161,163,168],
[162,155,164,163,0,162,177,179],
[176,169,179,179,178,0,179,189],
[163,187,180,177,163,161,0,181],
[163,156,163,172,161,151,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,152,172,178,191,181,193],
[167,0,164,173,172,179,171,158],
[188,176,0,156,180,188,194,180],
[168,167,184,0,178,193,193,190],
[162,168,160,162,0,185,175,172],
[149,161,152,147,155,0,187,163],
[159,169,146,147,165,153,0,158],
[147,182,160,150,168,177,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,168,164,186,179,154,170],
[159,0,180,156,176,157,151,153],
[172,160,0,186,158,162,178,165],
[176,184,154,0,166,169,168,170],
[154,164,182,174,0,172,183,159],
[161,183,178,171,168,0,167,160],
[186,189,162,172,157,173,0,171],
[170,187,175,170,181,180,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,177,166,166,167,170,166],
[188,0,171,180,173,171,170,169],
[163,169,0,185,173,169,172,172],
[174,160,155,0,159,171,173,169],
[174,167,167,181,0,169,170,168],
[173,169,171,169,171,0,179,159],
[170,170,168,167,170,161,0,164],
[174,171,168,171,172,181,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,177,176,181,172,165,174],
[166,0,176,173,174,167,154,169],
[163,164,0,183,169,177,161,166],
[164,167,157,0,154,169,156,162],
[159,166,171,186,0,178,170,169],
[168,173,163,171,162,0,163,160],
[175,186,179,184,170,177,0,186],
[166,171,174,178,171,180,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,198,188,205,163,142,161],
[170,0,177,151,183,144,175,133],
[142,163,0,162,197,200,176,161],
[152,189,178,0,187,180,150,160],
[135,157,143,153,0,157,152,118],
[177,196,140,160,183,0,138,166],
[198,165,164,190,188,202,0,172],
[179,207,179,180,222,174,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,166,174,169,164,169,181],
[178,0,166,170,175,167,186,175],
[174,174,0,172,173,166,163,184],
[166,170,168,0,174,170,175,188],
[171,165,167,166,0,157,179,179],
[176,173,174,170,183,0,186,182],
[171,154,177,165,161,154,0,194],
[159,165,156,152,161,158,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,166,169,157,165,165,169],
[176,0,184,199,184,169,184,174],
[174,156,0,182,159,152,167,163],
[171,141,158,0,146,151,153,163],
[183,156,181,194,0,167,174,177],
[175,171,188,189,173,0,183,160],
[175,156,173,187,166,157,0,166],
[171,166,177,177,163,180,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,190,159,184,159,188,142],
[129,0,150,123,125,134,174,121],
[150,190,0,139,152,139,198,125],
[181,217,201,0,165,143,230,191],
[156,215,188,175,0,165,191,177],
[181,206,201,197,175,0,198,156],
[152,166,142,110,149,142,0,123],
[198,219,215,149,163,184,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,163,205,174,173,170,165],
[176,0,157,188,162,167,177,163],
[177,183,0,207,166,149,179,167],
[135,152,133,0,99,107,145,130],
[166,178,174,241,0,192,181,188],
[167,173,191,233,148,0,205,175],
[170,163,161,195,159,135,0,174],
[175,177,173,210,152,165,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,171,173,170,166,170,197],
[157,0,185,145,142,167,149,186],
[169,155,0,169,155,170,146,191],
[167,195,171,0,185,182,166,188],
[170,198,185,155,0,190,168,180],
[174,173,170,158,150,0,155,189],
[170,191,194,174,172,185,0,205],
[143,154,149,152,160,151,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,178,175,167,184,171,187],
[168,0,169,176,150,182,152,149],
[162,171,0,185,171,180,168,162],
[165,164,155,0,149,189,169,178],
[173,190,169,191,0,181,176,175],
[156,158,160,151,159,0,163,164],
[169,188,172,171,164,177,0,167],
[153,191,178,162,165,176,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,182,177,164,178,176,174],
[168,0,164,174,172,169,165,166],
[158,176,0,174,158,179,175,163],
[163,166,166,0,165,177,175,163],
[176,168,182,175,0,171,182,164],
[162,171,161,163,169,0,164,173],
[164,175,165,165,158,176,0,165],
[166,174,177,177,176,167,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,184,179,182,162,177,180],
[167,0,166,167,171,172,183,162],
[156,174,0,160,155,153,182,160],
[161,173,180,0,151,157,176,160],
[158,169,185,189,0,165,165,168],
[178,168,187,183,175,0,188,168],
[163,157,158,164,175,152,0,157],
[160,178,180,180,172,172,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,185,176,162,191,171,170],
[174,0,180,178,168,187,184,159],
[155,160,0,167,161,181,182,165],
[164,162,173,0,179,182,174,148],
[178,172,179,161,0,185,167,163],
[149,153,159,158,155,0,147,160],
[169,156,158,166,173,193,0,156],
[170,181,175,192,177,180,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,163,172,190,179,166,151],
[166,0,171,173,171,166,159,149],
[177,169,0,180,192,197,177,177],
[168,167,160,0,177,182,179,150],
[150,169,148,163,0,184,158,145],
[161,174,143,158,156,0,204,189],
[174,181,163,161,182,136,0,167],
[189,191,163,190,195,151,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,174,165,145,176,173,180],
[189,0,143,160,161,167,169,186],
[166,197,0,172,177,156,177,199],
[175,180,168,0,180,186,192,219],
[195,179,163,160,0,168,157,212],
[164,173,184,154,172,0,232,174],
[167,171,163,148,183,108,0,204],
[160,154,141,121,128,166,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,174,177,169,181,182,173],
[160,0,168,172,167,156,174,190],
[166,172,0,174,173,183,193,174],
[163,168,166,0,170,153,164,167],
[171,173,167,170,0,153,170,187],
[159,184,157,187,187,0,181,179],
[158,166,147,176,170,159,0,155],
[167,150,166,173,153,161,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,166,152,164,166,171,184],
[159,0,175,159,150,178,193,169],
[174,165,0,176,163,181,166,170],
[188,181,164,0,173,176,175,168],
[176,190,177,167,0,168,203,184],
[174,162,159,164,172,0,173,172],
[169,147,174,165,137,167,0,155],
[156,171,170,172,156,168,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,158,141,150,170,166,171],
[162,0,171,172,168,190,176,192],
[182,169,0,155,176,173,177,152],
[199,168,185,0,187,172,157,165],
[190,172,164,153,0,158,158,162],
[170,150,167,168,182,0,169,174],
[174,164,163,183,182,171,0,182],
[169,148,188,175,178,166,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,163,182,175,166,174,190],
[143,0,142,173,136,149,159,153],
[177,198,0,186,169,188,182,194],
[158,167,154,0,155,168,180,174],
[165,204,171,185,0,183,179,195],
[174,191,152,172,157,0,185,172],
[166,181,158,160,161,155,0,183],
[150,187,146,166,145,168,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,200,191,199,152,171,176],
[174,0,158,149,142,113,159,156],
[140,182,0,180,170,153,156,172],
[149,191,160,0,164,182,177,168],
[141,198,170,176,0,136,149,168],
[188,227,187,158,204,0,166,189],
[169,181,184,163,191,174,0,194],
[164,184,168,172,172,151,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,159,181,164,176,188,171],
[176,0,172,169,189,176,174,179],
[181,168,0,182,171,195,180,174],
[159,171,158,0,170,187,168,167],
[176,151,169,170,0,170,162,147],
[164,164,145,153,170,0,169,156],
[152,166,160,172,178,171,0,165],
[169,161,166,173,193,184,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,147,160,138,151,161,157],
[189,0,183,182,163,168,154,191],
[193,157,0,165,138,137,156,181],
[180,158,175,0,172,164,180,198],
[202,177,202,168,0,184,172,212],
[189,172,203,176,156,0,156,205],
[179,186,184,160,168,184,0,207],
[183,149,159,142,128,135,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,165,180,149,184,157,185],
[162,0,158,190,156,171,160,156],
[175,182,0,158,155,192,176,176],
[160,150,182,0,151,167,153,177],
[191,184,185,189,0,179,170,196],
[156,169,148,173,161,0,196,185],
[183,180,164,187,170,144,0,185],
[155,184,164,163,144,155,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,164,151,156,167,159,174],
[171,0,167,186,176,185,164,175],
[176,173,0,188,161,182,174,175],
[189,154,152,0,162,169,173,178],
[184,164,179,178,0,174,193,181],
[173,155,158,171,166,0,191,167],
[181,176,166,167,147,149,0,169],
[166,165,165,162,159,173,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,189,184,161,178,162,165],
[182,0,178,167,158,152,134,169],
[151,162,0,147,150,154,136,137],
[156,173,193,0,156,181,167,163],
[179,182,190,184,0,185,173,168],
[162,188,186,159,155,0,155,186],
[178,206,204,173,167,185,0,175],
[175,171,203,177,172,154,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,170,169,186,174,182,174],
[166,0,156,156,158,152,158,171],
[170,184,0,176,173,177,166,171],
[171,184,164,0,181,158,174,175],
[154,182,167,159,0,170,181,162],
[166,188,163,182,170,0,188,172],
[158,182,174,166,159,152,0,158],
[166,169,169,165,178,168,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,154,169,164,176,186,171],
[160,0,143,182,154,153,190,153],
[186,197,0,183,196,175,203,169],
[171,158,157,0,155,163,201,150],
[176,186,144,185,0,165,196,169],
[164,187,165,177,175,0,183,188],
[154,150,137,139,144,157,0,157],
[169,187,171,190,171,152,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,166,206,196,152,194,146],
[186,0,182,196,182,170,183,171],
[174,158,0,196,169,188,211,170],
[134,144,144,0,179,129,193,151],
[144,158,171,161,0,147,195,157],
[188,170,152,211,193,0,197,156],
[146,157,129,147,145,143,0,132],
[194,169,170,189,183,184,208,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,189,179,177,176,161,181],
[168,0,185,168,171,167,171,181],
[151,155,0,164,172,171,154,165],
[161,172,176,0,173,181,162,184],
[163,169,168,167,0,171,163,168],
[164,173,169,159,169,0,162,167],
[179,169,186,178,177,178,0,181],
[159,159,175,156,172,173,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,178,160,177,155,155,179],
[177,0,170,187,184,176,180,173],
[162,170,0,157,176,171,159,169],
[180,153,183,0,178,174,171,193],
[163,156,164,162,0,157,158,157],
[185,164,169,166,183,0,174,167],
[185,160,181,169,182,166,0,174],
[161,167,171,147,183,173,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,198,167,179,169,191,176],
[174,0,197,179,177,167,185,175],
[142,143,0,149,143,152,158,154],
[173,161,191,0,178,174,180,159],
[161,163,197,162,0,169,191,166],
[171,173,188,166,171,0,189,165],
[149,155,182,160,149,151,0,157],
[164,165,186,181,174,175,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,150,179,157,169,172,135],
[172,0,144,125,139,168,201,141],
[190,196,0,179,154,180,209,191],
[161,215,161,0,127,174,195,186],
[183,201,186,213,0,208,211,168],
[171,172,160,166,132,0,173,142],
[168,139,131,145,129,167,0,127],
[205,199,149,154,172,198,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,149,148,150,150,131,149],
[181,0,168,162,142,163,149,170],
[191,172,0,167,166,174,172,177],
[192,178,173,0,167,183,155,158],
[190,198,174,173,0,190,158,179],
[190,177,166,157,150,0,165,167],
[209,191,168,185,182,175,0,190],
[191,170,163,182,161,173,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,166,176,191,192,179,176],
[152,0,174,185,175,189,171,193],
[174,166,0,162,177,175,155,168],
[164,155,178,0,173,186,174,171],
[149,165,163,167,0,188,173,173],
[148,151,165,154,152,0,152,165],
[161,169,185,166,167,188,0,186],
[164,147,172,169,167,175,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,186,210,171,191,189,199],
[171,0,198,201,171,168,174,188],
[154,142,0,166,135,166,126,174],
[130,139,174,0,158,172,142,180],
[169,169,205,182,0,156,173,188],
[149,172,174,168,184,0,173,179],
[151,166,214,198,167,167,0,181],
[141,152,166,160,152,161,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,176,169,168,176,179,178],
[168,0,163,166,175,166,169,168],
[164,177,0,181,173,176,165,172],
[171,174,159,0,167,180,179,188],
[172,165,167,173,0,178,177,171],
[164,174,164,160,162,0,161,174],
[161,171,175,161,163,179,0,169],
[162,172,168,152,169,166,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,172,171,176,201,223,177],
[170,0,169,155,150,165,187,124],
[168,171,0,141,124,166,191,139],
[169,185,199,0,155,129,205,122],
[164,190,216,185,0,193,200,144],
[139,175,174,211,147,0,185,158],
[117,153,149,135,140,155,0,115],
[163,216,201,218,196,182,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,172,168,177,180,183,185],
[150,0,163,174,169,171,168,165],
[168,177,0,167,179,175,181,179],
[172,166,173,0,168,178,169,189],
[163,171,161,172,0,181,152,170],
[160,169,165,162,159,0,176,176],
[157,172,159,171,188,164,0,183],
[155,175,161,151,170,164,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,173,172,168,179,188,170],
[189,0,178,172,167,185,186,175],
[167,162,0,149,159,168,169,170],
[168,168,191,0,163,156,191,165],
[172,173,181,177,0,159,181,164],
[161,155,172,184,181,0,177,159],
[152,154,171,149,159,163,0,162],
[170,165,170,175,176,181,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,176,168,170,192,186,174],
[150,0,178,161,154,176,177,170],
[164,162,0,143,141,190,150,168],
[172,179,197,0,170,188,176,179],
[170,186,199,170,0,182,175,175],
[148,164,150,152,158,0,157,162],
[154,163,190,164,165,183,0,171],
[166,170,172,161,165,178,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,173,168,177,171,165,181],
[159,0,167,169,166,155,159,161],
[167,173,0,174,174,171,175,175],
[172,171,166,0,175,165,162,161],
[163,174,166,165,0,154,159,167],
[169,185,169,175,186,0,181,181],
[175,181,165,178,181,159,0,178],
[159,179,165,179,173,159,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,174,178,168,154,179,177],
[145,0,167,148,160,172,174,149],
[166,173,0,156,172,164,175,156],
[162,192,184,0,177,165,168,170],
[172,180,168,163,0,158,173,150],
[186,168,176,175,182,0,179,170],
[161,166,165,172,167,161,0,136],
[163,191,184,170,190,170,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,156,148,164,165,178,163],
[173,0,164,160,166,176,193,172],
[184,176,0,174,181,172,183,168],
[192,180,166,0,179,186,189,165],
[176,174,159,161,0,172,176,173],
[175,164,168,154,168,0,173,147],
[162,147,157,151,164,167,0,151],
[177,168,172,175,167,193,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,155,184,174,156,134,152],
[171,0,175,155,166,167,154,170],
[185,165,0,120,178,164,139,136],
[156,185,220,0,170,164,129,172],
[166,174,162,170,0,161,148,153],
[184,173,176,176,179,0,182,150],
[206,186,201,211,192,158,0,176],
[188,170,204,168,187,190,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,164,193,199,187,214,190],
[151,0,150,174,158,157,182,160],
[176,190,0,179,167,191,174,182],
[147,166,161,0,159,167,157,162],
[141,182,173,181,0,184,187,169],
[153,183,149,173,156,0,162,152],
[126,158,166,183,153,178,0,153],
[150,180,158,178,171,188,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,168,176,155,186,154,177],
[180,0,173,167,159,198,173,177],
[172,167,0,173,170,180,166,161],
[164,173,167,0,163,197,172,173],
[185,181,170,177,0,196,170,186],
[154,142,160,143,144,0,148,159],
[186,167,174,168,170,192,0,183],
[163,163,179,167,154,181,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,158,137,162,152,159,165],
[191,0,162,164,188,199,184,169],
[182,178,0,170,192,182,170,178],
[203,176,170,0,200,160,195,181],
[178,152,148,140,0,149,155,132],
[188,141,158,180,191,0,172,172],
[181,156,170,145,185,168,0,176],
[175,171,162,159,208,168,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,190,174,167,199,182,189],
[151,0,171,159,154,183,164,176],
[150,169,0,146,156,174,166,177],
[166,181,194,0,190,196,180,178],
[173,186,184,150,0,210,186,169],
[141,157,166,144,130,0,160,161],
[158,176,174,160,154,180,0,167],
[151,164,163,162,171,179,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,160,158,161,163,152,166],
[174,0,160,151,158,158,164,165],
[180,180,0,167,170,164,173,169],
[182,189,173,0,175,169,177,169],
[179,182,170,165,0,171,175,172],
[177,182,176,171,169,0,170,192],
[188,176,167,163,165,170,0,182],
[174,175,171,171,168,148,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,179,180,161,182,176,174],
[147,0,167,166,154,164,159,160],
[161,173,0,183,159,168,164,172],
[160,174,157,0,166,170,167,159],
[179,186,181,174,0,170,168,156],
[158,176,172,170,170,0,154,175],
[164,181,176,173,172,186,0,175],
[166,180,168,181,184,165,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,171,166,175,154,163,160],
[165,0,163,149,168,158,167,161],
[169,177,0,170,167,145,171,166],
[174,191,170,0,180,177,169,179],
[165,172,173,160,0,150,182,173],
[186,182,195,163,190,0,190,173],
[177,173,169,171,158,150,0,169],
[180,179,174,161,167,167,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,192,202,196,202,181,160],
[125,0,133,211,214,186,219,161],
[148,207,0,232,207,210,169,200],
[138,129,108,0,179,191,169,154],
[144,126,133,161,0,206,182,149],
[138,154,130,149,134,0,190,143],
[159,121,171,171,158,150,0,146],
[180,179,140,186,191,197,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,219,164,201,179,182,170],
[144,0,174,162,169,185,140,147],
[121,166,0,157,163,164,163,145],
[176,178,183,0,157,163,167,138],
[139,171,177,183,0,171,156,142],
[161,155,176,177,169,0,179,156],
[158,200,177,173,184,161,0,145],
[170,193,195,202,198,184,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,170,159,158,181,192,159],
[168,0,166,168,166,154,190,168],
[170,174,0,170,170,156,180,194],
[181,172,170,0,169,153,202,169],
[182,174,170,171,0,146,136,158],
[159,186,184,187,194,0,204,150],
[148,150,160,138,204,136,0,170],
[181,172,146,171,182,190,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,165,160,151,153,134,150],
[202,0,176,196,189,170,162,178],
[175,164,0,167,178,169,150,165],
[180,144,173,0,167,163,149,155],
[189,151,162,173,0,163,161,160],
[187,170,171,177,177,0,171,179],
[206,178,190,191,179,169,0,178],
[190,162,175,185,180,161,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,155,87,88,180,179,202],
[207,0,180,158,139,181,202,227],
[185,160,0,204,184,228,183,208],
[253,182,136,0,140,161,180,229],
[252,201,156,200,0,248,223,204],
[160,159,112,179,92,0,158,160],
[161,138,157,160,117,182,0,230],
[138,113,132,111,136,180,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,166,174,188,190,181,170],
[158,0,163,159,170,174,161,154],
[174,177,0,175,173,189,164,167],
[166,181,165,0,171,177,157,148],
[152,170,167,169,0,172,149,165],
[150,166,151,163,168,0,154,167],
[159,179,176,183,191,186,0,164],
[170,186,173,192,175,173,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,189,172,166,162,174,169],
[176,0,178,182,174,168,174,169],
[151,162,0,159,160,164,168,180],
[168,158,181,0,173,170,163,168],
[174,166,180,167,0,172,184,185],
[178,172,176,170,168,0,173,155],
[166,166,172,177,156,167,0,164],
[171,171,160,172,155,185,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,173,181,188,178,169,186],
[163,0,176,179,166,153,163,169],
[167,164,0,168,168,167,159,165],
[159,161,172,0,165,159,158,171],
[152,174,172,175,0,166,169,174],
[162,187,173,181,174,0,173,176],
[171,177,181,182,171,167,0,176],
[154,171,175,169,166,164,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,180,173,181,181,174,183],
[174,0,164,177,190,174,179,182],
[160,176,0,174,188,168,164,186],
[167,163,166,0,178,167,152,185],
[159,150,152,162,0,168,165,174],
[159,166,172,173,172,0,175,191],
[166,161,176,188,175,165,0,185],
[157,158,154,155,166,149,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,177,164,159,174,137,163],
[177,0,195,172,174,178,162,166],
[163,145,0,168,182,175,148,159],
[176,168,172,0,199,182,171,161],
[181,166,158,141,0,166,146,149],
[166,162,165,158,174,0,141,151],
[203,178,192,169,194,199,0,173],
[177,174,181,179,191,189,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,166,176,167,180,172,182],
[169,0,159,172,156,166,178,165],
[174,181,0,188,177,185,177,168],
[164,168,152,0,153,192,187,180],
[173,184,163,187,0,185,189,180],
[160,174,155,148,155,0,159,163],
[168,162,163,153,151,181,0,159],
[158,175,172,160,160,177,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,198,198,180,162,193,173],
[162,0,190,168,178,169,185,163],
[142,150,0,169,172,178,178,185],
[142,172,171,0,161,155,207,156],
[160,162,168,179,0,158,168,176],
[178,171,162,185,182,0,182,165],
[147,155,162,133,172,158,0,152],
[167,177,155,184,164,175,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,167,170,176,163,163,167],
[162,0,163,159,153,170,153,155],
[173,177,0,170,181,182,153,177],
[170,181,170,0,155,163,178,154],
[164,187,159,185,0,190,174,183],
[177,170,158,177,150,0,154,158],
[177,187,187,162,166,186,0,181],
[173,185,163,186,157,182,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,181,182,164,177,172,169],
[164,0,188,182,162,187,176,172],
[159,152,0,169,153,168,158,158],
[158,158,171,0,155,165,159,168],
[176,178,187,185,0,181,166,175],
[163,153,172,175,159,0,167,174],
[168,164,182,181,174,173,0,172],
[171,168,182,172,165,166,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,158,168,187,175,179,192],
[185,0,182,163,201,184,179,181],
[182,158,0,183,190,174,170,191],
[172,177,157,0,180,159,183,191],
[153,139,150,160,0,153,143,163],
[165,156,166,181,187,0,187,177],
[161,161,170,157,197,153,0,161],
[148,159,149,149,177,163,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,168,179,175,164,180,180],
[187,0,165,189,191,170,186,188],
[172,175,0,194,187,162,182,178],
[161,151,146,0,166,137,157,171],
[165,149,153,174,0,155,168,180],
[176,170,178,203,185,0,188,180],
[160,154,158,183,172,152,0,164],
[160,152,162,169,160,160,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,140,152,156,151,149,157],
[192,0,171,175,166,168,187,170],
[200,169,0,179,183,157,184,181],
[188,165,161,0,161,175,170,162],
[184,174,157,179,0,166,172,171],
[189,172,183,165,174,0,179,173],
[191,153,156,170,168,161,0,170],
[183,170,159,178,169,167,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,171,191,189,176,166,188],
[162,0,149,199,153,163,172,176],
[169,191,0,213,179,200,204,235],
[149,141,127,0,149,161,170,174],
[151,187,161,191,0,161,166,187],
[164,177,140,179,179,0,170,193],
[174,168,136,170,174,170,0,189],
[152,164,105,166,153,147,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,170,196,173,184,172,183],
[166,0,160,169,153,157,166,179],
[170,180,0,194,175,180,170,179],
[144,171,146,0,155,157,162,170],
[167,187,165,185,0,184,179,198],
[156,183,160,183,156,0,175,179],
[168,174,170,178,161,165,0,174],
[157,161,161,170,142,161,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,164,182,153,152,160,155],
[173,0,174,179,183,180,161,190],
[176,166,0,185,180,165,148,181],
[158,161,155,0,166,167,157,180],
[187,157,160,174,0,174,171,206],
[188,160,175,173,166,0,176,183],
[180,179,192,183,169,164,0,172],
[185,150,159,160,134,157,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,132,155,153,144,130,153],
[216,0,170,180,180,169,187,168],
[208,170,0,161,168,160,172,174],
[185,160,179,0,157,168,169,146],
[187,160,172,183,0,181,174,165],
[196,171,180,172,159,0,185,170],
[210,153,168,171,166,155,0,159],
[187,172,166,194,175,170,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,161,161,163,162,174,173],
[176,0,162,163,171,168,161,167],
[179,178,0,169,181,170,182,180],
[179,177,171,0,169,182,180,168],
[177,169,159,171,0,170,170,174],
[178,172,170,158,170,0,166,168],
[166,179,158,160,170,174,0,166],
[167,173,160,172,166,172,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,177,185,194,180,184,179],
[175,0,175,198,176,166,181,181],
[163,165,0,177,173,186,151,170],
[155,142,163,0,174,172,174,170],
[146,164,167,166,0,178,170,176],
[160,174,154,168,162,0,166,174],
[156,159,189,166,170,174,0,178],
[161,159,170,170,164,166,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,151,182,170,176,192,172],
[147,0,150,150,149,167,169,155],
[189,190,0,193,139,159,176,172],
[158,190,147,0,149,131,168,160],
[170,191,201,191,0,169,194,185],
[164,173,181,209,171,0,180,162],
[148,171,164,172,146,160,0,163],
[168,185,168,180,155,178,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,181,173,178,171,167,151],
[170,0,178,185,180,166,166,158],
[159,162,0,173,170,165,160,164],
[167,155,167,0,170,158,177,153],
[162,160,170,170,0,154,179,155],
[169,174,175,182,186,0,185,185],
[173,174,180,163,161,155,0,160],
[189,182,176,187,185,155,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,156,171,170,177,173,166],
[176,0,164,158,185,174,185,164],
[184,176,0,184,191,195,179,161],
[169,182,156,0,192,193,170,173],
[170,155,149,148,0,168,171,152],
[163,166,145,147,172,0,162,165],
[167,155,161,170,169,178,0,157],
[174,176,179,167,188,175,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,166,151,157,160,157,166],
[168,0,162,160,155,171,161,176],
[174,178,0,156,156,165,155,176],
[189,180,184,0,171,166,171,192],
[183,185,184,169,0,186,155,174],
[180,169,175,174,154,0,156,156],
[183,179,185,169,185,184,0,186],
[174,164,164,148,166,184,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,171,159,184,177,178,187],
[157,0,163,187,158,170,170,173],
[169,177,0,194,182,166,176,173],
[181,153,146,0,154,155,163,165],
[156,182,158,186,0,148,182,160],
[163,170,174,185,192,0,182,194],
[162,170,164,177,158,158,0,162],
[153,167,167,175,180,146,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,182,170,179,185,171,201],
[170,0,168,166,177,180,157,207],
[158,172,0,175,174,191,184,204],
[170,174,165,0,173,201,189,212],
[161,163,166,167,0,183,160,191],
[155,160,149,139,157,0,146,179],
[169,183,156,151,180,194,0,205],
[139,133,136,128,149,161,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,216,157,186,154,185,123],
[124,0,219,187,94,125,189,124],
[124,121,0,125,123,92,122,122],
[183,153,215,0,151,121,153,120],
[154,246,217,189,0,154,215,186],
[186,215,248,219,186,0,185,153],
[155,151,218,187,125,155,0,155],
[217,216,218,220,154,187,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,181,162,160,159,187,191],
[177,0,174,143,155,153,181,170],
[159,166,0,174,151,134,156,177],
[178,197,166,0,170,158,182,189],
[180,185,189,170,0,178,187,212],
[181,187,206,182,162,0,186,201],
[153,159,184,158,153,154,0,167],
[149,170,163,151,128,139,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,152,142,172,163,162,159],
[192,0,166,179,178,188,182,173],
[188,174,0,165,165,164,187,174],
[198,161,175,0,175,182,187,174],
[168,162,175,165,0,169,173,154],
[177,152,176,158,171,0,165,169],
[178,158,153,153,167,175,0,161],
[181,167,166,166,186,171,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,158,183,171,168,180,175],
[149,0,140,128,167,169,157,157],
[182,200,0,165,184,183,171,163],
[157,212,175,0,176,189,177,170],
[169,173,156,164,0,181,162,170],
[172,171,157,151,159,0,167,167],
[160,183,169,163,178,173,0,166],
[165,183,177,170,170,173,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,161,161,171,174,184,167],
[175,0,158,164,179,173,182,162],
[179,182,0,174,187,166,198,174],
[179,176,166,0,172,164,178,175],
[169,161,153,168,0,174,179,169],
[166,167,174,176,166,0,184,177],
[156,158,142,162,161,156,0,162],
[173,178,166,165,171,163,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,173,159,171,166,157,166],
[178,0,172,160,166,171,170,157],
[167,168,0,156,162,170,159,164],
[181,180,184,0,175,181,165,164],
[169,174,178,165,0,181,172,172],
[174,169,170,159,159,0,158,166],
[183,170,181,175,168,182,0,178],
[174,183,176,176,168,174,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,160,166,174,156,154,159],
[161,0,161,165,168,154,165,162],
[180,179,0,166,177,175,162,176],
[174,175,174,0,178,168,165,156],
[166,172,163,162,0,148,157,150],
[184,186,165,172,192,0,167,161],
[186,175,178,175,183,173,0,163],
[181,178,164,184,190,179,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,141,97,161,149,86,131],
[202,0,180,199,200,198,155,169],
[199,160,0,167,177,183,141,144],
[243,141,173,0,182,191,175,141],
[179,140,163,158,0,168,101,175],
[191,142,157,149,172,0,143,148],
[254,185,199,165,239,197,0,201],
[209,171,196,199,165,192,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,178,163,175,165,174,154],
[156,0,175,150,157,139,150,143],
[162,165,0,166,167,167,169,158],
[177,190,174,0,184,172,167,161],
[165,183,173,156,0,158,170,152],
[175,201,173,168,182,0,176,185],
[166,190,171,173,170,164,0,157],
[186,197,182,179,188,155,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,163,183,173,176,162,217],
[155,0,169,169,151,157,160,194],
[177,171,0,179,168,182,170,209],
[157,171,161,0,162,168,146,181],
[167,189,172,178,0,159,174,181],
[164,183,158,172,181,0,167,197],
[178,180,170,194,166,173,0,194],
[123,146,131,159,159,143,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,179,175,179,179,186,167],
[151,0,160,166,174,170,165,163],
[161,180,0,179,180,172,172,168],
[165,174,161,0,173,165,170,154],
[161,166,160,167,0,161,163,155],
[161,170,168,175,179,0,167,155],
[154,175,168,170,177,173,0,172],
[173,177,172,186,185,185,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,163,166,173,168,159,179],
[176,0,169,158,160,173,159,187],
[177,171,0,179,169,181,173,179],
[174,182,161,0,152,164,185,178],
[167,180,171,188,0,159,176,176],
[172,167,159,176,181,0,162,181],
[181,181,167,155,164,178,0,183],
[161,153,161,162,164,159,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,169,166,181,154,165,186],
[183,0,190,161,173,165,169,157],
[171,150,0,163,171,166,181,156],
[174,179,177,0,172,184,185,170],
[159,167,169,168,0,167,169,179],
[186,175,174,156,173,0,174,183],
[175,171,159,155,171,166,0,161],
[154,183,184,170,161,157,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,162,180,177,181,170,182],
[170,0,177,173,171,168,175,175],
[178,163,0,176,173,171,166,167],
[160,167,164,0,166,157,160,164],
[163,169,167,174,0,157,151,162],
[159,172,169,183,183,0,179,173],
[170,165,174,180,189,161,0,175],
[158,165,173,176,178,167,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,185,181,182,194,160,189],
[162,0,165,167,167,175,169,186],
[155,175,0,192,174,179,170,184],
[159,173,148,0,193,147,145,182],
[158,173,166,147,0,156,151,164],
[146,165,161,193,184,0,166,171],
[180,171,170,195,189,174,0,179],
[151,154,156,158,176,169,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,209,191,214,157,203,200],
[121,0,161,156,216,125,157,133],
[131,179,0,167,250,143,153,179],
[149,184,173,0,230,185,179,168],
[126,124,90,110,0,127,96,95],
[183,215,197,155,213,0,181,204],
[137,183,187,161,244,159,0,157],
[140,207,161,172,245,136,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,161,172,168,174,146,191],
[172,0,148,146,156,156,158,176],
[179,192,0,165,156,172,172,189],
[168,194,175,0,164,163,155,178],
[172,184,184,176,0,174,165,203],
[166,184,168,177,166,0,147,179],
[194,182,168,185,175,193,0,203],
[149,164,151,162,137,161,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,175,178,176,168,177,184],
[164,0,166,152,177,167,177,177],
[165,174,0,178,174,170,161,161],
[162,188,162,0,184,175,185,174],
[164,163,166,156,0,188,175,188],
[172,173,170,165,152,0,160,169],
[163,163,179,155,165,180,0,162],
[156,163,179,166,152,171,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,154,156,157,175,148,173],
[178,0,147,159,150,168,143,175],
[186,193,0,181,175,186,159,190],
[184,181,159,0,148,161,149,186],
[183,190,165,192,0,183,177,186],
[165,172,154,179,157,0,143,174],
[192,197,181,191,163,197,0,198],
[167,165,150,154,154,166,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,159,167,162,175,187,178],
[170,0,163,170,162,179,180,199],
[181,177,0,162,161,179,179,191],
[173,170,178,0,179,171,172,181],
[178,178,179,161,0,178,186,181],
[165,161,161,169,162,0,163,178],
[153,160,161,168,154,177,0,177],
[162,141,149,159,159,162,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,165,156,162,175,155,156],
[174,0,174,172,171,159,172,167],
[175,166,0,166,188,170,163,157],
[184,168,174,0,190,181,172,175],
[178,169,152,150,0,153,155,146],
[165,181,170,159,187,0,180,162],
[185,168,177,168,185,160,0,167],
[184,173,183,165,194,178,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,189,164,185,178,172,178],
[173,0,219,148,170,193,201,176],
[151,121,0,160,183,174,165,166],
[176,192,180,0,185,201,181,151],
[155,170,157,155,0,187,160,162],
[162,147,166,139,153,0,169,156],
[168,139,175,159,180,171,0,168],
[162,164,174,189,178,184,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,176,180,169,167,165,178],
[153,0,156,180,156,166,180,180],
[164,184,0,171,162,160,163,169],
[160,160,169,0,169,164,151,164],
[171,184,178,171,0,162,163,190],
[173,174,180,176,178,0,160,167],
[175,160,177,189,177,180,0,187],
[162,160,171,176,150,173,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,187,188,171,192,177,160],
[163,0,183,164,151,171,178,159],
[153,157,0,157,151,182,167,157],
[152,176,183,0,153,165,172,169],
[169,189,189,187,0,188,189,156],
[148,169,158,175,152,0,175,180],
[163,162,173,168,151,165,0,152],
[180,181,183,171,184,160,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,154,159,169,172,161,169],
[191,0,156,193,192,160,170,186],
[186,184,0,188,169,180,160,173],
[181,147,152,0,176,155,156,159],
[171,148,171,164,0,151,153,165],
[168,180,160,185,189,0,169,173],
[179,170,180,184,187,171,0,175],
[171,154,167,181,175,167,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,160,174,196,187,197,207],
[174,0,171,166,179,156,195,188],
[180,169,0,179,180,151,163,180],
[166,174,161,0,169,155,159,171],
[144,161,160,171,0,171,199,178],
[153,184,189,185,169,0,192,186],
[143,145,177,181,141,148,0,177],
[133,152,160,169,162,154,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,166,161,137,184,151,170],
[210,0,181,177,162,198,177,199],
[174,159,0,159,138,185,140,161],
[179,163,181,0,164,168,167,167],
[203,178,202,176,0,179,164,185],
[156,142,155,172,161,0,158,160],
[189,163,200,173,176,182,0,183],
[170,141,179,173,155,180,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,169,188,178,171,173,160],
[146,0,152,167,160,158,151,150],
[171,188,0,179,166,165,159,169],
[152,173,161,0,162,148,158,153],
[162,180,174,178,0,175,159,169],
[169,182,175,192,165,0,153,172],
[167,189,181,182,181,187,0,177],
[180,190,171,187,171,168,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,170,177,183,179,179,174],
[162,0,152,173,169,175,179,159],
[170,188,0,180,175,181,191,172],
[163,167,160,0,163,168,169,168],
[157,171,165,177,0,170,187,179],
[161,165,159,172,170,0,178,159],
[161,161,149,171,153,162,0,171],
[166,181,168,172,161,181,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,183,170,184,155,164,180],
[171,0,183,149,171,166,166,171],
[157,157,0,165,162,165,161,172],
[170,191,175,0,188,191,176,193],
[156,169,178,152,0,172,162,168],
[185,174,175,149,168,0,171,178],
[176,174,179,164,178,169,0,163],
[160,169,168,147,172,162,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,175,174,171,172,183,169],
[165,0,165,176,166,179,165,148],
[165,175,0,176,162,170,192,172],
[166,164,164,0,162,163,170,155],
[169,174,178,178,0,171,180,175],
[168,161,170,177,169,0,165,158],
[157,175,148,170,160,175,0,160],
[171,192,168,185,165,182,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,183,186,181,190,166,179],
[153,0,159,162,172,170,160,173],
[157,181,0,176,185,178,165,177],
[154,178,164,0,183,186,178,178],
[159,168,155,157,0,168,148,152],
[150,170,162,154,172,0,141,170],
[174,180,175,162,192,199,0,186],
[161,167,163,162,188,170,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,180,187,175,169,178,185],
[168,0,188,186,182,181,166,161],
[160,152,0,173,168,183,184,160],
[153,154,167,0,176,159,159,163],
[165,158,172,164,0,166,164,169],
[171,159,157,181,174,0,162,155],
[162,174,156,181,176,178,0,164],
[155,179,180,177,171,185,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,151,164,176,164,169,167],
[173,0,150,180,181,153,161,155],
[189,190,0,210,180,181,176,170],
[176,160,130,0,165,155,174,138],
[164,159,160,175,0,159,160,163],
[176,187,159,185,181,0,173,161],
[171,179,164,166,180,167,0,153],
[173,185,170,202,177,179,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,169,164,194,163,197,189],
[146,0,170,172,176,164,173,173],
[171,170,0,147,178,171,190,202],
[176,168,193,0,192,151,207,171],
[146,164,162,148,0,144,169,168],
[177,176,169,189,196,0,186,168],
[143,167,150,133,171,154,0,173],
[151,167,138,169,172,172,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,157,154,169,160,164,187],
[184,0,176,171,182,165,172,179],
[183,164,0,166,162,165,173,178],
[186,169,174,0,166,178,178,195],
[171,158,178,174,0,165,174,170],
[180,175,175,162,175,0,192,188],
[176,168,167,162,166,148,0,185],
[153,161,162,145,170,152,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,143,145,155,154,162,202],
[177,0,157,127,175,158,152,181],
[197,183,0,176,183,166,156,194],
[195,213,164,0,209,178,186,200],
[185,165,157,131,0,139,148,188],
[186,182,174,162,201,0,155,202],
[178,188,184,154,192,185,0,192],
[138,159,146,140,152,138,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,167,163,168,152,176,160],
[155,0,147,137,156,148,144,142],
[173,193,0,176,169,170,185,176],
[177,203,164,0,170,162,177,172],
[172,184,171,170,0,169,181,175],
[188,192,170,178,171,0,183,177],
[164,196,155,163,159,157,0,175],
[180,198,164,168,165,163,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,182,204,194,187,186,171],
[172,0,177,189,188,203,180,164],
[158,163,0,185,192,173,175,166],
[136,151,155,0,168,179,157,172],
[146,152,148,172,0,170,160,164],
[153,137,167,161,170,0,161,147],
[154,160,165,183,180,179,0,164],
[169,176,174,168,176,193,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,167,164,154,174,159,159],
[174,0,164,172,160,174,179,167],
[173,176,0,175,174,159,179,177],
[176,168,165,0,167,157,177,178],
[186,180,166,173,0,162,174,181],
[166,166,181,183,178,0,186,192],
[181,161,161,163,166,154,0,177],
[181,173,163,162,159,148,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,166,161,154,145,170,152],
[192,0,170,176,187,159,179,180],
[174,170,0,166,181,158,174,161],
[179,164,174,0,171,136,165,154],
[186,153,159,169,0,154,195,170],
[195,181,182,204,186,0,193,163],
[170,161,166,175,145,147,0,184],
[188,160,179,186,170,177,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,159,187,159,176,160,162],
[161,0,157,182,154,172,168,161],
[181,183,0,196,182,160,174,175],
[153,158,144,0,142,148,174,138],
[181,186,158,198,0,169,177,169],
[164,168,180,192,171,0,194,161],
[180,172,166,166,163,146,0,148],
[178,179,165,202,171,179,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,176,163,174,154,166,163],
[168,0,177,167,172,180,161,163],
[164,163,0,158,167,164,155,159],
[177,173,182,0,184,177,174,169],
[166,168,173,156,0,154,155,154],
[186,160,176,163,186,0,180,163],
[174,179,185,166,185,160,0,179],
[177,177,181,171,186,177,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,192,178,165,187,190,169],
[180,0,184,183,171,188,180,166],
[148,156,0,160,157,169,154,154],
[162,157,180,0,163,176,172,170],
[175,169,183,177,0,180,188,164],
[153,152,171,164,160,0,166,142],
[150,160,186,168,152,174,0,143],
[171,174,186,170,176,198,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,169,168,156,140,169,181],
[172,0,171,159,174,172,168,152],
[171,169,0,171,151,162,178,176],
[172,181,169,0,173,170,173,169],
[184,166,189,167,0,179,194,186],
[200,168,178,170,161,0,189,178],
[171,172,162,167,146,151,0,163],
[159,188,164,171,154,162,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,165,187,169,171,173,173],
[168,0,175,165,175,193,163,181],
[175,165,0,156,157,168,165,163],
[153,175,184,0,163,178,178,177],
[171,165,183,177,0,178,177,179],
[169,147,172,162,162,0,173,177],
[167,177,175,162,163,167,0,174],
[167,159,177,163,161,163,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,176,174,177,199,189,172],
[170,0,177,179,185,189,184,181],
[164,163,0,183,179,185,188,173],
[166,161,157,0,183,183,169,173],
[163,155,161,157,0,184,172,176],
[141,151,155,157,156,0,163,149],
[151,156,152,171,168,177,0,158],
[168,159,167,167,164,191,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,168,166,157,167,169,175],
[168,0,176,170,171,163,172,171],
[172,164,0,171,161,173,170,182],
[174,170,169,0,167,163,167,168],
[183,169,179,173,0,166,154,180],
[173,177,167,177,174,0,157,160],
[171,168,170,173,186,183,0,169],
[165,169,158,172,160,180,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,164,147,157,168,140,169],
[188,0,209,210,202,190,165,201],
[176,131,0,157,167,159,123,181],
[193,130,183,0,186,176,150,169],
[183,138,173,154,0,156,146,164],
[172,150,181,164,184,0,141,182],
[200,175,217,190,194,199,0,167],
[171,139,159,171,176,158,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,185,178,162,186,163,158],
[176,0,197,187,164,189,172,180],
[155,143,0,177,168,179,141,156],
[162,153,163,0,145,172,153,145],
[178,176,172,195,0,196,175,160],
[154,151,161,168,144,0,136,158],
[177,168,199,187,165,204,0,176],
[182,160,184,195,180,182,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,179,168,199,184,171,142],
[129,0,166,162,201,171,118,115],
[161,174,0,181,202,164,144,139],
[172,178,159,0,225,173,162,114],
[141,139,138,115,0,140,120,95],
[156,169,176,167,200,0,159,175],
[169,222,196,178,220,181,0,164],
[198,225,201,226,245,165,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,177,174,163,173,180,157],
[171,0,177,155,162,165,161,157],
[163,163,0,166,183,187,179,146],
[166,185,174,0,164,181,178,154],
[177,178,157,176,0,179,172,172],
[167,175,153,159,161,0,169,160],
[160,179,161,162,168,171,0,140],
[183,183,194,186,168,180,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,173,166,169,168,161,189],
[159,0,167,167,177,182,161,178],
[167,173,0,171,165,175,174,172],
[174,173,169,0,177,174,162,185],
[171,163,175,163,0,191,166,189],
[172,158,165,166,149,0,143,171],
[179,179,166,178,174,197,0,188],
[151,162,168,155,151,169,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,148,157,145,156,185,163],
[174,0,143,146,124,167,143,135],
[192,197,0,160,147,185,178,155],
[183,194,180,0,170,211,197,182],
[195,216,193,170,0,187,211,214],
[184,173,155,129,153,0,148,154],
[155,197,162,143,129,192,0,146],
[177,205,185,158,126,186,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,160,163,165,158,170,155],
[189,0,167,174,175,162,176,171],
[180,173,0,152,165,167,172,177],
[177,166,188,0,178,173,192,179],
[175,165,175,162,0,155,185,177],
[182,178,173,167,185,0,176,168],
[170,164,168,148,155,164,0,161],
[185,169,163,161,163,172,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,170,170,170,0,170,170],
[170,0,170,0,340,0,170,0],
[170,170,0,170,340,0,170,170],
[170,340,170,0,340,170,170,170],
[170,0,0,0,0,0,0,0],
[340,340,340,170,340,0,340,170],
[170,170,170,170,340,0,0,170],
[170,340,170,170,340,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,185,186,176,168,186,187],
[170,0,180,176,143,168,190,175],
[155,160,0,174,168,175,188,164],
[154,164,166,0,153,172,181,174],
[164,197,172,187,0,194,201,176],
[172,172,165,168,146,0,175,164],
[154,150,152,159,139,165,0,143],
[153,165,176,166,164,176,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,172,160,167,183,172,171],
[171,0,187,175,155,161,193,183],
[168,153,0,156,162,175,169,167],
[180,165,184,0,174,173,176,176],
[173,185,178,166,0,200,179,189],
[157,179,165,167,140,0,156,158],
[168,147,171,164,161,184,0,175],
[169,157,173,164,151,182,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,174,154,171,167,174,181],
[173,0,183,183,179,192,160,194],
[166,157,0,146,165,169,157,160],
[186,157,194,0,174,177,170,185],
[169,161,175,166,0,154,168,167],
[173,148,171,163,186,0,159,181],
[166,180,183,170,172,181,0,190],
[159,146,180,155,173,159,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,169,188,179,181,177,193],
[169,0,155,184,159,158,162,183],
[171,185,0,192,167,165,172,182],
[152,156,148,0,156,146,158,178],
[161,181,173,184,0,174,183,194],
[159,182,175,194,166,0,171,183],
[163,178,168,182,157,169,0,187],
[147,157,158,162,146,157,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,168,172,163,172,189,162],
[174,0,170,161,165,163,181,165],
[172,170,0,166,177,167,192,166],
[168,179,174,0,176,168,185,175],
[177,175,163,164,0,182,176,175],
[168,177,173,172,158,0,183,165],
[151,159,148,155,164,157,0,166],
[178,175,174,165,165,175,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,158,103,154,103,102,179],
[263,0,263,212,286,158,132,263],
[182,77,0,128,127,77,128,207],
[237,128,212,0,208,184,209,237],
[186,54,213,132,0,106,161,238],
[237,182,263,156,234,0,234,238],
[238,208,212,131,179,106,0,238],
[161,77,133,103,102,102,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,156,164,174,146,158,151],
[169,0,135,165,155,132,127,146],
[184,205,0,189,187,178,167,175],
[176,175,151,0,178,147,163,163],
[166,185,153,162,0,146,158,167],
[194,208,162,193,194,0,165,169],
[182,213,173,177,182,175,0,161],
[189,194,165,177,173,171,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,183,170,170,176,177,189],
[169,0,184,173,168,171,179,182],
[157,156,0,162,157,160,166,178],
[170,167,178,0,160,163,170,169],
[170,172,183,180,0,174,178,178],
[164,169,180,177,166,0,171,172],
[163,161,174,170,162,169,0,185],
[151,158,162,171,162,168,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,154,163,174,123,174,146],
[240,0,151,208,186,133,210,200],
[186,189,0,178,167,159,211,167],
[177,132,162,0,164,167,231,163],
[166,154,173,176,0,154,209,164],
[217,207,181,173,186,0,186,163],
[166,130,129,109,131,154,0,137],
[194,140,173,177,176,177,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,172,179,181,154,173,177],
[171,0,177,176,159,172,168,167],
[168,163,0,164,171,153,166,170],
[161,164,176,0,179,153,165,176],
[159,181,169,161,0,160,164,165],
[186,168,187,187,180,0,172,170],
[167,172,174,175,176,168,0,170],
[163,173,170,164,175,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,169,170,173,166,165,169],
[164,0,176,172,165,146,170,170],
[171,164,0,151,152,167,153,162],
[170,168,189,0,156,182,158,184],
[167,175,188,184,0,169,174,196],
[174,194,173,158,171,0,165,167],
[175,170,187,182,166,175,0,177],
[171,170,178,156,144,173,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,186,167,169,170,166,164],
[172,0,182,157,165,168,169,179],
[154,158,0,161,163,155,170,173],
[173,183,179,0,167,171,176,171],
[171,175,177,173,0,168,170,173],
[170,172,185,169,172,0,173,187],
[174,171,170,164,170,167,0,157],
[176,161,167,169,167,153,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,152,161,163,154,154,160],
[197,0,184,180,197,183,174,169],
[188,156,0,170,183,174,157,164],
[179,160,170,0,171,172,174,163],
[177,143,157,169,0,168,159,150],
[186,157,166,168,172,0,163,170],
[186,166,183,166,181,177,0,170],
[180,171,176,177,190,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,168,184,174,190,177,163],
[168,0,201,177,173,180,193,174],
[172,139,0,154,162,185,164,163],
[156,163,186,0,169,191,168,166],
[166,167,178,171,0,183,170,167],
[150,160,155,149,157,0,158,145],
[163,147,176,172,170,182,0,157],
[177,166,177,174,173,195,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,199,199,202,183,153,193],
[155,0,199,181,190,187,147,184],
[141,141,0,166,160,148,148,176],
[141,159,174,0,195,171,153,194],
[138,150,180,145,0,162,170,189],
[157,153,192,169,178,0,151,187],
[187,193,192,187,170,189,0,213],
[147,156,164,146,151,153,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,159,160,151,153,165,137],
[180,0,165,163,147,184,181,159],
[181,175,0,171,158,159,179,147],
[180,177,169,0,145,164,168,152],
[189,193,182,195,0,191,186,155],
[187,156,181,176,149,0,163,171],
[175,159,161,172,154,177,0,162],
[203,181,193,188,185,169,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,157,166,166,168,170,175],
[163,0,168,168,180,167,160,179],
[183,172,0,173,174,172,168,188],
[174,172,167,0,192,180,174,189],
[174,160,166,148,0,170,156,183],
[172,173,168,160,170,0,175,186],
[170,180,172,166,184,165,0,179],
[165,161,152,151,157,154,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,210,171,148,189,129,134],
[153,0,134,115,128,131,56,153],
[130,206,0,204,147,149,148,224],
[169,225,136,0,147,167,93,225],
[192,212,193,193,0,153,173,194],
[151,209,191,173,187,0,154,231],
[211,284,192,247,167,186,0,265],
[206,187,116,115,146,109,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,168,179,180,178,166,182],
[163,0,152,179,169,185,156,169],
[172,188,0,188,194,169,177,173],
[161,161,152,0,178,180,159,167],
[160,171,146,162,0,174,149,159],
[162,155,171,160,166,0,156,153],
[174,184,163,181,191,184,0,169],
[158,171,167,173,181,187,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,166,157,170,164,184,175],
[177,0,166,151,167,166,192,178],
[174,174,0,157,155,159,183,175],
[183,189,183,0,166,176,210,199],
[170,173,185,174,0,182,199,185],
[176,174,181,164,158,0,185,179],
[156,148,157,130,141,155,0,156],
[165,162,165,141,155,161,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,167,180,161,171,176,181],
[173,0,190,193,173,180,186,169],
[173,150,0,187,138,176,155,162],
[160,147,153,0,135,157,156,162],
[179,167,202,205,0,165,177,163],
[169,160,164,183,175,0,179,164],
[164,154,185,184,163,161,0,156],
[159,171,178,178,177,176,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,178,134,136,164,147,138],
[175,0,165,143,172,167,163,153],
[162,175,0,157,152,168,152,148],
[206,197,183,0,167,179,174,162],
[204,168,188,173,0,175,169,152],
[176,173,172,161,165,0,144,170],
[193,177,188,166,171,196,0,161],
[202,187,192,178,188,170,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,185,185,190,192,158,187],
[176,0,169,169,175,160,152,165],
[155,171,0,189,177,154,135,166],
[155,171,151,0,172,146,160,166],
[150,165,163,168,0,166,128,162],
[148,180,186,194,174,0,180,174],
[182,188,205,180,212,160,0,181],
[153,175,174,174,178,166,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,179,167,164,175,176,179],
[160,0,185,164,166,167,168,174],
[161,155,0,152,156,164,155,168],
[173,176,188,0,175,163,176,159],
[176,174,184,165,0,173,171,173],
[165,173,176,177,167,0,168,153],
[164,172,185,164,169,172,0,173],
[161,166,172,181,167,187,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,162,190,169,192,188,162],
[184,0,159,173,164,184,169,153],
[178,181,0,170,177,194,177,184],
[150,167,170,0,174,190,152,159],
[171,176,163,166,0,182,148,162],
[148,156,146,150,158,0,143,160],
[152,171,163,188,192,197,0,170],
[178,187,156,181,178,180,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,172,160,168,155,147,164],
[173,0,180,157,164,176,156,164],
[168,160,0,163,182,158,164,156],
[180,183,177,0,172,172,171,154],
[172,176,158,168,0,162,166,161],
[185,164,182,168,178,0,142,153],
[193,184,176,169,174,198,0,189],
[176,176,184,186,179,187,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,187,170,200,189,182,190],
[191,0,174,173,184,181,170,206],
[153,166,0,172,182,169,173,209],
[170,167,168,0,177,161,194,190],
[140,156,158,163,0,160,155,168],
[151,159,171,179,180,0,157,176],
[158,170,167,146,185,183,0,192],
[150,134,131,150,172,164,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,152,177,171,162,166,167],
[176,0,167,194,182,168,178,175],
[188,173,0,183,187,166,171,175],
[163,146,157,0,153,156,151,149],
[169,158,153,187,0,174,168,163],
[178,172,174,184,166,0,166,168],
[174,162,169,189,172,174,0,166],
[173,165,165,191,177,172,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,153,127,166,156,139,158],
[207,0,211,171,166,163,156,169],
[187,129,0,198,200,177,157,199],
[213,169,142,0,208,184,155,158],
[174,174,140,132,0,154,125,116],
[184,177,163,156,186,0,181,178],
[201,184,183,185,215,159,0,187],
[182,171,141,182,224,162,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,179,155,156,162,159,155],
[161,0,176,151,170,160,153,153],
[161,164,0,143,149,158,171,153],
[185,189,197,0,174,176,186,170],
[184,170,191,166,0,163,180,165],
[178,180,182,164,177,0,179,160],
[181,187,169,154,160,161,0,158],
[185,187,187,170,175,180,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,160,145,151,161,157,167],
[167,0,175,168,151,159,164,164],
[180,165,0,150,164,160,150,177],
[195,172,190,0,157,169,175,169],
[189,189,176,183,0,172,164,181],
[179,181,180,171,168,0,174,176],
[183,176,190,165,176,166,0,188],
[173,176,163,171,159,164,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,157,158,160,170,163,175],
[179,0,179,169,171,153,178,168],
[183,161,0,167,167,162,170,183],
[182,171,173,0,171,159,184,182],
[180,169,173,169,0,174,186,192],
[170,187,178,181,166,0,197,183],
[177,162,170,156,154,143,0,169],
[165,172,157,158,148,157,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,160,133,140,147,161,160],
[160,0,162,155,162,158,179,177],
[180,178,0,166,197,174,163,184],
[207,185,174,0,176,158,178,152],
[200,178,143,164,0,171,186,192],
[193,182,166,182,169,0,141,169],
[179,161,177,162,154,199,0,161],
[180,163,156,188,148,171,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,166,175,175,104,165,163],
[204,0,140,176,175,140,190,135],
[174,200,0,186,200,153,165,150],
[165,164,154,0,149,205,192,140],
[165,165,140,191,0,104,181,165],
[236,200,187,135,236,0,225,210],
[175,150,175,148,159,115,0,162],
[177,205,190,200,175,130,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,185,170,186,181,173,185],
[155,0,173,172,176,151,154,161],
[155,167,0,169,182,176,161,172],
[170,168,171,0,171,174,170,187],
[154,164,158,169,0,166,174,177],
[159,189,164,166,174,0,177,175],
[167,186,179,170,166,163,0,180],
[155,179,168,153,163,165,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,192,169,200,199,168,157],
[200,0,234,180,230,240,170,158],
[148,106,0,149,144,150,139,138],
[171,160,191,0,201,203,183,201],
[140,110,196,139,0,182,123,158],
[141,100,190,137,158,0,149,149],
[172,170,201,157,217,191,0,210],
[183,182,202,139,182,191,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,149,156,184,160,196,193],
[148,0,134,156,143,132,152,174],
[191,206,0,162,189,154,185,176],
[184,184,178,0,177,175,164,177],
[156,197,151,163,0,183,173,166],
[180,208,186,165,157,0,200,157],
[144,188,155,176,167,140,0,153],
[147,166,164,163,174,183,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,163,164,164,174,182,154],
[152,0,165,168,175,160,171,160],
[177,175,0,176,166,166,188,170],
[176,172,164,0,163,166,177,159],
[176,165,174,177,0,171,182,164],
[166,180,174,174,169,0,188,156],
[158,169,152,163,158,152,0,154],
[186,180,170,181,176,184,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,169,176,180,179,207,184],
[166,0,175,171,187,179,189,179],
[171,165,0,177,199,187,210,179],
[164,169,163,0,167,159,175,148],
[160,153,141,173,0,178,175,174],
[161,161,153,181,162,0,181,160],
[133,151,130,165,165,159,0,149],
[156,161,161,192,166,180,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,165,174,175,167,168,180],
[157,0,177,168,179,158,172,173],
[175,163,0,165,164,146,157,160],
[166,172,175,0,174,152,164,168],
[165,161,176,166,0,165,156,171],
[173,182,194,188,175,0,164,182],
[172,168,183,176,184,176,0,183],
[160,167,180,172,169,158,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,289,263,261,236,157,262],
[77,0,156,131,130,130,182,181],
[51,184,0,130,181,181,156,155],
[77,209,210,0,183,129,129,181],
[79,210,159,157,0,208,129,261],
[104,210,159,211,132,0,157,184],
[183,158,184,211,211,183,0,209],
[78,159,185,159,79,156,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,153,167,150,184,138,148],
[178,0,176,192,133,152,166,152],
[187,164,0,213,165,180,179,181],
[173,148,127,0,130,153,134,146],
[190,207,175,210,0,163,181,176],
[156,188,160,187,177,0,175,166],
[202,174,161,206,159,165,0,144],
[192,188,159,194,164,174,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,216,155,188,187,186,199],
[155,0,204,187,205,169,199,189],
[124,136,0,141,126,137,152,110],
[185,153,199,0,156,141,183,170],
[152,135,214,184,0,184,197,215],
[153,171,203,199,156,0,199,141],
[154,141,188,157,143,141,0,155],
[141,151,230,170,125,199,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,195,171,151,161,167,161],
[153,0,172,162,133,143,154,158],
[145,168,0,158,151,168,181,162],
[169,178,182,0,155,174,169,176],
[189,207,189,185,0,157,176,178],
[179,197,172,166,183,0,184,183],
[173,186,159,171,164,156,0,176],
[179,182,178,164,162,157,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,164,173,172,179,177,164],
[153,0,161,157,164,183,157,169],
[176,179,0,170,173,189,172,165],
[167,183,170,0,174,188,178,172],
[168,176,167,166,0,184,172,172],
[161,157,151,152,156,0,144,154],
[163,183,168,162,168,196,0,166],
[176,171,175,168,168,186,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,158,161,190,159,149,171],
[179,0,168,155,178,160,182,173],
[182,172,0,170,187,173,165,186],
[179,185,170,0,184,189,174,180],
[150,162,153,156,0,166,166,163],
[181,180,167,151,174,0,175,170],
[191,158,175,166,174,165,0,175],
[169,167,154,160,177,170,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,130,137,162,142,144,128],
[180,0,155,177,170,165,168,162],
[210,185,0,173,177,160,164,160],
[203,163,167,0,166,170,183,172],
[178,170,163,174,0,176,177,167],
[198,175,180,170,164,0,166,145],
[196,172,176,157,163,174,0,147],
[212,178,180,168,173,195,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,166,182,154,165,162,186],
[171,0,157,164,163,188,168,198],
[174,183,0,171,161,175,174,197],
[158,176,169,0,172,172,180,194],
[186,177,179,168,0,173,167,194],
[175,152,165,168,167,0,151,190],
[178,172,166,160,173,189,0,185],
[154,142,143,146,146,150,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,183,186,185,170,181,180],
[155,0,162,166,148,156,165,163],
[157,178,0,171,174,169,180,164],
[154,174,169,0,164,158,171,168],
[155,192,166,176,0,169,176,174],
[170,184,171,182,171,0,183,166],
[159,175,160,169,164,157,0,160],
[160,177,176,172,166,174,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,169,185,180,172,186,179],
[173,0,172,195,161,165,158,181],
[171,168,0,166,168,153,173,171],
[155,145,174,0,163,160,186,173],
[160,179,172,177,0,173,184,186],
[168,175,187,180,167,0,177,171],
[154,182,167,154,156,163,0,166],
[161,159,169,167,154,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,120,155,167,149,153,156],
[207,0,138,155,174,160,176,131],
[220,202,0,215,188,180,172,166],
[185,185,125,0,172,126,136,162],
[173,166,152,168,0,148,163,167],
[191,180,160,214,192,0,201,182],
[187,164,168,204,177,139,0,164],
[184,209,174,178,173,158,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,163,183,178,183,195,174],
[152,0,157,160,153,172,169,165],
[177,183,0,164,189,185,175,185],
[157,180,176,0,174,169,192,175],
[162,187,151,166,0,145,195,166],
[157,168,155,171,195,0,180,174],
[145,171,165,148,145,160,0,170],
[166,175,155,165,174,166,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,160,139,166,141,170,171],
[164,0,168,107,161,163,170,198],
[180,172,0,146,139,151,188,177],
[201,233,194,0,170,194,200,192],
[174,179,201,170,0,188,170,182],
[199,177,189,146,152,0,168,170],
[170,170,152,140,170,172,0,148],
[169,142,163,148,158,170,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,191,184,162,187,195,198],
[131,0,163,143,138,152,167,166],
[149,177,0,192,166,153,170,186],
[156,197,148,0,175,175,186,181],
[178,202,174,165,0,162,177,202],
[153,188,187,165,178,0,157,204],
[145,173,170,154,163,183,0,190],
[142,174,154,159,138,136,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,143,144,145,170,157,152],
[201,0,151,166,152,169,174,167],
[197,189,0,182,168,181,177,175],
[196,174,158,0,180,181,177,165],
[195,188,172,160,0,170,189,162],
[170,171,159,159,170,0,163,154],
[183,166,163,163,151,177,0,171],
[188,173,165,175,178,186,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,150,156,162,154,169,156],
[174,0,173,163,161,183,165,184],
[190,167,0,155,162,162,158,153],
[184,177,185,0,179,165,176,179],
[178,179,178,161,0,173,168,167],
[186,157,178,175,167,0,174,155],
[171,175,182,164,172,166,0,170],
[184,156,187,161,173,185,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,178,165,172,163,164,176],
[175,0,194,166,170,169,183,179],
[162,146,0,162,148,170,153,177],
[175,174,178,0,162,170,171,184],
[168,170,192,178,0,175,167,182],
[177,171,170,170,165,0,158,182],
[176,157,187,169,173,182,0,181],
[164,161,163,156,158,158,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,186,188,164,170,172,175],
[171,0,192,153,160,179,153,164],
[154,148,0,158,161,182,166,154],
[152,187,182,0,157,177,142,189],
[176,180,179,183,0,190,163,178],
[170,161,158,163,150,0,152,161],
[168,187,174,198,177,188,0,178],
[165,176,186,151,162,179,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,167,173,177,196,179,184],
[156,0,158,164,182,176,175,173],
[173,182,0,170,172,191,189,182],
[167,176,170,0,160,193,189,181],
[163,158,168,180,0,191,188,185],
[144,164,149,147,149,0,161,164],
[161,165,151,151,152,179,0,167],
[156,167,158,159,155,176,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,187,174,182,177,188,167],
[163,0,172,175,187,167,180,170],
[153,168,0,199,169,167,168,155],
[166,165,141,0,143,156,175,144],
[158,153,171,197,0,169,169,158],
[163,173,173,184,171,0,164,169],
[152,160,172,165,171,176,0,159],
[173,170,185,196,182,171,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,170,175,193,169,176,180],
[158,0,174,171,207,174,173,173],
[170,166,0,165,178,158,170,179],
[165,169,175,0,177,169,187,189],
[147,133,162,163,0,164,162,160],
[171,166,182,171,176,0,165,189],
[164,167,170,153,178,175,0,173],
[160,167,161,151,180,151,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,179,154,153,163,168,186],
[157,0,174,158,171,144,158,183],
[161,166,0,138,150,129,158,175],
[186,182,202,0,185,163,169,196],
[187,169,190,155,0,159,176,189],
[177,196,211,177,181,0,165,190],
[172,182,182,171,164,175,0,184],
[154,157,165,144,151,150,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,170,163,152,159,156,167],
[158,0,162,146,158,155,160,165],
[170,178,0,167,155,163,156,175],
[177,194,173,0,171,169,180,174],
[188,182,185,169,0,171,169,185],
[181,185,177,171,169,0,159,180],
[184,180,184,160,171,181,0,180],
[173,175,165,166,155,160,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,166,153,121,146,146,140],
[211,0,188,169,171,164,191,185],
[174,152,0,155,104,154,146,165],
[187,171,185,0,148,173,173,143],
[219,169,236,192,0,171,175,190],
[194,176,186,167,169,0,186,157],
[194,149,194,167,165,154,0,159],
[200,155,175,197,150,183,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,135,155,149,141,161,134],
[185,0,168,197,171,173,190,166],
[205,172,0,188,173,163,186,184],
[185,143,152,0,154,138,161,148],
[191,169,167,186,0,158,172,162],
[199,167,177,202,182,0,190,169],
[179,150,154,179,168,150,0,147],
[206,174,156,192,178,171,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,155,148,169,146,172,139],
[181,0,154,167,179,170,181,164],
[185,186,0,169,180,166,185,175],
[192,173,171,0,187,169,198,169],
[171,161,160,153,0,143,185,161],
[194,170,174,171,197,0,188,191],
[168,159,155,142,155,152,0,157],
[201,176,165,171,179,149,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,168,163,150,162,176,167],
[161,0,163,154,157,168,164,157],
[172,177,0,161,153,160,179,163],
[177,186,179,0,175,175,197,166],
[190,183,187,165,0,165,192,181],
[178,172,180,165,175,0,173,170],
[164,176,161,143,148,167,0,159],
[173,183,177,174,159,170,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,178,164,176,172,161,171],
[186,0,163,173,181,195,197,184],
[162,177,0,179,170,182,170,181],
[176,167,161,0,165,181,188,185],
[164,159,170,175,0,196,165,175],
[168,145,158,159,144,0,171,171],
[179,143,170,152,175,169,0,170],
[169,156,159,155,165,169,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,158,165,166,157,201,146],
[170,0,166,178,167,179,190,173],
[182,174,0,150,178,172,201,182],
[175,162,190,0,162,171,189,175],
[174,173,162,178,0,173,184,146],
[183,161,168,169,167,0,201,176],
[139,150,139,151,156,139,0,166],
[194,167,158,165,194,164,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,163,176,179,165,166,182],
[178,0,168,189,178,181,168,178],
[177,172,0,184,182,170,172,175],
[164,151,156,0,168,166,164,172],
[161,162,158,172,0,167,163,171],
[175,159,170,174,173,0,160,187],
[174,172,168,176,177,180,0,184],
[158,162,165,168,169,153,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,161,169,161,182,170,158],
[171,0,163,180,155,185,162,162],
[179,177,0,198,180,198,168,176],
[171,160,142,0,163,178,153,170],
[179,185,160,177,0,190,165,173],
[158,155,142,162,150,0,156,161],
[170,178,172,187,175,184,0,161],
[182,178,164,170,167,179,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,152,168,154,164,158,179],
[180,0,176,171,172,169,158,184],
[188,164,0,182,157,173,167,187],
[172,169,158,0,149,150,149,170],
[186,168,183,191,0,157,173,181],
[176,171,167,190,183,0,176,181],
[182,182,173,191,167,164,0,191],
[161,156,153,170,159,159,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,184,183,189,187,167,188],
[168,0,174,176,181,185,166,186],
[156,166,0,171,189,176,175,179],
[157,164,169,0,171,180,154,170],
[151,159,151,169,0,177,144,171],
[153,155,164,160,163,0,158,171],
[173,174,165,186,196,182,0,189],
[152,154,161,170,169,169,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,162,158,152,155,171,158],
[186,0,178,164,172,171,174,177],
[178,162,0,159,167,168,170,161],
[182,176,181,0,156,168,174,155],
[188,168,173,184,0,168,176,165],
[185,169,172,172,172,0,176,163],
[169,166,170,166,164,164,0,157],
[182,163,179,185,175,177,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,167,215,165,179,196,163],
[152,0,167,200,180,168,161,156],
[173,173,0,189,172,161,174,153],
[125,140,151,0,157,143,166,131],
[175,160,168,183,0,159,194,153],
[161,172,179,197,181,0,167,163],
[144,179,166,174,146,173,0,171],
[177,184,187,209,187,177,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,178,180,169,157,120,191],
[207,0,198,210,197,155,165,243],
[162,142,0,151,130,119,142,212],
[160,130,189,0,154,181,166,233],
[171,143,210,186,0,144,131,198],
[183,185,221,159,196,0,188,219],
[220,175,198,174,209,152,0,231],
[149,97,128,107,142,121,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,155,211,161,193,180,176],
[148,0,138,156,169,180,144,143],
[185,202,0,198,176,204,170,191],
[129,184,142,0,164,174,166,151],
[179,171,164,176,0,180,152,168],
[147,160,136,166,160,0,160,138],
[160,196,170,174,188,180,0,178],
[164,197,149,189,172,202,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,183,215,147,212,195,155],
[173,0,147,203,156,190,175,149],
[157,193,0,216,160,173,163,183],
[125,137,124,0,135,172,168,150],
[193,184,180,205,0,183,172,166],
[128,150,167,168,157,0,185,160],
[145,165,177,172,168,155,0,192],
[185,191,157,190,174,180,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,159,181,168,169,157,171],
[164,0,141,152,148,158,163,168],
[181,199,0,190,175,168,162,155],
[159,188,150,0,161,160,159,158],
[172,192,165,179,0,172,174,172],
[171,182,172,180,168,0,173,176],
[183,177,178,181,166,167,0,158],
[169,172,185,182,168,164,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,165,178,178,169,176,164],
[164,0,168,180,169,159,160,151],
[175,172,0,179,167,149,171,143],
[162,160,161,0,187,161,161,159],
[162,171,173,153,0,159,149,153],
[171,181,191,179,181,0,190,170],
[164,180,169,179,191,150,0,166],
[176,189,197,181,187,170,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,162,178,173,167,175,166],
[171,0,176,174,172,183,176,170],
[178,164,0,165,169,175,166,166],
[162,166,175,0,170,170,168,161],
[167,168,171,170,0,170,165,166],
[173,157,165,170,170,0,170,151],
[165,164,174,172,175,170,0,155],
[174,170,174,179,174,189,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,182,177,171,168,172,181],
[138,0,154,154,154,147,151,157],
[158,186,0,152,157,163,159,158],
[163,186,188,0,178,167,178,171],
[169,186,183,162,0,161,167,166],
[172,193,177,173,179,0,170,169],
[168,189,181,162,173,170,0,158],
[159,183,182,169,174,171,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,182,166,162,152,170,160],
[164,0,180,179,159,143,189,171],
[158,160,0,174,160,144,180,142],
[174,161,166,0,159,135,147,141],
[178,181,180,181,0,172,164,171],
[188,197,196,205,168,0,189,174],
[170,151,160,193,176,151,0,169],
[180,169,198,199,169,166,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,203,179,166,170,170,166],
[195,0,182,171,197,177,158,171],
[137,158,0,157,155,157,158,146],
[161,169,183,0,181,177,196,171],
[174,143,185,159,0,155,176,174],
[170,163,183,163,185,0,178,179],
[170,182,182,144,164,162,0,171],
[174,169,194,169,166,161,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,180,180,173,179,179,184],
[173,0,172,166,154,174,188,169],
[160,168,0,158,158,171,173,162],
[160,174,182,0,179,194,189,175],
[167,186,182,161,0,162,174,168],
[161,166,169,146,178,0,163,154],
[161,152,167,151,166,177,0,161],
[156,171,178,165,172,186,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,160,157,171,179,172,161],
[175,0,172,169,177,181,196,174],
[180,168,0,175,167,168,172,168],
[183,171,165,0,171,166,182,171],
[169,163,173,169,0,173,188,163],
[161,159,172,174,167,0,169,162],
[168,144,168,158,152,171,0,152],
[179,166,172,169,177,178,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,168,171,199,177,159,170],
[142,0,164,156,188,166,169,166],
[172,176,0,166,180,167,154,176],
[169,184,174,0,189,190,154,174],
[141,152,160,151,0,143,140,129],
[163,174,173,150,197,0,154,180],
[181,171,186,186,200,186,0,164],
[170,174,164,166,211,160,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,170,146,159,160,137,156],
[196,0,195,180,205,183,186,168],
[170,145,0,160,162,141,148,148],
[194,160,180,0,193,185,161,176],
[181,135,178,147,0,164,158,146],
[180,157,199,155,176,0,174,159],
[203,154,192,179,182,166,0,177],
[184,172,192,164,194,181,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,91,135,138,134,146,113],
[257,0,165,190,153,165,203,222],
[249,175,0,192,167,203,205,159],
[205,150,148,0,158,158,227,147],
[202,187,173,182,0,168,206,138],
[206,175,137,182,172,0,217,148],
[194,137,135,113,134,123,0,145],
[227,118,181,193,202,192,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,246,216,184,151,185,184],
[186,0,185,125,184,121,124,154],
[94,155,0,64,125,121,124,125],
[124,215,276,0,182,213,214,217],
[156,156,215,158,0,213,217,310],
[189,219,219,127,127,0,127,189],
[155,216,216,126,123,213,0,215],
[156,186,215,123,30,151,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,172,154,172,199,211,166],
[184,0,169,165,200,238,223,170],
[168,171,0,123,157,139,194,180],
[186,175,217,0,231,227,224,145],
[168,140,183,109,0,194,193,167],
[141,102,201,113,146,0,163,140],
[129,117,146,116,147,177,0,129],
[174,170,160,195,173,200,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,183,169,178,187,187,171],
[160,0,166,189,173,173,163,166],
[157,174,0,165,181,173,176,146],
[171,151,175,0,168,153,169,145],
[162,167,159,172,0,170,169,165],
[153,167,167,187,170,0,156,145],
[153,177,164,171,171,184,0,148],
[169,174,194,195,175,195,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,125,185,93,157,139,107],
[248,0,171,215,123,203,140,142],
[215,169,0,122,139,171,124,136],
[155,125,218,0,111,157,158,123],
[247,217,201,229,0,204,188,170],
[183,137,169,183,136,0,138,170],
[201,200,216,182,152,202,0,106],
[233,198,204,217,170,170,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,169,177,178,170,171,169],
[175,0,163,178,192,174,155,164],
[171,177,0,186,181,174,167,181],
[163,162,154,0,165,160,154,158],
[162,148,159,175,0,153,150,162],
[170,166,166,180,187,0,161,167],
[169,185,173,186,190,179,0,178],
[171,176,159,182,178,173,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,169,179,173,155,165,175],
[170,0,175,164,182,171,170,149],
[171,165,0,180,170,155,170,160],
[161,176,160,0,167,151,171,147],
[167,158,170,173,0,151,161,148],
[185,169,185,189,189,0,175,167],
[175,170,170,169,179,165,0,159],
[165,191,180,193,192,173,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,187,184,172,170,175,182],
[183,0,203,190,190,158,184,190],
[153,137,0,183,158,145,137,159],
[156,150,157,0,154,146,155,143],
[168,150,182,186,0,149,162,154],
[170,182,195,194,191,0,175,168],
[165,156,203,185,178,165,0,159],
[158,150,181,197,186,172,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,167,179,185,171,183,163],
[159,0,158,166,179,162,166,145],
[173,182,0,168,195,185,175,170],
[161,174,172,0,180,164,181,162],
[155,161,145,160,0,150,155,151],
[169,178,155,176,190,0,184,160],
[157,174,165,159,185,156,0,167],
[177,195,170,178,189,180,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,171,175,158,164,161,168],
[182,0,162,169,151,147,165,169],
[169,178,0,175,142,157,175,176],
[165,171,165,0,161,153,155,174],
[182,189,198,179,0,160,181,191],
[176,193,183,187,180,0,166,192],
[179,175,165,185,159,174,0,191],
[172,171,164,166,149,148,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,175,194,179,186,178,180],
[182,0,169,165,177,171,186,184],
[165,171,0,156,176,191,175,162],
[146,175,184,0,181,196,203,184],
[161,163,164,159,0,184,165,172],
[154,169,149,144,156,0,168,173],
[162,154,165,137,175,172,0,172],
[160,156,178,156,168,167,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,160,175,180,135,170,162],
[164,0,150,190,171,165,172,170],
[180,190,0,162,173,178,177,182],
[165,150,178,0,156,152,162,169],
[160,169,167,184,0,162,175,168],
[205,175,162,188,178,0,175,169],
[170,168,163,178,165,165,0,170],
[178,170,158,171,172,171,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,182,172,168,170,184,165],
[156,0,180,149,168,136,162,173],
[158,160,0,134,154,129,163,160],
[168,191,206,0,172,178,177,184],
[172,172,186,168,0,128,150,176],
[170,204,211,162,212,0,177,188],
[156,178,177,163,190,163,0,180],
[175,167,180,156,164,152,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,195,162,153,149,166,160],
[177,0,189,160,172,178,171,160],
[145,151,0,152,159,146,150,161],
[178,180,188,0,173,155,174,168],
[187,168,181,167,0,176,184,172],
[191,162,194,185,164,0,172,182],
[174,169,190,166,156,168,0,170],
[180,180,179,172,168,158,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,172,178,179,169,173,176],
[175,0,170,177,167,188,178,168],
[168,170,0,182,180,172,199,194],
[162,163,158,0,158,164,175,169],
[161,173,160,182,0,175,193,182],
[171,152,168,176,165,0,176,175],
[167,162,141,165,147,164,0,152],
[164,172,146,171,158,165,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,174,183,175,176,184,164],
[143,0,156,163,151,148,162,148],
[166,184,0,165,165,166,178,165],
[157,177,175,0,171,160,178,170],
[165,189,175,169,0,178,180,159],
[164,192,174,180,162,0,179,160],
[156,178,162,162,160,161,0,157],
[176,192,175,170,181,180,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,172,166,164,165,172,167],
[152,0,161,161,161,166,156,159],
[168,179,0,172,162,182,169,170],
[174,179,168,0,168,173,160,168],
[176,179,178,172,0,173,162,159],
[175,174,158,167,167,0,161,164],
[168,184,171,180,178,179,0,167],
[173,181,170,172,181,176,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,164,177,178,176,166,164],
[171,0,178,162,171,160,166,172],
[176,162,0,188,158,152,167,158],
[163,178,152,0,151,163,168,165],
[162,169,182,189,0,168,160,162],
[164,180,188,177,172,0,168,171],
[174,174,173,172,180,172,0,158],
[176,168,182,175,178,169,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,179,211,167,185,201,156],
[176,0,153,154,149,165,172,147],
[161,187,0,145,177,176,183,150],
[129,186,195,0,164,170,193,134],
[173,191,163,176,0,184,162,174],
[155,175,164,170,156,0,195,159],
[139,168,157,147,178,145,0,162],
[184,193,190,206,166,181,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,216,237,142,144,164,170],
[151,0,172,166,143,126,120,137],
[124,168,0,227,147,171,149,142],
[103,174,113,0,123,131,128,103],
[198,197,193,217,0,167,150,133],
[196,214,169,209,173,0,145,141],
[176,220,191,212,190,195,0,154],
[170,203,198,237,207,199,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,164,158,181,186,185,184],
[154,0,173,169,156,154,163,182],
[176,167,0,153,154,151,156,161],
[182,171,187,0,185,169,162,171],
[159,184,186,155,0,177,170,193],
[154,186,189,171,163,0,180,201],
[155,177,184,178,170,160,0,163],
[156,158,179,169,147,139,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,175,204,179,177,178,170],
[172,0,152,181,152,167,168,168],
[165,188,0,184,183,197,185,194],
[136,159,156,0,168,174,179,177],
[161,188,157,172,0,161,173,169],
[163,173,143,166,179,0,177,156],
[162,172,155,161,167,163,0,180],
[170,172,146,163,171,184,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,171,156,154,180,187,162],
[164,0,165,155,142,173,182,164],
[169,175,0,155,148,182,178,158],
[184,185,185,0,179,191,166,180],
[186,198,192,161,0,190,189,186],
[160,167,158,149,150,0,158,175],
[153,158,162,174,151,182,0,162],
[178,176,182,160,154,165,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,183,181,166,174,180,182],
[167,0,159,171,156,171,157,179],
[157,181,0,184,164,167,152,165],
[159,169,156,0,152,165,156,148],
[174,184,176,188,0,183,165,173],
[166,169,173,175,157,0,161,171],
[160,183,188,184,175,179,0,169],
[158,161,175,192,167,169,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,165,167,173,153,171,154],
[174,0,179,189,185,178,180,170],
[175,161,0,174,192,168,181,167],
[173,151,166,0,188,157,159,168],
[167,155,148,152,0,161,163,138],
[187,162,172,183,179,0,188,181],
[169,160,159,181,177,152,0,172],
[186,170,173,172,202,159,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,169,253,253,253,211,126],
[172,0,130,213,171,172,172,171],
[171,210,0,210,167,212,169,128],
[87,127,130,0,128,173,173,87],
[87,169,173,212,0,128,215,87],
[87,168,128,167,212,0,172,128],
[129,168,171,167,125,168,0,170],
[214,169,212,253,253,212,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,164,176,170,164,173,176],
[182,0,173,173,189,153,158,194],
[176,167,0,165,164,168,178,197],
[164,167,175,0,150,141,170,181],
[170,151,176,190,0,177,167,173],
[176,187,172,199,163,0,187,165],
[167,182,162,170,173,153,0,182],
[164,146,143,159,167,175,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,172,171,171,176,160,169],
[189,0,195,204,189,176,161,187],
[168,145,0,150,155,141,158,157],
[169,136,190,0,166,143,153,167],
[169,151,185,174,0,151,177,188],
[164,164,199,197,189,0,211,210],
[180,179,182,187,163,129,0,156],
[171,153,183,173,152,130,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,179,170,159,171,164,165],
[156,0,163,161,153,161,157,165],
[161,177,0,156,157,164,164,162],
[170,179,184,0,173,172,150,177],
[181,187,183,167,0,178,170,182],
[169,179,176,168,162,0,159,162],
[176,183,176,190,170,181,0,184],
[175,175,178,163,158,178,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,180,173,153,180,169,163],
[161,0,170,162,162,167,168,169],
[160,170,0,160,147,154,170,166],
[167,178,180,0,170,168,171,172],
[187,178,193,170,0,176,186,185],
[160,173,186,172,164,0,174,167],
[171,172,170,169,154,166,0,169],
[177,171,174,168,155,173,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,176,170,159,157,185,139],
[176,0,177,176,182,162,198,166],
[164,163,0,147,192,159,174,152],
[170,164,193,0,177,174,205,175],
[181,158,148,163,0,152,161,150],
[183,178,181,166,188,0,205,170],
[155,142,166,135,179,135,0,144],
[201,174,188,165,190,170,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,186,162,190,178,183,205],
[158,0,167,196,196,181,182,215],
[154,173,0,149,142,152,159,212],
[178,144,191,0,161,179,165,215],
[150,144,198,179,0,167,148,195],
[162,159,188,161,173,0,162,195],
[157,158,181,175,192,178,0,206],
[135,125,128,125,145,145,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,161,162,175,167,162,173],
[174,0,172,168,159,175,169,167],
[179,168,0,171,156,173,155,179],
[178,172,169,0,182,181,179,181],
[165,181,184,158,0,164,179,166],
[173,165,167,159,176,0,172,165],
[178,171,185,161,161,168,0,174],
[167,173,161,159,174,175,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,150,162,172,170,162,164],
[180,0,173,174,169,172,173,167],
[190,167,0,163,175,181,173,165],
[178,166,177,0,170,172,173,171],
[168,171,165,170,0,177,167,173],
[170,168,159,168,163,0,182,170],
[178,167,167,167,173,158,0,167],
[176,173,175,169,167,170,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,104,134,69,35,69,0],
[305,0,237,238,170,169,236,203],
[236,103,0,203,137,169,136,203],
[206,102,137,0,137,102,136,101],
[271,170,203,203,0,203,100,202],
[305,171,171,238,137,0,169,205],
[271,104,204,204,240,171,0,205],
[340,137,137,239,138,135,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,146,160,126,154,214,202],
[226,0,167,177,195,174,212,188],
[194,173,0,157,161,121,167,184],
[180,163,183,0,157,143,192,193],
[214,145,179,183,0,189,190,236],
[186,166,219,197,151,0,174,208],
[126,128,173,148,150,166,0,193],
[138,152,156,147,104,132,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,164,175,152,166,178,156],
[170,0,196,198,179,189,190,168],
[176,144,0,169,162,153,177,142],
[165,142,171,0,166,167,173,158],
[188,161,178,174,0,173,208,176],
[174,151,187,173,167,0,186,157],
[162,150,163,167,132,154,0,130],
[184,172,198,182,164,183,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,188,167,172,217,227,205],
[146,0,172,155,185,200,222,169],
[152,168,0,144,171,191,196,200],
[173,185,196,0,159,211,227,212],
[168,155,169,181,0,140,184,166],
[123,140,149,129,200,0,162,121],
[113,118,144,113,156,178,0,153],
[135,171,140,128,174,219,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,174,162,169,171,178,171],
[170,0,189,172,166,183,177,181],
[166,151,0,163,153,161,161,161],
[178,168,177,0,169,196,174,180],
[171,174,187,171,0,190,168,191],
[169,157,179,144,150,0,163,166],
[162,163,179,166,172,177,0,163],
[169,159,179,160,149,174,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,181,221,178,195,120,160],
[165,0,177,203,186,164,160,146],
[159,163,0,205,134,176,153,181],
[119,137,135,0,125,138,136,139],
[162,154,206,215,0,176,185,179],
[145,176,164,202,164,0,166,160],
[220,180,187,204,155,174,0,165],
[180,194,159,201,161,180,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,160,169,167,176,171,176],
[176,0,171,178,178,162,164,165],
[180,169,0,183,173,182,174,178],
[171,162,157,0,159,172,176,173],
[173,162,167,181,0,165,168,184],
[164,178,158,168,175,0,175,182],
[169,176,166,164,172,165,0,176],
[164,175,162,167,156,158,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,159,165,153,157,180,147],
[185,0,181,207,169,195,189,166],
[181,159,0,190,155,149,167,150],
[175,133,150,0,154,154,152,157],
[187,171,185,186,0,168,180,174],
[183,145,191,186,172,0,186,166],
[160,151,173,188,160,154,0,157],
[193,174,190,183,166,174,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,163,157,180,172,194,210],
[149,0,158,164,175,170,204,204],
[177,182,0,153,151,157,167,207],
[183,176,187,0,168,181,218,190],
[160,165,189,172,0,158,190,193],
[168,170,183,159,182,0,180,203],
[146,136,173,122,150,160,0,181],
[130,136,133,150,147,137,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,182,167,180,168,164,192],
[171,0,164,179,183,167,166,181],
[158,176,0,169,179,162,172,173],
[173,161,171,0,177,168,163,178],
[160,157,161,163,0,154,163,162],
[172,173,178,172,186,0,165,181],
[176,174,168,177,177,175,0,187],
[148,159,167,162,178,159,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,178,174,180,182,186,176],
[171,0,172,187,174,187,194,165],
[162,168,0,184,173,184,189,170],
[166,153,156,0,170,172,171,167],
[160,166,167,170,0,166,185,169],
[158,153,156,168,174,0,177,146],
[154,146,151,169,155,163,0,165],
[164,175,170,173,171,194,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,167,178,165,165,175,170],
[172,0,165,176,156,159,171,171],
[173,175,0,179,178,178,175,169],
[162,164,161,0,172,170,169,166],
[175,184,162,168,0,168,162,172],
[175,181,162,170,172,0,174,161],
[165,169,165,171,178,166,0,176],
[170,169,171,174,168,179,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,175,159,157,168,167,166],
[159,0,160,148,168,163,167,158],
[165,180,0,156,161,160,163,173],
[181,192,184,0,184,163,182,187],
[183,172,179,156,0,159,166,169],
[172,177,180,177,181,0,176,170],
[173,173,177,158,174,164,0,163],
[174,182,167,153,171,170,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,112,112,169,168,169,112],
[172,0,227,115,284,283,284,284],
[228,113,0,171,225,285,170,283],
[228,225,169,0,225,225,282,226],
[171,56,115,115,0,171,227,172],
[172,57,55,115,169,0,114,170],
[171,56,170,58,113,226,0,113],
[228,56,57,114,168,170,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,157,181,187,150,193,173],
[144,0,175,173,184,134,154,140],
[183,165,0,215,177,135,172,144],
[159,167,125,0,187,128,192,110],
[153,156,163,153,0,132,137,112],
[190,206,205,212,208,0,138,166],
[147,186,168,148,203,202,0,156],
[167,200,196,230,228,174,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,168,161,171,172,158,165],
[191,0,177,177,169,188,172,163],
[172,163,0,152,178,169,151,175],
[179,163,188,0,160,170,161,174],
[169,171,162,180,0,183,151,171],
[168,152,171,170,157,0,160,161],
[182,168,189,179,189,180,0,186],
[175,177,165,166,169,179,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,165,158,179,207,160,197],
[183,0,179,171,161,213,186,205],
[175,161,0,153,165,200,169,185],
[182,169,187,0,187,215,171,201],
[161,179,175,153,0,188,190,181],
[133,127,140,125,152,0,148,151],
[180,154,171,169,150,192,0,185],
[143,135,155,139,159,189,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,169,180,171,163,175,179],
[166,0,175,172,171,174,181,183],
[171,165,0,174,152,161,150,174],
[160,168,166,0,164,182,174,172],
[169,169,188,176,0,177,179,186],
[177,166,179,158,163,0,173,178],
[165,159,190,166,161,167,0,170],
[161,157,166,168,154,162,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,162,170,176,165,178,148],
[170,0,179,168,162,187,164,155],
[178,161,0,172,182,183,180,166],
[170,172,168,0,169,165,160,168],
[164,178,158,171,0,164,168,156],
[175,153,157,175,176,0,173,177],
[162,176,160,180,172,167,0,156],
[192,185,174,172,184,163,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,153,164,152,160,171,149],
[195,0,187,182,169,175,184,191],
[187,153,0,179,174,172,172,172],
[176,158,161,0,169,153,181,167],
[188,171,166,171,0,170,173,187],
[180,165,168,187,170,0,176,162],
[169,156,168,159,167,164,0,163],
[191,149,168,173,153,178,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,176,166,184,178,176,170],
[166,0,164,159,170,167,168,161],
[164,176,0,162,182,167,155,160],
[174,181,178,0,194,176,184,169],
[156,170,158,146,0,161,165,164],
[162,173,173,164,179,0,178,175],
[164,172,185,156,175,162,0,165],
[170,179,180,171,176,165,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,155,178,160,196,178,171],
[164,0,154,177,174,165,162,143],
[185,186,0,192,202,201,195,170],
[162,163,148,0,182,175,169,144],
[180,166,138,158,0,174,177,140],
[144,175,139,165,166,0,169,149],
[162,178,145,171,163,171,0,150],
[169,197,170,196,200,191,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,186,166,174,179,182,181],
[160,0,185,185,179,173,168,176],
[154,155,0,174,178,161,176,162],
[174,155,166,0,169,172,177,159],
[166,161,162,171,0,155,179,157],
[161,167,179,168,185,0,190,175],
[158,172,164,163,161,150,0,158],
[159,164,178,181,183,165,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,164,190,161,196,164,181],
[170,0,160,179,166,194,162,160],
[176,180,0,179,166,190,165,184],
[150,161,161,0,161,193,173,166],
[179,174,174,179,0,200,162,174],
[144,146,150,147,140,0,152,153],
[176,178,175,167,178,188,0,182],
[159,180,156,174,166,187,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,167,170,170,169,171,181],
[163,0,163,172,167,173,170,171],
[173,177,0,170,172,169,166,168],
[170,168,170,0,166,171,163,181],
[170,173,168,174,0,167,167,172],
[171,167,171,169,173,0,166,170],
[169,170,174,177,173,174,0,188],
[159,169,172,159,168,170,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,160,168,170,168,144,176],
[189,0,180,160,171,172,157,189],
[180,160,0,173,181,179,164,187],
[172,180,167,0,169,180,178,190],
[170,169,159,171,0,155,166,188],
[172,168,161,160,185,0,153,194],
[196,183,176,162,174,187,0,206],
[164,151,153,150,152,146,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,168,183,172,160,158,170],
[176,0,176,199,168,176,169,172],
[172,164,0,173,152,157,157,169],
[157,141,167,0,164,143,144,153],
[168,172,188,176,0,153,178,164],
[180,164,183,197,187,0,172,166],
[182,171,183,196,162,168,0,177],
[170,168,171,187,176,174,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,187,166,174,185,203,203],
[184,0,200,160,204,169,187,201],
[153,140,0,172,188,138,151,224],
[174,180,168,0,203,168,178,184],
[166,136,152,137,0,136,175,153],
[155,171,202,172,204,0,166,209],
[137,153,189,162,165,174,0,168],
[137,139,116,156,187,131,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,147,148,140,173,152,150],
[178,0,172,173,159,175,169,167],
[193,168,0,175,152,178,175,170],
[192,167,165,0,163,174,180,179],
[200,181,188,177,0,180,153,188],
[167,165,162,166,160,0,164,161],
[188,171,165,160,187,176,0,182],
[190,173,170,161,152,179,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,160,171,174,169,169,194],
[168,0,164,167,170,170,178,165],
[180,176,0,171,178,174,170,167],
[169,173,169,0,173,177,183,166],
[166,170,162,167,0,173,181,167],
[171,170,166,163,167,0,164,182],
[171,162,170,157,159,176,0,177],
[146,175,173,174,173,158,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,187,187,188,94,157,123],
[190,0,159,188,158,158,158,154],
[153,181,0,216,93,121,184,182],
[153,152,124,0,93,122,156,153],
[152,182,247,247,0,152,278,121],
[246,182,219,218,188,0,250,121],
[183,182,156,184,62,90,0,90],
[217,186,158,187,219,219,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,161,152,141,141,141,126],
[181,0,170,137,148,159,164,156],
[179,170,0,162,152,148,159,138],
[188,203,178,0,182,170,196,170],
[199,192,188,158,0,159,175,170],
[199,181,192,170,181,0,200,155],
[199,176,181,144,165,140,0,176],
[214,184,202,170,170,185,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,151,153,171,175,162,166],
[172,0,154,152,167,180,169,126],
[189,186,0,165,193,190,155,180],
[187,188,175,0,179,189,185,164],
[169,173,147,161,0,165,149,153],
[165,160,150,151,175,0,161,136],
[178,171,185,155,191,179,0,172],
[174,214,160,176,187,204,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,158,153,181,164,165,181],
[176,0,176,173,192,177,166,176],
[182,164,0,169,171,166,170,178],
[187,167,171,0,189,172,170,186],
[159,148,169,151,0,155,146,178],
[176,163,174,168,185,0,177,180],
[175,174,170,170,194,163,0,181],
[159,164,162,154,162,160,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,133,123,189,165,174,179],
[149,0,173,175,199,175,215,203],
[207,167,0,138,213,189,178,195],
[217,165,202,0,227,204,230,234],
[151,141,127,113,0,152,179,118],
[175,165,151,136,188,0,176,163],
[166,125,162,110,161,164,0,154],
[161,137,145,106,222,177,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,175,181,174,169,170,186],
[169,0,185,176,179,174,170,165],
[165,155,0,177,180,164,164,171],
[159,164,163,0,171,160,164,167],
[166,161,160,169,0,158,174,154],
[171,166,176,180,182,0,171,171],
[170,170,176,176,166,169,0,186],
[154,175,169,173,186,169,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,182,182,164,159,175,190],
[170,0,173,159,168,170,172,169],
[158,167,0,161,142,155,170,168],
[158,181,179,0,145,146,175,162],
[176,172,198,195,0,167,202,172],
[181,170,185,194,173,0,191,176],
[165,168,170,165,138,149,0,164],
[150,171,172,178,168,164,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,193,170,165,174,196,161],
[139,0,177,171,190,168,203,157],
[147,163,0,154,154,150,172,131],
[170,169,186,0,175,175,214,173],
[175,150,186,165,0,157,228,162],
[166,172,190,165,183,0,208,140],
[144,137,168,126,112,132,0,139],
[179,183,209,167,178,200,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,166,165,185,177,175,174],
[173,0,172,170,180,179,182,170],
[174,168,0,169,178,181,175,160],
[175,170,171,0,182,189,187,169],
[155,160,162,158,0,164,187,166],
[163,161,159,151,176,0,179,154],
[165,158,165,153,153,161,0,158],
[166,170,180,171,174,186,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,172,167,170,159,168,174],
[167,0,159,174,175,165,177,176],
[168,181,0,172,171,168,191,174],
[173,166,168,0,171,172,173,163],
[170,165,169,169,0,159,181,174],
[181,175,172,168,181,0,179,190],
[172,163,149,167,159,161,0,172],
[166,164,166,177,166,150,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,173,164,172,170,171,174],
[165,0,152,174,176,168,168,171],
[167,188,0,161,173,173,179,173],
[176,166,179,0,175,161,183,172],
[168,164,167,165,0,157,157,173],
[170,172,167,179,183,0,178,185],
[169,172,161,157,183,162,0,175],
[166,169,167,168,167,155,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,178,162,179,177,189,177],
[146,0,169,173,160,148,173,160],
[162,171,0,160,179,165,177,159],
[178,167,180,0,207,181,180,165],
[161,180,161,133,0,170,172,155],
[163,192,175,159,170,0,182,159],
[151,167,163,160,168,158,0,153],
[163,180,181,175,185,181,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,161,157,183,163,153,164],
[166,0,163,169,183,148,167,160],
[179,177,0,164,189,161,167,182],
[183,171,176,0,187,164,171,168],
[157,157,151,153,0,130,139,143],
[177,192,179,176,210,0,186,167],
[187,173,173,169,201,154,0,171],
[176,180,158,172,197,173,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,181,234,172,167,182,192],
[162,0,159,179,148,145,157,187],
[159,181,0,184,160,161,188,189],
[106,161,156,0,138,152,171,167],
[168,192,180,202,0,176,206,196],
[173,195,179,188,164,0,168,171],
[158,183,152,169,134,172,0,191],
[148,153,151,173,144,169,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,161,152,169,170,177,153],
[187,0,194,180,175,186,143,187],
[179,146,0,184,168,177,153,159],
[188,160,156,0,185,175,187,169],
[171,165,172,155,0,164,166,165],
[170,154,163,165,176,0,178,158],
[163,197,187,153,174,162,0,170],
[187,153,181,171,175,182,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,178,149,207,188,165,144],
[167,0,200,155,211,184,184,158],
[162,140,0,164,192,146,153,132],
[191,185,176,0,202,172,170,163],
[133,129,148,138,0,123,136,145],
[152,156,194,168,217,0,161,141],
[175,156,187,170,204,179,0,172],
[196,182,208,177,195,199,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,155,165,161,175,163,168],
[185,0,174,164,168,168,160,161],
[185,166,0,184,179,167,166,187],
[175,176,156,0,168,163,163,176],
[179,172,161,172,0,163,163,169],
[165,172,173,177,177,0,172,178],
[177,180,174,177,177,168,0,173],
[172,179,153,164,171,162,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,193,156,188,182,153,144],
[208,0,194,154,212,178,178,168],
[147,146,0,107,190,158,131,145],
[184,186,233,0,168,142,141,171],
[152,128,150,172,0,159,143,124],
[158,162,182,198,181,0,130,174],
[187,162,209,199,197,210,0,187],
[196,172,195,169,216,166,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,139,161,163,151,161,163],
[192,0,138,145,182,162,162,168],
[201,202,0,186,192,172,164,188],
[179,195,154,0,176,171,161,171],
[177,158,148,164,0,166,156,151],
[189,178,168,169,174,0,156,171],
[179,178,176,179,184,184,0,165],
[177,172,152,169,189,169,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,98,147,149,144,146,129],
[144,0,115,147,131,99,98,177],
[242,225,0,192,195,177,193,145],
[193,193,148,0,133,176,145,162],
[191,209,145,207,0,125,125,145],
[196,241,163,164,215,0,179,178],
[194,242,147,195,215,161,0,193],
[211,163,195,178,195,162,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,177,183,168,177,168,158],
[167,0,177,181,162,181,174,170],
[163,163,0,168,166,175,173,159],
[157,159,172,0,160,167,183,169],
[172,178,174,180,0,183,157,160],
[163,159,165,173,157,0,155,167],
[172,166,167,157,183,185,0,167],
[182,170,181,171,180,173,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,171,178,169,162,155,178],
[178,0,153,182,187,183,188,178],
[169,187,0,188,191,164,179,178],
[162,158,152,0,166,157,181,174],
[171,153,149,174,0,149,182,164],
[178,157,176,183,191,0,190,190],
[185,152,161,159,158,150,0,168],
[162,162,162,166,176,150,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,96,120,144,119,167,124],
[196,0,195,121,194,146,219,221],
[244,145,0,216,147,171,220,219],
[220,219,124,0,171,145,246,126],
[196,146,193,169,0,193,217,97],
[221,194,169,195,147,0,246,171],
[173,121,120,94,123,94,0,75],
[216,119,121,214,243,169,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,127,169,170,211,213,170],
[170,0,43,85,86,213,172,42],
[213,297,0,169,128,213,214,169],
[171,255,171,0,171,128,171,86],
[170,254,212,169,0,254,212,126],
[129,127,127,212,86,0,170,127],
[127,168,126,169,128,170,0,126],
[170,298,171,254,214,213,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,144,166,135,154,141,148],
[197,0,199,183,151,173,165,176],
[196,141,0,179,178,166,155,174],
[174,157,161,0,157,159,149,167],
[205,189,162,183,0,181,171,156],
[186,167,174,181,159,0,155,158],
[199,175,185,191,169,185,0,180],
[192,164,166,173,184,182,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,174,139,163,182,173,162],
[165,0,145,156,156,186,164,165],
[166,195,0,149,182,184,175,171],
[201,184,191,0,184,195,168,180],
[177,184,158,156,0,179,165,172],
[158,154,156,145,161,0,186,150],
[167,176,165,172,175,154,0,169],
[178,175,169,160,168,190,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,167,165,167,167,172,166],
[173,0,157,168,162,165,173,170],
[173,183,0,174,173,173,178,161],
[175,172,166,0,175,180,176,170],
[173,178,167,165,0,167,170,179],
[173,175,167,160,173,0,169,168],
[168,167,162,164,170,171,0,160],
[174,170,179,170,161,172,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,191,162,188,184,179,175],
[143,0,175,151,132,163,173,153],
[149,165,0,161,138,184,169,134],
[178,189,179,0,158,182,185,175],
[152,208,202,182,0,185,192,179],
[156,177,156,158,155,0,156,148],
[161,167,171,155,148,184,0,160],
[165,187,206,165,161,192,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,171,184,151,181,170,172],
[182,0,177,188,159,211,176,164],
[169,163,0,159,163,180,178,159],
[156,152,181,0,166,184,168,150],
[189,181,177,174,0,194,171,166],
[159,129,160,156,146,0,155,139],
[170,164,162,172,169,185,0,161],
[168,176,181,190,174,201,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,177,181,163,191,147,145],
[188,0,214,193,174,185,180,155],
[163,126,0,162,170,206,137,140],
[159,147,178,0,190,187,151,176],
[177,166,170,150,0,209,210,173],
[149,155,134,153,131,0,154,154],
[193,160,203,189,130,186,0,174],
[195,185,200,164,167,186,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,178,162,173,183,193,170],
[171,0,157,168,162,164,175,165],
[162,183,0,174,161,165,172,152],
[178,172,166,0,162,140,181,168],
[167,178,179,178,0,167,185,147],
[157,176,175,200,173,0,196,162],
[147,165,168,159,155,144,0,143],
[170,175,188,172,193,178,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,186,174,177,191,182,173],
[182,0,176,187,176,209,193,166],
[154,164,0,161,159,193,179,155],
[166,153,179,0,177,191,191,160],
[163,164,181,163,0,189,171,164],
[149,131,147,149,151,0,143,131],
[158,147,161,149,169,197,0,139],
[167,174,185,180,176,209,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,136,159,147,166,143,142],
[197,0,153,152,195,178,173,164],
[204,187,0,168,189,184,172,172],
[181,188,172,0,167,200,163,177],
[193,145,151,173,0,183,153,179],
[174,162,156,140,157,0,154,176],
[197,167,168,177,187,186,0,187],
[198,176,168,163,161,164,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,137,156,163,148,141,158],
[178,0,160,185,167,170,164,169],
[203,180,0,177,182,171,151,170],
[184,155,163,0,175,159,148,167],
[177,173,158,165,0,167,164,154],
[192,170,169,181,173,0,171,172],
[199,176,189,192,176,169,0,184],
[182,171,170,173,186,168,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,107,194,133,126,214,151],
[200,0,108,178,165,158,165,140],
[233,232,0,210,180,191,232,157],
[146,162,130,0,157,148,175,147],
[207,175,160,183,0,142,174,174],
[214,182,149,192,198,0,226,135],
[126,175,108,165,166,114,0,142],
[189,200,183,193,166,205,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,187,169,176,185,172,176],
[166,0,178,167,178,176,180,173],
[153,162,0,154,154,180,162,168],
[171,173,186,0,174,174,166,179],
[164,162,186,166,0,180,166,186],
[155,164,160,166,160,0,152,178],
[168,160,178,174,174,188,0,193],
[164,167,172,161,154,162,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,171,175,208,172,179,152],
[140,0,169,175,167,173,162,181],
[169,171,0,163,179,165,167,182],
[165,165,177,0,179,162,148,158],
[132,173,161,161,0,168,168,160],
[168,167,175,178,172,0,173,160],
[161,178,173,192,172,167,0,164],
[188,159,158,182,180,180,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,173,163,164,166,168,176],
[187,0,187,158,176,174,187,201],
[167,153,0,170,168,178,157,174],
[177,182,170,0,169,168,177,174],
[176,164,172,171,0,161,162,176],
[174,166,162,172,179,0,183,191],
[172,153,183,163,178,157,0,174],
[164,139,166,166,164,149,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,131,136,234,156,208,132],
[185,0,131,159,262,186,237,213],
[209,209,0,158,262,159,234,187],
[204,181,182,0,233,155,181,209],
[106,78,78,107,0,133,155,135],
[184,154,181,185,207,0,205,132],
[132,103,106,159,185,135,0,158],
[208,127,153,131,205,208,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,160,176,172,171,177,165],
[154,0,150,166,149,158,159,157],
[180,190,0,179,170,180,165,171],
[164,174,161,0,175,168,174,170],
[168,191,170,165,0,166,163,177],
[169,182,160,172,174,0,169,172],
[163,181,175,166,177,171,0,173],
[175,183,169,170,163,168,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,182,189,182,166,176,179],
[155,0,170,172,175,160,191,159],
[158,170,0,171,184,161,178,150],
[151,168,169,0,169,174,178,159],
[158,165,156,171,0,149,193,165],
[174,180,179,166,191,0,188,180],
[164,149,162,162,147,152,0,161],
[161,181,190,181,175,160,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,180,183,178,184,204,166],
[162,0,152,167,158,164,178,153],
[160,188,0,158,155,153,190,154],
[157,173,182,0,159,170,192,165],
[162,182,185,181,0,160,210,170],
[156,176,187,170,180,0,187,168],
[136,162,150,148,130,153,0,155],
[174,187,186,175,170,172,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,157,198,173,179,158,167],
[171,0,154,155,180,161,153,162],
[183,186,0,166,169,161,194,185],
[142,185,174,0,169,164,167,164],
[167,160,171,171,0,163,181,177],
[161,179,179,176,177,0,162,144],
[182,187,146,173,159,178,0,158],
[173,178,155,176,163,196,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,153,154,144,169,161,159],
[170,0,163,164,167,173,170,155],
[187,177,0,173,171,177,170,171],
[186,176,167,0,166,187,174,164],
[196,173,169,174,0,181,170,166],
[171,167,163,153,159,0,164,157],
[179,170,170,166,170,176,0,159],
[181,185,169,176,174,183,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,163,142,163,161,154,145],
[175,0,167,170,183,179,172,180],
[177,173,0,166,182,163,178,146],
[198,170,174,0,188,187,187,171],
[177,157,158,152,0,178,169,164],
[179,161,177,153,162,0,163,146],
[186,168,162,153,171,177,0,162],
[195,160,194,169,176,194,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,173,172,184,188,178,172],
[177,0,163,164,177,189,180,179],
[167,177,0,177,166,186,186,172],
[168,176,163,0,173,176,184,176],
[156,163,174,167,0,167,175,172],
[152,151,154,164,173,0,153,162],
[162,160,154,156,165,187,0,173],
[168,161,168,164,168,178,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,174,173,166,173,175,180],
[162,0,173,168,159,161,158,160],
[166,167,0,161,158,153,155,170],
[167,172,179,0,163,169,176,175],
[174,181,182,177,0,172,170,182],
[167,179,187,171,168,0,180,193],
[165,182,185,164,170,160,0,194],
[160,180,170,165,158,147,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,173,177,182,148,166,153],
[173,0,181,185,178,154,164,150],
[167,159,0,186,169,152,171,155],
[163,155,154,0,170,144,166,160],
[158,162,171,170,0,144,148,163],
[192,186,188,196,196,0,169,171],
[174,176,169,174,192,171,0,167],
[187,190,185,180,177,169,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,164,172,189,157,160,149],
[157,0,147,171,181,159,164,163],
[176,193,0,166,192,160,157,154],
[168,169,174,0,190,149,170,165],
[151,159,148,150,0,147,158,160],
[183,181,180,191,193,0,167,185],
[180,176,183,170,182,173,0,173],
[191,177,186,175,180,155,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,144,175,150,165,159,150],
[206,0,157,195,153,187,156,137],
[196,183,0,215,156,178,155,151],
[165,145,125,0,136,146,143,142],
[190,187,184,204,0,180,192,153],
[175,153,162,194,160,0,195,142],
[181,184,185,197,148,145,0,171],
[190,203,189,198,187,198,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,171,167,180,161,165,174],
[176,0,174,173,176,160,165,175],
[169,166,0,174,181,163,175,174],
[173,167,166,0,173,162,165,161],
[160,164,159,167,0,158,158,169],
[179,180,177,178,182,0,165,164],
[175,175,165,175,182,175,0,173],
[166,165,166,179,171,176,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,167,157,171,174,173,153],
[189,0,166,172,182,176,183,163],
[173,174,0,164,192,178,181,179],
[183,168,176,0,173,177,170,166],
[169,158,148,167,0,168,171,148],
[166,164,162,163,172,0,163,162],
[167,157,159,170,169,177,0,155],
[187,177,161,174,192,178,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,157,164,155,170,174,160],
[166,0,173,170,156,168,158,153],
[183,167,0,162,172,173,171,168],
[176,170,178,0,177,195,179,168],
[185,184,168,163,0,169,160,174],
[170,172,167,145,171,0,170,156],
[166,182,169,161,180,170,0,171],
[180,187,172,172,166,184,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,167,168,179,170,188,179],
[179,0,175,153,168,154,181,161],
[173,165,0,170,177,150,178,155],
[172,187,170,0,186,167,183,161],
[161,172,163,154,0,150,177,162],
[170,186,190,173,190,0,182,177],
[152,159,162,157,163,158,0,146],
[161,179,185,179,178,163,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,161,165,169,184,172,173],
[158,0,172,160,174,178,167,159],
[179,168,0,168,175,176,168,159],
[175,180,172,0,172,183,180,155],
[171,166,165,168,0,172,178,170],
[156,162,164,157,168,0,157,149],
[168,173,172,160,162,183,0,159],
[167,181,181,185,170,191,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,176,185,177,182,144,150],
[191,0,177,189,157,157,192,174],
[164,163,0,176,179,178,154,175],
[155,151,164,0,173,168,161,151],
[163,183,161,167,0,172,165,165],
[158,183,162,172,168,0,165,167],
[196,148,186,179,175,175,0,155],
[190,166,165,189,175,173,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,172,167,175,179,176,191],
[184,0,180,176,172,196,170,171],
[168,160,0,180,171,172,150,158],
[173,164,160,0,168,200,171,176],
[165,168,169,172,0,174,141,166],
[161,144,168,140,166,0,144,159],
[164,170,190,169,199,196,0,192],
[149,169,182,164,174,181,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,177,177,169,172,152,170],
[168,0,186,168,166,163,157,165],
[163,154,0,158,158,158,159,161],
[163,172,182,0,169,176,157,163],
[171,174,182,171,0,167,171,166],
[168,177,182,164,173,0,148,163],
[188,183,181,183,169,192,0,175],
[170,175,179,177,174,177,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,164,148,163,164,145,174],
[173,0,174,170,171,160,144,156],
[176,166,0,152,145,167,175,174],
[192,170,188,0,178,183,158,183],
[177,169,195,162,0,167,168,171],
[176,180,173,157,173,0,168,186],
[195,196,165,182,172,172,0,185],
[166,184,166,157,169,154,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,179,166,173,174,187,158],
[162,0,177,168,170,172,174,184],
[161,163,0,159,164,167,166,147],
[174,172,181,0,169,174,178,162],
[167,170,176,171,0,169,164,162],
[166,168,173,166,171,0,173,145],
[153,166,174,162,176,167,0,159],
[182,156,193,178,178,195,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,172,169,161,154,145,165],
[175,0,165,174,175,174,170,182],
[168,175,0,162,163,144,150,175],
[171,166,178,0,178,170,172,182],
[179,165,177,162,0,172,167,169],
[186,166,196,170,168,0,179,182],
[195,170,190,168,173,161,0,178],
[175,158,165,158,171,158,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,185,172,166,171,186,151],
[167,0,166,159,167,142,159,149],
[155,174,0,176,166,148,155,157],
[168,181,164,0,158,166,153,151],
[174,173,174,182,0,170,168,169],
[169,198,192,174,170,0,167,154],
[154,181,185,187,172,173,0,176],
[189,191,183,189,171,186,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,182,170,166,178,161,166],
[161,0,170,166,165,162,170,153],
[158,170,0,161,156,160,152,153],
[170,174,179,0,167,160,164,163],
[174,175,184,173,0,170,163,161],
[162,178,180,180,170,0,162,167],
[179,170,188,176,177,178,0,176],
[174,187,187,177,179,173,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,172,191,155,165,175,202],
[167,0,187,177,191,178,195,203],
[168,153,0,151,180,166,180,178],
[149,163,189,0,170,177,177,180],
[185,149,160,170,0,171,172,201],
[175,162,174,163,169,0,153,171],
[165,145,160,163,168,187,0,210],
[138,137,162,160,139,169,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,153,117,121,138,178,130],
[170,0,180,129,161,127,155,118],
[187,160,0,149,160,128,145,93],
[223,211,191,0,173,166,179,155],
[219,179,180,167,0,163,190,153],
[202,213,212,174,177,0,158,174],
[162,185,195,161,150,182,0,131],
[210,222,247,185,187,166,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,204,222,186,175,169,184],
[166,0,161,169,161,146,172,132],
[136,179,0,213,186,161,133,178],
[118,171,127,0,140,147,160,153],
[154,179,154,200,0,166,154,157],
[165,194,179,193,174,0,179,136],
[171,168,207,180,186,161,0,166],
[156,208,162,187,183,204,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,189,176,160,138,172,189],
[173,0,165,185,152,158,164,180],
[151,175,0,185,151,132,178,155],
[164,155,155,0,143,138,163,171],
[180,188,189,197,0,171,209,160],
[202,182,208,202,169,0,202,197],
[168,176,162,177,131,138,0,160],
[151,160,185,169,180,143,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,156,169,168,175,163,172],
[153,0,144,159,170,148,151,182],
[184,196,0,157,195,188,197,197],
[171,181,183,0,151,155,168,192],
[172,170,145,189,0,106,163,188],
[165,192,152,185,234,0,167,198],
[177,189,143,172,177,173,0,168],
[168,158,143,148,152,142,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,176,175,175,182,165,197],
[167,0,155,158,172,160,173,171],
[164,185,0,173,190,184,159,181],
[165,182,167,0,169,155,157,168],
[165,168,150,171,0,166,156,173],
[158,180,156,185,174,0,157,171],
[175,167,181,183,184,183,0,170],
[143,169,159,172,167,169,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,176,188,171,192,160,172],
[175,0,191,164,177,172,160,157],
[164,149,0,159,169,170,145,156],
[152,176,181,0,174,163,149,159],
[169,163,171,166,0,186,158,158],
[148,168,170,177,154,0,145,166],
[180,180,195,191,182,195,0,154],
[168,183,184,181,182,174,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,171,160,159,173,161,173],
[177,0,167,187,154,175,184,180],
[169,173,0,172,165,188,163,176],
[180,153,168,0,169,178,169,161],
[181,186,175,171,0,188,162,179],
[167,165,152,162,152,0,164,150],
[179,156,177,171,178,176,0,172],
[167,160,164,179,161,190,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,178,177,163,178,173,174],
[172,0,173,182,166,188,172,181],
[162,167,0,165,154,172,166,179],
[163,158,175,0,161,166,165,186],
[177,174,186,179,0,170,167,193],
[162,152,168,174,170,0,170,178],
[167,168,174,175,173,170,0,186],
[166,159,161,154,147,162,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,175,177,179,196,161,180],
[162,0,160,184,160,165,154,169],
[165,180,0,194,180,177,170,189],
[163,156,146,0,169,167,151,169],
[161,180,160,171,0,176,155,183],
[144,175,163,173,164,0,151,170],
[179,186,170,189,185,189,0,190],
[160,171,151,171,157,170,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,178,187,192,202,168,172],
[162,0,170,162,179,179,171,161],
[162,170,0,174,182,189,165,181],
[153,178,166,0,180,187,173,170],
[148,161,158,160,0,173,164,148],
[138,161,151,153,167,0,159,154],
[172,169,175,167,176,181,0,185],
[168,179,159,170,192,186,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,172,170,167,182,187,179],
[170,0,180,162,155,182,167,180],
[168,160,0,159,159,185,169,182],
[170,178,181,0,176,184,180,181],
[173,185,181,164,0,189,188,186],
[158,158,155,156,151,0,172,168],
[153,173,171,160,152,168,0,166],
[161,160,158,159,154,172,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,176,172,192,183,175,173],
[172,0,197,170,193,183,181,185],
[164,143,0,173,171,171,156,168],
[168,170,167,0,182,183,165,169],
[148,147,169,158,0,170,164,158],
[157,157,169,157,170,0,155,153],
[165,159,184,175,176,185,0,174],
[167,155,172,171,182,187,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,188,171,182,170,174,159],
[178,0,184,180,169,170,175,168],
[152,156,0,162,168,162,175,157],
[169,160,178,0,182,177,167,167],
[158,171,172,158,0,168,162,161],
[170,170,178,163,172,0,157,162],
[166,165,165,173,178,183,0,176],
[181,172,183,173,179,178,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,180,179,199,170,175,178],
[157,0,193,169,176,174,180,163],
[160,147,0,176,177,160,164,156],
[161,171,164,0,173,178,174,151],
[141,164,163,167,0,151,150,146],
[170,166,180,162,189,0,169,156],
[165,160,176,166,190,171,0,166],
[162,177,184,189,194,184,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,180,180,170,163,166,175],
[166,0,173,165,165,158,169,179],
[160,167,0,166,167,170,164,183],
[160,175,174,0,182,156,159,173],
[170,175,173,158,0,162,158,179],
[177,182,170,184,178,0,173,176],
[174,171,176,181,182,167,0,183],
[165,161,157,167,161,164,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,133,129,136,147,140,134],
[174,0,153,163,145,173,165,182],
[207,187,0,174,148,163,176,149],
[211,177,166,0,165,158,179,134],
[204,195,192,175,0,185,171,154],
[193,167,177,182,155,0,148,143],
[200,175,164,161,169,192,0,166],
[206,158,191,206,186,197,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,113,227,284,56,227,227],
[283,0,113,283,284,170,284,283],
[227,227,0,340,340,169,171,283],
[113,57,0,0,227,57,171,114],
[56,56,0,113,0,56,114,170],
[284,170,171,283,284,0,171,283],
[113,56,169,169,226,169,0,169],
[113,57,57,226,170,57,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,185,170,189,176,183,183],
[159,0,173,174,166,178,172,181],
[155,167,0,164,174,175,170,178],
[170,166,176,0,163,179,173,175],
[151,174,166,177,0,176,184,174],
[164,162,165,161,164,0,174,189],
[157,168,170,167,156,166,0,175],
[157,159,162,165,166,151,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,191,234,174,208,155,180],
[183,0,190,167,180,189,175,184],
[149,150,0,168,158,181,165,169],
[106,173,172,0,146,171,136,130],
[166,160,182,194,0,174,180,207],
[132,151,159,169,166,0,145,162],
[185,165,175,204,160,195,0,204],
[160,156,171,210,133,178,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,152,163,168,121,164,150],
[179,0,201,168,158,174,198,159],
[188,139,0,159,158,166,186,172],
[177,172,181,0,139,173,180,137],
[172,182,182,201,0,173,181,151],
[219,166,174,167,167,0,197,162],
[176,142,154,160,159,143,0,136],
[190,181,168,203,189,178,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,178,171,162,163,204,192],
[158,0,181,141,146,142,156,141],
[162,159,0,164,173,166,155,156],
[169,199,176,0,176,187,158,162],
[178,194,167,164,0,180,183,190],
[177,198,174,153,160,0,172,170],
[136,184,185,182,157,168,0,170],
[148,199,184,178,150,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,152,166,198,111,153,175],
[172,0,139,183,164,140,148,151],
[188,201,0,198,154,177,208,173],
[174,157,142,0,153,113,172,136],
[142,176,186,187,0,155,175,143],
[229,200,163,227,185,0,192,207],
[187,192,132,168,165,148,0,154],
[165,189,167,204,197,133,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,146,148,191,161,177,176],
[189,0,174,166,211,187,193,190],
[194,166,0,133,195,173,181,199],
[192,174,207,0,190,167,204,188],
[149,129,145,150,0,168,151,170],
[179,153,167,173,172,0,192,161],
[163,147,159,136,189,148,0,165],
[164,150,141,152,170,179,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,168,158,188,188,162,187],
[172,0,169,172,177,173,184,189],
[172,171,0,167,185,184,191,203],
[182,168,173,0,177,195,184,196],
[152,163,155,163,0,164,185,176],
[152,167,156,145,176,0,170,200],
[178,156,149,156,155,170,0,183],
[153,151,137,144,164,140,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,168,146,171,172,162,157],
[173,0,166,157,164,157,171,170],
[172,174,0,180,180,176,172,165],
[194,183,160,0,185,175,187,159],
[169,176,160,155,0,164,165,167],
[168,183,164,165,176,0,169,154],
[178,169,168,153,175,171,0,166],
[183,170,175,181,173,186,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,199,169,179,175,199,181],
[170,0,191,182,164,170,178,166],
[141,149,0,152,163,153,159,159],
[171,158,188,0,169,167,163,168],
[161,176,177,171,0,167,179,161],
[165,170,187,173,173,0,189,172],
[141,162,181,177,161,151,0,163],
[159,174,181,172,179,168,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,153,169,156,156,166,153],
[177,0,178,175,188,163,171,170],
[187,162,0,168,177,158,172,174],
[171,165,172,0,179,152,158,156],
[184,152,163,161,0,155,162,152],
[184,177,182,188,185,0,167,165],
[174,169,168,182,178,173,0,183],
[187,170,166,184,188,175,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,182,183,195,170,173,187],
[159,0,163,163,177,171,162,184],
[158,177,0,184,202,176,146,192],
[157,177,156,0,171,163,148,182],
[145,163,138,169,0,138,148,153],
[170,169,164,177,202,0,165,190],
[167,178,194,192,192,175,0,192],
[153,156,148,158,187,150,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,164,177,172,191,164,180],
[160,0,162,154,158,147,158,163],
[176,178,0,178,149,162,155,180],
[163,186,162,0,151,175,156,177],
[168,182,191,189,0,201,172,200],
[149,193,178,165,139,0,161,154],
[176,182,185,184,168,179,0,182],
[160,177,160,163,140,186,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,174,180,181,179,182,156],
[187,0,181,170,195,188,177,185],
[166,159,0,175,178,167,173,173],
[160,170,165,0,180,180,172,162],
[159,145,162,160,0,159,174,162],
[161,152,173,160,181,0,183,157],
[158,163,167,168,166,157,0,158],
[184,155,167,178,178,183,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,173,168,161,172,165,172],
[173,0,181,192,162,193,170,178],
[167,159,0,165,176,175,165,177],
[172,148,175,0,164,190,155,158],
[179,178,164,176,0,187,162,176],
[168,147,165,150,153,0,156,156],
[175,170,175,185,178,184,0,175],
[168,162,163,182,164,184,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,159,155,173,174,164,176],
[164,0,172,173,171,176,172,165],
[181,168,0,170,175,175,173,161],
[185,167,170,0,172,168,177,165],
[167,169,165,168,0,172,169,163],
[166,164,165,172,168,0,166,161],
[176,168,167,163,171,174,0,168],
[164,175,179,175,177,179,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,197,171,198,165,183,179],
[172,0,161,191,167,169,162,164],
[143,179,0,173,181,164,163,168],
[169,149,167,0,179,165,168,166],
[142,173,159,161,0,171,137,163],
[175,171,176,175,169,0,172,174],
[157,178,177,172,203,168,0,156],
[161,176,172,174,177,166,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,152,163,159,157,175,154],
[182,0,189,190,183,197,209,166],
[188,151,0,196,196,188,195,174],
[177,150,144,0,165,169,172,168],
[181,157,144,175,0,179,180,165],
[183,143,152,171,161,0,176,158],
[165,131,145,168,160,164,0,164],
[186,174,166,172,175,182,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,177,168,168,171,179,176],
[169,0,168,163,169,163,170,184],
[163,172,0,163,173,162,160,180],
[172,177,177,0,168,164,182,173],
[172,171,167,172,0,184,181,190],
[169,177,178,176,156,0,174,191],
[161,170,180,158,159,166,0,169],
[164,156,160,167,150,149,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,175,170,167,155,178,179],
[154,0,147,152,150,154,160,158],
[165,193,0,171,164,165,173,174],
[170,188,169,0,162,171,162,155],
[173,190,176,178,0,166,164,182],
[185,186,175,169,174,0,178,181],
[162,180,167,178,176,162,0,163],
[161,182,166,185,158,159,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,136,176,179,179,145,143],
[203,0,193,160,222,202,153,185],
[204,147,0,191,244,201,180,163],
[164,180,149,0,186,165,140,146],
[161,118,96,154,0,176,168,112],
[161,138,139,175,164,0,172,148],
[195,187,160,200,172,168,0,144],
[197,155,177,194,228,192,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,174,186,171,169,170,168],
[157,0,174,164,166,167,164,172],
[166,166,0,180,160,162,170,168],
[154,176,160,0,158,170,162,159],
[169,174,180,182,0,175,172,179],
[171,173,178,170,165,0,166,165],
[170,176,170,178,168,174,0,179],
[172,168,172,181,161,175,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,186,169,165,181,161,176],
[173,0,170,153,166,152,149,140],
[154,170,0,173,141,153,165,175],
[171,187,167,0,146,170,166,163],
[175,174,199,194,0,194,165,181],
[159,188,187,170,146,0,149,158],
[179,191,175,174,175,191,0,164],
[164,200,165,177,159,182,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,185,161,173,167,171,164],
[164,0,163,155,157,162,152,163],
[155,177,0,158,145,154,154,169],
[179,185,182,0,159,164,161,174],
[167,183,195,181,0,172,176,192],
[173,178,186,176,168,0,177,186],
[169,188,186,179,164,163,0,173],
[176,177,171,166,148,154,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,181,188,182,165,179,179],
[168,0,174,183,177,167,176,172],
[159,166,0,171,169,155,194,172],
[152,157,169,0,155,162,185,184],
[158,163,171,185,0,169,187,173],
[175,173,185,178,171,0,197,170],
[161,164,146,155,153,143,0,170],
[161,168,168,156,167,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,147,155,156,157,200,162],
[182,0,178,174,167,189,195,186],
[193,162,0,163,144,182,207,188],
[185,166,177,0,170,162,202,197],
[184,173,196,170,0,185,201,192],
[183,151,158,178,155,0,197,192],
[140,145,133,138,139,143,0,148],
[178,154,152,143,148,148,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,170,172,172,183,163,181],
[170,0,167,169,169,182,164,173],
[170,173,0,178,170,195,164,172],
[168,171,162,0,174,193,167,169],
[168,171,170,166,0,193,178,170],
[157,158,145,147,147,0,153,152],
[177,176,176,173,162,187,0,174],
[159,167,168,171,170,188,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,146,147,156,158,148,167],
[189,0,174,167,183,171,179,180],
[194,166,0,179,170,180,181,182],
[193,173,161,0,163,180,175,178],
[184,157,170,177,0,172,187,189],
[182,169,160,160,168,0,164,177],
[192,161,159,165,153,176,0,170],
[173,160,158,162,151,163,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,208,208,209,229,191,160],
[168,0,196,223,218,181,193,184],
[132,144,0,199,154,152,179,169],
[132,117,141,0,193,167,131,144],
[131,122,186,147,0,125,170,85],
[111,159,188,173,215,0,157,161],
[149,147,161,209,170,183,0,175],
[180,156,171,196,255,179,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,165,159,171,180,175,171],
[167,0,154,168,153,174,177,165],
[175,186,0,175,164,187,197,187],
[181,172,165,0,163,184,184,161],
[169,187,176,177,0,184,188,163],
[160,166,153,156,156,0,180,152],
[165,163,143,156,152,160,0,153],
[169,175,153,179,177,188,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,211,204,190,177,170,194],
[199,0,202,226,177,155,207,202],
[129,138,0,166,171,148,154,132],
[136,114,174,0,169,144,123,123],
[150,163,169,171,0,151,151,146],
[163,185,192,196,189,0,179,178],
[170,133,186,217,189,161,0,168],
[146,138,208,217,194,162,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,160,147,174,165,134,184],
[176,0,179,169,171,163,129,167],
[180,161,0,168,173,182,153,151],
[193,171,172,0,173,178,163,199],
[166,169,167,167,0,175,167,177],
[175,177,158,162,165,0,176,149],
[206,211,187,177,173,164,0,176],
[156,173,189,141,163,191,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,184,175,192,180,174,188],
[174,0,159,155,186,171,158,170],
[156,181,0,155,175,157,171,169],
[165,185,185,0,170,167,158,184],
[148,154,165,170,0,164,158,173],
[160,169,183,173,176,0,173,181],
[166,182,169,182,182,167,0,161],
[152,170,171,156,167,159,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,168,167,170,173,157,164],
[176,0,161,179,184,172,187,168],
[172,179,0,184,183,165,176,165],
[173,161,156,0,195,145,169,169],
[170,156,157,145,0,150,144,158],
[167,168,175,195,190,0,165,159],
[183,153,164,171,196,175,0,181],
[176,172,175,171,182,181,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,181,173,168,171,160,182],
[143,0,144,172,159,142,145,151],
[159,196,0,175,158,172,153,164],
[167,168,165,0,157,170,147,172],
[172,181,182,183,0,165,161,162],
[169,198,168,170,175,0,156,194],
[180,195,187,193,179,184,0,169],
[158,189,176,168,178,146,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,167,161,181,165,167,164],
[176,0,154,158,169,172,166,164],
[173,186,0,167,194,179,175,174],
[179,182,173,0,195,168,172,175],
[159,171,146,145,0,164,152,159],
[175,168,161,172,176,0,165,177],
[173,174,165,168,188,175,0,166],
[176,176,166,165,181,163,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,169,185,180,178,172,189],
[149,0,154,172,173,148,163,151],
[171,186,0,184,184,177,179,164],
[155,168,156,0,174,164,153,177],
[160,167,156,166,0,153,161,143],
[162,192,163,176,187,0,170,156],
[168,177,161,187,179,170,0,166],
[151,189,176,163,197,184,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,181,181,198,191,187,184],
[171,0,164,192,180,200,175,169],
[159,176,0,168,160,181,186,183],
[159,148,172,0,173,202,168,178],
[142,160,180,167,0,185,161,186],
[149,140,159,138,155,0,149,149],
[153,165,154,172,179,191,0,178],
[156,171,157,162,154,191,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,171,180,191,166,177,172],
[145,0,163,168,154,149,155,162],
[169,177,0,156,172,161,176,157],
[160,172,184,0,170,169,167,178],
[149,186,168,170,0,162,162,168],
[174,191,179,171,178,0,167,167],
[163,185,164,173,178,173,0,170],
[168,178,183,162,172,173,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,209,214,186,217,205,193],
[171,0,218,169,199,145,220,171],
[131,122,0,160,144,180,193,136],
[126,171,180,0,171,125,213,156],
[154,141,196,169,0,140,187,149],
[123,195,160,215,200,0,227,179],
[135,120,147,127,153,113,0,122],
[147,169,204,184,191,161,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,256,170,170,254,86,86],
[170,0,170,170,172,170,172,0],
[84,170,0,170,86,254,86,86],
[170,170,170,0,170,254,86,170],
[170,168,254,170,0,254,86,0],
[86,170,86,86,86,0,172,0],
[254,168,254,254,254,168,0,168],
[254,340,254,170,340,340,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,145,177,177,174,175,151],
[185,0,150,200,127,208,161,162],
[195,190,0,218,144,220,178,183],
[163,140,122,0,118,182,179,125],
[163,213,196,222,0,206,203,187],
[166,132,120,158,134,0,119,143],
[165,179,162,161,137,221,0,148],
[189,178,157,215,153,197,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,176,168,177,179,175,170],
[184,0,182,168,181,185,170,172],
[164,158,0,160,167,176,162,175],
[172,172,180,0,168,190,160,176],
[163,159,173,172,0,170,163,177],
[161,155,164,150,170,0,166,157],
[165,170,178,180,177,174,0,177],
[170,168,165,164,163,183,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,171,171,161,150,184,155],
[175,0,182,181,163,163,179,175],
[169,158,0,169,157,147,165,147],
[169,159,171,0,150,151,171,145],
[179,177,183,190,0,168,173,159],
[190,177,193,189,172,0,170,171],
[156,161,175,169,167,170,0,160],
[185,165,193,195,181,169,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,157,149,164,169,167,179],
[139,0,134,139,133,147,134,140],
[183,206,0,191,164,181,188,199],
[191,201,149,0,173,174,177,182],
[176,207,176,167,0,181,185,180],
[171,193,159,166,159,0,166,181],
[173,206,152,163,155,174,0,182],
[161,200,141,158,160,159,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,184,191,158,214,169,176],
[166,0,147,164,168,167,153,183],
[156,193,0,183,197,204,203,176],
[149,176,157,0,152,187,159,169],
[182,172,143,188,0,202,173,181],
[126,173,136,153,138,0,148,153],
[171,187,137,181,167,192,0,168],
[164,157,164,171,159,187,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,166,160,183,173,156,135],
[144,0,147,165,161,181,156,147],
[174,193,0,175,190,187,190,164],
[180,175,165,0,164,185,162,174],
[157,179,150,176,0,164,154,155],
[167,159,153,155,176,0,164,154],
[184,184,150,178,186,176,0,171],
[205,193,176,166,185,186,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,174,165,158,160,181,153],
[204,0,201,190,152,163,197,181],
[166,139,0,155,133,142,205,145],
[175,150,185,0,181,128,186,136],
[182,188,207,159,0,171,187,164],
[180,177,198,212,169,0,190,164],
[159,143,135,154,153,150,0,109],
[187,159,195,204,176,176,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,183,218,168,236,201,187],
[171,0,161,206,199,195,167,198],
[157,179,0,181,166,170,145,206],
[122,134,159,0,165,225,144,155],
[172,141,174,175,0,194,150,136],
[104,145,170,115,146,0,134,122],
[139,173,195,196,190,206,0,190],
[153,142,134,185,204,218,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,181,144,140,123,171,154],
[176,0,221,173,184,171,168,173],
[159,119,0,132,147,138,114,110],
[196,167,208,0,198,146,165,141],
[200,156,193,142,0,173,173,167],
[217,169,202,194,167,0,147,161],
[169,172,226,175,167,193,0,161],
[186,167,230,199,173,179,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,182,160,165,162,141,159],
[184,0,172,177,162,175,176,153],
[158,168,0,163,144,161,146,165],
[180,163,177,0,150,157,157,176],
[175,178,196,190,0,170,171,178],
[178,165,179,183,170,0,157,181],
[199,164,194,183,169,183,0,177],
[181,187,175,164,162,159,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,191,147,163,206,175,175],
[188,0,190,168,181,176,187,178],
[149,150,0,150,181,173,157,165],
[193,172,190,0,163,182,166,180],
[177,159,159,177,0,193,182,175],
[134,164,167,158,147,0,159,169],
[165,153,183,174,158,181,0,148],
[165,162,175,160,165,171,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,158,174,172,177,173,154],
[157,0,136,150,166,183,148,149],
[182,204,0,165,183,201,178,170],
[166,190,175,0,182,181,162,165],
[168,174,157,158,0,188,168,154],
[163,157,139,159,152,0,163,161],
[167,192,162,178,172,177,0,165],
[186,191,170,175,186,179,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,186,167,176,177,145,168],
[173,0,183,183,176,192,174,155],
[154,157,0,170,164,166,136,177],
[173,157,170,0,175,163,143,154],
[164,164,176,165,0,173,149,163],
[163,148,174,177,167,0,158,174],
[195,166,204,197,191,182,0,188],
[172,185,163,186,177,166,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,212,94,204,168,188,166],
[171,0,246,206,302,227,188,166],
[128,94,0,72,149,113,94,109],
[246,134,268,0,243,207,171,188],
[136,38,191,97,0,94,135,132],
[172,113,227,133,246,0,153,131],
[152,152,246,169,205,187,0,224],
[174,174,231,152,208,209,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,183,153,171,182,166,184],
[159,0,176,166,160,169,174,181],
[157,164,0,161,168,172,160,169],
[187,174,179,0,167,184,166,186],
[169,180,172,173,0,176,175,174],
[158,171,168,156,164,0,156,168],
[174,166,180,174,165,184,0,182],
[156,159,171,154,166,172,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,159,184,185,160,171,169],
[174,0,139,137,175,137,141,150],
[181,201,0,162,195,174,193,180],
[156,203,178,0,180,176,187,187],
[155,165,145,160,0,151,163,162],
[180,203,166,164,189,0,195,186],
[169,199,147,153,177,145,0,172],
[171,190,160,153,178,154,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,167,170,175,183,180,176],
[165,0,174,166,177,172,177,174],
[173,166,0,170,184,185,176,176],
[170,174,170,0,161,173,180,179],
[165,163,156,179,0,179,179,154],
[157,168,155,167,161,0,169,164],
[160,163,164,160,161,171,0,161],
[164,166,164,161,186,176,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,164,151,223,217,224,172],
[195,0,196,191,198,215,205,166],
[176,144,0,159,188,137,180,118],
[189,149,181,0,228,208,229,204],
[117,142,152,112,0,145,183,139],
[123,125,203,132,195,0,211,158],
[116,135,160,111,157,129,0,125],
[168,174,222,136,201,182,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,161,166,157,167,170,177],
[183,0,176,176,177,174,161,179],
[179,164,0,169,175,181,175,172],
[174,164,171,0,173,172,177,167],
[183,163,165,167,0,175,166,176],
[173,166,159,168,165,0,174,168],
[170,179,165,163,174,166,0,171],
[163,161,168,173,164,172,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,183,167,156,181,189,181],
[180,0,174,176,166,175,179,198],
[157,166,0,145,152,183,177,168],
[173,164,195,0,174,178,189,167],
[184,174,188,166,0,187,192,211],
[159,165,157,162,153,0,165,181],
[151,161,163,151,148,175,0,179],
[159,142,172,173,129,159,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,168,128,150,128,138,137],
[187,0,189,154,155,150,154,171],
[172,151,0,153,165,148,149,130],
[212,186,187,0,193,152,158,162],
[190,185,175,147,0,170,146,169],
[212,190,192,188,170,0,170,169],
[202,186,191,182,194,170,0,182],
[203,169,210,178,171,171,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,170,165,173,181,166,168],
[184,0,167,180,180,174,157,180],
[170,173,0,174,167,188,178,163],
[175,160,166,0,177,157,162,146],
[167,160,173,163,0,168,151,168],
[159,166,152,183,172,0,167,167],
[174,183,162,178,189,173,0,171],
[172,160,177,194,172,173,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,147,255,179,170,219,126],
[227,0,204,240,178,169,193,159],
[193,136,0,217,154,216,195,169],
[85,100,123,0,140,157,192,112],
[161,162,186,200,0,185,208,149],
[170,171,124,183,155,0,192,191],
[121,147,145,148,132,148,0,133],
[214,181,171,228,191,149,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,183,180,181,177,194,163],
[160,0,157,171,158,173,179,162],
[157,183,0,185,168,180,173,177],
[160,169,155,0,166,157,170,158],
[159,182,172,174,0,165,178,169],
[163,167,160,183,175,0,174,170],
[146,161,167,170,162,166,0,176],
[177,178,163,182,171,170,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,168,172,190,180,182,187],
[157,0,171,174,171,183,179,183],
[172,169,0,170,178,158,179,175],
[168,166,170,0,186,171,177,168],
[150,169,162,154,0,170,180,168],
[160,157,182,169,170,0,188,194],
[158,161,161,163,160,152,0,158],
[153,157,165,172,172,146,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,188,168,152,163,166,177],
[178,0,192,174,166,180,184,176],
[152,148,0,153,141,147,157,167],
[172,166,187,0,175,161,168,174],
[188,174,199,165,0,187,171,188],
[177,160,193,179,153,0,182,188],
[174,156,183,172,169,158,0,164],
[163,164,173,166,152,152,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,160,170,175,170,159,164],
[179,0,161,163,166,157,167,161],
[180,179,0,178,179,167,167,161],
[170,177,162,0,172,168,165,166],
[165,174,161,168,0,162,163,162],
[170,183,173,172,178,0,177,168],
[181,173,173,175,177,163,0,178],
[176,179,179,174,178,172,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,166,172,149,165,171,168],
[179,0,184,193,190,169,186,187],
[174,156,0,179,189,180,192,181],
[168,147,161,0,157,160,165,169],
[191,150,151,183,0,169,174,169],
[175,171,160,180,171,0,156,155],
[169,154,148,175,166,184,0,161],
[172,153,159,171,171,185,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,164,197,159,176,184,163],
[176,0,166,194,172,172,181,177],
[176,174,0,191,164,187,189,186],
[143,146,149,0,143,160,166,160],
[181,168,176,197,0,187,187,188],
[164,168,153,180,153,0,185,169],
[156,159,151,174,153,155,0,167],
[177,163,154,180,152,171,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,169,166,171,200,198,189],
[165,0,167,151,143,173,180,166],
[171,173,0,159,144,197,174,176],
[174,189,181,0,161,186,183,171],
[169,197,196,179,0,201,182,213],
[140,167,143,154,139,0,162,165],
[142,160,166,157,158,178,0,169],
[151,174,164,169,127,175,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,170,171,186,173,175,173],
[160,0,164,178,162,174,160,157],
[170,176,0,181,183,170,168,180],
[169,162,159,0,176,174,172,171],
[154,178,157,164,0,164,168,161],
[167,166,170,166,176,0,171,175],
[165,180,172,168,172,169,0,172],
[167,183,160,169,179,165,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,176,160,154,175,187,171],
[182,0,164,181,153,182,176,188],
[164,176,0,160,160,209,183,182],
[180,159,180,0,170,164,171,175],
[186,187,180,170,0,208,196,200],
[165,158,131,176,132,0,176,174],
[153,164,157,169,144,164,0,181],
[169,152,158,165,140,166,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,193,174,216,170,150,192],
[103,0,189,188,234,189,167,149],
[147,151,0,193,214,168,149,128],
[166,152,147,0,254,127,107,148],
[124,106,126,86,0,106,106,148],
[170,151,172,213,234,0,149,173],
[190,173,191,233,234,191,0,170],
[148,191,212,192,192,167,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,185,175,168,169,168,160],
[168,0,163,172,160,159,172,148],
[155,177,0,182,158,158,160,151],
[165,168,158,0,144,152,146,145],
[172,180,182,196,0,166,179,177],
[171,181,182,188,174,0,163,168],
[172,168,180,194,161,177,0,164],
[180,192,189,195,163,172,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,240,214,159,204,149,141],
[175,0,246,190,187,165,196,162],
[100,94,0,118,137,108,114,116],
[126,150,222,0,186,155,171,183],
[181,153,203,154,0,168,159,178],
[136,175,232,185,172,0,158,158],
[191,144,226,169,181,182,0,181],
[199,178,224,157,162,182,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,191,163,177,150,163,159],
[165,0,180,154,146,170,166,152],
[149,160,0,147,161,159,166,180],
[177,186,193,0,185,150,180,158],
[163,194,179,155,0,171,168,142],
[190,170,181,190,169,0,181,183],
[177,174,174,160,172,159,0,158],
[181,188,160,182,198,157,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,175,174,170,173,160,146],
[167,0,185,161,161,166,161,164],
[165,155,0,169,164,158,150,159],
[166,179,171,0,161,158,164,151],
[170,179,176,179,0,161,169,154],
[167,174,182,182,179,0,165,170],
[180,179,190,176,171,175,0,160],
[194,176,181,189,186,170,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,254,254,170,170,167,170],
[173,0,170,257,256,173,173,173],
[86,170,0,170,256,86,170,86],
[86,83,170,0,170,86,86,86],
[170,84,84,170,0,170,170,170],
[170,167,254,254,170,0,253,256],
[173,167,170,254,170,87,0,170],
[170,167,254,254,170,84,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,168,158,156,165,153,175],
[184,0,159,171,157,173,164,172],
[172,181,0,172,169,172,168,193],
[182,169,168,0,166,169,169,184],
[184,183,171,174,0,173,169,194],
[175,167,168,171,167,0,167,175],
[187,176,172,171,171,173,0,170],
[165,168,147,156,146,165,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,195,166,181,172,153,184],
[149,0,168,155,159,164,156,160],
[145,172,0,155,177,163,151,157],
[174,185,185,0,173,166,153,176],
[159,181,163,167,0,160,165,163],
[168,176,177,174,180,0,161,171],
[187,184,189,187,175,179,0,166],
[156,180,183,164,177,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,182,159,189,168,186,181],
[155,0,178,160,188,156,181,182],
[158,162,0,186,166,182,166,177],
[181,180,154,0,176,182,181,184],
[151,152,174,164,0,164,164,179],
[172,184,158,158,176,0,170,172],
[154,159,174,159,176,170,0,171],
[159,158,163,156,161,168,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,169,166,163,160,176,152],
[182,0,155,161,187,181,179,168],
[171,185,0,181,184,170,183,159],
[174,179,159,0,164,170,182,165],
[177,153,156,176,0,155,196,158],
[180,159,170,170,185,0,189,172],
[164,161,157,158,144,151,0,156],
[188,172,181,175,182,168,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,170,188,178,158,166,174],
[158,0,160,152,156,148,152,159],
[170,180,0,163,175,178,191,175],
[152,188,177,0,149,160,167,164],
[162,184,165,191,0,163,166,190],
[182,192,162,180,177,0,165,160],
[174,188,149,173,174,175,0,174],
[166,181,165,176,150,180,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,180,173,177,190,180,181],
[181,0,182,165,171,186,169,183],
[160,158,0,161,164,169,165,175],
[167,175,179,0,170,182,171,188],
[163,169,176,170,0,184,170,181],
[150,154,171,158,156,0,167,178],
[160,171,175,169,170,173,0,176],
[159,157,165,152,159,162,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,176,164,166,173,178,170],
[194,0,176,176,174,173,177,165],
[164,164,0,161,168,174,174,167],
[176,164,179,0,170,177,182,165],
[174,166,172,170,0,171,160,136],
[167,167,166,163,169,0,163,161],
[162,163,166,158,180,177,0,152],
[170,175,173,175,204,179,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,177,168,190,179,172,184],
[160,0,166,155,174,173,177,187],
[163,174,0,154,181,168,171,185],
[172,185,186,0,183,178,164,189],
[150,166,159,157,0,157,150,166],
[161,167,172,162,183,0,179,181],
[168,163,169,176,190,161,0,185],
[156,153,155,151,174,159,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,194,178,154,171,161,181],
[174,0,186,180,162,187,173,181],
[146,154,0,142,131,138,150,156],
[162,160,198,0,139,150,153,161],
[186,178,209,201,0,193,169,192],
[169,153,202,190,147,0,172,160],
[179,167,190,187,171,168,0,167],
[159,159,184,179,148,180,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,140,171,158,154,138,163],
[188,0,173,186,196,195,170,199],
[200,167,0,173,190,184,167,186],
[169,154,167,0,186,166,152,168],
[182,144,150,154,0,147,153,179],
[186,145,156,174,193,0,159,180],
[202,170,173,188,187,181,0,199],
[177,141,154,172,161,160,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,168,176,182,184,182,174],
[166,0,163,179,168,164,183,164],
[172,177,0,171,163,159,174,175],
[164,161,169,0,164,173,169,171],
[158,172,177,176,0,174,185,190],
[156,176,181,167,166,0,180,171],
[158,157,166,171,155,160,0,157],
[166,176,165,169,150,169,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,154,157,199,168,155,172],
[173,0,155,139,184,154,150,167],
[186,185,0,189,222,162,194,196],
[183,201,151,0,196,191,190,174],
[141,156,118,144,0,173,156,161],
[172,186,178,149,167,0,207,164],
[185,190,146,150,184,133,0,143],
[168,173,144,166,179,176,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,178,173,141,117,106,120],
[129,0,177,151,82,127,109,106],
[162,163,0,171,141,127,120,154],
[167,189,169,0,178,153,158,180],
[199,258,199,162,0,137,166,136],
[223,213,213,187,203,0,157,153],
[234,231,220,182,174,183,0,150],
[220,234,186,160,204,187,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,210,173,205,152,190,139],
[164,0,177,172,187,149,142,174],
[130,163,0,175,184,161,154,123],
[167,168,165,0,203,176,180,149],
[135,153,156,137,0,139,154,140],
[188,191,179,164,201,0,208,196],
[150,198,186,160,186,132,0,133],
[201,166,217,191,200,144,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,176,165,176,173,167,175],
[169,0,176,177,166,165,166,166],
[164,164,0,171,185,178,177,175],
[175,163,169,0,177,169,163,165],
[164,174,155,163,0,165,167,171],
[167,175,162,171,175,0,177,169],
[173,174,163,177,173,163,0,158],
[165,174,165,175,169,171,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,142,177,149,181,190,136],
[157,0,150,163,161,186,182,167],
[198,190,0,177,167,191,207,182],
[163,177,163,0,157,191,183,149],
[191,179,173,183,0,185,194,160],
[159,154,149,149,155,0,178,148],
[150,158,133,157,146,162,0,143],
[204,173,158,191,180,192,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,149,154,163,178,164,159],
[173,0,166,168,189,159,190,164],
[191,174,0,172,186,203,189,169],
[186,172,168,0,190,197,190,184],
[177,151,154,150,0,171,167,158],
[162,181,137,143,169,0,171,147],
[176,150,151,150,173,169,0,163],
[181,176,171,156,182,193,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,102,67,103,171,170,135],
[271,0,270,168,202,237,170,237],
[238,70,0,170,170,170,171,307],
[273,172,170,0,206,239,205,240],
[237,138,170,134,0,205,136,238],
[169,103,170,101,135,0,171,204],
[170,170,169,135,204,169,0,204],
[205,103,33,100,102,136,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,160,172,152,166,149,158],
[184,0,165,173,167,177,174,170],
[180,175,0,181,174,175,170,179],
[168,167,159,0,167,164,148,171],
[188,173,166,173,0,174,159,174],
[174,163,165,176,166,0,158,169],
[191,166,170,192,181,182,0,173],
[182,170,161,169,166,171,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,173,164,136,145,196,161],
[189,0,186,196,180,173,200,163],
[167,154,0,164,160,146,177,150],
[176,144,176,0,149,182,185,141],
[204,160,180,191,0,163,203,175],
[195,167,194,158,177,0,207,184],
[144,140,163,155,137,133,0,145],
[179,177,190,199,165,156,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,168,170,183,190,183,166],
[177,0,168,174,172,184,191,167],
[172,172,0,162,182,171,184,174],
[170,166,178,0,184,173,175,161],
[157,168,158,156,0,160,163,172],
[150,156,169,167,180,0,172,155],
[157,149,156,165,177,168,0,155],
[174,173,166,179,168,185,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,185,171,160,176,161,170],
[161,0,183,188,165,186,175,165],
[155,157,0,179,167,152,158,150],
[169,152,161,0,168,170,163,154],
[180,175,173,172,0,183,162,167],
[164,154,188,170,157,0,181,163],
[179,165,182,177,178,159,0,175],
[170,175,190,186,173,177,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,189,161,179,192,192,172],
[141,0,145,139,152,181,155,163],
[151,195,0,171,181,188,171,155],
[179,201,169,0,171,182,187,178],
[161,188,159,169,0,189,192,178],
[148,159,152,158,151,0,158,139],
[148,185,169,153,148,182,0,154],
[168,177,185,162,162,201,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,163,199,168,153,161,175],
[156,0,144,155,157,145,164,161],
[177,196,0,180,185,186,169,171],
[141,185,160,0,154,159,173,144],
[172,183,155,186,0,147,183,179],
[187,195,154,181,193,0,185,173],
[179,176,171,167,157,155,0,156],
[165,179,169,196,161,167,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,168,161,161,158,169,172],
[167,0,167,168,158,162,159,167],
[172,173,0,161,158,170,168,174],
[179,172,179,0,170,184,171,179],
[179,182,182,170,0,172,176,188],
[182,178,170,156,168,0,160,182],
[171,181,172,169,164,180,0,178],
[168,173,166,161,152,158,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,161,167,176,166,178,164],
[179,0,168,175,186,182,189,181],
[179,172,0,166,179,167,175,177],
[173,165,174,0,180,170,172,164],
[164,154,161,160,0,151,178,148],
[174,158,173,170,189,0,182,155],
[162,151,165,168,162,158,0,154],
[176,159,163,176,192,185,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,192,164,159,150,183,206],
[179,0,197,150,163,180,196,181],
[148,143,0,128,172,150,167,168],
[176,190,212,0,194,160,205,211],
[181,177,168,146,0,168,180,198],
[190,160,190,180,172,0,194,197],
[157,144,173,135,160,146,0,193],
[134,159,172,129,142,143,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,175,185,176,174,164,168],
[176,0,184,174,170,171,166,186],
[165,156,0,152,177,163,155,172],
[155,166,188,0,183,168,172,186],
[164,170,163,157,0,154,149,164],
[166,169,177,172,186,0,159,159],
[176,174,185,168,191,181,0,187],
[172,154,168,154,176,181,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,189,183,192,183,183,207],
[171,0,170,183,181,178,176,172],
[151,170,0,168,192,171,157,179],
[157,157,172,0,164,184,167,169],
[148,159,148,176,0,152,152,177],
[157,162,169,156,188,0,149,188],
[157,164,183,173,188,191,0,190],
[133,168,161,171,163,152,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,204,181,171,189,170,162],
[153,0,182,175,180,177,170,180],
[136,158,0,146,154,160,148,148],
[159,165,194,0,180,180,158,181],
[169,160,186,160,0,180,171,172],
[151,163,180,160,160,0,158,168],
[170,170,192,182,169,182,0,175],
[178,160,192,159,168,172,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,156,179,160,157,155,159],
[177,0,171,179,171,162,175,172],
[184,169,0,182,166,179,175,170],
[161,161,158,0,153,160,158,155],
[180,169,174,187,0,176,180,179],
[183,178,161,180,164,0,177,172],
[185,165,165,182,160,163,0,172],
[181,168,170,185,161,168,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,164,158,191,180,180,165],
[144,0,155,161,168,181,154,163],
[176,185,0,155,184,194,163,207],
[182,179,185,0,194,180,157,173],
[149,172,156,146,0,161,132,163],
[160,159,146,160,179,0,167,159],
[160,186,177,183,208,173,0,168],
[175,177,133,167,177,181,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,175,185,173,178,163,196],
[145,0,183,159,172,169,158,184],
[165,157,0,159,169,159,158,157],
[155,181,181,0,173,176,166,193],
[167,168,171,167,0,186,190,174],
[162,171,181,164,154,0,165,170],
[177,182,182,174,150,175,0,177],
[144,156,183,147,166,170,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,161,146,199,144,173,157],
[194,0,155,144,167,138,210,169],
[179,185,0,141,194,180,183,198],
[194,196,199,0,197,195,212,170],
[141,173,146,143,0,169,202,155],
[196,202,160,145,171,0,202,128],
[167,130,157,128,138,138,0,169],
[183,171,142,170,185,212,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,151,174,145,128,149,145],
[176,0,182,183,151,148,214,164],
[189,158,0,156,177,159,140,168],
[166,157,184,0,169,140,151,153],
[195,189,163,171,0,134,176,148],
[212,192,181,200,206,0,154,173],
[191,126,200,189,164,186,0,163],
[195,176,172,187,192,167,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,181,162,153,152,147,137],
[188,0,202,179,178,191,171,157],
[159,138,0,139,153,175,148,130],
[178,161,201,0,158,174,147,156],
[187,162,187,182,0,173,162,156],
[188,149,165,166,167,0,155,142],
[193,169,192,193,178,185,0,176],
[203,183,210,184,184,198,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,173,161,177,164,181,176],
[151,0,165,164,166,162,189,163],
[167,175,0,183,172,189,200,172],
[179,176,157,0,153,157,151,176],
[163,174,168,187,0,173,184,167],
[176,178,151,183,167,0,190,173],
[159,151,140,189,156,150,0,159],
[164,177,168,164,173,167,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,171,167,186,153,189,175],
[180,0,187,183,174,197,201,164],
[169,153,0,191,163,154,172,167],
[173,157,149,0,171,163,161,149],
[154,166,177,169,0,170,199,177],
[187,143,186,177,170,0,181,179],
[151,139,168,179,141,159,0,175],
[165,176,173,191,163,161,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,169,174,191,175,170,174],
[174,0,167,177,183,173,173,170],
[171,173,0,174,170,174,176,168],
[166,163,166,0,172,167,174,163],
[149,157,170,168,0,151,165,163],
[165,167,166,173,189,0,181,173],
[170,167,164,166,175,159,0,165],
[166,170,172,177,177,167,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,172,183,187,174,170,174],
[172,0,160,175,181,152,162,172],
[168,180,0,160,180,175,157,171],
[157,165,180,0,171,162,172,164],
[153,159,160,169,0,152,150,157],
[166,188,165,178,188,0,169,174],
[170,178,183,168,190,171,0,164],
[166,168,169,176,183,166,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,0,0,170,170,340,0],
[170,0,0,0,170,170,170,0],
[340,340,0,170,170,170,340,170],
[340,340,170,0,170,170,340,0],
[170,170,170,170,0,170,170,170],
[170,170,170,170,170,0,170,170],
[0,170,0,0,170,170,0,0],
[340,340,170,340,170,170,340,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,169,217,192,194,145,193],
[123,0,169,195,192,220,120,146],
[171,171,0,121,120,219,121,146],
[123,145,219,0,168,195,170,171],
[148,148,220,172,0,149,170,147],
[146,120,121,145,191,0,117,72],
[195,220,219,170,170,223,0,172],
[147,194,194,169,193,268,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,192,193,173,173,177,171],
[174,0,181,181,169,176,180,157],
[148,159,0,153,168,163,165,138],
[147,159,187,0,175,167,166,153],
[167,171,172,165,0,164,168,155],
[167,164,177,173,176,0,186,162],
[163,160,175,174,172,154,0,162],
[169,183,202,187,185,178,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,167,169,182,167,172,181],
[176,0,144,162,181,168,147,178],
[173,196,0,176,177,165,162,166],
[171,178,164,0,175,173,174,172],
[158,159,163,165,0,149,160,159],
[173,172,175,167,191,0,179,175],
[168,193,178,166,180,161,0,178],
[159,162,174,168,181,165,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,164,175,184,188,160,185],
[161,0,163,177,157,188,132,190],
[176,177,0,141,169,155,128,197],
[165,163,199,0,190,158,175,191],
[156,183,171,150,0,154,124,154],
[152,152,185,182,186,0,158,195],
[180,208,212,165,216,182,0,201],
[155,150,143,149,186,145,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,169,171,177,159,174,163],
[180,0,184,166,179,181,169,172],
[171,156,0,188,178,164,175,170],
[169,174,152,0,196,165,173,183],
[163,161,162,144,0,160,176,159],
[181,159,176,175,180,0,180,173],
[166,171,165,167,164,160,0,166],
[177,168,170,157,181,167,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,168,163,181,156,152,155],
[161,0,175,159,161,156,150,155],
[172,165,0,147,168,152,147,149],
[177,181,193,0,189,167,167,182],
[159,179,172,151,0,174,145,157],
[184,184,188,173,166,0,180,155],
[188,190,193,173,195,160,0,177],
[185,185,191,158,183,185,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,181,160,169,165,190,167],
[159,0,152,161,156,160,176,151],
[159,188,0,175,162,185,174,185],
[180,179,165,0,160,183,169,167],
[171,184,178,180,0,161,177,173],
[175,180,155,157,179,0,165,166],
[150,164,166,171,163,175,0,152],
[173,189,155,173,167,174,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,168,171,171,190,203,182],
[157,0,181,165,174,193,184,182],
[172,159,0,148,199,181,174,191],
[169,175,192,0,201,203,186,196],
[169,166,141,139,0,177,183,190],
[150,147,159,137,163,0,146,143],
[137,156,166,154,157,194,0,148],
[158,158,149,144,150,197,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,141,188,169,202,150,171],
[201,0,154,133,170,183,166,116],
[199,186,0,148,201,200,168,166],
[152,207,192,0,203,201,185,204],
[171,170,139,137,0,185,170,171],
[138,157,140,139,155,0,102,152],
[190,174,172,155,170,238,0,206],
[169,224,174,136,169,188,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,164,167,190,181,168,147],
[176,0,192,178,178,178,170,156],
[176,148,0,169,184,160,177,165],
[173,162,171,0,184,149,160,163],
[150,162,156,156,0,151,151,145],
[159,162,180,191,189,0,166,173],
[172,170,163,180,189,174,0,154],
[193,184,175,177,195,167,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,171,146,160,167,154,170],
[195,0,172,164,175,168,183,190],
[169,168,0,165,168,182,177,183],
[194,176,175,0,176,174,169,186],
[180,165,172,164,0,165,181,184],
[173,172,158,166,175,0,170,171],
[186,157,163,171,159,170,0,170],
[170,150,157,154,156,169,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,164,163,158,157,176,176],
[163,0,171,181,161,153,156,166],
[176,169,0,172,171,189,182,191],
[177,159,168,0,159,147,162,149],
[182,179,169,181,0,178,181,186],
[183,187,151,193,162,0,192,171],
[164,184,158,178,159,148,0,152],
[164,174,149,191,154,169,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,172,179,176,166,176,183],
[163,0,178,170,163,171,171,173],
[168,162,0,158,161,164,152,167],
[161,170,182,0,172,155,161,169],
[164,177,179,168,0,166,170,171],
[174,169,176,185,174,0,172,180],
[164,169,188,179,170,168,0,177],
[157,167,173,171,169,160,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,150,169,178,153,177,138],
[169,0,165,173,177,151,164,143],
[190,175,0,155,187,162,178,145],
[171,167,185,0,176,166,177,169],
[162,163,153,164,0,161,167,156],
[187,189,178,174,179,0,187,170],
[163,176,162,163,173,153,0,158],
[202,197,195,171,184,170,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,170,164,175,171,178,154],
[169,0,163,176,172,180,169,167],
[170,177,0,186,165,188,185,162],
[176,164,154,0,165,193,179,155],
[165,168,175,175,0,179,171,184],
[169,160,152,147,161,0,172,171],
[162,171,155,161,169,168,0,167],
[186,173,178,185,156,169,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,192,157,184,187,160,167],
[167,0,168,178,150,193,176,168],
[148,172,0,141,139,208,152,167],
[183,162,199,0,149,191,151,182],
[156,190,201,191,0,198,186,195],
[153,147,132,149,142,0,140,177],
[180,164,188,189,154,200,0,171],
[173,172,173,158,145,163,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,181,184,154,169,203,177],
[125,0,159,201,158,172,178,173],
[159,181,0,182,131,173,183,160],
[156,139,158,0,153,147,180,158],
[186,182,209,187,0,157,149,183],
[171,168,167,193,183,0,169,142],
[137,162,157,160,191,171,0,215],
[163,167,180,182,157,198,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,191,164,174,175,186,162],
[179,0,196,155,176,174,187,176],
[149,144,0,145,147,164,178,147],
[176,185,195,0,174,180,179,160],
[166,164,193,166,0,175,187,166],
[165,166,176,160,165,0,183,160],
[154,153,162,161,153,157,0,158],
[178,164,193,180,174,180,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,153,166,175,163,168,198],
[163,0,150,160,183,176,170,178],
[187,190,0,179,207,198,170,191],
[174,180,161,0,188,163,177,178],
[165,157,133,152,0,170,181,178],
[177,164,142,177,170,0,159,196],
[172,170,170,163,159,181,0,169],
[142,162,149,162,162,144,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,163,160,179,148,184,172],
[187,0,169,183,184,172,187,171],
[177,171,0,148,168,172,180,166],
[180,157,192,0,182,168,175,173],
[161,156,172,158,0,148,177,155],
[192,168,168,172,192,0,193,171],
[156,153,160,165,163,147,0,148],
[168,169,174,167,185,169,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,143,164,160,181,167,179],
[177,0,170,175,177,187,179,179],
[197,170,0,156,155,197,157,181],
[176,165,184,0,171,178,185,192],
[180,163,185,169,0,205,185,173],
[159,153,143,162,135,0,175,147],
[173,161,183,155,155,165,0,179],
[161,161,159,148,167,193,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,149,178,161,165,164,167],
[178,0,166,189,160,154,178,181],
[191,174,0,201,151,169,152,171],
[162,151,139,0,140,151,156,147],
[179,180,189,200,0,153,180,186],
[175,186,171,189,187,0,182,163],
[176,162,188,184,160,158,0,160],
[173,159,169,193,154,177,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,161,168,152,185,136,144],
[198,0,171,166,170,191,166,170],
[179,169,0,165,160,179,172,156],
[172,174,175,0,176,176,145,140],
[188,170,180,164,0,178,173,173],
[155,149,161,164,162,0,138,142],
[204,174,168,195,167,202,0,188],
[196,170,184,200,167,198,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,166,167,145,174,174,171],
[180,0,162,174,170,177,192,168],
[174,178,0,165,168,178,171,168],
[173,166,175,0,155,179,166,163],
[195,170,172,185,0,177,178,170],
[166,163,162,161,163,0,176,157],
[166,148,169,174,162,164,0,170],
[169,172,172,177,170,183,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,169,151,185,154,153,191],
[188,0,192,167,202,166,189,183],
[171,148,0,146,179,170,176,198],
[189,173,194,0,196,173,167,224],
[155,138,161,144,0,166,174,181],
[186,174,170,167,174,0,179,210],
[187,151,164,173,166,161,0,188],
[149,157,142,116,159,130,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,195,259,159,190,195,177],
[159,0,208,205,111,157,144,128],
[145,132,0,210,143,126,130,178],
[81,135,130,0,130,63,100,99],
[181,229,197,210,0,160,196,213],
[150,183,214,277,180,0,163,213],
[145,196,210,240,144,177,0,208],
[163,212,162,241,127,127,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,164,164,165,171,152,163],
[179,0,169,170,161,174,172,165],
[176,171,0,172,182,169,172,168],
[176,170,168,0,146,181,170,169],
[175,179,158,194,0,186,181,155],
[169,166,171,159,154,0,162,146],
[188,168,168,170,159,178,0,174],
[177,175,172,171,185,194,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,160,178,167,170,159,167],
[186,0,177,161,175,179,181,179],
[180,163,0,175,182,186,161,169],
[162,179,165,0,169,198,152,169],
[173,165,158,171,0,163,169,158],
[170,161,154,142,177,0,156,167],
[181,159,179,188,171,184,0,175],
[173,161,171,171,182,173,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,167,167,161,193,164,157],
[186,0,167,164,164,185,160,174],
[173,173,0,159,177,184,157,174],
[173,176,181,0,163,165,178,176],
[179,176,163,177,0,193,158,161],
[147,155,156,175,147,0,162,165],
[176,180,183,162,182,178,0,172],
[183,166,166,164,179,175,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,191,177,169,173,163,177],
[173,0,177,179,164,171,164,179],
[149,163,0,158,155,168,158,159],
[163,161,182,0,160,178,171,178],
[171,176,185,180,0,175,168,173],
[167,169,172,162,165,0,161,168],
[177,176,182,169,172,179,0,178],
[163,161,181,162,167,172,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,186,177,195,170,176,190],
[166,0,191,191,190,187,208,193],
[154,149,0,174,202,189,181,187],
[163,149,166,0,183,142,160,190],
[145,150,138,157,0,147,140,149],
[170,153,151,198,193,0,179,195],
[164,132,159,180,200,161,0,208],
[150,147,153,150,191,145,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,160,169,181,167,182,175],
[171,0,173,165,177,156,170,164],
[180,167,0,167,179,175,166,160],
[171,175,173,0,187,168,180,168],
[159,163,161,153,0,165,168,157],
[173,184,165,172,175,0,182,173],
[158,170,174,160,172,158,0,159],
[165,176,180,172,183,167,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,165,162,180,181,164,170],
[150,0,169,181,186,194,181,191],
[175,171,0,171,192,177,170,200],
[178,159,169,0,179,179,170,181],
[160,154,148,161,0,174,158,185],
[159,146,163,161,166,0,152,168],
[176,159,170,170,182,188,0,191],
[170,149,140,159,155,172,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,188,177,159,170,188,161],
[161,0,180,154,167,155,176,150],
[152,160,0,146,172,156,181,170],
[163,186,194,0,161,185,195,166],
[181,173,168,179,0,170,181,169],
[170,185,184,155,170,0,183,167],
[152,164,159,145,159,157,0,147],
[179,190,170,174,171,173,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,120,145,150,161,151,120],
[141,0,140,148,164,153,141,148],
[220,200,0,216,211,169,146,178],
[195,192,124,0,173,183,149,139],
[190,176,129,167,0,141,143,126],
[179,187,171,157,199,0,192,168],
[189,199,194,191,197,148,0,199],
[220,192,162,201,214,172,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,156,136,139,155,139,145],
[163,0,195,173,174,181,200,164],
[184,145,0,154,138,172,160,133],
[204,167,186,0,181,184,176,181],
[201,166,202,159,0,172,161,136],
[185,159,168,156,168,0,161,171],
[201,140,180,164,179,179,0,170],
[195,176,207,159,204,169,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,178,204,170,184,189,167],
[165,0,166,167,151,165,177,155],
[162,174,0,185,174,185,184,165],
[136,173,155,0,147,161,167,163],
[170,189,166,193,0,164,185,178],
[156,175,155,179,176,0,176,171],
[151,163,156,173,155,164,0,154],
[173,185,175,177,162,169,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,153,156,154,167,160,170],
[165,0,149,157,153,161,158,146],
[187,191,0,178,167,190,185,174],
[184,183,162,0,174,178,162,165],
[186,187,173,166,0,179,169,154],
[173,179,150,162,161,0,168,159],
[180,182,155,178,171,172,0,161],
[170,194,166,175,186,181,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,149,141,150,173,163,184],
[189,0,172,168,186,184,191,209],
[191,168,0,156,188,170,158,205],
[199,172,184,0,171,178,164,202],
[190,154,152,169,0,176,188,202],
[167,156,170,162,164,0,154,175],
[177,149,182,176,152,186,0,200],
[156,131,135,138,138,165,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,174,166,183,171,170,179],
[151,0,155,144,183,144,145,158],
[166,185,0,163,195,178,182,180],
[174,196,177,0,192,187,168,180],
[157,157,145,148,0,149,141,144],
[169,196,162,153,191,0,176,190],
[170,195,158,172,199,164,0,181],
[161,182,160,160,196,150,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,188,181,195,168,142,162],
[179,0,159,161,192,167,163,176],
[152,181,0,146,172,152,171,187],
[159,179,194,0,157,161,174,171],
[145,148,168,183,0,155,179,181],
[172,173,188,179,185,0,167,176],
[198,177,169,166,161,173,0,157],
[178,164,153,169,159,164,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,178,172,164,171,163,174],
[171,0,189,159,172,168,174,163],
[162,151,0,168,174,164,151,167],
[168,181,172,0,174,179,184,173],
[176,168,166,166,0,169,164,170],
[169,172,176,161,171,0,166,177],
[177,166,189,156,176,174,0,170],
[166,177,173,167,170,163,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,175,166,154,183,178,150],
[163,0,169,164,161,183,168,149],
[165,171,0,169,175,191,178,162],
[174,176,171,0,165,190,164,163],
[186,179,165,175,0,199,173,172],
[157,157,149,150,141,0,161,153],
[162,172,162,176,167,179,0,174],
[190,191,178,177,168,187,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,148,148,152,133,155,165],
[185,0,148,150,157,161,178,160],
[192,192,0,188,170,172,204,169],
[192,190,152,0,173,153,152,159],
[188,183,170,167,0,156,177,195],
[207,179,168,187,184,0,186,193],
[185,162,136,188,163,154,0,159],
[175,180,171,181,145,147,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,171,174,173,176,169,165],
[146,0,159,156,164,165,165,149],
[169,181,0,166,168,163,167,172],
[166,184,174,0,166,154,168,161],
[167,176,172,174,0,158,160,154],
[164,175,177,186,182,0,166,161],
[171,175,173,172,180,174,0,170],
[175,191,168,179,186,179,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,162,164,168,178,172,170],
[179,0,172,174,187,183,169,173],
[178,168,0,172,177,195,175,167],
[176,166,168,0,190,186,165,164],
[172,153,163,150,0,167,164,159],
[162,157,145,154,173,0,166,159],
[168,171,165,175,176,174,0,163],
[170,167,173,176,181,181,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,210,212,161,153,199,163],
[142,0,139,203,186,165,154,141],
[130,201,0,214,164,131,177,130],
[128,137,126,0,123,105,142,129],
[179,154,176,217,0,154,205,156],
[187,175,209,235,186,0,153,175],
[141,186,163,198,135,187,0,164],
[177,199,210,211,184,165,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,181,169,183,175,162,163],
[172,0,172,171,181,183,159,179],
[159,168,0,158,175,168,158,170],
[171,169,182,0,187,185,174,173],
[157,159,165,153,0,163,150,163],
[165,157,172,155,177,0,158,166],
[178,181,182,166,190,182,0,166],
[177,161,170,167,177,174,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,133,117,116,159,124,165],
[203,0,192,170,182,205,175,167],
[207,148,0,138,141,203,151,186],
[223,170,202,0,175,191,173,183],
[224,158,199,165,0,170,172,181],
[181,135,137,149,170,0,130,180],
[216,165,189,167,168,210,0,166],
[175,173,154,157,159,160,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,162,176,207,185,173,160],
[154,0,155,182,154,165,121,129],
[178,185,0,148,141,167,133,145],
[164,158,192,0,202,200,168,167],
[133,186,199,138,0,169,148,172],
[155,175,173,140,171,0,121,175],
[167,219,207,172,192,219,0,184],
[180,211,195,173,168,165,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,160,174,182,146,180,175],
[170,0,157,186,177,173,179,169],
[180,183,0,200,158,163,195,172],
[166,154,140,0,149,151,176,149],
[158,163,182,191,0,152,187,159],
[194,167,177,189,188,0,186,182],
[160,161,145,164,153,154,0,161],
[165,171,168,191,181,158,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,182,184,187,192,187,163],
[149,0,182,173,178,169,178,185],
[158,158,0,172,171,180,169,148],
[156,167,168,0,163,181,165,157],
[153,162,169,177,0,161,158,160],
[148,171,160,159,179,0,164,171],
[153,162,171,175,182,176,0,147],
[177,155,192,183,180,169,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,160,145,167,204,192,176],
[156,0,170,137,173,190,188,146],
[180,170,0,160,172,179,195,169],
[195,203,180,0,202,208,199,169],
[173,167,168,138,0,192,169,142],
[136,150,161,132,148,0,159,132],
[148,152,145,141,171,181,0,161],
[164,194,171,171,198,208,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,175,175,169,170,174,171],
[150,0,161,176,143,167,159,155],
[165,179,0,178,150,162,162,177],
[165,164,162,0,150,163,159,164],
[171,197,190,190,0,167,171,184],
[170,173,178,177,173,0,168,178],
[166,181,178,181,169,172,0,182],
[169,185,163,176,156,162,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,167,163,170,160,152,179],
[178,0,182,188,168,173,182,187],
[173,158,0,194,173,168,163,198],
[177,152,146,0,162,148,130,169],
[170,172,167,178,0,166,152,186],
[180,167,172,192,174,0,168,187],
[188,158,177,210,188,172,0,191],
[161,153,142,171,154,153,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,163,195,186,166,170,187],
[192,0,208,228,180,214,168,212],
[177,132,0,185,180,152,149,189],
[145,112,155,0,152,131,155,179],
[154,160,160,188,0,182,157,185],
[174,126,188,209,158,0,187,203],
[170,172,191,185,183,153,0,224],
[153,128,151,161,155,137,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,169,170,172,160,156,175],
[179,0,165,163,172,174,166,172],
[171,175,0,167,168,162,163,165],
[170,177,173,0,146,174,168,162],
[168,168,172,194,0,173,164,188],
[180,166,178,166,167,0,179,172],
[184,174,177,172,176,161,0,190],
[165,168,175,178,152,168,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,167,190,180,176,180,176],
[157,0,168,179,164,164,175,158],
[173,172,0,171,164,168,167,169],
[150,161,169,0,158,164,169,151],
[160,176,176,182,0,170,187,161],
[164,176,172,176,170,0,170,152],
[160,165,173,171,153,170,0,155],
[164,182,171,189,179,188,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,172,166,179,183,180,164],
[158,0,163,166,168,178,166,172],
[168,177,0,172,175,169,184,180],
[174,174,168,0,179,173,179,176],
[161,172,165,161,0,161,178,171],
[157,162,171,167,179,0,179,178],
[160,174,156,161,162,161,0,171],
[176,168,160,164,169,162,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,198,204,173,181,151,180],
[174,0,186,191,183,190,151,187],
[142,154,0,184,167,174,163,179],
[136,149,156,0,146,157,137,163],
[167,157,173,194,0,181,144,180],
[159,150,166,183,159,0,179,190],
[189,189,177,203,196,161,0,187],
[160,153,161,177,160,150,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,156,149,161,141,170,162],
[192,0,175,169,175,182,197,175],
[184,165,0,168,186,172,181,182],
[191,171,172,0,157,149,180,168],
[179,165,154,183,0,169,180,174],
[199,158,168,191,171,0,179,161],
[170,143,159,160,160,161,0,154],
[178,165,158,172,166,179,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,135,204,237,272,238,203],
[102,0,169,103,135,204,204,135],
[205,171,0,171,237,171,204,136],
[136,237,169,0,169,204,238,169],
[103,205,103,171,0,137,171,171],
[68,136,169,136,203,0,169,135],
[102,136,136,102,169,171,0,68],
[137,205,204,171,169,205,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,159,134,173,153,166,181],
[188,0,191,147,178,125,188,204],
[181,149,0,161,183,164,182,199],
[206,193,179,0,196,198,154,207],
[167,162,157,144,0,155,186,189],
[187,215,176,142,185,0,174,179],
[174,152,158,186,154,166,0,221],
[159,136,141,133,151,161,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,146,154,172,136,143,152],
[183,0,174,200,158,159,163,179],
[194,166,0,207,184,179,176,174],
[186,140,133,0,149,148,171,139],
[168,182,156,191,0,161,168,185],
[204,181,161,192,179,0,195,173],
[197,177,164,169,172,145,0,170],
[188,161,166,201,155,167,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,185,169,193,172,172,195],
[167,0,165,176,168,158,164,180],
[155,175,0,165,159,163,129,177],
[171,164,175,0,149,150,147,166],
[147,172,181,191,0,164,153,173],
[168,182,177,190,176,0,164,184],
[168,176,211,193,187,176,0,197],
[145,160,163,174,167,156,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,167,169,187,164,166,172],
[165,0,164,167,175,165,169,172],
[173,176,0,174,187,184,170,169],
[171,173,166,0,187,174,175,169],
[153,165,153,153,0,163,162,168],
[176,175,156,166,177,0,160,183],
[174,171,170,165,178,180,0,188],
[168,168,171,171,172,157,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,167,178,184,185,185,160],
[152,0,167,200,196,175,146,168],
[173,173,0,205,181,201,157,188],
[162,140,135,0,167,177,150,149],
[156,144,159,173,0,180,144,165],
[155,165,139,163,160,0,132,155],
[155,194,183,190,196,208,0,185],
[180,172,152,191,175,185,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,158,177,168,160,174,158],
[187,0,167,188,180,173,165,180],
[182,173,0,182,174,168,179,165],
[163,152,158,0,171,175,161,168],
[172,160,166,169,0,166,167,171],
[180,167,172,165,174,0,168,169],
[166,175,161,179,173,172,0,173],
[182,160,175,172,169,171,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,157,164,228,191,193,193],
[144,0,182,158,221,184,153,167],
[183,158,0,159,200,179,165,169],
[176,182,181,0,218,178,158,169],
[112,119,140,122,0,156,137,109],
[149,156,161,162,184,0,154,185],
[147,187,175,182,203,186,0,180],
[147,173,171,171,231,155,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,174,176,177,170,178,167],
[144,0,146,151,153,178,146,139],
[166,194,0,169,200,187,173,165],
[164,189,171,0,189,165,185,181],
[163,187,140,151,0,171,140,149],
[170,162,153,175,169,0,156,166],
[162,194,167,155,200,184,0,171],
[173,201,175,159,191,174,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,180,200,189,202,179,170],
[165,0,183,201,188,182,190,174],
[160,157,0,190,171,172,164,163],
[140,139,150,0,161,146,142,153],
[151,152,169,179,0,156,156,155],
[138,158,168,194,184,0,153,160],
[161,150,176,198,184,187,0,172],
[170,166,177,187,185,180,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,169,160,126,183,170,161],
[197,0,185,171,192,210,176,170],
[171,155,0,172,175,204,184,163],
[180,169,168,0,181,205,175,165],
[214,148,165,159,0,207,172,147],
[157,130,136,135,133,0,148,132],
[170,164,156,165,168,192,0,162],
[179,170,177,175,193,208,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,152,147,140,159,150,166],
[186,0,175,169,146,165,165,174],
[188,165,0,169,146,168,157,170],
[193,171,171,0,152,178,169,173],
[200,194,194,188,0,164,189,179],
[181,175,172,162,176,0,176,159],
[190,175,183,171,151,164,0,184],
[174,166,170,167,161,181,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,159,161,145,173,161,161],
[155,0,165,151,153,156,167,153],
[181,175,0,174,163,188,153,172],
[179,189,166,0,165,191,171,164],
[195,187,177,175,0,172,169,168],
[167,184,152,149,168,0,162,142],
[179,173,187,169,171,178,0,174],
[179,187,168,176,172,198,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,159,163,167,158,165,145],
[185,0,170,180,183,172,172,165],
[181,170,0,164,185,173,181,161],
[177,160,176,0,174,172,163,167],
[173,157,155,166,0,162,155,163],
[182,168,167,168,178,0,169,173],
[175,168,159,177,185,171,0,180],
[195,175,179,173,177,167,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,164,173,178,174,206,205],
[135,0,144,143,171,160,171,167],
[176,196,0,168,185,185,194,218],
[167,197,172,0,193,186,207,187],
[162,169,155,147,0,171,186,190],
[166,180,155,154,169,0,205,177],
[134,169,146,133,154,135,0,142],
[135,173,122,153,150,163,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,191,186,182,181,187,170],
[168,0,198,168,181,186,192,183],
[149,142,0,162,162,174,168,154],
[154,172,178,0,168,180,173,181],
[158,159,178,172,0,188,185,171],
[159,154,166,160,152,0,162,174],
[153,148,172,167,155,178,0,160],
[170,157,186,159,169,166,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,163,166,142,170,189,162],
[184,0,181,181,172,193,190,169],
[177,159,0,177,153,183,195,150],
[174,159,163,0,152,178,185,183],
[198,168,187,188,0,209,200,179],
[170,147,157,162,131,0,161,142],
[151,150,145,155,140,179,0,154],
[178,171,190,157,161,198,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,153,166,141,176,167,166],
[164,0,135,162,148,159,169,158],
[187,205,0,181,159,179,190,201],
[174,178,159,0,160,152,158,171],
[199,192,181,180,0,166,183,193],
[164,181,161,188,174,0,180,185],
[173,171,150,182,157,160,0,169],
[174,182,139,169,147,155,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,187,164,167,164,169,171],
[160,0,175,170,160,177,179,153],
[153,165,0,159,155,158,162,151],
[176,170,181,0,177,177,177,170],
[173,180,185,163,0,165,163,168],
[176,163,182,163,175,0,170,169],
[171,161,178,163,177,170,0,160],
[169,187,189,170,172,171,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,182,154,180,174,161,163],
[164,0,171,164,171,178,165,200],
[158,169,0,140,159,170,174,184],
[186,176,200,0,181,169,170,197],
[160,169,181,159,0,162,181,184],
[166,162,170,171,178,0,172,173],
[179,175,166,170,159,168,0,159],
[177,140,156,143,156,167,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,164,214,175,162,188,128],
[190,0,162,168,153,186,199,177],
[176,178,0,168,141,196,201,141],
[126,172,172,0,151,161,199,104],
[165,187,199,189,0,183,212,187],
[178,154,144,179,157,0,197,142],
[152,141,139,141,128,143,0,151],
[212,163,199,236,153,198,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,162,179,171,164,188,183],
[154,0,156,137,157,154,176,174],
[178,184,0,165,162,145,195,180],
[161,203,175,0,174,173,204,190],
[169,183,178,166,0,162,199,180],
[176,186,195,167,178,0,200,193],
[152,164,145,136,141,140,0,162],
[157,166,160,150,160,147,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,165,179,203,194,180,194],
[153,0,159,151,175,168,165,170],
[175,181,0,163,202,177,183,184],
[161,189,177,0,199,175,175,170],
[137,165,138,141,0,150,154,164],
[146,172,163,165,190,0,167,175],
[160,175,157,165,186,173,0,183],
[146,170,156,170,176,165,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,184,178,151,142,128,162],
[202,0,156,165,197,159,171,163],
[156,184,0,173,153,182,159,174],
[162,175,167,0,152,170,124,151],
[189,143,187,188,0,193,151,181],
[198,181,158,170,147,0,165,186],
[212,169,181,216,189,175,0,190],
[178,177,166,189,159,154,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,167,161,145,162,167,163],
[181,0,179,190,178,170,168,171],
[173,161,0,179,154,165,172,169],
[179,150,161,0,161,172,167,157],
[195,162,186,179,0,169,179,174],
[178,170,175,168,171,0,156,173],
[173,172,168,173,161,184,0,167],
[177,169,171,183,166,167,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,164,152,185,177,163,171],
[174,0,178,186,174,199,162,178],
[176,162,0,172,186,172,164,174],
[188,154,168,0,191,193,174,179],
[155,166,154,149,0,173,148,160],
[163,141,168,147,167,0,160,144],
[177,178,176,166,192,180,0,184],
[169,162,166,161,180,196,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,148,102,105,86,166,103],
[215,0,172,126,171,148,233,167],
[192,168,0,148,169,127,211,168],
[238,214,192,0,192,149,214,213],
[235,169,171,148,0,149,170,190],
[254,192,213,191,191,0,276,170],
[174,107,129,126,170,64,0,172],
[237,173,172,127,150,170,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,154,184,165,172,151,185],
[199,0,167,227,173,182,204,220],
[186,173,0,191,157,178,195,175],
[156,113,149,0,155,153,166,132],
[175,167,183,185,0,162,162,197],
[168,158,162,187,178,0,183,172],
[189,136,145,174,178,157,0,168],
[155,120,165,208,143,168,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,180,172,160,172,179,170],
[165,0,185,173,164,182,182,176],
[160,155,0,157,158,174,164,165],
[168,167,183,0,166,173,175,167],
[180,176,182,174,0,187,164,166],
[168,158,166,167,153,0,167,158],
[161,158,176,165,176,173,0,183],
[170,164,175,173,174,182,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,161,148,161,166,172,143],
[192,0,171,183,180,158,183,185],
[179,169,0,167,169,155,169,164],
[192,157,173,0,188,157,183,181],
[179,160,171,152,0,172,208,169],
[174,182,185,183,168,0,192,183],
[168,157,171,157,132,148,0,165],
[197,155,176,159,171,157,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,160,192,170,131,168,189],
[134,0,149,164,144,152,145,156],
[180,191,0,192,165,150,169,187],
[148,176,148,0,133,140,164,181],
[170,196,175,207,0,178,162,180],
[209,188,190,200,162,0,185,201],
[172,195,171,176,178,155,0,193],
[151,184,153,159,160,139,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,180,174,165,171,174,172],
[159,0,181,154,167,161,158,169],
[160,159,0,158,160,168,171,158],
[166,186,182,0,160,167,175,180],
[175,173,180,180,0,185,177,170],
[169,179,172,173,155,0,184,167],
[166,182,169,165,163,156,0,168],
[168,171,182,160,170,173,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,154,169,177,172,156,178],
[200,0,170,183,180,190,179,207],
[186,170,0,187,174,181,172,196],
[171,157,153,0,150,170,158,174],
[163,160,166,190,0,178,178,175],
[168,150,159,170,162,0,160,167],
[184,161,168,182,162,180,0,194],
[162,133,144,166,165,173,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,164,166,171,171,162,182],
[162,0,171,166,165,184,164,178],
[176,169,0,163,170,174,173,179],
[174,174,177,0,159,187,171,181],
[169,175,170,181,0,178,170,182],
[169,156,166,153,162,0,164,168],
[178,176,167,169,170,176,0,170],
[158,162,161,159,158,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,177,179,175,176,162,185],
[175,0,166,168,172,165,164,164],
[163,174,0,167,172,164,166,165],
[161,172,173,0,164,168,158,161],
[165,168,168,176,0,159,154,169],
[164,175,176,172,181,0,177,183],
[178,176,174,182,186,163,0,164],
[155,176,175,179,171,157,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,177,211,178,177,165,188],
[175,0,178,186,175,189,186,144],
[163,162,0,220,199,196,208,150],
[129,154,120,0,123,162,161,124],
[162,165,141,217,0,172,164,161],
[163,151,144,178,168,0,125,130],
[175,154,132,179,176,215,0,132],
[152,196,190,216,179,210,208,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,273,135,204,203,204,271],
[69,0,137,135,204,69,135,273],
[67,203,0,67,136,203,136,203],
[205,205,273,0,138,205,204,272],
[136,136,204,202,0,136,202,271],
[137,271,137,135,204,0,135,204],
[136,205,204,136,138,205,0,272],
[69,67,137,68,69,136,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,141,162,141,142,147,166],
[182,0,167,182,161,141,173,168],
[199,173,0,190,161,171,183,181],
[178,158,150,0,160,139,172,169],
[199,179,179,180,0,165,180,177],
[198,199,169,201,175,0,177,192],
[193,167,157,168,160,163,0,160],
[174,172,159,171,163,148,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,197,184,183,173,179,163],
[163,0,195,171,163,175,164,164],
[143,145,0,172,153,149,137,142],
[156,169,168,0,166,165,158,172],
[157,177,187,174,0,178,177,166],
[167,165,191,175,162,0,161,148],
[161,176,203,182,163,179,0,170],
[177,176,198,168,174,192,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,145,166,189,168,191,144],
[153,0,173,130,150,127,150,168],
[195,167,0,108,130,106,129,103],
[174,210,232,0,170,188,149,188],
[151,190,210,170,0,168,171,207],
[172,213,234,152,172,0,172,232],
[149,190,211,191,169,168,0,165],
[196,172,237,152,133,108,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,165,175,166,194,181,177],
[157,0,164,172,177,177,159,168],
[175,176,0,184,171,184,156,174],
[165,168,156,0,161,172,163,154],
[174,163,169,179,0,173,156,160],
[146,163,156,168,167,0,161,167],
[159,181,184,177,184,179,0,185],
[163,172,166,186,180,173,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,162,174,171,195,161,196],
[172,0,178,176,171,183,168,179],
[178,162,0,168,166,178,162,184],
[166,164,172,0,157,181,165,179],
[169,169,174,183,0,184,172,192],
[145,157,162,159,156,0,153,164],
[179,172,178,175,168,187,0,189],
[144,161,156,161,148,176,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,151,182,176,172,185,189],
[156,0,158,169,147,170,175,161],
[189,182,0,166,166,161,186,168],
[158,171,174,0,174,195,207,183],
[164,193,174,166,0,165,191,182],
[168,170,179,145,175,0,193,164],
[155,165,154,133,149,147,0,146],
[151,179,172,157,158,176,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,161,175,177,174,163,169],
[177,0,177,176,183,171,170,176],
[179,163,0,180,169,171,165,174],
[165,164,160,0,157,154,155,158],
[163,157,171,183,0,150,166,167],
[166,169,169,186,190,0,181,181],
[177,170,175,185,174,159,0,172],
[171,164,166,182,173,159,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,198,170,162,197,185,205],
[156,0,195,173,170,198,189,216],
[142,145,0,143,156,182,143,180],
[170,167,197,0,133,174,168,196],
[178,170,184,207,0,189,202,207],
[143,142,158,166,151,0,157,169],
[155,151,197,172,138,183,0,166],
[135,124,160,144,133,171,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,178,195,188,180,171,166],
[160,0,163,179,183,176,166,171],
[162,177,0,182,169,170,175,161],
[145,161,158,0,160,149,149,160],
[152,157,171,180,0,157,170,166],
[160,164,170,191,183,0,177,171],
[169,174,165,191,170,163,0,167],
[174,169,179,180,174,169,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,184,182,181,165,174,167],
[144,0,164,177,159,156,158,146],
[156,176,0,178,175,172,174,163],
[158,163,162,0,155,162,163,154],
[159,181,165,185,0,168,166,165],
[175,184,168,178,172,0,166,164],
[166,182,166,177,174,174,0,171],
[173,194,177,186,175,176,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,165,164,170,167,160,172],
[186,0,169,164,152,185,167,160],
[175,171,0,173,150,156,170,169],
[176,176,167,0,168,184,186,166],
[170,188,190,172,0,173,188,176],
[173,155,184,156,167,0,160,182],
[180,173,170,154,152,180,0,167],
[168,180,171,174,164,158,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,166,170,174,187,173,180],
[158,0,160,176,163,182,174,171],
[174,180,0,184,169,186,171,179],
[170,164,156,0,154,178,166,164],
[166,177,171,186,0,188,174,178],
[153,158,154,162,152,0,163,163],
[167,166,169,174,166,177,0,170],
[160,169,161,176,162,177,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,171,191,180,159,181,170],
[163,0,171,175,184,171,186,172],
[169,169,0,173,179,160,175,165],
[149,165,167,0,169,162,170,172],
[160,156,161,171,0,162,167,154],
[181,169,180,178,178,0,170,169],
[159,154,165,170,173,170,0,156],
[170,168,175,168,186,171,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,174,164,167,179,168,164],
[166,0,176,169,166,169,175,161],
[166,164,0,161,160,165,180,161],
[176,171,179,0,165,183,179,164],
[173,174,180,175,0,182,169,175],
[161,171,175,157,158,0,177,157],
[172,165,160,161,171,163,0,162],
[176,179,179,176,165,183,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,168,170,165,168,164,170],
[174,0,188,159,164,173,178,174],
[172,152,0,159,163,173,177,168],
[170,181,181,0,173,166,159,170],
[175,176,177,167,0,173,167,176],
[172,167,167,174,167,0,167,162],
[176,162,163,181,173,173,0,164],
[170,166,172,170,164,178,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,171,184,179,174,189,176],
[170,0,172,160,168,175,184,167],
[169,168,0,166,167,170,177,166],
[156,180,174,0,176,174,176,165],
[161,172,173,164,0,173,169,168],
[166,165,170,166,167,0,173,175],
[151,156,163,164,171,167,0,174],
[164,173,174,175,172,165,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,175,183,195,192,154,125],
[167,0,185,178,195,179,168,183],
[165,155,0,164,165,160,170,173],
[157,162,176,0,166,155,176,153],
[145,145,175,174,0,176,179,146],
[148,161,180,185,164,0,172,179],
[186,172,170,164,161,168,0,152],
[215,157,167,187,194,161,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,180,154,155,152,174,166],
[163,0,185,186,177,180,179,179],
[160,155,0,136,150,131,171,154],
[186,154,204,0,169,185,191,154],
[185,163,190,171,0,190,179,139],
[188,160,209,155,150,0,188,166],
[166,161,169,149,161,152,0,147],
[174,161,186,186,201,174,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,164,183,171,150,172,176],
[177,0,171,191,181,170,161,179],
[176,169,0,178,181,175,174,180],
[157,149,162,0,153,146,158,160],
[169,159,159,187,0,168,148,161],
[190,170,165,194,172,0,155,172],
[168,179,166,182,192,185,0,170],
[164,161,160,180,179,168,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,166,173,172,174,165,172],
[149,0,173,167,157,173,153,164],
[174,167,0,169,166,175,180,180],
[167,173,171,0,153,161,189,163],
[168,183,174,187,0,172,158,183],
[166,167,165,179,168,0,176,170],
[175,187,160,151,182,164,0,173],
[168,176,160,177,157,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,201,187,150,193,182,184],
[179,0,188,198,169,185,210,188],
[139,152,0,160,152,145,178,162],
[153,142,180,0,173,174,184,154],
[190,171,188,167,0,177,198,192],
[147,155,195,166,163,0,199,171],
[158,130,162,156,142,141,0,150],
[156,152,178,186,148,169,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,170,158,165,166,170,165],
[165,0,157,166,173,152,167,165],
[170,183,0,176,178,167,160,172],
[182,174,164,0,173,162,176,174],
[175,167,162,167,0,162,165,173],
[174,188,173,178,178,0,176,166],
[170,173,180,164,175,164,0,162],
[175,175,168,166,167,174,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,193,169,182,192,181,180],
[159,0,181,172,180,185,179,163],
[147,159,0,157,171,181,168,163],
[171,168,183,0,164,172,193,173],
[158,160,169,176,0,169,179,171],
[148,155,159,168,171,0,156,172],
[159,161,172,147,161,184,0,161],
[160,177,177,167,169,168,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,168,253,85,340,172,172],
[172,0,253,168,85,255,172,87],
[172,87,0,172,85,172,172,87],
[87,172,168,0,85,170,172,87],
[255,255,255,255,0,255,170,170],
[0,85,168,170,85,0,172,85],
[168,168,168,168,170,168,0,83],
[168,253,253,253,170,255,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,180,184,201,186,191,165],
[165,0,190,194,210,191,173,191],
[160,150,0,178,161,169,163,162],
[156,146,162,0,180,155,166,159],
[139,130,179,160,0,149,156,153],
[154,149,171,185,191,0,188,167],
[149,167,177,174,184,152,0,152],
[175,149,178,181,187,173,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,151,155,171,186,168,174],
[158,0,172,152,167,169,148,179],
[189,168,0,176,180,187,184,190],
[185,188,164,0,190,173,178,187],
[169,173,160,150,0,166,160,180],
[154,171,153,167,174,0,161,185],
[172,192,156,162,180,179,0,193],
[166,161,150,153,160,155,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,164,196,172,169,171,146],
[154,0,190,188,176,164,181,170],
[176,150,0,170,180,169,163,157],
[144,152,170,0,160,135,151,138],
[168,164,160,180,0,151,177,173],
[171,176,171,205,189,0,180,166],
[169,159,177,189,163,160,0,161],
[194,170,183,202,167,174,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,141,168,158,158,158,160],
[163,0,166,156,170,161,181,175],
[199,174,0,152,168,177,175,161],
[172,184,188,0,185,176,160,175],
[182,170,172,155,0,170,161,163],
[182,179,163,164,170,0,184,156],
[182,159,165,180,179,156,0,165],
[180,165,179,165,177,184,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,185,182,169,173,186,164],
[155,0,176,166,156,180,172,164],
[155,164,0,161,151,167,174,148],
[158,174,179,0,170,183,162,178],
[171,184,189,170,0,187,173,184],
[167,160,173,157,153,0,183,163],
[154,168,166,178,167,157,0,161],
[176,176,192,162,156,177,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,176,184,167,178,160,172],
[173,0,184,164,173,181,172,179],
[164,156,0,159,159,165,162,172],
[156,176,181,0,167,168,169,164],
[173,167,181,173,0,176,164,176],
[162,159,175,172,164,0,164,168],
[180,168,178,171,176,176,0,170],
[168,161,168,176,164,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,156,166,165,166,173,165],
[196,0,178,177,166,187,187,183],
[184,162,0,174,185,188,166,178],
[174,163,166,0,183,175,169,180],
[175,174,155,157,0,181,175,178],
[174,153,152,165,159,0,166,167],
[167,153,174,171,165,174,0,181],
[175,157,162,160,162,173,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,171,162,178,175,196,184],
[165,0,164,169,170,170,179,186],
[169,176,0,166,175,166,176,192],
[178,171,174,0,168,167,182,180],
[162,170,165,172,0,184,178,183],
[165,170,174,173,156,0,172,182],
[144,161,164,158,162,168,0,170],
[156,154,148,160,157,158,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,178,159,182,178,171,157],
[147,0,161,150,171,154,163,143],
[162,179,0,161,174,166,174,165],
[181,190,179,0,181,179,188,169],
[158,169,166,159,0,168,179,158],
[162,186,174,161,172,0,184,173],
[169,177,166,152,161,156,0,157],
[183,197,175,171,182,167,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,175,150,174,161,173,166],
[169,0,169,167,168,181,184,173],
[165,171,0,156,172,164,166,162],
[190,173,184,0,167,175,191,173],
[166,172,168,173,0,165,184,180],
[179,159,176,165,175,0,178,168],
[167,156,174,149,156,162,0,162],
[174,167,178,167,160,172,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,174,170,183,170,173,180],
[167,0,166,164,167,171,170,167],
[166,174,0,164,172,174,181,169],
[170,176,176,0,187,167,176,188],
[157,173,168,153,0,171,169,168],
[170,169,166,173,169,0,172,165],
[167,170,159,164,171,168,0,160],
[160,173,171,152,172,175,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,155,158,176,154,163,170],
[185,0,181,175,173,154,185,170],
[185,159,0,188,190,153,184,160],
[182,165,152,0,170,156,173,157],
[164,167,150,170,0,171,166,154],
[186,186,187,184,169,0,184,176],
[177,155,156,167,174,156,0,161],
[170,170,180,183,186,164,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,157,169,151,158,152,149],
[163,0,176,192,190,180,174,202],
[183,164,0,187,189,171,144,166],
[171,148,153,0,129,136,119,152],
[189,150,151,211,0,153,159,172],
[182,160,169,204,187,0,157,173],
[188,166,196,221,181,183,0,174],
[191,138,174,188,168,167,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,170,171,170,181,166,162],
[177,0,177,170,171,180,181,175],
[170,163,0,166,175,186,173,168],
[169,170,174,0,166,203,183,185],
[170,169,165,174,0,184,163,178],
[159,160,154,137,156,0,156,165],
[174,159,167,157,177,184,0,172],
[178,165,172,155,162,175,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,161,139,165,170,154,170],
[181,0,168,158,164,180,170,200],
[179,172,0,172,182,174,170,182],
[201,182,168,0,188,186,174,169],
[175,176,158,152,0,177,156,173],
[170,160,166,154,163,0,136,176],
[186,170,170,166,184,204,0,184],
[170,140,158,171,167,164,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,103,102,135,33,136,102],
[170,0,68,169,136,136,135,103],
[237,272,0,271,169,203,272,204],
[238,171,69,0,170,171,137,136],
[205,204,171,170,0,170,238,170],
[307,204,137,169,170,0,204,205],
[204,205,68,203,102,136,0,102],
[238,237,136,204,170,135,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,171,166,176,173,170,170],
[173,0,174,179,178,161,169,171],
[169,166,0,174,180,173,170,167],
[174,161,166,0,172,167,165,162],
[164,162,160,168,0,173,164,166],
[167,179,167,173,167,0,165,172],
[170,171,170,175,176,175,0,167],
[170,169,173,178,174,168,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,157,154,157,157,165,156],
[192,0,173,177,157,173,166,156],
[183,167,0,157,177,167,175,188],
[186,163,183,0,149,170,175,160],
[183,183,163,191,0,189,188,161],
[183,167,173,170,151,0,188,162],
[175,174,165,165,152,152,0,167],
[184,184,152,180,179,178,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,179,150,187,189,170,176],
[145,0,140,135,177,170,140,197],
[161,200,0,176,180,207,210,219],
[190,205,164,0,191,211,175,209],
[153,163,160,149,0,179,143,189],
[151,170,133,129,161,0,145,149],
[170,200,130,165,197,195,0,195],
[164,143,121,131,151,191,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,165,165,158,182,170,173],
[163,0,186,184,162,193,184,187],
[175,154,0,158,157,171,162,182],
[175,156,182,0,176,186,173,185],
[182,178,183,164,0,190,185,193],
[158,147,169,154,150,0,160,169],
[170,156,178,167,155,180,0,184],
[167,153,158,155,147,171,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,190,167,165,157,169,171],
[170,0,172,172,192,169,172,168],
[150,168,0,167,157,154,150,157],
[173,168,173,0,170,164,166,163],
[175,148,183,170,0,165,157,175],
[183,171,186,176,175,0,163,168],
[171,168,190,174,183,177,0,170],
[169,172,183,177,165,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,150,168,174,147,170,160],
[160,0,147,171,149,150,167,144],
[190,193,0,186,190,172,167,171],
[172,169,154,0,171,151,162,161],
[166,191,150,169,0,164,176,159],
[193,190,168,189,176,0,174,172],
[170,173,173,178,164,166,0,158],
[180,196,169,179,181,168,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,114,166,177,170,189,163],
[157,0,138,169,212,164,188,126],
[226,202,0,163,185,164,190,183],
[174,171,177,0,199,163,176,157],
[163,128,155,141,0,156,173,128],
[170,176,176,177,184,0,192,129],
[151,152,150,164,167,148,0,129],
[177,214,157,183,212,211,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,185,165,188,176,180,177],
[161,0,174,183,186,178,163,184],
[155,166,0,162,186,174,168,174],
[175,157,178,0,187,175,170,190],
[152,154,154,153,0,157,149,166],
[164,162,166,165,183,0,167,182],
[160,177,172,170,191,173,0,177],
[163,156,166,150,174,158,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,178,164,159,173,169,151],
[184,0,192,167,173,178,154,152],
[162,148,0,156,165,142,151,146],
[176,173,184,0,175,178,172,161],
[181,167,175,165,0,161,150,150],
[167,162,198,162,179,0,169,144],
[171,186,189,168,190,171,0,175],
[189,188,194,179,190,196,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,200,198,214,196,196,167],
[148,0,172,153,196,171,157,165],
[140,168,0,161,169,154,152,129],
[142,187,179,0,190,175,179,160],
[126,144,171,150,0,159,137,142],
[144,169,186,165,181,0,153,165],
[144,183,188,161,203,187,0,171],
[173,175,211,180,198,175,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,165,180,168,180,176,169],
[168,0,183,191,173,169,179,168],
[175,157,0,184,156,174,192,189],
[160,149,156,0,165,175,191,164],
[172,167,184,175,0,185,179,155],
[160,171,166,165,155,0,171,169],
[164,161,148,149,161,169,0,155],
[171,172,151,176,185,171,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,203,189,191,177,167,177],
[162,0,179,167,163,177,142,162],
[137,161,0,163,166,194,169,191],
[151,173,177,0,167,159,180,184],
[149,177,174,173,0,171,181,164],
[163,163,146,181,169,0,153,172],
[173,198,171,160,159,187,0,175],
[163,178,149,156,176,168,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,180,172,182,176,168,174],
[166,0,163,173,155,175,179,171],
[160,177,0,175,174,170,165,183],
[168,167,165,0,165,157,171,167],
[158,185,166,175,0,177,156,168],
[164,165,170,183,163,0,169,168],
[172,161,175,169,184,171,0,170],
[166,169,157,173,172,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,171,178,173,168,161,180],
[165,0,168,174,170,182,170,173],
[169,172,0,169,168,174,160,172],
[162,166,171,0,170,179,167,172],
[167,170,172,170,0,179,170,180],
[172,158,166,161,161,0,159,173],
[179,170,180,173,170,181,0,176],
[160,167,168,168,160,167,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,172,144,151,163,166,155],
[191,0,194,151,159,189,191,188],
[168,146,0,148,144,176,197,168],
[196,189,192,0,170,197,207,195],
[189,181,196,170,0,186,195,183],
[177,151,164,143,154,0,200,170],
[174,149,143,133,145,140,0,158],
[185,152,172,145,157,170,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,156,170,163,143,168,151],
[163,0,167,171,169,162,178,170],
[184,173,0,155,170,145,182,181],
[170,169,185,0,174,177,173,170],
[177,171,170,166,0,152,177,174],
[197,178,195,163,188,0,194,178],
[172,162,158,167,163,146,0,149],
[189,170,159,170,166,162,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,167,166,168,174,180,176],
[155,0,161,173,167,173,170,166],
[173,179,0,172,156,170,158,188],
[174,167,168,0,159,166,164,165],
[172,173,184,181,0,166,158,171],
[166,167,170,174,174,0,161,173],
[160,170,182,176,182,179,0,175],
[164,174,152,175,169,167,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,156,164,167,167,159,164],
[192,0,159,177,157,187,181,182],
[184,181,0,185,165,197,195,178],
[176,163,155,0,154,178,174,173],
[173,183,175,186,0,192,167,179],
[173,153,143,162,148,0,170,168],
[181,159,145,166,173,170,0,182],
[176,158,162,167,161,172,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,170,175,184,163,172,167],
[155,0,158,171,178,168,152,164],
[170,182,0,171,186,171,169,172],
[165,169,169,0,183,162,163,175],
[156,162,154,157,0,154,152,160],
[177,172,169,178,186,0,169,170],
[168,188,171,177,188,171,0,167],
[173,176,168,165,180,170,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,183,202,191,222,219,155],
[188,0,229,171,209,217,156,172],
[157,111,0,169,169,189,158,113],
[138,169,171,0,159,201,160,153],
[149,131,171,181,0,189,151,165],
[118,123,151,139,151,0,156,124],
[121,184,182,180,189,184,0,178],
[185,168,227,187,175,216,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,181,173,168,183,180,193],
[156,0,155,160,146,165,157,184],
[159,185,0,158,160,183,182,182],
[167,180,182,0,172,176,176,187],
[172,194,180,168,0,173,185,187],
[157,175,157,164,167,0,166,184],
[160,183,158,164,155,174,0,185],
[147,156,158,153,153,156,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,209,167,253,211,253,168],
[172,0,210,124,210,124,254,43],
[131,130,0,44,88,43,214,87],
[173,216,296,0,213,85,299,172],
[87,130,252,127,0,126,255,130],
[129,216,297,255,214,0,297,129],
[87,86,126,41,85,43,0,43],
[172,297,253,168,210,211,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,165,166,166,159,171,157],
[157,0,155,148,157,152,159,157],
[175,185,0,162,159,154,169,161],
[174,192,178,0,171,177,187,167],
[174,183,181,169,0,179,180,173],
[181,188,186,163,161,0,181,167],
[169,181,171,153,160,159,0,151],
[183,183,179,173,167,173,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,183,176,168,194,192,172],
[159,0,156,173,174,186,199,165],
[157,184,0,152,155,173,189,148],
[164,167,188,0,169,191,203,176],
[172,166,185,171,0,183,205,147],
[146,154,167,149,157,0,165,142],
[148,141,151,137,135,175,0,134],
[168,175,192,164,193,198,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,167,158,178,177,182,163],
[174,0,179,174,189,178,201,167],
[173,161,0,170,191,173,187,171],
[182,166,170,0,180,170,191,173],
[162,151,149,160,0,180,183,152],
[163,162,167,170,160,0,184,160],
[158,139,153,149,157,156,0,166],
[177,173,169,167,188,180,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,157,172,157,153,174,167],
[170,0,148,178,165,149,183,174],
[183,192,0,180,183,170,193,186],
[168,162,160,0,156,150,190,173],
[183,175,157,184,0,164,183,186],
[187,191,170,190,176,0,199,193],
[166,157,147,150,157,141,0,167],
[173,166,154,167,154,147,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,166,164,156,172,174,177],
[149,0,138,147,167,157,157,168],
[174,202,0,169,192,181,194,175],
[176,193,171,0,174,170,185,174],
[184,173,148,166,0,165,159,170],
[168,183,159,170,175,0,184,172],
[166,183,146,155,181,156,0,163],
[163,172,165,166,170,168,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,170,176,153,155,165,162],
[173,0,175,180,172,186,170,176],
[170,165,0,164,170,169,184,163],
[164,160,176,0,164,170,165,143],
[187,168,170,176,0,163,177,159],
[185,154,171,170,177,0,179,167],
[175,170,156,175,163,161,0,173],
[178,164,177,197,181,173,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,180,175,149,174,185,168],
[186,0,177,169,190,179,173,172],
[160,163,0,131,139,178,204,181],
[165,171,209,0,152,177,180,189],
[191,150,201,188,0,185,223,192],
[166,161,162,163,155,0,179,185],
[155,167,136,160,117,161,0,178],
[172,168,159,151,148,155,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,167,160,170,163,149,172],
[161,0,168,162,173,164,152,164],
[173,172,0,177,164,175,173,168],
[180,178,163,0,179,175,175,175],
[170,167,176,161,0,179,175,161],
[177,176,165,165,161,0,171,160],
[191,188,167,165,165,169,0,175],
[168,176,172,165,179,180,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,180,156,150,154,145,180],
[187,0,185,177,171,166,157,174],
[160,155,0,161,154,160,151,163],
[184,163,179,0,178,173,173,188],
[190,169,186,162,0,167,164,182],
[186,174,180,167,173,0,153,171],
[195,183,189,167,176,187,0,185],
[160,166,177,152,158,169,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,154,153,155,147,171,177],
[168,0,153,168,171,158,168,164],
[186,187,0,179,176,156,166,178],
[187,172,161,0,174,175,172,164],
[185,169,164,166,0,164,171,177],
[193,182,184,165,176,0,184,187],
[169,172,174,168,169,156,0,169],
[163,176,162,176,163,153,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,165,183,173,173,174,176],
[161,0,167,170,176,163,175,166],
[175,173,0,183,169,167,171,186],
[157,170,157,0,175,145,162,157],
[167,164,171,165,0,163,179,167],
[167,177,173,195,177,0,180,169],
[166,165,169,178,161,160,0,151],
[164,174,154,183,173,171,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,152,169,158,157,157,170],
[190,0,187,182,168,180,185,176],
[188,153,0,188,178,166,181,168],
[171,158,152,0,174,151,155,149],
[182,172,162,166,0,160,161,149],
[183,160,174,189,180,0,167,174],
[183,155,159,185,179,173,0,166],
[170,164,172,191,191,166,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,164,171,171,180,174,174],
[159,0,171,182,161,166,157,182],
[176,169,0,186,160,166,174,175],
[169,158,154,0,148,167,173,178],
[169,179,180,192,0,185,186,200],
[160,174,174,173,155,0,157,164],
[166,183,166,167,154,183,0,167],
[166,158,165,162,140,176,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,168,172,167,174,172,173],
[170,0,179,165,179,178,159,175],
[172,161,0,170,163,174,181,179],
[168,175,170,0,186,181,173,180],
[173,161,177,154,0,175,162,178],
[166,162,166,159,165,0,153,162],
[168,181,159,167,178,187,0,177],
[167,165,161,160,162,178,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,185,135,151,150,155,159],
[152,0,158,151,174,165,151,149],
[155,182,0,144,156,169,158,128],
[205,189,196,0,167,202,163,180],
[189,166,184,173,0,173,195,153],
[190,175,171,138,167,0,167,156],
[185,189,182,177,145,173,0,158],
[181,191,212,160,187,184,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,177,172,170,173,195,179],
[159,0,183,171,174,167,167,161],
[163,157,0,171,159,166,168,175],
[168,169,169,0,176,180,191,172],
[170,166,181,164,0,177,173,169],
[167,173,174,160,163,0,169,170],
[145,173,172,149,167,171,0,165],
[161,179,165,168,171,170,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,161,160,153,152,174,156],
[201,0,168,162,169,171,194,171],
[179,172,0,146,147,181,176,162],
[180,178,194,0,161,190,198,178],
[187,171,193,179,0,169,202,165],
[188,169,159,150,171,0,189,162],
[166,146,164,142,138,151,0,152],
[184,169,178,162,175,178,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,167,160,150,132,176,160],
[170,0,186,186,180,174,192,191],
[173,154,0,150,162,147,155,138],
[180,154,190,0,162,154,178,161],
[190,160,178,178,0,151,173,170],
[208,166,193,186,189,0,182,173],
[164,148,185,162,167,158,0,154],
[180,149,202,179,170,167,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,164,162,151,157,152,152],
[188,0,168,160,169,166,162,155],
[176,172,0,157,165,162,170,162],
[178,180,183,0,174,179,172,166],
[189,171,175,166,0,166,169,154],
[183,174,178,161,174,0,171,166],
[188,178,170,168,171,169,0,171],
[188,185,178,174,186,174,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,207,200,179,193,176,177],
[186,0,198,171,188,192,168,181],
[133,142,0,131,149,166,113,156],
[140,169,209,0,159,175,153,165],
[161,152,191,181,0,185,164,175],
[147,148,174,165,155,0,152,158],
[164,172,227,187,176,188,0,169],
[163,159,184,175,165,182,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,150,158,144,169,160,156],
[170,0,147,194,155,157,163,170],
[190,193,0,199,170,189,180,185],
[182,146,141,0,135,156,156,148],
[196,185,170,205,0,193,172,174],
[171,183,151,184,147,0,171,172],
[180,177,160,184,168,169,0,180],
[184,170,155,192,166,168,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,179,189,167,200,181,169],
[176,0,157,162,140,174,181,152],
[161,183,0,126,140,134,142,141],
[151,178,214,0,203,178,204,169],
[173,200,200,137,0,155,183,143],
[140,166,206,162,185,0,192,189],
[159,159,198,136,157,148,0,153],
[171,188,199,171,197,151,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,179,170,166,178,164,174],
[161,0,174,168,157,171,171,179],
[161,166,0,154,160,150,164,163],
[170,172,186,0,162,173,176,167],
[174,183,180,178,0,175,154,172],
[162,169,190,167,165,0,161,162],
[176,169,176,164,186,179,0,188],
[166,161,177,173,168,178,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,172,171,149,163,189,165],
[157,0,178,166,172,145,171,158],
[168,162,0,175,174,161,161,155],
[169,174,165,0,184,164,165,158],
[191,168,166,156,0,171,178,167],
[177,195,179,176,169,0,181,182],
[151,169,179,175,162,159,0,161],
[175,182,185,182,173,158,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,162,180,195,187,174,195],
[175,0,176,178,165,173,152,174],
[178,164,0,191,171,168,158,206],
[160,162,149,0,159,161,147,183],
[145,175,169,181,0,185,148,176],
[153,167,172,179,155,0,153,176],
[166,188,182,193,192,187,0,191],
[145,166,134,157,164,164,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,172,170,165,165,173,151],
[166,0,165,182,161,172,170,168],
[168,175,0,164,167,173,157,161],
[170,158,176,0,167,171,160,170],
[175,179,173,173,0,176,178,161],
[175,168,167,169,164,0,170,156],
[167,170,183,180,162,170,0,162],
[189,172,179,170,179,184,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,155,172,160,151,154,181],
[195,0,164,185,179,166,180,186],
[185,176,0,186,179,173,167,184],
[168,155,154,0,162,156,152,187],
[180,161,161,178,0,166,170,184],
[189,174,167,184,174,0,170,186],
[186,160,173,188,170,170,0,184],
[159,154,156,153,156,154,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,175,179,153,165,177,155],
[172,0,179,179,174,165,182,174],
[165,161,0,170,164,175,161,165],
[161,161,170,0,152,154,169,148],
[187,166,176,188,0,169,186,164],
[175,175,165,186,171,0,174,162],
[163,158,179,171,154,166,0,154],
[185,166,175,192,176,178,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,158,175,167,169,173,189],
[174,0,171,168,173,174,179,188],
[182,169,0,175,174,173,178,188],
[165,172,165,0,168,171,168,183],
[173,167,166,172,0,171,177,186],
[171,166,167,169,169,0,169,166],
[167,161,162,172,163,171,0,173],
[151,152,152,157,154,174,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,169,165,178,169,187,150],
[164,0,159,170,156,157,174,157],
[171,181,0,157,183,166,178,162],
[175,170,183,0,188,182,182,168],
[162,184,157,152,0,154,176,170],
[171,183,174,158,186,0,182,165],
[153,166,162,158,164,158,0,153],
[190,183,178,172,170,175,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,165,163,171,166,168,165],
[165,0,162,161,168,174,155,155],
[175,178,0,168,180,177,162,170],
[177,179,172,0,176,178,172,165],
[169,172,160,164,0,167,161,161],
[174,166,163,162,173,0,163,175],
[172,185,178,168,179,177,0,164],
[175,185,170,175,179,165,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,193,187,145,169,166,166],
[187,0,194,196,160,169,173,181],
[147,146,0,172,144,147,146,129],
[153,144,168,0,148,145,137,138],
[195,180,196,192,0,185,164,198],
[171,171,193,195,155,0,148,159],
[174,167,194,203,176,192,0,201],
[174,159,211,202,142,181,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,147,130,218,167,182,177],
[158,0,139,136,215,122,191,144],
[193,201,0,162,197,142,181,175],
[210,204,178,0,235,166,212,179],
[122,125,143,105,0,140,171,128],
[173,218,198,174,200,0,209,168],
[158,149,159,128,169,131,0,135],
[163,196,165,161,212,172,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,173,162,163,170,170,150],
[160,0,175,156,186,153,158,169],
[167,165,0,176,159,155,149,160],
[178,184,164,0,167,155,161,167],
[177,154,181,173,0,184,174,177],
[170,187,185,185,156,0,173,169],
[170,182,191,179,166,167,0,182],
[190,171,180,173,163,171,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,178,170,172,192,158,160],
[136,0,157,142,166,192,175,165],
[162,183,0,186,175,191,184,182],
[170,198,154,0,180,181,178,168],
[168,174,165,160,0,199,173,171],
[148,148,149,159,141,0,146,151],
[182,165,156,162,167,194,0,156],
[180,175,158,172,169,189,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,177,180,172,179,190,184],
[174,0,173,187,168,166,176,185],
[163,167,0,172,162,158,158,192],
[160,153,168,0,161,164,152,184],
[168,172,178,179,0,172,184,187],
[161,174,182,176,168,0,189,197],
[150,164,182,188,156,151,0,182],
[156,155,148,156,153,143,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,190,160,210,196,165,241],
[167,0,161,135,190,156,134,184],
[150,179,0,147,165,157,178,188],
[180,205,193,0,173,188,164,203],
[130,150,175,167,0,171,149,199],
[144,184,183,152,169,0,163,182],
[175,206,162,176,191,177,0,143],
[99,156,152,137,141,158,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,169,162,176,173,188,173],
[156,0,157,175,173,175,167,174],
[171,183,0,165,174,175,170,171],
[178,165,175,0,172,169,185,161],
[164,167,166,168,0,172,173,169],
[167,165,165,171,168,0,171,175],
[152,173,170,155,167,169,0,166],
[167,166,169,179,171,165,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,166,175,159,166,175,163],
[160,0,159,172,148,152,169,158],
[174,181,0,168,174,183,181,170],
[165,168,172,0,182,179,189,182],
[181,192,166,158,0,170,173,173],
[174,188,157,161,170,0,173,171],
[165,171,159,151,167,167,0,157],
[177,182,170,158,167,169,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,172,162,172,153,153,160],
[178,0,175,154,153,169,157,174],
[168,165,0,162,153,165,167,162],
[178,186,178,0,191,182,166,185],
[168,187,187,149,0,157,171,168],
[187,171,175,158,183,0,176,166],
[187,183,173,174,169,164,0,175],
[180,166,178,155,172,174,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,185,204,182,148,173,178],
[142,0,150,183,152,166,168,158],
[155,190,0,177,183,164,181,158],
[136,157,163,0,182,184,163,157],
[158,188,157,158,0,185,166,171],
[192,174,176,156,155,0,151,160],
[167,172,159,177,174,189,0,130],
[162,182,182,183,169,180,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,190,180,167,204,164,177],
[176,0,174,175,173,201,170,184],
[150,166,0,169,154,177,161,171],
[160,165,171,0,176,181,152,170],
[173,167,186,164,0,196,185,173],
[136,139,163,159,144,0,153,158],
[176,170,179,188,155,187,0,167],
[163,156,169,170,167,182,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,168,153,170,165,161,163],
[175,0,173,147,162,143,152,157],
[172,167,0,171,173,148,169,179],
[187,193,169,0,178,160,157,176],
[170,178,167,162,0,164,161,183],
[175,197,192,180,176,0,189,163],
[179,188,171,183,179,151,0,182],
[177,183,161,164,157,177,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,190,195,199,145,146,174],
[177,0,145,189,182,171,177,146],
[150,195,0,175,188,185,162,140],
[145,151,165,0,183,172,159,165],
[141,158,152,157,0,144,169,134],
[195,169,155,168,196,0,166,183],
[194,163,178,181,171,174,0,171],
[166,194,200,175,206,157,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,178,179,184,161,174,153],
[176,0,164,173,178,176,159,170],
[162,176,0,179,192,171,178,160],
[161,167,161,0,157,152,161,146],
[156,162,148,183,0,142,141,151],
[179,164,169,188,198,0,181,169],
[166,181,162,179,199,159,0,144],
[187,170,180,194,189,171,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,146,160,157,165,166,148],
[178,0,149,168,150,168,161,160],
[194,191,0,178,197,171,173,162],
[180,172,162,0,181,177,179,164],
[183,190,143,159,0,185,158,149],
[175,172,169,163,155,0,168,161],
[174,179,167,161,182,172,0,171],
[192,180,178,176,191,179,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,170,171,162,201,158,173],
[186,0,202,162,166,203,182,204],
[170,138,0,171,157,191,174,187],
[169,178,169,0,172,185,171,191],
[178,174,183,168,0,204,162,181],
[139,137,149,155,136,0,166,170],
[182,158,166,169,178,174,0,167],
[167,136,153,149,159,170,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,179,184,169,172,196,160],
[180,0,182,188,164,183,203,155],
[161,158,0,176,163,175,189,171],
[156,152,164,0,154,166,171,169],
[171,176,177,186,0,170,183,172],
[168,157,165,174,170,0,172,164],
[144,137,151,169,157,168,0,151],
[180,185,169,171,168,176,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,161,177,173,162,169,161],
[181,0,163,165,177,165,167,156],
[179,177,0,171,188,165,166,171],
[163,175,169,0,181,154,163,162],
[167,163,152,159,0,163,167,166],
[178,175,175,186,177,0,189,164],
[171,173,174,177,173,151,0,154],
[179,184,169,178,174,176,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,155,157,168,164,170,168],
[171,0,157,174,172,162,173,175],
[185,183,0,184,182,182,170,183],
[183,166,156,0,166,167,170,180],
[172,168,158,174,0,161,170,174],
[176,178,158,173,179,0,168,175],
[170,167,170,170,170,172,0,168],
[172,165,157,160,166,165,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,169,181,183,173,172,158],
[164,0,154,172,166,166,161,159],
[171,186,0,169,167,181,181,164],
[159,168,171,0,161,164,169,160],
[157,174,173,179,0,167,160,167],
[167,174,159,176,173,0,159,162],
[168,179,159,171,180,181,0,170],
[182,181,176,180,173,178,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,170,182,179,182,178,169],
[168,0,169,176,161,173,165,176],
[170,171,0,183,165,184,178,180],
[158,164,157,0,165,162,163,168],
[161,179,175,175,0,186,176,181],
[158,167,156,178,154,0,160,164],
[162,175,162,177,164,180,0,175],
[171,164,160,172,159,176,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,163,156,173,167,185,173],
[171,0,214,153,175,147,139,161],
[177,126,0,133,170,176,176,172],
[184,187,207,0,201,191,182,169],
[167,165,170,139,0,139,170,156],
[173,193,164,149,201,0,171,162],
[155,201,164,158,170,169,0,152],
[167,179,168,171,184,178,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,180,163,173,178,173,168],
[171,0,187,174,169,196,181,174],
[160,153,0,159,164,187,155,178],
[177,166,181,0,165,198,164,172],
[167,171,176,175,0,185,177,175],
[162,144,153,142,155,0,163,154],
[167,159,185,176,163,177,0,182],
[172,166,162,168,165,186,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,166,176,182,169,165,167],
[178,0,183,199,189,168,180,177],
[174,157,0,192,176,188,174,166],
[164,141,148,0,170,137,161,178],
[158,151,164,170,0,144,143,171],
[171,172,152,203,196,0,190,176],
[175,160,166,179,197,150,0,170],
[173,163,174,162,169,164,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,176,165,169,155,169,160],
[180,0,175,169,186,167,172,163],
[164,165,0,159,168,160,158,136],
[175,171,181,0,172,177,175,150],
[171,154,172,168,0,167,168,155],
[185,173,180,163,173,0,164,168],
[171,168,182,165,172,176,0,176],
[180,177,204,190,185,172,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,340,170,170,170,170,170,0],
[0,0,0,170,170,170,170,0],
[170,340,0,340,340,340,340,170],
[170,170,0,0,340,170,340,0],
[170,170,0,0,0,0,0,0],
[170,170,0,170,340,0,340,0],
[170,170,0,0,340,0,0,0],
[340,340,170,340,340,340,340,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,151,171,166,164,171,150],
[174,0,156,175,161,165,176,158],
[189,184,0,166,173,177,183,190],
[169,165,174,0,156,171,175,165],
[174,179,167,184,0,184,183,166],
[176,175,163,169,156,0,180,163],
[169,164,157,165,157,160,0,176],
[190,182,150,175,174,177,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,178,177,181,176,167,166],
[171,0,186,161,174,161,153,166],
[162,154,0,159,169,165,159,170],
[163,179,181,0,184,165,168,170],
[159,166,171,156,0,157,149,162],
[164,179,175,175,183,0,168,171],
[173,187,181,172,191,172,0,169],
[174,174,170,170,178,169,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,142,183,169,173,192,155],
[167,0,188,165,177,193,182,191],
[198,152,0,171,144,183,185,154],
[157,175,169,0,189,189,194,144],
[171,163,196,151,0,198,171,167],
[167,147,157,151,142,0,174,166],
[148,158,155,146,169,166,0,158],
[185,149,186,196,173,174,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,158,180,138,159,147,194],
[179,0,173,178,211,166,180,204],
[182,167,0,189,200,154,161,183],
[160,162,151,0,160,142,142,185],
[202,129,140,180,0,176,189,189],
[181,174,186,198,164,0,194,179],
[193,160,179,198,151,146,0,183],
[146,136,157,155,151,161,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,172,175,166,169,168,164],
[186,0,168,177,178,175,172,174],
[168,172,0,166,178,173,162,171],
[165,163,174,0,166,170,160,164],
[174,162,162,174,0,167,174,181],
[171,165,167,170,173,0,163,175],
[172,168,178,180,166,177,0,180],
[176,166,169,176,159,165,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,173,184,168,191,187,177],
[146,0,160,140,134,158,200,151],
[167,180,0,172,165,146,182,199],
[156,200,168,0,186,164,196,162],
[172,206,175,154,0,147,196,151],
[149,182,194,176,193,0,182,199],
[153,140,158,144,144,158,0,131],
[163,189,141,178,189,141,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,159,169,175,173,172,169],
[162,0,174,174,167,172,176,172],
[181,166,0,171,159,162,157,160],
[171,166,169,0,164,167,160,162],
[165,173,181,176,0,179,175,174],
[167,168,178,173,161,0,156,165],
[168,164,183,180,165,184,0,174],
[171,168,180,178,166,175,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,185,164,197,193,170,186],
[180,0,183,170,192,178,185,223],
[155,157,0,162,194,201,172,194],
[176,170,178,0,201,186,199,196],
[143,148,146,139,0,147,167,152],
[147,162,139,154,193,0,175,173],
[170,155,168,141,173,165,0,197],
[154,117,146,144,188,167,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,115,92,99,105,121,93],
[204,0,176,153,144,188,174,192],
[225,164,0,181,160,179,194,196],
[248,187,159,0,158,218,205,151],
[241,196,180,182,0,203,158,217],
[235,152,161,122,137,0,169,150],
[219,166,146,135,182,171,0,178],
[247,148,144,189,123,190,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,180,180,170,168,171,165],
[167,0,180,175,158,166,176,172],
[160,160,0,166,162,163,159,156],
[160,165,174,0,149,166,158,156],
[170,182,178,191,0,178,182,175],
[172,174,177,174,162,0,178,165],
[169,164,181,182,158,162,0,173],
[175,168,184,184,165,175,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,179,187,173,152,180,164],
[163,0,181,170,140,159,150,165],
[161,159,0,155,137,164,168,140],
[153,170,185,0,134,141,171,142],
[167,200,203,206,0,192,218,204],
[188,181,176,199,148,0,194,174],
[160,190,172,169,122,146,0,163],
[176,175,200,198,136,166,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,168,164,176,174,176,162],
[178,0,171,176,177,174,176,165],
[172,169,0,182,180,187,175,174],
[176,164,158,0,172,176,179,175],
[164,163,160,168,0,172,176,164],
[166,166,153,164,168,0,177,161],
[164,164,165,161,164,163,0,156],
[178,175,166,165,176,179,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,158,171,153,191,180,210],
[168,0,151,186,144,162,139,189],
[182,189,0,174,148,184,174,211],
[169,154,166,0,149,183,172,204],
[187,196,192,191,0,188,155,194],
[149,178,156,157,152,0,180,165],
[160,201,166,168,185,160,0,202],
[130,151,129,136,146,175,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,173,170,182,171,180,186],
[169,0,169,155,169,176,174,174],
[167,171,0,161,178,160,179,162],
[170,185,179,0,183,166,188,187],
[158,171,162,157,0,162,166,161],
[169,164,180,174,178,0,176,182],
[160,166,161,152,174,164,0,163],
[154,166,178,153,179,158,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,184,165,163,169,154,160],
[174,0,169,207,195,178,167,179],
[156,171,0,190,157,167,185,185],
[175,133,150,0,178,131,159,154],
[177,145,183,162,0,179,158,169],
[171,162,173,209,161,0,146,176],
[186,173,155,181,182,194,0,187],
[180,161,155,186,171,164,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,165,141,144,165,157,173],
[183,0,162,140,174,162,162,161],
[175,178,0,155,167,143,154,167],
[199,200,185,0,156,178,175,216],
[196,166,173,184,0,142,183,161],
[175,178,197,162,198,0,175,206],
[183,178,186,165,157,165,0,217],
[167,179,173,124,179,134,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,159,165,159,159,156,160],
[175,0,159,172,172,150,153,172],
[181,181,0,178,180,168,165,184],
[175,168,162,0,168,151,164,139],
[181,168,160,172,0,163,158,154],
[181,190,172,189,177,0,164,164],
[184,187,175,176,182,176,0,149],
[180,168,156,201,186,176,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,167,162,173,180,169,170],
[169,0,162,174,178,178,171,169],
[173,178,0,163,181,187,172,171],
[178,166,177,0,187,184,174,183],
[167,162,159,153,0,156,158,161],
[160,162,153,156,184,0,164,173],
[171,169,168,166,182,176,0,171],
[170,171,169,157,179,167,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,168,166,178,164,174,176],
[146,0,152,160,158,162,167,163],
[172,188,0,166,170,169,179,180],
[174,180,174,0,173,171,182,168],
[162,182,170,167,0,170,176,172],
[176,178,171,169,170,0,180,180],
[166,173,161,158,164,160,0,170],
[164,177,160,172,168,160,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,141,142,156,151,157,151],
[202,0,157,196,176,189,183,182],
[199,183,0,185,170,185,176,188],
[198,144,155,0,162,172,170,164],
[184,164,170,178,0,181,174,183],
[189,151,155,168,159,0,167,171],
[183,157,164,170,166,173,0,173],
[189,158,152,176,157,169,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,180,181,196,183,170,196],
[157,0,149,177,174,181,178,172],
[160,191,0,194,185,185,188,203],
[159,163,146,0,175,181,173,187],
[144,166,155,165,0,170,159,173],
[157,159,155,159,170,0,163,181],
[170,162,152,167,181,177,0,172],
[144,168,137,153,167,159,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,171,177,168,177,168,174],
[157,0,160,163,156,175,178,153],
[169,180,0,173,169,185,183,165],
[163,177,167,0,170,182,156,169],
[172,184,171,170,0,176,179,172],
[163,165,155,158,164,0,159,148],
[172,162,157,184,161,181,0,160],
[166,187,175,171,168,192,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,171,181,168,193,200,188],
[164,0,175,200,204,211,185,203],
[169,165,0,167,164,178,166,210],
[159,140,173,0,170,155,185,208],
[172,136,176,170,0,211,177,227],
[147,129,162,185,129,0,121,217],
[140,155,174,155,163,219,0,212],
[152,137,130,132,113,123,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,149,144,154,146,142,158],
[189,0,166,163,174,163,169,171],
[191,174,0,165,168,160,161,176],
[196,177,175,0,176,168,179,175],
[186,166,172,164,0,172,175,174],
[194,177,180,172,168,0,203,191],
[198,171,179,161,165,137,0,180],
[182,169,164,165,166,149,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,172,150,168,156,162,154],
[177,0,147,158,174,167,185,166],
[168,193,0,177,187,182,191,186],
[190,182,163,0,181,176,190,168],
[172,166,153,159,0,151,162,138],
[184,173,158,164,189,0,184,161],
[178,155,149,150,178,156,0,163],
[186,174,154,172,202,179,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,154,166,159,159,174,160],
[163,0,169,179,179,174,193,173],
[186,171,0,165,180,186,178,167],
[174,161,175,0,179,171,194,143],
[181,161,160,161,0,163,169,157],
[181,166,154,169,177,0,195,179],
[166,147,162,146,171,145,0,147],
[180,167,173,197,183,161,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,173,179,171,169,163,173],
[179,0,159,177,156,174,169,170],
[167,181,0,177,167,167,171,162],
[161,163,163,0,165,148,156,163],
[169,184,173,175,0,176,178,185],
[171,166,173,192,164,0,158,163],
[177,171,169,184,162,182,0,191],
[167,170,178,177,155,177,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,171,157,157,172,162,135],
[168,0,165,159,172,150,159,151],
[169,175,0,167,166,160,164,155],
[183,181,173,0,174,155,164,182],
[183,168,174,166,0,160,161,166],
[168,190,180,185,180,0,171,161],
[178,181,176,176,179,169,0,151],
[205,189,185,158,174,179,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,202,161,182,158,182,161],
[200,0,139,139,179,180,160,177],
[138,201,0,158,203,179,123,159],
[179,201,182,0,242,200,162,199],
[158,161,137,98,0,157,141,158],
[182,160,161,140,183,0,161,180],
[158,180,217,178,199,179,0,198],
[179,163,181,141,182,160,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,165,150,172,165,186,156],
[174,0,170,200,172,171,191,159],
[175,170,0,186,194,184,181,162],
[190,140,154,0,187,145,181,157],
[168,168,146,153,0,148,153,148],
[175,169,156,195,192,0,168,171],
[154,149,159,159,187,172,0,156],
[184,181,178,183,192,169,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,170,156,176,158,169,177],
[157,0,160,143,156,152,177,153],
[170,180,0,170,172,167,185,185],
[184,197,170,0,183,177,189,191],
[164,184,168,157,0,168,185,186],
[182,188,173,163,172,0,200,207],
[171,163,155,151,155,140,0,161],
[163,187,155,149,154,133,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,154,169,167,161,165,161],
[175,0,166,166,182,171,177,173],
[186,174,0,161,176,174,180,166],
[171,174,179,0,175,166,173,173],
[173,158,164,165,0,171,176,177],
[179,169,166,174,169,0,180,155],
[175,163,160,167,164,160,0,165],
[179,167,174,167,163,185,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,175,207,163,164,138,198],
[174,0,196,208,198,198,163,170],
[165,144,0,220,209,151,174,199],
[133,132,120,0,162,174,163,186],
[177,142,131,178,0,197,176,172],
[176,142,189,166,143,0,164,174],
[202,177,166,177,164,176,0,174],
[142,170,141,154,168,166,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,242,241,183,161,224,220],
[180,0,240,221,161,182,141,200],
[98,100,0,99,41,141,120,159],
[99,119,241,0,120,160,199,161],
[157,179,299,220,0,179,260,221],
[179,158,199,180,161,0,179,180],
[116,199,220,141,80,161,0,177],
[120,140,181,179,119,160,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,158,170,178,173,143,161],
[181,0,167,174,190,167,165,162],
[182,173,0,154,175,169,158,166],
[170,166,186,0,183,181,175,169],
[162,150,165,157,0,152,145,158],
[167,173,171,159,188,0,160,155],
[197,175,182,165,195,180,0,186],
[179,178,174,171,182,185,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,176,170,170,189,192,183],
[150,0,150,173,166,177,172,167],
[164,190,0,166,188,186,194,187],
[170,167,174,0,165,185,174,166],
[170,174,152,175,0,174,168,166],
[151,163,154,155,166,0,166,160],
[148,168,146,166,172,174,0,154],
[157,173,153,174,174,180,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,169,161,165,177,161,161],
[175,0,188,165,181,175,166,167],
[171,152,0,152,156,155,141,163],
[179,175,188,0,184,168,176,154],
[175,159,184,156,0,173,165,155],
[163,165,185,172,167,0,153,174],
[179,174,199,164,175,187,0,170],
[179,173,177,186,185,166,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,173,173,175,173,183,189],
[175,0,170,175,154,172,180,180],
[167,170,0,177,176,171,184,177],
[167,165,163,0,158,167,160,175],
[165,186,164,182,0,173,190,174],
[167,168,169,173,167,0,179,170],
[157,160,156,180,150,161,0,182],
[151,160,163,165,166,170,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,162,177,166,174,172,173],
[163,0,158,168,165,175,166,186],
[178,182,0,165,169,187,175,191],
[163,172,175,0,176,175,175,176],
[174,175,171,164,0,176,168,180],
[166,165,153,165,164,0,164,181],
[168,174,165,165,172,176,0,180],
[167,154,149,164,160,159,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,165,178,143,192,177,161],
[168,0,158,165,160,191,167,188],
[175,182,0,172,153,199,176,177],
[162,175,168,0,170,210,178,167],
[197,180,187,170,0,213,194,195],
[148,149,141,130,127,0,158,141],
[163,173,164,162,146,182,0,182],
[179,152,163,173,145,199,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,160,164,168,152,143,173],
[159,0,139,153,163,151,168,158],
[180,201,0,180,188,173,181,159],
[176,187,160,0,178,188,188,179],
[172,177,152,162,0,177,167,171],
[188,189,167,152,163,0,183,186],
[197,172,159,152,173,157,0,160],
[167,182,181,161,169,154,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,177,179,186,158,200,180],
[162,0,151,167,186,179,187,168],
[163,189,0,161,199,167,162,194],
[161,173,179,0,204,163,168,196],
[154,154,141,136,0,144,138,144],
[182,161,173,177,196,0,145,195],
[140,153,178,172,202,195,0,205],
[160,172,146,144,196,145,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,162,186,187,194,156,172],
[170,0,174,168,189,192,171,176],
[178,166,0,154,192,186,170,179],
[154,172,186,0,180,189,175,193],
[153,151,148,160,0,188,145,157],
[146,148,154,151,152,0,127,148],
[184,169,170,165,195,213,0,180],
[168,164,161,147,183,192,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,172,168,148,155,159,153],
[176,0,180,164,187,131,169,164],
[168,160,0,165,174,160,163,172],
[172,176,175,0,180,177,184,156],
[192,153,166,160,0,168,177,152],
[185,209,180,163,172,0,168,196],
[181,171,177,156,163,172,0,175],
[187,176,168,184,188,144,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,180,177,171,170,174,168],
[164,0,152,186,166,170,158,160],
[160,188,0,180,174,140,147,161],
[163,154,160,0,170,154,177,159],
[169,174,166,170,0,160,173,164],
[170,170,200,186,180,0,179,174],
[166,182,193,163,167,161,0,160],
[172,180,179,181,176,166,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,133,191,160,162,177,159],
[150,0,147,220,161,163,165,161],
[207,193,0,207,176,178,193,151],
[149,120,133,0,135,135,137,94],
[180,179,164,205,0,192,141,180],
[178,177,162,205,148,0,206,135],
[163,175,147,203,199,134,0,177],
[181,179,189,246,160,205,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,129,158,170,171,129,171],
[161,0,99,171,157,136,116,139],
[211,241,0,196,221,196,161,191],
[182,169,144,0,212,182,141,170],
[170,183,119,128,0,163,111,108],
[169,204,144,158,177,0,126,126],
[211,224,179,199,229,214,0,159],
[169,201,149,170,232,214,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,182,160,176,177,184,159],
[156,0,179,167,178,164,180,154],
[158,161,0,157,164,152,163,145],
[180,173,183,0,178,166,178,171],
[164,162,176,162,0,163,171,147],
[163,176,188,174,177,0,187,146],
[156,160,177,162,169,153,0,148],
[181,186,195,169,193,194,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,159,169,177,179,163,161],
[174,0,166,180,186,158,148,160],
[181,174,0,190,183,164,166,184],
[171,160,150,0,168,163,147,155],
[163,154,157,172,0,167,151,159],
[161,182,176,177,173,0,168,161],
[177,192,174,193,189,172,0,154],
[179,180,156,185,181,179,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,173,169,152,155,164,175],
[161,0,178,142,154,155,164,159],
[167,162,0,154,147,148,170,174],
[171,198,186,0,166,174,182,179],
[188,186,193,174,0,169,188,180],
[185,185,192,166,171,0,182,180],
[176,176,170,158,152,158,0,158],
[165,181,166,161,160,160,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,186,158,167,184,174,176],
[163,0,185,163,172,174,155,163],
[154,155,0,154,169,169,157,148],
[182,177,186,0,178,183,166,170],
[173,168,171,162,0,172,173,157],
[156,166,171,157,168,0,154,159],
[166,185,183,174,167,186,0,164],
[164,177,192,170,183,181,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,177,179,170,158,189,169],
[150,0,150,172,148,156,148,148],
[163,190,0,189,175,165,161,165],
[161,168,151,0,161,158,166,163],
[170,192,165,179,0,171,176,168],
[182,184,175,182,169,0,176,182],
[151,192,179,174,164,164,0,159],
[171,192,175,177,172,158,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,147,192,192,192,196,293],
[148,0,99,244,96,193,148,195],
[193,241,0,291,143,192,192,195],
[148,96,49,0,49,96,98,148],
[148,244,197,291,0,293,197,293],
[148,147,148,244,47,0,197,244],
[144,192,148,242,143,143,0,146],
[47,145,145,192,47,96,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,167,165,153,194,155,151],
[175,0,159,182,166,186,155,138],
[173,181,0,169,159,176,168,164],
[175,158,171,0,170,180,155,156],
[187,174,181,170,0,182,171,153],
[146,154,164,160,158,0,170,141],
[185,185,172,185,169,170,0,175],
[189,202,176,184,187,199,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,165,160,161,155,171,150],
[186,0,167,181,170,157,183,188],
[175,173,0,159,178,168,162,160],
[180,159,181,0,174,147,168,177],
[179,170,162,166,0,170,170,167],
[185,183,172,193,170,0,193,178],
[169,157,178,172,170,147,0,168],
[190,152,180,163,173,162,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,161,148,178,188,149,166],
[148,0,94,136,168,162,136,112],
[179,246,0,162,178,160,191,152],
[192,204,178,0,205,218,191,164],
[162,172,162,135,0,190,190,151],
[152,178,180,122,150,0,177,177],
[191,204,149,149,150,163,0,139],
[174,228,188,176,189,163,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,163,165,154,172,166,167],
[167,0,156,166,148,156,159,168],
[177,184,0,176,171,170,168,167],
[175,174,164,0,157,179,162,174],
[186,192,169,183,0,174,170,175],
[168,184,170,161,166,0,171,166],
[174,181,172,178,170,169,0,169],
[173,172,173,166,165,174,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,162,184,178,156,155,167],
[164,0,170,185,185,165,171,166],
[178,170,0,183,194,171,168,166],
[156,155,157,0,171,151,160,156],
[162,155,146,169,0,161,148,153],
[184,175,169,189,179,0,175,174],
[185,169,172,180,192,165,0,163],
[173,174,174,184,187,166,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,171,163,181,158,168,176],
[162,0,160,149,175,166,158,149],
[169,180,0,177,173,179,160,176],
[177,191,163,0,180,165,177,182],
[159,165,167,160,0,148,152,175],
[182,174,161,175,192,0,163,182],
[172,182,180,163,188,177,0,185],
[164,191,164,158,165,158,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,207,194,184,208,161,194],
[141,0,158,154,149,196,124,149],
[133,182,0,150,169,170,139,176],
[146,186,190,0,197,191,191,181],
[156,191,171,143,0,187,181,208],
[132,144,170,149,153,0,142,162],
[179,216,201,149,159,198,0,178],
[146,191,164,159,132,178,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,152,134,155,143,186,147],
[202,0,179,185,173,156,167,178],
[188,161,0,141,164,170,175,164],
[206,155,199,0,163,153,176,200],
[185,167,176,177,0,169,188,181],
[197,184,170,187,171,0,184,204],
[154,173,165,164,152,156,0,199],
[193,162,176,140,159,136,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,178,170,193,165,183,178],
[168,0,170,179,185,167,172,173],
[162,170,0,162,183,170,170,170],
[170,161,178,0,175,165,166,177],
[147,155,157,165,0,143,147,168],
[175,173,170,175,197,0,174,172],
[157,168,170,174,193,166,0,174],
[162,167,170,163,172,168,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,165,163,172,167,163,159],
[172,0,171,144,148,143,155,156],
[175,169,0,152,149,149,162,164],
[177,196,188,0,170,163,188,186],
[168,192,191,170,0,161,181,171],
[173,197,191,177,179,0,173,170],
[177,185,178,152,159,167,0,165],
[181,184,176,154,169,170,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,185,182,149,175,163,178],
[177,0,176,189,180,221,168,189],
[155,164,0,171,149,168,167,158],
[158,151,169,0,156,183,134,154],
[191,160,191,184,0,199,170,176],
[165,119,172,157,141,0,150,135],
[177,172,173,206,170,190,0,187],
[162,151,182,186,164,205,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,145,132,154,160,151,162],
[172,0,157,154,144,164,162,159],
[195,183,0,163,179,189,175,157],
[208,186,177,0,150,191,182,159],
[186,196,161,190,0,193,190,188],
[180,176,151,149,147,0,162,163],
[189,178,165,158,150,178,0,167],
[178,181,183,181,152,177,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,172,183,180,172,174,181],
[171,0,156,175,162,175,184,176],
[168,184,0,199,180,183,180,186],
[157,165,141,0,157,158,169,161],
[160,178,160,183,0,174,169,165],
[168,165,157,182,166,0,165,166],
[166,156,160,171,171,175,0,161],
[159,164,154,179,175,174,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,179,182,170,159,181,176],
[167,0,177,172,184,165,170,177],
[161,163,0,169,162,167,158,175],
[158,168,171,0,177,161,165,188],
[170,156,178,163,0,166,165,182],
[181,175,173,179,174,0,167,193],
[159,170,182,175,175,173,0,188],
[164,163,165,152,158,147,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,162,163,163,175,174,162],
[175,0,185,159,176,175,167,168],
[178,155,0,162,185,173,162,174],
[177,181,178,0,172,167,161,187],
[177,164,155,168,0,171,170,178],
[165,165,167,173,169,0,174,184],
[166,173,178,179,170,166,0,172],
[178,172,166,153,162,156,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,182,176,165,173,189,191],
[161,0,172,155,160,154,155,180],
[158,168,0,176,179,173,173,184],
[164,185,164,0,168,158,177,178],
[175,180,161,172,0,182,171,177],
[167,186,167,182,158,0,186,168],
[151,185,167,163,169,154,0,165],
[149,160,156,162,163,172,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,153,168,169,179,179,173],
[178,0,180,163,170,187,167,163],
[187,160,0,169,176,170,177,166],
[172,177,171,0,178,175,179,161],
[171,170,164,162,0,168,176,171],
[161,153,170,165,172,0,164,159],
[161,173,163,161,164,176,0,161],
[167,177,174,179,169,181,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,169,176,185,159,184,194],
[153,0,157,164,169,167,161,178],
[171,183,0,173,181,167,179,192],
[164,176,167,0,175,169,167,192],
[155,171,159,165,0,161,163,181],
[181,173,173,171,179,0,170,189],
[156,179,161,173,177,170,0,188],
[146,162,148,148,159,151,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,182,182,185,175,164,184],
[161,0,171,178,171,172,167,171],
[158,169,0,182,168,185,173,168],
[158,162,158,0,171,155,161,156],
[155,169,172,169,0,161,158,174],
[165,168,155,185,179,0,180,169],
[176,173,167,179,182,160,0,173],
[156,169,172,184,166,171,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,98,116,135,98,86,137],
[198,0,161,170,166,149,152,187],
[242,179,0,166,185,158,177,158],
[224,170,174,0,186,137,147,147],
[205,174,155,154,0,163,108,172],
[242,191,182,203,177,0,139,167],
[254,188,163,193,232,201,0,160],
[203,153,182,193,168,173,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,155,173,159,165,143,171],
[184,0,174,201,178,195,170,177],
[185,166,0,175,166,175,156,183],
[167,139,165,0,157,177,144,167],
[181,162,174,183,0,186,163,171],
[175,145,165,163,154,0,156,155],
[197,170,184,196,177,184,0,183],
[169,163,157,173,169,185,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,173,183,189,170,171,178],
[177,0,161,179,185,172,176,174],
[167,179,0,184,184,170,171,182],
[157,161,156,0,176,167,158,167],
[151,155,156,164,0,172,158,155],
[170,168,170,173,168,0,170,176],
[169,164,169,182,182,170,0,184],
[162,166,158,173,185,164,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,154,153,177,167,160,157],
[185,0,167,156,178,203,161,154],
[186,173,0,165,185,197,172,168],
[187,184,175,0,173,182,144,157],
[163,162,155,167,0,180,175,153],
[173,137,143,158,160,0,143,158],
[180,179,168,196,165,197,0,170],
[183,186,172,183,187,182,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,172,184,181,181,179,189],
[172,0,163,177,166,176,173,182],
[168,177,0,178,177,184,162,173],
[156,163,162,0,173,175,155,163],
[159,174,163,167,0,183,163,155],
[159,164,156,165,157,0,162,164],
[161,167,178,185,177,178,0,171],
[151,158,167,177,185,176,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,172,167,171,185,178,192],
[162,0,177,171,169,182,171,181],
[168,163,0,173,162,177,173,169],
[173,169,167,0,166,182,166,178],
[169,171,178,174,0,176,167,177],
[155,158,163,158,164,0,167,171],
[162,169,167,174,173,173,0,179],
[148,159,171,162,163,169,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,167,165,151,148,152,165],
[198,0,184,171,176,162,187,193],
[173,156,0,173,147,162,183,188],
[175,169,167,0,162,159,191,197],
[189,164,193,178,0,175,192,175],
[192,178,178,181,165,0,167,156],
[188,153,157,149,148,173,0,161],
[175,147,152,143,165,184,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,170,133,218,203,153,140],
[176,0,119,143,174,185,169,133],
[170,221,0,157,212,165,175,177],
[207,197,183,0,215,184,190,167],
[122,166,128,125,0,151,128,118],
[137,155,175,156,189,0,185,141],
[187,171,165,150,212,155,0,182],
[200,207,163,173,222,199,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,147,156,161,158,140,156],
[193,0,186,190,181,165,172,178],
[193,154,0,157,168,176,160,159],
[184,150,183,0,152,152,147,186],
[179,159,172,188,0,177,143,188],
[182,175,164,188,163,0,175,185],
[200,168,180,193,197,165,0,199],
[184,162,181,154,152,155,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,180,177,181,165,168,176],
[168,0,172,177,167,158,159,144],
[160,168,0,170,168,151,166,152],
[163,163,170,0,158,160,157,152],
[159,173,172,182,0,161,172,160],
[175,182,189,180,179,0,169,160],
[172,181,174,183,168,171,0,166],
[164,196,188,188,180,180,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,164,192,172,172,173,185],
[171,0,172,183,161,182,179,187],
[176,168,0,190,159,177,160,178],
[148,157,150,0,152,165,146,163],
[168,179,181,188,0,190,188,191],
[168,158,163,175,150,0,156,160],
[167,161,180,194,152,184,0,180],
[155,153,162,177,149,180,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,159,157,186,166,180,170],
[156,0,163,157,158,178,187,147],
[181,177,0,166,179,173,196,162],
[183,183,174,0,170,205,200,144],
[154,182,161,170,0,173,178,153],
[174,162,167,135,167,0,202,159],
[160,153,144,140,162,138,0,136],
[170,193,178,196,187,181,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,189,187,176,164,165,175],
[143,0,156,152,136,153,138,140],
[151,184,0,167,181,158,158,159],
[153,188,173,0,180,159,179,152],
[164,204,159,160,0,164,141,170],
[176,187,182,181,176,0,165,151],
[175,202,182,161,199,175,0,181],
[165,200,181,188,170,189,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,172,158,186,144,177,154],
[167,0,179,173,176,156,180,168],
[168,161,0,162,186,148,166,156],
[182,167,178,0,180,177,180,159],
[154,164,154,160,0,155,152,148],
[196,184,192,163,185,0,196,175],
[163,160,174,160,188,144,0,161],
[186,172,184,181,192,165,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,176,148,165,161,167,162],
[181,0,189,171,167,177,177,182],
[164,151,0,155,158,153,165,153],
[192,169,185,0,167,168,170,168],
[175,173,182,173,0,173,169,172],
[179,163,187,172,167,0,174,162],
[173,163,175,170,171,166,0,156],
[178,158,187,172,168,178,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,158,161,155,175,175,165],
[173,0,167,170,149,182,172,159],
[182,173,0,153,166,170,163,179],
[179,170,187,0,159,185,165,184],
[185,191,174,181,0,184,168,178],
[165,158,170,155,156,0,175,159],
[165,168,177,175,172,165,0,175],
[175,181,161,156,162,181,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,204,173,212,194,164,194],
[185,0,207,174,197,166,174,205],
[136,133,0,158,166,178,119,171],
[167,166,182,0,186,184,166,230],
[128,143,174,154,0,165,160,193],
[146,174,162,156,175,0,161,197],
[176,166,221,174,180,179,0,202],
[146,135,169,110,147,143,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,168,156,180,181,166,172],
[175,0,184,169,169,187,171,178],
[172,156,0,162,160,168,172,152],
[184,171,178,0,183,186,176,170],
[160,171,180,157,0,164,175,163],
[159,153,172,154,176,0,164,168],
[174,169,168,164,165,176,0,170],
[168,162,188,170,177,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,162,148,162,137,161,160],
[203,0,179,170,163,166,176,191],
[178,161,0,171,171,179,169,161],
[192,170,169,0,153,166,164,172],
[178,177,169,187,0,173,166,182],
[203,174,161,174,167,0,178,178],
[179,164,171,176,174,162,0,175],
[180,149,179,168,158,162,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,163,178,170,188,186,172],
[165,0,168,172,166,170,171,157],
[177,172,0,177,174,178,170,172],
[162,168,163,0,164,169,160,157],
[170,174,166,176,0,191,166,174],
[152,170,162,171,149,0,159,162],
[154,169,170,180,174,181,0,162],
[168,183,168,183,166,178,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,166,165,170,183,171,170],
[179,0,184,167,166,186,170,171],
[174,156,0,155,157,163,163,160],
[175,173,185,0,163,190,164,170],
[170,174,183,177,0,185,177,180],
[157,154,177,150,155,0,150,164],
[169,170,177,176,163,190,0,171],
[170,169,180,170,160,176,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,192,180,178,176,171,164],
[161,0,180,168,167,169,157,169],
[148,160,0,168,143,158,162,158],
[160,172,172,0,170,171,152,152],
[162,173,197,170,0,174,165,177],
[164,171,182,169,166,0,167,155],
[169,183,178,188,175,173,0,165],
[176,171,182,188,163,185,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,161,172,160,203,147,191],
[163,0,146,142,142,164,149,167],
[179,194,0,157,146,209,174,192],
[168,198,183,0,182,208,182,186],
[180,198,194,158,0,208,168,183],
[137,176,131,132,132,0,139,155],
[193,191,166,158,172,201,0,176],
[149,173,148,154,157,185,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,163,180,153,176,163,165],
[157,0,165,175,142,144,167,160],
[177,175,0,174,176,159,175,170],
[160,165,166,0,165,160,161,160],
[187,198,164,175,0,179,164,179],
[164,196,181,180,161,0,191,192],
[177,173,165,179,176,149,0,181],
[175,180,170,180,161,148,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,155,176,184,178,167,181],
[175,0,179,198,193,188,172,163],
[185,161,0,176,188,183,182,186],
[164,142,164,0,179,160,135,165],
[156,147,152,161,0,153,158,169],
[162,152,157,180,187,0,152,169],
[173,168,158,205,182,188,0,175],
[159,177,154,175,171,171,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,188,183,160,168,173,183],
[177,0,158,188,159,162,160,176],
[152,182,0,172,163,160,148,165],
[157,152,168,0,161,144,139,158],
[180,181,177,179,0,170,173,163],
[172,178,180,196,170,0,163,176],
[167,180,192,201,167,177,0,187],
[157,164,175,182,177,164,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,179,200,169,169,174,178],
[188,0,181,170,174,175,178,170],
[161,159,0,167,167,161,166,154],
[140,170,173,0,152,177,180,155],
[171,166,173,188,0,177,160,182],
[171,165,179,163,163,0,155,169],
[166,162,174,160,180,185,0,158],
[162,170,186,185,158,171,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,164,166,170,146,159,164],
[180,0,201,170,185,166,183,190],
[176,139,0,172,153,160,161,169],
[174,170,168,0,189,189,168,193],
[170,155,187,151,0,163,167,186],
[194,174,180,151,177,0,161,173],
[181,157,179,172,173,179,0,190],
[176,150,171,147,154,167,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,170,153,172,156,192,184],
[158,0,174,147,187,157,173,165],
[170,166,0,168,179,152,190,193],
[187,193,172,0,197,173,192,165],
[168,153,161,143,0,160,176,161],
[184,183,188,167,180,0,189,178],
[148,167,150,148,164,151,0,156],
[156,175,147,175,179,162,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,165,167,175,177,191,168],
[156,0,159,178,175,177,188,177],
[175,181,0,144,180,196,201,177],
[173,162,196,0,179,175,191,166],
[165,165,160,161,0,169,178,151],
[163,163,144,165,171,0,176,175],
[149,152,139,149,162,164,0,164],
[172,163,163,174,189,165,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,178,149,168,172,172,183],
[160,0,166,119,164,152,175,172],
[162,174,0,157,153,156,172,187],
[191,221,183,0,182,162,190,199],
[172,176,187,158,0,170,157,192],
[168,188,184,178,170,0,203,209],
[168,165,168,150,183,137,0,176],
[157,168,153,141,148,131,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,168,183,177,167,176,168],
[165,0,172,185,161,170,181,173],
[172,168,0,176,155,172,178,171],
[157,155,164,0,149,164,167,162],
[163,179,185,191,0,184,179,182],
[173,170,168,176,156,0,157,156],
[164,159,162,173,161,183,0,169],
[172,167,169,178,158,184,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,170,198,192,189,178,196],
[144,0,149,182,158,158,168,158],
[170,191,0,176,193,193,195,192],
[142,158,164,0,164,151,162,172],
[148,182,147,176,0,151,177,163],
[151,182,147,189,189,0,174,174],
[162,172,145,178,163,166,0,193],
[144,182,148,168,177,166,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,170,164,154,169,169,167],
[164,0,177,174,175,154,172,150],
[170,163,0,139,170,166,173,158],
[176,166,201,0,181,153,181,178],
[186,165,170,159,0,173,176,161],
[171,186,174,187,167,0,176,161],
[171,168,167,159,164,164,0,133],
[173,190,182,162,179,179,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,179,187,189,191,175,175],
[175,0,164,178,172,173,165,160],
[161,176,0,199,186,177,161,160],
[153,162,141,0,159,160,164,148],
[151,168,154,181,0,157,156,152],
[149,167,163,180,183,0,170,162],
[165,175,179,176,184,170,0,163],
[165,180,180,192,188,178,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,172,167,158,168,170,161],
[172,0,171,183,171,173,166,173],
[168,169,0,170,159,157,158,150],
[173,157,170,0,168,165,177,159],
[182,169,181,172,0,173,176,169],
[172,167,183,175,167,0,173,165],
[170,174,182,163,164,167,0,160],
[179,167,190,181,171,175,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,169,173,166,147,152,175],
[177,0,168,199,173,161,151,170],
[171,172,0,172,146,158,162,173],
[167,141,168,0,150,150,131,160],
[174,167,194,190,0,169,171,196],
[193,179,182,190,171,0,165,185],
[188,189,178,209,169,175,0,195],
[165,170,167,180,144,155,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,164,149,163,154,161,164],
[178,0,156,184,173,181,177,188],
[176,184,0,163,176,170,174,170],
[191,156,177,0,163,175,182,179],
[177,167,164,177,0,153,162,166],
[186,159,170,165,187,0,169,183],
[179,163,166,158,178,171,0,168],
[176,152,170,161,174,157,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,173,162,170,169,167,166],
[169,0,180,170,169,169,184,159],
[167,160,0,160,159,151,181,147],
[178,170,180,0,168,168,183,165],
[170,171,181,172,0,177,170,164],
[171,171,189,172,163,0,187,179],
[173,156,159,157,170,153,0,156],
[174,181,193,175,176,161,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,161,164,200,173,178,180],
[163,0,136,183,161,129,160,140],
[179,204,0,184,206,162,184,196],
[176,157,156,0,170,162,196,182],
[140,179,134,170,0,169,158,156],
[167,211,178,178,171,0,177,190],
[162,180,156,144,182,163,0,154],
[160,200,144,158,184,150,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,172,131,172,88,89,130],
[253,0,256,299,251,167,210,210],
[168,84,0,43,126,41,43,84],
[209,41,297,0,167,165,168,84],
[168,89,214,173,0,171,43,84],
[252,173,299,175,169,0,170,170],
[251,130,297,172,297,170,0,215],
[210,130,256,256,256,170,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,165,166,160,173,181,169],
[175,0,172,183,167,175,168,166],
[175,168,0,163,172,160,177,168],
[174,157,177,0,172,173,170,177],
[180,173,168,168,0,166,162,160],
[167,165,180,167,174,0,172,179],
[159,172,163,170,178,168,0,167],
[171,174,172,163,180,161,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,168,177,162,154,174,166],
[172,0,181,175,166,179,175,180],
[172,159,0,164,152,156,163,166],
[163,165,176,0,171,167,181,170],
[178,174,188,169,0,180,177,185],
[186,161,184,173,160,0,176,171],
[166,165,177,159,163,164,0,166],
[174,160,174,170,155,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,226,156,256,195,196,199],
[140,0,184,113,213,195,154,150],
[114,156,0,167,181,179,150,139],
[184,227,173,0,226,169,211,208],
[84,127,159,114,0,99,113,97],
[145,145,161,171,241,0,185,127],
[144,186,190,129,227,155,0,142],
[141,190,201,132,243,213,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,138,220,180,164,191,155],
[158,0,138,229,161,153,162,127],
[202,202,0,232,191,179,163,184],
[120,111,108,0,168,139,125,112],
[160,179,149,172,0,161,145,160],
[176,187,161,201,179,0,180,160],
[149,178,177,215,195,160,0,170],
[185,213,156,228,180,180,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,168,178,170,160,195,193],
[179,0,151,145,141,162,182,203],
[172,189,0,150,157,161,175,193],
[162,195,190,0,182,194,211,192],
[170,199,183,158,0,177,190,216],
[180,178,179,146,163,0,159,190],
[145,158,165,129,150,181,0,149],
[147,137,147,148,124,150,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,180,152,155,177,179,172],
[178,0,175,165,165,176,175,181],
[160,165,0,172,159,158,167,167],
[188,175,168,0,175,157,187,191],
[185,175,181,165,0,179,183,182],
[163,164,182,183,161,0,175,192],
[161,165,173,153,157,165,0,176],
[168,159,173,149,158,148,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,0,115,115,115,113,115],
[225,0,112,112,225,227,225,227],
[340,228,0,340,228,115,113,115],
[225,228,0,0,228,115,113,115],
[225,115,112,112,0,115,225,227],
[225,113,225,225,225,0,225,340],
[227,115,227,227,115,115,0,227],
[225,113,225,225,113,0,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,165,151,170,154,176,165],
[174,0,187,182,177,175,177,169],
[175,153,0,150,168,173,154,167],
[189,158,190,0,182,170,176,170],
[170,163,172,158,0,163,170,177],
[186,165,167,170,177,0,173,181],
[164,163,186,164,170,167,0,175],
[175,171,173,170,163,159,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,152,175,158,155,150,180],
[177,0,164,184,166,173,175,180],
[188,176,0,179,168,159,149,168],
[165,156,161,0,159,153,170,168],
[182,174,172,181,0,167,163,179],
[185,167,181,187,173,0,159,178],
[190,165,191,170,177,181,0,190],
[160,160,172,172,161,162,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,167,164,160,174,186,164],
[160,0,163,149,157,163,177,153],
[173,177,0,170,159,176,188,166],
[176,191,170,0,178,158,186,170],
[180,183,181,162,0,173,175,171],
[166,177,164,182,167,0,177,164],
[154,163,152,154,165,163,0,155],
[176,187,174,170,169,176,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,151,179,163,175,148,161],
[182,0,179,172,163,187,181,163],
[189,161,0,193,175,181,179,171],
[161,168,147,0,163,177,173,150],
[177,177,165,177,0,174,169,166],
[165,153,159,163,166,0,144,154],
[192,159,161,167,171,196,0,167],
[179,177,169,190,174,186,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,150,165,171,165,176,183],
[188,0,166,167,183,178,174,178],
[190,174,0,169,172,190,177,189],
[175,173,171,0,188,186,167,184],
[169,157,168,152,0,147,155,175],
[175,162,150,154,193,0,166,185],
[164,166,163,173,185,174,0,189],
[157,162,151,156,165,155,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,161,163,168,179,139,177],
[171,0,169,159,171,163,180,172],
[179,171,0,192,177,171,146,178],
[177,181,148,0,174,163,159,175],
[172,169,163,166,0,154,137,171],
[161,177,169,177,186,0,133,156],
[201,160,194,181,203,207,0,184],
[163,168,162,165,169,184,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,172,164,171,155,168,158],
[179,0,179,161,164,162,159,164],
[168,161,0,166,167,168,156,160],
[176,179,174,0,162,172,175,162],
[169,176,173,178,0,155,169,160],
[185,178,172,168,185,0,166,173],
[172,181,184,165,171,174,0,172],
[182,176,180,178,180,167,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,167,163,155,157,164,165],
[174,0,164,170,164,165,171,169],
[173,176,0,178,176,176,176,163],
[177,170,162,0,170,164,176,172],
[185,176,164,170,0,167,171,171],
[183,175,164,176,173,0,177,167],
[176,169,164,164,169,163,0,164],
[175,171,177,168,169,173,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,168,218,198,185,188,181],
[144,0,137,167,165,161,158,156],
[172,203,0,191,204,170,180,180],
[122,173,149,0,170,148,157,156],
[142,175,136,170,0,162,147,149],
[155,179,170,192,178,0,162,169],
[152,182,160,183,193,178,0,154],
[159,184,160,184,191,171,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,170,176,174,177,171,187],
[160,0,164,168,170,183,184,171],
[170,176,0,179,183,183,173,179],
[164,172,161,0,167,170,160,177],
[166,170,157,173,0,174,169,169],
[163,157,157,170,166,0,168,180],
[169,156,167,180,171,172,0,175],
[153,169,161,163,171,160,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,166,175,188,164,176,173],
[154,0,161,151,192,149,174,166],
[174,179,0,171,218,176,177,164],
[165,189,169,0,195,149,164,183],
[152,148,122,145,0,150,164,146],
[176,191,164,191,190,0,164,158],
[164,166,163,176,176,176,0,176],
[167,174,176,157,194,182,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,188,147,197,194,174,175],
[178,0,158,173,175,185,152,162],
[152,182,0,163,171,171,181,156],
[193,167,177,0,182,185,167,163],
[143,165,169,158,0,181,171,159],
[146,155,169,155,159,0,171,141],
[166,188,159,173,169,169,0,172],
[165,178,184,177,181,199,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,188,185,186,185,163,189],
[147,0,154,148,167,161,144,160],
[152,186,0,169,208,169,161,164],
[155,192,171,0,177,183,162,191],
[154,173,132,163,0,134,151,161],
[155,179,171,157,206,0,187,166],
[177,196,179,178,189,153,0,197],
[151,180,176,149,179,174,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,174,165,195,187,190,172],
[166,0,189,157,170,184,174,190],
[166,151,0,147,161,163,158,177],
[175,183,193,0,201,188,168,187],
[145,170,179,139,0,161,143,142],
[153,156,177,152,179,0,141,170],
[150,166,182,172,197,199,0,178],
[168,150,163,153,198,170,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,152,165,174,190,176,173],
[172,0,162,168,148,175,180,158],
[188,178,0,180,164,175,182,164],
[175,172,160,0,161,192,192,178],
[166,192,176,179,0,171,162,171],
[150,165,165,148,169,0,149,160],
[164,160,158,148,178,191,0,148],
[167,182,176,162,169,180,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,171,144,131,162,127,173],
[217,0,220,159,192,175,181,205],
[169,120,0,158,122,134,117,174],
[196,181,182,0,190,144,147,188],
[209,148,218,150,0,176,178,195],
[178,165,206,196,164,0,160,228],
[213,159,223,193,162,180,0,191],
[167,135,166,152,145,112,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,144,139,138,160,147,175],
[195,0,148,156,163,168,161,157],
[196,192,0,160,177,214,192,162],
[201,184,180,0,164,173,150,164],
[202,177,163,176,0,168,152,143],
[180,172,126,167,172,0,189,160],
[193,179,148,190,188,151,0,187],
[165,183,178,176,197,180,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,176,170,163,174,184,173],
[170,0,159,157,160,159,165,173],
[164,181,0,174,163,191,194,187],
[170,183,166,0,160,169,176,180],
[177,180,177,180,0,166,187,188],
[166,181,149,171,174,0,155,165],
[156,175,146,164,153,185,0,167],
[167,167,153,160,152,175,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,156,168,171,154,143,162],
[187,0,185,181,173,170,155,166],
[184,155,0,161,156,163,151,175],
[172,159,179,0,155,156,154,173],
[169,167,184,185,0,189,162,175],
[186,170,177,184,151,0,172,198],
[197,185,189,186,178,168,0,190],
[178,174,165,167,165,142,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,175,150,164,153,161,158],
[173,0,174,157,156,170,160,168],
[165,166,0,153,171,163,174,170],
[190,183,187,0,170,175,183,180],
[176,184,169,170,0,158,169,161],
[187,170,177,165,182,0,178,169],
[179,180,166,157,171,162,0,174],
[182,172,170,160,179,171,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,167,161,194,163,164,172],
[167,0,184,192,192,195,172,179],
[173,156,0,165,177,172,162,176],
[179,148,175,0,178,174,170,175],
[146,148,163,162,0,153,162,155],
[177,145,168,166,187,0,159,175],
[176,168,178,170,178,181,0,173],
[168,161,164,165,185,165,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,165,189,176,188,159,182],
[165,0,141,183,179,169,174,201],
[175,199,0,183,177,162,164,184],
[151,157,157,0,159,169,150,187],
[164,161,163,181,0,179,154,197],
[152,171,178,171,161,0,151,195],
[181,166,176,190,186,189,0,196],
[158,139,156,153,143,145,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,160,174,166,179,184,174],
[168,0,168,177,172,164,171,171],
[180,172,0,172,172,169,188,188],
[166,163,168,0,171,173,174,184],
[174,168,168,169,0,171,173,172],
[161,176,171,167,169,0,181,168],
[156,169,152,166,167,159,0,172],
[166,169,152,156,168,172,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,155,149,155,155,150,161],
[180,0,162,159,162,172,157,174],
[185,178,0,172,176,179,166,178],
[191,181,168,0,169,186,167,179],
[185,178,164,171,0,173,170,172],
[185,168,161,154,167,0,163,160],
[190,183,174,173,170,177,0,175],
[179,166,162,161,168,180,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,164,173,172,176,149,148],
[196,0,182,192,190,183,169,178],
[176,158,0,182,183,196,165,157],
[167,148,158,0,165,166,158,155],
[168,150,157,175,0,167,173,157],
[164,157,144,174,173,0,164,132],
[191,171,175,182,167,176,0,148],
[192,162,183,185,183,208,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,176,158,184,175,182,195],
[162,0,158,157,176,168,151,165],
[164,182,0,180,196,183,190,197],
[182,183,160,0,191,182,172,194],
[156,164,144,149,0,167,157,182],
[165,172,157,158,173,0,171,183],
[158,189,150,168,183,169,0,173],
[145,175,143,146,158,157,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,169,145,182,162,143,153],
[169,0,173,141,181,166,161,159],
[171,167,0,143,169,159,152,162],
[195,199,197,0,187,180,170,179],
[158,159,171,153,0,157,155,147],
[178,174,181,160,183,0,154,172],
[197,179,188,170,185,186,0,176],
[187,181,178,161,193,168,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,179,195,166,184,160,185],
[191,0,169,194,195,201,182,180],
[161,171,0,195,181,188,187,167],
[145,146,145,0,159,164,156,169],
[174,145,159,181,0,169,179,191],
[156,139,152,176,171,0,151,156],
[180,158,153,184,161,189,0,161],
[155,160,173,171,149,184,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,188,169,197,172,159,170],
[166,0,191,194,159,179,172,169],
[152,149,0,158,164,166,166,154],
[171,146,182,0,174,166,154,172],
[143,181,176,166,0,163,171,173],
[168,161,174,174,177,0,155,172],
[181,168,174,186,169,185,0,186],
[170,171,186,168,167,168,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,166,172,164,182,184,158],
[163,0,162,172,173,189,165,163],
[174,178,0,164,172,184,176,189],
[168,168,176,0,168,168,172,160],
[176,167,168,172,0,165,180,166],
[158,151,156,172,175,0,169,165],
[156,175,164,168,160,171,0,180],
[182,177,151,180,174,175,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,156,158,161,184,161,172],
[179,0,161,173,179,173,157,176],
[184,179,0,178,173,173,170,180],
[182,167,162,0,175,171,160,178],
[179,161,167,165,0,166,141,173],
[156,167,167,169,174,0,149,167],
[179,183,170,180,199,191,0,192],
[168,164,160,162,167,173,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,180,164,176,169,165,161],
[170,0,179,173,173,163,160,159],
[160,161,0,163,167,154,159,153],
[176,167,177,0,166,167,164,164],
[164,167,173,174,0,164,160,167],
[171,177,186,173,176,0,158,172],
[175,180,181,176,180,182,0,163],
[179,181,187,176,173,168,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,168,176,174,175,166,194],
[166,0,158,156,168,166,156,170],
[172,182,0,163,155,177,177,178],
[164,184,177,0,160,178,179,182],
[166,172,185,180,0,166,166,182],
[165,174,163,162,174,0,167,194],
[174,184,163,161,174,173,0,176],
[146,170,162,158,158,146,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,154,163,153,154,153,166],
[177,0,166,187,170,185,176,185],
[186,174,0,188,170,182,168,180],
[177,153,152,0,167,172,168,176],
[187,170,170,173,0,169,174,184],
[186,155,158,168,171,0,175,172],
[187,164,172,172,166,165,0,172],
[174,155,160,164,156,168,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,158,179,158,196,189,149],
[125,0,141,130,156,130,97,141],
[182,199,0,163,205,176,140,175],
[161,210,177,0,192,178,153,160],
[182,184,135,148,0,171,148,152],
[144,210,164,162,169,0,168,154],
[151,243,200,187,192,172,0,142],
[191,199,165,180,188,186,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,172,170,147,137,182,206],
[190,0,184,180,176,168,179,214],
[168,156,0,181,142,169,160,191],
[170,160,159,0,154,152,182,200],
[193,164,198,186,0,170,181,199],
[203,172,171,188,170,0,195,192],
[158,161,180,158,159,145,0,181],
[134,126,149,140,141,148,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,179,171,175,173,181,179],
[177,0,171,168,181,167,179,180],
[161,169,0,153,172,154,166,156],
[169,172,187,0,176,164,179,169],
[165,159,168,164,0,171,167,168],
[167,173,186,176,169,0,177,174],
[159,161,174,161,173,163,0,160],
[161,160,184,171,172,166,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,186,175,169,186,175,178],
[174,0,177,178,164,155,160,167],
[154,163,0,176,170,157,145,156],
[165,162,164,0,158,155,172,169],
[171,176,170,182,0,166,163,175],
[154,185,183,185,174,0,169,176],
[165,180,195,168,177,171,0,179],
[162,173,184,171,165,164,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,288,184,181,185,103,209],
[104,0,157,104,104,132,101,132],
[52,183,0,106,156,133,130,132],
[156,236,234,0,130,132,156,263],
[159,236,184,210,0,186,183,237],
[155,208,207,208,154,0,181,261],
[237,239,210,184,157,159,0,237],
[131,208,208,77,103,79,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,166,177,167,185,184,169],
[198,0,180,191,182,176,175,151],
[174,160,0,172,172,184,196,179],
[163,149,168,0,169,152,198,164],
[173,158,168,171,0,148,186,170],
[155,164,156,188,192,0,177,177],
[156,165,144,142,154,163,0,157],
[171,189,161,176,170,163,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,198,183,176,172,167,181],
[161,0,180,190,172,173,194,183],
[142,160,0,190,171,174,168,191],
[157,150,150,0,153,159,155,155],
[164,168,169,187,0,178,180,161],
[168,167,166,181,162,0,181,174],
[173,146,172,185,160,159,0,167],
[159,157,149,185,179,166,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,155,166,167,160,161,150],
[182,0,160,156,161,175,151,166],
[185,180,0,176,157,189,168,167],
[174,184,164,0,166,159,185,168],
[173,179,183,174,0,179,177,154],
[180,165,151,181,161,0,158,163],
[179,189,172,155,163,182,0,172],
[190,174,173,172,186,177,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,143,151,155,166,157,178],
[167,0,152,160,174,174,171,178],
[197,188,0,175,176,192,168,182],
[189,180,165,0,167,203,189,176],
[185,166,164,173,0,172,173,188],
[174,166,148,137,168,0,139,160],
[183,169,172,151,167,201,0,183],
[162,162,158,164,152,180,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,186,172,181,186,170,143],
[138,0,195,161,196,172,143,170],
[154,145,0,117,171,145,127,141],
[168,179,223,0,203,191,184,155],
[159,144,169,137,0,166,175,129],
[154,168,195,149,174,0,158,118],
[170,197,213,156,165,182,0,167],
[197,170,199,185,211,222,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,153,158,159,153,160,169],
[186,0,167,162,182,174,173,173],
[187,173,0,168,164,170,161,182],
[182,178,172,0,169,173,165,178],
[181,158,176,171,0,179,166,182],
[187,166,170,167,161,0,167,180],
[180,167,179,175,174,173,0,184],
[171,167,158,162,158,160,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,163,154,158,163,181,179],
[172,0,165,157,186,171,193,188],
[177,175,0,160,163,183,189,186],
[186,183,180,0,162,173,196,187],
[182,154,177,178,0,160,184,190],
[177,169,157,167,180,0,192,182],
[159,147,151,144,156,148,0,176],
[161,152,154,153,150,158,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,178,166,164,161,162,168],
[178,0,189,174,193,182,167,188],
[162,151,0,152,163,161,153,170],
[174,166,188,0,161,179,171,187],
[176,147,177,179,0,154,156,172],
[179,158,179,161,186,0,167,185],
[178,173,187,169,184,173,0,180],
[172,152,170,153,168,155,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,189,175,169,173,179,171],
[172,0,175,165,166,170,171,169],
[151,165,0,163,158,166,173,180],
[165,175,177,0,189,171,162,181],
[171,174,182,151,0,159,172,168],
[167,170,174,169,181,0,166,175],
[161,169,167,178,168,174,0,171],
[169,171,160,159,172,165,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,188,168,166,166,175,162],
[164,0,169,172,174,162,167,170],
[152,171,0,154,167,151,172,160],
[172,168,186,0,172,172,160,167],
[174,166,173,168,0,163,163,164],
[174,178,189,168,177,0,176,153],
[165,173,168,180,177,164,0,163],
[178,170,180,173,176,187,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,162,155,168,173,156,175],
[186,0,168,171,174,172,167,177],
[178,172,0,157,166,179,167,181],
[185,169,183,0,179,187,172,186],
[172,166,174,161,0,173,162,171],
[167,168,161,153,167,0,149,171],
[184,173,173,168,178,191,0,187],
[165,163,159,154,169,169,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,340,170,340,170,340,340,340],
[0,0,170,340,170,170,170,340],
[170,170,0,340,170,170,170,340],
[0,0,0,0,170,170,0,340],
[170,170,170,170,0,340,170,170],
[0,170,170,170,0,0,170,170],
[0,170,170,340,170,170,0,340],
[0,0,0,0,170,170,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,177,167,155,126,139,169],
[167,0,173,161,150,149,138,180],
[163,167,0,169,154,134,140,166],
[173,179,171,0,165,171,157,186],
[185,190,186,175,0,174,154,186],
[214,191,206,169,166,0,160,183],
[201,202,200,183,186,180,0,170],
[171,160,174,154,154,157,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,0,172,0,86,86,86],
[256,0,84,172,170,170,86,256],
[340,256,0,256,256,86,86,340],
[168,168,84,0,84,84,84,170],
[340,170,84,256,0,170,86,256],
[254,170,254,256,170,0,170,340],
[254,254,254,256,254,170,0,254],
[254,84,0,170,84,0,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,166,176,161,174,180,177],
[166,0,180,171,184,180,166,174],
[174,160,0,178,161,192,182,178],
[164,169,162,0,172,175,168,162],
[179,156,179,168,0,177,160,180],
[166,160,148,165,163,0,170,163],
[160,174,158,172,180,170,0,154],
[163,166,162,178,160,177,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,176,166,170,171,172,176],
[164,0,170,173,174,164,154,175],
[164,170,0,158,163,172,162,168],
[174,167,182,0,182,177,173,170],
[170,166,177,158,0,160,168,172],
[169,176,168,163,180,0,169,175],
[168,186,178,167,172,171,0,172],
[164,165,172,170,168,165,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,177,172,164,187,180,174],
[169,0,187,172,162,178,165,169],
[163,153,0,156,148,173,160,166],
[168,168,184,0,170,189,173,174],
[176,178,192,170,0,184,164,176],
[153,162,167,151,156,0,170,163],
[160,175,180,167,176,170,0,174],
[166,171,174,166,164,177,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,194,165,197,191,191,181],
[164,0,180,150,178,160,181,183],
[146,160,0,159,166,166,138,149],
[175,190,181,0,191,192,183,166],
[143,162,174,149,0,181,167,149],
[149,180,174,148,159,0,152,182],
[149,159,202,157,173,188,0,172],
[159,157,191,174,191,158,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,156,174,179,171,173,162],
[169,0,181,179,187,184,172,171],
[184,159,0,173,167,175,158,168],
[166,161,167,0,181,169,152,167],
[161,153,173,159,0,160,156,169],
[169,156,165,171,180,0,156,166],
[167,168,182,188,184,184,0,174],
[178,169,172,173,171,174,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,163,152,185,190,201,181],
[149,0,153,134,167,186,163,148],
[177,187,0,175,194,191,179,156],
[188,206,165,0,187,206,224,200],
[155,173,146,153,0,194,176,187],
[150,154,149,134,146,0,170,146],
[139,177,161,116,164,170,0,168],
[159,192,184,140,153,194,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,176,196,159,141,144,114],
[157,0,159,192,143,144,160,159],
[164,181,0,180,155,172,157,132],
[144,148,160,0,150,164,156,123],
[181,197,185,190,0,171,176,162],
[199,196,168,176,169,0,173,174],
[196,180,183,184,164,167,0,140],
[226,181,208,217,178,166,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,128,107,118,170,170,112],
[162,0,115,111,125,149,127,152],
[212,225,0,187,166,230,180,183],
[233,229,153,0,209,169,171,213],
[222,215,174,131,0,203,208,187],
[170,191,110,171,137,0,158,190],
[170,213,160,169,132,182,0,160],
[228,188,157,127,153,150,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,191,167,162,210,168,154],
[156,0,149,168,154,164,140,146],
[149,191,0,157,172,184,134,143],
[173,172,183,0,164,200,160,192],
[178,186,168,176,0,207,179,161],
[130,176,156,140,133,0,150,159],
[172,200,206,180,161,190,0,201],
[186,194,197,148,179,181,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,157,163,152,178,159,148],
[183,0,178,170,173,184,184,143],
[183,162,0,184,152,191,193,150],
[177,170,156,0,167,171,191,172],
[188,167,188,173,0,194,188,165],
[162,156,149,169,146,0,177,140],
[181,156,147,149,152,163,0,134],
[192,197,190,168,175,200,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,184,173,168,158,166,167],
[160,0,177,154,162,155,149,163],
[156,163,0,161,169,151,152,167],
[167,186,179,0,177,175,170,173],
[172,178,171,163,0,160,154,167],
[182,185,189,165,180,0,163,177],
[174,191,188,170,186,177,0,175],
[173,177,173,167,173,163,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,172,171,170,172,178,173],
[151,0,176,162,151,178,165,170],
[168,164,0,156,162,182,190,176],
[169,178,184,0,177,187,178,181],
[170,189,178,163,0,173,181,190],
[168,162,158,153,167,0,185,188],
[162,175,150,162,159,155,0,171],
[167,170,164,159,150,152,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,165,181,178,158,150,141],
[164,0,170,186,187,161,157,166],
[175,170,0,196,176,163,151,172],
[159,154,144,0,161,146,122,142],
[162,153,164,179,0,147,143,130],
[182,179,177,194,193,0,176,163],
[190,183,189,218,197,164,0,185],
[199,174,168,198,210,177,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,169,153,155,161,183,166],
[173,0,183,173,167,161,199,167],
[171,157,0,166,173,161,187,174],
[187,167,174,0,179,177,202,192],
[185,173,167,161,0,150,180,170],
[179,179,179,163,190,0,190,163],
[157,141,153,138,160,150,0,155],
[174,173,166,148,170,177,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,148,178,128,142,158,151],
[167,0,162,158,127,160,158,128],
[192,178,0,187,158,173,173,172],
[162,182,153,0,135,153,159,152],
[212,213,182,205,0,181,166,201],
[198,180,167,187,159,0,151,184],
[182,182,167,181,174,189,0,181],
[189,212,168,188,139,156,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,179,178,165,170,189,185],
[166,0,162,173,170,177,179,187],
[161,178,0,191,180,164,178,198],
[162,167,149,0,170,155,169,157],
[175,170,160,170,0,188,182,190],
[170,163,176,185,152,0,172,176],
[151,161,162,171,158,168,0,160],
[155,153,142,183,150,164,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,164,164,172,155,153,158],
[181,0,175,159,180,171,164,164],
[176,165,0,163,175,159,174,164],
[176,181,177,0,183,173,160,163],
[168,160,165,157,0,151,158,158],
[185,169,181,167,189,0,168,166],
[187,176,166,180,182,172,0,172],
[182,176,176,177,182,174,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,167,181,200,178,184,177],
[157,0,178,189,185,168,161,191],
[173,162,0,186,207,168,197,177],
[159,151,154,0,198,143,191,152],
[140,155,133,142,0,136,140,142],
[162,172,172,197,204,0,178,168],
[156,179,143,149,200,162,0,146],
[163,149,163,188,198,172,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,164,177,169,191,188,173],
[160,0,182,170,172,174,183,166],
[176,158,0,162,176,191,174,160],
[163,170,178,0,191,177,188,172],
[171,168,164,149,0,180,183,172],
[149,166,149,163,160,0,157,158],
[152,157,166,152,157,183,0,158],
[167,174,180,168,168,182,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,174,198,154,172,176,176],
[182,0,175,192,166,192,175,190],
[166,165,0,169,170,169,181,181],
[142,148,171,0,148,163,153,161],
[186,174,170,192,0,181,179,192],
[168,148,171,177,159,0,164,184],
[164,165,159,187,161,176,0,188],
[164,150,159,179,148,156,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,160,165,149,172,173,169],
[186,0,170,172,169,181,174,190],
[180,170,0,184,179,193,187,184],
[175,168,156,0,160,188,172,183],
[191,171,161,180,0,177,182,185],
[168,159,147,152,163,0,167,171],
[167,166,153,168,158,173,0,190],
[171,150,156,157,155,169,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,181,182,158,169,168,156],
[187,0,173,186,175,191,177,154],
[159,167,0,153,161,155,164,171],
[158,154,187,0,153,162,168,145],
[182,165,179,187,0,150,189,152],
[171,149,185,178,190,0,173,158],
[172,163,176,172,151,167,0,161],
[184,186,169,195,188,182,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,167,177,166,195,178,164],
[167,0,166,178,182,174,180,180],
[173,174,0,185,177,182,184,167],
[163,162,155,0,168,170,168,162],
[174,158,163,172,0,170,179,176],
[145,166,158,170,170,0,171,160],
[162,160,156,172,161,169,0,153],
[176,160,173,178,164,180,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,167,176,150,182,179,174],
[170,0,165,170,171,185,167,172],
[173,175,0,176,158,192,179,175],
[164,170,164,0,161,170,171,168],
[190,169,182,179,0,191,188,175],
[158,155,148,170,149,0,168,171],
[161,173,161,169,152,172,0,159],
[166,168,165,172,165,169,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,178,164,172,185,160,178],
[174,0,187,180,180,179,160,176],
[162,153,0,166,170,165,167,161],
[176,160,174,0,188,183,174,182],
[168,160,170,152,0,179,160,170],
[155,161,175,157,161,0,148,168],
[180,180,173,166,180,192,0,181],
[162,164,179,158,170,172,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,173,152,168,159,147,161],
[173,0,178,169,176,174,168,168],
[167,162,0,149,160,158,154,181],
[188,171,191,0,178,185,151,168],
[172,164,180,162,0,161,170,171],
[181,166,182,155,179,0,153,153],
[193,172,186,189,170,187,0,190],
[179,172,159,172,169,187,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,146,150,153,170,173,152],
[173,0,144,162,163,164,197,153],
[194,196,0,169,177,177,190,170],
[190,178,171,0,160,174,191,142],
[187,177,163,180,0,196,196,181],
[170,176,163,166,144,0,178,148],
[167,143,150,149,144,162,0,142],
[188,187,170,198,159,192,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,167,186,183,176,191,173],
[147,0,152,161,165,173,177,171],
[173,188,0,169,171,182,164,175],
[154,179,171,0,161,176,182,186],
[157,175,169,179,0,184,173,177],
[164,167,158,164,156,0,170,179],
[149,163,176,158,167,170,0,158],
[167,169,165,154,163,161,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,185,176,162,158,173,182],
[180,0,181,184,163,186,178,189],
[155,159,0,153,153,138,164,146],
[164,156,187,0,186,174,174,194],
[178,177,187,154,0,171,172,189],
[182,154,202,166,169,0,187,187],
[167,162,176,166,168,153,0,179],
[158,151,194,146,151,153,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,163,165,174,166,171,176],
[170,0,166,170,171,183,175,166],
[177,174,0,170,171,156,156,156],
[175,170,170,0,178,166,184,173],
[166,169,169,162,0,182,177,178],
[174,157,184,174,158,0,176,178],
[169,165,184,156,163,164,0,158],
[164,174,184,167,162,162,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,146,149,155,155,167,176],
[169,0,142,149,144,141,165,163],
[194,198,0,181,174,179,186,168],
[191,191,159,0,173,161,181,182],
[185,196,166,167,0,153,153,157],
[185,199,161,179,187,0,185,181],
[173,175,154,159,187,155,0,162],
[164,177,172,158,183,159,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,177,150,183,175,173,165],
[168,0,179,155,162,175,165,170],
[163,161,0,155,179,181,170,180],
[190,185,185,0,159,186,155,175],
[157,178,161,181,0,181,179,163],
[165,165,159,154,159,0,165,171],
[167,175,170,185,161,175,0,184],
[175,170,160,165,177,169,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,177,186,163,178,192,165],
[160,0,150,148,140,165,142,189],
[163,190,0,185,154,192,181,153],
[154,192,155,0,172,155,172,138],
[177,200,186,168,0,200,202,165],
[162,175,148,185,140,0,200,170],
[148,198,159,168,138,140,0,154],
[175,151,187,202,175,170,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,188,208,204,192,216,211],
[175,0,182,195,209,166,214,198],
[152,158,0,184,183,155,200,192],
[132,145,156,0,170,168,194,196],
[136,131,157,170,0,159,188,160],
[148,174,185,172,181,0,201,204],
[124,126,140,146,152,139,0,155],
[129,142,148,144,180,136,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,182,167,183,182,176,171],
[155,0,160,160,172,171,157,152],
[158,180,0,162,164,178,155,164],
[173,180,178,0,152,182,189,184],
[157,168,176,188,0,186,169,164],
[158,169,162,158,154,0,166,163],
[164,183,185,151,171,174,0,172],
[169,188,176,156,176,177,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,185,160,192,180,193,179],
[150,0,165,161,180,159,183,155],
[155,175,0,169,191,177,170,167],
[180,179,171,0,178,184,205,161],
[148,160,149,162,0,163,166,160],
[160,181,163,156,177,0,179,143],
[147,157,170,135,174,161,0,155],
[161,185,173,179,180,197,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,187,172,147,171,171,165],
[186,0,188,205,174,181,182,169],
[153,152,0,167,145,174,156,161],
[168,135,173,0,146,163,160,166],
[193,166,195,194,0,194,177,175],
[169,159,166,177,146,0,175,161],
[169,158,184,180,163,165,0,166],
[175,171,179,174,165,179,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,188,157,173,168,182,161],
[172,0,179,161,160,163,165,170],
[152,161,0,162,148,158,170,167],
[183,179,178,0,174,168,174,173],
[167,180,192,166,0,168,179,182],
[172,177,182,172,172,0,183,167],
[158,175,170,166,161,157,0,160],
[179,170,173,167,158,173,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,175,186,193,192,187,160],
[140,0,165,160,147,176,151,155],
[165,175,0,185,187,189,158,145],
[154,180,155,0,184,179,198,173],
[147,193,153,156,0,179,190,158],
[148,164,151,161,161,0,162,168],
[153,189,182,142,150,178,0,155],
[180,185,195,167,182,172,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,147,161,147,165,169,161],
[174,0,168,176,170,169,169,161],
[193,172,0,167,170,158,142,166],
[179,164,173,0,154,183,170,163],
[193,170,170,186,0,171,173,158],
[175,171,182,157,169,0,162,166],
[171,171,198,170,167,178,0,175],
[179,179,174,177,182,174,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,169,174,181,169,184,178],
[163,0,158,161,166,171,167,165],
[171,182,0,173,178,157,183,167],
[166,179,167,0,177,154,157,152],
[159,174,162,163,0,170,159,173],
[171,169,183,186,170,0,184,171],
[156,173,157,183,181,156,0,163],
[162,175,173,188,167,169,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,156,168,177,139,184,172],
[173,0,164,132,171,125,175,159],
[184,176,0,174,165,161,187,169],
[172,208,166,0,170,177,171,172],
[163,169,175,170,0,162,175,162],
[201,215,179,163,178,0,180,194],
[156,165,153,169,165,160,0,170],
[168,181,171,168,178,146,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,182,179,185,180,185,169],
[164,0,167,175,187,182,154,154],
[158,173,0,186,201,183,178,176],
[161,165,154,0,192,151,146,167],
[155,153,139,148,0,155,140,145],
[160,158,157,189,185,0,154,161],
[155,186,162,194,200,186,0,161],
[171,186,164,173,195,179,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,170,181,167,180,217,186],
[250,0,140,175,203,177,201,181],
[170,200,0,188,154,203,202,184],
[159,165,152,0,153,177,163,171],
[173,137,186,187,0,213,152,173],
[160,163,137,163,127,0,137,147],
[123,139,138,177,188,203,0,208],
[154,159,156,169,167,193,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,172,172,166,177,160,179],
[157,0,172,177,153,156,172,192],
[168,168,0,171,172,171,187,191],
[168,163,169,0,160,168,181,189],
[174,187,168,180,0,185,173,191],
[163,184,169,172,155,0,172,182],
[180,168,153,159,167,168,0,186],
[161,148,149,151,149,158,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,188,192,182,166,180,178],
[167,0,155,182,167,152,178,179],
[152,185,0,195,182,180,183,177],
[148,158,145,0,160,139,174,164],
[158,173,158,180,0,157,175,169],
[174,188,160,201,183,0,168,171],
[160,162,157,166,165,172,0,159],
[162,161,163,176,171,169,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,168,157,165,196,151,182],
[174,0,178,174,175,171,164,158],
[172,162,0,182,179,187,177,148],
[183,166,158,0,198,195,170,181],
[175,165,161,142,0,184,167,164],
[144,169,153,145,156,0,110,166],
[189,176,163,170,173,230,0,180],
[158,182,192,159,176,174,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,170,196,196,179,190,172],
[164,0,191,196,180,178,185,169],
[170,149,0,181,169,176,171,164],
[144,144,159,0,180,167,176,167],
[144,160,171,160,0,168,177,164],
[161,162,164,173,172,0,177,181],
[150,155,169,164,163,163,0,162],
[168,171,176,173,176,159,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,170,170,210,189,213,189],
[127,0,170,129,188,167,193,189],
[170,170,0,128,191,191,194,148],
[170,211,212,0,211,254,212,253],
[130,152,149,129,0,131,109,150],
[151,173,149,86,209,0,172,104],
[127,147,146,128,231,168,0,106],
[151,151,192,87,190,236,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,175,173,170,180,165,190],
[171,0,177,169,170,178,164,166],
[165,163,0,168,170,163,149,169],
[167,171,172,0,156,178,174,170],
[170,170,170,184,0,185,173,174],
[160,162,177,162,155,0,163,173],
[175,176,191,166,167,177,0,183],
[150,174,171,170,166,167,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,173,173,161,174,185,181],
[179,0,182,192,170,172,183,184],
[167,158,0,162,167,165,171,174],
[167,148,178,0,157,166,171,160],
[179,170,173,183,0,184,167,189],
[166,168,175,174,156,0,168,166],
[155,157,169,169,173,172,0,180],
[159,156,166,180,151,174,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,169,155,144,178,157,158],
[176,0,174,165,177,161,162,168],
[171,166,0,178,156,172,172,180],
[185,175,162,0,174,168,176,150],
[196,163,184,166,0,182,188,178],
[162,179,168,172,158,0,174,156],
[183,178,168,164,152,166,0,178],
[182,172,160,190,162,184,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,0,0,0,170,0],
[340,0,0,340,170,170,170,170],
[340,340,0,340,170,170,170,170],
[340,0,0,0,170,0,170,0],
[340,170,170,170,0,170,170,170],
[340,170,170,340,170,0,170,170],
[170,170,170,170,170,170,0,170],
[340,170,170,340,170,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,153,178,173,184,168,165],
[165,0,161,170,181,178,166,172],
[187,179,0,192,186,180,177,169],
[162,170,148,0,160,167,169,166],
[167,159,154,180,0,178,161,160],
[156,162,160,173,162,0,160,167],
[172,174,163,171,179,180,0,180],
[175,168,171,174,180,173,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,163,153,161,158,189,175],
[183,0,167,175,169,169,179,182],
[177,173,0,173,172,172,179,165],
[187,165,167,0,171,170,189,173],
[179,171,168,169,0,164,187,179],
[182,171,168,170,176,0,167,182],
[151,161,161,151,153,173,0,167],
[165,158,175,167,161,158,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,172,175,178,169,171,168],
[157,0,173,169,175,150,164,169],
[168,167,0,165,168,173,169,172],
[165,171,175,0,169,161,183,178],
[162,165,172,171,0,161,168,169],
[171,190,167,179,179,0,171,168],
[169,176,171,157,172,169,0,172],
[172,171,168,162,171,172,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,164,190,173,177,186,167],
[165,0,162,190,177,175,185,181],
[176,178,0,191,167,174,196,169],
[150,150,149,0,163,163,181,163],
[167,163,173,177,0,170,184,180],
[163,165,166,177,170,0,178,169],
[154,155,144,159,156,162,0,147],
[173,159,171,177,160,171,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,164,192,159,136,144,164],
[168,0,189,195,177,124,177,151],
[176,151,0,160,184,103,155,160],
[148,145,180,0,142,93,134,132],
[181,163,156,198,0,119,148,173],
[204,216,237,247,221,0,204,165],
[196,163,185,206,192,136,0,149],
[176,189,180,208,167,175,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,187,139,132,156,173,179],
[181,0,205,188,179,157,185,177],
[153,135,0,145,143,120,164,156],
[201,152,195,0,138,187,194,170],
[208,161,197,202,0,170,193,151],
[184,183,220,153,170,0,201,162],
[167,155,176,146,147,139,0,147],
[161,163,184,170,189,178,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,149,167,151,151,160,168],
[184,0,174,177,163,176,151,198],
[191,166,0,186,153,160,164,180],
[173,163,154,0,156,163,149,175],
[189,177,187,184,0,190,170,191],
[189,164,180,177,150,0,161,186],
[180,189,176,191,170,179,0,186],
[172,142,160,165,149,154,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,175,162,197,181,188,178],
[155,0,155,151,198,178,158,196],
[165,185,0,185,185,165,178,189],
[178,189,155,0,181,182,187,172],
[143,142,155,159,0,172,157,158],
[159,162,175,158,168,0,174,156],
[152,182,162,153,183,166,0,171],
[162,144,151,168,182,184,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,178,195,204,161,182,145],
[176,0,188,179,178,173,155,163],
[162,152,0,181,168,167,169,168],
[145,161,159,0,169,154,152,139],
[136,162,172,171,0,167,178,161],
[179,167,173,186,173,0,184,176],
[158,185,171,188,162,156,0,167],
[195,177,172,201,179,164,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,114,129,199,145,175,131],
[210,0,174,182,218,150,200,210],
[226,166,0,173,234,186,218,191],
[211,158,167,0,192,166,200,187],
[141,122,106,148,0,165,186,141],
[195,190,154,174,175,0,200,183],
[165,140,122,140,154,140,0,131],
[209,130,149,153,199,157,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,263,179,194,207,160,162],
[191,0,198,196,209,193,163,208],
[77,142,0,108,174,157,126,121],
[161,144,232,0,243,189,161,180],
[146,131,166,97,0,114,131,112],
[133,147,183,151,226,0,210,144],
[180,177,214,179,209,130,0,127],
[178,132,219,160,228,196,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,161,155,155,146,170,168],
[212,0,160,210,182,192,189,198],
[179,180,0,206,182,190,149,222],
[185,130,134,0,157,139,157,150],
[185,158,158,183,0,186,178,173],
[194,148,150,201,154,0,168,177],
[170,151,191,183,162,172,0,192],
[172,142,118,190,167,163,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,172,169,158,169,161,185],
[138,0,154,163,166,183,156,175],
[168,186,0,179,148,181,152,139],
[171,177,161,0,187,193,170,195],
[182,174,192,153,0,183,167,162],
[171,157,159,147,157,0,148,141],
[179,184,188,170,173,192,0,178],
[155,165,201,145,178,199,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,164,195,166,143,154,193],
[165,0,181,136,136,168,198,178],
[176,159,0,134,162,113,138,193],
[145,204,206,0,183,180,140,194],
[174,204,178,157,0,158,174,175],
[197,172,227,160,182,0,197,208],
[186,142,202,200,166,143,0,186],
[147,162,147,146,165,132,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,153,166,157,191,181,156],
[168,0,168,163,185,167,197,156],
[187,172,0,181,173,174,180,167],
[174,177,159,0,157,164,175,169],
[183,155,167,183,0,175,171,181],
[149,173,166,176,165,0,194,175],
[159,143,160,165,169,146,0,161],
[184,184,173,171,159,165,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,175,162,183,197,214,216],
[160,0,171,183,169,195,173,191],
[165,169,0,172,188,179,191,190],
[178,157,168,0,164,169,209,199],
[157,171,152,176,0,177,201,192],
[143,145,161,171,163,0,172,189],
[126,167,149,131,139,168,0,185],
[124,149,150,141,148,151,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,87,125,169,129,129,87],
[167,0,124,166,124,169,124,41],
[253,216,0,209,168,174,166,170],
[215,174,131,0,172,131,173,131],
[171,216,172,168,0,172,127,85],
[211,171,166,209,168,0,166,170],
[211,216,174,167,213,174,0,215],
[253,299,170,209,255,170,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,153,167,168,159,166,157],
[190,0,184,176,183,157,197,176],
[187,156,0,167,183,175,177,163],
[173,164,173,0,177,144,191,171],
[172,157,157,163,0,153,169,165],
[181,183,165,196,187,0,191,170],
[174,143,163,149,171,149,0,158],
[183,164,177,169,175,170,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,173,153,190,173,187,177],
[171,0,168,151,182,159,138,187],
[167,172,0,153,156,175,152,185],
[187,189,187,0,176,184,165,196],
[150,158,184,164,0,147,148,160],
[167,181,165,156,193,0,166,187],
[153,202,188,175,192,174,0,201],
[163,153,155,144,180,153,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,170,161,166,178,156,171],
[158,0,148,168,158,169,156,181],
[170,192,0,152,166,184,170,168],
[179,172,188,0,165,184,158,180],
[174,182,174,175,0,159,166,175],
[162,171,156,156,181,0,157,179],
[184,184,170,182,174,183,0,176],
[169,159,172,160,165,161,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,178,162,153,165,176,161],
[165,0,173,162,160,140,155,147],
[162,167,0,182,161,164,182,146],
[178,178,158,0,150,162,157,158],
[187,180,179,190,0,176,168,176],
[175,200,176,178,164,0,174,161],
[164,185,158,183,172,166,0,162],
[179,193,194,182,164,179,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,159,180,152,174,167,160],
[167,0,143,160,163,143,157,158],
[181,197,0,185,165,190,161,203],
[160,180,155,0,175,160,169,169],
[188,177,175,165,0,168,178,179],
[166,197,150,180,172,0,161,188],
[173,183,179,171,162,179,0,174],
[180,182,137,171,161,152,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,165,164,161,162,170,166],
[179,0,174,163,160,177,174,173],
[175,166,0,176,156,161,177,172],
[176,177,164,0,165,156,176,182],
[179,180,184,175,0,157,176,167],
[178,163,179,184,183,0,182,180],
[170,166,163,164,164,158,0,166],
[174,167,168,158,173,160,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,192,182,172,175,171,164],
[158,0,165,164,160,168,164,163],
[148,175,0,175,166,173,158,162],
[158,176,165,0,167,173,168,163],
[168,180,174,173,0,178,173,177],
[165,172,167,167,162,0,158,172],
[169,176,182,172,167,182,0,168],
[176,177,178,177,163,168,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,173,155,164,174,178,173],
[162,0,161,169,175,194,178,180],
[167,179,0,183,179,174,185,189],
[185,171,157,0,165,162,173,166],
[176,165,161,175,0,173,178,186],
[166,146,166,178,167,0,177,167],
[162,162,155,167,162,163,0,176],
[167,160,151,174,154,173,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,168,192,177,179,176,197],
[173,0,164,186,162,180,185,175],
[172,176,0,177,161,195,178,181],
[148,154,163,0,151,165,161,160],
[163,178,179,189,0,189,174,184],
[161,160,145,175,151,0,154,161],
[164,155,162,179,166,186,0,187],
[143,165,159,180,156,179,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,85,109,139,149,128,140],
[202,0,162,150,186,166,166,128],
[255,178,0,151,199,163,190,189],
[231,190,189,0,150,189,192,203],
[201,154,141,190,0,179,127,154],
[191,174,177,151,161,0,162,187],
[212,174,150,148,213,178,0,198],
[200,212,151,137,186,153,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,181,184,185,182,169,199],
[158,0,167,182,161,174,173,166],
[159,173,0,182,164,185,174,185],
[156,158,158,0,154,164,162,159],
[155,179,176,186,0,187,177,180],
[158,166,155,176,153,0,164,156],
[171,167,166,178,163,176,0,172],
[141,174,155,181,160,184,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,176,177,168,174,182,171],
[154,0,161,168,172,170,177,164],
[164,179,0,179,180,175,197,173],
[163,172,161,0,161,149,176,164],
[172,168,160,179,0,156,185,166],
[166,170,165,191,184,0,198,177],
[158,163,143,164,155,142,0,166],
[169,176,167,176,174,163,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,172,146,166,185,181,168],
[191,0,187,206,163,181,193,205],
[168,153,0,150,154,203,161,173],
[194,134,190,0,154,186,171,177],
[174,177,186,186,0,198,165,174],
[155,159,137,154,142,0,137,154],
[159,147,179,169,175,203,0,181],
[172,135,167,163,166,186,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,175,168,183,197,164,201],
[155,0,146,167,161,178,152,181],
[165,194,0,177,179,204,182,187],
[172,173,163,0,198,174,171,183],
[157,179,161,142,0,165,150,169],
[143,162,136,166,175,0,169,192],
[176,188,158,169,190,171,0,215],
[139,159,153,157,171,148,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,168,170,171,183,153,160],
[161,0,147,164,151,154,156,153],
[172,193,0,180,183,177,168,167],
[170,176,160,0,164,170,150,161],
[169,189,157,176,0,162,171,175],
[157,186,163,170,178,0,152,162],
[187,184,172,190,169,188,0,174],
[180,187,173,179,165,178,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,183,164,181,178,176,188],
[171,0,190,198,165,183,174,195],
[157,150,0,169,178,181,163,188],
[176,142,171,0,169,184,173,188],
[159,175,162,171,0,171,165,175],
[162,157,159,156,169,0,151,177],
[164,166,177,167,175,189,0,187],
[152,145,152,152,165,163,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,183,181,187,175,163,165],
[171,0,174,175,192,173,171,163],
[157,166,0,179,174,177,166,171],
[159,165,161,0,167,159,154,171],
[153,148,166,173,0,167,151,158],
[165,167,163,181,173,0,168,175],
[177,169,174,186,189,172,0,171],
[175,177,169,169,182,165,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,145,146,178,175,173,171],
[194,0,198,178,152,184,161,166],
[195,142,0,174,142,153,168,139],
[194,162,166,0,155,187,187,143],
[162,188,198,185,0,193,210,184],
[165,156,187,153,147,0,219,179],
[167,179,172,153,130,121,0,125],
[169,174,201,197,156,161,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,167,183,173,159,187,180],
[165,0,173,169,188,175,162,187],
[173,167,0,173,179,163,173,176],
[157,171,167,0,154,157,179,172],
[167,152,161,186,0,162,176,174],
[181,165,177,183,178,0,189,179],
[153,178,167,161,164,151,0,169],
[160,153,164,168,166,161,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,187,188,186,178,191,167],
[168,0,168,176,179,177,163,151],
[153,172,0,181,184,187,178,155],
[152,164,159,0,172,168,197,166],
[154,161,156,168,0,161,190,162],
[162,163,153,172,179,0,188,175],
[149,177,162,143,150,152,0,141],
[173,189,185,174,178,165,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,112,170,208,96,154,151],
[170,0,73,190,190,76,131,168],
[228,267,0,190,229,153,190,211],
[170,150,150,0,228,115,190,207],
[132,150,111,112,0,114,132,168],
[244,264,187,225,226,0,170,224],
[186,209,150,150,208,170,0,224],
[189,172,129,133,172,116,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,164,155,147,175,169,156],
[205,0,201,185,170,217,201,190],
[176,139,0,174,159,154,188,165],
[185,155,166,0,171,173,197,185],
[193,170,181,169,0,185,187,170],
[165,123,186,167,155,0,164,134],
[171,139,152,143,153,176,0,144],
[184,150,175,155,170,206,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,177,170,174,114,182,178],
[158,0,177,140,182,147,166,198],
[163,163,0,134,174,186,165,203],
[170,200,206,0,197,198,170,176],
[166,158,166,143,0,155,156,194],
[226,193,154,142,185,0,205,175],
[158,174,175,170,184,135,0,162],
[162,142,137,164,146,165,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,170,170,181,184,172,171],
[157,0,160,150,171,159,162,171],
[170,180,0,168,173,180,165,168],
[170,190,172,0,172,167,172,169],
[159,169,167,168,0,167,173,168],
[156,181,160,173,173,0,167,169],
[168,178,175,168,167,173,0,158],
[169,169,172,171,172,171,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,188,182,175,177,176,165],
[160,0,184,165,176,168,185,170],
[152,156,0,164,169,168,182,160],
[158,175,176,0,173,172,159,161],
[165,164,171,167,0,174,174,161],
[163,172,172,168,166,0,169,170],
[164,155,158,181,166,171,0,173],
[175,170,180,179,179,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,147,160,177,148,169,170],
[159,0,117,126,151,126,159,152],
[193,223,0,169,193,175,184,172],
[180,214,171,0,160,185,188,165],
[163,189,147,180,0,159,185,150],
[192,214,165,155,181,0,200,163],
[171,181,156,152,155,140,0,152],
[170,188,168,175,190,177,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,161,148,150,150,158,166],
[190,0,175,176,161,173,168,170],
[179,165,0,158,169,144,155,171],
[192,164,182,0,168,169,178,174],
[190,179,171,172,0,155,165,170],
[190,167,196,171,185,0,170,196],
[182,172,185,162,175,170,0,175],
[174,170,169,166,170,144,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,166,173,167,166,166,160],
[156,0,138,157,155,149,163,158],
[174,202,0,196,188,192,200,170],
[167,183,144,0,149,154,178,166],
[173,185,152,191,0,147,163,169],
[174,191,148,186,193,0,172,167],
[174,177,140,162,177,168,0,161],
[180,182,170,174,171,173,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,173,181,184,163,175,182],
[177,0,172,168,180,182,169,173],
[167,168,0,173,175,175,181,184],
[159,172,167,0,166,176,168,172],
[156,160,165,174,0,177,167,161],
[177,158,165,164,163,0,163,165],
[165,171,159,172,173,177,0,170],
[158,167,156,168,179,175,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,208,195,173,193,217,197],
[180,0,214,167,169,160,176,151],
[132,126,0,181,157,144,172,142],
[145,173,159,0,166,136,175,185],
[167,171,183,174,0,158,208,162],
[147,180,196,204,182,0,173,183],
[123,164,168,165,132,167,0,177],
[143,189,198,155,178,157,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,177,175,166,172,182,173],
[168,0,172,170,164,162,168,174],
[163,168,0,171,159,159,170,166],
[165,170,169,0,161,165,169,167],
[174,176,181,179,0,167,176,170],
[168,178,181,175,173,0,179,176],
[158,172,170,171,164,161,0,164],
[167,166,174,173,170,164,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,159,170,157,148,163,168],
[173,0,169,173,180,170,174,184],
[181,171,0,169,178,150,172,179],
[170,167,171,0,188,169,177,168],
[183,160,162,152,0,155,161,172],
[192,170,190,171,185,0,175,180],
[177,166,168,163,179,165,0,178],
[172,156,161,172,168,160,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,115,111,150,38,113,114],
[302,0,227,302,264,188,148,189],
[225,113,0,225,189,113,112,151],
[229,38,115,0,189,38,75,77],
[190,76,151,151,0,74,111,151],
[302,152,227,302,266,0,187,265],
[227,192,228,265,229,153,0,265],
[226,151,189,263,189,75,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,159,188,166,166,161,162],
[177,0,174,175,166,169,160,178],
[181,166,0,175,176,169,167,167],
[152,165,165,0,171,162,160,165],
[174,174,164,169,0,161,165,161],
[174,171,171,178,179,0,182,166],
[179,180,173,180,175,158,0,163],
[178,162,173,175,179,174,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,171,191,169,171,162,175],
[181,0,164,193,169,178,168,188],
[169,176,0,197,170,188,170,186],
[149,147,143,0,154,184,136,178],
[171,171,170,186,0,191,164,189],
[169,162,152,156,149,0,144,166],
[178,172,170,204,176,196,0,194],
[165,152,154,162,151,174,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,227,178,196,150,221,179],
[180,0,195,133,121,162,148,133],
[113,145,0,129,135,130,132,146],
[162,207,211,0,181,150,207,150],
[144,219,205,159,0,161,233,131],
[190,178,210,190,179,0,190,162],
[119,192,208,133,107,150,0,119],
[161,207,194,190,209,178,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,180,166,153,158,145,155],
[191,0,169,170,160,177,176,164],
[160,171,0,159,160,155,170,157],
[174,170,181,0,178,172,174,141],
[187,180,180,162,0,176,167,163],
[182,163,185,168,164,0,177,178],
[195,164,170,166,173,163,0,156],
[185,176,183,199,177,162,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,180,205,136,208,167,148],
[169,0,176,190,161,212,173,168],
[160,164,0,203,151,205,166,153],
[135,150,137,0,163,198,137,140],
[204,179,189,177,0,194,182,164],
[132,128,135,142,146,0,152,140],
[173,167,174,203,158,188,0,179],
[192,172,187,200,176,200,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,159,162,151,161,163,148],
[180,0,181,178,173,182,166,174],
[181,159,0,164,161,169,166,158],
[178,162,176,0,163,185,169,164],
[189,167,179,177,0,191,171,175],
[179,158,171,155,149,0,164,153],
[177,174,174,171,169,176,0,161],
[192,166,182,176,165,187,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,152,151,158,168,194,181],
[182,0,167,178,193,195,205,189],
[188,173,0,170,181,172,191,172],
[189,162,170,0,188,181,206,187],
[182,147,159,152,0,170,169,153],
[172,145,168,159,170,0,184,168],
[146,135,149,134,171,156,0,157],
[159,151,168,153,187,172,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 340, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_8_340.csv", index=False, header=False)
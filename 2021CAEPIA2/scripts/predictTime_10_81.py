
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,39,35,36,35,28,30,36,28,34],
[42,0,39,49,39,29,38,43,54,45],
[46,42,0,45,39,37,35,37,31,38],
[45,32,36,0,32,38,33,38,34,35],
[46,42,42,49,0,31,26,36,42,43],
[53,52,44,43,50,0,54,47,40,41],
[51,43,46,48,55,27,0,44,36,44],
[45,38,44,43,45,34,37,0,29,34],
[53,27,50,47,39,41,45,52,0,31],
[47,36,43,46,38,40,37,47,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,52,37,38,54,42,29,51,29],
[54,0,63,72,66,74,70,58,62,39],
[29,18,0,48,39,43,37,18,40,21],
[44,9,33,0,39,44,51,31,39,40],
[43,15,42,42,0,57,53,31,55,39],
[27,7,38,37,24,0,42,18,48,20],
[39,11,44,30,28,39,0,21,30,24],
[52,23,63,50,50,63,60,0,63,59],
[30,19,41,42,26,33,51,18,0,29],
[52,42,60,41,42,61,57,22,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,49,43,47,43,46,52,35,49],
[38,0,46,32,29,44,34,47,32,36],
[32,35,0,36,36,33,35,38,32,46],
[38,49,45,0,48,45,47,47,41,54],
[34,52,45,33,0,42,47,46,37,55],
[38,37,48,36,39,0,38,49,34,38],
[35,47,46,34,34,43,0,35,28,49],
[29,34,43,34,35,32,46,0,21,44],
[46,49,49,40,44,47,53,60,0,64],
[32,45,35,27,26,43,32,37,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,31,9,38,33,36,34,31,43],
[53,0,47,37,62,69,51,57,45,74],
[50,34,0,43,53,60,57,44,53,60],
[72,44,38,0,63,56,46,57,44,50],
[43,19,28,18,0,25,43,45,35,46],
[48,12,21,25,56,0,52,32,25,39],
[45,30,24,35,38,29,0,38,31,33],
[47,24,37,24,36,49,43,0,49,61],
[50,36,28,37,46,56,50,32,0,57],
[38,7,21,31,35,42,48,20,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,60,47,47,31,25,34,41,22],
[54,0,33,54,60,57,54,51,57,54],
[21,48,0,46,50,24,21,55,44,21],
[34,27,35,0,39,19,16,49,54,13],
[34,21,31,42,0,19,16,52,59,13],
[50,24,57,62,62,0,13,65,69,69],
[56,27,60,65,65,68,0,68,81,72],
[47,30,26,32,29,16,13,0,50,23],
[40,24,37,27,22,12,0,31,0,0],
[59,27,60,68,68,12,9,58,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,72,49,51,42,43,34,56,54],
[50,0,60,35,47,45,53,58,44,41],
[9,21,0,31,42,30,19,28,51,34],
[32,46,50,0,69,44,48,38,56,53],
[30,34,39,12,0,36,31,36,36,32],
[39,36,51,37,45,0,48,41,53,53],
[38,28,62,33,50,33,0,39,37,46],
[47,23,53,43,45,40,42,0,43,58],
[25,37,30,25,45,28,44,38,0,27],
[27,40,47,28,49,28,35,23,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,49,52,33,40,53,44,41],
[39,0,35,40,50,41,36,51,44,35],
[39,46,0,47,44,38,35,54,39,35],
[32,41,34,0,44,44,35,45,49,42],
[29,31,37,37,0,41,44,44,49,34],
[48,40,43,37,40,0,32,55,51,39],
[41,45,46,46,37,49,0,54,49,45],
[28,30,27,36,37,26,27,0,30,33],
[37,37,42,32,32,30,32,51,0,38],
[40,46,46,39,47,42,36,48,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,42,42,37,42,40,45,43,41],
[41,0,40,38,32,29,36,50,38,35],
[39,41,0,40,41,31,34,48,43,37],
[39,43,41,0,41,30,46,49,41,40],
[44,49,40,40,0,32,38,48,50,40],
[39,52,50,51,49,0,47,44,53,50],
[41,45,47,35,43,34,0,47,49,44],
[36,31,33,32,33,37,34,0,38,30],
[38,43,38,40,31,28,32,43,0,34],
[40,46,44,41,41,31,37,51,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,41,66,53,50,58,48,58,40],
[25,0,20,40,16,22,23,26,32,16],
[40,61,0,75,49,46,54,50,58,36],
[15,41,6,0,25,44,38,19,25,24],
[28,65,32,56,0,40,44,34,42,36],
[31,59,35,37,41,0,43,28,26,21],
[23,58,27,43,37,38,0,40,37,36],
[33,55,31,62,47,53,41,0,45,46],
[23,49,23,56,39,55,44,36,0,41],
[41,65,45,57,45,60,45,35,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,29,41,39,39,49,35,45,32],
[43,0,37,43,36,34,42,40,41,39],
[52,44,0,45,42,33,43,37,46,42],
[40,38,36,0,43,45,42,38,40,40],
[42,45,39,38,0,43,51,37,36,43],
[42,47,48,36,38,0,48,40,40,43],
[32,39,38,39,30,33,0,28,37,36],
[46,41,44,43,44,41,53,0,43,40],
[36,40,35,41,45,41,44,38,0,41],
[49,42,39,41,38,38,45,41,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,38,42,38,41,42,36,41,46],
[46,0,41,32,39,40,39,42,44,43],
[43,40,0,43,39,41,34,37,36,43],
[39,49,38,0,42,41,41,44,39,49],
[43,42,42,39,0,44,44,39,43,51],
[40,41,40,40,37,0,39,39,39,47],
[39,42,47,40,37,42,0,38,41,47],
[45,39,44,37,42,42,43,0,38,45],
[40,37,45,42,38,42,40,43,0,49],
[35,38,38,32,30,34,34,36,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,30,50,40,41,48,28,32,31],
[36,0,30,39,45,29,33,22,33,28],
[51,51,0,54,52,47,53,38,46,44],
[31,42,27,0,42,36,42,28,29,31],
[41,36,29,39,0,40,34,29,37,29],
[40,52,34,45,41,0,46,46,49,37],
[33,48,28,39,47,35,0,35,44,35],
[53,59,43,53,52,35,46,0,51,47],
[49,48,35,52,44,32,37,30,0,39],
[50,53,37,50,52,44,46,34,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,35,63,28,34,33,43,31,35],
[46,0,45,62,44,41,49,39,47,46],
[46,36,0,47,45,35,46,40,36,36],
[18,19,34,0,23,24,30,28,29,36],
[53,37,36,58,0,39,50,49,36,47],
[47,40,46,57,42,0,55,46,39,48],
[48,32,35,51,31,26,0,36,34,35],
[38,42,41,53,32,35,45,0,30,41],
[50,34,45,52,45,42,47,51,0,49],
[46,35,45,45,34,33,46,40,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,46,45,33,36,46,36,39,42],
[34,0,50,40,39,40,47,32,36,44],
[35,31,0,34,28,30,34,37,32,41],
[36,41,47,0,29,35,38,37,37,46],
[48,42,53,52,0,42,50,38,32,54],
[45,41,51,46,39,0,44,40,43,57],
[35,34,47,43,31,37,0,29,36,40],
[45,49,44,44,43,41,52,0,33,46],
[42,45,49,44,49,38,45,48,0,53],
[39,37,40,35,27,24,41,35,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,50,57,40,41,24,27,28,60],
[35,0,4,59,16,21,31,18,28,23],
[31,77,0,72,40,17,31,43,24,37],
[24,22,9,0,25,26,24,23,9,36],
[41,65,41,56,0,34,41,40,43,41],
[40,60,64,55,47,0,36,27,51,36],
[57,50,50,57,40,45,0,51,28,64],
[54,63,38,58,41,54,30,0,25,47],
[53,53,57,72,38,30,53,56,0,37],
[21,58,44,45,40,45,17,34,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,29,39,31,46,39,36,35,37],
[44,0,37,39,43,43,41,39,40,46],
[52,44,0,36,43,39,46,34,41,44],
[42,42,45,0,39,43,45,36,39,42],
[50,38,38,42,0,42,42,41,33,43],
[35,38,42,38,39,0,37,34,31,38],
[42,40,35,36,39,44,0,40,34,33],
[45,42,47,45,40,47,41,0,39,44],
[46,41,40,42,48,50,47,42,0,42],
[44,35,37,39,38,43,48,37,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,39,35,39,35,25,39,37,32],
[50,0,44,40,39,44,44,45,35,46],
[42,37,0,37,39,48,35,49,42,35],
[46,41,44,0,43,50,38,47,40,36],
[42,42,42,38,0,41,40,47,44,31],
[46,37,33,31,40,0,29,41,39,43],
[56,37,46,43,41,52,0,40,38,47],
[42,36,32,34,34,40,41,0,37,40],
[44,46,39,41,37,42,43,44,0,48],
[49,35,46,45,50,38,34,41,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,35,44,28,28,35,33,33,34],
[50,0,41,48,40,43,44,34,38,45],
[46,40,0,49,34,34,41,34,31,45],
[37,33,32,0,27,33,33,21,30,39],
[53,41,47,54,0,38,44,38,42,38],
[53,38,47,48,43,0,47,43,38,43],
[46,37,40,48,37,34,0,38,44,43],
[48,47,47,60,43,38,43,0,47,48],
[48,43,50,51,39,43,37,34,0,46],
[47,36,36,42,43,38,38,33,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,57,43,57,33,48,55,41,40],
[35,0,28,32,55,18,49,44,27,37],
[24,53,0,45,40,46,47,40,26,37],
[38,49,36,0,37,20,40,37,36,32],
[24,26,41,44,0,40,58,46,25,32],
[48,63,35,61,41,0,55,43,40,48],
[33,32,34,41,23,26,0,22,18,41],
[26,37,41,44,35,38,59,0,35,42],
[40,54,55,45,56,41,63,46,0,32],
[41,44,44,49,49,33,40,39,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,31,31,39,44,37,37,33,39],
[41,0,37,33,35,37,29,31,34,35],
[50,44,0,39,42,44,38,44,39,42],
[50,48,42,0,44,42,37,43,40,44],
[42,46,39,37,0,43,39,37,38,40],
[37,44,37,39,38,0,37,33,35,40],
[44,52,43,44,42,44,0,40,46,55],
[44,50,37,38,44,48,41,0,45,43],
[48,47,42,41,43,46,35,36,0,44],
[42,46,39,37,41,41,26,38,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,50,32,58,40,42,49,42,57],
[34,0,43,30,41,23,28,40,36,40],
[31,38,0,18,47,29,23,30,36,41],
[49,51,63,0,54,41,29,51,53,49],
[23,40,34,27,0,25,24,32,29,29],
[41,58,52,40,56,0,37,35,46,44],
[39,53,58,52,57,44,0,48,58,58],
[32,41,51,30,49,46,33,0,35,39],
[39,45,45,28,52,35,23,46,0,47],
[24,41,40,32,52,37,23,42,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,42,50,47,53,42,39,52],
[38,0,38,44,45,37,43,29,35,44],
[41,43,0,50,42,50,40,37,40,46],
[39,37,31,0,34,41,36,29,32,48],
[31,36,39,47,0,33,39,33,38,41],
[34,44,31,40,48,0,41,37,37,42],
[28,38,41,45,42,40,0,40,40,48],
[39,52,44,52,48,44,41,0,45,52],
[42,46,41,49,43,44,41,36,0,56],
[29,37,35,33,40,39,33,29,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,41,41,46,45,40,43,48,38],
[45,0,39,40,45,44,44,45,48,50],
[40,42,0,34,47,47,35,46,44,47],
[40,41,47,0,41,44,36,45,38,47],
[35,36,34,40,0,44,32,49,38,41],
[36,37,34,37,37,0,35,40,35,37],
[41,37,46,45,49,46,0,46,43,42],
[38,36,35,36,32,41,35,0,47,36],
[33,33,37,43,43,46,38,34,0,42],
[43,31,34,34,40,44,39,45,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,48,44,39,39,35,38,32,42],
[48,0,58,54,54,47,35,44,45,36],
[33,23,0,41,39,35,28,33,40,37],
[37,27,40,0,51,39,31,36,45,42],
[42,27,42,30,0,36,25,23,33,34],
[42,34,46,42,45,0,45,30,38,45],
[46,46,53,50,56,36,0,45,51,54],
[43,37,48,45,58,51,36,0,51,51],
[49,36,41,36,48,43,30,30,0,41],
[39,45,44,39,47,36,27,30,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,44,45,45,41,48,40,46,46],
[41,0,38,45,43,41,47,40,46,49],
[37,43,0,39,40,37,38,35,45,46],
[36,36,42,0,37,40,39,34,45,41],
[36,38,41,44,0,42,42,40,46,40],
[40,40,44,41,39,0,45,39,39,47],
[33,34,43,42,39,36,0,42,46,44],
[41,41,46,47,41,42,39,0,51,48],
[35,35,36,36,35,42,35,30,0,41],
[35,32,35,40,41,34,37,33,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,34,46,35,41,43,38,40,37],
[41,0,40,41,30,36,44,36,43,39],
[47,41,0,45,41,39,40,44,50,48],
[35,40,36,0,31,36,41,35,40,33],
[46,51,40,50,0,44,48,45,44,43],
[40,45,42,45,37,0,43,42,44,46],
[38,37,41,40,33,38,0,42,41,39],
[43,45,37,46,36,39,39,0,40,36],
[41,38,31,41,37,37,40,41,0,32],
[44,42,33,48,38,35,42,45,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,38,40,44,28,33,36,46,39],
[38,0,27,33,38,28,30,31,33,32],
[43,54,0,41,51,42,44,49,41,40],
[41,48,40,0,51,36,44,36,38,48],
[37,43,30,30,0,34,38,42,39,31],
[53,53,39,45,47,0,41,33,49,47],
[48,51,37,37,43,40,0,39,43,43],
[45,50,32,45,39,48,42,0,39,44],
[35,48,40,43,42,32,38,42,0,45],
[42,49,41,33,50,34,38,37,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,54,44,9,27,26,29,35,31],
[50,0,55,52,43,46,35,59,48,43],
[27,26,0,29,20,32,23,44,38,32],
[37,29,52,0,23,24,40,54,31,36],
[72,38,61,58,0,50,55,49,54,46],
[54,35,49,57,31,0,35,45,54,37],
[55,46,58,41,26,46,0,44,45,37],
[52,22,37,27,32,36,37,0,36,21],
[46,33,43,50,27,27,36,45,0,29],
[50,38,49,45,35,44,44,60,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,41,43,35,46,43,36,40,44],
[42,0,37,40,35,45,45,44,42,50],
[40,44,0,41,41,45,47,35,45,45],
[38,41,40,0,32,48,46,41,44,44],
[46,46,40,49,0,46,42,35,44,51],
[35,36,36,33,35,0,40,33,39,37],
[38,36,34,35,39,41,0,31,39,38],
[45,37,46,40,46,48,50,0,44,43],
[41,39,36,37,37,42,42,37,0,43],
[37,31,36,37,30,44,43,38,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,39,32,30,32,41,40,36,41],
[46,0,43,40,30,41,44,53,46,44],
[42,38,0,34,33,37,38,35,40,39],
[49,41,47,0,35,36,40,45,38,45],
[51,51,48,46,0,36,40,50,47,50],
[49,40,44,45,45,0,44,43,42,51],
[40,37,43,41,41,37,0,47,38,48],
[41,28,46,36,31,38,34,0,39,42],
[45,35,41,43,34,39,43,42,0,50],
[40,37,42,36,31,30,33,39,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,39,59,38,55,47,45,52,50],
[33,0,40,25,31,49,30,31,43,36],
[42,41,0,35,48,43,31,28,40,45],
[22,56,46,0,34,55,37,29,47,40],
[43,50,33,47,0,56,35,37,51,52],
[26,32,38,26,25,0,33,31,35,43],
[34,51,50,44,46,48,0,32,53,45],
[36,50,53,52,44,50,49,0,55,47],
[29,38,41,34,30,46,28,26,0,37],
[31,45,36,41,29,38,36,34,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,40,31,38,39,29,37,41],
[37,0,39,38,32,39,39,45,45,43],
[39,42,0,43,33,41,37,45,36,43],
[41,43,38,0,47,43,48,47,47,56],
[50,49,48,34,0,45,47,45,46,44],
[43,42,40,38,36,0,46,40,40,49],
[42,42,44,33,34,35,0,42,37,44],
[52,36,36,34,36,41,39,0,31,41],
[44,36,45,34,35,41,44,50,0,42],
[40,38,38,25,37,32,37,40,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,31,36,39,36,39,43,40,40],
[50,0,43,46,39,41,46,46,38,47],
[50,38,0,46,42,45,43,46,42,44],
[45,35,35,0,36,43,39,45,43,40],
[42,42,39,45,0,43,41,49,38,44],
[45,40,36,38,38,0,38,45,42,44],
[42,35,38,42,40,43,0,44,41,38],
[38,35,35,36,32,36,37,0,36,36],
[41,43,39,38,43,39,40,45,0,43],
[41,34,37,41,37,37,43,45,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,39,59,46,47,44,45,41,43],
[36,0,45,55,39,45,55,55,40,47],
[42,36,0,29,22,35,39,28,32,36],
[22,26,52,0,28,46,34,44,37,37],
[35,42,59,53,0,42,42,49,43,48],
[34,36,46,35,39,0,36,38,40,28],
[37,26,42,47,39,45,0,47,40,28],
[36,26,53,37,32,43,34,0,46,37],
[40,41,49,44,38,41,41,35,0,28],
[38,34,45,44,33,53,53,44,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,27,31,17,48,17,22,31],
[54,0,34,33,32,34,43,33,55,43],
[54,47,0,43,47,49,38,32,28,53],
[54,48,38,0,31,22,43,12,33,38],
[50,49,34,50,0,50,43,28,39,33],
[64,47,32,59,31,0,64,17,38,47],
[33,38,43,38,38,17,0,28,43,32],
[64,48,49,69,53,64,53,0,49,37],
[59,26,53,48,42,43,38,32,0,43],
[50,38,28,43,48,34,49,44,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,38,48,49,53,50,47,42,47],
[39,0,34,37,42,42,40,42,43,51],
[43,47,0,36,39,37,43,37,36,41],
[33,44,45,0,42,38,37,40,33,39],
[32,39,42,39,0,38,42,45,40,30],
[28,39,44,43,43,0,44,39,49,44],
[31,41,38,44,39,37,0,48,39,49],
[34,39,44,41,36,42,33,0,41,40],
[39,38,45,48,41,32,42,40,0,35],
[34,30,40,42,51,37,32,41,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,33,36,38,35,43,38,40,41],
[49,0,43,40,42,41,53,43,44,44],
[48,38,0,36,42,35,43,41,42,47],
[45,41,45,0,41,41,51,41,39,43],
[43,39,39,40,0,33,43,45,39,40],
[46,40,46,40,48,0,52,38,46,45],
[38,28,38,30,38,29,0,39,40,40],
[43,38,40,40,36,43,42,0,38,40],
[41,37,39,42,42,35,41,43,0,37],
[40,37,34,38,41,36,41,41,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,41,56,41,43,41,43,38,41],
[38,0,45,41,36,44,36,44,36,33],
[40,36,0,45,32,40,29,32,27,44],
[25,40,36,0,33,42,40,35,39,39],
[40,45,49,48,0,42,47,44,38,36],
[38,37,41,39,39,0,34,47,39,38],
[40,45,52,41,34,47,0,45,41,39],
[38,37,49,46,37,34,36,0,34,38],
[43,45,54,42,43,42,40,47,0,46],
[40,48,37,42,45,43,42,43,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,60,45,58,55,40,51,40,63],
[39,0,67,37,38,46,57,41,49,55],
[21,14,0,34,28,40,29,30,37,36],
[36,44,47,0,58,44,57,53,67,54],
[23,43,53,23,0,45,52,31,47,39],
[26,35,41,37,36,0,40,30,36,52],
[41,24,52,24,29,41,0,35,37,50],
[30,40,51,28,50,51,46,0,59,55],
[41,32,44,14,34,45,44,22,0,40],
[18,26,45,27,42,29,31,26,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,29,42,36,20,31,25,32,29],
[54,0,34,50,39,34,45,41,34,33],
[52,47,0,48,46,40,52,41,40,34],
[39,31,33,0,33,19,32,33,30,32],
[45,42,35,48,0,35,51,39,46,29],
[61,47,41,62,46,0,46,34,49,41],
[50,36,29,49,30,35,0,33,33,20],
[56,40,40,48,42,47,48,0,37,37],
[49,47,41,51,35,32,48,44,0,37],
[52,48,47,49,52,40,61,44,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,41,47,56,41,47,44,27,40],
[42,0,36,49,38,44,40,34,30,36],
[40,45,0,46,53,45,52,38,45,42],
[34,32,35,0,44,42,44,40,32,39],
[25,43,28,37,0,32,39,38,17,31],
[40,37,36,39,49,0,49,28,38,34],
[34,41,29,37,42,32,0,39,28,37],
[37,47,43,41,43,53,42,0,36,36],
[54,51,36,49,64,43,53,45,0,46],
[41,45,39,42,50,47,44,45,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,44,42,47,33,42,39,39,35],
[43,0,46,41,45,34,44,37,34,37],
[37,35,0,31,41,36,36,37,32,36],
[39,40,50,0,45,38,38,38,33,35],
[34,36,40,36,0,31,34,32,37,29],
[48,47,45,43,50,0,40,42,37,38],
[39,37,45,43,47,41,0,41,37,31],
[42,44,44,43,49,39,40,0,42,48],
[42,47,49,48,44,44,44,39,0,44],
[46,44,45,46,52,43,50,33,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,39,42,37,38,30,36,41,35],
[52,0,49,46,48,41,38,46,46,52],
[42,32,0,41,46,40,36,42,51,40],
[39,35,40,0,40,41,35,35,39,42],
[44,33,35,41,0,46,35,39,47,47],
[43,40,41,40,35,0,45,42,39,43],
[51,43,45,46,46,36,0,38,45,41],
[45,35,39,46,42,39,43,0,40,50],
[40,35,30,42,34,42,36,41,0,41],
[46,29,41,39,34,38,40,31,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,33,37,47,40,42,57,39,44],
[33,0,41,37,40,42,35,46,38,36],
[48,40,0,45,50,42,43,53,44,49],
[44,44,36,0,42,48,39,48,38,41],
[34,41,31,39,0,34,33,45,32,32],
[41,39,39,33,47,0,29,52,37,34],
[39,46,38,42,48,52,0,48,40,40],
[24,35,28,33,36,29,33,0,28,31],
[42,43,37,43,49,44,41,53,0,43],
[37,45,32,40,49,47,41,50,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,26,36,19,28,37,38,32,34],
[36,0,37,28,34,34,41,29,42,41],
[55,44,0,44,43,38,51,41,46,46],
[45,53,37,0,36,40,52,43,47,41],
[62,47,38,45,0,43,52,34,47,46],
[53,47,43,41,38,0,44,36,41,48],
[44,40,30,29,29,37,0,35,33,36],
[43,52,40,38,47,45,46,0,47,47],
[49,39,35,34,34,40,48,34,0,37],
[47,40,35,40,35,33,45,34,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,39,35,38,41,42,41,38,42],
[38,0,44,38,39,37,41,42,38,43],
[42,37,0,36,39,38,40,42,37,43],
[46,43,45,0,45,39,44,46,42,48],
[43,42,42,36,0,46,48,45,39,41],
[40,44,43,42,35,0,40,41,34,39],
[39,40,41,37,33,41,0,45,39,38],
[40,39,39,35,36,40,36,0,32,44],
[43,43,44,39,42,47,42,49,0,45],
[39,38,38,33,40,42,43,37,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,34,36,34,34,32,48,36,37],
[48,0,38,37,38,34,38,50,44,43],
[47,43,0,39,42,43,38,38,51,45],
[45,44,42,0,44,35,39,46,45,44],
[47,43,39,37,0,43,45,45,45,43],
[47,47,38,46,38,0,37,47,44,43],
[49,43,43,42,36,44,0,53,50,43],
[33,31,43,35,36,34,28,0,40,36],
[45,37,30,36,36,37,31,41,0,35],
[44,38,36,37,38,38,38,45,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,27,48,41,32,48,36,43,47],
[48,0,42,49,32,55,40,42,47,49],
[54,39,0,50,34,50,41,40,49,52],
[33,32,31,0,41,31,44,28,33,42],
[40,49,47,40,0,48,48,30,35,55],
[49,26,31,50,33,0,50,35,50,41],
[33,41,40,37,33,31,0,28,47,51],
[45,39,41,53,51,46,53,0,57,49],
[38,34,32,48,46,31,34,24,0,48],
[34,32,29,39,26,40,30,32,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,50,46,46,36,42,43,43,49],
[35,0,41,39,37,31,35,35,34,39],
[31,40,0,33,31,36,35,35,35,37],
[35,42,48,0,38,36,37,44,43,53],
[35,44,50,43,0,44,40,44,45,49],
[45,50,45,45,37,0,46,43,37,50],
[39,46,46,44,41,35,0,45,45,43],
[38,46,46,37,37,38,36,0,37,50],
[38,47,46,38,36,44,36,44,0,52],
[32,42,44,28,32,31,38,31,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,37,32,37,34,47,46,32,39],
[49,0,38,38,33,42,44,53,40,49],
[44,43,0,37,33,38,42,51,39,34],
[49,43,44,0,39,46,42,52,48,51],
[44,48,48,42,0,38,41,58,47,43],
[47,39,43,35,43,0,41,53,45,41],
[34,37,39,39,40,40,0,51,38,39],
[35,28,30,29,23,28,30,0,35,34],
[49,41,42,33,34,36,43,46,0,35],
[42,32,47,30,38,40,42,47,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,40,46,51,29,41,54,44],
[42,0,39,62,45,46,29,46,55,54],
[42,42,0,52,56,44,40,58,61,56],
[41,19,29,0,39,34,40,40,35,18],
[35,36,25,42,0,41,46,32,30,43],
[30,35,37,47,40,0,30,56,36,55],
[52,52,41,41,35,51,0,34,35,51],
[40,35,23,41,49,25,47,0,35,42],
[27,26,20,46,51,45,46,46,0,33],
[37,27,25,63,38,26,30,39,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,52,47,44,48,39,52,52,49],
[31,0,39,40,34,39,34,33,43,40],
[29,42,0,31,42,45,37,30,44,43],
[34,41,50,0,35,39,37,37,47,48],
[37,47,39,46,0,39,39,43,57,49],
[33,42,36,42,42,0,36,33,50,37],
[42,47,44,44,42,45,0,34,49,39],
[29,48,51,44,38,48,47,0,57,51],
[29,38,37,34,24,31,32,24,0,29],
[32,41,38,33,32,44,42,30,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,42,40,45,49,44,44,43,37],
[32,0,43,37,39,47,43,42,43,35],
[39,38,0,34,36,44,40,50,44,37],
[41,44,47,0,40,54,44,50,43,39],
[36,42,45,41,0,41,42,47,40,44],
[32,34,37,27,40,0,42,35,41,33],
[37,38,41,37,39,39,0,41,40,44],
[37,39,31,31,34,46,40,0,40,28],
[38,38,37,38,41,40,41,41,0,42],
[44,46,44,42,37,48,37,53,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,38,31,40,45,47,54,39,46],
[50,0,45,44,45,45,48,50,39,48],
[43,36,0,41,51,46,48,52,44,52],
[50,37,40,0,43,49,50,53,51,46],
[41,36,30,38,0,39,50,44,40,47],
[36,36,35,32,42,0,37,36,37,40],
[34,33,33,31,31,44,0,41,42,45],
[27,31,29,28,37,45,40,0,34,38],
[42,42,37,30,41,44,39,47,0,42],
[35,33,29,35,34,41,36,43,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,35,33,37,23,30,36,32,45],
[49,0,46,41,46,39,37,46,39,50],
[46,35,0,37,40,31,30,38,29,40],
[48,40,44,0,41,36,33,47,34,46],
[44,35,41,40,0,36,42,44,32,42],
[58,42,50,45,45,0,39,46,47,49],
[51,44,51,48,39,42,0,48,42,49],
[45,35,43,34,37,35,33,0,35,42],
[49,42,52,47,49,34,39,46,0,48],
[36,31,41,35,39,32,32,39,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,58,69,67,40,36,51,75,52],
[14,0,42,41,39,36,21,30,38,53],
[23,39,0,35,35,37,29,39,46,50],
[12,40,46,0,51,31,16,24,28,38],
[14,42,46,30,0,33,21,34,42,52],
[41,45,44,50,48,0,41,45,61,33],
[45,60,52,65,60,40,0,60,62,53],
[30,51,42,57,47,36,21,0,39,43],
[6,43,35,53,39,20,19,42,0,53],
[29,28,31,43,29,48,28,38,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,36,36,33,43,32,40,34,44],
[46,0,37,29,42,38,38,36,48,41],
[45,44,0,46,43,38,48,42,45,49],
[45,52,35,0,42,40,42,39,44,46],
[48,39,38,39,0,37,35,37,42,40],
[38,43,43,41,44,0,43,37,42,41],
[49,43,33,39,46,38,0,36,45,42],
[41,45,39,42,44,44,45,0,41,47],
[47,33,36,37,39,39,36,40,0,42],
[37,40,32,35,41,40,39,34,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,40,43,47,47,47,39,41,42],
[43,0,41,41,44,38,42,41,42,41],
[41,40,0,44,44,39,42,45,45,44],
[38,40,37,0,38,39,46,31,41,44],
[34,37,37,43,0,44,47,40,48,36],
[34,43,42,42,37,0,44,39,40,47],
[34,39,39,35,34,37,0,34,37,33],
[42,40,36,50,41,42,47,0,47,41],
[40,39,36,40,33,41,44,34,0,41],
[39,40,37,37,45,34,48,40,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,46,44,44,39,48,41,35,45],
[47,0,39,42,48,44,45,41,44,42],
[35,42,0,43,39,37,42,44,41,43],
[37,39,38,0,41,38,41,36,40,40],
[37,33,42,40,0,33,44,38,36,39],
[42,37,44,43,48,0,49,36,42,44],
[33,36,39,40,37,32,0,34,38,43],
[40,40,37,45,43,45,47,0,42,47],
[46,37,40,41,45,39,43,39,0,45],
[36,39,38,41,42,37,38,34,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,39,39,40,39,43,44,40,36],
[46,0,32,41,36,47,50,48,44,37],
[42,49,0,40,42,43,42,47,41,47],
[42,40,41,0,33,46,39,43,36,36],
[41,45,39,48,0,48,39,52,44,33],
[42,34,38,35,33,0,34,43,40,36],
[38,31,39,42,42,47,0,44,42,35],
[37,33,34,38,29,38,37,0,33,30],
[41,37,40,45,37,41,39,48,0,38],
[45,44,34,45,48,45,46,51,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,45,52,44,41,49,48,30,40],
[35,0,44,57,46,36,49,43,37,46],
[36,37,0,49,39,33,42,39,29,39],
[29,24,32,0,33,31,41,35,28,30],
[37,35,42,48,0,32,37,36,31,40],
[40,45,48,50,49,0,49,50,44,44],
[32,32,39,40,44,32,0,43,32,41],
[33,38,42,46,45,31,38,0,32,38],
[51,44,52,53,50,37,49,49,0,43],
[41,35,42,51,41,37,40,43,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,44,37,38,37,45,39,48,38],
[49,0,50,37,35,42,43,45,50,51],
[37,31,0,30,33,37,49,36,50,31],
[44,44,51,0,48,41,48,40,50,33],
[43,46,48,33,0,37,46,42,59,44],
[44,39,44,40,44,0,48,42,51,40],
[36,38,32,33,35,33,0,31,51,31],
[42,36,45,41,39,39,50,0,51,28],
[33,31,31,31,22,30,30,30,0,31],
[43,30,50,48,37,41,50,53,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,45,38,40,39,35,42,33,41],
[44,0,42,41,38,43,40,44,46,43],
[36,39,0,37,36,39,39,37,40,42],
[43,40,44,0,42,46,42,42,44,48],
[41,43,45,39,0,45,40,42,48,46],
[42,38,42,35,36,0,40,45,43,46],
[46,41,42,39,41,41,0,40,41,41],
[39,37,44,39,39,36,41,0,45,34],
[48,35,41,37,33,38,40,36,0,42],
[40,38,39,33,35,35,40,47,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,38,39,37,40,29,39,33,39],
[41,0,42,50,41,43,43,45,36,39],
[43,39,0,43,39,46,44,51,38,45],
[42,31,38,0,37,40,44,38,36,35],
[44,40,42,44,0,45,43,47,46,48],
[41,38,35,41,36,0,39,36,35,41],
[52,38,37,37,38,42,0,42,46,42],
[42,36,30,43,34,45,39,0,37,34],
[48,45,43,45,35,46,35,44,0,37],
[42,42,36,46,33,40,39,47,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,38,32,36,35,40,38,37,41],
[57,0,46,42,42,45,38,40,43,50],
[43,35,0,33,34,37,37,36,41,35],
[49,39,48,0,41,47,37,41,45,53],
[45,39,47,40,0,40,40,41,47,42],
[46,36,44,34,41,0,40,37,41,39],
[41,43,44,44,41,41,0,46,39,45],
[43,41,45,40,40,44,35,0,42,40],
[44,38,40,36,34,40,42,39,0,38],
[40,31,46,28,39,42,36,41,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,44,39,44,35,42,43,32,36],
[37,0,40,43,47,35,46,46,34,42],
[37,41,0,39,38,35,41,41,34,41],
[42,38,42,0,45,40,38,40,40,49],
[37,34,43,36,0,37,41,37,31,42],
[46,46,46,41,44,0,44,42,42,40],
[39,35,40,43,40,37,0,40,34,43],
[38,35,40,41,44,39,41,0,37,43],
[49,47,47,41,50,39,47,44,0,53],
[45,39,40,32,39,41,38,38,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,48,43,40,34,41,42,54,45],
[38,0,45,36,42,32,38,37,47,51],
[33,36,0,36,37,27,28,24,44,42],
[38,45,45,0,40,29,36,39,52,42],
[41,39,44,41,0,32,41,37,58,45],
[47,49,54,52,49,0,48,32,55,57],
[40,43,53,45,40,33,0,37,53,37],
[39,44,57,42,44,49,44,0,51,47],
[27,34,37,29,23,26,28,30,0,31],
[36,30,39,39,36,24,44,34,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,47,23,68,27,28,34,60,24],
[49,0,42,30,42,24,38,54,52,26],
[34,39,0,22,63,27,40,17,27,45],
[58,51,59,0,59,25,36,34,51,35],
[13,39,18,22,0,27,29,13,27,35],
[54,57,54,56,54,0,31,47,45,31],
[53,43,41,45,52,50,0,46,51,25],
[47,27,64,47,68,34,35,0,67,41],
[21,29,54,30,54,36,30,14,0,36],
[57,55,36,46,46,50,56,40,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,46,47,42,46,44,50,40,51],
[26,0,37,40,34,32,35,44,37,40],
[35,44,0,38,42,40,41,37,37,42],
[34,41,43,0,33,36,41,40,36,40],
[39,47,39,48,0,42,47,48,40,49],
[35,49,41,45,39,0,43,42,45,44],
[37,46,40,40,34,38,0,42,42,44],
[31,37,44,41,33,39,39,0,38,41],
[41,44,44,45,41,36,39,43,0,44],
[30,41,39,41,32,37,37,40,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,43,45,46,40,48,42,45,42],
[36,0,42,40,40,33,39,35,40,34],
[38,39,0,43,43,39,35,35,41,33],
[36,41,38,0,34,32,36,39,36,39],
[35,41,38,47,0,35,41,38,42,42],
[41,48,42,49,46,0,46,38,45,43],
[33,42,46,45,40,35,0,32,44,33],
[39,46,46,42,43,43,49,0,52,42],
[36,41,40,45,39,36,37,29,0,36],
[39,47,48,42,39,38,48,39,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,37,41,36,40,42,41,33,32],
[33,0,37,38,37,40,39,39,35,29],
[44,44,0,36,41,35,35,36,38,36],
[40,43,45,0,30,37,43,40,35,36],
[45,44,40,51,0,45,43,46,39,40],
[41,41,46,44,36,0,34,39,42,39],
[39,42,46,38,38,47,0,47,36,37],
[40,42,45,41,35,42,34,0,40,37],
[48,46,43,46,42,39,45,41,0,42],
[49,52,45,45,41,42,44,44,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,43,39,42,33,35,44,44,42],
[39,0,37,35,42,32,31,41,44,40],
[38,44,0,42,49,30,36,43,50,42],
[42,46,39,0,42,37,41,40,50,40],
[39,39,32,39,0,38,33,32,35,36],
[48,49,51,44,43,0,39,48,46,41],
[46,50,45,40,48,42,0,51,43,45],
[37,40,38,41,49,33,30,0,38,42],
[37,37,31,31,46,35,38,43,0,42],
[39,41,39,41,45,40,36,39,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,32,36,51,36,42,37,48,44],
[37,0,37,38,47,33,42,49,44,37],
[49,44,0,45,49,42,47,52,50,35],
[45,43,36,0,40,39,38,49,42,36],
[30,34,32,41,0,28,36,35,32,32],
[45,48,39,42,53,0,43,47,46,49],
[39,39,34,43,45,38,0,48,44,45],
[44,32,29,32,46,34,33,0,30,41],
[33,37,31,39,49,35,37,51,0,32],
[37,44,46,45,49,32,36,40,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,48,49,42,45,39,62,43,39],
[46,0,34,46,43,37,35,60,43,40],
[33,47,0,43,30,30,36,47,34,40],
[32,35,38,0,23,26,32,55,33,40],
[39,38,51,58,0,33,33,56,48,33],
[36,44,51,55,48,0,44,58,50,48],
[42,46,45,49,48,37,0,51,41,42],
[19,21,34,26,25,23,30,0,40,30],
[38,38,47,48,33,31,40,41,0,36],
[42,41,41,41,48,33,39,51,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,48,45,41,43,40,50,44,45],
[38,0,44,45,43,39,40,50,42,41],
[33,37,0,44,41,42,44,44,40,43],
[36,36,37,0,38,35,37,41,36,38],
[40,38,40,43,0,41,40,43,46,42],
[38,42,39,46,40,0,42,40,38,39],
[41,41,37,44,41,39,0,43,44,43],
[31,31,37,40,38,41,38,0,35,38],
[37,39,41,45,35,43,37,46,0,47],
[36,40,38,43,39,42,38,43,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,49,46,46,39,39,47,48,48],
[46,0,33,47,44,32,31,37,40,50],
[32,48,0,43,46,36,41,40,43,48],
[35,34,38,0,38,36,28,40,43,35],
[35,37,35,43,0,40,37,39,41,50],
[42,49,45,45,41,0,35,41,43,51],
[42,50,40,53,44,46,0,40,40,48],
[34,44,41,41,42,40,41,0,38,47],
[33,41,38,38,40,38,41,43,0,40],
[33,31,33,46,31,30,33,34,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,49,40,38,45,53,40,43,43],
[38,0,41,45,33,40,39,28,47,32],
[32,40,0,41,26,36,37,35,34,32],
[41,36,40,0,37,45,40,48,46,41],
[43,48,55,44,0,44,51,38,47,36],
[36,41,45,36,37,0,44,38,39,35],
[28,42,44,41,30,37,0,38,36,28],
[41,53,46,33,43,43,43,0,52,39],
[38,34,47,35,34,42,45,29,0,33],
[38,49,49,40,45,46,53,42,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,33,35,35,47,35,53,28,39],
[46,0,43,38,51,49,41,52,31,41],
[48,38,0,61,51,50,46,59,46,60],
[46,43,20,0,39,45,35,35,31,30],
[46,30,30,42,0,56,39,33,33,37],
[34,32,31,36,25,0,33,46,30,41],
[46,40,35,46,42,48,0,54,37,58],
[28,29,22,46,48,35,27,0,18,40],
[53,50,35,50,48,51,44,63,0,57],
[42,40,21,51,44,40,23,41,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,22,0,13,9,9,35,18,24],
[0,0,22,0,13,9,9,35,0,0],
[59,59,0,59,63,33,59,59,59,59],
[81,81,22,0,55,31,27,53,31,51],
[68,68,18,26,0,18,35,35,18,68],
[72,72,48,50,63,0,35,35,44,50],
[72,72,22,54,46,46,0,57,22,46],
[46,46,22,28,46,46,24,0,22,46],
[63,81,22,50,63,37,59,59,0,59],
[57,81,22,30,13,31,35,35,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,35,26,54,43,39,28,48,38],
[44,0,34,36,48,40,40,37,43,39],
[46,47,0,36,56,43,54,32,54,45],
[55,45,45,0,44,48,52,40,55,47],
[27,33,25,37,0,32,45,28,44,34],
[38,41,38,33,49,0,40,34,44,52],
[42,41,27,29,36,41,0,31,29,33],
[53,44,49,41,53,47,50,0,65,40],
[33,38,27,26,37,37,52,16,0,30],
[43,42,36,34,47,29,48,41,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,38,39,41,42,43,33,39,38],
[45,0,41,42,37,45,45,36,42,39],
[43,40,0,39,39,46,39,42,39,36],
[42,39,42,0,38,46,39,44,40,40],
[40,44,42,43,0,44,43,35,44,42],
[39,36,35,35,37,0,33,36,32,32],
[38,36,42,42,38,48,0,33,39,38],
[48,45,39,37,46,45,48,0,40,41],
[42,39,42,41,37,49,42,41,0,35],
[43,42,45,41,39,49,43,40,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,49,42,12,36,39,46,25,39],
[54,0,68,42,38,41,47,52,52,47],
[32,13,0,24,36,35,26,41,33,24],
[39,39,57,0,34,59,51,41,28,62],
[69,43,45,47,0,44,69,55,28,52],
[45,40,46,22,37,0,37,54,19,51],
[42,34,55,30,12,44,0,44,26,40],
[35,29,40,40,26,27,37,0,34,44],
[56,29,48,53,53,62,55,47,0,53],
[42,34,57,19,29,30,41,37,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,28,35,55,48,48,48,44,45],
[37,0,26,39,33,37,43,37,33,24],
[53,55,0,48,54,43,49,52,25,45],
[46,42,33,0,44,51,33,55,25,49],
[26,48,27,37,0,43,47,47,26,30],
[33,44,38,30,38,0,38,38,31,24],
[33,38,32,48,34,43,0,39,17,16],
[33,44,29,26,34,43,42,0,33,24],
[37,48,56,56,55,50,64,48,0,37],
[36,57,36,32,51,57,65,57,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,37,44,34,46,43,45,50,40],
[45,0,37,49,36,49,39,37,43,44],
[44,44,0,46,36,48,34,44,50,57],
[37,32,35,0,25,37,26,33,38,44],
[47,45,45,56,0,43,35,43,45,52],
[35,32,33,44,38,0,28,35,49,44],
[38,42,47,55,46,53,0,46,47,53],
[36,44,37,48,38,46,35,0,45,45],
[31,38,31,43,36,32,34,36,0,43],
[41,37,24,37,29,37,28,36,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,37,20,17,33,19,27,39,31],
[43,0,29,45,37,40,37,49,64,33],
[44,52,0,53,38,52,40,48,51,45],
[61,36,28,0,40,56,51,36,55,62],
[64,44,43,41,0,39,61,27,61,56],
[48,41,29,25,42,0,63,50,50,56],
[62,44,41,30,20,18,0,16,51,32],
[54,32,33,45,54,31,65,0,65,50],
[42,17,30,26,20,31,30,16,0,43],
[50,48,36,19,25,25,49,31,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,36,41,50,58,39,45,51,43],
[27,0,29,18,27,46,41,30,27,49],
[45,52,0,42,47,54,47,35,47,66],
[40,63,39,0,51,52,61,47,42,59],
[31,54,34,30,0,34,45,42,48,44],
[23,35,27,29,47,0,31,26,42,31],
[42,40,34,20,36,50,0,38,25,54],
[36,51,46,34,39,55,43,0,33,59],
[30,54,34,39,33,39,56,48,0,46],
[38,32,15,22,37,50,27,22,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,31,36,40,29,34,39,34,39],
[44,0,38,42,40,46,42,50,41,37],
[50,43,0,42,38,51,43,49,44,46],
[45,39,39,0,44,51,50,51,39,47],
[41,41,43,37,0,37,40,37,35,33],
[52,35,30,30,44,0,37,36,36,43],
[47,39,38,31,41,44,0,40,38,43],
[42,31,32,30,44,45,41,0,37,41],
[47,40,37,42,46,45,43,44,0,39],
[42,44,35,34,48,38,38,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,35,34,40,28,30,46,50,41],
[39,0,41,36,43,36,36,47,42,40],
[46,40,0,51,39,40,42,54,47,39],
[47,45,30,0,39,28,27,47,49,37],
[41,38,42,42,0,39,32,44,34,39],
[53,45,41,53,42,0,40,58,48,44],
[51,45,39,54,49,41,0,53,46,45],
[35,34,27,34,37,23,28,0,45,39],
[31,39,34,32,47,33,35,36,0,35],
[40,41,42,44,42,37,36,42,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,35,46,33,39,33,43,31,35],
[42,0,32,44,33,46,34,34,35,36],
[46,49,0,52,45,50,37,44,42,42],
[35,37,29,0,32,40,29,36,26,31],
[48,48,36,49,0,53,40,51,39,49],
[42,35,31,41,28,0,28,36,26,35],
[48,47,44,52,41,53,0,43,39,44],
[38,47,37,45,30,45,38,0,29,39],
[50,46,39,55,42,55,42,52,0,43],
[46,45,39,50,32,46,37,42,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,49,37,48,45,46,43,44,49],
[34,0,42,33,42,42,38,45,37,45],
[32,39,0,29,36,35,39,37,35,43],
[44,48,52,0,44,44,47,49,40,46],
[33,39,45,37,0,40,44,42,32,39],
[36,39,46,37,41,0,40,43,38,46],
[35,43,42,34,37,41,0,46,36,40],
[38,36,44,32,39,38,35,0,34,45],
[37,44,46,41,49,43,45,47,0,46],
[32,36,38,35,42,35,41,36,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,40,14,24,26,31,62,45,50],
[26,0,66,40,24,26,5,36,19,36],
[41,15,0,40,29,41,5,41,15,36],
[67,41,41,0,41,67,31,67,41,41],
[57,57,52,40,0,57,57,62,57,26],
[55,55,40,14,24,0,31,62,45,24],
[50,76,76,50,24,50,0,50,24,50],
[19,45,40,14,19,19,31,0,19,14],
[36,62,66,40,24,36,57,62,0,36],
[31,45,45,40,55,57,31,67,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,52,45,31,39,46,44,49,46],
[32,0,38,35,34,31,40,38,42,41],
[29,43,0,45,35,37,38,39,51,43],
[36,46,36,0,41,34,38,35,42,43],
[50,47,46,40,0,41,56,41,40,44],
[42,50,44,47,40,0,40,49,54,49],
[35,41,43,43,25,41,0,37,46,43],
[37,43,42,46,40,32,44,0,49,47],
[32,39,30,39,41,27,35,32,0,41],
[35,40,38,38,37,32,38,34,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,44,39,46,44,45,45,50,43],
[31,0,38,33,32,37,33,39,39,39],
[37,43,0,43,41,40,40,33,39,40],
[42,48,38,0,47,51,47,47,49,43],
[35,49,40,34,0,34,38,37,36,39],
[37,44,41,30,47,0,39,43,42,40],
[36,48,41,34,43,42,0,42,44,42],
[36,42,48,34,44,38,39,0,49,37],
[31,42,42,32,45,39,37,32,0,39],
[38,42,41,38,42,41,39,44,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,36,34,33,46,48,36,40,37],
[36,0,35,32,34,33,44,39,44,35],
[45,46,0,37,41,39,44,34,42,56],
[47,49,44,0,47,44,52,40,45,37],
[48,47,40,34,0,34,55,48,53,45],
[35,48,42,37,47,0,43,46,43,36],
[33,37,37,29,26,38,0,36,41,41],
[45,42,47,41,33,35,45,0,43,47],
[41,37,39,36,28,38,40,38,0,43],
[44,46,25,44,36,45,40,34,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,46,53,40,47,44,39,44,39],
[26,0,24,34,35,29,42,38,35,39],
[35,57,0,53,43,46,38,42,46,36],
[28,47,28,0,28,36,39,37,32,39],
[41,46,38,53,0,43,46,33,46,44],
[34,52,35,45,38,0,33,39,33,36],
[37,39,43,42,35,48,0,37,43,35],
[42,43,39,44,48,42,44,0,47,40],
[37,46,35,49,35,48,38,34,0,39],
[42,42,45,42,37,45,46,41,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,37,33,43,38,37,27,44,37],
[37,0,47,45,43,42,43,32,40,46],
[44,34,0,40,39,33,32,39,39,37],
[48,36,41,0,41,41,44,37,38,36],
[38,38,42,40,0,40,39,31,43,40],
[43,39,48,40,41,0,45,43,45,39],
[44,38,49,37,42,36,0,37,35,39],
[54,49,42,44,50,38,44,0,47,46],
[37,41,42,43,38,36,46,34,0,45],
[44,35,44,45,41,42,42,35,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,34,43,34,29,25,47,37,49],
[45,0,44,51,39,48,34,46,39,52],
[47,37,0,37,39,41,34,47,34,51],
[38,30,44,0,33,32,24,38,44,45],
[47,42,42,48,0,42,31,39,43,44],
[52,33,40,49,39,0,39,40,35,38],
[56,47,47,57,50,42,0,52,54,40],
[34,35,34,43,42,41,29,0,34,34],
[44,42,47,37,38,46,27,47,0,47],
[32,29,30,36,37,43,41,47,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,34,45,39,41,31,44,32,42],
[43,0,53,50,48,44,38,55,37,41],
[47,28,0,46,41,44,35,47,29,36],
[36,31,35,0,34,28,30,41,33,36],
[42,33,40,47,0,41,38,49,41,42],
[40,37,37,53,40,0,38,45,41,43],
[50,43,46,51,43,43,0,50,40,44],
[37,26,34,40,32,36,31,0,23,32],
[49,44,52,48,40,40,41,58,0,48],
[39,40,45,45,39,38,37,49,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,53,35,48,49,50,59,55,60],
[21,0,44,23,31,37,36,43,38,33],
[28,37,0,32,45,46,44,34,58,42],
[46,58,49,0,46,51,36,51,59,71],
[33,50,36,35,0,52,49,52,46,39],
[32,44,35,30,29,0,34,41,43,34],
[31,45,37,45,32,47,0,44,37,52],
[22,38,47,30,29,40,37,0,48,34],
[26,43,23,22,35,38,44,33,0,38],
[21,48,39,10,42,47,29,47,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,44,31,32,33,27,33,38,32],
[49,0,43,35,40,39,40,37,41,36],
[37,38,0,30,35,33,32,38,41,37],
[50,46,51,0,48,39,43,42,53,44],
[49,41,46,33,0,33,34,41,43,47],
[48,42,48,42,48,0,34,45,39,42],
[54,41,49,38,47,47,0,41,50,41],
[48,44,43,39,40,36,40,0,43,35],
[43,40,40,28,38,42,31,38,0,40],
[49,45,44,37,34,39,40,46,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,36,30,43,57,48,47,32,41],
[52,0,49,47,28,62,52,52,36,46],
[45,32,0,40,35,43,42,32,32,41],
[51,34,41,0,33,35,34,52,27,23],
[38,53,46,48,0,64,60,59,51,57],
[24,19,38,46,17,0,45,37,29,51],
[33,29,39,47,21,36,0,40,20,33],
[34,29,49,29,22,44,41,0,24,27],
[49,45,49,54,30,52,61,57,0,58],
[40,35,40,58,24,30,48,54,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,51,41,40,47,42,45,38,36],
[40,0,49,47,39,45,44,44,44,44],
[30,32,0,34,35,33,38,39,36,36],
[40,34,47,0,39,44,45,40,34,39],
[41,42,46,42,0,40,46,44,38,41],
[34,36,48,37,41,0,39,40,40,32],
[39,37,43,36,35,42,0,45,38,40],
[36,37,42,41,37,41,36,0,34,35],
[43,37,45,47,43,41,43,47,0,38],
[45,37,45,42,40,49,41,46,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,34,41,44,42,38,50,41,39],
[42,0,33,35,31,34,37,40,32,34],
[47,48,0,35,47,50,47,57,70,46],
[40,46,46,0,45,36,38,48,60,38],
[37,50,34,36,0,29,34,41,48,38],
[39,47,31,45,52,0,40,57,41,36],
[43,44,34,43,47,41,0,68,42,36],
[31,41,24,33,40,24,13,0,39,26],
[40,49,11,21,33,40,39,42,0,46],
[42,47,35,43,43,45,45,55,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,42,46,42,37,46,41,39,37],
[43,0,39,49,43,40,48,46,48,40],
[39,42,0,49,43,43,43,49,44,42],
[35,32,32,0,32,39,37,43,36,38],
[39,38,38,49,0,39,48,47,41,38],
[44,41,38,42,42,0,43,48,46,45],
[35,33,38,44,33,38,0,46,41,34],
[40,35,32,38,34,33,35,0,35,33],
[42,33,37,45,40,35,40,46,0,39],
[44,41,39,43,43,36,47,48,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,32,33,37,34,34,40,37,30],
[42,0,32,35,38,40,41,42,30,31],
[49,49,0,50,40,40,40,51,47,40],
[48,46,31,0,44,44,39,51,39,36],
[44,43,41,37,0,32,40,40,36,39],
[47,41,41,37,49,0,44,51,39,42],
[47,40,41,42,41,37,0,48,37,35],
[41,39,30,30,41,30,33,0,32,31],
[44,51,34,42,45,42,44,49,0,45],
[51,50,41,45,42,39,46,50,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,10,10,46,27,27,27,0,27],
[54,0,40,34,70,29,57,81,43,70],
[71,41,0,41,60,36,28,41,43,41],
[71,47,40,0,60,47,57,47,43,70],
[35,11,21,21,0,21,21,38,11,34],
[54,52,45,34,60,0,62,52,24,51],
[54,24,53,24,60,19,0,41,43,34],
[54,0,40,34,43,29,40,0,43,53],
[81,38,38,38,70,57,38,38,0,51],
[54,11,40,11,47,30,47,28,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,41,48,41,42,47,46,45,37],
[37,0,46,43,44,43,39,44,41,40],
[40,35,0,45,46,44,46,43,44,39],
[33,38,36,0,37,35,41,40,37,39],
[40,37,35,44,0,39,49,45,42,39],
[39,38,37,46,42,0,43,40,44,38],
[34,42,35,40,32,38,0,44,33,35],
[35,37,38,41,36,41,37,0,40,34],
[36,40,37,44,39,37,48,41,0,43],
[44,41,42,42,42,43,46,47,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,42,43,34,29,41,30,25,54],
[45,0,42,43,37,37,35,54,54,53],
[39,39,0,39,36,31,38,48,40,55],
[38,38,42,0,51,41,49,37,42,59],
[47,44,45,30,0,37,44,43,56,61],
[52,44,50,40,44,0,47,41,68,59],
[40,46,43,32,37,34,0,38,47,57],
[51,27,33,44,38,40,43,0,54,60],
[56,27,41,39,25,13,34,27,0,47],
[27,28,26,22,20,22,24,21,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,42,37,37,34,47,46,56,41],
[38,0,39,37,41,32,39,34,48,30],
[39,42,0,34,42,43,36,42,52,43],
[44,44,47,0,43,42,38,45,60,44],
[44,40,39,38,0,37,41,37,54,38],
[47,49,38,39,44,0,37,41,54,42],
[34,42,45,43,40,44,0,44,53,45],
[35,47,39,36,44,40,37,0,48,46],
[25,33,29,21,27,27,28,33,0,28],
[40,51,38,37,43,39,36,35,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,39,36,31,35,38,39,35,38],
[39,0,38,39,41,42,39,45,36,45],
[42,43,0,45,48,47,47,53,39,43],
[45,42,36,0,45,47,47,56,34,44],
[50,40,33,36,0,44,53,44,41,42],
[46,39,34,34,37,0,41,45,34,42],
[43,42,34,34,28,40,0,30,31,33],
[42,36,28,25,37,36,51,0,33,39],
[46,45,42,47,40,47,50,48,0,45],
[43,36,38,37,39,39,48,42,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,41,55,36,67,37,39,55,37],
[44,0,61,61,37,54,43,59,61,57],
[40,20,0,57,37,59,30,54,59,40],
[26,20,24,0,23,48,24,43,33,39],
[45,44,44,58,0,57,29,35,69,58],
[14,27,22,33,24,0,15,28,40,28],
[44,38,51,57,52,66,0,45,59,62],
[42,22,27,38,46,53,36,0,55,47],
[26,20,22,48,12,41,22,26,0,22],
[44,24,41,42,23,53,19,34,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,42,45,37,43,35,48,40,38],
[42,0,37,56,39,47,34,47,39,43],
[39,44,0,51,47,56,45,49,43,49],
[36,25,30,0,37,40,30,39,33,34],
[44,42,34,44,0,43,35,43,42,40],
[38,34,25,41,38,0,37,45,38,40],
[46,47,36,51,46,44,0,49,44,44],
[33,34,32,42,38,36,32,0,41,37],
[41,42,38,48,39,43,37,40,0,41],
[43,38,32,47,41,41,37,44,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,40,39,35,36,43,38,38,39],
[44,0,40,47,42,43,44,43,43,41],
[41,41,0,37,42,42,42,43,40,46],
[42,34,44,0,41,42,41,41,37,40],
[46,39,39,40,0,39,41,43,38,44],
[45,38,39,39,42,0,48,40,41,40],
[38,37,39,40,40,33,0,38,43,39],
[43,38,38,40,38,41,43,0,42,41],
[43,38,41,44,43,40,38,39,0,46],
[42,40,35,41,37,41,42,40,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,32,32,33,39,40,19,51,35],
[42,0,44,44,40,38,43,44,46,48],
[49,37,0,30,49,47,40,33,56,31],
[49,37,51,0,53,42,47,36,50,37],
[48,41,32,28,0,38,40,34,48,44],
[42,43,34,39,43,0,37,31,40,33],
[41,38,41,34,41,44,0,35,41,40],
[62,37,48,45,47,50,46,0,49,39],
[30,35,25,31,33,41,40,32,0,33],
[46,33,50,44,37,48,41,42,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,50,42,49,45,42,38,48,53],
[33,0,41,34,45,38,47,48,33,35],
[31,40,0,34,44,36,39,36,36,42],
[39,47,47,0,46,39,44,38,45,48],
[32,36,37,35,0,38,36,34,39,39],
[36,43,45,42,43,0,41,35,51,40],
[39,34,42,37,45,40,0,39,38,41],
[43,33,45,43,47,46,42,0,41,46],
[33,48,45,36,42,30,43,40,0,44],
[28,46,39,33,42,41,40,35,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,35,44,43,39,38,40,32,38],
[48,0,42,44,52,47,37,45,42,45],
[46,39,0,46,50,47,42,50,37,38],
[37,37,35,0,42,35,34,42,35,33],
[38,29,31,39,0,35,26,31,30,33],
[42,34,34,46,46,0,38,40,31,37],
[43,44,39,47,55,43,0,45,40,38],
[41,36,31,39,50,41,36,0,34,36],
[49,39,44,46,51,50,41,47,0,43],
[43,36,43,48,48,44,43,45,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,43,33,43,31,40,49,45,29],
[47,0,46,43,51,44,40,48,50,39],
[38,35,0,33,45,33,38,44,38,30],
[48,38,48,0,51,53,40,56,49,43],
[38,30,36,30,0,33,38,37,45,31],
[50,37,48,28,48,0,40,35,49,31],
[41,41,43,41,43,41,0,44,48,35],
[32,33,37,25,44,46,37,0,41,34],
[36,31,43,32,36,32,33,40,0,34],
[52,42,51,38,50,50,46,47,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,38,41,37,37,45,31,36,34],
[49,0,44,46,41,44,47,38,37,52],
[43,37,0,35,41,35,42,43,40,49],
[40,35,46,0,41,42,48,33,36,46],
[44,40,40,40,0,41,44,32,41,52],
[44,37,46,39,40,0,45,35,44,49],
[36,34,39,33,37,36,0,34,35,37],
[50,43,38,48,49,46,47,0,48,51],
[45,44,41,45,40,37,46,33,0,51],
[47,29,32,35,29,32,44,30,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,30,27,50,39,30,30,37,59],
[53,0,34,45,75,28,42,51,42,39],
[51,47,0,49,57,40,46,55,16,46],
[54,36,32,0,44,23,51,49,37,43],
[31,6,24,37,0,17,42,37,31,31],
[42,53,41,58,64,0,64,61,40,51],
[51,39,35,30,39,17,0,68,37,45],
[51,30,26,32,44,20,13,0,40,37],
[44,39,65,44,50,41,44,41,0,57],
[22,42,35,38,50,30,36,44,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,52,54,36,57,53,44,45,50],
[32,0,44,47,41,49,46,33,45,40],
[29,37,0,40,38,46,45,31,44,40],
[27,34,41,0,34,47,50,32,35,47],
[45,40,43,47,0,50,50,32,54,51],
[24,32,35,34,31,0,35,34,33,36],
[28,35,36,31,31,46,0,27,32,40],
[37,48,50,49,49,47,54,0,44,49],
[36,36,37,46,27,48,49,37,0,41],
[31,41,41,34,30,45,41,32,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,51,41,48,48,39,54,44,49],
[32,0,52,40,43,41,37,47,44,48],
[30,29,0,32,43,47,31,45,40,49],
[40,41,49,0,47,58,47,54,45,51],
[33,38,38,34,0,45,47,51,46,46],
[33,40,34,23,36,0,39,38,40,43],
[42,44,50,34,34,42,0,33,38,52],
[27,34,36,27,30,43,48,0,37,43],
[37,37,41,36,35,41,43,44,0,50],
[32,33,32,30,35,38,29,38,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,38,39,33,40,35,43,39,36],
[37,0,39,42,42,39,37,49,45,37],
[43,42,0,43,47,45,39,46,46,44],
[42,39,38,0,43,40,37,37,37,35],
[48,39,34,38,0,38,33,39,33,36],
[41,42,36,41,43,0,37,43,38,42],
[46,44,42,44,48,44,0,51,39,43],
[38,32,35,44,42,38,30,0,35,36],
[42,36,35,44,48,43,42,46,0,41],
[45,44,37,46,45,39,38,45,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,38,34,37,47,22,23,32,35],
[34,0,37,41,30,55,28,22,33,36],
[43,44,0,44,39,54,34,34,36,55],
[47,40,37,0,32,47,34,36,42,60],
[44,51,42,49,0,51,32,23,46,47],
[34,26,27,34,30,0,16,18,26,20],
[59,53,47,47,49,65,0,52,35,55],
[58,59,47,45,58,63,29,0,39,57],
[49,48,45,39,35,55,46,42,0,60],
[46,45,26,21,34,61,26,24,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,41,41,32,36,34,39,29,40],
[44,0,45,44,40,45,44,44,40,39],
[40,36,0,46,37,43,38,41,28,38],
[40,37,35,0,32,38,31,39,27,35],
[49,41,44,49,0,44,39,51,41,40],
[45,36,38,43,37,0,40,39,33,37],
[47,37,43,50,42,41,0,46,37,39],
[42,37,40,42,30,42,35,0,39,38],
[52,41,53,54,40,48,44,42,0,44],
[41,42,43,46,41,44,42,43,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,49,31,21,47,52,46,34,45],
[48,0,55,45,33,40,52,40,41,44],
[32,26,0,17,16,35,39,48,18,29],
[50,36,64,0,8,43,48,38,15,41],
[60,48,65,73,0,56,68,48,32,53],
[34,41,46,38,25,0,44,46,26,37],
[29,29,42,33,13,37,0,36,12,32],
[35,41,33,43,33,35,45,0,27,51],
[47,40,63,66,49,55,69,54,0,53],
[36,37,52,40,28,44,49,30,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,39,38,41,40,36,38,43,33],
[49,0,43,37,36,39,40,47,44,30],
[42,38,0,42,38,40,39,39,41,39],
[43,44,39,0,43,40,39,41,44,39],
[40,45,43,38,0,41,36,36,48,35],
[41,42,41,41,40,0,42,36,45,30],
[45,41,42,42,45,39,0,41,46,42],
[43,34,42,40,45,45,40,0,50,33],
[38,37,40,37,33,36,35,31,0,30],
[48,51,42,42,46,51,39,48,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,32,43,38,39,37,41,44,38],
[37,0,28,37,37,40,32,36,38,39],
[49,53,0,46,40,39,43,38,43,43],
[38,44,35,0,40,41,37,41,37,39],
[43,44,41,41,0,43,44,40,48,46],
[42,41,42,40,38,0,41,40,43,43],
[44,49,38,44,37,40,0,42,52,42],
[40,45,43,40,41,41,39,0,43,41],
[37,43,38,44,33,38,29,38,0,45],
[43,42,38,42,35,38,39,40,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,45,44,40,37,31,37,43,46],
[41,0,43,48,40,36,35,43,45,36],
[36,38,0,46,33,44,30,41,42,48],
[37,33,35,0,29,25,28,30,35,31],
[41,41,48,52,0,36,44,48,47,44],
[44,45,37,56,45,0,34,49,45,52],
[50,46,51,53,37,47,0,47,52,49],
[44,38,40,51,33,32,34,0,39,44],
[38,36,39,46,34,36,29,42,0,28],
[35,45,33,50,37,29,32,37,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,54,37,33,49,48,53,48,45],
[33,0,44,32,27,38,34,39,21,24],
[27,37,0,15,35,18,38,31,18,20],
[44,49,66,0,27,32,59,56,31,33],
[48,54,46,54,0,32,55,47,44,50],
[32,43,63,49,49,0,51,52,33,51],
[33,47,43,22,26,30,0,48,23,36],
[28,42,50,25,34,29,33,0,23,36],
[33,60,63,50,37,48,58,58,0,50],
[36,57,61,48,31,30,45,45,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,46,40,42,45,38,51,43,40],
[48,0,45,43,40,43,54,52,49,38],
[35,36,0,35,43,36,33,48,39,35],
[41,38,46,0,41,43,36,44,42,36],
[39,41,38,40,0,48,42,44,37,39],
[36,38,45,38,33,0,38,50,46,39],
[43,27,48,45,39,43,0,44,43,45],
[30,29,33,37,37,31,37,0,39,36],
[38,32,42,39,44,35,38,42,0,45],
[41,43,46,45,42,42,36,45,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,32,40,47,41,41,39,42,41],
[32,0,33,29,47,17,32,27,29,31],
[49,48,0,39,57,45,55,47,46,42],
[41,52,42,0,53,37,47,34,44,40],
[34,34,24,28,0,36,32,31,30,39],
[40,64,36,44,45,0,37,37,42,37],
[40,49,26,34,49,44,0,39,35,45],
[42,54,34,47,50,44,42,0,52,36],
[39,52,35,37,51,39,46,29,0,45],
[40,50,39,41,42,44,36,45,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,53,43,46,39,47,52,42,41],
[32,0,39,36,41,28,35,39,40,38],
[28,42,0,41,36,29,31,36,42,33],
[38,45,40,0,46,42,37,41,42,47],
[35,40,45,35,0,36,34,43,40,36],
[42,53,52,39,45,0,46,49,49,46],
[34,46,50,44,47,35,0,45,49,40],
[29,42,45,40,38,32,36,0,40,34],
[39,41,39,39,41,32,32,41,0,38],
[40,43,48,34,45,35,41,47,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,48,50,64,67,50,38,48,81],
[17,0,36,31,40,33,24,23,31,54],
[33,45,0,43,52,36,16,23,31,66],
[31,50,38,0,41,33,24,40,31,54],
[17,41,29,40,0,33,17,33,31,54],
[14,48,45,48,48,0,33,49,26,78],
[31,57,65,57,64,48,0,52,34,81],
[43,58,58,41,48,32,29,0,43,62],
[33,50,50,50,50,55,47,38,0,78],
[0,27,15,27,27,3,0,19,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,54,41,55,42,44,43,55,44],
[43,0,46,39,48,40,33,42,48,49],
[27,35,0,47,39,33,36,36,37,42],
[40,42,34,0,41,40,32,38,39,38],
[26,33,42,40,0,31,36,39,44,38],
[39,41,48,41,50,0,37,39,46,46],
[37,48,45,49,45,44,0,47,57,54],
[38,39,45,43,42,42,34,0,44,46],
[26,33,44,42,37,35,24,37,0,39],
[37,32,39,43,43,35,27,35,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,45,50,39,47,42,43,59,60],
[47,0,42,39,37,48,44,48,54,50],
[36,39,0,50,46,42,38,43,56,47],
[31,42,31,0,38,38,47,42,41,38],
[42,44,35,43,0,52,38,44,52,43],
[34,33,39,43,29,0,35,38,44,39],
[39,37,43,34,43,46,0,41,50,49],
[38,33,38,39,37,43,40,0,45,46],
[22,27,25,40,29,37,31,36,0,46],
[21,31,34,43,38,42,32,35,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,35,32,35,38,33,35,35,35],
[50,0,47,44,42,40,52,46,54,49],
[46,34,0,38,35,34,31,40,34,38],
[49,37,43,0,39,41,35,38,41,38],
[46,39,46,42,0,41,38,43,43,38],
[43,41,47,40,40,0,40,42,39,39],
[48,29,50,46,43,41,0,40,43,45],
[46,35,41,43,38,39,41,0,42,39],
[46,27,47,40,38,42,38,39,0,39],
[46,32,43,43,43,42,36,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,48,46,45,52,37,43,48,56],
[39,0,46,40,37,45,43,37,46,48],
[33,35,0,32,39,39,30,41,42,39],
[35,41,49,0,41,48,25,45,44,39],
[36,44,42,40,0,34,38,42,39,49],
[29,36,42,33,47,0,31,41,38,47],
[44,38,51,56,43,50,0,40,43,39],
[38,44,40,36,39,40,41,0,42,49],
[33,35,39,37,42,43,38,39,0,43],
[25,33,42,42,32,34,42,32,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,37,37,37,45,41,57,45,57],
[60,0,61,40,61,61,81,81,61,81],
[44,20,0,44,61,44,44,60,24,20],
[44,41,37,0,61,45,41,81,45,41],
[44,20,20,20,0,44,20,36,24,20],
[36,20,37,36,37,0,20,36,24,57],
[40,0,37,40,61,61,0,81,24,37],
[24,0,21,0,45,45,0,0,24,21],
[36,20,57,36,57,57,57,57,0,57],
[24,0,61,40,61,24,44,60,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,28,45,23,32,32,16,26,40],
[50,0,38,55,30,33,33,35,34,45],
[53,43,0,58,41,23,46,41,39,31],
[36,26,23,0,29,23,26,18,31,21],
[58,51,40,52,0,36,63,34,31,27],
[49,48,58,58,45,0,55,42,50,31],
[49,48,35,55,18,26,0,42,28,28],
[65,46,40,63,47,39,39,0,50,36],
[55,47,42,50,50,31,53,31,0,33],
[41,36,50,60,54,50,53,45,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,43,50,39,40,31,39,45,32],
[47,0,45,45,47,47,41,45,41,37],
[38,36,0,37,39,35,31,28,38,30],
[31,36,44,0,34,37,28,26,36,30],
[42,34,42,47,0,49,48,38,37,41],
[41,34,46,44,32,0,38,37,30,41],
[50,40,50,53,33,43,0,32,48,39],
[42,36,53,55,43,44,49,0,47,43],
[36,40,43,45,44,51,33,34,0,34],
[49,44,51,51,40,40,42,38,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,51,40,48,42,44,47,44,50],
[44,0,46,31,39,42,48,41,44,48],
[30,35,0,20,29,27,32,25,29,37],
[41,50,61,0,39,44,46,40,42,46],
[33,42,52,42,0,31,45,35,37,44],
[39,39,54,37,50,0,46,45,37,48],
[37,33,49,35,36,35,0,34,35,45],
[34,40,56,41,46,36,47,0,41,47],
[37,37,52,39,44,44,46,40,0,45],
[31,33,44,35,37,33,36,34,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,45,42,45,50,44,46,36,54],
[31,0,23,31,37,38,28,31,34,40],
[36,58,0,54,51,44,43,44,44,39],
[39,50,27,0,45,46,34,38,33,37],
[36,44,30,36,0,47,29,37,32,37],
[31,43,37,35,34,0,41,37,25,42],
[37,53,38,47,52,40,0,48,37,49],
[35,50,37,43,44,44,33,0,30,56],
[45,47,37,48,49,56,44,51,0,45],
[27,41,42,44,44,39,32,25,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,40,40,41,39,35,37,40,39],
[45,0,48,41,42,49,42,38,43,44],
[41,33,0,38,44,43,32,36,37,34],
[41,40,43,0,44,41,41,38,43,43],
[40,39,37,37,0,46,36,40,41,36],
[42,32,38,40,35,0,33,36,41,34],
[46,39,49,40,45,48,0,38,46,45],
[44,43,45,43,41,45,43,0,36,43],
[41,38,44,38,40,40,35,45,0,41],
[42,37,47,38,45,47,36,38,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,46,45,43,44,39,27,33,27],
[47,0,41,44,47,39,36,42,37,45],
[35,40,0,46,53,40,44,34,34,39],
[36,37,35,0,36,28,26,25,38,30],
[38,34,28,45,0,28,24,25,31,33],
[37,42,41,53,53,0,42,43,41,49],
[42,45,37,55,57,39,0,45,42,48],
[54,39,47,56,56,38,36,0,44,37],
[48,44,47,43,50,40,39,37,0,39],
[54,36,42,51,48,32,33,44,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,36,37,38,34,47,47,31,38],
[41,0,42,52,46,35,39,38,35,39],
[45,39,0,43,41,42,42,44,41,39],
[44,29,38,0,42,41,38,35,43,38],
[43,35,40,39,0,34,39,34,34,30],
[47,46,39,40,47,0,44,39,30,39],
[34,42,39,43,42,37,0,42,36,43],
[34,43,37,46,47,42,39,0,36,38],
[50,46,40,38,47,51,45,45,0,43],
[43,42,42,43,51,42,38,43,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,22,37,37,30,15,36,28,44],
[46,0,33,30,33,29,18,34,29,25],
[59,48,0,39,53,46,40,43,57,35],
[44,51,42,0,41,31,15,24,38,35],
[44,48,28,40,0,38,21,35,28,23],
[51,52,35,50,43,0,36,39,43,35],
[66,63,41,66,60,45,0,68,37,52],
[45,47,38,57,46,42,13,0,37,35],
[53,52,24,43,53,38,44,44,0,35],
[37,56,46,46,58,46,29,46,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,47,35,39,44,43,43,39,45],
[36,0,41,30,31,36,38,36,40,32],
[34,40,0,36,35,46,43,44,53,38],
[46,51,45,0,42,51,43,46,52,40],
[42,50,46,39,0,46,41,42,48,44],
[37,45,35,30,35,0,28,34,42,33],
[38,43,38,38,40,53,0,41,52,43],
[38,45,37,35,39,47,40,0,54,37],
[42,41,28,29,33,39,29,27,0,32],
[36,49,43,41,37,48,38,44,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,33,39,29,48,35,38,50,44],
[26,0,29,24,19,33,20,23,23,22],
[48,52,0,50,34,50,39,51,50,45],
[42,57,31,0,43,54,45,46,48,35],
[52,62,47,38,0,46,39,47,56,47],
[33,48,31,27,35,0,24,35,38,36],
[46,61,42,36,42,57,0,47,57,41],
[43,58,30,35,34,46,34,0,48,46],
[31,58,31,33,25,43,24,33,0,37],
[37,59,36,46,34,45,40,35,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,39,45,38,38,48,44,40,39],
[35,0,38,35,45,33,37,44,42,37],
[42,43,0,39,44,50,36,47,44,45],
[36,46,42,0,57,49,44,49,43,35],
[43,36,37,24,0,39,38,34,34,36],
[43,48,31,32,42,0,41,45,49,37],
[33,44,45,37,43,40,0,46,39,33],
[37,37,34,32,47,36,35,0,33,36],
[41,39,37,38,47,32,42,48,0,40],
[42,44,36,46,45,44,48,45,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,45,36,38,34,40,41,35,40],
[46,0,48,45,32,42,44,42,41,41],
[36,33,0,40,30,36,36,37,33,37],
[45,36,41,0,40,38,47,35,44,41],
[43,49,51,41,0,36,40,41,37,39],
[47,39,45,43,45,0,48,47,36,39],
[41,37,45,34,41,33,0,36,40,32],
[40,39,44,46,40,34,45,0,37,43],
[46,40,48,37,44,45,41,44,0,42],
[41,40,44,40,42,42,49,38,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,37,42,49,34,48,33,43,28],
[53,0,35,36,49,44,49,32,42,42],
[44,46,0,46,45,44,53,43,44,36],
[39,45,35,0,46,41,44,39,41,37],
[32,32,36,35,0,36,39,36,32,34],
[47,37,37,40,45,0,40,39,43,38],
[33,32,28,37,42,41,0,34,33,30],
[48,49,38,42,45,42,47,0,42,39],
[38,39,37,40,49,38,48,39,0,30],
[53,39,45,44,47,43,51,42,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,31,39,37,30,35,41,37,38],
[30,0,26,26,20,21,30,27,32,18],
[50,55,0,40,39,44,41,48,43,35],
[42,55,41,0,33,27,31,40,41,38],
[44,61,42,48,0,40,49,42,45,39],
[51,60,37,54,41,0,43,46,40,47],
[46,51,40,50,32,38,0,44,45,39],
[40,54,33,41,39,35,37,0,32,42],
[44,49,38,40,36,41,36,49,0,37],
[43,63,46,43,42,34,42,39,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,45,39,46,37,34,37,42,34],
[48,0,44,39,46,33,43,46,53,37],
[36,37,0,39,35,41,40,39,39,39],
[42,42,42,0,44,37,42,34,42,43],
[35,35,46,37,0,32,41,41,45,28],
[44,48,40,44,49,0,45,47,41,42],
[47,38,41,39,40,36,0,39,39,43],
[44,35,42,47,40,34,42,0,45,43],
[39,28,42,39,36,40,42,36,0,34],
[47,44,42,38,53,39,38,38,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,25,34,30,11,10,8,27,24],
[69,0,45,42,50,39,27,45,50,48],
[56,36,0,47,39,28,31,46,43,48],
[47,39,34,0,37,22,37,26,46,32],
[51,31,42,44,0,26,17,32,48,45],
[70,42,53,59,55,0,35,41,53,40],
[71,54,50,44,64,46,0,56,52,38],
[73,36,35,55,49,40,25,0,41,38],
[54,31,38,35,33,28,29,40,0,47],
[57,33,33,49,36,41,43,43,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,35,45,54,37,40,37,42,38],
[32,0,28,35,41,29,30,28,32,35],
[46,53,0,51,57,41,36,44,46,48],
[36,46,30,0,50,40,43,33,41,45],
[27,40,24,31,0,28,27,22,35,38],
[44,52,40,41,53,0,41,37,50,50],
[41,51,45,38,54,40,0,37,51,51],
[44,53,37,48,59,44,44,0,47,52],
[39,49,35,40,46,31,30,34,0,40],
[43,46,33,36,43,31,30,29,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,53,38,46,39,47,52,46,52],
[37,0,53,54,53,44,58,47,40,36],
[28,28,0,37,37,31,46,41,27,40],
[43,27,44,0,55,38,47,52,35,35],
[35,28,44,26,0,31,45,34,27,26],
[42,37,50,43,50,0,55,38,42,45],
[34,23,35,34,36,26,0,36,38,35],
[29,34,40,29,47,43,45,0,33,30],
[35,41,54,46,54,39,43,48,0,40],
[29,45,41,46,55,36,46,51,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,42,44,44,41,46,45,33,31],
[33,0,28,32,34,33,35,36,27,26],
[39,53,0,34,41,39,39,51,33,43],
[37,49,47,0,34,44,43,41,32,31],
[37,47,40,47,0,43,43,47,41,37],
[40,48,42,37,38,0,47,41,34,31],
[35,46,42,38,38,34,0,40,37,31],
[36,45,30,40,34,40,41,0,26,28],
[48,54,48,49,40,47,44,55,0,42],
[50,55,38,50,44,50,50,53,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,32,35,34,40,31,34,35,40],
[44,0,30,36,34,42,41,27,41,38],
[49,51,0,43,48,56,34,44,44,40],
[46,45,38,0,53,51,37,41,46,46],
[47,47,33,28,0,49,36,43,44,41],
[41,39,25,30,32,0,30,30,33,36],
[50,40,47,44,45,51,0,42,42,44],
[47,54,37,40,38,51,39,0,45,46],
[46,40,37,35,37,48,39,36,0,39],
[41,43,41,35,40,45,37,35,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,51,44,41,36,41,39,48,44],
[30,0,36,40,33,42,29,27,27,37],
[30,45,0,38,35,36,45,33,33,43],
[37,41,43,0,41,40,43,36,39,44],
[40,48,46,40,0,32,39,44,40,47],
[45,39,45,41,49,0,43,38,46,53],
[40,52,36,38,42,38,0,36,43,41],
[42,54,48,45,37,43,45,0,49,46],
[33,54,48,42,41,35,38,32,0,47],
[37,44,38,37,34,28,40,35,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,31,34,37,32,29,23,33,31],
[38,0,32,40,49,35,37,29,43,40],
[50,49,0,34,57,36,42,38,39,35],
[47,41,47,0,54,62,44,54,45,35],
[44,32,24,27,0,41,29,29,27,39],
[49,46,45,19,40,0,39,28,36,35],
[52,44,39,37,52,42,0,28,34,40],
[58,52,43,27,52,53,53,0,48,50],
[48,38,42,36,54,45,47,33,0,37],
[50,41,46,46,42,46,41,31,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,39,43,38,46,47,40,49,41],
[44,0,46,45,40,43,45,47,39,41],
[42,35,0,43,40,48,45,42,39,42],
[38,36,38,0,39,47,42,45,42,41],
[43,41,41,42,0,49,42,44,42,38],
[35,38,33,34,32,0,38,36,40,34],
[34,36,36,39,39,43,0,43,38,39],
[41,34,39,36,37,45,38,0,37,36],
[32,42,42,39,39,41,43,44,0,36],
[40,40,39,40,43,47,42,45,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,39,40,42,30,45,39,41,31],
[46,0,52,47,40,44,41,46,58,44],
[42,29,0,42,36,43,35,28,44,34],
[41,34,39,0,35,31,34,36,37,27],
[39,41,45,46,0,44,45,31,51,48],
[51,37,38,50,37,0,39,42,45,44],
[36,40,46,47,36,42,0,38,47,36],
[42,35,53,45,50,39,43,0,42,36],
[40,23,37,44,30,36,34,39,0,40],
[50,37,47,54,33,37,45,45,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,29,24,30,37,44,29,36,43],
[42,0,44,37,32,35,45,42,48,42],
[52,37,0,52,48,39,34,38,53,48],
[57,44,29,0,30,42,48,30,46,48],
[51,49,33,51,0,41,43,43,44,49],
[44,46,42,39,40,0,42,34,42,52],
[37,36,47,33,38,39,0,25,48,48],
[52,39,43,51,38,47,56,0,60,52],
[45,33,28,35,37,39,33,21,0,51],
[38,39,33,33,32,29,33,29,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,36,35,50,33,32,37,35,34],
[46,0,46,28,50,35,33,37,49,49],
[45,35,0,26,40,27,21,30,35,45],
[46,53,55,0,54,53,35,32,50,51],
[31,31,41,27,0,24,19,25,29,42],
[48,46,54,28,57,0,47,45,47,34],
[49,48,60,46,62,34,0,48,45,50],
[44,44,51,49,56,36,33,0,42,47],
[46,32,46,31,52,34,36,39,0,36],
[47,32,36,30,39,47,31,34,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,44,43,37,36,42,47,43,44],
[32,0,42,37,34,35,35,41,42,43],
[37,39,0,42,37,29,35,42,44,35],
[38,44,39,0,33,34,44,53,37,39],
[44,47,44,48,0,35,42,49,43,48],
[45,46,52,47,46,0,44,43,44,40],
[39,46,46,37,39,37,0,42,35,34],
[34,40,39,28,32,38,39,0,37,34],
[38,39,37,44,38,37,46,44,0,39],
[37,38,46,42,33,41,47,47,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,32,28,59,34,35,18,23,44],
[26,0,37,44,63,39,45,29,37,65],
[49,44,0,43,59,35,39,22,37,49],
[53,37,38,0,41,24,38,37,5,49],
[22,18,22,40,0,25,25,25,9,25],
[47,42,46,57,56,0,53,36,51,62],
[46,36,42,43,56,28,0,33,23,59],
[63,52,59,44,56,45,48,0,29,53],
[58,44,44,76,72,30,58,52,0,61],
[37,16,32,32,56,19,22,28,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,39,36,37,39,34,34,34,40],
[51,0,43,39,45,41,42,41,46,46],
[42,38,0,42,38,37,41,30,39,40],
[45,42,39,0,53,36,42,40,44,44],
[44,36,43,28,0,34,41,34,38,46],
[42,40,44,45,47,0,49,35,46,45],
[47,39,40,39,40,32,0,39,39,46],
[47,40,51,41,47,46,42,0,44,51],
[47,35,42,37,43,35,42,37,0,46],
[41,35,41,37,35,36,35,30,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,35,43,49,37,40,47,35,42],
[41,0,41,36,40,41,35,37,35,40],
[46,40,0,36,41,37,41,36,31,42],
[38,45,45,0,49,40,42,43,32,44],
[32,41,40,32,0,38,35,38,38,41],
[44,40,44,41,43,0,42,41,46,47],
[41,46,40,39,46,39,0,41,42,42],
[34,44,45,38,43,40,40,0,36,47],
[46,46,50,49,43,35,39,45,0,53],
[39,41,39,37,40,34,39,34,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,38,41,50,46,48,37,49,50],
[29,0,39,33,47,44,47,33,42,54],
[43,42,0,50,53,36,59,39,46,45],
[40,48,31,0,48,34,63,41,59,45],
[31,34,28,33,0,30,50,36,59,48],
[35,37,45,47,51,0,55,45,47,43],
[33,34,22,18,31,26,0,26,42,30],
[44,48,42,40,45,36,55,0,53,48],
[32,39,35,22,22,34,39,28,0,28],
[31,27,36,36,33,38,51,33,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,43,36,39,40,33,50,45,44],
[50,0,41,46,35,43,42,47,46,51],
[38,40,0,38,39,39,38,46,44,51],
[45,35,43,0,36,47,33,53,44,48],
[42,46,42,45,0,47,40,54,41,53],
[41,38,42,34,34,0,38,44,42,45],
[48,39,43,48,41,43,0,50,45,47],
[31,34,35,28,27,37,31,0,36,38],
[36,35,37,37,40,39,36,45,0,39],
[37,30,30,33,28,36,34,43,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,32,39,41,38,37,39,42,27],
[34,0,33,45,38,36,48,41,36,25],
[49,48,0,43,46,41,36,58,48,43],
[42,36,38,0,52,42,48,48,45,39],
[40,43,35,29,0,42,37,48,36,28],
[43,45,40,39,39,0,42,43,32,33],
[44,33,45,33,44,39,0,50,38,33],
[42,40,23,33,33,38,31,0,42,27],
[39,45,33,36,45,49,43,39,0,36],
[54,56,38,42,53,48,48,54,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,56,60,47,47,59,69,33,33],
[16,0,53,58,16,44,30,52,30,30],
[25,28,0,40,31,58,16,34,58,43],
[21,23,41,0,39,53,39,48,39,39],
[34,65,50,42,0,60,48,48,48,52],
[34,37,23,28,21,0,21,48,48,52],
[22,51,65,42,33,60,0,50,55,46],
[12,29,47,33,33,33,31,0,45,45],
[48,51,23,42,33,33,26,36,0,43],
[48,51,38,42,29,29,35,36,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,45,41,44,24,41,44,33,42],
[46,0,45,40,57,39,34,40,38,50],
[36,36,0,33,38,25,26,32,28,35],
[40,41,48,0,46,39,36,41,34,38],
[37,24,43,35,0,34,37,42,25,34],
[57,42,56,42,47,0,42,57,36,41],
[40,47,55,45,44,39,0,43,42,48],
[37,41,49,40,39,24,38,0,26,39],
[48,43,53,47,56,45,39,55,0,49],
[39,31,46,43,47,40,33,42,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,51,54,52,43,54,53,57,38],
[33,0,45,54,32,32,51,36,53,22],
[30,36,0,40,27,26,34,43,34,24],
[27,27,41,0,26,25,31,29,43,27],
[29,49,54,55,0,39,45,42,54,32],
[38,49,55,56,42,0,50,49,56,42],
[27,30,47,50,36,31,0,30,44,28],
[28,45,38,52,39,32,51,0,51,35],
[24,28,47,38,27,25,37,30,0,26],
[43,59,57,54,49,39,53,46,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,37,45,61,49,56,46,51,67],
[37,0,37,39,49,37,50,34,34,46],
[44,44,0,48,57,40,55,53,45,61],
[36,42,33,0,45,30,34,43,29,50],
[20,32,24,36,0,18,36,43,19,37],
[32,44,41,51,63,0,45,55,44,57],
[25,31,26,47,45,36,0,45,37,51],
[35,47,28,38,38,26,36,0,38,44],
[30,47,36,52,62,37,44,43,0,50],
[14,35,20,31,44,24,30,37,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,34,10,71,19,22,0,22,15],
[44,0,19,25,49,29,34,34,10,15],
[47,62,0,47,62,10,47,25,32,15],
[71,56,34,0,71,34,41,19,22,15],
[10,32,19,10,0,10,32,0,32,0],
[62,52,71,47,71,0,37,37,47,52],
[59,47,34,40,49,44,0,34,47,30],
[81,47,56,62,81,44,47,0,47,30],
[59,71,49,59,49,34,34,34,0,49],
[66,66,66,66,81,29,51,51,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,30,28,39,35,39,52,31,34],
[42,0,34,29,34,38,49,41,27,43],
[51,47,0,44,40,33,49,51,31,40],
[53,52,37,0,54,38,60,57,36,49],
[42,47,41,27,0,42,53,44,46,40],
[46,43,48,43,39,0,39,49,41,48],
[42,32,32,21,28,42,0,40,33,37],
[29,40,30,24,37,32,41,0,24,51],
[50,54,50,45,35,40,48,57,0,45],
[47,38,41,32,41,33,44,30,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,47,49,44,47,40,45,41,39],
[41,0,51,38,37,42,37,45,36,36],
[34,30,0,39,39,35,35,40,36,40],
[32,43,42,0,43,44,34,38,37,40],
[37,44,42,38,0,41,42,41,39,36],
[34,39,46,37,40,0,40,46,45,35],
[41,44,46,47,39,41,0,48,37,36],
[36,36,41,43,40,35,33,0,31,35],
[40,45,45,44,42,36,44,50,0,41],
[42,45,41,41,45,46,45,46,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,40,29,42,35,44,33,26,33],
[48,0,46,37,48,40,52,46,37,51],
[41,35,0,34,39,32,48,42,38,39],
[52,44,47,0,45,43,54,41,45,40],
[39,33,42,36,0,37,44,34,39,43],
[46,41,49,38,44,0,50,48,39,47],
[37,29,33,27,37,31,0,27,39,39],
[48,35,39,40,47,33,54,0,38,43],
[55,44,43,36,42,42,42,43,0,50],
[48,30,42,41,38,34,42,38,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,47,46,47,60,35,42,44,33],
[35,0,44,51,41,53,42,43,33,29],
[34,37,0,35,27,51,43,40,37,40],
[35,30,46,0,43,43,50,43,21,34],
[34,40,54,38,0,45,48,48,33,41],
[21,28,30,38,36,0,26,31,28,31],
[46,39,38,31,33,55,0,39,33,29],
[39,38,41,38,33,50,42,0,42,40],
[37,48,44,60,48,53,48,39,0,37],
[48,52,41,47,40,50,52,41,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,35,32,39,48,42,44,42,45],
[43,0,33,39,33,46,46,36,43,27],
[46,48,0,40,51,51,45,34,44,43],
[49,42,41,0,45,49,44,34,50,35],
[42,48,30,36,0,42,40,42,39,42],
[33,35,30,32,39,0,38,32,40,37],
[39,35,36,37,41,43,0,29,33,43],
[37,45,47,47,39,49,52,0,42,33],
[39,38,37,31,42,41,48,39,0,39],
[36,54,38,46,39,44,38,48,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,41,40,41,48,42,30,45,43],
[49,0,40,50,36,48,47,39,38,40],
[40,41,0,43,46,44,45,29,38,37],
[41,31,38,0,41,43,39,28,43,43],
[40,45,35,40,0,39,47,28,35,32],
[33,33,37,38,42,0,44,27,38,35],
[39,34,36,42,34,37,0,26,40,32],
[51,42,52,53,53,54,55,0,40,48],
[36,43,43,38,46,43,41,41,0,36],
[38,41,44,38,49,46,49,33,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,38,38,41,44,36,42,37,33],
[41,0,50,50,34,51,45,46,40,39],
[43,31,0,39,42,50,34,42,43,38],
[43,31,42,0,37,42,39,35,31,42],
[40,47,39,44,0,53,42,48,53,48],
[37,30,31,39,28,0,27,31,44,31],
[45,36,47,42,39,54,0,45,45,41],
[39,35,39,46,33,50,36,0,48,37],
[44,41,38,50,28,37,36,33,0,42],
[48,42,43,39,33,50,40,44,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,40,32,34,41,43,38,36,38],
[46,0,49,41,35,51,47,43,45,44],
[41,32,0,36,31,42,34,34,36,41],
[49,40,45,0,39,52,45,48,41,41],
[47,46,50,42,0,49,44,39,42,42],
[40,30,39,29,32,0,39,32,33,38],
[38,34,47,36,37,42,0,39,40,35],
[43,38,47,33,42,49,42,0,41,40],
[45,36,45,40,39,48,41,40,0,40],
[43,37,40,40,39,43,46,41,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,46,43,39,27,53,40,36,41],
[50,0,46,47,36,47,58,49,32,42],
[35,35,0,38,50,34,46,36,35,37],
[38,34,43,0,40,39,61,39,38,45],
[42,45,31,41,0,47,55,39,32,47],
[54,34,47,42,34,0,53,33,43,40],
[28,23,35,20,26,28,0,29,24,42],
[41,32,45,42,42,48,52,0,40,38],
[45,49,46,43,49,38,57,41,0,52],
[40,39,44,36,34,41,39,43,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,45,35,39,38,39,39,40,39],
[51,0,52,45,38,35,45,46,43,48],
[36,29,0,27,28,27,37,40,36,32],
[46,36,54,0,40,41,48,44,43,48],
[42,43,53,41,0,35,50,38,43,46],
[43,46,54,40,46,0,46,46,40,46],
[42,36,44,33,31,35,0,36,31,36],
[42,35,41,37,43,35,45,0,44,42],
[41,38,45,38,38,41,50,37,0,41],
[42,33,49,33,35,35,45,39,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,29,39,43,35,39,36,37,24],
[45,0,38,45,48,43,30,46,38,36],
[52,43,0,40,40,43,39,54,41,41],
[42,36,41,0,45,57,37,36,40,45],
[38,33,41,36,0,37,36,39,34,19],
[46,38,38,24,44,0,40,41,28,29],
[42,51,42,44,45,41,0,43,37,44],
[45,35,27,45,42,40,38,0,37,32],
[44,43,40,41,47,53,44,44,0,40],
[57,45,40,36,62,52,37,49,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,44,44,43,43,45,48,36,43],
[46,0,47,44,42,44,43,45,40,43],
[37,34,0,39,34,45,38,34,34,34],
[37,37,42,0,41,37,42,42,38,40],
[38,39,47,40,0,42,43,41,36,43],
[38,37,36,44,39,0,32,45,42,38],
[36,38,43,39,38,49,0,44,37,40],
[33,36,47,39,40,36,37,0,39,40],
[45,41,47,43,45,39,44,42,0,48],
[38,38,47,41,38,43,41,41,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,36,55,67,59,41,36,49,81],
[32,0,26,52,59,32,38,21,48,70],
[45,55,0,55,59,73,38,59,55,73],
[26,29,26,0,42,21,31,29,29,42],
[14,22,22,39,0,14,0,25,14,52],
[22,49,8,60,67,0,38,11,24,81],
[40,43,43,50,81,43,0,43,43,81],
[45,60,22,52,56,70,38,0,52,70],
[32,33,26,52,67,57,38,29,0,78],
[0,11,8,39,29,0,0,11,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,49,37,31,33,23,34,32,31],
[55,0,46,39,40,35,40,47,48,42],
[32,35,0,37,43,38,32,34,42,31],
[44,42,44,0,23,24,25,47,43,39],
[50,41,38,58,0,38,42,49,59,40],
[48,46,43,57,43,0,39,51,47,54],
[58,41,49,56,39,42,0,53,57,44],
[47,34,47,34,32,30,28,0,51,36],
[49,33,39,38,22,34,24,30,0,36],
[50,39,50,42,41,27,37,45,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,47,42,48,38,37,46,41,46],
[51,0,53,38,54,45,40,47,42,43],
[34,28,0,33,40,39,35,46,39,33],
[39,43,48,0,39,48,48,52,40,42],
[33,27,41,42,0,34,34,39,43,38],
[43,36,42,33,47,0,35,51,36,37],
[44,41,46,33,47,46,0,54,38,46],
[35,34,35,29,42,30,27,0,31,36],
[40,39,42,41,38,45,43,50,0,43],
[35,38,48,39,43,44,35,45,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,25,48,68,41,55,62,53,59],
[16,0,11,20,21,19,29,44,23,44],
[56,70,0,39,76,44,58,44,43,72],
[33,61,42,0,47,33,45,44,66,66],
[13,60,5,34,0,33,36,42,40,64],
[40,62,37,48,48,0,41,59,48,59],
[26,52,23,36,45,40,0,43,42,59],
[19,37,37,37,39,22,38,0,49,42],
[28,58,38,15,41,33,39,32,0,44],
[22,37,9,15,17,22,22,39,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,43,41,43,38,49,51,53,57],
[42,0,41,39,45,43,47,49,48,57],
[38,40,0,41,49,36,48,40,45,50],
[40,42,40,0,49,41,47,45,38,48],
[38,36,32,32,0,35,41,38,36,45],
[43,38,45,40,46,0,47,47,42,47],
[32,34,33,34,40,34,0,39,38,39],
[30,32,41,36,43,34,42,0,37,42],
[28,33,36,43,45,39,43,44,0,47],
[24,24,31,33,36,34,42,39,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,47,43,49,54,40,43,47,36],
[29,0,30,31,34,42,30,30,36,33],
[34,51,0,40,43,55,37,36,44,38],
[38,50,41,0,43,44,36,42,45,32],
[32,47,38,38,0,47,46,36,47,35],
[27,39,26,37,34,0,38,29,37,27],
[41,51,44,45,35,43,0,46,47,35],
[38,51,45,39,45,52,35,0,46,41],
[34,45,37,36,34,44,34,35,0,29],
[45,48,43,49,46,54,46,40,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,27,38,26,34,41,35,33,24],
[46,0,40,43,29,39,41,41,31,31],
[54,41,0,39,39,47,47,46,44,37],
[43,38,42,0,32,37,35,44,37,29],
[55,52,42,49,0,43,44,41,33,44],
[47,42,34,44,38,0,37,30,32,33],
[40,40,34,46,37,44,0,45,39,27],
[46,40,35,37,40,51,36,0,27,30],
[48,50,37,44,48,49,42,54,0,35],
[57,50,44,52,37,48,54,51,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,42,42,43,46,41,36,37,41],
[42,0,43,47,41,45,44,41,38,46],
[39,38,0,41,37,38,42,39,41,43],
[39,34,40,0,41,43,43,37,36,43],
[38,40,44,40,0,42,46,41,43,44],
[35,36,43,38,39,0,41,39,37,39],
[40,37,39,38,35,40,0,36,39,41],
[45,40,42,44,40,42,45,0,38,52],
[44,43,40,45,38,44,42,43,0,47],
[40,35,38,38,37,42,40,29,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,41,43,40,43,45,40,45,45],
[39,0,37,34,43,40,37,30,38,37],
[40,44,0,38,41,43,49,43,42,43],
[38,47,43,0,40,43,46,35,36,43],
[41,38,40,41,0,41,43,32,43,39],
[38,41,38,38,40,0,44,34,42,43],
[36,44,32,35,38,37,0,32,42,39],
[41,51,38,46,49,47,49,0,47,49],
[36,43,39,45,38,39,39,34,0,41],
[36,44,38,38,42,38,42,32,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,38,49,48,46,42,46,41,39],
[42,0,45,48,50,46,52,49,47,39],
[43,36,0,47,44,45,43,43,43,39],
[32,33,34,0,43,42,43,43,37,36],
[33,31,37,38,0,40,41,42,32,31],
[35,35,36,39,41,0,44,43,36,34],
[39,29,38,38,40,37,0,45,34,33],
[35,32,38,38,39,38,36,0,38,36],
[40,34,38,44,49,45,47,43,0,43],
[42,42,42,45,50,47,48,45,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,41,49,35,32,44,40,46,41],
[41,0,46,49,36,36,52,50,43,46],
[40,35,0,46,38,29,39,31,37,40],
[32,32,35,0,23,25,36,30,39,30],
[46,45,43,58,0,37,45,43,47,45],
[49,45,52,56,44,0,39,34,47,39],
[37,29,42,45,36,42,0,37,33,48],
[41,31,50,51,38,47,44,0,46,48],
[35,38,44,42,34,34,48,35,0,48],
[40,35,41,51,36,42,33,33,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,47,45,42,38,33,41,33,37],
[40,0,44,47,38,36,34,35,32,37],
[34,37,0,43,41,31,29,33,35,32],
[36,34,38,0,40,30,32,30,30,39],
[39,43,40,41,0,27,28,29,32,33],
[43,45,50,51,54,0,39,37,44,44],
[48,47,52,49,53,42,0,37,39,43],
[40,46,48,51,52,44,44,0,42,48],
[48,49,46,51,49,37,42,39,0,44],
[44,44,49,42,48,37,38,33,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,17,44,36,34,39,11,28,55],
[65,0,51,62,59,34,73,54,51,64],
[64,30,0,55,53,42,50,42,70,41],
[37,19,26,0,14,26,45,9,26,36],
[45,22,28,67,0,23,67,39,39,50],
[47,47,39,55,58,0,44,36,50,58],
[42,8,31,36,14,37,0,36,36,36],
[70,27,39,72,42,45,45,0,44,58],
[53,30,11,55,42,31,45,37,0,41],
[26,17,40,45,31,23,45,23,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,41,46,45,51,35,46,46,45],
[31,0,32,38,36,42,35,41,36,31],
[40,49,0,39,37,43,36,44,41,42],
[35,43,42,0,36,45,37,41,41,39],
[36,45,44,45,0,45,42,43,41,37],
[30,39,38,36,36,0,33,39,37,37],
[46,46,45,44,39,48,0,46,40,44],
[35,40,37,40,38,42,35,0,38,34],
[35,45,40,40,40,44,41,43,0,39],
[36,50,39,42,44,44,37,47,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,41,38,34,42,49,39,44,44],
[41,0,51,44,42,42,59,38,51,53],
[40,30,0,40,36,32,42,37,42,38],
[43,37,41,0,38,44,55,43,52,43],
[47,39,45,43,0,41,53,44,51,47],
[39,39,49,37,40,0,42,31,49,43],
[32,22,39,26,28,39,0,23,37,40],
[42,43,44,38,37,50,58,0,53,53],
[37,30,39,29,30,32,44,28,0,42],
[37,28,43,38,34,38,41,28,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,48,32,11,33,35,25,37,37],
[61,0,60,60,60,36,56,45,62,33],
[33,21,0,26,36,24,16,20,58,25],
[49,21,55,0,46,33,24,17,38,18],
[70,21,45,35,0,33,25,35,34,34],
[48,45,57,48,48,0,44,21,69,35],
[46,25,65,57,56,37,0,22,51,22],
[56,36,61,64,46,60,59,0,61,41],
[44,19,23,43,47,12,30,20,0,20],
[44,48,56,63,47,46,59,40,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,56,32,43,31,36,54,43,51],
[37,0,44,35,49,42,43,42,34,51],
[25,37,0,41,39,30,41,39,27,42],
[49,46,40,0,50,43,41,49,34,54],
[38,32,42,31,0,31,36,52,37,36],
[50,39,51,38,50,0,35,47,40,50],
[45,38,40,40,45,46,0,39,35,42],
[27,39,42,32,29,34,42,0,37,47],
[38,47,54,47,44,41,46,44,0,58],
[30,30,39,27,45,31,39,34,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,41,40,38,44,35,46,50,43],
[32,0,38,39,44,45,41,46,47,37],
[40,43,0,41,47,42,45,57,60,63],
[41,42,40,0,44,42,41,47,46,50],
[43,37,34,37,0,42,34,48,46,36],
[37,36,39,39,39,0,34,47,47,40],
[46,40,36,40,47,47,0,49,47,41],
[35,35,24,34,33,34,32,0,37,45],
[31,34,21,35,35,34,34,44,0,47],
[38,44,18,31,45,41,40,36,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,31,28,38,28,19,23,25,33],
[49,0,31,39,45,38,38,41,33,25],
[50,50,0,51,50,42,48,44,49,36],
[53,42,30,0,51,40,37,31,42,35],
[43,36,31,30,0,37,23,37,30,32],
[53,43,39,41,44,0,36,34,40,40],
[62,43,33,44,58,45,0,43,50,42],
[58,40,37,50,44,47,38,0,38,40],
[56,48,32,39,51,41,31,43,0,31],
[48,56,45,46,49,41,39,41,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,26,32,27,31,6,31,21,24],
[43,0,30,35,44,39,42,32,31,41],
[55,51,0,31,46,35,42,57,23,39],
[49,46,50,0,56,41,37,49,42,47],
[54,37,35,25,0,27,17,39,31,33],
[50,42,46,40,54,0,19,36,16,33],
[75,39,39,44,64,62,0,52,42,48],
[50,49,24,32,42,45,29,0,30,46],
[60,50,58,39,50,65,39,51,0,55],
[57,40,42,34,48,48,33,35,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,28,36,42,38,33,39,38,29],
[43,0,33,46,46,46,32,39,37,41],
[53,48,0,41,49,45,42,40,42,38],
[45,35,40,0,40,48,32,41,31,36],
[39,35,32,41,0,39,36,31,33,32],
[43,35,36,33,42,0,34,39,32,32],
[48,49,39,49,45,47,0,45,42,43],
[42,42,41,40,50,42,36,0,40,36],
[43,44,39,50,48,49,39,41,0,34],
[52,40,43,45,49,49,38,45,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,47,53,48,44,61,51,50,42],
[44,0,44,53,49,39,52,54,51,43],
[34,37,0,46,40,34,43,37,51,33],
[28,28,35,0,46,22,43,42,43,32],
[33,32,41,35,0,27,35,40,41,25],
[37,42,47,59,54,0,51,44,51,40],
[20,29,38,38,46,30,0,41,40,25],
[30,27,44,39,41,37,40,0,33,30],
[31,30,30,38,40,30,41,48,0,23],
[39,38,48,49,56,41,56,51,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,45,39,32,39,40,41,34,30],
[45,0,48,46,45,45,44,50,49,39],
[36,33,0,39,34,46,41,49,41,28],
[42,35,42,0,40,46,43,41,39,40],
[49,36,47,41,0,49,47,55,44,44],
[42,36,35,35,32,0,37,45,39,33],
[41,37,40,38,34,44,0,44,44,31],
[40,31,32,40,26,36,37,0,35,38],
[47,32,40,42,37,42,37,46,0,31],
[51,42,53,41,37,48,50,43,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,54,40,42,44,32,51,33,47],
[18,0,28,22,22,28,19,23,24,21],
[27,53,0,27,24,27,24,41,31,24],
[41,59,54,0,28,38,32,57,45,41],
[39,59,57,53,0,44,45,61,42,42],
[37,53,54,43,37,0,51,46,37,40],
[49,62,57,49,36,30,0,56,53,33],
[30,58,40,24,20,35,25,0,30,31],
[48,57,50,36,39,44,28,51,0,28],
[34,60,57,40,39,41,48,50,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,28,44,44,21,33,45,44,37],
[48,0,34,57,45,39,33,40,53,44],
[53,47,0,43,47,25,34,44,42,42],
[37,24,38,0,34,24,32,40,34,37],
[37,36,34,47,0,24,26,22,31,35],
[60,42,56,57,57,0,36,54,56,58],
[48,48,47,49,55,45,0,33,49,56],
[36,41,37,41,59,27,48,0,39,42],
[37,28,39,47,50,25,32,42,0,34],
[44,37,39,44,46,23,25,39,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,33,42,37,32,37,33,36,27],
[49,0,41,47,39,34,42,46,38,43],
[48,40,0,45,42,48,42,43,44,43],
[39,34,36,0,45,34,41,40,40,35],
[44,42,39,36,0,36,45,49,39,41],
[49,47,33,47,45,0,43,48,47,44],
[44,39,39,40,36,38,0,40,39,31],
[48,35,38,41,32,33,41,0,39,33],
[45,43,37,41,42,34,42,42,0,37],
[54,38,38,46,40,37,50,48,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,30,32,42,26,39,33,45,35],
[41,0,36,41,43,37,49,43,44,47],
[51,45,0,39,48,41,45,46,48,42],
[49,40,42,0,45,37,46,46,45,45],
[39,38,33,36,0,35,39,33,34,30],
[55,44,40,44,46,0,46,48,46,45],
[42,32,36,35,42,35,0,37,34,32],
[48,38,35,35,48,33,44,0,46,43],
[36,37,33,36,47,35,47,35,0,43],
[46,34,39,36,51,36,49,38,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,29,41,38,32,36,37,42,35],
[44,0,47,41,37,47,49,50,48,41],
[52,34,0,47,47,44,46,53,45,40],
[40,40,34,0,32,43,38,45,46,46],
[43,44,34,49,0,51,50,45,43,38],
[49,34,37,38,30,0,39,46,48,36],
[45,32,35,43,31,42,0,40,44,39],
[44,31,28,36,36,35,41,0,38,30],
[39,33,36,35,38,33,37,43,0,38],
[46,40,41,35,43,45,42,51,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,39,33,47,34,31,48,30,33],
[39,0,36,28,39,34,33,44,34,32],
[42,45,0,36,42,42,44,48,35,37],
[48,53,45,0,46,42,47,54,41,40],
[34,42,39,35,0,34,40,46,38,43],
[47,47,39,39,47,0,40,49,42,39],
[50,48,37,34,41,41,0,55,36,36],
[33,37,33,27,35,32,26,0,27,28],
[51,47,46,40,43,39,45,54,0,38],
[48,49,44,41,38,42,45,53,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,36,37,44,41,36,39,45],
[37,0,40,33,38,38,35,38,43,40],
[39,41,0,36,41,41,38,39,41,34],
[45,48,45,0,52,52,43,46,53,39],
[44,43,40,29,0,49,37,37,44,38],
[37,43,40,29,32,0,37,30,39,34],
[40,46,43,38,44,44,0,35,40,41],
[45,43,42,35,44,51,46,0,50,48],
[42,38,40,28,37,42,41,31,0,43],
[36,41,47,42,43,47,40,33,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,40,40,47,45,36,49,44,39],
[44,0,36,44,43,44,39,48,39,39],
[41,45,0,43,44,52,42,47,44,39],
[41,37,38,0,45,43,43,45,39,43],
[34,38,37,36,0,45,46,45,40,41],
[36,37,29,38,36,0,40,41,33,32],
[45,42,39,38,35,41,0,48,46,37],
[32,33,34,36,36,40,33,0,38,41],
[37,42,37,42,41,48,35,43,0,36],
[42,42,42,38,40,49,44,40,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,27,38,32,18,26,23,27,43],
[45,0,44,35,43,39,42,12,47,59],
[54,37,0,40,40,35,38,21,44,54],
[43,46,41,0,45,35,47,42,45,42],
[49,38,41,36,0,31,43,27,43,57],
[63,42,46,46,50,0,40,35,45,50],
[55,39,43,34,38,41,0,36,49,48],
[58,69,60,39,54,46,45,0,56,60],
[54,34,37,36,38,36,32,25,0,51],
[38,22,27,39,24,31,33,21,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,39,34,46,46,38,45,43,26],
[55,0,39,40,49,49,51,49,50,39],
[42,42,0,50,41,45,41,40,48,41],
[47,41,31,0,41,48,37,40,39,38],
[35,32,40,40,0,43,36,53,35,34],
[35,32,36,33,38,0,41,42,41,41],
[43,30,40,44,45,40,0,40,36,43],
[36,32,41,41,28,39,41,0,43,24],
[38,31,33,42,46,40,45,38,0,36],
[55,42,40,43,47,40,38,57,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,39,42,37,43,34,39,40,44],
[40,0,39,34,39,34,33,32,31,34],
[42,42,0,38,47,38,39,44,39,42],
[39,47,43,0,37,46,24,40,38,49],
[44,42,34,44,0,41,39,38,38,45],
[38,47,43,35,40,0,34,36,44,39],
[47,48,42,57,42,47,0,40,43,49],
[42,49,37,41,43,45,41,0,39,45],
[41,50,42,43,43,37,38,42,0,42],
[37,47,39,32,36,42,32,36,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,39,52,35,45,33,22,44,38],
[47,0,30,45,44,45,41,26,39,48],
[42,51,0,41,41,37,31,51,51,42],
[29,36,40,0,36,28,44,27,37,40],
[46,37,40,45,0,41,33,18,39,54],
[36,36,44,53,40,0,37,24,35,37],
[48,40,50,37,48,44,0,40,43,43],
[59,55,30,54,63,57,41,0,52,49],
[37,42,30,44,42,46,38,29,0,43],
[43,33,39,41,27,44,38,32,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,39,41,40,37,35,32,30,43],
[34,0,40,35,31,33,36,35,29,36],
[42,41,0,47,38,38,37,45,27,45],
[40,46,34,0,37,32,37,35,41,39],
[41,50,43,44,0,43,33,32,31,44],
[44,48,43,49,38,0,40,40,36,40],
[46,45,44,44,48,41,0,39,36,42],
[49,46,36,46,49,41,42,0,40,44],
[51,52,54,40,50,45,45,41,0,43],
[38,45,36,42,37,41,39,37,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,48,35,37,39,40,40,39,43],
[40,0,48,35,40,42,43,41,43,34],
[33,33,0,35,40,38,36,37,39,38],
[46,46,46,0,41,42,43,40,41,35],
[44,41,41,40,0,44,44,43,43,41],
[42,39,43,39,37,0,45,45,46,41],
[41,38,45,38,37,36,0,37,38,40],
[41,40,44,41,38,36,44,0,36,38],
[42,38,42,40,38,35,43,45,0,45],
[38,47,43,46,40,40,41,43,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,30,0,20,45,20,25,37,0],
[51,0,62,40,31,40,36,36,62,51],
[51,19,0,30,45,59,50,50,62,36],
[81,41,51,0,36,45,66,41,37,42],
[61,50,36,45,0,36,45,42,42,36],
[36,41,22,36,45,0,50,25,22,11],
[61,45,31,15,36,31,0,56,37,36],
[56,45,31,40,39,56,25,0,37,56],
[44,19,19,44,39,59,44,44,0,44],
[81,30,45,39,45,70,45,25,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,37,44,47,51,49,50,42,39],
[38,0,42,37,36,49,45,46,46,41],
[44,39,0,44,45,46,38,51,39,36],
[37,44,37,0,42,48,38,41,44,40],
[34,45,36,39,0,35,39,40,45,40],
[30,32,35,33,46,0,31,47,32,27],
[32,36,43,43,42,50,0,39,33,38],
[31,35,30,40,41,34,42,0,44,25],
[39,35,42,37,36,49,48,37,0,36],
[42,40,45,41,41,54,43,56,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,31,42,25,26,27,38,19,34],
[55,0,46,43,45,43,34,48,49,55],
[50,35,0,33,37,44,42,41,42,37],
[39,38,48,0,59,26,44,42,32,52],
[56,36,44,22,0,36,36,37,28,34],
[55,38,37,55,45,0,33,37,33,46],
[54,47,39,37,45,48,0,41,37,37],
[43,33,40,39,44,44,40,0,38,35],
[62,32,39,49,53,48,44,43,0,45],
[47,26,44,29,47,35,44,46,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,35,28,28,43,25,38,31,37],
[57,0,56,43,32,51,26,32,38,36],
[46,25,0,30,22,49,21,35,26,32],
[53,38,51,0,38,54,36,33,39,34],
[53,49,59,43,0,58,40,47,55,32],
[38,30,32,27,23,0,21,28,37,28],
[56,55,60,45,41,60,0,36,53,43],
[43,49,46,48,34,53,45,0,50,29],
[50,43,55,42,26,44,28,31,0,35],
[44,45,49,47,49,53,38,52,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,39,40,39,49,36,42,34,32],
[38,0,34,40,36,41,34,30,31,22],
[42,47,0,45,32,50,34,42,34,28],
[41,41,36,0,54,49,39,29,34,34],
[42,45,49,27,0,43,37,36,35,16],
[32,40,31,32,38,0,31,46,27,32],
[45,47,47,42,44,50,0,33,31,35],
[39,51,39,52,45,35,48,0,39,43],
[47,50,47,47,46,54,50,42,0,30],
[49,59,53,47,65,49,46,38,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,39,41,40,48,35,39,46,46],
[36,0,39,30,35,36,35,36,37,42],
[42,42,0,40,36,45,42,40,46,48],
[40,51,41,0,43,51,29,42,41,47],
[41,46,45,38,0,53,41,46,42,46],
[33,45,36,30,28,0,35,38,41,38],
[46,46,39,52,40,46,0,37,43,49],
[42,45,41,39,35,43,44,0,42,46],
[35,44,35,40,39,40,38,39,0,46],
[35,39,33,34,35,43,32,35,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,44,40,34,40,45,42,37,34],
[43,0,46,42,36,40,43,35,35,41],
[37,35,0,42,31,37,40,43,31,33],
[41,39,39,0,40,35,40,41,41,33],
[47,45,50,41,0,41,44,44,36,42],
[41,41,44,46,40,0,43,37,40,43],
[36,38,41,41,37,38,0,37,26,35],
[39,46,38,40,37,44,44,0,32,32],
[44,46,50,40,45,41,55,49,0,43],
[47,40,48,48,39,38,46,49,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,33,26,35,47,38,43,44,50],
[50,0,42,33,48,43,38,48,52,50],
[48,39,0,35,42,51,43,51,55,52],
[55,48,46,0,47,50,34,48,44,44],
[46,33,39,34,0,45,36,44,44,47],
[34,38,30,31,36,0,38,39,39,44],
[43,43,38,47,45,43,0,49,52,46],
[38,33,30,33,37,42,32,0,45,41],
[37,29,26,37,37,42,29,36,0,33],
[31,31,29,37,34,37,35,40,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,40,46,42,45,45,48,41,36],
[37,0,46,47,34,42,42,42,39,50],
[41,35,0,49,37,44,45,39,34,44],
[35,34,32,0,27,34,36,37,27,35],
[39,47,44,54,0,43,49,40,47,56],
[36,39,37,47,38,0,40,37,41,49],
[36,39,36,45,32,41,0,35,36,40],
[33,39,42,44,41,44,46,0,38,48],
[40,42,47,54,34,40,45,43,0,43],
[45,31,37,46,25,32,41,33,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,53,53,40,62,37,56,33,42],
[19,0,46,35,40,39,38,38,28,27],
[28,35,0,26,37,29,30,34,28,28],
[28,46,55,0,50,49,44,59,33,39],
[41,41,44,31,0,41,48,48,41,40],
[19,42,52,32,40,0,36,30,36,29],
[44,43,51,37,33,45,0,39,33,42],
[25,43,47,22,33,51,42,0,41,41],
[48,53,53,48,40,45,48,40,0,41],
[39,54,53,42,41,52,39,40,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,53,27,27,27,27,66,10,42],
[36,0,63,43,47,30,36,48,26,41],
[28,18,0,12,18,0,14,32,18,20],
[54,38,69,0,37,33,33,72,43,38],
[54,34,63,44,0,41,36,64,26,46],
[54,51,81,48,40,0,46,58,39,46],
[54,45,67,48,45,35,0,58,34,54],
[15,33,49,9,17,23,23,0,10,21],
[71,55,63,38,55,42,47,71,0,47],
[39,40,61,43,35,35,27,60,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,47,39,29,36,28,31,36,35],
[46,0,46,36,31,43,33,38,41,46],
[34,35,0,28,26,31,22,30,31,35],
[42,45,53,0,29,39,29,35,44,40],
[52,50,55,52,0,52,42,39,51,44],
[45,38,50,42,29,0,33,38,44,40],
[53,48,59,52,39,48,0,45,44,48],
[50,43,51,46,42,43,36,0,43,48],
[45,40,50,37,30,37,37,38,0,40],
[46,35,46,41,37,41,33,33,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,41,44,45,43,34,42,38],
[38,0,41,44,45,41,43,38,44,46],
[41,40,0,44,41,41,41,44,41,43],
[40,37,37,0,38,40,40,35,40,37],
[37,36,40,43,0,38,35,41,39,41],
[36,40,40,41,43,0,41,41,42,39],
[38,38,40,41,46,40,0,44,43,41],
[47,43,37,46,40,40,37,0,47,41],
[39,37,40,41,42,39,38,34,0,29],
[43,35,38,44,40,42,40,40,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,38,54,54,21,21,38,17,37],
[27,0,0,28,0,0,11,16,16,0],
[43,81,0,44,16,16,27,43,16,16],
[27,53,37,0,32,16,27,16,16,53],
[27,81,65,49,0,27,48,27,16,53],
[60,81,65,65,54,0,65,81,33,37],
[60,70,54,54,33,16,0,49,33,53],
[43,65,38,65,54,0,32,0,0,37],
[64,65,65,65,65,48,48,81,0,37],
[44,81,65,28,28,44,28,44,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,46,44,46,52,45,41,40,40],
[30,0,32,34,44,34,35,39,37,38],
[35,49,0,38,44,45,39,41,39,43],
[37,47,43,0,41,43,38,37,41,44],
[35,37,37,40,0,39,38,38,37,36],
[29,47,36,38,42,0,36,30,37,38],
[36,46,42,43,43,45,0,36,41,40],
[40,42,40,44,43,51,45,0,46,48],
[41,44,42,40,44,44,40,35,0,45],
[41,43,38,37,45,43,41,33,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,37,29,31,40,35,31,44,43],
[47,0,45,43,33,48,43,38,48,42],
[44,36,0,35,41,46,39,41,49,42],
[52,38,46,0,33,45,45,42,36,44],
[50,48,40,48,0,50,43,49,54,48],
[41,33,35,36,31,0,40,30,44,41],
[46,38,42,36,38,41,0,28,40,45],
[50,43,40,39,32,51,53,0,49,49],
[37,33,32,45,27,37,41,32,0,42],
[38,39,39,37,33,40,36,32,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,41,44,40,39,40,49,41,38],
[50,0,45,43,49,50,49,59,49,36],
[40,36,0,48,37,47,42,51,41,48],
[37,38,33,0,34,45,43,47,34,49],
[41,32,44,47,0,49,46,38,46,45],
[42,31,34,36,32,0,43,45,33,29],
[41,32,39,38,35,38,0,55,37,42],
[32,22,30,34,43,36,26,0,33,32],
[40,32,40,47,35,48,44,48,0,44],
[43,45,33,32,36,52,39,49,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,51,55,47,50,43,40,42,46],
[35,0,45,44,39,46,39,43,40,44],
[30,36,0,35,35,42,32,35,40,40],
[26,37,46,0,36,41,30,32,34,40],
[34,42,46,45,0,43,36,40,38,40],
[31,35,39,40,38,0,34,38,34,44],
[38,42,49,51,45,47,0,38,40,45],
[41,38,46,49,41,43,43,0,42,46],
[39,41,41,47,43,47,41,39,0,41],
[35,37,41,41,41,37,36,35,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,44,43,38,39,37,36,44,47],
[36,0,41,50,41,45,34,43,37,34],
[37,40,0,37,40,27,38,39,34,34],
[38,31,44,0,38,34,45,35,34,37],
[43,40,41,43,0,41,43,44,43,35],
[42,36,54,47,40,0,44,36,34,38],
[44,47,43,36,38,37,0,34,36,36],
[45,38,42,46,37,45,47,0,41,37],
[37,44,47,47,38,47,45,40,0,38],
[34,47,47,44,46,43,45,44,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,43,45,33,51,44,38,55,49],
[48,0,40,40,34,44,43,43,53,45],
[38,41,0,29,29,39,45,33,48,47],
[36,41,52,0,42,40,44,43,52,49],
[48,47,52,39,0,44,49,48,57,56],
[30,37,42,41,37,0,45,38,44,46],
[37,38,36,37,32,36,0,39,48,43],
[43,38,48,38,33,43,42,0,53,54],
[26,28,33,29,24,37,33,28,0,38],
[32,36,34,32,25,35,38,27,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,43,36,36,37,36,37,36,39],
[40,0,45,39,41,50,44,33,32,37],
[38,36,0,32,32,35,30,33,30,30],
[45,42,49,0,42,41,42,41,39,42],
[45,40,49,39,0,41,38,40,39,43],
[44,31,46,40,40,0,39,34,30,41],
[45,37,51,39,43,42,0,34,36,42],
[44,48,48,40,41,47,47,0,42,41],
[45,49,51,42,42,51,45,39,0,45],
[42,44,51,39,38,40,39,40,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,43,32,31,35,33,40,37,42],
[42,0,40,38,37,38,34,41,41,43],
[38,41,0,38,36,37,39,37,41,43],
[49,43,43,0,45,43,38,48,45,49],
[50,44,45,36,0,43,40,46,47,52],
[46,43,44,38,38,0,41,38,46,45],
[48,47,42,43,41,40,0,44,42,51],
[41,40,44,33,35,43,37,0,39,45],
[44,40,40,36,34,35,39,42,0,44],
[39,38,38,32,29,36,30,36,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,37,34,32,44,41,37,36,38],
[51,0,39,31,31,46,38,42,34,37],
[44,42,0,42,39,45,54,49,40,33],
[47,50,39,0,35,40,41,49,44,32],
[49,50,42,46,0,48,46,54,44,39],
[37,35,36,41,33,0,41,33,33,23],
[40,43,27,40,35,40,0,44,30,30],
[44,39,32,32,27,48,37,0,42,38],
[45,47,41,37,37,48,51,39,0,41],
[43,44,48,49,42,58,51,43,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,15,32,40,42,23,28,26,38],
[32,0,30,14,35,54,38,28,41,30],
[66,51,0,32,37,42,26,25,25,37],
[49,67,49,0,41,57,38,28,41,52],
[41,46,44,40,0,68,49,42,64,22],
[39,27,39,24,13,0,37,39,54,19],
[58,43,55,43,32,44,0,43,55,43],
[53,53,56,53,39,42,38,0,61,53],
[55,40,56,40,17,27,26,20,0,26],
[43,51,44,29,59,62,38,28,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,44,43,27,34,32,31,43,45],
[43,0,40,44,28,25,33,33,53,32],
[37,41,0,45,33,35,40,36,52,43],
[38,37,36,0,32,30,38,34,42,36],
[54,53,48,49,0,34,35,52,49,42],
[47,56,46,51,47,0,39,50,54,54],
[49,48,41,43,46,42,0,37,46,43],
[50,48,45,47,29,31,44,0,42,35],
[38,28,29,39,32,27,35,39,0,23],
[36,49,38,45,39,27,38,46,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,50,42,42,48,53,28,30],
[40,0,37,40,40,41,40,38,32,34],
[40,44,0,44,41,32,38,43,33,30],
[31,41,37,0,31,31,33,32,32,32],
[39,41,40,50,0,44,40,46,43,40],
[39,40,49,50,37,0,44,44,33,38],
[33,41,43,48,41,37,0,39,35,28],
[28,43,38,49,35,37,42,0,38,35],
[53,49,48,49,38,48,46,43,0,44],
[51,47,51,49,41,43,53,46,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,38,28,35,46,44,41,29,24],
[61,0,63,35,56,51,63,46,53,49],
[43,18,0,28,39,44,45,30,31,43],
[53,46,53,0,64,58,58,59,54,39],
[46,25,42,17,0,44,52,37,36,35],
[35,30,37,23,37,0,42,35,30,32],
[37,18,36,23,29,39,0,29,19,35],
[40,35,51,22,44,46,52,0,29,34],
[52,28,50,27,45,51,62,52,0,44],
[57,32,38,42,46,49,46,47,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,57,50,54,34,47,58,49,45],
[52,0,49,59,56,29,43,76,57,38],
[24,32,0,34,40,34,26,45,38,32],
[31,22,47,0,43,44,28,33,32,36],
[27,25,41,38,0,26,47,38,41,45],
[47,52,47,37,55,0,30,48,58,28],
[34,38,55,53,34,51,0,47,35,53],
[23,5,36,48,43,33,34,0,30,25],
[32,24,43,49,40,23,46,51,0,21],
[36,43,49,45,36,53,28,56,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,61,35,34,39,38,44,34,39],
[29,0,56,32,35,39,35,35,36,38],
[20,25,0,29,26,30,24,27,22,29],
[46,49,52,0,34,46,44,33,38,47],
[47,46,55,47,0,38,41,39,44,45],
[42,42,51,35,43,0,43,34,36,38],
[43,46,57,37,40,38,0,42,34,37],
[37,46,54,48,42,47,39,0,42,49],
[47,45,59,43,37,45,47,39,0,45],
[42,43,52,34,36,43,44,32,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,49,37,52,59,30,39,46,44],
[36,0,40,23,24,38,24,13,16,26],
[32,41,0,32,32,47,27,29,44,31],
[44,58,49,0,57,71,51,45,64,38],
[29,57,49,24,0,59,30,27,32,24],
[22,43,34,10,22,0,16,19,34,22],
[51,57,54,30,51,65,0,21,45,32],
[42,68,52,36,54,62,60,0,47,30],
[35,65,37,17,49,47,36,34,0,25],
[37,55,50,43,57,59,49,51,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,37,48,46,46,50,41,50,43],
[43,0,41,48,53,37,48,40,49,39],
[44,40,0,41,50,50,45,41,47,41],
[33,33,40,0,41,34,43,28,41,34],
[35,28,31,40,0,47,42,36,44,38],
[35,44,31,47,34,0,45,36,51,42],
[31,33,36,38,39,36,0,30,41,35],
[40,41,40,53,45,45,51,0,49,35],
[31,32,34,40,37,30,40,32,0,30],
[38,42,40,47,43,39,46,46,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,40,27,41,25,26,25,32,40],
[60,0,50,49,60,41,39,45,52,55],
[41,31,0,34,38,25,33,29,31,32],
[54,32,47,0,41,33,32,39,34,43],
[40,21,43,40,0,29,33,34,36,43],
[56,40,56,48,52,0,49,42,44,47],
[55,42,48,49,48,32,0,36,46,51],
[56,36,52,42,47,39,45,0,46,50],
[49,29,50,47,45,37,35,35,0,52],
[41,26,49,38,38,34,30,31,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,42,30,46,42,41,44,45,49],
[34,0,45,36,40,38,36,46,42,49],
[39,36,0,30,37,33,37,41,50,50],
[51,45,51,0,36,43,43,49,48,56],
[35,41,44,45,0,29,44,47,42,47],
[39,43,48,38,52,0,42,45,50,46],
[40,45,44,38,37,39,0,46,49,46],
[37,35,40,32,34,36,35,0,41,50],
[36,39,31,33,39,31,32,40,0,43],
[32,32,31,25,34,35,35,31,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,43,40,36,42,38,40,46,47],
[42,0,49,46,53,48,38,41,42,52],
[38,32,0,39,39,37,34,36,38,34],
[41,35,42,0,39,44,37,33,45,38],
[45,28,42,42,0,41,36,34,41,39],
[39,33,44,37,40,0,37,35,46,42],
[43,43,47,44,45,44,0,36,41,40],
[41,40,45,48,47,46,45,0,44,50],
[35,39,43,36,40,35,40,37,0,44],
[34,29,47,43,42,39,41,31,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,45,34,38,35,45,39,45,44],
[40,0,50,49,39,38,51,46,49,43],
[36,31,0,36,35,40,42,49,40,39],
[47,32,45,0,37,33,40,37,42,35],
[43,42,46,44,0,43,46,43,51,40],
[46,43,41,48,38,0,53,44,47,39],
[36,30,39,41,35,28,0,30,47,28],
[42,35,32,44,38,37,51,0,49,42],
[36,32,41,39,30,34,34,32,0,30],
[37,38,42,46,41,42,53,39,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,36,42,41,43,42,43,51,40],
[38,0,32,35,31,43,29,35,40,34],
[45,49,0,44,39,47,38,48,47,46],
[39,46,37,0,40,42,34,44,48,40],
[40,50,42,41,0,46,38,48,53,41],
[38,38,34,39,35,0,28,39,41,30],
[39,52,43,47,43,53,0,43,52,48],
[38,46,33,37,33,42,38,0,42,39],
[30,41,34,33,28,40,29,39,0,34],
[41,47,35,41,40,51,33,42,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,46,39,46,31,43,38,50,42],
[34,0,33,30,37,29,42,35,40,34],
[35,48,0,32,42,32,47,41,48,41],
[42,51,49,0,43,44,52,48,50,35],
[35,44,39,38,0,45,47,39,40,41],
[50,52,49,37,36,0,49,41,45,47],
[38,39,34,29,34,32,0,40,43,33],
[43,46,40,33,42,40,41,0,36,38],
[31,41,33,31,41,36,38,45,0,30],
[39,47,40,46,40,34,48,43,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,52,48,35,42,52,55,48,41],
[37,0,40,38,44,41,51,42,36,36],
[29,41,0,34,40,33,44,48,44,38],
[33,43,47,0,42,40,50,48,43,37],
[46,37,41,39,0,41,43,48,42,38],
[39,40,48,41,40,0,52,44,37,38],
[29,30,37,31,38,29,0,40,32,28],
[26,39,33,33,33,37,41,0,30,30],
[33,45,37,38,39,44,49,51,0,33],
[40,45,43,44,43,43,53,51,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,45,44,37,50,43,40,48,45],
[29,0,30,30,32,35,27,35,32,33],
[36,51,0,33,38,37,43,41,36,42],
[37,51,48,0,39,40,44,43,50,49],
[44,49,43,42,0,44,40,38,42,54],
[31,46,44,41,37,0,40,41,49,46],
[38,54,38,37,41,41,0,45,43,41],
[41,46,40,38,43,40,36,0,44,39],
[33,49,45,31,39,32,38,37,0,40],
[36,48,39,32,27,35,40,42,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,64,2,53,2,2,13,64,39],
[42,0,81,27,44,19,44,30,55,44],
[17,0,0,2,2,0,0,13,2,0],
[79,54,79,0,70,28,28,28,79,54],
[28,37,79,11,0,28,11,11,53,37],
[79,62,81,53,53,0,36,38,64,64],
[79,37,81,53,70,45,0,56,81,81],
[68,51,68,53,70,43,25,0,68,51],
[17,26,79,2,28,17,0,13,0,26],
[42,37,81,27,44,17,0,30,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,40,27,26,39,34,36,38,42],
[45,0,43,38,40,45,40,33,37,46],
[41,38,0,33,31,40,37,38,44,41],
[54,43,48,0,47,51,44,48,38,59],
[55,41,50,34,0,47,49,42,46,43],
[42,36,41,30,34,0,39,38,45,47],
[47,41,44,37,32,42,0,41,38,44],
[45,48,43,33,39,43,40,0,40,40],
[43,44,37,43,35,36,43,41,0,45],
[39,35,40,22,38,34,37,41,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,36,40,41,42,41,40,41,41],
[43,0,45,40,34,49,43,54,45,50],
[45,36,0,44,40,47,36,48,48,48],
[41,41,37,0,40,45,38,49,42,48],
[40,47,41,41,0,49,39,46,44,41],
[39,32,34,36,32,0,35,41,38,41],
[40,38,45,43,42,46,0,45,47,47],
[41,27,33,32,35,40,36,0,39,37],
[40,36,33,39,37,43,34,42,0,42],
[40,31,33,33,40,40,34,44,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,33,26,28,52,51,26,49,41],
[50,0,54,49,32,42,60,47,40,46],
[48,27,0,47,32,30,49,29,36,45],
[55,32,34,0,35,41,50,32,35,54],
[53,49,49,46,0,44,56,47,39,50],
[29,39,51,40,37,0,52,28,33,42],
[30,21,32,31,25,29,0,25,41,30],
[55,34,52,49,34,53,56,0,39,51],
[32,41,45,46,42,48,40,42,0,51],
[40,35,36,27,31,39,51,30,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,42,52,37,39,45,39,36,37],
[42,0,44,47,44,41,39,39,33,36],
[39,37,0,41,35,30,34,34,27,37],
[29,34,40,0,35,32,38,35,27,30],
[44,37,46,46,0,39,39,41,37,41],
[42,40,51,49,42,0,44,44,36,44],
[36,42,47,43,42,37,0,43,36,40],
[42,42,47,46,40,37,38,0,41,37],
[45,48,54,54,44,45,45,40,0,44],
[44,45,44,51,40,37,41,44,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,46,43,35,44,54,49,38,39],
[24,0,33,27,24,29,52,36,28,35],
[35,48,0,37,44,32,47,44,24,51],
[38,54,44,0,40,40,51,37,41,45],
[46,57,37,41,0,48,56,47,36,47],
[37,52,49,41,33,0,51,38,34,48],
[27,29,34,30,25,30,0,39,22,34],
[32,45,37,44,34,43,42,0,34,44],
[43,53,57,40,45,47,59,47,0,54],
[42,46,30,36,34,33,47,37,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,33,38,41,39,43,38,43,40],
[38,0,36,38,34,37,36,40,43,47],
[48,45,0,35,37,35,34,45,38,43],
[43,43,46,0,41,41,38,40,41,44],
[40,47,44,40,0,37,40,43,39,44],
[42,44,46,40,44,0,40,44,48,46],
[38,45,47,43,41,41,0,39,47,42],
[43,41,36,41,38,37,42,0,41,43],
[38,38,43,40,42,33,34,40,0,46],
[41,34,38,37,37,35,39,38,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,35,39,34,38,36,29,36,30],
[44,0,42,46,40,42,41,43,41,44],
[46,39,0,39,40,42,41,39,41,44],
[42,35,42,0,39,38,39,34,41,46],
[47,41,41,42,0,43,44,40,40,45],
[43,39,39,43,38,0,40,40,41,40],
[45,40,40,42,37,41,0,40,37,38],
[52,38,42,47,41,41,41,0,38,43],
[45,40,40,40,41,40,44,43,0,41],
[51,37,37,35,36,41,43,38,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,40,47,47,47,52,39,42,46],
[39,0,33,50,45,49,48,46,42,46],
[41,48,0,32,40,49,39,44,37,46],
[34,31,49,0,38,43,41,39,34,42],
[34,36,41,43,0,40,38,41,31,43],
[34,32,32,38,41,0,38,37,34,36],
[29,33,42,40,43,43,0,34,34,38],
[42,35,37,42,40,44,47,0,37,37],
[39,39,44,47,50,47,47,44,0,51],
[35,35,35,39,38,45,43,44,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,44,41,48,40,43,38,41,38],
[38,0,45,46,46,41,37,40,34,40],
[37,36,0,35,40,39,38,27,42,32],
[40,35,46,0,44,46,46,43,37,39],
[33,35,41,37,0,39,41,42,41,37],
[41,40,42,35,42,0,46,52,35,35],
[38,44,43,35,40,35,0,41,39,37],
[43,41,54,38,39,29,40,0,47,42],
[40,47,39,44,40,46,42,34,0,45],
[43,41,49,42,44,46,44,39,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,41,43,38,44,43,45,43,41],
[38,0,35,43,37,32,38,47,48,29],
[40,46,0,49,39,41,36,50,40,36],
[38,38,32,0,32,34,36,43,36,30],
[43,44,42,49,0,40,43,48,45,42],
[37,49,40,47,41,0,42,52,41,38],
[38,43,45,45,38,39,0,54,48,39],
[36,34,31,38,33,29,27,0,45,33],
[38,33,41,45,36,40,33,36,0,36],
[40,52,45,51,39,43,42,48,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,41,31,32,43,27,42,50,23],
[45,0,32,31,36,54,45,50,61,44],
[40,49,0,41,34,50,46,58,53,50],
[50,50,40,0,35,65,36,60,49,33],
[49,45,47,46,0,54,43,45,55,34],
[38,27,31,16,27,0,30,36,48,27],
[54,36,35,45,38,51,0,49,47,34],
[39,31,23,21,36,45,32,0,39,34],
[31,20,28,32,26,33,34,42,0,18],
[58,37,31,48,47,54,47,47,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,29,40,60,42,41,28,29,34],
[34,0,31,46,42,42,37,43,44,23],
[52,50,0,50,58,60,42,43,52,40],
[41,35,31,0,49,53,47,46,44,45],
[21,39,23,32,0,32,32,34,23,13],
[39,39,21,28,49,0,26,33,37,31],
[40,44,39,34,49,55,0,34,30,44],
[53,38,38,35,47,48,47,0,40,45],
[52,37,29,37,58,44,51,41,0,39],
[47,58,41,36,68,50,37,36,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,43,45,43,42,38,44,54,36],
[37,0,56,36,43,39,38,36,45,33],
[38,25,0,36,36,32,34,38,32,33],
[36,45,45,0,46,41,44,48,34,42],
[38,38,45,35,0,36,42,47,45,32],
[39,42,49,40,45,0,40,44,36,36],
[43,43,47,37,39,41,0,41,55,40],
[37,45,43,33,34,37,40,0,40,32],
[27,36,49,47,36,45,26,41,0,24],
[45,48,48,39,49,45,41,49,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,46,54,39,31,41,54,19,53],
[53,0,65,55,54,37,31,42,43,56],
[35,16,0,38,40,36,22,27,21,48],
[27,26,43,0,42,29,37,47,27,37],
[42,27,41,39,0,40,41,49,30,45],
[50,44,45,52,41,0,41,63,37,58],
[40,50,59,44,40,40,0,45,41,56],
[27,39,54,34,32,18,36,0,25,38],
[62,38,60,54,51,44,40,56,0,64],
[28,25,33,44,36,23,25,43,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,46,45,48,43,39,41,39,53],
[29,0,30,30,35,39,37,36,33,38],
[35,51,0,37,38,41,34,52,46,44],
[36,51,44,0,38,42,31,43,40,40],
[33,46,43,43,0,41,36,45,33,49],
[38,42,40,39,40,0,46,39,33,38],
[42,44,47,50,45,35,0,37,41,36],
[40,45,29,38,36,42,44,0,31,44],
[42,48,35,41,48,48,40,50,0,48],
[28,43,37,41,32,43,45,37,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,41,46,35,37,35,29,38,32],
[46,0,34,44,40,36,38,39,47,40],
[40,47,0,47,51,40,47,42,51,35],
[35,37,34,0,40,35,34,40,46,39],
[46,41,30,41,0,40,39,34,41,34],
[44,45,41,46,41,0,46,43,46,38],
[46,43,34,47,42,35,0,38,51,35],
[52,42,39,41,47,38,43,0,44,45],
[43,34,30,35,40,35,30,37,0,33],
[49,41,46,42,47,43,46,36,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,33,37,41,41,45,41,43,40],
[40,0,37,46,41,38,42,45,42,36],
[48,44,0,40,42,45,48,46,42,37],
[44,35,41,0,40,41,41,43,43,37],
[40,40,39,41,0,46,38,37,39,34],
[40,43,36,40,35,0,43,43,35,42],
[36,39,33,40,43,38,0,43,42,43],
[40,36,35,38,44,38,38,0,41,36],
[38,39,39,38,42,46,39,40,0,37],
[41,45,44,44,47,39,38,45,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,38,24,31,41,30,32,36,32],
[45,0,45,31,39,40,42,40,51,40],
[43,36,0,32,32,43,32,38,50,39],
[57,50,49,0,46,45,38,44,55,51],
[50,42,49,35,0,40,45,37,49,39],
[40,41,38,36,41,0,37,38,51,43],
[51,39,49,43,36,44,0,35,50,48],
[49,41,43,37,44,43,46,0,49,46],
[45,30,31,26,32,30,31,32,0,37],
[49,41,42,30,42,38,33,35,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,26,35,41,33,42,17,33,33],
[37,0,40,12,46,50,44,34,42,35],
[55,41,0,30,37,35,36,20,30,39],
[46,69,51,0,45,58,51,35,61,61],
[40,35,44,36,0,37,46,27,29,37],
[48,31,46,23,44,0,44,43,45,44],
[39,37,45,30,35,37,0,41,34,12],
[64,47,61,46,54,38,40,0,41,49],
[48,39,51,20,52,36,47,40,0,27],
[48,46,42,20,44,37,69,32,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,38,45,42,30,41,32,42,38],
[43,0,45,51,47,39,47,44,47,40],
[43,36,0,48,45,35,36,40,41,37],
[36,30,33,0,35,31,34,26,41,33],
[39,34,36,46,0,37,36,37,27,38],
[51,42,46,50,44,0,43,40,56,42],
[40,34,45,47,45,38,0,40,39,37],
[49,37,41,55,44,41,41,0,42,42],
[39,34,40,40,54,25,42,39,0,39],
[43,41,44,48,43,39,44,39,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,31,44,31,44,35,39,36,42],
[38,0,29,42,37,32,40,36,28,39],
[50,52,0,56,39,49,45,48,43,46],
[37,39,25,0,30,30,40,29,21,28],
[50,44,42,51,0,40,45,44,40,47],
[37,49,32,51,41,0,40,31,31,37],
[46,41,36,41,36,41,0,45,38,49],
[42,45,33,52,37,50,36,0,37,39],
[45,53,38,60,41,50,43,44,0,45],
[39,42,35,53,34,44,32,42,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,38,37,42,44,38,39,34,32],
[38,0,36,35,35,34,40,39,37,34],
[43,45,0,41,39,37,37,36,38,34],
[44,46,40,0,44,45,46,40,38,42],
[39,46,42,37,0,42,39,38,39,37],
[37,47,44,36,39,0,40,40,36,36],
[43,41,44,35,42,41,0,36,36,36],
[42,42,45,41,43,41,45,0,31,38],
[47,44,43,43,42,45,45,50,0,38],
[49,47,47,39,44,45,45,43,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,35,36,38,34,40,44,48,36],
[32,0,31,36,36,36,32,35,38,40],
[46,50,0,40,44,48,42,40,41,47],
[45,45,41,0,40,38,43,40,40,42],
[43,45,37,41,0,39,41,42,46,43],
[47,45,33,43,42,0,43,39,43,47],
[41,49,39,38,40,38,0,41,48,45],
[37,46,41,41,39,42,40,0,44,50],
[33,43,40,41,35,38,33,37,0,40],
[45,41,34,39,38,34,36,31,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,35,41,41,46,36,42,48,49],
[27,0,38,33,50,46,35,41,56,55],
[46,43,0,44,47,56,35,46,54,53],
[40,48,37,0,49,35,37,36,46,40],
[40,31,34,32,0,37,30,41,45,41],
[35,35,25,46,44,0,37,33,48,38],
[45,46,46,44,51,44,0,39,51,62],
[39,40,35,45,40,48,42,0,57,48],
[33,25,27,35,36,33,30,24,0,40],
[32,26,28,41,40,43,19,33,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,42,45,40,49,45,52,53,40],
[36,0,33,32,35,37,28,47,38,38],
[39,48,0,44,46,45,47,49,53,42],
[36,49,37,0,44,40,38,43,46,37],
[41,46,35,37,0,40,39,50,51,39],
[32,44,36,41,41,0,34,43,38,44],
[36,53,34,43,42,47,0,42,46,43],
[29,34,32,38,31,38,39,0,40,30],
[28,43,28,35,30,43,35,41,0,34],
[41,43,39,44,42,37,38,51,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,34,48,55,21,59,35,19,57],
[27,0,42,42,66,26,27,27,30,30],
[47,39,0,23,46,50,65,9,30,47],
[33,39,58,0,46,47,48,44,48,30],
[26,15,35,35,0,26,38,25,24,23],
[60,55,31,34,55,0,78,20,38,60],
[22,54,16,33,43,3,0,19,22,21],
[46,54,72,37,56,61,62,0,27,62],
[62,51,51,33,57,43,59,54,0,47],
[24,51,34,51,58,21,60,19,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,50,44,50,32,46,40,43,50],
[32,0,42,29,38,30,30,28,37,44],
[31,39,0,29,40,30,32,27,36,40],
[37,52,52,0,37,41,44,32,45,54],
[31,43,41,44,0,37,42,30,44,49],
[49,51,51,40,44,0,42,41,47,56],
[35,51,49,37,39,39,0,35,39,45],
[41,53,54,49,51,40,46,0,45,62],
[38,44,45,36,37,34,42,36,0,52],
[31,37,41,27,32,25,36,19,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,43,50,34,37,44,44,45,43],
[42,0,37,40,45,35,52,52,42,37],
[38,44,0,50,41,37,48,44,33,44],
[31,41,31,0,40,31,44,44,36,35],
[47,36,40,41,0,41,46,50,48,41],
[44,46,44,50,40,0,54,51,50,50],
[37,29,33,37,35,27,0,36,34,29],
[37,29,37,37,31,30,45,0,31,30],
[36,39,48,45,33,31,47,50,0,38],
[38,44,37,46,40,31,52,51,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,38,32,38,36,32,39,45,39],
[54,0,44,34,40,45,29,41,53,41],
[43,37,0,44,34,44,25,33,42,39],
[49,47,37,0,36,35,32,29,47,32],
[43,41,47,45,0,49,45,33,56,36],
[45,36,37,46,32,0,27,30,45,26],
[49,52,56,49,36,54,0,41,64,49],
[42,40,48,52,48,51,40,0,46,35],
[36,28,39,34,25,36,17,35,0,24],
[42,40,42,49,45,55,32,46,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,41,34,30,41,44,34,45,40],
[43,0,44,37,45,49,37,32,35,25],
[40,37,0,34,44,57,43,38,48,29],
[47,44,47,0,55,47,26,43,41,32],
[51,36,37,26,0,37,35,41,42,32],
[40,32,24,34,44,0,27,30,32,21],
[37,44,38,55,46,54,0,42,39,42],
[47,49,43,38,40,51,39,0,55,30],
[36,46,33,40,39,49,42,26,0,27],
[41,56,52,49,49,60,39,51,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,42,47,38,42,43,37,41,39],
[34,0,28,33,28,38,37,31,39,32],
[39,53,0,44,41,48,46,39,43,42],
[34,48,37,0,35,40,49,38,38,43],
[43,53,40,46,0,42,50,44,42,52],
[39,43,33,41,39,0,40,34,37,36],
[38,44,35,32,31,41,0,35,30,41],
[44,50,42,43,37,47,46,0,41,42],
[40,42,38,43,39,44,51,40,0,45],
[42,49,39,38,29,45,40,39,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,41,40,38,45,47,42,50,37],
[36,0,42,46,36,43,38,36,46,31],
[40,39,0,46,47,36,43,46,46,49],
[41,35,35,0,28,34,41,45,43,32],
[43,45,34,53,0,46,47,48,48,45],
[36,38,45,47,35,0,41,41,43,36],
[34,43,38,40,34,40,0,38,40,35],
[39,45,35,36,33,40,43,0,42,34],
[31,35,35,38,33,38,41,39,0,33],
[44,50,32,49,36,45,46,47,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,37,43,43,36,42,42,48,46],
[45,0,42,47,47,37,42,42,44,48],
[44,39,0,44,47,41,42,39,47,45],
[38,34,37,0,40,36,43,38,46,45],
[38,34,34,41,0,31,40,41,43,38],
[45,44,40,45,50,0,48,45,49,52],
[39,39,39,38,41,33,0,36,41,43],
[39,39,42,43,40,36,45,0,40,48],
[33,37,34,35,38,32,40,41,0,42],
[35,33,36,36,43,29,38,33,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,43,43,47,44,37,37,50,42],
[44,0,56,38,54,38,40,45,53,46],
[38,25,0,44,59,18,39,39,51,40],
[38,43,37,0,39,45,27,24,40,34],
[34,27,22,42,0,25,34,35,42,38],
[37,43,63,36,56,0,43,38,48,49],
[44,41,42,54,47,38,0,36,50,45],
[44,36,42,57,46,43,45,0,53,64],
[31,28,30,41,39,33,31,28,0,20],
[39,35,41,47,43,32,36,17,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,43,46,45,55,48,46,47,46],
[41,0,42,37,42,45,49,39,40,46],
[38,39,0,40,43,43,47,40,48,54],
[35,44,41,0,44,44,45,39,44,49],
[36,39,38,37,0,43,40,35,36,43],
[26,36,38,37,38,0,38,36,39,39],
[33,32,34,36,41,43,0,40,45,45],
[35,42,41,42,46,45,41,0,43,49],
[34,41,33,37,45,42,36,38,0,46],
[35,35,27,32,38,42,36,32,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,47,44,37,39,41,42,39,41],
[39,0,47,45,43,34,43,41,38,41],
[34,34,0,43,36,33,35,30,37,33],
[37,36,38,0,30,32,35,38,36,30],
[44,38,45,51,0,39,40,41,38,45],
[42,47,48,49,42,0,44,45,47,39],
[40,38,46,46,41,37,0,43,38,41],
[39,40,51,43,40,36,38,0,36,40],
[42,43,44,45,43,34,43,45,0,44],
[40,40,48,51,36,42,40,41,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,39,28,39,37,33,33,29,39],
[37,0,39,32,36,29,41,43,40,36],
[42,42,0,31,34,41,32,35,36,40],
[53,49,50,0,51,45,48,50,39,43],
[42,45,47,30,0,37,40,43,39,39],
[44,52,40,36,44,0,47,49,42,47],
[48,40,49,33,41,34,0,34,42,49],
[48,38,46,31,38,32,47,0,38,42],
[52,41,45,42,42,39,39,43,0,43],
[42,45,41,38,42,34,32,39,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,56,45,56,56,38,44,38,56],
[44,0,38,44,63,55,63,63,55,63],
[25,43,0,43,43,35,25,25,17,25],
[36,37,38,0,54,56,36,44,36,38],
[25,18,38,27,0,19,44,44,55,38],
[25,26,46,25,62,0,44,44,36,63],
[43,18,56,45,37,37,0,43,38,56],
[37,18,56,37,37,37,38,0,38,56],
[43,26,64,45,26,45,43,43,0,64],
[25,18,56,43,43,18,25,25,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,50,48,41,42,40,47,46,46],
[37,0,45,48,36,39,36,48,44,46],
[31,36,0,37,31,29,33,39,34,35],
[33,33,44,0,36,38,39,42,38,35],
[40,45,50,45,0,47,36,47,44,44],
[39,42,52,43,34,0,32,46,46,47],
[41,45,48,42,45,49,0,49,43,38],
[34,33,42,39,34,35,32,0,35,40],
[35,37,47,43,37,35,38,46,0,41],
[35,35,46,46,37,34,43,41,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,41,26,26,17,34,32,32,25],
[56,0,33,20,32,25,39,33,24,39],
[40,48,0,36,26,41,49,11,24,57],
[55,61,45,0,47,38,54,32,39,47],
[55,49,55,34,0,15,23,46,53,47],
[64,56,40,43,66,0,62,32,56,57],
[47,42,32,27,58,19,0,34,39,49],
[49,48,70,49,35,49,47,0,62,56],
[49,57,57,42,28,25,42,19,0,49],
[56,42,24,34,34,24,32,25,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,44,39,38,39,35,36,27,38],
[44,0,47,44,44,40,41,40,39,41],
[37,34,0,39,38,34,34,34,31,31],
[42,37,42,0,38,39,38,43,34,39],
[43,37,43,43,0,42,36,42,35,35],
[42,41,47,42,39,0,42,43,42,41],
[46,40,47,43,45,39,0,38,30,37],
[45,41,47,38,39,38,43,0,30,40],
[54,42,50,47,46,39,51,51,0,46],
[43,40,50,42,46,40,44,41,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,42,53,35,24,22,37,55,37],
[24,0,31,20,24,9,24,13,24,37],
[39,50,0,57,50,39,15,35,57,57],
[28,61,24,0,26,28,6,8,48,48],
[46,57,31,55,0,44,44,15,55,77],
[57,72,42,53,37,0,39,46,59,81],
[59,57,66,75,37,42,0,46,75,77],
[44,68,46,73,66,35,35,0,73,73],
[26,57,24,33,26,22,6,8,0,46],
[44,44,24,33,4,0,4,8,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,36,31,28,38,19,48,44,50],
[34,0,46,38,29,50,29,40,57,38],
[45,35,0,49,32,60,34,59,48,50],
[50,43,32,0,32,44,42,50,37,30],
[53,52,49,49,0,50,33,50,49,39],
[43,31,21,37,31,0,24,32,39,49],
[62,52,47,39,48,57,0,60,47,48],
[33,41,22,31,31,49,21,0,45,47],
[37,24,33,44,32,42,34,36,0,34],
[31,43,31,51,42,32,33,34,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,46,48,49,35,57,52,47,40],
[32,0,50,51,37,42,48,54,42,42],
[35,31,0,33,34,33,39,35,36,22],
[33,30,48,0,41,24,43,41,35,32],
[32,44,47,40,0,38,46,45,43,35],
[46,39,48,57,43,0,49,48,46,31],
[24,33,42,38,35,32,0,39,31,30],
[29,27,46,40,36,33,42,0,35,31],
[34,39,45,46,38,35,50,46,0,42],
[41,39,59,49,46,50,51,50,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,38,43,38,36,40,39,40,43],
[36,0,33,34,33,38,33,36,40,40],
[43,48,0,44,42,42,38,41,43,44],
[38,47,37,0,41,37,34,43,44,39],
[43,48,39,40,0,35,41,40,40,47],
[45,43,39,44,46,0,42,43,37,48],
[41,48,43,47,40,39,0,42,43,41],
[42,45,40,38,41,38,39,0,43,41],
[41,41,38,37,41,44,38,38,0,45],
[38,41,37,42,34,33,40,40,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,35,36,41,38,24,35,39,36],
[42,0,32,31,31,33,29,33,39,35],
[46,49,0,52,40,34,47,59,56,49],
[45,50,29,0,32,43,49,35,45,36],
[40,50,41,49,0,43,33,49,50,39],
[43,48,47,38,38,0,44,34,39,40],
[57,52,34,32,48,37,0,31,45,35],
[46,48,22,46,32,47,50,0,47,43],
[42,42,25,36,31,42,36,34,0,27],
[45,46,32,45,42,41,46,38,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,32,45,20,17,40,48,32,27],
[55,0,36,40,30,26,50,53,31,56],
[49,45,0,45,40,42,51,59,52,62],
[36,41,36,0,21,36,31,29,27,47],
[61,51,41,60,0,31,27,49,36,60],
[64,55,39,45,50,0,49,54,39,66],
[41,31,30,50,54,32,0,28,17,50],
[33,28,22,52,32,27,53,0,29,57],
[49,50,29,54,45,42,64,52,0,61],
[54,25,19,34,21,15,31,24,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,38,41,40,51,42,43,42,40],
[34,0,28,29,27,42,34,36,46,39],
[43,53,0,37,42,49,56,41,54,50],
[40,52,44,0,41,34,41,32,48,35],
[41,54,39,40,0,46,39,37,51,51],
[30,39,32,47,35,0,35,40,37,38],
[39,47,25,40,42,46,0,39,41,40],
[38,45,40,49,44,41,42,0,44,45],
[39,35,27,33,30,44,40,37,0,35],
[41,42,31,46,30,43,41,36,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,45,27,31,38,31,31,39,37],
[39,0,46,32,37,28,32,34,36,40],
[36,35,0,28,31,31,28,35,34,34],
[54,49,53,0,44,51,33,41,43,39],
[50,44,50,37,0,39,32,32,41,39],
[43,53,50,30,42,0,38,43,41,43],
[50,49,53,48,49,43,0,39,39,43],
[50,47,46,40,49,38,42,0,42,42],
[42,45,47,38,40,40,42,39,0,38],
[44,41,47,42,42,38,38,39,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,38,37,29,35,34,43,43,47],
[38,0,48,43,41,39,35,34,49,45],
[43,33,0,35,38,35,31,37,39,39],
[44,38,46,0,33,43,39,41,40,44],
[52,40,43,48,0,50,43,41,54,47],
[46,42,46,38,31,0,39,36,44,49],
[47,46,50,42,38,42,0,49,49,48],
[38,47,44,40,40,45,32,0,46,43],
[38,32,42,41,27,37,32,35,0,42],
[34,36,42,37,34,32,33,38,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,41,34,37,40,34,36,52,45],
[49,0,41,43,49,47,39,44,55,44],
[40,40,0,45,48,46,42,42,50,45],
[47,38,36,0,43,51,35,41,48,44],
[44,32,33,38,0,43,30,34,45,37],
[41,34,35,30,38,0,35,35,41,38],
[47,42,39,46,51,46,0,45,50,44],
[45,37,39,40,47,46,36,0,50,40],
[29,26,31,33,36,40,31,31,0,30],
[36,37,36,37,44,43,37,41,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,69,67,67,50,37,64,38,14],
[40,0,61,61,61,46,40,25,46,15],
[12,20,0,72,58,43,37,22,43,0],
[14,20,9,0,51,52,24,24,23,2],
[14,20,23,30,0,42,29,12,14,0],
[31,35,38,29,39,0,38,25,12,14],
[44,41,44,57,52,43,0,42,40,42],
[17,56,59,57,69,56,39,0,55,0],
[43,35,38,58,67,69,41,26,0,14],
[67,66,81,79,81,67,39,81,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,36,49,33,31,34,33,34,32],
[49,0,52,53,41,39,36,44,34,43],
[45,29,0,46,35,31,41,30,36,34],
[32,28,35,0,29,31,29,39,32,28],
[48,40,46,52,0,42,45,43,39,52],
[50,42,50,50,39,0,48,40,40,38],
[47,45,40,52,36,33,0,40,31,43],
[48,37,51,42,38,41,41,0,44,47],
[47,47,45,49,42,41,50,37,0,39],
[49,38,47,53,29,43,38,34,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,38,26,31,16,15,31,27],
[42,0,29,25,29,37,31,29,30,37],
[42,52,0,52,44,45,35,36,42,42],
[43,56,29,0,33,44,24,42,32,37],
[55,52,37,48,0,40,45,39,46,55],
[50,44,36,37,41,0,39,35,36,48],
[65,50,46,57,36,42,0,41,49,63],
[66,52,45,39,42,46,40,0,35,55],
[50,51,39,49,35,45,32,46,0,38],
[54,44,39,44,26,33,18,26,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,39,41,56,55,53,38,49,32],
[30,0,35,30,32,38,46,40,42,28],
[42,46,0,31,36,53,50,44,38,41],
[40,51,50,0,51,55,58,40,52,43],
[25,49,45,30,0,48,45,35,47,38],
[26,43,28,26,33,0,40,31,35,27],
[28,35,31,23,36,41,0,35,32,28],
[43,41,37,41,46,50,46,0,44,37],
[32,39,43,29,34,46,49,37,0,26],
[49,53,40,38,43,54,53,44,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,54,42,39,42,30,41,48,41],
[36,0,51,12,36,40,41,54,63,27],
[27,30,0,3,12,16,18,27,25,45],
[39,69,78,0,41,57,33,56,51,56],
[42,45,69,40,0,43,55,54,49,57],
[39,41,65,24,38,0,39,51,37,53],
[51,40,63,48,26,42,0,41,62,27],
[40,27,54,25,27,30,40,0,54,28],
[33,18,56,30,32,44,19,27,0,33],
[40,54,36,25,24,28,54,53,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,32,45,27,40,30,32,36,45],
[40,0,35,41,33,37,34,36,46,31],
[49,46,0,46,34,43,36,41,46,44],
[36,40,35,0,27,24,31,42,36,38],
[54,48,47,54,0,38,47,52,51,49],
[41,44,38,57,43,0,42,45,42,44],
[51,47,45,50,34,39,0,43,43,43],
[49,45,40,39,29,36,38,0,41,41],
[45,35,35,45,30,39,38,40,0,33],
[36,50,37,43,32,37,38,40,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,48,54,44,39,63,41,58,53],
[27,0,35,37,31,39,43,25,37,32],
[33,46,0,49,35,32,43,49,35,40],
[27,44,32,0,42,38,46,35,37,41],
[37,50,46,39,0,47,52,36,50,47],
[42,42,49,43,34,0,51,40,55,33],
[18,38,38,35,29,30,0,25,43,37],
[40,56,32,46,45,41,56,0,52,42],
[23,44,46,44,31,26,38,29,0,43],
[28,49,41,40,34,48,44,39,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,47,54,53,58,38,56,55],
[39,0,42,47,49,40,58,42,44,49],
[39,39,0,42,46,44,47,43,50,44],
[34,34,39,0,48,45,41,46,45,51],
[27,32,35,33,0,35,37,35,36,53],
[28,41,37,36,46,0,45,39,48,48],
[23,23,34,40,44,36,0,34,35,45],
[43,39,38,35,46,42,47,0,49,48],
[25,37,31,36,45,33,46,32,0,52],
[26,32,37,30,28,33,36,33,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,45,37,41,44,38,45,33,47],
[40,0,43,38,39,38,33,39,36,45],
[36,38,0,35,37,36,39,40,37,46],
[44,43,46,0,48,42,43,49,40,46],
[40,42,44,33,0,39,40,44,34,43],
[37,43,45,39,42,0,35,44,38,44],
[43,48,42,38,41,46,0,46,41,47],
[36,42,41,32,37,37,35,0,37,41],
[48,45,44,41,47,43,40,44,0,46],
[34,36,35,35,38,37,34,40,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,37,36,43,47,44,39,39,42],
[40,0,44,38,45,44,44,35,34,44],
[44,37,0,38,43,40,41,35,36,39],
[45,43,43,0,43,45,39,41,44,41],
[38,36,38,38,0,43,37,32,36,41],
[34,37,41,36,38,0,39,33,41,36],
[37,37,40,42,44,42,0,44,40,38],
[42,46,46,40,49,48,37,0,42,44],
[42,47,45,37,45,40,41,39,0,47],
[39,37,42,40,40,45,43,37,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,37,35,32,31,36,38,36,34],
[52,0,45,42,37,43,44,36,49,46],
[44,36,0,33,38,39,39,39,44,40],
[46,39,48,0,39,33,38,39,49,42],
[49,44,43,42,0,44,43,44,51,40],
[50,38,42,48,37,0,41,38,41,40],
[45,37,42,43,38,40,0,35,45,37],
[43,45,42,42,37,43,46,0,44,45],
[45,32,37,32,30,40,36,37,0,40],
[47,35,41,39,41,41,44,36,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,37,44,39,33,49,46,43,40],
[48,0,44,42,41,36,44,39,43,41],
[44,37,0,43,31,42,51,37,50,51],
[37,39,38,0,34,31,33,46,42,46],
[42,40,50,47,0,37,48,43,50,51],
[48,45,39,50,44,0,49,45,50,56],
[32,37,30,48,33,32,0,41,38,37],
[35,42,44,35,38,36,40,0,33,41],
[38,38,31,39,31,31,43,48,0,42],
[41,40,30,35,30,25,44,40,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,36,42,37,37,36,26,35,40],
[47,0,46,39,45,41,39,43,40,41],
[45,35,0,32,36,46,41,33,38,43],
[39,42,49,0,44,47,53,39,42,38],
[44,36,45,37,0,45,47,31,42,44],
[44,40,35,34,36,0,40,32,33,35],
[45,42,40,28,34,41,0,37,39,36],
[55,38,48,42,50,49,44,0,47,43],
[46,41,43,39,39,48,42,34,0,36],
[41,40,38,43,37,46,45,38,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,43,37,35,39,44,36,47,35],
[39,0,38,36,35,39,35,32,42,42],
[38,43,0,34,34,36,33,34,40,40],
[44,45,47,0,43,41,37,36,50,44],
[46,46,47,38,0,47,40,48,51,47],
[42,42,45,40,34,0,35,37,45,38],
[37,46,48,44,41,46,0,47,49,48],
[45,49,47,45,33,44,34,0,46,41],
[34,39,41,31,30,36,32,35,0,37],
[46,39,41,37,34,43,33,40,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,44,35,41,40,42,39,37,36],
[30,0,42,36,29,52,40,43,53,31],
[37,39,0,35,30,47,45,39,30,39],
[46,45,46,0,41,53,56,34,46,28],
[40,52,51,40,0,55,42,51,39,43],
[41,29,34,28,26,0,31,41,28,35],
[39,41,36,25,39,50,0,37,31,27],
[42,38,42,47,30,40,44,0,30,47],
[44,28,51,35,42,53,50,51,0,40],
[45,50,42,53,38,46,54,34,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,33,36,40,37,29,47,48,37],
[42,0,36,46,42,51,43,41,44,46],
[48,45,0,41,40,47,34,52,49,40],
[45,35,40,0,40,45,38,42,45,46],
[41,39,41,41,0,51,38,42,47,40],
[44,30,34,36,30,0,39,48,32,39],
[52,38,47,43,43,42,0,54,49,51],
[34,40,29,39,39,33,27,0,40,46],
[33,37,32,36,34,49,32,41,0,43],
[44,35,41,35,41,42,30,35,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,41,42,39,37,40,39,35,38],
[41,0,38,38,40,37,41,46,34,38],
[40,43,0,40,39,32,41,43,40,39],
[39,43,41,0,40,36,49,40,44,41],
[42,41,42,41,0,41,40,48,38,43],
[44,44,49,45,40,0,44,38,42,46],
[41,40,40,32,41,37,0,42,38,36],
[42,35,38,41,33,43,39,0,40,36],
[46,47,41,37,43,39,43,41,0,41],
[43,43,42,40,38,35,45,45,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,44,38,41,44,53,52,44,51],
[36,0,46,46,35,50,49,48,45,53],
[37,35,0,40,38,40,42,39,36,45],
[43,35,41,0,40,44,49,38,43,49],
[40,46,43,41,0,51,46,49,46,44],
[37,31,41,37,30,0,38,45,41,39],
[28,32,39,32,35,43,0,43,44,42],
[29,33,42,43,32,36,38,0,36,43],
[37,36,45,38,35,40,37,45,0,45],
[30,28,36,32,37,42,39,38,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,32,35,43,42,35,42,37,50],
[34,0,27,35,28,36,46,26,38,33],
[49,54,0,45,39,49,61,46,42,49],
[46,46,36,0,41,39,53,38,45,36],
[38,53,42,40,0,43,52,37,41,43],
[39,45,32,42,38,0,41,47,43,35],
[46,35,20,28,29,40,0,33,34,43],
[39,55,35,43,44,34,48,0,35,43],
[44,43,39,36,40,38,47,46,0,42],
[31,48,32,45,38,46,38,38,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,35,55,48,71,34,40,54,55],
[30,0,10,45,10,33,38,30,46,20],
[46,71,0,68,33,71,54,37,46,23],
[26,36,13,0,26,49,34,20,49,23],
[33,71,48,55,0,64,54,40,64,23],
[10,48,10,32,17,0,31,17,46,20],
[47,43,27,47,27,50,0,47,63,37],
[41,51,44,61,41,64,34,0,64,38],
[27,35,35,32,17,35,18,17,0,20],
[26,61,58,58,58,61,44,43,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,34,31,36,50,35,42,25,36],
[46,0,38,30,33,47,36,40,35,33],
[47,43,0,38,36,44,45,45,39,35],
[50,51,43,0,36,53,45,45,37,42],
[45,48,45,45,0,56,44,49,41,40],
[31,34,37,28,25,0,40,39,36,37],
[46,45,36,36,37,41,0,40,31,38],
[39,41,36,36,32,42,41,0,32,32],
[56,46,42,44,40,45,50,49,0,39],
[45,48,46,39,41,44,43,49,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,46,39,37,42,40,40,40],
[37,0,44,37,34,38,41,42,43,42],
[39,37,0,37,38,49,46,38,42,45],
[35,44,44,0,38,46,46,46,42,45],
[42,47,43,43,0,45,47,40,46,42],
[44,43,32,35,36,0,47,39,44,42],
[39,40,35,35,34,34,0,31,41,38],
[41,39,43,35,41,42,50,0,43,44],
[41,38,39,39,35,37,40,38,0,47],
[41,39,36,36,39,39,43,37,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,55,41,46,44,41,23,44,35],
[38,0,53,42,58,44,46,40,60,38],
[26,28,0,50,46,29,36,28,47,36],
[40,39,31,0,53,28,50,50,43,41],
[35,23,35,28,0,31,26,24,27,21],
[37,37,52,53,50,0,31,39,40,43],
[40,35,45,31,55,50,0,34,41,34],
[58,41,53,31,57,42,47,0,49,38],
[37,21,34,38,54,41,40,32,0,34],
[46,43,45,40,60,38,47,43,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,37,40,41,39,43,29,31,33],
[38,0,41,36,40,40,37,30,35,30],
[44,40,0,41,45,40,38,33,26,39],
[41,45,40,0,37,43,44,26,25,30],
[40,41,36,44,0,38,47,31,29,40],
[42,41,41,38,43,0,38,34,22,35],
[38,44,43,37,34,43,0,37,30,36],
[52,51,48,55,50,47,44,0,40,41],
[50,46,55,56,52,59,51,41,0,39],
[48,51,42,51,41,46,45,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,39,44,28,42,38,45,41,43],
[53,0,47,50,51,50,45,45,35,35],
[42,34,0,39,35,45,33,49,41,34],
[37,31,42,0,41,47,44,45,44,36],
[53,30,46,40,0,52,41,53,41,39],
[39,31,36,34,29,0,24,43,36,36],
[43,36,48,37,40,57,0,50,48,36],
[36,36,32,36,28,38,31,0,32,28],
[40,46,40,37,40,45,33,49,0,41],
[38,46,47,45,42,45,45,53,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,43,31,27,43,23,43,57,53],
[48,0,66,34,40,64,47,49,44,63],
[38,15,0,28,37,56,23,16,46,40],
[50,47,53,0,37,54,18,33,64,63],
[54,41,44,44,0,62,32,57,60,58],
[38,17,25,27,19,0,14,22,54,52],
[58,34,58,63,49,67,0,32,63,54],
[38,32,65,48,24,59,49,0,60,45],
[24,37,35,17,21,27,18,21,0,21],
[28,18,41,18,23,29,27,36,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,43,43,47,42,42,41,45,45],
[47,0,48,44,51,39,42,43,40,46],
[38,33,0,43,35,38,40,40,35,43],
[38,37,38,0,43,37,46,41,40,38],
[34,30,46,38,0,36,39,37,38,37],
[39,42,43,44,45,0,43,37,43,43],
[39,39,41,35,42,38,0,39,42,41],
[40,38,41,40,44,44,42,0,43,48],
[36,41,46,41,43,38,39,38,0,43],
[36,35,38,43,44,38,40,33,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,37,37,39,43,35,40,36,38],
[35,0,35,36,44,35,36,29,44,35],
[44,46,0,41,41,45,45,37,43,35],
[44,45,40,0,45,33,45,42,37,42],
[42,37,40,36,0,41,46,40,47,37],
[38,46,36,48,40,0,49,39,33,40],
[46,45,36,36,35,32,0,34,36,40],
[41,52,44,39,41,42,47,0,37,33],
[45,37,38,44,34,48,45,44,0,39],
[43,46,46,39,44,41,41,48,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,31,40,37,41,21,31,30,34],
[47,0,33,45,40,38,41,43,44,53],
[50,48,0,43,32,41,25,37,36,45],
[41,36,38,0,42,42,33,38,38,47],
[44,41,49,39,0,52,32,39,37,45],
[40,43,40,39,29,0,26,50,52,46],
[60,40,56,48,49,55,0,61,52,51],
[50,38,44,43,42,31,20,0,34,44],
[51,37,45,43,44,29,29,47,0,47],
[47,28,36,34,36,35,30,37,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,44,40,36,55,37,44,43,46],
[39,0,33,36,34,51,39,43,39,43],
[37,48,0,46,43,52,47,49,39,51],
[41,45,35,0,46,48,40,41,43,51],
[45,47,38,35,0,50,41,45,42,45],
[26,30,29,33,31,0,35,33,36,36],
[44,42,34,41,40,46,0,44,44,44],
[37,38,32,40,36,48,37,0,39,46],
[38,42,42,38,39,45,37,42,0,37],
[35,38,30,30,36,45,37,35,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,40,41,30,39,54,35,31,45],
[46,0,46,42,40,44,60,42,44,53],
[41,35,0,45,41,50,61,36,40,48],
[40,39,36,0,36,43,52,42,39,47],
[51,41,40,45,0,46,59,42,50,48],
[42,37,31,38,35,0,48,39,37,50],
[27,21,20,29,22,33,0,23,23,32],
[46,39,45,39,39,42,58,0,40,52],
[50,37,41,42,31,44,58,41,0,47],
[36,28,33,34,33,31,49,29,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,43,48,44,34,31,36,37,47],
[49,0,50,43,54,45,37,47,41,50],
[38,31,0,32,29,46,38,38,29,38],
[33,38,49,0,49,41,45,48,46,45],
[37,27,52,32,0,31,26,43,43,40],
[47,36,35,40,50,0,40,47,37,38],
[50,44,43,36,55,41,0,48,60,50],
[45,34,43,33,38,34,33,0,36,26],
[44,40,52,35,38,44,21,45,0,35],
[34,31,43,36,41,43,31,55,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,33,40,41,32,43,42,40,34],
[44,0,35,44,63,31,47,47,35,40],
[48,46,0,58,44,48,39,51,44,46],
[41,37,23,0,44,35,46,43,37,43],
[40,18,37,37,0,37,39,45,30,45],
[49,50,33,46,44,0,57,58,53,61],
[38,34,42,35,42,24,0,42,35,41],
[39,34,30,38,36,23,39,0,29,50],
[41,46,37,44,51,28,46,52,0,47],
[47,41,35,38,36,20,40,31,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,43,38,40,37,34,43,39,39],
[38,0,37,42,33,30,43,38,35,32],
[38,44,0,48,35,39,34,41,35,40],
[43,39,33,0,38,32,40,39,43,39],
[41,48,46,43,0,43,40,43,33,34],
[44,51,42,49,38,0,40,39,44,39],
[47,38,47,41,41,41,0,37,38,46],
[38,43,40,42,38,42,44,0,34,43],
[42,46,46,38,48,37,43,47,0,42],
[42,49,41,42,47,42,35,38,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,77,49,47,49,53,62,36,53],
[4,0,75,34,17,47,47,62,40,17],
[4,6,0,10,19,40,53,32,10,10],
[32,47,71,0,41,71,47,32,64,45],
[34,64,62,40,0,40,53,62,40,40],
[32,34,41,10,41,0,53,32,6,10],
[28,34,28,34,28,28,0,28,34,34],
[19,19,49,49,19,49,53,0,36,23],
[45,41,71,17,41,75,47,45,0,17],
[28,64,71,36,41,71,47,58,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,46,59,47,41,14,41,47,29],
[51,0,38,64,75,51,43,42,51,42],
[35,43,0,57,57,55,33,32,56,21],
[22,17,24,0,48,34,14,20,44,22],
[34,6,24,33,0,42,24,37,33,41],
[40,30,26,47,39,0,37,43,47,26],
[67,38,48,67,57,44,0,49,65,47],
[40,39,49,61,44,38,32,0,65,21],
[34,30,25,37,48,34,16,16,0,22],
[52,39,60,59,40,55,34,60,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,40,43,33,39,47,36,35],
[42,0,32,32,42,32,37,38,32,35],
[42,49,0,37,41,41,38,43,36,41],
[41,49,44,0,42,45,43,50,39,39],
[38,39,40,39,0,37,38,43,38,35],
[48,49,40,36,44,0,43,45,33,41],
[42,44,43,38,43,38,0,43,45,41],
[34,43,38,31,38,36,38,0,35,33],
[45,49,45,42,43,48,36,46,0,38],
[46,46,40,42,46,40,40,48,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,40,33,54,32,46,27,45,37],
[27,0,39,35,31,26,51,27,24,36],
[41,42,0,42,33,26,42,29,33,44],
[48,46,39,0,44,33,43,28,39,40],
[27,50,48,37,0,35,47,16,29,34],
[49,55,55,48,46,0,57,42,44,39],
[35,30,39,38,34,24,0,26,27,24],
[54,54,52,53,65,39,55,0,49,53],
[36,57,48,42,52,37,54,32,0,39],
[44,45,37,41,47,42,57,28,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,40,37,37,45,40,40,46,37],
[44,0,45,38,43,48,42,40,44,36],
[41,36,0,42,43,46,41,33,41,35],
[44,43,39,0,43,43,44,39,43,39],
[44,38,38,38,0,46,37,40,38,37],
[36,33,35,38,35,0,31,33,39,35],
[41,39,40,37,44,50,0,36,45,44],
[41,41,48,42,41,48,45,0,52,39],
[35,37,40,38,43,42,36,29,0,32],
[44,45,46,42,44,46,37,42,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,43,41,42,39,35,36,41,37],
[38,0,39,40,42,36,32,36,39,40],
[38,42,0,40,44,44,33,38,43,39],
[40,41,41,0,42,45,41,44,41,46],
[39,39,37,39,0,39,30,40,48,37],
[42,45,37,36,42,0,32,37,47,41],
[46,49,48,40,51,49,0,45,47,47],
[45,45,43,37,41,44,36,0,44,41],
[40,42,38,40,33,34,34,37,0,37],
[44,41,42,35,44,40,34,40,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,39,42,34,40,30,38,47,39],
[31,0,26,32,36,33,30,30,33,31],
[42,55,0,48,49,52,36,48,52,42],
[39,49,33,0,37,41,38,42,27,30],
[47,45,32,44,0,50,33,40,41,35],
[41,48,29,40,31,0,32,42,34,33],
[51,51,45,43,48,49,0,48,53,33],
[43,51,33,39,41,39,33,0,34,33],
[34,48,29,54,40,47,28,47,0,28],
[42,50,39,51,46,48,48,48,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,40,44,50,49,42,54,53,46],
[34,0,41,37,41,42,29,46,41,34],
[41,40,0,37,44,40,30,50,42,37],
[37,44,44,0,46,40,34,47,44,38],
[31,40,37,35,0,35,33,40,40,33],
[32,39,41,41,46,0,39,46,44,38],
[39,52,51,47,48,42,0,55,50,42],
[27,35,31,34,41,35,26,0,37,38],
[28,40,39,37,41,37,31,44,0,35],
[35,47,44,43,48,43,39,43,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,36,24,18,26,36,42,69,42],
[31,0,48,30,49,13,48,54,67,48],
[45,33,0,51,63,45,63,51,51,69],
[57,51,30,0,49,21,49,55,63,60],
[63,32,18,32,0,21,44,42,51,24],
[55,68,36,60,60,0,72,60,69,60],
[45,33,18,32,37,9,0,43,69,42],
[39,27,30,26,39,21,38,0,63,36],
[12,14,30,18,30,12,12,18,0,42],
[39,33,12,21,57,21,39,45,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,37,29,39,39,41,25,46,32],
[37,0,37,39,41,41,27,30,42,30],
[44,44,0,41,46,35,47,36,42,37],
[52,42,40,0,55,38,44,36,44,46],
[42,40,35,26,0,40,33,39,50,31],
[42,40,46,43,41,0,41,41,46,35],
[40,54,34,37,48,40,0,40,38,50],
[56,51,45,45,42,40,41,0,45,41],
[35,39,39,37,31,35,43,36,0,39],
[49,51,44,35,50,46,31,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,43,44,43,34,39,39,45,39],
[44,0,44,42,45,38,34,45,38,38],
[38,37,0,43,36,40,34,42,37,38],
[37,39,38,0,34,35,39,37,38,34],
[38,36,45,47,0,35,33,42,40,38],
[47,43,41,46,46,0,35,37,39,37],
[42,47,47,42,48,46,0,47,40,39],
[42,36,39,44,39,44,34,0,40,33],
[36,43,44,43,41,42,41,41,0,42],
[42,43,43,47,43,44,42,48,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,38,43,45,43,44,41,46,44],
[29,0,32,38,43,35,31,36,37,35],
[43,49,0,40,50,45,45,44,49,45],
[38,43,41,0,43,45,40,33,41,37],
[36,38,31,38,0,35,34,39,34,36],
[38,46,36,36,46,0,39,41,38,40],
[37,50,36,41,47,42,0,41,37,41],
[40,45,37,48,42,40,40,0,39,40],
[35,44,32,40,47,43,44,42,0,40],
[37,46,36,44,45,41,40,41,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,28,40,33,34,30,40,40,35],
[52,0,40,42,47,44,40,50,39,54],
[53,41,0,32,42,32,37,37,39,42],
[41,39,49,0,40,35,34,42,43,38],
[48,34,39,41,0,44,32,36,40,39],
[47,37,49,46,37,0,41,43,32,48],
[51,41,44,47,49,40,0,36,42,48],
[41,31,44,39,45,38,45,0,39,47],
[41,42,42,38,41,49,39,42,0,38],
[46,27,39,43,42,33,33,34,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,35,49,57,28,44,15,61],
[54,0,41,30,36,56,36,67,56,56],
[53,40,0,37,51,54,45,55,57,51],
[46,51,44,0,50,52,38,55,41,48],
[32,45,30,31,0,50,21,53,32,30],
[24,25,27,29,31,0,28,42,20,29],
[53,45,36,43,60,53,0,59,36,42],
[37,14,26,26,28,39,22,0,20,26],
[66,25,24,40,49,61,45,61,0,51],
[20,25,30,33,51,52,39,55,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,38,27,33,32,32,37,36,35],
[54,0,48,47,40,47,48,55,42,48],
[43,33,0,37,33,34,39,46,34,38],
[54,34,44,0,35,33,43,51,41,37],
[48,41,48,46,0,40,55,47,42,46],
[49,34,47,48,41,0,45,54,41,44],
[49,33,42,38,26,36,0,44,30,43],
[44,26,35,30,34,27,37,0,30,35],
[45,39,47,40,39,40,51,51,0,38],
[46,33,43,44,35,37,38,46,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,36,44,29,44,44,27,29,45],
[50,0,22,59,40,24,51,54,49,36],
[45,59,0,44,32,30,44,44,46,46],
[37,22,37,0,23,25,38,37,22,39],
[52,41,49,58,0,58,62,57,35,53],
[37,57,51,56,23,0,44,37,51,51],
[37,30,37,43,19,37,0,37,34,55],
[54,27,37,44,24,44,44,0,34,40],
[52,32,35,59,46,30,47,47,0,42],
[36,45,35,42,28,30,26,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,38,33,55,27,40,28,50,46],
[44,0,35,44,66,51,51,43,52,47],
[43,46,0,42,61,44,61,34,56,46],
[48,37,39,0,56,31,43,28,42,42],
[26,15,20,25,0,23,37,28,24,36],
[54,30,37,50,58,0,63,39,59,67],
[41,30,20,38,44,18,0,12,24,39],
[53,38,47,53,53,42,69,0,61,48],
[31,29,25,39,57,22,57,20,0,43],
[35,34,35,39,45,14,42,33,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,39,30,42,43,37,47,45,38],
[50,0,40,38,40,45,38,48,46,38],
[42,41,0,37,40,33,41,39,39,44],
[51,43,44,0,45,45,40,38,43,43],
[39,41,41,36,0,37,40,32,54,44],
[38,36,48,36,44,0,36,46,47,46],
[44,43,40,41,41,45,0,38,50,40],
[34,33,42,43,49,35,43,0,42,40],
[36,35,42,38,27,34,31,39,0,34],
[43,43,37,38,37,35,41,41,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,34,39,39,38,45,46,44,40],
[35,0,30,42,42,38,44,36,30,43],
[47,51,0,45,37,45,52,45,47,43],
[42,39,36,0,40,38,43,38,33,31],
[42,39,44,41,0,45,51,42,38,42],
[43,43,36,43,36,0,49,43,46,43],
[36,37,29,38,30,32,0,36,32,31],
[35,45,36,43,39,38,45,0,38,37],
[37,51,34,48,43,35,49,43,0,43],
[41,38,38,50,39,38,50,44,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,36,37,40,47,36,25,34,37],
[37,0,42,39,37,44,35,38,31,38],
[45,39,0,38,39,44,36,44,39,38],
[44,42,43,0,44,46,48,45,40,46],
[41,44,42,37,0,44,36,45,42,49],
[34,37,37,35,37,0,45,32,31,26],
[45,46,45,33,45,36,0,42,32,41],
[56,43,37,36,36,49,39,0,42,47],
[47,50,42,41,39,50,49,39,0,42],
[44,43,43,35,32,55,40,34,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,46,40,38,40,46,46,40,44],
[41,0,43,37,39,36,42,43,41,46],
[35,38,0,38,36,36,43,42,38,37],
[41,44,43,0,40,39,42,42,43,42],
[43,42,45,41,0,40,39,39,41,42],
[41,45,45,42,41,0,48,49,43,39],
[35,39,38,39,42,33,0,42,36,40],
[35,38,39,39,42,32,39,0,34,33],
[41,40,43,38,40,38,45,47,0,42],
[37,35,44,39,39,42,41,48,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,38,47,41,45,45,47,39,46],
[35,0,36,41,41,35,44,37,40,41],
[43,45,0,39,39,40,42,43,39,42],
[34,40,42,0,38,43,44,43,42,43],
[40,40,42,43,0,40,42,44,41,44],
[36,46,41,38,41,0,37,41,38,41],
[36,37,39,37,39,44,0,41,34,41],
[34,44,38,38,37,40,40,0,33,42],
[42,41,42,39,40,43,47,48,0,48],
[35,40,39,38,37,40,40,39,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,70,29,31,31,52,52,52,28],
[52,0,49,35,45,39,59,45,52,35],
[11,32,0,25,27,24,41,18,33,32],
[52,46,56,0,37,24,49,42,38,35],
[50,36,54,44,0,39,56,40,56,42],
[50,42,57,57,42,0,63,36,42,61],
[29,22,40,32,25,18,0,15,21,35],
[29,36,63,39,41,45,66,0,43,53],
[29,29,48,43,25,39,60,38,0,46],
[53,46,49,46,39,20,46,28,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,40,52,36,34,39,40,45,40],
[42,0,41,48,40,38,41,47,53,36],
[41,40,0,52,37,44,39,36,45,43],
[29,33,29,0,23,38,25,31,40,38],
[45,41,44,58,0,36,46,53,50,33],
[47,43,37,43,45,0,43,44,49,37],
[42,40,42,56,35,38,0,51,55,47],
[41,34,45,50,28,37,30,0,41,42],
[36,28,36,41,31,32,26,40,0,46],
[41,45,38,43,48,44,34,39,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,38,31,47,28,35,35,41,33],
[50,0,51,55,66,39,59,43,55,38],
[43,30,0,35,61,36,43,41,40,23],
[50,26,46,0,49,47,51,56,56,42],
[34,15,20,32,0,31,29,37,25,27],
[53,42,45,34,50,0,42,51,50,47],
[46,22,38,30,52,39,0,38,42,39],
[46,38,40,25,44,30,43,0,31,38],
[40,26,41,25,56,31,39,50,0,35],
[48,43,58,39,54,34,42,43,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,42,41,30,39,46,39,54,43],
[36,0,35,36,25,36,38,37,44,44],
[39,46,0,45,42,39,43,46,48,50],
[40,45,36,0,37,42,42,43,50,48],
[51,56,39,44,0,46,47,47,53,48],
[42,45,42,39,35,0,45,43,53,48],
[35,43,38,39,34,36,0,38,48,41],
[42,44,35,38,34,38,43,0,48,47],
[27,37,33,31,28,28,33,33,0,40],
[38,37,31,33,33,33,40,34,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,48,35,43,38,47,38,42,51],
[48,0,42,43,31,40,35,43,45,49],
[33,39,0,39,45,37,33,45,43,42],
[46,38,42,0,33,30,36,34,50,46],
[38,50,36,48,0,40,25,41,36,48],
[43,41,44,51,41,0,36,45,40,48],
[34,46,48,45,56,45,0,47,47,51],
[43,38,36,47,40,36,34,0,37,41],
[39,36,38,31,45,41,34,44,0,45],
[30,32,39,35,33,33,30,40,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,58,53,54,57,36,59,45,63],
[30,0,28,51,31,62,43,55,45,43],
[23,53,0,50,37,55,51,44,29,44],
[28,30,31,0,36,59,32,31,35,32],
[27,50,44,45,0,52,46,60,31,40],
[24,19,26,22,29,0,29,35,34,33],
[45,38,30,49,35,52,0,52,36,39],
[22,26,37,50,21,46,29,0,41,42],
[36,36,52,46,50,47,45,40,0,50],
[18,38,37,49,41,48,42,39,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,37,39,21,30,20,28,37,39],
[25,0,27,29,11,29,18,16,29,29],
[44,54,0,61,41,48,48,26,48,69],
[42,52,20,0,19,36,36,34,24,48],
[60,70,40,62,0,50,38,48,40,52],
[51,52,33,45,31,0,36,22,37,59],
[61,63,33,45,43,45,0,45,47,49],
[53,65,55,47,33,59,36,0,59,61],
[44,52,33,57,41,44,34,22,0,63],
[42,52,12,33,29,22,32,20,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,35,41,31,43,36,37,31,32],
[40,0,32,27,24,40,28,33,26,39],
[46,49,0,53,36,48,45,39,35,38],
[40,54,28,0,20,42,33,31,22,23],
[50,57,45,61,0,54,50,38,41,44],
[38,41,33,39,27,0,33,34,26,36],
[45,53,36,48,31,48,0,42,27,36],
[44,48,42,50,43,47,39,0,40,37],
[50,55,46,59,40,55,54,41,0,47],
[49,42,43,58,37,45,45,44,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,42,49,40,45,44,38,43,41],
[40,0,41,48,50,44,43,39,43,36],
[39,40,0,44,41,45,37,37,47,36],
[32,33,37,0,33,42,34,32,33,33],
[41,31,40,48,0,39,36,39,46,31],
[36,37,36,39,42,0,38,37,43,38],
[37,38,44,47,45,43,0,32,38,40],
[43,42,44,49,42,44,49,0,49,37],
[38,38,34,48,35,38,43,32,0,34],
[40,45,45,48,50,43,41,44,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,37,50,47,45,49,21,63,42],
[52,0,39,50,42,44,65,39,51,58],
[44,42,0,44,25,49,56,29,40,33],
[31,31,37,0,51,62,52,33,65,33],
[34,39,56,30,0,46,42,19,51,48],
[36,37,32,19,35,0,44,8,44,37],
[32,16,25,29,39,37,0,29,57,14],
[60,42,52,48,62,73,52,0,65,33],
[18,30,41,16,30,37,24,16,0,30],
[39,23,48,48,33,44,67,48,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,38,40,46,36,31,32,36,37],
[55,0,44,45,47,48,47,49,37,36],
[43,37,0,41,39,36,39,43,47,39],
[41,36,40,0,42,43,37,42,36,42],
[35,34,42,39,0,28,39,33,36,31],
[45,33,45,38,53,0,40,43,39,45],
[50,34,42,44,42,41,0,35,46,36],
[49,32,38,39,48,38,46,0,34,36],
[45,44,34,45,45,42,35,47,0,46],
[44,45,42,39,50,36,45,45,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,25,38,52,49,59,58,58,58],
[36,0,32,18,27,49,52,40,21,49],
[56,49,0,44,27,69,59,63,40,72],
[43,63,37,0,47,56,59,50,23,59],
[29,54,54,34,0,61,64,54,54,50],
[32,32,12,25,20,0,42,54,45,50],
[22,29,22,22,17,39,0,47,25,39],
[23,41,18,31,27,27,34,0,54,49],
[23,60,41,58,27,36,56,27,0,36],
[23,32,9,22,31,31,42,32,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,30,31,38,35,34,43,35],
[42,0,43,36,36,32,33,41,38,38],
[42,38,0,43,42,39,43,40,46,36],
[51,45,38,0,26,43,28,26,40,38],
[50,45,39,55,0,37,43,49,49,37],
[43,49,42,38,44,0,33,41,45,43],
[46,48,38,53,38,48,0,54,48,34],
[47,40,41,55,32,40,27,0,43,32],
[38,43,35,41,32,36,33,38,0,31],
[46,43,45,43,44,38,47,49,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,25,26,33,33,31,31,33,32],
[39,0,35,36,38,33,39,38,35,33],
[56,46,0,38,51,42,49,49,47,44],
[55,45,43,0,45,44,50,53,46,38],
[48,43,30,36,0,41,47,44,44,38],
[48,48,39,37,40,0,44,50,38,35],
[50,42,32,31,34,37,0,40,43,32],
[50,43,32,28,37,31,41,0,40,36],
[48,46,34,35,37,43,38,41,0,33],
[49,48,37,43,43,46,49,45,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,45,39,35,35,38,41,44,39],
[48,0,40,41,34,28,44,39,44,39],
[36,41,0,36,38,31,38,35,49,34],
[42,40,45,0,42,37,41,38,44,36],
[46,47,43,39,0,41,39,36,46,41],
[46,53,50,44,40,0,39,44,59,40],
[43,37,43,40,42,42,0,37,47,42],
[40,42,46,43,45,37,44,0,46,37],
[37,37,32,37,35,22,34,35,0,27],
[42,42,47,45,40,41,39,44,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,45,41,43,45,45,41,43,33],
[44,0,40,42,53,46,46,35,45,45],
[36,41,0,33,58,45,51,40,47,34],
[40,39,48,0,53,49,55,42,49,44],
[38,28,23,28,0,41,36,31,41,31],
[36,35,36,32,40,0,44,31,39,31],
[36,35,30,26,45,37,0,33,36,28],
[40,46,41,39,50,50,48,0,50,46],
[38,36,34,32,40,42,45,31,0,39],
[48,36,47,37,50,50,53,35,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,52,37,44,27,30,40,43,33],
[50,0,53,35,51,44,40,36,45,47],
[29,28,0,34,37,23,36,27,38,35],
[44,46,47,0,51,35,45,40,38,42],
[37,30,44,30,0,26,28,33,36,35],
[54,37,58,46,55,0,44,45,48,42],
[51,41,45,36,53,37,0,47,52,47],
[41,45,54,41,48,36,34,0,48,43],
[38,36,43,43,45,33,29,33,0,41],
[48,34,46,39,46,39,34,38,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,63,31,27,48,41,53,47,40],
[36,0,34,33,31,24,42,42,41,40],
[18,47,0,22,35,20,20,47,28,26],
[50,48,59,0,24,45,46,51,58,48],
[54,50,46,57,0,36,47,40,35,48],
[33,57,61,36,45,0,42,64,40,43],
[40,39,61,35,34,39,0,52,22,48],
[28,39,34,30,41,17,29,0,24,46],
[34,40,53,23,46,41,59,57,0,41],
[41,41,55,33,33,38,33,35,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,48,42,57,38,57,42,53,48],
[32,0,42,40,37,42,44,44,49,45],
[33,39,0,28,37,39,40,28,42,40],
[39,41,53,0,41,32,34,38,57,44],
[24,44,44,40,0,37,39,37,43,42],
[43,39,42,49,44,0,44,40,54,39],
[24,37,41,47,42,37,0,37,46,38],
[39,37,53,43,44,41,44,0,51,42],
[28,32,39,24,38,27,35,30,0,34],
[33,36,41,37,39,42,43,39,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,40,39,38,45,42,38,37,41],
[33,0,34,37,35,35,34,34,25,38],
[41,47,0,42,47,49,38,38,43,51],
[42,44,39,0,43,43,40,37,39,42],
[43,46,34,38,0,41,33,39,36,40],
[36,46,32,38,40,0,35,37,29,39],
[39,47,43,41,48,46,0,35,37,42],
[43,47,43,44,42,44,46,0,37,48],
[44,56,38,42,45,52,44,44,0,46],
[40,43,30,39,41,42,39,33,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,42,42,44,36,48,49,52,36],
[46,0,51,48,47,43,40,44,54,47],
[39,30,0,44,31,30,41,40,45,38],
[39,33,37,0,49,37,38,46,56,47],
[37,34,50,32,0,26,36,36,49,33],
[45,38,51,44,55,0,51,52,54,55],
[33,41,40,43,45,30,0,53,51,34],
[32,37,41,35,45,29,28,0,42,37],
[29,27,36,25,32,27,30,39,0,28],
[45,34,43,34,48,26,47,44,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,40,48,53,32,39,44,27,43],
[36,0,45,53,49,33,42,47,35,58],
[41,36,0,48,39,30,31,49,35,53],
[33,28,33,0,36,29,23,52,16,33],
[28,32,42,45,0,40,37,38,32,41],
[49,48,51,52,41,0,43,48,38,45],
[42,39,50,58,44,38,0,57,50,51],
[37,34,32,29,43,33,24,0,25,41],
[54,46,46,65,49,43,31,56,0,47],
[38,23,28,48,40,36,30,40,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,41,38,37,54,64,38,38,44],
[25,0,39,29,18,30,46,31,33,18],
[40,42,0,38,39,36,61,45,49,57],
[43,52,43,0,51,39,53,54,42,45],
[44,63,42,30,0,43,50,62,50,56],
[27,51,45,42,38,0,58,42,42,45],
[17,35,20,28,31,23,0,36,34,17],
[43,50,36,27,19,39,45,0,36,44],
[43,48,32,39,31,39,47,45,0,35],
[37,63,24,36,25,36,64,37,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,48,43,43,40,49,44,42,40],
[43,0,57,45,39,45,43,47,41,44],
[33,24,0,26,26,30,30,35,39,31],
[38,36,55,0,41,37,46,39,43,40],
[38,42,55,40,0,45,49,44,47,42],
[41,36,51,44,36,0,45,46,43,35],
[32,38,51,35,32,36,0,29,39,31],
[37,34,46,42,37,35,52,0,42,31],
[39,40,42,38,34,38,42,39,0,32],
[41,37,50,41,39,46,50,50,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,48,39,38,32,48,34,21,49],
[55,0,47,33,32,45,58,45,41,46],
[33,34,0,36,54,36,36,44,32,43],
[42,48,45,0,50,52,52,54,43,39],
[43,49,27,31,0,46,50,44,43,42],
[49,36,45,29,35,0,51,44,33,39],
[33,23,45,29,31,30,0,39,36,45],
[47,36,37,27,37,37,42,0,45,42],
[60,40,49,38,38,48,45,36,0,45],
[32,35,38,42,39,42,36,39,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,37,32,37,35,37,46,32,42],
[46,0,36,40,38,40,44,48,42,43],
[44,45,0,40,42,42,37,55,41,49],
[49,41,41,0,38,41,45,53,44,52],
[44,43,39,43,0,42,36,50,43,46],
[46,41,39,40,39,0,35,47,44,45],
[44,37,44,36,45,46,0,43,42,45],
[35,33,26,28,31,34,38,0,38,34],
[49,39,40,37,38,37,39,43,0,45],
[39,38,32,29,35,36,36,47,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,43,40,55,45,45,45,42,46],
[35,0,42,41,44,45,35,49,31,46],
[38,39,0,33,57,45,39,45,40,46],
[41,40,48,0,53,42,38,42,41,46],
[26,37,24,28,0,32,26,33,31,44],
[36,36,36,39,49,0,33,36,33,43],
[36,46,42,43,55,48,0,44,45,56],
[36,32,36,39,48,45,37,0,37,44],
[39,50,41,40,50,48,36,44,0,52],
[35,35,35,35,37,38,25,37,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,42,48,44,47,55,48,47,37],
[31,0,40,41,34,40,37,40,42,31],
[39,41,0,48,55,44,49,53,41,32],
[33,40,33,0,26,50,32,25,53,24],
[37,47,26,55,0,50,36,39,46,30],
[34,41,37,31,31,0,37,33,51,28],
[26,44,32,49,45,44,0,52,42,42],
[33,41,28,56,42,48,29,0,44,23],
[34,39,40,28,35,30,39,37,0,31],
[44,50,49,57,51,53,39,58,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,43,53,32,37,27,52,25,33],
[24,0,34,21,39,20,27,42,27,16],
[38,47,0,24,32,24,23,42,35,24],
[28,60,57,0,52,27,23,40,38,11],
[49,42,49,29,0,14,20,53,22,33],
[44,61,57,54,67,0,24,57,39,54],
[54,54,58,58,61,57,0,58,32,55],
[29,39,39,41,28,24,23,0,35,28],
[56,54,46,43,59,42,49,46,0,36],
[48,65,57,70,48,27,26,53,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,39,37,39,38,64,55,34,18],
[30,0,43,37,17,41,64,48,39,13],
[42,38,0,20,26,20,55,60,43,22],
[44,44,61,0,48,42,73,44,27,40],
[42,64,55,33,0,24,77,64,38,42],
[43,40,61,39,57,0,57,44,40,22],
[17,17,26,8,4,24,0,35,26,13],
[26,33,21,37,17,37,46,0,31,22],
[47,42,38,54,43,41,55,50,0,22],
[63,68,59,41,39,59,68,59,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,37,31,41,25,33,27,32,29],
[39,0,34,27,39,35,26,38,37,36],
[44,47,0,38,48,36,38,40,34,50],
[50,54,43,0,52,36,42,45,51,55],
[40,42,33,29,0,34,27,32,36,33],
[56,46,45,45,47,0,39,39,42,42],
[48,55,43,39,54,42,0,44,41,47],
[54,43,41,36,49,42,37,0,39,42],
[49,44,47,30,45,39,40,42,0,46],
[52,45,31,26,48,39,34,39,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,32,26,41,38,32,31,33,33],
[48,0,42,39,43,47,42,32,42,42],
[49,39,0,41,46,45,43,36,36,42],
[55,42,40,0,49,49,47,35,38,44],
[40,38,35,32,0,42,44,32,38,31],
[43,34,36,32,39,0,40,36,39,38],
[49,39,38,34,37,41,0,38,39,40],
[50,49,45,46,49,45,43,0,36,41],
[48,39,45,43,43,42,42,45,0,39],
[48,39,39,37,50,43,41,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,40,45,50,52,46,45,50,47],
[37,0,34,40,44,43,39,46,42,42],
[41,47,0,44,47,52,45,54,38,48],
[36,41,37,0,42,45,40,45,42,43],
[31,37,34,39,0,42,43,45,40,47],
[29,38,29,36,39,0,40,41,35,37],
[35,42,36,41,38,41,0,46,40,50],
[36,35,27,36,36,40,35,0,37,34],
[31,39,43,39,41,46,41,44,0,36],
[34,39,33,38,34,44,31,47,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,44,44,38,46,42,45,42],
[40,0,39,43,42,36,39,41,47,42],
[40,42,0,47,44,42,41,46,40,43],
[37,38,34,0,38,41,36,40,42,37],
[37,39,37,43,0,38,36,47,42,41],
[43,45,39,40,43,0,37,49,45,47],
[35,42,40,45,45,44,0,48,44,42],
[39,40,35,41,34,32,33,0,44,32],
[36,34,41,39,39,36,37,37,0,37],
[39,39,38,44,40,34,39,49,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,54,42,50,45,46,40,41,42],
[45,0,50,45,47,51,39,44,38,38],
[27,31,0,34,42,39,39,29,32,24],
[39,36,47,0,38,42,38,35,35,32],
[31,34,39,43,0,33,27,31,35,31],
[36,30,42,39,48,0,38,29,34,34],
[35,42,42,43,54,43,0,44,40,37],
[41,37,52,46,50,52,37,0,39,34],
[40,43,49,46,46,47,41,42,0,40],
[39,43,57,49,50,47,44,47,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,46,39,39,43,42,39,39,39],
[39,0,46,42,42,44,44,40,39,39],
[35,35,0,36,34,38,37,35,30,35],
[42,39,45,0,44,39,41,41,38,41],
[42,39,47,37,0,42,39,42,43,43],
[38,37,43,42,39,0,42,42,40,40],
[39,37,44,40,42,39,0,39,39,42],
[42,41,46,40,39,39,42,0,42,42],
[42,42,51,43,38,41,42,39,0,45],
[42,42,46,40,38,41,39,39,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,46,45,40,36,45,50,42,42],
[38,0,45,47,39,38,43,44,43,37],
[35,36,0,44,39,36,45,45,47,38],
[36,34,37,0,38,40,35,40,34,38],
[41,42,42,43,0,37,42,44,44,39],
[45,43,45,41,44,0,41,47,49,39],
[36,38,36,46,39,40,0,43,42,39],
[31,37,36,41,37,34,38,0,38,44],
[39,38,34,47,37,32,39,43,0,33],
[39,44,43,43,42,42,42,37,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,34,50,21,36,40,22,38,45],
[46,0,42,36,42,43,27,38,52,28],
[47,39,0,37,31,37,46,40,35,47],
[31,45,44,0,26,44,19,44,49,42],
[60,39,50,55,0,54,47,29,43,51],
[45,38,44,37,27,0,30,26,48,34],
[41,54,35,62,34,51,0,44,48,55],
[59,43,41,37,52,55,37,0,41,41],
[43,29,46,32,38,33,33,40,0,34],
[36,53,34,39,30,47,26,40,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,35,44,42,45,46,56,42,41],
[51,0,51,38,47,31,46,42,51,22],
[46,30,0,43,46,42,45,49,36,31],
[37,43,38,0,56,48,50,40,46,44],
[39,34,35,25,0,19,35,31,27,15],
[36,50,39,33,62,0,31,38,31,35],
[35,35,36,31,46,50,0,31,29,37],
[25,39,32,41,50,43,50,0,37,37],
[39,30,45,35,54,50,52,44,0,33],
[40,59,50,37,66,46,44,44,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,37,42,47,39,38,40,38,39],
[44,0,43,40,46,41,40,33,43,41],
[44,38,0,40,43,40,41,32,39,40],
[39,41,41,0,47,39,39,44,40,42],
[34,35,38,34,0,34,37,38,35,33],
[42,40,41,42,47,0,39,39,43,43],
[43,41,40,42,44,42,0,36,38,44],
[41,48,49,37,43,42,45,0,41,49],
[43,38,42,41,46,38,43,40,0,43],
[42,40,41,39,48,38,37,32,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,50,52,51,38,37,43,40,43],
[41,0,38,43,36,35,35,39,38,39],
[31,43,0,42,45,36,37,33,37,41],
[29,38,39,0,40,34,33,35,30,34],
[30,45,36,41,0,32,34,29,38,32],
[43,46,45,47,49,0,39,41,44,43],
[44,46,44,48,47,42,0,39,44,42],
[38,42,48,46,52,40,42,0,35,46],
[41,43,44,51,43,37,37,46,0,42],
[38,42,40,47,49,38,39,35,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,36,38,34,37,37,37,48,24],
[45,0,38,46,43,50,43,34,54,48],
[45,43,0,61,35,59,45,32,57,35],
[43,35,20,0,36,47,34,29,37,26],
[47,38,46,45,0,53,42,35,50,33],
[44,31,22,34,28,0,24,29,40,18],
[44,38,36,47,39,57,0,30,45,36],
[44,47,49,52,46,52,51,0,45,37],
[33,27,24,44,31,41,36,36,0,37],
[57,33,46,55,48,63,45,44,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,50,42,46,45,53,54,44,34],
[38,0,36,36,34,37,48,44,36,32],
[31,45,0,38,44,36,50,48,37,36],
[39,45,43,0,40,43,55,52,37,41],
[35,47,37,41,0,38,45,46,38,37],
[36,44,45,38,43,0,52,47,39,36],
[28,33,31,26,36,29,0,35,33,30],
[27,37,33,29,35,34,46,0,31,33],
[37,45,44,44,43,42,48,50,0,40],
[47,49,45,40,44,45,51,48,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,44,39,41,47,45,45,46,42],
[33,0,33,41,35,44,38,40,35,39],
[37,48,0,43,37,46,39,40,40,45],
[42,40,38,0,37,44,42,38,41,38],
[40,46,44,44,0,47,44,48,42,45],
[34,37,35,37,34,0,36,39,41,36],
[36,43,42,39,37,45,0,42,39,37],
[36,41,41,43,33,42,39,0,37,41],
[35,46,41,40,39,40,42,44,0,39],
[39,42,36,43,36,45,44,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,38,37,37,33,45,33,37,34],
[45,0,40,38,43,42,51,43,45,36],
[43,41,0,46,43,46,48,45,39,41],
[44,43,35,0,43,40,47,42,41,36],
[44,38,38,38,0,44,49,41,41,34],
[48,39,35,41,37,0,50,31,44,34],
[36,30,33,34,32,31,0,35,36,34],
[48,38,36,39,40,50,46,0,41,39],
[44,36,42,40,40,37,45,40,0,37],
[47,45,40,45,47,47,47,42,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,43,40,34,28,26,40,39,27],
[45,0,51,43,34,46,40,41,32,33],
[38,30,0,31,34,34,33,37,36,28],
[41,38,50,0,49,32,28,46,35,40],
[47,47,47,32,0,36,35,42,37,35],
[53,35,47,49,45,0,32,44,33,42],
[55,41,48,53,46,49,0,49,36,45],
[41,40,44,35,39,37,32,0,31,34],
[42,49,45,46,44,48,45,50,0,31],
[54,48,53,41,46,39,36,47,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,49,46,38,46,55,50,49,49],
[26,0,51,38,45,44,41,40,38,42],
[32,30,0,36,45,36,48,45,35,45],
[35,43,45,0,46,47,39,38,44,39],
[43,36,36,35,0,34,39,36,44,39],
[35,37,45,34,47,0,46,40,46,32],
[26,40,33,42,42,35,0,44,36,32],
[31,41,36,43,45,41,37,0,41,34],
[32,43,46,37,37,35,45,40,0,37],
[32,39,36,42,42,49,49,47,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,42,34,40,39,39,40,42,52],
[51,0,49,32,41,42,44,37,52,38],
[39,32,0,30,36,42,31,33,37,36],
[47,49,51,0,45,51,52,39,50,44],
[41,40,45,36,0,52,36,32,47,35],
[42,39,39,30,29,0,40,29,38,44],
[42,37,50,29,45,41,0,44,45,43],
[41,44,48,42,49,52,37,0,42,37],
[39,29,44,31,34,43,36,39,0,38],
[29,43,45,37,46,37,38,44,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,41,42,36,36,41,34,39,40],
[37,0,44,35,37,39,32,35,40,32],
[40,37,0,44,32,35,26,33,29,39],
[39,46,37,0,31,41,26,41,30,39],
[45,44,49,50,0,45,33,45,39,48],
[45,42,46,40,36,0,36,36,41,45],
[40,49,55,55,48,45,0,40,42,46],
[47,46,48,40,36,45,41,0,46,44],
[42,41,52,51,42,40,39,35,0,42],
[41,49,42,42,33,36,35,37,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,63,32,47,48,32,59,59,60],
[45,0,62,32,47,59,65,59,39,40],
[18,19,0,44,47,32,50,53,33,28],
[49,49,37,0,54,28,34,54,34,34],
[34,34,34,27,0,28,33,69,48,34],
[33,22,49,53,53,0,53,65,45,46],
[49,16,31,47,48,28,0,48,28,28],
[22,22,28,27,12,16,33,0,12,1],
[22,42,48,47,33,36,53,69,0,33],
[21,41,53,47,47,35,53,80,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,35,33,57,38,35,42,51,48],
[29,0,26,28,37,23,23,27,27,38],
[46,55,0,43,54,55,40,36,42,52],
[48,53,38,0,51,32,39,38,40,47],
[24,44,27,30,0,34,24,26,33,31],
[43,58,26,49,47,0,45,29,40,38],
[46,58,41,42,57,36,0,42,46,41],
[39,54,45,43,55,52,39,0,44,48],
[30,54,39,41,48,41,35,37,0,49],
[33,43,29,34,50,43,40,33,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,26,27,28,30,29,24,35,28],
[49,0,33,31,27,34,38,38,45,35],
[55,48,0,43,39,40,46,43,62,35],
[54,50,38,0,20,44,45,35,48,45],
[53,54,42,61,0,41,38,38,56,51],
[51,47,41,37,40,0,52,37,60,44],
[52,43,35,36,43,29,0,44,38,43],
[57,43,38,46,43,44,37,0,52,44],
[46,36,19,33,25,21,43,29,0,21],
[53,46,46,36,30,37,38,37,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,45,32,31,35,36,36,46,38],
[43,0,47,43,36,43,49,32,39,44],
[36,34,0,43,36,34,32,18,37,31],
[49,38,38,0,37,33,39,28,42,39],
[50,45,45,44,0,45,45,36,38,41],
[46,38,47,48,36,0,44,41,41,42],
[45,32,49,42,36,37,0,32,47,42],
[45,49,63,53,45,40,49,0,49,47],
[35,42,44,39,43,40,34,32,0,39],
[43,37,50,42,40,39,39,34,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,45,44,44,45,40,45,48,42],
[40,0,48,46,43,40,43,43,44,42],
[36,33,0,41,40,39,35,36,36,35],
[37,35,40,0,38,42,43,40,37,34],
[37,38,41,43,0,43,38,40,39,34],
[36,41,42,39,38,0,39,42,44,37],
[41,38,46,38,43,42,0,45,43,37],
[36,38,45,41,41,39,36,0,37,41],
[33,37,45,44,42,37,38,44,0,33],
[39,39,46,47,47,44,44,40,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,50,49,48,38,42,45,38,40],
[36,0,46,52,45,44,44,49,40,44],
[31,35,0,42,38,40,41,36,35,34],
[32,29,39,0,39,47,37,40,38,33],
[33,36,43,42,0,38,32,37,39,27],
[43,37,41,34,43,0,36,39,38,32],
[39,37,40,44,49,45,0,43,42,40],
[36,32,45,41,44,42,38,0,36,36],
[43,41,46,43,42,43,39,45,0,32],
[41,37,47,48,54,49,41,45,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,49,44,43,54,44,40,44,45],
[33,0,36,34,39,42,37,40,47,40],
[32,45,0,36,41,41,40,40,39,42],
[37,47,45,0,45,46,48,41,47,47],
[38,42,40,36,0,40,43,40,46,44],
[27,39,40,35,41,0,40,35,39,38],
[37,44,41,33,38,41,0,40,42,43],
[41,41,41,40,41,46,41,0,44,43],
[37,34,42,34,35,42,39,37,0,45],
[36,41,39,34,37,43,38,38,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,38,42,45,41,46,45,43,43],
[44,0,40,37,39,48,44,45,42,36],
[43,41,0,49,38,44,51,55,47,42],
[39,44,32,0,45,39,49,48,44,34],
[36,42,43,36,0,39,44,46,42,37],
[40,33,37,42,42,0,41,51,40,40],
[35,37,30,32,37,40,0,36,38,33],
[36,36,26,33,35,30,45,0,39,33],
[38,39,34,37,39,41,43,42,0,39],
[38,45,39,47,44,41,48,48,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,55,64,56,37,40,36,53,53],
[19,0,46,50,37,31,43,19,22,47],
[26,35,0,44,41,42,36,26,32,50],
[17,31,37,0,34,29,23,21,25,41],
[25,44,40,47,0,32,49,21,24,54],
[44,50,39,52,49,0,33,49,37,51],
[41,38,45,58,32,48,0,40,45,49],
[45,62,55,60,60,32,41,0,53,61],
[28,59,49,56,57,44,36,28,0,65],
[28,34,31,40,27,30,32,20,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,47,41,44,40,47,46,49,49],
[40,0,34,47,37,42,41,49,42,41],
[34,47,0,36,39,35,47,37,41,42],
[40,34,45,0,38,44,51,45,40,40],
[37,44,42,43,0,47,43,47,40,45],
[41,39,46,37,34,0,46,47,35,44],
[34,40,34,30,38,35,0,41,41,38],
[35,32,44,36,34,34,40,0,36,37],
[32,39,40,41,41,46,40,45,0,42],
[32,40,39,41,36,37,43,44,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,46,41,44,38,51,36,41,34],
[34,0,46,42,40,32,45,38,40,41],
[35,35,0,40,34,36,37,35,36,33],
[40,39,41,0,39,38,47,42,47,37],
[37,41,47,42,0,47,45,38,45,40],
[43,49,45,43,34,0,45,42,45,38],
[30,36,44,34,36,36,0,35,38,37],
[45,43,46,39,43,39,46,0,44,43],
[40,41,45,34,36,36,43,37,0,41],
[47,40,48,44,41,43,44,38,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,31,39,35,37,38,32,35,29],
[47,0,37,39,35,36,42,44,34,38],
[50,44,0,46,50,39,43,45,43,42],
[42,42,35,0,42,43,40,42,45,38],
[46,46,31,39,0,36,35,35,31,33],
[44,45,42,38,45,0,43,41,38,40],
[43,39,38,41,46,38,0,40,39,34],
[49,37,36,39,46,40,41,0,34,41],
[46,47,38,36,50,43,42,47,0,42],
[52,43,39,43,48,41,47,40,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,47,48,44,35,41,45,48,44],
[33,0,43,35,32,28,30,38,35,34],
[34,38,0,46,34,35,35,42,44,42],
[33,46,35,0,33,30,34,40,40,38],
[37,49,47,48,0,38,44,43,38,43],
[46,53,46,51,43,0,43,40,47,48],
[40,51,46,47,37,38,0,44,45,47],
[36,43,39,41,38,41,37,0,45,43],
[33,46,37,41,43,34,36,36,0,38],
[37,47,39,43,38,33,34,38,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,43,33,38,39,40,51,37,38],
[30,0,36,38,24,31,44,42,39,31],
[38,45,0,29,44,39,47,36,36,37],
[48,43,52,0,42,45,54,47,36,47],
[43,57,37,39,0,40,52,49,40,31],
[42,50,42,36,41,0,42,45,43,34],
[41,37,34,27,29,39,0,41,36,25],
[30,39,45,34,32,36,40,0,38,22],
[44,42,45,45,41,38,45,43,0,36],
[43,50,44,34,50,47,56,59,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,49,40,47,46,46,52,38,41],
[29,0,29,22,33,27,24,47,28,23],
[32,52,0,40,38,39,39,50,36,37],
[41,59,41,0,36,29,25,45,40,26],
[34,48,43,45,0,46,28,41,35,37],
[35,54,42,52,35,0,44,54,37,29],
[35,57,42,56,53,37,0,47,35,37],
[29,34,31,36,40,27,34,0,24,19],
[43,53,45,41,46,44,46,57,0,37],
[40,58,44,55,44,52,44,62,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,43,43,54,42,47,54,40,40],
[32,0,41,38,51,34,36,41,41,40],
[38,40,0,26,42,34,39,35,30,31],
[38,43,55,0,51,37,37,50,45,36],
[27,30,39,30,0,30,35,39,33,27],
[39,47,47,44,51,0,49,51,46,43],
[34,45,42,44,46,32,0,43,41,39],
[27,40,46,31,42,30,38,0,27,33],
[41,40,51,36,48,35,40,54,0,40],
[41,41,50,45,54,38,42,48,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,45,41,46,40,36,34,35,38],
[46,0,40,34,43,42,49,36,45,43],
[36,41,0,34,41,36,43,38,41,40],
[40,47,47,0,44,48,38,42,47,45],
[35,38,40,37,0,29,39,35,47,39],
[41,39,45,33,52,0,34,41,49,45],
[45,32,38,43,42,47,0,31,34,39],
[47,45,43,39,46,40,50,0,44,53],
[46,36,40,34,34,32,47,37,0,50],
[43,38,41,36,42,36,42,28,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,31,41,41,42,38,32,44,44],
[51,0,31,53,43,44,38,29,50,50],
[50,50,0,53,37,42,36,35,58,52],
[40,28,28,0,35,43,19,19,41,41],
[40,38,44,46,0,53,35,29,43,61],
[39,37,39,38,28,0,37,44,37,55],
[43,43,45,62,46,44,0,39,46,62],
[49,52,46,62,52,37,42,0,54,63],
[37,31,23,40,38,44,35,27,0,46],
[37,31,29,40,20,26,19,18,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,30,43,30,11,53,30,30,72],
[51,0,39,43,35,35,42,44,30,62],
[51,42,0,61,35,53,42,53,54,51],
[38,38,20,0,11,38,62,38,39,62],
[51,46,46,70,0,27,51,70,28,70],
[70,46,28,43,54,0,70,63,39,70],
[28,39,39,19,30,11,0,39,30,57],
[51,37,28,43,11,18,42,0,19,70],
[51,51,27,42,53,42,51,62,0,51],
[9,19,30,19,11,11,24,11,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,49,41,47,38,42,47,51,38],
[32,0,32,21,24,26,37,50,30,27],
[32,49,0,22,20,19,30,40,36,23],
[40,60,59,0,52,46,45,45,44,45],
[34,57,61,29,0,45,35,40,42,46],
[43,55,62,35,36,0,49,51,43,44],
[39,44,51,36,46,32,0,39,38,46],
[34,31,41,36,41,30,42,0,38,37],
[30,51,45,37,39,38,43,43,0,34],
[43,54,58,36,35,37,35,44,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,63,51,44,51,71,58,45,70],
[43,0,42,35,70,35,60,45,61,42],
[18,39,0,44,45,41,60,29,45,42],
[30,46,37,0,35,10,64,53,37,46],
[37,11,36,46,0,27,71,50,36,52],
[30,46,40,71,54,0,68,50,61,56],
[10,21,21,17,10,13,0,20,17,32],
[23,36,52,28,31,31,61,0,29,61],
[36,20,36,44,45,20,64,52,0,45],
[11,39,39,35,29,25,49,20,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,20,18,13,22,4,30,14,20],
[59,0,43,53,34,39,43,43,53,32],
[61,38,0,52,17,22,28,47,34,23],
[63,28,29,0,15,5,37,17,5,23],
[68,47,64,66,0,38,56,52,56,25],
[59,42,59,76,43,0,62,59,38,49],
[77,38,53,44,25,19,0,30,15,30],
[51,38,34,64,29,22,51,0,53,23],
[67,28,47,76,25,43,66,28,0,35],
[61,49,58,58,56,32,51,58,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,34,27,28,37,27,28,30,37],
[46,0,31,37,34,46,28,27,37,30],
[47,50,0,38,34,53,32,38,42,45],
[54,44,43,0,37,45,34,38,39,33],
[53,47,47,44,0,53,21,34,38,29],
[44,35,28,36,28,0,24,31,25,23],
[54,53,49,47,60,57,0,36,43,34],
[53,54,43,43,47,50,45,0,40,47],
[51,44,39,42,43,56,38,41,0,40],
[44,51,36,48,52,58,47,34,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,35,43,38,54,48,42,42,49],
[42,0,41,41,31,36,41,50,33,40],
[46,40,0,47,42,41,42,49,51,52],
[38,40,34,0,39,41,43,39,40,43],
[43,50,39,42,0,44,44,45,38,40],
[27,45,40,40,37,0,52,47,36,43],
[33,40,39,38,37,29,0,39,43,42],
[39,31,32,42,36,34,42,0,41,44],
[39,48,30,41,43,45,38,40,0,49],
[32,41,29,38,41,38,39,37,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,43,44,37,46,44,38,39,43],
[35,0,41,37,37,41,38,38,36,36],
[38,40,0,39,39,38,44,40,38,36],
[37,44,42,0,36,49,42,41,37,40],
[44,44,42,45,0,40,46,43,45,43],
[35,40,43,32,41,0,37,35,37,41],
[37,43,37,39,35,44,0,47,39,38],
[43,43,41,40,38,46,34,0,45,39],
[42,45,43,44,36,44,42,36,0,39],
[38,45,45,41,38,40,43,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,43,41,43,42,45,47,39,44],
[38,0,39,38,43,50,44,43,41,42],
[38,42,0,46,51,50,48,50,40,44],
[40,43,35,0,36,47,43,38,39,37],
[38,38,30,45,0,45,39,42,39,43],
[39,31,31,34,36,0,40,39,40,33],
[36,37,33,38,42,41,0,41,40,39],
[34,38,31,43,39,42,40,0,35,38],
[42,40,41,42,42,41,41,46,0,39],
[37,39,37,44,38,48,42,43,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,33,27,26,35,22,36,44,39],
[43,0,46,40,43,53,36,48,47,38],
[48,35,0,39,32,35,34,41,39,37],
[54,41,42,0,36,50,43,53,62,53],
[55,38,49,45,0,52,39,58,50,40],
[46,28,46,31,29,0,35,47,45,42],
[59,45,47,38,42,46,0,64,48,48],
[45,33,40,28,23,34,17,0,34,36],
[37,34,42,19,31,36,33,47,0,25],
[42,43,44,28,41,39,33,45,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,55,38,44,44,45,41,44,55],
[39,0,35,39,24,32,42,39,33,40],
[26,46,0,34,46,45,47,37,43,40],
[43,42,47,0,35,40,49,46,47,41],
[37,57,35,46,0,36,46,37,36,47],
[37,49,36,41,45,0,43,37,44,39],
[36,39,34,32,35,38,0,39,34,31],
[40,42,44,35,44,44,42,0,36,37],
[37,48,38,34,45,37,47,45,0,41],
[26,41,41,40,34,42,50,44,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,43,36,43,36,39,44,48,54],
[37,0,39,26,38,33,34,42,33,37],
[38,42,0,36,42,45,37,39,37,45],
[45,55,45,0,40,45,50,57,43,48],
[38,43,39,41,0,45,46,45,49,52],
[45,48,36,36,36,0,45,45,39,43],
[42,47,44,31,35,36,0,46,45,45],
[37,39,42,24,36,36,35,0,39,43],
[33,48,44,38,32,42,36,42,0,44],
[27,44,36,33,29,38,36,38,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,38,33,37,24,39,34,29,26],
[45,0,43,41,39,33,46,29,38,29],
[43,38,0,49,42,32,49,37,47,46],
[48,40,32,0,31,30,34,35,43,33],
[44,42,39,50,0,39,43,48,39,33],
[57,48,49,51,42,0,44,37,41,46],
[42,35,32,47,38,37,0,31,43,36],
[47,52,44,46,33,44,50,0,47,46],
[52,43,34,38,42,40,38,34,0,41],
[55,52,35,48,48,35,45,35,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,49,40,50,50,45,39,41,48],
[26,0,31,33,37,42,34,29,30,34],
[32,50,0,43,49,47,50,34,52,33],
[41,48,38,0,38,47,52,32,41,44],
[31,44,32,43,0,47,38,42,36,31],
[31,39,34,34,34,0,29,34,41,28],
[36,47,31,29,43,52,0,25,48,46],
[42,52,47,49,39,47,56,0,47,45],
[40,51,29,40,45,40,33,34,0,37],
[33,47,48,37,50,53,35,36,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,36,49,37,36,35,27,40,42],
[38,0,35,48,37,34,40,34,39,41],
[45,46,0,40,43,46,47,44,40,43],
[32,33,41,0,31,33,32,34,34,38],
[44,44,38,50,0,38,43,43,41,42],
[45,47,35,48,43,0,43,40,36,41],
[46,41,34,49,38,38,0,37,37,39],
[54,47,37,47,38,41,44,0,41,41],
[41,42,41,47,40,45,44,40,0,38],
[39,40,38,43,39,40,42,40,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,38,42,36,39,46,33,44,40],
[50,0,49,48,41,44,48,43,44,35],
[43,32,0,40,33,29,39,42,45,39],
[39,33,41,0,30,37,41,38,46,30],
[45,40,48,51,0,38,52,46,55,40],
[42,37,52,44,43,0,49,43,48,35],
[35,33,42,40,29,32,0,42,43,25],
[48,38,39,43,35,38,39,0,44,42],
[37,37,36,35,26,33,38,37,0,30],
[41,46,42,51,41,46,56,39,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,39,45,40,46,42,34,46],
[42,0,42,44,51,50,44,45,35,50],
[42,39,0,42,45,46,39,49,41,49],
[42,37,39,0,48,38,38,44,37,47],
[36,30,36,33,0,39,37,39,25,42],
[41,31,35,43,42,0,43,44,35,45],
[35,37,42,43,44,38,0,46,38,45],
[39,36,32,37,42,37,35,0,30,42],
[47,46,40,44,56,46,43,51,0,47],
[35,31,32,34,39,36,36,39,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,80,78,56,57,43,57,24,61],
[35,0,76,74,56,57,56,34,42,52],
[1,5,0,36,1,22,26,1,1,23],
[3,7,45,0,24,24,28,2,25,6],
[25,25,80,57,0,46,28,19,25,24],
[24,24,59,57,35,0,24,18,20,40],
[38,25,55,53,53,57,0,36,38,57],
[24,47,80,79,62,63,45,0,46,58],
[57,39,80,56,56,61,43,35,0,39],
[20,29,58,75,57,41,24,23,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,38,39,41,43,44,40,42,44],
[41,0,40,41,45,42,45,44,36,43],
[43,41,0,38,48,40,39,43,40,41],
[42,40,43,0,46,40,40,47,43,43],
[40,36,33,35,0,40,30,28,33,31],
[38,39,41,41,41,0,39,44,46,41],
[37,36,42,41,51,42,0,38,35,40],
[41,37,38,34,53,37,43,0,33,39],
[39,45,41,38,48,35,46,48,0,41],
[37,38,40,38,50,40,41,42,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,40,34,39,35,37,31,38,33],
[42,0,38,36,39,32,37,27,34,36],
[41,43,0,35,32,40,41,34,40,37],
[47,45,46,0,43,38,47,35,32,44],
[42,42,49,38,0,42,40,35,34,43],
[46,49,41,43,39,0,44,42,43,45],
[44,44,40,34,41,37,0,33,40,44],
[50,54,47,46,46,39,48,0,45,44],
[43,47,41,49,47,38,41,36,0,47],
[48,45,44,37,38,36,37,37,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,53,43,53,45,53,36,47,48],
[30,0,37,25,37,27,39,22,33,34],
[28,44,0,40,40,46,46,41,47,39],
[38,56,41,0,49,35,53,36,46,44],
[28,44,41,32,0,32,42,35,36,37],
[36,54,35,46,49,0,52,43,46,42],
[28,42,35,28,39,29,0,34,36,29],
[45,59,40,45,46,38,47,0,52,40],
[34,48,34,35,45,35,45,29,0,36],
[33,47,42,37,44,39,52,41,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,20,28,38,31,37,36,34,26],
[45,0,26,48,53,40,39,50,29,42],
[61,55,0,53,61,47,48,59,40,57],
[53,33,28,0,63,37,45,45,31,28],
[43,28,20,18,0,33,18,21,40,38],
[50,41,34,44,48,0,42,42,43,47],
[44,42,33,36,63,39,0,53,35,40],
[45,31,22,36,60,39,28,0,37,40],
[47,52,41,50,41,38,46,44,0,42],
[55,39,24,53,43,34,41,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,48,35,50,44,33,44,42,46],
[36,0,35,29,40,42,24,36,34,39],
[33,46,0,34,50,28,33,36,39,49],
[46,52,47,0,47,55,53,34,42,60],
[31,41,31,34,0,47,33,28,41,61],
[37,39,53,26,34,0,37,34,36,52],
[48,57,48,28,48,44,0,31,46,64],
[37,45,45,47,53,47,50,0,26,52],
[39,47,42,39,40,45,35,55,0,51],
[35,42,32,21,20,29,17,29,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,43,42,37,33,38,41,33,43],
[37,0,38,39,32,34,34,36,32,35],
[38,43,0,38,35,33,35,39,35,38],
[39,42,43,0,31,37,40,43,40,36],
[44,49,46,50,0,34,43,50,42,47],
[48,47,48,44,47,0,39,38,43,48],
[43,47,46,41,38,42,0,40,36,43],
[40,45,42,38,31,43,41,0,40,43],
[48,49,46,41,39,38,45,41,0,41],
[38,46,43,45,34,33,38,38,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,30,44,28,57,32,38,35,39],
[34,0,24,50,35,43,30,30,30,28],
[51,57,0,55,45,56,45,47,36,46],
[37,31,26,0,33,37,25,27,30,26],
[53,46,36,48,0,51,34,34,43,33],
[24,38,25,44,30,0,23,33,35,33],
[49,51,36,56,47,58,0,45,41,40],
[43,51,34,54,47,48,36,0,38,48],
[46,51,45,51,38,46,40,43,0,40],
[42,53,35,55,48,48,41,33,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,33,36,25,28,28,29,34,38],
[50,0,46,43,39,28,36,36,41,46],
[48,35,0,35,29,25,32,33,36,38],
[45,38,46,0,34,27,36,40,38,41],
[56,42,52,47,0,41,37,44,41,47],
[53,53,56,54,40,0,43,44,43,51],
[53,45,49,45,44,38,0,44,46,48],
[52,45,48,41,37,37,37,0,43,49],
[47,40,45,43,40,38,35,38,0,45],
[43,35,43,40,34,30,33,32,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,46,46,45,49,53,49,35,45],
[36,0,32,33,40,37,37,38,23,31],
[35,49,0,46,39,52,42,40,43,38],
[35,48,35,0,46,42,32,41,34,43],
[36,41,42,35,0,38,45,28,33,30],
[32,44,29,39,43,0,34,29,21,36],
[28,44,39,49,36,47,0,42,39,36],
[32,43,41,40,53,52,39,0,38,40],
[46,58,38,47,48,60,42,43,0,46],
[36,50,43,38,51,45,45,41,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,44,32,28,81,65,46,49,37],
[35,0,16,23,19,56,21,56,40,37],
[37,65,0,46,63,65,44,65,49,37],
[49,58,35,0,28,79,65,44,49,37],
[53,62,18,53,0,53,51,67,58,53],
[0,25,16,2,28,0,25,44,28,16],
[16,60,37,16,30,56,0,46,30,32],
[35,25,16,37,14,37,35,0,40,51],
[32,41,32,32,23,53,51,41,0,32],
[44,44,44,44,28,65,49,30,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,44,43,37,41,39,39,40,37],
[33,0,34,38,35,34,37,30,33,31],
[37,47,0,45,35,41,41,42,35,37],
[38,43,36,0,37,40,42,36,45,43],
[44,46,46,44,0,47,51,42,45,40],
[40,47,40,41,34,0,37,39,37,36],
[42,44,40,39,30,44,0,35,37,38],
[42,51,39,45,39,42,46,0,42,34],
[41,48,46,36,36,44,44,39,0,43],
[44,50,44,38,41,45,43,47,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,45,46,43,50,42,43,39,48],
[33,0,39,40,33,40,38,46,42,45],
[36,42,0,36,39,44,45,36,31,42],
[35,41,45,0,41,44,41,47,42,41],
[38,48,42,40,0,48,40,49,43,40],
[31,41,37,37,33,0,41,40,41,41],
[39,43,36,40,41,40,0,41,38,33],
[38,35,45,34,32,41,40,0,42,34],
[42,39,50,39,38,40,43,39,0,36],
[33,36,39,40,41,40,48,47,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,33,36,35,35,34,30,33,37],
[47,0,42,35,42,39,42,36,42,38],
[48,39,0,39,43,49,42,35,39,40],
[45,46,42,0,43,44,43,39,47,47],
[46,39,38,38,0,48,41,44,37,42],
[46,42,32,37,33,0,42,31,42,37],
[47,39,39,38,40,39,0,34,42,33],
[51,45,46,42,37,50,47,0,43,44],
[48,39,42,34,44,39,39,38,0,36],
[44,43,41,34,39,44,48,37,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,44,49,55,50,50,48,50,45],
[43,0,35,37,49,31,49,44,39,36],
[37,46,0,40,46,51,46,47,34,33],
[32,44,41,0,41,42,50,42,32,32],
[26,32,35,40,0,47,43,32,38,41],
[31,50,30,39,34,0,44,38,33,37],
[31,32,35,31,38,37,0,33,24,27],
[33,37,34,39,49,43,48,0,39,35],
[31,42,47,49,43,48,57,42,0,33],
[36,45,48,49,40,44,54,46,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,39,41,38,21,36,39,44,38],
[50,0,55,32,52,32,50,46,50,39],
[42,26,0,31,53,37,29,47,41,32],
[40,49,50,0,41,30,29,43,40,47],
[43,29,28,40,0,23,19,26,39,28],
[60,49,44,51,58,0,25,46,48,28],
[45,31,52,52,62,56,0,51,56,45],
[42,35,34,38,55,35,30,0,35,16],
[37,31,40,41,42,33,25,46,0,40],
[43,42,49,34,53,53,36,65,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,65,69,43,39,42,52,58,48],
[27,0,50,41,33,41,39,36,59,40],
[16,31,0,62,45,45,43,55,43,46],
[12,40,19,0,40,21,25,39,43,41],
[38,48,36,41,0,28,27,32,57,48],
[42,40,36,60,53,0,56,54,51,48],
[39,42,38,56,54,25,0,39,72,48],
[29,45,26,42,49,27,42,0,51,57],
[23,22,38,38,24,30,9,30,0,48],
[33,41,35,40,33,33,33,24,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,45,42,53,51,52,44,33,56],
[44,0,41,45,42,40,52,53,33,58],
[36,40,0,35,38,50,51,25,44,47],
[39,36,46,0,53,51,50,48,24,59],
[28,39,43,28,0,46,47,40,30,50],
[30,41,31,30,35,0,53,28,26,63],
[29,29,30,31,34,28,0,37,22,41],
[37,28,56,33,41,53,44,0,34,52],
[48,48,37,57,51,55,59,47,0,56],
[25,23,34,22,31,18,40,29,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,37,47,40,48,40,45,44,42],
[35,0,29,40,33,40,37,35,41,38],
[44,52,0,45,41,47,46,39,51,55],
[34,41,36,0,41,34,33,34,43,36],
[41,48,40,40,0,47,40,42,51,44],
[33,41,34,47,34,0,37,41,46,47],
[41,44,35,48,41,44,0,36,44,41],
[36,46,42,47,39,40,45,0,49,50],
[37,40,30,38,30,35,37,32,0,40],
[39,43,26,45,37,34,40,31,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,37,37,41,42,38,43,43,40],
[46,0,38,39,43,43,39,46,47,44],
[44,43,0,41,36,44,42,44,50,50],
[44,42,40,0,39,37,40,44,47,43],
[40,38,45,42,0,42,42,45,44,48],
[39,38,37,44,39,0,47,43,42,45],
[43,42,39,41,39,34,0,43,39,53],
[38,35,37,37,36,38,38,0,36,41],
[38,34,31,34,37,39,42,45,0,43],
[41,37,31,38,33,36,28,40,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,32,48,43,39,38,42,39,50],
[42,0,40,42,37,36,37,45,31,44],
[49,41,0,47,41,41,46,34,31,45],
[33,39,34,0,36,37,37,33,33,41],
[38,44,40,45,0,35,43,39,33,44],
[42,45,40,44,46,0,40,41,39,44],
[43,44,35,44,38,41,0,39,34,42],
[39,36,47,48,42,40,42,0,41,38],
[42,50,50,48,48,42,47,40,0,47],
[31,37,36,40,37,37,39,43,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,41,37,46,49,44,44,41,35],
[38,0,44,39,46,47,52,44,35,45],
[40,37,0,32,35,40,34,37,35,36],
[44,42,49,0,39,51,41,45,44,38],
[35,35,46,42,0,42,46,37,39,35],
[32,34,41,30,39,0,37,35,37,37],
[37,29,47,40,35,44,0,37,34,36],
[37,37,44,36,44,46,44,0,40,40],
[40,46,46,37,42,44,47,41,0,40],
[46,36,45,43,46,44,45,41,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,40,37,37,40,39,44,42,39],
[46,0,43,40,45,45,41,48,48,41],
[41,38,0,43,39,43,45,47,42,42],
[44,41,38,0,39,41,39,42,45,32],
[44,36,42,42,0,44,43,49,45,38],
[41,36,38,40,37,0,37,45,40,34],
[42,40,36,42,38,44,0,47,39,38],
[37,33,34,39,32,36,34,0,36,39],
[39,33,39,36,36,41,42,45,0,42],
[42,40,39,49,43,47,43,42,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,33,30,30,36,30,39,26,36],
[52,0,36,40,32,38,37,48,37,41],
[48,45,0,42,39,39,35,42,44,32],
[51,41,39,0,36,46,31,45,31,28],
[51,49,42,45,0,45,41,51,38,40],
[45,43,42,35,36,0,29,42,36,37],
[51,44,46,50,40,52,0,50,39,37],
[42,33,39,36,30,39,31,0,32,30],
[55,44,37,50,43,45,42,49,0,36],
[45,40,49,53,41,44,44,51,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,59,45,66,53,41,32,34,47],
[23,0,52,15,64,21,29,15,45,30],
[22,29,0,15,49,21,39,15,17,30],
[36,66,66,0,51,27,53,52,46,47],
[15,17,32,30,0,15,12,15,30,32],
[28,60,60,54,66,0,53,46,48,49],
[40,52,42,28,69,28,0,40,28,30],
[49,66,66,29,66,35,41,0,46,17],
[47,36,64,35,51,33,53,35,0,30],
[34,51,51,34,49,32,51,64,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,47,43,47,46,45,40,41,43],
[40,0,38,39,41,42,45,44,35,39],
[34,43,0,41,42,43,44,45,39,43],
[38,42,40,0,38,38,42,36,38,39],
[34,40,39,43,0,48,43,44,33,38],
[35,39,38,43,33,0,40,45,34,40],
[36,36,37,39,38,41,0,43,34,37],
[41,37,36,45,37,36,38,0,31,43],
[40,46,42,43,48,47,47,50,0,44],
[38,42,38,42,43,41,44,38,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,41,45,50,40,37,40,41,46],
[38,0,39,47,48,38,45,45,40,40],
[40,42,0,43,42,39,40,43,42,49],
[36,34,38,0,38,32,39,35,28,35],
[31,33,39,43,0,29,31,36,36,40],
[41,43,42,49,52,0,39,43,39,50],
[44,36,41,42,50,42,0,45,40,47],
[41,36,38,46,45,38,36,0,35,44],
[40,41,39,53,45,42,41,46,0,44],
[35,41,32,46,41,31,34,37,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,33,31,33,37,32,31,42,39],
[41,0,51,42,39,48,34,35,48,46],
[48,30,0,42,44,52,35,36,54,46],
[50,39,39,0,41,50,46,33,40,43],
[48,42,37,40,0,49,38,36,45,42],
[44,33,29,31,32,0,23,35,33,34],
[49,47,46,35,43,58,0,47,54,43],
[50,46,45,48,45,46,34,0,52,51],
[39,33,27,41,36,48,27,29,0,32],
[42,35,35,38,39,47,38,30,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,38,60,36,46,43,43,33,27],
[51,0,45,63,40,46,59,54,47,37],
[43,36,0,49,28,46,44,43,35,29],
[21,18,32,0,23,30,43,31,36,31],
[45,41,53,58,0,54,61,55,44,39],
[35,35,35,51,27,0,39,38,33,28],
[38,22,37,38,20,42,0,41,27,36],
[38,27,38,50,26,43,40,0,38,43],
[48,34,46,45,37,48,54,43,0,33],
[54,44,52,50,42,53,45,38,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,53,46,49,43,45,45,38,52],
[45,0,47,40,40,41,39,41,40,49],
[28,34,0,40,37,34,23,33,28,34],
[35,41,41,0,46,38,32,38,41,44],
[32,41,44,35,0,38,36,37,34,43],
[38,40,47,43,43,0,40,45,34,51],
[36,42,58,49,45,41,0,45,39,54],
[36,40,48,43,44,36,36,0,30,42],
[43,41,53,40,47,47,42,51,0,48],
[29,32,47,37,38,30,27,39,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,23,46,72,73,40,18,14,0],
[49,0,49,72,72,49,40,35,22,18],
[58,32,0,64,58,50,58,50,46,50],
[35,9,17,0,67,35,35,27,14,9],
[9,9,23,14,0,27,49,9,14,0],
[8,32,31,46,54,0,22,0,14,0],
[41,41,23,46,32,59,0,9,14,32],
[63,46,31,54,72,81,72,0,46,32],
[67,59,35,67,67,67,67,35,0,59],
[81,63,31,72,81,81,49,49,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,43,42,37,36,40,37,35,45],
[48,0,57,55,38,49,41,46,49,49],
[38,24,0,39,32,32,27,35,34,37],
[39,26,42,0,34,40,38,36,41,36],
[44,43,49,47,0,41,37,44,42,41],
[45,32,49,41,40,0,36,38,40,47],
[41,40,54,43,44,45,0,44,47,46],
[44,35,46,45,37,43,37,0,42,41],
[46,32,47,40,39,41,34,39,0,45],
[36,32,44,45,40,34,35,40,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,32,43,61,42,46,54,41,36],
[28,0,40,39,44,31,38,45,47,46],
[49,41,0,48,54,40,47,53,42,37],
[38,42,33,0,49,33,37,44,44,42],
[20,37,27,32,0,40,33,38,27,33],
[39,50,41,48,41,0,47,40,50,51],
[35,43,34,44,48,34,0,45,42,44],
[27,36,28,37,43,41,36,0,30,28],
[40,34,39,37,54,31,39,51,0,38],
[45,35,44,39,48,30,37,53,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,48,44,47,44,48,39,47,52],
[39,0,43,31,39,39,40,35,41,46],
[33,38,0,35,38,30,42,33,41,43],
[37,50,46,0,48,40,44,39,45,47],
[34,42,43,33,0,38,39,33,37,44],
[37,42,51,41,43,0,46,39,38,44],
[33,41,39,37,42,35,0,35,37,45],
[42,46,48,42,48,42,46,0,40,49],
[34,40,40,36,44,43,44,41,0,45],
[29,35,38,34,37,37,36,32,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,31,41,34,31,30,36,40,40],
[41,0,50,46,38,41,44,39,42,44],
[50,31,0,38,43,38,45,37,43,38],
[40,35,43,0,33,34,35,40,41,35],
[47,43,38,48,0,43,38,37,52,39],
[50,40,43,47,38,0,38,46,45,44],
[51,37,36,46,43,43,0,46,39,48],
[45,42,44,41,44,35,35,0,47,48],
[41,39,38,40,29,36,42,34,0,43],
[41,37,43,46,42,37,33,33,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,39,45,51,33,35,44,32,38],
[39,0,39,43,42,32,33,47,29,39],
[42,42,0,46,49,32,46,48,46,46],
[36,38,35,0,45,32,32,45,27,40],
[30,39,32,36,0,24,29,46,30,44],
[48,49,49,49,57,0,36,52,46,51],
[46,48,35,49,52,45,0,56,44,44],
[37,34,33,36,35,29,25,0,32,37],
[49,52,35,54,51,35,37,49,0,47],
[43,42,35,41,37,30,37,44,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,36,32,40,33,58,37,51,38],
[60,0,42,32,56,62,70,40,62,48],
[45,39,0,42,46,54,73,47,66,40],
[49,49,39,0,65,69,65,50,65,50],
[41,25,35,16,0,53,64,40,58,38],
[48,19,27,12,28,0,63,28,60,25],
[23,11,8,16,17,18,0,10,33,20],
[44,41,34,31,41,53,71,0,63,37],
[30,19,15,16,23,21,48,18,0,23],
[43,33,41,31,43,56,61,44,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,42,42,46,39,58,30,30,57],
[36,0,29,30,47,37,41,40,26,56],
[39,52,0,45,37,33,39,24,42,41],
[39,51,36,0,54,40,47,48,36,56],
[35,34,44,27,0,37,42,34,32,56],
[42,44,48,41,44,0,46,50,29,55],
[23,40,42,34,39,35,0,35,33,40],
[51,41,57,33,47,31,46,0,40,50],
[51,55,39,45,49,52,48,41,0,54],
[24,25,40,25,25,26,41,31,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,43,50,39,43,47,33,45,45],
[33,0,46,49,36,42,47,30,41,39],
[38,35,0,54,39,47,49,39,42,45],
[31,32,27,0,25,38,29,13,27,32],
[42,45,42,56,0,42,36,41,44,49],
[38,39,34,43,39,0,34,23,39,48],
[34,34,32,52,45,47,0,27,54,45],
[48,51,42,68,40,58,54,0,56,46],
[36,40,39,54,37,42,27,25,0,32],
[36,42,36,49,32,33,36,35,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,44,39,42,39,42,44,45,49],
[36,0,36,41,40,39,37,46,41,49],
[37,45,0,40,37,41,44,47,45,47],
[42,40,41,0,45,43,44,46,49,44],
[39,41,44,36,0,38,36,49,39,43],
[42,42,40,38,43,0,44,43,50,46],
[39,44,37,37,45,37,0,46,51,46],
[37,35,34,35,32,38,35,0,42,41],
[36,40,36,32,42,31,30,39,0,43],
[32,32,34,37,38,35,35,40,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,38,42,39,40,34,45,43,40],
[50,0,43,43,40,41,39,48,34,39],
[43,38,0,41,41,42,39,45,39,36],
[39,38,40,0,42,37,40,47,38,40],
[42,41,40,39,0,40,40,46,39,41],
[41,40,39,44,41,0,40,50,39,42],
[47,42,42,41,41,41,0,48,38,43],
[36,33,36,34,35,31,33,0,36,39],
[38,47,42,43,42,42,43,45,0,44],
[41,42,45,41,40,39,38,42,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,39,37,49,44,49,68,40,43],
[31,0,40,31,33,41,37,46,34,28],
[42,41,0,43,35,44,51,60,28,34],
[44,50,38,0,48,43,50,55,43,48],
[32,48,46,33,0,45,53,57,48,30],
[37,40,37,38,36,0,47,54,41,29],
[32,44,30,31,28,34,0,54,37,22],
[13,35,21,26,24,27,27,0,23,18],
[41,47,53,38,33,40,44,58,0,30],
[38,53,47,33,51,52,59,63,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,37,34,43,37,41,44,46,34],
[35,0,33,27,43,36,33,40,31,33],
[44,48,0,42,50,40,45,44,44,32],
[47,54,39,0,55,46,50,50,40,42],
[38,38,31,26,0,32,37,37,34,33],
[44,45,41,35,49,0,39,47,33,43],
[40,48,36,31,44,42,0,41,35,33],
[37,41,37,31,44,34,40,0,31,31],
[35,50,37,41,47,48,46,50,0,43],
[47,48,49,39,48,38,48,50,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,43,45,41,42,46,45,38,42],
[53,0,41,46,42,33,47,38,43,40],
[38,40,0,44,46,38,45,37,40,39],
[36,35,37,0,46,41,44,42,30,43],
[40,39,35,35,0,28,38,31,38,37],
[39,48,43,40,53,0,48,42,39,47],
[35,34,36,37,43,33,0,42,33,32],
[36,43,44,39,50,39,39,0,42,39],
[43,38,41,51,43,42,48,39,0,39],
[39,41,42,38,44,34,49,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,35,30,37,37,35,30,27,40],
[49,0,39,39,43,40,37,38,41,46],
[46,42,0,38,40,45,38,35,41,45],
[51,42,43,0,49,47,34,47,37,49],
[44,38,41,32,0,38,36,38,39,42],
[44,41,36,34,43,0,41,34,37,47],
[46,44,43,47,45,40,0,39,42,49],
[51,43,46,34,43,47,42,0,40,52],
[54,40,40,44,42,44,39,41,0,48],
[41,35,36,32,39,34,32,29,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,38,38,39,48,30,44,41,47],
[33,0,33,30,34,29,30,33,34,27],
[43,48,0,43,43,41,35,42,54,49],
[43,51,38,0,55,48,42,43,38,50],
[42,47,38,26,0,38,36,39,37,42],
[33,52,40,33,43,0,31,27,43,32],
[51,51,46,39,45,50,0,43,47,51],
[37,48,39,38,42,54,38,0,45,39],
[40,47,27,43,44,38,34,36,0,44],
[34,54,32,31,39,49,30,42,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,32,29,23,44,54,12,27,16],
[53,0,52,29,37,30,40,39,25,44],
[49,29,0,16,32,39,35,22,36,36],
[52,52,65,0,19,40,50,29,38,55],
[58,44,49,62,0,49,49,21,28,49],
[37,51,42,41,32,0,33,39,46,40],
[27,41,46,31,32,48,0,20,27,23],
[69,42,59,52,60,42,61,0,34,50],
[54,56,45,43,53,35,54,47,0,48],
[65,37,45,26,32,41,58,31,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,31,31,32,17,37,26,61,6],
[56,0,50,50,22,56,52,35,51,40],
[50,31,0,65,31,50,46,50,30,49],
[50,31,16,0,16,50,61,44,46,31],
[49,59,50,65,0,56,45,50,49,34],
[64,25,31,31,25,0,30,45,55,0],
[44,29,35,20,36,51,0,45,50,34],
[55,46,31,37,31,36,36,0,61,21],
[20,30,51,35,32,26,31,20,0,20],
[75,41,32,50,47,81,47,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,31,31,37,41,43,27,45,36],
[39,0,41,35,42,38,47,30,50,33],
[50,40,0,44,49,47,52,42,46,39],
[50,46,37,0,42,49,49,41,52,43],
[44,39,32,39,0,43,54,28,49,41],
[40,43,34,32,38,0,41,24,47,29],
[38,34,29,32,27,40,0,27,43,31],
[54,51,39,40,53,57,54,0,49,45],
[36,31,35,29,32,34,38,32,0,29],
[45,48,42,38,40,52,50,36,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,43,39,37,47,42,49,34,40],
[37,0,30,35,41,41,43,38,43,33],
[38,51,0,39,43,44,45,51,39,47],
[42,46,42,0,35,49,39,40,40,40],
[44,40,38,46,0,44,46,49,42,38],
[34,40,37,32,37,0,41,40,38,33],
[39,38,36,42,35,40,0,47,35,33],
[32,43,30,41,32,41,34,0,34,34],
[47,38,42,41,39,43,46,47,0,42],
[41,48,34,41,43,48,48,47,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,45,38,37,36,43,39,33,41],
[38,0,39,39,37,32,35,36,36,40],
[36,42,0,36,38,37,39,35,39,34],
[43,42,45,0,41,39,44,38,34,47],
[44,44,43,40,0,42,48,41,42,49],
[45,49,44,42,39,0,38,39,40,42],
[38,46,42,37,33,43,0,39,42,39],
[42,45,46,43,40,42,42,0,45,48],
[48,45,42,47,39,41,39,36,0,46],
[40,41,47,34,32,39,42,33,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,56,52,33,43,44,41,40,40],
[45,0,50,52,45,42,39,42,49,43],
[25,31,0,32,27,25,25,34,34,35],
[29,29,49,0,27,33,30,27,34,36],
[48,36,54,54,0,42,47,48,48,42],
[38,39,56,48,39,0,39,41,44,37],
[37,42,56,51,34,42,0,42,49,44],
[40,39,47,54,33,40,39,0,41,29],
[41,32,47,47,33,37,32,40,0,46],
[41,38,46,45,39,44,37,52,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,54,31,44,40,44,46,57,40],
[38,0,51,44,40,37,49,44,40,46],
[27,30,0,22,24,31,34,41,51,33],
[50,37,59,0,50,46,46,49,51,36],
[37,41,57,31,0,43,49,46,54,51],
[41,44,50,35,38,0,39,41,41,46],
[37,32,47,35,32,42,0,44,56,35],
[35,37,40,32,35,40,37,0,30,28],
[24,41,30,30,27,40,25,51,0,23],
[41,35,48,45,30,35,46,53,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,40,45,37,39,44,43,41,43],
[37,0,44,42,38,32,45,42,42,46],
[41,37,0,39,38,38,46,44,42,43],
[36,39,42,0,34,33,37,42,43,35],
[44,43,43,47,0,43,42,48,47,40],
[42,49,43,48,38,0,44,45,42,41],
[37,36,35,44,39,37,0,40,37,38],
[38,39,37,39,33,36,41,0,41,43],
[40,39,39,38,34,39,44,40,0,44],
[38,35,38,46,41,40,43,38,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,52,47,40,56,46,62,38,40],
[29,0,45,42,40,48,50,49,47,43],
[29,36,0,37,36,51,44,39,34,35],
[34,39,44,0,48,54,60,51,39,46],
[41,41,45,33,0,53,47,49,42,47],
[25,33,30,27,28,0,38,43,35,33],
[35,31,37,21,34,43,0,43,43,52],
[19,32,42,30,32,38,38,0,29,34],
[43,34,47,42,39,46,38,52,0,47],
[41,38,46,35,34,48,29,47,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,56,56,34,54,43,60,47,38],
[36,0,53,48,24,57,32,48,48,38],
[25,28,0,46,26,44,31,44,40,28],
[25,33,35,0,25,50,33,40,33,31],
[47,57,55,56,0,62,40,59,55,40],
[27,24,37,31,19,0,23,38,38,20],
[38,49,50,48,41,58,0,62,46,49],
[21,33,37,41,22,43,19,0,32,30],
[34,33,41,48,26,43,35,49,0,35],
[43,43,53,50,41,61,32,51,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,19,50,49,30,22,40,44,37],
[23,0,26,33,38,28,18,36,41,22],
[62,55,0,54,56,47,32,41,59,46],
[31,48,27,0,46,39,17,28,46,27],
[32,43,25,35,0,42,17,30,38,27],
[51,53,34,42,39,0,42,37,38,43],
[59,63,49,64,64,39,0,49,62,56],
[41,45,40,53,51,44,32,0,50,46],
[37,40,22,35,43,43,19,31,0,25],
[44,59,35,54,54,38,25,35,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,30,44,44,56,38,37,43,40],
[36,0,37,47,45,50,42,42,36,38],
[51,44,0,52,48,49,51,46,45,40],
[37,34,29,0,42,40,36,36,35,31],
[37,36,33,39,0,45,37,37,27,37],
[25,31,32,41,36,0,29,34,30,40],
[43,39,30,45,44,52,0,42,32,41],
[44,39,35,45,44,47,39,0,44,34],
[38,45,36,46,54,51,49,37,0,43],
[41,43,41,50,44,41,40,47,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,33,31,26,37,33,43,32,23],
[46,0,39,52,37,50,46,46,48,43],
[48,42,0,43,37,50,45,46,49,37],
[50,29,38,0,42,39,56,38,29,27],
[55,44,44,39,0,47,50,54,45,39],
[44,31,31,42,34,0,28,40,43,32],
[48,35,36,25,31,53,0,45,39,20],
[38,35,35,43,27,41,36,0,38,29],
[49,33,32,52,36,38,42,43,0,37],
[58,38,44,54,42,49,61,52,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,44,42,30,35,32,42,37,40],
[40,0,37,30,35,40,33,39,44,44],
[37,44,0,46,38,38,44,48,51,45],
[39,51,35,0,40,40,35,50,40,44],
[51,46,43,41,0,34,43,44,42,44],
[46,41,43,41,47,0,43,40,45,47],
[49,48,37,46,38,38,0,45,48,42],
[39,42,33,31,37,41,36,0,36,45],
[44,37,30,41,39,36,33,45,0,44],
[41,37,36,37,37,34,39,36,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,31,17,33,41,36,35,42,34],
[59,0,41,31,41,43,45,46,47,40],
[50,40,0,42,35,54,53,41,59,44],
[64,50,39,0,31,49,50,39,54,32],
[48,40,46,50,0,54,52,47,52,42],
[40,38,27,32,27,0,28,30,55,23],
[45,36,28,31,29,53,0,28,46,42],
[46,35,40,42,34,51,53,0,54,32],
[39,34,22,27,29,26,35,27,0,18],
[47,41,37,49,39,58,39,49,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,37,63,38,45,27,39,46,42],
[39,0,33,49,32,46,43,43,51,46],
[44,48,0,55,44,45,31,46,51,51],
[18,32,26,0,24,34,23,26,29,25],
[43,49,37,57,0,49,46,47,57,51],
[36,35,36,47,32,0,28,39,50,43],
[54,38,50,58,35,53,0,50,59,43],
[42,38,35,55,34,42,31,0,52,38],
[35,30,30,52,24,31,22,29,0,29],
[39,35,30,56,30,38,38,43,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,32,34,38,33,33,32,39,39],
[46,0,45,31,42,39,45,43,41,45],
[49,36,0,35,39,35,37,40,34,36],
[47,50,46,0,41,38,45,46,37,48],
[43,39,42,40,0,41,41,44,31,44],
[48,42,46,43,40,0,46,48,38,43],
[48,36,44,36,40,35,0,43,39,44],
[49,38,41,35,37,33,38,0,32,38],
[42,40,47,44,50,43,42,49,0,47],
[42,36,45,33,37,38,37,43,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,36,45,44,38,37,36,21,30],
[43,0,48,58,46,76,38,59,46,25],
[45,33,0,48,49,77,41,57,49,49],
[36,23,33,0,42,51,21,18,44,9],
[37,35,32,39,0,53,10,30,46,2],
[43,5,4,30,28,0,16,17,51,25],
[44,43,40,60,71,65,0,60,64,51],
[45,22,24,63,51,64,21,0,43,31],
[60,35,32,37,35,30,17,38,0,18],
[51,56,32,72,79,56,30,50,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,43,21,39,25,27,15,31,27],
[64,0,39,49,55,52,53,40,34,44],
[38,42,0,31,41,39,31,21,54,36],
[60,32,50,0,47,38,35,46,45,32],
[42,26,40,34,0,39,36,25,39,45],
[56,29,42,43,42,0,37,37,21,22],
[54,28,50,46,45,44,0,31,32,28],
[66,41,60,35,56,44,50,0,51,41],
[50,47,27,36,42,60,49,30,0,45],
[54,37,45,49,36,59,53,40,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,37,43,36,32,41,39,44,39],
[38,0,42,39,31,32,39,39,44,35],
[44,39,0,41,33,42,42,37,38,39],
[38,42,40,0,34,35,43,39,48,39],
[45,50,48,47,0,41,39,48,48,43],
[49,49,39,46,40,0,47,46,49,37],
[40,42,39,38,42,34,0,40,42,36],
[42,42,44,42,33,35,41,0,47,42],
[37,37,43,33,33,32,39,34,0,31],
[42,46,42,42,38,44,45,39,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,45,50,42,36,50,38,45,43],
[34,0,17,43,38,32,43,24,39,36],
[36,64,0,49,61,45,54,47,60,44],
[31,38,32,0,42,28,42,31,42,31],
[39,43,20,39,0,38,48,43,33,41],
[45,49,36,53,43,0,64,42,42,60],
[31,38,27,39,33,17,0,36,35,40],
[43,57,34,50,38,39,45,0,44,49],
[36,42,21,39,48,39,46,37,0,42],
[38,45,37,50,40,21,41,32,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,43,43,32,46,34,33,44,38],
[38,0,46,50,34,44,39,32,36,33],
[38,35,0,28,35,22,40,24,32,28],
[38,31,53,0,33,34,33,41,42,30],
[49,47,46,48,0,36,39,54,52,48],
[35,37,59,47,45,0,49,38,32,36],
[47,42,41,48,42,32,0,39,48,39],
[48,49,57,40,27,43,42,0,38,39],
[37,45,49,39,29,49,33,43,0,40],
[43,48,53,51,33,45,42,42,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,36,31,53,44,22,31,22,44],
[28,0,14,9,28,58,0,9,22,11],
[45,67,0,45,45,67,45,31,53,42],
[50,72,36,0,72,72,36,36,36,36],
[28,53,36,9,0,58,11,20,22,22],
[37,23,14,9,23,0,9,23,23,9],
[59,81,36,45,70,72,0,56,45,42],
[50,72,50,45,61,58,25,0,36,33],
[59,59,28,45,59,58,36,45,0,31],
[37,70,39,45,59,72,39,48,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,49,40,47,44,41,41,44,42],
[44,0,42,39,47,46,41,48,40,38],
[32,39,0,38,47,51,42,43,49,36],
[41,42,43,0,40,48,46,50,46,38],
[34,34,34,41,0,43,36,40,42,38],
[37,35,30,33,38,0,41,36,40,34],
[40,40,39,35,45,40,0,44,41,38],
[40,33,38,31,41,45,37,0,36,35],
[37,41,32,35,39,41,40,45,0,37],
[39,43,45,43,43,47,43,46,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,43,45,48,45,38,47,43,52],
[33,0,34,37,39,48,36,45,32,47],
[38,47,0,44,44,44,46,50,38,46],
[36,44,37,0,43,43,40,43,37,51],
[33,42,37,38,0,43,40,48,31,49],
[36,33,37,38,38,0,35,35,30,39],
[43,45,35,41,41,46,0,46,39,55],
[34,36,31,38,33,46,35,0,32,42],
[38,49,43,44,50,51,42,49,0,55],
[29,34,35,30,32,42,26,39,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,36,41,40,42,44,43,41,39],
[34,0,28,31,33,32,32,37,33,37],
[45,53,0,41,38,41,40,43,44,47],
[40,50,40,0,37,40,42,41,37,41],
[41,48,43,44,0,40,37,43,41,43],
[39,49,40,41,41,0,37,48,36,44],
[37,49,41,39,44,44,0,41,45,43],
[38,44,38,40,38,33,40,0,43,40],
[40,48,37,44,40,45,36,38,0,45],
[42,44,34,40,38,37,38,41,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,33,32,40,45,43,35,31,38],
[34,0,37,37,38,44,41,34,41,32],
[48,44,0,42,46,46,48,40,43,42],
[49,44,39,0,46,49,47,38,40,42],
[41,43,35,35,0,46,42,43,35,34],
[36,37,35,32,35,0,38,43,38,30],
[38,40,33,34,39,43,0,35,41,36],
[46,47,41,43,38,38,46,0,42,39],
[50,40,38,41,46,43,40,39,0,39],
[43,49,39,39,47,51,45,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,44,47,37,39,50,51,43,51],
[26,0,33,34,35,33,32,40,37,49],
[37,48,0,40,40,27,46,42,42,46],
[34,47,41,0,32,30,37,42,41,49],
[44,46,41,49,0,44,46,41,40,58],
[42,48,54,51,37,0,39,49,40,50],
[31,49,35,44,35,42,0,42,48,50],
[30,41,39,39,40,32,39,0,41,46],
[38,44,39,40,41,41,33,40,0,49],
[30,32,35,32,23,31,31,35,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,37,36,43,39,33,46,48,33],
[30,0,34,20,29,38,33,59,53,44],
[44,47,0,36,43,52,33,73,67,52],
[45,61,45,0,40,53,48,45,53,44],
[38,52,38,41,0,32,46,38,38,38],
[42,43,29,28,49,0,37,62,56,27],
[48,48,48,33,35,44,0,48,48,19],
[35,22,8,36,43,19,33,0,22,22],
[33,28,14,28,43,25,33,59,0,44],
[48,37,29,37,43,54,62,59,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,47,35,35,43,33,35,38,36],
[50,0,57,44,38,47,37,46,46,40],
[34,24,0,30,32,42,30,32,41,27],
[46,37,51,0,42,43,42,43,43,41],
[46,43,49,39,0,51,35,42,49,41],
[38,34,39,38,30,0,35,34,40,35],
[48,44,51,39,46,46,0,47,49,39],
[46,35,49,38,39,47,34,0,44,33],
[43,35,40,38,32,41,32,37,0,32],
[45,41,54,40,40,46,42,48,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,48,51,22,52,52,78,55,78],
[26,0,40,42,39,69,61,78,81,69],
[33,41,0,46,46,41,30,50,46,69],
[30,39,35,0,22,47,39,39,50,73],
[59,42,35,59,0,73,56,65,76,64],
[29,12,40,34,8,0,5,70,25,39],
[29,20,51,42,25,76,0,76,25,81],
[3,3,31,42,16,11,5,0,16,39],
[26,0,35,31,5,56,56,65,0,64],
[3,12,12,8,17,42,0,42,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,34,34,32,38,38,32,33,40],
[50,0,35,40,32,36,39,41,34,40],
[47,46,0,43,40,41,40,36,38,46],
[47,41,38,0,41,39,47,42,35,46],
[49,49,41,40,0,37,44,45,43,49],
[43,45,40,42,44,0,43,41,45,46],
[43,42,41,34,37,38,0,44,41,45],
[49,40,45,39,36,40,37,0,42,49],
[48,47,43,46,38,36,40,39,0,57],
[41,41,35,35,32,35,36,32,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,29,38,44,47,52,48,40],
[53,0,39,45,57,49,52,55,52,40],
[55,42,0,40,47,47,47,56,49,48],
[52,36,41,0,57,51,47,52,63,48],
[43,24,34,24,0,38,41,48,41,40],
[37,32,34,30,43,0,41,47,38,36],
[34,29,34,34,40,40,0,48,39,36],
[29,26,25,29,33,34,33,0,37,29],
[33,29,32,18,40,43,42,44,0,25],
[41,41,33,33,41,45,45,52,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,48,45,45,40,49,32,39,39],
[50,0,41,46,51,36,48,28,36,47],
[33,40,0,52,39,36,43,38,29,37],
[36,35,29,0,30,31,32,21,34,29],
[36,30,42,51,0,32,46,35,34,32],
[41,45,45,50,49,0,48,37,46,37],
[32,33,38,49,35,33,0,34,28,36],
[49,53,43,60,46,44,47,0,34,47],
[42,45,52,47,47,35,53,47,0,42],
[42,34,44,52,49,44,45,34,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,39,44,42,32,52,37,41,42],
[30,0,39,47,38,37,55,49,35,28],
[42,42,0,55,45,49,45,47,51,31],
[37,34,26,0,42,43,35,58,37,26],
[39,43,36,39,0,44,46,39,41,42],
[49,44,32,38,37,0,42,47,53,50],
[29,26,36,46,35,39,0,50,31,31],
[44,32,34,23,42,34,31,0,49,39],
[40,46,30,44,40,28,50,32,0,40],
[39,53,50,55,39,31,50,42,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,39,42,40,41,42,40,43,38],
[34,0,41,27,30,44,39,38,35,35],
[42,40,0,43,42,43,44,49,40,43],
[39,54,38,0,39,46,46,47,39,44],
[41,51,39,42,0,48,45,41,46,41],
[40,37,38,35,33,0,40,41,36,39],
[39,42,37,35,36,41,0,38,32,40],
[41,43,32,34,40,40,43,0,42,39],
[38,46,41,42,35,45,49,39,0,44],
[43,46,38,37,40,42,41,42,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,58,54,34,51,61,28,67,38],
[40,0,45,47,53,31,54,44,67,45],
[23,36,0,48,36,21,23,17,51,28],
[27,34,33,0,33,27,21,21,43,35],
[47,28,45,48,0,51,61,44,67,45],
[30,50,60,54,30,0,53,38,43,51],
[20,27,58,60,20,28,0,42,50,44],
[53,37,64,60,37,43,39,0,73,44],
[14,14,30,38,14,38,31,8,0,32],
[43,36,53,46,36,30,37,37,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,47,44,41,43,51,45,44,40],
[34,0,44,39,45,39,47,38,35,35],
[34,37,0,34,37,32,44,39,30,40],
[37,42,47,0,38,38,45,39,41,40],
[40,36,44,43,0,38,48,39,38,38],
[38,42,49,43,43,0,48,40,45,40],
[30,34,37,36,33,33,0,32,30,35],
[36,43,42,42,42,41,49,0,34,42],
[37,46,51,40,43,36,51,47,0,41],
[41,46,41,41,43,41,46,39,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,45,38,43,43,43,52,45,35],
[36,0,48,50,39,41,40,49,47,36],
[36,33,0,46,44,41,39,40,43,36],
[43,31,35,0,38,39,33,41,38,34],
[38,42,37,43,0,41,35,40,36,35],
[38,40,40,42,40,0,30,45,47,34],
[38,41,42,48,46,51,0,48,46,41],
[29,32,41,40,41,36,33,0,36,38],
[36,34,38,43,45,34,35,45,0,37],
[46,45,45,47,46,47,40,43,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,40,41,38,39,35,41,44,50],
[37,0,40,45,43,36,35,43,44,44],
[41,41,0,41,34,38,41,39,43,44],
[40,36,40,0,39,34,38,36,43,41],
[43,38,47,42,0,37,37,37,45,41],
[42,45,43,47,44,0,39,41,42,45],
[46,46,40,43,44,42,0,42,45,47],
[40,38,42,45,44,40,39,0,43,47],
[37,37,38,38,36,39,36,38,0,38],
[31,37,37,40,40,36,34,34,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,39,44,45,36,45,38,42],
[39,0,44,51,48,44,44,46,40,41],
[39,37,0,43,47,42,33,37,37,28],
[42,30,38,0,48,47,35,47,41,41],
[37,33,34,33,0,41,40,37,36,39],
[36,37,39,34,40,0,32,38,37,36],
[45,37,48,46,41,49,0,40,45,40],
[36,35,44,34,44,43,41,0,37,36],
[43,41,44,40,45,44,36,44,0,44],
[39,40,53,40,42,45,41,45,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,48,39,43,28,31,45,34,36],
[38,0,46,36,38,26,31,32,31,43],
[33,35,0,35,46,29,33,36,30,42],
[42,45,46,0,42,40,32,35,39,31],
[38,43,35,39,0,31,38,33,34,44],
[53,55,52,41,50,0,45,45,38,46],
[50,50,48,49,43,36,0,48,38,43],
[36,49,45,46,48,36,33,0,40,42],
[47,50,51,42,47,43,43,41,0,35],
[45,38,39,50,37,35,38,39,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,44,46,50,37,42,38,50,41],
[38,0,38,44,43,44,33,44,36,39],
[37,43,0,50,40,39,44,45,49,44],
[35,37,31,0,33,37,33,48,41,44],
[31,38,41,48,0,38,25,45,38,42],
[44,37,42,44,43,0,36,40,35,38],
[39,48,37,48,56,45,0,54,51,50],
[43,37,36,33,36,41,27,0,43,40],
[31,45,32,40,43,46,30,38,0,33],
[40,42,37,37,39,43,31,41,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,46,24,27,46,23,22,50,24],
[32,0,55,56,25,46,55,45,33,33],
[35,26,0,26,27,24,57,22,50,58],
[57,25,55,0,50,46,57,22,49,58],
[54,56,54,31,0,55,32,31,55,55],
[35,35,57,35,26,0,56,23,35,35],
[58,26,24,24,49,25,0,46,49,49],
[59,36,59,59,50,58,35,0,59,59],
[31,48,31,32,26,46,32,22,0,33],
[57,48,23,23,26,46,32,22,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,46,50,41,42,45,43,38,53],
[36,0,33,55,43,38,47,37,43,49],
[35,48,0,51,45,40,52,46,43,51],
[31,26,30,0,32,29,31,26,24,39],
[40,38,36,49,0,38,40,37,38,47],
[39,43,41,52,43,0,43,39,42,42],
[36,34,29,50,41,38,0,43,40,50],
[38,44,35,55,44,42,38,0,37,45],
[43,38,38,57,43,39,41,44,0,48],
[28,32,30,42,34,39,31,36,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,40,32,30,27,21,28,47,29],
[60,0,39,46,37,36,25,46,68,39],
[41,42,0,32,42,34,22,46,73,44],
[49,35,49,0,41,41,16,53,59,52],
[51,44,39,40,0,34,47,30,59,54],
[54,45,47,40,47,0,40,54,70,62],
[60,56,59,65,34,41,0,50,75,54],
[53,35,35,28,51,27,31,0,38,62],
[34,13,8,22,22,11,6,43,0,30],
[52,42,37,29,27,19,27,19,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,43,52,45,40,51,42,52,48],
[30,0,40,39,40,35,34,38,40,41],
[38,41,0,40,46,42,43,35,47,44],
[29,42,41,0,50,41,44,46,39,35],
[36,41,35,31,0,37,39,37,41,37],
[41,46,39,40,44,0,42,32,45,43],
[30,47,38,37,42,39,0,39,40,36],
[39,43,46,35,44,49,42,0,43,45],
[29,41,34,42,40,36,41,38,0,36],
[33,40,37,46,44,38,45,36,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,35,38,36,39,37,39,36,41],
[38,0,40,31,36,39,33,34,35,39],
[46,41,0,32,33,38,35,41,35,36],
[43,50,49,0,37,41,42,38,39,38],
[45,45,48,44,0,43,44,37,44,41],
[42,42,43,40,38,0,34,33,41,38],
[44,48,46,39,37,47,0,40,37,48],
[42,47,40,43,44,48,41,0,39,43],
[45,46,46,42,37,40,44,42,0,41],
[40,42,45,43,40,43,33,38,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,44,34,39,40,42,45,36,39],
[38,0,39,31,45,35,39,42,36,35],
[37,42,0,32,42,40,40,42,39,37],
[47,50,49,0,49,47,44,50,39,42],
[42,36,39,32,0,33,38,39,38,35],
[41,46,41,34,48,0,38,50,39,41],
[39,42,41,37,43,43,0,44,35,42],
[36,39,39,31,42,31,37,0,42,34],
[45,45,42,42,43,42,46,39,0,44],
[42,46,44,39,46,40,39,47,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,35,28,34,29,43,29,32,35],
[28,0,22,23,20,19,32,35,25,33],
[46,59,0,37,44,43,45,49,41,44],
[53,58,44,0,41,33,46,39,40,46],
[47,61,37,40,0,31,50,45,31,46],
[52,62,38,48,50,0,56,50,37,54],
[38,49,36,35,31,25,0,38,24,41],
[52,46,32,42,36,31,43,0,33,42],
[49,56,40,41,50,44,57,48,0,38],
[46,48,37,35,35,27,40,39,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,41,41,50,33,45,41,41,42],
[38,0,36,46,43,33,49,40,38,42],
[40,45,0,44,42,40,46,36,39,40],
[40,35,37,0,42,30,42,38,37,36],
[31,38,39,39,0,31,45,34,34,37],
[48,48,41,51,50,0,49,43,40,45],
[36,32,35,39,36,32,0,31,35,38],
[40,41,45,43,47,38,50,0,38,40],
[40,43,42,44,47,41,46,43,0,41],
[39,39,41,45,44,36,43,41,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,40,40,48,46,29,50,40,43],
[34,0,35,30,25,38,17,35,17,24],
[41,46,0,34,39,40,25,45,30,45],
[41,51,47,0,43,53,33,56,51,55],
[33,56,42,38,0,50,40,43,50,40],
[35,43,41,28,31,0,42,53,39,39],
[52,64,56,48,41,39,0,67,30,47],
[31,46,36,25,38,28,14,0,18,39],
[41,64,51,30,31,42,51,63,0,56],
[38,57,36,26,41,42,34,42,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,23,23,32,28,24,30,36,26],
[44,0,29,33,35,28,39,42,45,26],
[58,52,0,40,56,46,56,52,56,42],
[58,48,41,0,43,46,38,43,49,44],
[49,46,25,38,0,32,34,36,43,33],
[53,53,35,35,49,0,45,46,51,44],
[57,42,25,43,47,36,0,45,50,35],
[51,39,29,38,45,35,36,0,51,37],
[45,36,25,32,38,30,31,30,0,28],
[55,55,39,37,48,37,46,44,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,45,42,49,50,32,46,45,52],
[42,0,51,35,45,37,34,30,36,37],
[36,30,0,37,39,40,36,35,30,42],
[39,46,44,0,57,47,52,48,50,48],
[32,36,42,24,0,29,28,39,29,33],
[31,44,41,34,52,0,30,45,36,45],
[49,47,45,29,53,51,0,35,36,40],
[35,51,46,33,42,36,46,0,39,51],
[36,45,51,31,52,45,45,42,0,54],
[29,44,39,33,48,36,41,30,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,37,48,42,36,38,48,50,37],
[37,0,40,41,33,49,36,42,37,36],
[44,41,0,43,46,45,39,48,47,42],
[33,40,38,0,29,42,34,36,44,34],
[39,48,35,52,0,50,46,50,47,42],
[45,32,36,39,31,0,31,36,43,41],
[43,45,42,47,35,50,0,41,40,43],
[33,39,33,45,31,45,40,0,38,41],
[31,44,34,37,34,38,41,43,0,34],
[44,45,39,47,39,40,38,40,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,42,56,54,33,50,69,52,58],
[22,0,52,45,44,41,51,57,42,48],
[39,29,0,41,29,32,47,50,37,47],
[25,36,40,0,46,41,48,64,42,36],
[27,37,52,35,0,37,27,54,44,48],
[48,40,49,40,44,0,38,57,45,29],
[31,30,34,33,54,43,0,56,43,35],
[12,24,31,17,27,24,25,0,30,31],
[29,39,44,39,37,36,38,51,0,34],
[23,33,34,45,33,52,46,50,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,42,45,37,42,40,30,48,52],
[49,0,47,44,49,44,51,39,52,53],
[39,34,0,48,43,37,41,42,48,54],
[36,37,33,0,47,36,45,39,44,47],
[44,32,38,34,0,34,38,40,47,39],
[39,37,44,45,47,0,46,41,42,50],
[41,30,40,36,43,35,0,36,41,42],
[51,42,39,42,41,40,45,0,48,42],
[33,29,33,37,34,39,40,33,0,38],
[29,28,27,34,42,31,39,39,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,33,34,38,35,34,33,43,41],
[40,0,33,35,39,32,37,36,37,41],
[48,48,0,45,45,38,39,42,44,47],
[47,46,36,0,43,35,37,42,45,49],
[43,42,36,38,0,41,41,41,45,41],
[46,49,43,46,40,0,39,42,44,42],
[47,44,42,44,40,42,0,45,49,45],
[48,45,39,39,40,39,36,0,50,42],
[38,44,37,36,36,37,32,31,0,42],
[40,40,34,32,40,39,36,39,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,41,37,31,31,31,35,36,44],
[36,0,38,43,22,27,25,32,32,31],
[40,43,0,42,29,29,25,47,40,41],
[44,38,39,0,39,35,29,34,32,33],
[50,59,52,42,0,38,46,46,36,47],
[50,54,52,46,43,0,40,51,42,42],
[50,56,56,52,35,41,0,44,47,46],
[46,49,34,47,35,30,37,0,37,47],
[45,49,41,49,45,39,34,44,0,42],
[37,50,40,48,34,39,35,34,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,45,40,33,40,40,50,39,33],
[38,0,37,45,40,33,36,34,37,36],
[36,44,0,37,42,32,44,43,43,32],
[41,36,44,0,36,25,45,45,42,34],
[48,41,39,45,0,37,45,53,49,42],
[41,48,49,56,44,0,48,49,49,38],
[41,45,37,36,36,33,0,38,38,35],
[31,47,38,36,28,32,43,0,39,29],
[42,44,38,39,32,32,43,42,0,35],
[48,45,49,47,39,43,46,52,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,61,44,64,45,48,32,48,51],
[34,0,40,47,49,39,35,48,32,58],
[20,41,0,34,39,30,21,40,35,39],
[37,34,47,0,45,18,24,41,34,45],
[17,32,42,36,0,40,46,27,45,45],
[36,42,51,63,41,0,34,47,52,60],
[33,46,60,57,35,47,0,50,49,56],
[49,33,41,40,54,34,31,0,35,51],
[33,49,46,47,36,29,32,46,0,47],
[30,23,42,36,36,21,25,30,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,57,43,40,41,47,50,51,52],
[39,0,47,46,40,40,47,35,50,44],
[24,34,0,32,33,28,31,37,38,38],
[38,35,49,0,37,45,35,41,51,50],
[41,41,48,44,0,44,39,43,48,56],
[40,41,53,36,37,0,45,44,49,58],
[34,34,50,46,42,36,0,39,45,47],
[31,46,44,40,38,37,42,0,40,43],
[30,31,43,30,33,32,36,41,0,38],
[29,37,43,31,25,23,34,38,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,39,42,50,41,41,27,40,45],
[37,0,37,29,46,40,40,32,30,39],
[42,44,0,35,52,51,41,31,40,57],
[39,52,46,0,58,43,54,44,53,41],
[31,35,29,23,0,41,33,37,37,36],
[40,41,30,38,40,0,41,26,43,33],
[40,41,40,27,48,40,0,36,42,47],
[54,49,50,37,44,55,45,0,42,50],
[41,51,41,28,44,38,39,39,0,46],
[36,42,24,40,45,48,34,31,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,12,15,31,30,36,25,44,29],
[50,0,51,49,48,56,47,57,54,16],
[69,30,0,46,20,30,53,25,44,28],
[66,32,35,0,51,52,54,47,66,30],
[50,33,61,30,0,46,36,46,64,22],
[51,25,51,29,35,0,38,40,56,17],
[45,34,28,27,45,43,0,25,35,42],
[56,24,56,34,35,41,56,0,40,35],
[37,27,37,15,17,25,46,41,0,16],
[52,65,53,51,59,64,39,46,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,45,41,38,45,41,50,44,44],
[39,0,42,36,40,44,35,54,37,40],
[36,39,0,32,34,33,28,46,46,41],
[40,45,49,0,47,40,38,56,47,39],
[43,41,47,34,0,46,41,51,46,33],
[36,37,48,41,35,0,36,58,45,35],
[40,46,53,43,40,45,0,58,46,51],
[31,27,35,25,30,23,23,0,32,28],
[37,44,35,34,35,36,35,49,0,32],
[37,41,40,42,48,46,30,53,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,40,43,42,41,36,36,41,36],
[44,0,36,42,43,44,37,39,43,44],
[41,45,0,38,38,40,42,43,39,37],
[38,39,43,0,38,41,40,40,42,45],
[39,38,43,43,0,40,40,39,47,42],
[40,37,41,40,41,0,36,37,36,40],
[45,44,39,41,41,45,0,42,39,40],
[45,42,38,41,42,44,39,0,40,44],
[40,38,42,39,34,45,42,41,0,36],
[45,37,44,36,39,41,41,37,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,40,44,46,39,43,42,47,44],
[36,0,47,45,42,42,39,47,47,47],
[41,34,0,33,44,40,33,42,41,40],
[37,36,48,0,40,37,41,43,37,39],
[35,39,37,41,0,36,36,41,44,43],
[42,39,41,44,45,0,40,43,47,38],
[38,42,48,40,45,41,0,47,48,49],
[39,34,39,38,40,38,34,0,37,36],
[34,34,40,44,37,34,33,44,0,40],
[37,34,41,42,38,43,32,45,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,34,41,27,24,33,52,43,42],
[42,0,53,51,55,40,49,61,52,43],
[47,28,0,45,17,48,24,30,24,47],
[40,30,36,0,41,29,27,48,48,30],
[54,26,64,40,0,54,55,75,57,45],
[57,41,33,52,27,0,21,40,34,33],
[48,32,57,54,26,60,0,52,45,38],
[29,20,51,33,6,41,29,0,38,29],
[38,29,57,33,24,47,36,43,0,38],
[39,38,34,51,36,48,43,52,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,33,33,43,24,28,33,32,39],
[45,0,39,41,44,40,38,39,39,45],
[48,42,0,42,45,37,42,42,44,49],
[48,40,39,0,44,35,38,40,36,49],
[38,37,36,37,0,31,32,33,40,49],
[57,41,44,46,50,0,43,45,40,53],
[53,43,39,43,49,38,0,35,42,47],
[48,42,39,41,48,36,46,0,37,48],
[49,42,37,45,41,41,39,44,0,43],
[42,36,32,32,32,28,34,33,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,45,36,42,38,40,44,43,50],
[39,0,38,38,41,38,41,35,36,40],
[36,43,0,44,41,46,42,39,45,39],
[45,43,37,0,42,41,40,41,41,39],
[39,40,40,39,0,42,42,41,45,42],
[43,43,35,40,39,0,42,38,43,41],
[41,40,39,41,39,39,0,44,39,42],
[37,46,42,40,40,43,37,0,46,38],
[38,45,36,40,36,38,42,35,0,38],
[31,41,42,42,39,40,39,43,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,35,48,32,44,41,49,35,34],
[42,0,45,42,49,49,55,55,44,31],
[46,36,0,42,31,38,44,51,46,39],
[33,39,39,0,38,49,36,40,34,42],
[49,32,50,43,0,38,47,47,45,35],
[37,32,43,32,43,0,46,35,49,43],
[40,26,37,45,34,35,0,42,31,36],
[32,26,30,41,34,46,39,0,46,38],
[46,37,35,47,36,32,50,35,0,34],
[47,50,42,39,46,38,45,43,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,44,33,45,46,41,46,46,34],
[27,0,18,6,11,22,13,39,35,26],
[37,63,0,32,25,32,32,52,56,33],
[48,75,49,0,38,50,45,65,55,50],
[36,70,56,43,0,47,58,69,52,41],
[35,59,49,31,34,0,40,38,59,60],
[40,68,49,36,23,41,0,53,54,39],
[35,42,29,16,12,43,28,0,28,32],
[35,46,25,26,29,22,27,53,0,36],
[47,55,48,31,40,21,42,49,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,41,53,57,36,56,58,66,46],
[36,0,36,43,49,34,59,38,46,37],
[40,45,0,58,47,36,46,47,55,47],
[28,38,23,0,46,28,57,26,46,15],
[24,32,34,35,0,45,55,60,52,38],
[45,47,45,53,36,0,66,67,64,35],
[25,22,35,24,26,15,0,31,42,17],
[23,43,34,55,21,14,50,0,50,22],
[15,35,26,35,29,17,39,31,0,17],
[35,44,34,66,43,46,64,59,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,40,50,43,50,46,45,58],
[42,0,26,15,29,25,44,36,44,22],
[42,55,0,34,47,30,63,46,51,42],
[41,66,47,0,50,38,55,43,42,35],
[31,52,34,31,0,31,52,28,38,19],
[38,56,51,43,50,0,58,47,38,54],
[31,37,18,26,29,23,0,21,38,11],
[35,45,35,38,53,34,60,0,41,32],
[36,37,30,39,43,43,43,40,0,34],
[23,59,39,46,62,27,70,49,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,33,38,42,37,53,39,46,48],
[45,0,48,35,36,47,53,30,40,48],
[48,33,0,33,51,37,57,41,45,38],
[43,46,48,0,40,59,57,51,55,48],
[39,45,30,41,0,36,54,42,50,37],
[44,34,44,22,45,0,41,54,44,39],
[28,28,24,24,27,40,0,36,25,30],
[42,51,40,30,39,27,45,0,40,39],
[35,41,36,26,31,37,56,41,0,48],
[33,33,43,33,44,42,51,42,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,34,40,37,34,27,43,36,40],
[42,0,36,44,35,34,33,43,45,42],
[47,45,0,47,39,46,36,42,42,47],
[41,37,34,0,36,37,31,38,41,36],
[44,46,42,45,0,39,41,47,42,45],
[47,47,35,44,42,0,41,43,52,49],
[54,48,45,50,40,40,0,44,52,48],
[38,38,39,43,34,38,37,0,43,42],
[45,36,39,40,39,29,29,38,0,40],
[41,39,34,45,36,32,33,39,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,43,40,41,40,32,27,39,38],
[51,0,34,45,40,46,39,42,39,36],
[38,47,0,49,38,48,35,33,46,33],
[41,36,32,0,29,38,29,20,33,30],
[40,41,43,52,0,45,39,30,37,30],
[41,35,33,43,36,0,36,28,40,33],
[49,42,46,52,42,45,0,35,47,44],
[54,39,48,61,51,53,46,0,43,42],
[42,42,35,48,44,41,34,38,0,34],
[43,45,48,51,51,48,37,39,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,43,35,26,35,36,32,38,38],
[49,0,51,47,38,58,41,38,46,45],
[38,30,0,32,31,37,39,35,48,44],
[46,34,49,0,44,52,40,42,36,42],
[55,43,50,37,0,42,49,48,55,49],
[46,23,44,29,39,0,34,35,29,45],
[45,40,42,41,32,47,0,34,44,36],
[49,43,46,39,33,46,47,0,51,43],
[43,35,33,45,26,52,37,30,0,43],
[43,36,37,39,32,36,45,38,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,41,39,31,40,30,36,43,37],
[33,0,33,38,41,41,35,38,39,35],
[40,48,0,41,43,40,42,41,47,38],
[42,43,40,0,43,37,34,35,43,38],
[50,40,38,38,0,41,39,32,51,33],
[41,40,41,44,40,0,32,30,40,34],
[51,46,39,47,42,49,0,42,50,46],
[45,43,40,46,49,51,39,0,52,42],
[38,42,34,38,30,41,31,29,0,36],
[44,46,43,43,48,47,35,39,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,36,44,42,37,36,45,39,35],
[33,0,34,42,34,33,30,36,40,33],
[45,47,0,49,48,45,38,45,40,42],
[37,39,32,0,38,33,40,42,31,29],
[39,47,33,43,0,40,36,40,37,30],
[44,48,36,48,41,0,41,49,41,39],
[45,51,43,41,45,40,0,47,37,37],
[36,45,36,39,41,32,34,0,39,32],
[42,41,41,50,44,40,44,42,0,38],
[46,48,39,52,51,42,44,49,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,32,26,19,24,0,19,13,23],
[53,0,27,27,14,20,15,37,25,36],
[49,54,0,25,37,40,16,37,25,49],
[55,54,56,0,51,37,37,59,42,54],
[62,67,44,30,0,44,43,59,43,57],
[57,61,41,44,37,0,37,42,40,66],
[81,66,65,44,38,44,0,53,59,53],
[62,44,44,22,22,39,28,0,30,44],
[68,56,56,39,38,41,22,51,0,55],
[58,45,32,27,24,15,28,37,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,34,47,46,43,51,40,38,38],
[44,0,36,38,40,40,42,34,38,30],
[47,45,0,44,46,55,40,39,43,42],
[34,43,37,0,45,41,36,37,45,43],
[35,41,35,36,0,38,42,40,42,41],
[38,41,26,40,43,0,35,38,38,33],
[30,39,41,45,39,46,0,33,48,40],
[41,47,42,44,41,43,48,0,48,37],
[43,43,38,36,39,43,33,33,0,33],
[43,51,39,38,40,48,41,44,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,51,59,39,34,40,41,29,46],
[32,0,41,38,45,32,39,28,20,63],
[30,40,0,47,46,38,42,34,26,43],
[22,43,34,0,37,45,22,28,34,53],
[42,36,35,44,0,32,51,53,40,62],
[47,49,43,36,49,0,35,52,44,47],
[41,42,39,59,30,46,0,34,37,66],
[40,53,47,53,28,29,47,0,39,53],
[52,61,55,47,41,37,44,42,0,65],
[35,18,38,28,19,34,15,28,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,40,36,39,42,43,39,37,39],
[41,0,37,43,42,42,46,44,43,38],
[41,44,0,36,49,39,43,34,38,41],
[45,38,45,0,48,43,45,40,43,41],
[42,39,32,33,0,33,37,36,36,34],
[39,39,42,38,48,0,38,38,45,44],
[38,35,38,36,44,43,0,38,39,38],
[42,37,47,41,45,43,43,0,40,37],
[44,38,43,38,45,36,42,41,0,42],
[42,43,40,40,47,37,43,44,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,48,52,37,36,46,64,37,46],
[40,0,53,42,43,51,52,54,50,59],
[33,28,0,38,29,30,33,53,36,37],
[29,39,43,0,43,38,42,43,39,45],
[44,38,52,38,0,35,41,54,48,45],
[45,30,51,43,46,0,44,69,39,45],
[35,29,48,39,40,37,0,59,49,39],
[17,27,28,38,27,12,22,0,18,27],
[44,31,45,42,33,42,32,63,0,33],
[35,22,44,36,36,36,42,54,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,32,25,25,44,22,35,35,24],
[40,0,35,32,42,46,31,41,42,34],
[49,46,0,32,34,49,35,32,38,33],
[56,49,49,0,51,39,46,57,47,50],
[56,39,47,30,0,50,38,36,40,42],
[37,35,32,42,31,0,36,32,35,35],
[59,50,46,35,43,45,0,41,49,45],
[46,40,49,24,45,49,40,0,49,43],
[46,39,43,34,41,46,32,32,0,39],
[57,47,48,31,39,46,36,38,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,34,41,38,35,39,40,42,30],
[37,0,34,34,36,35,30,37,42,36],
[47,47,0,42,43,45,35,39,48,37],
[40,47,39,0,37,42,42,44,41,37],
[43,45,38,44,0,38,37,46,49,38],
[46,46,36,39,43,0,38,45,45,38],
[42,51,46,39,44,43,0,45,50,44],
[41,44,42,37,35,36,36,0,44,38],
[39,39,33,40,32,36,31,37,0,41],
[51,45,44,44,43,43,37,43,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,35,43,54,35,43,43,39,41],
[41,0,38,41,43,42,36,34,43,28],
[46,43,0,51,48,40,50,39,42,46],
[38,40,30,0,43,42,45,34,48,33],
[27,38,33,38,0,39,42,41,42,32],
[46,39,41,39,42,0,44,40,48,39],
[38,45,31,36,39,37,0,32,44,35],
[38,47,42,47,40,41,49,0,52,44],
[42,38,39,33,39,33,37,29,0,35],
[40,53,35,48,49,42,46,37,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,26,41,40,43,33,33,38,46],
[36,0,44,47,39,46,41,38,50,52],
[55,37,0,54,43,49,53,35,39,47],
[40,34,27,0,34,38,31,25,42,25],
[41,42,38,47,0,56,40,41,40,42],
[38,35,32,43,25,0,34,27,43,41],
[48,40,28,50,41,47,0,40,46,45],
[48,43,46,56,40,54,41,0,51,50],
[43,31,42,39,41,38,35,30,0,32],
[35,29,34,56,39,40,36,31,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,32,42,32,38,40,36,26,39],
[47,0,36,36,34,39,39,34,30,28],
[49,45,0,49,35,45,35,37,28,32],
[39,45,32,0,31,38,41,36,32,36],
[49,47,46,50,0,44,48,40,37,42],
[43,42,36,43,37,0,44,31,40,32],
[41,42,46,40,33,37,0,35,36,37],
[45,47,44,45,41,50,46,0,40,42],
[55,51,53,49,44,41,45,41,0,38],
[42,53,49,45,39,49,44,39,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,39,45,43,38,30,18,26,56],
[41,0,33,42,40,39,27,32,39,52],
[42,48,0,40,54,40,46,46,38,48],
[36,39,41,0,38,33,37,31,30,41],
[38,41,27,43,0,34,33,40,37,50],
[43,42,41,48,47,0,38,28,39,43],
[51,54,35,44,48,43,0,44,42,55],
[63,49,35,50,41,53,37,0,26,62],
[55,42,43,51,44,42,39,55,0,46],
[25,29,33,40,31,38,26,19,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,41,38,40,32,37,33,36,39],
[48,0,46,38,49,43,42,45,44,42],
[40,35,0,33,45,31,38,35,34,47],
[43,43,48,0,46,40,42,44,37,47],
[41,32,36,35,0,29,33,37,40,34],
[49,38,50,41,52,0,42,39,44,42],
[44,39,43,39,48,39,0,44,39,43],
[48,36,46,37,44,42,37,0,42,39],
[45,37,47,44,41,37,42,39,0,44],
[42,39,34,34,47,39,38,42,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,35,42,54,50,49,46,56,36],
[42,0,33,45,43,45,47,35,56,47],
[46,48,0,43,54,55,50,37,64,48],
[39,36,38,0,40,48,50,33,63,50],
[27,38,27,41,0,43,41,35,61,49],
[31,36,26,33,38,0,42,34,54,41],
[32,34,31,31,40,39,0,36,46,37],
[35,46,44,48,46,47,45,0,61,49],
[25,25,17,18,20,27,35,20,0,32],
[45,34,33,31,32,40,44,32,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,28,47,20,17,37,21,34,42],
[36,0,34,57,25,24,17,40,18,28],
[53,47,0,44,24,54,34,47,16,46],
[34,24,37,0,20,36,15,40,9,24],
[61,56,57,61,0,52,32,42,48,43],
[64,57,27,45,29,0,47,59,29,53],
[44,64,47,66,49,34,0,40,53,60],
[60,41,34,41,39,22,41,0,40,40],
[47,63,65,72,33,52,28,41,0,48],
[39,53,35,57,38,28,21,41,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,38,40,42,44,40,42,43,46],
[39,0,42,47,43,42,43,47,47,42],
[43,39,0,47,46,45,39,42,43,47],
[41,34,34,0,35,41,41,43,39,41],
[39,38,35,46,0,45,36,38,39,39],
[37,39,36,40,36,0,35,41,39,37],
[41,38,42,40,45,46,0,44,44,41],
[39,34,39,38,43,40,37,0,40,36],
[38,34,38,42,42,42,37,41,0,37],
[35,39,34,40,42,44,40,45,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,39,50,47,43,38,37,42,39],
[41,0,42,44,48,43,39,36,33,41],
[42,39,0,39,45,48,37,35,40,37],
[31,37,42,0,54,48,39,38,30,32],
[34,33,36,27,0,37,28,37,36,32],
[38,38,33,33,44,0,37,32,28,36],
[43,42,44,42,53,44,0,41,40,34],
[44,45,46,43,44,49,40,0,43,45],
[39,48,41,51,45,53,41,38,0,38],
[42,40,44,49,49,45,47,36,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,41,39,42,42,49,44,39,34],
[33,0,38,15,46,29,49,46,25,37],
[40,43,0,31,47,32,46,34,37,39],
[42,66,50,0,58,59,75,50,32,34],
[39,35,34,23,0,32,52,42,26,39],
[39,52,49,22,49,0,50,42,42,33],
[32,32,35,6,29,31,0,34,24,21],
[37,35,47,31,39,39,47,0,32,47],
[42,56,44,49,55,39,57,49,0,44],
[47,44,42,47,42,48,60,34,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,38,50,30,36,33,49,35,48],
[28,0,54,20,40,39,20,47,31,38],
[43,27,0,27,43,27,19,38,41,45],
[31,61,54,0,48,54,24,42,29,22],
[51,41,38,33,0,33,22,32,44,35],
[45,42,54,27,48,0,31,43,31,34],
[48,61,62,57,59,50,0,65,48,39],
[32,34,43,39,49,38,16,0,32,34],
[46,50,40,52,37,50,33,49,0,20],
[33,43,36,59,46,47,42,47,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,45,47,41,42,45,40,38,41],
[40,0,41,44,43,43,49,46,41,36],
[36,40,0,43,37,33,37,36,39,37],
[34,37,38,0,36,34,42,38,41,35],
[40,38,44,45,0,40,40,36,37,38],
[39,38,48,47,41,0,41,43,38,36],
[36,32,44,39,41,40,0,39,35,40],
[41,35,45,43,45,38,42,0,42,33],
[43,40,42,40,44,43,46,39,0,35],
[40,45,44,46,43,45,41,48,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,51,34,42,37,47,40,50],
[38,0,36,41,35,38,39,41,43,40],
[41,45,0,47,41,42,37,40,39,47],
[30,40,34,0,41,40,40,37,44,41],
[47,46,40,40,0,40,44,45,49,47],
[39,43,39,41,41,0,36,42,38,42],
[44,42,44,41,37,45,0,42,41,44],
[34,40,41,44,36,39,39,0,45,40],
[41,38,42,37,32,43,40,36,0,44],
[31,41,34,40,34,39,37,41,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,37,31,43,32,46,41,45,36],
[44,0,48,37,46,43,57,41,53,44],
[44,33,0,28,39,41,51,48,41,57],
[50,44,53,0,37,38,52,43,58,49],
[38,35,42,44,0,34,36,40,51,40],
[49,38,40,43,47,0,52,50,55,61],
[35,24,30,29,45,29,0,41,33,44],
[40,40,33,38,41,31,40,0,46,44],
[36,28,40,23,30,26,48,35,0,36],
[45,37,24,32,41,20,37,37,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,30,33,43,36,40,31,33,35],
[41,0,35,38,43,40,37,41,37,40],
[51,46,0,52,40,56,56,62,55,45],
[48,43,29,0,52,56,54,37,32,46],
[38,38,41,29,0,43,44,39,40,34],
[45,41,25,25,38,0,32,38,46,34],
[41,44,25,27,37,49,0,40,39,39],
[50,40,19,44,42,43,41,0,42,44],
[48,44,26,49,41,35,42,39,0,33],
[46,41,36,35,47,47,42,37,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,43,45,40,51,39,39,42,43],
[38,0,39,37,40,45,38,37,41,41],
[38,42,0,28,41,41,39,34,41,41],
[36,44,53,0,42,49,49,42,45,42],
[41,41,40,39,0,46,41,44,40,39],
[30,36,40,32,35,0,37,39,32,42],
[42,43,42,32,40,44,0,43,39,40],
[42,44,47,39,37,42,38,0,35,39],
[39,40,40,36,41,49,42,46,0,42],
[38,40,40,39,42,39,41,42,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,51,31,45,33,31,41,39,46],
[56,0,69,52,44,38,44,49,54,65],
[30,12,0,28,38,34,26,35,48,36],
[50,29,53,0,57,51,55,36,54,47],
[36,37,43,24,0,34,35,35,44,38],
[48,43,47,30,47,0,46,51,54,57],
[50,37,55,26,46,35,0,37,52,45],
[40,32,46,45,46,30,44,0,54,48],
[42,27,33,27,37,27,29,27,0,57],
[35,16,45,34,43,24,36,33,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,53,44,48,67,38,28,32,38],
[17,0,46,31,51,59,45,32,30,47],
[28,35,0,37,45,24,34,19,34,28],
[37,50,44,0,41,33,53,58,49,38],
[33,30,36,40,0,28,44,29,26,17],
[14,22,57,48,53,0,42,38,33,30],
[43,36,47,28,37,39,0,28,28,31],
[53,49,62,23,52,43,53,0,22,46],
[49,51,47,32,55,48,53,59,0,61],
[43,34,53,43,64,51,50,35,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,33,38,36,31,52,39,34,33],
[51,0,48,47,36,34,58,48,41,41],
[48,33,0,46,38,42,47,46,41,34],
[43,34,35,0,43,42,50,40,42,33],
[45,45,43,38,0,41,53,47,42,35],
[50,47,39,39,40,0,50,55,38,39],
[29,23,34,31,28,31,0,27,27,22],
[42,33,35,41,34,26,54,0,38,26],
[47,40,40,39,39,43,54,43,0,36],
[48,40,47,48,46,42,59,55,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,35,41,48,47,34,39,53,43],
[32,0,38,35,37,40,32,42,39,38],
[46,43,0,40,49,39,46,44,45,48],
[40,46,41,0,43,40,38,48,44,45],
[33,44,32,38,0,40,26,43,43,38],
[34,41,42,41,41,0,41,42,46,38],
[47,49,35,43,55,40,0,48,49,47],
[42,39,37,33,38,39,33,0,42,34],
[28,42,36,37,38,35,32,39,0,34],
[38,43,33,36,43,43,34,47,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,41,42,42,38,41,42,42,39],
[35,0,31,34,42,36,38,34,46,34],
[40,50,0,43,53,41,47,40,52,41],
[39,47,38,0,44,47,52,34,43,42],
[39,39,28,37,0,35,33,35,40,40],
[43,45,40,34,46,0,45,38,41,37],
[40,43,34,29,48,36,0,38,40,26],
[39,47,41,47,46,43,43,0,50,39],
[39,35,29,38,41,40,41,31,0,31],
[42,47,40,39,41,44,55,42,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,35,34,36,44,43,41,53,48],
[48,0,40,39,40,46,44,49,49,46],
[46,41,0,39,36,46,39,52,46,44],
[47,42,42,0,41,52,40,47,53,47],
[45,41,45,40,0,49,39,43,51,51],
[37,35,35,29,32,0,39,36,44,39],
[38,37,42,41,42,42,0,45,48,39],
[40,32,29,34,38,45,36,0,51,42],
[28,32,35,28,30,37,33,30,0,45],
[33,35,37,34,30,42,42,39,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,45,47,44,47,42,44,40],
[42,0,32,43,35,40,42,35,39,36],
[42,49,0,46,38,45,43,39,50,35],
[36,38,35,0,38,41,35,36,44,29],
[34,46,43,43,0,43,43,39,50,35],
[37,41,36,40,38,0,35,44,46,32],
[34,39,38,46,38,46,0,27,48,28],
[39,46,42,45,42,37,54,0,42,42],
[37,42,31,37,31,35,33,39,0,35],
[41,45,46,52,46,49,53,39,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,41,39,41,46,42,43,48,51],
[27,0,28,33,34,37,32,31,37,37],
[40,53,0,41,42,48,44,45,50,47],
[42,48,40,0,44,43,40,42,44,43],
[40,47,39,37,0,41,36,43,41,44],
[35,44,33,38,40,0,37,34,39,43],
[39,49,37,41,45,44,0,47,44,40],
[38,50,36,39,38,47,34,0,45,46],
[33,44,31,37,40,42,37,36,0,43],
[30,44,34,38,37,38,41,35,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,56,58,49,47,66,45,43,40],
[45,0,51,58,41,67,52,38,51,51],
[25,30,0,26,32,39,47,28,36,38],
[23,23,55,0,23,32,46,29,28,36],
[32,40,49,58,0,40,40,41,56,43],
[34,14,42,49,41,0,46,27,38,38],
[15,29,34,35,41,35,0,32,29,41],
[36,43,53,52,40,54,49,0,45,58],
[38,30,45,53,25,43,52,36,0,52],
[41,30,43,45,38,43,40,23,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,46,47,45,43,42,44,33,38],
[48,0,49,51,44,54,41,39,42,42],
[35,32,0,47,48,41,38,35,39,40],
[34,30,34,0,37,46,39,32,40,38],
[36,37,33,44,0,48,41,39,43,36],
[38,27,40,35,33,0,38,35,29,36],
[39,40,43,42,40,43,0,34,38,39],
[37,42,46,49,42,46,47,0,42,42],
[48,39,42,41,38,52,43,39,0,45],
[43,39,41,43,45,45,42,39,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,46,36,41,46,44,43,57,56],
[33,0,24,32,32,36,36,40,44,31],
[35,57,0,33,27,46,44,40,44,44],
[45,49,48,0,52,45,53,50,65,40],
[40,49,54,29,0,50,38,40,36,47],
[35,45,35,36,31,0,36,30,40,47],
[37,45,37,28,43,45,0,42,56,46],
[38,41,41,31,41,51,39,0,43,42],
[24,37,37,16,45,41,25,38,0,47],
[25,50,37,41,34,34,35,39,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,34,40,49,43,39,41,41,29],
[45,0,37,43,46,37,48,45,45,40],
[47,44,0,49,49,36,54,43,50,43],
[41,38,32,0,38,35,35,46,40,38],
[32,35,32,43,0,24,32,31,51,31],
[38,44,45,46,57,0,37,33,49,36],
[42,33,27,46,49,44,0,40,54,36],
[40,36,38,35,50,48,41,0,42,37],
[40,36,31,41,30,32,27,39,0,22],
[52,41,38,43,50,45,45,44,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,33,33,49,22,38,44,11,25],
[55,0,47,27,42,37,37,48,38,22],
[48,34,0,28,31,32,28,38,13,29],
[48,54,53,0,42,34,41,48,37,43],
[32,39,50,39,0,37,33,39,36,39],
[59,44,49,47,44,0,38,45,41,41],
[43,44,53,40,48,43,0,59,37,51],
[37,33,43,33,42,36,22,0,21,33],
[70,43,68,44,45,40,44,60,0,56],
[56,59,52,38,42,40,30,48,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,62,61,42,48,30,52,42,44],
[26,0,50,53,37,33,29,38,33,27],
[19,31,0,58,32,29,16,39,18,17],
[20,28,23,0,27,22,18,33,22,16],
[39,44,49,54,0,42,48,56,40,45],
[33,48,52,59,39,0,29,41,38,27],
[51,52,65,63,33,52,0,58,48,46],
[29,43,42,48,25,40,23,0,41,37],
[39,48,63,59,41,43,33,40,0,29],
[37,54,64,65,36,54,35,44,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,32,38,45,30,34,40,43,35],
[41,0,38,39,41,45,42,48,44,37],
[49,43,0,44,48,42,40,40,45,40],
[43,42,37,0,43,39,39,51,46,42],
[36,40,33,38,0,32,37,43,43,42],
[51,36,39,42,49,0,47,50,49,44],
[47,39,41,42,44,34,0,43,48,39],
[41,33,41,30,38,31,38,0,37,28],
[38,37,36,35,38,32,33,44,0,39],
[46,44,41,39,39,37,42,53,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,42,38,45,37,35,33,42,20],
[40,0,37,34,45,32,25,29,44,32],
[39,44,0,48,44,41,39,39,52,36],
[43,47,33,0,44,49,34,37,44,40],
[36,36,37,37,0,30,21,32,29,21],
[44,49,40,32,51,0,36,31,40,37],
[46,56,42,47,60,45,0,43,49,35],
[48,52,42,44,49,50,38,0,39,42],
[39,37,29,37,52,41,32,42,0,34],
[61,49,45,41,60,44,46,39,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,43,43,43,57,43,19,19,81],
[57,0,19,19,19,57,19,19,19,57],
[38,62,0,19,0,57,0,19,57,57],
[38,62,62,0,0,38,0,0,38,38],
[38,62,81,81,0,57,24,19,57,57],
[24,24,24,43,24,0,24,24,43,24],
[38,62,81,81,57,57,0,57,57,57],
[62,62,62,81,62,57,24,0,81,81],
[62,62,24,43,24,38,24,0,0,62],
[0,24,24,43,24,57,24,0,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,47,39,49,40,41,45,41,40],
[37,0,39,45,48,41,43,48,41,47],
[34,42,0,43,35,42,39,47,45,47],
[42,36,38,0,34,40,42,42,35,47],
[32,33,46,47,0,43,34,35,38,39],
[41,40,39,41,38,0,34,43,39,40],
[40,38,42,39,47,47,0,40,45,47],
[36,33,34,39,46,38,41,0,39,44],
[40,40,36,46,43,42,36,42,0,41],
[41,34,34,34,42,41,34,37,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,43,48,48,46,40,46,43,44],
[44,0,40,47,48,50,43,44,48,51],
[38,41,0,44,48,46,41,40,49,41],
[33,34,37,0,48,47,38,37,45,41],
[33,33,33,33,0,36,33,34,37,33],
[35,31,35,34,45,0,36,32,38,37],
[41,38,40,43,48,45,0,40,44,48],
[35,37,41,44,47,49,41,0,49,47],
[38,33,32,36,44,43,37,32,0,41],
[37,30,40,40,48,44,33,34,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,56,47,40,47,67,40,56,19],
[53,0,33,58,58,33,44,42,42,35],
[25,48,0,53,42,0,23,26,21,19],
[34,23,28,0,53,23,39,28,23,28],
[41,23,39,28,0,30,62,21,51,14],
[34,48,81,58,51,0,51,40,21,19],
[14,37,58,42,19,30,0,14,21,33],
[41,39,55,53,60,41,67,0,53,44],
[25,39,60,58,30,60,60,28,0,44],
[62,46,62,53,67,62,48,37,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,38,34,50,41,53,48,42,38],
[47,0,39,38,47,51,49,51,46,44],
[43,42,0,48,48,45,47,52,39,44],
[47,43,33,0,42,41,41,47,36,36],
[31,34,33,39,0,36,31,38,31,25],
[40,30,36,40,45,0,39,50,38,45],
[28,32,34,40,50,42,0,47,31,29],
[33,30,29,34,43,31,34,0,34,34],
[39,35,42,45,50,43,50,47,0,46],
[43,37,37,45,56,36,52,47,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,41,37,42,31,37,39,45,40],
[43,0,45,43,31,36,39,33,42,40],
[40,36,0,37,36,33,37,37,33,35],
[44,38,44,0,37,37,45,42,45,36],
[39,50,45,44,0,38,40,38,46,41],
[50,45,48,44,43,0,42,45,46,36],
[44,42,44,36,41,39,0,49,44,44],
[42,48,44,39,43,36,32,0,44,40],
[36,39,48,36,35,35,37,37,0,43],
[41,41,46,45,40,45,37,41,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,34,40,49,47,35,42,45,44],
[41,0,39,45,37,54,36,45,42,33],
[47,42,0,39,42,45,34,35,33,47],
[41,36,42,0,33,45,38,41,43,44],
[32,44,39,48,0,35,30,39,38,47],
[34,27,36,36,46,0,49,32,41,42],
[46,45,47,43,51,32,0,40,36,47],
[39,36,46,40,42,49,41,0,51,45],
[36,39,48,38,43,40,45,30,0,55],
[37,48,34,37,34,39,34,36,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,52,42,47,36,34,37,39,40],
[25,0,26,19,43,40,37,30,27,27],
[29,55,0,30,60,51,43,52,45,52],
[39,62,51,0,62,36,30,43,40,44],
[34,38,21,19,0,23,45,34,41,27],
[45,41,30,45,58,0,49,40,30,32],
[47,44,38,51,36,32,0,39,20,35],
[44,51,29,38,47,41,42,0,51,38],
[42,54,36,41,40,51,61,30,0,39],
[41,54,29,37,54,49,46,43,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,22,36,48,35,24,47,34,24],
[34,0,38,36,51,51,31,31,57,20],
[59,43,0,25,51,40,44,54,70,33],
[45,45,56,0,38,45,42,29,57,45],
[33,30,30,43,0,34,31,30,30,20],
[46,30,41,36,47,0,31,54,54,32],
[57,50,37,39,50,50,0,44,50,59],
[34,50,27,52,51,27,37,0,50,47],
[47,24,11,24,51,27,31,31,0,20],
[57,61,48,36,61,49,22,34,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,39,36,33,31,40,30,27,41],
[50,0,40,36,33,37,40,29,33,44],
[42,41,0,41,30,32,39,32,36,41],
[45,45,40,0,37,35,45,37,39,42],
[48,48,51,44,0,37,45,38,38,48],
[50,44,49,46,44,0,46,40,43,45],
[41,41,42,36,36,35,0,33,35,38],
[51,52,49,44,43,41,48,0,39,42],
[54,48,45,42,43,38,46,42,0,46],
[40,37,40,39,33,36,43,39,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,48,26,40,34,33,42,44,43],
[54,0,40,21,36,31,47,43,31,51],
[33,41,0,34,28,25,32,34,31,39],
[55,60,47,0,45,41,57,40,42,57],
[41,45,53,36,0,38,40,40,47,57],
[47,50,56,40,43,0,53,47,40,53],
[48,34,49,24,41,28,0,41,37,36],
[39,38,47,41,41,34,40,0,45,50],
[37,50,50,39,34,41,44,36,0,41],
[38,30,42,24,24,28,45,31,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,40,37,37,45,46,40,31,44],
[40,0,34,42,40,41,40,47,41,44],
[41,47,0,38,50,44,41,45,40,42],
[44,39,43,0,41,47,40,50,46,46],
[44,41,31,40,0,44,46,46,43,42],
[36,40,37,34,37,0,43,38,42,34],
[35,41,40,41,35,38,0,39,34,41],
[41,34,36,31,35,43,42,0,32,44],
[50,40,41,35,38,39,47,49,0,52],
[37,37,39,35,39,47,40,37,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,49,48,46,42,47,51,40,41],
[41,0,34,26,26,25,42,37,29,16],
[32,47,0,66,39,53,46,53,47,54],
[33,55,15,0,49,44,36,39,40,46],
[35,55,42,32,0,38,45,39,34,35],
[39,56,28,37,43,0,40,39,36,42],
[34,39,35,45,36,41,0,55,42,36],
[30,44,28,42,42,42,26,0,33,39],
[41,52,34,41,47,45,39,48,0,59],
[40,65,27,35,46,39,45,42,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,48,30,43,60,27,37,42,53],
[26,0,49,44,27,39,29,20,36,42],
[33,32,0,44,22,43,41,26,44,35],
[51,37,37,0,41,49,19,18,33,47],
[38,54,59,40,0,56,37,26,44,50],
[21,42,38,32,25,0,21,23,28,37],
[54,52,40,62,44,60,0,46,39,50],
[44,61,55,63,55,58,35,0,31,53],
[39,45,37,48,37,53,42,50,0,54],
[28,39,46,34,31,44,31,28,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,35,46,32,32,32,46,46,32],
[49,0,49,14,46,14,14,14,14,14],
[46,32,0,46,46,46,32,46,46,32],
[35,67,35,0,32,32,67,35,67,67],
[49,35,35,49,0,14,35,49,49,35],
[49,67,35,49,67,0,35,49,49,35],
[49,67,49,14,46,46,0,14,46,46],
[35,67,35,46,32,32,67,0,32,32],
[35,67,35,14,32,32,35,49,0,32],
[49,67,49,14,46,46,35,49,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,38,41,27,34,35,41,29,31],
[46,0,43,33,35,42,40,43,42,37],
[43,38,0,34,37,39,40,42,44,38],
[40,48,47,0,33,40,37,46,39,31],
[54,46,44,48,0,46,37,49,35,39],
[47,39,42,41,35,0,29,47,31,38],
[46,41,41,44,44,52,0,48,44,40],
[40,38,39,35,32,34,33,0,28,32],
[52,39,37,42,46,50,37,53,0,52],
[50,44,43,50,42,43,41,49,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,43,44,34,43,43,42,45,36],
[41,0,44,47,41,42,43,45,36,43],
[38,37,0,36,34,39,41,39,41,40],
[37,34,45,0,31,49,41,40,42,36],
[47,40,47,50,0,51,46,43,39,40],
[38,39,42,32,30,0,36,43,36,39],
[38,38,40,40,35,45,0,42,42,44],
[39,36,42,41,38,38,39,0,47,42],
[36,45,40,39,42,45,39,34,0,37],
[45,38,41,45,41,42,37,39,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,59,35,27,32,33,13,30,30],
[54,0,48,56,45,34,40,34,36,39],
[22,33,0,27,39,23,29,27,27,38],
[46,25,54,0,25,26,32,23,28,40],
[54,36,42,56,0,30,26,37,41,60],
[49,47,58,55,51,0,31,46,51,47],
[48,41,52,49,55,50,0,38,55,44],
[68,47,54,58,44,35,43,0,54,46],
[51,45,54,53,40,30,26,27,0,30],
[51,42,43,41,21,34,37,35,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,42,46,44,44,44,44,39,41],
[44,0,41,47,49,43,44,47,45,35],
[39,40,0,43,39,46,43,40,36,40],
[35,34,38,0,42,39,42,42,37,31],
[37,32,42,39,0,41,40,44,36,38],
[37,38,35,42,40,0,43,40,37,41],
[37,37,38,39,41,38,0,44,38,39],
[37,34,41,39,37,41,37,0,38,38],
[42,36,45,44,45,44,43,43,0,38],
[40,46,41,50,43,40,42,43,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,41,46,46,35,40,43,43,42],
[41,0,47,49,46,38,42,45,42,44],
[40,34,0,45,39,39,42,46,39,44],
[35,32,36,0,40,37,34,43,40,36],
[35,35,42,41,0,31,35,38,30,39],
[46,43,42,44,50,0,38,41,41,46],
[41,39,39,47,46,43,0,45,42,47],
[38,36,35,38,43,40,36,0,33,41],
[38,39,42,41,51,40,39,48,0,40],
[39,37,37,45,42,35,34,40,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,39,37,47,41,41,31,54,38],
[38,0,38,34,44,38,53,35,49,34],
[42,43,0,41,50,41,57,33,45,44],
[44,47,40,0,48,41,58,41,51,43],
[34,37,31,33,0,35,50,23,31,34],
[40,43,40,40,46,0,56,35,41,35],
[40,28,24,23,31,25,0,18,41,24],
[50,46,48,40,58,46,63,0,47,40],
[27,32,36,30,50,40,40,34,0,33],
[43,47,37,38,47,46,57,41,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,36,52,45,56,51,41,56,39],
[46,0,41,45,47,43,39,51,61,44],
[45,40,0,50,48,53,51,54,56,47],
[29,36,31,0,44,41,40,36,51,36],
[36,34,33,37,0,48,44,48,59,41],
[25,38,28,40,33,0,40,34,41,32],
[30,42,30,41,37,41,0,39,44,34],
[40,30,27,45,33,47,42,0,48,39],
[25,20,25,30,22,40,37,33,0,25],
[42,37,34,45,40,49,47,42,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,12,52,45,45,35,27,47,30],
[0,0,0,0,15,10,3,0,0,0],
[69,81,0,72,38,79,72,54,74,69],
[29,81,9,0,15,30,23,9,66,49],
[36,66,43,66,0,66,59,46,63,63],
[36,71,2,51,15,0,54,22,51,29],
[46,78,9,58,22,27,0,24,53,51],
[54,81,27,72,35,59,57,0,69,49],
[34,81,7,15,18,30,28,12,0,20],
[51,81,12,32,18,52,30,32,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,40,38,48,42,42,36,40,38],
[41,0,40,31,39,19,36,38,26,33],
[41,41,0,36,49,30,42,38,34,44],
[43,50,45,0,54,38,39,41,42,38],
[33,42,32,27,0,37,33,39,27,47],
[39,62,51,43,44,0,48,56,44,49],
[39,45,39,42,48,33,0,40,44,32],
[45,43,43,40,42,25,41,0,43,34],
[41,55,47,39,54,37,37,38,0,49],
[43,48,37,43,34,32,49,47,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,47,46,48,42,39,44,41],
[40,0,36,44,45,46,38,39,38,35],
[40,45,0,46,51,48,43,37,38,40],
[34,37,35,0,35,44,38,36,39,41],
[35,36,30,46,0,45,41,36,38,36],
[33,35,33,37,36,0,32,32,36,33],
[39,43,38,43,40,49,0,40,42,42],
[42,42,44,45,45,49,41,0,44,40],
[37,43,43,42,43,45,39,37,0,39],
[40,46,41,40,45,48,39,41,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,45,30,42,44,35,42,48,45],
[52,0,65,38,58,59,50,44,54,59],
[36,16,0,32,41,43,42,37,38,48],
[51,43,49,0,48,43,56,51,51,35],
[39,23,40,33,0,43,30,45,44,39],
[37,22,38,38,38,0,29,42,33,36],
[46,31,39,25,51,52,0,49,58,37],
[39,37,44,30,36,39,32,0,31,37],
[33,27,43,30,37,48,23,50,0,42],
[36,22,33,46,42,45,44,44,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,60,38,58,47,44,51,57,59],
[37,0,58,41,59,42,36,42,47,48],
[21,23,0,27,49,27,29,35,27,37],
[43,40,54,0,58,42,44,45,48,51],
[23,22,32,23,0,18,27,29,28,39],
[34,39,54,39,63,0,41,44,57,49],
[37,45,52,37,54,40,0,39,37,52],
[30,39,46,36,52,37,42,0,40,54],
[24,34,54,33,53,24,44,41,0,42],
[22,33,44,30,42,32,29,27,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,45,40,58,40,33,44,39,48],
[41,0,47,39,63,47,44,53,57,37],
[36,34,0,22,54,42,26,33,30,29],
[41,42,59,0,49,57,32,40,54,38],
[23,18,27,32,0,26,13,27,35,33],
[41,34,39,24,55,0,27,39,35,33],
[48,37,55,49,68,54,0,42,58,40],
[37,28,48,41,54,42,39,0,47,30],
[42,24,51,27,46,46,23,34,0,25],
[33,44,52,43,48,48,41,51,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,42,46,27,32,48,37,28,24],
[44,0,42,48,13,46,58,37,32,35],
[39,39,0,58,30,47,50,42,44,48],
[35,33,23,0,32,33,29,36,25,37],
[54,68,51,49,0,48,55,65,49,34],
[49,35,34,48,33,0,47,40,33,34],
[33,23,31,52,26,34,0,39,23,26],
[44,44,39,45,16,41,42,0,29,44],
[53,49,37,56,32,48,58,52,0,51],
[57,46,33,44,47,47,55,37,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,61,27,27,44,27,44,44,61],
[54,0,37,20,30,20,17,17,54,64],
[20,44,0,20,47,3,17,17,20,64],
[54,61,61,0,44,61,27,34,78,64],
[54,51,34,37,0,17,17,34,51,64],
[37,61,78,20,64,0,44,34,64,64],
[54,64,64,54,64,37,0,34,54,64],
[37,64,64,47,47,47,47,0,64,64],
[37,27,61,3,30,17,27,17,0,64],
[20,17,17,17,17,17,17,17,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,42,40,43,46,35,42,40,37],
[43,0,39,44,46,43,39,41,32,33],
[39,42,0,38,45,47,36,49,40,40],
[41,37,43,0,47,44,42,40,39,41],
[38,35,36,34,0,39,34,39,34,34],
[35,38,34,37,42,0,36,42,40,44],
[46,42,45,39,47,45,0,47,45,43],
[39,40,32,41,42,39,34,0,38,38],
[41,49,41,42,47,41,36,43,0,40],
[44,48,41,40,47,37,38,43,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,36,27,41,23,23,34,33,40],
[49,0,55,29,37,39,27,35,31,40],
[45,26,0,25,31,47,31,33,35,38],
[54,52,56,0,53,46,41,32,62,38],
[40,44,50,28,0,30,25,38,39,30],
[58,42,34,35,51,0,30,49,38,41],
[58,54,50,40,56,51,0,47,56,47],
[47,46,48,49,43,32,34,0,44,39],
[48,50,46,19,42,43,25,37,0,29],
[41,41,43,43,51,40,34,42,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,33,40,39,42,29,43,43,34],
[47,0,42,51,33,46,35,41,48,41],
[48,39,0,45,38,51,41,44,42,49],
[41,30,36,0,33,45,33,45,37,32],
[42,48,43,48,0,47,44,42,43,40],
[39,35,30,36,34,0,25,41,37,37],
[52,46,40,48,37,56,0,54,49,46],
[38,40,37,36,39,40,27,0,37,29],
[38,33,39,44,38,44,32,44,0,49],
[47,40,32,49,41,44,35,52,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,36,38,37,39,33,40,34,35],
[43,0,41,44,39,40,36,40,34,41],
[45,40,0,43,43,38,44,40,37,42],
[43,37,38,0,48,44,39,40,36,43],
[44,42,38,33,0,41,38,44,38,38],
[42,41,43,37,40,0,40,38,34,39],
[48,45,37,42,43,41,0,37,37,40],
[41,41,41,41,37,43,44,0,44,42],
[47,47,44,45,43,47,44,37,0,47],
[46,40,39,38,43,42,41,39,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,45,51,35,40,45,43,43,43],
[42,0,49,47,40,41,42,41,42,48],
[36,32,0,44,35,32,42,39,34,39],
[30,34,37,0,29,31,36,35,28,35],
[46,41,46,52,0,44,49,46,43,39],
[41,40,49,50,37,0,43,44,44,42],
[36,39,39,45,32,38,0,37,35,37],
[38,40,42,46,35,37,44,0,38,41],
[38,39,47,53,38,37,46,43,0,38],
[38,33,42,46,42,39,44,40,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,25,41,40,43,39,36,48,36],
[47,0,31,43,55,53,40,34,53,41],
[56,50,0,47,57,54,55,38,50,43],
[40,38,34,0,44,45,42,45,48,44],
[41,26,24,37,0,50,31,26,34,19],
[38,28,27,36,31,0,33,28,43,37],
[42,41,26,39,50,48,0,34,54,34],
[45,47,43,36,55,53,47,0,45,48],
[33,28,31,33,47,38,27,36,0,29],
[45,40,38,37,62,44,47,33,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,46,41,60,39,52,31,43,36],
[38,0,49,43,59,46,48,34,44,45],
[35,32,0,40,52,39,41,42,41,26],
[40,38,41,0,56,46,54,44,42,40],
[21,22,29,25,0,25,24,19,21,21],
[42,35,42,35,56,0,38,41,52,38],
[29,33,40,27,57,43,0,30,46,37],
[50,47,39,37,62,40,51,0,48,32],
[38,37,40,39,60,29,35,33,0,33],
[45,36,55,41,60,43,44,49,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,42,42,42,35,42,36,46,45],
[40,0,50,37,41,43,50,42,55,39],
[39,31,0,58,41,31,51,42,44,48],
[39,44,23,0,33,29,46,42,44,43],
[39,40,40,48,0,35,54,33,44,45],
[46,38,50,52,46,0,55,48,53,41],
[39,31,30,35,27,26,0,33,43,39],
[45,39,39,39,48,33,48,0,56,44],
[35,26,37,37,37,28,38,25,0,39],
[36,42,33,38,36,40,42,37,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,38,38,40,46,34,41,41,35],
[40,0,44,33,38,45,35,46,44,38],
[43,37,0,39,42,41,31,45,36,38],
[43,48,42,0,42,51,38,38,43,39],
[41,43,39,39,0,44,42,43,41,42],
[35,36,40,30,37,0,34,43,39,41],
[47,46,50,43,39,47,0,49,37,40],
[40,35,36,43,38,38,32,0,31,35],
[40,37,45,38,40,42,44,50,0,42],
[46,43,43,42,39,40,41,46,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,50,35,37,41,45,37,41],
[39,0,46,46,33,40,40,43,38,35],
[39,35,0,43,28,33,35,44,32,33],
[31,35,38,0,31,35,37,38,28,35],
[46,48,53,50,0,55,42,49,43,40],
[44,41,48,46,26,0,40,50,41,34],
[40,41,46,44,39,41,0,50,37,46],
[36,38,37,43,32,31,31,0,28,30],
[44,43,49,53,38,40,44,53,0,41],
[40,46,48,46,41,47,35,51,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,32,37,44,36,32,46,43,31],
[53,0,41,54,52,51,50,49,44,38],
[49,40,0,55,46,48,48,47,43,42],
[44,27,26,0,35,35,30,36,30,32],
[37,29,35,46,0,39,41,43,43,32],
[45,30,33,46,42,0,39,45,44,28],
[49,31,33,51,40,42,0,43,39,31],
[35,32,34,45,38,36,38,0,37,33],
[38,37,38,51,38,37,42,44,0,34],
[50,43,39,49,49,53,50,48,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,24,38,47,44,35,35,30,37],
[53,0,42,40,53,50,47,49,48,43],
[57,39,0,49,57,51,48,48,51,49],
[43,41,32,0,39,43,30,36,41,37],
[34,28,24,42,0,36,35,33,29,36],
[37,31,30,38,45,0,34,37,32,35],
[46,34,33,51,46,47,0,38,44,43],
[46,32,33,45,48,44,43,0,40,32],
[51,33,30,40,52,49,37,41,0,36],
[44,38,32,44,45,46,38,49,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,36,36,44,49,42,40,37,55],
[39,0,35,35,35,42,28,52,37,50],
[45,46,0,37,49,46,48,43,49,46],
[45,46,44,0,36,37,50,50,54,55],
[37,46,32,45,0,53,45,35,52,45],
[32,39,35,44,28,0,45,38,39,43],
[39,53,33,31,36,36,0,52,54,41],
[41,29,38,31,46,43,29,0,41,31],
[44,44,32,27,29,42,27,40,0,32],
[26,31,35,26,36,38,40,50,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,38,35,43,36,40,43,34,36],
[28,0,43,37,37,30,40,40,34,37],
[43,38,0,33,32,38,42,42,27,34],
[46,44,48,0,42,42,43,54,40,45],
[38,44,49,39,0,41,46,43,40,41],
[45,51,43,39,40,0,53,53,43,43],
[41,41,39,38,35,28,0,40,27,38],
[38,41,39,27,38,28,41,0,31,35],
[47,47,54,41,41,38,54,50,0,43],
[45,44,47,36,40,38,43,46,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,35,41,35,48,37,48,42,41],
[20,0,22,27,30,34,23,26,25,28],
[46,59,0,44,38,53,51,48,44,53],
[40,54,37,0,44,50,42,44,48,51],
[46,51,43,37,0,51,42,46,46,43],
[33,47,28,31,30,0,39,39,33,34],
[44,58,30,39,39,42,0,38,38,46],
[33,55,33,37,35,42,43,0,40,44],
[39,56,37,33,35,48,43,41,0,35],
[40,53,28,30,38,47,35,37,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,35,34,38,40,38,34,38,35],
[35,0,40,31,24,41,42,35,37,24],
[46,41,0,34,42,44,50,42,46,35],
[47,50,47,0,40,41,51,52,49,46],
[43,57,39,41,0,42,44,42,41,41],
[41,40,37,40,39,0,43,40,39,35],
[43,39,31,30,37,38,0,39,41,36],
[47,46,39,29,39,41,42,0,45,30],
[43,44,35,32,40,42,40,36,0,35],
[46,57,46,35,40,46,45,51,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,41,31,36,34,32,37,37,36],
[55,0,50,39,42,44,39,43,51,46],
[40,31,0,36,35,37,29,34,35,35],
[50,42,45,0,35,45,36,41,37,38],
[45,39,46,46,0,42,41,41,42,43],
[47,37,44,36,39,0,33,34,35,33],
[49,42,52,45,40,48,0,45,42,44],
[44,38,47,40,40,47,36,0,36,36],
[44,30,46,44,39,46,39,45,0,37],
[45,35,46,43,38,48,37,45,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,28,19,39,35,43,35,24,48],
[55,0,43,37,51,47,52,54,33,47],
[53,38,0,42,48,49,50,42,31,36],
[62,44,39,0,48,44,49,44,41,44],
[42,30,33,33,0,36,50,45,35,42],
[46,34,32,37,45,0,43,43,22,40],
[38,29,31,32,31,38,0,43,23,31],
[46,27,39,37,36,38,38,0,35,37],
[57,48,50,40,46,59,58,46,0,49],
[33,34,45,37,39,41,50,44,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,36,42,43,38,42,39,44,40],
[41,0,43,47,39,38,46,40,41,43],
[45,38,0,47,48,47,48,40,38,47],
[39,34,34,0,38,43,46,37,37,36],
[38,42,33,43,0,42,47,44,41,45],
[43,43,34,38,39,0,51,46,38,38],
[39,35,33,35,34,30,0,36,34,35],
[42,41,41,44,37,35,45,0,36,37],
[37,40,43,44,40,43,47,45,0,36],
[41,38,34,45,36,43,46,44,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,32,45,51,35,38,39,42,43],
[49,0,43,44,47,44,32,43,56,40],
[49,38,0,44,58,47,43,48,55,48],
[36,37,37,0,48,31,37,42,37,35],
[30,34,23,33,0,30,31,27,28,28],
[46,37,34,50,51,0,48,43,49,42],
[43,49,38,44,50,33,0,42,47,37],
[42,38,33,39,54,38,39,0,41,36],
[39,25,26,44,53,32,34,40,0,28],
[38,41,33,46,53,39,44,45,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,45,41,36,34,36,33,36,29],
[50,0,46,41,47,36,41,38,37,35],
[36,35,0,35,35,28,32,32,34,31],
[40,40,46,0,40,38,44,35,38,30],
[45,34,46,41,0,35,41,36,38,30],
[47,45,53,43,46,0,45,38,41,30],
[45,40,49,37,40,36,0,32,42,37],
[48,43,49,46,45,43,49,0,39,37],
[45,44,47,43,43,40,39,42,0,43],
[52,46,50,51,51,51,44,44,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,39,58,38,58,75,58,58],
[42,0,37,39,58,36,39,56,19,39],
[42,44,0,44,58,25,58,55,38,64],
[42,42,37,0,58,36,58,75,19,75],
[23,23,23,23,0,42,45,42,17,43],
[43,45,56,45,39,0,39,75,39,45],
[23,42,23,23,36,42,0,55,17,43],
[6,25,26,6,39,6,26,0,0,26],
[23,62,43,62,64,42,64,81,0,81],
[23,42,17,6,38,36,38,55,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,45,48,41,59,39,47,47,50],
[38,0,47,42,57,44,37,46,52,30],
[36,34,0,26,46,37,31,35,45,47],
[33,39,55,0,57,36,43,28,28,30],
[40,24,35,24,0,37,26,41,39,26],
[22,37,44,45,44,0,36,49,48,36],
[42,44,50,38,55,45,0,51,47,31],
[34,35,46,53,40,32,30,0,39,45],
[34,29,36,53,42,33,34,42,0,35],
[31,51,34,51,55,45,50,36,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,48,41,39,41,43,35,36,42],
[29,0,40,29,35,35,27,30,33,31],
[33,41,0,40,36,39,39,39,29,34],
[40,52,41,0,47,45,49,33,39,38],
[42,46,45,34,0,38,46,43,37,37],
[40,46,42,36,43,0,41,34,33,37],
[38,54,42,32,35,40,0,40,39,33],
[46,51,42,48,38,47,41,0,36,40],
[45,48,52,42,44,48,42,45,0,33],
[39,50,47,43,44,44,48,41,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,47,47,41,42,41,35,41,48],
[42,0,47,45,46,43,35,33,36,47],
[34,34,0,41,33,38,34,31,38,34],
[34,36,40,0,26,36,33,31,35,37],
[40,35,48,55,0,47,47,40,37,46],
[39,38,43,45,34,0,39,27,39,35],
[40,46,47,48,34,42,0,34,38,40],
[46,48,50,50,41,54,47,0,51,39],
[40,45,43,46,44,42,43,30,0,36],
[33,34,47,44,35,46,41,42,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,20,25,35,29,34,26,21,23],
[58,0,53,55,56,47,51,59,37,43],
[61,28,0,47,42,38,53,66,30,41],
[56,26,34,0,34,33,54,36,39,50],
[46,25,39,47,0,30,55,57,36,33],
[52,34,43,48,51,0,40,48,30,36],
[47,30,28,27,26,41,0,29,31,33],
[55,22,15,45,24,33,52,0,27,42],
[60,44,51,42,45,51,50,54,0,39],
[58,38,40,31,48,45,48,39,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,47,45,43,40,45,41,37,42],
[37,0,43,39,35,38,48,38,40,48],
[34,38,0,33,40,38,42,35,42,37],
[36,42,48,0,36,39,44,33,44,42],
[38,46,41,45,0,39,40,38,38,43],
[41,43,43,42,42,0,40,35,44,41],
[36,33,39,37,41,41,0,39,36,37],
[40,43,46,48,43,46,42,0,43,46],
[44,41,39,37,43,37,45,38,0,37],
[39,33,44,39,38,40,44,35,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,28,30,47,45,29,38,31,24],
[41,0,37,37,46,53,40,44,33,38],
[53,44,0,36,49,50,39,47,47,42],
[51,44,45,0,51,52,36,51,38,43],
[34,35,32,30,0,36,27,34,32,34],
[36,28,31,29,45,0,33,50,21,36],
[52,41,42,45,54,48,0,50,42,40],
[43,37,34,30,47,31,31,0,26,25],
[50,48,34,43,49,60,39,55,0,39],
[57,43,39,38,47,45,41,56,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,39,39,41,32,41,43,39,38],
[41,0,37,35,41,32,37,43,41,37],
[42,44,0,38,30,34,35,35,37,39],
[42,46,43,0,37,39,38,43,41,41],
[40,40,51,44,0,32,46,47,40,38],
[49,49,47,42,49,0,44,44,40,43],
[40,44,46,43,35,37,0,47,38,35],
[38,38,46,38,34,37,34,0,38,40],
[42,40,44,40,41,41,43,43,0,42],
[43,44,42,40,43,38,46,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,49,36,51,46,50,55,40,22],
[43,0,40,41,61,60,45,45,36,37],
[32,41,0,38,38,52,38,51,45,41],
[45,40,43,0,61,59,51,34,52,27],
[30,20,43,20,0,59,31,37,37,22],
[35,21,29,22,22,0,32,33,24,4],
[31,36,43,30,50,49,0,44,36,27],
[26,36,30,47,44,48,37,0,42,25],
[41,45,36,29,44,57,45,39,0,10],
[59,44,40,54,59,77,54,56,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,54,41,46,39,50,39,44,40],
[38,0,40,35,39,41,43,43,34,35],
[27,41,0,31,41,33,44,34,34,34],
[40,46,50,0,47,42,48,43,36,39],
[35,42,40,34,0,38,45,37,41,32],
[42,40,48,39,43,0,45,37,39,45],
[31,38,37,33,36,36,0,36,33,36],
[42,38,47,38,44,44,45,0,43,35],
[37,47,47,45,40,42,48,38,0,37],
[41,46,47,42,49,36,45,46,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,32,43,37,37,42,35,36,30],
[39,0,38,39,33,41,43,34,41,35],
[49,43,0,44,32,46,45,43,49,30],
[38,42,37,0,33,40,42,40,35,34],
[44,48,49,48,0,40,43,43,48,41],
[44,40,35,41,41,0,48,39,39,34],
[39,38,36,39,38,33,0,38,36,28],
[46,47,38,41,38,42,43,0,41,37],
[45,40,32,46,33,42,45,40,0,36],
[51,46,51,47,40,47,53,44,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,57,65,54,42,42,35,29,36],
[21,0,31,35,33,19,27,38,14,30],
[24,50,0,54,24,35,34,30,17,37],
[16,46,27,0,31,28,34,27,12,29],
[27,48,57,50,0,29,47,27,14,40],
[39,62,46,53,52,0,37,46,32,48],
[39,54,47,47,34,44,0,34,25,37],
[46,43,51,54,54,35,47,0,25,38],
[52,67,64,69,67,49,56,56,0,39],
[45,51,44,52,41,33,44,43,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,43,40,48,42,44,40,35,39],
[46,0,39,40,48,35,53,40,34,40],
[38,42,0,42,46,42,46,47,40,50],
[41,41,39,0,50,45,50,45,48,40],
[33,33,35,31,0,33,41,33,29,41],
[39,46,39,36,48,0,44,40,40,38],
[37,28,35,31,40,37,0,32,33,34],
[41,41,34,36,48,41,49,0,41,44],
[46,47,41,33,52,41,48,40,0,49],
[42,41,31,41,40,43,47,37,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,30,18,47,50,41,37,32,16],
[53,0,40,39,36,37,45,35,32,37],
[51,41,0,50,41,33,52,45,40,35],
[63,42,31,0,46,45,63,44,43,54],
[34,45,40,35,0,30,45,35,21,19],
[31,44,48,36,51,0,42,46,36,25],
[40,36,29,18,36,39,0,38,23,25],
[44,46,36,37,46,35,43,0,31,33],
[49,49,41,38,60,45,58,50,0,40],
[65,44,46,27,62,56,56,48,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,45,47,56,56,45,48,51,32],
[39,0,43,46,62,44,46,61,30,40],
[36,38,0,46,46,36,46,42,34,30],
[34,35,35,0,41,44,31,40,36,23],
[25,19,35,40,0,34,37,39,20,24],
[25,37,45,37,47,0,40,54,40,29],
[36,35,35,50,44,41,0,44,23,33],
[33,20,39,41,42,27,37,0,30,25],
[30,51,47,45,61,41,58,51,0,45],
[49,41,51,58,57,52,48,56,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,37,35,37,42,41,42,39,35],
[34,0,37,34,31,37,36,38,36,28],
[44,44,0,34,37,44,41,35,44,44],
[46,47,47,0,42,52,41,38,38,34],
[44,50,44,39,0,49,45,39,41,38],
[39,44,37,29,32,0,39,39,36,31],
[40,45,40,40,36,42,0,39,43,38],
[39,43,46,43,42,42,42,0,42,42],
[42,45,37,43,40,45,38,39,0,39],
[46,53,37,47,43,50,43,39,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,35,32,34,33,29,35,30,40],
[45,0,44,43,40,37,39,37,42,32],
[46,37,0,35,36,44,38,37,42,37],
[49,38,46,0,41,43,46,42,41,40],
[47,41,45,40,0,39,42,44,42,49],
[48,44,37,38,42,0,43,36,41,45],
[52,42,43,35,39,38,0,40,43,41],
[46,44,44,39,37,45,41,0,47,50],
[51,39,39,40,39,40,38,34,0,41],
[41,49,44,41,32,36,40,31,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,55,62,63,46,37,49,50,59],
[41,0,43,66,34,39,21,47,44,39],
[26,38,0,51,41,50,39,53,48,48],
[19,15,30,0,31,29,29,32,29,32],
[18,47,40,50,0,54,39,41,44,51],
[35,42,31,52,27,0,47,50,38,38],
[44,60,42,52,42,34,0,46,45,51],
[32,34,28,49,40,31,35,0,46,50],
[31,37,33,52,37,43,36,35,0,50],
[22,42,33,49,30,43,30,31,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,31,55,22,37,31,34,44,38],
[37,0,31,53,22,29,42,31,43,41],
[50,50,0,47,34,47,39,52,49,54],
[26,28,34,0,27,39,50,37,39,26],
[59,59,47,54,0,37,37,49,61,47],
[44,52,34,42,44,0,54,44,54,45],
[50,39,42,31,44,27,0,42,43,42],
[47,50,29,44,32,37,39,0,44,31],
[37,38,32,42,20,27,38,37,0,42],
[43,40,27,55,34,36,39,50,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,42,41,45,38,36,36,38,37],
[44,0,37,41,45,34,30,38,33,41],
[39,44,0,51,47,39,38,48,40,29],
[40,40,30,0,46,34,38,39,37,27],
[36,36,34,35,0,33,32,36,29,37],
[43,47,42,47,48,0,39,43,41,45],
[45,51,43,43,49,42,0,40,43,41],
[45,43,33,42,45,38,41,0,37,38],
[43,48,41,44,52,40,38,44,0,40],
[44,40,52,54,44,36,40,43,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,44,33,31,30,43,42,20,36],
[36,0,27,23,34,26,17,42,22,42],
[37,54,0,29,44,39,38,43,29,47],
[48,58,52,0,51,43,28,54,37,46],
[50,47,37,30,0,28,30,38,23,30],
[51,55,42,38,53,0,37,39,45,46],
[38,64,43,53,51,44,0,45,38,64],
[39,39,38,27,43,42,36,0,42,36],
[61,59,52,44,58,36,43,39,0,57],
[45,39,34,35,51,35,17,45,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,46,41,52,40,36,39,41,32],
[42,0,42,47,49,39,43,45,38,41],
[35,39,0,36,41,36,39,45,40,36],
[40,34,45,0,46,40,43,53,45,43],
[29,32,40,35,0,24,26,32,35,28],
[41,42,45,41,57,0,41,43,45,38],
[45,38,42,38,55,40,0,37,40,37],
[42,36,36,28,49,38,44,0,43,39],
[40,43,41,36,46,36,41,38,0,39],
[49,40,45,38,53,43,44,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,46,36,45,41,40,40,39,47],
[39,0,38,37,30,45,31,37,42,34],
[35,43,0,37,38,37,39,31,40,38],
[45,44,44,0,40,41,40,42,42,46],
[36,51,43,41,0,45,36,48,48,45],
[40,36,44,40,36,0,40,34,36,35],
[41,50,42,41,45,41,0,41,45,40],
[41,44,50,39,33,47,40,0,43,49],
[42,39,41,39,33,45,36,38,0,39],
[34,47,43,35,36,46,41,32,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,28,22,42,37,25,49,26,31],
[33,0,27,21,38,29,40,40,25,19],
[53,54,0,42,58,59,49,55,39,36],
[59,60,39,0,39,44,40,53,34,46],
[39,43,23,42,0,48,38,31,42,36],
[44,52,22,37,33,0,36,42,38,35],
[56,41,32,41,43,45,0,49,37,39],
[32,41,26,28,50,39,32,0,33,26],
[55,56,42,47,39,43,44,48,0,40],
[50,62,45,35,45,46,42,55,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,39,40,42,40,39,42,39,42],
[36,0,45,34,37,38,36,36,41,36],
[42,36,0,41,40,39,42,42,41,40],
[41,47,40,0,43,43,42,43,44,44],
[39,44,41,38,0,35,34,40,41,41],
[41,43,42,38,46,0,42,42,47,43],
[42,45,39,39,47,39,0,38,44,43],
[39,45,39,38,41,39,43,0,39,41],
[42,40,40,37,40,34,37,42,0,34],
[39,45,41,37,40,38,38,40,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,58,54,32,64,30,64,64,45],
[11,0,67,54,31,53,22,47,36,35],
[23,14,0,45,42,41,34,40,33,30],
[27,27,36,0,22,56,30,34,37,36],
[49,50,39,59,0,60,60,44,59,55],
[17,28,40,25,21,0,18,28,13,26],
[51,59,47,51,21,63,0,51,53,47],
[17,34,41,47,37,53,30,0,53,43],
[17,45,48,44,22,68,28,28,0,34],
[36,46,51,45,26,55,34,38,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,40,50,45,42,43,41,45,34],
[36,0,34,48,40,35,39,44,47,37],
[41,47,0,48,40,41,43,47,43,43],
[31,33,33,0,37,28,34,36,38,29],
[36,41,41,44,0,38,44,36,43,31],
[39,46,40,53,43,0,47,47,45,39],
[38,42,38,47,37,34,0,38,48,38],
[40,37,34,45,45,34,43,0,46,36],
[36,34,38,43,38,36,33,35,0,30],
[47,44,38,52,50,42,43,45,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,32,38,40,40,42,42,37,39],
[45,0,37,36,40,35,37,45,38,41],
[49,44,0,43,45,40,44,39,42,46],
[43,45,38,0,36,42,41,44,36,43],
[41,41,36,45,0,37,42,45,41,38],
[41,46,41,39,44,0,45,43,42,42],
[39,44,37,40,39,36,0,42,43,44],
[39,36,42,37,36,38,39,0,40,39],
[44,43,39,45,40,39,38,41,0,42],
[42,40,35,38,43,39,37,42,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,45,59,57,54,49,35,43,38],
[33,0,54,48,56,32,64,45,47,53],
[36,27,0,52,41,27,42,39,30,38],
[22,33,29,0,34,39,54,22,22,40],
[24,25,40,47,0,27,36,15,24,32],
[27,49,54,42,54,0,49,32,48,38],
[32,17,39,27,45,32,0,38,36,28],
[46,36,42,59,66,49,43,0,46,39],
[38,34,51,59,57,33,45,35,0,38],
[43,28,43,41,49,43,53,42,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,48,37,46,41,52,48,47,43],
[29,0,48,33,33,23,33,37,27,30],
[33,33,0,37,36,29,42,38,32,32],
[44,48,44,0,40,37,53,45,41,43],
[35,48,45,41,0,40,46,34,52,33],
[40,58,52,44,41,0,44,38,46,38],
[29,48,39,28,35,37,0,38,49,43],
[33,44,43,36,47,43,43,0,46,34],
[34,54,49,40,29,35,32,35,0,31],
[38,51,49,38,48,43,38,47,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,38,37,45,49,43,41,46,48],
[45,0,49,36,47,50,48,49,41,48],
[43,32,0,39,42,39,40,41,40,40],
[44,45,42,0,43,44,40,45,45,48],
[36,34,39,38,0,45,45,44,36,36],
[32,31,42,37,36,0,39,42,42,38],
[38,33,41,41,36,42,0,41,38,47],
[40,32,40,36,37,39,40,0,43,39],
[35,40,41,36,45,39,43,38,0,47],
[33,33,41,33,45,43,34,42,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,7,6,36,31,31,34,54,27],
[66,0,45,36,66,45,41,64,56,51],
[74,36,0,39,66,45,46,37,56,57],
[75,45,42,0,63,33,48,61,65,47],
[45,15,15,18,0,15,19,34,53,21],
[50,36,36,48,66,0,49,48,63,42],
[50,40,35,33,62,32,0,62,52,33],
[47,17,44,20,47,33,19,0,44,30],
[27,25,25,16,28,18,29,37,0,10],
[54,30,24,34,60,39,48,51,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,57,47,45,61,45,48,37,46],
[30,0,55,19,49,48,33,41,30,27],
[24,26,0,14,41,29,23,24,25,21],
[34,62,67,0,58,56,60,54,48,44],
[36,32,40,23,0,49,33,44,39,39],
[20,33,52,25,32,0,35,44,27,33],
[36,48,58,21,48,46,0,35,37,46],
[33,40,57,27,37,37,46,0,41,39],
[44,51,56,33,42,54,44,40,0,42],
[35,54,60,37,42,48,35,42,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,27,32,28,45,42,51,45,42],
[44,0,20,40,23,43,37,43,38,42],
[54,61,0,48,31,50,45,53,50,50],
[49,41,33,0,37,51,50,48,44,50],
[53,58,50,44,0,40,53,59,48,60],
[36,38,31,30,41,0,39,43,36,48],
[39,44,36,31,28,42,0,44,42,50],
[30,38,28,33,22,38,37,0,26,43],
[36,43,31,37,33,45,39,55,0,54],
[39,39,31,31,21,33,31,38,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,13,27,48,23,24,33,30],
[54,0,48,40,45,61,36,40,37,51],
[54,33,0,40,42,51,30,41,40,46],
[68,41,41,0,30,45,34,51,42,49],
[54,36,39,51,0,51,52,50,39,52],
[33,20,30,36,30,0,28,24,26,30],
[58,45,51,47,29,53,0,48,38,49],
[57,41,40,30,31,57,33,0,45,41],
[48,44,41,39,42,55,43,36,0,50],
[51,30,35,32,29,51,32,40,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,56,55,57,52,47,36,46,51],
[31,0,23,24,50,45,43,44,53,44],
[25,58,0,46,50,54,42,43,45,47],
[26,57,35,0,56,44,35,40,49,38],
[24,31,31,25,0,38,43,27,29,29],
[29,36,27,37,43,0,31,39,43,36],
[34,38,39,46,38,50,0,35,45,36],
[45,37,38,41,54,42,46,0,41,28],
[35,28,36,32,52,38,36,40,0,30],
[30,37,34,43,52,45,45,53,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,37,40,33,34,45,38,32,37],
[43,0,42,44,41,38,45,42,36,39],
[44,39,0,41,39,36,45,41,39,41],
[41,37,40,0,39,41,42,40,36,35],
[48,40,42,42,0,37,44,44,39,37],
[47,43,45,40,44,0,48,45,45,45],
[36,36,36,39,37,33,0,36,28,36],
[43,39,40,41,37,36,45,0,36,39],
[49,45,42,45,42,36,53,45,0,42],
[44,42,40,46,44,36,45,42,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,38,47,44,45,44,45,42],
[40,0,44,40,40,39,39,47,35,41],
[40,37,0,44,41,41,42,42,43,45],
[43,41,37,0,44,44,44,42,42,45],
[34,41,40,37,0,36,37,38,43,40],
[37,42,40,37,45,0,36,43,40,38],
[36,42,39,37,44,45,0,42,45,47],
[37,34,39,39,43,38,39,0,44,38],
[36,46,38,39,38,41,36,37,0,36],
[39,40,36,36,41,43,34,43,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,48,41,38,41,41,41,49,48],
[37,0,46,34,39,41,32,42,44,39],
[33,35,0,35,36,30,45,45,41,39],
[40,47,46,0,39,35,45,42,45,36],
[43,42,45,42,0,42,50,52,47,39],
[40,40,51,46,39,0,36,42,51,43],
[40,49,36,36,31,45,0,45,43,38],
[40,39,36,39,29,39,36,0,45,34],
[32,37,40,36,34,30,38,36,0,35],
[33,42,42,45,42,38,43,47,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,47,43,48,51,45,42,40,45],
[34,0,45,38,43,48,37,38,39,40],
[34,36,0,39,46,43,43,34,35,41],
[38,43,42,0,48,43,41,41,46,45],
[33,38,35,33,0,40,34,33,38,35],
[30,33,38,38,41,0,40,36,37,41],
[36,44,38,40,47,41,0,40,44,43],
[39,43,47,40,48,45,41,0,46,42],
[41,42,46,35,43,44,37,35,0,41],
[36,41,40,36,46,40,38,39,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,42,35,44,41,43,41,30],
[38,0,35,43,38,37,48,34,41,38],
[41,46,0,52,44,45,43,45,48,38],
[39,38,29,0,28,34,39,33,42,33],
[46,43,37,53,0,46,49,43,52,38],
[37,44,36,47,35,0,39,33,48,36],
[40,33,38,42,32,42,0,37,45,35],
[38,47,36,48,38,48,44,0,40,41],
[40,40,33,39,29,33,36,41,0,31],
[51,43,43,48,43,45,46,40,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,38,37,49,56,51,54,41,40],
[45,0,36,49,54,50,46,49,47,46],
[43,45,0,43,39,54,44,43,46,44],
[44,32,38,0,44,42,39,54,42,38],
[32,27,42,37,0,41,36,35,43,37],
[25,31,27,39,40,0,37,42,34,35],
[30,35,37,42,45,44,0,44,37,47],
[27,32,38,27,46,39,37,0,35,35],
[40,34,35,39,38,47,44,46,0,37],
[41,35,37,43,44,46,34,46,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,48,44,49,46,40,58,41,52],
[45,0,45,36,48,33,47,57,45,49],
[33,36,0,46,43,37,45,50,48,56],
[37,45,35,0,51,45,49,48,43,57],
[32,33,38,30,0,39,38,45,36,48],
[35,48,44,36,42,0,37,43,35,49],
[41,34,36,32,43,44,0,44,39,33],
[23,24,31,33,36,38,37,0,37,34],
[40,36,33,38,45,46,42,44,0,48],
[29,32,25,24,33,32,48,47,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,40,46,45,43,38,43,40],
[37,0,42,44,42,45,44,41,40,41],
[39,39,0,41,41,47,45,37,43,42],
[41,37,40,0,39,43,40,38,42,40],
[35,39,40,42,0,44,41,37,44,36],
[36,36,34,38,37,0,39,28,32,31],
[38,37,36,41,40,42,0,34,45,37],
[43,40,44,43,44,53,47,0,42,40],
[38,41,38,39,37,49,36,39,0,36],
[41,40,39,41,45,50,44,41,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,32,44,38,43,34,31,39,44],
[42,0,35,42,39,46,39,40,39,43],
[49,46,0,47,43,47,42,45,40,39],
[37,39,34,0,46,42,34,41,43,38],
[43,42,38,35,0,42,41,35,39,38],
[38,35,34,39,39,0,31,31,40,38],
[47,42,39,47,40,50,0,43,44,48],
[50,41,36,40,46,50,38,0,44,41],
[42,42,41,38,42,41,37,37,0,41],
[37,38,42,43,43,43,33,40,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,49,42,42,50,42,42,44,43],
[43,0,37,48,42,44,45,38,38,41],
[32,44,0,34,37,49,43,38,38,46],
[39,33,47,0,39,42,41,35,48,47],
[39,39,44,42,0,43,36,39,40,44],
[31,37,32,39,38,0,43,34,30,48],
[39,36,38,40,45,38,0,42,33,40],
[39,43,43,46,42,47,39,0,36,47],
[37,43,43,33,41,51,48,45,0,48],
[38,40,35,34,37,33,41,34,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,56,48,43,51,42,37,37,64],
[38,0,21,13,22,26,21,51,59,34],
[25,60,0,0,31,37,42,38,54,51],
[33,68,81,0,52,45,50,46,62,81],
[38,59,50,29,0,45,50,62,45,64],
[30,55,44,36,36,0,13,30,33,81],
[39,60,39,31,31,68,0,60,60,76],
[44,30,43,35,19,51,21,0,43,64],
[44,22,27,19,36,48,21,38,0,48],
[17,47,30,0,17,0,5,17,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,42,47,35,39,44,49,57,43],
[34,0,37,34,38,36,46,35,48,37],
[39,44,0,38,37,34,50,44,46,43],
[34,47,43,0,41,34,44,45,48,42],
[46,43,44,40,0,41,43,45,46,48],
[42,45,47,47,40,0,46,45,48,44],
[37,35,31,37,38,35,0,43,42,37],
[32,46,37,36,36,36,38,0,49,44],
[24,33,35,33,35,33,39,32,0,45],
[38,44,38,39,33,37,44,37,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,37,41,30,20,30,34,30,36],
[40,0,28,33,30,28,34,33,31,25],
[44,53,0,42,38,47,44,42,40,44],
[40,48,39,0,37,34,40,33,26,31],
[51,51,43,44,0,42,49,36,38,38],
[61,53,34,47,39,0,40,44,42,44],
[51,47,37,41,32,41,0,32,34,36],
[47,48,39,48,45,37,49,0,31,40],
[51,50,41,55,43,39,47,50,0,42],
[45,56,37,50,43,37,45,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,32,18,51,32,38,23,25,26],
[21,0,26,23,18,26,26,21,29,24],
[49,55,0,45,49,51,43,38,41,50],
[63,58,36,0,55,51,50,40,36,25],
[30,63,32,26,0,24,33,48,37,34],
[49,55,30,30,57,0,51,37,40,35],
[43,55,38,31,48,30,0,37,49,25],
[58,60,43,41,33,44,44,0,39,51],
[56,52,40,45,44,41,32,42,0,42],
[55,57,31,56,47,46,56,30,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,38,39,45,29,36,41,42,33],
[41,0,40,36,42,37,42,36,42,41],
[43,41,0,36,42,42,45,44,45,43],
[42,45,45,0,47,37,48,44,49,43],
[36,39,39,34,0,36,37,43,38,43],
[52,44,39,44,45,0,50,52,43,42],
[45,39,36,33,44,31,0,37,39,36],
[40,45,37,37,38,29,44,0,32,32],
[39,39,36,32,43,38,42,49,0,43],
[48,40,38,38,38,39,45,49,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,44,38,42,39,36,42,38,47],
[34,0,44,40,41,37,37,37,37,35],
[37,37,0,42,31,33,35,38,35,37],
[43,41,39,0,37,37,40,36,39,36],
[39,40,50,44,0,47,46,44,42,43],
[42,44,48,44,34,0,37,39,34,37],
[45,44,46,41,35,44,0,36,39,36],
[39,44,43,45,37,42,45,0,36,40],
[43,44,46,42,39,47,42,45,0,44],
[34,46,44,45,38,44,45,41,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,38,39,39,43,41,36,46,47],
[28,0,37,29,35,31,31,32,30,28],
[43,44,0,36,45,34,34,39,43,36],
[42,52,45,0,46,37,39,40,39,38],
[42,46,36,35,0,38,41,39,43,42],
[38,50,47,44,43,0,38,39,38,40],
[40,50,47,42,40,43,0,43,40,36],
[45,49,42,41,42,42,38,0,41,42],
[35,51,38,42,38,43,41,40,0,37],
[34,53,45,43,39,41,45,39,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,46,45,49,58,28,51,64,47],
[31,0,34,37,42,60,42,57,48,34],
[35,47,0,45,59,74,28,45,74,37],
[36,44,36,0,62,50,31,21,66,40],
[32,39,22,19,0,33,22,19,56,29],
[23,21,7,31,48,0,17,24,66,35],
[53,39,53,50,59,64,0,44,58,58],
[30,24,36,60,62,57,37,0,56,49],
[17,33,7,15,25,15,23,25,0,27],
[34,47,44,41,52,46,23,32,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,43,36,42,39,44,48,40,44],
[38,0,37,36,41,42,44,45,37,39],
[38,44,0,45,45,44,44,44,36,48],
[45,45,36,0,46,37,46,42,34,45],
[39,40,36,35,0,36,44,41,36,39],
[42,39,37,44,45,0,44,51,35,42],
[37,37,37,35,37,37,0,39,37,36],
[33,36,37,39,40,30,42,0,41,38],
[41,44,45,47,45,46,44,40,0,39],
[37,42,33,36,42,39,45,43,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,44,48,50,42,35,43,35,40],
[29,0,34,36,43,43,46,45,36,44],
[37,47,0,49,45,46,37,38,33,39],
[33,45,32,0,35,41,36,35,22,39],
[31,38,36,46,0,38,31,40,28,42],
[39,38,35,40,43,0,28,41,33,34],
[46,35,44,45,50,53,0,43,47,39],
[38,36,43,46,41,40,38,0,30,41],
[46,45,48,59,53,48,34,51,0,39],
[41,37,42,42,39,47,42,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,42,37,52,44,47,47,41,60],
[34,0,30,27,42,37,42,34,25,51],
[39,51,0,41,52,42,50,40,35,57],
[44,54,40,0,47,36,43,39,42,55],
[29,39,29,34,0,28,32,31,31,43],
[37,44,39,45,53,0,39,41,38,50],
[34,39,31,38,49,42,0,36,34,50],
[34,47,41,42,50,40,45,0,37,55],
[40,56,46,39,50,43,47,44,0,51],
[21,30,24,26,38,31,31,26,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,42,48,49,41,44,37,46,42],
[41,0,39,47,53,29,41,38,34,34],
[39,42,0,50,44,36,44,47,43,48],
[33,34,31,0,50,33,32,28,45,30],
[32,28,37,31,0,27,25,32,28,37],
[40,52,45,48,54,0,50,47,49,53],
[37,40,37,49,56,31,0,45,48,46],
[44,43,34,53,49,34,36,0,41,38],
[35,47,38,36,53,32,33,40,0,43],
[39,47,33,51,44,28,35,43,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,45,54,36,40,53,42,40,50],
[33,0,41,44,41,36,41,35,40,36],
[36,40,0,45,33,34,42,40,38,35],
[27,37,36,0,30,31,35,27,38,23],
[45,40,48,51,0,47,50,44,43,45],
[41,45,47,50,34,0,48,37,39,32],
[28,40,39,46,31,33,0,33,33,30],
[39,46,41,54,37,44,48,0,40,33],
[41,41,43,43,38,42,48,41,0,45],
[31,45,46,58,36,49,51,48,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,46,38,43,45,46,44,49,61],
[38,0,47,31,41,39,35,41,39,57],
[35,34,0,28,31,41,30,33,31,42],
[43,50,53,0,44,37,52,43,42,64],
[38,40,50,37,0,39,47,40,43,47],
[36,42,40,44,42,0,46,45,42,55],
[35,46,51,29,34,35,0,40,41,54],
[37,40,48,38,41,36,41,0,39,51],
[32,42,50,39,38,39,40,42,0,48],
[20,24,39,17,34,26,27,30,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,43,39,37,42,40,44,42,38],
[44,0,48,41,46,46,38,47,45,39],
[38,33,0,40,40,36,35,42,42,39],
[42,40,41,0,41,40,41,45,42,33],
[44,35,41,40,0,37,38,46,41,37],
[39,35,45,41,44,0,43,41,37,38],
[41,43,46,40,43,38,0,47,40,34],
[37,34,39,36,35,40,34,0,42,39],
[39,36,39,39,40,44,41,39,0,41],
[43,42,42,48,44,43,47,42,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,30,35,34,27,29,35,39,39],
[33,0,28,28,37,15,30,44,40,40],
[51,53,0,47,49,39,43,53,43,47],
[46,53,34,0,36,41,40,44,48,46],
[47,44,32,45,0,33,46,50,39,47],
[54,66,42,40,48,0,48,48,38,52],
[52,51,38,41,35,33,0,54,47,48],
[46,37,28,37,31,33,27,0,30,31],
[42,41,38,33,42,43,34,51,0,46],
[42,41,34,35,34,29,33,50,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,47,47,44,32,40,44,46,52],
[39,0,38,36,43,34,40,37,42,45],
[34,43,0,39,31,33,44,35,46,54],
[34,45,42,0,38,27,39,34,49,45],
[37,38,50,43,0,29,40,42,42,52],
[49,47,48,54,52,0,52,39,52,54],
[41,41,37,42,41,29,0,35,45,51],
[37,44,46,47,39,42,46,0,46,55],
[35,39,35,32,39,29,36,35,0,51],
[29,36,27,36,29,27,30,26,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,41,38,41,45,45,37,38,39],
[41,0,35,31,35,40,33,39,41,45],
[40,46,0,29,30,51,33,45,43,34],
[43,50,52,0,34,51,47,48,47,42],
[40,46,51,47,0,51,45,51,43,43],
[36,41,30,30,30,0,31,23,43,33],
[36,48,48,34,36,50,0,42,44,39],
[44,42,36,33,30,58,39,0,38,39],
[43,40,38,34,38,38,37,43,0,41],
[42,36,47,39,38,48,42,42,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,44,49,36,36,38,42,44,43],
[39,0,36,48,34,35,39,31,42,38],
[37,45,0,44,37,41,42,33,43,49],
[32,33,37,0,30,29,37,27,33,33],
[45,47,44,51,0,43,42,37,43,46],
[45,46,40,52,38,0,43,39,47,45],
[43,42,39,44,39,38,0,42,33,38],
[39,50,48,54,44,42,39,0,44,49],
[37,39,38,48,38,34,48,37,0,32],
[38,43,32,48,35,36,43,32,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,30,23,46,48,23,38,35,38],
[37,0,40,29,51,30,40,52,31,40],
[51,41,0,37,57,46,56,54,52,53],
[58,52,44,0,53,54,46,61,34,41],
[35,30,24,28,0,31,35,35,18,31],
[33,51,35,27,50,0,41,49,30,32],
[58,41,25,35,46,40,0,50,28,42],
[43,29,27,20,46,32,31,0,26,29],
[46,50,29,47,63,51,53,55,0,43],
[43,41,28,40,50,49,39,52,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,37,25,38,46,30,40,45,42],
[50,0,49,31,51,40,47,51,57,56],
[44,32,0,49,42,53,50,55,41,49],
[56,50,32,0,38,31,40,41,48,42],
[43,30,39,43,0,34,54,47,39,51],
[35,41,28,50,47,0,34,33,43,39],
[51,34,31,41,27,47,0,52,51,45],
[41,30,26,40,34,48,29,0,44,46],
[36,24,40,33,42,38,30,37,0,46],
[39,25,32,39,30,42,36,35,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,44,21,14,28,31,21,41,11],
[53,0,34,31,30,24,31,41,34,20],
[37,47,0,27,37,47,30,37,41,30],
[60,50,54,0,37,27,51,58,41,20],
[67,51,44,44,0,31,51,48,51,41],
[53,57,34,54,50,0,61,61,44,53],
[50,50,51,30,30,20,0,21,14,23],
[60,40,44,23,33,20,60,0,27,30],
[40,47,40,40,30,37,67,54,0,40],
[70,61,51,61,40,28,58,51,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,42,36,50,48,40,39,43,40],
[29,0,32,32,46,34,35,19,33,24],
[39,49,0,39,42,41,38,27,43,28],
[45,49,42,0,46,46,52,43,45,36],
[31,35,39,35,0,36,37,24,36,32],
[33,47,40,35,45,0,45,25,38,44],
[41,46,43,29,44,36,0,29,37,33],
[42,62,54,38,57,56,52,0,44,44],
[38,48,38,36,45,43,44,37,0,21],
[41,57,53,45,49,37,48,37,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,38,41,33,37,29,27,28,36],
[40,0,37,42,26,38,32,27,37,32],
[43,44,0,36,28,37,34,29,26,37],
[40,39,45,0,29,41,30,33,37,42],
[48,55,53,52,0,40,50,46,49,50],
[44,43,44,40,41,0,40,45,35,41],
[52,49,47,51,31,41,0,37,42,51],
[54,54,52,48,35,36,44,0,41,49],
[53,44,55,44,32,46,39,40,0,39],
[45,49,44,39,31,40,30,32,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,40,47,48,53,21,47,38,62],
[42,0,49,28,52,35,23,48,45,38],
[41,32,0,30,45,41,26,35,27,31],
[34,53,51,0,67,52,50,41,62,53],
[33,29,36,14,0,33,9,34,38,35],
[28,46,40,29,48,0,27,49,52,56],
[60,58,55,31,72,54,0,46,54,55],
[34,33,46,40,47,32,35,0,38,33],
[43,36,54,19,43,29,27,43,0,48],
[19,43,50,28,46,25,26,48,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,36,31,50,43,34,46,51,39],
[31,0,37,22,34,24,31,37,34,27],
[45,44,0,33,36,43,27,39,45,36],
[50,59,48,0,59,53,42,48,44,38],
[31,47,45,22,0,30,27,20,42,19],
[38,57,38,28,51,0,28,37,43,29],
[47,50,54,39,54,53,0,46,48,46],
[35,44,42,33,61,44,35,0,41,34],
[30,47,36,37,39,38,33,40,0,33],
[42,54,45,43,62,52,35,47,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,38,39,36,36,48,41,36,39],
[41,0,42,36,35,39,48,41,38,42],
[43,39,0,36,38,38,43,39,35,36],
[42,45,45,0,44,42,48,43,46,40],
[45,46,43,37,0,40,45,44,42,43],
[45,42,43,39,41,0,43,43,37,47],
[33,33,38,33,36,38,0,44,34,39],
[40,40,42,38,37,38,37,0,41,39],
[45,43,46,35,39,44,47,40,0,39],
[42,39,45,41,38,34,42,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,36,44,42,52,48,37,36,47],
[39,0,35,35,38,46,44,28,39,37],
[45,46,0,57,43,37,42,44,40,43],
[37,46,24,0,32,34,37,31,34,28],
[39,43,38,49,0,32,37,33,47,40],
[29,35,44,47,49,0,39,31,30,42],
[33,37,39,44,44,42,0,34,44,31],
[44,53,37,50,48,50,47,0,47,44],
[45,42,41,47,34,51,37,34,0,38],
[34,44,38,53,41,39,50,37,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,40,43,79,59,26,52,39,61],
[22,0,5,5,25,28,26,21,37,61],
[41,76,0,36,41,61,38,21,39,73],
[38,76,45,0,46,28,37,39,38,73],
[2,56,40,35,0,35,25,20,19,37],
[22,53,20,53,46,0,38,26,44,68],
[55,55,43,44,56,43,0,59,23,43],
[29,60,60,42,61,55,22,0,30,57],
[42,44,42,43,62,37,58,51,0,39],
[20,20,8,8,44,13,38,24,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,42,25,31,53,43,23,32,34],
[60,0,60,36,25,55,42,31,47,36],
[39,21,0,20,8,27,15,26,42,0],
[56,45,61,0,44,59,44,32,41,38],
[50,56,73,37,0,50,37,55,53,51],
[28,26,54,22,31,0,55,35,29,29],
[38,39,66,37,44,26,0,55,41,35],
[58,50,55,49,26,46,26,0,33,29],
[49,34,39,40,28,52,40,48,0,20],
[47,45,81,43,30,52,46,52,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,36,40,30,33,38,39,40,39],
[43,0,34,39,28,31,36,31,40,33],
[45,47,0,47,34,39,45,41,44,40],
[41,42,34,0,34,42,37,38,39,40],
[51,53,47,47,0,42,46,44,44,37],
[48,50,42,39,39,0,40,45,41,43],
[43,45,36,44,35,41,0,36,45,32],
[42,50,40,43,37,36,45,0,48,39],
[41,41,37,42,37,40,36,33,0,38],
[42,48,41,41,44,38,49,42,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,44,36,41,44,37,43,52,44],
[43,0,43,43,39,46,35,48,45,42],
[37,38,0,38,32,35,33,43,36,34],
[45,38,43,0,47,42,40,42,47,38],
[40,42,49,34,0,42,39,41,40,33],
[37,35,46,39,39,0,39,47,41,32],
[44,46,48,41,42,42,0,43,49,39],
[38,33,38,39,40,34,38,0,38,38],
[29,36,45,34,41,40,32,43,0,43],
[37,39,47,43,48,49,42,43,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,37,49,37,33,38,30,35,45],
[42,0,45,47,40,45,41,42,53,52],
[44,36,0,46,44,39,31,35,43,50],
[32,34,35,0,32,38,26,23,37,41],
[44,41,37,49,0,47,39,30,41,42],
[48,36,42,43,34,0,41,39,45,47],
[43,40,50,55,42,40,0,44,45,54],
[51,39,46,58,51,42,37,0,55,45],
[46,28,38,44,40,36,36,26,0,45],
[36,29,31,40,39,34,27,36,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,51,36,33,54,59,54,41,40],
[18,0,40,35,32,50,45,49,31,36],
[30,41,0,54,36,59,57,56,39,53],
[45,46,27,0,25,42,38,42,44,38],
[48,49,45,56,0,52,39,60,44,41],
[27,31,22,39,29,0,30,55,29,32],
[22,36,24,43,42,51,0,37,20,30],
[27,32,25,39,21,26,44,0,30,43],
[40,50,42,37,37,52,61,51,0,45],
[41,45,28,43,40,49,51,38,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,49,32,43,44,46,41,50,35],
[25,0,33,24,32,34,33,30,29,28],
[32,48,0,28,34,33,34,36,38,47],
[49,57,53,0,43,57,53,47,55,39],
[38,49,47,38,0,39,38,33,38,35],
[37,47,48,24,42,0,34,33,35,35],
[35,48,47,28,43,47,0,41,40,48],
[40,51,45,34,48,48,40,0,40,43],
[31,52,43,26,43,46,41,41,0,43],
[46,53,34,42,46,46,33,38,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,43,47,36,45,38,39,45,40],
[44,0,40,53,47,46,36,38,46,51],
[38,41,0,55,40,39,35,37,48,48],
[34,28,26,0,33,39,32,29,34,40],
[45,34,41,48,0,46,41,38,39,50],
[36,35,42,42,35,0,40,45,47,43],
[43,45,46,49,40,41,0,43,42,44],
[42,43,44,52,43,36,38,0,46,49],
[36,35,33,47,42,34,39,35,0,43],
[41,30,33,41,31,38,37,32,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,42,41,41,39,39,44,36,43],
[34,0,38,38,41,41,37,47,45,42],
[39,43,0,44,50,44,44,43,39,47],
[40,43,37,0,39,40,33,45,37,44],
[40,40,31,42,0,46,29,45,43,39],
[42,40,37,41,35,0,38,47,36,40],
[42,44,37,48,52,43,0,44,39,48],
[37,34,38,36,36,34,37,0,38,33],
[45,36,42,44,38,45,42,43,0,45],
[38,39,34,37,42,41,33,48,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,46,43,44,44,45,34,47,40],
[36,0,41,43,33,36,36,34,39,40],
[35,40,0,37,38,35,36,33,37,36],
[38,38,44,0,38,39,39,32,42,41],
[37,48,43,43,0,45,34,34,43,43],
[37,45,46,42,36,0,38,36,44,46],
[36,45,45,42,47,43,0,41,44,41],
[47,47,48,49,47,45,40,0,44,45],
[34,42,44,39,38,37,37,37,0,40],
[41,41,45,40,38,35,40,36,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,44,30,31,31,37,24,29,36],
[48,0,43,41,43,39,45,50,44,35],
[37,38,0,59,37,30,40,38,36,29],
[51,40,22,0,32,25,24,27,32,30],
[50,38,44,49,0,43,37,46,45,36],
[50,42,51,56,38,0,37,35,44,42],
[44,36,41,57,44,44,0,24,35,39],
[57,31,43,54,35,46,57,0,33,36],
[52,37,45,49,36,37,46,48,0,31],
[45,46,52,51,45,39,42,45,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,49,47,41,35,38,45,50,49],
[43,0,44,45,40,40,41,53,43,43],
[32,37,0,34,37,38,27,40,44,36],
[34,36,47,0,37,36,38,44,39,38],
[40,41,44,44,0,46,37,46,48,35],
[46,41,43,45,35,0,36,41,42,43],
[43,40,54,43,44,45,0,53,44,48],
[36,28,41,37,35,40,28,0,34,38],
[31,38,37,42,33,39,37,47,0,39],
[32,38,45,43,46,38,33,43,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,40,42,41,49,45,47,53,36],
[45,0,34,44,39,50,43,44,51,41],
[41,47,0,39,45,41,46,48,50,32],
[39,37,42,0,33,41,44,45,41,32],
[40,42,36,48,0,46,41,46,38,37],
[32,31,40,40,35,0,41,35,37,35],
[36,38,35,37,40,40,0,36,37,35],
[34,37,33,36,35,46,45,0,38,34],
[28,30,31,40,43,44,44,43,0,35],
[45,40,49,49,44,46,46,47,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,50,39,45,34,43,43,40],
[42,0,47,52,43,40,35,46,41,42],
[42,34,0,47,43,35,40,43,38,42],
[31,29,34,0,38,29,31,35,42,37],
[42,38,38,43,0,40,44,42,44,44],
[36,41,46,52,41,0,37,44,47,46],
[47,46,41,50,37,44,0,43,48,40],
[38,35,38,46,39,37,38,0,41,38],
[38,40,43,39,37,34,33,40,0,33],
[41,39,39,44,37,35,41,43,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,41,45,39,38,37,44,51,40],
[39,0,39,40,40,40,36,42,47,36],
[40,42,0,47,39,36,37,40,54,38],
[36,41,34,0,36,42,36,40,43,37],
[42,41,42,45,0,39,45,51,51,44],
[43,41,45,39,42,0,36,40,51,37],
[44,45,44,45,36,45,0,47,56,45],
[37,39,41,41,30,41,34,0,49,41],
[30,34,27,38,30,30,25,32,0,33],
[41,45,43,44,37,44,36,40,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,36,47,43,47,53,76,57,43],
[14,0,37,34,30,35,9,38,40,25],
[45,44,0,34,43,43,42,49,40,29],
[34,47,47,0,46,48,32,66,36,23],
[38,51,38,35,0,32,24,48,41,21],
[34,46,38,33,49,0,42,58,38,26],
[28,72,39,49,57,39,0,58,59,42],
[5,43,32,15,33,23,23,0,39,10],
[24,41,41,45,40,43,22,42,0,37],
[38,56,52,58,60,55,39,71,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,49,58,49,33,34,46,34,37],
[48,0,25,48,58,39,63,48,30,48],
[32,56,0,65,60,24,65,50,65,32],
[23,33,16,0,63,15,33,26,33,23],
[32,23,21,18,0,5,24,18,5,23],
[48,42,57,66,76,0,66,66,42,33],
[47,18,16,48,57,15,0,33,0,32],
[35,33,31,55,63,15,48,0,15,20],
[47,51,16,48,76,39,81,66,0,33],
[44,33,49,58,58,48,49,61,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,37,22,20,33,38,21,27,26],
[46,0,39,28,45,44,48,36,40,33],
[44,42,0,31,30,40,43,40,33,32],
[59,53,50,0,34,41,71,55,47,51],
[61,36,51,47,0,46,46,44,52,48],
[48,37,41,40,35,0,41,42,39,45],
[43,33,38,10,35,40,0,25,27,16],
[60,45,41,26,37,39,56,0,41,46],
[54,41,48,34,29,42,54,40,0,54],
[55,48,49,30,33,36,65,35,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,51,39,46,43,51,56,43,37],
[26,0,44,30,39,34,40,40,38,32],
[30,37,0,35,26,31,40,32,38,35],
[42,51,46,0,35,39,39,43,43,42],
[35,42,55,46,0,37,43,45,42,38],
[38,47,50,42,44,0,51,53,46,37],
[30,41,41,42,38,30,0,43,35,32],
[25,41,49,38,36,28,38,0,30,31],
[38,43,43,38,39,35,46,51,0,40],
[44,49,46,39,43,44,49,50,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,48,35,45,43,50,45,56,52],
[36,0,37,37,38,34,42,41,43,29],
[33,44,0,40,39,24,30,30,39,41],
[46,44,41,0,44,30,32,41,47,42],
[36,43,42,37,0,26,38,38,47,43],
[38,47,57,51,55,0,33,43,48,51],
[31,39,51,49,43,48,0,53,42,47],
[36,40,51,40,43,38,28,0,47,44],
[25,38,42,34,34,33,39,34,0,34],
[29,52,40,39,38,30,34,37,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,41,58,38,38,49,41,49,52],
[37,0,40,51,44,42,55,33,36,47],
[40,41,0,44,34,34,41,35,34,36],
[23,30,37,0,44,25,37,31,36,31],
[43,37,47,37,0,39,41,41,40,44],
[43,39,47,56,42,0,50,43,33,44],
[32,26,40,44,40,31,0,27,43,41],
[40,48,46,50,40,38,54,0,50,47],
[32,45,47,45,41,48,38,31,0,39],
[29,34,45,50,37,37,40,34,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,23,34,17,26,23,10,23,29],
[47,0,41,45,28,35,29,36,35,42],
[58,40,0,42,54,44,40,44,38,50],
[47,36,39,0,37,27,24,30,29,58],
[64,53,27,44,0,38,29,30,36,44],
[55,46,37,54,43,0,50,33,27,58],
[58,52,41,57,52,31,0,43,33,42],
[71,45,37,51,51,48,38,0,47,51],
[58,46,43,52,45,54,48,34,0,51],
[52,39,31,23,37,23,39,30,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,49,44,48,49,29,43,40,46],
[39,0,51,33,33,44,38,40,48,42],
[32,30,0,33,37,38,34,40,34,39],
[37,48,48,0,47,41,39,39,44,44],
[33,48,44,34,0,49,34,51,38,42],
[32,37,43,40,32,0,25,44,40,31],
[52,43,47,42,47,56,0,53,48,38],
[38,41,41,42,30,37,28,0,39,38],
[41,33,47,37,43,41,33,42,0,39],
[35,39,42,37,39,50,43,43,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,49,27,43,31,39,10,60,23],
[58,0,49,49,34,22,39,10,46,45],
[32,32,0,0,42,30,24,32,42,23],
[54,32,81,0,66,54,24,42,54,33],
[38,47,39,15,0,69,39,14,57,23],
[50,59,51,27,12,0,51,26,60,35],
[42,42,57,57,42,30,0,18,42,30],
[71,71,49,39,67,55,63,0,81,35],
[21,35,39,27,24,21,39,0,0,35],
[58,36,58,48,58,46,51,46,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,44,38,39,37,32,37,34,40],
[44,0,43,38,45,38,29,36,31,35],
[37,38,0,40,39,37,30,32,28,31],
[43,43,41,0,42,45,34,35,33,32],
[42,36,42,39,0,40,33,28,34,35],
[44,43,44,36,41,0,37,32,38,36],
[49,52,51,47,48,44,0,37,39,37],
[44,45,49,46,53,49,44,0,40,43],
[47,50,53,48,47,43,42,41,0,39],
[41,46,50,49,46,45,44,38,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,51,43,50,43,35,47,32,44],
[37,0,49,48,47,41,44,42,30,40],
[30,32,0,38,37,30,36,34,35,34],
[38,33,43,0,39,39,39,36,32,40],
[31,34,44,42,0,40,35,37,33,34],
[38,40,51,42,41,0,34,39,32,46],
[46,37,45,42,46,47,0,42,37,33],
[34,39,47,45,44,42,39,0,29,43],
[49,51,46,49,48,49,44,52,0,39],
[37,41,47,41,47,35,48,38,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,34,38,32,29,41,36,28,41],
[39,0,32,39,48,34,41,35,36,36],
[47,49,0,45,47,43,44,56,40,44],
[43,42,36,0,40,31,32,45,32,45],
[49,33,34,41,0,31,37,43,31,40],
[52,47,38,50,50,0,54,48,43,56],
[40,40,37,49,44,27,0,48,31,41],
[45,46,25,36,38,33,33,0,38,41],
[53,45,41,49,50,38,50,43,0,37],
[40,45,37,36,41,25,40,40,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,39,44,40,45,22,30,32,48],
[33,0,33,34,34,47,36,34,38,37],
[42,48,0,45,49,35,39,42,45,50],
[37,47,36,0,44,40,39,41,28,45],
[41,47,32,37,0,41,20,34,46,56],
[36,34,46,41,40,0,34,25,21,37],
[59,45,42,42,61,47,0,27,51,61],
[51,47,39,40,47,56,54,0,45,48],
[49,43,36,53,35,60,30,36,0,43],
[33,44,31,36,25,44,20,33,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,41,50,43,37,43,47,51,42],
[34,0,36,47,39,35,47,46,55,40],
[40,45,0,44,43,36,43,43,47,36],
[31,34,37,0,40,33,45,38,45,38],
[38,42,38,41,0,44,43,43,50,41],
[44,46,45,48,37,0,42,41,41,44],
[38,34,38,36,38,39,0,36,41,40],
[34,35,38,43,38,40,45,0,49,42],
[30,26,34,36,31,40,40,32,0,36],
[39,41,45,43,40,37,41,39,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,52,43,43,44,42,42,38,33],
[40,0,48,48,41,41,50,38,42,38],
[29,33,0,42,30,38,38,35,31,35],
[38,33,39,0,32,36,47,34,32,36],
[38,40,51,49,0,47,48,37,41,36],
[37,40,43,45,34,0,41,37,34,35],
[39,31,43,34,33,40,0,37,36,36],
[39,43,46,47,44,44,44,0,39,42],
[43,39,50,49,40,47,45,42,0,42],
[48,43,46,45,45,46,45,39,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,42,43,49,32,36,40,25,36],
[34,0,48,36,49,34,33,41,33,22],
[39,33,0,29,46,41,28,28,32,29],
[38,45,52,0,50,39,42,63,46,45],
[32,32,35,31,0,30,33,26,27,24],
[49,47,40,42,51,0,34,45,48,43],
[45,48,53,39,48,47,0,54,43,41],
[41,40,53,18,55,36,27,0,25,38],
[56,48,49,35,54,33,38,56,0,40],
[45,59,52,36,57,38,40,43,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,42,37,43,38,32,52,41,38],
[36,0,43,40,46,38,39,51,44,36],
[39,38,0,40,45,41,36,44,34,38],
[44,41,41,0,47,39,42,48,41,45],
[38,35,36,34,0,38,37,42,38,35],
[43,43,40,42,43,0,43,53,47,40],
[49,42,45,39,44,38,0,57,47,44],
[29,30,37,33,39,28,24,0,35,34],
[40,37,47,40,43,34,34,46,0,38],
[43,45,43,36,46,41,37,47,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,47,33,32,36,44,35,33,39],
[34,0,34,34,40,32,34,32,29,32],
[34,47,0,35,37,28,34,27,37,29],
[48,47,46,0,42,37,43,39,36,42],
[49,41,44,39,0,36,43,36,41,37],
[45,49,53,44,45,0,47,43,34,37],
[37,47,47,38,38,34,0,40,42,36],
[46,49,54,42,45,38,41,0,45,43],
[48,52,44,45,40,47,39,36,0,39],
[42,49,52,39,44,44,45,38,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,23,58,22,35,23,58,23,45],
[58,0,35,63,23,41,24,80,34,80],
[58,46,0,58,46,59,47,75,40,58],
[23,18,23,0,17,35,41,23,23,17],
[59,58,35,64,0,64,47,81,58,81],
[46,40,22,46,17,0,23,63,22,63],
[58,57,34,40,34,58,0,57,57,57],
[23,1,6,58,0,18,24,0,6,0],
[58,47,41,58,23,59,24,75,0,46],
[36,1,23,64,0,18,24,81,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,34,43,37,45,40,46,43,43],
[35,0,35,40,34,47,37,38,44,43],
[47,46,0,48,43,40,41,42,52,44],
[38,41,33,0,39,42,43,37,41,40],
[44,47,38,42,0,46,45,43,51,45],
[36,34,41,39,35,0,38,42,36,40],
[41,44,40,38,36,43,0,36,43,47],
[35,43,39,44,38,39,45,0,45,47],
[38,37,29,40,30,45,38,36,0,43],
[38,38,37,41,36,41,34,34,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,43,35,34,42,29,45,40,47],
[43,0,35,34,41,49,36,49,42,38],
[38,46,0,37,33,32,37,49,51,42],
[46,47,44,0,43,41,37,48,51,36],
[47,40,48,38,0,41,33,47,45,36],
[39,32,49,40,40,0,42,46,50,39],
[52,45,44,44,48,39,0,51,54,47],
[36,32,32,33,34,35,30,0,41,38],
[41,39,30,30,36,31,27,40,0,28],
[34,43,39,45,45,42,34,43,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,26,36,41,35,35,43,35,43],
[42,0,27,25,37,1,54,40,31,40],
[55,54,0,55,54,37,54,76,54,62],
[45,56,26,0,58,39,53,61,56,43],
[40,44,27,23,0,22,75,61,38,61],
[46,80,44,42,59,0,54,42,33,44],
[46,27,27,28,6,27,0,28,6,29],
[38,41,5,20,20,39,53,0,39,26],
[46,50,27,25,43,48,75,42,0,27],
[38,41,19,38,20,37,52,55,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,45,42,40,40,46,47,37,42],
[39,0,46,46,45,35,44,40,42,38],
[36,35,0,36,44,30,44,37,33,41],
[39,35,45,0,37,35,39,37,37,39],
[41,36,37,44,0,33,37,41,42,37],
[41,46,51,46,48,0,44,48,37,44],
[35,37,37,42,44,37,0,38,38,39],
[34,41,44,44,40,33,43,0,38,36],
[44,39,48,44,39,44,43,43,0,37],
[39,43,40,42,44,37,42,45,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,37,38,31,27,39,52,47,45],
[39,0,36,38,49,38,50,37,56,58],
[44,45,0,41,43,36,49,43,47,44],
[43,43,40,0,38,36,43,40,54,52],
[50,32,38,43,0,41,40,39,52,54],
[54,43,45,45,40,0,46,34,49,49],
[42,31,32,38,41,35,0,28,53,39],
[29,44,38,41,42,47,53,0,49,49],
[34,25,34,27,29,32,28,32,0,37],
[36,23,37,29,27,32,42,32,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,35,37,41,41,41,37,40,38],
[33,0,25,38,37,38,39,37,38,34],
[46,56,0,40,43,43,43,49,43,50],
[44,43,41,0,42,38,42,45,37,41],
[40,44,38,39,0,37,37,48,47,42],
[40,43,38,43,44,0,40,39,39,47],
[40,42,38,39,44,41,0,46,35,38],
[44,44,32,36,33,42,35,0,45,44],
[41,43,38,44,34,42,46,36,0,39],
[43,47,31,40,39,34,43,37,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,37,49,39,41,40,46,44,47],
[38,0,42,50,36,43,45,43,43,46],
[44,39,0,41,41,44,42,40,46,39],
[32,31,40,0,37,36,39,38,42,34],
[42,45,40,44,0,46,45,42,49,40],
[40,38,37,45,35,0,41,35,40,40],
[41,36,39,42,36,40,0,40,46,40],
[35,38,41,43,39,46,41,0,43,46],
[37,38,35,39,32,41,35,38,0,36],
[34,35,42,47,41,41,41,35,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,45,38,34,34,40,36,34,34],
[41,0,40,39,39,32,41,36,36,39],
[36,41,0,41,39,39,46,34,41,37],
[43,42,40,0,44,38,49,43,40,38],
[47,42,42,37,0,31,46,41,42,39],
[47,49,42,43,50,0,46,37,46,46],
[41,40,35,32,35,35,0,34,37,38],
[45,45,47,38,40,44,47,0,42,45],
[47,45,40,41,39,35,44,39,0,38],
[47,42,44,43,42,35,43,36,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,26,43,31,34,54,45,36,31],
[27,0,34,42,45,31,39,43,46,34],
[55,47,0,54,40,42,47,54,57,36],
[38,39,27,0,24,32,38,46,42,36],
[50,36,41,57,0,36,46,58,57,46],
[47,50,39,49,45,0,54,55,46,40],
[27,42,34,43,35,27,0,52,50,23],
[36,38,27,35,23,26,29,0,36,18],
[45,35,24,39,24,35,31,45,0,29],
[50,47,45,45,35,41,58,63,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,48,40,44,31,28,47,45,35],
[50,0,51,52,50,33,45,50,49,33],
[33,30,0,42,46,36,36,42,41,45],
[41,29,39,0,49,37,36,26,39,34],
[37,31,35,32,0,25,28,35,31,21],
[50,48,45,44,56,0,40,49,46,39],
[53,36,45,45,53,41,0,45,39,33],
[34,31,39,55,46,32,36,0,45,29],
[36,32,40,42,50,35,42,36,0,40],
[46,48,36,47,60,42,48,52,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,41,39,41,46,43,35,44,37],
[45,0,44,44,43,47,37,43,33,39],
[40,37,0,40,41,38,40,41,34,38],
[42,37,41,0,44,49,50,44,40,41],
[40,38,40,37,0,45,45,39,35,32],
[35,34,43,32,36,0,39,43,34,34],
[38,44,41,31,36,42,0,38,40,36],
[46,38,40,37,42,38,43,0,36,44],
[37,48,47,41,46,47,41,45,0,40],
[44,42,43,40,49,47,45,37,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,43,45,36,40,34,43,44,44],
[33,0,32,34,36,35,25,28,33,35],
[38,49,0,47,48,40,49,41,47,48],
[36,47,34,0,41,32,40,28,33,43],
[45,45,33,40,0,35,40,36,39,46],
[41,46,41,49,46,0,43,37,35,41],
[47,56,32,41,41,38,0,46,46,48],
[38,53,40,53,45,44,35,0,42,42],
[37,48,34,48,42,46,35,39,0,37],
[37,46,33,38,35,40,33,39,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,29,59,37,39,59,28,36,30],
[42,0,23,42,21,38,48,33,30,41],
[52,58,0,49,31,32,40,29,53,25],
[22,39,32,0,18,28,25,13,23,23],
[44,60,50,63,0,49,71,30,67,50],
[42,43,49,53,32,0,59,41,42,27],
[22,33,41,56,10,22,0,22,33,23],
[53,48,52,68,51,40,59,0,58,31],
[45,51,28,58,14,39,48,23,0,28],
[51,40,56,58,31,54,58,50,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,41,30,44,33,41,43,39,56],
[52,0,43,42,47,43,39,43,38,40],
[40,38,0,37,56,46,42,51,49,41],
[51,39,44,0,55,44,55,57,51,47],
[37,34,25,26,0,41,43,46,36,36],
[48,38,35,37,40,0,52,60,61,43],
[40,42,39,26,38,29,0,43,35,47],
[38,38,30,24,35,21,38,0,33,43],
[42,43,32,30,45,20,46,48,0,42],
[25,41,40,34,45,38,34,38,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,43,42,42,42,33,42,40,47],
[44,0,43,41,43,37,41,49,42,41],
[38,38,0,37,36,38,37,43,35,47],
[39,40,44,0,41,39,35,44,38,42],
[39,38,45,40,0,40,38,46,44,43],
[39,44,43,42,41,0,35,46,31,49],
[48,40,44,46,43,46,0,47,41,50],
[39,32,38,37,35,35,34,0,35,43],
[41,39,46,43,37,50,40,46,0,47],
[34,40,34,39,38,32,31,38,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,38,42,41,36,49,37,42,47],
[38,0,41,46,49,44,51,47,43,44],
[43,40,0,55,52,45,51,40,46,43],
[39,35,26,0,41,36,44,25,35,36],
[40,32,29,40,0,40,36,43,34,34],
[45,37,36,45,41,0,47,32,39,38],
[32,30,30,37,45,34,0,42,27,32],
[44,34,41,56,38,49,39,0,37,43],
[39,38,35,46,47,42,54,44,0,44],
[34,37,38,45,47,43,49,38,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,31,32,17,20,28,27,23,35],
[49,0,47,29,41,41,42,30,36,36],
[50,34,0,26,42,29,30,4,23,27],
[49,52,55,0,37,40,34,26,26,36],
[64,40,39,44,0,32,49,35,35,43],
[61,40,52,41,49,0,33,34,33,37],
[53,39,51,47,32,48,0,42,31,59],
[54,51,77,55,46,47,39,0,46,58],
[58,45,58,55,46,48,50,35,0,40],
[46,45,54,45,38,44,22,23,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,39,37,35,31,40,35,37,42],
[43,0,42,43,38,41,34,37,41,42],
[42,39,0,42,44,40,42,43,44,49],
[44,38,39,0,33,38,36,36,42,40],
[46,43,37,48,0,42,42,37,50,47],
[50,40,41,43,39,0,39,36,42,45],
[41,47,39,45,39,42,0,35,43,45],
[46,44,38,45,44,45,46,0,50,45],
[44,40,37,39,31,39,38,31,0,39],
[39,39,32,41,34,36,36,36,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,34,42,49,39,48,44,39,34],
[41,0,44,47,41,38,40,44,41,35],
[47,37,0,41,46,42,38,39,39,34],
[39,34,40,0,39,32,33,38,42,36],
[32,40,35,42,0,40,31,45,34,35],
[42,43,39,49,41,0,43,53,45,40],
[33,41,43,48,50,38,0,49,33,35],
[37,37,42,43,36,28,32,0,39,30],
[42,40,42,39,47,36,48,42,0,43],
[47,46,47,45,46,41,46,51,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,36,46,41,45,49,39,45,34],
[51,0,46,48,50,47,56,48,43,40],
[45,35,0,39,46,36,52,40,39,41],
[35,33,42,0,33,36,46,37,35,37],
[40,31,35,48,0,38,46,44,35,41],
[36,34,45,45,43,0,44,32,38,38],
[32,25,29,35,35,37,0,40,33,34],
[42,33,41,44,37,49,41,0,41,40],
[36,38,42,46,46,43,48,40,0,41],
[47,41,40,44,40,43,47,41,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,49,37,53,42,41,44,42,38],
[34,0,39,32,43,37,34,36,36,32],
[32,42,0,34,47,34,40,40,30,33],
[44,49,47,0,53,39,45,43,39,38],
[28,38,34,28,0,30,37,34,33,32],
[39,44,47,42,51,0,48,43,41,43],
[40,47,41,36,44,33,0,40,38,37],
[37,45,41,38,47,38,41,0,42,41],
[39,45,51,42,48,40,43,39,0,43],
[43,49,48,43,49,38,44,40,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,30,40,30,40,39,43,39,46],
[39,0,38,35,41,37,35,42,42,40],
[51,43,0,41,42,44,34,46,52,47],
[41,46,40,0,41,51,44,42,42,50],
[51,40,39,40,0,41,46,43,47,39],
[41,44,37,30,40,0,32,41,40,51],
[42,46,47,37,35,49,0,50,43,42],
[38,39,35,39,38,40,31,0,41,45],
[42,39,29,39,34,41,38,40,0,40],
[35,41,34,31,42,30,39,36,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,40,29,33,36,32,51,41,34],
[42,0,43,27,34,37,51,49,48,46],
[41,38,0,39,39,27,31,47,49,47],
[52,54,42,0,42,38,49,45,48,43],
[48,47,42,39,0,43,41,49,45,49],
[45,44,54,43,38,0,40,56,58,48],
[49,30,50,32,40,41,0,58,51,33],
[30,32,34,36,32,25,23,0,40,35],
[40,33,32,33,36,23,30,41,0,41],
[47,35,34,38,32,33,48,46,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,38,56,39,46,33,47,44,44],
[36,0,41,32,42,41,35,46,36,36],
[43,40,0,47,43,42,39,43,40,51],
[25,49,34,0,30,46,25,33,43,36],
[42,39,38,51,0,49,42,37,48,50],
[35,40,39,35,32,0,28,34,38,40],
[48,46,42,56,39,53,0,41,53,58],
[34,35,38,48,44,47,40,0,39,50],
[37,45,41,38,33,43,28,42,0,44],
[37,45,30,45,31,41,23,31,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,37,38,37,30,37,37,37,34],
[48,0,37,47,39,37,42,30,32,29],
[44,44,0,37,53,39,42,40,39,39],
[43,34,44,0,43,38,47,46,36,37],
[44,42,28,38,0,35,39,38,37,31],
[51,44,42,43,46,0,43,38,42,41],
[44,39,39,34,42,38,0,39,31,31],
[44,51,41,35,43,43,42,0,38,36],
[44,49,42,45,44,39,50,43,0,39],
[47,52,42,44,50,40,50,45,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,35,40,37,40,48,44,38,45],
[41,0,41,40,34,41,40,41,37,41],
[46,40,0,40,38,42,48,40,36,43],
[41,41,41,0,42,38,43,39,40,44],
[44,47,43,39,0,46,52,47,46,46],
[41,40,39,43,35,0,43,41,43,41],
[33,41,33,38,29,38,0,35,36,42],
[37,40,41,42,34,40,46,0,36,42],
[43,44,45,41,35,38,45,45,0,46],
[36,40,38,37,35,40,39,39,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,38,22,37,25,34,31,58,38],
[49,0,35,33,36,34,31,35,55,41],
[43,46,0,29,46,30,40,38,51,51],
[59,48,52,0,52,36,51,52,65,55],
[44,45,35,29,0,25,47,43,63,42],
[56,47,51,45,56,0,54,62,72,38],
[47,50,41,30,34,27,0,32,59,46],
[50,46,43,29,38,19,49,0,55,44],
[23,26,30,16,18,9,22,26,0,26],
[43,40,30,26,39,43,35,37,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,39,40,49,41,43,38,50,42],
[40,0,40,35,44,32,47,43,46,41],
[42,41,0,39,49,45,52,44,50,46],
[41,46,42,0,41,38,49,45,46,42],
[32,37,32,40,0,40,42,36,42,41],
[40,49,36,43,41,0,55,43,52,40],
[38,34,29,32,39,26,0,37,47,44],
[43,38,37,36,45,38,44,0,43,36],
[31,35,31,35,39,29,34,38,0,35],
[39,40,35,39,40,41,37,45,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,45,42,50,39,44,28,46,37],
[39,0,35,31,41,18,47,45,32,16],
[36,46,0,27,52,33,56,42,27,27],
[39,50,54,0,44,27,41,43,49,41],
[31,40,29,37,0,40,45,38,25,31],
[42,63,48,54,41,0,65,52,56,39],
[37,34,25,40,36,16,0,32,22,29],
[53,36,39,38,43,29,49,0,27,22],
[35,49,54,32,56,25,59,54,0,31],
[44,65,54,40,50,42,52,59,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,47,37,33,49,28,38,37,46],
[43,0,46,37,44,42,36,41,42,31],
[34,35,0,38,25,48,42,39,34,38],
[44,44,43,0,23,40,52,42,39,45],
[48,37,56,58,0,54,47,43,45,56],
[32,39,33,41,27,0,41,44,33,48],
[53,45,39,29,34,40,0,49,43,51],
[43,40,42,39,38,37,32,0,39,27],
[44,39,47,42,36,48,38,42,0,45],
[35,50,43,36,25,33,30,54,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,35,41,29,30,37,44,27,39],
[43,0,40,36,36,42,44,42,33,42],
[46,41,0,32,39,32,44,38,37,39],
[40,45,49,0,39,36,49,47,41,43],
[52,45,42,42,0,41,51,47,38,47],
[51,39,49,45,40,0,51,52,42,55],
[44,37,37,32,30,30,0,35,31,40],
[37,39,43,34,34,29,46,0,34,39],
[54,48,44,40,43,39,50,47,0,45],
[42,39,42,38,34,26,41,42,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,44,52,47,44,40,42,39],
[37,0,46,42,43,49,34,41,45,40],
[39,35,0,41,31,47,40,34,42,29],
[37,39,40,0,40,42,37,46,36,39],
[29,38,50,41,0,60,34,33,36,40],
[34,32,34,39,21,0,33,33,37,30],
[37,47,41,44,47,48,0,54,42,35],
[41,40,47,35,48,48,27,0,35,34],
[39,36,39,45,45,44,39,46,0,44],
[42,41,52,42,41,51,46,47,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,33,26,42,43,38,31,41,38],
[50,0,34,30,46,44,33,36,41,37],
[48,47,0,41,54,54,47,38,40,50],
[55,51,40,0,52,46,36,38,46,45],
[39,35,27,29,0,46,38,31,28,39],
[38,37,27,35,35,0,34,33,35,35],
[43,48,34,45,43,47,0,38,43,46],
[50,45,43,43,50,48,43,0,32,42],
[40,40,41,35,53,46,38,49,0,38],
[43,44,31,36,42,46,35,39,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,39,49,40,45,43,45,48,42],
[33,0,36,41,31,39,31,41,41,42],
[42,45,0,43,43,36,35,41,42,45],
[32,40,38,0,33,36,40,40,34,37],
[41,50,38,48,0,44,40,49,44,48],
[36,42,45,45,37,0,40,44,44,41],
[38,50,46,41,41,41,0,41,42,41],
[36,40,40,41,32,37,40,0,37,42],
[33,40,39,47,37,37,39,44,0,42],
[39,39,36,44,33,40,40,39,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,33,46,25,36,36,45,42,37],
[35,0,37,48,34,45,55,54,38,40],
[48,44,0,44,25,29,45,52,33,39],
[35,33,37,0,34,25,42,46,27,25],
[56,47,56,47,0,33,55,60,51,46],
[45,36,52,56,48,0,60,61,44,50],
[45,26,36,39,26,21,0,49,30,42],
[36,27,29,35,21,20,32,0,15,29],
[39,43,48,54,30,37,51,66,0,40],
[44,41,42,56,35,31,39,52,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,40,39,48,46,39,39,46,49],
[30,0,40,39,37,41,31,34,34,42],
[41,41,0,43,42,45,43,39,42,49],
[42,42,38,0,49,43,39,44,38,49],
[33,44,39,32,0,39,33,41,35,44],
[35,40,36,38,42,0,31,35,35,47],
[42,50,38,42,48,50,0,45,43,56],
[42,47,42,37,40,46,36,0,34,46],
[35,47,39,43,46,46,38,47,0,51],
[32,39,32,32,37,34,25,35,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,36,34,39,36,38,36,42,46],
[49,0,36,42,41,35,49,32,46,47],
[45,45,0,44,38,46,50,38,46,46],
[47,39,37,0,43,40,48,40,45,48],
[42,40,43,38,0,37,50,43,39,50],
[45,46,35,41,44,0,49,41,46,52],
[43,32,31,33,31,32,0,35,43,43],
[45,49,43,41,38,40,46,0,48,51],
[39,35,35,36,42,35,38,33,0,39],
[35,34,35,33,31,29,38,30,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,27,55,23,55,41,35,37,55],
[49,0,49,38,37,38,49,38,38,42],
[54,32,0,55,23,55,52,41,37,42],
[26,43,26,0,45,54,54,22,25,54],
[58,44,58,36,0,62,62,36,39,62],
[26,43,26,27,19,0,61,31,34,43],
[40,32,29,27,19,20,0,45,48,42],
[46,43,40,59,45,50,36,0,39,50],
[44,43,44,56,42,47,33,42,0,33],
[26,39,39,27,19,38,39,31,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,29,38,45,47,34,39,47,44],
[35,0,29,42,36,41,32,37,51,43],
[52,52,0,48,46,51,43,39,55,53],
[43,39,33,0,42,37,36,33,44,37],
[36,45,35,39,0,41,41,42,54,42],
[34,40,30,44,40,0,39,37,45,38],
[47,49,38,45,40,42,0,50,46,41],
[42,44,42,48,39,44,31,0,47,46],
[34,30,26,37,27,36,35,34,0,34],
[37,38,28,44,39,43,40,35,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,24,35,27,24,31,36,37,22],
[47,0,40,33,27,38,24,37,25,22],
[57,41,0,44,38,50,39,38,34,37],
[46,48,37,0,32,35,43,44,50,34],
[54,54,43,49,0,53,40,69,47,36],
[57,43,31,46,28,0,43,44,39,41],
[50,57,42,38,41,38,0,53,25,36],
[45,44,43,37,12,37,28,0,26,29],
[44,56,47,31,34,42,56,55,0,37],
[59,59,44,47,45,40,45,52,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,33,42,38,46,35,41,37,49],
[44,0,34,46,47,42,41,45,31,48],
[48,47,0,46,40,43,42,44,43,38],
[39,35,35,0,29,42,29,29,29,37],
[43,34,41,52,0,42,39,32,42,46],
[35,39,38,39,39,0,33,38,29,41],
[46,40,39,52,42,48,0,44,45,47],
[40,36,37,52,49,43,37,0,31,36],
[44,50,38,52,39,52,36,50,0,47],
[32,33,43,44,35,40,34,45,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,59,30,28,48,55,37,32,50],
[39,0,49,35,43,54,34,39,36,49],
[22,32,0,21,26,38,18,21,25,22],
[51,46,60,0,43,52,49,41,34,68],
[53,38,55,38,0,60,50,31,33,52],
[33,27,43,29,21,0,24,22,24,45],
[26,47,63,32,31,57,0,43,43,42],
[44,42,60,40,50,59,38,0,36,56],
[49,45,56,47,48,57,38,45,0,54],
[31,32,59,13,29,36,39,25,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,38,38,37,48,48,38,28,30],
[51,0,62,59,61,51,42,70,51,33],
[43,19,0,47,36,37,39,55,29,29],
[43,22,34,0,29,30,40,49,11,12],
[44,20,45,52,0,40,39,63,53,29],
[33,30,44,51,41,0,28,51,52,20],
[33,39,42,41,42,53,0,42,42,45],
[43,11,26,32,18,30,39,0,43,11],
[53,30,52,70,28,29,39,38,0,21],
[51,48,52,69,52,61,36,70,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,47,56,49,34,56,44,40,42],
[33,0,44,46,43,32,54,43,46,38],
[34,37,0,46,50,22,47,33,38,31],
[25,35,35,0,33,19,46,33,26,24],
[32,38,31,48,0,34,56,48,40,35],
[47,49,59,62,47,0,50,52,36,49],
[25,27,34,35,25,31,0,36,27,33],
[37,38,48,48,33,29,45,0,32,47],
[41,35,43,55,41,45,54,49,0,44],
[39,43,50,57,46,32,48,34,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,31,36,33,35,43,46,39,29],
[41,0,43,36,41,45,40,47,44,35],
[50,38,0,42,49,40,44,52,43,36],
[45,45,39,0,46,42,49,47,39,46],
[48,40,32,35,0,32,40,47,44,35],
[46,36,41,39,49,0,45,48,44,45],
[38,41,37,32,41,36,0,35,41,39],
[35,34,29,34,34,33,46,0,28,33],
[42,37,38,42,37,37,40,53,0,41],
[52,46,45,35,46,36,42,48,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,54,46,47,31,41,41,50,36],
[36,0,41,40,43,29,37,28,46,44],
[27,40,0,31,31,32,28,29,36,36],
[35,41,50,0,44,37,38,40,45,49],
[34,38,50,37,0,33,30,37,41,41],
[50,52,49,44,48,0,36,42,43,49],
[40,44,53,43,51,45,0,34,39,42],
[40,53,52,41,44,39,47,0,42,45],
[31,35,45,36,40,38,42,39,0,37],
[45,37,45,32,40,32,39,36,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,34,42,41,36,37,37,45,37],
[43,0,41,35,47,36,42,48,49,43],
[47,40,0,40,47,36,34,39,39,31],
[39,46,41,0,37,45,33,42,44,52],
[40,34,34,44,0,37,22,35,47,44],
[45,45,45,36,44,0,35,47,52,47],
[44,39,47,48,59,46,0,51,45,55],
[44,33,42,39,46,34,30,0,41,41],
[36,32,42,37,34,29,36,40,0,32],
[44,38,50,29,37,34,26,40,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,46,42,43,37,40,45,47,42],
[45,0,42,43,40,43,39,44,46,36],
[35,39,0,40,40,35,40,43,41,37],
[39,38,41,0,43,38,37,46,46,42],
[38,41,41,38,0,38,36,42,42,38],
[44,38,46,43,43,0,41,41,49,42],
[41,42,41,44,45,40,0,42,42,39],
[36,37,38,35,39,40,39,0,52,37],
[34,35,40,35,39,32,39,29,0,31],
[39,45,44,39,43,39,42,44,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,17,31,26,33,39,41,33,24],
[57,0,37,39,41,41,47,53,43,33],
[64,44,0,49,48,50,54,58,50,39],
[50,42,32,0,29,42,45,41,46,29],
[55,40,33,52,0,50,56,54,47,41],
[48,40,31,39,31,0,40,40,44,32],
[42,34,27,36,25,41,0,43,32,27],
[40,28,23,40,27,41,38,0,42,27],
[48,38,31,35,34,37,49,39,0,36],
[57,48,42,52,40,49,54,54,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,39,41,37,42,37,48,40,35],
[44,0,39,49,42,33,38,52,43,33],
[42,42,0,42,40,36,38,49,40,37],
[40,32,39,0,32,34,35,43,38,33],
[44,39,41,49,0,46,40,47,39,41],
[39,48,45,47,35,0,41,54,38,40],
[44,43,43,46,41,40,0,45,44,40],
[33,29,32,38,34,27,36,0,29,33],
[41,38,41,43,42,43,37,52,0,42],
[46,48,44,48,40,41,41,48,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,43,38,44,43,43,39,38,43],
[43,0,47,48,43,45,49,39,40,46],
[38,34,0,38,41,36,40,33,37,40],
[43,33,43,0,42,46,36,37,39,40],
[37,38,40,39,0,39,41,41,42,37],
[38,36,45,35,42,0,41,41,36,37],
[38,32,41,45,40,40,0,37,35,44],
[42,42,48,44,40,40,44,0,39,46],
[43,41,44,42,39,45,46,42,0,48],
[38,35,41,41,44,44,37,35,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,47,46,40,41,49,45,49,35],
[33,0,41,41,33,40,39,39,35,34],
[34,40,0,35,41,34,37,38,32,34],
[35,40,46,0,38,47,47,33,39,37],
[41,48,40,43,0,41,37,41,33,43],
[40,41,47,34,40,0,29,36,35,30],
[32,42,44,34,44,52,0,37,37,41],
[36,42,43,48,40,45,44,0,26,41],
[32,46,49,42,48,46,44,55,0,45],
[46,47,47,44,38,51,40,40,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,41,44,48,45,36,46,44,39],
[39,0,29,42,42,41,34,44,36,29],
[40,52,0,46,48,48,41,42,47,42],
[37,39,35,0,43,39,34,41,40,29],
[33,39,33,38,0,42,36,41,38,34],
[36,40,33,42,39,0,38,42,45,35],
[45,47,40,47,45,43,0,48,41,47],
[35,37,39,40,40,39,33,0,40,31],
[37,45,34,41,43,36,40,41,0,39],
[42,52,39,52,47,46,34,50,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,25,31,34,36,43,25,22,31],
[40,0,29,43,37,45,45,25,36,37],
[56,52,0,41,50,47,48,35,45,61],
[50,38,40,0,38,42,45,41,44,58],
[47,44,31,43,0,48,62,36,45,51],
[45,36,34,39,33,0,44,24,26,41],
[38,36,33,36,19,37,0,30,28,32],
[56,56,46,40,45,57,51,0,31,51],
[59,45,36,37,36,55,53,50,0,44],
[50,44,20,23,30,40,49,30,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,34,42,41,38,39,36,38,47],
[54,0,38,49,50,44,50,43,51,50],
[47,43,0,46,44,40,48,33,48,45],
[39,32,35,0,36,39,45,32,31,48],
[40,31,37,45,0,48,41,42,44,40],
[43,37,41,42,33,0,39,34,40,45],
[42,31,33,36,40,42,0,41,37,37],
[45,38,48,49,39,47,40,0,47,52],
[43,30,33,50,37,41,44,34,0,39],
[34,31,36,33,41,36,44,29,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,39,38,38,43,36,41,38,44],
[43,0,42,39,35,40,42,43,43,42],
[42,39,0,40,46,35,40,38,41,36],
[43,42,41,0,44,38,40,46,45,41],
[43,46,35,37,0,42,44,39,42,47],
[38,41,46,43,39,0,39,36,45,49],
[45,39,41,41,37,42,0,39,40,41],
[40,38,43,35,42,45,42,0,45,44],
[43,38,40,36,39,36,41,36,0,38],
[37,39,45,40,34,32,40,37,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,46,38,35,47,41,38,31,43],
[43,0,44,33,44,44,42,35,37,36],
[35,37,0,31,31,37,37,35,32,37],
[43,48,50,0,37,50,46,46,46,40],
[46,37,50,44,0,47,44,40,45,44],
[34,37,44,31,34,0,30,36,34,39],
[40,39,44,35,37,51,0,29,37,42],
[43,46,46,35,41,45,52,0,47,39],
[50,44,49,35,36,47,44,34,0,39],
[38,45,44,41,37,42,39,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,50,34,40,52,48,52,45,37],
[34,0,46,41,33,40,44,53,46,26],
[31,35,0,21,31,42,40,45,34,25],
[47,40,60,0,35,46,44,58,55,41],
[41,48,50,46,0,45,50,56,36,32],
[29,41,39,35,36,0,37,54,40,41],
[33,37,41,37,31,44,0,43,48,25],
[29,28,36,23,25,27,38,0,32,25],
[36,35,47,26,45,41,33,49,0,26],
[44,55,56,40,49,40,56,56,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,39,20,29,37,51,20,31,17],
[48,0,48,34,49,47,36,28,49,33],
[42,33,0,43,48,46,51,42,46,42],
[61,47,38,0,51,38,39,42,47,28],
[52,32,33,30,0,38,35,16,20,23],
[44,34,35,43,43,0,37,26,28,29],
[30,45,30,42,46,44,0,32,47,30],
[61,53,39,39,65,55,49,0,51,43],
[50,32,35,34,61,53,34,30,0,34],
[64,48,39,53,58,52,51,38,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,55,45,47,62,35,42,40],
[40,0,52,64,54,49,59,41,39,34],
[40,29,0,44,33,31,55,27,43,50],
[26,17,37,0,28,35,35,41,41,26],
[36,27,48,53,0,29,68,35,43,48],
[34,32,50,46,52,0,54,16,39,37],
[19,22,26,46,13,27,0,27,25,30],
[46,40,54,40,46,65,54,0,46,34],
[39,42,38,40,38,42,56,35,0,56],
[41,47,31,55,33,44,51,47,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,33,41,35,29,38,37,38,48],
[41,0,37,46,39,37,43,43,40,43],
[48,44,0,47,42,48,34,42,41,48],
[40,35,34,0,31,31,33,37,33,41],
[46,42,39,50,0,47,37,47,41,48],
[52,44,33,50,34,0,37,44,37,43],
[43,38,47,48,44,44,0,43,45,48],
[44,38,39,44,34,37,38,0,35,49],
[43,41,40,48,40,44,36,46,0,48],
[33,38,33,40,33,38,33,32,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,45,29,65,52,56,18,32,45],
[29,0,52,36,81,61,72,38,26,29],
[36,29,0,36,68,59,42,31,12,45],
[52,45,45,0,58,45,69,45,36,45],
[16,0,13,23,0,3,33,13,3,16],
[29,20,22,36,78,0,55,35,0,29],
[25,9,39,12,48,26,0,18,26,25],
[63,43,50,36,68,46,63,0,46,72],
[49,55,69,45,78,81,55,35,0,58],
[36,52,36,36,65,52,56,9,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,44,38,42,47,44,31,42,50],
[39,0,37,38,45,44,41,42,45,48],
[37,44,0,31,40,45,36,37,43,46],
[43,43,50,0,49,46,45,33,47,46],
[39,36,41,32,0,38,43,39,38,41],
[34,37,36,35,43,0,37,28,35,36],
[37,40,45,36,38,44,0,33,42,49],
[50,39,44,48,42,53,48,0,49,46],
[39,36,38,34,43,46,39,32,0,44],
[31,33,35,35,40,45,32,35,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,31,26,36,38,19,32,42,25],
[31,0,22,24,30,42,25,44,36,39],
[50,59,0,37,43,52,44,61,51,42],
[55,57,44,0,40,49,48,51,49,43],
[45,51,38,41,0,59,30,53,50,51],
[43,39,29,32,22,0,11,33,40,33],
[62,56,37,33,51,70,0,47,54,46],
[49,37,20,30,28,48,34,0,46,26],
[39,45,30,32,31,41,27,35,0,48],
[56,42,39,38,30,48,35,55,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,39,42,40,32,22,52,39,40],
[30,0,26,37,32,26,25,26,14,25],
[42,55,0,44,38,29,22,34,41,30],
[39,44,37,0,37,33,34,37,25,36],
[41,49,43,44,0,36,42,41,36,41],
[49,55,52,48,45,0,45,53,39,53],
[59,56,59,47,39,36,0,43,35,52],
[29,55,47,44,40,28,38,0,30,42],
[42,67,40,56,45,42,46,51,0,47],
[41,56,51,45,40,28,29,39,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,46,53,55,41,28,45,32,51],
[35,0,53,55,46,19,32,43,24,40],
[35,28,0,37,31,28,18,41,25,48],
[28,26,44,0,36,27,35,23,36,48],
[26,35,50,45,0,30,37,52,38,30],
[40,62,53,54,51,0,41,47,49,46],
[53,49,63,46,44,40,0,37,48,45],
[36,38,40,58,29,34,44,0,42,41],
[49,57,56,45,43,32,33,39,0,46],
[30,41,33,33,51,35,36,40,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,27,31,28,52,55,28,28,38],
[38,0,38,33,38,54,45,27,40,44],
[54,43,0,40,39,60,59,31,31,42],
[50,48,41,0,38,53,53,42,58,42],
[53,43,42,43,0,51,61,36,45,54],
[29,27,21,28,30,0,54,25,31,39],
[26,36,22,28,20,27,0,19,32,31],
[53,54,50,39,45,56,62,0,46,57],
[53,41,50,23,36,50,49,35,0,50],
[43,37,39,39,27,42,50,24,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,35,49,43,52,43,50,45,54],
[49,0,38,44,36,45,39,36,32,56],
[46,43,0,51,45,52,35,51,45,59],
[32,37,30,0,44,44,32,41,29,44],
[38,45,36,37,0,38,41,43,43,58],
[29,36,29,37,43,0,32,36,39,54],
[38,42,46,49,40,49,0,43,56,49],
[31,45,30,40,38,45,38,0,42,53],
[36,49,36,52,38,42,25,39,0,40],
[27,25,22,37,23,27,32,28,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,43,36,39,39,38,42,37,35],
[41,0,38,47,46,37,41,49,39,38],
[38,43,0,40,41,42,34,46,41,35],
[45,34,41,0,44,34,35,47,38,39],
[42,35,40,37,0,32,31,45,31,34],
[42,44,39,47,49,0,35,49,37,38],
[43,40,47,46,50,46,0,51,38,47],
[39,32,35,34,36,32,30,0,37,35],
[44,42,40,43,50,44,43,44,0,37],
[46,43,46,42,47,43,34,46,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,0,18,56,37,30,30,47,37],
[44,0,15,29,19,7,28,18,17,22],
[81,66,0,47,56,66,40,59,47,81],
[63,52,34,0,71,52,45,30,62,52],
[25,62,25,10,0,35,40,40,35,32],
[44,74,15,29,46,0,40,30,37,27],
[51,53,41,36,41,41,0,31,51,41],
[51,63,22,51,41,51,50,0,32,22],
[34,64,34,19,46,44,30,49,0,34],
[44,59,0,29,49,54,40,59,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,31,43,37,31,48,33,40,33],
[48,0,44,46,40,46,46,48,46,45],
[50,37,0,44,53,49,49,50,43,52],
[38,35,37,0,49,39,40,47,42,37],
[44,41,28,32,0,26,36,30,40,42],
[50,35,32,42,55,0,45,40,41,49],
[33,35,32,41,45,36,0,42,42,39],
[48,33,31,34,51,41,39,0,45,54],
[41,35,38,39,41,40,39,36,0,44],
[48,36,29,44,39,32,42,27,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,10,21,10,10,18,21,24,10],
[71,0,43,32,32,54,40,37,55,67],
[71,38,0,42,33,17,38,39,31,44],
[60,49,39,0,41,33,40,33,55,41],
[71,49,48,40,0,44,53,44,42,49],
[71,27,64,48,37,0,42,50,48,48],
[63,41,43,41,28,39,0,26,39,63],
[60,44,42,48,37,31,55,0,37,61],
[57,26,50,26,39,33,42,44,0,52],
[71,14,37,40,32,33,18,20,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,40,39,41,40,40,46,43,42],
[48,0,36,39,42,38,42,43,38,39],
[41,45,0,42,41,43,39,47,36,36],
[42,42,39,0,40,39,41,44,39,40],
[40,39,40,41,0,38,39,42,35,39],
[41,43,38,42,43,0,41,43,40,43],
[41,39,42,40,42,40,0,43,38,37],
[35,38,34,37,39,38,38,0,34,40],
[38,43,45,42,46,41,43,47,0,43],
[39,42,45,41,42,38,44,41,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,38,40,35,34,41,40,48,44],
[37,0,38,33,35,35,33,28,41,39],
[43,43,0,43,46,40,44,38,42,42],
[41,48,38,0,35,37,37,41,41,49],
[46,46,35,46,0,43,38,41,40,46],
[47,46,41,44,38,0,39,42,38,47],
[40,48,37,44,43,42,0,37,42,43],
[41,53,43,40,40,39,44,0,42,49],
[33,40,39,40,41,43,39,39,0,51],
[37,42,39,32,35,34,38,32,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,46,37,30,22,50,30,32,43],
[54,0,60,42,44,45,64,35,37,30],
[35,21,0,4,12,12,27,43,18,43],
[44,39,77,0,57,22,58,47,40,47],
[51,37,69,24,0,14,46,44,31,67],
[59,36,69,59,67,0,73,43,54,66],
[31,17,54,23,35,8,0,34,27,47],
[51,46,38,34,37,38,47,0,28,37],
[49,44,63,41,50,27,54,53,0,53],
[38,51,38,34,14,15,34,44,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,43,47,43,39,39,38,32,45],
[43,0,44,52,41,38,37,38,40,51],
[38,37,0,46,36,33,37,40,36,46],
[34,29,35,0,26,30,21,30,34,41],
[38,40,45,55,0,47,40,44,39,47],
[42,43,48,51,34,0,34,39,42,45],
[42,44,44,60,41,47,0,41,37,43],
[43,43,41,51,37,42,40,0,37,42],
[49,41,45,47,42,39,44,44,0,55],
[36,30,35,40,34,36,38,39,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,46,46,38,46,39,48,44],
[39,0,45,43,40,38,41,43,45,44],
[39,36,0,43,40,39,43,45,54,38],
[35,38,38,0,36,40,43,40,52,39],
[35,41,41,45,0,40,44,41,58,42],
[43,43,42,41,41,0,42,40,49,47],
[35,40,38,38,37,39,0,38,48,37],
[42,38,36,41,40,41,43,0,45,40],
[33,36,27,29,23,32,33,36,0,30],
[37,37,43,42,39,34,44,41,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,41,47,41,37,39,39,36],
[40,0,41,43,48,44,46,50,42,44],
[40,40,0,45,45,54,50,45,41,50],
[40,38,36,0,48,46,37,46,40,45],
[34,33,36,33,0,36,35,37,37,37],
[40,37,27,35,45,0,29,33,39,39],
[44,35,31,44,46,52,0,43,41,43],
[42,31,36,35,44,48,38,0,36,39],
[42,39,40,41,44,42,40,45,0,43],
[45,37,31,36,44,42,38,42,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,33,45,26,46,37,28,26,44],
[37,0,27,41,21,48,45,29,29,36],
[48,54,0,51,44,50,55,36,41,58],
[36,40,30,0,38,43,55,30,30,43],
[55,60,37,43,0,48,50,38,34,55],
[35,33,31,38,33,0,44,22,34,41],
[44,36,26,26,31,37,0,29,29,39],
[53,52,45,51,43,59,52,0,39,62],
[55,52,40,51,47,47,52,42,0,49],
[37,45,23,38,26,40,42,19,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,41,40,35,28,38,43,40,42],
[43,0,40,33,34,33,36,32,31,32],
[40,41,0,43,39,41,46,43,41,38],
[41,48,38,0,37,41,47,47,36,53],
[46,47,42,44,0,39,49,42,45,46],
[53,48,40,40,42,0,40,42,40,41],
[43,45,35,34,32,41,0,38,41,44],
[38,49,38,34,39,39,43,0,45,42],
[41,50,40,45,36,41,40,36,0,40],
[39,49,43,28,35,40,37,39,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,43,50,43,38,38,41,43,36],
[44,0,44,45,43,40,48,39,45,41],
[38,37,0,37,35,36,32,35,39,34],
[31,36,44,0,45,37,30,35,38,36],
[38,38,46,36,0,42,34,40,38,38],
[43,41,45,44,39,0,40,45,53,32],
[43,33,49,51,47,41,0,46,49,41],
[40,42,46,46,41,36,35,0,46,39],
[38,36,42,43,43,28,32,35,0,37],
[45,40,47,45,43,49,40,42,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,41,35,41,37,42,37,52,43],
[42,0,50,36,43,35,39,41,54,40],
[40,31,0,30,39,33,36,32,53,41],
[46,45,51,0,47,43,35,42,50,44],
[40,38,42,34,0,31,36,31,40,36],
[44,46,48,38,50,0,43,40,55,46],
[39,42,45,46,45,38,0,42,48,45],
[44,40,49,39,50,41,39,0,54,43],
[29,27,28,31,41,26,33,27,0,41],
[38,41,40,37,45,35,36,38,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,48,34,46,53,42,54,34,40],
[35,0,42,37,43,41,35,45,42,46],
[33,39,0,46,39,41,32,50,31,46],
[47,44,35,0,48,40,48,50,45,47],
[35,38,42,33,0,42,30,48,34,48],
[28,40,40,41,39,0,40,47,39,34],
[39,46,49,33,51,41,0,47,42,54],
[27,36,31,31,33,34,34,0,36,37],
[47,39,50,36,47,42,39,45,0,50],
[41,35,35,34,33,47,27,44,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,36,33,37,41,34,40,45,42],
[46,0,40,45,45,41,34,37,48,47],
[45,41,0,46,43,48,43,43,38,44],
[48,36,35,0,37,43,39,38,42,43],
[44,36,38,44,0,44,43,37,45,51],
[40,40,33,38,37,0,38,35,41,40],
[47,47,38,42,38,43,0,37,53,48],
[41,44,38,43,44,46,44,0,47,45],
[36,33,43,39,36,40,28,34,0,43],
[39,34,37,38,30,41,33,36,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,36,51,39,33,45,35,42,30],
[31,0,40,36,35,34,36,33,37,31],
[45,41,0,35,35,44,44,30,32,42],
[30,45,46,0,36,42,35,41,46,40],
[42,46,46,45,0,46,48,51,38,45],
[48,47,37,39,35,0,40,46,36,46],
[36,45,37,46,33,41,0,35,40,52],
[46,48,51,40,30,35,46,0,29,37],
[39,44,49,35,43,45,41,52,0,38],
[51,50,39,41,36,35,29,44,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,53,47,46,47,39,52,43,39],
[41,0,46,46,37,49,39,44,43,43],
[28,35,0,32,30,30,27,41,30,43],
[34,35,49,0,32,39,43,44,45,41],
[35,44,51,49,0,52,41,51,35,39],
[34,32,51,42,29,0,37,44,43,40],
[42,42,54,38,40,44,0,46,32,47],
[29,37,40,37,30,37,35,0,32,40],
[38,38,51,36,46,38,49,49,0,39],
[42,38,38,40,42,41,34,41,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,46,12,22,81,71,46,36,71],
[45,0,10,22,22,69,81,46,10,81],
[35,71,0,47,47,71,71,71,71,71],
[69,59,34,0,81,69,81,34,34,81],
[59,59,34,0,0,59,71,24,24,59],
[0,12,10,12,22,0,71,46,0,36],
[10,0,10,0,10,10,0,10,10,24],
[35,35,10,47,57,35,71,0,0,71],
[45,71,10,47,57,81,71,81,0,71],
[10,0,10,0,22,45,57,10,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,43,51,61,46,40,51,57,55],
[38,0,35,49,51,38,42,34,47,45],
[38,46,0,37,40,36,43,46,44,48],
[30,32,44,0,36,35,42,39,32,46],
[20,30,41,45,0,29,23,29,27,38],
[35,43,45,46,52,0,35,51,43,42],
[41,39,38,39,58,46,0,38,46,59],
[30,47,35,42,52,30,43,0,42,43],
[24,34,37,49,54,38,35,39,0,45],
[26,36,33,35,43,39,22,38,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,40,33,46,44,42,37,28,28],
[24,0,21,28,65,43,47,33,20,44],
[41,60,0,34,63,62,40,33,33,44],
[48,53,47,0,53,55,42,48,48,37],
[35,16,18,28,0,48,32,31,27,36],
[37,38,19,26,33,0,17,15,25,23],
[39,34,41,39,49,64,0,41,38,38],
[44,48,48,33,50,66,40,0,29,46],
[53,61,48,33,54,56,43,52,0,49],
[53,37,37,44,45,58,43,35,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,32,33,41,49,39,33,34],
[42,0,38,36,28,45,53,39,39,43],
[42,43,0,40,32,41,46,41,38,44],
[49,45,41,0,34,46,50,48,42,40],
[48,53,49,47,0,51,56,47,40,43],
[40,36,40,35,30,0,43,38,39,34],
[32,28,35,31,25,38,0,31,37,35],
[42,42,40,33,34,43,50,0,39,46],
[48,42,43,39,41,42,44,42,0,40],
[47,38,37,41,38,47,46,35,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,41,36,38,41,40,35,39,36],
[38,0,40,35,40,31,43,33,47,33],
[40,41,0,42,47,37,40,37,42,38],
[45,46,39,0,36,36,40,40,46,37],
[43,41,34,45,0,36,40,34,44,31],
[40,50,44,45,45,0,39,43,52,39],
[41,38,41,41,41,42,0,42,46,31],
[46,48,44,41,47,38,39,0,47,41],
[42,34,39,35,37,29,35,34,0,29],
[45,48,43,44,50,42,50,40,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,39,54,26,29,28,26,41,43],
[46,0,40,64,47,42,47,32,57,55],
[42,41,0,58,26,39,47,19,62,51],
[27,17,23,0,29,25,25,17,28,41],
[55,34,55,52,0,33,41,29,51,51],
[52,39,42,56,48,0,50,41,52,60],
[53,34,34,56,40,31,0,38,42,46],
[55,49,62,64,52,40,43,0,64,62],
[40,24,19,53,30,29,39,17,0,32],
[38,26,30,40,30,21,35,19,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,38,46,35,43,43,40,39,46],
[45,0,46,40,44,44,49,51,41,50],
[43,35,0,39,42,37,39,39,44,40],
[35,41,42,0,39,45,43,40,42,46],
[46,37,39,42,0,41,40,44,39,49],
[38,37,44,36,40,0,40,37,39,45],
[38,32,42,38,41,41,0,41,38,47],
[41,30,42,41,37,44,40,0,39,45],
[42,40,37,39,42,42,43,42,0,42],
[35,31,41,35,32,36,34,36,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,41,30,44,46,44,33,47,47],
[35,0,40,35,34,45,46,44,45,28],
[40,41,0,42,34,42,44,45,48,39],
[51,46,39,0,42,49,49,34,46,44],
[37,47,47,39,0,54,40,35,46,39],
[35,36,39,32,27,0,38,30,43,36],
[37,35,37,32,41,43,0,45,41,39],
[48,37,36,47,46,51,36,0,36,41],
[34,36,33,35,35,38,40,45,0,38],
[34,53,42,37,42,45,42,40,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,46,41,46,33,41,40,37,41],
[39,0,48,49,46,41,43,43,41,44],
[35,33,0,33,39,31,29,34,32,35],
[40,32,48,0,43,26,34,40,40,36],
[35,35,42,38,0,32,43,43,36,42],
[48,40,50,55,49,0,48,46,42,52],
[40,38,52,47,38,33,0,46,40,39],
[41,38,47,41,38,35,35,0,35,35],
[44,40,49,41,45,39,41,46,0,37],
[40,37,46,45,39,29,42,46,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,40,33,45,44,38,40,50,38],
[36,0,35,29,41,34,41,42,41,37],
[41,46,0,39,41,36,51,48,48,47],
[48,52,42,0,46,51,52,41,41,40],
[36,40,40,35,0,39,39,42,36,38],
[37,47,45,30,42,0,39,43,41,35],
[43,40,30,29,42,42,0,40,43,41],
[41,39,33,40,39,38,41,0,41,32],
[31,40,33,40,45,40,38,40,0,34],
[43,44,34,41,43,46,40,49,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,47,49,40,43,46,41,38,39],
[40,0,39,42,38,37,50,39,35,41],
[34,42,0,37,38,37,36,37,34,40],
[32,39,44,0,39,45,38,39,36,44],
[41,43,43,42,0,40,40,46,41,37],
[38,44,44,36,41,0,40,46,38,43],
[35,31,45,43,41,41,0,44,35,39],
[40,42,44,42,35,35,37,0,36,40],
[43,46,47,45,40,43,46,45,0,41],
[42,40,41,37,44,38,42,41,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,39,47,38,39,48,47,35,42],
[36,0,41,49,46,44,50,45,40,43],
[42,40,0,43,44,40,49,46,40,44],
[34,32,38,0,34,41,41,39,29,37],
[43,35,37,47,0,39,46,46,43,43],
[42,37,41,40,42,0,48,39,39,44],
[33,31,32,40,35,33,0,35,33,39],
[34,36,35,42,35,42,46,0,34,39],
[46,41,41,52,38,42,48,47,0,42],
[39,38,37,44,38,37,42,42,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,43,34,39,39,35,42,44,37],
[38,0,40,29,40,38,33,32,46,43],
[38,41,0,29,34,37,34,33,40,35],
[47,52,52,0,45,34,48,40,48,53],
[42,41,47,36,0,43,46,39,51,45],
[42,43,44,47,38,0,49,40,48,46],
[46,48,47,33,35,32,0,40,45,38],
[39,49,48,41,42,41,41,0,42,39],
[37,35,41,33,30,33,36,39,0,32],
[44,38,46,28,36,35,43,42,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,41,45,41,42,38,39,41,47],
[43,0,38,39,44,36,38,36,41,44],
[40,43,0,37,37,40,42,35,42,46],
[36,42,44,0,43,38,43,40,40,41],
[40,37,44,38,0,40,37,35,46,43],
[39,45,41,43,41,0,39,40,42,42],
[43,43,39,38,44,42,0,40,40,45],
[42,45,46,41,46,41,41,0,40,47],
[40,40,39,41,35,39,41,41,0,40],
[34,37,35,40,38,39,36,34,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,26,32,39,16,7,34,51,27],
[51,0,27,43,22,40,40,44,55,60],
[55,54,0,23,44,31,31,57,75,33],
[49,38,58,0,38,31,28,47,65,17],
[42,59,37,43,0,35,42,55,62,44],
[65,41,50,50,46,0,34,34,75,44],
[74,41,50,53,39,47,0,57,68,54],
[47,37,24,34,26,47,24,0,65,34],
[30,26,6,16,19,6,13,16,0,23],
[54,21,48,64,37,37,27,47,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,49,47,47,40,45,44,51,52],
[31,0,42,40,38,36,36,30,45,37],
[32,39,0,38,43,41,31,38,38,32],
[34,41,43,0,43,39,40,37,38,36],
[34,43,38,38,0,37,37,32,39,38],
[41,45,40,42,44,0,41,35,49,44],
[36,45,50,41,44,40,0,32,48,34],
[37,51,43,44,49,46,49,0,46,53],
[30,36,43,43,42,32,33,35,0,43],
[29,44,49,45,43,37,47,28,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,31,33,30,37,30,39,28,42],
[44,0,41,42,45,50,31,53,51,46],
[50,40,0,40,43,51,23,45,43,44],
[48,39,41,0,46,42,44,42,42,35],
[51,36,38,35,0,33,20,49,28,31],
[44,31,30,39,48,0,24,32,30,38],
[51,50,58,37,61,57,0,48,38,53],
[42,28,36,39,32,49,33,0,31,37],
[53,30,38,39,53,51,43,50,0,29],
[39,35,37,46,50,43,28,44,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,32,37,43,36,29,26,27,24],
[50,0,29,34,36,40,32,47,48,26],
[49,52,0,36,48,48,49,45,45,47],
[44,47,45,0,55,41,43,42,38,43],
[38,45,33,26,0,28,32,28,34,31],
[45,41,33,40,53,0,34,37,32,26],
[52,49,32,38,49,47,0,32,42,38],
[55,34,36,39,53,44,49,0,42,37],
[54,33,36,43,47,49,39,39,0,40],
[57,55,34,38,50,55,43,44,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,46,20,32,23,81,51,50,44],
[42,0,28,5,32,23,63,63,53,53],
[35,53,0,26,53,44,81,53,53,53],
[61,76,55,0,79,32,79,79,76,79],
[49,49,28,2,0,23,63,52,60,54],
[58,58,37,49,58,0,61,58,58,58],
[0,18,0,2,18,20,0,39,39,18],
[30,18,28,2,29,23,42,0,29,23],
[31,28,28,5,21,23,42,52,0,31],
[37,28,28,2,27,23,63,58,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,40,31,41,39,40,30,37,37],
[39,0,36,39,44,36,45,41,41,33],
[41,45,0,37,42,40,42,39,37,34],
[50,42,44,0,51,43,50,42,43,38],
[40,37,39,30,0,33,44,24,42,33],
[42,45,41,38,48,0,44,34,43,41],
[41,36,39,31,37,37,0,27,31,31],
[51,40,42,39,57,47,54,0,40,42],
[44,40,44,38,39,38,50,41,0,41],
[44,48,47,43,48,40,50,39,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,43,42,46,44,45,43,36,38],
[37,0,45,41,41,46,43,37,32,38],
[38,36,0,40,41,40,40,40,37,36],
[39,40,41,0,43,53,43,48,43,41],
[35,40,40,38,0,47,41,43,40,41],
[37,35,41,28,34,0,37,39,32,33],
[36,38,41,38,40,44,0,43,33,42],
[38,44,41,33,38,42,38,0,31,36],
[45,49,44,38,41,49,48,50,0,44],
[43,43,45,40,40,48,39,45,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,42,48,42,42,39,37,49,39],
[41,0,44,44,44,41,33,39,45,43],
[39,37,0,40,40,42,35,31,34,40],
[33,37,41,0,42,40,32,34,39,39],
[39,37,41,39,0,40,32,37,40,40],
[39,40,39,41,41,0,44,36,40,41],
[42,48,46,49,49,37,0,41,51,45],
[44,42,50,47,44,45,40,0,45,43],
[32,36,47,42,41,41,30,36,0,39],
[42,38,41,42,41,40,36,38,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,51,42,46,37,41,48,45,48],
[29,0,36,43,32,39,36,40,39,38],
[30,45,0,37,38,31,25,35,31,32],
[39,38,44,0,39,37,33,36,44,41],
[35,49,43,42,0,35,36,44,43,43],
[44,42,50,44,46,0,41,34,38,48],
[40,45,56,48,45,40,0,34,45,45],
[33,41,46,45,37,47,47,0,33,41],
[36,42,50,37,38,43,36,48,0,36],
[33,43,49,40,38,33,36,40,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,34,33,38,32,38,35,37,39],
[47,0,42,38,36,29,39,30,33,39],
[47,39,0,39,41,33,37,37,36,41],
[48,43,42,0,42,41,43,46,38,50],
[43,45,40,39,0,38,37,40,34,37],
[49,52,48,40,43,0,46,44,35,46],
[43,42,44,38,44,35,0,39,34,40],
[46,51,44,35,41,37,42,0,44,45],
[44,48,45,43,47,46,47,37,0,45],
[42,42,40,31,44,35,41,36,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,48,46,48,45,44,41,41,44],
[43,0,51,39,48,36,41,36,37,45],
[33,30,0,31,31,36,31,33,35,33],
[35,42,50,0,50,39,42,37,43,43],
[33,33,50,31,0,33,34,29,35,46],
[36,45,45,42,48,0,43,40,42,44],
[37,40,50,39,47,38,0,38,36,48],
[40,45,48,44,52,41,43,0,35,43],
[40,44,46,38,46,39,45,46,0,45],
[37,36,48,38,35,37,33,38,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,53,49,48,49,49,44,56,51],
[43,0,40,45,40,46,44,49,50,37],
[28,41,0,40,38,40,42,42,40,35],
[32,36,41,0,39,42,39,44,50,34],
[33,41,43,42,0,42,42,41,49,38],
[32,35,41,39,39,0,42,43,39,41],
[32,37,39,42,39,39,0,44,45,26],
[37,32,39,37,40,38,37,0,41,33],
[25,31,41,31,32,42,36,40,0,32],
[30,44,46,47,43,40,55,48,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,51,33,47,52,44,39,45,45],
[47,0,40,24,34,35,18,34,30,46],
[30,41,0,36,44,42,29,32,32,34],
[48,57,45,0,42,51,50,48,33,43],
[34,47,37,39,0,32,37,49,31,36],
[29,46,39,30,49,0,48,43,31,24],
[37,63,52,31,44,33,0,50,32,34],
[42,47,49,33,32,38,31,0,31,43],
[36,51,49,48,50,50,49,50,0,61],
[36,35,47,38,45,57,47,38,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,40,33,59,36,39,49,57,40],
[48,0,38,44,48,52,55,50,55,45],
[41,43,0,40,44,54,54,48,59,45],
[48,37,41,0,46,36,56,49,49,45],
[22,33,37,35,0,37,34,44,56,33],
[45,29,27,45,44,0,39,46,48,44],
[42,26,27,25,47,42,0,45,58,52],
[32,31,33,32,37,35,36,0,48,41],
[24,26,22,32,25,33,23,33,0,23],
[41,36,36,36,48,37,29,40,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,62,41,44,54,40,47,50,57],
[39,0,50,38,41,48,36,34,49,44],
[19,31,0,27,31,31,34,28,33,39],
[40,43,54,0,37,44,46,28,41,47],
[37,40,50,44,0,50,42,34,38,46],
[27,33,50,37,31,0,44,23,35,53],
[41,45,47,35,39,37,0,38,54,60],
[34,47,53,53,47,58,43,0,46,52],
[31,32,48,40,43,46,27,35,0,60],
[24,37,42,34,35,28,21,29,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,43,20,53,28,38,30,36,30],
[61,0,45,45,41,42,47,35,45,49],
[38,36,0,14,44,33,38,30,34,42],
[61,36,67,0,56,48,40,55,71,50],
[28,40,37,25,0,38,25,43,41,57],
[53,39,48,33,43,0,32,46,48,44],
[43,34,43,41,56,49,0,37,43,39],
[51,46,51,26,38,35,44,0,51,43],
[45,36,47,10,40,33,38,30,0,30],
[51,32,39,31,24,37,42,38,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,44,34,37,44,32,32,35,42],
[41,0,44,30,36,38,30,37,36,47],
[37,37,0,31,44,43,31,36,34,46],
[47,51,50,0,47,44,42,39,45,56],
[44,45,37,34,0,41,32,37,41,38],
[37,43,38,37,40,0,28,35,36,43],
[49,51,50,39,49,53,0,56,45,56],
[49,44,45,42,44,46,25,0,42,44],
[46,45,47,36,40,45,36,39,0,46],
[39,34,35,25,43,38,25,37,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,45,45,46,36,36,39,49,36],
[45,0,36,46,27,39,30,36,32,44],
[36,45,0,44,48,41,36,39,44,34],
[36,35,37,0,35,34,37,34,41,37],
[35,54,33,46,0,35,35,38,36,37],
[45,42,40,47,46,0,37,37,39,33],
[45,51,45,44,46,44,0,41,46,39],
[42,45,42,47,43,44,40,0,39,36],
[32,49,37,40,45,42,35,42,0,37],
[45,37,47,44,44,48,42,45,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,35,36,51,34,29,47,37,33],
[38,0,42,30,62,57,43,61,41,33],
[46,39,0,41,46,41,34,40,33,22],
[45,51,40,0,57,42,37,47,43,27],
[30,19,35,24,0,37,31,26,26,20],
[47,24,40,39,44,0,35,32,42,34],
[52,38,47,44,50,46,0,56,43,44],
[34,20,41,34,55,49,25,0,36,26],
[44,40,48,38,55,39,38,45,0,33],
[48,48,59,54,61,47,37,55,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,47,34,38,36,47,42,52,32],
[52,0,41,38,43,45,50,50,49,36],
[34,40,0,35,41,46,44,35,45,39],
[47,43,46,0,45,38,51,46,51,44],
[43,38,40,36,0,45,40,42,42,42],
[45,36,35,43,36,0,44,53,45,39],
[34,31,37,30,41,37,0,39,43,31],
[39,31,46,35,39,28,42,0,40,33],
[29,32,36,30,39,36,38,41,0,30],
[49,45,42,37,39,42,50,48,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,35,36,34,34,40,42,36,38],
[36,0,25,37,36,34,32,46,43,37],
[46,56,0,47,47,46,35,56,55,50],
[45,44,34,0,32,34,39,41,36,47],
[47,45,34,49,0,36,38,52,49,45],
[47,47,35,47,45,0,39,57,42,41],
[41,49,46,42,43,42,0,53,37,44],
[39,35,25,40,29,24,28,0,20,31],
[45,38,26,45,32,39,44,61,0,38],
[43,44,31,34,36,40,37,50,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,38,46,50,39,48,44,47,45],
[39,0,30,41,50,37,39,41,43,39],
[43,51,0,46,57,40,52,48,50,45],
[35,40,35,0,40,31,43,36,45,39],
[31,31,24,41,0,32,38,31,39,26],
[42,44,41,50,49,0,47,40,44,46],
[33,42,29,38,43,34,0,36,37,39],
[37,40,33,45,50,41,45,0,51,40],
[34,38,31,36,42,37,44,30,0,34],
[36,42,36,42,55,35,42,41,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,40,39,47,51,47,46,45,41],
[39,0,42,38,45,45,54,45,43,47],
[41,39,0,45,53,44,46,40,49,44],
[42,43,36,0,44,42,39,37,40,39],
[34,36,28,37,0,33,44,31,40,33],
[30,36,37,39,48,0,45,34,39,38],
[34,27,35,42,37,36,0,42,43,37],
[35,36,41,44,50,47,39,0,49,38],
[36,38,32,41,41,42,38,32,0,38],
[40,34,37,42,48,43,44,43,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,44,42,39,46,41,50,36,31],
[36,0,43,41,25,45,40,41,30,31],
[37,38,0,43,32,46,45,35,38,41],
[39,40,38,0,30,49,41,36,35,35],
[42,56,49,51,0,53,53,50,37,35],
[35,36,35,32,28,0,37,42,32,38],
[40,41,36,40,28,44,0,45,39,31],
[31,40,46,45,31,39,36,0,37,31],
[45,51,43,46,44,49,42,44,0,39],
[50,50,40,46,46,43,50,50,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,26,44,43,47,44,38,38,23],
[33,0,28,45,34,35,39,32,24,40],
[55,53,0,52,44,40,65,39,36,47],
[37,36,29,0,51,48,41,51,31,36],
[38,47,37,30,0,22,36,10,36,31],
[34,46,41,33,59,0,34,34,46,32],
[37,42,16,40,45,47,0,40,24,26],
[43,49,42,30,71,47,41,0,49,36],
[43,57,45,50,45,35,57,32,0,43],
[58,41,34,45,50,49,55,45,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,33,79,33,54,33,33,41,71],
[48,0,33,54,2,81,41,35,58,46],
[48,48,0,48,48,73,50,27,71,48],
[2,27,33,0,2,27,25,2,33,38],
[48,79,33,79,0,81,41,35,79,54],
[27,0,8,54,0,0,8,0,8,38],
[48,40,31,56,40,73,0,27,54,48],
[48,46,54,79,46,81,54,0,79,38],
[40,23,10,48,2,73,27,2,0,40],
[10,35,33,43,27,43,33,43,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,39,39,43,39,37,36,39,39],
[45,0,38,40,46,42,37,40,40,37],
[42,43,0,43,38,39,38,35,38,40],
[42,41,38,0,36,43,37,30,36,35],
[38,35,43,45,0,44,43,36,40,33],
[42,39,42,38,37,0,35,30,37,37],
[44,44,43,44,38,46,0,32,35,37],
[45,41,46,51,45,51,49,0,38,45],
[42,41,43,45,41,44,46,43,0,37],
[42,44,41,46,48,44,44,36,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,51,47,41,37,32,26,43,46],
[44,0,46,46,42,59,44,42,42,39],
[30,35,0,45,48,40,46,28,29,38],
[34,35,36,0,31,46,33,23,38,34],
[40,39,33,50,0,37,39,37,33,43],
[44,22,41,35,44,0,33,26,25,39],
[49,37,35,48,42,48,0,42,34,45],
[55,39,53,58,44,55,39,0,42,50],
[38,39,52,43,48,56,47,39,0,43],
[35,42,43,47,38,42,36,31,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,36,39,40,37,39,38,35,28],
[46,0,46,39,39,34,43,44,37,37],
[45,35,0,41,51,44,39,45,45,34],
[42,42,40,0,49,46,42,42,46,41],
[41,42,30,32,0,38,38,37,35,28],
[44,47,37,35,43,0,43,36,40,37],
[42,38,42,39,43,38,0,37,36,35],
[43,37,36,39,44,45,44,0,39,32],
[46,44,36,35,46,41,45,42,0,33],
[53,44,47,40,53,44,46,49,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,40,37,48,43,38,38,37,32],
[40,0,42,35,40,31,35,44,39,24],
[41,39,0,42,47,45,43,40,41,33],
[44,46,39,0,50,33,31,50,35,36],
[33,41,34,31,0,29,29,45,42,27],
[38,50,36,48,52,0,47,43,50,45],
[43,46,38,50,52,34,0,43,42,40],
[43,37,41,31,36,38,38,0,38,36],
[44,42,40,46,39,31,39,43,0,39],
[49,57,48,45,54,36,41,45,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,42,52,46,50,53,40,50,41],
[38,0,58,52,55,38,52,43,44,45],
[39,23,0,47,46,22,40,44,41,40],
[29,29,34,0,48,38,41,30,39,40],
[35,26,35,33,0,32,31,34,38,39],
[31,43,59,43,49,0,45,55,44,56],
[28,29,41,40,50,36,0,30,49,36],
[41,38,37,51,47,26,51,0,52,49],
[31,37,40,42,43,37,32,29,0,45],
[40,36,41,41,42,25,45,32,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,48,44,37,48,40,33,52,44],
[40,0,40,43,33,55,41,32,43,42],
[33,41,0,46,31,43,37,22,40,34],
[37,38,35,0,25,47,33,25,42,34],
[44,48,50,56,0,51,44,35,54,45],
[33,26,38,34,30,0,24,33,37,29],
[41,40,44,48,37,57,0,39,48,48],
[48,49,59,56,46,48,42,0,59,40],
[29,38,41,39,27,44,33,22,0,36],
[37,39,47,47,36,52,33,41,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,32,40,38,32,25,40,39,32],
[44,0,51,48,43,40,43,48,48,36],
[49,30,0,39,32,34,32,43,44,37],
[41,33,42,0,30,39,32,42,47,37],
[43,38,49,51,0,46,32,47,43,37],
[49,41,47,42,35,0,36,51,43,32],
[56,38,49,49,49,45,0,52,47,42],
[41,33,38,39,34,30,29,0,35,38],
[42,33,37,34,38,38,34,46,0,31],
[49,45,44,44,44,49,39,43,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,41,45,32,59,38,59,50,34],
[42,0,30,30,30,44,38,45,59,37],
[40,51,0,37,60,53,60,39,62,49],
[36,51,44,0,43,59,40,32,51,33],
[49,51,21,38,0,51,49,45,56,26],
[22,37,28,22,30,0,24,25,37,28],
[43,43,21,41,32,57,0,42,34,27],
[22,36,42,49,36,56,39,0,39,32],
[31,22,19,30,25,44,47,42,0,21],
[47,44,32,48,55,53,54,49,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,53,43,43,47,37,55,41,52],
[37,0,43,45,39,45,39,48,40,42],
[28,38,0,32,40,35,28,45,32,45],
[38,36,49,0,38,49,37,43,31,35],
[38,42,41,43,0,43,33,43,39,41],
[34,36,46,32,38,0,32,46,25,43],
[44,42,53,44,48,49,0,52,37,50],
[26,33,36,38,38,35,29,0,33,37],
[40,41,49,50,42,56,44,48,0,48],
[29,39,36,46,40,38,31,44,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,55,65,40,63,58,45,78,25],
[41,0,48,51,43,53,51,71,61,28],
[26,33,0,45,56,66,58,25,81,28],
[16,30,36,0,20,30,39,46,59,16],
[41,38,25,61,0,26,28,41,61,5],
[18,28,15,51,55,0,64,25,61,41],
[23,30,23,42,53,17,0,20,55,46],
[36,10,56,35,40,56,61,0,58,35],
[3,20,0,22,20,20,26,23,0,3],
[56,53,53,65,76,40,35,46,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,36,35,47,39,34,32,42,39],
[31,0,35,32,38,38,42,35,35,38],
[45,46,0,33,48,47,38,39,30,44],
[46,49,48,0,46,48,51,34,36,42],
[34,43,33,35,0,38,30,28,33,37],
[42,43,34,33,43,0,42,31,40,34],
[47,39,43,30,51,39,0,40,33,39],
[49,46,42,47,53,50,41,0,37,52],
[39,46,51,45,48,41,48,44,0,42],
[42,43,37,39,44,47,42,29,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,50,41,46,54,39,31,50,35],
[46,0,61,42,47,44,26,42,43,50],
[31,20,0,17,27,38,21,25,26,11],
[40,39,64,0,56,70,43,47,50,51],
[35,34,54,25,0,51,31,35,54,46],
[27,37,43,11,30,0,22,19,20,45],
[42,55,60,38,50,59,0,36,56,40],
[50,39,56,34,46,62,45,0,49,41],
[31,38,55,31,27,61,25,32,0,35],
[46,31,70,30,35,36,41,40,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,30,38,24,28,39,64,27,20],
[33,0,26,37,21,7,5,36,21,33],
[51,55,0,54,38,34,38,67,38,50],
[43,44,27,0,27,44,28,44,27,27],
[57,60,43,54,0,41,29,76,43,49],
[53,74,47,37,40,0,42,70,40,36],
[42,76,43,53,52,39,0,76,43,52],
[17,45,14,37,5,11,5,0,22,1],
[54,60,43,54,38,41,38,59,0,37],
[61,48,31,54,32,45,29,80,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,58,36,36,48,46,57,67,71],
[40,0,50,40,46,30,46,53,53,57],
[23,31,0,49,22,43,41,47,39,45],
[45,41,32,0,22,34,53,31,59,53],
[45,35,59,59,0,29,45,59,37,41],
[33,51,38,47,52,0,33,47,59,51],
[35,35,40,28,36,48,0,49,43,57],
[24,28,34,50,22,34,32,0,53,45],
[14,28,42,22,44,22,38,28,0,22],
[10,24,36,28,40,30,24,36,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,69,50,57,45,54,57,34,48],
[21,0,64,37,34,21,47,65,36,54],
[12,17,0,27,24,22,40,46,13,42],
[31,44,54,0,30,46,62,67,36,52],
[24,47,57,51,0,25,60,47,28,54],
[36,60,59,35,56,0,49,48,54,46],
[27,34,41,19,21,32,0,60,15,54],
[24,16,35,14,34,33,21,0,35,42],
[47,45,68,45,53,27,66,46,0,60],
[33,27,39,29,27,35,27,39,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,45,41,39,41,44,43,46,39],
[43,0,39,41,42,41,43,45,41,46],
[36,42,0,45,37,45,44,45,49,43],
[40,40,36,0,41,41,51,51,44,51],
[42,39,44,40,0,48,48,42,37,40],
[40,40,36,40,33,0,34,37,42,42],
[37,38,37,30,33,47,0,35,42,51],
[38,36,36,30,39,44,46,0,40,42],
[35,40,32,37,44,39,39,41,0,53],
[42,35,38,30,41,39,30,39,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,41,44,41,43,38,43,36,45],
[44,0,41,43,36,43,38,42,40,48],
[40,40,0,40,36,41,35,38,42,41],
[37,38,41,0,39,41,40,42,49,43],
[40,45,45,42,0,43,42,43,41,43],
[38,38,40,40,38,0,36,34,39,40],
[43,43,46,41,39,45,0,41,43,50],
[38,39,43,39,38,47,40,0,38,52],
[45,41,39,32,40,42,38,43,0,47],
[36,33,40,38,38,41,31,29,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,33,43,37,48,40,42,39,45],
[46,0,39,47,42,49,41,40,44,37],
[48,42,0,52,34,44,43,39,43,49],
[38,34,29,0,45,38,38,40,38,37],
[44,39,47,36,0,49,42,45,41,49],
[33,32,37,43,32,0,31,35,40,36],
[41,40,38,43,39,50,0,45,34,44],
[39,41,42,41,36,46,36,0,39,47],
[42,37,38,43,40,41,47,42,0,39],
[36,44,32,44,32,45,37,34,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,9,30,31,44,19,24,20,27],
[61,0,27,39,46,46,38,32,21,33],
[72,54,0,55,42,55,43,54,38,46],
[51,42,26,0,48,52,52,36,44,27],
[50,35,39,33,0,44,36,29,43,35],
[37,35,26,29,37,0,42,33,31,35],
[62,43,38,29,45,39,0,43,37,35],
[57,49,27,45,52,48,38,0,41,52],
[61,60,43,37,38,50,44,40,0,37],
[54,48,35,54,46,46,46,29,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,31,37,35,39,37,45,31,33],
[39,0,35,32,32,39,32,37,37,35],
[50,46,0,41,48,45,38,48,35,51],
[44,49,40,0,41,41,40,43,32,43],
[46,49,33,40,0,36,41,43,37,45],
[42,42,36,40,45,0,33,45,43,45],
[44,49,43,41,40,48,0,53,40,42],
[36,44,33,38,38,36,28,0,37,41],
[50,44,46,49,44,38,41,44,0,43],
[48,46,30,38,36,36,39,40,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,37,37,40,41,29,34,47,33],
[51,0,38,32,48,40,31,42,47,36],
[44,43,0,38,43,39,39,46,46,38],
[44,49,43,0,39,44,41,37,49,45],
[41,33,38,42,0,35,28,43,41,36],
[40,41,42,37,46,0,35,38,41,39],
[52,50,42,40,53,46,0,38,51,52],
[47,39,35,44,38,43,43,0,45,39],
[34,34,35,32,40,40,30,36,0,30],
[48,45,43,36,45,42,29,42,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,37,39,49,81,25,25,57,25],
[24,0,26,14,36,48,25,27,46,14],
[44,55,0,56,37,69,45,49,57,55],
[42,67,25,0,35,67,45,25,45,13],
[32,45,44,46,0,79,57,45,57,33],
[0,33,12,14,2,0,25,25,45,13],
[56,56,36,36,24,56,0,24,56,24],
[56,54,32,56,36,56,57,0,56,42],
[24,35,24,36,24,36,25,25,0,35],
[56,67,26,68,48,68,57,39,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,45,50,38,39,54,38,43,42],
[36,0,43,49,29,41,40,49,40,40],
[36,38,0,33,39,43,35,39,30,27],
[31,32,48,0,36,38,43,36,38,36],
[43,52,42,45,0,38,49,45,38,39],
[42,40,38,43,43,0,50,39,32,41],
[27,41,46,38,32,31,0,37,38,35],
[43,32,42,45,36,42,44,0,36,36],
[38,41,51,43,43,49,43,45,0,39],
[39,41,54,45,42,40,46,45,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,30,38,18,18,39,55,17,34],
[65,0,48,38,44,28,49,55,35,28],
[51,33,0,71,51,51,55,55,33,51],
[43,43,10,0,26,26,61,43,43,43],
[63,37,30,55,0,28,55,71,33,55],
[63,53,30,55,53,0,55,53,37,37],
[42,32,26,20,26,26,0,53,0,26],
[26,26,26,38,10,28,28,0,0,44],
[64,46,48,38,48,44,81,81,0,64],
[47,53,30,38,26,44,55,37,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,47,35,52,41,44,50,39,38],
[31,0,57,48,45,39,45,40,46,36],
[34,24,0,34,36,32,31,45,30,27],
[46,33,47,0,46,33,43,43,42,34],
[29,36,45,35,0,28,40,50,42,46],
[40,42,49,48,53,0,53,53,48,47],
[37,36,50,38,41,28,0,41,48,44],
[31,41,36,38,31,28,40,0,43,39],
[42,35,51,39,39,33,33,38,0,43],
[43,45,54,47,35,34,37,42,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,51,42,37,39,39,44,38,47],
[41,0,33,31,24,22,31,35,14,44],
[30,48,0,40,33,47,23,41,30,43],
[39,50,41,0,31,34,35,31,29,56],
[44,57,48,50,0,43,43,38,46,50],
[42,59,34,47,38,0,45,40,42,51],
[42,50,58,46,38,36,0,35,34,50],
[37,46,40,50,43,41,46,0,33,56],
[43,67,51,52,35,39,47,48,0,53],
[34,37,38,25,31,30,31,25,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,37,32,31,40,40,33,30,25],
[53,0,46,45,40,48,48,43,38,41],
[44,35,0,41,39,33,45,40,42,39],
[49,36,40,0,40,40,46,36,38,34],
[50,41,42,41,0,45,53,37,44,42],
[41,33,48,41,36,0,40,36,38,37],
[41,33,36,35,28,41,0,30,36,29],
[48,38,41,45,44,45,51,0,40,41],
[51,43,39,43,37,43,45,41,0,39],
[56,40,42,47,39,44,52,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,50,34,42,42,38,39,40,24],
[55,0,47,24,42,51,48,39,27,33],
[31,34,0,27,47,41,40,37,37,26],
[47,57,54,0,47,34,43,36,41,43],
[39,39,34,34,0,35,45,46,33,29],
[39,30,40,47,46,0,51,36,42,35],
[43,33,41,38,36,30,0,25,38,41],
[42,42,44,45,35,45,56,0,39,50],
[41,54,44,40,48,39,43,42,0,34],
[57,48,55,38,52,46,40,31,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,45,42,41,49,48,45,40,38],
[32,0,29,29,32,34,42,45,36,34],
[36,52,0,37,37,47,51,50,43,33],
[39,52,44,0,33,50,46,51,46,38],
[40,49,44,48,0,51,55,50,47,38],
[32,47,34,31,30,0,44,44,41,39],
[33,39,30,35,26,37,0,38,34,30],
[36,36,31,30,31,37,43,0,38,26],
[41,45,38,35,34,40,47,43,0,43],
[43,47,48,43,43,42,51,55,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,39,37,37,40,37,40,36,34],
[48,0,42,45,43,44,40,49,39,44],
[42,39,0,44,45,45,43,45,38,42],
[44,36,37,0,34,35,39,40,35,35],
[44,38,36,47,0,45,42,42,43,40],
[41,37,36,46,36,0,43,39,38,42],
[44,41,38,42,39,38,0,42,35,40],
[41,32,36,41,39,42,39,0,36,37],
[45,42,43,46,38,43,46,45,0,49],
[47,37,39,46,41,39,41,44,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,37,47,51,51,47,38,47,37],
[30,0,47,57,42,53,57,43,53,47],
[44,34,0,25,19,44,48,34,47,4],
[34,24,56,0,23,38,47,38,47,47],
[30,39,62,58,0,39,58,44,48,62],
[30,28,37,43,42,0,43,19,52,37],
[34,24,33,34,23,38,0,15,47,33],
[43,38,47,43,37,62,66,0,57,47],
[34,28,34,34,33,29,34,24,0,34],
[44,34,77,34,19,44,48,34,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,41,48,45,37,49,44,52,49],
[33,0,35,38,38,38,46,32,38,43],
[40,46,0,43,36,38,47,38,42,44],
[33,43,38,0,34,40,45,32,46,41],
[36,43,45,47,0,41,47,44,48,51],
[44,43,43,41,40,0,50,36,42,51],
[32,35,34,36,34,31,0,29,43,37],
[37,49,43,49,37,45,52,0,50,51],
[29,43,39,35,33,39,38,31,0,40],
[32,38,37,40,30,30,44,30,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,40,40,38,40,34,35,38,36],
[43,0,46,45,46,39,43,49,44,37],
[41,35,0,42,39,39,34,39,41,33],
[41,36,39,0,40,33,32,42,35,36],
[43,35,42,41,0,47,35,38,42,37],
[41,42,42,48,34,0,33,40,43,35],
[47,38,47,49,46,48,0,56,53,42],
[46,32,42,39,43,41,25,0,40,32],
[43,37,40,46,39,38,28,41,0,39],
[45,44,48,45,44,46,39,49,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,42,43,47,38,58,49,40,52],
[48,0,42,54,56,40,55,52,41,55],
[39,39,0,50,44,41,55,46,39,51],
[38,27,31,0,46,32,56,30,33,54],
[34,25,37,35,0,34,45,38,33,44],
[43,41,40,49,47,0,54,50,38,51],
[23,26,26,25,36,27,0,33,21,29],
[32,29,35,51,43,31,48,0,35,52],
[41,40,42,48,48,43,60,46,0,52],
[29,26,30,27,37,30,52,29,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,31,38,50,51,43,50,41,50],
[46,0,41,41,52,44,39,51,46,42],
[50,40,0,49,53,46,27,50,49,45],
[43,40,32,0,45,43,37,45,43,33],
[31,29,28,36,0,38,22,42,37,42],
[30,37,35,38,43,0,29,48,42,40],
[38,42,54,44,59,52,0,49,46,51],
[31,30,31,36,39,33,32,0,37,38],
[40,35,32,38,44,39,35,44,0,41],
[31,39,36,48,39,41,30,43,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,32,35,42,42,43,44,49,45],
[41,0,45,36,44,41,36,39,40,39],
[49,36,0,44,46,35,44,40,49,39],
[46,45,37,0,42,41,41,48,48,45],
[39,37,35,39,0,39,40,49,45,47],
[39,40,46,40,42,0,43,36,47,40],
[38,45,37,40,41,38,0,40,47,44],
[37,42,41,33,32,45,41,0,43,39],
[32,41,32,33,36,34,34,38,0,38],
[36,42,42,36,34,41,37,42,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,40,43,47,42,44,43,43,45],
[32,0,36,35,40,40,40,41,40,46],
[41,45,0,44,41,44,45,40,50,45],
[38,46,37,0,45,45,45,48,43,46],
[34,41,40,36,0,42,40,35,39,46],
[39,41,37,36,39,0,36,45,41,41],
[37,41,36,36,41,45,0,43,44,48],
[38,40,41,33,46,36,38,0,38,44],
[38,41,31,38,42,40,37,43,0,44],
[36,35,36,35,35,40,33,37,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,38,32,46,41,35,39,50,42],
[38,0,32,36,36,43,34,41,40,36],
[43,49,0,43,47,45,37,47,49,46],
[49,45,38,0,45,44,47,46,46,41],
[35,45,34,36,0,38,31,33,39,41],
[40,38,36,37,43,0,31,38,43,44],
[46,47,44,34,50,50,0,48,48,47],
[42,40,34,35,48,43,33,0,38,40],
[31,41,32,35,42,38,33,43,0,43],
[39,45,35,40,40,37,34,41,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,67,32,23,46,41,43,59,33],
[62,0,58,41,42,53,61,40,50,43],
[14,23,0,24,28,46,30,43,43,16],
[49,40,57,0,39,57,38,45,53,45],
[58,39,53,42,0,30,49,58,58,52],
[35,28,35,24,51,0,37,43,44,37],
[40,20,51,43,32,44,0,47,35,47],
[38,41,38,36,23,38,34,0,23,22],
[22,31,38,28,23,37,46,58,0,27],
[48,38,65,36,29,44,34,59,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,32,43,35,65,31,47,53,29],
[28,0,17,15,7,28,21,38,42,20],
[49,64,0,58,56,63,39,42,67,51],
[38,66,23,0,37,67,17,34,62,46],
[46,74,25,44,0,44,22,39,52,51],
[16,53,18,14,37,0,16,20,34,26],
[50,60,42,64,59,65,0,39,56,35],
[34,43,39,47,42,61,42,0,51,34],
[28,39,14,19,29,47,25,30,0,23],
[52,61,30,35,30,55,46,47,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,46,45,45,43,41,38,44,42],
[42,0,42,43,43,41,46,41,41,39],
[35,39,0,37,40,37,38,38,36,32],
[36,38,44,0,41,44,46,43,39,40],
[36,38,41,40,0,44,45,44,36,45],
[38,40,44,37,37,0,36,38,34,37],
[40,35,43,35,36,45,0,40,40,39],
[43,40,43,38,37,43,41,0,43,46],
[37,40,45,42,45,47,41,38,0,44],
[39,42,49,41,36,44,42,35,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,43,43,41,56,46,44,40,50],
[40,0,49,52,39,60,59,52,36,64],
[38,32,0,43,47,56,49,45,39,48],
[38,29,38,0,41,46,49,45,45,45],
[40,42,34,40,0,45,52,45,46,48],
[25,21,25,35,36,0,47,41,35,38],
[35,22,32,32,29,34,0,38,33,31],
[37,29,36,36,36,40,43,0,23,37],
[41,45,42,36,35,46,48,58,0,50],
[31,17,33,36,33,43,50,44,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,33,38,45,33,38,33,37,37],
[49,0,38,39,51,41,44,35,37,43],
[48,43,0,40,44,46,44,36,42,42],
[43,42,41,0,40,50,40,37,35,42],
[36,30,37,41,0,30,41,36,37,35],
[48,40,35,31,51,0,47,43,34,46],
[43,37,37,41,40,34,0,33,36,40],
[48,46,45,44,45,38,48,0,41,45],
[44,44,39,46,44,47,45,40,0,43],
[44,38,39,39,46,35,41,36,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,38,52,36,43,36,50,46,42],
[40,0,47,46,42,49,47,55,46,46],
[43,34,0,46,41,43,31,45,45,40],
[29,35,35,0,32,43,34,48,36,43],
[45,39,40,49,0,48,44,62,45,44],
[38,32,38,38,33,0,36,46,44,43],
[45,34,50,47,37,45,0,50,43,48],
[31,26,36,33,19,35,31,0,32,32],
[35,35,36,45,36,37,38,49,0,40],
[39,35,41,38,37,38,33,49,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,47,50,43,39,38,36,40,50],
[32,0,43,49,39,36,28,34,41,40],
[34,38,0,53,37,40,30,35,39,39],
[31,32,28,0,34,28,32,25,36,36],
[38,42,44,47,0,38,32,42,36,46],
[42,45,41,53,43,0,41,40,47,45],
[43,53,51,49,49,40,0,44,45,49],
[45,47,46,56,39,41,37,0,48,46],
[41,40,42,45,45,34,36,33,0,45],
[31,41,42,45,35,36,32,35,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,45,39,34,44,37,47,28,37],
[47,0,43,44,40,41,43,46,38,50],
[36,38,0,30,28,36,28,38,27,30],
[42,37,51,0,42,33,45,41,37,39],
[47,41,53,39,0,41,40,50,44,38],
[37,40,45,48,40,0,34,40,34,39],
[44,38,53,36,41,47,0,40,34,36],
[34,35,43,40,31,41,41,0,38,36],
[53,43,54,44,37,47,47,43,0,47],
[44,31,51,42,43,42,45,45,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,41,45,37,44,40,42,46,45],
[38,0,46,43,39,46,40,39,55,37],
[40,35,0,44,37,41,39,36,45,43],
[36,38,37,0,32,41,35,43,55,51],
[44,42,44,49,0,46,42,30,52,42],
[37,35,40,40,35,0,31,37,42,35],
[41,41,42,46,39,50,0,47,49,45],
[39,42,45,38,51,44,34,0,46,47],
[35,26,36,26,29,39,32,35,0,35],
[36,44,38,30,39,46,36,34,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,24,35,42,34,21,42,29,36],
[31,0,34,30,36,27,42,39,37,39],
[57,47,0,43,39,42,25,40,44,46],
[46,51,38,0,37,39,27,36,23,47],
[39,45,42,44,0,39,27,41,41,45],
[47,54,39,42,42,0,25,53,38,42],
[60,39,56,54,54,56,0,55,47,50],
[39,42,41,45,40,28,26,0,33,34],
[52,44,37,58,40,43,34,48,0,47],
[45,42,35,34,36,39,31,47,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,42,39,32,43,42,38,37,38],
[38,0,38,37,37,33,41,31,31,39],
[39,43,0,36,33,41,40,33,34,34],
[42,44,45,0,41,39,41,39,44,40],
[49,44,48,40,0,45,44,46,36,42],
[38,48,40,42,36,0,41,42,35,38],
[39,40,41,40,37,40,0,36,37,37],
[43,50,48,42,35,39,45,0,42,40],
[44,50,47,37,45,46,44,39,0,42],
[43,42,47,41,39,43,44,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,40,45,37,44,44,42,40,39],
[33,0,35,40,34,42,38,33,33,31],
[41,46,0,43,36,48,42,49,50,43],
[36,41,38,0,34,46,36,43,40,39],
[44,47,45,47,0,46,48,41,44,40],
[37,39,33,35,35,0,38,35,44,36],
[37,43,39,45,33,43,0,38,38,42],
[39,48,32,38,40,46,43,0,42,39],
[41,48,31,41,37,37,43,39,0,42],
[42,50,38,42,41,45,39,42,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,37,48,26,34,38,39,32,38],
[44,0,31,40,30,41,38,32,34,34],
[44,50,0,46,39,45,36,38,35,39],
[33,41,35,0,44,43,32,32,31,34],
[55,51,42,37,0,41,43,43,35,43],
[47,40,36,38,40,0,38,40,37,36],
[43,43,45,49,38,43,0,46,38,34],
[42,49,43,49,38,41,35,0,39,36],
[49,47,46,50,46,44,43,42,0,40],
[43,47,42,47,38,45,47,45,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,51,41,44,41,46,45,50,39],
[40,0,49,47,41,44,51,49,36,33],
[30,32,0,42,37,34,45,31,33,28],
[40,34,39,0,35,46,49,37,39,30],
[37,40,44,46,0,45,48,37,37,39],
[40,37,47,35,36,0,51,45,38,31],
[35,30,36,32,33,30,0,35,30,22],
[36,32,50,44,44,36,46,0,36,37],
[31,45,48,42,44,43,51,45,0,42],
[42,48,53,51,42,50,59,44,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,38,34,39,36,51,29,40,43],
[45,0,39,38,44,47,44,44,43,42],
[43,42,0,44,45,46,47,39,36,53],
[47,43,37,0,40,43,44,37,42,44],
[42,37,36,41,0,36,43,25,46,48],
[45,34,35,38,45,0,44,31,45,44],
[30,37,34,37,38,37,0,33,45,47],
[52,37,42,44,56,50,48,0,48,53],
[41,38,45,39,35,36,36,33,0,43],
[38,39,28,37,33,37,34,28,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,44,43,54,50,39,49,50,49],
[34,0,45,32,37,33,33,46,40,40],
[37,36,0,41,43,41,44,45,41,38],
[38,49,40,0,43,45,43,48,44,48],
[27,44,38,38,0,36,26,37,35,36],
[31,48,40,36,45,0,32,42,47,45],
[42,48,37,38,55,49,0,44,41,44],
[32,35,36,33,44,39,37,0,40,45],
[31,41,40,37,46,34,40,41,0,37],
[32,41,43,33,45,36,37,36,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,47,40,47,42,48,48,44,45],
[34,0,46,38,45,44,51,52,40,46],
[34,35,0,38,35,43,40,45,41,34],
[41,43,43,0,36,44,43,40,43,37],
[34,36,46,45,0,42,43,37,40,45],
[39,37,38,37,39,0,42,42,36,41],
[33,30,41,38,38,39,0,46,33,43],
[33,29,36,41,44,39,35,0,30,34],
[37,41,40,38,41,45,48,51,0,47],
[36,35,47,44,36,40,38,47,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,45,44,39,41,45,44,40,39],
[40,0,41,40,32,39,38,45,40,39],
[36,40,0,40,36,38,44,42,37,41],
[37,41,41,0,40,37,41,43,40,39],
[42,49,45,41,0,43,43,49,44,37],
[40,42,43,44,38,0,38,47,43,41],
[36,43,37,40,38,43,0,46,42,37],
[37,36,39,38,32,34,35,0,35,34],
[41,41,44,41,37,38,39,46,0,43],
[42,42,40,42,44,40,44,47,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,52,35,40,26,47,15,46,47],
[60,0,56,37,63,58,63,24,56,51],
[29,25,0,19,34,28,32,7,43,38],
[46,44,62,0,42,37,59,26,43,34],
[41,18,47,39,0,28,53,42,50,41],
[55,23,53,44,53,0,55,31,50,58],
[34,18,49,22,28,26,0,22,36,41],
[66,57,74,55,39,50,59,0,56,51],
[35,25,38,38,31,31,45,25,0,57],
[34,30,43,47,40,23,40,30,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,45,36,65,19,21,31,25,21],
[57,0,40,27,60,30,48,27,30,34],
[36,41,0,45,55,39,34,43,11,36],
[45,54,36,0,63,43,42,45,47,52],
[16,21,26,18,0,12,25,9,18,16],
[62,51,42,38,69,0,50,60,44,36],
[60,33,47,39,56,31,0,19,44,28],
[50,54,38,36,72,21,62,0,32,16],
[56,51,70,34,63,37,37,49,0,39],
[60,47,45,29,65,45,53,65,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,31,46,40,49,44,42,48,32],
[51,0,48,40,43,48,41,46,43,36],
[50,33,0,44,41,43,42,33,46,37],
[35,41,37,0,45,46,49,43,45,38],
[41,38,40,36,0,39,39,40,40,40],
[32,33,38,35,42,0,42,41,39,35],
[37,40,39,32,42,39,0,47,43,42],
[39,35,48,38,41,40,34,0,51,37],
[33,38,35,36,41,42,38,30,0,36],
[49,45,44,43,41,46,39,44,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,38,41,33,42,46,27,39,28],
[35,0,44,33,42,41,44,40,37,35],
[43,37,0,29,34,41,40,37,37,33],
[40,48,52,0,42,41,52,45,46,42],
[48,39,47,39,0,43,54,35,41,39],
[39,40,40,40,38,0,43,38,41,36],
[35,37,41,29,27,38,0,37,40,33],
[54,41,44,36,46,43,44,0,42,46],
[42,44,44,35,40,40,41,39,0,38],
[53,46,48,39,42,45,48,35,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,33,40,44,44,35,38,52,40],
[44,0,38,42,41,37,40,33,41,38],
[48,43,0,56,47,50,39,49,52,47],
[41,39,25,0,40,41,36,43,42,39],
[37,40,34,41,0,44,42,33,44,44],
[37,44,31,40,37,0,41,35,42,38],
[46,41,42,45,39,40,0,42,50,38],
[43,48,32,38,48,46,39,0,49,47],
[29,40,29,39,37,39,31,32,0,38],
[41,43,34,42,37,43,43,34,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,40,49,45,41,42,46,47,38],
[26,0,27,27,30,32,25,34,33,19],
[41,54,0,37,47,37,43,46,43,41],
[32,54,44,0,36,40,31,38,42,36],
[36,51,34,45,0,35,35,38,51,42],
[40,49,44,41,46,0,38,38,48,46],
[39,56,38,50,46,43,0,38,46,39],
[35,47,35,43,43,43,43,0,47,36],
[34,48,38,39,30,33,35,34,0,38],
[43,62,40,45,39,35,42,45,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,41,33,43,54,54,37,31,48],
[34,0,32,27,41,47,37,48,37,36],
[40,49,0,44,48,59,57,56,57,44],
[48,54,37,0,57,58,67,52,56,42],
[38,40,33,24,0,43,45,37,33,38],
[27,34,22,23,38,0,49,41,36,36],
[27,44,24,14,36,32,0,35,24,39],
[44,33,25,29,44,40,46,0,40,38],
[50,44,24,25,48,45,57,41,0,38],
[33,45,37,39,43,45,42,43,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,34,44,43,40,61,32,42,53],
[34,0,34,31,20,35,46,34,45,48],
[47,47,0,29,50,37,59,48,60,43],
[37,50,52,0,57,43,52,34,47,42],
[38,61,31,24,0,50,55,34,28,41],
[41,46,44,38,31,0,60,45,43,38],
[20,35,22,29,26,21,0,26,31,36],
[49,47,33,47,47,36,55,0,46,58],
[39,36,21,34,53,38,50,35,0,48],
[28,33,38,39,40,43,45,23,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,51,46,39,49,38,56,42,44],
[19,0,47,36,27,37,25,44,24,20],
[30,34,0,28,42,25,28,47,28,30],
[35,45,53,0,38,48,51,52,26,40],
[42,54,39,43,0,41,38,50,32,36],
[32,44,56,33,40,0,39,46,35,34],
[43,56,53,30,43,42,0,47,34,34],
[25,37,34,29,31,35,34,0,30,33],
[39,57,53,55,49,46,47,51,0,39],
[37,61,51,41,45,47,47,48,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,54,37,41,33,50,42,35,55],
[33,0,40,41,34,52,47,35,47,47],
[27,41,0,51,31,43,59,33,33,64],
[44,40,30,0,26,36,50,40,27,42],
[40,47,50,55,0,36,52,26,28,54],
[48,29,38,45,45,0,48,48,44,45],
[31,34,22,31,29,33,0,31,42,31],
[39,46,48,41,55,33,50,0,42,48],
[46,34,48,54,53,37,39,39,0,44],
[26,34,17,39,27,36,50,33,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,43,43,42,42,37,42,43,48],
[39,0,37,37,37,38,45,41,37,46],
[38,44,0,39,37,41,41,36,42,46],
[38,44,42,0,39,37,38,37,40,45],
[39,44,44,42,0,42,44,47,48,47],
[39,43,40,44,39,0,40,44,39,47],
[44,36,40,43,37,41,0,43,44,41],
[39,40,45,44,34,37,38,0,38,44],
[38,44,39,41,33,42,37,43,0,47],
[33,35,35,36,34,34,40,37,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,39,39,38,39,33,38,38],
[38,0,41,34,38,36,35,34,36,32],
[41,40,0,45,45,36,45,37,41,46],
[42,47,36,0,44,34,40,37,42,38],
[42,43,36,37,0,33,38,36,37,40],
[43,45,45,47,48,0,43,37,38,42],
[42,46,36,41,43,38,0,42,36,38],
[48,47,44,44,45,44,39,0,40,41],
[43,45,40,39,44,43,45,41,0,41],
[43,49,35,43,41,39,43,40,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,35,35,44,50,49,45,31,38],
[34,0,34,23,34,43,44,32,34,35],
[46,47,0,27,45,46,56,39,41,46],
[46,58,54,0,42,54,57,44,37,54],
[37,47,36,39,0,42,45,45,43,45],
[31,38,35,27,39,0,41,42,23,39],
[32,37,25,24,36,40,0,33,19,24],
[36,49,42,37,36,39,48,0,36,45],
[50,47,40,44,38,58,62,45,0,51],
[43,46,35,27,36,42,57,36,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,36,39,44,44,37,35,38,39],
[38,0,36,38,43,45,35,39,36,42],
[45,45,0,42,44,42,41,41,37,40],
[42,43,39,0,42,47,40,40,41,44],
[37,38,37,39,0,45,41,36,43,38],
[37,36,39,34,36,0,35,34,40,32],
[44,46,40,41,40,46,0,33,38,37],
[46,42,40,41,45,47,48,0,39,45],
[43,45,44,40,38,41,43,42,0,39],
[42,39,41,37,43,49,44,36,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,40,56,43,44,40,50,49,48],
[39,0,41,42,43,45,35,45,42,49],
[41,40,0,51,46,42,36,39,47,46],
[25,39,30,0,40,41,27,40,44,41],
[38,38,35,41,0,45,37,45,34,39],
[37,36,39,40,36,0,45,40,39,42],
[41,46,45,54,44,36,0,38,53,49],
[31,36,42,41,36,41,43,0,40,52],
[32,39,34,37,47,42,28,41,0,46],
[33,32,35,40,42,39,32,29,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,42,48,38,40,40,43,36,43],
[47,0,53,48,40,40,44,49,44,37],
[39,28,0,38,31,29,42,37,34,27],
[33,33,43,0,34,32,44,39,39,36],
[43,41,50,47,0,41,47,47,48,37],
[41,41,52,49,40,0,46,47,47,39],
[41,37,39,37,34,35,0,41,40,39],
[38,32,44,42,34,34,40,0,40,37],
[45,37,47,42,33,34,41,41,0,36],
[38,44,54,45,44,42,42,44,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,34,50,48,48,37,39,46,43],
[35,0,30,36,39,36,26,30,38,39],
[47,51,0,48,47,46,38,45,46,47],
[31,45,33,0,40,34,33,30,32,37],
[33,42,34,41,0,42,33,33,35,38],
[33,45,35,47,39,0,35,37,38,46],
[44,55,43,48,48,46,0,35,44,46],
[42,51,36,51,48,44,46,0,41,52],
[35,43,35,49,46,43,37,40,0,46],
[38,42,34,44,43,35,35,29,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,34,44,37,31,28,49,34,29],
[37,0,48,44,43,37,40,47,29,34],
[47,33,0,48,50,42,48,48,33,41],
[37,37,33,0,44,36,28,37,35,30],
[44,38,31,37,0,27,39,46,29,37],
[50,44,39,45,54,0,33,42,33,26],
[53,41,33,53,42,48,0,46,51,45],
[32,34,33,44,35,39,35,0,38,42],
[47,52,48,46,52,48,30,43,0,47],
[52,47,40,51,44,55,36,39,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,34,30,48,38,29,40,40,37],
[43,0,36,35,52,37,30,46,37,28],
[47,45,0,41,46,43,42,40,37,40],
[51,46,40,0,56,49,41,46,50,46],
[33,29,35,25,0,32,26,32,30,28],
[43,44,38,32,49,0,38,47,32,31],
[52,51,39,40,55,43,0,51,51,47],
[41,35,41,35,49,34,30,0,40,32],
[41,44,44,31,51,49,30,41,0,37],
[44,53,41,35,53,50,34,49,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,48,40,44,40,38,39,41,44],
[38,0,42,36,45,40,39,36,42,47],
[33,39,0,36,44,35,30,29,31,34],
[41,45,45,0,42,44,37,40,39,38],
[37,36,37,39,0,45,41,37,34,40],
[41,41,46,37,36,0,41,39,41,40],
[43,42,51,44,40,40,0,40,45,45],
[42,45,52,41,44,42,41,0,37,49],
[40,39,50,42,47,40,36,44,0,46],
[37,34,47,43,41,41,36,32,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,76,49,42,53,65,51,47,34],
[37,0,79,37,33,54,54,66,43,50],
[5,2,0,14,6,21,24,18,24,8],
[32,44,67,0,36,37,49,67,36,44],
[39,48,75,45,0,41,64,49,46,38],
[28,27,60,44,40,0,49,60,33,30],
[16,27,57,32,17,32,0,40,42,28],
[30,15,63,14,32,21,41,0,36,33],
[34,38,57,45,35,48,39,45,0,44],
[47,31,73,37,43,51,53,48,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,48,37,30,36,40,19,32,40],
[40,0,40,51,31,43,41,25,22,40],
[33,41,0,41,36,44,41,33,24,30],
[44,30,40,0,43,43,45,27,28,36],
[51,50,45,38,0,52,27,42,23,42],
[45,38,37,38,29,0,37,29,26,39],
[41,40,40,36,54,44,0,39,32,31],
[62,56,48,54,39,52,42,0,48,53],
[49,59,57,53,58,55,49,33,0,55],
[41,41,51,45,39,42,50,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,43,46,44,32,43,43,40,41],
[54,0,55,41,49,44,48,49,44,40],
[38,26,0,34,43,41,35,27,39,39],
[35,40,47,0,52,36,43,33,41,56],
[37,32,38,29,0,26,36,26,29,45],
[49,37,40,45,55,0,30,31,34,35],
[38,33,46,38,45,51,0,38,38,41],
[38,32,54,48,55,50,43,0,37,38],
[41,37,42,40,52,47,43,44,0,42],
[40,41,42,25,36,46,40,43,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,44,33,43,48,44,34,38,34],
[45,0,46,38,46,42,42,44,44,33],
[37,35,0,40,47,45,40,43,42,42],
[48,43,41,0,44,44,42,47,47,39],
[38,35,34,37,0,42,38,40,39,34],
[33,39,36,37,39,0,41,39,38,34],
[37,39,41,39,43,40,0,41,42,36],
[47,37,38,34,41,42,40,0,42,36],
[43,37,39,34,42,43,39,39,0,35],
[47,48,39,42,47,47,45,45,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,55,38,26,37,35,40,36,29],
[31,0,43,35,29,31,31,27,38,27],
[26,38,0,33,33,35,29,34,33,30],
[43,46,48,0,34,29,35,34,47,28],
[55,52,48,47,0,45,52,40,47,41],
[44,50,46,52,36,0,39,41,48,38],
[46,50,52,46,29,42,0,40,48,38],
[41,54,47,47,41,40,41,0,50,37],
[45,43,48,34,34,33,33,31,0,41],
[52,54,51,53,40,43,43,44,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,45,42,40,40,40,46,41,45],
[34,0,43,36,34,39,38,36,37,45],
[36,38,0,42,36,37,37,47,39,41],
[39,45,39,0,41,40,40,40,33,40],
[41,47,45,40,0,48,48,46,42,47],
[41,42,44,41,33,0,43,41,40,41],
[41,43,44,41,33,38,0,49,38,44],
[35,45,34,41,35,40,32,0,34,36],
[40,44,42,48,39,41,43,47,0,48],
[36,36,40,41,34,40,37,45,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,49,50,47,39,29,45,47,54],
[39,0,42,49,67,45,40,42,48,52],
[32,39,0,42,56,47,41,49,42,57],
[31,32,39,0,37,34,37,43,40,40],
[34,14,25,44,0,35,27,33,43,45],
[42,36,34,47,46,0,37,41,41,54],
[52,41,40,44,54,44,0,55,48,61],
[36,39,32,38,48,40,26,0,38,42],
[34,33,39,41,38,40,33,43,0,50],
[27,29,24,41,36,27,20,39,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,19,35,36,45,24,37,25,25],
[38,0,40,21,36,41,26,20,30,37],
[62,41,0,42,53,39,36,47,50,46],
[46,60,39,0,35,51,50,44,40,53],
[45,45,28,46,0,44,28,44,36,43],
[36,40,42,30,37,0,27,29,34,31],
[57,55,45,31,53,54,0,49,47,42],
[44,61,34,37,37,52,32,0,36,47],
[56,51,31,41,45,47,34,45,0,40],
[56,44,35,28,38,50,39,34,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,36,38,43,38,36,36,48,46],
[35,0,41,41,39,43,41,40,38,42],
[45,40,0,44,40,45,42,40,37,37],
[43,40,37,0,37,39,37,37,40,47],
[38,42,41,44,0,44,48,40,38,42],
[43,38,36,42,37,0,40,42,38,43],
[45,40,39,44,33,41,0,39,41,43],
[45,41,41,44,41,39,42,0,40,45],
[33,43,44,41,43,43,40,41,0,42],
[35,39,44,34,39,38,38,36,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,39,43,39,39,36,33,40,36],
[33,0,43,43,36,36,34,35,38,42],
[42,38,0,44,45,46,36,41,41,32],
[38,38,37,0,37,39,37,40,37,34],
[42,45,36,44,0,40,40,37,45,37],
[42,45,35,42,41,0,43,41,38,36],
[45,47,45,44,41,38,0,36,41,39],
[48,46,40,41,44,40,45,0,50,39],
[41,43,40,44,36,43,40,31,0,32],
[45,39,49,47,44,45,42,42,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,36,38,46,34,41,36,33,46],
[37,0,36,43,45,34,44,43,43,49],
[45,45,0,43,47,43,51,39,49,39],
[43,38,38,0,49,33,42,33,39,49],
[35,36,34,32,0,35,41,34,35,35],
[47,47,38,48,46,0,46,45,37,49],
[40,37,30,39,40,35,0,41,41,35],
[45,38,42,48,47,36,40,0,40,38],
[48,38,32,42,46,44,40,41,0,41],
[35,32,42,32,46,32,46,43,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,7,59,25,58,72,54,25,50],
[25,0,16,43,26,49,74,47,41,40],
[74,65,0,59,27,58,74,66,42,50],
[22,38,22,0,32,55,48,38,32,24],
[56,55,54,49,0,48,71,63,31,56],
[23,32,23,26,33,0,64,54,48,50],
[9,7,7,33,10,17,0,54,15,40],
[27,34,15,43,18,27,27,0,18,34],
[56,40,39,49,50,33,66,63,0,40],
[31,41,31,57,25,31,41,47,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,47,53,22,35,31,48,30,38],
[33,0,42,51,39,43,24,44,28,42],
[34,39,0,36,31,30,27,39,26,39],
[28,30,45,0,32,29,23,35,29,27],
[59,42,50,49,0,46,22,50,46,52],
[46,38,51,52,35,0,35,41,36,39],
[50,57,54,58,59,46,0,50,36,58],
[33,37,42,46,31,40,31,0,33,47],
[51,53,55,52,35,45,45,48,0,59],
[43,39,42,54,29,42,23,34,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,44,38,51,38,38,49,68,44],
[46,0,34,50,48,42,47,58,43,37],
[37,47,0,41,50,56,56,55,65,38],
[43,31,40,0,59,44,48,44,51,48],
[30,33,31,22,0,32,35,31,52,32],
[43,39,25,37,49,0,51,54,40,32],
[43,34,25,33,46,30,0,39,56,32],
[32,23,26,37,50,27,42,0,47,33],
[13,38,16,30,29,41,25,34,0,25],
[37,44,43,33,49,49,49,48,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,29,45,41,36,33,47,38,33],
[40,0,30,43,36,36,36,47,36,28],
[52,51,0,52,40,44,43,56,47,40],
[36,38,29,0,41,41,34,53,37,28],
[40,45,41,40,0,37,42,47,41,38],
[45,45,37,40,44,0,44,55,40,36],
[48,45,38,47,39,37,0,51,38,48],
[34,34,25,28,34,26,30,0,26,29],
[43,45,34,44,40,41,43,55,0,37],
[48,53,41,53,43,45,33,52,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,36,34,42,42,42,41,41,39],
[47,0,42,35,35,46,42,49,40,45],
[45,39,0,38,40,44,41,35,31,36],
[47,46,43,0,47,48,46,43,38,40],
[39,46,41,34,0,42,36,50,39,39],
[39,35,37,33,39,0,38,39,34,31],
[39,39,40,35,45,43,0,42,39,41],
[40,32,46,38,31,42,39,0,38,25],
[40,41,50,43,42,47,42,43,0,42],
[42,36,45,41,42,50,40,56,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,41,36,40,33,29,32,37,43],
[44,0,47,40,44,37,37,38,41,48],
[40,34,0,34,36,34,31,31,39,41],
[45,41,47,0,32,39,36,38,42,47],
[41,37,45,49,0,35,33,33,46,48],
[48,44,47,42,46,0,44,40,39,50],
[52,44,50,45,48,37,0,41,46,57],
[49,43,50,43,48,41,40,0,44,56],
[44,40,42,39,35,42,35,37,0,42],
[38,33,40,34,33,31,24,25,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,41,35,38,43,48,39,44,40],
[47,0,46,35,46,45,50,44,40,46],
[40,35,0,34,50,43,51,51,41,45],
[46,46,47,0,43,47,52,50,40,50],
[43,35,31,38,0,42,50,44,35,48],
[38,36,38,34,39,0,46,36,34,46],
[33,31,30,29,31,35,0,34,26,38],
[42,37,30,31,37,45,47,0,42,44],
[37,41,40,41,46,47,55,39,0,47],
[41,35,36,31,33,35,43,37,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,33,45,45,41,41,40,42,46],
[42,0,36,40,37,38,36,37,39,45],
[48,45,0,45,45,40,46,49,45,51],
[36,41,36,0,38,39,44,41,42,44],
[36,44,36,43,0,33,35,41,33,49],
[40,43,41,42,48,0,39,43,49,46],
[40,45,35,37,46,42,0,42,46,47],
[41,44,32,40,40,38,39,0,40,47],
[39,42,36,39,48,32,35,41,0,44],
[35,36,30,37,32,35,34,34,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,50,24,50,37,39,41,50,27],
[42,0,37,45,51,45,46,42,44,42],
[31,44,0,45,44,50,46,41,34,40],
[57,36,36,0,40,44,35,48,50,41],
[31,30,37,41,0,31,15,41,43,28],
[44,36,31,37,50,0,50,41,48,34],
[42,35,35,46,66,31,0,42,35,28],
[40,39,40,33,40,40,39,0,53,39],
[31,37,47,31,38,33,46,28,0,23],
[54,39,41,40,53,47,53,42,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,43,45,49,42,35,39,41,34],
[43,0,46,48,45,41,38,35,39,44],
[38,35,0,35,36,29,36,31,32,42],
[36,33,46,0,41,31,35,39,31,34],
[32,36,45,40,0,37,28,40,33,38],
[39,40,52,50,44,0,36,45,44,40],
[46,43,45,46,53,45,0,49,41,39],
[42,46,50,42,41,36,32,0,42,37],
[40,42,49,50,48,37,40,39,0,37],
[47,37,39,47,43,41,42,44,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,27,12,31,20,27,28,33,30],
[48,0,45,42,45,34,39,49,39,40],
[54,36,0,20,46,17,36,45,53,36],
[69,39,61,0,48,54,38,46,57,61],
[50,36,35,33,0,23,38,25,38,29],
[61,47,64,27,58,0,42,53,58,45],
[54,42,45,43,43,39,0,37,49,41],
[53,32,36,35,56,28,44,0,53,53],
[48,42,28,24,43,23,32,28,0,52],
[51,41,45,20,52,36,40,28,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,52,49,41,39,49,43,42,42],
[42,0,45,41,38,44,39,43,45,45],
[29,36,0,56,30,38,47,42,39,37],
[32,40,25,0,23,40,35,33,27,29],
[40,43,51,58,0,60,53,52,44,49],
[42,37,43,41,21,0,35,43,40,44],
[32,42,34,46,28,46,0,43,38,34],
[38,38,39,48,29,38,38,0,39,37],
[39,36,42,54,37,41,43,42,0,41],
[39,36,44,52,32,37,47,44,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,38,43,36,41,39,46,45,38],
[40,0,41,39,44,28,40,36,45,42],
[43,40,0,42,49,35,45,45,32,38],
[38,42,39,0,55,43,41,47,37,44],
[45,37,32,26,0,32,38,25,28,33],
[40,53,46,38,49,0,42,46,40,38],
[42,41,36,40,43,39,0,37,35,38],
[35,45,36,34,56,35,44,0,38,45],
[36,36,49,44,53,41,46,43,0,43],
[43,39,43,37,48,43,43,36,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,52,52,41,37,37,45,46,44],
[40,0,41,43,43,48,45,53,56,51],
[29,40,0,36,45,42,30,37,43,42],
[29,38,45,0,44,35,30,45,49,47],
[40,38,36,37,0,38,41,52,52,46],
[44,33,39,46,43,0,35,43,54,46],
[44,36,51,51,40,46,0,46,57,53],
[36,28,44,36,29,38,35,0,47,45],
[35,25,38,32,29,27,24,34,0,33],
[37,30,39,34,35,35,28,36,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,48,43,40,43,49,51,46,44],
[37,0,45,40,29,30,42,33,39,32],
[33,36,0,44,31,48,36,43,32,37],
[38,41,37,0,36,41,42,48,28,37],
[41,52,50,45,0,51,50,58,45,38],
[38,51,33,40,30,0,47,44,36,32],
[32,39,45,39,31,34,0,42,33,35],
[30,48,38,33,23,37,39,0,34,29],
[35,42,49,53,36,45,48,47,0,37],
[37,49,44,44,43,49,46,52,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,51,47,45,43,42,38,63,43],
[35,0,33,32,39,23,33,38,51,28],
[30,48,0,47,34,27,39,42,65,44],
[34,49,34,0,24,24,37,30,56,49],
[36,42,47,57,0,32,51,55,60,48],
[38,58,54,57,49,0,49,52,64,41],
[39,48,42,44,30,32,0,37,63,39],
[43,43,39,51,26,29,44,0,37,41],
[18,30,16,25,21,17,18,44,0,32],
[38,53,37,32,33,40,42,40,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,38,33,32,44,33,29,33,53],
[47,0,47,32,40,52,44,48,33,37],
[43,34,0,39,39,47,37,34,33,48],
[48,49,42,0,48,52,44,37,38,40],
[49,41,42,33,0,48,43,38,42,40],
[37,29,34,29,33,0,39,37,29,44],
[48,37,44,37,38,42,0,41,36,39],
[52,33,47,44,43,44,40,0,29,43],
[48,48,48,43,39,52,45,52,0,50],
[28,44,33,41,41,37,42,38,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,48,37,33,50,50,44,41,45],
[33,0,37,33,34,40,38,25,42,37],
[33,44,0,29,28,39,39,29,37,43],
[44,48,52,0,48,45,45,40,47,52],
[48,47,53,33,0,44,49,35,41,44],
[31,41,42,36,37,0,39,36,38,39],
[31,43,42,36,32,42,0,40,38,36],
[37,56,52,41,46,45,41,0,46,46],
[40,39,44,34,40,43,43,35,0,42],
[36,44,38,29,37,42,45,35,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,38,47,43,46,47,24,38,35],
[47,0,34,50,41,34,55,44,49,47],
[43,47,0,42,44,34,48,44,42,35],
[34,31,39,0,35,36,37,30,28,36],
[38,40,37,46,0,41,52,37,46,37],
[35,47,47,45,40,0,48,40,44,42],
[34,26,33,44,29,33,0,31,36,24],
[57,37,37,51,44,41,50,0,48,46],
[43,32,39,53,35,37,45,33,0,26],
[46,34,46,45,44,39,57,35,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,46,40,38,46,44,45,38,36],
[39,0,44,45,40,56,44,48,45,44],
[35,37,0,23,29,27,33,35,41,25],
[41,36,58,0,35,46,45,49,44,46],
[43,41,52,46,0,45,48,54,37,42],
[35,25,54,35,36,0,31,35,36,33],
[37,37,48,36,33,50,0,53,39,39],
[36,33,46,32,27,46,28,0,35,32],
[43,36,40,37,44,45,42,46,0,41],
[45,37,56,35,39,48,42,49,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,38,53,45,48,42,42,50,43],
[42,0,39,47,39,52,40,46,44,35],
[43,42,0,57,38,49,42,47,47,46],
[28,34,24,0,25,36,30,34,39,29],
[36,42,43,56,0,45,40,44,47,39],
[33,29,32,45,36,0,34,30,44,32],
[39,41,39,51,41,47,0,47,45,39],
[39,35,34,47,37,51,34,0,45,37],
[31,37,34,42,34,37,36,36,0,30],
[38,46,35,52,42,49,42,44,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,41,40,61,41,81,40,62,42],
[20,0,20,41,20,41,20,41,20,41],
[40,61,0,40,40,21,81,61,21,21],
[41,40,41,0,60,62,60,61,41,21],
[20,61,41,21,0,41,60,21,20,21],
[40,40,60,19,40,0,60,61,21,40],
[0,61,0,21,21,21,0,21,21,21],
[41,40,20,20,60,20,60,0,41,21],
[19,61,60,40,61,60,60,40,0,61],
[39,40,60,60,60,41,60,60,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,40,44,40,38,34,40,37,46],
[47,0,49,43,52,45,43,49,38,40],
[41,32,0,38,36,42,38,33,43,40],
[37,38,43,0,37,44,43,40,45,48],
[41,29,45,44,0,46,34,48,42,43],
[43,36,39,37,35,0,35,38,35,37],
[47,38,43,38,47,46,0,43,44,48],
[41,32,48,41,33,43,38,0,42,42],
[44,43,38,36,39,46,37,39,0,44],
[35,41,41,33,38,44,33,39,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,48,54,55,55,50,62,42,40],
[53,0,40,46,41,40,42,60,40,40],
[33,41,0,40,43,56,38,50,54,41],
[27,35,41,0,42,43,37,56,35,49],
[26,40,38,39,0,53,35,51,46,45],
[26,41,25,38,28,0,35,47,46,40],
[31,39,43,44,46,46,0,58,53,38],
[19,21,31,25,30,34,23,0,47,34],
[39,41,27,46,35,35,28,34,0,35],
[41,41,40,32,36,41,43,47,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,33,40,53,66,59,37,43,59],
[12,0,18,31,32,45,20,25,21,45],
[48,63,0,34,52,60,49,42,47,62],
[41,50,47,0,58,51,47,47,38,49],
[28,49,29,23,0,39,31,40,31,43],
[15,36,21,30,42,0,21,28,25,36],
[22,61,32,34,50,60,0,37,47,51],
[44,56,39,34,41,53,44,0,38,46],
[38,60,34,43,50,56,34,43,0,64],
[22,36,19,32,38,45,30,35,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,54,30,28,37,28,38,29,45],
[33,0,33,8,24,25,42,34,16,33],
[27,48,0,10,29,27,29,48,11,28],
[51,73,71,0,45,25,62,54,46,54],
[53,57,52,36,0,34,63,27,27,51],
[44,56,54,56,47,0,54,46,37,55],
[53,39,52,19,18,27,0,28,28,44],
[43,47,33,27,54,35,53,0,9,42],
[52,65,70,35,54,44,53,72,0,52],
[36,48,53,27,30,26,37,39,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,25,43,28,24,15,32,38,38],
[40,0,30,49,41,28,24,34,29,41],
[56,51,0,66,57,56,42,46,39,62],
[38,32,15,0,20,22,14,11,20,25],
[53,40,24,61,0,41,28,42,56,47],
[57,53,25,59,40,0,32,47,41,59],
[66,57,39,67,53,49,0,37,55,64],
[49,47,35,70,39,34,44,0,38,49],
[43,52,42,61,25,40,26,43,0,61],
[43,40,19,56,34,22,17,32,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,39,27,43,42,59,38,41,56],
[40,0,52,36,47,35,59,34,46,50],
[42,29,0,39,40,31,52,33,34,51],
[54,45,42,0,46,39,71,65,44,55],
[38,34,41,35,0,41,54,30,45,42],
[39,46,50,42,40,0,54,50,43,51],
[22,22,29,10,27,27,0,25,30,32],
[43,47,48,16,51,31,56,0,38,43],
[40,35,47,37,36,38,51,43,0,46],
[25,31,30,26,39,30,49,38,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,49,41,50,42,43,47,42,41],
[42,0,47,40,62,46,48,47,43,42],
[32,34,0,33,46,39,44,45,37,47],
[40,41,48,0,65,52,43,41,49,45],
[31,19,35,16,0,31,27,30,36,35],
[39,35,42,29,50,0,34,42,37,43],
[38,33,37,38,54,47,0,40,49,43],
[34,34,36,40,51,39,41,0,45,38],
[39,38,44,32,45,44,32,36,0,35],
[40,39,34,36,46,38,38,43,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,45,38,40,41,38,42,35,44],
[34,0,44,31,47,39,34,46,38,46],
[36,37,0,27,36,34,38,40,30,49],
[43,50,54,0,45,40,46,43,44,52],
[41,34,45,36,0,36,40,37,41,47],
[40,42,47,41,45,0,43,41,47,49],
[43,47,43,35,41,38,0,38,29,41],
[39,35,41,38,44,40,43,0,38,46],
[46,43,51,37,40,34,52,43,0,53],
[37,35,32,29,34,32,40,35,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,38,45,35,35,41,41,50,40],
[50,0,44,46,36,46,47,49,53,51],
[43,37,0,40,38,43,41,42,45,40],
[36,35,41,0,44,32,40,38,40,30],
[46,45,43,37,0,38,42,47,51,46],
[46,35,38,49,43,0,44,45,55,36],
[40,34,40,41,39,37,0,44,45,41],
[40,32,39,43,34,36,37,0,39,32],
[31,28,36,41,30,26,36,42,0,29],
[41,30,41,51,35,45,40,49,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,50,41,36,41,55,38,39,52],
[39,0,45,46,49,49,45,47,46,47],
[31,36,0,26,35,36,39,32,37,38],
[40,35,55,0,35,32,41,37,41,38],
[45,32,46,46,0,40,43,33,37,44],
[40,32,45,49,41,0,51,36,43,41],
[26,36,42,40,38,30,0,33,31,33],
[43,34,49,44,48,45,48,0,43,42],
[42,35,44,40,44,38,50,38,0,43],
[29,34,43,43,37,40,48,39,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,46,39,40,46,37,45,42,35],
[36,0,43,43,48,43,41,45,45,39],
[35,38,0,32,42,35,41,33,44,35],
[42,38,49,0,41,47,37,38,46,37],
[41,33,39,40,0,39,37,40,38,43],
[35,38,46,34,42,0,35,44,43,33],
[44,40,40,44,44,46,0,43,45,39],
[36,36,48,43,41,37,38,0,40,35],
[39,36,37,35,43,38,36,41,0,34],
[46,42,46,44,38,48,42,46,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,36,41,46,37,38,46,42,42],
[33,0,36,43,43,38,37,47,35,35],
[45,45,0,33,43,34,35,47,38,39],
[40,38,48,0,48,37,46,48,43,37],
[35,38,38,33,0,37,34,41,35,33],
[44,43,47,44,44,0,39,51,43,39],
[43,44,46,35,47,42,0,47,33,40],
[35,34,34,33,40,30,34,0,30,35],
[39,46,43,38,46,38,48,51,0,40],
[39,46,42,44,48,42,41,46,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,41,45,41,44,39,43,43,35],
[33,0,32,36,36,36,37,33,40,38],
[40,49,0,46,39,44,41,37,46,43],
[36,45,35,0,29,41,32,37,38,31],
[40,45,42,52,0,47,40,41,43,41],
[37,45,37,40,34,0,37,35,41,34],
[42,44,40,49,41,44,0,44,45,40],
[38,48,44,44,40,46,37,0,39,38],
[38,41,35,43,38,40,36,42,0,37],
[46,43,38,50,40,47,41,43,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,43,34,38,42,43,33,44,45],
[33,0,48,36,45,42,46,48,52,36],
[38,33,0,35,42,38,40,29,43,44],
[47,45,46,0,42,33,41,38,39,50],
[43,36,39,39,0,39,57,39,41,45],
[39,39,43,48,42,0,47,42,42,52],
[38,35,41,40,24,34,0,30,41,35],
[48,33,52,43,42,39,51,0,42,48],
[37,29,38,42,40,39,40,39,0,45],
[36,45,37,31,36,29,46,33,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,48,45,46,40,40,53,46,44],
[44,0,44,44,42,51,40,49,43,45],
[33,37,0,37,36,36,34,44,36,40],
[36,37,44,0,41,39,37,38,44,44],
[35,39,45,40,0,41,40,42,44,48],
[41,30,45,42,40,0,43,45,35,46],
[41,41,47,44,41,38,0,50,50,42],
[28,32,37,43,39,36,31,0,45,39],
[35,38,45,37,37,46,31,36,0,42],
[37,36,41,37,33,35,39,42,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,40,40,43,36,37,46,37,39],
[34,0,33,32,33,34,40,37,33,41],
[41,48,0,40,47,44,48,49,43,39],
[41,49,41,0,38,49,45,51,37,38],
[38,48,34,43,0,43,41,48,35,39],
[45,47,37,32,38,0,43,42,35,35],
[44,41,33,36,40,38,0,46,37,36],
[35,44,32,30,33,39,35,0,36,37],
[44,48,38,44,46,46,44,45,0,46],
[42,40,42,43,42,46,45,44,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,36,40,34,41,38,36,37,55],
[40,0,47,37,33,43,39,41,48,43],
[45,34,0,43,43,34,35,40,43,44],
[41,44,38,0,40,43,38,38,39,47],
[47,48,38,41,0,30,48,50,50,52],
[40,38,47,38,51,0,41,56,48,61],
[43,42,46,43,33,40,0,47,42,56],
[45,40,41,43,31,25,34,0,43,52],
[44,33,38,42,31,33,39,38,0,52],
[26,38,37,34,29,20,25,29,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,37,36,45,39,40,38,46,41],
[29,0,28,46,31,34,25,42,35,38],
[44,53,0,59,41,52,37,45,41,41],
[45,35,22,0,49,43,33,38,38,39],
[36,50,40,32,0,45,33,40,36,44],
[42,47,29,38,36,0,30,39,42,33],
[41,56,44,48,48,51,0,43,46,33],
[43,39,36,43,41,42,38,0,41,34],
[35,46,40,43,45,39,35,40,0,43],
[40,43,40,42,37,48,48,47,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,61,41,61,41,61,61,41,40],
[61,0,61,21,61,41,41,61,41,61],
[20,20,0,21,40,41,20,40,20,40],
[40,60,60,0,60,61,60,40,40,40],
[20,20,41,21,0,21,21,20,0,20],
[40,40,40,20,60,0,40,20,20,40],
[20,40,61,21,60,41,0,20,20,40],
[20,20,41,41,61,61,61,0,20,20],
[40,40,61,41,81,61,61,61,0,40],
[41,20,41,41,61,41,41,61,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,38,28,38,43,35,38,37,32],
[48,0,39,51,36,49,47,37,47,42],
[43,42,0,39,42,44,45,40,42,44],
[53,30,42,0,29,42,42,41,43,38],
[43,45,39,52,0,52,47,50,41,45],
[38,32,37,39,29,0,35,47,30,35],
[46,34,36,39,34,46,0,40,40,46],
[43,44,41,40,31,34,41,0,39,31],
[44,34,39,38,40,51,41,42,0,40],
[49,39,37,43,36,46,35,50,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,37,41,39,48,46,43,48,48],
[36,0,39,33,35,44,40,38,40,38],
[44,42,0,41,38,46,45,39,46,49],
[40,48,40,0,38,46,43,35,47,39],
[42,46,43,43,0,43,37,43,48,47],
[33,37,35,35,38,0,36,41,40,40],
[35,41,36,38,44,45,0,42,43,42],
[38,43,42,46,38,40,39,0,43,41],
[33,41,35,34,33,41,38,38,0,38],
[33,43,32,42,34,41,39,40,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,26,19,31,32,21,28,29,31],
[50,0,33,31,33,34,38,46,38,43],
[55,48,0,50,50,39,42,50,42,52],
[62,50,31,0,48,41,45,53,41,47],
[50,48,31,33,0,34,32,43,42,40],
[49,47,42,40,47,0,32,47,43,57],
[60,43,39,36,49,49,0,46,46,44],
[53,35,31,28,38,34,35,0,27,38],
[52,43,39,40,39,38,35,54,0,38],
[50,38,29,34,41,24,37,43,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,39,42,31,37,39,38,39,46],
[47,0,42,45,46,42,42,40,41,47],
[42,39,0,40,34,40,37,38,39,40],
[39,36,41,0,37,41,40,39,39,38],
[50,35,47,44,0,41,39,34,40,43],
[44,39,41,40,40,0,40,36,37,42],
[42,39,44,41,42,41,0,41,41,50],
[43,41,43,42,47,45,40,0,43,50],
[42,40,42,42,41,44,40,38,0,47],
[35,34,41,43,38,39,31,31,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,29,0,0,25,25,0,0],
[81,0,29,29,0,0,54,54,0,29],
[81,52,0,54,25,25,54,54,25,54],
[52,52,27,0,0,0,25,52,0,0],
[81,81,56,81,0,0,54,81,56,29],
[81,81,56,81,81,0,54,81,56,29],
[56,27,27,56,27,27,0,27,27,29],
[56,27,27,29,0,0,54,0,0,29],
[81,81,56,81,25,25,54,81,0,29],
[81,52,27,81,52,52,52,52,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,42,35,41,61,47,41,47,36],
[23,0,42,38,26,58,45,35,39,39],
[39,39,0,30,36,43,37,13,32,23],
[46,43,51,0,39,50,41,38,56,37],
[40,55,45,42,0,44,55,38,42,45],
[20,23,38,31,37,0,37,31,42,25],
[34,36,44,40,26,44,0,38,37,39],
[40,46,68,43,43,50,43,0,49,38],
[34,42,49,25,39,39,44,32,0,39],
[45,42,58,44,36,56,42,43,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,34,31,31,31,38,32,38,45],
[25,0,22,23,27,22,36,38,29,34],
[47,59,0,31,41,44,51,33,45,52],
[50,58,50,0,46,40,51,37,45,48],
[50,54,40,35,0,25,40,49,41,47],
[50,59,37,41,56,0,54,47,54,60],
[43,45,30,30,41,27,0,46,38,37],
[49,43,48,44,32,34,35,0,53,53],
[43,52,36,36,40,27,43,28,0,57],
[36,47,29,33,34,21,44,28,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,48,38,51,53,54,44,34,38],
[32,0,29,35,38,37,38,31,25,28],
[33,52,0,29,33,41,51,29,27,29],
[43,46,52,0,42,25,53,40,39,34],
[30,43,48,39,0,44,47,31,35,23],
[28,44,40,56,37,0,53,42,42,33],
[27,43,30,28,34,28,0,43,25,32],
[37,50,52,41,50,39,38,0,36,42],
[47,56,54,42,46,39,56,45,0,46],
[43,53,52,47,58,48,49,39,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,45,43,38,41,36,44,41,35],
[44,0,40,38,37,43,37,42,48,38],
[36,41,0,33,36,37,36,38,42,38],
[38,43,48,0,40,45,40,44,45,37],
[43,44,45,41,0,42,40,40,42,47],
[40,38,44,36,39,0,33,44,44,36],
[45,44,45,41,41,48,0,42,44,40],
[37,39,43,37,41,37,39,0,43,34],
[40,33,39,36,39,37,37,38,0,39],
[46,43,43,44,34,45,41,47,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,40,40,52,49,42,40,61,39],
[30,0,29,31,42,43,32,40,38,33],
[41,52,0,37,56,58,40,44,51,35],
[41,50,44,0,52,53,39,50,60,45],
[29,39,25,29,0,44,36,37,45,23],
[32,38,23,28,37,0,28,27,36,36],
[39,49,41,42,45,53,0,36,50,39],
[41,41,37,31,44,54,45,0,48,25],
[20,43,30,21,36,45,31,33,0,24],
[42,48,46,36,58,45,42,56,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,23,36,47,23,57,58,57,23],
[33,0,21,58,44,33,44,46,33,10],
[58,60,0,48,57,34,46,58,45,35],
[45,23,33,0,56,45,44,46,45,22],
[34,37,24,25,0,24,33,35,45,47],
[58,48,47,36,57,0,58,46,57,46],
[24,37,35,37,48,23,0,25,45,35],
[23,35,23,35,46,35,56,0,57,22],
[24,48,36,36,36,24,36,24,0,24],
[58,71,46,59,34,35,46,59,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,38,38,37,35,35,45,33,37],
[40,0,36,42,43,36,43,46,37,41],
[43,45,0,46,46,35,37,51,38,44],
[43,39,35,0,41,42,36,46,39,38],
[44,38,35,40,0,35,43,47,35,48],
[46,45,46,39,46,0,46,45,42,44],
[46,38,44,45,38,35,0,45,46,40],
[36,35,30,35,34,36,36,0,32,33],
[48,44,43,42,46,39,35,49,0,46],
[44,40,37,43,33,37,41,48,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,30,28,44,51,34,43,27,30],
[36,0,33,40,47,57,39,41,17,25],
[51,48,0,56,61,61,42,49,42,37],
[53,41,25,0,58,54,33,46,32,21],
[37,34,20,23,0,53,17,42,33,20],
[30,24,20,27,28,0,23,36,18,17],
[47,42,39,48,64,58,0,51,27,34],
[38,40,32,35,39,45,30,0,23,39],
[54,64,39,49,48,63,54,58,0,48],
[51,56,44,60,61,64,47,42,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,31,35,37,43,34,32,43,46],
[43,0,40,39,41,40,43,46,48,46],
[50,41,0,42,43,43,38,44,54,43],
[46,42,39,0,40,41,49,44,47,45],
[44,40,38,41,0,44,36,36,42,45],
[38,41,38,40,37,0,42,39,46,36],
[47,38,43,32,45,39,0,35,47,40],
[49,35,37,37,45,42,46,0,48,43],
[38,33,27,34,39,35,34,33,0,29],
[35,35,38,36,36,45,41,38,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,32,37,39,44,38,46,38,42],
[37,0,41,41,36,39,46,44,38,37],
[49,40,0,40,45,53,48,38,38,48],
[44,40,41,0,41,46,40,45,39,41],
[42,45,36,40,0,47,41,44,39,42],
[37,42,28,35,34,0,46,35,38,38],
[43,35,33,41,40,35,0,40,33,43],
[35,37,43,36,37,46,41,0,35,32],
[43,43,43,42,42,43,48,46,0,40],
[39,44,33,40,39,43,38,49,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,33,50,42,28,32,37,37,34],
[45,0,35,44,43,30,41,33,41,44],
[48,46,0,50,45,34,44,41,38,44],
[31,37,31,0,33,25,31,29,30,32],
[39,38,36,48,0,31,41,35,26,37],
[53,51,47,56,50,0,48,40,36,34],
[49,40,37,50,40,33,0,26,39,34],
[44,48,40,52,46,41,55,0,40,41],
[44,40,43,51,55,45,42,41,0,41],
[47,37,37,49,44,47,47,40,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,41,37,33,35,34,38,45,45],
[39,0,37,30,36,38,28,44,41,43],
[40,44,0,47,37,36,35,42,45,50],
[44,51,34,0,43,42,37,44,46,46],
[48,45,44,38,0,43,42,48,47,54],
[46,43,45,39,38,0,45,40,43,45],
[47,53,46,44,39,36,0,39,48,45],
[43,37,39,37,33,41,42,0,47,46],
[36,40,36,35,34,38,33,34,0,36],
[36,38,31,35,27,36,36,35,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,40,33,37,45,44,33,29,26],
[56,0,42,51,46,45,57,51,44,36],
[41,39,0,40,36,37,48,48,37,47],
[48,30,41,0,47,37,44,45,34,33],
[44,35,45,34,0,38,37,44,39,38],
[36,36,44,44,43,0,54,41,46,40],
[37,24,33,37,44,27,0,40,41,38],
[48,30,33,36,37,40,41,0,33,34],
[52,37,44,47,42,35,40,48,0,34],
[55,45,34,48,43,41,43,47,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,32,36,38,25,36,37,33,38],
[53,0,37,49,44,41,44,42,46,42],
[49,44,0,38,42,27,41,45,35,49],
[45,32,43,0,40,34,46,46,38,43],
[43,37,39,41,0,39,37,37,35,38],
[56,40,54,47,42,0,51,49,42,44],
[45,37,40,35,44,30,0,47,47,45],
[44,39,36,35,44,32,34,0,43,49],
[48,35,46,43,46,39,34,38,0,46],
[43,39,32,38,43,37,36,32,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,38,36,37,37,39,37,46,38],
[40,0,41,34,32,35,41,38,49,44],
[43,40,0,33,37,34,37,38,45,40],
[45,47,48,0,39,37,43,36,41,42],
[44,49,44,42,0,41,43,39,48,46],
[44,46,47,44,40,0,41,38,45,43],
[42,40,44,38,38,40,0,38,42,35],
[44,43,43,45,42,43,43,0,36,40],
[35,32,36,40,33,36,39,45,0,37],
[43,37,41,39,35,38,46,41,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,35,27,26,34,31,31,21,37],
[46,0,40,45,43,41,48,44,45,47],
[46,41,0,48,40,50,42,48,41,39],
[54,36,33,0,34,40,39,47,30,46],
[55,38,41,47,0,41,51,48,42,47],
[47,40,31,41,40,0,44,40,38,45],
[50,33,39,42,30,37,0,44,29,40],
[50,37,33,34,33,41,37,0,23,43],
[60,36,40,51,39,43,52,58,0,48],
[44,34,42,35,34,36,41,38,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,33,29,45,35,36,41,37,38],
[42,0,31,38,46,35,45,46,42,50],
[48,50,0,38,44,41,40,40,33,46],
[52,43,43,0,46,42,48,41,39,39],
[36,35,37,35,0,35,44,38,36,42],
[46,46,40,39,46,0,45,42,36,49],
[45,36,41,33,37,36,0,44,39,40],
[40,35,41,40,43,39,37,0,37,38],
[44,39,48,42,45,45,42,44,0,47],
[43,31,35,42,39,32,41,43,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,39,34,41,32,42,43,44,38],
[39,0,37,39,39,36,38,39,43,36],
[42,44,0,43,39,37,39,46,43,40],
[47,42,38,0,43,42,40,43,48,46],
[40,42,42,38,0,33,38,41,41,38],
[49,45,44,39,48,0,37,45,46,37],
[39,43,42,41,43,44,0,46,43,44],
[38,42,35,38,40,36,35,0,36,37],
[37,38,38,33,40,35,38,45,0,43],
[43,45,41,35,43,44,37,44,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,46,42,51,51,31,38,49,50],
[42,0,39,34,38,39,40,39,36,36],
[35,42,0,30,44,35,35,31,42,41],
[39,47,51,0,44,36,43,38,48,47],
[30,43,37,37,0,32,32,42,36,43],
[30,42,46,45,49,0,30,32,49,48],
[50,41,46,38,49,51,0,37,48,45],
[43,42,50,43,39,49,44,0,37,44],
[32,45,39,33,45,32,33,44,0,39],
[31,45,40,34,38,33,36,37,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,37,44,41,46,43,37,41,42],
[35,0,37,47,41,42,41,42,39,45],
[44,44,0,47,46,44,40,39,48,43],
[37,34,34,0,47,43,37,36,44,37],
[40,40,35,34,0,39,38,34,46,39],
[35,39,37,38,42,0,35,37,45,33],
[38,40,41,44,43,46,0,39,43,39],
[44,39,42,45,47,44,42,0,45,45],
[40,42,33,37,35,36,38,36,0,43],
[39,36,38,44,42,48,42,36,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,39,40,38,42,37,49,34,42],
[38,0,38,39,31,33,32,38,32,37],
[42,43,0,40,39,40,33,44,39,43],
[41,42,41,0,36,44,41,51,44,40],
[43,50,42,45,0,48,45,50,36,41],
[39,48,41,37,33,0,33,43,36,38],
[44,49,48,40,36,48,0,52,41,43],
[32,43,37,30,31,38,29,0,29,38],
[47,49,42,37,45,45,40,52,0,43],
[39,44,38,41,40,43,38,43,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,37,45,39,36,40,32,33,38],
[46,0,45,44,42,46,47,36,40,49],
[44,36,0,46,43,44,49,42,35,43],
[36,37,35,0,36,37,34,33,40,39],
[42,39,38,45,0,43,46,37,38,39],
[45,35,37,44,38,0,42,32,39,39],
[41,34,32,47,35,39,0,27,34,37],
[49,45,39,48,44,49,54,0,45,43],
[48,41,46,41,43,42,47,36,0,42],
[43,32,38,42,42,42,44,38,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,42,39,40,47,34,49,40,48],
[43,0,45,47,37,49,39,53,38,40],
[39,36,0,40,33,45,32,43,36,37],
[42,34,41,0,44,46,43,50,39,38],
[41,44,48,37,0,47,35,51,41,39],
[34,32,36,35,34,0,30,41,35,37],
[47,42,49,38,46,51,0,54,48,45],
[32,28,38,31,30,40,27,0,36,34],
[41,43,45,42,40,46,33,45,0,38],
[33,41,44,43,42,44,36,47,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,43,41,47,38,52,45,48,31],
[34,0,44,53,50,33,54,46,47,45],
[38,37,0,35,43,33,43,31,42,31],
[40,28,46,0,43,37,47,37,49,39],
[34,31,38,38,0,34,46,37,39,28],
[43,48,48,44,47,0,44,47,44,33],
[29,27,38,34,35,37,0,23,38,32],
[36,35,50,44,44,34,58,0,48,41],
[33,34,39,32,42,37,43,33,0,36],
[50,36,50,42,53,48,49,40,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,39,38,31,32,43,41,28,40],
[52,0,37,50,40,37,52,51,42,46],
[42,44,0,51,44,30,54,43,38,50],
[43,31,30,0,41,36,44,41,26,38],
[50,41,37,40,0,40,41,35,30,43],
[49,44,51,45,41,0,45,46,38,45],
[38,29,27,37,40,36,0,31,37,33],
[40,30,38,40,46,35,50,0,42,49],
[53,39,43,55,51,43,44,39,0,46],
[41,35,31,43,38,36,48,32,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,41,39,43,43,44,45,37,44],
[36,0,39,39,35,42,40,32,36,30],
[40,42,0,34,38,37,42,43,34,36],
[42,42,47,0,42,44,43,41,42,40],
[38,46,43,39,0,41,41,42,37,37],
[38,39,44,37,40,0,41,43,36,37],
[37,41,39,38,40,40,0,35,36,38],
[36,49,38,40,39,38,46,0,41,35],
[44,45,47,39,44,45,45,40,0,38],
[37,51,45,41,44,44,43,46,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,41,48,45,43,40,42,43,44],
[35,0,45,45,37,40,44,37,41,42],
[40,36,0,48,30,37,35,37,38,33],
[33,36,33,0,36,43,37,33,40,37],
[36,44,51,45,0,39,33,38,41,47],
[38,41,44,38,42,0,44,39,46,43],
[41,37,46,44,48,37,0,40,32,47],
[39,44,44,48,43,42,41,0,39,42],
[38,40,43,41,40,35,49,42,0,42],
[37,39,48,44,34,38,34,39,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,31,31,27,28,39,27,29,28],
[52,0,40,52,36,36,53,40,48,38],
[50,41,0,46,43,40,52,40,37,36],
[50,29,35,0,32,38,43,39,44,32],
[54,45,38,49,0,45,50,49,38,31],
[53,45,41,43,36,0,43,29,46,41],
[42,28,29,38,31,38,0,27,35,17],
[54,41,41,42,32,52,54,0,41,35],
[52,33,44,37,43,35,46,40,0,29],
[53,43,45,49,50,40,64,46,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,35,40,46,43,32,28,54,34],
[34,0,20,24,44,33,26,19,29,31],
[46,61,0,39,50,43,45,32,49,41],
[41,57,42,0,52,46,49,37,41,42],
[35,37,31,29,0,42,39,33,38,28],
[38,48,38,35,39,0,41,31,44,37],
[49,55,36,32,42,40,0,36,46,31],
[53,62,49,44,48,50,45,0,56,40],
[27,52,32,40,43,37,35,25,0,29],
[47,50,40,39,53,44,50,41,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,32,33,32,39,32,37,34,50],
[50,0,45,43,48,43,45,45,40,50],
[49,36,0,44,35,36,38,39,45,45],
[48,38,37,0,42,43,43,33,42,44],
[49,33,46,39,0,45,42,39,40,44],
[42,38,45,38,36,0,41,37,39,43],
[49,36,43,38,39,40,0,38,39,50],
[44,36,42,48,42,44,43,0,47,47],
[47,41,36,39,41,42,42,34,0,50],
[31,31,36,37,37,38,31,34,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,38,43,35,42,42,43,41,39],
[42,0,44,48,38,45,44,47,40,41],
[43,37,0,47,34,48,45,49,41,39],
[38,33,34,0,35,37,41,41,38,37],
[46,43,47,46,0,46,50,47,40,41],
[39,36,33,44,35,0,40,41,34,39],
[39,37,36,40,31,41,0,43,38,38],
[38,34,32,40,34,40,38,0,35,37],
[40,41,40,43,41,47,43,46,0,39],
[42,40,42,44,40,42,43,44,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,34,36,43,22,45,45,21,30],
[65,0,40,38,38,41,38,38,47,28],
[47,41,0,39,30,34,27,42,35,41],
[45,43,42,0,45,29,34,51,29,43],
[38,43,51,36,0,36,32,45,29,48],
[59,40,47,52,45,0,43,48,26,39],
[36,43,54,47,49,38,0,46,38,42],
[36,43,39,30,36,33,35,0,34,38],
[60,34,46,52,52,55,43,47,0,33],
[51,53,40,38,33,42,39,43,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,43,40,36,45,48,46,36,44],
[41,0,26,39,36,38,43,33,44,35],
[38,55,0,33,47,59,47,43,49,34],
[41,42,48,0,37,47,53,44,44,37],
[45,45,34,44,0,47,53,42,52,42],
[36,43,22,34,34,0,34,33,34,31],
[33,38,34,28,28,47,0,29,35,27],
[35,48,38,37,39,48,52,0,39,37],
[45,37,32,37,29,47,46,42,0,38],
[37,46,47,44,39,50,54,44,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,39,41,55,54,63,55,61,41],
[55,0,45,34,67,49,61,60,61,54],
[42,36,0,30,42,36,37,36,35,44],
[40,47,51,0,47,48,49,54,60,49],
[26,14,39,34,0,33,42,33,41,27],
[27,32,45,33,48,0,42,54,53,27],
[18,20,44,32,39,39,0,41,40,33],
[26,21,45,27,48,27,40,0,34,32],
[20,20,46,21,40,28,41,47,0,34],
[40,27,37,32,54,54,48,49,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,37,38,38,36,40,33,37,35],
[34,0,36,38,44,36,39,36,35,39],
[44,45,0,44,46,38,43,39,36,40],
[43,43,37,0,38,39,48,41,42,44],
[43,37,35,43,0,36,37,35,31,40],
[45,45,43,42,45,0,45,42,46,40],
[41,42,38,33,44,36,0,40,36,42],
[48,45,42,40,46,39,41,0,41,43],
[44,46,45,39,50,35,45,40,0,37],
[46,42,41,37,41,41,39,38,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,42,44,41,39,40,45,44,38],
[45,0,41,37,40,41,38,38,40,40],
[39,40,0,44,42,49,40,44,41,38],
[37,44,37,0,37,43,38,42,38,36],
[40,41,39,44,0,38,36,37,44,41],
[42,40,32,38,43,0,36,41,37,35],
[41,43,41,43,45,45,0,45,37,43],
[36,43,37,39,44,40,36,0,32,40],
[37,41,40,43,37,44,44,49,0,41],
[43,41,43,45,40,46,38,41,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,70,56,70,57,42,42,43,42],
[53,0,66,53,42,68,57,42,39,28],
[11,15,0,26,14,40,29,29,11,0],
[25,28,55,0,41,43,42,41,25,13],
[11,39,67,40,0,68,53,42,40,0],
[24,13,41,38,13,0,27,27,11,13],
[39,24,52,39,28,54,0,41,39,14],
[39,39,52,40,39,54,40,0,25,0],
[38,42,70,56,41,70,42,56,0,27],
[39,53,81,68,81,68,67,81,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,44,48,47,45,42,46,46,40],
[43,0,36,53,42,37,39,49,41,41],
[37,45,0,40,37,47,45,56,39,30],
[33,28,41,0,39,35,30,39,40,28],
[34,39,44,42,0,35,41,41,48,24],
[36,44,34,46,46,0,40,48,48,42],
[39,42,36,51,40,41,0,37,41,34],
[35,32,25,42,40,33,44,0,38,35],
[35,40,42,41,33,33,40,43,0,35],
[41,40,51,53,57,39,47,46,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,45,45,47,46,42,42,45,32],
[40,0,49,37,44,36,49,48,40,35],
[36,32,0,43,33,39,42,40,43,42],
[36,44,38,0,38,42,38,41,43,34],
[34,37,48,43,0,37,42,40,49,47],
[35,45,42,39,44,0,41,44,55,47],
[39,32,39,43,39,40,0,46,40,37],
[39,33,41,40,41,37,35,0,45,43],
[36,41,38,38,32,26,41,36,0,37],
[49,46,39,47,34,34,44,38,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,38,38,37,51,37,37,37,43],
[43,0,35,43,41,52,42,34,41,44],
[43,46,0,49,46,56,39,42,48,50],
[43,38,32,0,41,49,42,36,40,46],
[44,40,35,40,0,47,46,41,46,41],
[30,29,25,32,34,0,43,33,32,34],
[44,39,42,39,35,38,0,38,36,37],
[44,47,39,45,40,48,43,0,44,46],
[44,40,33,41,35,49,45,37,0,40],
[38,37,31,35,40,47,44,35,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,48,39,43,44,41,42,48,48],
[43,0,51,37,39,44,35,50,30,52],
[33,30,0,43,42,40,41,36,37,56],
[42,44,38,0,43,53,48,43,42,40],
[38,42,39,38,0,52,39,36,45,48],
[37,37,41,28,29,0,37,33,24,38],
[40,46,40,33,42,44,0,46,46,47],
[39,31,45,38,45,48,35,0,35,48],
[33,51,44,39,36,57,35,46,0,55],
[33,29,25,41,33,43,34,33,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,33,40,39,38,46,41,38,38],
[41,0,31,38,38,40,37,42,43,36],
[48,50,0,47,38,41,41,43,43,36],
[41,43,34,0,39,39,36,37,37,32],
[42,43,43,42,0,40,41,39,44,34],
[43,41,40,42,41,0,39,44,38,37],
[35,44,40,45,40,42,0,45,41,44],
[40,39,38,44,42,37,36,0,39,34],
[43,38,38,44,37,43,40,42,0,41],
[43,45,45,49,47,44,37,47,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,46,40,41,34,45,53,45,48],
[42,0,36,40,35,41,41,53,48,47],
[35,45,0,44,39,44,40,58,41,46],
[41,41,37,0,42,42,41,58,48,44],
[40,46,42,39,0,40,47,53,47,45],
[47,40,37,39,41,0,40,56,45,40],
[36,40,41,40,34,41,0,48,41,45],
[28,28,23,23,28,25,33,0,39,35],
[36,33,40,33,34,36,40,42,0,44],
[33,34,35,37,36,41,36,46,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,52,37,45,34,53,34,41,46],
[33,0,46,34,47,38,52,34,28,45],
[29,35,0,28,44,29,37,30,33,33],
[44,47,53,0,48,42,48,35,52,50],
[36,34,37,33,0,28,36,36,23,38],
[47,43,52,39,53,0,45,46,36,53],
[28,29,44,33,45,36,0,40,30,28],
[47,47,51,46,45,35,41,0,41,45],
[40,53,48,29,58,45,51,40,0,50],
[35,36,48,31,43,28,53,36,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,41,39,33,32,33,35,38,38],
[42,0,49,42,38,34,44,40,39,44],
[40,32,0,38,36,38,39,32,40,34],
[42,39,43,0,34,36,44,41,46,43],
[48,43,45,47,0,44,43,36,39,43],
[49,47,43,45,37,0,45,42,46,48],
[48,37,42,37,38,36,0,37,40,42],
[46,41,49,40,45,39,44,0,42,39],
[43,42,41,35,42,35,41,39,0,44],
[43,37,47,38,38,33,39,42,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,35,30,46,29,42,34,44,35],
[40,0,33,37,42,27,47,35,42,34],
[46,48,0,37,49,42,46,40,53,43],
[51,44,44,0,49,39,49,44,53,41],
[35,39,32,32,0,32,50,30,44,36],
[52,54,39,42,49,0,50,48,57,36],
[39,34,35,32,31,31,0,35,36,35],
[47,46,41,37,51,33,46,0,47,42],
[37,39,28,28,37,24,45,34,0,27],
[46,47,38,40,45,45,46,39,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,36,43,37,42,43,30,40,34],
[34,0,27,39,26,28,31,31,33,36],
[45,54,0,52,46,46,47,42,42,36],
[38,42,29,0,36,38,40,34,41,36],
[44,55,35,45,0,47,49,39,39,39],
[39,53,35,43,34,0,42,39,31,40],
[38,50,34,41,32,39,0,37,33,39],
[51,50,39,47,42,42,44,0,47,40],
[41,48,39,40,42,50,48,34,0,44],
[47,45,45,45,42,41,42,41,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,43,59,35,48,35,41,50,41],
[35,0,31,34,41,37,31,26,47,40],
[38,50,0,46,51,46,42,41,51,48],
[22,47,35,0,30,38,34,24,51,38],
[46,40,30,51,0,41,28,37,45,36],
[33,44,35,43,40,0,24,39,51,38],
[46,50,39,47,53,57,0,43,50,47],
[40,55,40,57,44,42,38,0,62,55],
[31,34,30,30,36,30,31,19,0,36],
[40,41,33,43,45,43,34,26,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,32,38,38,24,34,32,35,38],
[50,0,45,55,48,37,33,40,52,51],
[49,36,0,42,39,41,35,43,51,45],
[43,26,39,0,38,23,35,45,42,40],
[43,33,42,43,0,34,36,29,40,45],
[57,44,40,58,47,0,46,44,60,56],
[47,48,46,46,45,35,0,45,52,43],
[49,41,38,36,52,37,36,0,41,42],
[46,29,30,39,41,21,29,40,0,43],
[43,30,36,41,36,25,38,39,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,44,40,41,41,35,25,45,44],
[40,0,47,36,36,48,36,33,39,46],
[37,34,0,35,30,41,36,32,40,37],
[41,45,46,0,35,42,38,33,45,38],
[40,45,51,46,0,43,45,43,45,42],
[40,33,40,39,38,0,36,31,38,44],
[46,45,45,43,36,45,0,41,44,46],
[56,48,49,48,38,50,40,0,50,48],
[36,42,41,36,36,43,37,31,0,36],
[37,35,44,43,39,37,35,33,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,43,41,54,55,38,43,46,58],
[40,0,43,51,46,51,61,49,50,50],
[38,38,0,54,33,44,51,49,42,45],
[40,30,27,0,39,34,36,39,38,40],
[27,35,48,42,0,47,55,45,48,38],
[26,30,37,47,34,0,40,50,35,41],
[43,20,30,45,26,41,0,40,22,40],
[38,32,32,42,36,31,41,0,32,34],
[35,31,39,43,33,46,59,49,0,37],
[23,31,36,41,43,40,41,47,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,46,43,37,46,39,35,41,44],
[35,0,40,30,36,41,35,36,38,37],
[35,41,0,30,39,41,34,33,39,33],
[38,51,51,0,43,51,42,39,42,44],
[44,45,42,38,0,47,39,42,39,37],
[35,40,40,30,34,0,30,33,34,29],
[42,46,47,39,42,51,0,42,41,43],
[46,45,48,42,39,48,39,0,38,39],
[40,43,42,39,42,47,40,43,0,40],
[37,44,48,37,44,52,38,42,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,44,44,47,40,52,40,47,48],
[44,0,40,44,49,47,53,43,39,50],
[37,41,0,40,41,40,45,43,38,45],
[37,37,41,0,48,47,50,42,48,53],
[34,32,40,33,0,35,43,41,28,53],
[41,34,41,34,46,0,43,43,38,47],
[29,28,36,31,38,38,0,43,37,40],
[41,38,38,39,40,38,38,0,39,43],
[34,42,43,33,53,43,44,42,0,51],
[33,31,36,28,28,34,41,38,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,33,47,44,38,39,43,43,43],
[35,0,31,33,32,36,33,29,43,35],
[48,50,0,44,46,39,38,36,48,34],
[34,48,37,0,43,36,38,31,33,35],
[37,49,35,38,0,34,37,29,43,39],
[43,45,42,45,47,0,45,37,48,37],
[42,48,43,43,44,36,0,37,41,31],
[38,52,45,50,52,44,44,0,45,39],
[38,38,33,48,38,33,40,36,0,34],
[38,46,47,46,42,44,50,42,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,44,49,49,45,40,50,43,45],
[39,0,42,38,35,47,38,41,35,29],
[37,39,0,34,36,36,39,35,33,32],
[32,43,47,0,37,38,41,34,36,36],
[32,46,45,44,0,43,39,47,41,36],
[36,34,45,43,38,0,40,40,33,37],
[41,43,42,40,42,41,0,42,34,35],
[31,40,46,47,34,41,39,0,36,32],
[38,46,48,45,40,48,47,45,0,42],
[36,52,49,45,45,44,46,49,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,53,44,62,44,53,62,25,44],
[37,0,37,53,63,44,37,55,53,46],
[28,44,0,72,63,35,54,63,25,54],
[37,28,9,0,55,9,18,36,27,18],
[19,18,18,26,0,25,18,37,16,28],
[37,37,46,72,56,0,65,74,34,56],
[28,44,27,63,63,16,0,54,25,44],
[19,26,18,45,44,7,27,0,16,25],
[56,28,56,54,65,47,56,65,0,56],
[37,35,27,63,53,25,37,56,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,35,18,27,26,18,37,27,36],
[62,0,44,36,44,43,27,45,52,44],
[46,37,0,36,44,43,36,45,26,37],
[63,45,45,0,71,53,28,53,53,45],
[54,37,37,10,0,45,38,29,45,36],
[55,38,38,28,36,0,19,28,26,28],
[63,54,45,53,43,62,0,54,53,36],
[44,36,36,28,52,53,27,0,34,26],
[54,29,55,28,36,55,28,47,0,37],
[45,37,44,36,45,53,45,55,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,30,34,41,40,44,37,26,40],
[43,0,44,39,43,41,47,49,42,42],
[51,37,0,44,44,42,54,47,52,49],
[47,42,37,0,49,44,55,45,40,50],
[40,38,37,32,0,36,44,44,37,39],
[41,40,39,37,45,0,46,49,43,40],
[37,34,27,26,37,35,0,38,40,32],
[44,32,34,36,37,32,43,0,38,49],
[55,39,29,41,44,38,41,43,0,49],
[41,39,32,31,42,41,49,32,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,43,46,41,41,41,32,36,40],
[40,0,35,44,36,38,37,33,37,44],
[38,46,0,46,49,47,42,41,44,49],
[35,37,35,0,37,37,41,29,30,34],
[40,45,32,44,0,39,33,29,38,37],
[40,43,34,44,42,0,39,35,43,44],
[40,44,39,40,48,42,0,31,37,42],
[49,48,40,52,52,46,50,0,44,47],
[45,44,37,51,43,38,44,37,0,38],
[41,37,32,47,44,37,39,34,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,42,41,46,52,39,43,51,45],
[33,0,36,35,34,39,38,42,38,37],
[39,45,0,39,46,45,41,39,45,46],
[40,46,42,0,41,48,35,47,52,42],
[35,47,35,40,0,44,37,44,43,37],
[29,42,36,33,37,0,37,39,48,35],
[42,43,40,46,44,44,0,44,45,40],
[38,39,42,34,37,42,37,0,41,44],
[30,43,36,29,38,33,36,40,0,40],
[36,44,35,39,44,46,41,37,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,32,35,30,35,44,44,48,37],
[44,0,38,35,33,39,37,42,45,43],
[49,43,0,34,34,35,46,44,43,39],
[46,46,47,0,51,35,43,48,55,43],
[51,48,47,30,0,44,43,50,46,41],
[46,42,46,46,37,0,43,53,47,39],
[37,44,35,38,38,38,0,38,40,42],
[37,39,37,33,31,28,43,0,41,47],
[33,36,38,26,35,34,41,40,0,38],
[44,38,42,38,40,42,39,34,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,33,29,40,46,48,35,42,42],
[39,0,32,34,39,35,48,36,39,44],
[48,49,0,36,43,39,48,39,41,45],
[52,47,45,0,49,46,52,42,38,43],
[41,42,38,32,0,42,51,34,38,38],
[35,46,42,35,39,0,47,35,35,38],
[33,33,33,29,30,34,0,26,34,36],
[46,45,42,39,47,46,55,0,49,45],
[39,42,40,43,43,46,47,32,0,38],
[39,37,36,38,43,43,45,36,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,57,44,40,48,44,39,42,38],
[46,0,54,45,50,40,45,41,42,46],
[24,27,0,29,26,31,26,26,28,34],
[37,36,52,0,39,44,32,47,39,46],
[41,31,55,42,0,42,34,35,48,42],
[33,41,50,37,39,0,36,25,36,36],
[37,36,55,49,47,45,0,39,47,44],
[42,40,55,34,46,56,42,0,44,49],
[39,39,53,42,33,45,34,37,0,38],
[43,35,47,35,39,45,37,32,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,48,44,44,39,41,45,45,46],
[39,0,42,43,39,36,38,43,38,38],
[33,39,0,39,40,31,38,33,31,45],
[37,38,42,0,38,41,39,41,35,46],
[37,42,41,43,0,37,39,42,41,36],
[42,45,50,40,44,0,39,44,41,44],
[40,43,43,42,42,42,0,41,39,39],
[36,38,48,40,39,37,40,0,43,45],
[36,43,50,46,40,40,42,38,0,46],
[35,43,36,35,45,37,42,36,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,47,46,45,45,42,39,43,42],
[43,0,45,40,48,34,45,44,47,44],
[34,36,0,39,41,33,39,38,36,34],
[35,41,42,0,42,37,41,38,37,39],
[36,33,40,39,0,42,34,31,40,35],
[36,47,48,44,39,0,44,41,41,39],
[39,36,42,40,47,37,0,39,38,35],
[42,37,43,43,50,40,42,0,42,37],
[38,34,45,44,41,40,43,39,0,38],
[39,37,47,42,46,42,46,44,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,42,42,36,31,41,41,41,50],
[36,0,25,26,23,24,27,34,24,31],
[39,56,0,32,32,27,34,36,42,34],
[39,55,49,0,43,41,42,47,41,53],
[45,58,49,38,0,38,42,48,41,50],
[50,57,54,40,43,0,40,43,45,52],
[40,54,47,39,39,41,0,43,48,42],
[40,47,45,34,33,38,38,0,45,40],
[40,57,39,40,40,36,33,36,0,39],
[31,50,47,28,31,29,39,41,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,35,40,38,41,45,54,38,35],
[39,0,28,39,33,40,42,51,33,44],
[46,53,0,53,38,44,48,49,46,40],
[41,42,28,0,32,43,38,51,35,42],
[43,48,43,49,0,43,43,52,55,38],
[40,41,37,38,38,0,35,37,32,30],
[36,39,33,43,38,46,0,44,39,43],
[27,30,32,30,29,44,37,0,22,42],
[43,48,35,46,26,49,42,59,0,43],
[46,37,41,39,43,51,38,39,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,40,45,43,40,48,32,44,26],
[32,0,29,26,34,34,47,27,36,39],
[41,52,0,42,40,44,60,44,44,46],
[36,55,39,0,40,45,50,34,45,40],
[38,47,41,41,0,53,46,39,46,38],
[41,47,37,36,28,0,43,28,39,38],
[33,34,21,31,35,38,0,24,31,37],
[49,54,37,47,42,53,57,0,48,47],
[37,45,37,36,35,42,50,33,0,32],
[55,42,35,41,43,43,44,34,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,46,43,45,48,36,43,46,40],
[40,0,51,36,39,45,40,43,45,40],
[35,30,0,38,40,38,41,37,40,38],
[38,45,43,0,41,47,38,39,44,39],
[36,42,41,40,0,43,35,34,42,36],
[33,36,43,34,38,0,37,36,34,41],
[45,41,40,43,46,44,0,48,47,43],
[38,38,44,42,47,45,33,0,43,47],
[35,36,41,37,39,47,34,38,0,39],
[41,41,43,42,45,40,38,34,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,40,42,37,28,30,38,33,37],
[51,0,47,53,45,42,38,54,43,45],
[41,34,0,39,36,28,23,37,30,30],
[39,28,42,0,41,28,26,36,44,35],
[44,36,45,40,0,28,36,41,39,39],
[53,39,53,53,53,0,41,55,46,48],
[51,43,58,55,45,40,0,46,41,45],
[43,27,44,45,40,26,35,0,38,45],
[48,38,51,37,42,35,40,43,0,34],
[44,36,51,46,42,33,36,36,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,39,35,47,39,46,38,45,49],
[33,0,34,36,38,33,35,31,43,50],
[42,47,0,30,45,43,43,33,40,48],
[46,45,51,0,46,40,40,54,42,52],
[34,43,36,35,0,46,42,39,40,51],
[42,48,38,41,35,0,46,40,47,50],
[35,46,38,41,39,35,0,42,41,57],
[43,50,48,27,42,41,39,0,49,49],
[36,38,41,39,41,34,40,32,0,47],
[32,31,33,29,30,31,24,32,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,44,46,30,28,26,22,30,26],
[51,0,41,56,41,48,38,34,54,36],
[37,40,0,46,40,49,35,40,48,45],
[35,25,35,0,36,42,27,23,35,25],
[51,40,41,45,0,34,35,33,32,23],
[53,33,32,39,47,0,27,43,49,22],
[55,43,46,54,46,54,0,46,55,40],
[59,47,41,58,48,38,35,0,52,43],
[51,27,33,46,49,32,26,29,0,25],
[55,45,36,56,58,59,41,38,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,47,47,42,42,59,36,43,39],
[29,0,33,33,38,37,40,25,36,37],
[34,48,0,42,44,50,36,43,40,35],
[34,48,39,0,36,48,40,26,37,39],
[39,43,37,45,0,41,56,28,34,45],
[39,44,31,33,40,0,44,33,36,44],
[22,41,45,41,25,37,0,23,35,46],
[45,56,38,55,53,48,58,0,36,45],
[38,45,41,44,47,45,46,45,0,49],
[42,44,46,42,36,37,35,36,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,38,44,49,48,43,41,49,45],
[38,0,45,41,51,48,45,38,46,41],
[43,36,0,39,50,41,41,39,44,41],
[37,40,42,0,46,44,42,35,49,45],
[32,30,31,35,0,35,36,31,38,37],
[33,33,40,37,46,0,39,35,38,45],
[38,36,40,39,45,42,0,37,42,47],
[40,43,42,46,50,46,44,0,46,47],
[32,35,37,32,43,43,39,35,0,37],
[36,40,40,36,44,36,34,34,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,35,34,33,36,45,34,25,45],
[34,0,33,33,33,12,33,45,46,45],
[46,48,0,22,33,12,33,47,36,46],
[47,48,59,0,46,48,48,47,36,48],
[48,48,48,35,0,37,49,36,36,60],
[45,69,69,33,44,0,44,46,57,69],
[36,48,48,33,32,37,0,46,24,48],
[47,36,34,34,45,35,35,0,36,35],
[56,35,45,45,45,24,57,45,0,45],
[36,36,35,33,21,12,33,46,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,45,45,44,41,48,42,44,48],
[44,0,42,43,44,44,46,40,40,41],
[36,39,0,45,43,48,48,43,43,43],
[36,38,36,0,42,35,41,35,39,33],
[37,37,38,39,0,39,49,31,35,40],
[40,37,33,46,42,0,45,40,39,40],
[33,35,33,40,32,36,0,33,32,40],
[39,41,38,46,50,41,48,0,39,43],
[37,41,38,42,46,42,49,42,0,46],
[33,40,38,48,41,41,41,38,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,52,40,49,39,34,34,40,48],
[55,0,51,49,60,50,34,60,50,55],
[29,30,0,32,54,21,38,26,27,31],
[41,32,49,0,55,41,34,38,48,36],
[32,21,27,26,0,27,28,21,27,32],
[42,31,60,40,54,0,34,39,50,47],
[47,47,43,47,53,47,0,47,48,35],
[47,21,55,43,60,42,34,0,39,42],
[41,31,54,33,54,31,33,42,0,52],
[33,26,50,45,49,34,46,39,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,44,42,43,44,43,39,40,52],
[34,0,36,33,37,41,36,35,35,47],
[37,45,0,37,38,52,39,37,41,48],
[39,48,44,0,40,42,39,37,41,46],
[38,44,43,41,0,46,44,41,43,47],
[37,40,29,39,35,0,32,37,38,34],
[38,45,42,42,37,49,0,42,40,47],
[42,46,44,44,40,44,39,0,43,45],
[41,46,40,40,38,43,41,38,0,51],
[29,34,33,35,34,47,34,36,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,38,44,47,44,47,40,36,45],
[39,0,33,33,45,43,46,40,39,43],
[43,48,0,45,42,44,47,46,39,42],
[37,48,36,0,42,43,48,40,39,40],
[34,36,39,39,0,39,49,43,36,42],
[37,38,37,38,42,0,52,37,41,41],
[34,35,34,33,32,29,0,31,27,28],
[41,41,35,41,38,44,50,0,37,41],
[45,42,42,42,45,40,54,44,0,39],
[36,38,39,41,39,40,53,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,40,40,42,32,44,41,34,56],
[42,0,36,48,47,36,48,33,39,54],
[41,45,0,57,53,41,51,24,41,47],
[41,33,24,0,41,38,36,22,35,40],
[39,34,28,40,0,42,53,31,30,45],
[49,45,40,43,39,0,45,36,30,47],
[37,33,30,45,28,36,0,33,34,38],
[40,48,57,59,50,45,48,0,45,50],
[47,42,40,46,51,51,47,36,0,58],
[25,27,34,41,36,34,43,31,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,45,37,41,40,39,39,48,42],
[25,0,35,20,22,26,28,34,25,31],
[36,46,0,33,31,38,36,38,28,37],
[44,61,48,0,39,42,46,46,38,37],
[40,59,50,42,0,48,40,42,45,41],
[41,55,43,39,33,0,38,41,44,43],
[42,53,45,35,41,43,0,46,41,48],
[42,47,43,35,39,40,35,0,38,44],
[33,56,53,43,36,37,40,43,0,41],
[39,50,44,44,40,38,33,37,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,40,43,44,39,41,47,39,38],
[44,0,39,45,47,51,47,44,54,47],
[41,42,0,40,57,51,43,54,45,41],
[38,36,41,0,55,46,37,48,42,35],
[37,34,24,26,0,33,31,36,25,30],
[42,30,30,35,48,0,48,48,39,32],
[40,34,38,44,50,33,0,51,48,40],
[34,37,27,33,45,33,30,0,40,35],
[42,27,36,39,56,42,33,41,0,36],
[43,34,40,46,51,49,41,46,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,49,58,40,40,46,48,47,44],
[30,0,29,42,36,29,40,34,34,27],
[32,52,0,51,42,35,35,43,40,33],
[23,39,30,0,40,37,43,35,44,36],
[41,45,39,41,0,37,39,42,42,38],
[41,52,46,44,44,0,44,54,39,36],
[35,41,46,38,42,37,0,42,44,29],
[33,47,38,46,39,27,39,0,39,31],
[34,47,41,37,39,42,37,42,0,32],
[37,54,48,45,43,45,52,50,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,35,36,39,37,35,45,33,41],
[41,0,36,39,35,37,33,38,32,37],
[46,45,0,45,45,41,38,38,36,42],
[45,42,36,0,38,45,37,35,36,35],
[42,46,36,43,0,39,41,41,35,39],
[44,44,40,36,42,0,37,42,32,47],
[46,48,43,44,40,44,0,47,41,44],
[36,43,43,46,40,39,34,0,32,38],
[48,49,45,45,46,49,40,49,0,42],
[40,44,39,46,42,34,37,43,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,49,48,34,46,43,36,41,46],
[41,0,43,43,43,49,50,33,39,47],
[32,38,0,39,37,45,46,36,33,50],
[33,38,42,0,33,34,36,34,36,47],
[47,38,44,48,0,48,43,36,39,45],
[35,32,36,47,33,0,44,42,35,38],
[38,31,35,45,38,37,0,30,36,40],
[45,48,45,47,45,39,51,0,32,54],
[40,42,48,45,42,46,45,49,0,58],
[35,34,31,34,36,43,41,27,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,39,36,44,39,44,43,45,41],
[46,0,49,39,46,47,46,45,40,47],
[42,32,0,39,40,37,41,40,44,38],
[45,42,42,0,51,42,48,47,43,39],
[37,35,41,30,0,35,44,40,40,38],
[42,34,44,39,46,0,46,43,39,30],
[37,35,40,33,37,35,0,35,36,30],
[38,36,41,34,41,38,46,0,39,36],
[36,41,37,38,41,42,45,42,0,37],
[40,34,43,42,43,51,51,45,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,48,46,45,51,41,42,39,42],
[41,0,45,32,49,41,53,49,36,39],
[33,36,0,35,41,40,43,37,35,41],
[35,49,46,0,49,44,47,51,45,47],
[36,32,40,32,0,50,58,50,43,36],
[30,40,41,37,31,0,46,37,34,31],
[40,28,38,34,23,35,0,38,40,35],
[39,32,44,30,31,44,43,0,33,39],
[42,45,46,36,38,47,41,48,0,47],
[39,42,40,34,45,50,46,42,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,48,52,40,60,38,38,40,60],
[41,0,50,41,50,30,41,60,51,49],
[33,31,0,53,43,50,33,52,33,61],
[29,40,28,0,39,51,40,29,39,40],
[41,31,38,42,0,50,50,39,60,50],
[21,51,31,30,31,0,32,40,32,49],
[43,40,48,41,31,49,0,59,32,49],
[43,21,29,52,42,41,22,0,32,41],
[41,30,48,42,21,49,49,49,0,60],
[21,32,20,41,31,32,32,40,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,36,41,33,38,50,37,37,46],
[48,0,43,46,45,52,39,30,45,47],
[45,38,0,41,49,42,55,39,43,43],
[40,35,40,0,46,41,45,35,32,35],
[48,36,32,35,0,40,43,35,39,43],
[43,29,39,40,41,0,46,27,26,44],
[31,42,26,36,38,35,0,25,25,40],
[44,51,42,46,46,54,56,0,32,54],
[44,36,38,49,42,55,56,49,0,44],
[35,34,38,46,38,37,41,27,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,40,36,37,37,39,37,38,38],
[36,0,36,43,41,38,42,31,43,40],
[41,45,0,45,47,42,47,40,47,40],
[45,38,36,0,40,36,44,37,42,43],
[44,40,34,41,0,36,41,42,44,37],
[44,43,39,45,45,0,48,34,48,43],
[42,39,34,37,40,33,0,41,41,42],
[44,50,41,44,39,47,40,0,47,41],
[43,38,34,39,37,33,40,34,0,32],
[43,41,41,38,44,38,39,40,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,41,41,36,38,40,40,49,40],
[48,0,26,46,46,50,46,40,59,38],
[40,55,0,58,44,56,41,48,45,65],
[40,35,23,0,29,38,43,32,30,33],
[45,35,37,52,0,42,43,39,33,40],
[43,31,25,43,39,0,34,37,41,44],
[41,35,40,38,38,47,0,47,42,45],
[41,41,33,49,42,44,34,0,48,49],
[32,22,36,51,48,40,39,33,0,42],
[41,43,16,48,41,37,36,32,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,27,34,50,35,49,50,42,48],
[45,0,37,30,52,30,48,51,58,59],
[54,44,0,46,43,22,42,51,51,36],
[47,51,35,0,49,37,34,65,42,42],
[31,29,38,32,0,30,36,52,52,47],
[46,51,59,44,51,0,59,59,37,73],
[32,33,39,47,45,22,0,44,37,30],
[31,30,30,16,29,22,37,0,15,36],
[39,23,30,39,29,44,44,66,0,44],
[33,22,45,39,34,8,51,45,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,15,14,29,15,29,14,29,0],
[67,0,28,40,67,67,56,52,81,52],
[66,53,0,39,52,52,41,52,66,52],
[67,41,42,0,56,53,42,52,67,27],
[52,14,29,25,0,40,43,11,53,52],
[66,14,29,28,41,0,14,39,66,55],
[52,25,40,39,38,67,0,25,67,52],
[67,29,29,29,70,42,56,0,56,56],
[52,0,15,14,28,15,14,25,0,28],
[81,29,29,54,29,26,29,25,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,43,34,46,48,38,42,47,38],
[34,0,34,44,43,33,43,39,47,28],
[38,47,0,39,42,38,39,55,48,43],
[47,37,42,0,43,36,47,57,48,43],
[35,38,39,38,0,35,41,45,51,33],
[33,48,43,45,46,0,47,44,46,42],
[43,38,42,34,40,34,0,44,45,37],
[39,42,26,24,36,37,37,0,41,29],
[34,34,33,33,30,35,36,40,0,34],
[43,53,38,38,48,39,44,52,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,35,41,38,38,42,39,38,38],
[39,0,35,49,42,38,40,36,34,44],
[46,46,0,47,42,45,42,39,43,45],
[40,32,34,0,33,31,32,32,29,39],
[43,39,39,48,0,40,37,35,34,39],
[43,43,36,50,41,0,38,38,37,43],
[39,41,39,49,44,43,0,41,43,45],
[42,45,42,49,46,43,40,0,38,45],
[43,47,38,52,47,44,38,43,0,49],
[43,37,36,42,42,38,36,36,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,35,27,28,38,33,46,37,37],
[48,0,46,42,35,34,44,53,36,44],
[46,35,0,38,26,24,27,49,29,45],
[54,39,43,0,31,35,37,51,35,42],
[53,46,55,50,0,41,44,45,47,40],
[43,47,57,46,40,0,35,48,40,46],
[48,37,54,44,37,46,0,52,29,46],
[35,28,32,30,36,33,29,0,25,35],
[44,45,52,46,34,41,52,56,0,46],
[44,37,36,39,41,35,35,46,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,28,28,27,27,43,15,28,27],
[53,0,42,54,41,39,27,41,56,14],
[53,39,0,56,14,53,53,41,81,26],
[53,27,25,0,14,53,54,14,54,14],
[54,40,67,67,0,54,67,39,67,12],
[54,42,28,28,27,0,55,29,54,27],
[38,54,28,27,14,26,0,41,54,14],
[66,40,40,67,42,52,40,0,40,42],
[53,25,0,27,14,27,27,41,0,14],
[54,67,55,67,69,54,67,39,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,44,47,37,51,43,43,51,50],
[26,0,35,33,31,35,30,29,42,40],
[37,46,0,41,38,43,36,31,51,47],
[34,48,40,0,44,51,46,45,51,46],
[44,50,43,37,0,57,44,46,53,59],
[30,46,38,30,24,0,35,34,44,43],
[38,51,45,35,37,46,0,32,36,40],
[38,52,50,36,35,47,49,0,43,43],
[30,39,30,30,28,37,45,38,0,33],
[31,41,34,35,22,38,41,38,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,42,41,48,41,40,39,44,59],
[34,0,25,33,40,41,31,31,48,43],
[39,56,0,42,49,55,51,44,56,56],
[40,48,39,0,41,51,40,45,38,51],
[33,41,32,40,0,47,30,33,35,40],
[40,40,26,30,34,0,29,39,43,45],
[41,50,30,41,51,52,0,49,59,31],
[42,50,37,36,48,42,32,0,45,48],
[37,33,25,43,46,38,22,36,0,37],
[22,38,25,30,41,36,50,33,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,30,44,40,35,46,45,34,39],
[35,0,26,36,29,34,48,46,30,32],
[51,55,0,45,41,39,50,56,40,38],
[37,45,36,0,47,35,43,41,35,43],
[41,52,40,34,0,30,40,44,45,33],
[46,47,42,46,51,0,43,56,38,46],
[35,33,31,38,41,38,0,48,32,40],
[36,35,25,40,37,25,33,0,27,24],
[47,51,41,46,36,43,49,54,0,40],
[42,49,43,38,48,35,41,57,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,49,36,39,37,37,43,25,27],
[45,0,43,38,40,38,39,34,44,39],
[32,38,0,39,40,39,35,38,35,34],
[45,43,42,0,48,38,35,50,34,28],
[42,41,41,33,0,36,37,46,30,26],
[44,43,42,43,45,0,37,43,32,30],
[44,42,46,46,44,44,0,49,40,38],
[38,47,43,31,35,38,32,0,40,25],
[56,37,46,47,51,49,41,41,0,43],
[54,42,47,53,55,51,43,56,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,28,25,29,30,28,32,31,35],
[44,0,29,32,33,37,33,42,35,31],
[53,52,0,46,44,44,46,48,52,39],
[56,49,35,0,42,51,43,43,45,40],
[52,48,37,39,0,48,48,44,46,41],
[51,44,37,30,33,0,41,39,28,34],
[53,48,35,38,33,40,0,34,36,42],
[49,39,33,38,37,42,47,0,33,43],
[50,46,29,36,35,53,45,48,0,46],
[46,50,42,41,40,47,39,38,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,39,38,36,39,39,35,32,37],
[51,0,52,34,43,43,44,45,38,50],
[42,29,0,38,36,40,43,41,43,42],
[43,47,43,0,30,38,49,38,39,43],
[45,38,45,51,0,47,52,54,42,59],
[42,38,41,43,34,0,45,40,26,54],
[42,37,38,32,29,36,0,37,30,42],
[46,36,40,43,27,41,44,0,35,47],
[49,43,38,42,39,55,51,46,0,46],
[44,31,39,38,22,27,39,34,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,42,42,42,40,41,40,45,42],
[41,0,42,37,41,39,40,39,41,44],
[39,39,0,39,42,39,42,38,42,41],
[39,44,42,0,37,40,35,40,35,41],
[39,40,39,44,0,42,40,39,38,40],
[41,42,42,41,39,0,41,43,37,43],
[40,41,39,46,41,40,0,40,37,43],
[41,42,43,41,42,38,41,0,39,44],
[36,40,39,46,43,44,44,42,0,43],
[39,37,40,40,41,38,38,37,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,46,45,47,55,43,40,42,46],
[37,0,45,50,49,59,47,44,45,43],
[35,36,0,44,46,57,41,36,46,36],
[36,31,37,0,47,58,42,33,43,39],
[34,32,35,34,0,52,43,30,42,34],
[26,22,24,23,29,0,28,25,35,26],
[38,34,40,39,38,53,0,27,42,29],
[41,37,45,48,51,56,54,0,47,39],
[39,36,35,38,39,46,39,34,0,27],
[35,38,45,42,47,55,52,42,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,51,52,48,44,41,48,38,50],
[36,0,40,38,44,35,37,39,32,37],
[30,41,0,42,38,43,30,33,44,41],
[29,43,39,0,38,35,28,28,43,36],
[33,37,43,43,0,32,27,37,40,38],
[37,46,38,46,49,0,27,34,39,38],
[40,44,51,53,54,54,0,37,41,52],
[33,42,48,53,44,47,44,0,41,48],
[43,49,37,38,41,42,40,40,0,40],
[31,44,40,45,43,43,29,33,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,33,40,42,50,49,47,52,35],
[43,0,35,33,37,51,44,35,49,41],
[48,46,0,45,45,50,49,30,43,35],
[41,48,36,0,47,49,41,38,44,40],
[39,44,36,34,0,46,40,37,44,40],
[31,30,31,32,35,0,42,29,38,37],
[32,37,32,40,41,39,0,28,51,39],
[34,46,51,43,44,52,53,0,50,46],
[29,32,38,37,37,43,30,31,0,34],
[46,40,46,41,41,44,42,35,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,40,41,46,44,43,39,48,43],
[39,0,37,43,42,42,41,39,44,39],
[41,44,0,41,44,48,44,37,53,45],
[40,38,40,0,49,46,46,38,44,42],
[35,39,37,32,0,41,41,39,43,33],
[37,39,33,35,40,0,38,41,37,39],
[38,40,37,35,40,43,0,35,40,38],
[42,42,44,43,42,40,46,0,45,43],
[33,37,28,37,38,44,41,36,0,39],
[38,42,36,39,48,42,43,38,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,40,43,47,39,37,42,38,42],
[44,0,38,50,48,43,38,39,40,38],
[41,43,0,41,44,46,35,39,34,40],
[38,31,40,0,47,44,39,31,37,33],
[34,33,37,34,0,39,42,35,30,37],
[42,38,35,37,42,0,38,30,38,35],
[44,43,46,42,39,43,0,36,35,37],
[39,42,42,50,46,51,45,0,40,41],
[43,41,47,44,51,43,46,41,0,38],
[39,43,41,48,44,46,44,40,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,41,39,30,40,35,42,31,37],
[37,0,42,35,31,35,33,39,33,24],
[40,39,0,31,32,43,37,36,32,35],
[42,46,50,0,43,43,30,44,39,37],
[51,50,49,38,0,52,44,48,47,44],
[41,46,38,38,29,0,32,42,35,30],
[46,48,44,51,37,49,0,40,32,34],
[39,42,45,37,33,39,41,0,44,32],
[50,48,49,42,34,46,49,37,0,41],
[44,57,46,44,37,51,47,49,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,34,41,49,39,41,46,42,45],
[46,0,40,56,52,41,42,46,46,49],
[47,41,0,41,42,36,43,45,36,45],
[40,25,40,0,40,30,37,38,33,41],
[32,29,39,41,0,34,40,47,29,38],
[42,40,45,51,47,0,47,47,48,45],
[40,39,38,44,41,34,0,45,33,44],
[35,35,36,43,34,34,36,0,31,40],
[39,35,45,48,52,33,48,50,0,45],
[36,32,36,40,43,36,37,41,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,34,32,42,49,49,37,39,53],
[33,0,30,34,43,39,40,32,34,40],
[47,51,0,45,52,51,45,40,47,46],
[49,47,36,0,50,45,44,45,38,51],
[39,38,29,31,0,31,40,33,32,41],
[32,42,30,36,50,0,50,35,27,46],
[32,41,36,37,41,31,0,40,30,35],
[44,49,41,36,48,46,41,0,42,51],
[42,47,34,43,49,54,51,39,0,49],
[28,41,35,30,40,35,46,30,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,37,34,39,31,37,39,41,47],
[49,0,42,48,38,44,44,47,44,44],
[44,39,0,35,48,41,36,40,47,46],
[47,33,46,0,42,42,41,43,44,49],
[42,43,33,39,0,36,35,40,44,41],
[50,37,40,39,45,0,44,37,44,45],
[44,37,45,40,46,37,0,38,44,44],
[42,34,41,38,41,44,43,0,43,47],
[40,37,34,37,37,37,37,38,0,44],
[34,37,35,32,40,36,37,34,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,26,27,27,33,38,42,31,55],
[36,0,24,30,41,28,41,32,37,47],
[55,57,0,61,50,40,60,42,40,55],
[54,51,20,0,40,33,42,34,46,42],
[54,40,31,41,0,33,45,40,40,40],
[48,53,41,48,48,0,55,37,48,56],
[43,40,21,39,36,26,0,40,37,43],
[39,49,39,47,41,44,41,0,43,54],
[50,44,41,35,41,33,44,38,0,50],
[26,34,26,39,41,25,38,27,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,52,39,40,42,61,31,59,43],
[31,0,32,50,31,22,50,31,40,22],
[29,49,0,48,20,29,59,18,18,22],
[42,31,33,0,22,42,51,42,20,33],
[41,50,61,59,0,40,61,40,39,41],
[39,59,52,39,41,0,50,50,39,21],
[20,31,22,30,20,31,0,20,20,22],
[50,50,63,39,41,31,61,0,28,32],
[22,41,63,61,42,42,61,53,0,32],
[38,59,59,48,40,60,59,49,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,43,35,43,46,44,47,50,39],
[30,0,29,33,26,44,40,32,44,34],
[38,52,0,38,40,45,48,45,53,43],
[46,48,43,0,43,55,47,42,54,36],
[38,55,41,38,0,47,45,46,51,45],
[35,37,36,26,34,0,40,37,37,30],
[37,41,33,34,36,41,0,33,48,27],
[34,49,36,39,35,44,48,0,44,41],
[31,37,28,27,30,44,33,37,0,32],
[42,47,38,45,36,51,54,40,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,36,43,46,38,32,37,38,32],
[43,0,42,39,35,42,36,40,38,39],
[45,39,0,40,44,42,42,34,38,36],
[38,42,41,0,31,40,42,36,38,32],
[35,46,37,50,0,36,42,40,40,41],
[43,39,39,41,45,0,41,47,43,35],
[49,45,39,39,39,40,0,37,39,27],
[44,41,47,45,41,34,44,0,55,37],
[43,43,43,43,41,38,42,26,0,39],
[49,42,45,49,40,46,54,44,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,51,33,42,38,44,40,36,34],
[44,0,46,36,51,49,43,46,45,43],
[30,35,0,29,37,38,37,39,36,34],
[48,45,52,0,56,41,45,38,44,45],
[39,30,44,25,0,38,27,32,39,30],
[43,32,43,40,43,0,43,38,36,35],
[37,38,44,36,54,38,0,33,29,32],
[41,35,42,43,49,43,48,0,41,40],
[45,36,45,37,42,45,52,40,0,33],
[47,38,47,36,51,46,49,41,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,51,51,42,33,40,43,25,35],
[37,0,56,47,45,47,50,34,37,47],
[30,25,0,35,34,30,29,35,32,36],
[30,34,46,0,35,32,30,36,34,34],
[39,36,47,46,0,31,38,35,34,37],
[48,34,51,49,50,0,50,33,41,47],
[41,31,52,51,43,31,0,42,45,39],
[38,47,46,45,46,48,39,0,38,45],
[56,44,49,47,47,40,36,43,0,38],
[46,34,45,47,44,34,42,36,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,43,46,39,40,39,38,52,38],
[41,0,42,46,43,42,39,35,49,46],
[38,39,0,40,38,33,38,35,43,37],
[35,35,41,0,45,36,37,38,41,35],
[42,38,43,36,0,33,41,39,48,37],
[41,39,48,45,48,0,47,43,48,42],
[42,42,43,44,40,34,0,40,50,40],
[43,46,46,43,42,38,41,0,49,41],
[29,32,38,40,33,33,31,32,0,35],
[43,35,44,46,44,39,41,40,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,50,43,61,45,45,50,28,43],
[35,0,43,35,46,45,30,50,36,43],
[31,38,0,38,39,52,15,30,30,43],
[38,46,43,0,31,46,31,30,28,36],
[20,35,42,50,0,50,37,43,20,27],
[36,36,29,35,31,0,31,35,21,36],
[36,51,66,50,44,50,0,43,28,43],
[31,31,51,51,38,46,38,0,43,28],
[53,45,51,53,61,60,53,38,0,59],
[38,38,38,45,54,45,38,53,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,41,40,45,49,50,47,50,48],
[32,0,37,40,43,41,38,49,34,43],
[40,44,0,39,41,48,50,56,56,53],
[41,41,42,0,39,43,44,41,39,42],
[36,38,40,42,0,37,43,36,43,40],
[32,40,33,38,44,0,40,52,44,38],
[31,43,31,37,38,41,0,44,41,30],
[34,32,25,40,45,29,37,0,32,39],
[31,47,25,42,38,37,40,49,0,31],
[33,38,28,39,41,43,51,42,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,38,38,38,39,34,43,38,38],
[41,0,36,44,42,42,41,39,42,39],
[43,45,0,41,46,46,38,37,41,41],
[43,37,40,0,44,42,38,40,39,38],
[43,39,35,37,0,37,36,41,41,35],
[42,39,35,39,44,0,37,37,34,34],
[47,40,43,43,45,44,0,43,38,41],
[38,42,44,41,40,44,38,0,47,40],
[43,39,40,42,40,47,43,34,0,43],
[43,42,40,43,46,47,40,41,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,45,31,39,35,34,38,38,30],
[45,0,41,33,44,38,34,39,44,39],
[36,40,0,33,40,32,27,38,42,41],
[50,48,48,0,47,40,42,46,49,51],
[42,37,41,34,0,35,36,39,40,39],
[46,43,49,41,46,0,36,41,44,44],
[47,47,54,39,45,45,0,51,46,49],
[43,42,43,35,42,40,30,0,43,35],
[43,37,39,32,41,37,35,38,0,31],
[51,42,40,30,42,37,32,46,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,40,47,39,46,46,44,47,35],
[33,0,35,45,41,39,44,41,39,38],
[41,46,0,50,46,40,47,45,43,42],
[34,36,31,0,44,36,43,37,45,37],
[42,40,35,37,0,40,42,42,42,40],
[35,42,41,45,41,0,44,47,45,43],
[35,37,34,38,39,37,0,38,39,33],
[37,40,36,44,39,34,43,0,43,34],
[34,42,38,36,39,36,42,38,0,40],
[46,43,39,44,41,38,48,47,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,38,38,37,32,40,33,33,40],
[46,0,36,43,41,40,42,36,42,47],
[43,45,0,43,41,37,42,44,43,45],
[43,38,38,0,40,34,35,40,32,39],
[44,40,40,41,0,41,39,40,38,43],
[49,41,44,47,40,0,42,42,43,43],
[41,39,39,46,42,39,0,37,40,39],
[48,45,37,41,41,39,44,0,39,43],
[48,39,38,49,43,38,41,42,0,44],
[41,34,36,42,38,38,42,38,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,43,46,38,40,34,51,33,33],
[50,0,47,49,45,52,44,65,38,42],
[38,34,0,51,38,45,39,54,22,46],
[35,32,30,0,35,39,20,46,27,29],
[43,36,43,46,0,48,38,54,41,34],
[41,29,36,42,33,0,33,42,33,42],
[47,37,42,61,43,48,0,57,44,48],
[30,16,27,35,27,39,24,0,30,31],
[48,43,59,54,40,48,37,51,0,44],
[48,39,35,52,47,39,33,50,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,31,25,38,29,36,35,36,35],
[45,0,41,34,34,39,31,42,34,35],
[50,40,0,30,41,39,30,42,44,45],
[56,47,51,0,54,36,38,45,49,51],
[43,47,40,27,0,38,32,45,41,42],
[52,42,42,45,43,0,39,51,43,47],
[45,50,51,43,49,42,0,37,38,50],
[46,39,39,36,36,30,44,0,37,40],
[45,47,37,32,40,38,43,44,0,42],
[46,46,36,30,39,34,31,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,46,44,38,46,41,42,48,48],
[43,0,44,39,40,48,45,42,41,52],
[35,37,0,35,34,43,42,33,34,41],
[37,42,46,0,41,50,51,45,45,47],
[43,41,47,40,0,43,49,40,40,49],
[35,33,38,31,38,0,39,37,39,40],
[40,36,39,30,32,42,0,35,37,36],
[39,39,48,36,41,44,46,0,49,46],
[33,40,47,36,41,42,44,32,0,51],
[33,29,40,34,32,41,45,35,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,47,39,41,54,42,59,45,54],
[41,0,44,35,26,46,40,39,40,51],
[34,37,0,44,33,48,47,48,45,57],
[42,46,37,0,30,44,36,41,37,48],
[40,55,48,51,0,56,49,50,43,50],
[27,35,33,37,25,0,41,55,36,41],
[39,41,34,45,32,40,0,58,31,41],
[22,42,33,40,31,26,23,0,25,35],
[36,41,36,44,38,45,50,56,0,60],
[27,30,24,33,31,40,40,46,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,43,44,51,44,41,40,42,53],
[33,0,34,33,43,39,40,40,37,48],
[38,47,0,46,45,48,40,44,41,52],
[37,48,35,0,45,43,44,38,39,48],
[30,38,36,36,0,38,39,35,32,40],
[37,42,33,38,43,0,34,39,37,41],
[40,41,41,37,42,47,0,39,39,47],
[41,41,37,43,46,42,42,0,31,45],
[39,44,40,42,49,44,42,50,0,48],
[28,33,29,33,41,40,34,36,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,28,41,35,29,35,42,24,35],
[32,0,26,42,28,23,38,46,21,27],
[53,55,0,64,56,44,48,44,32,42],
[40,39,17,0,30,28,31,38,18,21],
[46,53,25,51,0,33,39,42,35,35],
[52,58,37,53,48,0,51,49,42,43],
[46,43,33,50,42,30,0,44,30,36],
[39,35,37,43,39,32,37,0,39,27],
[57,60,49,63,46,39,51,42,0,50],
[46,54,39,60,46,38,45,54,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,50,45,44,39,47,34,40,45],
[37,0,43,44,35,32,43,28,35,40],
[31,38,0,41,23,31,34,29,31,35],
[36,37,40,0,42,36,42,35,36,42],
[37,46,58,39,0,38,48,39,38,43],
[42,49,50,45,43,0,52,41,40,42],
[34,38,47,39,33,29,0,34,35,38],
[47,53,52,46,42,40,47,0,42,48],
[41,46,50,45,43,41,46,39,0,43],
[36,41,46,39,38,39,43,33,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,35,38,42,35,42,44,38,41],
[44,0,31,32,41,38,40,37,41,46],
[46,50,0,40,47,47,50,46,43,48],
[43,49,41,0,43,39,49,47,43,50],
[39,40,34,38,0,35,44,41,35,41],
[46,43,34,42,46,0,44,43,40,47],
[39,41,31,32,37,37,0,37,32,39],
[37,44,35,34,40,38,44,0,42,42],
[43,40,38,38,46,41,49,39,0,44],
[40,35,33,31,40,34,42,39,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,34,34,24,40,49,40,35,28],
[46,0,38,33,36,38,48,42,41,42],
[47,43,0,41,36,41,56,37,48,47],
[47,48,40,0,41,47,57,43,44,42],
[57,45,45,40,0,42,62,44,51,36],
[41,43,40,34,39,0,41,48,48,35],
[32,33,25,24,19,40,0,30,37,32],
[41,39,44,38,37,33,51,0,40,31],
[46,40,33,37,30,33,44,41,0,34],
[53,39,34,39,45,46,49,50,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,32,39,30,35,48,50,36,32],
[32,0,36,36,46,42,37,51,47,21],
[49,45,0,37,31,41,37,53,36,36],
[42,45,44,0,47,36,41,52,42,37],
[51,35,50,34,0,46,51,60,44,41],
[46,39,40,45,35,0,45,47,32,28],
[33,44,44,40,30,36,0,36,42,32],
[31,30,28,29,21,34,45,0,39,23],
[45,34,45,39,37,49,39,42,0,50],
[49,60,45,44,40,53,49,58,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,27,40,40,13,53,40,39,41],
[56,0,56,42,41,42,28,29,27,55],
[54,25,0,28,41,27,41,27,27,40],
[41,39,53,0,52,28,25,28,26,41],
[41,40,40,29,0,28,28,28,14,27],
[68,39,54,53,53,0,40,41,39,53],
[28,53,40,56,53,41,0,28,41,41],
[41,52,54,53,53,40,53,0,39,40],
[42,54,54,55,67,42,40,42,0,42],
[40,26,41,40,54,28,40,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,42,40,30,60,53,42,53,41],
[30,0,41,61,41,50,60,41,52,31],
[39,40,0,29,39,40,30,30,39,20],
[41,20,52,0,42,50,42,41,51,41],
[51,40,42,39,0,50,52,52,61,42],
[21,31,41,31,31,0,41,31,31,11],
[28,21,51,39,29,40,0,31,52,9],
[39,40,51,40,29,50,50,0,71,18],
[28,29,42,30,20,50,29,10,0,19],
[40,50,61,40,39,70,72,63,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,27,40,39,43,44,40,59,43],
[39,0,36,37,33,37,47,38,63,56],
[54,45,0,51,38,42,54,48,61,64],
[41,44,30,0,39,43,34,35,57,41],
[42,48,43,42,0,43,38,36,62,40],
[38,44,39,38,38,0,47,32,52,48],
[37,34,27,47,43,34,0,33,54,37],
[41,43,33,46,45,49,48,0,56,31],
[22,18,20,24,19,29,27,25,0,33],
[38,25,17,40,41,33,44,50,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,49,49,31,38,31,62,45,73],
[40,0,49,48,52,38,42,56,45,74],
[32,32,0,40,53,39,40,32,32,42],
[32,33,41,0,41,41,41,45,44,66],
[50,29,28,40,0,25,19,50,22,60],
[43,43,42,40,56,0,33,56,43,43],
[50,39,41,40,62,48,0,63,52,73],
[19,25,49,36,31,25,18,0,29,61],
[36,36,49,37,59,38,29,52,0,68],
[8,7,39,15,21,38,8,20,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,37,42,34,39,40,42,38,42],
[39,0,36,45,39,42,40,43,35,37],
[44,45,0,45,40,42,44,47,47,39],
[39,36,36,0,35,36,36,41,38,40],
[47,42,41,46,0,43,43,50,39,47],
[42,39,39,45,38,0,39,42,40,41],
[41,41,37,45,38,42,0,50,35,39],
[39,38,34,40,31,39,31,0,33,35],
[43,46,34,43,42,41,46,48,0,43],
[39,44,42,41,34,40,42,46,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,36,40,38,49,38,42,36,35],
[45,0,39,42,41,54,39,43,42,43],
[45,42,0,42,40,49,52,50,47,35],
[41,39,39,0,38,46,46,41,42,38],
[43,40,41,43,0,50,39,45,44,37],
[32,27,32,35,31,0,32,29,37,32],
[43,42,29,35,42,49,0,37,40,35],
[39,38,31,40,36,52,44,0,36,31],
[45,39,34,39,37,44,41,45,0,38],
[46,38,46,43,44,49,46,50,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,36,36,38,35,28,28,35,31],
[51,0,43,38,42,32,37,41,52,37],
[45,38,0,40,39,34,33,40,45,36],
[45,43,41,0,45,42,37,36,42,45],
[43,39,42,36,0,37,43,37,43,39],
[46,49,47,39,44,0,39,39,46,37],
[53,44,48,44,38,42,0,32,39,47],
[53,40,41,45,44,42,49,0,43,43],
[46,29,36,39,38,35,42,38,0,32],
[50,44,45,36,42,44,34,38,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,48,38,37,40,38,40,36,34],
[43,0,47,41,33,41,40,39,34,42],
[33,34,0,37,33,38,35,29,29,36],
[43,40,44,0,40,40,47,41,42,42],
[44,48,48,41,0,44,49,37,41,37],
[41,40,43,41,37,0,40,33,38,41],
[43,41,46,34,32,41,0,36,36,33],
[41,42,52,40,44,48,45,0,38,40],
[45,47,52,39,40,43,45,43,0,45],
[47,39,45,39,44,40,48,41,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,36,32,43,40,39,37,36,39],
[47,0,37,36,41,39,35,41,37,35],
[45,44,0,36,34,35,45,39,39,39],
[49,45,45,0,40,32,50,42,42,46],
[38,40,47,41,0,47,47,50,34,44],
[41,42,46,49,34,0,36,49,37,39],
[42,46,36,31,34,45,0,42,34,35],
[44,40,42,39,31,32,39,0,40,39],
[45,44,42,39,47,44,47,41,0,42],
[42,46,42,35,37,42,46,42,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,47,33,41,48,39,43,44,43],
[24,0,29,24,42,41,35,31,47,42],
[34,52,0,23,49,38,33,34,43,46],
[48,57,58,0,50,63,38,42,52,43],
[40,39,32,31,0,47,27,22,42,38],
[33,40,43,18,34,0,24,16,27,37],
[42,46,48,43,54,57,0,34,50,42],
[38,50,47,39,59,65,47,0,50,52],
[37,34,38,29,39,54,31,31,0,40],
[38,39,35,38,43,44,39,29,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,46,37,42,56,44,48,55,48],
[26,0,36,42,35,48,35,50,36,32],
[35,45,0,43,43,52,44,47,49,47],
[44,39,38,0,33,50,40,55,50,50],
[39,46,38,48,0,43,44,39,43,37],
[25,33,29,31,38,0,31,51,41,30],
[37,46,37,41,37,50,0,43,45,46],
[33,31,34,26,42,30,38,0,46,39],
[26,45,32,31,38,40,36,35,0,48],
[33,49,34,31,44,51,35,42,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,49,59,50,48,50,44,34,59],
[52,0,52,59,37,59,45,67,56,37],
[32,29,0,37,35,51,31,31,44,44],
[22,22,44,0,37,44,22,29,42,22],
[31,44,46,44,0,52,23,54,28,51],
[33,22,30,37,29,0,31,15,22,38],
[31,36,50,59,58,50,0,52,51,44],
[37,14,50,52,27,66,29,0,40,36],
[47,25,37,39,53,59,30,41,0,46],
[22,44,37,59,30,43,37,45,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,48,40,42,47,46,48,43],
[37,0,38,42,40,40,41,44,39,36],
[39,43,0,42,36,39,44,46,48,36],
[33,39,39,0,36,40,43,43,39,41],
[41,41,45,45,0,44,41,44,44,36],
[39,41,42,41,37,0,42,39,46,33],
[34,40,37,38,40,39,0,43,41,35],
[35,37,35,38,37,42,38,0,45,36],
[33,42,33,42,37,35,40,36,0,34],
[38,45,45,40,45,48,46,45,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,41,29,54,40,20,29,41,32],
[20,0,22,9,54,28,10,20,31,20],
[40,59,0,19,54,50,20,39,49,32],
[52,72,62,0,54,50,52,30,59,52],
[27,27,27,27,0,27,18,37,39,18],
[41,53,31,31,54,0,22,41,33,42],
[61,71,61,29,63,59,0,59,39,51],
[52,61,42,51,44,40,22,0,39,32],
[40,50,32,22,42,48,42,42,0,52],
[49,61,49,29,63,39,30,49,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,43,43,47,37,51,43,52,35],
[41,0,42,42,42,40,42,41,46,32],
[38,39,0,40,47,30,41,36,43,37],
[38,39,41,0,40,42,39,36,42,35],
[34,39,34,41,0,34,40,32,39,33],
[44,41,51,39,47,0,50,45,50,43],
[30,39,40,42,41,31,0,43,43,37],
[38,40,45,45,49,36,38,0,51,38],
[29,35,38,39,42,31,38,30,0,33],
[46,49,44,46,48,38,44,43,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,37,42,44,35,55,44,49,47],
[38,0,37,42,40,43,45,54,50,44],
[44,44,0,40,40,46,53,39,46,46],
[39,39,41,0,37,44,53,45,40,46],
[37,41,41,44,0,42,50,36,42,44],
[46,38,35,37,39,0,50,43,48,45],
[26,36,28,28,31,31,0,30,24,23],
[37,27,42,36,45,38,51,0,47,44],
[32,31,35,41,39,33,57,34,0,36],
[34,37,35,35,37,36,58,37,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,41,47,35,42,37,37,36,44],
[33,0,39,39,37,40,39,37,34,41],
[40,42,0,43,33,38,34,38,40,37],
[34,42,38,0,35,40,41,41,40,48],
[46,44,48,46,0,48,38,41,50,46],
[39,41,43,41,33,0,37,37,40,38],
[44,42,47,40,43,44,0,44,43,43],
[44,44,43,40,40,44,37,0,36,39],
[45,47,41,41,31,41,38,45,0,41],
[37,40,44,33,35,43,38,42,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,33,40,31,35,38,38,34,26],
[54,0,39,53,40,41,45,44,42,44],
[48,42,0,40,36,33,42,43,43,36],
[41,28,41,0,40,25,36,39,38,29],
[50,41,45,41,0,45,43,44,45,40],
[46,40,48,56,36,0,24,39,37,46],
[43,36,39,45,38,57,0,38,38,38],
[43,37,38,42,37,42,43,0,46,38],
[47,39,38,43,36,44,43,35,0,39],
[55,37,45,52,41,35,43,43,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,33,45,45,43,48,44,42,49],
[31,0,29,44,45,42,43,47,32,52],
[48,52,0,54,52,43,49,55,39,47],
[36,37,27,0,35,31,46,47,41,47],
[36,36,29,46,0,35,44,45,39,40],
[38,39,38,50,46,0,45,55,31,49],
[33,38,32,35,37,36,0,46,34,44],
[37,34,26,34,36,26,35,0,38,40],
[39,49,42,40,42,50,47,43,0,51],
[32,29,34,34,41,32,37,41,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,53,0,53,56,56,28,56,0],
[53,0,53,28,53,28,28,56,53,28],
[28,28,0,28,28,56,56,28,56,0],
[81,53,53,0,53,56,81,28,81,0],
[28,28,53,28,0,28,28,28,28,0],
[25,53,25,25,53,0,53,53,53,25],
[25,53,25,0,53,28,0,28,53,0],
[53,25,53,53,53,28,53,0,53,53],
[25,28,25,0,53,28,28,28,0,0],
[81,53,81,81,81,56,81,28,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,34,40,39,33,41,41,38,40],
[42,0,41,51,37,30,44,40,32,47],
[47,40,0,43,36,43,53,54,37,40],
[41,30,38,0,34,37,46,43,36,37],
[42,44,45,47,0,38,49,53,43,46],
[48,51,38,44,43,0,56,57,45,48],
[40,37,28,35,32,25,0,45,34,36],
[40,41,27,38,28,24,36,0,24,41],
[43,49,44,45,38,36,47,57,0,38],
[41,34,41,44,35,33,45,40,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,34,24,51,43,39,37,41,43],
[49,0,32,31,48,50,38,43,46,40],
[47,49,0,28,50,50,42,49,43,36],
[57,50,53,0,65,64,46,55,40,55],
[30,33,31,16,0,34,19,31,38,16],
[38,31,31,17,47,0,32,47,37,41],
[42,43,39,35,62,49,0,50,32,43],
[44,38,32,26,50,34,31,0,46,34],
[40,35,38,41,43,44,49,35,0,33],
[38,41,45,26,65,40,38,47,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,44,54,43,39,39,45,60,56],
[35,0,39,47,45,41,31,29,42,40],
[37,42,0,42,37,41,33,42,49,46],
[27,34,39,0,30,29,32,28,44,34],
[38,36,44,51,0,39,42,34,57,50],
[42,40,40,52,42,0,34,39,55,50],
[42,50,48,49,39,47,0,40,48,46],
[36,52,39,53,47,42,41,0,46,42],
[21,39,32,37,24,26,33,35,0,30],
[25,41,35,47,31,31,35,39,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,45,41,49,40,43,51,47,39],
[39,0,41,45,56,46,48,53,48,47],
[36,40,0,31,51,35,39,42,37,35],
[40,36,50,0,54,43,43,51,43,31],
[32,25,30,27,0,33,39,42,41,31],
[41,35,46,38,48,0,43,45,37,35],
[38,33,42,38,42,38,0,47,42,32],
[30,28,39,30,39,36,34,0,36,33],
[34,33,44,38,40,44,39,45,0,34],
[42,34,46,50,50,46,49,48,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,51,21,29,41,20,51,41,30],
[29,0,39,29,19,29,9,29,39,39],
[30,42,0,21,20,31,11,31,42,41],
[60,52,60,0,40,51,30,51,50,49],
[52,62,61,41,0,61,21,51,51,40],
[40,52,50,30,20,0,19,41,50,39],
[61,72,70,51,60,62,0,51,71,40],
[30,52,50,30,30,40,30,0,40,29],
[40,42,39,31,30,31,10,41,0,20],
[51,42,40,32,41,42,41,52,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,40,32,31,35,38,43,42,33],
[36,0,36,32,39,36,40,38,45,37],
[41,45,0,30,35,36,45,38,38,34],
[49,49,51,0,40,48,40,44,46,45],
[50,42,46,41,0,42,41,42,45,39],
[46,45,45,33,39,0,44,43,45,41],
[43,41,36,41,40,37,0,37,42,40],
[38,43,43,37,39,38,44,0,44,34],
[39,36,43,35,36,36,39,37,0,36],
[48,44,47,36,42,40,41,47,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,37,38,43,48,42,36,46,43],
[33,0,38,35,35,35,41,47,39,40],
[44,43,0,40,37,49,41,42,42,39],
[43,46,41,0,29,40,43,39,40,38],
[38,46,44,52,0,43,43,45,40,40],
[33,46,32,41,38,0,40,36,35,34],
[39,40,40,38,38,41,0,41,43,37],
[45,34,39,42,36,45,40,0,43,34],
[35,42,39,41,41,46,38,38,0,42],
[38,41,42,43,41,47,44,47,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,40,45,40,40,37,39,39,44],
[39,0,41,47,37,40,40,39,35,45],
[41,40,0,39,40,40,39,42,35,45],
[36,34,42,0,32,37,42,36,41,41],
[41,44,41,49,0,48,41,43,38,47],
[41,41,41,44,33,0,37,38,33,41],
[44,41,42,39,40,44,0,39,37,42],
[42,42,39,45,38,43,42,0,44,46],
[42,46,46,40,43,48,44,37,0,47],
[37,36,36,40,34,40,39,35,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,49,65,65,49,65,49,49,33],
[16,0,49,49,65,33,48,49,49,17],
[32,32,0,32,65,49,48,32,65,32],
[16,32,49,0,65,33,48,32,49,49],
[16,16,16,16,0,16,48,16,33,0],
[32,48,32,48,65,0,48,32,65,32],
[16,33,33,33,33,33,0,33,49,33],
[32,32,49,49,65,49,48,0,49,49],
[32,32,16,32,48,16,32,32,0,32],
[48,64,49,32,81,49,48,32,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,54,42,36,41,38,45,45,36],
[27,0,30,22,32,19,23,36,30,28],
[27,51,0,29,31,26,29,23,34,35],
[39,59,52,0,40,45,36,39,41,36],
[45,49,50,41,0,37,43,42,44,42],
[40,62,55,36,44,0,45,41,48,37],
[43,58,52,45,38,36,0,52,50,44],
[36,45,58,42,39,40,29,0,35,35],
[36,51,47,40,37,33,31,46,0,35],
[45,53,46,45,39,44,37,46,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,37,40,42,34,51,43,50,47],
[46,0,40,49,52,41,41,39,45,50],
[44,41,0,48,49,43,37,42,51,36],
[41,32,33,0,47,43,36,43,54,44],
[39,29,32,34,0,32,43,41,40,37],
[47,40,38,38,49,0,34,41,47,36],
[30,40,44,45,38,47,0,50,46,46],
[38,42,39,38,40,40,31,0,47,39],
[31,36,30,27,41,34,35,34,0,41],
[34,31,45,37,44,45,35,42,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,36,36,45,39,42,44,45,44],
[39,0,43,29,37,45,41,40,37,35],
[45,38,0,37,34,38,35,45,45,42],
[45,52,44,0,39,46,44,51,48,50],
[36,44,47,42,0,39,40,51,41,40],
[42,36,43,35,42,0,43,42,44,35],
[39,40,46,37,41,38,0,45,46,45],
[37,41,36,30,30,39,36,0,46,39],
[36,44,36,33,40,37,35,35,0,37],
[37,46,39,31,41,46,36,42,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,37,42,39,36,42,43,44,42],
[43,0,38,35,35,31,32,44,45,43],
[44,43,0,39,34,29,32,51,44,33],
[39,46,42,0,40,40,43,40,42,41],
[42,46,47,41,0,36,44,41,39,45],
[45,50,52,41,45,0,48,41,40,40],
[39,49,49,38,37,33,0,48,43,41],
[38,37,30,41,40,40,33,0,48,40],
[37,36,37,39,42,41,38,33,0,35],
[39,38,48,40,36,41,40,41,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,29,34,45,30,43,55,32,37],
[48,0,27,31,42,44,46,47,32,39],
[52,54,0,40,36,35,53,46,42,44],
[47,50,41,0,38,38,56,42,34,39],
[36,39,45,43,0,37,56,44,42,46],
[51,37,46,43,44,0,50,49,38,50],
[38,35,28,25,25,31,0,48,20,15],
[26,34,35,39,37,32,33,0,31,26],
[49,49,39,47,39,43,61,50,0,52],
[44,42,37,42,35,31,66,55,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,48,40,42,32,40,36,38,40],
[40,0,41,41,40,35,46,35,38,30],
[33,40,0,44,44,32,42,36,35,32],
[41,40,37,0,42,25,45,34,42,33],
[39,41,37,39,0,29,36,29,35,27],
[49,46,49,56,52,0,34,48,49,37],
[41,35,39,36,45,47,0,36,49,37],
[45,46,45,47,52,33,45,0,49,44],
[43,43,46,39,46,32,32,32,0,35],
[41,51,49,48,54,44,44,37,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,34,35,40,39,38,28,31,44],
[56,0,39,59,47,50,47,51,52,45],
[47,42,0,44,48,41,47,40,36,43],
[46,22,37,0,41,34,39,44,40,33],
[41,34,33,40,0,29,45,38,28,39],
[42,31,40,47,52,0,41,38,42,50],
[43,34,34,42,36,40,0,48,37,50],
[53,30,41,37,43,43,33,0,32,44],
[50,29,45,41,53,39,44,49,0,41],
[37,36,38,48,42,31,31,37,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,45,35,37,42,52,45,33,43],
[47,0,39,41,45,47,54,54,46,52],
[36,42,0,28,35,32,54,39,36,53],
[46,40,53,0,42,35,46,51,43,49],
[44,36,46,39,0,43,46,55,36,54],
[39,34,49,46,38,0,61,58,46,58],
[29,27,27,35,35,20,0,36,31,36],
[36,27,42,30,26,23,45,0,36,39],
[48,35,45,38,45,35,50,45,0,44],
[38,29,28,32,27,23,45,42,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,40,42,45,52,45,42,36,49],
[47,0,38,29,45,48,34,43,43,37],
[41,43,0,47,44,49,41,39,43,38],
[39,52,34,0,46,49,44,38,42,40],
[36,36,37,35,0,42,40,44,36,37],
[29,33,32,32,39,0,28,30,30,31],
[36,47,40,37,41,53,0,41,39,43],
[39,38,42,43,37,51,40,0,33,43],
[45,38,38,39,45,51,42,48,0,43],
[32,44,43,41,44,50,38,38,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,42,31,32,41,30,45,54,37],
[34,0,33,30,44,39,43,51,54,36],
[39,48,0,47,40,55,39,56,44,46],
[50,51,34,0,45,35,49,42,53,52],
[49,37,41,36,0,39,43,49,52,43],
[40,42,26,46,42,0,51,54,52,37],
[51,38,42,32,38,30,0,49,54,33],
[36,30,25,39,32,27,32,0,44,28],
[27,27,37,28,29,29,27,37,0,35],
[44,45,35,29,38,44,48,53,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,30,31,48,35,45,40,30,38],
[52,0,42,40,49,42,47,44,43,45],
[51,39,0,39,43,41,51,51,38,42],
[50,41,42,0,48,39,52,46,39,50],
[33,32,38,33,0,35,41,41,34,34],
[46,39,40,42,46,0,51,42,33,47],
[36,34,30,29,40,30,0,41,32,42],
[41,37,30,35,40,39,40,0,34,38],
[51,38,43,42,47,48,49,47,0,45],
[43,36,39,31,47,34,39,43,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,39,51,52,41,37,49,41],
[40,0,33,43,41,51,40,41,38,45],
[40,48,0,39,52,50,39,39,50,38],
[42,38,42,0,53,47,37,37,46,35],
[30,40,29,28,0,49,34,35,42,38],
[29,30,31,34,32,0,33,28,44,33],
[40,41,42,44,47,48,0,47,46,41],
[44,40,42,44,46,53,34,0,53,47],
[32,43,31,35,39,37,35,28,0,37],
[40,36,43,46,43,48,40,34,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,24,39,34,33,32,34,29,33],
[39,0,30,30,22,27,25,38,33,34],
[57,51,0,42,46,39,47,48,43,45],
[42,51,39,0,39,29,35,26,38,37],
[47,59,35,42,0,42,37,49,37,44],
[48,54,42,52,39,0,43,54,51,37],
[49,56,34,46,44,38,0,61,43,34],
[47,43,33,55,32,27,20,0,34,28],
[52,48,38,43,44,30,38,47,0,44],
[48,47,36,44,37,44,47,53,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,35,43,41,47,38,39,36,47],
[47,0,44,43,41,44,39,43,38,51],
[46,37,0,45,39,46,42,41,39,47],
[38,38,36,0,38,42,37,35,42,40],
[40,40,42,43,0,46,45,47,38,41],
[34,37,35,39,35,0,31,34,35,41],
[43,42,39,44,36,50,0,38,44,42],
[42,38,40,46,34,47,43,0,37,40],
[45,43,42,39,43,46,37,44,0,45],
[34,30,34,41,40,40,39,41,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,51,44,43,34,35,46,73,56],
[18,0,26,17,18,34,17,20,29,39],
[30,55,0,46,47,45,36,37,47,56],
[37,64,35,0,55,45,25,46,54,57],
[38,63,34,26,0,36,35,29,47,56],
[47,47,36,36,45,0,27,38,39,47],
[46,64,45,56,46,54,0,38,48,57],
[35,61,44,35,52,43,43,0,55,73],
[8,52,34,27,34,42,33,26,0,45],
[25,42,25,24,25,34,24,8,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,43,46,39,46,41,37,32,40],
[35,0,37,40,37,39,37,38,42,35],
[38,44,0,44,38,48,37,45,36,34],
[35,41,37,0,38,46,32,40,43,35],
[42,44,43,43,0,45,39,45,43,40],
[35,42,33,35,36,0,32,33,32,38],
[40,44,44,49,42,49,0,48,38,42],
[44,43,36,41,36,48,33,0,36,40],
[49,39,45,38,38,49,43,45,0,38],
[41,46,47,46,41,43,39,41,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,55,53,46,40,49,47,47,45],
[40,0,44,46,46,40,51,39,45,41],
[26,37,0,41,45,43,43,41,45,44],
[28,35,40,0,37,33,31,34,38,43],
[35,35,36,44,0,29,41,25,48,34],
[41,41,38,48,52,0,48,42,45,44],
[32,30,38,50,40,33,0,34,40,50],
[34,42,40,47,56,39,47,0,42,42],
[34,36,36,43,33,36,41,39,0,33],
[36,40,37,38,47,37,31,39,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,42,40,47,39,41,38,35,43],
[46,0,45,38,46,42,38,39,42,46],
[39,36,0,39,49,37,40,40,32,48],
[41,43,42,0,51,39,45,45,46,50],
[34,35,32,30,0,37,35,29,33,38],
[42,39,44,42,44,0,38,37,45,42],
[40,43,41,36,46,43,0,40,37,45],
[43,42,41,36,52,44,41,0,41,48],
[46,39,49,35,48,36,44,40,0,47],
[38,35,33,31,43,39,36,33,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,42,42,42,39,61,42,42,42],
[19,0,22,61,61,39,41,19,42,22],
[39,59,0,59,81,59,39,59,59,19],
[39,20,22,0,41,19,19,0,20,0],
[39,20,0,40,0,39,19,0,40,0],
[42,42,22,62,42,0,41,22,62,22],
[20,40,42,62,62,40,0,40,62,42],
[39,62,22,81,81,59,41,0,62,22],
[39,39,22,61,41,19,19,19,0,19],
[39,59,62,81,81,59,39,59,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,42,39,45,49,29,33,36,35],
[44,0,44,39,41,45,43,34,34,38],
[39,37,0,41,35,41,29,36,32,32],
[42,42,40,0,42,48,37,36,33,39],
[36,40,46,39,0,51,38,36,32,39],
[32,36,40,33,30,0,27,29,30,31],
[52,38,52,44,43,54,0,38,43,46],
[48,47,45,45,45,52,43,0,38,45],
[45,47,49,48,49,51,38,43,0,41],
[46,43,49,42,42,50,35,36,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,53,48,51,44,47,41,53,37],
[35,0,47,41,43,38,39,33,44,27],
[28,34,0,41,35,37,36,24,45,28],
[33,40,40,0,39,31,37,29,47,40],
[30,38,46,42,0,37,40,29,46,39],
[37,43,44,50,44,0,38,35,49,37],
[34,42,45,44,41,43,0,31,45,35],
[40,48,57,52,52,46,50,0,56,42],
[28,37,36,34,35,32,36,25,0,20],
[44,54,53,41,42,44,46,39,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,35,34,32,34,30,36,31,38],
[51,0,37,36,48,35,37,41,37,47],
[46,44,0,41,50,48,45,43,40,47],
[47,45,40,0,47,42,36,38,38,45],
[49,33,31,34,0,36,36,35,36,47],
[47,46,33,39,45,0,41,44,40,46],
[51,44,36,45,45,40,0,36,37,45],
[45,40,38,43,46,37,45,0,42,48],
[50,44,41,43,45,41,44,39,0,48],
[43,34,34,36,34,35,36,33,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,38,35,49,46,43,45,41,52],
[40,0,44,41,44,49,50,45,41,47],
[43,37,0,29,44,49,47,43,33,36],
[46,40,52,0,49,46,45,46,40,49],
[32,37,37,32,0,46,40,42,24,33],
[35,32,32,35,35,0,37,34,31,41],
[38,31,34,36,41,44,0,41,33,37],
[36,36,38,35,39,47,40,0,36,43],
[40,40,48,41,57,50,48,45,0,46],
[29,34,45,32,48,40,44,38,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,34,34,35,41,37,44,33,41],
[44,0,34,39,37,40,38,47,35,41],
[47,47,0,40,42,42,39,52,41,41],
[47,42,41,0,42,42,42,48,32,42],
[46,44,39,39,0,44,45,54,39,42],
[40,41,39,39,37,0,38,48,32,37],
[44,43,42,39,36,43,0,55,36,47],
[37,34,29,33,27,33,26,0,25,33],
[48,46,40,49,42,49,45,56,0,50],
[40,40,40,39,39,44,34,48,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,38,40,39,34,48,40,31,36],
[33,0,40,32,38,37,38,38,24,39],
[43,41,0,29,50,39,42,40,30,38],
[41,49,52,0,52,43,38,49,42,49],
[42,43,31,29,0,33,37,33,36,32],
[47,44,42,38,48,0,50,41,38,39],
[33,43,39,43,44,31,0,33,35,37],
[41,43,41,32,48,40,48,0,34,38],
[50,57,51,39,45,43,46,47,0,36],
[45,42,43,32,49,42,44,43,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,36,44,43,36,35,42,44,39],
[38,0,33,38,40,31,32,41,31,37],
[45,48,0,45,43,40,48,46,42,42],
[37,43,36,0,42,41,38,46,40,43],
[38,41,38,39,0,29,39,38,34,38],
[45,50,41,40,52,0,42,50,40,42],
[46,49,33,43,42,39,0,48,35,40],
[39,40,35,35,43,31,33,0,36,37],
[37,50,39,41,47,41,46,45,0,39],
[42,44,39,38,43,39,41,44,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,31,38,28,33,30,33,33,38],
[43,0,40,45,43,46,32,42,41,46],
[50,41,0,39,40,45,41,40,39,45],
[43,36,42,0,40,44,44,42,39,48],
[53,38,41,41,0,43,45,46,40,48],
[48,35,36,37,38,0,42,37,42,46],
[51,49,40,37,36,39,0,39,45,46],
[48,39,41,39,35,44,42,0,46,40],
[48,40,42,42,41,39,36,35,0,47],
[43,35,36,33,33,35,35,41,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,43,42,45,41,43,44,46,36],
[36,0,42,40,43,38,37,42,31,38],
[38,39,0,37,37,39,36,37,43,34],
[39,41,44,0,40,41,36,37,37,33],
[36,38,44,41,0,35,43,41,34,34],
[40,43,42,40,46,0,38,40,49,41],
[38,44,45,45,38,43,0,37,43,34],
[37,39,44,44,40,41,44,0,43,42],
[35,50,38,44,47,32,38,38,0,39],
[45,43,47,48,47,40,47,39,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,44,32,44,38,36,37,34,37],
[41,0,53,37,39,34,30,38,31,32],
[37,28,0,38,31,32,28,26,29,28],
[49,44,43,0,42,33,37,33,41,42],
[37,42,50,39,0,39,34,39,31,41],
[43,47,49,48,42,0,38,35,46,35],
[45,51,53,44,47,43,0,34,40,42],
[44,43,55,48,42,46,47,0,41,37],
[47,50,52,40,50,35,41,40,0,39],
[44,49,53,39,40,46,39,44,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,48,39,49,42,42,40,42,50],
[36,0,35,40,41,39,34,32,44,36],
[33,46,0,45,42,47,39,44,43,44],
[42,41,36,0,43,42,42,32,33,51],
[32,40,39,38,0,39,37,34,40,38],
[39,42,34,39,42,0,43,37,46,40],
[39,47,42,39,44,38,0,36,40,45],
[41,49,37,49,47,44,45,0,42,44],
[39,37,38,48,41,35,41,39,0,44],
[31,45,37,30,43,41,36,37,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,42,32,36,31,35,29,44,42],
[48,0,46,31,45,38,44,39,39,56],
[39,35,0,34,38,32,35,29,40,54],
[49,50,47,0,53,41,43,40,38,46],
[45,36,43,28,0,36,41,37,41,51],
[50,43,49,40,45,0,41,45,48,53],
[46,37,46,38,40,40,0,39,37,47],
[52,42,52,41,44,36,42,0,42,56],
[37,42,41,43,40,33,44,39,0,45],
[39,25,27,35,30,28,34,25,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,45,39,29,41,39,44,34,39],
[48,0,33,36,38,21,31,46,47,37],
[36,48,0,41,29,32,39,48,34,36],
[42,45,40,0,30,29,32,43,36,42],
[52,43,52,51,0,39,55,51,48,52],
[40,60,49,52,42,0,49,61,42,54],
[42,50,42,49,26,32,0,58,44,41],
[37,35,33,38,30,20,23,0,32,31],
[47,34,47,45,33,39,37,49,0,44],
[42,44,45,39,29,27,40,50,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,49,35,44,41,42,47,41,44],
[38,0,43,36,37,40,36,41,39,38],
[32,38,0,38,37,38,35,41,37,39],
[46,45,43,0,42,40,40,45,46,45],
[37,44,44,39,0,37,40,46,39,41],
[40,41,43,41,44,0,40,47,40,41],
[39,45,46,41,41,41,0,48,44,41],
[34,40,40,36,35,34,33,0,30,40],
[40,42,44,35,42,41,37,51,0,40],
[37,43,42,36,40,40,40,41,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,43,39,38,50,43,35,43,35],
[45,0,47,45,39,52,48,45,40,43],
[38,34,0,43,42,42,46,39,41,40],
[42,36,38,0,45,45,41,41,44,42],
[43,42,39,36,0,45,46,44,44,41],
[31,29,39,36,36,0,40,37,36,34],
[38,33,35,40,35,41,0,34,39,42],
[46,36,42,40,37,44,47,0,39,42],
[38,41,40,37,37,45,42,42,0,40],
[46,38,41,39,40,47,39,39,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,34,43,43,48,47,45,43,59],
[38,0,35,41,43,39,47,38,34,46],
[47,46,0,41,41,46,41,37,47,56],
[38,40,40,0,45,40,38,45,38,49],
[38,38,40,36,0,38,27,37,36,56],
[33,42,35,41,43,0,41,34,39,58],
[34,34,40,43,54,40,0,35,41,56],
[36,43,44,36,44,47,46,0,31,52],
[38,47,34,43,45,42,40,50,0,49],
[22,35,25,32,25,23,25,29,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,34,35,41,40,41,35,40,35],
[36,0,35,28,40,39,41,33,36,42],
[47,46,0,37,46,37,44,39,47,38],
[46,53,44,0,44,45,48,40,45,39],
[40,41,35,37,0,40,44,35,38,41],
[41,42,44,36,41,0,41,33,36,35],
[40,40,37,33,37,40,0,39,38,36],
[46,48,42,41,46,48,42,0,43,34],
[41,45,34,36,43,45,43,38,0,37],
[46,39,43,42,40,46,45,47,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,34,36,31,23,38,49,32,36],
[50,0,42,42,31,34,50,51,36,45],
[47,39,0,39,34,46,45,57,44,46],
[45,39,42,0,38,35,43,52,36,43],
[50,50,47,43,0,40,51,55,44,51],
[58,47,35,46,41,0,40,52,44,45],
[43,31,36,38,30,41,0,41,42,37],
[32,30,24,29,26,29,40,0,32,34],
[49,45,37,45,37,37,39,49,0,52],
[45,36,35,38,30,36,44,47,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,43,43,44,39,45,40,48,49],
[31,0,40,38,37,40,45,40,49,39],
[38,41,0,48,43,45,46,43,46,49],
[38,43,33,0,36,37,41,36,44,47],
[37,44,38,45,0,38,42,43,48,52],
[42,41,36,44,43,0,39,39,45,47],
[36,36,35,40,39,42,0,46,44,49],
[41,41,38,45,38,42,35,0,44,48],
[33,32,35,37,33,36,37,37,0,44],
[32,42,32,34,29,34,32,33,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,36,40,44,42,41,36,37,45],
[35,0,36,42,44,40,42,38,38,51],
[45,45,0,37,38,44,37,38,36,47],
[41,39,44,0,45,47,40,39,43,45],
[37,37,43,36,0,40,43,40,38,49],
[39,41,37,34,41,0,42,31,37,44],
[40,39,44,41,38,39,0,31,32,44],
[45,43,43,42,41,50,50,0,35,44],
[44,43,45,38,43,44,49,46,0,50],
[36,30,34,36,32,37,37,37,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,48,41,48,45,39,40,41,45],
[42,0,46,49,38,40,34,37,33,47],
[33,35,0,42,36,36,27,41,39,43],
[40,32,39,0,41,32,34,28,35,39],
[33,43,45,40,0,39,37,32,34,40],
[36,41,45,49,42,0,37,41,39,48],
[42,47,54,47,44,44,0,34,39,43],
[41,44,40,53,49,40,47,0,38,43],
[40,48,42,46,47,42,42,43,0,46],
[36,34,38,42,41,33,38,38,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,32,48,18,18,34,50,18,64],
[63,0,30,63,48,31,65,64,14,46],
[49,51,0,51,51,35,67,67,51,63],
[33,18,30,0,18,35,34,34,18,30],
[63,33,30,63,0,31,65,46,30,63],
[63,50,46,46,50,0,50,50,34,46],
[47,16,14,47,16,31,0,32,16,46],
[31,17,14,47,35,31,49,0,31,47],
[63,67,30,63,51,47,65,50,0,63],
[17,35,18,51,18,35,35,34,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,40,50,45,46,47,47,49,41],
[35,0,38,41,41,45,45,41,44,38],
[41,43,0,41,48,47,45,40,50,40],
[31,40,40,0,41,44,37,36,42,29],
[36,40,33,40,0,35,43,41,36,41],
[35,36,34,37,46,0,41,36,44,30],
[34,36,36,44,38,40,0,38,42,34],
[34,40,41,45,40,45,43,0,43,48],
[32,37,31,39,45,37,39,38,0,34],
[40,43,41,52,40,51,47,33,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,46,62,33,41,42,58,51,55],
[29,0,46,36,41,37,36,44,39,47],
[35,35,0,49,38,37,39,47,39,52],
[19,45,32,0,35,36,43,55,39,49],
[48,40,43,46,0,37,43,51,42,49],
[40,44,44,45,44,0,45,40,42,49],
[39,45,42,38,38,36,0,46,48,43],
[23,37,34,26,30,41,35,0,30,52],
[30,42,42,42,39,39,33,51,0,44],
[26,34,29,32,32,32,38,29,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,47,39,60,53,42,45,47,41],
[36,0,36,22,34,39,37,44,39,28],
[34,45,0,36,41,30,42,37,47,45],
[42,59,45,0,56,60,57,55,40,55],
[21,47,40,25,0,40,34,40,36,40],
[28,42,51,21,41,0,33,45,41,34],
[39,44,39,24,47,48,0,48,41,38],
[36,37,44,26,41,36,33,0,36,34],
[34,42,34,41,45,40,40,45,0,42],
[40,53,36,26,41,47,43,47,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,45,40,43,43,45,46,43,43],
[38,0,42,47,42,43,43,43,45,42],
[36,39,0,42,39,43,44,44,46,40],
[41,34,39,0,40,42,41,41,39,40],
[38,39,42,41,0,48,42,44,40,42],
[38,38,38,39,33,0,47,41,42,38],
[36,38,37,40,39,34,0,38,37,40],
[35,38,37,40,37,40,43,0,36,37],
[38,36,35,42,41,39,44,45,0,43],
[38,39,41,41,39,43,41,44,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,39,39,33,27,41,36,28,30],
[46,0,39,35,25,34,48,48,39,29],
[42,42,0,35,29,26,35,49,42,37],
[42,46,46,0,40,37,47,52,50,38],
[48,56,52,41,0,44,49,50,53,37],
[54,47,55,44,37,0,52,45,46,36],
[40,33,46,34,32,29,0,41,44,31],
[45,33,32,29,31,36,40,0,34,35],
[53,42,39,31,28,35,37,47,0,44],
[51,52,44,43,44,45,50,46,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,47,48,46,37,43,44,38,44],
[43,0,40,55,46,37,38,37,40,38],
[34,41,0,40,45,34,36,35,35,32],
[33,26,41,0,39,27,37,36,35,31],
[35,35,36,42,0,34,35,32,34,36],
[44,44,47,54,47,0,43,54,42,40],
[38,43,45,44,46,38,0,44,40,37],
[37,44,46,45,49,27,37,0,43,36],
[43,41,46,46,47,39,41,38,0,38],
[37,43,49,50,45,41,44,45,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,43,39,45,36,35,44,45,40],
[33,0,44,37,42,32,39,37,44,39],
[38,37,0,37,41,37,39,43,43,40],
[42,44,44,0,45,36,44,33,42,41],
[36,39,40,36,0,40,44,30,42,32],
[45,49,44,45,41,0,49,37,47,41],
[46,42,42,37,37,32,0,44,47,40],
[37,44,38,48,51,44,37,0,47,44],
[36,37,38,39,39,34,34,34,0,32],
[41,42,41,40,49,40,41,37,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,39,41,33,38,41,35,36,38],
[40,0,43,36,35,46,42,38,40,40],
[42,38,0,44,31,43,45,38,43,32],
[40,45,37,0,42,47,40,35,44,42],
[48,46,50,39,0,49,42,44,44,45],
[43,35,38,34,32,0,42,43,38,41],
[40,39,36,41,39,39,0,34,36,42],
[46,43,43,46,37,38,47,0,46,45],
[45,41,38,37,37,43,45,35,0,41],
[43,41,49,39,36,40,39,36,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,34,31,30,43,42,36,44,45],
[29,0,21,29,18,30,26,30,33,27],
[47,60,0,45,37,53,57,49,57,45],
[50,52,36,0,40,43,38,29,36,43],
[51,63,44,41,0,46,45,38,39,37],
[38,51,28,38,35,0,41,38,29,35],
[39,55,24,43,36,40,0,34,42,38],
[45,51,32,52,43,43,47,0,38,52],
[37,48,24,45,42,52,39,43,0,45],
[36,54,36,38,44,46,43,29,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,48,43,38,40,43,35,38,42],
[40,0,40,48,35,38,35,37,36,47],
[33,41,0,45,36,39,43,41,39,46],
[38,33,36,0,37,36,36,34,35,42],
[43,46,45,44,0,43,41,33,46,47],
[41,43,42,45,38,0,37,37,36,40],
[38,46,38,45,40,44,0,35,37,48],
[46,44,40,47,48,44,46,0,44,46],
[43,45,42,46,35,45,44,37,0,47],
[39,34,35,39,34,41,33,35,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,31,28,36,23,33,39,41,38],
[38,0,40,46,39,30,37,48,46,43],
[50,41,0,33,41,26,45,40,46,41],
[53,35,48,0,44,45,45,41,48,42],
[45,42,40,37,0,38,61,52,37,51],
[58,51,55,36,43,0,56,47,51,48],
[48,44,36,36,20,25,0,32,43,41],
[42,33,41,40,29,34,49,0,38,47],
[40,35,35,33,44,30,38,43,0,41],
[43,38,40,39,30,33,40,34,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,41,34,41,32,48,41,49,65],
[38,0,47,41,24,39,31,14,40,56],
[40,34,0,26,33,24,16,16,41,56],
[47,40,55,0,41,47,30,15,47,47],
[40,57,48,40,0,40,24,16,40,64],
[49,42,57,34,41,0,32,18,33,56],
[33,50,65,51,57,49,0,34,57,57],
[40,67,65,66,65,63,47,0,72,64],
[32,41,40,34,41,48,24,9,0,40],
[16,25,25,34,17,25,24,17,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,44,33,41,39,36,34,33,37],
[37,0,35,29,44,39,30,34,39,36],
[37,46,0,36,53,46,33,44,43,41],
[48,52,45,0,41,48,50,40,40,43],
[40,37,28,40,0,35,35,36,36,33],
[42,42,35,33,46,0,32,39,32,34],
[45,51,48,31,46,49,0,39,40,41],
[47,47,37,41,45,42,42,0,48,38],
[48,42,38,41,45,49,41,33,0,42],
[44,45,40,38,48,47,40,43,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,46,55,50,53,38,48,53,46],
[38,0,45,47,43,40,43,53,40,39],
[35,36,0,49,39,47,41,47,50,34],
[26,34,32,0,43,30,37,43,35,31],
[31,38,42,38,0,36,36,43,39,30],
[28,41,34,51,45,0,37,56,38,41],
[43,38,40,44,45,44,0,52,35,39],
[33,28,34,38,38,25,29,0,34,25],
[28,41,31,46,42,43,46,47,0,35],
[35,42,47,50,51,40,42,56,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,42,42,29,36,40,56,39,38],
[48,0,44,50,43,48,41,56,30,39],
[39,37,0,35,33,31,38,55,40,44],
[39,31,46,0,29,39,44,59,41,46],
[52,38,48,52,0,45,50,57,51,56],
[45,33,50,42,36,0,54,49,38,45],
[41,40,43,37,31,27,0,38,41,44],
[25,25,26,22,24,32,43,0,33,29],
[42,51,41,40,30,43,40,48,0,49],
[43,42,37,35,25,36,37,52,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,37,32,36,37,45,40,40,35],
[42,0,38,42,40,41,43,33,45,39],
[44,43,0,42,35,35,46,40,41,44],
[49,39,39,0,32,44,45,45,43,37],
[45,41,46,49,0,44,46,36,46,46],
[44,40,46,37,37,0,49,48,51,40],
[36,38,35,36,35,32,0,33,40,32],
[41,48,41,36,45,33,48,0,50,41],
[41,36,40,38,35,30,41,31,0,34],
[46,42,37,44,35,41,49,40,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,43,42,38,47,32,42,52,41],
[35,0,40,36,35,41,28,38,45,33],
[38,41,0,36,30,35,33,48,39,35],
[39,45,45,0,48,39,43,45,49,42],
[43,46,51,33,0,47,39,43,46,33],
[34,40,46,42,34,0,40,45,39,29],
[49,53,48,38,42,41,0,52,43,39],
[39,43,33,36,38,36,29,0,32,23],
[29,36,42,32,35,42,38,49,0,36],
[40,48,46,39,48,52,42,58,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,39,42,44,48,37,34,48],
[37,0,37,39,48,44,43,37,32,47],
[39,44,0,41,56,36,45,41,34,45],
[42,42,40,0,49,42,46,41,36,49],
[39,33,25,32,0,30,32,38,25,37],
[37,37,45,39,51,0,46,37,41,44],
[33,38,36,35,49,35,0,35,36,43],
[44,44,40,40,43,44,46,0,39,47],
[47,49,47,45,56,40,45,42,0,47],
[33,34,36,32,44,37,38,34,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,46,40,45,48,47,56,35,54],
[39,0,40,44,42,34,39,46,35,45],
[35,41,0,43,37,42,34,50,42,52],
[41,37,38,0,44,44,42,43,35,50],
[36,39,44,37,0,40,40,50,33,45],
[33,47,39,37,41,0,51,50,38,48],
[34,42,47,39,41,30,0,53,32,48],
[25,35,31,38,31,31,28,0,21,35],
[46,46,39,46,48,43,49,60,0,59],
[27,36,29,31,36,33,33,46,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,50,45,60,40,58,43,49,56],
[38,0,40,28,44,32,39,51,52,39],
[31,41,0,37,44,38,29,33,33,48],
[36,53,44,0,48,44,39,49,46,45],
[21,37,37,33,0,38,43,39,36,38],
[41,49,43,37,43,0,34,55,47,51],
[23,42,52,42,38,47,0,43,40,48],
[38,30,48,32,42,26,38,0,41,48],
[32,29,48,35,45,34,41,40,0,41],
[25,42,33,36,43,30,33,33,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,45,47,35,52,49,41,44,47],
[27,0,19,31,29,35,32,29,38,29],
[36,62,0,47,43,47,46,36,41,37],
[34,50,34,0,41,41,46,37,41,39],
[46,52,38,40,0,51,54,37,46,43],
[29,46,34,40,30,0,37,30,35,30],
[32,49,35,35,27,44,0,36,30,35],
[40,52,45,44,44,51,45,0,46,46],
[37,43,40,40,35,46,51,35,0,38],
[34,52,44,42,38,51,46,35,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,49,38,53,47,43,38,45,47],
[31,0,36,30,42,45,29,34,40,33],
[32,45,0,37,52,45,39,37,38,48],
[43,51,44,0,51,48,39,47,44,47],
[28,39,29,30,0,32,29,29,30,35],
[34,36,36,33,49,0,33,41,34,37],
[38,52,42,42,52,48,0,45,43,45],
[43,47,44,34,52,40,36,0,45,52],
[36,41,43,37,51,47,38,36,0,45],
[34,48,33,34,46,44,36,29,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,44,47,48,39,48,36,45,42],
[36,0,40,40,42,43,39,39,37,37],
[37,41,0,36,39,34,33,36,40,34],
[34,41,45,0,45,35,39,37,37,39],
[33,39,42,36,0,37,38,32,32,37],
[42,38,47,46,44,0,45,38,42,43],
[33,42,48,42,43,36,0,38,40,42],
[45,42,45,44,49,43,43,0,37,41],
[36,44,41,44,49,39,41,44,0,37],
[39,44,47,42,44,38,39,40,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,40,43,39,34,41,42,43,38],
[44,0,38,34,45,37,37,43,42,37],
[41,43,0,34,42,33,42,35,35,39],
[38,47,47,0,40,42,45,48,39,37],
[42,36,39,41,0,33,42,44,41,34],
[47,44,48,39,48,0,51,49,45,50],
[40,44,39,36,39,30,0,44,32,48],
[39,38,46,33,37,32,37,0,39,36],
[38,39,46,42,40,36,49,42,0,45],
[43,44,42,44,47,31,33,45,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,61,41,41,61,61,41,21,61],
[40,0,61,81,41,40,61,40,41,81],
[20,20,0,40,20,40,61,20,41,60],
[40,0,41,0,20,40,41,0,41,40],
[40,40,61,61,0,40,61,20,41,60],
[20,41,41,41,41,0,61,20,21,41],
[20,20,20,40,20,20,0,20,20,40],
[40,41,61,81,61,61,61,0,41,81],
[60,40,40,40,40,60,61,40,0,40],
[20,0,21,41,21,40,41,0,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,24,27,13,27,24,38,27,50],
[46,0,47,26,36,36,36,39,26,39],
[57,34,0,35,58,45,37,48,35,60],
[54,55,46,0,35,45,46,58,39,50],
[68,45,23,46,0,46,38,48,36,60],
[54,45,36,36,35,0,24,49,61,50],
[57,45,44,35,43,57,0,48,47,60],
[43,42,33,23,33,32,33,0,37,23],
[54,55,46,42,45,20,34,44,0,46],
[31,42,21,31,21,31,21,58,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,43,41,33,38,34,42,40,38],
[42,0,35,43,34,37,41,37,42,36],
[38,46,0,46,42,35,43,44,45,39],
[40,38,35,0,35,36,38,37,49,41],
[48,47,39,46,0,35,44,45,50,45],
[43,44,46,45,46,0,38,42,45,45],
[47,40,38,43,37,43,0,38,43,39],
[39,44,37,44,36,39,43,0,40,44],
[41,39,36,32,31,36,38,41,0,37],
[43,45,42,40,36,36,42,37,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,37,38,37,37,41,37,38,47],
[40,0,39,38,38,33,35,35,37,39],
[44,42,0,38,40,34,37,39,36,45],
[43,43,43,0,40,32,40,35,40,47],
[44,43,41,41,0,40,42,40,40,41],
[44,48,47,49,41,0,43,43,40,44],
[40,46,44,41,39,38,0,39,40,41],
[44,46,42,46,41,38,42,0,44,50],
[43,44,45,41,41,41,41,37,0,56],
[34,42,36,34,40,37,40,31,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,39,37,43,37,42,32,38,42],
[41,0,46,38,40,46,44,36,42,41],
[42,35,0,35,38,40,38,35,34,37],
[44,43,46,0,42,49,38,37,43,48],
[38,41,43,39,0,49,38,39,37,45],
[44,35,41,32,32,0,33,32,38,38],
[39,37,43,43,43,48,0,38,42,51],
[49,45,46,44,42,49,43,0,35,45],
[43,39,47,38,44,43,39,46,0,45],
[39,40,44,33,36,43,30,36,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,47,48,49,46,39,42,33,41],
[31,0,49,41,45,48,42,39,41,39],
[34,32,0,27,40,37,37,30,32,33],
[33,40,54,0,47,46,39,38,33,36],
[32,36,41,34,0,45,33,37,36,32],
[35,33,44,35,36,0,31,35,33,29],
[42,39,44,42,48,50,0,40,39,40],
[39,42,51,43,44,46,41,0,39,45],
[48,40,49,48,45,48,42,42,0,37],
[40,42,48,45,49,52,41,36,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,30,34,35,34,41,36,34,37],
[44,0,42,47,39,43,47,44,32,43],
[51,39,0,42,43,48,47,50,50,47],
[47,34,39,0,38,36,53,46,40,40],
[46,42,38,43,0,50,45,49,51,47],
[47,38,33,45,31,0,34,54,42,29],
[40,34,34,28,36,47,0,45,33,33],
[45,37,31,35,32,27,36,0,28,25],
[47,49,31,41,30,39,48,53,0,41],
[44,38,34,41,34,52,48,56,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,49,62,56,42,53,36,47,39],
[37,0,55,57,45,52,52,40,47,42],
[32,26,0,44,40,45,43,37,42,36],
[19,24,37,0,42,29,43,32,32,31],
[25,36,41,39,0,38,31,30,34,22],
[39,29,36,52,43,0,49,29,34,34],
[28,29,38,38,50,32,0,38,26,27],
[45,41,44,49,51,52,43,0,40,37],
[34,34,39,49,47,47,55,41,0,41],
[42,39,45,50,59,47,54,44,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,39,33,45,37,37,32,43,46],
[52,0,38,48,53,38,43,37,55,51],
[42,43,0,42,43,36,31,34,45,44],
[48,33,39,0,42,42,34,39,49,42],
[36,28,38,39,0,44,31,32,44,44],
[44,43,45,39,37,0,26,30,46,41],
[44,38,50,47,50,55,0,46,50,48],
[49,44,47,42,49,51,35,0,48,47],
[38,26,36,32,37,35,31,33,0,35],
[35,30,37,39,37,40,33,34,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,27,36,29,28,44,29,31,33],
[49,0,40,53,40,38,45,40,56,42],
[54,41,0,57,35,39,48,44,53,44],
[45,28,24,0,32,32,43,35,33,33],
[52,41,46,49,0,36,50,46,50,43],
[53,43,42,49,45,0,47,41,46,38],
[37,36,33,38,31,34,0,46,34,31],
[52,41,37,46,35,40,35,0,50,41],
[50,25,28,48,31,35,47,31,0,32],
[48,39,37,48,38,43,50,40,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,42,34,40,32,41,29,37,38],
[38,0,40,40,37,32,46,41,38,37],
[39,41,0,38,40,25,37,33,36,43],
[47,41,43,0,38,36,47,33,37,42],
[41,44,41,43,0,39,39,42,39,44],
[49,49,56,45,42,0,47,45,40,52],
[40,35,44,34,42,34,0,34,35,38],
[52,40,48,48,39,36,47,0,46,44],
[44,43,45,44,42,41,46,35,0,41],
[43,44,38,39,37,29,43,37,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,36,38,38,35,39,34,34,41],
[40,0,39,38,42,40,42,38,40,40],
[45,42,0,45,35,39,39,40,38,43],
[43,43,36,0,32,39,40,39,40,46],
[43,39,46,49,0,39,42,42,45,45],
[46,41,42,42,42,0,39,36,35,47],
[42,39,42,41,39,42,0,35,41,42],
[47,43,41,42,39,45,46,0,40,47],
[47,41,43,41,36,46,40,41,0,47],
[40,41,38,35,36,34,39,34,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,32,38,46,41,39,39,39,41],
[44,0,45,41,47,50,46,41,50,40],
[49,36,0,48,47,39,48,35,45,36],
[43,40,33,0,46,41,44,30,44,33],
[35,34,34,35,0,40,41,32,39,33],
[40,31,42,40,41,0,47,37,42,35],
[42,35,33,37,40,34,0,34,40,33],
[42,40,46,51,49,44,47,0,50,46],
[42,31,36,37,42,39,41,31,0,28],
[40,41,45,48,48,46,48,35,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,36,35,44,34,45,23,57,45],
[36,0,32,34,43,31,36,25,49,41],
[45,49,0,36,41,45,48,40,50,57],
[46,47,45,0,40,46,48,44,62,57],
[37,38,40,41,0,38,44,27,40,45],
[47,50,36,35,43,0,48,43,53,44],
[36,45,33,33,37,33,0,27,39,47],
[58,56,41,37,54,38,54,0,63,53],
[24,32,31,19,41,28,42,18,0,30],
[36,40,24,24,36,37,34,28,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,46,40,43,39,39,37,37,41],
[40,0,52,43,46,39,36,42,41,42],
[35,29,0,30,42,31,24,33,34,31],
[41,38,51,0,42,41,41,41,36,32],
[38,35,39,39,0,36,29,40,31,34],
[42,42,50,40,45,0,45,42,40,36],
[42,45,57,40,52,36,0,45,41,34],
[44,39,48,40,41,39,36,0,42,40],
[44,40,47,45,50,41,40,39,0,42],
[40,39,50,49,47,45,47,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,35,42,44,44,41,41,43,47],
[42,0,39,34,37,30,38,38,43,41],
[46,42,0,30,45,43,43,48,47,45],
[39,47,51,0,43,44,47,47,49,48],
[37,44,36,38,0,41,42,42,42,46],
[37,51,38,37,40,0,43,46,49,42],
[40,43,38,34,39,38,0,36,44,41],
[40,43,33,34,39,35,45,0,41,39],
[38,38,34,32,39,32,37,40,0,36],
[34,40,36,33,35,39,40,42,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,32,37,42,42,40,36,39,35],
[42,0,33,42,43,37,43,41,39,41],
[49,48,0,41,44,42,42,44,39,42],
[44,39,40,0,48,41,37,40,44,42],
[39,38,37,33,0,37,38,36,39,41],
[39,44,39,40,44,0,37,39,39,39],
[41,38,39,44,43,44,0,46,48,40],
[45,40,37,41,45,42,35,0,42,45],
[42,42,42,37,42,42,33,39,0,40],
[46,40,39,39,40,42,41,36,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,47,30,44,37,61,60,50,33],
[31,0,39,36,44,30,44,46,49,42],
[34,42,0,35,42,36,48,51,41,40],
[51,45,46,0,46,43,54,62,46,40],
[37,37,39,35,0,34,41,53,41,28],
[44,51,45,38,47,0,52,54,54,39],
[20,37,33,27,40,29,0,44,33,33],
[21,35,30,19,28,27,37,0,31,25],
[31,32,40,35,40,27,48,50,0,28],
[48,39,41,41,53,42,48,56,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,51,48,34,51,53,41,54,41],
[35,0,39,25,22,47,57,30,41,30],
[30,42,0,39,41,44,41,43,36,42],
[33,56,42,0,37,56,57,42,43,45],
[47,59,40,44,0,49,57,39,50,41],
[30,34,37,25,32,0,39,31,36,27],
[28,24,40,24,24,42,0,29,38,17],
[40,51,38,39,42,50,52,0,44,37],
[27,40,45,38,31,45,43,37,0,30],
[40,51,39,36,40,54,64,44,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,36,41,26,35,48,32,36,29],
[62,0,48,48,34,41,56,40,35,49],
[45,33,0,40,33,13,47,40,34,42],
[40,33,41,0,47,41,62,46,41,36],
[55,47,48,34,0,47,48,39,48,49],
[46,40,68,40,34,0,50,41,42,43],
[33,25,34,19,33,31,0,19,19,36],
[49,41,41,35,42,40,62,0,35,49],
[45,46,47,40,33,39,62,46,0,49],
[52,32,39,45,32,38,45,32,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,49,45,47,56,53,61,53,36],
[38,0,50,36,41,52,60,50,56,42],
[32,31,0,22,38,29,47,34,41,39],
[36,45,59,0,41,48,58,58,52,44],
[34,40,43,40,0,43,54,53,54,45],
[25,29,52,33,38,0,54,44,41,43],
[28,21,34,23,27,27,0,27,36,33],
[20,31,47,23,28,37,54,0,46,34],
[28,25,40,29,27,40,45,35,0,40],
[45,39,42,37,36,38,48,47,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,47,42,49,41,46,39,40,37],
[38,0,40,36,44,35,37,34,40,34],
[34,41,0,36,42,31,36,34,42,36],
[39,45,45,0,51,37,45,46,38,44],
[32,37,39,30,0,37,35,38,34,34],
[40,46,50,44,44,0,45,44,39,44],
[35,44,45,36,46,36,0,38,41,43],
[42,47,47,35,43,37,43,0,42,38],
[41,41,39,43,47,42,40,39,0,35],
[44,47,45,37,47,37,38,43,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,50,45,49,38,40,55,42,47],
[35,0,51,42,41,28,40,42,39,51],
[31,30,0,40,39,35,39,45,50,50],
[36,39,41,0,49,48,48,51,54,56],
[32,40,42,32,0,37,49,43,37,52],
[43,53,46,33,44,0,42,52,44,44],
[41,41,42,33,32,39,0,43,43,45],
[26,39,36,30,38,29,38,0,42,53],
[39,42,31,27,44,37,38,39,0,55],
[34,30,31,25,29,37,36,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,35,45,49,47,28,36,35,48],
[44,0,55,47,49,41,34,37,43,39],
[46,26,0,35,44,34,28,32,22,39],
[36,34,46,0,49,48,27,46,30,50],
[32,32,37,32,0,38,31,34,35,32],
[34,40,47,33,43,0,33,35,39,45],
[53,47,53,54,50,48,0,35,47,48],
[45,44,49,35,47,46,46,0,44,53],
[46,38,59,51,46,42,34,37,0,55],
[33,42,42,31,49,36,33,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,49,32,41,37,38,40,45,32],
[36,0,59,37,48,41,38,49,44,38],
[32,22,0,17,31,39,34,44,32,30],
[49,44,64,0,47,54,44,58,52,37],
[40,33,50,34,0,45,33,49,39,40],
[44,40,42,27,36,0,26,44,46,32],
[43,43,47,37,48,55,0,55,48,43],
[41,32,37,23,32,37,26,0,29,32],
[36,37,49,29,42,35,33,52,0,45],
[49,43,51,44,41,49,38,49,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,37,33,38,38,36,49,34,35],
[29,0,32,19,34,28,28,43,33,22],
[44,49,0,46,37,41,51,50,33,38],
[48,62,35,0,51,48,50,46,40,41],
[43,47,44,30,0,43,44,47,42,31],
[43,53,40,33,38,0,43,44,41,31],
[45,53,30,31,37,38,0,43,45,42],
[32,38,31,35,34,37,38,0,29,28],
[47,48,48,41,39,40,36,52,0,35],
[46,59,43,40,50,50,39,53,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,37,53,51,44,47,47,45,34],
[46,0,47,46,46,41,48,52,40,38],
[44,34,0,48,51,44,39,42,44,38],
[28,35,33,0,42,35,24,38,41,26],
[30,35,30,39,0,39,29,47,43,41],
[37,40,37,46,42,0,39,40,42,33],
[34,33,42,57,52,42,0,40,46,33],
[34,29,39,43,34,41,41,0,42,28],
[36,41,37,40,38,39,35,39,0,39],
[47,43,43,55,40,48,48,53,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,37,46,30,37,39,33,47,42],
[53,0,50,42,46,52,37,53,52,51],
[44,31,0,34,33,37,38,47,41,38],
[35,39,47,0,44,40,39,47,49,45],
[51,35,48,37,0,37,41,43,40,41],
[44,29,44,41,44,0,40,52,42,39],
[42,44,43,42,40,41,0,40,54,49],
[48,28,34,34,38,29,41,0,43,31],
[34,29,40,32,41,39,27,38,0,35],
[39,30,43,36,40,42,32,50,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,43,46,35,44,41,37,35,41],
[43,0,38,39,39,41,35,40,37,40],
[38,43,0,57,38,45,42,39,42,39],
[35,42,24,0,33,34,33,34,33,36],
[46,42,43,48,0,44,37,46,39,41],
[37,40,36,47,37,0,37,30,33,35],
[40,46,39,48,44,44,0,41,33,43],
[44,41,42,47,35,51,40,0,47,43],
[46,44,39,48,42,48,48,34,0,49],
[40,41,42,45,40,46,38,38,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,48,37,41,41,42,40,39,40],
[32,0,46,41,48,57,42,47,41,46],
[33,35,0,38,43,35,36,37,34,37],
[44,40,43,0,47,45,43,40,38,48],
[40,33,38,34,0,35,40,41,48,32],
[40,24,46,36,46,0,40,40,37,45],
[39,39,45,38,41,41,0,43,44,43],
[41,34,44,41,40,41,38,0,33,42],
[42,40,47,43,33,44,37,48,0,34],
[41,35,44,33,49,36,38,39,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,50,46,43,46,46,46,38,47],
[36,0,46,36,35,49,47,43,34,42],
[31,35,0,31,25,38,33,34,34,44],
[35,45,50,0,36,48,46,48,41,53],
[38,46,56,45,0,48,49,52,42,50],
[35,32,43,33,33,0,43,41,42,45],
[35,34,48,35,32,38,0,37,35,44],
[35,38,47,33,29,40,44,0,36,40],
[43,47,47,40,39,39,46,45,0,42],
[34,39,37,28,31,36,37,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,35,42,43,41,41,39,33,36],
[40,0,38,41,43,44,35,44,43,43],
[46,43,0,47,48,43,43,40,49,48],
[39,40,34,0,44,39,44,38,37,37],
[38,38,33,37,0,37,37,36,39,33],
[40,37,38,42,44,0,33,32,36,41],
[40,46,38,37,44,48,0,50,42,42],
[42,37,41,43,45,49,31,0,43,43],
[48,38,32,44,42,45,39,38,0,38],
[45,38,33,44,48,40,39,38,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,49,37,47,30,81,29,41,60],
[32,0,49,27,38,40,62,41,22,60],
[32,32,0,30,38,51,54,40,44,31],
[44,54,51,0,50,32,72,52,54,61],
[34,43,43,31,0,31,43,43,43,43],
[51,41,30,49,50,0,62,49,32,51],
[0,19,27,9,38,19,0,19,21,38],
[52,40,41,29,38,32,62,0,33,41],
[40,59,37,27,38,49,60,48,0,58],
[21,21,50,20,38,30,43,40,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,37,35,44,42,33,42,39,34],
[46,0,51,44,51,41,46,43,43,40],
[44,30,0,36,43,38,40,40,37,39],
[46,37,45,0,49,46,50,44,35,42],
[37,30,38,32,0,35,36,38,32,34],
[39,40,43,35,46,0,37,39,43,36],
[48,35,41,31,45,44,0,44,34,34],
[39,38,41,37,43,42,37,0,44,38],
[42,38,44,46,49,38,47,37,0,41],
[47,41,42,39,47,45,47,43,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,49,49,45,43,37,33,47,53],
[43,0,52,46,42,40,43,44,37,50],
[32,29,0,35,34,37,33,33,27,42],
[32,35,46,0,35,34,38,35,35,48],
[36,39,47,46,0,37,41,33,34,52],
[38,41,44,47,44,0,42,34,37,50],
[44,38,48,43,40,39,0,39,40,46],
[48,37,48,46,48,47,42,0,43,51],
[34,44,54,46,47,44,41,38,0,55],
[28,31,39,33,29,31,35,30,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,60,55,46,47,49,40,40,42],
[34,0,41,58,55,47,56,61,34,44],
[21,40,0,49,48,34,49,34,6,21],
[26,23,32,0,25,30,59,32,20,17],
[35,26,33,56,0,26,41,36,21,30],
[34,34,47,51,55,0,66,47,25,42],
[32,25,32,22,40,15,0,39,5,26],
[41,20,47,49,45,34,42,0,47,29],
[41,47,75,61,60,56,76,34,0,43],
[39,37,60,64,51,39,55,52,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,40,36,37,33,37,43,40,40],
[40,0,39,41,41,35,38,41,37,48],
[41,42,0,37,35,44,45,46,43,46],
[45,40,44,0,36,41,47,41,37,45],
[44,40,46,45,0,44,37,50,38,44],
[48,46,37,40,37,0,52,41,36,49],
[44,43,36,34,44,29,0,42,36,50],
[38,40,35,40,31,40,39,0,32,39],
[41,44,38,44,43,45,45,49,0,48],
[41,33,35,36,37,32,31,42,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,42,41,46,46,40,40,45,44],
[38,0,40,36,42,43,40,34,41,40],
[39,41,0,39,48,44,42,39,43,46],
[40,45,42,0,48,45,42,41,46,40],
[35,39,33,33,0,37,34,31,37,39],
[35,38,37,36,44,0,35,37,40,36],
[41,41,39,39,47,46,0,38,42,42],
[41,47,42,40,50,44,43,0,43,42],
[36,40,38,35,44,41,39,38,0,42],
[37,41,35,41,42,45,39,39,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,41,44,44,45,35,46,40,39],
[42,0,46,39,45,44,38,45,44,45],
[40,35,0,36,36,45,38,37,38,40],
[37,42,45,0,41,45,40,45,41,40],
[37,36,45,40,0,44,38,42,40,38],
[36,37,36,36,37,0,33,39,33,38],
[46,43,43,41,43,48,0,41,47,40],
[35,36,44,36,39,42,40,0,38,36],
[41,37,43,40,41,48,34,43,0,45],
[42,36,41,41,43,43,41,45,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,31,37,39,41,26,31,39,38],
[47,0,41,41,44,51,35,38,50,38],
[50,40,0,48,37,48,37,37,51,43],
[44,40,33,0,34,35,29,34,40,31],
[42,37,44,47,0,44,44,42,36,35],
[40,30,33,46,37,0,34,37,44,30],
[55,46,44,52,37,47,0,45,44,43],
[50,43,44,47,39,44,36,0,48,42],
[42,31,30,41,45,37,37,33,0,33],
[43,43,38,50,46,51,38,39,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,25,35,43,34,42,43,17,27],
[48,0,25,51,57,57,34,42,24,42],
[56,56,0,59,73,32,32,58,33,41],
[46,30,22,0,46,24,31,48,21,48],
[38,24,8,35,0,40,25,43,17,26],
[47,24,49,57,41,0,25,51,24,51],
[39,47,49,50,56,56,0,41,41,41],
[38,39,23,33,38,30,40,0,32,23],
[64,57,48,60,64,57,40,49,0,50],
[54,39,40,33,55,30,40,58,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,44,56,36,44,46,45,43,53],
[36,0,42,46,41,44,36,40,40,50],
[37,39,0,50,36,41,38,44,40,51],
[25,35,31,0,31,30,36,34,33,42],
[45,40,45,50,0,49,47,46,46,54],
[37,37,40,51,32,0,43,36,43,48],
[35,45,43,45,34,38,0,41,40,46],
[36,41,37,47,35,45,40,0,43,50],
[38,41,41,48,35,38,41,38,0,47],
[28,31,30,39,27,33,35,31,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,34,38,47,38,46,37,40,33],
[37,0,31,43,30,43,38,35,38,35],
[47,50,0,44,49,45,46,52,42,36],
[43,38,37,0,37,37,44,44,37,41],
[34,51,32,44,0,41,43,44,41,41],
[43,38,36,44,40,0,44,41,42,43],
[35,43,35,37,38,37,0,37,40,32],
[44,46,29,37,37,40,44,0,40,40],
[41,43,39,44,40,39,41,41,0,40],
[48,46,45,40,40,38,49,41,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,40,40,36,29,35,38,44,40],
[46,0,45,34,45,34,37,43,48,47],
[41,36,0,36,41,31,34,45,46,41],
[41,47,45,0,41,33,36,39,44,40],
[45,36,40,40,0,41,45,42,48,46],
[52,47,50,48,40,0,47,51,48,53],
[46,44,47,45,36,34,0,41,54,45],
[43,38,36,42,39,30,40,0,46,44],
[37,33,35,37,33,33,27,35,0,40],
[41,34,40,41,35,28,36,37,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,38,42,40,33,36,48,42,44],
[36,0,39,43,34,37,37,50,43,43],
[43,42,0,35,35,34,34,46,39,41],
[39,38,46,0,38,39,35,46,40,44],
[41,47,46,43,0,37,43,44,46,42],
[48,44,47,42,44,0,39,47,46,45],
[45,44,47,46,38,42,0,50,43,47],
[33,31,35,35,37,34,31,0,43,42],
[39,38,42,41,35,35,38,38,0,42],
[37,38,40,37,39,36,34,39,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,39,43,52,42,43,44,35,44],
[36,0,40,40,39,33,32,41,34,51],
[42,41,0,47,53,32,40,42,37,57],
[38,41,34,0,46,37,36,32,29,41],
[29,42,28,35,0,41,29,31,34,46],
[39,48,49,44,40,0,42,40,41,57],
[38,49,41,45,52,39,0,47,45,47],
[37,40,39,49,50,41,34,0,33,53],
[46,47,44,52,47,40,36,48,0,53],
[37,30,24,40,35,24,34,28,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,44,37,35,31,36,38,32,33],
[48,0,37,43,39,28,43,37,37,41],
[37,44,0,42,33,29,37,36,37,28],
[44,38,39,0,29,27,38,36,37,37],
[46,42,48,52,0,39,39,40,42,36],
[50,53,52,54,42,0,46,47,51,35],
[45,38,44,43,42,35,0,41,40,34],
[43,44,45,45,41,34,40,0,43,42],
[49,44,44,44,39,30,41,38,0,39],
[48,40,53,44,45,46,47,39,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,44,23,38,39,43,50,50,35],
[23,0,51,37,44,37,38,52,37,37],
[37,30,0,44,44,45,36,49,36,29],
[58,44,37,0,37,45,29,48,42,34],
[43,37,37,44,0,44,37,49,51,44],
[42,44,36,36,37,0,44,42,42,43],
[38,43,45,52,44,37,0,42,42,34],
[31,29,32,33,32,39,39,0,29,22],
[31,44,45,39,30,39,39,52,0,28],
[46,44,52,47,37,38,47,59,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,41,46,42,41,43,54,36,43],
[41,0,38,47,39,37,31,45,37,38],
[40,43,0,42,42,45,37,39,40,37],
[35,34,39,0,38,39,37,43,34,38],
[39,42,39,43,0,42,36,39,42,47],
[40,44,36,42,39,0,34,43,40,43],
[38,50,44,44,45,47,0,48,36,49],
[27,36,42,38,42,38,33,0,33,41],
[45,44,41,47,39,41,45,48,0,45],
[38,43,44,43,34,38,32,40,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,12,43,20,30,36,26,30,36],
[58,0,43,66,49,50,57,64,32,55],
[69,38,0,55,41,47,60,54,45,53],
[38,15,26,0,25,27,36,38,30,47],
[61,32,40,56,0,50,48,60,43,46],
[51,31,34,54,31,0,50,40,31,48],
[45,24,21,45,33,31,0,34,35,42],
[55,17,27,43,21,41,47,0,32,39],
[51,49,36,51,38,50,46,49,0,48],
[45,26,28,34,35,33,39,42,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,33,41,38,48,40,50,61,57],
[38,0,38,43,42,50,49,39,46,38],
[48,43,0,59,47,52,55,31,50,47],
[40,38,22,0,33,41,34,35,38,16],
[43,39,34,48,0,41,54,45,42,42],
[33,31,29,40,40,0,41,28,43,26],
[41,32,26,47,27,40,0,35,36,39],
[31,42,50,46,36,53,46,0,47,38],
[20,35,31,43,39,38,45,34,0,32],
[24,43,34,65,39,55,42,43,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,37,35,37,37,28,41,36,37],
[47,0,54,36,43,41,36,40,35,37],
[44,27,0,33,35,34,35,37,29,40],
[46,45,48,0,45,42,41,42,40,46],
[44,38,46,36,0,35,35,39,38,43],
[44,40,47,39,46,0,33,41,35,44],
[53,45,46,40,46,48,0,47,42,49],
[40,41,44,39,42,40,34,0,34,39],
[45,46,52,41,43,46,39,47,0,47],
[44,44,41,35,38,37,32,42,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,33,46,45,34,46,45,69,47],
[12,0,10,24,34,0,12,23,36,11],
[48,71,0,48,71,36,60,47,59,59],
[35,57,33,0,45,45,36,35,57,47],
[36,47,10,36,0,0,12,23,36,35],
[47,81,45,36,81,0,48,59,69,47],
[35,69,21,45,69,33,0,57,57,35],
[36,58,34,46,58,22,24,0,46,36],
[12,45,22,24,45,12,24,35,0,23],
[34,70,22,34,46,34,46,45,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,35,48,40,52,61,50,52,42],
[17,0,22,27,35,29,39,30,36,36],
[46,59,0,51,38,51,61,51,47,56],
[33,54,30,0,44,37,48,46,46,41],
[41,46,43,37,0,41,43,35,47,46],
[29,52,30,44,40,0,50,53,39,39],
[20,42,20,33,38,31,0,34,25,31],
[31,51,30,35,46,28,47,0,41,37],
[29,45,34,35,34,42,56,40,0,32],
[39,45,25,40,35,42,50,44,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,37,29,43,33,31,40,49,41],
[46,0,38,45,33,41,36,53,48,46],
[44,43,0,36,38,37,34,45,43,44],
[52,36,45,0,43,44,35,50,50,41],
[38,48,43,38,0,48,42,40,43,45],
[48,40,44,37,33,0,45,51,45,37],
[50,45,47,46,39,36,0,53,48,46],
[41,28,36,31,41,30,28,0,36,32],
[32,33,38,31,38,36,33,45,0,37],
[40,35,37,40,36,44,35,49,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,31,21,42,32,31,29,40,31],
[40,0,32,28,39,31,28,29,39,32],
[50,49,0,41,46,49,35,41,41,40],
[60,53,40,0,54,56,47,51,46,41],
[39,42,35,27,0,30,33,48,30,28],
[49,50,32,25,51,0,44,43,40,41],
[50,53,46,34,48,37,0,34,31,36],
[52,52,40,30,33,38,47,0,40,34],
[41,42,40,35,51,41,50,41,0,35],
[50,49,41,40,53,40,45,47,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,45,39,43,59,46,49,45,41],
[43,0,39,30,26,56,42,34,48,42],
[36,42,0,43,43,42,47,46,52,49],
[42,51,38,0,35,56,42,44,52,38],
[38,55,38,46,0,50,42,32,55,40],
[22,25,39,25,31,0,35,28,38,40],
[35,39,34,39,39,46,0,39,51,37],
[32,47,35,37,49,53,42,0,48,41],
[36,33,29,29,26,43,30,33,0,32],
[40,39,32,43,41,41,44,40,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,49,44,42,42,40,30,35,45],
[38,0,58,27,39,39,37,36,30,38],
[32,23,0,26,47,30,41,32,33,33],
[37,54,55,0,38,46,47,38,38,44],
[39,42,34,43,0,47,31,31,26,35],
[39,42,51,35,34,0,41,34,38,46],
[41,44,40,34,50,40,0,30,39,43],
[51,45,49,43,50,47,51,0,42,39],
[46,51,48,43,55,43,42,39,0,47],
[36,43,48,37,46,35,38,42,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,34,35,36,38,39,39,32,32],
[45,0,41,40,40,41,51,38,40,34],
[47,40,0,33,33,34,39,42,44,41],
[46,41,48,0,44,43,46,42,43,36],
[45,41,48,37,0,43,45,47,43,47],
[43,40,47,38,38,0,48,42,39,40],
[42,30,42,35,36,33,0,36,40,40],
[42,43,39,39,34,39,45,0,41,37],
[49,41,37,38,38,42,41,40,0,38],
[49,47,40,45,34,41,41,44,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,38,36,34,51,31,33,42,37],
[44,0,52,42,48,47,45,39,40,42],
[43,29,0,30,47,46,35,32,23,30],
[45,39,51,0,34,46,34,38,34,37],
[47,33,34,47,0,45,42,40,44,51],
[30,34,35,35,36,0,37,33,36,34],
[50,36,46,47,39,44,0,42,40,46],
[48,42,49,43,41,48,39,0,38,47],
[39,41,58,47,37,45,41,43,0,48],
[44,39,51,44,30,47,35,34,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,51,43,47,44,53,63,45,51],
[41,0,46,41,43,50,38,50,45,50],
[30,35,0,43,53,48,55,41,50,50],
[38,40,38,0,53,49,43,45,54,51],
[34,38,28,28,0,36,32,38,36,31],
[37,31,33,32,45,0,37,46,37,38],
[28,43,26,38,49,44,0,50,35,32],
[18,31,40,36,43,35,31,0,39,32],
[36,36,31,27,45,44,46,42,0,43],
[30,31,31,30,50,43,49,49,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,35,36,31,48,45,32,40,32],
[38,0,37,34,32,41,39,32,40,34],
[46,44,0,46,30,54,45,43,47,36],
[45,47,35,0,34,52,37,40,40,39],
[50,49,51,47,0,58,45,44,40,50],
[33,40,27,29,23,0,30,29,31,28],
[36,42,36,44,36,51,0,30,38,41],
[49,49,38,41,37,52,51,0,41,38],
[41,41,34,41,41,50,43,40,0,42],
[49,47,45,42,31,53,40,43,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,32,48,16,48,48,48,65,49],
[32,0,64,48,32,48,16,32,48,48],
[49,17,0,65,16,49,33,32,65,49],
[33,33,16,0,16,48,32,16,17,33],
[65,49,65,65,0,65,49,32,65,49],
[33,33,32,33,16,0,32,16,33,33],
[33,65,48,49,32,49,0,32,49,49],
[33,49,49,65,49,65,49,0,49,49],
[16,33,16,64,16,48,32,32,0,65],
[32,33,32,48,32,48,32,32,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,46,40,40,47,44,40,41,33],
[40,0,48,41,46,51,49,40,40,43],
[35,33,0,27,32,38,41,22,28,37],
[41,40,54,0,35,47,46,45,38,43],
[41,35,49,46,0,52,48,31,44,38],
[34,30,43,34,29,0,45,32,41,35],
[37,32,40,35,33,36,0,23,30,33],
[41,41,59,36,50,49,58,0,48,41],
[40,41,53,43,37,40,51,33,0,42],
[48,38,44,38,43,46,48,40,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,31,31,30,29,28,35,40,39],
[42,0,46,37,30,36,32,46,39,40],
[50,35,0,33,31,40,35,42,34,50],
[50,44,48,0,42,32,35,39,44,47],
[51,51,50,39,0,47,44,53,54,58],
[52,45,41,49,34,0,44,41,41,53],
[53,49,46,46,37,37,0,45,47,59],
[46,35,39,42,28,40,36,0,42,51],
[41,42,47,37,27,40,34,39,0,45],
[42,41,31,34,23,28,22,30,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,44,40,45,44,39,41,37,41],
[43,0,40,40,44,41,35,40,44,47],
[37,41,0,42,42,39,38,42,39,44],
[41,41,39,0,39,43,39,39,38,43],
[36,37,39,42,0,46,32,40,40,38],
[37,40,42,38,35,0,37,39,41,43],
[42,46,43,42,49,44,0,38,43,37],
[40,41,39,42,41,42,43,0,41,45],
[44,37,42,43,41,40,38,40,0,42],
[40,34,37,38,43,38,44,36,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,38,34,40,37,42,37,41,32],
[44,0,45,42,45,42,48,38,45,42],
[43,36,0,36,38,34,41,41,40,34],
[47,39,45,0,48,39,44,43,47,33],
[41,36,43,33,0,31,54,42,37,38],
[44,39,47,42,50,0,52,35,41,35],
[39,33,40,37,27,29,0,30,31,28],
[44,43,40,38,39,46,51,0,42,39],
[40,36,41,34,44,40,50,39,0,39],
[49,39,47,48,43,46,53,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,41,34,44,44,49,44,43,48],
[35,0,33,35,30,42,42,31,27,26],
[40,48,0,40,47,45,53,43,34,32],
[47,46,41,0,43,46,54,34,38,52],
[37,51,34,38,0,33,42,39,22,36],
[37,39,36,35,48,0,43,37,33,36],
[32,39,28,27,39,38,0,29,25,32],
[37,50,38,47,42,44,52,0,43,44],
[38,54,47,43,59,48,56,38,0,39],
[33,55,49,29,45,45,49,37,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,34,32,32,43,30,36,29,26],
[45,0,43,31,42,46,39,40,30,24],
[47,38,0,38,39,44,40,44,42,41],
[49,50,43,0,48,53,44,50,42,39],
[49,39,42,33,0,44,41,47,32,37],
[38,35,37,28,37,0,36,39,40,34],
[51,42,41,37,40,45,0,39,32,33],
[45,41,37,31,34,42,42,0,39,33],
[52,51,39,39,49,41,49,42,0,35],
[55,57,40,42,44,47,48,48,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,42,46,38,37,40,43,37],
[39,0,38,39,43,38,40,39,44,38],
[39,43,0,41,43,33,34,38,51,44],
[39,42,40,0,44,45,41,42,44,40],
[35,38,38,37,0,36,32,33,40,40],
[43,43,48,36,45,0,42,36,41,41],
[44,41,47,40,49,39,0,43,46,38],
[41,42,43,39,48,45,38,0,42,36],
[38,37,30,37,41,40,35,39,0,40],
[44,43,37,41,41,40,43,45,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,38,41,38,45,48,49,49,41],
[34,0,38,37,34,35,43,47,43,37],
[43,43,0,40,47,41,49,52,45,40],
[40,44,41,0,42,40,49,46,43,41],
[43,47,34,39,0,40,44,50,44,40],
[36,46,40,41,41,0,52,47,50,41],
[33,38,32,32,37,29,0,43,37,26],
[32,34,29,35,31,34,38,0,38,28],
[32,38,36,38,37,31,44,43,0,34],
[40,44,41,40,41,40,55,53,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,26,52,55,52,0,52,52],
[55,0,55,52,55,55,26,55,55,55],
[55,26,0,26,52,81,52,0,52,52],
[55,29,55,0,55,55,26,29,55,55],
[29,26,29,26,0,29,52,0,29,26],
[26,26,0,26,52,0,52,0,26,52],
[29,55,29,55,29,29,0,29,29,55],
[81,26,81,52,81,81,52,0,81,81],
[29,26,29,26,52,55,52,0,0,52],
[29,26,29,26,55,29,26,0,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,45,40,36,21,58,34,39,37],
[45,0,69,60,46,39,58,45,54,41],
[36,12,0,34,28,30,51,35,37,30],
[41,21,47,0,37,41,40,40,46,43],
[45,35,53,44,0,54,49,45,42,38],
[60,42,51,40,27,0,60,49,48,34],
[23,23,30,41,32,21,0,27,29,30],
[47,36,46,41,36,32,54,0,51,28],
[42,27,44,35,39,33,52,30,0,35],
[44,40,51,38,43,47,51,53,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,42,39,41,45,34,36,44,33],
[49,0,42,47,43,44,36,34,43,47],
[39,39,0,40,45,44,39,43,40,34],
[42,34,41,0,43,44,32,34,41,30],
[40,38,36,38,0,43,32,33,42,26],
[36,37,37,37,38,0,32,32,37,32],
[47,45,42,49,49,49,0,37,43,43],
[45,47,38,47,48,49,44,0,47,47],
[37,38,41,40,39,44,38,34,0,33],
[48,34,47,51,55,49,38,34,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,37,37,41,49,47,46,49,38],
[33,0,40,40,36,36,43,42,37,29],
[44,41,0,44,44,47,53,52,38,40],
[44,41,37,0,38,43,47,42,34,35],
[40,45,37,43,0,44,48,57,44,36],
[32,45,34,38,37,0,46,38,42,40],
[34,38,28,34,33,35,0,36,38,41],
[35,39,29,39,24,43,45,0,28,30],
[32,44,43,47,37,39,43,53,0,39],
[43,52,41,46,45,41,40,51,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,39,50,49,42,42,41,39,39],
[44,0,43,48,50,41,43,37,41,39],
[42,38,0,52,51,48,44,43,38,45],
[31,33,29,0,44,37,34,27,31,29],
[32,31,30,37,0,34,36,25,35,30],
[39,40,33,44,47,0,39,32,38,38],
[39,38,37,47,45,42,0,31,35,40],
[40,44,38,54,56,49,50,0,42,48],
[42,40,43,50,46,43,46,39,0,41],
[42,42,36,52,51,43,41,33,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,57,59,35,53,48,43,53,44],
[22,0,41,53,28,48,36,39,46,38],
[24,40,0,41,29,41,45,35,43,41],
[22,28,40,0,31,50,31,35,31,27],
[46,53,52,50,0,51,45,51,52,35],
[28,33,40,31,30,0,33,27,43,31],
[33,45,36,50,36,48,0,44,51,34],
[38,42,46,46,30,54,37,0,52,36],
[28,35,38,50,29,38,30,29,0,39],
[37,43,40,54,46,50,47,45,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,48,50,46,39,40,34,24,32],
[41,0,52,36,51,40,45,48,21,44],
[33,29,0,26,35,27,31,33,19,30],
[31,45,55,0,56,33,40,37,34,35],
[35,30,46,25,0,32,42,26,19,39],
[42,41,54,48,49,0,35,38,27,28],
[41,36,50,41,39,46,0,38,33,41],
[47,33,48,44,55,43,43,0,24,43],
[57,60,62,47,62,54,48,57,0,36],
[49,37,51,46,42,53,40,38,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,41,40,30,41,40,54,49,48],
[32,0,28,30,30,25,38,38,30,40],
[40,53,0,40,41,30,44,40,36,47],
[41,51,41,0,33,40,44,41,49,50],
[51,51,40,48,0,35,47,46,43,58],
[40,56,51,41,46,0,46,53,47,58],
[41,43,37,37,34,35,0,44,42,31],
[27,43,41,40,35,28,37,0,33,38],
[32,51,45,32,38,34,39,48,0,39],
[33,41,34,31,23,23,50,43,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,37,37,34,35,38,35,35,41],
[49,0,41,43,39,40,42,35,35,38],
[44,40,0,42,38,39,41,42,39,48],
[44,38,39,0,39,39,44,38,37,43],
[47,42,43,42,0,39,46,41,43,39],
[46,41,42,42,42,0,42,42,36,42],
[43,39,40,37,35,39,0,43,35,41],
[46,46,39,43,40,39,38,0,37,45],
[46,46,42,44,38,45,46,44,0,43],
[40,43,33,38,42,39,40,36,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,20,41,40,60,81,60,81,60],
[21,0,21,21,21,41,61,20,61,21],
[61,60,0,41,40,60,81,60,81,60],
[40,60,40,0,40,40,40,60,81,40],
[41,60,41,41,0,81,81,40,81,61],
[21,40,21,41,0,0,61,40,61,61],
[0,20,0,41,0,20,0,20,41,20],
[21,61,21,21,41,41,61,0,41,41],
[0,20,0,0,0,20,40,40,0,0],
[21,60,21,41,20,20,61,40,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,44,46,48,64,52,69,42,41],
[46,0,45,57,52,39,53,63,43,47],
[37,36,0,47,37,29,39,58,53,25],
[35,24,34,0,36,42,46,65,38,29],
[33,29,44,45,0,62,38,63,48,46],
[17,42,52,39,19,0,39,51,43,37],
[29,28,42,35,43,42,0,59,50,48],
[12,18,23,16,18,30,22,0,24,17],
[39,38,28,43,33,38,31,57,0,39],
[40,34,56,52,35,44,33,64,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,44,38,47,39,44,50,44,43],
[39,0,41,45,31,45,39,38,43,35],
[37,40,0,41,33,32,39,40,38,34],
[43,36,40,0,41,41,41,38,46,41],
[34,50,48,40,0,36,56,45,45,39],
[42,36,49,40,45,0,41,49,44,43],
[37,42,42,40,25,40,0,40,45,39],
[31,43,41,43,36,32,41,0,35,35],
[37,38,43,35,36,37,36,46,0,34],
[38,46,47,40,42,38,42,46,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,46,48,44,42,43,41,40,46],
[35,0,46,46,46,47,52,48,42,37],
[35,35,0,42,43,43,41,43,37,38],
[33,35,39,0,44,42,45,39,32,34],
[37,35,38,37,0,38,46,42,34,33],
[39,34,38,39,43,0,45,38,40,40],
[38,29,40,36,35,36,0,41,28,40],
[40,33,38,42,39,43,40,0,32,37],
[41,39,44,49,47,41,53,49,0,36],
[35,44,43,47,48,41,41,44,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,41,43,47,37,50,36,39,38],
[49,0,40,39,47,37,43,34,48,30],
[40,41,0,44,53,44,52,43,42,41],
[38,42,37,0,59,40,47,33,40,43],
[34,34,28,22,0,28,39,30,31,37],
[44,44,37,41,53,0,41,36,32,33],
[31,38,29,34,42,40,0,41,35,32],
[45,47,38,48,51,45,40,0,33,51],
[42,33,39,41,50,49,46,48,0,44],
[43,51,40,38,44,48,49,30,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,62,55,34,44,60,51,57,50],
[40,0,52,53,36,46,39,49,48,49],
[19,29,0,54,21,39,22,53,41,49],
[26,28,27,0,32,36,30,31,38,31],
[47,45,60,49,0,39,55,65,53,49],
[37,35,42,45,42,0,35,51,43,60],
[21,42,59,51,26,46,0,51,48,55],
[30,32,28,50,16,30,30,0,27,28],
[24,33,40,43,28,38,33,54,0,38],
[31,32,32,50,32,21,26,53,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,45,40,41,41,46,37,34,54],
[40,0,41,41,39,32,45,42,37,47],
[36,40,0,30,42,36,43,38,45,47],
[41,40,51,0,40,40,58,46,39,45],
[40,42,39,41,0,37,46,36,42,52],
[40,49,45,41,44,0,53,48,40,56],
[35,36,38,23,35,28,0,36,30,50],
[44,39,43,35,45,33,45,0,43,48],
[47,44,36,42,39,41,51,38,0,48],
[27,34,34,36,29,25,31,33,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,45,41,18,38,33,18,33,39],
[49,0,40,25,33,35,43,33,25,38],
[36,41,0,37,29,37,37,31,34,52],
[40,56,44,0,40,50,41,33,28,51],
[63,48,52,41,0,49,48,40,54,64],
[43,46,44,31,32,0,37,27,31,41],
[48,38,44,40,33,44,0,46,35,51],
[63,48,50,48,41,54,35,0,42,63],
[48,56,47,53,27,50,46,39,0,65],
[42,43,29,30,17,40,30,18,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,43,42,42,40,50,36,57,42],
[33,0,39,42,33,33,36,25,47,30],
[38,42,0,39,35,31,40,33,41,31],
[39,39,42,0,32,31,36,24,47,22],
[39,48,46,49,0,40,46,42,48,40],
[41,48,50,50,41,0,41,36,46,36],
[31,45,41,45,35,40,0,31,45,34],
[45,56,48,57,39,45,50,0,61,53],
[24,34,40,34,33,35,36,20,0,40],
[39,51,50,59,41,45,47,28,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,43,36,41,38,42,38,42,37],
[41,0,46,35,34,38,41,30,37,32],
[38,35,0,35,33,26,37,31,35,35],
[45,46,46,0,39,41,46,38,39,37],
[40,47,48,42,0,36,42,45,36,45],
[43,43,55,40,45,0,45,40,47,40],
[39,40,44,35,39,36,0,34,40,36],
[43,51,50,43,36,41,47,0,43,45],
[39,44,46,42,45,34,41,38,0,40],
[44,49,46,44,36,41,45,36,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,37,33,35,32,42,26,33,31],
[49,0,38,40,37,41,37,30,45,32],
[44,43,0,42,36,43,33,39,44,35],
[48,41,39,0,39,47,42,41,45,38],
[46,44,45,42,0,51,46,32,41,32],
[49,40,38,34,30,0,32,30,44,38],
[39,44,48,39,35,49,0,28,47,37],
[55,51,42,40,49,51,53,0,47,42],
[48,36,37,36,40,37,34,34,0,46],
[50,49,46,43,49,43,44,39,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,48,35,57,31,33,32,50,36],
[44,0,31,33,67,46,37,37,44,44],
[33,50,0,39,59,48,43,49,43,52],
[46,48,42,0,58,49,43,34,43,52],
[24,14,22,23,0,32,22,21,37,35],
[50,35,33,32,49,0,32,21,40,49],
[48,44,38,38,59,49,0,39,55,47],
[49,44,32,47,60,60,42,0,55,53],
[31,37,38,38,44,41,26,26,0,46],
[45,37,29,29,46,32,34,28,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,43,42,40,44,38,35,41,40],
[35,0,32,37,40,40,30,36,29,36],
[38,49,0,43,42,44,41,41,37,36],
[39,44,38,0,38,44,32,39,36,38],
[41,41,39,43,0,41,35,37,38,35],
[37,41,37,37,40,0,31,39,35,31],
[43,51,40,49,46,50,0,42,44,43],
[46,45,40,42,44,42,39,0,39,36],
[40,52,44,45,43,46,37,42,0,39],
[41,45,45,43,46,50,38,45,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,49,53,40,44,40,58,41,45],
[34,0,34,45,38,47,40,47,33,48],
[32,47,0,47,40,44,40,43,37,44],
[28,36,34,0,40,38,30,47,25,46],
[41,43,41,41,0,33,35,56,30,43],
[37,34,37,43,48,0,42,51,37,49],
[41,41,41,51,46,39,0,48,34,46],
[23,34,38,34,25,30,33,0,28,35],
[40,48,44,56,51,44,47,53,0,53],
[36,33,37,35,38,32,35,46,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,29,35,54,48,43,47,40,45],
[36,0,33,37,40,44,29,44,33,41],
[52,48,0,36,48,44,36,46,43,48],
[46,44,45,0,53,49,35,49,38,32],
[27,41,33,28,0,37,31,37,37,35],
[33,37,37,32,44,0,27,35,35,34],
[38,52,45,46,50,54,0,44,41,39],
[34,37,35,32,44,46,37,0,28,34],
[41,48,38,43,44,46,40,53,0,44],
[36,40,33,49,46,47,42,47,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,48,40,46,47,51,42,43,37],
[40,0,37,43,33,40,35,40,32,32],
[33,44,0,37,43,37,29,46,31,36],
[41,38,44,0,39,40,37,49,40,38],
[35,48,38,42,0,43,46,42,38,35],
[34,41,44,41,38,0,41,52,30,42],
[30,46,52,44,35,40,0,47,36,36],
[39,41,35,32,39,29,34,0,31,34],
[38,49,50,41,43,51,45,50,0,47],
[44,49,45,43,46,39,45,47,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,39,38,34,40,39,43,39,38],
[48,0,44,41,42,43,36,47,48,44],
[42,37,0,45,43,44,44,51,42,40],
[43,40,36,0,37,41,39,43,34,35],
[47,39,38,44,0,40,37,50,39,45],
[41,38,37,40,41,0,40,47,34,37],
[42,45,37,42,44,41,0,49,43,44],
[38,34,30,38,31,34,32,0,35,40],
[42,33,39,47,42,47,38,46,0,42],
[43,37,41,46,36,44,37,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,46,42,36,53,50,49,56,57],
[31,0,47,35,37,50,47,35,48,36],
[35,34,0,32,34,42,39,42,46,47],
[39,46,49,0,39,39,42,32,46,50],
[45,44,47,42,0,45,53,38,48,48],
[28,31,39,42,36,0,54,41,43,37],
[31,34,42,39,28,27,0,24,46,39],
[32,46,39,49,43,40,57,0,52,41],
[25,33,35,35,33,38,35,29,0,37],
[24,45,34,31,33,44,42,40,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,47,56,47,39,47,51,36,37],
[38,0,53,51,55,43,35,55,41,40],
[34,28,0,32,44,45,32,44,32,42],
[25,30,49,0,46,37,29,40,35,40],
[34,26,37,35,0,32,26,36,23,27],
[42,38,36,44,49,0,39,53,41,29],
[34,46,49,52,55,42,0,48,34,36],
[30,26,37,41,45,28,33,0,24,29],
[45,40,49,46,58,40,47,57,0,49],
[44,41,39,41,54,52,45,52,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,41,42,43,42,48,53,50,38],
[27,0,27,36,32,35,36,42,37,27],
[40,54,0,43,39,40,51,50,49,35],
[39,45,38,0,38,46,41,46,49,44],
[38,49,42,43,0,37,42,48,48,48],
[39,46,41,35,44,0,40,45,45,38],
[33,45,30,40,39,41,0,39,39,38],
[28,39,31,35,33,36,42,0,34,33],
[31,44,32,32,33,36,42,47,0,32],
[43,54,46,37,33,43,43,48,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,39,49,39,46,43,39,47,40],
[41,0,40,37,33,42,43,34,42,35],
[42,41,0,43,38,44,43,37,47,37],
[32,44,38,0,43,47,44,39,42,35],
[42,48,43,38,0,42,43,42,43,41],
[35,39,37,34,39,0,39,34,39,31],
[38,38,38,37,38,42,0,33,38,37],
[42,47,44,42,39,47,48,0,48,43],
[34,39,34,39,38,42,43,33,0,36],
[41,46,44,46,40,50,44,38,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,36,40,39,44,43,36,41,42],
[39,0,42,39,47,41,40,39,43,44],
[45,39,0,33,44,43,37,38,41,46],
[41,42,48,0,46,47,39,53,44,48],
[42,34,37,35,0,43,29,39,38,36],
[37,40,38,34,38,0,34,40,38,38],
[38,41,44,42,52,47,0,44,48,44],
[45,42,43,28,42,41,37,0,45,43],
[40,38,40,37,43,43,33,36,0,38],
[39,37,35,33,45,43,37,38,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,26,37,40,36,44,44,31,53],
[31,0,29,32,39,38,37,39,39,40],
[55,52,0,42,51,50,48,43,38,54],
[44,49,39,0,38,47,40,31,39,45],
[41,42,30,43,0,39,40,43,36,55],
[45,43,31,34,42,0,34,36,40,50],
[37,44,33,41,41,47,0,33,34,53],
[37,42,38,50,38,45,48,0,42,49],
[50,42,43,42,45,41,47,39,0,54],
[28,41,27,36,26,31,28,32,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,19,33,33,54,53,39,19,48],
[55,0,28,42,42,48,41,40,26,41],
[62,53,0,35,55,49,48,50,36,48],
[48,39,46,0,40,47,46,49,27,55],
[48,39,26,41,0,41,46,42,41,34],
[27,33,32,34,40,0,45,49,27,39],
[28,40,33,35,35,36,0,43,28,33],
[42,41,31,32,39,32,38,0,20,46],
[62,55,45,54,40,54,53,61,0,47],
[33,40,33,26,47,42,48,35,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,44,42,44,37,40,41,43,38],
[38,0,46,46,41,39,46,44,54,39],
[37,35,0,36,40,35,42,40,40,36],
[39,35,45,0,43,37,42,44,46,41],
[37,40,41,38,0,38,37,41,44,34],
[44,42,46,44,43,0,36,45,48,45],
[41,35,39,39,44,45,0,43,45,39],
[40,37,41,37,40,36,38,0,45,37],
[38,27,41,35,37,33,36,36,0,35],
[43,42,45,40,47,36,42,44,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,37,42,32,37,34,42,44,37],
[44,0,40,42,39,39,43,41,40,38],
[44,41,0,38,34,36,32,40,39,31],
[39,39,43,0,38,45,36,33,39,34],
[49,42,47,43,0,44,39,45,46,42],
[44,42,45,36,37,0,34,42,40,36],
[47,38,49,45,42,47,0,39,40,34],
[39,40,41,48,36,39,42,0,38,41],
[37,41,42,42,35,41,41,43,0,38],
[44,43,50,47,39,45,47,40,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,33,29,37,34,36,30,37,43],
[47,0,42,41,40,45,48,45,44,47],
[48,39,0,35,42,45,45,44,52,48],
[52,40,46,0,37,40,49,46,50,47],
[44,41,39,44,0,40,46,44,46,45],
[47,36,36,41,41,0,50,34,44,39],
[45,33,36,32,35,31,0,33,43,33],
[51,36,37,35,37,47,48,0,47,47],
[44,37,29,31,35,37,38,34,0,33],
[38,34,33,34,36,42,48,34,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,45,39,35,49,46,39,48,37],
[36,0,34,37,18,37,41,34,48,18],
[36,47,0,31,45,43,35,38,43,32],
[42,44,50,0,38,49,55,43,47,30],
[46,63,36,43,0,43,47,48,52,33],
[32,44,38,32,38,0,49,45,30,44],
[35,40,46,26,34,32,0,38,42,26],
[42,47,43,38,33,36,43,0,46,30],
[33,33,38,34,29,51,39,35,0,30],
[44,63,49,51,48,37,55,51,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,36,37,47,42,49,44,42,43],
[45,0,30,37,35,39,50,46,21,32],
[45,51,0,40,45,38,39,47,35,40],
[44,44,41,0,46,38,49,42,47,49],
[34,46,36,35,0,39,45,40,45,44],
[39,42,43,43,42,0,46,39,34,46],
[32,31,42,32,36,35,0,29,21,41],
[37,35,34,39,41,42,52,0,31,42],
[39,60,46,34,36,47,60,50,0,60],
[38,49,41,32,37,35,40,39,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,32,46,30,44,35,30,27,33],
[46,0,44,57,49,50,46,49,28,47],
[49,37,0,59,33,45,36,43,45,40],
[35,24,22,0,24,27,25,25,15,20],
[51,32,48,57,0,42,49,36,29,53],
[37,31,36,54,39,0,32,39,30,50],
[46,35,45,56,32,49,0,36,27,33],
[51,32,38,56,45,42,45,0,35,40],
[54,53,36,66,52,51,54,46,0,48],
[48,34,41,61,28,31,48,41,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,31,31,41,39,32,36,31,31],
[42,0,27,32,33,34,27,33,21,38],
[50,54,0,44,50,56,36,28,29,58],
[50,49,37,0,33,28,32,33,46,42],
[40,48,31,48,0,36,30,28,35,42],
[42,47,25,53,45,0,41,30,31,52],
[49,54,45,49,51,40,0,44,34,63],
[45,48,53,48,53,51,37,0,29,42],
[50,60,52,35,46,50,47,52,0,53],
[50,43,23,39,39,29,18,39,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,54,39,42,48,47,42,54,44],
[37,0,49,44,38,40,47,47,48,37],
[27,32,0,12,15,23,24,26,23,26],
[42,37,69,0,49,40,50,56,46,58],
[39,43,66,32,0,32,36,48,48,33],
[33,41,58,41,49,0,52,58,51,44],
[34,34,57,31,45,29,0,52,42,35],
[39,34,55,25,33,23,29,0,40,36],
[27,33,58,35,33,30,39,41,0,26],
[37,44,55,23,48,37,46,45,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,40,44,42,46,47,40,45,46],
[40,0,36,43,37,39,37,39,43,44],
[41,45,0,39,42,41,44,42,45,41],
[37,38,42,0,41,48,48,31,42,47],
[39,44,39,40,0,42,38,39,43,47],
[35,42,40,33,39,0,40,43,43,42],
[34,44,37,33,43,41,0,40,41,46],
[41,42,39,50,42,38,41,0,43,47],
[36,38,36,39,38,38,40,38,0,39],
[35,37,40,34,34,39,35,34,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,42,47,40,36,31,40,46,41],
[44,0,43,43,44,41,38,44,44,44],
[39,38,0,44,48,41,45,42,44,42],
[34,38,37,0,36,35,37,41,44,43],
[41,37,33,45,0,37,37,39,42,33],
[45,40,40,46,44,0,44,45,50,46],
[50,43,36,44,44,37,0,39,41,39],
[41,37,39,40,42,36,42,0,49,38],
[35,37,37,37,39,31,40,32,0,38],
[40,37,39,38,48,35,42,43,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,48,33,34,29,48,30,40,51],
[54,0,34,29,49,26,49,29,39,44],
[33,47,0,47,44,31,42,31,48,47],
[48,52,34,0,46,42,44,39,49,56],
[47,32,37,35,0,32,45,26,51,37],
[52,55,50,39,49,0,55,46,59,53],
[33,32,39,37,36,26,0,27,53,47],
[51,52,50,42,55,35,54,0,45,54],
[41,42,33,32,30,22,28,36,0,47],
[30,37,34,25,44,28,34,27,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,42,47,45,44,34,48,41,38],
[34,0,39,43,39,40,40,42,38,38],
[39,42,0,45,41,45,42,36,38,36],
[34,38,36,0,34,39,34,34,33,37],
[36,42,40,47,0,48,44,37,47,31],
[37,41,36,42,33,0,33,38,35,29],
[47,41,39,47,37,48,0,40,37,31],
[33,39,45,47,44,43,41,0,45,43],
[40,43,43,48,34,46,44,36,0,37],
[43,43,45,44,50,52,50,38,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,47,43,35,38,49,38,40,36],
[39,0,56,43,40,47,47,44,40,47],
[34,25,0,37,39,30,32,25,32,28],
[38,38,44,0,39,40,44,34,31,40],
[46,41,42,42,0,35,41,43,33,39],
[43,34,51,41,46,0,41,39,45,45],
[32,34,49,37,40,40,0,36,33,40],
[43,37,56,47,38,42,45,0,41,52],
[41,41,49,50,48,36,48,40,0,39],
[45,34,53,41,42,36,41,29,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,36,29,47,47,38,33,51,39],
[47,0,39,36,53,46,46,39,45,39],
[45,42,0,36,41,46,39,35,54,42],
[52,45,45,0,47,44,39,35,44,39],
[34,28,40,34,0,35,41,33,41,26],
[34,35,35,37,46,0,41,41,44,34],
[43,35,42,42,40,40,0,39,39,34],
[48,42,46,46,48,40,42,0,52,42],
[30,36,27,37,40,37,42,29,0,24],
[42,42,39,42,55,47,47,39,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,43,42,30,47,39,43,44,37],
[44,0,41,38,32,45,25,40,44,25],
[38,40,0,44,31,48,33,38,27,34],
[39,43,37,0,32,51,28,29,39,34],
[51,49,50,49,0,51,36,42,47,32],
[34,36,33,30,30,0,29,33,37,33],
[42,56,48,53,45,52,0,33,51,49],
[38,41,43,52,39,48,48,0,53,43],
[37,37,54,42,34,44,30,28,0,32],
[44,56,47,47,49,48,32,38,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,24,17,41,24,17,18,30,41],
[69,0,54,50,69,40,36,41,65,64],
[57,27,0,34,48,50,28,34,46,56],
[64,31,47,0,62,53,36,42,59,63],
[40,12,33,19,0,25,18,41,47,53],
[57,41,31,28,56,0,42,47,52,57],
[64,45,53,45,63,39,0,48,59,70],
[63,40,47,39,40,34,33,0,57,51],
[51,16,35,22,34,29,22,24,0,35],
[40,17,25,18,28,24,11,30,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,42,44,41,34,32,49,39,32],
[45,0,42,38,37,41,44,37,35,33],
[39,39,0,39,43,37,35,49,40,31],
[37,43,42,0,41,39,52,45,32,36],
[40,44,38,40,0,41,35,46,26,37],
[47,40,44,42,40,0,42,43,49,36],
[49,37,46,29,46,39,0,48,33,39],
[32,44,32,36,35,38,33,0,35,31],
[42,46,41,49,55,32,48,46,0,46],
[49,48,50,45,44,45,42,50,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,42,27,40,43,36,40,23,33],
[46,0,51,41,48,52,45,50,39,45],
[39,30,0,33,38,38,39,46,33,40],
[54,40,48,0,48,45,43,45,43,42],
[41,33,43,33,0,38,45,43,32,40],
[38,29,43,36,43,0,36,37,31,36],
[45,36,42,38,36,45,0,38,30,40],
[41,31,35,36,38,44,43,0,31,39],
[58,42,48,38,49,50,51,50,0,46],
[48,36,41,39,41,45,41,42,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,67,41,26,28,15,41,54,41],
[40,0,53,13,40,42,14,40,26,14],
[14,28,0,28,26,29,29,40,13,42],
[40,68,53,0,53,55,40,40,26,40],
[55,41,55,28,0,55,29,55,41,55],
[53,39,52,26,26,0,13,39,39,13],
[66,67,52,41,52,68,0,53,39,68],
[40,41,41,41,26,42,28,0,26,42],
[27,55,68,55,40,42,42,55,0,42],
[40,67,39,41,26,68,13,39,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,40,44,39,51,52,45,49,46],
[36,0,24,27,30,45,45,41,48,42],
[41,57,0,36,51,52,55,46,57,55],
[37,54,45,0,40,52,55,53,60,53],
[42,51,30,41,0,46,51,48,48,45],
[30,36,29,29,35,0,47,34,45,43],
[29,36,26,26,30,34,0,38,40,31],
[36,40,35,28,33,47,43,0,48,38],
[32,33,24,21,33,36,41,33,0,39],
[35,39,26,28,36,38,50,43,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,46,42,41,45,49,37,50,37],
[36,0,45,31,39,37,41,42,39,34],
[35,36,0,32,35,28,43,38,41,32],
[39,50,49,0,44,37,44,42,52,38],
[40,42,46,37,0,38,38,40,41,33],
[36,44,53,44,43,0,49,49,46,46],
[32,40,38,37,43,32,0,45,46,35],
[44,39,43,39,41,32,36,0,42,32],
[31,42,40,29,40,35,35,39,0,34],
[44,47,49,43,48,35,46,49,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,34,46,42,40,44,40,38,39],
[48,0,48,55,44,44,45,41,37,41],
[47,33,0,43,43,48,42,44,45,38],
[35,26,38,0,42,39,39,37,42,33],
[39,37,38,39,0,42,39,33,43,35],
[41,37,33,42,39,0,42,37,36,35],
[37,36,39,42,42,39,0,39,39,30],
[41,40,37,44,48,44,42,0,44,36],
[43,44,36,39,38,45,42,37,0,34],
[42,40,43,48,46,46,51,45,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,33,35,36,11,44,33,33,46],
[35,0,46,35,34,46,47,33,23,46],
[48,35,0,35,37,37,58,46,35,47],
[46,46,46,0,46,46,46,33,46,46],
[45,47,44,35,0,34,45,33,45,46],
[70,35,44,35,47,0,33,46,33,58],
[37,34,23,35,36,48,0,23,11,46],
[48,48,35,48,48,35,58,0,23,36],
[48,58,46,35,36,48,70,58,0,35],
[35,35,34,35,35,23,35,45,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,41,41,21,41,10,31,42],
[40,0,19,61,29,50,29,29,42,42],
[40,62,0,52,41,42,20,30,32,52],
[40,20,29,0,39,20,20,10,21,42],
[40,52,40,42,0,31,41,41,32,52],
[60,31,39,61,50,0,40,20,41,52],
[40,52,61,61,40,41,0,20,42,52],
[71,52,51,71,40,61,61,0,42,42],
[50,39,49,60,49,40,39,39,0,52],
[39,39,29,39,29,29,29,39,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,35,27,47,41,43,30,35,39],
[34,0,24,32,35,33,42,19,33,21],
[46,57,0,32,52,46,44,40,36,39],
[54,49,49,0,47,49,44,44,44,37],
[34,46,29,34,0,31,49,30,47,34],
[40,48,35,32,50,0,47,29,35,39],
[38,39,37,37,32,34,0,32,24,38],
[51,62,41,37,51,52,49,0,52,50],
[46,48,45,37,34,46,57,29,0,32],
[42,60,42,44,47,42,43,31,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,44,38,42,39,41,41,43,45],
[39,0,44,38,37,40,41,47,43,34],
[37,37,0,32,38,33,33,41,40,40],
[43,43,49,0,42,36,36,43,36,35],
[39,44,43,39,0,34,33,40,37,33],
[42,41,48,45,47,0,38,44,48,34],
[40,40,48,45,48,43,0,47,41,35],
[40,34,40,38,41,37,34,0,41,34],
[38,38,41,45,44,33,40,40,0,26],
[36,47,41,46,48,47,46,47,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,41,35,39,46,30,46,37,33],
[39,0,34,32,40,34,32,38,41,32],
[40,47,0,41,45,41,35,40,48,43],
[46,49,40,0,44,43,38,41,47,39],
[42,41,36,37,0,37,29,38,45,32],
[35,47,40,38,44,0,37,27,38,37],
[51,49,46,43,52,44,0,38,50,43],
[35,43,41,40,43,54,43,0,49,39],
[44,40,33,34,36,43,31,32,0,31],
[48,49,38,42,49,44,38,42,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,49,59,49,49,49,39,59,39],
[32,0,22,30,20,32,20,31,39,32],
[32,59,0,39,39,72,59,41,29,61],
[22,51,42,0,39,42,62,42,30,42],
[32,61,42,42,0,42,62,21,39,32],
[32,49,9,39,39,0,59,31,29,42],
[32,61,22,19,19,22,0,21,29,12],
[42,50,40,39,60,50,60,0,39,40],
[22,42,52,51,42,52,52,42,0,42],
[42,49,20,39,49,39,69,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,37,45,42,40,42,35,46,46],
[33,0,44,39,42,37,34,34,42,45],
[44,37,0,39,39,38,37,42,37,42],
[36,42,42,0,46,42,41,44,41,41],
[39,39,42,35,0,41,39,37,42,40],
[41,44,43,39,40,0,38,38,42,49],
[39,47,44,40,42,43,0,41,47,44],
[46,47,39,37,44,43,40,0,45,47],
[35,39,44,40,39,39,34,36,0,42],
[35,36,39,40,41,32,37,34,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,40,36,32,51,37,37,38,39],
[48,0,46,42,42,54,41,41,43,40],
[41,35,0,38,28,45,39,37,34,39],
[45,39,43,0,42,48,39,45,38,44],
[49,39,53,39,0,54,45,39,44,46],
[30,27,36,33,27,0,31,36,38,35],
[44,40,42,42,36,50,0,51,45,43],
[44,40,44,36,42,45,30,0,39,51],
[43,38,47,43,37,43,36,42,0,37],
[42,41,42,37,35,46,38,30,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,40,46,44,40,38,37,37,28],
[53,0,41,51,44,47,48,50,44,33],
[41,40,0,44,38,38,42,36,36,30],
[35,30,37,0,46,36,36,39,31,34],
[37,37,43,35,0,49,32,31,33,31],
[41,34,43,45,32,0,34,35,38,33],
[43,33,39,45,49,47,0,39,43,39],
[44,31,45,42,50,46,42,0,44,41],
[44,37,45,50,48,43,38,37,0,34],
[53,48,51,47,50,48,42,40,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,46,43,40,45,42,46,42,41],
[33,0,36,42,30,38,35,35,33,41],
[35,45,0,42,34,45,40,41,37,40],
[38,39,39,0,39,39,35,40,38,39],
[41,51,47,42,0,46,44,40,45,45],
[36,43,36,42,35,0,38,33,35,42],
[39,46,41,46,37,43,0,37,39,34],
[35,46,40,41,41,48,44,0,39,41],
[39,48,44,43,36,46,42,42,0,43],
[40,40,41,42,36,39,47,40,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,31,23,38,32,21,30,25,34],
[47,0,48,31,36,43,41,41,34,45],
[50,33,0,44,38,37,39,49,34,44],
[58,50,37,0,49,48,44,50,36,44],
[43,45,43,32,0,42,40,38,39,41],
[49,38,44,33,39,0,41,35,56,41],
[60,40,42,37,41,40,0,38,37,43],
[51,40,32,31,43,46,43,0,39,41],
[56,47,47,45,42,25,44,42,0,37],
[47,36,37,37,40,40,38,40,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,36,47,41,44,32,39,35,34],
[31,0,25,32,34,29,29,38,32,39],
[45,56,0,49,46,57,40,54,41,36],
[34,49,32,0,36,41,34,38,41,35],
[40,47,35,45,0,46,35,43,32,30],
[37,52,24,40,35,0,32,37,33,33],
[49,52,41,47,46,49,0,42,44,37],
[42,43,27,43,38,44,39,0,37,37],
[46,49,40,40,49,48,37,44,0,45],
[47,42,45,46,51,48,44,44,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,35,44,41,44,27,39,38,41],
[43,0,48,47,38,49,43,47,44,48],
[46,33,0,48,49,49,40,39,43,47],
[37,34,33,0,35,44,41,47,51,42],
[40,43,32,46,0,48,40,43,46,42],
[37,32,32,37,33,0,37,40,41,39],
[54,38,41,40,41,44,0,46,44,40],
[42,34,42,34,38,41,35,0,38,40],
[43,37,38,30,35,40,37,43,0,33],
[40,33,34,39,39,42,41,41,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,30,30,31,31,49,34,39,30],
[36,0,38,38,25,48,51,36,36,42],
[51,43,0,40,37,43,56,41,39,45],
[51,43,41,0,34,47,51,41,40,38],
[50,56,44,47,0,40,57,44,44,42],
[50,33,38,34,41,0,47,37,38,39],
[32,30,25,30,24,34,0,31,18,34],
[47,45,40,40,37,44,50,0,41,31],
[42,45,42,41,37,43,63,40,0,42],
[51,39,36,43,39,42,47,50,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,38,40,29,37,45,33,39,43],
[46,0,38,38,37,38,48,36,41,46],
[43,43,0,35,31,36,52,37,40,40],
[41,43,46,0,39,51,52,42,45,49],
[52,44,50,42,0,40,49,37,42,53],
[44,43,45,30,41,0,45,40,45,44],
[36,33,29,29,32,36,0,34,40,40],
[48,45,44,39,44,41,47,0,47,52],
[42,40,41,36,39,36,41,34,0,41],
[38,35,41,32,28,37,41,29,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,38,33,31,42,37,31,41,35],
[41,0,36,39,34,51,39,40,42,38],
[43,45,0,36,39,46,37,37,42,43],
[48,42,45,0,39,55,44,46,45,42],
[50,47,42,42,0,49,41,38,45,41],
[39,30,35,26,32,0,35,29,38,31],
[44,42,44,37,40,46,0,39,43,38],
[50,41,44,35,43,52,42,0,41,38],
[40,39,39,36,36,43,38,40,0,37],
[46,43,38,39,40,50,43,43,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,43,40,38,45,43,42,37,46],
[42,0,39,40,41,48,43,45,38,48],
[38,42,0,36,45,40,36,38,35,44],
[41,41,45,0,44,42,39,41,44,44],
[43,40,36,37,0,43,41,46,37,49],
[36,33,41,39,38,0,35,41,36,43],
[38,38,45,42,40,46,0,39,40,38],
[39,36,43,40,35,40,42,0,34,47],
[44,43,46,37,44,45,41,47,0,48],
[35,33,37,37,32,38,43,34,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,38,38,34,39,36,37,40,42],
[39,0,37,36,38,38,40,38,31,40],
[43,44,0,37,38,38,46,39,37,42],
[43,45,44,0,47,44,46,42,39,50],
[47,43,43,34,0,50,45,36,40,48],
[42,43,43,37,31,0,45,32,35,40],
[45,41,35,35,36,36,0,28,30,42],
[44,43,42,39,45,49,53,0,43,52],
[41,50,44,42,41,46,51,38,0,51],
[39,41,39,31,33,41,39,29,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,36,38,36,40,39,34,36],
[39,0,35,39,33,38,40,36,32,38],
[39,46,0,38,40,43,35,39,33,36],
[45,42,43,0,36,34,39,32,40,41],
[43,48,41,45,0,39,43,44,44,38],
[45,43,38,47,42,0,41,34,42,36],
[41,41,46,42,38,40,0,38,39,37],
[42,45,42,49,37,47,43,0,41,39],
[47,49,48,41,37,39,42,40,0,39],
[45,43,45,40,43,45,44,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,33,45,35,42,43,33,42,34],
[36,0,40,51,32,45,45,25,35,37],
[48,41,0,52,47,42,36,37,44,37],
[36,30,29,0,37,29,34,28,33,32],
[46,49,34,44,0,39,44,33,33,45],
[39,36,39,52,42,0,42,36,40,39],
[38,36,45,47,37,39,0,29,40,40],
[48,56,44,53,48,45,52,0,42,36],
[39,46,37,48,48,41,41,39,0,36],
[47,44,44,49,36,42,41,45,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,47,35,53,45,44,46,53,46],
[35,0,41,41,41,56,53,46,36,41],
[34,40,0,27,52,47,38,46,37,39],
[46,40,54,0,51,58,52,50,49,47],
[28,40,29,30,0,38,38,36,39,44],
[36,25,34,23,43,0,35,38,31,34],
[37,28,43,29,43,46,0,38,37,37],
[35,35,35,31,45,43,43,0,35,40],
[28,45,44,32,42,50,44,46,0,46],
[35,40,42,34,37,47,44,41,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,37,44,37,41,40,35,39,39],
[36,0,38,38,40,35,27,40,32,46],
[44,43,0,42,41,38,43,48,36,43],
[37,43,39,0,41,42,40,41,43,44],
[44,41,40,40,0,42,39,42,39,51],
[40,46,43,39,39,0,35,35,36,41],
[41,54,38,41,42,46,0,43,44,44],
[46,41,33,40,39,46,38,0,35,48],
[42,49,45,38,42,45,37,46,0,48],
[42,35,38,37,30,40,37,33,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,57,49,39,46,54,47,56,47],
[28,0,44,41,32,47,46,41,58,46],
[24,37,0,47,33,39,43,27,37,52],
[32,40,34,0,43,46,43,34,49,47],
[42,49,48,38,0,46,58,51,45,50],
[35,34,42,35,35,0,47,27,47,44],
[27,35,38,38,23,34,0,34,43,43],
[34,40,54,47,30,54,47,0,54,53],
[25,23,44,32,36,34,38,27,0,48],
[34,35,29,34,31,37,38,28,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,45,41,35,37,35,30,40,37],
[38,0,42,31,33,39,39,43,32,33],
[36,39,0,37,34,39,43,35,39,41],
[40,50,44,0,33,35,43,39,43,39],
[46,48,47,48,0,47,49,43,49,40],
[44,42,42,46,34,0,44,40,45,43],
[46,42,38,38,32,37,0,36,42,37],
[51,38,46,42,38,41,45,0,46,43],
[41,49,42,38,32,36,39,35,0,40],
[44,48,40,42,41,38,44,38,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,44,33,33,38,35,46,30,41],
[46,0,57,47,35,51,50,57,45,41],
[37,24,0,30,30,36,36,35,32,33],
[48,34,51,0,33,40,41,41,35,41],
[48,46,51,48,0,44,49,38,40,44],
[43,30,45,41,37,0,46,34,47,40],
[46,31,45,40,32,35,0,42,38,43],
[35,24,46,40,43,47,39,0,33,40],
[51,36,49,46,41,34,43,48,0,53],
[40,40,48,40,37,41,38,41,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,37,31,53,30,36,40,46,34],
[43,0,43,37,49,33,34,43,40,37],
[44,38,0,39,52,37,38,45,50,34],
[50,44,42,0,52,50,37,47,50,40],
[28,32,29,29,0,33,37,32,46,30],
[51,48,44,31,48,0,47,52,48,47],
[45,47,43,44,44,34,0,41,47,40],
[41,38,36,34,49,29,40,0,49,36],
[35,41,31,31,35,33,34,32,0,32],
[47,44,47,41,51,34,41,45,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,28,42,45,42,47,46,48,36],
[25,0,20,34,39,26,33,32,39,20],
[53,61,0,59,55,40,51,62,55,37],
[39,47,22,0,45,36,39,40,39,20],
[36,42,26,36,0,26,39,32,34,34],
[39,55,41,45,55,0,39,51,33,31],
[34,48,30,42,42,42,0,48,50,56],
[35,49,19,41,49,30,33,0,41,27],
[33,42,26,42,47,48,31,40,0,32],
[45,61,44,61,47,50,25,54,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,45,53,54,40,44,37,43,36],
[38,0,31,45,31,31,43,22,21,51],
[36,50,0,46,37,45,37,29,36,44],
[28,36,35,0,45,32,28,42,43,35],
[27,50,44,36,0,38,51,19,42,49],
[41,50,36,49,43,0,43,34,50,50],
[37,38,44,53,30,38,0,37,22,53],
[44,59,52,39,62,47,44,0,53,36],
[38,60,45,38,39,31,59,28,0,51],
[45,30,37,46,32,31,28,45,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,32,40,41,43,37,37,45,37],
[36,0,43,37,37,49,35,43,47,35],
[49,38,0,50,39,46,44,37,55,47],
[41,44,31,0,39,39,40,32,38,45],
[40,44,42,42,0,42,41,33,51,44],
[38,32,35,42,39,0,36,35,42,39],
[44,46,37,41,40,45,0,38,58,50],
[44,38,44,49,48,46,43,0,50,47],
[36,34,26,43,30,39,23,31,0,41],
[44,46,34,36,37,42,31,34,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,33,20,33,36,31,35,29,36],
[39,0,26,23,23,30,24,34,33,32],
[48,55,0,42,39,45,48,51,42,53],
[61,58,39,0,50,56,54,58,58,61],
[48,58,42,31,0,50,44,47,39,50],
[45,51,36,25,31,0,38,41,41,50],
[50,57,33,27,37,43,0,45,43,49],
[46,47,30,23,34,40,36,0,49,40],
[52,48,39,23,42,40,38,32,0,38],
[45,49,28,20,31,31,32,41,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,33,47,48,39,36,35,39,44],
[42,0,35,47,51,40,40,41,42,44],
[48,46,0,48,51,39,39,42,44,51],
[34,34,33,0,44,38,44,32,32,41],
[33,30,30,37,0,29,28,29,37,31],
[42,41,42,43,52,0,48,39,39,48],
[45,41,42,37,53,33,0,42,48,44],
[46,40,39,49,52,42,39,0,39,45],
[42,39,37,49,44,42,33,42,0,46],
[37,37,30,40,50,33,37,36,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,31,30,31,31,45,31,31,34],
[46,0,43,40,30,39,40,39,39,38],
[50,38,0,41,37,37,49,38,40,48],
[51,41,40,0,38,40,48,43,44,42],
[50,51,44,43,0,36,48,43,40,50],
[50,42,44,41,45,0,47,46,38,43],
[36,41,32,33,33,34,0,37,38,34],
[50,42,43,38,38,35,44,0,33,36],
[50,42,41,37,41,43,43,48,0,46],
[47,43,33,39,31,38,47,45,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,44,37,36,40,48,42,38,50],
[39,0,43,35,32,38,48,34,43,47],
[37,38,0,43,37,40,38,37,27,41],
[44,46,38,0,41,51,48,38,39,44],
[45,49,44,40,0,42,48,42,47,48],
[41,43,41,30,39,0,46,40,35,45],
[33,33,43,33,33,35,0,23,35,47],
[39,47,44,43,39,41,58,0,36,50],
[43,38,54,42,34,46,46,45,0,48],
[31,34,40,37,33,36,34,31,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,29,41,28,40,55,41,54,40],
[41,0,15,53,54,54,69,27,42,40],
[52,66,0,53,54,66,66,53,66,40],
[40,28,28,0,41,28,28,41,28,28],
[53,27,27,40,0,41,40,54,54,54],
[41,27,15,53,40,0,41,42,42,40],
[26,12,15,53,41,40,0,39,39,40],
[40,54,28,40,27,39,42,0,42,13],
[27,39,15,53,27,39,42,39,0,26],
[41,41,41,53,27,41,41,68,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,42,46,53,39,43,42,47,40],
[38,0,40,41,43,36,41,30,40,32],
[39,41,0,40,46,43,37,40,40,48],
[35,40,41,0,49,28,34,40,44,41],
[28,38,35,32,0,36,23,31,33,29],
[42,45,38,53,45,0,39,39,39,40],
[38,40,44,47,58,42,0,33,39,34],
[39,51,41,41,50,42,48,0,39,43],
[34,41,41,37,48,42,42,42,0,34],
[41,49,33,40,52,41,47,38,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,42,50,24,36,49,55,51,43],
[36,0,47,42,35,37,30,36,43,42],
[39,34,0,52,39,46,40,38,34,38],
[31,39,29,0,49,44,25,31,25,32],
[57,46,42,32,0,43,31,43,51,44],
[45,44,35,37,38,0,39,37,45,36],
[32,51,41,56,50,42,0,56,45,48],
[26,45,43,50,38,44,25,0,39,36],
[30,38,47,56,30,36,36,42,0,36],
[38,39,43,49,37,45,33,45,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,41,41,47,41,48,43,44,40],
[32,0,41,37,36,36,41,38,34,39],
[40,40,0,34,41,40,41,38,40,44],
[40,44,47,0,42,38,37,39,41,45],
[34,45,40,39,0,39,34,41,41,42],
[40,45,41,43,42,0,44,41,44,44],
[33,40,40,44,47,37,0,40,43,41],
[38,43,43,42,40,40,41,0,43,44],
[37,47,41,40,40,37,38,38,0,37],
[41,42,37,36,39,37,40,37,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,41,39,43,39,37,40,36,34],
[44,0,53,39,45,42,44,48,40,39],
[40,28,0,30,36,28,36,38,32,36],
[42,42,51,0,47,34,43,50,44,34],
[38,36,45,34,0,37,37,38,38,36],
[42,39,53,47,44,0,41,49,41,42],
[44,37,45,38,44,40,0,45,42,38],
[41,33,43,31,43,32,36,0,38,39],
[45,41,49,37,43,40,39,43,0,35],
[47,42,45,47,45,39,43,42,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,34,43,47,39,38,44,41,50],
[46,0,39,47,52,44,42,47,47,49],
[47,42,0,42,48,40,44,45,46,50],
[38,34,39,0,39,37,37,42,44,45],
[34,29,33,42,0,31,34,44,44,43],
[42,37,41,44,50,0,40,49,43,44],
[43,39,37,44,47,41,0,47,47,46],
[37,34,36,39,37,32,34,0,41,47],
[40,34,35,37,37,38,34,40,0,47],
[31,32,31,36,38,37,35,34,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,38,37,35,39,37,38,35,33],
[48,0,43,38,44,44,40,51,44,44],
[43,38,0,34,43,42,39,43,43,41],
[44,43,47,0,46,46,48,43,48,38],
[46,37,38,35,0,40,38,42,41,37],
[42,37,39,35,41,0,35,37,40,39],
[44,41,42,33,43,46,0,41,47,39],
[43,30,38,38,39,44,40,0,39,44],
[46,37,38,33,40,41,34,42,0,47],
[48,37,40,43,44,42,42,37,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,37,50,52,47,47,40,44,47],
[39,0,39,49,52,55,52,40,49,48],
[44,42,0,51,48,48,50,43,49,38],
[31,32,30,0,40,42,40,31,36,37],
[29,29,33,41,0,51,38,37,37,38],
[34,26,33,39,30,0,35,29,38,34],
[34,29,31,41,43,46,0,37,41,40],
[41,41,38,50,44,52,44,0,45,49],
[37,32,32,45,44,43,40,36,0,39],
[34,33,43,44,43,47,41,32,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,34,32,49,37,40,42,43,41],
[47,0,38,39,52,37,36,44,42,48],
[47,43,0,38,53,39,44,38,40,45],
[49,42,43,0,51,35,47,43,40,43],
[32,29,28,30,0,32,27,32,36,32],
[44,44,42,46,49,0,39,40,47,45],
[41,45,37,34,54,42,0,44,47,40],
[39,37,43,38,49,41,37,0,52,47],
[38,39,41,41,45,34,34,29,0,38],
[40,33,36,38,49,36,41,34,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,52,40,33,33,31,50,49,42],
[56,0,59,51,48,40,49,61,60,39],
[29,22,0,33,33,22,28,45,34,27],
[41,30,48,0,30,31,26,59,44,37],
[48,33,48,51,0,24,43,45,44,43],
[48,41,59,50,57,0,31,54,70,53],
[50,32,53,55,38,50,0,43,60,49],
[31,20,36,22,36,27,38,0,42,27],
[32,21,47,37,37,11,21,39,0,22],
[39,42,54,44,38,28,32,54,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,34,48,46,52,54,53,44,39],
[31,0,38,42,40,39,56,43,42,34],
[47,43,0,40,23,37,53,47,47,51],
[33,39,41,0,39,41,37,38,40,37],
[35,41,58,42,0,61,66,44,47,41],
[29,42,44,40,20,0,51,47,55,38],
[27,25,28,44,15,30,0,23,26,24],
[28,38,34,43,37,34,58,0,42,44],
[37,39,34,41,34,26,55,39,0,36],
[42,47,30,44,40,43,57,37,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,45,45,40,42,39,38,49,44],
[44,0,47,46,36,53,34,42,51,40],
[36,34,0,30,34,53,33,39,48,40],
[36,35,51,0,40,53,46,42,47,41],
[41,45,47,41,0,50,37,44,52,40],
[39,28,28,28,31,0,33,29,37,30],
[42,47,48,35,44,48,0,42,40,39],
[43,39,42,39,37,52,39,0,49,35],
[32,30,33,34,29,44,41,32,0,30],
[37,41,41,40,41,51,42,46,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,41,38,35,35,36,31,42,44],
[43,0,47,41,34,38,27,36,44,49],
[40,34,0,39,41,35,31,33,48,43],
[43,40,42,0,40,40,39,33,39,41],
[46,47,40,41,0,42,39,43,48,44],
[46,43,46,41,39,0,31,37,46,48],
[45,54,50,42,42,50,0,41,46,38],
[50,45,48,48,38,44,40,0,43,45],
[39,37,33,42,33,35,35,38,0,37],
[37,32,38,40,37,33,43,36,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,46,48,49,40,41,40,38,53],
[41,0,35,41,46,47,33,45,38,49],
[35,46,0,40,36,44,38,38,40,45],
[33,40,41,0,50,40,40,39,39,47],
[32,35,45,31,0,38,28,42,31,45],
[41,34,37,41,43,0,34,43,25,38],
[40,48,43,41,53,47,0,49,47,54],
[41,36,43,42,39,38,32,0,37,38],
[43,43,41,42,50,56,34,44,0,51],
[28,32,36,34,36,43,27,43,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,45,36,49,29,32,35,25,28],
[45,0,48,45,57,53,48,46,38,43],
[36,33,0,42,35,41,34,48,26,34],
[45,36,39,0,45,40,45,54,43,43],
[32,24,46,36,0,35,26,47,31,29],
[52,28,40,41,46,0,43,49,42,40],
[49,33,47,36,55,38,0,49,34,34],
[46,35,33,27,34,32,32,0,26,41],
[56,43,55,38,50,39,47,55,0,50],
[53,38,47,38,52,41,47,40,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,43,25,41,35,52,53,24,47],
[40,0,44,32,37,31,41,46,40,45],
[38,37,0,38,32,41,47,42,28,45],
[56,49,43,0,34,51,47,46,37,54],
[40,44,49,47,0,40,46,56,44,51],
[46,50,40,30,41,0,47,42,35,63],
[29,40,34,34,35,34,0,38,28,49],
[28,35,39,35,25,39,43,0,32,37],
[57,41,53,44,37,46,53,49,0,59],
[34,36,36,27,30,18,32,44,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,37,28,44,32,31,29,28,39],
[53,0,42,43,52,31,41,38,48,44],
[44,39,0,36,47,39,36,42,36,45],
[53,38,45,0,44,38,36,40,42,53],
[37,29,34,37,0,31,26,28,40,36],
[49,50,42,43,50,0,36,37,44,44],
[50,40,45,45,55,45,0,40,50,54],
[52,43,39,41,53,44,41,0,42,44],
[53,33,45,39,41,37,31,39,0,43],
[42,37,36,28,45,37,27,37,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,34,36,44,47,36,37,37],
[42,0,36,32,34,41,42,38,36,35],
[42,45,0,40,36,43,49,44,44,45],
[47,49,41,0,38,48,60,48,45,54],
[45,47,45,43,0,44,50,45,38,49],
[37,40,38,33,37,0,41,39,39,39],
[34,39,32,21,31,40,0,34,35,32],
[45,43,37,33,36,42,47,0,34,40],
[44,45,37,36,43,42,46,47,0,44],
[44,46,36,27,32,42,49,41,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,55,40,39,36,37,41,37,51],
[39,0,45,41,39,41,34,34,32,42],
[26,36,0,30,29,31,35,32,30,37],
[41,40,51,0,35,36,41,41,37,41],
[42,42,52,46,0,45,50,33,43,50],
[45,40,50,45,36,0,37,31,34,44],
[44,47,46,40,31,44,0,33,34,46],
[40,47,49,40,48,50,48,0,39,51],
[44,49,51,44,38,47,47,42,0,39],
[30,39,44,40,31,37,35,30,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,33,42,46,48,50,34,26,44],
[38,0,35,39,41,50,44,48,37,38],
[48,46,0,49,50,50,38,46,39,34],
[39,42,32,0,35,33,44,35,27,49],
[35,40,31,46,0,47,41,32,43,52],
[33,31,31,48,34,0,39,33,16,43],
[31,37,43,37,40,42,0,39,38,54],
[47,33,35,46,49,48,42,0,41,45],
[55,44,42,54,38,65,43,40,0,50],
[37,43,47,32,29,38,27,36,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,44,47,37,35,44,56,35,48],
[46,0,46,45,37,49,33,70,37,49],
[37,35,0,47,25,47,47,72,35,60],
[34,36,34,0,37,48,21,81,48,49],
[44,44,56,44,0,35,44,56,44,44],
[46,32,34,33,46,0,33,81,44,46],
[37,48,34,60,37,48,0,69,36,48],
[25,11,9,0,25,0,12,0,11,37],
[46,44,46,33,37,37,45,70,0,58],
[33,32,21,32,37,35,33,44,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,43,41,48,40,41,48,51,35],
[39,0,37,36,42,38,49,43,44,40],
[38,44,0,50,46,34,44,48,52,43],
[40,45,31,0,50,43,38,47,54,41],
[33,39,35,31,0,45,38,35,39,33],
[41,43,47,38,36,0,44,38,45,38],
[40,32,37,43,43,37,0,42,47,39],
[33,38,33,34,46,43,39,0,42,39],
[30,37,29,27,42,36,34,39,0,44],
[46,41,38,40,48,43,42,42,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,35,34,38,34,34,31,36,34],
[46,0,39,43,41,42,43,39,41,37],
[46,42,0,52,50,37,46,48,43,51],
[47,38,29,0,35,41,39,35,31,33],
[43,40,31,46,0,43,39,35,37,36],
[47,39,44,40,38,0,40,40,41,40],
[47,38,35,42,42,41,0,37,36,45],
[50,42,33,46,46,41,44,0,34,42],
[45,40,38,50,44,40,45,47,0,41],
[47,44,30,48,45,41,36,39,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,44,36,41,42,43,38,37,38],
[44,0,52,40,38,47,38,45,36,42],
[37,29,0,27,37,41,34,32,26,34],
[45,41,54,0,48,41,37,47,43,44],
[40,43,44,33,0,48,31,40,35,39],
[39,34,40,40,33,0,25,42,31,33],
[38,43,47,44,50,56,0,40,39,45],
[43,36,49,34,41,39,41,0,36,50],
[44,45,55,38,46,50,42,45,0,47],
[43,39,47,37,42,48,36,31,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,40,39,36,47,41,37,36,44],
[43,0,36,41,39,42,43,41,41,39],
[41,45,0,43,40,37,43,38,42,46],
[42,40,38,0,45,34,37,35,37,42],
[45,42,41,36,0,34,43,42,35,42],
[34,39,44,47,47,0,44,34,42,40],
[40,38,38,44,38,37,0,39,39,42],
[44,40,43,46,39,47,42,0,45,40],
[45,40,39,44,46,39,42,36,0,38],
[37,42,35,39,39,41,39,41,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,36,40,41,38,30,33,40,30],
[45,0,42,40,35,40,36,37,42,33],
[45,39,0,43,37,34,31,35,48,36],
[41,41,38,0,33,36,32,38,44,34],
[40,46,44,48,0,42,43,37,52,43],
[43,41,47,45,39,0,38,39,44,40],
[51,45,50,49,38,43,0,41,49,39],
[48,44,46,43,44,42,40,0,46,39],
[41,39,33,37,29,37,32,35,0,35],
[51,48,45,47,38,41,42,42,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,44,36,39,40,35,41,33,48],
[51,0,53,42,39,51,40,48,41,47],
[37,28,0,52,33,37,48,46,40,48],
[45,39,29,0,35,40,45,33,37,44],
[42,42,48,46,0,51,49,46,39,54],
[41,30,44,41,30,0,33,41,36,43],
[46,41,33,36,32,48,0,37,38,49],
[40,33,35,48,35,40,44,0,34,49],
[48,40,41,44,42,45,43,47,0,48],
[33,34,33,37,27,38,32,32,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,40,38,40,46,40,36,42,37],
[36,0,29,41,31,38,32,27,29,37],
[41,52,0,46,33,43,39,31,35,37],
[43,40,35,0,30,47,38,34,29,38],
[41,50,48,51,0,51,50,41,39,43],
[35,43,38,34,30,0,25,28,27,30],
[41,49,42,43,31,56,0,40,41,34],
[45,54,50,47,40,53,41,0,42,45],
[39,52,46,52,42,54,40,39,0,43],
[44,44,44,43,38,51,47,36,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,45,37,44,37,44,30,52,37],
[30,0,38,29,44,30,44,30,52,37],
[36,43,0,36,51,58,44,29,51,44],
[44,52,45,0,45,52,45,37,45,38],
[37,37,30,36,0,45,51,37,45,44],
[44,51,23,29,36,0,51,37,44,44],
[37,37,37,36,30,30,0,52,45,36],
[51,51,52,44,44,44,29,0,51,44],
[29,29,30,36,36,37,36,30,0,29],
[44,44,37,43,37,37,45,37,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,36,29,38,38,46,43,42,43],
[41,0,35,28,37,33,43,34,38,36],
[45,46,0,35,43,52,43,39,46,42],
[52,53,46,0,36,45,49,38,46,44],
[43,44,38,45,0,51,44,37,45,45],
[43,48,29,36,30,0,30,29,31,32],
[35,38,38,32,37,51,0,37,32,42],
[38,47,42,43,44,52,44,0,41,37],
[39,43,35,35,36,50,49,40,0,45],
[38,45,39,37,36,49,39,44,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,40,50,51,43,49,47,43],
[37,0,45,40,53,49,32,41,45,38],
[39,36,0,41,52,43,42,42,43,42],
[41,41,40,0,49,49,34,43,48,45],
[31,28,29,32,0,41,33,38,39,35],
[30,32,38,32,40,0,32,34,39,39],
[38,49,39,47,48,49,0,50,44,42],
[32,40,39,38,43,47,31,0,46,43],
[34,36,38,33,42,42,37,35,0,36],
[38,43,39,36,46,42,39,38,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,29,45,28,35,36,37,44,28],
[53,0,35,44,27,25,44,54,44,26],
[52,46,0,43,55,43,36,44,62,44],
[36,37,38,0,28,26,36,27,44,36],
[53,54,26,53,0,44,36,44,44,35],
[46,56,38,55,37,0,45,46,63,46],
[45,37,45,45,45,36,0,53,54,36],
[44,27,37,54,37,35,28,0,26,26],
[37,37,19,37,37,18,27,55,0,28],
[53,55,37,45,46,35,45,55,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,49,41,49,43,53,44,37,43],
[30,0,39,41,46,42,48,44,38,33],
[32,42,0,33,46,40,49,40,36,34],
[40,40,48,0,45,43,43,47,47,42],
[32,35,35,36,0,36,46,40,36,28],
[38,39,41,38,45,0,48,45,37,37],
[28,33,32,38,35,33,0,38,35,32],
[37,37,41,34,41,36,43,0,32,29],
[44,43,45,34,45,44,46,49,0,37],
[38,48,47,39,53,44,49,52,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,40,39,34,35,42,38,38,43],
[35,0,39,39,27,32,35,35,43,35],
[41,42,0,37,37,37,44,42,39,43],
[42,42,44,0,36,44,45,46,43,41],
[47,54,44,45,0,30,54,38,50,44],
[46,49,44,37,51,0,53,43,49,48],
[39,46,37,36,27,28,0,36,44,39],
[43,46,39,35,43,38,45,0,38,42],
[43,38,42,38,31,32,37,43,0,45],
[38,46,38,40,37,33,42,39,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,38,48,41,38,41,45,50,41],
[41,0,37,41,41,49,39,39,42,36],
[43,44,0,43,46,39,46,46,38,41],
[33,40,38,0,44,43,41,42,42,34],
[40,40,35,37,0,39,37,40,40,39],
[43,32,42,38,42,0,44,36,44,36],
[40,42,35,40,44,37,0,44,41,36],
[36,42,35,39,41,45,37,0,37,40],
[31,39,43,39,41,37,40,44,0,39],
[40,45,40,47,42,45,45,41,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,41,44,37,47,43,32,36,39],
[46,0,40,47,43,47,49,41,42,45],
[40,41,0,50,38,51,50,42,32,49],
[37,34,31,0,28,46,47,36,37,36],
[44,38,43,53,0,53,53,43,46,46],
[34,34,30,35,28,0,40,32,33,37],
[38,32,31,34,28,41,0,32,27,31],
[49,40,39,45,38,49,49,0,43,46],
[45,39,49,44,35,48,54,38,0,47],
[42,36,32,45,35,44,50,35,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,44,45,50,46,39,44,41,44],
[35,0,39,45,42,48,45,51,37,45],
[37,42,0,39,34,49,44,45,33,44],
[36,36,42,0,35,42,36,40,31,38],
[31,39,47,46,0,48,40,44,29,41],
[35,33,32,39,33,0,33,38,29,33],
[42,36,37,45,41,48,0,47,29,42],
[37,30,36,41,37,43,34,0,33,43],
[40,44,48,50,52,52,52,48,0,51],
[37,36,37,43,40,48,39,38,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,31,38,35,36,38,41,36,35],
[34,0,31,40,34,45,38,33,42,32],
[50,50,0,44,42,45,38,36,42,38],
[43,41,37,0,37,35,40,37,38,33],
[46,47,39,44,0,42,42,38,46,38],
[45,36,36,46,39,0,45,43,40,35],
[43,43,43,41,39,36,0,37,36,41],
[40,48,45,44,43,38,44,0,41,39],
[45,39,39,43,35,41,45,40,0,38],
[46,49,43,48,43,46,40,42,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,37,35,43,43,41,37,36,39],
[44,0,53,46,52,45,47,43,39,45],
[44,28,0,33,39,42,46,35,41,43],
[46,35,48,0,43,42,42,37,40,37],
[38,29,42,38,0,38,41,41,35,41],
[38,36,39,39,43,0,44,38,33,44],
[40,34,35,39,40,37,0,31,34,32],
[44,38,46,44,40,43,50,0,40,47],
[45,42,40,41,46,48,47,41,0,50],
[42,36,38,44,40,37,49,34,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,20,10,21,11,33,39,30,11],
[39,0,30,30,29,11,43,20,41,11],
[61,51,0,21,30,0,22,30,49,20],
[71,51,60,0,30,32,42,51,62,43],
[60,52,51,51,0,21,41,51,51,23],
[70,70,81,49,60,0,32,61,72,52],
[48,38,59,39,40,49,0,38,59,29],
[42,61,51,30,30,20,43,0,39,42],
[51,40,32,19,30,9,22,42,0,12],
[70,70,61,38,58,29,52,39,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,36,42,50,42,42,40,62,41],
[38,0,50,49,48,52,36,31,51,46],
[45,31,0,26,48,48,37,28,50,55],
[39,32,55,0,47,47,50,38,49,57],
[31,33,33,34,0,31,37,36,39,41],
[39,29,33,34,50,0,28,24,41,41],
[39,45,44,31,44,53,0,44,51,41],
[41,50,53,43,45,57,37,0,51,52],
[19,30,31,32,42,40,30,30,0,38],
[40,35,26,24,40,40,40,29,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,33,42,39,40,28,27,21,34],
[45,0,35,54,47,41,25,42,34,44],
[48,46,0,54,52,45,46,43,35,39],
[39,27,27,0,32,40,34,39,35,30],
[42,34,29,49,0,42,37,31,36,35],
[41,40,36,41,39,0,34,46,32,39],
[53,56,35,47,44,47,0,52,49,44],
[54,39,38,42,50,35,29,0,42,47],
[60,47,46,46,45,49,32,39,0,44],
[47,37,42,51,46,42,37,34,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,51,51,49,60,30,40,50,30],
[41,0,41,52,49,72,40,30,30,31],
[30,40,0,20,29,40,29,19,40,20],
[30,29,61,0,38,51,29,19,29,20],
[32,32,52,43,0,62,32,30,41,22],
[21,9,41,30,19,0,20,10,19,20],
[51,41,52,52,49,61,0,30,50,50],
[41,51,62,62,51,71,51,0,71,31],
[31,51,41,52,40,62,31,10,0,20],
[51,50,61,61,59,61,31,50,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,32,32,34,49,51,66,49,49],
[47,0,47,64,32,47,64,49,64,32],
[49,34,0,81,66,81,49,66,81,49],
[49,17,0,0,49,64,49,49,49,49],
[47,49,15,32,0,49,64,49,47,64],
[32,34,0,17,32,0,49,34,32,49],
[30,17,32,32,17,32,0,49,47,15],
[15,32,15,32,32,47,32,0,15,32],
[32,17,0,32,34,49,34,66,0,32],
[32,49,32,32,17,32,66,49,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,35,44,35,44,45,47,51,45],
[40,0,36,37,32,39,47,39,58,47],
[46,45,0,37,48,42,46,53,62,42],
[37,44,44,0,42,41,40,41,55,43],
[46,49,33,39,0,42,43,45,54,39],
[37,42,39,40,39,0,46,39,64,40],
[36,34,35,41,38,35,0,45,65,42],
[34,42,28,40,36,42,36,0,40,42],
[30,23,19,26,27,17,16,41,0,28],
[36,34,39,38,42,41,39,39,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,39,46,39,47,44,43,43,41],
[31,0,41,35,36,30,32,35,42,41],
[42,40,0,46,48,38,41,46,40,41],
[35,46,35,0,46,42,40,39,37,39],
[42,45,33,35,0,41,38,41,41,34],
[34,51,43,39,40,0,42,38,37,40],
[37,49,40,41,43,39,0,43,34,44],
[38,46,35,42,40,43,38,0,39,40],
[38,39,41,44,40,44,47,42,0,31],
[40,40,40,42,47,41,37,41,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,36,36,39,40,39,40,40,38],
[39,0,44,41,37,44,42,35,43,37],
[45,37,0,42,39,44,35,33,40,41],
[45,40,39,0,40,37,38,34,40,36],
[42,44,42,41,0,45,38,35,40,42],
[41,37,37,44,36,0,42,33,41,38],
[42,39,46,43,43,39,0,40,36,31],
[41,46,48,47,46,48,41,0,47,40],
[41,38,41,41,41,40,45,34,0,34],
[43,44,40,45,39,43,50,41,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,32,37,39,32,62,44,24,30],
[29,0,41,47,42,46,39,34,31,49],
[49,40,0,51,28,35,43,42,48,32],
[44,34,30,0,34,32,32,39,29,36],
[42,39,53,47,0,41,48,40,54,55],
[49,35,46,49,40,0,46,34,43,49],
[19,42,38,49,33,35,0,29,38,32],
[37,47,39,42,41,47,52,0,36,42],
[57,50,33,52,27,38,43,45,0,37],
[51,32,49,45,26,32,49,39,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,45,53,50,43,43,46,43,37],
[38,0,40,42,50,43,42,37,38,32],
[36,41,0,40,42,31,32,36,33,36],
[28,39,41,0,40,43,51,46,36,35],
[31,31,39,41,0,31,35,34,34,33],
[38,38,50,38,50,0,41,38,32,39],
[38,39,49,30,46,40,0,33,34,31],
[35,44,45,35,47,43,48,0,36,45],
[38,43,48,45,47,49,47,45,0,34],
[44,49,45,46,48,42,50,36,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,39,42,24,39,36,43,39,24],
[47,0,36,45,46,43,41,51,44,33],
[42,45,0,45,41,32,48,35,43,43],
[39,36,36,0,38,44,33,50,37,27],
[57,35,40,43,0,48,41,48,40,42],
[42,38,49,37,33,0,35,49,33,33],
[45,40,33,48,40,46,0,44,31,28],
[38,30,46,31,33,32,37,0,36,29],
[42,37,38,44,41,48,50,45,0,34],
[57,48,38,54,39,48,53,52,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,33,40,46,41,40,40,44,43],
[42,0,41,43,44,41,37,48,45,49],
[48,40,0,40,47,45,42,45,42,48],
[41,38,41,0,45,47,37,48,42,45],
[35,37,34,36,0,34,35,39,38,38],
[40,40,36,34,47,0,37,37,38,45],
[41,44,39,44,46,44,0,48,39,49],
[41,33,36,33,42,44,33,0,36,43],
[37,36,39,39,43,43,42,45,0,50],
[38,32,33,36,43,36,32,38,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,39,26,52,32,40,27,34,39],
[32,0,36,27,36,37,51,22,36,36],
[42,45,0,36,42,32,45,33,25,57],
[55,54,45,0,42,35,46,41,33,53],
[29,45,39,39,0,42,43,27,40,43],
[49,44,49,46,39,0,46,35,43,48],
[41,30,36,35,38,35,0,30,36,40],
[54,59,48,40,54,46,51,0,51,48],
[47,45,56,48,41,38,45,30,0,47],
[42,45,24,28,38,33,41,33,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,24,42,38,34,34,36,36,34],
[45,0,40,41,42,43,38,34,39,35],
[57,41,0,51,43,50,45,41,39,48],
[39,40,30,0,46,42,32,42,43,38],
[43,39,38,35,0,39,36,42,44,41],
[47,38,31,39,42,0,35,35,40,37],
[47,43,36,49,45,46,0,49,49,40],
[45,47,40,39,39,46,32,0,45,42],
[45,42,42,38,37,41,32,36,0,39],
[47,46,33,43,40,44,41,39,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,31,30,42,34,37,46,38,35],
[37,0,37,40,42,44,51,52,38,39],
[50,44,0,43,46,36,48,51,34,47],
[51,41,38,0,46,41,53,53,37,46],
[39,39,35,35,0,36,42,53,38,39],
[47,37,45,40,45,0,52,48,41,44],
[44,30,33,28,39,29,0,42,32,36],
[35,29,30,28,28,33,39,0,29,34],
[43,43,47,44,43,40,49,52,0,44],
[46,42,34,35,42,37,45,47,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,41,40,36,35,39,34,33],
[40,0,42,44,47,45,49,37,39,45],
[40,39,0,38,46,39,38,37,34,38],
[40,37,43,0,39,40,39,40,39,39],
[41,34,35,42,0,40,43,41,41,41],
[45,36,42,41,41,0,42,34,32,42],
[46,32,43,42,38,39,0,42,37,37],
[42,44,44,41,40,47,39,0,44,39],
[47,42,47,42,40,49,44,37,0,47],
[48,36,43,42,40,39,44,42,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,48,37,53,33,55,51,58,52],
[41,0,45,42,35,41,49,37,58,45],
[33,36,0,41,44,38,54,47,50,42],
[44,39,40,0,47,34,45,43,44,43],
[28,46,37,34,0,35,43,35,52,36],
[48,40,43,47,46,0,42,48,55,41],
[26,32,27,36,38,39,0,36,46,37],
[30,44,34,38,46,33,45,0,50,45],
[23,23,31,37,29,26,35,31,0,31],
[29,36,39,38,45,40,44,36,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,41,57,56,66,57,65,50,33],
[50,0,57,49,40,73,41,57,65,41],
[40,24,0,57,56,66,42,55,59,27],
[24,32,24,0,32,55,41,39,42,34],
[25,41,25,49,0,66,50,32,43,35],
[15,8,15,26,15,0,17,16,41,17],
[24,40,39,40,31,64,0,47,48,33],
[16,24,26,42,49,65,34,0,42,18],
[31,16,22,39,38,40,33,39,0,33],
[48,40,54,47,46,64,48,63,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,52,46,44,45,52,59,31,44],
[27,0,40,27,43,39,39,30,30,38],
[29,41,0,29,45,40,48,38,45,25],
[35,54,52,0,51,44,66,51,46,37],
[37,38,36,30,0,22,34,28,38,27],
[36,42,41,37,59,0,33,24,45,47],
[29,42,33,15,47,48,0,48,34,35],
[22,51,43,30,53,57,33,0,47,47],
[50,51,36,35,43,36,47,34,0,29],
[37,43,56,44,54,34,46,34,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,43,43,42,42,43,39,40,48],
[36,0,42,35,38,36,38,37,50,45],
[38,39,0,43,39,34,35,38,34,47],
[38,46,38,0,32,39,38,40,49,45],
[39,43,42,49,0,43,40,43,49,50],
[39,45,47,42,38,0,41,38,45,52],
[38,43,46,43,41,40,0,34,45,48],
[42,44,43,41,38,43,47,0,42,46],
[41,31,47,32,32,36,36,39,0,41],
[33,36,34,36,31,29,33,35,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,42,36,39,37,42,43,50,40],
[34,0,36,37,34,46,37,38,43,37],
[39,45,0,36,35,43,37,35,41,41],
[45,44,45,0,38,43,46,36,45,38],
[42,47,46,43,0,42,43,41,41,38],
[44,35,38,38,39,0,39,35,42,38],
[39,44,44,35,38,42,0,36,49,40],
[38,43,46,45,40,46,45,0,36,39],
[31,38,40,36,40,39,32,45,0,39],
[41,44,40,43,43,43,41,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,48,55,63,48,38,46,46,44],
[38,0,33,49,52,24,34,45,51,38],
[33,48,0,47,51,33,32,49,56,47],
[26,32,34,0,55,32,27,45,36,43],
[18,29,30,26,0,16,15,37,32,32],
[33,57,48,49,65,0,38,36,46,50],
[43,47,49,54,66,43,0,46,38,57],
[35,36,32,36,44,45,35,0,39,41],
[35,30,25,45,49,35,43,42,0,35],
[37,43,34,38,49,31,24,40,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,38,37,39,39,38,42,44,40],
[40,0,46,43,48,43,46,47,52,37],
[43,35,0,40,34,38,37,40,41,35],
[44,38,41,0,41,40,43,43,40,41],
[42,33,47,40,0,42,40,42,43,39],
[42,38,43,41,39,0,43,42,42,38],
[43,35,44,38,41,38,0,42,49,36],
[39,34,41,38,39,39,39,0,42,31],
[37,29,40,41,38,39,32,39,0,30],
[41,44,46,40,42,43,45,50,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,46,51,33,42,35,36,31,39],
[45,0,54,48,47,29,40,38,38,43],
[35,27,0,40,26,27,36,30,24,25],
[30,33,41,0,33,27,32,33,30,28],
[48,34,55,48,0,45,50,39,38,42],
[39,52,54,54,36,0,49,40,37,38],
[46,41,45,49,31,32,0,26,27,46],
[45,43,51,48,42,41,55,0,35,52],
[50,43,57,51,43,44,54,46,0,36],
[42,38,56,53,39,43,35,29,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,46,44,35,49,45,48,40,36],
[40,0,49,43,41,51,43,49,34,44],
[35,32,0,35,30,40,32,41,21,19],
[37,38,46,0,39,48,35,41,33,29],
[46,40,51,42,0,53,44,48,44,44],
[32,30,41,33,28,0,36,44,35,33],
[36,38,49,46,37,45,0,48,37,33],
[33,32,40,40,33,37,33,0,25,32],
[41,47,60,48,37,46,44,56,0,41],
[45,37,62,52,37,48,48,49,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,35,40,51,39,41,45,36,43],
[47,0,40,57,51,43,49,50,42,47],
[46,41,0,50,50,39,47,41,41,47],
[41,24,31,0,44,36,40,36,32,37],
[30,30,31,37,0,32,33,33,30,36],
[42,38,42,45,49,0,47,44,41,52],
[40,32,34,41,48,34,0,42,34,43],
[36,31,40,45,48,37,39,0,32,38],
[45,39,40,49,51,40,47,49,0,47],
[38,34,34,44,45,29,38,43,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,31,42,39,25,35,32,38,32],
[48,0,21,38,36,34,32,34,29,37],
[50,60,0,43,40,39,38,40,45,44],
[39,43,38,0,45,44,34,28,42,44],
[42,45,41,36,0,47,28,26,39,38],
[56,47,42,37,34,0,46,44,42,39],
[46,49,43,47,53,35,0,43,51,41],
[49,47,41,53,55,37,38,0,45,52],
[43,52,36,39,42,39,30,36,0,40],
[49,44,37,37,43,42,40,29,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,50,42,43,38,44,40,42,42],
[43,0,48,44,45,42,40,44,33,34],
[31,33,0,46,36,43,43,37,40,43],
[39,37,35,0,40,35,43,35,38,48],
[38,36,45,41,0,38,42,39,38,42],
[43,39,38,46,43,0,43,42,38,41],
[37,41,38,38,39,38,0,38,38,45],
[41,37,44,46,42,39,43,0,45,44],
[39,48,41,43,43,43,43,36,0,45],
[39,47,38,33,39,40,36,37,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,46,31,40,41,39,24,43,29],
[50,0,56,48,51,48,56,38,40,48],
[35,25,0,30,41,49,48,37,40,38],
[50,33,51,0,36,48,51,42,46,43],
[41,30,40,45,0,44,39,41,39,40],
[40,33,32,33,37,0,36,36,33,29],
[42,25,33,30,42,45,0,35,45,27],
[57,43,44,39,40,45,46,0,39,41],
[38,41,41,35,42,48,36,42,0,40],
[52,33,43,38,41,52,54,40,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,34,25,47,35,48,23,35,24],
[44,0,46,57,47,45,48,45,58,34],
[47,35,0,48,34,33,35,36,46,35],
[56,24,33,0,46,33,35,69,35,46],
[34,34,47,35,0,22,47,35,35,12],
[46,36,48,48,59,0,60,59,37,46],
[33,33,46,46,34,21,0,34,35,11],
[58,36,45,12,46,22,47,0,34,47],
[46,23,35,46,46,44,46,47,0,34],
[57,47,46,35,69,35,70,34,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,29,43,33,40,39,34,35,30],
[48,0,47,52,37,41,50,44,47,37],
[52,34,0,38,42,43,43,46,49,53],
[38,29,43,0,46,44,54,39,37,49],
[48,44,39,35,0,47,46,50,44,44],
[41,40,38,37,34,0,50,45,39,31],
[42,31,38,27,35,31,0,29,33,44],
[47,37,35,42,31,36,52,0,33,38],
[46,34,32,44,37,42,48,48,0,44],
[51,44,28,32,37,50,37,43,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,44,49,44,48,42,40,47,45],
[39,0,48,44,44,45,42,42,51,42],
[37,33,0,42,36,40,34,45,49,43],
[32,37,39,0,39,39,35,36,45,32],
[37,37,45,42,0,47,43,44,50,39],
[33,36,41,42,34,0,34,39,48,34],
[39,39,47,46,38,47,0,42,44,38],
[41,39,36,45,37,42,39,0,44,31],
[34,30,32,36,31,33,37,37,0,31],
[36,39,38,49,42,47,43,50,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,56,46,47,46,60,44,41,49],
[42,0,36,47,40,42,48,33,39,37],
[25,45,0,46,35,45,46,31,34,44],
[35,34,35,0,41,38,46,29,33,40],
[34,41,46,40,0,49,46,32,37,43],
[35,39,36,43,32,0,46,23,40,44],
[21,33,35,35,35,35,0,28,30,41],
[37,48,50,52,49,58,53,0,47,53],
[40,42,47,48,44,41,51,34,0,51],
[32,44,37,41,38,37,40,28,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,39,42,38,35,35,36,35,35],
[40,0,42,48,42,42,37,43,39,37],
[42,39,0,36,45,46,38,40,42,37],
[39,33,45,0,40,35,41,35,43,37],
[43,39,36,41,0,44,34,37,39,41],
[46,39,35,46,37,0,32,32,39,34],
[46,44,43,40,47,49,0,40,38,55],
[45,38,41,46,44,49,41,0,49,40],
[46,42,39,38,42,42,43,32,0,37],
[46,44,44,44,40,47,26,41,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,43,31,41,39,41,42,49,28],
[38,0,40,37,37,40,41,45,42,40],
[38,41,0,36,45,43,36,48,47,44],
[50,44,45,0,38,43,41,52,51,43],
[40,44,36,43,0,45,40,35,45,42],
[42,41,38,38,36,0,42,42,47,29],
[40,40,45,40,41,39,0,48,49,32],
[39,36,33,29,46,39,33,0,43,35],
[32,39,34,30,36,34,32,38,0,29],
[53,41,37,38,39,52,49,46,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,48,34,52,48,38,54,31,39],
[39,0,45,41,47,50,37,38,41,36],
[33,36,0,29,48,43,33,44,29,30],
[47,40,52,0,50,42,27,51,36,39],
[29,34,33,31,0,33,33,38,33,27],
[33,31,38,39,48,0,33,37,33,43],
[43,44,48,54,48,48,0,44,32,46],
[27,43,37,30,43,44,37,0,34,30],
[50,40,52,45,48,48,49,47,0,50],
[42,45,51,42,54,38,35,51,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,34,37,38,37,35,39,46,41],
[46,0,30,34,46,41,45,40,43,41],
[47,51,0,46,47,38,45,35,47,37],
[44,47,35,0,47,41,39,32,38,38],
[43,35,34,34,0,35,43,36,41,31],
[44,40,43,40,46,0,44,43,43,45],
[46,36,36,42,38,37,0,39,41,46],
[42,41,46,49,45,38,42,0,46,45],
[35,38,34,43,40,38,40,35,0,33],
[40,40,44,43,50,36,35,36,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,41,48,36,40,43,42,38,35],
[42,0,41,45,42,41,46,43,40,38],
[40,40,0,45,36,38,41,40,34,38],
[33,36,36,0,33,35,36,34,32,32],
[45,39,45,48,0,36,47,46,36,33],
[41,40,43,46,45,0,48,44,43,41],
[38,35,40,45,34,33,0,44,35,35],
[39,38,41,47,35,37,37,0,34,33],
[43,41,47,49,45,38,46,47,0,36],
[46,43,43,49,48,40,46,48,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,45,29,34,40,49,44,40,38],
[31,0,38,31,34,35,43,37,31,39],
[36,43,0,41,37,41,52,50,34,42],
[52,50,40,0,36,39,44,41,38,38],
[47,47,44,45,0,39,52,44,43,41],
[41,46,40,42,42,0,46,33,45,47],
[32,38,29,37,29,35,0,37,28,32],
[37,44,31,40,37,48,44,0,35,38],
[41,50,47,43,38,36,53,46,0,36],
[43,42,39,43,40,34,49,43,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,35,44,40,41,37,32,34,41],
[38,0,34,41,41,39,40,39,39,42],
[46,47,0,48,39,44,39,39,34,44],
[37,40,33,0,33,34,38,34,37,35],
[41,40,42,48,0,36,32,38,41,38],
[40,42,37,47,45,0,42,34,41,41],
[44,41,42,43,49,39,0,39,39,42],
[49,42,42,47,43,47,42,0,39,46],
[47,42,47,44,40,40,42,42,0,45],
[40,39,37,46,43,40,39,35,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,36,48,44,39,37,50,38,48],
[39,0,41,44,48,43,42,44,49,49],
[45,40,0,46,46,44,44,47,53,44],
[33,37,35,0,45,40,42,35,40,47],
[37,33,35,36,0,39,42,40,44,38],
[42,38,37,41,42,0,42,43,42,42],
[44,39,37,39,39,39,0,43,47,40],
[31,37,34,46,41,38,38,0,39,35],
[43,32,28,41,37,39,34,42,0,40],
[33,32,37,34,43,39,41,46,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,24,51,50,40,37,33,46,53],
[36,0,34,43,51,55,47,52,46,49],
[57,47,0,48,55,49,42,30,55,63],
[30,38,33,0,49,49,37,33,45,52],
[31,30,26,32,0,54,38,35,44,46],
[41,26,32,32,27,0,48,37,38,40],
[44,34,39,44,43,33,0,34,51,54],
[48,29,51,48,46,44,47,0,39,60],
[35,35,26,36,37,43,30,42,0,58],
[28,32,18,29,35,41,27,21,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,29,31,23,38,35,32,41,39],
[43,0,36,38,30,37,40,25,45,42],
[52,45,0,37,33,56,50,36,44,42],
[50,43,44,0,47,53,49,37,41,44],
[58,51,48,34,0,55,50,44,51,47],
[43,44,25,28,26,0,39,24,31,36],
[46,41,31,32,31,42,0,27,33,29],
[49,56,45,44,37,57,54,0,52,41],
[40,36,37,40,30,50,48,29,0,49],
[42,39,39,37,34,45,52,40,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,35,52,30,34,47,31,39,42],
[45,0,41,44,37,43,44,47,37,46],
[46,40,0,49,43,48,38,57,48,44],
[29,37,32,0,33,33,41,30,33,37],
[51,44,38,48,0,41,34,46,42,34],
[47,38,33,48,40,0,45,47,41,41],
[34,37,43,40,47,36,0,41,36,43],
[50,34,24,51,35,34,40,0,33,33],
[42,44,33,48,39,40,45,48,0,38],
[39,35,37,44,47,40,38,48,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,37,40,39,41,35,48,39,38],
[39,0,34,29,41,38,33,37,32,33],
[44,47,0,36,46,33,44,48,39,41],
[41,52,45,0,47,45,39,45,44,43],
[42,40,35,34,0,41,32,43,40,35],
[40,43,48,36,40,0,35,45,37,44],
[46,48,37,42,49,46,0,48,46,42],
[33,44,33,36,38,36,33,0,31,35],
[42,49,42,37,41,44,35,50,0,40],
[43,48,40,38,46,37,39,46,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,29,34,26,40,38,49,48,40],
[47,0,52,56,39,53,48,44,60,49],
[52,29,0,41,33,40,43,40,46,41],
[47,25,40,0,34,37,37,40,43,38],
[55,42,48,47,0,38,51,48,56,42],
[41,28,41,44,43,0,34,48,50,39],
[43,33,38,44,30,47,0,55,61,45],
[32,37,41,41,33,33,26,0,40,36],
[33,21,35,38,25,31,20,41,0,25],
[41,32,40,43,39,42,36,45,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,70,34,70,46,35,35,35,22],
[45,0,45,34,57,57,34,34,45,45],
[11,36,0,34,57,45,23,0,24,11],
[47,47,47,0,59,57,35,23,59,23],
[11,24,24,22,0,45,23,0,24,11],
[35,24,36,24,36,0,23,24,36,12],
[46,47,58,46,58,58,0,35,46,46],
[46,47,81,58,81,57,46,0,81,34],
[46,36,57,22,57,45,35,0,0,34],
[59,36,70,58,70,69,35,47,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,34,43,42,33,37,42,42,46],
[42,0,41,49,43,38,37,44,42,51],
[47,40,0,45,47,44,35,43,40,39],
[38,32,36,0,39,30,25,32,35,34],
[39,38,34,42,0,38,37,34,35,39],
[48,43,37,51,43,0,36,44,48,46],
[44,44,46,56,44,45,0,51,40,50],
[39,37,38,49,47,37,30,0,40,51],
[39,39,41,46,46,33,41,41,0,37],
[35,30,42,47,42,35,31,30,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,33,43,40,44,43,43,47,43],
[40,0,43,43,38,42,48,49,37,40],
[48,38,0,43,40,51,52,52,49,44],
[38,38,38,0,35,43,48,47,43,36],
[41,43,41,46,0,47,47,47,48,40],
[37,39,30,38,34,0,48,45,38,40],
[38,33,29,33,34,33,0,36,38,27],
[38,32,29,34,34,36,45,0,40,33],
[34,44,32,38,33,43,43,41,0,41],
[38,41,37,45,41,41,54,48,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,60,60,70,48,38,33,55,54],
[19,0,46,32,26,42,36,32,41,40],
[21,35,0,35,36,31,25,34,43,55],
[21,49,46,0,36,49,46,21,49,49],
[11,55,45,45,0,41,23,32,42,47],
[33,39,50,32,40,0,36,46,39,54],
[43,45,56,35,58,45,0,41,59,70],
[48,49,47,60,49,35,40,0,54,42],
[26,40,38,32,39,42,22,27,0,46],
[27,41,26,32,34,27,11,39,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,47,45,44,39,40,46,42,38],
[36,0,37,39,45,42,34,43,44,42],
[34,44,0,40,43,42,38,41,42,39],
[36,42,41,0,39,39,38,34,43,39],
[37,36,38,42,0,34,37,39,35,35],
[42,39,39,42,47,0,41,42,45,44],
[41,47,43,43,44,40,0,45,44,44],
[35,38,40,47,42,39,36,0,43,40],
[39,37,39,38,46,36,37,38,0,36],
[43,39,42,42,46,37,37,41,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,46,45,43,39,43,45,47,41],
[39,0,42,50,45,46,45,48,47,42],
[35,39,0,49,50,35,40,45,46,39],
[36,31,32,0,39,34,37,38,39,39],
[38,36,31,42,0,35,32,45,39,39],
[42,35,46,47,46,0,43,44,38,41],
[38,36,41,44,49,38,0,43,43,38],
[36,33,36,43,36,37,38,0,39,34],
[34,34,35,42,42,43,38,42,0,39],
[40,39,42,42,42,40,43,47,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,33,43,42,39,35,41,43,39],
[47,0,36,42,41,41,43,43,49,39],
[48,45,0,47,38,47,41,39,48,44],
[38,39,34,0,45,39,34,35,46,34],
[39,40,43,36,0,39,37,35,41,38],
[42,40,34,42,42,0,42,38,43,42],
[46,38,40,47,44,39,0,36,47,40],
[40,38,42,46,46,43,45,0,48,41],
[38,32,33,35,40,38,34,33,0,34],
[42,42,37,47,43,39,41,40,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,43,44,36,35,38,47,42,46],
[44,0,42,38,32,36,45,35,44,42],
[38,39,0,34,37,32,45,43,47,40],
[37,43,47,0,37,34,42,36,39,42],
[45,49,44,44,0,37,43,52,40,44],
[46,45,49,47,44,0,51,44,39,45],
[43,36,36,39,38,30,0,43,36,38],
[34,46,38,45,29,37,38,0,35,41],
[39,37,34,42,41,42,45,46,0,43],
[35,39,41,39,37,36,43,40,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,42,33,34,33,38,41,34,22],
[47,0,43,34,41,36,45,46,34,42],
[39,38,0,34,35,24,45,44,38,32],
[48,47,47,0,40,37,42,51,48,40],
[47,40,46,41,0,41,48,42,42,40],
[48,45,57,44,40,0,48,47,43,40],
[43,36,36,39,33,33,0,45,40,33],
[40,35,37,30,39,34,36,0,30,32],
[47,47,43,33,39,38,41,51,0,38],
[59,39,49,41,41,41,48,49,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,50,42,46,45,45,43,43,50],
[41,0,38,47,28,41,39,41,43,48],
[31,43,0,33,37,39,24,32,35,40],
[39,34,48,0,41,50,44,39,43,54],
[35,53,44,40,0,38,41,45,45,49],
[36,40,42,31,43,0,44,35,42,48],
[36,42,57,37,40,37,0,36,38,43],
[38,40,49,42,36,46,45,0,42,53],
[38,38,46,38,36,39,43,39,0,50],
[31,33,41,27,32,33,38,28,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,30,56,39,63,64,36,48,40],
[8,0,19,26,36,52,46,19,36,19],
[51,62,0,62,53,52,42,33,53,46],
[25,55,19,0,28,63,54,43,48,28],
[42,45,28,53,0,55,62,35,47,20],
[18,29,29,18,26,0,38,20,57,9],
[17,35,39,27,19,43,0,7,28,11],
[45,62,48,38,46,61,74,0,55,46],
[33,45,28,33,34,24,53,26,0,17],
[41,62,35,53,61,72,70,35,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,51,38,24,49,39,33,34,42],
[52,0,49,51,28,53,38,36,41,47],
[30,32,0,36,25,43,33,36,37,43],
[43,30,45,0,28,51,37,32,27,43],
[57,53,56,53,0,54,33,43,38,60],
[32,28,38,30,27,0,23,36,29,42],
[42,43,48,44,48,58,0,39,45,62],
[48,45,45,49,38,45,42,0,27,44],
[47,40,44,54,43,52,36,54,0,49],
[39,34,38,38,21,39,19,37,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,49,45,50,40,44,44,46,40],
[35,0,39,40,41,37,40,38,42,38],
[32,42,0,41,42,33,34,42,37,38],
[36,41,40,0,47,35,42,44,39,35],
[31,40,39,34,0,33,29,34,40,34],
[41,44,48,46,48,0,48,49,47,39],
[37,41,47,39,52,33,0,47,44,41],
[37,43,39,37,47,32,34,0,39,41],
[35,39,44,42,41,34,37,42,0,38],
[41,43,43,46,47,42,40,40,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,39,42,38,38,39,36,31,34],
[41,0,28,38,41,39,29,43,30,36],
[42,53,0,49,46,45,43,47,40,42],
[39,43,32,0,40,42,35,43,35,32],
[43,40,35,41,0,41,34,51,34,38],
[43,42,36,39,40,0,34,46,38,33],
[42,52,38,46,47,47,0,45,36,42],
[45,38,34,38,30,35,36,0,36,32],
[50,51,41,46,47,43,45,45,0,34],
[47,45,39,49,43,48,39,49,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,47,41,48,46,41,38,37,39],
[27,0,44,36,41,35,32,29,37,29],
[34,37,0,29,35,30,29,29,30,33],
[40,45,52,0,40,37,35,38,34,46],
[33,40,46,41,0,31,31,33,34,44],
[35,46,51,44,50,0,37,44,38,47],
[40,49,52,46,50,44,0,45,41,49],
[43,52,52,43,48,37,36,0,46,47],
[44,44,51,47,47,43,40,35,0,43],
[42,52,48,35,37,34,32,34,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,49,49,34,34,34,34,49,50],
[49,0,49,49,49,49,49,34,49,65],
[32,32,0,32,32,48,32,66,48,48],
[32,32,49,0,32,32,32,50,47,66],
[47,32,49,49,0,65,49,50,31,65],
[47,32,33,49,16,0,34,50,47,50],
[47,32,49,49,32,47,0,66,47,66],
[47,47,15,31,31,31,15,0,31,31],
[32,32,33,34,50,34,34,50,0,50],
[31,16,33,15,16,31,15,50,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,45,36,45,36,37,35,39,38],
[42,0,45,41,43,39,41,42,39,41],
[36,36,0,31,43,31,34,27,37,33],
[45,40,50,0,51,35,42,42,43,45],
[36,38,38,30,0,34,32,31,32,30],
[45,42,50,46,47,0,39,42,42,41],
[44,40,47,39,49,42,0,48,47,44],
[46,39,54,39,50,39,33,0,46,37],
[42,42,44,38,49,39,34,35,0,36],
[43,40,48,36,51,40,37,44,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,43,38,40,45,41,45,47,36],
[37,0,31,36,40,38,39,40,40,36],
[38,50,0,45,46,48,48,47,44,48],
[43,45,36,0,43,40,38,42,43,38],
[41,41,35,38,0,39,39,44,42,38],
[36,43,33,41,42,0,38,43,45,33],
[40,42,33,43,42,43,0,43,41,41],
[36,41,34,39,37,38,38,0,34,32],
[34,41,37,38,39,36,40,47,0,39],
[45,45,33,43,43,48,40,49,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,41,38,30,28,40,41,27,35],
[41,0,48,46,40,34,35,21,31,25],
[40,33,0,48,34,33,34,29,24,24],
[43,35,33,0,40,32,25,38,22,36],
[51,41,47,41,0,41,21,30,34,26],
[53,47,48,49,40,0,37,36,45,36],
[41,46,47,56,60,44,0,29,32,42],
[40,60,52,43,51,45,52,0,44,43],
[54,50,57,59,47,36,49,37,0,33],
[46,56,57,45,55,45,39,38,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,22,23,21,39,11,20,21,11],
[59,0,48,50,49,49,61,50,28,49],
[59,33,0,30,43,29,41,40,33,41],
[58,31,51,0,31,28,59,39,41,40],
[60,32,38,50,0,50,50,50,48,31],
[42,32,52,53,31,0,53,32,41,42],
[70,20,40,22,31,28,0,9,19,52],
[61,31,41,42,31,49,72,0,30,53],
[60,53,48,40,33,40,62,51,0,52],
[70,32,40,41,50,39,29,28,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,27,31,39,30,39,33,41,28],
[39,0,32,35,35,34,43,36,43,34],
[54,49,0,45,50,43,53,42,46,40],
[50,46,36,0,37,36,46,29,44,42],
[42,46,31,44,0,46,42,43,37,41],
[51,47,38,45,35,0,44,39,41,42],
[42,38,28,35,39,37,0,41,36,32],
[48,45,39,52,38,42,40,0,41,44],
[40,38,35,37,44,40,45,40,0,43],
[53,47,41,39,40,39,49,37,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,32,35,36,39,38,39,45,40],
[34,0,20,36,29,25,32,26,45,38],
[49,61,0,42,34,43,39,38,54,46],
[46,45,39,0,38,45,32,31,45,41],
[45,52,47,43,0,37,45,42,45,46],
[42,56,38,36,44,0,44,32,55,43],
[43,49,42,49,36,37,0,35,43,44],
[42,55,43,50,39,49,46,0,48,52],
[36,36,27,36,36,26,38,33,0,33],
[41,43,35,40,35,38,37,29,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,38,43,35,42,34,46,54,41],
[44,0,36,46,41,42,34,51,49,37],
[43,45,0,57,39,43,45,49,56,44],
[38,35,24,0,37,33,33,43,42,35],
[46,40,42,44,0,40,43,47,56,43],
[39,39,38,48,41,0,37,48,53,41],
[47,47,36,48,38,44,0,52,47,49],
[35,30,32,38,34,33,29,0,45,37],
[27,32,25,39,25,28,34,36,0,35],
[40,44,37,46,38,40,32,44,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,35,34,40,41,50,43,39,42],
[45,0,37,44,47,35,50,37,42,52],
[46,44,0,47,46,38,52,43,44,49],
[47,37,34,0,43,40,52,28,37,44],
[41,34,35,38,0,39,43,30,35,41],
[40,46,43,41,42,0,49,40,43,46],
[31,31,29,29,38,32,0,32,38,40],
[38,44,38,53,51,41,49,0,42,52],
[42,39,37,44,46,38,43,39,0,45],
[39,29,32,37,40,35,41,29,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,38,39,54,38,29,38,36,39],
[38,0,46,31,33,39,29,27,32,41],
[43,35,0,40,43,29,33,27,37,31],
[42,50,41,0,52,38,44,45,52,50],
[27,48,38,29,0,46,23,30,28,38],
[43,42,52,43,35,0,34,29,37,40],
[52,52,48,37,58,47,0,53,46,44],
[43,54,54,36,51,52,28,0,33,54],
[45,49,44,29,53,44,35,48,0,54],
[42,40,50,31,43,41,37,27,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,40,50,35,39,42,36,40,45],
[42,0,35,45,35,38,43,37,34,41],
[41,46,0,46,36,44,43,44,40,46],
[31,36,35,0,30,37,36,36,39,38],
[46,46,45,51,0,41,47,43,39,43],
[42,43,37,44,40,0,35,35,35,41],
[39,38,38,45,34,46,0,40,43,46],
[45,44,37,45,38,46,41,0,41,42],
[41,47,41,42,42,46,38,40,0,46],
[36,40,35,43,38,40,35,39,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,43,40,47,50,46,43,48],
[37,0,42,45,40,43,43,40,39,44],
[39,39,0,44,44,49,44,43,42,43],
[38,36,37,0,36,40,37,38,41,46],
[41,41,37,45,0,43,42,42,37,41],
[34,38,32,41,38,0,37,39,31,39],
[31,38,37,44,39,44,0,41,36,41],
[35,41,38,43,39,42,40,0,38,43],
[38,42,39,40,44,50,45,43,0,44],
[33,37,38,35,40,42,40,38,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,41,40,53,43,41,47,41,44],
[39,0,45,48,51,51,39,45,44,39],
[40,36,0,45,48,45,34,42,42,38],
[41,33,36,0,46,42,37,39,47,42],
[28,30,33,35,0,40,30,31,40,33],
[38,30,36,39,41,0,28,43,33,37],
[40,42,47,44,51,53,0,47,42,43],
[34,36,39,42,50,38,34,0,45,35],
[40,37,39,34,41,48,39,36,0,39],
[37,42,43,39,48,44,38,46,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,40,48,40,40,31,37,31],
[40,0,33,42,46,35,35,32,37,37],
[40,48,0,45,50,38,41,43,45,38],
[41,39,36,0,48,42,39,40,40,43],
[33,35,31,33,0,36,29,36,35,32],
[41,46,43,39,45,0,42,40,44,45],
[41,46,40,42,52,39,0,40,40,44],
[50,49,38,41,45,41,41,0,40,43],
[44,44,36,41,46,37,41,41,0,40],
[50,44,43,38,49,36,37,38,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,38,37,32,34,37,38,41,36],
[41,0,37,41,35,38,38,41,40,38],
[43,44,0,39,37,39,42,38,41,36],
[44,40,42,0,37,42,35,39,42,43],
[49,46,44,44,0,40,43,44,45,41],
[47,43,42,39,41,0,35,42,44,45],
[44,43,39,46,38,46,0,41,50,39],
[43,40,43,42,37,39,40,0,45,43],
[40,41,40,39,36,37,31,36,0,41],
[45,43,45,38,40,36,42,38,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,40,40,40,40,40,40,40,19],
[62,0,62,81,41,62,81,21,42,42],
[41,19,0,19,40,62,39,19,40,40],
[41,0,62,0,21,62,60,0,21,21],
[41,40,41,60,0,62,60,19,21,40],
[41,19,19,19,19,0,39,19,40,40],
[41,0,42,21,21,42,0,0,21,21],
[41,60,62,81,62,62,81,0,41,40],
[41,39,41,60,60,41,60,40,0,19],
[62,39,41,60,41,41,60,41,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,32,51,54,62,43,57,43,32],
[55,0,38,54,46,65,54,50,46,54],
[49,43,0,48,47,48,33,56,54,37],
[30,27,33,0,37,56,26,58,35,45],
[27,35,34,44,0,55,23,56,15,25],
[19,16,33,25,26,0,26,36,14,24],
[38,27,48,55,58,55,0,58,29,45],
[24,31,25,23,25,45,23,0,15,23],
[38,35,27,46,66,67,52,66,0,38],
[49,27,44,36,56,57,36,58,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,44,40,46,38,41,48,46,46],
[31,0,43,36,35,41,37,45,44,37],
[37,38,0,35,42,37,35,44,46,42],
[41,45,46,0,45,46,40,37,52,51],
[35,46,39,36,0,44,33,37,44,40],
[43,40,44,35,37,0,40,38,47,44],
[40,44,46,41,48,41,0,45,39,43],
[33,36,37,44,44,43,36,0,45,38],
[35,37,35,29,37,34,42,36,0,37],
[35,44,39,30,41,37,38,43,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,20,30,33,41,45,31,33,46],
[51,0,29,43,37,45,43,37,31,55],
[61,52,0,50,41,48,47,36,46,55],
[51,38,31,0,33,46,44,32,37,51],
[48,44,40,48,0,46,47,46,41,50],
[40,36,33,35,35,0,49,43,34,44],
[36,38,34,37,34,32,0,24,32,38],
[50,44,45,49,35,38,57,0,43,55],
[48,50,35,44,40,47,49,38,0,42],
[35,26,26,30,31,37,43,26,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,41,42,50,54,37,37,41,39],
[41,0,49,37,47,54,41,34,33,41],
[40,32,0,40,46,46,38,33,36,35],
[39,44,41,0,41,57,39,33,41,32],
[31,34,35,40,0,53,31,38,29,33],
[27,27,35,24,28,0,33,22,26,19],
[44,40,43,42,50,48,0,33,40,36],
[44,47,48,48,43,59,48,0,43,40],
[40,48,45,40,52,55,41,38,0,41],
[42,40,46,49,48,62,45,41,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,39,39,38,46,46,41,49,43],
[36,0,36,45,42,42,53,40,41,35],
[42,45,0,41,44,49,56,37,47,43],
[42,36,40,0,29,45,49,39,48,39],
[43,39,37,52,0,42,48,34,48,40],
[35,39,32,36,39,0,55,35,38,40],
[35,28,25,32,33,26,0,31,29,34],
[40,41,44,42,47,46,50,0,50,34],
[32,40,34,33,33,43,52,31,0,30],
[38,46,38,42,41,41,47,47,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,43,38,36,51,45,47,55,39],
[35,0,40,32,38,37,40,42,50,37],
[38,41,0,33,35,40,43,35,44,35],
[43,49,48,0,38,42,43,47,50,43],
[45,43,46,43,0,40,49,43,49,41],
[30,44,41,39,41,0,45,42,48,41],
[36,41,38,38,32,36,0,39,44,32],
[34,39,46,34,38,39,42,0,44,38],
[26,31,37,31,32,33,37,37,0,33],
[42,44,46,38,40,40,49,43,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,31,37,35,33,32,32,32,35],
[47,0,42,44,33,40,46,32,45,40],
[50,39,0,40,35,35,40,38,39,40],
[44,37,41,0,35,42,39,34,39,40],
[46,48,46,46,0,37,48,43,46,44],
[48,41,46,39,44,0,51,40,45,45],
[49,35,41,42,33,30,0,35,33,38],
[49,49,43,47,38,41,46,0,45,47],
[49,36,42,42,35,36,48,36,0,41],
[46,41,41,41,37,36,43,34,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,46,33,38,40,37,37,40,30],
[42,0,45,50,40,39,39,28,45,38],
[35,36,0,37,45,38,37,34,37,37],
[48,31,44,0,46,39,34,36,38,33],
[43,41,36,35,0,39,42,44,45,36],
[41,42,43,42,42,0,42,41,36,39],
[44,42,44,47,39,39,0,35,41,36],
[44,53,47,45,37,40,46,0,47,44],
[41,36,44,43,36,45,40,34,0,42],
[51,43,44,48,45,42,45,37,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,45,45,55,47,39,46,58,36],
[27,0,41,39,41,47,25,47,47,29],
[36,40,0,40,49,42,36,41,45,33],
[36,42,41,0,61,57,38,54,46,45],
[26,40,32,20,0,44,33,43,43,26],
[34,34,39,24,37,0,37,50,45,19],
[42,56,45,43,48,44,0,53,52,29],
[35,34,40,27,38,31,28,0,34,25],
[23,34,36,35,38,36,29,47,0,19],
[45,52,48,36,55,62,52,56,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,31,37,30,37,41,36,30,33],
[38,0,40,44,36,39,47,34,37,40],
[50,41,0,49,35,41,45,47,40,43],
[44,37,32,0,42,38,46,41,38,48],
[51,45,46,39,0,49,43,35,41,53],
[44,42,40,43,32,0,47,38,41,42],
[40,34,36,35,38,34,0,33,35,45],
[45,47,34,40,46,43,48,0,40,47],
[51,44,41,43,40,40,46,41,0,49],
[48,41,38,33,28,39,36,34,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,28,32,24,22,41,34,24,31],
[43,0,32,30,37,29,45,51,27,45],
[53,49,0,34,33,36,39,48,36,45],
[49,51,47,0,37,41,51,56,46,45],
[57,44,48,44,0,35,42,57,44,61],
[59,52,45,40,46,0,51,52,46,45],
[40,36,42,30,39,30,0,36,29,45],
[47,30,33,25,24,29,45,0,31,40],
[57,54,45,35,37,35,52,50,0,48],
[50,36,36,36,20,36,36,41,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,41,39,42,35,45,44,35,51],
[38,0,44,38,36,32,24,35,29,39],
[40,37,0,36,40,29,30,44,31,37],
[42,43,45,0,37,44,46,49,35,45],
[39,45,41,44,0,30,46,38,41,46],
[46,49,52,37,51,0,38,44,43,53],
[36,57,51,35,35,43,0,43,40,45],
[37,46,37,32,43,37,38,0,41,39],
[46,52,50,46,40,38,41,40,0,51],
[30,42,44,36,35,28,36,42,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,40,42,46,53,50,45,42,47],
[35,0,38,32,38,41,41,37,40,30],
[41,43,0,36,44,48,51,37,43,42],
[39,49,45,0,46,46,45,41,46,41],
[35,43,37,35,0,44,41,33,41,40],
[28,40,33,35,37,0,36,30,36,34],
[31,40,30,36,40,45,0,32,43,33],
[36,44,44,40,48,51,49,0,41,36],
[39,41,38,35,40,45,38,40,0,40],
[34,51,39,40,41,47,48,45,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,40,35,33,41,44,46,42,39],
[36,0,37,37,39,39,41,32,34,35],
[41,44,0,39,47,48,47,39,37,39],
[46,44,42,0,42,44,51,51,42,40],
[48,42,34,39,0,43,47,41,34,33],
[40,42,33,37,38,0,38,37,40,32],
[37,40,34,30,34,43,0,34,35,34],
[35,49,42,30,40,44,47,0,40,41],
[39,47,44,39,47,41,46,41,0,41],
[42,46,42,41,48,49,47,40,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,37,49,45,54,51,41,37,53],
[47,0,33,57,48,74,57,47,48,57],
[44,48,0,58,58,46,39,49,50,34],
[32,24,23,0,36,39,23,32,24,34],
[36,33,23,45,0,50,44,39,38,45],
[27,7,35,42,31,0,31,15,31,34],
[30,24,42,58,37,50,0,32,40,40],
[40,34,32,49,42,66,49,0,43,48],
[44,33,31,57,43,50,41,38,0,44],
[28,24,47,47,36,47,41,33,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,38,39,38,40,35,42,47,37],
[40,0,42,39,31,48,32,34,49,45],
[43,39,0,36,36,34,35,49,47,37],
[42,42,45,0,41,43,43,39,53,42],
[43,50,45,40,0,39,43,39,48,40],
[41,33,47,38,42,0,41,38,38,36],
[46,49,46,38,38,40,0,36,46,42],
[39,47,32,42,42,43,45,0,48,44],
[34,32,34,28,33,43,35,33,0,26],
[44,36,44,39,41,45,39,37,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,34,41,34,39,39,34,45,38],
[45,0,44,43,43,49,39,39,42,47],
[47,37,0,39,47,48,42,46,43,41],
[40,38,42,0,37,43,41,40,43,32],
[47,38,34,44,0,41,40,44,44,32],
[42,32,33,38,40,0,38,39,34,34],
[42,42,39,40,41,43,0,41,38,41],
[47,42,35,41,37,42,40,0,38,42],
[36,39,38,38,37,47,43,43,0,35],
[43,34,40,49,49,47,40,39,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,28,40,22,37,32,29,37,51],
[36,0,26,50,29,29,43,45,32,40],
[53,55,0,62,32,59,42,57,42,56],
[41,31,19,0,29,27,46,43,38,43],
[59,52,49,52,0,63,44,51,29,66],
[44,52,22,54,18,0,39,40,31,50],
[49,38,39,35,37,42,0,33,51,50],
[52,36,24,38,30,41,48,0,44,52],
[44,49,39,43,52,50,30,37,0,57],
[30,41,25,38,15,31,31,29,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,47,51,40,43,45,42,50,50],
[37,0,47,39,37,35,42,48,44,38],
[34,34,0,47,36,40,43,38,46,49],
[30,42,34,0,27,36,38,39,42,43],
[41,44,45,54,0,48,40,41,50,40],
[38,46,41,45,33,0,51,42,42,47],
[36,39,38,43,41,30,0,34,43,39],
[39,33,43,42,40,39,47,0,35,43],
[31,37,35,39,31,39,38,46,0,36],
[31,43,32,38,41,34,42,38,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,37,27,43,34,27,33,31,32],
[51,0,39,35,40,43,30,35,30,35],
[44,42,0,38,46,42,36,34,31,30],
[54,46,43,0,40,39,32,28,31,38],
[38,41,35,41,0,38,37,36,41,38],
[47,38,39,42,43,0,45,30,33,39],
[54,51,45,49,44,36,0,38,33,37],
[48,46,47,53,45,51,43,0,37,35],
[50,51,50,50,40,48,48,44,0,50],
[49,46,51,43,43,42,44,46,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,37,43,43,37,38,47,38,47],
[38,0,46,55,33,32,36,49,45,42],
[44,35,0,41,37,28,34,36,41,44],
[38,26,40,0,30,30,30,35,43,40],
[38,48,44,51,0,34,41,42,42,38],
[44,49,53,51,47,0,41,39,50,41],
[43,45,47,51,40,40,0,42,44,45],
[34,32,45,46,39,42,39,0,49,35],
[43,36,40,38,39,31,37,32,0,40],
[34,39,37,41,43,40,36,46,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,43,37,31,40,39,44,31,33],
[30,0,28,29,30,29,38,35,25,35],
[38,53,0,34,34,35,36,46,34,37],
[44,52,47,0,33,33,39,42,36,40],
[50,51,47,48,0,47,45,49,33,51],
[41,52,46,48,34,0,38,53,42,41],
[42,43,45,42,36,43,0,46,41,40],
[37,46,35,39,32,28,35,0,31,39],
[50,56,47,45,48,39,40,50,0,46],
[48,46,44,41,30,40,41,42,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,34,43,40,39,44,33,51,38],
[39,0,39,45,37,37,42,38,46,37],
[47,42,0,51,42,41,45,39,48,42],
[38,36,30,0,32,31,34,36,38,32],
[41,44,39,49,0,38,45,43,49,38],
[42,44,40,50,43,0,49,41,48,42],
[37,39,36,47,36,32,0,36,45,38],
[48,43,42,45,38,40,45,0,48,42],
[30,35,33,43,32,33,36,33,0,35],
[43,44,39,49,43,39,43,39,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,38,40,34,27,34,38,40,29],
[45,0,42,42,45,36,40,42,39,44],
[43,39,0,45,44,37,39,41,42,39],
[41,39,36,0,39,31,35,31,43,37],
[47,36,37,42,0,36,44,42,40,46],
[54,45,44,50,45,0,42,39,47,48],
[47,41,42,46,37,39,0,37,46,43],
[43,39,40,50,39,42,44,0,52,41],
[41,42,39,38,41,34,35,29,0,35],
[52,37,42,44,35,33,38,40,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,40,46,41,47,44,43,47,42],
[37,0,39,45,40,45,44,38,49,44],
[41,42,0,46,40,44,45,44,50,43],
[35,36,35,0,36,38,40,36,39,43],
[40,41,41,45,0,45,43,45,46,44],
[34,36,37,43,36,0,37,33,43,38],
[37,37,36,41,38,44,0,37,42,45],
[38,43,37,45,36,48,44,0,49,47],
[34,32,31,42,35,38,39,32,0,42],
[39,37,38,38,37,43,36,34,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,35,8,44,26,52,44,26,35],
[37,0,27,36,52,46,43,45,18,29],
[46,54,0,27,52,45,61,62,34,44],
[73,45,54,0,61,53,52,71,45,36],
[37,29,29,20,0,37,43,46,20,20],
[55,35,36,28,44,0,43,44,35,35],
[29,38,20,29,38,38,0,39,29,30],
[37,36,19,10,35,37,42,0,17,17],
[55,63,47,36,61,46,52,64,0,28],
[46,52,37,45,61,46,51,64,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,46,52,46,45,36,53,38,49],
[30,0,20,28,26,26,31,26,35,28],
[35,61,0,49,48,37,39,44,47,38],
[29,53,32,0,34,38,36,53,40,32],
[35,55,33,47,0,31,33,42,48,32],
[36,55,44,43,50,0,39,50,50,48],
[45,50,42,45,48,42,0,31,49,43],
[28,55,37,28,39,31,50,0,32,38],
[43,46,34,41,33,31,32,49,0,43],
[32,53,43,49,49,33,38,43,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,40,37,41,47,41,44,38,48],
[39,0,34,34,39,42,39,48,38,46],
[41,47,0,32,38,45,49,49,44,44],
[44,47,49,0,47,53,51,56,38,50],
[40,42,43,34,0,45,52,54,40,48],
[34,39,36,28,36,0,38,45,25,36],
[40,42,32,30,29,43,0,47,31,42],
[37,33,32,25,27,36,34,0,29,32],
[43,43,37,43,41,56,50,52,0,44],
[33,35,37,31,33,45,39,49,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,31,47,42,45,37,44,32,37],
[38,0,33,37,43,46,40,38,39,38],
[50,48,0,45,47,49,40,50,45,40],
[34,44,36,0,36,39,34,36,38,39],
[39,38,34,45,0,51,40,42,38,37],
[36,35,32,42,30,0,39,32,35,33],
[44,41,41,47,41,42,0,39,41,44],
[37,43,31,45,39,49,42,0,37,42],
[49,42,36,43,43,46,40,44,0,42],
[44,43,41,42,44,48,37,39,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,36,38,16,37,22,28,35,29],
[45,0,43,54,41,37,51,38,57,33],
[45,38,0,50,45,35,57,44,47,33],
[43,27,31,0,27,33,35,22,27,23],
[65,40,36,54,0,39,26,28,51,39],
[44,44,46,48,42,0,47,26,47,39],
[59,30,24,46,55,34,0,38,53,45],
[53,43,37,59,53,55,43,0,49,43],
[46,24,34,54,30,34,28,32,0,33],
[52,48,48,58,42,42,36,38,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,44,39,52,48,48,52,52,55],
[33,0,37,37,43,29,43,41,43,53],
[37,44,0,38,37,40,37,50,47,46],
[42,44,43,0,47,37,44,48,55,47],
[29,38,44,34,0,34,41,39,46,44],
[33,52,41,44,47,0,47,47,41,44],
[33,38,44,37,40,34,0,43,41,40],
[29,40,31,33,42,34,38,0,39,45],
[29,38,34,26,35,40,40,42,0,41],
[26,28,35,34,37,37,41,36,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,38,35,39,39,31,41,28,32],
[57,0,47,39,45,43,47,43,34,43],
[43,34,0,47,37,36,46,39,32,45],
[46,42,34,0,41,39,36,37,26,44],
[42,36,44,40,0,37,30,46,32,38],
[42,38,45,42,44,0,38,44,42,38],
[50,34,35,45,51,43,0,37,37,46],
[40,38,42,44,35,37,44,0,25,39],
[53,47,49,55,49,39,44,56,0,53],
[49,38,36,37,43,43,35,42,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,32,34,28,32,30,27,45,30],
[60,0,47,49,45,45,38,45,58,57],
[49,34,0,42,39,44,38,36,45,37],
[47,32,39,0,41,42,45,47,47,49],
[53,36,42,40,0,50,40,44,42,39],
[49,36,37,39,31,0,37,38,39,33],
[51,43,43,36,41,44,0,44,48,40],
[54,36,45,34,37,43,37,0,45,37],
[36,23,36,34,39,42,33,36,0,39],
[51,24,44,32,42,48,41,44,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,35,28,38,32,34,33,31,40],
[52,0,42,43,48,56,45,51,38,43],
[46,39,0,34,44,50,36,43,46,40],
[53,38,47,0,59,45,39,52,49,51],
[43,33,37,22,0,36,27,43,34,25],
[49,25,31,36,45,0,31,45,39,40],
[47,36,45,42,54,50,0,45,46,49],
[48,30,38,29,38,36,36,0,44,44],
[50,43,35,32,47,42,35,37,0,47],
[41,38,41,30,56,41,32,37,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,50,37,36,48,45,51,49,32],
[38,0,46,32,30,41,34,30,38,32],
[31,35,0,29,32,37,34,45,37,25],
[44,49,52,0,46,54,43,43,52,37],
[45,51,49,35,0,48,49,46,43,43],
[33,40,44,27,33,0,33,34,37,34],
[36,47,47,38,32,48,0,46,52,33],
[30,51,36,38,35,47,35,0,38,37],
[32,43,44,29,38,44,29,43,0,30],
[49,49,56,44,38,47,48,44,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,49,40,37,48,36,45,37,43],
[29,0,42,34,32,38,41,41,32,36],
[32,39,0,34,29,38,45,37,31,34],
[41,47,47,0,39,43,46,40,38,43],
[44,49,52,42,0,40,49,43,37,41],
[33,43,43,38,41,0,41,36,34,40],
[45,40,36,35,32,40,0,37,34,37],
[36,40,44,41,38,45,44,0,37,42],
[44,49,50,43,44,47,47,44,0,40],
[38,45,47,38,40,41,44,39,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,39,38,36,26,26,45,40,22],
[51,0,48,47,35,45,44,44,49,32],
[42,33,0,40,40,33,43,44,38,31],
[43,34,41,0,41,28,31,45,35,35],
[45,46,41,40,0,23,45,45,44,35],
[55,36,48,53,58,0,52,61,43,44],
[55,37,38,50,36,29,0,54,39,33],
[36,37,37,36,36,20,27,0,30,24],
[41,32,43,46,37,38,42,51,0,27],
[59,49,50,46,46,37,48,57,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,39,47,48,49,42,43,48,47],
[33,0,41,47,44,41,42,44,38,35],
[42,40,0,47,43,37,45,47,39,37],
[34,34,34,0,37,36,38,38,39,39],
[33,37,38,44,0,35,38,35,36,40],
[32,40,44,45,46,0,39,42,40,41],
[39,39,36,43,43,42,0,45,38,36],
[38,37,34,43,46,39,36,0,39,33],
[33,43,42,42,45,41,43,42,0,34],
[34,46,44,42,41,40,45,48,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,18,16,29,27,24,37,27,35],
[57,0,40,52,64,34,34,44,38,62],
[63,41,0,51,69,49,38,61,43,63],
[65,29,30,0,52,39,35,44,57,59],
[52,17,12,29,0,19,22,29,30,30],
[54,47,32,42,62,0,49,49,48,54],
[57,47,43,46,59,32,0,60,52,46],
[44,37,20,37,52,32,21,0,43,49],
[54,43,38,24,51,33,29,38,0,49],
[46,19,18,22,51,27,35,32,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,39,42,47,46,36,36,44,44],
[40,0,32,35,40,45,39,34,39,37],
[42,49,0,44,46,46,38,43,44,50],
[39,46,37,0,48,45,36,36,36,40],
[34,41,35,33,0,44,29,35,38,40],
[35,36,35,36,37,0,32,36,34,42],
[45,42,43,45,52,49,0,40,49,51],
[45,47,38,45,46,45,41,0,40,44],
[37,42,37,45,43,47,32,41,0,46],
[37,44,31,41,41,39,30,37,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,40,43,49,49,43,38,44,43],
[44,0,43,39,42,44,44,43,36,40],
[41,38,0,40,48,39,43,36,40,46],
[38,42,41,0,41,42,44,41,37,43],
[32,39,33,40,0,33,42,36,37,31],
[32,37,42,39,48,0,43,45,39,41],
[38,37,38,37,39,38,0,39,37,35],
[43,38,45,40,45,36,42,0,35,39],
[37,45,41,44,44,42,44,46,0,44],
[38,41,35,38,50,40,46,42,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,48,34,41,44,41,33,43,36],
[46,0,42,43,36,43,43,40,46,43],
[33,39,0,35,31,33,32,33,39,35],
[47,38,46,0,40,41,42,35,47,44],
[40,45,50,41,0,41,45,37,39,40],
[37,38,48,40,40,0,44,37,46,35],
[40,38,49,39,36,37,0,41,38,41],
[48,41,48,46,44,44,40,0,44,45],
[38,35,42,34,42,35,43,37,0,41],
[45,38,46,37,41,46,40,36,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,34,35,43,38,39,38,34,40],
[44,0,47,44,46,31,37,36,41,38],
[47,34,0,45,54,41,46,46,43,39],
[46,37,36,0,42,35,44,43,44,40],
[38,35,27,39,0,42,31,32,37,34],
[43,50,40,46,39,0,40,41,46,42],
[42,44,35,37,50,41,0,36,43,40],
[43,45,35,38,49,40,45,0,40,37],
[47,40,38,37,44,35,38,41,0,42],
[41,43,42,41,47,39,41,44,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,40,37,45,41,42,37,35,39],
[41,0,49,42,44,42,42,37,42,36],
[41,32,0,35,43,36,31,36,36,34],
[44,39,46,0,45,42,37,42,42,41],
[36,37,38,36,0,40,31,36,38,35],
[40,39,45,39,41,0,41,43,43,39],
[39,39,50,44,50,40,0,44,42,38],
[44,44,45,39,45,38,37,0,44,45],
[46,39,45,39,43,38,39,37,0,40],
[42,45,47,40,46,42,43,36,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,42,47,42,43,30,47,41,40],
[41,0,39,46,38,46,35,53,30,30],
[39,42,0,45,47,43,38,48,40,34],
[34,35,36,0,33,41,32,47,37,33],
[39,43,34,48,0,35,31,49,35,33],
[38,35,38,40,46,0,38,58,42,36],
[51,46,43,49,50,43,0,54,40,41],
[34,28,33,34,32,23,27,0,32,24],
[40,51,41,44,46,39,41,49,0,44],
[41,51,47,48,48,45,40,57,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,50,47,46,46,47,45,49,39],
[36,0,36,36,38,40,39,39,35,41],
[31,45,0,38,34,31,36,44,37,45],
[34,45,43,0,34,39,40,41,44,39],
[35,43,47,47,0,41,47,45,47,52],
[35,41,50,42,40,0,38,44,40,42],
[34,42,45,41,34,43,0,43,45,45],
[36,42,37,40,36,37,38,0,41,37],
[32,46,44,37,34,41,36,40,0,37],
[42,40,36,42,29,39,36,44,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,38,39,33,42,35,41,33,44],
[49,0,40,45,44,47,52,44,46,59],
[43,41,0,42,39,41,44,41,31,43],
[42,36,39,0,32,35,41,41,33,42],
[48,37,42,49,0,45,41,42,39,52],
[39,34,40,46,36,0,39,42,34,44],
[46,29,37,40,40,42,0,41,38,41],
[40,37,40,40,39,39,40,0,39,50],
[48,35,50,48,42,47,43,42,0,49],
[37,22,38,39,29,37,40,31,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,39,49,41,46,37,44,44,42],
[49,0,21,46,37,38,40,23,39,49],
[42,60,0,43,44,38,45,43,52,47],
[32,35,38,0,35,42,33,43,40,36],
[40,44,37,46,0,46,45,39,36,37],
[35,43,43,39,35,0,38,37,33,34],
[44,41,36,48,36,43,0,45,36,36],
[37,58,38,38,42,44,36,0,49,51],
[37,42,29,41,45,48,45,32,0,44],
[39,32,34,45,44,47,45,30,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,46,38,42,40,36,41,46,43],
[38,0,39,40,35,37,43,43,43,40],
[35,42,0,39,41,35,34,42,32,36],
[43,41,42,0,37,35,38,43,37,40],
[39,46,40,44,0,39,44,47,46,37],
[41,44,46,46,42,0,37,43,47,45],
[45,38,47,43,37,44,0,37,48,45],
[40,38,39,38,34,38,44,0,41,42],
[35,38,49,44,35,34,33,40,0,34],
[38,41,45,41,44,36,36,39,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,46,42,40,43,42,36,40,39],
[30,0,41,31,37,32,40,29,30,29],
[35,40,0,29,25,27,34,32,28,30],
[39,50,52,0,47,48,42,38,43,47],
[41,44,56,34,0,39,41,35,38,45],
[38,49,54,33,42,0,48,36,44,30],
[39,41,47,39,40,33,0,38,37,32],
[45,52,49,43,46,45,43,0,34,37],
[41,51,53,38,43,37,44,47,0,40],
[42,52,51,34,36,51,49,44,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,39,45,41,48,47,33,32,44],
[34,0,34,34,29,32,38,29,26,29],
[42,47,0,53,37,49,48,43,53,46],
[36,47,28,0,32,45,34,29,34,30],
[40,52,44,49,0,51,50,35,43,42],
[33,49,32,36,30,0,39,32,38,28],
[34,43,33,47,31,42,0,27,32,35],
[48,52,38,52,46,49,54,0,43,46],
[49,55,28,47,38,43,49,38,0,42],
[37,52,35,51,39,53,46,35,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,40,33,46,40,46,33,39,33],
[28,0,40,34,34,34,35,14,33,34],
[41,41,0,26,26,27,34,20,32,40],
[48,47,55,0,33,41,34,34,33,48],
[35,47,55,48,0,40,34,27,40,54],
[41,47,54,40,41,0,34,19,19,40],
[35,46,47,47,47,47,0,33,46,47],
[48,67,61,47,54,62,48,0,26,34],
[42,48,49,48,41,62,35,55,0,55],
[48,47,41,33,27,41,34,47,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,37,40,20,48,41,31,34,45],
[51,0,40,47,46,45,48,36,35,43],
[44,41,0,47,25,54,33,40,41,55],
[41,34,34,0,25,43,33,35,35,45],
[61,35,56,56,0,60,58,46,46,55],
[33,36,27,38,21,0,36,28,27,38],
[40,33,48,48,23,45,0,33,43,54],
[50,45,41,46,35,53,48,0,35,43],
[47,46,40,46,35,54,38,46,0,49],
[36,38,26,36,26,43,27,38,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,38,41,40,44,38,44,50,48],
[45,0,46,51,39,48,48,42,41,48],
[43,35,0,46,40,43,44,41,44,44],
[40,30,35,0,37,38,39,39,39,46],
[41,42,41,44,0,48,42,39,43,45],
[37,33,38,43,33,0,36,35,40,43],
[43,33,37,42,39,45,0,37,39,41],
[37,39,40,42,42,46,44,0,47,45],
[31,40,37,42,38,41,42,34,0,41],
[33,33,37,35,36,38,40,36,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,44,50,47,49,40,51,51,48],
[39,0,37,54,42,46,43,53,45,40],
[37,44,0,48,41,48,44,51,48,44],
[31,27,33,0,35,37,34,50,39,28],
[34,39,40,46,0,45,40,52,41,38],
[32,35,33,44,36,0,30,49,44,43],
[41,38,37,47,41,51,0,46,47,42],
[30,28,30,31,29,32,35,0,31,32],
[30,36,33,42,40,37,34,50,0,36],
[33,41,37,53,43,38,39,49,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,47,39,35,41,42,52,36,31],
[26,0,35,35,36,31,34,31,27,24],
[34,46,0,45,42,45,45,45,37,35],
[42,46,36,0,45,43,42,51,37,37],
[46,45,39,36,0,39,31,49,33,30],
[40,50,36,38,42,0,35,53,41,32],
[39,47,36,39,50,46,0,48,37,37],
[29,50,36,30,32,28,33,0,29,33],
[45,54,44,44,48,40,44,52,0,42],
[50,57,46,44,51,49,44,48,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,29,32,29,26,21,27,23,21],
[49,0,51,45,49,37,31,40,48,39],
[52,30,0,36,36,30,31,29,27,41],
[49,36,45,0,43,49,48,41,39,28],
[52,32,45,38,0,40,33,42,32,29],
[55,44,51,32,41,0,37,39,37,32],
[60,50,50,33,48,44,0,42,33,34],
[54,41,52,40,39,42,39,0,36,36],
[58,33,54,42,49,44,48,45,0,43],
[60,42,40,53,52,49,47,45,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,36,36,54,45,36,36,45,36],
[45,0,36,35,45,53,54,35,63,27],
[45,45,0,35,54,53,46,18,54,36],
[45,46,46,0,45,63,46,37,46,46],
[27,36,27,36,0,54,45,36,45,46],
[36,28,28,18,27,0,28,28,45,10],
[45,27,35,35,36,53,0,44,36,27],
[45,46,63,44,45,53,37,0,54,27],
[36,18,27,35,36,36,45,27,0,28],
[45,54,45,35,35,71,54,54,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,63,30,46,30,47,48,63,47],
[33,0,64,15,64,48,33,49,48,30],
[18,17,0,15,18,18,18,49,18,15],
[51,66,66,0,66,33,51,66,66,66],
[35,17,63,15,0,48,17,48,65,47],
[51,33,63,48,33,0,33,48,81,63],
[34,48,63,30,64,48,0,31,81,63],
[33,32,32,15,33,33,50,0,50,32],
[18,33,63,15,16,0,0,31,0,15],
[34,51,66,15,34,18,18,49,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,38,33,41,40,45,33,40,52],
[37,0,42,38,43,28,40,30,40,58],
[43,39,0,41,43,25,38,34,38,53],
[48,43,40,0,48,42,40,33,39,56],
[40,38,38,33,0,29,28,34,28,51],
[41,53,56,39,52,0,38,44,45,62],
[36,41,43,41,53,43,0,30,38,53],
[48,51,47,48,47,37,51,0,47,53],
[41,41,43,42,53,36,43,34,0,56],
[29,23,28,25,30,19,28,28,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,29,28,27,43,36,32,31,35],
[52,0,51,44,33,59,37,36,44,46],
[52,30,0,41,35,45,34,30,33,50],
[53,37,40,0,25,47,32,44,40,47],
[54,48,46,56,0,52,35,46,43,49],
[38,22,36,34,29,0,26,28,28,36],
[45,44,47,49,46,55,0,38,42,42],
[49,45,51,37,35,53,43,0,52,53],
[50,37,48,41,38,53,39,29,0,51],
[46,35,31,34,32,45,39,28,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,35,35,40,32,37,44,39,35],
[49,0,41,39,45,41,43,51,47,41],
[46,40,0,43,48,42,45,55,47,40],
[46,42,38,0,45,34,45,46,45,46],
[41,36,33,36,0,35,39,41,41,38],
[49,40,39,47,46,0,46,47,49,43],
[44,38,36,36,42,35,0,44,44,34],
[37,30,26,35,40,34,37,0,36,34],
[42,34,34,36,40,32,37,45,0,35],
[46,40,41,35,43,38,47,47,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,37,42,42,41,41,38,41,44],
[44,0,39,42,47,43,37,42,41,39],
[44,42,0,43,42,46,39,45,38,48],
[39,39,38,0,41,41,35,40,38,32],
[39,34,39,40,0,38,41,41,39,45],
[40,38,35,40,43,0,33,39,34,39],
[40,44,42,46,40,48,0,48,41,43],
[43,39,36,41,40,42,33,0,36,44],
[40,40,43,43,42,47,40,45,0,45],
[37,42,33,49,36,42,38,37,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,35,37,47,32,35,35,34,37],
[43,0,38,44,47,35,39,47,37,45],
[46,43,0,43,45,33,31,43,32,39],
[44,37,38,0,44,29,39,38,30,35],
[34,34,36,37,0,28,34,44,33,31],
[49,46,48,52,53,0,40,42,45,45],
[46,42,50,42,47,41,0,49,40,42],
[46,34,38,43,37,39,32,0,29,37],
[47,44,49,51,48,36,41,52,0,37],
[44,36,42,46,50,36,39,44,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,37,42,45,37,43,42,50,33],
[46,0,38,57,42,38,34,33,39,35],
[44,43,0,47,41,35,33,23,37,29],
[39,24,34,0,36,37,32,23,32,31],
[36,39,40,45,0,35,26,31,29,27],
[44,43,46,44,46,0,32,32,37,37],
[38,47,48,49,55,49,0,38,40,37],
[39,48,58,58,50,49,43,0,53,50],
[31,42,44,49,52,44,41,28,0,38],
[48,46,52,50,54,44,44,31,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,32,34,35,35,33,39,32,34],
[42,0,35,34,34,44,33,42,38,38],
[49,46,0,33,41,51,50,44,39,44],
[47,47,48,0,40,51,44,50,46,55],
[46,47,40,41,0,47,43,48,36,45],
[46,37,30,30,34,0,34,35,36,41],
[48,48,31,37,38,47,0,46,41,47],
[42,39,37,31,33,46,35,0,39,43],
[49,43,42,35,45,45,40,42,0,47],
[47,43,37,26,36,40,34,38,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,39,38,35,41,39,45,44,36],
[53,0,51,50,39,58,46,52,55,49],
[42,30,0,39,35,48,31,37,43,39],
[43,31,42,0,42,44,47,52,33,36],
[46,42,46,39,0,52,47,49,34,41],
[40,23,33,37,29,0,38,38,30,38],
[42,35,50,34,34,43,0,44,41,41],
[36,29,44,29,32,43,37,0,36,32],
[37,26,38,48,47,51,40,45,0,45],
[45,32,42,45,40,43,40,49,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,42,42,44,48,35,41,44,40],
[35,0,22,36,29,37,35,36,34,35],
[39,59,0,49,42,53,44,42,41,45],
[39,45,32,0,34,48,38,40,34,38],
[37,52,39,47,0,49,45,46,42,47],
[33,44,28,33,32,0,44,33,38,33],
[46,46,37,43,36,37,0,37,40,40],
[40,45,39,41,35,48,44,0,37,41],
[37,47,40,47,39,43,41,44,0,43],
[41,46,36,43,34,48,41,40,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,53,46,46,52,53,46,46,59],
[42,0,47,38,45,45,47,43,39,42],
[28,34,0,30,36,37,44,32,34,42],
[35,43,51,0,30,48,44,35,42,44],
[35,36,45,51,0,50,50,42,45,46],
[29,36,44,33,31,0,41,39,34,41],
[28,34,37,37,31,40,0,37,39,35],
[35,38,49,46,39,42,44,0,45,49],
[35,42,47,39,36,47,42,36,0,50],
[22,39,39,37,35,40,46,32,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,38,33,50,51,38,56,54,40],
[31,0,27,27,36,36,26,38,32,23],
[43,54,0,45,57,44,44,47,59,39],
[48,54,36,0,52,51,48,49,44,42],
[31,45,24,29,0,35,29,38,44,31],
[30,45,37,30,46,0,38,53,40,24],
[43,55,37,33,52,43,0,46,44,44],
[25,43,34,32,43,28,35,0,38,28],
[27,49,22,37,37,41,37,43,0,32],
[41,58,42,39,50,57,37,53,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,50,43,46,42,51,44,51,43],
[44,0,54,41,44,52,39,41,51,42],
[31,27,0,32,39,48,38,42,43,30],
[38,40,49,0,48,50,42,44,42,47],
[35,37,42,33,0,43,36,47,42,30],
[39,29,33,31,38,0,36,36,44,33],
[30,42,43,39,45,45,0,44,48,40],
[37,40,39,37,34,45,37,0,43,36],
[30,30,38,39,39,37,33,38,0,31],
[38,39,51,34,51,48,41,45,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,44,44,52,37,51,29,44,44],
[52,0,44,52,53,29,38,22,52,51],
[37,37,0,30,37,29,22,22,44,29],
[37,29,51,0,37,29,15,29,51,29],
[29,28,44,44,0,35,36,29,51,51],
[44,52,52,52,46,0,37,37,52,52],
[30,43,59,66,45,44,0,43,36,44],
[52,59,59,52,52,44,38,0,37,51],
[37,29,37,30,30,29,45,44,0,29],
[37,30,52,52,30,29,37,30,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,52,34,52,36,41,30,37,27],
[45,0,43,42,45,38,55,42,33,35],
[29,38,0,39,38,27,36,32,30,33],
[47,39,42,0,30,33,45,26,29,33],
[29,36,43,51,0,43,47,28,39,30],
[45,43,54,48,38,0,49,36,35,42],
[40,26,45,36,34,32,0,32,27,28],
[51,39,49,55,53,45,49,0,29,49],
[44,48,51,52,42,46,54,52,0,31],
[54,46,48,48,51,39,53,32,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,35,42,48,36,45,37,37,41],
[31,0,36,32,37,38,43,39,33,32],
[46,45,0,30,42,33,54,38,31,39],
[39,49,51,0,49,34,62,40,47,49],
[33,44,39,32,0,32,38,31,30,34],
[45,43,48,47,49,0,54,47,34,38],
[36,38,27,19,43,27,0,22,26,32],
[44,42,43,41,50,34,59,0,43,49],
[44,48,50,34,51,47,55,38,0,45],
[40,49,42,32,47,43,49,32,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,40,35,42,41,43,42,41,39],
[44,0,38,38,39,36,38,41,46,41],
[41,43,0,42,32,40,36,38,39,38],
[46,43,39,0,34,37,41,42,44,44],
[39,42,49,47,0,51,47,53,48,45],
[40,45,41,44,30,0,40,41,35,37],
[38,43,45,40,34,41,0,43,39,38],
[39,40,43,39,28,40,38,0,42,40],
[40,35,42,37,33,46,42,39,0,38],
[42,40,43,37,36,44,43,41,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,38,42,43,43,32,37,34,34],
[38,0,30,43,38,40,28,31,36,32],
[43,51,0,52,54,45,36,37,44,43],
[39,38,29,0,42,40,36,41,37,31],
[38,43,27,39,0,41,30,38,38,35],
[38,41,36,41,40,0,29,41,37,35],
[49,53,45,45,51,52,0,43,39,43],
[44,50,44,40,43,40,38,0,38,39],
[47,45,37,44,43,44,42,43,0,43],
[47,49,38,50,46,46,38,42,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,36,41,43,44,40,35,40,43],
[33,0,36,37,39,41,37,33,37,39],
[45,45,0,40,45,45,46,46,43,49],
[40,44,41,0,41,42,40,42,42,47],
[38,42,36,40,0,43,38,36,41,42],
[37,40,36,39,38,0,39,37,37,37],
[41,44,35,41,43,42,0,41,40,41],
[46,48,35,39,45,44,40,0,43,45],
[41,44,38,39,40,44,41,38,0,44],
[38,42,32,34,39,44,40,36,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,18,39,18,60,39,18,18,60],
[63,0,39,39,39,60,39,21,21,60],
[63,42,0,39,60,60,42,42,21,60],
[42,42,42,0,39,81,42,42,21,60],
[63,42,21,42,0,42,42,42,21,60],
[21,21,21,0,39,0,21,21,21,60],
[42,42,39,39,39,60,0,42,42,60],
[63,60,39,39,39,60,39,0,39,60],
[63,60,60,60,60,60,39,42,0,60],
[21,21,21,21,21,21,21,21,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,42,26,31,44,35,45,34,36],
[45,0,39,40,37,42,39,47,48,39],
[39,42,0,31,39,39,38,50,42,40],
[55,41,50,0,42,41,49,59,40,45],
[50,44,42,39,0,45,43,47,42,40],
[37,39,42,40,36,0,43,40,39,38],
[46,42,43,32,38,38,0,48,42,40],
[36,34,31,22,34,41,33,0,32,31],
[47,33,39,41,39,42,39,49,0,42],
[45,42,41,36,41,43,41,50,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,45,40,41,34,39,43,43,35],
[42,0,46,41,29,33,32,39,42,35],
[36,35,0,41,40,42,41,40,43,44],
[41,40,40,0,35,37,37,38,36,34],
[40,52,41,46,0,47,46,41,43,42],
[47,48,39,44,34,0,46,45,45,43],
[42,49,40,44,35,35,0,42,47,45],
[38,42,41,43,40,36,39,0,44,31],
[38,39,38,45,38,36,34,37,0,42],
[46,46,37,47,39,38,36,50,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,36,41,48,58,36,40,59,44],
[52,0,50,57,52,64,40,58,68,59],
[45,31,0,57,41,39,47,32,58,43],
[40,24,24,0,44,42,34,32,50,36],
[33,29,40,37,0,38,45,37,60,46],
[23,17,42,39,43,0,37,39,60,42],
[45,41,34,47,36,44,0,38,62,42],
[41,23,49,49,44,42,43,0,62,52],
[22,13,23,31,21,21,19,19,0,26],
[37,22,38,45,35,39,39,29,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,50,46,47,43,55,41,43,52],
[41,0,41,38,44,47,46,36,38,43],
[31,40,0,31,40,37,42,36,40,41],
[35,43,50,0,47,46,46,42,44,44],
[34,37,41,34,0,41,43,35,41,51],
[38,34,44,35,40,0,47,37,38,38],
[26,35,39,35,38,34,0,35,36,45],
[40,45,45,39,46,44,46,0,48,51],
[38,43,41,37,40,43,45,33,0,44],
[29,38,40,37,30,43,36,30,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,42,30,29,31,46,39,43,32],
[45,0,42,43,37,34,38,36,38,33],
[39,39,0,45,36,39,46,40,45,43],
[51,38,36,0,41,39,50,41,45,35],
[52,44,45,40,0,42,50,52,48,42],
[50,47,42,42,39,0,47,44,42,38],
[35,43,35,31,31,34,0,34,42,29],
[42,45,41,40,29,37,47,0,40,34],
[38,43,36,36,33,39,39,41,0,38],
[49,48,38,46,39,43,52,47,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,37,49,43,37,24,37,37,38],
[35,0,20,34,22,29,22,20,32,22],
[44,61,0,55,47,42,41,38,36,39],
[32,47,26,0,41,43,36,24,26,30],
[38,59,34,40,0,46,40,40,41,29],
[44,52,39,38,35,0,44,32,32,32],
[57,59,40,45,41,37,0,45,38,43],
[44,61,43,57,41,49,36,0,44,36],
[44,49,45,55,40,49,43,37,0,45],
[43,59,42,51,52,49,38,45,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,39,44,46,48,47,40,50,43],
[28,0,37,38,34,33,34,24,38,34],
[42,44,0,43,41,45,45,40,42,43],
[37,43,38,0,38,41,48,42,43,43],
[35,47,40,43,0,33,44,38,35,37],
[33,48,36,40,48,0,38,37,39,33],
[34,47,36,33,37,43,0,30,43,35],
[41,57,41,39,43,44,51,0,39,39],
[31,43,39,38,46,42,38,42,0,36],
[38,47,38,38,44,48,46,42,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,52,36,42,38,39,49,47,39],
[33,0,39,42,35,34,30,41,39,40],
[29,42,0,39,38,30,39,35,37,31],
[45,39,42,0,42,40,38,48,38,36],
[39,46,43,39,0,39,38,42,39,48],
[43,47,51,41,42,0,42,55,47,38],
[42,51,42,43,43,39,0,46,48,43],
[32,40,46,33,39,26,35,0,40,32],
[34,42,44,43,42,34,33,41,0,37],
[42,41,50,45,33,43,38,49,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,39,43,35,41,41,44,37,33],
[43,0,40,43,36,39,47,39,35,38],
[42,41,0,37,38,39,40,40,38,36],
[38,38,44,0,39,44,43,36,38,42],
[46,45,43,42,0,43,46,41,42,38],
[40,42,42,37,38,0,44,36,33,35],
[40,34,41,38,35,37,0,36,35,41],
[37,42,41,45,40,45,45,0,43,36],
[44,46,43,43,39,48,46,38,0,40],
[48,43,45,39,43,46,40,45,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,49,46,44,39,44,48,46,49],
[38,0,43,34,42,36,37,39,39,44],
[32,38,0,35,30,35,31,34,37,42],
[35,47,46,0,46,41,37,45,46,53],
[37,39,51,35,0,35,34,43,40,44],
[42,45,46,40,46,0,39,44,40,45],
[37,44,50,44,47,42,0,40,45,50],
[33,42,47,36,38,37,41,0,37,45],
[35,42,44,35,41,41,36,44,0,46],
[32,37,39,28,37,36,31,36,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,30,42,35,50,33,29,26,48],
[44,0,46,40,41,57,40,38,32,47],
[51,35,0,38,35,53,37,51,33,58],
[39,41,43,0,43,50,40,43,39,56],
[46,40,46,38,0,54,38,50,42,51],
[31,24,28,31,27,0,20,29,34,48],
[48,41,44,41,43,61,0,39,45,54],
[52,43,30,38,31,52,42,0,38,49],
[55,49,48,42,39,47,36,43,0,49],
[33,34,23,25,30,33,27,32,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,36,40,48,38,28,40,48,44],
[40,0,43,37,43,45,42,40,47,45],
[45,38,0,38,50,45,40,45,42,39],
[41,44,43,0,41,39,42,40,46,44],
[33,38,31,40,0,36,33,40,43,40],
[43,36,36,42,45,0,40,41,46,41],
[53,39,41,39,48,41,0,37,47,48],
[41,41,36,41,41,40,44,0,43,40],
[33,34,39,35,38,35,34,38,0,35],
[37,36,42,37,41,40,33,41,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,44,27,26,26,25,46,43,36],
[36,0,44,44,35,45,44,37,53,45],
[37,37,0,36,18,18,9,46,27,36],
[54,37,45,0,37,37,36,47,54,45],
[55,46,63,44,0,37,54,37,36,36],
[55,36,63,44,44,0,63,45,45,45],
[56,37,72,45,27,18,0,46,36,54],
[35,44,35,34,44,36,35,0,35,27],
[38,28,54,27,45,36,45,46,0,46],
[45,36,45,36,45,36,27,54,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,27,39,40,31,25,45,41,27],
[43,0,33,33,52,46,29,50,37,35],
[54,48,0,41,50,51,38,51,56,40],
[42,48,40,0,39,41,42,48,45,40],
[41,29,31,42,0,41,35,32,31,24],
[50,35,30,40,40,0,25,49,43,34],
[56,52,43,39,46,56,0,55,42,43],
[36,31,30,33,49,32,26,0,41,32],
[40,44,25,36,50,38,39,40,0,36],
[54,46,41,41,57,47,38,49,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,31,40,39,31,34,37,33,38],
[46,0,37,40,42,46,38,45,35,39],
[50,44,0,41,46,44,39,40,37,42],
[41,41,40,0,38,41,42,40,37,39],
[42,39,35,43,0,41,37,38,38,46],
[50,35,37,40,40,0,40,44,36,44],
[47,43,42,39,44,41,0,42,41,49],
[44,36,41,41,43,37,39,0,40,42],
[48,46,44,44,43,45,40,41,0,52],
[43,42,39,42,35,37,32,39,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,54,28,0,26,26,54,28,28],
[27,0,27,55,27,27,27,55,55,55],
[27,54,0,28,0,0,0,28,28,28],
[53,26,53,0,27,53,53,53,26,53],
[81,54,81,54,0,26,54,81,54,54],
[55,54,81,28,55,0,81,81,28,55],
[55,54,81,28,27,0,0,55,28,55],
[27,26,53,28,0,0,26,0,0,0],
[53,26,53,55,27,53,53,81,0,53],
[53,26,53,28,27,26,26,81,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,46,24,34,44,37,26,36,41],
[46,0,54,38,45,46,45,42,43,45],
[35,27,0,34,32,34,39,34,37,34],
[57,43,47,0,54,48,47,37,44,42],
[47,36,49,27,0,39,47,33,39,39],
[37,35,47,33,42,0,43,32,40,43],
[44,36,42,34,34,38,0,37,33,38],
[55,39,47,44,48,49,44,0,51,47],
[45,38,44,37,42,41,48,30,0,34],
[40,36,47,39,42,38,43,34,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,58,35,52,43,36,40,41],
[38,0,40,39,39,53,49,26,47,54],
[41,41,0,45,39,47,36,44,39,47],
[23,42,36,0,42,43,46,26,38,46],
[46,42,42,39,0,52,36,42,45,42],
[29,28,34,38,29,0,30,19,38,36],
[38,32,45,35,45,51,0,36,41,45],
[45,55,37,55,39,62,45,0,54,56],
[41,34,42,43,36,43,40,27,0,42],
[40,27,34,35,39,45,36,25,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,35,39,40,32,41,40,40,40],
[41,0,41,43,43,41,43,37,38,39],
[46,40,0,43,39,42,47,44,35,39],
[42,38,38,0,36,38,43,40,28,45],
[41,38,42,45,0,38,39,40,35,39],
[49,40,39,43,43,0,44,43,35,35],
[40,38,34,38,42,37,0,41,33,48],
[41,44,37,41,41,38,40,0,43,38],
[41,43,46,53,46,46,48,38,0,48],
[41,42,42,36,42,46,33,43,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,36,30,36,41,49,24,30,35],
[21,0,45,19,32,37,45,31,24,43],
[45,36,0,43,44,42,48,16,30,48],
[51,62,38,0,37,43,51,43,51,43],
[45,49,37,44,0,41,49,30,32,55],
[40,44,39,38,40,0,44,25,26,49],
[32,36,33,30,32,37,0,24,24,41],
[57,50,65,38,51,56,57,0,57,55],
[51,57,51,30,49,55,57,24,0,47],
[46,38,33,38,26,32,40,26,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,38,37,41,46,47,31,34,38],
[57,0,37,42,46,51,46,51,49,63],
[43,44,0,41,42,48,47,32,46,51],
[44,39,40,0,40,42,42,45,43,44],
[40,35,39,41,0,37,45,35,49,38],
[35,30,33,39,44,0,39,29,42,46],
[34,35,34,39,36,42,0,38,42,42],
[50,30,49,36,46,52,43,0,53,44],
[47,32,35,38,32,39,39,28,0,39],
[43,18,30,37,43,35,39,37,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,40,40,42,57,47,43,45,45],
[31,0,26,33,24,40,34,32,31,38],
[41,55,0,48,43,54,34,44,55,51],
[41,48,33,0,35,54,33,45,38,47],
[39,57,38,46,0,48,32,44,49,50],
[24,41,27,27,33,0,21,35,32,28],
[34,47,47,48,49,60,0,44,54,40],
[38,49,37,36,37,46,37,0,48,42],
[36,50,26,43,32,49,27,33,0,46],
[36,43,30,34,31,53,41,39,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,39,50,47,45,38,49,44,60],
[38,0,49,50,46,48,40,53,46,55],
[42,32,0,47,40,41,33,49,52,48],
[31,31,34,0,42,40,35,40,49,43],
[34,35,41,39,0,35,36,44,53,55],
[36,33,40,41,46,0,42,31,46,44],
[43,41,48,46,45,39,0,40,64,48],
[32,28,32,41,37,50,41,0,43,46],
[37,35,29,32,28,35,17,38,0,30],
[21,26,33,38,26,37,33,35,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,47,39,40,51,47,42,57,40],
[31,0,37,36,25,37,26,48,53,19],
[34,44,0,44,28,37,40,46,57,28],
[42,45,37,0,55,53,44,48,60,30],
[41,56,53,26,0,34,43,47,57,33],
[30,44,44,28,47,0,55,30,58,45],
[34,55,41,37,38,26,0,40,43,21],
[39,33,35,33,34,51,41,0,46,28],
[24,28,24,21,24,23,38,35,0,18],
[41,62,53,51,48,36,60,53,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,43,40,33,32,36,41,35,47],
[36,0,44,34,38,37,37,45,39,45],
[38,37,0,32,45,35,34,41,31,36],
[41,47,49,0,48,36,41,53,46,45],
[48,43,36,33,0,35,33,42,26,36],
[49,44,46,45,46,0,49,51,39,48],
[45,44,47,40,48,32,0,46,41,50],
[40,36,40,28,39,30,35,0,39,42],
[46,42,50,35,55,42,40,42,0,49],
[34,36,45,36,45,33,31,39,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,37,42,38,31,39,35,42,35],
[34,0,27,34,33,30,33,24,37,25],
[44,54,0,52,35,44,44,40,41,42],
[39,47,29,0,39,31,37,31,39,36],
[43,48,46,42,0,40,42,33,41,41],
[50,51,37,50,41,0,40,35,48,38],
[42,48,37,44,39,41,0,29,40,35],
[46,57,41,50,48,46,52,0,51,38],
[39,44,40,42,40,33,41,30,0,36],
[46,56,39,45,40,43,46,43,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,20,41,41,40,20,20,20,41],
[60,0,40,61,20,60,60,20,60,60],
[61,41,0,61,41,81,61,41,40,61],
[40,20,20,0,20,40,20,20,40,20],
[40,61,40,61,0,60,60,40,60,81],
[41,21,0,41,21,0,0,0,20,41],
[61,21,20,61,21,81,0,41,20,61],
[61,61,40,61,41,81,40,0,40,61],
[61,21,41,41,21,61,61,41,0,41],
[40,21,20,61,0,40,20,20,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,42,38,48,38,38,40,33,33],
[45,0,42,31,33,39,60,47,47,40],
[39,39,0,44,51,52,38,58,38,45],
[43,50,37,0,49,46,54,50,56,29],
[33,48,30,32,0,39,46,47,40,21],
[43,42,29,35,42,0,46,56,48,21],
[43,21,43,27,35,35,0,41,47,28],
[41,34,23,31,34,25,40,0,39,32],
[48,34,43,25,41,33,34,42,0,34],
[48,41,36,52,60,60,53,49,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,46,39,57,50,47,42,42,53],
[25,0,38,30,46,41,29,30,36,40],
[35,43,0,30,48,46,41,34,34,43],
[42,51,51,0,50,47,50,40,54,47],
[24,35,33,31,0,30,31,29,28,37],
[31,40,35,34,51,0,38,44,32,33],
[34,52,40,31,50,43,0,37,38,46],
[39,51,47,41,52,37,44,0,37,42],
[39,45,47,27,53,49,43,44,0,40],
[28,41,38,34,44,48,35,39,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,35,39,31,37,41,37,42,40],
[45,0,38,42,35,47,43,37,47,47],
[46,43,0,45,37,45,48,47,58,45],
[42,39,36,0,36,47,37,36,47,53],
[50,46,44,45,0,41,39,45,51,49],
[44,34,36,34,40,0,34,34,42,46],
[40,38,33,44,42,47,0,35,45,48],
[44,44,34,45,36,47,46,0,55,44],
[39,34,23,34,30,39,36,26,0,35],
[41,34,36,28,32,35,33,37,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,41,39,33,35,29,37,33,38],
[43,0,48,43,42,45,28,43,40,39],
[40,33,0,41,37,38,31,32,35,37],
[42,38,40,0,36,42,28,41,36,37],
[48,39,44,45,0,41,35,49,36,39],
[46,36,43,39,40,0,29,38,31,30],
[52,53,50,53,46,52,0,48,45,39],
[44,38,49,40,32,43,33,0,37,38],
[48,41,46,45,45,50,36,44,0,42],
[43,42,44,44,42,51,42,43,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,37,41,46,32,43,33,39,43],
[43,0,38,44,48,43,46,46,48,42],
[44,43,0,46,49,40,54,48,47,50],
[40,37,35,0,45,32,49,40,39,46],
[35,33,32,36,0,31,46,33,42,44],
[49,38,41,49,50,0,48,47,45,54],
[38,35,27,32,35,33,0,32,40,35],
[48,35,33,41,48,34,49,0,42,41],
[42,33,34,42,39,36,41,39,0,47],
[38,39,31,35,37,27,46,40,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,47,47,32,57,56,55,57,41],
[32,0,24,31,31,32,42,48,58,7],
[34,57,0,48,42,43,42,40,59,16],
[34,50,33,0,33,50,58,31,50,26],
[49,50,39,48,0,41,49,57,67,40],
[24,49,38,31,40,0,50,47,51,14],
[25,39,39,23,32,31,0,46,41,7],
[26,33,41,50,24,34,35,0,44,17],
[24,23,22,31,14,30,40,37,0,14],
[40,74,65,55,41,67,74,64,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,36,34,41,37,46,46,43,37],
[45,0,36,34,35,33,43,39,43,33],
[45,45,0,37,40,36,45,41,44,31],
[47,47,44,0,42,41,51,53,46,40],
[40,46,41,39,0,33,45,43,47,35],
[44,48,45,40,48,0,47,49,45,43],
[35,38,36,30,36,34,0,42,39,39],
[35,42,40,28,38,32,39,0,41,33],
[38,38,37,35,34,36,42,40,0,42],
[44,48,50,41,46,38,42,48,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,42,44,34,40,41,45,46,41],
[36,0,42,35,33,43,34,40,41,40],
[39,39,0,35,36,35,36,42,42,47],
[37,46,46,0,44,41,48,44,49,52],
[47,48,45,37,0,46,48,56,50,49],
[41,38,46,40,35,0,43,49,52,45],
[40,47,45,33,33,38,0,46,48,44],
[36,41,39,37,25,32,35,0,39,44],
[35,40,39,32,31,29,33,42,0,41],
[40,41,34,29,32,36,37,37,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,35,44,28,43,37,38,49,41],
[46,0,47,48,39,57,46,40,46,41],
[46,34,0,53,41,42,42,39,43,33],
[37,33,28,0,29,43,34,31,33,25],
[53,42,40,52,0,53,49,47,44,37],
[38,24,39,38,28,0,37,19,39,35],
[44,35,39,47,32,44,0,31,39,29],
[43,41,42,50,34,62,50,0,43,41],
[32,35,38,48,37,42,42,38,0,29],
[40,40,48,56,44,46,52,40,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,52,38,35,45,34,43,37,37],
[39,0,44,36,44,38,34,43,38,50],
[29,37,0,37,38,41,38,43,40,34],
[43,45,44,0,43,54,29,44,42,50],
[46,37,43,38,0,49,53,51,38,37],
[36,43,40,27,32,0,31,45,34,32],
[47,47,43,52,28,50,0,43,29,40],
[38,38,38,37,30,36,38,0,30,22],
[44,43,41,39,43,47,52,51,0,41],
[44,31,47,31,44,49,41,59,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,31,29,35,30,26,30,41,33],
[43,0,38,35,40,34,31,40,39,34],
[50,43,0,38,33,35,34,39,40,34],
[52,46,43,0,48,38,40,44,42,43],
[46,41,48,33,0,39,31,40,41,41],
[51,47,46,43,42,0,41,39,43,45],
[55,50,47,41,50,40,0,46,45,46],
[51,41,42,37,41,42,35,0,39,42],
[40,42,41,39,40,38,36,42,0,39],
[48,47,47,38,40,36,35,39,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,41,34,40,39,33,35,33,39],
[36,0,33,30,37,39,35,32,36,40],
[40,48,0,30,42,39,38,36,37,31],
[47,51,51,0,41,48,39,42,49,43],
[41,44,39,40,0,35,35,34,35,36],
[42,42,42,33,46,0,41,34,35,39],
[48,46,43,42,46,40,0,44,45,41],
[46,49,45,39,47,47,37,0,41,43],
[48,45,44,32,46,46,36,40,0,40],
[42,41,50,38,45,42,40,38,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,37,41,44,45,42,43,53,48],
[44,0,47,40,45,41,47,40,51,50],
[44,34,0,35,53,47,43,38,47,44],
[40,41,46,0,44,48,45,40,49,50],
[37,36,28,37,0,39,40,36,41,41],
[36,40,34,33,42,0,43,32,44,45],
[39,34,38,36,41,38,0,41,53,45],
[38,41,43,41,45,49,40,0,50,45],
[28,30,34,32,40,37,28,31,0,38],
[33,31,37,31,40,36,36,36,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,35,41,42,47,42,35,41,44],
[33,0,34,31,31,39,32,28,36,29],
[46,47,0,42,43,43,41,39,39,40],
[40,50,39,0,43,46,46,41,46,51],
[39,50,38,38,0,44,43,35,41,40],
[34,42,38,35,37,0,35,34,40,34],
[39,49,40,35,38,46,0,35,41,42],
[46,53,42,40,46,47,46,0,45,42],
[40,45,42,35,40,41,40,36,0,42],
[37,52,41,30,41,47,39,39,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,36,37,41,42,47,43,46,42],
[38,0,33,32,39,39,32,43,39,39],
[45,48,0,47,40,45,35,42,42,48],
[44,49,34,0,41,44,43,44,32,47],
[40,42,41,40,0,45,39,39,35,42],
[39,42,36,37,36,0,35,30,31,41],
[34,49,46,38,42,46,0,46,36,41],
[38,38,39,37,42,51,35,0,34,51],
[35,42,39,49,46,50,45,47,0,49],
[39,42,33,34,39,40,40,30,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,40,48,46,47,43,50,48,51],
[29,0,33,39,26,38,32,38,35,36],
[41,48,0,41,37,46,37,52,46,51],
[33,42,40,0,36,40,36,44,36,41],
[35,55,44,45,0,49,41,50,42,46],
[34,43,35,41,32,0,31,38,28,36],
[38,49,44,45,40,50,0,46,46,45],
[31,43,29,37,31,43,35,0,38,37],
[33,46,35,45,39,53,35,43,0,41],
[30,45,30,40,35,45,36,44,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,32,47,35,45,30,42,35,41],
[42,0,33,44,35,40,39,35,42,38],
[49,48,0,54,45,47,37,39,39,54],
[34,37,27,0,30,38,29,32,24,37],
[46,46,36,51,0,49,45,54,43,40],
[36,41,34,43,32,0,37,34,33,35],
[51,42,44,52,36,44,0,48,45,43],
[39,46,42,49,27,47,33,0,29,39],
[46,39,42,57,38,48,36,52,0,46],
[40,43,27,44,41,46,38,42,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,40,34,32,42,42,31,38,48],
[44,0,50,40,37,51,46,44,24,34],
[41,31,0,35,29,31,35,31,31,39],
[47,41,46,0,41,33,43,39,40,40],
[49,44,52,40,0,41,49,39,40,47],
[39,30,50,48,40,0,46,37,38,43],
[39,35,46,38,32,35,0,36,42,48],
[50,37,50,42,42,44,45,0,39,49],
[43,57,50,41,41,43,39,42,0,54],
[33,47,42,41,34,38,33,32,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,53,52,44,45,48,45,40,44],
[35,0,49,47,41,41,40,48,44,43],
[28,32,0,39,32,45,39,41,38,33],
[29,34,42,0,31,37,38,44,43,39],
[37,40,49,50,0,45,38,42,42,42],
[36,40,36,44,36,0,35,41,43,36],
[33,41,42,43,43,46,0,45,45,42],
[36,33,40,37,39,40,36,0,36,41],
[41,37,43,38,39,38,36,45,0,42],
[37,38,48,42,39,45,39,40,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,50,23,48,32,54,64,26,49],
[25,0,59,40,42,33,40,43,17,18],
[31,22,0,37,40,24,45,41,7,14],
[58,41,44,0,51,27,62,50,35,42],
[33,39,41,30,0,25,56,50,24,32],
[49,48,57,54,56,0,71,57,41,40],
[27,41,36,19,25,10,0,43,10,35],
[17,38,40,31,31,24,38,0,16,32],
[55,64,74,46,57,40,71,65,0,48],
[32,63,67,39,49,41,46,49,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,47,47,43,39,47,42,49,47],
[37,0,42,43,39,39,43,41,41,39],
[34,39,0,41,42,28,45,44,41,37],
[34,38,40,0,31,36,39,38,44,37],
[38,42,39,50,0,43,42,44,39,39],
[42,42,53,45,38,0,48,40,49,39],
[34,38,36,42,39,33,0,45,42,35],
[39,40,37,43,37,41,36,0,40,39],
[32,40,40,37,42,32,39,41,0,38],
[34,42,44,44,42,42,46,42,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,37,32,36,35,35,38,34,42],
[42,0,33,38,37,42,42,36,31,42],
[44,48,0,42,36,37,44,37,41,41],
[49,43,39,0,42,44,44,41,39,42],
[45,44,45,39,0,44,40,39,41,45],
[46,39,44,37,37,0,42,35,34,43],
[46,39,37,37,41,39,0,39,37,38],
[43,45,44,40,42,46,42,0,38,41],
[47,50,40,42,40,47,44,43,0,50],
[39,39,40,39,36,38,43,40,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,40,38,45,35,31,40,38,37],
[46,0,43,40,49,35,42,44,37,39],
[41,38,0,37,46,38,35,50,43,38],
[43,41,44,0,47,32,42,47,37,38],
[36,32,35,34,0,35,32,36,30,34],
[46,46,43,49,46,0,45,46,36,42],
[50,39,46,39,49,36,0,48,44,41],
[41,37,31,34,45,35,33,0,42,33],
[43,44,38,44,51,45,37,39,0,36],
[44,42,43,43,47,39,40,48,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,33,41,38,37,39,38,39,43],
[43,0,40,45,46,36,39,39,39,47],
[48,41,0,37,44,47,45,44,44,49],
[40,36,44,0,42,44,43,41,46,48],
[43,35,37,39,0,40,36,40,42,45],
[44,45,34,37,41,0,48,48,43,46],
[42,42,36,38,45,33,0,44,44,45],
[43,42,37,40,41,33,37,0,38,43],
[42,42,37,35,39,38,37,43,0,45],
[38,34,32,33,36,35,36,38,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,64,64,32,81,48,64,64,48],
[17,0,64,16,0,33,48,64,64,32],
[17,17,0,17,17,17,49,33,65,17],
[17,65,64,0,16,33,48,48,64,32],
[49,81,64,65,0,81,65,81,64,32],
[0,48,64,48,0,0,48,64,64,32],
[33,33,32,33,16,33,0,32,48,16],
[17,17,48,33,0,17,49,0,48,16],
[17,17,16,17,17,17,33,33,0,0],
[33,49,64,49,49,49,65,65,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,37,44,43,36,46,38,44,47],
[40,0,37,41,42,36,42,39,33,43],
[44,44,0,47,42,37,53,44,42,44],
[37,40,34,0,41,32,46,36,34,41],
[38,39,39,40,0,43,41,36,29,44],
[45,45,44,49,38,0,46,39,44,49],
[35,39,28,35,40,35,0,35,34,41],
[43,42,37,45,45,42,46,0,38,47],
[37,48,39,47,52,37,47,43,0,48],
[34,38,37,40,37,32,40,34,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,38,35,40,46,43,29,39,39],
[49,0,50,42,47,55,53,43,51,40],
[43,31,0,41,41,43,48,34,44,34],
[46,39,40,0,45,47,51,34,38,40],
[41,34,40,36,0,52,44,36,41,39],
[35,26,38,34,29,0,38,29,35,26],
[38,28,33,30,37,43,0,32,33,33],
[52,38,47,47,45,52,49,0,42,41],
[42,30,37,43,40,46,48,39,0,33],
[42,41,47,41,42,55,48,40,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,30,33,32,34,53,38,25,36],
[47,0,41,49,51,38,57,43,39,47],
[51,40,0,47,47,45,53,44,45,50],
[48,32,34,0,45,35,53,43,44,53],
[49,30,34,36,0,41,51,29,35,44],
[47,43,36,46,40,0,60,43,37,53],
[28,24,28,28,30,21,0,26,21,33],
[43,38,37,38,52,38,55,0,46,42],
[56,42,36,37,46,44,60,35,0,46],
[45,34,31,28,37,28,48,39,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,31,33,34,38,57,40,35,43],
[37,0,39,20,40,31,44,31,32,34],
[50,42,0,24,40,46,39,29,24,30],
[48,61,57,0,48,48,50,40,35,40],
[47,41,41,33,0,41,46,25,30,34],
[43,50,35,33,40,0,40,22,33,35],
[24,37,42,31,35,41,0,30,23,29],
[41,50,52,41,56,59,51,0,41,37],
[46,49,57,46,51,48,58,40,0,41],
[38,47,51,41,47,46,52,44,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,54,44,48,47,48,35,48,42],
[42,0,56,39,38,44,38,38,45,37],
[27,25,0,34,35,39,35,35,32,23],
[37,42,47,0,38,47,39,38,48,36],
[33,43,46,43,0,44,45,40,48,36],
[34,37,42,34,37,0,34,34,49,31],
[33,43,46,42,36,47,0,34,41,32],
[46,43,46,43,41,47,47,0,47,34],
[33,36,49,33,33,32,40,34,0,34],
[39,44,58,45,45,50,49,47,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,43,22,48,43,50,44,42,39],
[34,0,40,42,28,40,32,41,39,33],
[38,41,0,30,43,42,46,32,47,26],
[59,39,51,0,49,45,57,53,48,51],
[33,53,38,32,0,43,53,39,41,48],
[38,41,39,36,38,0,35,39,50,28],
[31,49,35,24,28,46,0,41,34,29],
[37,40,49,28,42,42,40,0,45,29],
[39,42,34,33,40,31,47,36,0,45],
[42,48,55,30,33,53,52,52,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,40,40,48,42,45,39,38,37],
[39,0,51,39,45,45,43,45,40,46],
[41,30,0,41,40,44,39,37,33,36],
[41,42,40,0,47,42,44,40,39,41],
[33,36,41,34,0,36,32,33,34,36],
[39,36,37,39,45,0,35,30,31,41],
[36,38,42,37,49,46,0,38,40,35],
[42,36,44,41,48,51,43,0,44,43],
[43,41,48,42,47,50,41,37,0,39],
[44,35,45,40,45,40,46,38,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,35,40,36,53,36,39,41,45],
[40,0,33,41,44,50,38,44,50,44],
[46,48,0,52,40,56,46,50,51,51],
[41,40,29,0,39,51,41,38,46,51],
[45,37,41,42,0,53,36,46,42,46],
[28,31,25,30,28,0,25,37,36,36],
[45,43,35,40,45,56,0,39,44,48],
[42,37,31,43,35,44,42,0,37,50],
[40,31,30,35,39,45,37,44,0,40],
[36,37,30,30,35,45,33,31,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,7,44,36,26,43,20,26,26],
[62,0,52,42,34,43,52,36,43,42],
[74,29,0,47,47,38,46,37,29,46],
[37,39,34,0,28,10,53,27,36,37],
[45,47,34,53,0,35,52,36,45,54],
[55,38,43,71,46,0,71,46,43,53],
[38,29,35,28,29,10,0,10,29,29],
[61,45,44,54,45,35,71,0,54,54],
[55,38,52,45,36,38,52,27,0,45],
[55,39,35,44,27,28,52,27,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,40,50,48,54,41,54,56,42],
[41,0,39,48,49,45,45,47,47,39],
[41,42,0,44,47,46,48,49,48,37],
[31,33,37,0,43,48,36,38,42,31],
[33,32,34,38,0,38,37,46,38,33],
[27,36,35,33,43,0,34,38,44,28],
[40,36,33,45,44,47,0,47,44,40],
[27,34,32,43,35,43,34,0,37,33],
[25,34,33,39,43,37,37,44,0,34],
[39,42,44,50,48,53,41,48,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,47,47,49,33,49,65,65,49],
[32,0,63,47,49,65,81,81,81,65],
[34,18,0,49,49,34,65,50,49,49],
[34,34,32,0,18,34,34,50,50,34],
[32,32,32,63,0,32,32,32,48,48],
[48,16,47,47,49,0,49,65,65,31],
[32,0,16,47,49,32,0,32,47,16],
[16,0,31,31,49,16,49,0,47,31],
[16,0,32,31,33,16,34,34,0,0],
[32,16,32,47,33,50,65,50,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,25,40,23,50,33,35,25,32],
[42,0,25,15,22,47,26,26,18,39],
[56,56,0,49,39,58,49,44,49,41],
[41,66,32,0,41,50,42,52,49,51],
[58,59,42,40,0,42,42,44,41,49],
[31,34,23,31,39,0,17,36,19,30],
[48,55,32,39,39,64,0,44,42,48],
[46,55,37,29,37,45,37,0,22,29],
[56,63,32,32,40,62,39,59,0,46],
[49,42,40,30,32,51,33,52,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,46,49,47,39,49,46,32,53],
[46,0,38,52,34,29,43,33,37,48],
[35,43,0,45,34,41,41,48,47,46],
[32,29,36,0,38,32,47,36,28,36],
[34,47,47,43,0,41,43,46,48,51],
[42,52,40,49,40,0,49,36,52,53],
[32,38,40,34,38,32,0,46,37,48],
[35,48,33,45,35,45,35,0,41,58],
[49,44,34,53,33,29,44,40,0,60],
[28,33,35,45,30,28,33,23,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,35,33,48,61,37,55,40,41],
[43,0,40,48,55,62,55,55,62,56],
[46,41,0,41,63,69,38,75,39,61],
[48,33,40,0,63,61,45,54,48,56],
[33,26,18,18,0,51,30,60,45,35],
[20,19,12,20,30,0,26,42,33,50],
[44,26,43,36,51,55,0,49,48,37],
[26,26,6,27,21,39,32,0,39,41],
[41,19,42,33,36,48,33,42,0,43],
[40,25,20,25,46,31,44,40,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,42,34,35,38,44,43,40,44],
[41,0,39,34,31,32,40,42,34,31],
[39,42,0,35,35,38,40,44,38,29],
[47,47,46,0,45,47,50,44,40,46],
[46,50,46,36,0,47,50,47,42,40],
[43,49,43,34,34,0,40,44,38,40],
[37,41,41,31,31,41,0,40,38,36],
[38,39,37,37,34,37,41,0,39,38],
[41,47,43,41,39,43,43,42,0,38],
[37,50,52,35,41,41,45,43,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,44,37,39,41,45,40,42,39],
[31,0,35,44,38,45,45,43,40,41],
[37,46,0,39,41,44,44,44,39,38],
[44,37,42,0,39,42,36,43,39,39],
[42,43,40,42,0,44,46,46,48,42],
[40,36,37,39,37,0,42,43,39,41],
[36,36,37,45,35,39,0,37,44,35],
[41,38,37,38,35,38,44,0,38,33],
[39,41,42,42,33,42,37,43,0,37],
[42,40,43,42,39,40,46,48,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,49,40,49,57,53,59,51,48],
[31,0,42,35,40,46,44,46,37,37],
[32,39,0,26,37,44,40,39,39,38],
[41,46,55,0,40,54,53,56,48,48],
[32,41,44,41,0,43,45,50,45,43],
[24,35,37,27,38,0,37,41,37,36],
[28,37,41,28,36,44,0,44,44,45],
[22,35,42,25,31,40,37,0,37,37],
[30,44,42,33,36,44,37,44,0,37],
[33,44,43,33,38,45,36,44,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,33,46,50,43,41,40,40,50],
[34,0,38,40,32,50,45,43,42,46],
[48,43,0,43,47,52,46,40,47,50],
[35,41,38,0,35,47,31,36,44,52],
[31,49,34,46,0,44,49,47,43,58],
[38,31,29,34,37,0,31,21,27,29],
[40,36,35,50,32,50,0,40,41,44],
[41,38,41,45,34,60,41,0,47,48],
[41,39,34,37,38,54,40,34,0,49],
[31,35,31,29,23,52,37,33,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,53,42,49,38,38,34,46,49],
[41,0,29,33,42,41,33,38,41,46],
[28,52,0,34,43,34,41,40,45,43],
[39,48,47,0,50,41,34,33,45,48],
[32,39,38,31,0,34,36,37,39,43],
[43,40,47,40,47,0,40,40,47,51],
[43,48,40,47,45,41,0,47,44,42],
[47,43,41,48,44,41,34,0,50,43],
[35,40,36,36,42,34,37,31,0,39],
[32,35,38,33,38,30,39,38,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,37,38,43,44,38,48,35,37],
[36,0,32,38,46,42,31,34,42,40],
[44,49,0,45,43,47,48,34,43,41],
[43,43,36,0,48,43,45,43,39,38],
[38,35,38,33,0,35,35,42,33,32],
[37,39,34,38,46,0,41,41,30,45],
[43,50,33,36,46,40,0,38,31,34],
[33,47,47,38,39,40,43,0,24,26],
[46,39,38,42,48,51,50,57,0,37],
[44,41,40,43,49,36,47,55,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,33,40,35,39,37,43,46,36],
[46,0,42,39,39,48,39,43,46,39],
[48,39,0,50,41,45,40,45,51,43],
[41,42,31,0,30,40,40,45,41,41],
[46,42,40,51,0,45,44,43,55,42],
[42,33,36,41,36,0,34,36,43,36],
[44,42,41,41,37,47,0,42,45,37],
[38,38,36,36,38,45,39,0,40,40],
[35,35,30,40,26,38,36,41,0,35],
[45,42,38,40,39,45,44,41,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,50,45,41,48,43,43,38,48],
[36,0,51,44,41,44,39,39,38,43],
[31,30,0,47,36,35,38,29,39,33],
[36,37,34,0,37,42,35,31,46,35],
[40,40,45,44,0,42,49,42,43,41],
[33,37,46,39,39,0,42,44,43,31],
[38,42,43,46,32,39,0,36,44,47],
[38,42,52,50,39,37,45,0,39,43],
[43,43,42,35,38,38,37,42,0,45],
[33,38,48,46,40,50,34,38,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,35,46,40,37,40,47,33,43],
[39,0,43,45,42,41,43,40,41,40],
[46,38,0,45,43,37,42,49,47,43],
[35,36,36,0,46,33,38,40,28,31],
[41,39,38,35,0,35,35,46,34,41],
[44,40,44,48,46,0,42,48,38,41],
[41,38,39,43,46,39,0,42,34,40],
[34,41,32,41,35,33,39,0,36,38],
[48,40,34,53,47,43,47,45,0,42],
[38,41,38,50,40,40,41,43,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,39,37,42,41,33,36,39,48],
[40,0,34,44,37,34,40,33,32,44],
[42,47,0,41,41,41,40,37,41,44],
[44,37,40,0,38,44,37,36,37,50],
[39,44,40,43,0,42,40,38,43,41],
[40,47,40,37,39,0,42,37,31,45],
[48,41,41,44,41,39,0,32,34,49],
[45,48,44,45,43,44,49,0,39,52],
[42,49,40,44,38,50,47,42,0,43],
[33,37,37,31,40,36,32,29,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,41,49,46,34,43,43,43,47],
[33,0,28,41,31,30,40,43,35,32],
[40,53,0,46,50,37,43,39,42,42],
[32,40,35,0,35,38,34,32,28,29],
[35,50,31,46,0,37,42,36,46,34],
[47,51,44,43,44,0,37,48,43,46],
[38,41,38,47,39,44,0,37,40,39],
[38,38,42,49,45,33,44,0,44,38],
[38,46,39,53,35,38,41,37,0,42],
[34,49,39,52,47,35,42,43,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,34,42,41,36,32,48,35,41],
[40,0,41,34,48,41,43,52,39,41],
[47,40,0,38,45,39,32,45,38,46],
[39,47,43,0,34,35,37,48,50,42],
[40,33,36,47,0,39,44,53,41,42],
[45,40,42,46,42,0,40,52,33,44],
[49,38,49,44,37,41,0,49,51,48],
[33,29,36,33,28,29,32,0,34,38],
[46,42,43,31,40,48,30,47,0,40],
[40,40,35,39,39,37,33,43,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,33,34,36,35,42,36,39,48],
[43,0,44,49,40,43,50,41,44,43],
[48,37,0,40,48,41,37,43,44,44],
[47,32,41,0,39,42,43,34,44,40],
[45,41,33,42,0,42,42,38,35,44],
[46,38,40,39,39,0,44,39,38,36],
[39,31,44,38,39,37,0,40,36,38],
[45,40,38,47,43,42,41,0,50,42],
[42,37,37,37,46,43,45,31,0,42],
[33,38,37,41,37,45,43,39,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,37,49,34,38,41,52,46,37],
[38,0,39,52,41,36,35,35,51,42],
[44,42,0,56,46,33,40,42,45,42],
[32,29,25,0,32,33,29,33,48,19],
[47,40,35,49,0,31,31,41,38,42],
[43,45,48,48,50,0,34,37,54,43],
[40,46,41,52,50,47,0,47,54,49],
[29,46,39,48,40,44,34,0,44,37],
[35,30,36,33,43,27,27,37,0,33],
[44,39,39,62,39,38,32,44,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,20,31,31,25,39,26,29,24],
[61,0,43,37,39,32,62,52,40,40],
[61,38,0,45,41,41,54,43,54,35],
[50,44,36,0,36,33,51,39,36,36],
[50,42,40,45,0,37,65,46,37,38],
[56,49,40,48,44,0,56,33,39,41],
[42,19,27,30,16,25,0,29,27,27],
[55,29,38,42,35,48,52,0,37,35],
[52,41,27,45,44,42,54,44,0,39],
[57,41,46,45,43,40,54,46,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,43,49,44,55,50,45,47,39],
[39,0,38,46,40,50,44,43,39,42],
[38,43,0,56,42,59,57,48,44,47],
[32,35,25,0,37,46,44,39,33,39],
[37,41,39,44,0,51,46,37,42,40],
[26,31,22,35,30,0,38,33,28,29],
[31,37,24,37,35,43,0,32,34,29],
[36,38,33,42,44,48,49,0,36,33],
[34,42,37,48,39,53,47,45,0,35],
[42,39,34,42,41,52,52,48,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,35,28,36,37,35,45,41,53],
[51,0,45,29,34,50,43,43,45,59],
[46,36,0,34,39,40,34,45,44,43],
[53,52,47,0,33,54,51,61,41,51],
[45,47,42,48,0,46,32,52,47,57],
[44,31,41,27,35,0,35,30,39,43],
[46,38,47,30,49,46,0,51,44,48],
[36,38,36,20,29,51,30,0,34,52],
[40,36,37,40,34,42,37,47,0,42],
[28,22,38,30,24,38,33,29,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,35,38,30,32,37,25,26,32],
[42,0,40,24,29,33,32,29,31,24],
[46,41,0,47,42,41,44,34,34,38],
[43,57,34,0,28,37,30,28,31,28],
[51,52,39,53,0,51,51,52,53,44],
[49,48,40,44,30,0,41,28,37,33],
[44,49,37,51,30,40,0,38,43,44],
[56,52,47,53,29,53,43,0,45,36],
[55,50,47,50,28,44,38,36,0,39],
[49,57,43,53,37,48,37,45,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,29,44,27,34,34,38,38,41],
[47,0,49,60,42,49,52,45,44,40],
[52,32,0,54,35,45,46,53,42,37],
[37,21,27,0,30,32,25,44,32,32],
[54,39,46,51,0,49,48,54,45,35],
[47,32,36,49,32,0,52,46,38,43],
[47,29,35,56,33,29,0,46,33,40],
[43,36,28,37,27,35,35,0,36,34],
[43,37,39,49,36,43,48,45,0,36],
[40,41,44,49,46,38,41,47,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,25,34,35,32,33,22,33,37],
[43,0,39,29,36,42,47,32,42,49],
[56,42,0,49,35,51,42,41,42,54],
[47,52,32,0,40,47,48,35,42,58],
[46,45,46,41,0,39,39,42,44,48],
[49,39,30,34,42,0,41,36,42,44],
[48,34,39,33,42,40,0,28,38,37],
[59,49,40,46,39,45,53,0,40,54],
[48,39,39,39,37,39,43,41,0,45],
[44,32,27,23,33,37,44,27,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,40,45,37,46,36,39,44,28],
[42,0,43,39,30,35,37,42,38,25],
[41,38,0,42,34,34,28,37,38,31],
[36,42,39,0,32,29,30,35,32,30],
[44,51,47,49,0,39,47,37,43,38],
[35,46,47,52,42,0,36,37,39,41],
[45,44,53,51,34,45,0,46,53,42],
[42,39,44,46,44,44,35,0,51,34],
[37,43,43,49,38,42,28,30,0,30],
[53,56,50,51,43,40,39,47,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,39,42,40,31,43,37,37,23],
[46,0,41,39,49,30,43,45,50,42],
[42,40,0,44,48,39,44,44,43,39],
[39,42,37,0,49,41,42,36,44,37],
[41,32,33,32,0,26,37,41,40,34],
[50,51,42,40,55,0,54,49,49,47],
[38,38,37,39,44,27,0,42,37,41],
[44,36,37,45,40,32,39,0,39,31],
[44,31,38,37,41,32,44,42,0,36],
[58,39,42,44,47,34,40,50,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,22,42,37,43,38,52,43,41],
[37,0,27,32,31,27,36,45,45,32],
[59,54,0,59,38,48,43,55,58,54],
[39,49,22,0,33,39,36,37,37,41],
[44,50,43,48,0,32,47,48,46,56],
[38,54,33,42,49,0,45,50,39,47],
[43,45,38,45,34,36,0,44,38,46],
[29,36,26,44,33,31,37,0,31,36],
[38,36,23,44,35,42,43,50,0,38],
[40,49,27,40,25,34,35,45,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,33,42,45,48,40,41,42,43],
[40,0,45,43,46,53,47,43,55,45],
[48,36,0,35,42,49,41,42,40,45],
[39,38,46,0,43,52,41,45,43,39],
[36,35,39,38,0,40,38,38,41,42],
[33,28,32,29,41,0,29,36,35,34],
[41,34,40,40,43,52,0,39,46,42],
[40,38,39,36,43,45,42,0,41,38],
[39,26,41,38,40,46,35,40,0,36],
[38,36,36,42,39,47,39,43,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,44,42,45,33,38,38,35,49],
[45,0,54,56,48,51,38,41,46,57],
[37,27,0,48,46,41,24,36,34,34],
[39,25,33,0,31,24,32,34,31,39],
[36,33,35,50,0,35,34,39,31,45],
[48,30,40,57,46,0,33,42,39,58],
[43,43,57,49,47,48,0,40,49,46],
[43,40,45,47,42,39,41,0,39,50],
[46,35,47,50,50,42,32,42,0,51],
[32,24,47,42,36,23,35,31,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,40,34,36,36,34,32,33,29],
[51,0,45,42,44,46,38,38,38,41],
[41,36,0,37,37,31,29,37,36,31],
[47,39,44,0,44,40,43,42,40,42],
[45,37,44,37,0,37,32,32,35,37],
[45,35,50,41,44,0,31,41,35,33],
[47,43,52,38,49,50,0,43,47,45],
[49,43,44,39,49,40,38,0,39,39],
[48,43,45,41,46,46,34,42,0,37],
[52,40,50,39,44,48,36,42,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,37,47,37,43,47,36,45,42],
[36,0,45,40,40,39,41,43,46,41],
[44,36,0,37,36,45,38,42,46,35],
[34,41,44,0,35,39,45,38,38,38],
[44,41,45,46,0,41,41,39,44,45],
[38,42,36,42,40,0,46,32,42,45],
[34,40,43,36,40,35,0,36,40,37],
[45,38,39,43,42,49,45,0,50,45],
[36,35,35,43,37,39,41,31,0,40],
[39,40,46,43,36,36,44,36,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,39,46,51,46,37,47,26,46],
[34,0,22,31,41,42,34,52,30,47],
[42,59,0,44,41,45,40,52,36,43],
[35,50,37,0,46,52,43,48,41,46],
[30,40,40,35,0,42,38,46,32,45],
[35,39,36,29,39,0,44,53,30,46],
[44,47,41,38,43,37,0,48,40,51],
[34,29,29,33,35,28,33,0,25,44],
[55,51,45,40,49,51,41,56,0,53],
[35,34,38,35,36,35,30,37,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,33,40,44,48,44,38,45,48],
[40,0,37,34,42,49,46,41,46,46],
[48,44,0,39,41,48,47,38,39,51],
[41,47,42,0,58,46,40,46,44,48],
[37,39,40,23,0,40,44,36,37,43],
[33,32,33,35,41,0,39,37,31,43],
[37,35,34,41,37,42,0,39,46,48],
[43,40,43,35,45,44,42,0,42,49],
[36,35,42,37,44,50,35,39,0,52],
[33,35,30,33,38,38,33,32,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,43,33,36,47,40,47,41,42],
[39,0,39,40,38,45,43,44,43,46],
[38,42,0,41,42,44,43,45,41,44],
[48,41,40,0,46,46,41,42,47,46],
[45,43,39,35,0,47,45,42,40,38],
[34,36,37,35,34,0,39,35,37,41],
[41,38,38,40,36,42,0,41,38,43],
[34,37,36,39,39,46,40,0,43,39],
[40,38,40,34,41,44,43,38,0,38],
[39,35,37,35,43,40,38,42,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,39,44,38,31,34,38,30,43],
[50,0,49,57,49,39,48,43,36,40],
[42,32,0,50,45,37,36,42,40,48],
[37,24,31,0,31,34,33,31,31,39],
[43,32,36,50,0,41,40,39,40,45],
[50,42,44,47,40,0,43,44,46,46],
[47,33,45,48,41,38,0,44,45,48],
[43,38,39,50,42,37,37,0,37,47],
[51,45,41,50,41,35,36,44,0,44],
[38,41,33,42,36,35,33,34,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,48,48,47,32,48,49,64,48],
[34,0,49,65,66,49,65,49,65,50],
[33,32,0,33,32,34,65,34,33,33],
[33,16,48,0,32,32,64,32,47,33],
[34,15,49,49,0,49,49,49,32,49],
[49,32,47,49,32,0,47,33,47,49],
[33,16,16,17,32,34,0,34,49,33],
[32,32,47,49,32,48,47,0,64,32],
[17,16,48,34,49,34,32,17,0,17],
[33,31,48,48,32,32,48,49,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,38,44,41,55,43,40,49,56],
[44,0,42,41,35,47,39,50,45,40],
[43,39,0,43,39,46,42,44,38,43],
[37,40,38,0,40,45,39,42,39,41],
[40,46,42,41,0,38,44,40,44,46],
[26,34,35,36,43,0,41,39,41,37],
[38,42,39,42,37,40,0,46,38,38],
[41,31,37,39,41,42,35,0,43,37],
[32,36,43,42,37,40,43,38,0,44],
[25,41,38,40,35,44,43,44,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,43,39,41,37,43,42,45,36],
[43,0,49,48,44,39,50,42,54,44],
[38,32,0,35,40,41,42,32,37,42],
[42,33,46,0,36,36,39,35,46,39],
[40,37,41,45,0,38,47,33,43,35],
[44,42,40,45,43,0,40,34,50,42],
[38,31,39,42,34,41,0,38,52,42],
[39,39,49,46,48,47,43,0,46,48],
[36,27,44,35,38,31,29,35,0,36],
[45,37,39,42,46,39,39,33,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,47,36,54,52,50,58,46,40],
[28,0,28,38,45,34,37,44,38,44],
[34,53,0,42,56,38,45,44,40,40],
[45,43,39,0,52,50,37,58,54,29],
[27,36,25,29,0,31,37,33,24,24],
[29,47,43,31,50,0,50,49,41,39],
[31,44,36,44,44,31,0,46,42,43],
[23,37,37,23,48,32,35,0,35,22],
[35,43,41,27,57,40,39,46,0,46],
[41,37,41,52,57,42,38,59,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,55,46,46,36,47,55,46,45],
[26,0,26,37,46,26,46,53,27,25],
[26,55,0,37,46,36,36,53,37,25],
[35,44,44,0,63,35,45,62,45,43],
[35,35,35,18,0,35,46,53,36,34],
[45,55,45,46,46,0,55,62,20,35],
[34,35,45,36,35,26,0,53,27,35],
[26,28,28,19,28,19,28,0,19,25],
[35,54,44,36,45,61,54,62,0,34],
[36,56,56,38,47,46,46,56,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,43,49,41,40,36,39,27,47],
[41,0,47,42,44,39,43,39,38,43],
[38,34,0,41,40,37,36,36,27,38],
[32,39,40,0,36,36,37,41,30,35],
[40,37,41,45,0,44,38,44,35,41],
[41,42,44,45,37,0,37,42,34,37],
[45,38,45,44,43,44,0,37,43,44],
[42,42,45,40,37,39,44,0,39,42],
[54,43,54,51,46,47,38,42,0,53],
[34,38,43,46,40,44,37,39,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,48,35,42,35,52,36,34,38],
[51,0,39,45,37,39,47,40,34,42],
[33,42,0,32,43,34,49,31,39,40],
[46,36,49,0,41,36,50,55,42,40],
[39,44,38,40,0,39,54,47,33,40],
[46,42,47,45,42,0,48,46,35,53],
[29,34,32,31,27,33,0,34,25,28],
[45,41,50,26,34,35,47,0,44,42],
[47,47,42,39,48,46,56,37,0,44],
[43,39,41,41,41,28,53,39,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,49,33,43,49,44,42,49,33],
[38,0,41,35,38,40,37,43,38,39],
[32,40,0,29,39,45,40,30,38,36],
[48,46,52,0,47,44,39,40,51,38],
[38,43,42,34,0,46,43,39,48,33],
[32,41,36,37,35,0,46,39,44,30],
[37,44,41,42,38,35,0,45,38,36],
[39,38,51,41,42,42,36,0,50,41],
[32,43,43,30,33,37,43,31,0,29],
[48,42,45,43,48,51,45,40,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,46,44,37,51,43,41,37,47],
[40,0,42,39,31,41,36,43,32,43],
[35,39,0,49,34,34,34,38,38,36],
[37,42,32,0,38,39,34,42,38,39],
[44,50,47,43,0,48,41,41,36,39],
[30,40,47,42,33,0,33,44,35,30],
[38,45,47,47,40,48,0,47,39,38],
[40,38,43,39,40,37,34,0,33,36],
[44,49,43,43,45,46,42,48,0,40],
[34,38,45,42,42,51,43,45,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,37,35,32,32,36,28,39,39],
[46,0,38,38,36,46,41,36,40,45],
[44,43,0,40,34,37,44,41,43,45],
[46,43,41,0,40,40,43,39,45,45],
[49,45,47,41,0,40,44,42,44,40],
[49,35,44,41,41,0,47,41,45,40],
[45,40,37,38,37,34,0,41,40,41],
[53,45,40,42,39,40,40,0,43,46],
[42,41,38,36,37,36,41,38,0,44],
[42,36,36,36,41,41,40,35,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,46,32,45,40,47,41,39,40],
[50,0,38,30,38,48,41,47,57,53],
[35,43,0,52,39,44,44,49,46,47],
[49,51,29,0,45,27,43,50,47,52],
[36,43,42,36,0,34,40,49,53,58],
[41,33,37,54,47,0,43,51,45,50],
[34,40,37,38,41,38,0,47,49,58],
[40,34,32,31,32,30,34,0,33,37],
[42,24,35,34,28,36,32,48,0,55],
[41,28,34,29,23,31,23,44,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,36,47,36,39,35,37,38,34],
[48,0,45,52,43,59,41,33,49,46],
[45,36,0,36,34,56,30,33,36,42],
[34,29,45,0,37,47,31,31,32,40],
[45,38,47,44,0,50,41,44,52,43],
[42,22,25,34,31,0,33,21,33,25],
[46,40,51,50,40,48,0,43,43,41],
[44,48,48,50,37,60,38,0,44,42],
[43,32,45,49,29,48,38,37,0,40],
[47,35,39,41,38,56,40,39,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,44,41,44,50,38,42,55,37],
[42,0,37,42,31,39,32,37,40,39],
[37,44,0,47,41,48,42,39,41,31],
[40,39,34,0,31,41,42,34,47,25],
[37,50,40,50,0,51,47,37,43,41],
[31,42,33,40,30,0,41,33,34,31],
[43,49,39,39,34,40,0,38,37,29],
[39,44,42,47,44,48,43,0,42,40],
[26,41,40,34,38,47,44,39,0,30],
[44,42,50,56,40,50,52,41,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,45,40,39,44,40,45,35,36],
[34,0,38,32,31,37,36,37,25,33],
[36,43,0,40,35,40,44,39,28,37],
[41,49,41,0,42,51,40,49,46,43],
[42,50,46,39,0,44,44,45,44,49],
[37,44,41,30,37,0,38,40,27,40],
[41,45,37,41,37,43,0,40,37,43],
[36,44,42,32,36,41,41,0,37,43],
[46,56,53,35,37,54,44,44,0,40],
[45,48,44,38,32,41,38,38,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,58,43,45,40,37,56,31,40],
[25,0,52,40,30,27,30,25,37,40],
[23,29,0,44,40,31,22,35,29,50],
[38,41,37,0,37,19,37,38,44,32],
[36,51,41,44,0,51,28,30,29,47],
[41,54,50,62,30,0,30,48,37,50],
[44,51,59,44,53,51,0,44,35,47],
[25,56,46,43,51,33,37,0,24,46],
[50,44,52,37,52,44,46,57,0,47],
[41,41,31,49,34,31,34,35,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,38,48,46,42,55,50,41,50],
[31,0,31,36,36,31,40,36,32,35],
[43,50,0,44,41,40,41,35,41,41],
[33,45,37,0,36,34,46,34,37,38],
[35,45,40,45,0,45,45,44,42,48],
[39,50,41,47,36,0,54,46,42,50],
[26,41,40,35,36,27,0,37,31,39],
[31,45,46,47,37,35,44,0,37,45],
[40,49,40,44,39,39,50,44,0,45],
[31,46,40,43,33,31,42,36,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,42,44,39,46,49,46,46,43],
[36,0,40,37,37,38,41,31,37,39],
[39,41,0,39,41,37,50,32,50,39],
[37,44,42,0,41,43,51,31,48,34],
[42,44,40,40,0,42,47,41,45,39],
[35,43,44,38,39,0,46,28,42,40],
[32,40,31,30,34,35,0,31,27,33],
[35,50,49,50,40,53,50,0,48,39],
[35,44,31,33,36,39,54,33,0,29],
[38,42,42,47,42,41,48,42,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,39,30,43,41,32,43,41,34],
[46,0,53,37,45,42,38,48,47,40],
[42,28,0,40,51,37,34,43,42,36],
[51,44,41,0,56,43,46,52,36,36],
[38,36,30,25,0,33,41,47,28,32],
[40,39,44,38,48,0,40,40,38,37],
[49,43,47,35,40,41,0,41,42,39],
[38,33,38,29,34,41,40,0,48,36],
[40,34,39,45,53,43,39,33,0,44],
[47,41,45,45,49,44,42,45,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,37,30,50,40,43,31,41,47],
[34,0,53,46,54,42,45,45,47,49],
[44,28,0,34,43,32,46,30,32,39],
[51,35,47,0,53,42,38,38,39,48],
[31,27,38,28,0,26,40,37,40,36],
[41,39,49,39,55,0,47,34,46,54],
[38,36,35,43,41,34,0,37,41,53],
[50,36,51,43,44,47,44,0,33,62],
[40,34,49,42,41,35,40,48,0,54],
[34,32,42,33,45,27,28,19,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,43,37,45,43,44,45,39,42],
[44,0,40,35,43,35,41,44,39,38],
[38,41,0,37,39,37,36,41,35,38],
[44,46,44,0,45,37,43,50,39,52],
[36,38,42,36,0,41,41,42,37,43],
[38,46,44,44,40,0,43,42,39,41],
[37,40,45,38,40,38,0,41,41,37],
[36,37,40,31,39,39,40,0,34,45],
[42,42,46,42,44,42,40,47,0,47],
[39,43,43,29,38,40,44,36,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,44,38,37,36,40,35,42,34],
[48,0,52,47,41,47,50,39,49,52],
[37,29,0,28,34,37,40,27,36,36],
[43,34,53,0,43,46,43,41,45,47],
[44,40,47,38,0,41,38,34,40,44],
[45,34,44,35,40,0,35,30,37,44],
[41,31,41,38,43,46,0,32,44,38],
[46,42,54,40,47,51,49,0,48,46],
[39,32,45,36,41,44,37,33,0,39],
[47,29,45,34,37,37,43,35,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,33,30,45,43,41,37,46,42],
[43,0,39,41,47,40,39,36,38,42],
[48,42,0,34,40,34,42,46,45,45],
[51,40,47,0,44,43,49,47,47,48],
[36,34,41,37,0,42,38,41,43,41],
[38,41,47,38,39,0,44,42,40,45],
[40,42,39,32,43,37,0,42,37,43],
[44,45,35,34,40,39,39,0,42,44],
[35,43,36,34,38,41,44,39,0,44],
[39,39,36,33,40,36,38,37,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,50,61,49,34,41,56,51,40],
[44,0,38,47,51,23,44,49,41,45],
[31,43,0,54,43,38,39,44,48,43],
[20,34,27,0,36,20,36,40,42,23],
[32,30,38,45,0,23,42,38,39,36],
[47,58,43,61,58,0,39,49,43,54],
[40,37,42,45,39,42,0,50,44,38],
[25,32,37,41,43,32,31,0,45,35],
[30,40,33,39,42,38,37,36,0,35],
[41,36,38,58,45,27,43,46,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,47,52,38,40,41,41,42,38],
[35,0,48,40,41,38,45,42,42,41],
[34,33,0,42,36,35,40,35,41,42],
[29,41,39,0,36,33,44,35,37,35],
[43,40,45,45,0,35,41,38,46,46],
[41,43,46,48,46,0,43,37,41,43],
[40,36,41,37,40,38,0,36,42,41],
[40,39,46,46,43,44,45,0,41,40],
[39,39,40,44,35,40,39,40,0,40],
[43,40,39,46,35,38,40,41,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,45,41,37,43,36,40,44,43],
[31,0,34,34,34,37,30,35,37,35],
[36,47,0,40,40,38,35,45,36,41],
[40,47,41,0,36,44,33,38,39,45],
[44,47,41,45,0,45,43,43,40,48],
[38,44,43,37,36,0,36,37,34,41],
[45,51,46,48,38,45,0,37,36,47],
[41,46,36,43,38,44,44,0,36,44],
[37,44,45,42,41,47,45,45,0,44],
[38,46,40,36,33,40,34,37,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,35,40,37,47,39,44,30,31],
[41,0,39,41,34,43,47,45,34,35],
[46,42,0,41,40,47,38,37,42,41],
[41,40,40,0,35,48,45,33,33,34],
[44,47,41,46,0,48,49,41,30,35],
[34,38,34,33,33,0,32,33,29,30],
[42,34,43,36,32,49,0,37,34,36],
[37,36,44,48,40,48,44,0,35,36],
[51,47,39,48,51,52,47,46,0,39],
[50,46,40,47,46,51,45,45,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,20,31,19,28,31,32,24,32],
[48,0,29,30,41,31,35,32,38,26],
[61,52,0,39,32,35,44,41,38,26],
[50,51,42,0,40,34,39,41,34,42],
[62,40,49,41,0,49,52,42,37,45],
[53,50,46,47,32,0,45,48,25,40],
[50,46,37,42,29,36,0,49,34,51],
[49,49,40,40,39,33,32,0,42,36],
[57,43,43,47,44,56,47,39,0,47],
[49,55,55,39,36,41,30,45,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,38,48,39,41,36,45,34,44],
[40,0,32,46,38,42,34,43,39,39],
[43,49,0,49,44,41,36,46,39,46],
[33,35,32,0,27,29,31,35,32,33],
[42,43,37,54,0,38,41,49,39,41],
[40,39,40,52,43,0,33,42,40,39],
[45,47,45,50,40,48,0,49,42,50],
[36,38,35,46,32,39,32,0,38,38],
[47,42,42,49,42,41,39,43,0,45],
[37,42,35,48,40,42,31,43,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,44,42,44,38,41,41,42,41],
[44,0,44,47,37,47,43,52,44,42],
[37,37,0,37,35,38,37,38,40,41],
[39,34,44,0,32,46,40,44,46,42],
[37,44,46,49,0,45,41,45,41,38],
[43,34,43,35,36,0,42,41,37,38],
[40,38,44,41,40,39,0,39,32,33],
[40,29,43,37,36,40,42,0,34,39],
[39,37,41,35,40,44,49,47,0,43],
[40,39,40,39,43,43,48,42,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,68,35,34,35,72,49,59,35],
[33,0,44,20,43,33,33,58,33,32],
[13,37,0,11,47,0,13,49,13,25],
[46,61,70,0,69,46,46,58,33,49],
[47,38,34,12,0,25,38,38,25,25],
[46,48,81,35,56,0,69,58,57,59],
[9,48,68,35,43,12,0,58,57,24],
[32,23,32,23,43,23,23,0,32,23],
[22,48,68,48,56,24,24,49,0,36],
[46,49,56,32,56,22,57,58,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,32,36,45,44,35,35,36,47],
[32,0,35,36,37,39,28,27,32,38],
[49,46,0,41,46,47,38,45,53,55],
[45,45,40,0,45,45,42,37,42,41],
[36,44,35,36,0,48,35,33,44,42],
[37,42,34,36,33,0,36,33,36,41],
[46,53,43,39,46,45,0,40,47,54],
[46,54,36,44,48,48,41,0,48,54],
[45,49,28,39,37,45,34,33,0,45],
[34,43,26,40,39,40,27,27,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,29,22,38,26,34,36,25,31],
[39,0,46,32,51,36,33,39,45,32],
[52,35,0,42,47,41,45,37,42,42],
[59,49,39,0,48,43,49,42,38,48],
[43,30,34,33,0,32,27,27,27,32],
[55,45,40,38,49,0,42,47,30,36],
[47,48,36,32,54,39,0,43,40,46],
[45,42,44,39,54,34,38,0,34,34],
[56,36,39,43,54,51,41,47,0,48],
[50,49,39,33,49,45,35,47,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,20,52,29,39,51,30,42,40],
[39,0,50,52,59,49,49,59,49,30],
[61,31,0,61,39,49,61,19,61,20],
[29,29,20,0,29,49,29,29,49,20],
[52,22,42,52,0,39,42,22,42,32],
[42,32,32,32,42,0,32,32,42,32],
[30,32,20,52,39,49,0,30,30,40],
[51,22,62,52,59,49,51,0,61,42],
[39,32,20,32,39,39,51,20,0,20],
[41,51,61,61,49,49,41,39,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,45,35,56,48,55,61,42,55],
[35,0,18,22,49,29,43,48,43,34],
[36,63,0,40,44,41,50,60,49,54],
[46,59,41,0,58,42,37,57,44,57],
[25,32,37,23,0,46,47,40,41,23],
[33,52,40,39,35,0,44,51,30,45],
[26,38,31,44,34,37,0,50,48,44],
[20,33,21,24,41,30,31,0,31,25],
[39,38,32,37,40,51,33,50,0,37],
[26,47,27,24,58,36,37,56,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,32,36,40,41,47,46,38,40],
[41,0,40,34,49,37,50,52,54,46],
[49,41,0,35,43,32,49,39,40,41],
[45,47,46,0,52,26,54,48,52,43],
[41,32,38,29,0,34,38,47,44,40],
[40,44,49,55,47,0,48,41,48,55],
[34,31,32,27,43,33,0,31,40,35],
[35,29,42,33,34,40,50,0,46,39],
[43,27,41,29,37,33,41,35,0,30],
[41,35,40,38,41,26,46,42,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,19,40,23,46,28,39,35,35],
[52,0,30,47,33,41,45,53,44,49],
[62,51,0,56,33,55,47,45,47,38],
[41,34,25,0,28,35,36,43,32,33],
[58,48,48,53,0,44,41,56,41,40],
[35,40,26,46,37,0,32,41,42,35],
[53,36,34,45,40,49,0,46,46,44],
[42,28,36,38,25,40,35,0,38,29],
[46,37,34,49,40,39,35,43,0,43],
[46,32,43,48,41,46,37,52,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,22,22,26,41,29,23,23,33],
[58,0,60,52,60,53,48,49,36,52],
[59,21,0,23,25,29,27,30,32,37],
[59,29,58,0,39,44,32,36,41,33],
[55,21,56,42,0,48,44,33,37,41],
[40,28,52,37,33,0,28,43,29,39],
[52,33,54,49,37,53,0,46,31,38],
[58,32,51,45,48,38,35,0,30,49],
[58,45,49,40,44,52,50,51,0,50],
[48,29,44,48,40,42,43,32,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,28,53,40,25,54,53,54,53],
[13,0,27,14,14,12,41,25,29,26],
[53,54,0,39,41,40,54,53,40,54],
[28,67,42,0,15,27,41,40,15,54],
[41,67,40,66,0,53,54,53,42,54],
[56,69,41,54,28,0,56,42,42,41],
[27,40,27,40,27,25,0,13,13,40],
[28,56,28,41,28,39,68,0,56,41],
[27,52,41,66,39,39,68,25,0,39],
[28,55,27,27,27,40,41,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,49,40,49,49,43,55,43,46],
[35,0,39,31,35,40,34,37,39,36],
[32,42,0,36,36,40,33,40,36,36],
[41,50,45,0,44,56,40,45,49,40],
[32,46,45,37,0,44,39,44,50,37],
[32,41,41,25,37,0,38,39,34,34],
[38,47,48,41,42,43,0,45,45,40],
[26,44,41,36,37,42,36,0,40,41],
[38,42,45,32,31,47,36,41,0,42],
[35,45,45,41,44,47,41,40,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,45,51,32,33,42,39,50,38],
[46,0,34,45,31,39,21,30,50,29],
[36,47,0,44,39,45,29,49,39,33],
[30,36,37,0,32,40,18,32,40,22],
[49,50,42,49,0,39,36,39,50,44],
[48,42,36,41,42,0,32,33,44,26],
[39,60,52,63,45,49,0,42,52,45],
[42,51,32,49,42,48,39,0,42,49],
[31,31,42,41,31,37,29,39,0,33],
[43,52,48,59,37,55,36,32,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,48,49,48,15,17,32,48,48],
[49,0,65,49,64,15,34,32,48,49],
[33,16,0,16,16,31,0,15,16,16],
[32,32,65,0,15,32,17,49,65,31],
[33,17,65,66,0,32,34,49,50,50],
[66,66,50,49,49,0,50,65,33,49],
[64,47,81,64,47,31,0,48,48,64],
[49,49,66,32,32,16,33,0,16,32],
[33,33,65,16,31,48,33,65,0,16],
[33,32,65,50,31,32,17,49,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,39,39,34,40,41,42,47,34],
[48,0,35,34,34,40,36,45,39,34],
[42,46,0,37,34,45,39,46,45,44],
[42,47,44,0,40,44,37,45,32,43],
[47,47,47,41,0,46,38,48,42,44],
[41,41,36,37,35,0,35,46,37,28],
[40,45,42,44,43,46,0,45,42,41],
[39,36,35,36,33,35,36,0,36,35],
[34,42,36,49,39,44,39,45,0,39],
[47,47,37,38,37,53,40,46,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,36,40,37,40,45,41,37,45],
[41,0,35,38,36,36,45,33,38,38],
[45,46,0,45,42,42,42,44,36,49],
[41,43,36,0,32,40,38,33,35,40],
[44,45,39,49,0,39,46,44,41,43],
[41,45,39,41,42,0,43,39,36,46],
[36,36,39,43,35,38,0,37,32,41],
[40,48,37,48,37,42,44,0,40,42],
[44,43,45,46,40,45,49,41,0,52],
[36,43,32,41,38,35,40,39,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,32,44,42,46,47,43,48,50],
[39,0,29,38,42,38,42,43,38,35],
[49,52,0,44,45,39,50,56,52,48],
[37,43,37,0,35,38,51,40,43,39],
[39,39,36,46,0,40,46,44,44,39],
[35,43,42,43,41,0,50,47,48,42],
[34,39,31,30,35,31,0,38,43,40],
[38,38,25,41,37,34,43,0,33,42],
[33,43,29,38,37,33,38,48,0,42],
[31,46,33,42,42,39,41,39,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,23,31,29,33,50,31,30,19],
[52,0,32,41,33,33,50,32,52,39],
[58,49,0,28,49,49,61,62,51,49],
[50,40,53,0,42,51,63,43,51,40],
[52,48,32,39,0,52,39,40,40,50],
[48,48,32,30,29,0,60,30,29,50],
[31,31,20,18,42,21,0,10,30,40],
[50,49,19,38,41,51,71,0,40,49],
[51,29,30,30,41,52,51,41,0,40],
[62,42,32,41,31,31,41,32,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,52,63,50,43,60,69,51,64],
[43,0,40,49,36,41,46,56,39,59],
[29,41,0,60,26,47,41,50,33,42],
[18,32,21,0,31,33,28,50,27,45],
[31,45,55,50,0,34,43,44,42,68],
[38,40,34,48,47,0,43,59,49,54],
[21,35,40,53,38,38,0,49,26,41],
[12,25,31,31,37,22,32,0,31,44],
[30,42,48,54,39,32,55,50,0,70],
[17,22,39,36,13,27,40,37,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,46,41,52,39,42,39,45,35],
[49,0,43,40,45,45,47,41,42,31],
[35,38,0,36,40,36,40,35,41,33],
[40,41,45,0,48,42,50,45,44,43],
[29,36,41,33,0,34,35,32,36,34],
[42,36,45,39,47,0,37,37,45,38],
[39,34,41,31,46,44,0,42,39,31],
[42,40,46,36,49,44,39,0,47,39],
[36,39,40,37,45,36,42,34,0,29],
[46,50,48,38,47,43,50,42,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,38,39,38,42,39,28,34,38],
[54,0,49,46,47,54,46,39,44,44],
[43,32,0,34,38,45,43,41,37,38],
[42,35,47,0,39,46,42,42,41,38],
[43,34,43,42,0,41,34,36,40,40],
[39,27,36,35,40,0,34,34,35,31],
[42,35,38,39,47,47,0,42,41,46],
[53,42,40,39,45,47,39,0,46,47],
[47,37,44,40,41,46,40,35,0,36],
[43,37,43,43,41,50,35,34,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,40,37,43,47,46,34,42,51],
[43,0,47,37,52,48,53,41,42,53],
[41,34,0,41,46,45,45,37,45,53],
[44,44,40,0,43,48,46,38,44,45],
[38,29,35,38,0,43,43,32,36,47],
[34,33,36,33,38,0,42,35,41,44],
[35,28,36,35,38,39,0,33,41,46],
[47,40,44,43,49,46,48,0,50,47],
[39,39,36,37,45,40,40,31,0,40],
[30,28,28,36,34,37,35,34,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,0,0,0,0,27,0,0],
[81,0,55,55,55,55,28,55,81,55],
[81,26,0,0,0,0,26,27,26,28],
[81,26,81,0,54,0,54,81,81,81],
[81,26,81,27,0,0,54,55,81,55],
[81,26,81,81,81,0,54,81,81,81],
[81,53,55,27,27,27,0,27,81,55],
[54,26,54,0,26,0,54,0,54,28],
[81,0,55,0,0,0,0,27,0,28],
[81,26,53,0,26,0,26,53,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,47,39,48,46,43,41,39,45],
[38,0,43,42,41,38,41,44,38,44],
[34,38,0,35,45,40,39,36,37,37],
[42,39,46,0,44,50,41,41,40,45],
[33,40,36,37,0,45,36,38,36,40],
[35,43,41,31,36,0,36,36,36,42],
[38,40,42,40,45,45,0,41,43,43],
[40,37,45,40,43,45,40,0,43,42],
[42,43,44,41,45,45,38,38,0,43],
[36,37,44,36,41,39,38,39,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,37,39,52,36,22,40,25,37],
[53,0,46,53,54,36,30,48,32,46],
[44,35,0,31,47,34,19,34,17,31],
[42,28,50,0,41,36,25,40,32,33],
[29,27,34,40,0,32,16,27,31,36],
[45,45,47,45,49,0,37,41,36,52],
[59,51,62,56,65,44,0,40,39,52],
[41,33,47,41,54,40,41,0,49,45],
[56,49,64,49,50,45,42,32,0,48],
[44,35,50,48,45,29,29,36,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,31,37,41,40,38,45,30,33],
[39,0,29,43,34,32,42,41,27,30],
[50,52,0,47,40,43,45,49,43,50],
[44,38,34,0,36,38,41,46,40,39],
[40,47,41,45,0,50,46,55,37,50],
[41,49,38,43,31,0,41,58,39,42],
[43,39,36,40,35,40,0,53,34,28],
[36,40,32,35,26,23,28,0,30,36],
[51,54,38,41,44,42,47,51,0,47],
[48,51,31,42,31,39,53,45,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,45,39,32,45,46,40,40,44],
[43,0,39,38,30,37,42,40,34,37],
[36,42,0,42,31,45,45,41,38,37],
[42,43,39,0,32,39,41,35,36,41],
[49,51,50,49,0,55,48,38,47,51],
[36,44,36,42,26,0,43,34,32,41],
[35,39,36,40,33,38,0,41,40,36],
[41,41,40,46,43,47,40,0,47,48],
[41,47,43,45,34,49,41,34,0,39],
[37,44,44,40,30,40,45,33,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,57,31,33,49,41,41,32,40],
[40,0,31,23,24,23,40,39,16,23],
[24,50,0,25,7,32,57,43,16,25],
[50,58,56,0,41,32,40,65,33,31],
[48,57,74,40,0,41,65,66,48,40],
[32,58,49,49,40,0,57,59,33,32],
[40,41,24,41,16,24,0,34,32,32],
[40,42,38,16,15,22,47,0,24,23],
[49,65,65,48,33,48,49,57,0,47],
[41,58,56,50,41,49,49,58,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,57,40,45,40,42,37,43,46],
[39,0,36,20,25,36,27,32,30,23],
[24,45,0,33,23,18,35,37,30,23],
[41,61,48,0,40,33,42,48,45,41],
[36,56,58,41,0,40,37,48,40,42],
[41,45,63,48,41,0,25,38,42,41],
[39,54,46,39,44,56,0,46,38,37],
[44,49,44,33,33,43,35,0,33,36],
[38,51,51,36,41,39,43,48,0,38],
[35,58,58,40,39,40,44,45,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,30,45,45,41,47,54,35,43],
[50,0,40,45,51,60,51,54,50,50],
[51,41,0,53,51,48,49,63,45,40],
[36,36,28,0,44,45,40,61,41,33],
[36,30,30,37,0,49,43,61,46,34],
[40,21,33,36,32,0,38,44,35,38],
[34,30,32,41,38,43,0,56,39,36],
[27,27,18,20,20,37,25,0,36,22],
[46,31,36,40,35,46,42,45,0,32],
[38,31,41,48,47,43,45,59,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,29,51,46,38,41,43,35,37],
[45,0,36,54,50,46,41,44,45,40],
[52,45,0,54,49,40,52,50,45,36],
[30,27,27,0,34,33,36,25,26,28],
[35,31,32,47,0,34,42,43,32,30],
[43,35,41,48,47,0,53,54,34,46],
[40,40,29,45,39,28,0,34,38,44],
[38,37,31,56,38,27,47,0,31,34],
[46,36,36,55,49,47,43,50,0,39],
[44,41,45,53,51,35,37,47,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,32,38,26,38,26,37,39,32],
[37,0,30,29,32,39,29,41,38,33],
[49,51,0,41,44,47,38,48,38,45],
[43,52,40,0,43,40,40,44,44,38],
[55,49,37,38,0,43,43,47,41,52],
[43,42,34,41,38,0,36,39,40,36],
[55,52,43,41,38,45,0,48,49,43],
[44,40,33,37,34,42,33,0,38,36],
[42,43,43,37,40,41,32,43,0,40],
[49,48,36,43,29,45,38,45,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,45,41,43,39,26,36,30,38],
[38,0,33,45,39,41,40,39,33,31],
[36,48,0,45,43,40,43,43,43,33],
[40,36,36,0,47,45,25,37,26,28],
[38,42,38,34,0,45,31,37,32,30],
[42,40,41,36,36,0,40,41,30,34],
[55,41,38,56,50,41,0,40,48,43],
[45,42,38,44,44,40,41,0,43,37],
[51,48,38,55,49,51,33,38,0,36],
[43,50,48,53,51,47,38,44,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,49,41,38,46,49,56,56,48],
[28,0,41,47,23,41,45,45,55,49],
[32,40,0,39,30,34,28,48,44,39],
[40,34,42,0,17,40,25,48,38,44],
[43,58,51,64,0,47,38,61,63,59],
[35,40,47,41,34,0,32,48,52,36],
[32,36,53,56,43,49,0,57,57,48],
[25,36,33,33,20,33,24,0,24,36],
[25,26,37,43,18,29,24,57,0,31],
[33,32,42,37,22,45,33,45,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,40,35,46,40,40,38,50,46],
[35,0,40,32,38,23,44,31,49,25],
[41,41,0,41,52,40,49,43,38,40],
[46,49,40,0,52,37,49,36,44,40],
[35,43,29,29,0,43,32,31,42,40],
[41,58,41,44,38,0,43,39,43,41],
[41,37,32,32,49,38,0,36,36,46],
[43,50,38,45,50,42,45,0,46,48],
[31,32,43,37,39,38,45,35,0,42],
[35,56,41,41,41,40,35,33,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,35,43,51,61,26,37,45,49],
[50,0,41,37,49,66,42,57,42,45],
[46,40,0,39,38,44,27,51,34,31],
[38,44,42,0,39,60,33,39,49,33],
[30,32,43,42,0,52,33,47,44,37],
[20,15,37,21,29,0,21,41,36,29],
[55,39,54,48,48,60,0,55,54,45],
[44,24,30,42,34,40,26,0,40,45],
[36,39,47,32,37,45,27,41,0,41],
[32,36,50,48,44,52,36,36,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,29,45,51,42,22,54,35,36],
[36,0,48,44,44,31,34,44,41,23],
[52,33,0,44,41,43,35,52,43,28],
[36,37,37,0,39,30,30,40,35,21],
[30,37,40,42,0,32,31,46,35,27],
[39,50,38,51,49,0,36,38,39,35],
[59,47,46,51,50,45,0,54,35,40],
[27,37,29,41,35,43,27,0,26,20],
[46,40,38,46,46,42,46,55,0,43],
[45,58,53,60,54,46,41,61,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,47,43,43,41,36,37,41,42],
[42,0,48,46,39,41,40,33,40,37],
[34,33,0,42,39,37,34,29,34,42],
[38,35,39,0,30,40,33,30,29,32],
[38,42,42,51,0,40,41,35,41,43],
[40,40,44,41,41,0,38,40,38,40],
[45,41,47,48,40,43,0,34,40,41],
[44,48,52,51,46,41,47,0,42,40],
[40,41,47,52,40,43,41,39,0,44],
[39,44,39,49,38,41,40,41,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,33,28,35,46,43,34,38,43],
[50,0,33,39,35,49,47,36,50,46],
[48,48,0,40,36,53,36,39,43,38],
[53,42,41,0,32,52,46,37,51,38],
[46,46,45,49,0,48,43,52,48,39],
[35,32,28,29,33,0,38,30,32,31],
[38,34,45,35,38,43,0,33,53,38],
[47,45,42,44,29,51,48,0,49,42],
[43,31,38,30,33,49,28,32,0,35],
[38,35,43,43,42,50,43,39,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,46,54,51,47,38,40,43,42],
[39,0,47,41,45,44,32,38,37,39],
[35,34,0,43,44,44,32,44,39,29],
[27,40,38,0,41,42,42,45,44,37],
[30,36,37,40,0,47,32,37,38,36],
[34,37,37,39,34,0,22,35,23,37],
[43,49,49,39,49,59,0,54,38,49],
[41,43,37,36,44,46,27,0,32,38],
[38,44,42,37,43,58,43,49,0,42],
[39,42,52,44,45,44,32,43,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,41,35,49,34,43,46,42,46],
[45,0,46,39,39,45,55,39,41,37],
[40,35,0,39,41,44,46,41,36,35],
[46,42,42,0,42,40,45,43,47,47],
[32,42,40,39,0,35,46,41,44,46],
[47,36,37,41,46,0,46,43,35,40],
[38,26,35,36,35,35,0,39,35,44],
[35,42,40,38,40,38,42,0,36,39],
[39,40,45,34,37,46,46,45,0,42],
[35,44,46,34,35,41,37,42,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,35,37,38,37,37,41,49,33],
[39,0,42,40,37,38,49,47,37,40],
[46,39,0,42,37,39,41,45,39,32],
[44,41,39,0,40,42,45,43,43,38],
[43,44,44,41,0,39,46,45,44,38],
[44,43,42,39,42,0,48,41,44,42],
[44,32,40,36,35,33,0,36,43,27],
[40,34,36,38,36,40,45,0,41,39],
[32,44,42,38,37,37,38,40,0,34],
[48,41,49,43,43,39,54,42,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,44,37,44,50,44,43,40,41],
[45,0,40,42,48,48,50,51,45,46],
[37,41,0,33,36,43,47,40,44,42],
[44,39,48,0,43,53,46,44,40,40],
[37,33,45,38,0,43,44,44,35,33],
[31,33,38,28,38,0,47,46,38,36],
[37,31,34,35,37,34,0,45,39,29],
[38,30,41,37,37,35,36,0,38,36],
[41,36,37,41,46,43,42,43,0,37],
[40,35,39,41,48,45,52,45,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,50,43,51,47,53,54,42,50],
[45,0,45,43,40,41,38,45,31,46],
[31,36,0,31,41,27,32,32,34,49],
[38,38,50,0,48,39,46,47,36,43],
[30,41,40,33,0,28,50,33,28,44],
[34,40,54,42,53,0,48,50,30,54],
[28,43,49,35,31,33,0,40,27,41],
[27,36,49,34,48,31,41,0,41,48],
[39,50,47,45,53,51,54,40,0,57],
[31,35,32,38,37,27,40,33,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,43,36,30,28,46,30,34,34],
[58,0,52,49,39,43,55,42,55,50],
[38,29,0,33,36,32,42,39,46,34],
[45,32,48,0,47,32,50,44,39,39],
[51,42,45,34,0,41,56,30,54,50],
[53,38,49,49,40,0,63,44,44,47],
[35,26,39,31,25,18,0,21,31,30],
[51,39,42,37,51,37,60,0,42,40],
[47,26,35,42,27,37,50,39,0,39],
[47,31,47,42,31,34,51,41,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,38,46,48,46,39,40,43,48],
[45,0,44,49,38,51,35,37,45,37],
[43,37,0,40,40,44,38,41,38,41],
[35,32,41,0,36,42,39,39,40,37],
[33,43,41,45,0,47,41,34,41,35],
[35,30,37,39,34,0,35,36,45,38],
[42,46,43,42,40,46,0,42,43,46],
[41,44,40,42,47,45,39,0,42,44],
[38,36,43,41,40,36,38,39,0,33],
[33,44,40,44,46,43,35,37,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,34,42,34,35,40,34,39,45],
[50,0,36,54,31,41,46,51,38,53],
[47,45,0,42,39,35,47,55,44,52],
[39,27,39,0,24,18,40,35,34,38],
[47,50,42,57,0,40,47,55,52,47],
[46,40,46,63,41,0,52,50,45,58],
[41,35,34,41,34,29,0,44,46,48],
[47,30,26,46,26,31,37,0,38,37],
[42,43,37,47,29,36,35,43,0,40],
[36,28,29,43,34,23,33,44,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,46,41,43,37,44,53,45,44],
[45,0,37,42,49,37,50,48,38,37],
[35,44,0,43,37,34,40,40,46,33],
[40,39,38,0,39,45,38,47,47,40],
[38,32,44,42,0,34,39,49,51,43],
[44,44,47,36,47,0,36,50,50,38],
[37,31,41,43,42,45,0,47,57,45],
[28,33,41,34,32,31,34,0,41,27],
[36,43,35,34,30,31,24,40,0,39],
[37,44,48,41,38,43,36,54,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,40,54,51,68,43,15,53,28],
[41,0,40,54,53,53,28,41,40,28],
[41,41,0,69,26,56,43,43,43,28],
[27,27,12,0,12,42,27,27,27,15],
[30,28,55,69,0,43,43,30,56,43],
[13,28,25,39,38,0,28,13,38,13],
[38,53,38,54,38,53,0,41,40,13],
[66,40,38,54,51,68,40,0,53,41],
[28,41,38,54,25,43,41,28,0,41],
[53,53,53,66,38,68,68,40,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,40,35,36,42,38,28,38,33],
[44,0,38,38,36,38,37,32,38,36],
[41,43,0,50,35,39,40,34,42,36],
[46,43,31,0,36,38,41,37,44,41],
[45,45,46,45,0,44,39,39,36,42],
[39,43,42,43,37,0,38,34,38,35],
[43,44,41,40,42,43,0,39,39,45],
[53,49,47,44,42,47,42,0,37,42],
[43,43,39,37,45,43,42,44,0,39],
[48,45,45,40,39,46,36,39,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,27,54,35,41,30,40,38,29],
[44,0,29,43,39,38,34,44,37,41],
[54,52,0,47,55,45,35,49,59,41],
[27,38,34,0,42,46,29,45,37,36],
[46,42,26,39,0,44,39,47,45,36],
[40,43,36,35,37,0,34,48,45,35],
[51,47,46,52,42,47,0,61,53,36],
[41,37,32,36,34,33,20,0,37,31],
[43,44,22,44,36,36,28,44,0,29],
[52,40,40,45,45,46,45,50,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,44,45,43,44,42,30,30,37],
[44,0,42,46,42,43,34,37,27,45],
[37,39,0,40,37,37,41,36,27,37],
[36,35,41,0,35,43,41,33,34,45],
[38,39,44,46,0,48,36,38,28,41],
[37,38,44,38,33,0,39,36,29,43],
[39,47,40,40,45,42,0,39,35,42],
[51,44,45,48,43,45,42,0,41,40],
[51,54,54,47,53,52,46,40,0,53],
[44,36,44,36,40,38,39,41,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,34,65,50,35,65,34,31,15],
[34,0,49,65,65,50,34,49,15,30],
[47,32,0,65,51,32,66,35,47,47],
[16,16,16,0,35,16,35,35,16,16],
[31,16,30,46,0,15,50,50,31,46],
[46,31,49,65,66,0,65,50,46,46],
[16,47,15,46,31,16,0,34,31,15],
[47,32,46,46,31,31,47,0,31,46],
[50,66,34,65,50,35,50,50,0,15],
[66,51,34,65,35,35,66,35,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,38,41,41,44,46,36,43,40],
[47,0,57,39,38,40,57,44,47,45],
[43,24,0,35,34,32,40,30,31,38],
[40,42,46,0,38,42,51,28,44,46],
[40,43,47,43,0,37,47,45,40,35],
[37,41,49,39,44,0,54,34,39,44],
[35,24,41,30,34,27,0,32,31,33],
[45,37,51,53,36,47,49,0,47,43],
[38,34,50,37,41,42,50,34,0,29],
[41,36,43,35,46,37,48,38,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,50,34,17,49,32,34,49,33],
[49,0,33,17,50,32,48,17,48,33],
[31,48,0,48,48,65,48,49,49,31],
[47,64,33,0,64,65,48,32,65,31],
[64,31,33,17,0,32,48,32,48,48],
[32,49,16,16,49,0,47,0,48,16],
[49,33,33,33,33,34,0,17,65,33],
[47,64,32,49,49,81,64,0,65,31],
[32,33,32,16,33,33,16,16,0,16],
[48,48,50,50,33,65,48,50,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,41,44,33,40,39,37,33,37],
[46,0,36,46,39,53,38,39,36,53],
[40,45,0,50,41,52,44,48,41,47],
[37,35,31,0,33,41,36,35,34,35],
[48,42,40,48,0,47,47,44,44,43],
[41,28,29,40,34,0,39,39,28,36],
[42,43,37,45,34,42,0,33,35,40],
[44,42,33,46,37,42,48,0,41,45],
[48,45,40,47,37,53,46,40,0,43],
[44,28,34,46,38,45,41,36,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,35,42,40,37,43,45,56,38],
[42,0,40,43,38,43,51,39,55,51],
[46,41,0,36,46,41,45,36,48,40],
[39,38,45,0,56,43,48,47,54,46],
[41,43,35,25,0,33,39,31,39,43],
[44,38,40,38,48,0,48,38,48,39],
[38,30,36,33,42,33,0,38,44,40],
[36,42,45,34,50,43,43,0,53,38],
[25,26,33,27,42,33,37,28,0,33],
[43,30,41,35,38,42,41,43,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,53,38,46,39,43,40,50,38],
[35,0,52,39,53,41,43,45,48,47],
[28,29,0,29,43,31,41,42,36,32],
[43,42,52,0,53,39,46,53,42,39],
[35,28,38,28,0,27,34,42,31,28],
[42,40,50,42,54,0,41,48,54,45],
[38,38,40,35,47,40,0,44,47,25],
[41,36,39,28,39,33,37,0,44,33],
[31,33,45,39,50,27,34,37,0,34],
[43,34,49,42,53,36,56,48,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,40,43,44,42,40,39,45,36],
[35,0,40,39,47,40,39,41,43,40],
[41,41,0,41,40,40,42,47,40,45],
[38,42,40,0,38,37,34,37,37,44],
[37,34,41,43,0,37,36,38,39,42],
[39,41,41,44,44,0,40,41,45,36],
[41,42,39,47,45,41,0,43,45,36],
[42,40,34,44,43,40,38,0,41,39],
[36,38,41,44,42,36,36,40,0,30],
[45,41,36,37,39,45,45,42,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,43,36,50,36,37,52,23,38],
[28,0,29,30,35,27,38,59,22,35],
[38,52,0,45,37,44,23,44,44,38],
[45,51,36,0,37,51,44,52,44,45],
[31,46,44,44,0,36,38,45,32,30],
[45,54,37,30,45,0,46,54,47,45],
[44,43,58,37,43,35,0,35,36,43],
[29,22,37,29,36,27,46,0,23,36],
[58,59,37,37,49,34,45,58,0,35],
[43,46,43,36,51,36,38,45,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,44,38,38,50,39,42,48,45],
[32,0,34,26,31,33,29,26,41,32],
[37,47,0,34,30,46,39,20,53,35],
[43,55,47,0,39,49,45,43,37,50],
[43,50,51,42,0,32,40,28,45,37],
[31,48,35,32,49,0,42,34,38,48],
[42,52,42,36,41,39,0,35,54,40],
[39,55,61,38,53,47,46,0,47,51],
[33,40,28,44,36,43,27,34,0,32],
[36,49,46,31,44,33,41,30,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,25,30,31,28,34,36,33,28],
[47,0,35,31,35,26,40,40,27,36],
[56,46,0,45,44,50,44,51,42,36],
[51,50,36,0,40,33,39,42,44,37],
[50,46,37,41,0,38,40,45,39,35],
[53,55,31,48,43,0,48,51,45,44],
[47,41,37,42,41,33,0,47,38,37],
[45,41,30,39,36,30,34,0,39,35],
[48,54,39,37,42,36,43,42,0,43],
[53,45,45,44,46,37,44,46,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,39,42,44,39,40,46,35,53],
[42,0,40,49,44,41,38,44,43,52],
[42,41,0,44,42,41,42,38,41,52],
[39,32,37,0,39,36,30,42,35,48],
[37,37,39,42,0,42,37,40,37,49],
[42,40,40,45,39,0,37,42,35,47],
[41,43,39,51,44,44,0,45,40,50],
[35,37,43,39,41,39,36,0,39,49],
[46,38,40,46,44,46,41,42,0,55],
[28,29,29,33,32,34,31,32,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,38,48,38,45,40,41,45,43],
[37,0,37,44,36,39,34,37,40,40],
[43,44,0,46,41,45,43,40,46,48],
[33,37,35,0,39,39,35,36,43,39],
[43,45,40,42,0,46,41,43,48,42],
[36,42,36,42,35,0,39,36,43,39],
[41,47,38,46,40,42,0,44,47,43],
[40,44,41,45,38,45,37,0,47,43],
[36,41,35,38,33,38,34,34,0,38],
[38,41,33,42,39,42,38,38,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,54,27,34,55,46,26,33,60],
[27,0,55,19,40,48,25,41,33,54],
[27,26,0,13,40,21,13,26,32,27],
[54,62,68,0,40,42,41,49,54,61],
[47,41,41,41,0,28,41,42,47,47],
[26,33,60,39,53,0,27,26,52,46],
[35,56,68,40,40,54,0,41,38,56],
[55,40,55,32,39,55,40,0,47,60],
[48,48,49,27,34,29,43,34,0,49],
[21,27,54,20,34,35,25,21,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,38,41,47,33,38,53,46,47],
[45,0,41,31,37,34,48,54,42,48],
[43,40,0,40,29,23,44,43,42,49],
[40,50,41,0,33,35,48,51,45,58],
[34,44,52,48,0,43,56,53,41,54],
[48,47,58,46,38,0,53,56,53,48],
[43,33,37,33,25,28,0,47,41,47],
[28,27,38,30,28,25,34,0,40,43],
[35,39,39,36,40,28,40,41,0,51],
[34,33,32,23,27,33,34,38,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,53,39,27,55,53,53,67,27],
[40,0,12,41,27,41,38,27,26,41],
[28,69,0,43,41,55,38,41,26,41],
[42,40,38,0,41,55,52,55,40,41],
[54,54,40,40,0,69,54,55,54,29],
[26,40,26,26,12,0,24,12,26,41],
[28,43,43,29,27,57,0,29,28,41],
[28,54,40,26,26,69,52,0,54,41],
[14,55,55,41,27,55,53,27,0,41],
[54,40,40,40,52,40,40,40,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,56,41,50,43,38,45,50,52],
[40,0,48,38,57,38,40,49,51,28],
[25,33,0,30,43,33,34,36,35,35],
[40,43,51,0,60,45,42,44,52,47],
[31,24,38,21,0,30,32,27,47,28],
[38,43,48,36,51,0,34,49,44,41],
[43,41,47,39,49,47,0,51,52,41],
[36,32,45,37,54,32,30,0,41,37],
[31,30,46,29,34,37,29,40,0,31],
[29,53,46,34,53,40,40,44,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,41,43,38,41,41,43,46,38],
[43,0,40,36,44,33,31,40,50,35],
[40,41,0,43,46,37,36,43,47,35],
[38,45,38,0,44,38,41,46,57,44],
[43,37,35,37,0,35,34,34,49,36],
[40,48,44,43,46,0,39,37,52,43],
[40,50,45,40,47,42,0,45,54,36],
[38,41,38,35,47,44,36,0,45,36],
[35,31,34,24,32,29,27,36,0,39],
[43,46,46,37,45,38,45,45,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,33,41,43,38,37,38,37,33],
[42,0,36,38,44,39,39,36,47,36],
[48,45,0,41,50,47,43,39,48,45],
[40,43,40,0,43,47,39,36,49,50],
[38,37,31,38,0,36,40,35,41,36],
[43,42,34,34,45,0,39,34,37,38],
[44,42,38,42,41,42,0,34,42,34],
[43,45,42,45,46,47,47,0,40,42],
[44,34,33,32,40,44,39,41,0,40],
[48,45,36,31,45,43,47,39,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,40,47,45,37,41,48,44,42],
[38,0,42,47,43,42,37,39,40,40],
[41,39,0,43,39,38,37,37,45,44],
[34,34,38,0,42,35,26,34,33,37],
[36,38,42,39,0,40,38,44,39,39],
[44,39,43,46,41,0,38,28,37,40],
[40,44,44,55,43,43,0,42,48,44],
[33,42,44,47,37,53,39,0,43,44],
[37,41,36,48,42,44,33,38,0,39],
[39,41,37,44,42,41,37,37,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,34,33,33,33,29,41,32,29],
[48,0,45,36,36,40,36,43,40,34],
[47,36,0,37,43,41,38,44,32,42],
[48,45,44,0,41,45,40,43,48,41],
[48,45,38,40,0,36,37,44,32,34],
[48,41,40,36,45,0,36,47,43,41],
[52,45,43,41,44,45,0,43,40,43],
[40,38,37,38,37,34,38,0,31,30],
[49,41,49,33,49,38,41,50,0,39],
[52,47,39,40,47,40,38,51,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,51,42,28,51,37,36,50,28],
[39,0,53,45,44,52,46,61,45,45],
[30,28,0,43,28,59,38,52,36,58],
[39,36,38,0,44,52,38,45,51,45],
[53,37,53,37,0,60,53,53,52,52],
[30,29,22,29,21,0,39,44,22,29],
[44,35,43,43,28,42,0,51,36,43],
[45,20,29,36,28,37,30,0,28,35],
[31,36,45,30,29,59,45,53,0,29],
[53,36,23,36,29,52,38,46,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,48,54,54,42,48,46,41,48],
[42,0,46,54,47,41,41,39,48,39],
[33,35,0,43,44,34,46,47,37,37],
[27,27,38,0,45,24,39,36,34,35],
[27,34,37,36,0,37,44,35,39,38],
[39,40,47,57,44,0,52,40,34,41],
[33,40,35,42,37,29,0,37,31,36],
[35,42,34,45,46,41,44,0,33,37],
[40,33,44,47,42,47,50,48,0,42],
[33,42,44,46,43,40,45,44,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,36,34,42,48,41,43,35,28],
[43,0,29,36,37,54,46,36,33,33],
[45,52,0,30,45,56,52,54,45,51],
[47,45,51,0,47,57,65,57,40,48],
[39,44,36,34,0,51,50,39,39,45],
[33,27,25,24,30,0,33,41,25,30],
[40,35,29,16,31,48,0,51,25,34],
[38,45,27,24,42,40,30,0,32,33],
[46,48,36,41,42,56,56,49,0,44],
[53,48,30,33,36,51,47,48,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,33,27,23,25,39,41,32,40],
[45,0,33,29,31,35,34,37,31,45],
[48,48,0,32,37,36,43,44,38,48],
[54,52,49,0,50,36,49,47,41,52],
[58,50,44,31,0,37,54,48,34,46],
[56,46,45,45,44,0,47,42,39,47],
[42,47,38,32,27,34,0,39,36,49],
[40,44,37,34,33,39,42,0,34,48],
[49,50,43,40,47,42,45,47,0,48],
[41,36,33,29,35,34,32,33,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,40,35,30,41,44,33,40,54],
[36,0,47,42,34,41,31,29,51,23],
[41,34,0,25,26,36,25,26,31,29],
[46,39,56,0,30,40,35,33,62,39],
[51,47,55,51,0,46,37,38,59,48],
[40,40,45,41,35,0,43,36,42,40],
[37,50,56,46,44,38,0,44,45,56],
[48,52,55,48,43,45,37,0,55,49],
[41,30,50,19,22,39,36,26,0,42],
[27,58,52,42,33,41,25,32,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,39,44,34,34,45,36,41,36],
[41,0,42,47,40,35,43,45,46,40],
[42,39,0,41,35,30,42,39,39,37],
[37,34,40,0,34,32,45,41,46,41],
[47,41,46,47,0,36,50,46,51,40],
[47,46,51,49,45,0,44,49,54,40],
[36,38,39,36,31,37,0,40,36,31],
[45,36,42,40,35,32,41,0,46,34],
[40,35,42,35,30,27,45,35,0,35],
[45,41,44,40,41,41,50,47,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,31,39,30,38,22,35,32,31],
[40,0,33,54,41,52,39,49,35,53],
[50,48,0,40,43,48,46,47,46,46],
[42,27,41,0,40,44,35,37,31,48],
[51,40,38,41,0,35,34,45,40,46],
[43,29,33,37,46,0,28,50,27,28],
[59,42,35,46,47,53,0,53,38,51],
[46,32,34,44,36,31,28,0,32,42],
[49,46,35,50,41,54,43,49,0,52],
[50,28,35,33,35,53,30,39,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,50,47,43,43,41,49,46,38],
[28,0,34,40,37,30,33,41,43,33],
[31,47,0,49,40,34,41,51,43,39],
[34,41,32,0,33,33,29,38,37,29],
[38,44,41,48,0,40,40,42,40,37],
[38,51,47,48,41,0,38,46,42,41],
[40,48,40,52,41,43,0,47,40,44],
[32,40,30,43,39,35,34,0,41,38],
[35,38,38,44,41,39,41,40,0,37],
[43,48,42,52,44,40,37,43,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,30,30,30,36,29,35,26,33],
[55,0,37,39,41,49,42,51,43,40],
[51,44,0,45,39,50,45,50,43,45],
[51,42,36,0,39,44,46,50,42,49],
[51,40,42,42,0,44,39,45,39,44],
[45,32,31,37,37,0,32,36,36,42],
[52,39,36,35,42,49,0,41,38,43],
[46,30,31,31,36,45,40,0,37,37],
[55,38,38,39,42,45,43,44,0,44],
[48,41,36,32,37,39,38,44,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,46,52,42,41,50,38,41,40],
[34,0,42,48,48,31,45,38,41,39],
[35,39,0,42,38,42,47,34,40,44],
[29,33,39,0,30,28,34,29,38,35],
[39,33,43,51,0,30,43,37,44,42],
[40,50,39,53,51,0,49,42,45,45],
[31,36,34,47,38,32,0,32,34,39],
[43,43,47,52,44,39,49,0,43,47],
[40,40,41,43,37,36,47,38,0,43],
[41,42,37,46,39,36,42,34,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,53,35,41,43,46,58,47,51],
[41,0,51,37,47,36,43,49,39,50],
[28,30,0,23,40,35,42,39,39,42],
[46,44,58,0,48,38,55,55,51,53],
[40,34,41,33,0,34,40,41,40,44],
[38,45,46,43,47,0,45,45,38,49],
[35,38,39,26,41,36,0,41,41,46],
[23,32,42,26,40,36,40,0,38,44],
[34,42,42,30,41,43,40,43,0,42],
[30,31,39,28,37,32,35,37,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,37,31,39,37,36,32,39,43],
[41,0,38,36,31,37,45,32,33,38],
[44,43,0,34,47,38,39,35,37,37],
[50,45,47,0,49,47,38,39,44,44],
[42,50,34,32,0,45,37,35,45,37],
[44,44,43,34,36,0,41,44,42,30],
[45,36,42,43,44,40,0,37,39,40],
[49,49,46,42,46,37,44,0,48,43],
[42,48,44,37,36,39,42,33,0,37],
[38,43,44,37,44,51,41,38,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,42,13,27,68,53,40,53,38],
[53,0,40,13,14,68,53,53,53,25],
[39,41,0,28,40,68,66,53,81,51],
[68,68,53,0,38,55,53,40,53,38],
[54,67,41,43,0,54,39,54,67,67],
[13,13,13,26,27,0,24,29,28,24],
[28,28,15,28,42,57,0,57,28,28],
[41,28,28,41,27,52,24,0,28,39],
[28,28,0,28,14,53,53,53,0,38],
[43,56,30,43,14,57,53,42,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,46,52,50,49,46,45,55,43],
[42,0,45,40,45,45,39,27,60,46],
[35,36,0,36,38,46,30,35,54,41],
[29,41,45,0,35,31,31,30,49,34],
[31,36,43,46,0,44,37,35,44,41],
[32,36,35,50,37,0,29,30,46,40],
[35,42,51,50,44,52,0,45,55,60],
[36,54,46,51,46,51,36,0,60,41],
[26,21,27,32,37,35,26,21,0,30],
[38,35,40,47,40,41,21,40,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,35,39,36,25,25,24,34,30],
[46,0,31,46,42,52,51,36,46,36],
[46,50,0,38,50,35,55,46,60,39],
[42,35,43,0,42,46,51,31,52,32],
[45,39,31,39,0,36,40,31,46,34],
[56,29,46,35,45,0,42,48,44,41],
[56,30,26,30,41,39,0,31,49,30],
[57,45,35,50,50,33,50,0,48,35],
[47,35,21,29,35,37,32,33,0,30],
[51,45,42,49,47,40,51,46,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,41,40,50,41,38,37,45,42],
[38,0,45,29,44,36,37,29,41,30],
[40,36,0,34,45,34,32,29,39,37],
[41,52,47,0,48,44,41,42,40,52],
[31,37,36,33,0,42,40,24,38,31],
[40,45,47,37,39,0,29,33,46,35],
[43,44,49,40,41,52,0,35,47,35],
[44,52,52,39,57,48,46,0,43,41],
[36,40,42,41,43,35,34,38,0,33],
[39,51,44,29,50,46,46,40,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,33,41,34,49,61,49,34,30],
[28,0,33,15,21,34,34,36,27,15],
[48,48,0,27,24,27,48,29,30,27],
[40,66,54,0,46,59,59,68,47,42],
[47,60,57,35,0,56,61,49,43,36],
[32,47,54,22,25,0,47,42,27,35],
[20,47,33,22,20,34,0,29,20,14],
[32,45,52,13,32,39,52,0,39,18],
[47,54,51,34,38,54,61,42,0,48],
[51,66,54,39,45,46,67,63,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,39,40,42,39,39,45,39,37],
[40,0,36,41,43,41,44,45,43,44],
[42,45,0,44,46,41,45,43,46,40],
[41,40,37,0,35,34,36,35,41,40],
[39,38,35,46,0,35,39,41,43,44],
[42,40,40,47,46,0,44,47,48,48],
[42,37,36,45,42,37,0,40,46,43],
[36,36,38,46,40,34,41,0,44,46],
[42,38,35,40,38,33,35,37,0,35],
[44,37,41,41,37,33,38,35,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,39,36,43,37,35,39,40,41],
[44,0,45,35,53,33,36,40,37,49],
[42,36,0,37,47,34,33,40,44,35],
[45,46,44,0,49,41,39,45,43,39],
[38,28,34,32,0,32,33,37,35,39],
[44,48,47,40,49,0,36,45,49,47],
[46,45,48,42,48,45,0,39,42,45],
[42,41,41,36,44,36,42,0,41,43],
[41,44,37,38,46,32,39,40,0,36],
[40,32,46,42,42,34,36,38,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,46,39,52,48,50,42,54,41],
[30,0,52,37,46,33,45,45,56,35],
[35,29,0,44,48,33,27,25,45,28],
[42,44,37,0,56,35,44,47,43,43],
[29,35,33,25,0,33,33,31,47,21],
[33,48,48,46,48,0,45,54,43,42],
[31,36,54,37,48,36,0,44,41,28],
[39,36,56,34,50,27,37,0,46,38],
[27,25,36,38,34,38,40,35,0,26],
[40,46,53,38,60,39,53,43,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,53,64,46,38,45,37,59,58],
[22,0,15,36,25,28,36,27,37,32],
[28,66,0,48,37,40,38,32,50,39],
[17,45,33,0,23,28,10,13,42,33],
[35,56,44,58,0,35,42,35,62,50],
[43,53,41,53,46,0,39,46,52,49],
[36,45,43,71,39,42,0,24,56,37],
[44,54,49,68,46,35,57,0,67,52],
[22,44,31,39,19,29,25,14,0,34],
[23,49,42,48,31,32,44,29,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,26,52,43,44,36,53,61,53],
[26,0,35,34,43,42,34,52,61,43],
[55,46,0,26,63,37,46,45,64,62],
[29,47,55,0,54,47,47,36,56,55],
[38,38,18,27,0,27,29,36,64,46],
[37,39,44,34,54,0,55,52,55,55],
[45,47,35,34,52,26,0,52,61,43],
[28,29,36,45,45,29,29,0,45,36],
[20,20,17,25,17,26,20,36,0,17],
[28,38,19,26,35,26,38,45,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,38,40,35,35,44,42,40,38],
[36,0,40,39,40,44,43,43,45,42],
[43,41,0,37,33,42,41,38,42,44],
[41,42,44,0,39,37,48,45,48,42],
[46,41,48,42,0,43,50,40,48,43],
[46,37,39,44,38,0,45,44,42,42],
[37,38,40,33,31,36,0,34,34,35],
[39,38,43,36,41,37,47,0,46,36],
[41,36,39,33,33,39,47,35,0,35],
[43,39,37,39,38,39,46,45,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,31,39,38,29,36,33,28,38],
[46,0,34,46,35,45,31,32,41,34],
[50,47,0,43,37,50,32,34,44,45],
[42,35,38,0,30,32,29,30,30,28],
[43,46,44,51,0,53,41,37,38,42],
[52,36,31,49,28,0,29,33,36,30],
[45,50,49,52,40,52,0,41,37,47],
[48,49,47,51,44,48,40,0,42,43],
[53,40,37,51,43,45,44,39,0,34],
[43,47,36,53,39,51,34,38,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,24,30,40,43,21,34,36,27],
[42,0,47,34,51,49,51,45,44,35],
[57,34,0,44,56,41,41,42,47,36],
[51,47,37,0,52,41,46,50,44,33],
[41,30,25,29,0,33,18,25,32,12],
[38,32,40,40,48,0,37,41,33,29],
[60,30,40,35,63,44,0,43,47,42],
[47,36,39,31,56,40,38,0,44,32],
[45,37,34,37,49,48,34,37,0,29],
[54,46,45,48,69,52,39,49,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,46,43,44,47,44,44,51,39],
[37,0,40,40,42,41,40,37,47,38],
[35,41,0,40,48,43,49,38,45,39],
[38,41,41,0,41,44,37,38,41,35],
[37,39,33,40,0,43,39,34,47,34],
[34,40,38,37,38,0,36,34,37,35],
[37,41,32,44,42,45,0,39,46,43],
[37,44,43,43,47,47,42,0,49,39],
[30,34,36,40,34,44,35,32,0,34],
[42,43,42,46,47,46,38,42,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,44,47,46,43,40,46,45,40],
[39,0,44,46,50,43,43,40,42,41],
[37,37,0,46,45,38,35,42,42,35],
[34,35,35,0,42,30,35,39,44,30],
[35,31,36,39,0,35,37,37,35,33],
[38,38,43,51,46,0,34,41,35,40],
[41,38,46,46,44,47,0,38,46,36],
[35,41,39,42,44,40,43,0,45,37],
[36,39,39,37,46,46,35,36,0,34],
[41,40,46,51,48,41,45,44,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,61,52,52,50,37,39,57,56],
[31,0,46,57,45,25,33,41,41,51],
[20,35,0,43,46,35,28,30,35,36],
[29,24,38,0,38,29,24,37,28,39],
[29,36,35,43,0,33,32,29,47,41],
[31,56,46,52,48,0,34,40,46,34],
[44,48,53,57,49,47,0,35,51,57],
[42,40,51,44,52,41,46,0,50,46],
[24,40,46,53,34,35,30,31,0,48],
[25,30,45,42,40,47,24,35,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,41,40,34,38,36,39,41,32],
[44,0,41,44,39,39,38,36,40,40],
[40,40,0,46,40,39,40,31,44,35],
[41,37,35,0,38,35,29,38,39,32],
[47,42,41,43,0,38,41,39,39,42],
[43,42,42,46,43,0,41,42,47,35],
[45,43,41,52,40,40,0,46,50,41],
[42,45,50,43,42,39,35,0,49,35],
[40,41,37,42,42,34,31,32,0,37],
[49,41,46,49,39,46,40,46,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,37,39,39,40,41,34,44,43],
[45,0,40,43,41,40,46,41,43,47],
[44,41,0,52,42,42,41,40,41,45],
[42,38,29,0,35,42,39,36,42,39],
[42,40,39,46,0,45,44,39,42,52],
[41,41,39,39,36,0,43,39,42,52],
[40,35,40,42,37,38,0,34,38,47],
[47,40,41,45,42,42,47,0,42,49],
[37,38,40,39,39,39,43,39,0,47],
[38,34,36,42,29,29,34,32,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,45,45,42,50,43,25,51,34],
[29,0,40,45,48,55,35,37,42,41],
[36,41,0,37,49,50,34,43,58,48],
[36,36,44,0,46,45,42,30,49,42],
[39,33,32,35,0,45,23,44,44,47],
[31,26,31,36,36,0,31,31,35,44],
[38,46,47,39,58,50,0,48,49,47],
[56,44,38,51,37,50,33,0,57,53],
[30,39,23,32,37,46,32,24,0,32],
[47,40,33,39,34,37,34,28,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,42,37,44,47,46,55,47,38],
[42,0,37,42,37,42,43,53,36,31],
[39,44,0,30,45,45,47,48,38,29],
[44,39,51,0,53,40,38,48,39,44],
[37,44,36,28,0,45,38,45,39,42],
[34,39,36,41,36,0,34,37,42,33],
[35,38,34,43,43,47,0,41,49,36],
[26,28,33,33,36,44,40,0,42,26],
[34,45,43,42,42,39,32,39,0,37],
[43,50,52,37,39,48,45,55,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,55,36,36,46,39,49,39,50],
[31,0,49,29,26,42,37,48,32,40],
[26,32,0,27,26,32,35,44,29,37],
[45,52,54,0,35,52,48,52,41,51],
[45,55,55,46,0,46,43,51,35,57],
[35,39,49,29,35,0,32,41,30,43],
[42,44,46,33,38,49,0,50,33,39],
[32,33,37,29,30,40,31,0,21,39],
[42,49,52,40,46,51,48,60,0,53],
[31,41,44,30,24,38,42,42,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,38,42,45,38,29,41,45,36],
[28,0,37,36,44,36,40,33,47,41],
[43,44,0,39,47,39,34,38,37,38],
[39,45,42,0,38,37,32,36,40,40],
[36,37,34,43,0,38,30,38,42,34],
[43,45,42,44,43,0,43,44,51,39],
[52,41,47,49,51,38,0,46,47,44],
[40,48,43,45,43,37,35,0,46,50],
[36,34,44,41,39,30,34,35,0,36],
[45,40,43,41,47,42,37,31,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,36,44,38,40,37,35,48,35],
[45,0,41,53,40,51,45,46,42,50],
[45,40,0,43,29,46,40,36,33,35],
[37,28,38,0,34,37,42,39,30,29],
[43,41,52,47,0,44,44,41,28,38],
[41,30,35,44,37,0,36,36,35,38],
[44,36,41,39,37,45,0,44,31,36],
[46,35,45,42,40,45,37,0,36,38],
[33,39,48,51,53,46,50,45,0,40],
[46,31,46,52,43,43,45,43,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,34,34,47,45,59,46,45,45],
[11,0,34,11,23,45,57,34,34,34],
[47,47,0,22,24,33,69,34,44,58],
[47,70,59,0,70,58,59,34,69,70],
[34,58,57,11,0,33,45,34,33,45],
[36,36,48,23,48,0,47,23,58,47],
[22,24,12,22,36,34,0,11,34,33],
[35,47,47,47,47,58,70,0,58,58],
[36,47,37,12,48,23,47,23,0,47],
[36,47,23,11,36,34,48,23,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,37,52,50,44,59,51,52,50],
[22,0,41,28,33,32,43,49,38,35],
[44,40,0,42,40,49,54,46,53,42],
[29,53,39,0,47,41,59,40,41,41],
[31,48,41,34,0,43,55,36,40,41],
[37,49,32,40,38,0,52,44,46,38],
[22,38,27,22,26,29,0,31,28,29],
[30,32,35,41,45,37,50,0,41,33],
[29,43,28,40,41,35,53,40,0,32],
[31,46,39,40,40,43,52,48,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,37,42,37,38,34,40,44,38],
[43,0,39,39,37,35,37,38,44,41],
[44,42,0,41,39,38,39,37,44,38],
[39,42,40,0,41,39,37,36,48,35],
[44,44,42,40,0,39,37,43,41,46],
[43,46,43,42,42,0,45,37,46,41],
[47,44,42,44,44,36,0,39,47,39],
[41,43,44,45,38,44,42,0,46,41],
[37,37,37,33,40,35,34,35,0,39],
[43,40,43,46,35,40,42,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,36,23,49,38,43,34,49,36],
[48,0,42,44,49,48,53,37,48,44],
[45,39,0,36,45,33,36,42,55,37],
[58,37,45,0,58,43,45,27,59,41],
[32,32,36,23,0,34,40,26,44,32],
[43,33,48,38,47,0,41,29,51,32],
[38,28,45,36,41,40,0,34,37,44],
[47,44,39,54,55,52,47,0,54,41],
[32,33,26,22,37,30,44,27,0,28],
[45,37,44,40,49,49,37,40,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,44,30,31,22,32,33,35,34],
[47,0,43,30,37,28,38,35,29,31],
[37,38,0,46,36,33,38,20,37,37],
[51,51,35,0,31,15,48,34,30,44],
[50,44,45,50,0,20,43,32,34,40],
[59,53,48,66,61,0,52,52,38,49],
[49,43,43,33,38,29,0,37,39,36],
[48,46,61,47,49,29,44,0,41,42],
[46,52,44,51,47,43,42,40,0,40],
[47,50,44,37,41,32,45,39,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,34,52,31,44,38,50,36],
[37,0,38,40,44,46,45,48,51,52],
[39,43,0,33,53,38,34,33,46,31],
[47,41,48,0,50,36,39,40,52,39],
[29,37,28,31,0,23,28,20,35,33],
[50,35,43,45,58,0,46,35,49,50],
[37,36,47,42,53,35,0,45,47,42],
[43,33,48,41,61,46,36,0,43,37],
[31,30,35,29,46,32,34,38,0,36],
[45,29,50,42,48,31,39,44,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,44,44,32,56,44,56,67,46],
[25,0,46,49,31,60,34,34,60,36],
[37,35,0,38,46,38,26,26,37,25],
[37,32,43,0,20,49,34,23,60,36],
[49,50,35,61,0,38,35,38,49,49],
[25,21,43,32,43,0,20,32,37,37],
[37,47,55,47,46,61,0,59,61,49],
[25,47,55,58,43,49,22,0,72,49],
[14,21,44,21,32,44,20,9,0,26],
[35,45,56,45,32,44,32,32,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,44,40,34,40,43,40,39,46],
[36,0,37,31,36,41,38,34,37,41],
[37,44,0,38,43,47,42,40,35,40],
[41,50,43,0,41,50,46,38,40,45],
[47,45,38,40,0,44,45,43,42,46],
[41,40,34,31,37,0,40,37,35,42],
[38,43,39,35,36,41,0,44,40,45],
[41,47,41,43,38,44,37,0,34,41],
[42,44,46,41,39,46,41,47,0,43],
[35,40,41,36,35,39,36,40,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,46,43,43,50,59,47,50,35],
[39,0,45,35,50,36,50,50,42,40],
[35,36,0,42,45,39,46,41,42,45],
[38,46,39,0,47,44,50,47,45,39],
[38,31,36,34,0,36,39,37,43,31],
[31,45,42,37,45,0,44,46,41,38],
[22,31,35,31,42,37,0,38,38,24],
[34,31,40,34,44,35,43,0,39,34],
[31,39,39,36,38,40,43,42,0,32],
[46,41,36,42,50,43,57,47,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,33,42,41,40,38,41,37,41],
[46,0,42,50,39,37,53,41,42,43],
[48,39,0,53,48,40,46,50,46,43],
[39,31,28,0,45,40,47,39,37,37],
[40,42,33,36,0,32,50,38,41,40],
[41,44,41,41,49,0,42,41,37,41],
[43,28,35,34,31,39,0,35,39,35],
[40,40,31,42,43,40,46,0,42,37],
[44,39,35,44,40,44,42,39,0,39],
[40,38,38,44,41,40,46,44,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,34,37,39,42,41,29,41,41],
[39,0,36,38,42,46,38,35,38,36],
[47,45,0,42,43,49,39,39,52,49],
[44,43,39,0,48,49,38,32,38,44],
[42,39,38,33,0,40,36,35,38,39],
[39,35,32,32,41,0,27,33,42,33],
[40,43,42,43,45,54,0,44,37,46],
[52,46,42,49,46,48,37,0,43,43],
[40,43,29,43,43,39,44,38,0,40],
[40,45,32,37,42,48,35,38,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,36,45,32,44,35,36,38,32],
[42,0,37,31,46,40,40,40,37,36],
[45,44,0,41,38,46,32,30,31,42],
[36,50,40,0,38,42,43,33,39,38],
[49,35,43,43,0,47,40,41,39,43],
[37,41,35,39,34,0,34,33,35,38],
[46,41,49,38,41,47,0,37,43,44],
[45,41,51,48,40,48,44,0,42,41],
[43,44,50,42,42,46,38,39,0,38],
[49,45,39,43,38,43,37,40,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,40,50,44,43,38,42,33,42],
[39,0,40,49,42,37,40,40,31,46],
[41,41,0,50,41,40,31,41,39,50],
[31,32,31,0,32,33,26,40,27,37],
[37,39,40,49,0,42,33,40,41,51],
[38,44,41,48,39,0,36,46,39,54],
[43,41,50,55,48,45,0,51,38,52],
[39,41,40,41,41,35,30,0,34,42],
[48,50,42,54,40,42,43,47,0,49],
[39,35,31,44,30,27,29,39,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,55,46,61,40,50,42,57],
[19,0,31,44,14,37,36,24,18,24],
[18,50,0,56,26,43,47,28,23,36],
[26,37,25,0,26,39,34,30,30,30],
[35,67,55,55,0,58,45,33,34,36],
[20,44,38,42,23,0,42,33,33,33],
[41,45,34,47,36,39,0,32,34,35],
[31,57,53,51,48,48,49,0,40,37],
[39,63,58,51,47,48,47,41,0,34],
[24,57,45,51,45,48,46,44,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,35,49,36,55,34,32,52,43],
[26,0,41,42,28,40,32,25,28,35],
[46,40,0,28,34,38,42,45,40,31],
[32,39,53,0,38,56,38,35,33,43],
[45,53,47,43,0,45,40,49,49,46],
[26,41,43,25,36,0,26,33,35,23],
[47,49,39,43,41,55,0,48,45,38],
[49,56,36,46,32,48,33,0,48,33],
[29,53,41,48,32,46,36,33,0,32],
[38,46,50,38,35,58,43,48,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,46,37,42,43,34,37,41,42],
[45,0,41,46,43,44,42,39,42,44],
[35,40,0,36,40,41,35,38,40,45],
[44,35,45,0,42,46,40,40,45,45],
[39,38,41,39,0,42,39,41,40,43],
[38,37,40,35,39,0,37,33,37,43],
[47,39,46,41,42,44,0,41,46,43],
[44,42,43,41,40,48,40,0,42,44],
[40,39,41,36,41,44,35,39,0,42],
[39,37,36,36,38,38,38,37,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,49,51,43,44,47,41,47,39],
[32,0,35,43,25,35,31,40,35,25],
[32,46,0,44,36,49,41,39,39,41],
[30,38,37,0,35,38,39,45,37,29],
[38,56,45,46,0,46,45,43,45,42],
[37,46,32,43,35,0,36,37,35,37],
[34,50,40,42,36,45,0,43,41,33],
[40,41,42,36,38,44,38,0,39,29],
[34,46,42,44,36,46,40,42,0,33],
[42,56,40,52,39,44,48,52,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,46,39,47,36,37,49,35,32],
[34,0,45,46,32,38,35,34,36,29],
[35,36,0,37,46,37,35,41,37,30],
[42,35,44,0,44,41,44,38,39,39],
[34,49,35,37,0,39,43,38,39,38],
[45,43,44,40,42,0,41,35,36,28],
[44,46,46,37,38,40,0,46,43,37],
[32,47,40,43,43,46,35,0,32,30],
[46,45,44,42,42,45,38,49,0,41],
[49,52,51,42,43,53,44,51,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,31,51,48,49,48,36,52,47],
[43,0,35,55,41,46,38,43,42,46],
[50,46,0,58,40,46,46,38,49,53],
[30,26,23,0,46,37,26,38,41,39],
[33,40,41,35,0,46,27,40,47,46],
[32,35,35,44,35,0,32,33,26,43],
[33,43,35,55,54,49,0,35,32,53],
[45,38,43,43,41,48,46,0,38,54],
[29,39,32,40,34,55,49,43,0,40],
[34,35,28,42,35,38,28,27,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,53,48,41,44,39,38,49,41],
[36,0,41,39,42,40,35,36,43,31],
[28,40,0,32,35,39,25,30,34,31],
[33,42,49,0,39,35,38,34,42,39],
[40,39,46,42,0,41,36,32,47,37],
[37,41,42,46,40,0,23,42,40,30],
[42,46,56,43,45,58,0,46,47,40],
[43,45,51,47,49,39,35,0,45,37],
[32,38,47,39,34,41,34,36,0,36],
[40,50,50,42,44,51,41,44,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,37,51,37,45,44,53,47,46],
[41,0,40,50,42,45,41,47,48,45],
[44,41,0,54,41,37,42,47,39,48],
[30,31,27,0,27,28,26,25,31,39],
[44,39,40,54,0,38,38,39,49,47],
[36,36,44,53,43,0,45,39,49,46],
[37,40,39,55,43,36,0,44,40,54],
[28,34,34,56,42,42,37,0,39,47],
[34,33,42,50,32,32,41,42,0,48],
[35,36,33,42,34,35,27,34,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,47,49,42,47,39,39,41,39],
[33,0,46,46,42,48,38,41,39,48],
[34,35,0,40,34,43,38,44,40,42],
[32,35,41,0,38,38,35,38,37,42],
[39,39,47,43,0,49,42,44,37,48],
[34,33,38,43,32,0,33,33,33,41],
[42,43,43,46,39,48,0,44,37,47],
[42,40,37,43,37,48,37,0,39,44],
[40,42,41,44,44,48,44,42,0,42],
[42,33,39,39,33,40,34,37,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,58,41,45,44,56,54,38,41],
[30,0,48,42,35,35,40,44,35,44],
[23,33,0,40,47,30,37,39,37,29],
[40,39,41,0,36,36,40,39,31,36],
[36,46,34,45,0,38,44,35,31,31],
[37,46,51,45,43,0,39,46,38,46],
[25,41,44,41,37,42,0,50,45,26],
[27,37,42,42,46,35,31,0,32,37],
[43,46,44,50,50,43,36,49,0,40],
[40,37,52,45,50,35,55,44,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,31,43,38,42,41,48,47,33],
[41,0,39,48,46,38,47,50,50,47],
[50,42,0,45,42,36,45,45,41,41],
[38,33,36,0,37,33,36,40,39,36],
[43,35,39,44,0,40,46,43,45,41],
[39,43,45,48,41,0,43,46,50,49],
[40,34,36,45,35,38,0,41,42,37],
[33,31,36,41,38,35,40,0,41,37],
[34,31,40,42,36,31,39,40,0,32],
[48,34,40,45,40,32,44,44,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,39,41,40,44,51,34,28,29],
[48,0,42,42,56,38,56,52,55,40],
[42,39,0,48,51,48,54,56,54,35],
[40,39,33,0,53,45,63,48,41,43],
[41,25,30,28,0,49,46,41,29,35],
[37,43,33,36,32,0,43,41,40,38],
[30,25,27,18,35,38,0,35,33,19],
[47,29,25,33,40,40,46,0,44,30],
[53,26,27,40,52,41,48,37,0,36],
[52,41,46,38,46,43,62,51,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,34,41,32,27,44,38,38,35],
[52,0,49,49,45,38,49,44,46,43],
[47,32,0,44,38,40,51,49,44,42],
[40,32,37,0,30,26,35,41,35,40],
[49,36,43,51,0,36,45,41,45,38],
[54,43,41,55,45,0,49,40,46,45],
[37,32,30,46,36,32,0,33,34,37],
[43,37,32,40,40,41,48,0,39,39],
[43,35,37,46,36,35,47,42,0,40],
[46,38,39,41,43,36,44,42,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,27,54,26,0,0,81,28,54],
[81,0,55,54,54,28,28,81,28,54],
[54,26,0,54,26,26,54,81,54,54],
[27,27,27,0,0,27,27,81,28,0],
[55,27,55,81,0,55,55,81,28,54],
[81,53,55,54,26,0,81,81,28,54],
[81,53,27,54,26,0,0,81,28,54],
[0,0,0,0,0,0,0,0,0,0],
[53,53,27,53,53,53,53,81,0,53],
[27,27,27,81,27,27,27,81,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,35,37,37,47,38,43,41,40],
[34,0,48,36,35,48,43,47,40,40],
[46,33,0,41,23,40,37,44,44,40],
[44,45,40,0,42,44,32,51,45,54],
[44,46,58,39,0,49,44,59,52,45],
[34,33,41,37,32,0,34,47,46,42],
[43,38,44,49,37,47,0,62,46,45],
[38,34,37,30,22,34,19,0,32,36],
[40,41,37,36,29,35,35,49,0,43],
[41,41,41,27,36,39,36,45,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,37,34,38,43,38,45,37,37],
[40,0,36,37,42,42,41,44,40,45],
[44,45,0,42,42,39,37,44,38,43],
[47,44,39,0,38,46,43,47,37,45],
[43,39,39,43,0,47,35,48,46,46],
[38,39,42,35,34,0,34,38,38,40],
[43,40,44,38,46,47,0,47,44,43],
[36,37,37,34,33,43,34,0,29,39],
[44,41,43,44,35,43,37,52,0,43],
[44,36,38,36,35,41,38,42,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,43,51,39,42,46,44,49,41],
[32,0,36,41,37,37,35,29,42,37],
[38,45,0,49,45,44,42,40,49,40],
[30,40,32,0,41,35,29,36,33,39],
[42,44,36,40,0,37,32,39,38,38],
[39,44,37,46,44,0,36,44,38,39],
[35,46,39,52,49,45,0,42,52,37],
[37,52,41,45,42,37,39,0,46,36],
[32,39,32,48,43,43,29,35,0,28],
[40,44,41,42,43,42,44,45,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,53,38,42,40,47,53,67,50],
[25,0,32,24,31,20,34,35,40,31],
[28,49,0,20,49,24,39,50,50,43],
[43,57,61,0,35,42,51,50,58,47],
[39,50,32,46,0,35,42,41,51,51],
[41,61,57,39,46,0,47,48,67,38],
[34,47,42,30,39,34,0,37,44,53],
[28,46,31,31,40,33,44,0,52,49],
[14,41,31,23,30,14,37,29,0,34],
[31,50,38,34,30,43,28,32,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,31,46,47,57,49,48,53,53],
[28,0,35,43,50,64,56,43,50,54],
[50,46,0,40,34,51,50,48,46,60],
[35,38,41,0,31,56,40,21,49,51],
[34,31,47,50,0,49,56,26,43,40],
[24,17,30,25,32,0,31,32,33,57],
[32,25,31,41,25,50,0,26,41,45],
[33,38,33,60,55,49,55,0,61,66],
[28,31,35,32,38,48,40,20,0,51],
[28,27,21,30,41,24,36,15,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,30,46,45,38,41,47,38,34],
[37,0,25,39,42,38,34,43,38,38],
[51,56,0,60,39,55,45,48,53,46],
[35,42,21,0,34,30,23,42,28,25],
[36,39,42,47,0,49,41,42,46,41],
[43,43,26,51,32,0,38,46,38,32],
[40,47,36,58,40,43,0,54,46,53],
[34,38,33,39,39,35,27,0,35,28],
[43,43,28,53,35,43,35,46,0,32],
[47,43,35,56,40,49,28,53,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,40,43,38,47,47,37,44,37],
[41,0,43,57,45,52,42,50,48,39],
[41,38,0,50,38,45,41,43,40,40],
[38,24,31,0,31,38,38,34,34,35],
[43,36,43,50,0,42,38,42,45,43],
[34,29,36,43,39,0,35,33,40,27],
[34,39,40,43,43,46,0,42,49,37],
[44,31,38,47,39,48,39,0,46,31],
[37,33,41,47,36,41,32,35,0,38],
[44,42,41,46,38,54,44,50,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,49,41,52,46,53,40,47,46],
[33,0,44,40,42,39,46,38,45,44],
[32,37,0,35,35,40,40,35,38,40],
[40,41,46,0,42,45,47,36,43,45],
[29,39,46,39,0,39,42,41,45,49],
[35,42,41,36,42,0,48,33,42,44],
[28,35,41,34,39,33,0,32,38,42],
[41,43,46,45,40,48,49,0,44,41],
[34,36,43,38,36,39,43,37,0,39],
[35,37,41,36,32,37,39,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,48,43,48,41,42,53,40],
[37,0,36,45,38,46,39,44,50,38],
[39,45,0,46,41,51,47,41,56,43],
[33,36,35,0,39,47,35,36,53,40],
[38,43,40,42,0,44,40,39,55,39],
[33,35,30,34,37,0,37,40,50,39],
[40,42,34,46,41,44,0,41,53,33],
[39,37,40,45,42,41,40,0,53,41],
[28,31,25,28,26,31,28,28,0,33],
[41,43,38,41,42,42,48,40,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,38,37,39,36,23,32,32,36],
[43,0,43,39,47,40,37,35,34,41],
[43,38,0,40,36,36,30,28,36,37],
[44,42,41,0,36,34,37,33,32,32],
[42,34,45,45,0,42,37,32,40,40],
[45,41,45,47,39,0,32,36,41,39],
[58,44,51,44,44,49,0,42,37,39],
[49,46,53,48,49,45,39,0,39,44],
[49,47,45,49,41,40,44,42,0,45],
[45,40,44,49,41,42,42,37,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,48,48,40,46,48,42,46,50],
[41,0,46,36,43,46,40,34,55,44],
[33,35,0,40,29,38,37,34,44,29],
[33,45,41,0,39,47,46,40,47,36],
[41,38,52,42,0,43,44,42,45,50],
[35,35,43,34,38,0,42,34,41,27],
[33,41,44,35,37,39,0,32,51,35],
[39,47,47,41,39,47,49,0,53,50],
[35,26,37,34,36,40,30,28,0,33],
[31,37,52,45,31,54,46,31,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,38,33,35,31,38,41,37,33],
[44,0,44,30,38,36,40,40,32,43],
[43,37,0,28,39,39,43,47,35,43],
[48,51,53,0,42,40,45,46,42,50],
[46,43,42,39,0,41,43,41,34,48],
[50,45,42,41,40,0,44,43,39,42],
[43,41,38,36,38,37,0,41,35,46],
[40,41,34,35,40,38,40,0,36,35],
[44,49,46,39,47,42,46,45,0,42],
[48,38,38,31,33,39,35,46,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,47,44,36,43,42,39,40,40],
[45,0,41,43,35,36,32,37,34,44],
[34,40,0,36,37,35,28,37,35,43],
[37,38,45,0,42,40,30,44,42,39],
[45,46,44,39,0,43,37,44,46,46],
[38,45,46,41,38,0,37,47,32,36],
[39,49,53,51,44,44,0,46,39,46],
[42,44,44,37,37,34,35,0,41,35],
[41,47,46,39,35,49,42,40,0,44],
[41,37,38,42,35,45,35,46,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,37,38,35,49,35,40,41,40],
[41,0,38,38,36,44,34,41,36,39],
[44,43,0,40,38,54,42,42,40,37],
[43,43,41,0,34,50,30,44,42,39],
[46,45,43,47,0,51,39,53,41,48],
[32,37,27,31,30,0,30,38,30,33],
[46,47,39,51,42,51,0,44,41,48],
[41,40,39,37,28,43,37,0,31,39],
[40,45,41,39,40,51,40,50,0,45],
[41,42,44,42,33,48,33,42,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,32,62,59,36,62,54,43,49],
[39,0,60,52,64,51,57,65,41,46],
[49,21,0,52,45,39,50,51,35,40],
[19,29,29,0,33,28,55,37,24,43],
[22,17,36,48,0,33,38,45,19,45],
[45,30,42,53,48,0,56,69,37,62],
[19,24,31,26,43,25,0,44,24,30],
[27,16,30,44,36,12,37,0,11,34],
[38,40,46,57,62,44,57,70,0,55],
[32,35,41,38,36,19,51,47,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,35,44,38,39,35,38,63,36],
[49,0,46,41,54,38,34,41,57,46],
[46,35,0,42,34,43,40,46,65,37],
[37,40,39,0,39,38,32,43,50,37],
[43,27,47,42,0,22,39,50,58,39],
[42,43,38,43,59,0,44,49,74,50],
[46,47,41,49,42,37,0,51,61,54],
[43,40,35,38,31,32,30,0,57,37],
[18,24,16,31,23,7,20,24,0,22],
[45,35,44,44,42,31,27,44,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,41,32,32,32,37,32,40,29],
[42,0,43,34,37,37,41,32,37,31],
[40,38,0,39,41,39,43,37,31,33],
[49,47,42,0,48,38,43,41,40,44],
[49,44,40,33,0,33,42,38,33,41],
[49,44,42,43,48,0,44,39,41,38],
[44,40,38,38,39,37,0,31,38,40],
[49,49,44,40,43,42,50,0,38,48],
[41,44,50,41,48,40,43,43,0,41],
[52,50,48,37,40,43,41,33,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,42,50,40,44,54,50,54,44],
[32,0,31,42,36,45,46,51,44,43],
[39,50,0,49,42,46,55,46,46,45],
[31,39,32,0,33,34,39,37,37,34],
[41,45,39,48,0,41,53,40,47,46],
[37,36,35,47,40,0,57,38,43,42],
[27,35,26,42,28,24,0,33,33,34],
[31,30,35,44,41,43,48,0,42,43],
[27,37,35,44,34,38,48,39,0,42],
[37,38,36,47,35,39,47,38,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,41,39,44,36,42,45,44,38],
[45,0,39,46,46,34,41,46,48,45],
[40,42,0,36,41,36,35,43,41,37],
[42,35,45,0,44,43,41,42,42,49],
[37,35,40,37,0,39,38,40,40,41],
[45,47,45,38,42,0,41,45,45,46],
[39,40,46,40,43,40,0,42,43,44],
[36,35,38,39,41,36,39,0,43,41],
[37,33,40,39,41,36,38,38,0,36],
[43,36,44,32,40,35,37,40,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,36,43,34,41,40,39,41,46],
[46,0,38,45,44,41,43,47,43,50],
[45,43,0,42,43,43,47,39,44,49],
[38,36,39,0,43,42,46,39,46,47],
[47,37,38,38,0,44,41,35,40,49],
[40,40,38,39,37,0,32,35,43,42],
[41,38,34,35,40,49,0,35,38,48],
[42,34,42,42,46,46,46,0,45,49],
[40,38,37,35,41,38,43,36,0,44],
[35,31,32,34,32,39,33,32,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,33,43,48,37,47,39,51,37],
[31,0,35,40,45,50,43,36,45,38],
[48,46,0,49,54,32,46,50,45,44],
[38,41,32,0,38,39,40,44,41,43],
[33,36,27,43,0,40,29,39,42,37],
[44,31,49,42,41,0,36,40,51,53],
[34,38,35,41,52,45,0,41,43,36],
[42,45,31,37,42,41,40,0,42,42],
[30,36,36,40,39,30,38,39,0,32],
[44,43,37,38,44,28,45,39,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,32,18,22,39,35,37,27,41],
[62,0,27,37,32,53,48,45,32,49],
[49,54,0,43,44,38,37,48,27,45],
[63,44,38,0,41,62,40,55,46,55],
[59,49,37,40,0,48,44,68,41,57],
[42,28,43,19,33,0,34,28,36,45],
[46,33,44,41,37,47,0,36,27,43],
[44,36,33,26,13,53,45,0,38,50],
[54,49,54,35,40,45,54,43,0,53],
[40,32,36,26,24,36,38,31,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,34,65,65,49,65,65,34,49],
[32,0,48,63,47,47,63,31,16,49],
[47,33,0,65,65,33,47,31,34,49],
[16,18,16,0,47,0,47,16,0,49],
[16,34,16,34,0,34,48,0,34,49],
[32,34,48,81,47,0,63,31,34,49],
[16,18,34,34,33,18,0,18,18,49],
[16,50,50,65,81,50,63,0,50,49],
[47,65,47,81,47,47,63,31,0,49],
[32,32,32,32,32,32,32,32,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,33,44,41,39,40,53,38,52],
[42,0,33,43,28,36,34,39,30,45],
[48,48,0,46,37,43,49,49,41,50],
[37,38,35,0,40,38,38,51,37,45],
[40,53,44,41,0,37,42,48,35,48],
[42,45,38,43,44,0,49,53,36,47],
[41,47,32,43,39,32,0,44,37,41],
[28,42,32,30,33,28,37,0,25,42],
[43,51,40,44,46,45,44,56,0,50],
[29,36,31,36,33,34,40,39,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,34,34,38,35,33,30,40,40],
[49,0,38,45,38,42,44,41,54,47],
[47,43,0,46,50,39,46,44,45,48],
[47,36,35,0,39,37,35,38,43,40],
[43,43,31,42,0,40,38,43,46,41],
[46,39,42,44,41,0,45,36,52,49],
[48,37,35,46,43,36,0,35,46,39],
[51,40,37,43,38,45,46,0,51,45],
[41,27,36,38,35,29,35,30,0,42],
[41,34,33,41,40,32,42,36,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,44,39,36,32,48,28,34,30],
[34,0,37,37,37,31,45,32,38,32],
[37,44,0,34,34,33,34,33,40,33],
[42,44,47,0,43,31,47,34,50,31],
[45,44,47,38,0,41,42,37,42,48],
[49,50,48,50,40,0,51,46,50,49],
[33,36,47,34,39,30,0,33,40,31],
[53,49,48,47,44,35,48,0,55,39],
[47,43,41,31,39,31,41,26,0,31],
[51,49,48,50,33,32,50,42,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,37,31,45,39,46,28,46,37],
[43,0,39,35,56,35,47,34,50,32],
[44,42,0,36,50,35,55,41,48,43],
[50,46,45,0,51,44,57,44,60,40],
[36,25,31,30,0,33,41,36,45,24],
[42,46,46,37,48,0,53,47,50,33],
[35,34,26,24,40,28,0,30,35,37],
[53,47,40,37,45,34,51,0,48,36],
[35,31,33,21,36,31,46,33,0,33],
[44,49,38,41,57,48,44,45,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,43,43,33,36,28,22,44,37],
[46,0,46,51,35,38,36,32,68,28],
[38,35,0,44,41,23,36,38,53,37],
[38,30,37,0,37,44,28,37,44,37],
[48,46,40,44,0,40,39,41,61,41],
[45,43,58,37,41,0,29,45,65,50],
[53,45,45,53,42,52,0,40,66,59],
[59,49,43,44,40,36,41,0,81,34],
[37,13,28,37,20,16,15,0,0,13],
[44,53,44,44,40,31,22,47,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,43,48,48,42,38,46,51,34],
[37,0,43,44,43,29,38,36,44,38],
[38,38,0,39,47,34,29,41,44,41],
[33,37,42,0,39,34,33,41,39,39],
[33,38,34,42,0,32,33,36,38,27],
[39,52,47,47,49,0,41,46,40,42],
[43,43,52,48,48,40,0,52,45,45],
[35,45,40,40,45,35,29,0,44,40],
[30,37,37,42,43,41,36,37,0,33],
[47,43,40,42,54,39,36,41,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,45,33,42,38,43,35,32,38],
[40,0,49,41,39,36,42,38,34,42],
[36,32,0,34,34,34,30,32,32,36],
[48,40,47,0,42,43,40,40,42,43],
[39,42,47,39,0,42,39,41,34,39],
[43,45,47,38,39,0,40,38,37,45],
[38,39,51,41,42,41,0,41,35,37],
[46,43,49,41,40,43,40,0,34,39],
[49,47,49,39,47,44,46,47,0,42],
[43,39,45,38,42,36,44,42,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,35,40,38,39,35,38,32,38],
[46,0,42,42,43,43,43,40,40,37],
[46,39,0,43,35,40,41,41,43,35],
[41,39,38,0,37,38,34,40,36,34],
[43,38,46,44,0,50,48,48,45,41],
[42,38,41,43,31,0,36,44,34,34],
[46,38,40,47,33,45,0,43,40,38],
[43,41,40,41,33,37,38,0,40,37],
[49,41,38,45,36,47,41,41,0,37],
[43,44,46,47,40,47,43,44,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,37,34,38,40,30,38,44,43],
[43,0,42,40,44,43,39,51,44,47],
[44,39,0,38,44,30,34,35,41,37],
[47,41,43,0,42,41,42,40,44,41],
[43,37,37,39,0,41,39,45,43,42],
[41,38,51,40,40,0,38,39,38,43],
[51,42,47,39,42,43,0,43,42,49],
[43,30,46,41,36,42,38,0,35,39],
[37,37,40,37,38,43,39,46,0,43],
[38,34,44,40,39,38,32,42,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,32,33,31,36,35,37,34,39],
[56,0,46,53,47,50,43,50,45,40],
[49,35,0,44,39,45,46,50,44,43],
[48,28,37,0,38,38,37,44,37,40],
[50,34,42,43,0,45,40,42,43,48],
[45,31,36,43,36,0,42,42,43,41],
[46,38,35,44,41,39,0,48,40,43],
[44,31,31,37,39,39,33,0,39,41],
[47,36,37,44,38,38,41,42,0,40],
[42,41,38,41,33,40,38,40,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,54,42,43,40,40,41,39,41],
[40,0,48,36,42,37,44,45,39,41],
[27,33,0,30,34,29,37,40,36,36],
[39,45,51,0,48,41,47,43,43,45],
[38,39,47,33,0,41,51,48,38,48],
[41,44,52,40,40,0,49,45,41,45],
[41,37,44,34,30,32,0,41,40,43],
[40,36,41,38,33,36,40,0,35,39],
[42,42,45,38,43,40,41,46,0,44],
[40,40,45,36,33,36,38,42,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,54,28,28,54,41,41,54,27],
[41,0,68,55,55,55,55,55,41,27],
[27,13,0,14,27,28,27,27,27,13],
[53,26,67,0,68,54,40,54,67,26],
[53,26,54,13,0,54,27,26,40,13],
[27,26,53,27,27,0,13,26,40,27],
[40,26,54,41,54,68,0,41,54,53],
[40,26,54,27,55,55,40,0,54,40],
[27,40,54,14,41,41,27,27,0,27],
[54,54,68,55,68,54,28,41,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,32,47,32,47,38,36,47,47],
[37,0,39,41,29,37,38,28,44,44],
[49,42,0,58,44,48,38,48,58,58],
[34,40,23,0,33,34,35,30,44,52],
[49,52,37,48,0,55,35,47,63,60],
[34,44,33,47,26,0,49,33,46,34],
[43,43,43,46,46,32,0,31,46,44],
[45,53,33,51,34,48,50,0,45,50],
[34,37,23,37,18,35,35,36,0,48],
[34,37,23,29,21,47,37,31,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,39,46,49,48,47,46,46,42],
[39,0,46,49,47,34,45,48,46,44],
[42,35,0,46,50,43,47,52,46,42],
[35,32,35,0,51,37,40,39,43,33],
[32,34,31,30,0,33,38,32,40,36],
[33,47,38,44,48,0,50,44,48,42],
[34,36,34,41,43,31,0,38,41,35],
[35,33,29,42,49,37,43,0,46,42],
[35,35,35,38,41,33,40,35,0,40],
[39,37,39,48,45,39,46,39,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,23,40,34,33,40,40,25,39],
[49,0,33,34,17,42,42,42,26,33],
[58,48,0,41,43,25,56,49,34,23],
[41,47,40,0,25,25,47,40,42,48],
[47,64,38,56,0,33,55,55,40,46],
[48,39,56,56,48,0,65,65,50,56],
[41,39,25,34,26,16,0,26,17,25],
[41,39,32,41,26,16,55,0,25,32],
[56,55,47,39,41,31,64,56,0,47],
[42,48,58,33,35,25,56,49,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,40,36,35,37,36,44,38,35],
[44,0,43,43,38,42,34,36,38,34],
[41,38,0,40,37,42,34,42,45,36],
[45,38,41,0,34,40,26,40,38,34],
[46,43,44,47,0,40,33,44,43,30],
[44,39,39,41,41,0,34,39,33,40],
[45,47,47,55,48,47,0,51,40,44],
[37,45,39,41,37,42,30,0,36,29],
[43,43,36,43,38,48,41,45,0,37],
[46,47,45,47,51,41,37,52,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,41,37,35,39,54,36,36,38],
[49,0,40,37,37,41,53,37,45,44],
[40,41,0,37,41,39,46,44,38,41],
[44,44,44,0,36,49,48,44,40,49],
[46,44,40,45,0,53,52,44,51,45],
[42,40,42,32,28,0,43,39,36,42],
[27,28,35,33,29,38,0,32,35,40],
[45,44,37,37,37,42,49,0,34,40],
[45,36,43,41,30,45,46,47,0,41],
[43,37,40,32,36,39,41,41,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,43,47,39,42,43,49,37,46],
[43,0,40,43,41,44,44,40,39,47],
[38,41,0,38,36,34,41,45,38,46],
[34,38,43,0,40,49,44,40,32,42],
[42,40,45,41,0,44,38,52,44,47],
[39,37,47,32,37,0,37,47,36,41],
[38,37,40,37,43,44,0,35,35,40],
[32,41,36,41,29,34,46,0,32,40],
[44,42,43,49,37,45,46,49,0,51],
[35,34,35,39,34,40,41,41,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,32,40,28,34,44,49,48,42],
[47,0,37,42,32,34,48,51,53,50],
[49,44,0,48,41,43,40,56,57,46],
[41,39,33,0,23,29,37,39,44,40],
[53,49,40,58,0,43,41,57,50,48],
[47,47,38,52,38,0,49,49,53,43],
[37,33,41,44,40,32,0,47,50,40],
[32,30,25,42,24,32,34,0,47,42],
[33,28,24,37,31,28,31,34,0,34],
[39,31,35,41,33,38,41,39,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,50,36,41,39,44,41,37,31],
[48,0,50,37,44,44,54,41,40,43],
[31,31,0,25,35,33,38,24,30,28],
[45,44,56,0,48,47,50,39,45,48],
[40,37,46,33,0,35,42,37,36,30],
[42,37,48,34,46,0,46,39,46,38],
[37,27,43,31,39,35,0,25,34,26],
[40,40,57,42,44,42,56,0,45,41],
[44,41,51,36,45,35,47,36,0,40],
[50,38,53,33,51,43,55,40,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,42,49,52,46,39,41,41,45],
[41,0,43,53,49,44,40,41,45,46],
[39,38,0,47,43,39,44,32,44,34],
[32,28,34,0,42,35,34,32,40,35],
[29,32,38,39,0,41,37,40,43,35],
[35,37,42,46,40,0,36,40,45,41],
[42,41,37,47,44,45,0,43,41,45],
[40,40,49,49,41,41,38,0,43,44],
[40,36,37,41,38,36,40,38,0,37],
[36,35,47,46,46,40,36,37,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,41,20,41,41,0,61,41,20],
[41,0,41,40,21,61,0,61,61,0],
[40,40,0,60,20,41,20,61,40,0],
[61,41,21,0,21,21,41,41,21,21],
[40,60,61,60,0,61,40,81,61,40],
[40,20,40,60,20,0,20,61,40,20],
[81,81,61,40,41,61,0,81,61,61],
[20,20,20,40,0,20,0,0,40,0],
[40,20,41,60,20,41,20,41,0,20],
[61,81,81,60,41,61,20,81,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,44,42,42,47,41,45,40,37],
[47,0,40,53,35,41,46,40,49,45],
[37,41,0,34,24,42,38,38,41,52],
[39,28,47,0,30,41,41,40,38,43],
[39,46,57,51,0,44,51,53,46,49],
[34,40,39,40,37,0,50,37,36,41],
[40,35,43,40,30,31,0,33,41,28],
[36,41,43,41,28,44,48,0,45,33],
[41,32,40,43,35,45,40,36,0,40],
[44,36,29,38,32,40,53,48,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,36,41,35,34,31,38,39,36],
[37,0,42,44,25,23,40,20,30,31],
[45,39,0,41,45,25,42,28,23,37],
[40,37,40,0,36,39,44,35,39,43],
[46,56,36,45,0,36,39,33,41,47],
[47,58,56,42,45,0,53,40,42,49],
[50,41,39,37,42,28,0,26,34,37],
[43,61,53,46,48,41,55,0,39,53],
[42,51,58,42,40,39,47,42,0,43],
[45,50,44,38,34,32,44,28,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,30,37,40,34,39,41,43,35],
[42,0,47,39,41,46,33,44,43,44],
[51,34,0,42,42,38,37,42,49,40],
[44,42,39,0,38,42,44,41,47,40],
[41,40,39,43,0,38,36,32,44,32],
[47,35,43,39,43,0,37,34,45,38],
[42,48,44,37,45,44,0,45,46,33],
[40,37,39,40,49,47,36,0,48,40],
[38,38,32,34,37,36,35,33,0,35],
[46,37,41,41,49,43,48,41,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,54,50,54,55,49,49,51,36],
[38,0,35,38,40,48,44,49,49,41],
[27,46,0,40,35,41,52,46,43,40],
[31,43,41,0,47,52,54,50,40,40],
[27,41,46,34,0,52,33,33,42,36],
[26,33,40,29,29,0,29,34,30,33],
[32,37,29,27,48,52,0,43,37,38],
[32,32,35,31,48,47,38,0,26,36],
[30,32,38,41,39,51,44,55,0,36],
[45,40,41,41,45,48,43,45,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,37,41,37,44,38,43,28],
[37,0,40,40,39,36,40,51,46,32],
[39,41,0,42,45,38,51,48,57,33],
[44,41,39,0,40,42,46,44,50,29],
[40,42,36,41,0,36,35,35,36,47],
[44,45,43,39,45,0,32,47,49,32],
[37,41,30,35,46,49,0,41,52,28],
[43,30,33,37,46,34,40,0,42,32],
[38,35,24,31,45,32,29,39,0,28],
[53,49,48,52,34,49,53,49,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,41,42,48,41,44,40,43,47],
[39,0,38,37,42,39,41,40,41,48],
[40,43,0,43,42,43,41,36,41,47],
[39,44,38,0,41,38,42,39,29,48],
[33,39,39,40,0,38,42,40,37,53],
[40,42,38,43,43,0,42,50,42,44],
[37,40,40,39,39,39,0,39,36,50],
[41,41,45,42,41,31,42,0,36,52],
[38,40,40,52,44,39,45,45,0,52],
[34,33,34,33,28,37,31,29,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,43,43,40,38,43,40,46,38],
[37,0,42,41,38,42,38,41,42,37],
[38,39,0,40,37,41,32,43,47,38],
[38,40,41,0,35,38,40,42,44,32],
[41,43,44,46,0,34,40,45,47,41],
[43,39,40,43,47,0,40,42,45,38],
[38,43,49,41,41,41,0,49,51,47],
[41,40,38,39,36,39,32,0,44,34],
[35,39,34,37,34,36,30,37,0,29],
[43,44,43,49,40,43,34,47,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,42,37,43,37,41,37,35,43],
[38,0,37,34,36,39,36,31,32,41],
[39,44,0,39,42,38,37,38,45,44],
[44,47,42,0,41,40,44,40,41,43],
[38,45,39,40,0,41,41,42,43,44],
[44,42,43,41,40,0,41,43,40,45],
[40,45,44,37,40,40,0,45,37,47],
[44,50,43,41,39,38,36,0,46,48],
[46,49,36,40,38,41,44,35,0,45],
[38,40,37,38,37,36,34,33,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,34,34,33,27,35,31,33,33],
[50,0,39,45,43,34,42,41,44,43],
[47,42,0,41,40,41,35,40,42,40],
[47,36,40,0,40,30,35,39,39,37],
[48,38,41,41,0,27,41,39,39,43],
[54,47,40,51,54,0,50,51,48,47],
[46,39,46,46,40,31,0,35,43,39],
[50,40,41,42,42,30,46,0,45,40],
[48,37,39,42,42,33,38,36,0,43],
[48,38,41,44,38,34,42,41,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,40,42,33,31,39,42,45,32],
[41,0,40,41,41,33,42,37,44,41],
[41,41,0,37,27,35,41,32,41,32],
[39,40,44,0,40,35,34,35,50,38],
[48,40,54,41,0,35,47,40,49,45],
[50,48,46,46,46,0,43,39,43,41],
[42,39,40,47,34,38,0,33,43,32],
[39,44,49,46,41,42,48,0,53,40],
[36,37,40,31,32,38,38,28,0,29],
[49,40,49,43,36,40,49,41,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,34,31,44,28,34,42,37,51],
[50,0,38,39,42,50,45,48,42,61],
[47,43,0,31,43,44,41,46,41,50],
[50,42,50,0,37,46,47,49,54,59],
[37,39,38,44,0,39,42,44,48,44],
[53,31,37,35,42,0,43,47,46,52],
[47,36,40,34,39,38,0,51,41,57],
[39,33,35,32,37,34,30,0,39,49],
[44,39,40,27,33,35,40,42,0,57],
[30,20,31,22,37,29,24,32,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,40,37,26,33,41,36,36,35],
[48,0,43,40,40,39,42,41,42,34],
[41,38,0,34,38,39,37,36,39,38],
[44,41,47,0,39,40,40,44,34,37],
[55,41,43,42,0,33,41,38,41,36],
[48,42,42,41,48,0,37,36,36,40],
[40,39,44,41,40,44,0,42,43,39],
[45,40,45,37,43,45,39,0,50,41],
[45,39,42,47,40,45,38,31,0,37],
[46,47,43,44,45,41,42,40,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,54,26,40,81,41,53,81,40],
[14,0,13,14,27,54,14,14,14,27],
[27,68,0,40,40,54,27,27,54,41],
[55,67,41,0,41,68,41,27,68,41],
[41,54,41,40,0,67,27,27,41,41],
[0,27,27,13,14,0,14,14,13,13],
[40,67,54,40,54,67,0,54,67,40],
[28,67,54,54,54,67,27,0,67,54],
[0,67,27,13,40,68,14,14,0,26],
[41,54,40,40,40,68,41,27,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,20,33,44,31,62,55,33,34],
[49,0,40,41,40,51,57,46,39,54],
[61,41,0,36,40,62,64,53,41,39],
[48,40,45,0,42,55,61,54,36,32],
[37,41,41,39,0,36,40,38,28,32],
[50,30,19,26,45,0,54,48,37,33],
[19,24,17,20,41,27,0,21,23,26],
[26,35,28,27,43,33,60,0,36,40],
[48,42,40,45,53,44,58,45,0,42],
[47,27,42,49,49,48,55,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,36,35,41,34,37,43,36,46],
[42,0,43,43,45,39,48,44,48,49],
[45,38,0,42,38,38,47,46,42,40],
[46,38,39,0,49,43,42,46,47,44],
[40,36,43,32,0,40,40,44,39,46],
[47,42,43,38,41,0,41,49,40,45],
[44,33,34,39,41,40,0,39,38,40],
[38,37,35,35,37,32,42,0,38,39],
[45,33,39,34,42,41,43,43,0,41],
[35,32,41,37,35,36,41,42,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,48,48,33,48,48,47,48,64],
[33,0,33,65,50,48,33,47,50,33],
[33,48,0,48,33,48,49,48,33,33],
[33,16,33,0,50,16,32,47,49,49],
[48,31,48,31,0,31,31,47,48,48],
[33,33,33,65,50,0,33,47,33,49],
[33,48,32,49,50,48,0,31,48,48],
[34,34,33,34,34,34,50,0,34,34],
[33,31,48,32,33,48,33,47,0,48],
[17,48,48,32,33,32,33,47,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,46,37,43,43,35,38,42,31],
[39,0,36,32,35,46,32,34,37,31],
[35,45,0,33,37,43,33,33,39,38],
[44,49,48,0,43,49,41,42,45,40],
[38,46,44,38,0,45,31,38,45,38],
[38,35,38,32,36,0,33,28,37,30],
[46,49,48,40,50,48,0,39,43,41],
[43,47,48,39,43,53,42,0,50,34],
[39,44,42,36,36,44,38,31,0,36],
[50,50,43,41,43,51,40,47,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,41,48,37,35,34,36,35,33],
[37,0,36,39,47,48,28,33,34,41],
[40,45,0,56,30,52,42,51,40,35],
[33,42,25,0,30,35,37,45,31,31],
[44,34,51,51,0,45,27,44,45,28],
[46,33,29,46,36,0,28,41,32,34],
[47,53,39,44,54,53,0,38,49,42],
[45,48,30,36,37,40,43,0,36,41],
[46,47,41,50,36,49,32,45,0,40],
[48,40,46,50,53,47,39,40,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,45,42,46,40,43,53,33,49],
[39,0,36,31,39,40,43,47,41,42],
[36,45,0,33,45,44,40,44,36,52],
[39,50,48,0,52,46,48,54,43,52],
[35,42,36,29,0,35,47,44,34,42],
[41,41,37,35,46,0,38,50,41,46],
[38,38,41,33,34,43,0,47,39,41],
[28,34,37,27,37,31,34,0,32,36],
[48,40,45,38,47,40,42,49,0,44],
[32,39,29,29,39,35,40,45,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,53,45,44,41,46,50,34,42],
[37,0,40,32,40,38,38,46,29,29],
[28,41,0,39,33,35,43,49,21,25],
[36,49,42,0,39,42,40,49,30,35],
[37,41,48,42,0,42,52,55,42,41],
[40,43,46,39,39,0,43,46,36,36],
[35,43,38,41,29,38,0,49,33,35],
[31,35,32,32,26,35,32,0,26,25],
[47,52,60,51,39,45,48,55,0,44],
[39,52,56,46,40,45,46,56,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,43,45,40,38,37,39,35,45],
[40,0,43,41,41,42,34,46,35,48],
[38,38,0,40,47,34,38,43,41,40],
[36,40,41,0,48,44,46,40,38,42],
[41,40,34,33,0,37,28,39,35,39],
[43,39,47,37,44,0,40,39,41,43],
[44,47,43,35,53,41,0,40,40,40],
[42,35,38,41,42,42,41,0,41,44],
[46,46,40,43,46,40,41,40,0,36],
[36,33,41,39,42,38,41,37,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,31,41,40,39,29,42,22,40],
[29,0,11,19,29,39,28,22,10,39],
[50,70,0,70,61,50,50,52,32,61],
[40,62,11,0,31,39,30,31,10,50],
[41,52,20,50,0,29,41,31,12,52],
[42,42,31,42,52,0,31,52,23,62],
[52,53,31,51,40,50,0,42,42,61],
[39,59,29,50,50,29,39,0,20,50],
[59,71,49,71,69,58,39,61,0,59],
[41,42,20,31,29,19,20,31,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,42,37,37,45,39,39,36,43],
[40,0,46,30,36,45,31,37,30,33],
[39,35,0,43,32,42,34,40,30,40],
[44,51,38,0,35,40,35,49,33,38],
[44,45,49,46,0,46,48,47,35,47],
[36,36,39,41,35,0,37,36,37,36],
[42,50,47,46,33,44,0,34,43,52],
[42,44,41,32,34,45,47,0,29,53],
[45,51,51,48,46,44,38,52,0,46],
[38,48,41,43,34,45,29,28,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,33,17,49,33,33,49,50,65],
[15,0,17,32,33,17,33,17,17,49],
[48,64,0,49,64,65,48,31,49,48],
[64,49,32,0,32,33,33,32,50,64],
[32,48,17,49,0,49,50,0,34,49],
[48,64,16,48,32,0,16,16,50,48],
[48,48,33,48,31,65,0,31,65,48],
[32,64,50,49,81,65,50,0,34,65],
[31,64,32,31,47,31,16,47,0,48],
[16,32,33,17,32,33,33,16,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,38,36,42,39,36,42,38,38],
[35,0,50,30,38,32,46,42,45,36],
[43,31,0,37,46,40,46,47,51,44],
[45,51,44,0,39,38,46,49,40,36],
[39,43,35,42,0,40,44,40,37,42],
[42,49,41,43,41,0,47,39,50,37],
[45,35,35,35,37,34,0,33,42,39],
[39,39,34,32,41,42,48,0,47,36],
[43,36,30,41,44,31,39,34,0,40],
[43,45,37,45,39,44,42,45,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,39,43,50,40,33,40,37,39],
[36,0,39,46,46,34,36,41,38,32],
[42,42,0,44,53,39,36,36,48,41],
[38,35,37,0,45,39,33,38,40,32],
[31,35,28,36,0,31,41,34,35,33],
[41,47,42,42,50,0,40,40,48,48],
[48,45,45,48,40,41,0,46,42,56],
[41,40,45,43,47,41,35,0,41,54],
[44,43,33,41,46,33,39,40,0,44],
[42,49,40,49,48,33,25,27,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,46,43,35,42,36,38,42,37],
[40,0,46,40,45,44,40,47,48,43],
[35,35,0,44,39,40,36,41,47,45],
[38,41,37,0,42,32,38,37,41,46],
[46,36,42,39,0,42,37,45,38,39],
[39,37,41,49,39,0,44,39,36,40],
[45,41,45,43,44,37,0,47,42,43],
[43,34,40,44,36,42,34,0,41,42],
[39,33,34,40,43,45,39,40,0,44],
[44,38,36,35,42,41,38,39,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,51,43,42,32,60,32,41,37],
[50,0,53,54,30,40,51,52,57,52],
[30,28,0,36,22,23,42,37,28,34],
[38,27,45,0,35,27,54,36,32,48],
[39,51,59,46,0,41,55,40,59,42],
[49,41,58,54,40,0,55,58,43,58],
[21,30,39,27,26,26,0,34,29,36],
[49,29,44,45,41,23,47,0,39,44],
[40,24,53,49,22,38,52,42,0,44],
[44,29,47,33,39,23,45,37,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,51,20,33,54,26,31,31,44],
[43,0,48,36,42,56,42,47,48,48],
[30,33,0,30,36,28,44,41,34,28],
[61,45,51,0,51,39,46,43,36,30],
[48,39,45,30,0,28,29,37,18,27],
[27,25,53,42,53,0,41,46,39,54],
[55,39,37,35,52,40,0,45,29,47],
[50,34,40,38,44,35,36,0,20,42],
[50,33,47,45,63,42,52,61,0,57],
[37,33,53,51,54,27,34,39,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,37,32,40,34,42,35,36,31],
[44,0,46,44,44,41,47,43,42,40],
[44,35,0,41,43,40,47,41,39,43],
[49,37,40,0,46,42,46,46,42,41],
[41,37,38,35,0,39,40,47,41,41],
[47,40,41,39,42,0,43,43,42,35],
[39,34,34,35,41,38,0,46,38,38],
[46,38,40,35,34,38,35,0,38,31],
[45,39,42,39,40,39,43,43,0,40],
[50,41,38,40,40,46,43,50,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,44,45,40,46,43,38,51,42],
[36,0,40,44,38,42,40,32,46,39],
[37,41,0,41,31,40,39,35,46,37],
[36,37,40,0,32,43,34,35,41,38],
[41,43,50,49,0,44,40,43,52,34],
[35,39,41,38,37,0,37,34,46,36],
[38,41,42,47,41,44,0,33,51,41],
[43,49,46,46,38,47,48,0,53,41],
[30,35,35,40,29,35,30,28,0,31],
[39,42,44,43,47,45,40,40,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,47,30,43,30,32,43,43,41],
[45,0,56,50,47,42,45,29,28,45],
[34,25,0,16,21,38,22,33,27,41],
[51,31,65,0,53,48,48,43,36,42],
[38,34,60,28,0,44,34,40,40,36],
[51,39,43,33,37,0,50,39,37,46],
[49,36,59,33,47,31,0,43,54,40],
[38,52,48,38,41,42,38,0,38,49],
[38,53,54,45,41,44,27,43,0,46],
[40,36,40,39,45,35,41,32,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,31,31,41,31,31,31,51,31],
[31,0,51,18,43,41,22,10,30,42],
[50,30,0,30,33,22,32,20,30,32],
[50,63,51,0,43,41,22,21,30,42],
[40,38,48,38,0,29,21,28,29,27],
[50,40,59,40,52,0,41,19,49,51],
[50,59,49,59,60,40,0,59,39,59],
[50,71,61,60,53,62,22,0,51,62],
[30,51,51,51,52,32,42,30,0,41],
[50,39,49,39,54,30,22,19,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,63,37,63,35,24,46,28,44],
[44,0,56,26,44,28,42,46,27,35],
[18,25,0,34,37,37,35,37,27,28],
[44,55,47,0,44,28,42,55,36,44],
[18,37,44,37,0,37,35,53,25,42],
[46,53,44,53,44,0,63,65,44,35],
[57,39,46,39,46,18,0,46,37,34],
[35,35,44,26,28,16,35,0,44,34],
[53,54,54,45,56,37,44,37,0,26],
[37,46,53,37,39,46,47,47,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,40,45,30,33,31,35,53,41],
[44,0,39,45,31,45,26,42,44,46],
[41,42,0,55,36,49,36,42,52,48],
[36,36,26,0,30,21,35,29,43,33],
[51,50,45,51,0,46,35,46,51,57],
[48,36,32,60,35,0,43,46,53,53],
[50,55,45,46,46,38,0,34,46,50],
[46,39,39,52,35,35,47,0,48,41],
[28,37,29,38,30,28,35,33,0,39],
[40,35,33,48,24,28,31,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,35,31,37,34,26,34,27,39],
[46,0,42,41,46,40,39,39,47,43],
[46,39,0,48,50,42,50,47,44,43],
[50,40,33,0,41,32,32,31,38,38],
[44,35,31,40,0,35,27,29,34,39],
[47,41,39,49,46,0,31,39,45,49],
[55,42,31,49,54,50,0,43,42,38],
[47,42,34,50,52,42,38,0,52,52],
[54,34,37,43,47,36,39,29,0,41],
[42,38,38,43,42,32,43,29,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,36,46,47,42,39,39,30,38],
[34,0,43,43,44,30,36,45,42,30],
[45,38,0,44,42,42,40,46,35,36],
[35,38,37,0,40,33,32,33,32,38],
[34,37,39,41,0,36,31,45,36,31],
[39,51,39,48,45,0,39,48,39,39],
[42,45,41,49,50,42,0,46,49,38],
[42,36,35,48,36,33,35,0,38,35],
[51,39,46,49,45,42,32,43,0,47],
[43,51,45,43,50,42,43,46,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,25,36,38,27,38,38,51,33],
[46,0,44,42,44,32,50,52,48,46],
[56,37,0,45,35,33,42,54,50,42],
[45,39,36,0,33,37,40,45,50,33],
[43,37,46,48,0,40,41,43,47,36],
[54,49,48,44,41,0,44,54,57,40],
[43,31,39,41,40,37,0,51,52,43],
[43,29,27,36,38,27,30,0,42,33],
[30,33,31,31,34,24,29,39,0,29],
[48,35,39,48,45,41,38,48,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,6,16,23,6,23,6,30,22],
[75,0,36,56,63,39,58,59,58,48],
[75,45,0,36,45,44,45,52,61,43],
[65,25,45,0,49,31,39,25,49,31],
[58,18,36,32,0,32,42,35,61,22],
[75,42,37,50,49,0,56,43,52,31],
[58,23,36,42,39,25,0,32,51,23],
[75,22,29,56,46,38,49,0,65,29],
[51,23,20,32,20,29,30,16,0,20],
[59,33,38,50,59,50,58,52,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,40,49,52,40,39,45,36,35],
[45,0,46,47,48,43,38,39,50,42],
[41,35,0,54,55,47,44,49,47,48],
[32,34,27,0,42,25,37,35,43,30],
[29,33,26,39,0,39,29,38,42,29],
[41,38,34,56,42,0,37,46,47,38],
[42,43,37,44,52,44,0,34,53,40],
[36,42,32,46,43,35,47,0,54,41],
[45,31,34,38,39,34,28,27,0,25],
[46,39,33,51,52,43,41,40,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,44,41,39,36,46,39,46,41],
[44,0,50,43,37,38,45,40,44,46],
[37,31,0,41,41,35,41,36,42,38],
[40,38,40,0,37,34,40,33,47,39],
[42,44,40,44,0,40,47,44,45,40],
[45,43,46,47,41,0,43,45,45,39],
[35,36,40,41,34,38,0,37,40,36],
[42,41,45,48,37,36,44,0,41,40],
[35,37,39,34,36,36,41,40,0,38],
[40,35,43,42,41,42,45,41,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,21,41,47,52,54,41,26,22],
[41,0,47,54,37,52,56,36,41,36],
[60,34,0,48,41,54,60,41,44,25],
[40,27,33,0,45,46,53,45,31,32],
[34,44,40,36,0,47,52,34,43,34],
[29,29,27,35,34,0,45,23,26,17],
[27,25,21,28,29,36,0,26,27,16],
[40,45,40,36,47,58,55,0,45,29],
[55,40,37,50,38,55,54,36,0,42],
[59,45,56,49,47,64,65,52,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,36,29,23,41,32,43,39,29],
[42,0,33,36,37,48,40,38,43,23],
[45,48,0,31,34,43,33,37,33,36],
[52,45,50,0,45,46,38,44,40,38],
[58,44,47,36,0,52,51,49,44,45],
[40,33,38,35,29,0,32,43,34,26],
[49,41,48,43,30,49,0,39,47,43],
[38,43,44,37,32,38,42,0,39,33],
[42,38,48,41,37,47,34,42,0,32],
[52,58,45,43,36,55,38,48,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,42,38,39,37,42,33,37,40],
[33,0,36,24,37,26,33,37,37,28],
[39,45,0,34,52,30,39,38,42,37],
[43,57,47,0,53,34,44,44,44,44],
[42,44,29,28,0,37,39,33,40,34],
[44,55,51,47,44,0,49,39,49,50],
[39,48,42,37,42,32,0,39,39,38],
[48,44,43,37,48,42,42,0,45,45],
[44,44,39,37,41,32,42,36,0,44],
[41,53,44,37,47,31,43,36,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,33,39,31,37,39,38,33,37],
[50,0,43,46,51,43,48,40,45,51],
[48,38,0,51,38,46,43,46,46,51],
[42,35,30,0,41,42,35,41,43,45],
[50,30,43,40,0,46,45,36,43,42],
[44,38,35,39,35,0,39,39,38,50],
[42,33,38,46,36,42,0,37,45,47],
[43,41,35,40,45,42,44,0,38,45],
[48,36,35,38,38,43,36,43,0,42],
[44,30,30,36,39,31,34,36,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,19,32,32,34,43,49,49,35],
[54,0,37,46,44,53,54,54,53,52],
[62,44,0,39,49,52,57,56,49,53],
[49,35,42,0,37,42,49,60,51,43],
[49,37,32,44,0,37,44,47,53,41],
[47,28,29,39,44,0,47,45,51,34],
[38,27,24,32,37,34,0,41,42,28],
[32,27,25,21,34,36,40,0,38,32],
[32,28,32,30,28,30,39,43,0,34],
[46,29,28,38,40,47,53,49,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,54,27,27,81,27,54,27,54],
[27,0,27,0,0,27,0,27,0,27],
[27,54,0,0,27,27,27,27,0,27],
[54,81,81,0,54,54,27,54,54,54],
[54,81,54,27,0,54,54,54,0,27],
[0,54,54,27,27,0,27,27,27,54],
[54,81,54,54,27,54,0,81,27,27],
[27,54,54,27,27,54,0,0,0,27],
[54,81,81,27,81,54,54,81,0,27],
[27,54,54,27,54,27,54,54,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,32,37,46,43,36,47,34,43],
[33,0,27,26,32,31,37,28,26,28],
[49,54,0,42,49,50,42,42,37,51],
[44,55,39,0,48,46,54,48,41,42],
[35,49,32,33,0,42,40,47,39,46],
[38,50,31,35,39,0,43,44,38,43],
[45,44,39,27,41,38,0,42,32,43],
[34,53,39,33,34,37,39,0,37,34],
[47,55,44,40,42,43,49,44,0,53],
[38,53,30,39,35,38,38,47,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,36,43,41,41,41,43,46,41],
[37,0,45,39,43,46,35,41,48,37],
[45,36,0,37,38,40,35,37,44,40],
[38,42,44,0,43,47,50,40,35,45],
[40,38,43,38,0,40,40,40,42,37],
[40,35,41,34,41,0,37,36,43,35],
[40,46,46,31,41,44,0,36,41,40],
[38,40,44,41,41,45,45,0,47,42],
[35,33,37,46,39,38,40,34,0,35],
[40,44,41,36,44,46,41,39,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,47,44,41,45,41,49,39,53],
[35,0,45,48,38,38,30,36,36,31],
[34,36,0,41,43,51,34,48,32,47],
[37,33,40,0,27,41,37,31,34,44],
[40,43,38,54,0,44,41,42,31,48],
[36,43,30,40,37,0,43,37,31,35],
[40,51,47,44,40,38,0,40,41,46],
[32,45,33,50,39,44,41,0,35,33],
[42,45,49,47,50,50,40,46,0,51],
[28,50,34,37,33,46,35,48,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,42,39,37,34,40,41,34,34],
[49,0,41,48,44,41,47,45,51,39],
[39,40,0,46,48,45,39,42,43,43],
[42,33,35,0,42,30,37,42,38,34],
[44,37,33,39,0,33,44,35,37,34],
[47,40,36,51,48,0,45,36,46,42],
[41,34,42,44,37,36,0,36,37,35],
[40,36,39,39,46,45,45,0,43,35],
[47,30,38,43,44,35,44,38,0,34],
[47,42,38,47,47,39,46,46,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,33,41,36,34,34,45,33,35],
[53,0,50,46,49,48,44,49,37,39],
[48,31,0,44,42,42,44,46,34,47],
[40,35,37,0,50,46,45,49,41,56],
[45,32,39,31,0,27,28,36,35,46],
[47,33,39,35,54,0,47,50,35,54],
[47,37,37,36,53,34,0,43,31,52],
[36,32,35,32,45,31,38,0,29,45],
[48,44,47,40,46,46,50,52,0,49],
[46,42,34,25,35,27,29,36,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,45,39,50,41,56,38,50,34],
[36,0,26,37,22,33,27,28,40,37],
[36,55,0,32,40,40,42,43,52,47],
[42,44,49,0,45,49,61,35,48,38],
[31,59,41,36,0,37,46,46,53,39],
[40,48,41,32,44,0,40,42,42,37],
[25,54,39,20,35,41,0,37,45,36],
[43,53,38,46,35,39,44,0,50,43],
[31,41,29,33,28,39,36,31,0,21],
[47,44,34,43,42,44,45,38,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,41,39,31,37,44,37,36,31],
[46,0,38,43,38,45,42,42,45,40],
[40,43,0,45,40,46,47,45,45,44],
[42,38,36,0,44,43,42,36,46,37],
[50,43,41,37,0,45,41,43,47,38],
[44,36,35,38,36,0,42,47,37,31],
[37,39,34,39,40,39,0,42,37,33],
[44,39,36,45,38,34,39,0,39,37],
[45,36,36,35,34,44,44,42,0,32],
[50,41,37,44,43,50,48,44,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,52,47,48,55,48,56,45,48],
[41,0,45,40,38,37,37,50,39,38],
[29,36,0,39,37,47,36,46,39,39],
[34,41,42,0,56,47,38,42,43,47],
[33,43,44,25,0,49,40,39,35,35],
[26,44,34,34,32,0,34,45,36,44],
[33,44,45,43,41,47,0,55,52,44],
[25,31,35,39,42,36,26,0,25,33],
[36,42,42,38,46,45,29,56,0,40],
[33,43,42,34,46,37,37,48,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,44,54,38,54,48,49,46,41],
[39,0,40,54,48,54,54,57,46,37],
[37,41,0,64,49,58,51,52,52,51],
[27,27,17,0,31,43,29,35,29,37],
[43,33,32,50,0,47,37,37,41,29],
[27,27,23,38,34,0,31,35,31,36],
[33,27,30,52,44,50,0,48,55,35],
[32,24,29,46,44,46,33,0,40,35],
[35,35,29,52,40,50,26,41,0,41],
[40,44,30,44,52,45,46,46,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,23,39,20,32,26,24,25,29],
[66,0,45,57,40,59,35,42,41,45],
[58,36,0,51,36,43,36,41,31,44],
[42,24,30,0,23,29,33,29,34,27],
[61,41,45,58,0,48,45,40,47,51],
[49,22,38,52,33,0,26,30,38,32],
[55,46,45,48,36,55,0,37,42,44],
[57,39,40,52,41,51,44,0,43,36],
[56,40,50,47,34,43,39,38,0,39],
[52,36,37,54,30,49,37,45,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,30,22,28,33,26,38,30,37],
[46,0,45,37,39,33,36,54,45,59],
[51,36,0,37,49,43,42,42,36,49],
[59,44,44,0,44,46,36,42,42,46],
[53,42,32,37,0,41,43,51,37,50],
[48,48,38,35,40,0,32,45,45,46],
[55,45,39,45,38,49,0,39,50,58],
[43,27,39,39,30,36,42,0,48,44],
[51,36,45,39,44,36,31,33,0,48],
[44,22,32,35,31,35,23,37,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,36,44,42,55,40,45,42,50],
[37,0,33,41,41,38,38,42,35,33],
[45,48,0,50,36,52,42,50,39,42],
[37,40,31,0,34,47,44,35,33,36],
[39,40,45,47,0,47,46,46,46,34],
[26,43,29,34,34,0,35,33,17,34],
[41,43,39,37,35,46,0,42,32,44],
[36,39,31,46,35,48,39,0,29,30],
[39,46,42,48,35,64,49,52,0,41],
[31,48,39,45,47,47,37,51,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,34,40,34,37,47,49,42,51],
[42,0,40,32,36,41,48,48,40,45],
[47,41,0,41,37,41,48,47,46,53],
[41,49,40,0,38,38,43,48,47,49],
[47,45,44,43,0,39,42,44,51,47],
[44,40,40,43,42,0,49,46,48,50],
[34,33,33,38,39,32,0,40,47,50],
[32,33,34,33,37,35,41,0,47,34],
[39,41,35,34,30,33,34,34,0,45],
[30,36,28,32,34,31,31,47,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,48,35,31,36,37,36,46,41],
[45,0,38,38,32,41,35,45,42,46],
[33,43,0,40,30,36,36,37,51,38],
[46,43,41,0,34,43,39,50,45,51],
[50,49,51,47,0,35,49,45,53,50],
[45,40,45,38,46,0,41,48,50,48],
[44,46,45,42,32,40,0,48,49,44],
[45,36,44,31,36,33,33,0,43,40],
[35,39,30,36,28,31,32,38,0,36],
[40,35,43,30,31,33,37,41,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,38,44,36,50,46,41,39,39],
[36,0,33,41,29,41,39,37,30,23],
[43,48,0,48,34,51,47,40,34,45],
[37,40,33,0,35,45,41,36,33,33],
[45,52,47,46,0,54,47,42,44,38],
[31,40,30,36,27,0,36,25,35,32],
[35,42,34,40,34,45,0,35,28,26],
[40,44,41,45,39,56,46,0,38,42],
[42,51,47,48,37,46,53,43,0,30],
[42,58,36,48,43,49,55,39,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,35,37,38,37,36,41,47,41],
[42,0,37,47,41,43,39,52,38,47],
[46,44,0,54,41,40,39,46,45,47],
[44,34,27,0,36,36,35,39,39,47],
[43,40,40,45,0,28,36,43,49,45],
[44,38,41,45,53,0,41,52,44,52],
[45,42,42,46,45,40,0,49,48,56],
[40,29,35,42,38,29,32,0,29,40],
[34,43,36,42,32,37,33,52,0,48],
[40,34,34,34,36,29,25,41,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,31,39,27,36,44,40,41,35],
[37,0,39,43,33,45,34,52,46,35],
[50,42,0,47,32,42,44,38,45,39],
[42,38,34,0,30,36,45,34,38,30],
[54,48,49,51,0,42,48,53,54,40],
[45,36,39,45,39,0,45,36,47,45],
[37,47,37,36,33,36,0,45,40,31],
[41,29,43,47,28,45,36,0,50,35],
[40,35,36,43,27,34,41,31,0,40],
[46,46,42,51,41,36,50,46,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,36,42,37,37,41,38,37,42],
[40,0,43,39,42,47,45,43,40,43],
[45,38,0,39,43,33,42,38,45,39],
[39,42,42,0,40,42,38,38,45,48],
[44,39,38,41,0,41,40,42,41,40],
[44,34,48,39,40,0,43,43,41,42],
[40,36,39,43,41,38,0,35,39,44],
[43,38,43,43,39,38,46,0,42,45],
[44,41,36,36,40,40,42,39,0,40],
[39,38,42,33,41,39,37,36,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,41,48,49,57,51,44,35,40],
[35,0,35,32,42,50,43,45,31,51],
[40,46,0,33,42,42,40,43,27,36],
[33,49,48,0,48,47,40,40,41,43],
[32,39,39,33,0,42,44,36,39,34],
[24,31,39,34,39,0,40,30,34,31],
[30,38,41,41,37,41,0,35,33,40],
[37,36,38,41,45,51,46,0,36,44],
[46,50,54,40,42,47,48,45,0,41],
[41,30,45,38,47,50,41,37,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,39,39,38,49,35,39,36,33],
[40,0,27,37,38,45,30,34,35,26],
[42,54,0,43,38,52,46,50,36,41],
[42,44,38,0,39,46,42,41,32,31],
[43,43,43,42,0,43,40,45,40,27],
[32,36,29,35,38,0,25,36,30,15],
[46,51,35,39,41,56,0,39,33,33],
[42,47,31,40,36,45,42,0,37,37],
[45,46,45,49,41,51,48,44,0,33],
[48,55,40,50,54,66,48,44,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,40,37,39,39,44,45,34,40],
[48,0,40,42,52,46,43,50,45,44],
[41,41,0,35,42,45,48,54,37,41],
[44,39,46,0,44,49,43,45,35,37],
[42,29,39,37,0,46,40,34,33,37],
[42,35,36,32,35,0,39,42,32,29],
[37,38,33,38,41,42,0,40,36,28],
[36,31,27,36,47,39,41,0,29,39],
[47,36,44,46,48,49,45,52,0,39],
[41,37,40,44,44,52,53,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,39,70,60,39,39,30,49,59],
[33,0,52,72,71,41,61,43,51,50],
[42,29,0,70,49,39,39,40,40,50],
[11,9,11,0,31,11,31,0,11,21],
[21,10,32,50,0,20,19,0,31,30],
[42,40,42,70,61,0,30,51,31,41],
[42,20,42,50,62,51,0,21,21,39],
[51,38,41,81,81,30,60,0,61,50],
[32,30,41,70,50,50,60,20,0,49],
[22,31,31,60,51,40,42,31,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,35,37,51,37,41,40,49,44],
[41,0,37,38,48,39,47,45,47,52],
[46,44,0,39,50,44,38,36,44,45],
[44,43,42,0,51,38,44,41,41,49],
[30,33,31,30,0,28,35,32,38,33],
[44,42,37,43,53,0,48,46,49,49],
[40,34,43,37,46,33,0,40,40,41],
[41,36,45,40,49,35,41,0,41,42],
[32,34,37,40,43,32,41,40,0,45],
[37,29,36,32,48,32,40,39,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,45,49,49,46,38,41,41,53],
[34,0,37,37,37,41,32,42,26,35],
[36,44,0,43,35,40,40,36,32,43],
[32,44,38,0,34,40,34,40,35,38],
[32,44,46,47,0,38,31,40,39,41],
[35,40,41,41,43,0,35,43,35,42],
[43,49,41,47,50,46,0,41,40,43],
[40,39,45,41,41,38,40,0,37,42],
[40,55,49,46,42,46,41,44,0,47],
[28,46,38,43,40,39,38,39,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,37,34,29,40,37,37,27,30],
[45,0,54,39,35,52,48,44,42,46],
[44,27,0,29,27,42,37,30,34,32],
[47,42,52,0,37,47,48,43,37,42],
[52,46,54,44,0,47,53,45,38,38],
[41,29,39,34,34,0,45,27,34,35],
[44,33,44,33,28,36,0,43,31,33],
[44,37,51,38,36,54,38,0,38,37],
[54,39,47,44,43,47,50,43,0,32],
[51,35,49,39,43,46,48,44,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,34,43,37,34,34,37,27,46],
[44,0,40,48,55,46,33,54,40,50],
[47,41,0,50,50,42,38,45,45,47],
[38,33,31,0,30,39,29,32,35,45],
[44,26,31,51,0,27,26,31,38,35],
[47,35,39,42,54,0,39,41,42,48],
[47,48,43,52,55,42,0,51,39,45],
[44,27,36,49,50,40,30,0,48,46],
[54,41,36,46,43,39,42,33,0,51],
[35,31,34,36,46,33,36,35,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,40,23,46,47,54,46,46,23],
[27,0,25,17,39,24,58,42,49,24],
[41,56,0,49,56,41,57,56,40,46],
[58,64,32,0,47,48,66,57,57,39],
[35,42,25,34,0,32,59,58,43,39],
[34,57,40,33,49,0,57,57,49,47],
[27,23,24,15,22,24,0,15,40,23],
[35,39,25,24,23,24,66,0,41,32],
[35,32,41,24,38,32,41,40,0,23],
[58,57,35,42,42,34,58,49,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,43,45,46,39,42,45,49,39],
[36,0,41,48,45,37,35,38,44,40],
[38,40,0,50,47,37,41,45,43,40],
[36,33,31,0,34,36,33,39,34,35],
[35,36,34,47,0,38,33,36,36,44],
[42,44,44,45,43,0,39,45,42,46],
[39,46,40,48,48,42,0,41,43,40],
[36,43,36,42,45,36,40,0,45,39],
[32,37,38,47,45,39,38,36,0,40],
[42,41,41,46,37,35,41,42,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,35,40,38,42,40,37,53,56],
[48,0,54,41,47,39,57,39,61,55],
[46,27,0,38,43,42,39,48,52,48],
[41,40,43,0,35,39,33,45,52,43],
[43,34,38,46,0,51,41,38,49,55],
[39,42,39,42,30,0,39,47,42,48],
[41,24,42,48,40,42,0,29,51,52],
[44,42,33,36,43,34,52,0,49,51],
[28,20,29,29,32,39,30,32,0,47],
[25,26,33,38,26,33,29,30,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 81, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_10_81.csv", index=False, header=False)
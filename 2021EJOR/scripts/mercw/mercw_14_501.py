
import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,247,248,245,260,242,263,249,252,267,286,268,260,247],
[254,0,242,246,246,255,254,243,251,265,258,273,264,249],
[253,259,0,256,257,249,252,260,252,270,259,266,250,260],
[256,255,245,0,268,244,256,263,248,262,270,271,262,244],
[241,255,244,233,0,226,250,257,242,262,261,252,260,246],
[259,246,252,257,275,0,259,249,249,264,269,270,266,251],
[238,247,249,245,251,242,0,256,252,265,259,270,259,237],
[252,258,241,238,244,252,245,0,250,260,263,258,267,230],
[249,250,249,253,259,252,249,251,0,253,263,278,259,242],
[234,236,231,239,239,237,236,241,248,0,242,254,256,238],
[215,243,242,231,240,232,242,238,238,259,0,260,254,236],
[233,228,235,230,249,231,231,243,223,247,241,0,244,232],
[241,237,251,239,241,235,242,234,242,245,247,257,0,251],
[254,252,241,257,255,250,264,271,259,263,265,269,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,254,227,262,292,288,261,241,264,254,253,261,255],
[214,0,233,231,252,272,252,253,236,276,253,243,245,264],
[247,268,0,264,277,281,260,251,259,284,273,251,281,268],
[274,270,237,0,255,249,258,258,234,268,267,257,248,249],
[239,249,224,246,0,260,252,243,232,251,241,230,252,240],
[209,229,220,252,241,0,248,231,219,240,241,228,224,246],
[213,249,241,243,249,253,0,247,245,268,249,241,234,248],
[240,248,250,243,258,270,254,0,223,261,250,216,252,255],
[260,265,242,267,269,282,256,278,0,270,253,237,247,257],
[237,225,217,233,250,261,233,240,231,0,244,207,246,230],
[247,248,228,234,260,260,252,251,248,257,0,237,233,234],
[248,258,250,244,271,273,260,285,264,294,264,0,247,260],
[240,256,220,253,249,277,267,249,254,255,268,254,0,261],
[246,237,233,252,261,255,253,246,244,271,267,241,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,278,243,255,239,246,264,247,254,247,272,237,245],
[238,0,254,231,243,247,242,248,257,244,270,266,222,249],
[223,247,0,239,245,235,234,232,248,251,256,267,218,242],
[258,270,262,0,262,255,249,262,244,257,269,269,259,263],
[246,258,256,239,0,240,238,251,234,248,253,257,237,251],
[262,254,266,246,261,0,231,260,247,253,252,282,254,242],
[255,259,267,252,263,270,0,256,245,246,251,274,261,256],
[237,253,269,239,250,241,245,0,240,263,259,262,253,251],
[254,244,253,257,267,254,256,261,0,260,250,264,231,259],
[247,257,250,244,253,248,255,238,241,0,254,274,237,251],
[254,231,245,232,248,249,250,242,251,247,0,249,224,248],
[229,235,234,232,244,219,227,239,237,227,252,0,230,229],
[264,279,283,242,264,247,240,248,270,264,277,271,0,255],
[256,252,259,238,250,259,245,250,242,250,253,272,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,246,230,224,239,234,239,228,242,232,246,237,230],
[263,0,264,257,250,249,258,253,234,268,266,241,248,264],
[255,237,0,245,240,237,231,240,234,228,230,253,229,232],
[271,244,256,0,228,232,235,248,227,251,234,252,231,256],
[277,251,261,273,0,259,259,256,234,255,265,258,256,257],
[262,252,264,269,242,0,255,250,229,261,236,260,241,263],
[267,243,270,266,242,246,0,257,243,264,243,277,257,255],
[262,248,261,253,245,251,244,0,256,252,255,261,241,275],
[273,267,267,274,267,272,258,245,0,260,268,271,248,257],
[259,233,273,250,246,240,237,249,241,0,235,255,241,261],
[269,235,271,267,236,265,258,246,233,266,0,270,259,258],
[255,260,248,249,243,241,224,240,230,246,231,0,238,242],
[264,253,272,270,245,260,244,260,253,260,242,263,0,270],
[271,237,269,245,244,238,246,226,244,240,243,259,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,250,265,254,273,276,251,269,274,300,283,246,280],
[262,0,245,266,235,295,274,255,275,296,286,261,271,292],
[251,256,0,266,225,243,262,228,233,280,291,237,223,271],
[236,235,235,0,208,224,239,202,226,282,257,234,241,223],
[247,266,276,293,0,267,237,246,264,271,274,266,267,262],
[228,206,258,277,234,0,251,221,222,254,272,222,221,236],
[225,227,239,262,264,250,0,213,226,275,268,241,258,277],
[250,246,273,299,255,280,288,0,255,276,267,274,287,286],
[232,226,268,275,237,279,275,246,0,255,282,254,256,270],
[227,205,221,219,230,247,226,225,246,0,230,218,224,241],
[201,215,210,244,227,229,233,234,219,271,0,207,223,236],
[218,240,264,267,235,279,260,227,247,283,294,0,258,245],
[255,230,278,260,234,280,243,214,245,277,278,243,0,230],
[221,209,230,278,239,265,224,215,231,260,265,256,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,288,283,282,288,270,243,303,277,284,268,269,292],
[250,0,236,232,256,243,268,217,277,276,232,224,220,267],
[213,265,0,259,263,264,233,258,265,266,281,234,222,242],
[218,269,242,0,279,275,244,242,278,253,262,196,223,258],
[219,245,238,222,0,252,265,229,256,262,222,218,225,241],
[213,258,237,226,249,0,226,237,260,225,279,201,224,265],
[231,233,268,257,236,275,0,212,271,242,276,230,250,292],
[258,284,243,259,272,264,289,0,298,238,293,238,234,294],
[198,224,236,223,245,241,230,203,0,245,233,186,231,236],
[224,225,235,248,239,276,259,263,256,0,240,230,219,230],
[217,269,220,239,279,222,225,208,268,261,0,193,233,252],
[233,277,267,305,283,300,271,263,315,271,308,0,249,283],
[232,281,279,278,276,277,251,267,270,282,268,252,0,265],
[209,234,259,243,260,236,209,207,265,271,249,218,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,170,254,195,209,276,201,280,221,272,255,270,164],
[225,0,242,203,164,248,343,263,279,250,331,294,195,164],
[331,259,0,268,197,246,288,249,285,274,239,243,192,182],
[247,298,233,0,262,354,377,295,322,271,285,427,241,245],
[306,337,304,239,0,339,375,288,306,288,359,364,280,284],
[292,253,255,147,162,0,288,205,273,242,241,288,181,126],
[225,158,213,124,126,213,0,251,244,181,206,298,197,81],
[300,238,252,206,213,296,250,0,345,237,275,330,200,190],
[221,222,216,179,195,228,257,156,0,233,170,205,177,151],
[280,251,227,230,213,259,320,264,268,0,262,277,254,146],
[229,170,262,216,142,260,295,226,331,239,0,301,211,138],
[246,207,258,74,137,213,203,171,296,224,200,0,164,68],
[231,306,309,260,221,320,304,301,324,247,290,337,0,243],
[337,337,319,256,217,375,420,311,350,355,363,433,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,272,273,243,241,269,263,246,259,251,262,253,288],
[257,0,255,253,240,272,269,267,226,255,246,245,264,267],
[229,246,0,237,244,243,264,233,248,235,240,241,259,260],
[228,248,264,0,228,260,258,224,261,254,259,237,266,258],
[258,261,257,273,0,264,270,246,241,270,255,250,249,263],
[260,229,258,241,237,0,252,228,254,251,238,241,240,263],
[232,232,237,243,231,249,0,234,239,239,255,220,233,240],
[238,234,268,277,255,273,267,0,257,279,262,256,276,272],
[255,275,253,240,260,247,262,244,0,259,249,243,241,254],
[242,246,266,247,231,250,262,222,242,0,253,243,254,258],
[250,255,261,242,246,263,246,239,252,248,0,247,251,274],
[239,256,260,264,251,260,281,245,258,258,254,0,273,260],
[248,237,242,235,252,261,268,225,260,247,250,228,0,252],
[213,234,241,243,238,238,261,229,247,243,227,241,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,252,257,252,266,254,247,253,253,263,241,256,249],
[248,0,265,263,257,257,263,261,236,241,259,248,250,237],
[249,236,0,253,244,255,257,239,244,238,252,237,251,249],
[244,238,248,0,259,252,246,249,233,235,258,252,259,244],
[249,244,257,242,0,255,249,253,242,245,263,238,233,243],
[235,244,246,249,246,0,239,255,237,235,265,231,236,226],
[247,238,244,255,252,262,0,243,228,240,260,233,226,251],
[254,240,262,252,248,246,258,0,243,236,256,244,246,247],
[248,265,257,268,259,264,273,258,0,243,266,253,256,250],
[248,260,263,266,256,266,261,265,258,0,275,250,254,257],
[238,242,249,243,238,236,241,245,235,226,0,232,246,236],
[260,253,264,249,263,270,268,257,248,251,269,0,256,253],
[245,251,250,242,268,265,275,255,245,247,255,245,0,251],
[252,264,252,257,258,275,250,254,251,244,265,248,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,242,251,237,271,253,262,245,285,268,276,279,268],
[250,0,228,241,246,272,251,254,225,257,244,295,274,272],
[259,273,0,256,267,273,271,244,252,266,258,281,277,279],
[250,260,245,0,232,266,267,267,220,264,264,290,269,255],
[264,255,234,269,0,268,281,242,234,268,255,297,271,255],
[230,229,228,235,233,0,251,246,236,249,239,256,254,233],
[248,250,230,234,220,250,0,263,220,244,234,272,242,240],
[239,247,257,234,259,255,238,0,246,278,257,292,270,275],
[256,276,249,281,267,265,281,255,0,274,265,295,274,286],
[216,244,235,237,233,252,257,223,227,0,235,268,275,234],
[233,257,243,237,246,262,267,244,236,266,0,274,274,237],
[225,206,220,211,204,245,229,209,206,233,227,0,242,230],
[222,227,224,232,230,247,259,231,227,226,227,259,0,235],
[233,229,222,246,246,268,261,226,215,267,264,271,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,253,232,264,249,247,232,248,240,279,258,249,260],
[249,0,247,257,269,252,256,245,250,233,253,249,260,241],
[248,254,0,229,251,274,263,247,262,241,276,275,257,260],
[269,244,272,0,269,259,246,256,255,251,273,268,257,263],
[237,232,250,232,0,233,233,229,226,228,259,247,236,233],
[252,249,227,242,268,0,249,238,230,229,266,255,255,268],
[254,245,238,255,268,252,0,239,252,232,269,259,264,257],
[269,256,254,245,272,263,262,0,239,227,271,249,261,270],
[253,251,239,246,275,271,249,262,0,242,270,253,243,261],
[261,268,260,250,273,272,269,274,259,0,275,274,268,267],
[222,248,225,228,242,235,232,230,231,226,0,229,238,242],
[243,252,226,233,254,246,242,252,248,227,272,0,251,252],
[252,241,244,244,265,246,237,240,258,233,263,250,0,252],
[241,260,241,238,268,233,244,231,240,234,259,249,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,261,265,267,252,270,268,269,251,263,265,267,250],
[245,0,259,250,255,228,260,268,253,254,242,251,250,263],
[240,242,0,250,258,240,258,257,251,255,249,257,254,241],
[236,251,251,0,257,239,244,264,248,245,245,243,241,249],
[234,246,243,244,0,243,275,254,251,234,255,258,250,260],
[249,273,261,262,258,0,275,270,280,258,260,254,263,268],
[231,241,243,257,226,226,0,248,238,223,234,233,246,235],
[233,233,244,237,247,231,253,0,251,239,237,227,224,246],
[232,248,250,253,250,221,263,250,0,247,237,236,229,252],
[250,247,246,256,267,243,278,262,254,0,253,254,259,269],
[238,259,252,256,246,241,267,264,264,248,0,242,247,255],
[236,250,244,258,243,247,268,274,265,247,259,0,253,263],
[234,251,247,260,251,238,255,277,272,242,254,248,0,253],
[251,238,260,252,241,233,266,255,249,232,246,238,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,244,229,230,249,223,237,234,235,222,229,255,219],
[274,0,257,274,262,269,245,276,252,270,256,260,256,260],
[257,244,0,261,254,257,257,262,243,273,250,254,276,242],
[272,227,240,0,236,255,257,252,250,266,257,262,279,231],
[271,239,247,265,0,254,249,256,246,257,260,254,265,248],
[252,232,244,246,247,0,241,258,238,247,237,252,246,234],
[278,256,244,244,252,260,0,253,250,235,238,253,246,244],
[264,225,239,249,245,243,248,0,239,237,257,259,252,240],
[267,249,258,251,255,263,251,262,0,243,253,264,271,238],
[266,231,228,235,244,254,266,264,258,0,231,246,270,222],
[279,245,251,244,241,264,263,244,248,270,0,269,261,237],
[272,241,247,239,247,249,248,242,237,255,232,0,269,222],
[246,245,225,222,236,255,255,249,230,231,240,232,0,229],
[282,241,259,270,253,267,257,261,263,279,264,279,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,270,244,249,263,249,239,260,232,257,244,264,242],
[241,0,243,246,240,264,236,222,234,223,236,256,252,212],
[231,258,0,237,222,262,233,229,228,230,222,221,239,216],
[257,255,264,0,255,280,244,243,249,244,248,246,271,241],
[252,261,279,246,0,262,242,239,257,244,246,256,261,246],
[238,237,239,221,239,0,239,234,249,238,244,233,253,218],
[252,265,268,257,259,262,0,256,248,243,243,255,270,253],
[262,279,272,258,262,267,245,0,250,248,254,234,276,231],
[241,267,273,252,244,252,253,251,0,242,253,244,282,240],
[269,278,271,257,257,263,258,253,259,0,248,263,256,231],
[244,265,279,253,255,257,258,247,248,253,0,243,254,232],
[257,245,280,255,245,268,246,267,257,238,258,0,259,230],
[237,249,262,230,240,248,231,225,219,245,247,242,0,237],
[259,289,285,260,255,283,248,270,261,270,269,271,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,221,225,231,227,250,237,232,258,238,234,243,241,227],
[280,0,250,229,260,260,263,259,271,233,249,265,250,257],
[276,251,0,255,250,264,274,258,281,254,276,269,275,262],
[270,272,246,0,254,264,248,240,271,243,256,240,259,261],
[274,241,251,247,0,260,256,263,246,253,268,259,271,236],
[251,241,237,237,241,0,235,247,279,238,257,246,264,234],
[264,238,227,253,245,266,0,248,267,232,237,248,241,263],
[269,242,243,261,238,254,253,0,275,267,240,256,267,271],
[243,230,220,230,255,222,234,226,0,221,237,236,234,246],
[263,268,247,258,248,263,269,234,280,0,265,262,254,256],
[267,252,225,245,233,244,264,261,264,236,0,227,249,249],
[258,236,232,261,242,255,253,245,265,239,274,0,262,241],
[260,251,226,242,230,237,260,234,267,247,252,239,0,252],
[274,244,239,240,265,267,238,230,255,245,252,260,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,246,224,215,260,264,254,227,240,180,223,246,209],
[297,0,278,287,225,290,298,296,246,301,262,259,297,253],
[255,223,0,235,224,261,262,245,228,272,234,248,283,241],
[277,214,266,0,244,259,286,262,213,252,248,227,292,269],
[286,276,277,257,0,263,320,273,254,278,250,243,289,249],
[241,211,240,242,238,0,298,243,215,262,232,246,255,227],
[237,203,239,215,181,203,0,214,181,234,207,195,248,217],
[247,205,256,239,228,258,287,0,228,236,261,243,263,221],
[274,255,273,288,247,286,320,273,0,290,266,244,281,257],
[261,200,229,249,223,239,267,265,211,0,212,232,270,221],
[321,239,267,253,251,269,294,240,235,289,0,248,295,256],
[278,242,253,274,258,255,306,258,257,269,253,0,304,240],
[255,204,218,209,212,246,253,238,220,231,206,197,0,194],
[292,248,260,232,252,274,284,280,244,280,245,261,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,250,221,199,285,180,181,212,199,221,202,200,198],
[297,0,274,253,200,308,222,218,240,259,312,243,242,246],
[251,227,0,244,201,243,198,191,182,231,289,250,198,218],
[280,248,257,0,221,260,210,210,217,244,257,235,212,212],
[302,301,300,280,0,351,269,210,273,273,280,270,229,259],
[216,193,258,241,150,0,212,186,224,248,240,217,194,197],
[321,279,303,291,232,289,0,253,266,272,311,274,253,249],
[320,283,310,291,291,315,248,0,235,293,266,298,227,262],
[289,261,319,284,228,277,235,266,0,274,303,271,207,244],
[302,242,270,257,228,253,229,208,227,0,231,254,203,195],
[280,189,212,244,221,261,190,235,198,270,0,216,209,240],
[299,258,251,266,231,284,227,203,230,247,285,0,224,238],
[301,259,303,289,272,307,248,274,294,298,292,277,0,281],
[303,255,283,289,242,304,252,239,257,306,261,263,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,361,216,338,257,273,348,318,262,325,276,285,251],
[176,0,293,209,214,163,257,297,311,234,240,286,293,300],
[140,208,0,198,288,181,139,375,177,184,198,190,157,116],
[285,292,303,0,238,189,186,357,267,245,284,280,281,311],
[163,287,213,263,0,211,285,257,232,216,276,274,212,189],
[244,338,320,312,290,0,336,338,343,315,326,300,338,240],
[228,244,362,315,216,165,0,394,329,285,326,385,335,211],
[153,204,126,144,244,163,107,0,232,126,145,231,115,55],
[183,190,324,234,269,158,172,269,0,249,239,286,196,90],
[239,267,317,256,285,186,216,375,252,0,302,193,273,212],
[176,261,303,217,225,175,175,356,262,199,0,272,187,267],
[225,215,311,221,227,201,116,270,215,308,229,0,140,167],
[216,208,344,220,289,163,166,386,305,228,314,361,0,264],
[250,201,385,190,312,261,290,446,411,289,234,334,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,272,245,278,257,262,274,255,278,248,275,247,249],
[235,0,256,254,286,251,232,254,276,223,214,268,272,244],
[229,245,0,253,278,217,250,282,245,225,244,241,219,256],
[256,247,248,0,269,242,269,236,260,247,209,256,267,234],
[223,215,223,232,0,225,237,230,214,233,194,249,228,222],
[244,250,284,259,276,0,273,269,275,248,237,284,280,286],
[239,269,251,232,264,228,0,272,230,267,214,249,262,241],
[227,247,219,265,271,232,229,0,257,240,226,259,244,285],
[246,225,256,241,287,226,271,244,0,231,269,274,260,247],
[223,278,276,254,268,253,234,261,270,0,241,276,264,253],
[253,287,257,292,307,264,287,275,232,260,0,272,236,261],
[226,233,260,245,252,217,252,242,227,225,229,0,249,243],
[254,229,282,234,273,221,239,257,241,237,265,252,0,263],
[252,257,245,267,279,215,260,216,254,248,240,258,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,232,245,235,248,238,240,231,220,239,230,236,209],
[258,0,225,242,265,272,256,251,251,239,252,251,249,242],
[269,276,0,257,259,271,259,256,263,237,251,245,267,249],
[256,259,244,0,251,278,266,245,253,243,240,242,261,213],
[266,236,242,250,0,262,255,256,245,251,225,231,236,249],
[253,229,230,223,239,0,250,228,238,225,241,232,242,223],
[263,245,242,235,246,251,0,250,244,231,234,231,241,215],
[261,250,245,256,245,273,251,0,251,245,237,248,250,238],
[270,250,238,248,256,263,257,250,0,244,244,246,247,221],
[281,262,264,258,250,276,270,256,257,0,259,259,266,251],
[262,249,250,261,276,260,267,264,257,242,0,242,249,244],
[271,250,256,259,270,269,270,253,255,242,259,0,241,245],
[265,252,234,240,265,259,260,251,254,235,252,260,0,236],
[292,259,252,288,252,278,286,263,280,250,257,256,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,251,254,233,268,221,230,222,237,231,238,233,245],
[275,0,252,247,232,266,224,256,230,234,264,274,245,260],
[250,249,0,248,252,281,233,244,225,260,269,268,251,237],
[247,254,253,0,241,259,234,233,221,249,242,238,244,254],
[268,269,249,260,0,295,232,244,225,263,280,261,273,236],
[233,235,220,242,206,0,229,227,204,225,230,242,235,241],
[280,277,268,267,269,272,0,259,247,268,251,245,278,279],
[271,245,257,268,257,274,242,0,244,259,244,264,250,257],
[279,271,276,280,276,297,254,257,0,264,244,256,276,265],
[264,267,241,252,238,276,233,242,237,0,259,267,257,256],
[270,237,232,259,221,271,250,257,257,242,0,265,250,256],
[263,227,233,263,240,259,256,237,245,234,236,0,257,245],
[268,256,250,257,228,266,223,251,225,244,251,244,0,261],
[256,241,264,247,265,260,222,244,236,245,245,256,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,243,249,232,269,267,260,253,262,248,256,255,271],
[241,0,246,244,243,243,242,258,242,245,233,248,248,242],
[258,255,0,258,250,265,257,268,231,235,243,240,240,254],
[252,257,243,0,242,258,247,263,238,255,255,260,249,264],
[269,258,251,259,0,270,257,270,236,262,257,254,261,261],
[232,258,236,243,231,0,248,234,232,228,241,239,229,260],
[234,259,244,254,244,253,0,262,243,251,246,260,256,266],
[241,243,233,238,231,267,239,0,225,232,243,236,245,252],
[248,259,270,263,265,269,258,276,0,265,254,254,255,254],
[239,256,266,246,239,273,250,269,236,0,253,250,243,269],
[253,268,258,246,244,260,255,258,247,248,0,243,251,263],
[245,253,261,241,247,262,241,265,247,251,258,0,244,261],
[246,253,261,252,240,272,245,256,246,258,250,257,0,257],
[230,259,247,237,240,241,235,249,247,232,238,240,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,257,258,258,250,257,255,263,254,242,254,258,262],
[247,0,257,245,235,238,238,258,248,255,252,250,248,249],
[244,244,0,238,240,251,253,253,250,255,238,251,242,249],
[243,256,263,0,245,257,266,267,252,255,249,252,239,261],
[243,266,261,256,0,252,248,238,258,248,242,251,250,258],
[251,263,250,244,249,0,246,241,261,238,237,239,243,250],
[244,263,248,235,253,255,0,244,259,247,232,244,253,271],
[246,243,248,234,263,260,257,0,247,239,247,240,254,254],
[238,253,251,249,243,240,242,254,0,247,245,244,240,254],
[247,246,246,246,253,263,254,262,254,0,238,251,250,264],
[259,249,263,252,259,264,269,254,256,263,0,272,261,263],
[247,251,250,249,250,262,257,261,257,250,229,0,249,258],
[243,253,259,262,251,258,248,247,261,251,240,252,0,256],
[239,252,252,240,243,251,230,247,247,237,238,243,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,233,237,242,251,248,241,233,212,236,242,232,243],
[241,0,244,259,245,246,240,234,256,227,247,257,233,242],
[268,257,0,241,240,252,252,241,233,250,236,248,244,248],
[264,242,260,0,243,251,252,240,226,249,235,240,241,226],
[259,256,261,258,0,254,271,261,248,241,256,254,250,244],
[250,255,249,250,247,0,247,226,234,237,248,242,223,231],
[253,261,249,249,230,254,0,240,237,236,227,254,243,238],
[260,267,260,261,240,275,261,0,233,247,257,248,266,245],
[268,245,268,275,253,267,264,268,0,258,249,244,247,233],
[289,274,251,252,260,264,265,254,243,0,252,261,240,246],
[265,254,265,266,245,253,274,244,252,249,0,249,241,249],
[259,244,253,261,247,259,247,253,257,240,252,0,242,255],
[269,268,257,260,251,278,258,235,254,261,260,259,0,233],
[258,259,253,275,257,270,263,256,268,255,252,246,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,260,252,246,252,235,250,260,263,244,251,252,239],
[249,0,237,232,252,233,229,225,244,239,232,234,243,249],
[241,264,0,233,244,248,242,242,254,267,240,232,257,255],
[249,269,268,0,234,260,251,254,255,246,255,259,260,262],
[255,249,257,267,0,267,259,233,260,267,257,261,276,271],
[249,268,253,241,234,0,247,248,247,258,252,241,256,250],
[266,272,259,250,242,254,0,242,262,268,266,260,254,261],
[251,276,259,247,268,253,259,0,256,285,252,261,279,266],
[241,257,247,246,241,254,239,245,0,261,238,237,262,253],
[238,262,234,255,234,243,233,216,240,0,249,233,259,248],
[257,269,261,246,244,249,235,249,263,252,0,238,262,244],
[250,267,269,242,240,260,241,240,264,268,263,0,266,250],
[249,258,244,241,225,245,247,222,239,242,239,235,0,256],
[262,252,246,239,230,251,240,235,248,253,257,251,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,242,251,253,270,260,254,254,272,241,273,245,271],
[252,0,232,260,271,269,261,226,254,240,249,253,262,281],
[259,269,0,279,242,261,258,248,233,258,245,240,253,260],
[250,241,222,0,249,267,250,228,248,242,233,235,244,262],
[248,230,259,252,0,270,230,227,236,252,246,257,242,252],
[231,232,240,234,231,0,249,253,260,257,250,238,239,248],
[241,240,243,251,271,252,0,228,247,244,233,247,251,240],
[247,275,253,273,274,248,273,0,236,232,256,274,264,262],
[247,247,268,253,265,241,254,265,0,256,252,256,249,281],
[229,261,243,259,249,244,257,269,245,0,260,272,235,254],
[260,252,256,268,255,251,268,245,249,241,0,259,250,264],
[228,248,261,266,244,263,254,227,245,229,242,0,220,231],
[256,239,248,257,259,262,250,237,252,266,251,281,0,265],
[230,220,241,239,249,253,261,239,220,247,237,270,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,248,247,257,246,257,233,219,235,236,243,270,250],
[247,0,265,267,254,252,257,257,254,258,237,259,264,237],
[253,236,0,255,251,264,253,254,250,243,249,248,270,252],
[254,234,246,0,241,241,242,232,237,242,229,240,249,236],
[244,247,250,260,0,256,250,249,232,254,243,245,264,252],
[255,249,237,260,245,0,246,248,247,242,246,254,266,225],
[244,244,248,259,251,255,0,235,225,233,251,264,254,236],
[268,244,247,269,252,253,266,0,238,248,232,259,263,246],
[282,247,251,264,269,254,276,263,0,267,261,265,283,251],
[266,243,258,259,247,259,268,253,234,0,237,248,252,261],
[265,264,252,272,258,255,250,269,240,264,0,259,269,246],
[258,242,253,261,256,247,237,242,236,253,242,0,248,231],
[231,237,231,252,237,235,247,238,218,249,232,253,0,248],
[251,264,249,265,249,276,265,255,250,240,255,270,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,200,210,247,182,209,259,280,224,244,189,285,236],
[266,0,240,153,265,229,227,250,240,266,248,247,293,262],
[301,261,0,214,299,273,247,316,230,223,308,282,304,269],
[291,348,287,0,288,229,255,300,251,284,285,260,307,279],
[254,236,202,213,0,169,279,216,224,212,256,191,285,270],
[319,272,228,272,332,0,254,327,284,272,317,277,350,272],
[292,274,254,246,222,247,0,294,267,261,223,195,312,264],
[242,251,185,201,285,174,207,0,204,217,241,165,255,203],
[221,261,271,250,277,217,234,297,0,283,256,216,313,248],
[277,235,278,217,289,229,240,284,218,0,244,209,270,225],
[257,253,193,216,245,184,278,260,245,257,0,193,280,182],
[312,254,219,241,310,224,306,336,285,292,308,0,365,252],
[216,208,197,194,216,151,189,246,188,231,221,136,0,179],
[265,239,232,222,231,229,237,298,253,276,319,249,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,251,243,243,240,239,258,279,235,231,246,246,260],
[242,0,236,252,257,243,243,261,247,240,261,259,254,246],
[250,265,0,274,254,260,248,257,268,253,252,269,277,270],
[258,249,227,0,240,239,260,256,248,239,257,244,244,256],
[258,244,247,261,0,268,246,277,262,265,274,255,257,277],
[261,258,241,262,233,0,253,245,247,243,257,258,246,250],
[262,258,253,241,255,248,0,250,270,249,256,267,255,264],
[243,240,244,245,224,256,251,0,244,237,256,245,243,259],
[222,254,233,253,239,254,231,257,0,220,251,232,226,252],
[266,261,248,262,236,258,252,264,281,0,264,260,253,250],
[270,240,249,244,227,244,245,245,250,237,0,246,254,249],
[255,242,232,257,246,243,234,256,269,241,255,0,256,255],
[255,247,224,257,244,255,246,258,275,248,247,245,0,263],
[241,255,231,245,224,251,237,242,249,251,252,246,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,282,274,263,275,248,268,279,269,257,268,280,251],
[242,0,290,263,252,289,251,259,261,269,256,249,280,245],
[219,211,0,245,248,269,218,244,230,234,229,238,236,222],
[227,238,256,0,222,266,246,235,237,256,230,230,277,235],
[238,249,253,279,0,253,244,234,258,246,239,246,280,224],
[226,212,232,235,248,0,216,218,219,228,232,216,242,209],
[253,250,283,255,257,285,0,247,255,257,267,270,242,234],
[233,242,257,266,267,283,254,0,254,260,230,249,261,247],
[222,240,271,264,243,282,246,247,0,264,253,269,289,231],
[232,232,267,245,255,273,244,241,237,0,243,247,272,238],
[244,245,272,271,262,269,234,271,248,258,0,243,268,255],
[233,252,263,271,255,285,231,252,232,254,258,0,254,245],
[221,221,265,224,221,259,259,240,212,229,233,247,0,248],
[250,256,279,266,277,292,267,254,270,263,246,256,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,244,264,243,267,257,260,269,257,252,259,269,248],
[252,0,243,259,264,251,239,251,240,255,242,256,279,261],
[257,258,0,273,269,282,245,268,261,276,254,263,270,272],
[237,242,228,0,229,254,245,237,249,236,228,244,265,256],
[258,237,232,272,0,262,253,252,253,244,255,268,267,259],
[234,250,219,247,239,0,250,256,264,247,234,259,267,234],
[244,262,256,256,248,251,0,265,258,265,223,264,276,260],
[241,250,233,264,249,245,236,0,255,261,230,280,257,267],
[232,261,240,252,248,237,243,246,0,253,237,263,252,237],
[244,246,225,265,257,254,236,240,248,0,235,241,259,240],
[249,259,247,273,246,267,278,271,264,266,0,278,276,261],
[242,245,238,257,233,242,237,221,238,260,223,0,250,241],
[232,222,231,236,234,234,225,244,249,242,225,251,0,260],
[253,240,229,245,242,267,241,234,264,261,240,260,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,64,200,305,343,295,125,188,152,117,287,295,242],
[211,0,143,213,193,200,143,114,188,99,0,252,339,134],
[437,358,0,376,338,376,369,389,328,275,214,384,418,371],
[301,288,125,0,191,341,257,222,161,301,176,287,354,301],
[196,308,163,310,0,361,181,225,188,196,135,422,278,260],
[158,301,125,160,140,0,222,61,158,275,140,287,357,339],
[206,358,132,244,320,279,0,219,135,214,176,241,304,249],
[376,387,112,279,276,440,282,0,315,297,262,226,405,326],
[313,313,173,340,313,343,366,186,0,290,127,287,404,290],
[349,402,226,200,305,226,287,204,211,0,48,287,418,264],
[384,501,287,325,366,361,325,239,374,453,0,287,453,422],
[214,249,117,214,79,214,260,275,214,214,214,0,296,310],
[206,162,83,147,223,144,197,96,97,83,48,205,0,144],
[259,367,130,200,241,162,252,175,211,237,79,191,357,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,246,251,234,257,255,274,284,238,273,259,265,260],
[248,0,278,241,236,245,268,252,282,260,263,259,248,263],
[255,223,0,230,213,233,258,253,264,244,257,261,249,258],
[250,260,271,0,239,249,277,270,290,241,266,264,254,255],
[267,265,288,262,0,250,262,278,281,280,271,287,275,288],
[244,256,268,252,251,0,262,280,287,250,271,258,284,278],
[246,233,243,224,239,239,0,252,258,230,254,250,252,250],
[227,249,248,231,223,221,249,0,263,223,262,251,260,271],
[217,219,237,211,220,214,243,238,0,231,242,260,241,238],
[263,241,257,260,221,251,271,278,270,0,267,278,264,267],
[228,238,244,235,230,230,247,239,259,234,0,252,265,259],
[242,242,240,237,214,243,251,250,241,223,249,0,243,250],
[236,253,252,247,226,217,249,241,260,237,236,258,0,243],
[241,238,243,246,213,223,251,230,263,234,242,251,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,215,183,249,229,272,195,151,184,230,197,270,147],
[278,0,241,285,296,267,314,223,183,273,281,230,271,199],
[286,260,0,241,301,309,267,249,198,274,248,286,260,202],
[318,216,260,0,297,285,306,213,199,257,273,237,274,219],
[252,205,200,204,0,208,261,215,117,210,290,183,225,173],
[272,234,192,216,293,0,301,232,170,211,247,157,223,111],
[229,187,234,195,240,200,0,209,175,226,243,191,215,141],
[306,278,252,288,286,269,292,0,173,258,304,241,301,170],
[350,318,303,302,384,331,326,328,0,280,325,250,302,254],
[317,228,227,244,291,290,275,243,221,0,266,268,273,195],
[271,220,253,228,211,254,258,197,176,235,0,207,241,204],
[304,271,215,264,318,344,310,260,251,233,294,0,250,236],
[231,230,241,227,276,278,286,200,199,228,260,251,0,190],
[354,302,299,282,328,390,360,331,247,306,297,265,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,262,259,279,279,279,223,279,217,269,287,311,288],
[241,0,249,260,288,267,259,243,243,221,219,269,279,269],
[239,252,0,261,290,257,289,238,274,251,255,291,284,275],
[242,241,240,0,276,220,259,227,220,225,233,244,263,250],
[222,213,211,225,0,259,286,198,248,201,234,258,263,217],
[222,234,244,281,242,0,240,236,251,214,233,276,244,248],
[222,242,212,242,215,261,0,197,244,199,196,236,244,258],
[278,258,263,274,303,265,304,0,296,248,272,277,290,274],
[222,258,227,281,253,250,257,205,0,204,203,263,286,268],
[284,280,250,276,300,287,302,253,297,0,259,326,300,286],
[232,282,246,268,267,268,305,229,298,242,0,261,288,256],
[214,232,210,257,243,225,265,224,238,175,240,0,278,233],
[190,222,217,238,238,257,257,211,215,201,213,223,0,264],
[213,232,226,251,284,253,243,227,233,215,245,268,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,254,255,229,278,228,239,251,276,273,279,216,254],
[274,0,230,246,222,269,217,235,251,252,255,277,233,229],
[247,271,0,266,243,281,233,234,253,259,263,280,248,244],
[246,255,235,0,226,252,250,224,261,263,265,249,242,234],
[272,279,258,275,0,274,242,268,253,291,303,299,283,258],
[223,232,220,249,227,0,223,233,211,253,266,255,223,214],
[273,284,268,251,259,278,0,273,238,286,287,304,273,247],
[262,266,267,277,233,268,228,0,269,291,253,291,241,258],
[250,250,248,240,248,290,263,232,0,271,246,266,251,222],
[225,249,242,238,210,248,215,210,230,0,230,237,241,216],
[228,246,238,236,198,235,214,248,255,271,0,269,231,238],
[222,224,221,252,202,246,197,210,235,264,232,0,219,241],
[285,268,253,259,218,278,228,260,250,260,270,282,0,229],
[247,272,257,267,243,287,254,243,279,285,263,260,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,213,235,208,199,209,208,195,234,181,176,200,231],
[274,0,235,231,248,231,238,230,225,261,241,219,225,249],
[288,266,0,264,266,260,250,291,253,316,281,227,249,310],
[266,270,237,0,276,234,260,250,240,287,260,247,254,266],
[293,253,235,225,0,229,258,285,232,285,239,227,232,283],
[302,270,241,267,272,0,289,302,249,293,269,256,268,288],
[292,263,251,241,243,212,0,278,200,276,231,228,231,303],
[293,271,210,251,216,199,223,0,248,287,264,226,239,271],
[306,276,248,261,269,252,301,253,0,284,268,253,253,283],
[267,240,185,214,216,208,225,214,217,0,218,189,205,252],
[320,260,220,241,262,232,270,237,233,283,0,219,240,267],
[325,282,274,254,274,245,273,275,248,312,282,0,261,317],
[301,276,252,247,269,233,270,262,248,296,261,240,0,289],
[270,252,191,235,218,213,198,230,218,249,234,184,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,218,245,185,272,278,270,277,195,247,293,257,215],
[236,0,243,259,223,275,304,271,294,215,272,293,240,242],
[283,258,0,338,250,283,286,335,297,214,266,281,244,244],
[256,242,163,0,204,225,262,265,261,211,237,250,200,231],
[316,278,251,297,0,298,302,260,271,226,276,272,281,216],
[229,226,218,276,203,0,302,271,236,223,213,228,255,187],
[223,197,215,239,199,199,0,257,219,241,222,256,238,176],
[231,230,166,236,241,230,244,0,241,258,230,276,216,195],
[224,207,204,240,230,265,282,260,0,251,232,282,218,199],
[306,286,287,290,275,278,260,243,250,0,246,289,274,251],
[254,229,235,264,225,288,279,271,269,255,0,246,217,220],
[208,208,220,251,229,273,245,225,219,212,255,0,211,221],
[244,261,257,301,220,246,263,285,283,227,284,290,0,225],
[286,259,257,270,285,314,325,306,302,250,281,280,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,264,246,246,257,239,264,262,224,249,258,236,240],
[250,0,238,244,252,254,224,237,218,242,263,238,251,251],
[237,263,0,264,261,261,259,277,257,272,272,265,278,245],
[255,257,237,0,267,255,239,250,233,227,264,247,264,227],
[255,249,240,234,0,258,247,265,261,247,269,278,235,229],
[244,247,240,246,243,0,225,244,241,248,233,269,244,217],
[262,277,242,262,254,276,0,266,246,264,277,271,262,258],
[237,264,224,251,236,257,235,0,231,244,249,251,251,232],
[239,283,244,268,240,260,255,270,0,249,260,262,273,230],
[277,259,229,274,254,253,237,257,252,0,249,289,270,251],
[252,238,229,237,232,268,224,252,241,252,0,235,272,222],
[243,263,236,254,223,232,230,250,239,212,266,0,245,216],
[265,250,223,237,266,257,239,250,228,231,229,256,0,216],
[261,250,256,274,272,284,243,269,271,250,279,285,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,237,240,263,239,241,260,270,255,225,270,233,243],
[238,0,261,279,254,224,264,269,254,245,254,267,250,228],
[264,240,0,264,236,210,246,230,245,263,239,241,230,238],
[261,222,237,0,231,212,222,232,247,191,201,239,213,213],
[238,247,265,270,0,272,267,265,276,251,242,249,258,238],
[262,277,291,289,229,0,257,245,266,260,232,221,225,244],
[260,237,255,279,234,244,0,239,253,275,234,236,238,257],
[241,232,271,269,236,256,262,0,279,274,244,235,226,185],
[231,247,256,254,225,235,248,222,0,247,237,209,226,235],
[246,256,238,310,250,241,226,227,254,0,260,252,231,261],
[276,247,262,300,259,269,267,257,264,241,0,253,239,233],
[231,234,260,262,252,280,265,266,292,249,248,0,245,249],
[268,251,271,288,243,276,263,275,275,270,262,256,0,256],
[258,273,263,288,263,257,244,316,266,240,268,252,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,270,236,269,259,253,234,262,255,254,240,244,259],
[235,0,266,263,247,250,261,264,247,249,239,246,232,262],
[231,235,0,223,235,221,242,221,226,204,217,224,226,232],
[265,238,278,0,268,266,244,240,274,249,245,259,215,267],
[232,254,266,233,0,254,263,226,237,235,254,263,231,255],
[242,251,280,235,247,0,250,235,246,245,244,263,219,265],
[248,240,259,257,238,251,0,233,223,239,235,247,247,244],
[267,237,280,261,275,266,268,0,269,253,252,278,260,271],
[239,254,275,227,264,255,278,232,0,249,237,237,242,252],
[246,252,297,252,266,256,262,248,252,0,258,256,230,254],
[247,262,284,256,247,257,266,249,264,243,0,251,225,265],
[261,255,277,242,238,238,254,223,264,245,250,0,253,261],
[257,269,275,286,270,282,254,241,259,271,276,248,0,292],
[242,239,269,234,246,236,257,230,249,247,236,240,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,218,278,239,247,218,228,248,259,251,232,225,259],
[233,0,265,252,254,246,214,247,255,268,259,235,275,223],
[283,236,0,280,289,270,230,268,286,305,267,237,292,210],
[223,249,221,0,231,213,197,233,228,233,257,249,241,244],
[262,247,212,270,0,263,198,247,230,250,247,219,255,219],
[254,255,231,288,238,0,230,261,240,272,255,274,273,246],
[283,287,271,304,303,271,0,283,255,281,270,253,284,246],
[273,254,233,268,254,240,218,0,217,226,240,239,247,225],
[253,246,215,273,271,261,246,284,0,246,269,253,265,256],
[242,233,196,268,251,229,220,275,255,0,229,247,235,225],
[250,242,234,244,254,246,231,261,232,272,0,209,267,241],
[269,266,264,252,282,227,248,262,248,254,292,0,295,264],
[276,226,209,260,246,228,217,254,236,266,234,206,0,231],
[242,278,291,257,282,255,255,276,245,276,260,237,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,264,253,277,263,253,264,252,256,272,248,256,264],
[260,0,267,244,272,260,259,265,257,260,259,250,256,267],
[237,234,0,246,260,257,266,255,236,255,263,242,244,250],
[248,257,255,0,264,265,256,265,247,262,259,247,253,260],
[224,229,241,237,0,242,229,245,239,237,260,231,232,259],
[238,241,244,236,259,0,235,245,228,241,249,236,245,240],
[248,242,235,245,272,266,0,253,241,251,275,250,263,266],
[237,236,246,236,256,256,248,0,242,264,265,249,258,239],
[249,244,265,254,262,273,260,259,0,263,259,251,264,246],
[245,241,246,239,264,260,250,237,238,0,254,246,242,252],
[229,242,238,242,241,252,226,236,242,247,0,233,246,243],
[253,251,259,254,270,265,251,252,250,255,268,0,241,263],
[245,245,257,248,269,256,238,243,237,259,255,260,0,247],
[237,234,251,241,242,261,235,262,255,249,258,238,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,242,254,259,244,266,271,262,269,261,257,265,249],
[234,0,218,228,233,228,257,245,238,258,257,247,238,241],
[259,283,0,257,256,260,279,258,255,273,250,279,268,264],
[247,273,244,0,256,261,271,277,258,282,262,256,267,260],
[242,268,245,245,0,244,277,263,244,251,251,270,237,247],
[257,273,241,240,257,0,254,253,241,249,257,265,266,255],
[235,244,222,230,224,247,0,253,241,258,229,246,246,256],
[230,256,243,224,238,248,248,0,237,238,241,248,234,239],
[239,263,246,243,257,260,260,264,0,270,250,266,260,269],
[232,243,228,219,250,252,243,263,231,0,245,247,247,243],
[240,244,251,239,250,244,272,260,251,256,0,259,240,250],
[244,254,222,245,231,236,255,253,235,254,242,0,247,242],
[236,263,233,234,264,235,255,267,241,254,261,254,0,252],
[252,260,237,241,254,246,245,262,232,258,251,259,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,212,253,260,235,248,252,224,245,253,258,244,248],
[273,0,225,270,272,221,238,258,241,250,241,277,256,250],
[289,276,0,276,283,263,260,257,236,268,252,282,258,266],
[248,231,225,0,266,223,259,246,229,255,240,238,258,240],
[241,229,218,235,0,224,215,229,228,238,245,239,223,224],
[266,280,238,278,277,0,264,273,258,271,261,262,273,254],
[253,263,241,242,286,237,0,264,217,260,273,254,235,243],
[249,243,244,255,272,228,237,0,239,251,235,235,249,246],
[277,260,265,272,273,243,284,262,0,282,258,265,263,259],
[256,251,233,246,263,230,241,250,219,0,251,252,246,239],
[248,260,249,261,256,240,228,266,243,250,0,258,253,256],
[243,224,219,263,262,239,247,266,236,249,243,0,237,261],
[257,245,243,243,278,228,266,252,238,255,248,264,0,249],
[253,251,235,261,277,247,258,255,242,262,245,240,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,276,256,253,263,277,270,255,242,267,252,271,249],
[223,0,250,239,243,239,232,224,245,236,247,223,245,236],
[225,251,0,249,240,252,254,263,243,242,250,238,241,239],
[245,262,252,0,234,249,246,255,254,230,246,244,251,246],
[248,258,261,267,0,243,260,255,258,250,242,235,266,248],
[238,262,249,252,258,0,252,248,253,225,251,235,240,242],
[224,269,247,255,241,249,0,253,242,237,244,239,226,248],
[231,277,238,246,246,253,248,0,254,242,249,253,244,241],
[246,256,258,247,243,248,259,247,0,242,252,242,246,242],
[259,265,259,271,251,276,264,259,259,0,260,263,256,245],
[234,254,251,255,259,250,257,252,249,241,0,243,254,257],
[249,278,263,257,266,266,262,248,259,238,258,0,259,253],
[230,256,260,250,235,261,275,257,255,245,247,242,0,245],
[252,265,262,255,253,259,253,260,259,256,244,248,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,265,251,243,236,242,265,264,247,254,267,234,251],
[241,0,244,259,239,247,242,254,244,234,257,209,246,225],
[236,257,0,264,234,244,229,264,272,252,262,240,244,223],
[250,242,237,0,239,246,249,244,257,227,268,240,244,241],
[258,262,267,262,0,246,235,262,276,260,251,246,256,247],
[265,254,257,255,255,0,249,254,255,246,270,264,244,247],
[259,259,272,252,266,252,0,273,251,231,270,264,250,233],
[236,247,237,257,239,247,228,0,260,235,264,242,247,236],
[237,257,229,244,225,246,250,241,0,219,248,235,242,225],
[254,267,249,274,241,255,270,266,282,0,257,254,278,246],
[247,244,239,233,250,231,231,237,253,244,0,235,226,230],
[234,292,261,261,255,237,237,259,266,247,266,0,255,252],
[267,255,257,257,245,257,251,254,259,223,275,246,0,232],
[250,276,278,260,254,254,268,265,276,255,271,249,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,227,276,252,266,245,278,228,259,274,234,251,268],
[235,0,252,256,235,237,254,260,252,256,262,263,256,271],
[274,249,0,228,225,250,257,264,262,264,266,257,281,292],
[225,245,273,0,235,239,258,271,237,249,244,250,254,280],
[249,266,276,266,0,266,276,284,246,252,289,267,258,284],
[235,264,251,262,235,0,263,275,252,250,273,257,228,267],
[256,247,244,243,225,238,0,266,261,277,259,246,233,282],
[223,241,237,230,217,226,235,0,225,240,238,206,220,255],
[273,249,239,264,255,249,240,276,0,237,263,265,270,281],
[242,245,237,252,249,251,224,261,264,0,256,247,243,283],
[227,239,235,257,212,228,242,263,238,245,0,238,235,259],
[267,238,244,251,234,244,255,295,236,254,263,0,261,281],
[250,245,220,247,243,273,268,281,231,258,266,240,0,297],
[233,230,209,221,217,234,219,246,220,218,242,220,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,240,271,259,250,249,245,248,251,261,250,244,251],
[251,0,258,257,249,268,241,248,252,249,260,254,260,249],
[261,243,0,263,261,253,240,241,251,246,246,250,262,235],
[230,244,238,0,248,239,237,242,237,235,237,226,235,228],
[242,252,240,253,0,241,256,231,240,242,246,245,249,243],
[251,233,248,262,260,0,251,254,238,241,251,242,254,254],
[252,260,261,264,245,250,0,250,257,249,268,236,257,241],
[256,253,260,259,270,247,251,0,259,253,257,242,245,251],
[253,249,250,264,261,263,244,242,0,252,262,244,269,234],
[250,252,255,266,259,260,252,248,249,0,255,245,262,233],
[240,241,255,264,255,250,233,244,239,246,0,249,255,241],
[251,247,251,275,256,259,265,259,257,256,252,0,268,254],
[257,241,239,266,252,247,244,256,232,239,246,233,0,246],
[250,252,266,273,258,247,260,250,267,268,260,247,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,231,227,296,269,256,267,281,250,265,295,251,194],
[284,0,256,213,312,290,271,286,301,297,305,302,284,263],
[270,245,0,254,274,265,234,255,228,246,238,274,223,225],
[274,288,247,0,276,327,270,294,303,271,293,324,238,240],
[205,189,227,225,0,243,222,204,282,249,270,279,243,233],
[232,211,236,174,258,0,230,236,287,254,225,286,217,204],
[245,230,267,231,279,271,0,256,288,275,264,294,218,254],
[234,215,246,207,297,265,245,0,286,207,246,303,231,229],
[220,200,273,198,219,214,213,215,0,222,239,273,249,192],
[251,204,255,230,252,247,226,294,279,0,271,295,239,233],
[236,196,263,208,231,276,237,255,262,230,0,274,213,213],
[206,199,227,177,222,215,207,198,228,206,227,0,202,182],
[250,217,278,263,258,284,283,270,252,262,288,299,0,207],
[307,238,276,261,268,297,247,272,309,268,288,319,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,263,248,254,267,276,258,269,281,261,251,253,268],
[239,0,255,227,257,265,253,257,273,257,255,247,239,267],
[238,246,0,254,255,260,266,265,262,275,259,258,276,260],
[253,274,247,0,253,252,286,262,281,270,251,275,268,261],
[247,244,246,248,0,263,268,267,281,269,252,260,244,272],
[234,236,241,249,238,0,251,259,272,237,263,238,243,266],
[225,248,235,215,233,250,0,256,264,256,241,241,242,236],
[243,244,236,239,234,242,245,0,259,268,234,243,238,247],
[232,228,239,220,220,229,237,242,0,242,240,243,243,233],
[220,244,226,231,232,264,245,233,259,0,251,246,255,246],
[240,246,242,250,249,238,260,267,261,250,0,248,251,270],
[250,254,243,226,241,263,260,258,258,255,253,0,266,249],
[248,262,225,233,257,258,259,263,258,246,250,235,0,254],
[233,234,241,240,229,235,265,254,268,255,231,252,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,268,271,237,246,272,261,247,254,250,254,254,258],
[243,0,262,280,246,248,277,266,247,254,243,243,243,252],
[233,239,0,266,242,239,240,242,241,239,225,234,244,224],
[230,221,235,0,227,238,240,246,222,234,220,235,224,238],
[264,255,259,274,0,256,246,265,243,247,256,247,249,255],
[255,253,262,263,245,0,263,265,253,247,248,252,255,248],
[229,224,261,261,255,238,0,247,255,235,232,240,237,245],
[240,235,259,255,236,236,254,0,242,253,231,242,245,258],
[254,254,260,279,258,248,246,259,0,255,245,264,234,246],
[247,247,262,267,254,254,266,248,246,0,259,267,242,249],
[251,258,276,281,245,253,269,270,256,242,0,248,249,256],
[247,258,267,266,254,249,261,259,237,234,253,0,259,248],
[247,258,257,277,252,246,264,256,267,259,252,242,0,255],
[243,249,277,263,246,253,256,243,255,252,245,253,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,248,261,262,253,235,262,249,248,234,237,248,249],
[259,0,241,256,249,261,241,246,244,257,251,242,241,243],
[253,260,0,267,258,271,245,236,250,250,249,250,239,260],
[240,245,234,0,255,248,239,246,229,237,230,235,236,244],
[239,252,243,246,0,265,249,254,230,258,254,243,245,249],
[248,240,230,253,236,0,222,235,225,230,231,247,226,235],
[266,260,256,262,252,279,0,254,248,267,259,259,262,271],
[239,255,265,255,247,266,247,0,238,243,254,251,242,256],
[252,257,251,272,271,276,253,263,0,262,248,258,260,258],
[253,244,251,264,243,271,234,258,239,0,260,238,259,247],
[267,250,252,271,247,270,242,247,253,241,0,254,252,261],
[264,259,251,266,258,254,242,250,243,263,247,0,251,246],
[253,260,262,265,256,275,239,259,241,242,249,250,0,255],
[252,258,241,257,252,266,230,245,243,254,240,255,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,264,180,212,210,210,175,239,186,244,176,203,223],
[227,0,281,236,251,294,272,229,191,257,255,273,242,284],
[237,220,0,220,228,280,210,259,213,203,233,206,244,226],
[321,265,281,0,285,240,272,272,251,270,238,182,265,255],
[289,250,273,216,0,271,274,244,237,214,284,195,220,277],
[291,207,221,261,230,0,221,180,237,263,183,171,193,203],
[291,229,291,229,227,280,0,241,197,224,271,228,214,254],
[326,272,242,229,257,321,260,0,224,281,248,248,226,302],
[262,310,288,250,264,264,304,277,0,227,296,234,250,306],
[315,244,298,231,287,238,277,220,274,0,233,276,250,258],
[257,246,268,263,217,318,230,253,205,268,0,260,213,252],
[325,228,295,319,306,330,273,253,267,225,241,0,280,292],
[298,259,257,236,281,308,287,275,251,251,288,221,0,277],
[278,217,275,246,224,298,247,199,195,243,249,209,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,241,238,240,224,254,244,247,246,237,239,237,242],
[269,0,257,261,242,236,247,251,252,260,260,262,243,245],
[260,244,0,252,248,265,261,243,258,249,255,259,261,269],
[263,240,249,0,256,244,252,249,246,235,240,255,242,268],
[261,259,253,245,0,259,247,258,255,257,238,254,253,261],
[277,265,236,257,242,0,250,271,257,262,249,264,258,245],
[247,254,240,249,254,251,0,254,246,259,244,238,255,255],
[257,250,258,252,243,230,247,0,250,247,253,258,253,271],
[254,249,243,255,246,244,255,251,0,264,238,254,245,247],
[255,241,252,266,244,239,242,254,237,0,250,256,241,262],
[264,241,246,261,263,252,257,248,263,251,0,260,250,261],
[262,239,242,246,247,237,263,243,247,245,241,0,257,251],
[264,258,240,259,248,243,246,248,256,260,251,244,0,240],
[259,256,232,233,240,256,246,230,254,239,240,250,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,250,276,275,270,269,245,253,258,266,272,262,249],
[241,0,255,276,256,267,254,243,242,254,267,281,259,247],
[251,246,0,261,264,244,260,242,248,254,258,264,270,243],
[225,225,240,0,238,252,247,239,232,252,245,264,258,229],
[226,245,237,263,0,269,253,233,244,236,258,264,253,249],
[231,234,257,249,232,0,252,236,238,254,253,261,257,250],
[232,247,241,254,248,249,0,244,249,263,261,272,282,246],
[256,258,259,262,268,265,257,0,247,269,284,274,263,257],
[248,259,253,269,257,263,252,254,0,260,253,260,268,255],
[243,247,247,249,265,247,238,232,241,0,248,267,260,234],
[235,234,243,256,243,248,240,217,248,253,0,261,247,236],
[229,220,237,237,237,240,229,227,241,234,240,0,244,221],
[239,242,231,243,248,244,219,238,233,241,254,257,0,228],
[252,254,258,272,252,251,255,244,246,267,265,280,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,230,217,245,253,251,273,240,245,247,279,218,251],
[240,0,236,220,241,235,247,242,228,249,239,230,220,225],
[271,265,0,262,266,252,257,232,268,254,262,277,238,258],
[284,281,239,0,256,262,261,278,273,275,266,281,260,259],
[256,260,235,245,0,245,241,265,236,248,257,245,260,250],
[248,266,249,239,256,0,226,255,274,252,263,261,245,250],
[250,254,244,240,260,275,0,250,255,244,254,259,253,262],
[228,259,269,223,236,246,251,0,239,225,240,257,224,237],
[261,273,233,228,265,227,246,262,0,255,237,260,240,245],
[256,252,247,226,253,249,257,276,246,0,220,243,240,268],
[254,262,239,235,244,238,247,261,264,281,0,268,243,257],
[222,271,224,220,256,240,242,244,241,258,233,0,232,236],
[283,281,263,241,241,256,248,277,261,261,258,269,0,264],
[250,276,243,242,251,251,239,264,256,233,244,265,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,175,247,208,135,109,135,156,251,190,164,249,275],
[290,0,184,207,234,194,234,182,131,180,195,155,295,233],
[326,317,0,273,327,263,252,222,268,362,255,244,349,358],
[254,294,228,0,327,247,251,292,185,336,240,156,298,309],
[293,267,174,174,0,181,245,147,89,163,173,148,237,257],
[366,307,238,254,320,0,285,233,261,393,222,179,346,274],
[392,267,249,250,256,216,0,179,241,298,194,159,314,338],
[366,319,279,209,354,268,322,0,212,247,285,211,322,317],
[345,370,233,316,412,240,260,289,0,411,321,259,385,303],
[250,321,139,165,338,108,203,254,90,0,203,114,300,238],
[311,306,246,261,328,279,307,216,180,298,0,167,271,283],
[337,346,257,345,353,322,342,290,242,387,334,0,345,357],
[252,206,152,203,264,155,187,179,116,201,230,156,0,283],
[226,268,143,192,244,227,163,184,198,263,218,144,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,246,234,235,240,234,233,234,236,252,246,238,252],
[268,0,250,243,243,258,236,243,252,259,241,255,250,251],
[255,251,0,245,224,239,256,248,240,252,262,255,232,246],
[267,258,256,0,244,240,248,253,240,260,264,262,245,251],
[266,258,277,257,0,256,257,262,254,269,266,265,237,252],
[261,243,262,261,245,0,239,241,256,256,244,256,242,250],
[267,265,245,253,244,262,0,259,247,244,264,258,254,268],
[268,258,253,248,239,260,242,0,236,250,252,261,248,264],
[267,249,261,261,247,245,254,265,0,251,252,260,248,252],
[265,242,249,241,232,245,257,251,250,0,260,250,223,240],
[249,260,239,237,235,257,237,249,249,241,0,257,233,253],
[255,246,246,239,236,245,243,240,241,251,244,0,232,256],
[263,251,269,256,264,259,247,253,253,278,268,269,0,254],
[249,250,255,250,249,251,233,237,249,261,248,245,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,254,221,368,307,375,354,433,420,420,420,488,420],
[13,0,121,166,53,147,215,53,147,187,147,13,320,13],
[247,380,0,153,287,247,335,247,393,287,380,380,420,247],
[280,335,348,0,215,280,335,267,280,320,280,280,335,267],
[133,448,214,286,0,267,335,133,280,307,267,133,375,133],
[194,354,254,221,234,0,241,221,433,368,286,299,354,113],
[126,286,166,166,166,260,0,153,260,300,126,126,420,113],
[147,448,254,234,368,280,348,0,280,433,393,393,501,260],
[68,354,108,221,221,68,241,221,0,355,354,286,354,181],
[81,314,214,181,194,133,201,68,146,0,133,133,314,113],
[81,354,121,221,234,215,375,108,147,368,0,299,488,181],
[81,488,121,221,368,202,375,108,215,368,202,0,488,315],
[13,181,81,166,126,147,81,0,147,187,13,13,0,113],
[81,488,254,234,368,388,388,241,320,388,320,186,388,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,231,238,260,223,240,241,248,251,260,250,260,257],
[268,0,250,257,260,257,250,268,250,263,263,262,266,262],
[270,251,0,255,260,251,241,228,265,242,266,256,257,271],
[263,244,246,0,252,246,250,265,274,257,269,283,261,263],
[241,241,241,249,0,244,230,238,240,255,255,251,257,250],
[278,244,250,255,257,0,230,264,253,265,273,257,266,251],
[261,251,260,251,271,271,0,249,275,258,282,274,263,270],
[260,233,273,236,263,237,252,0,262,247,273,255,251,253],
[253,251,236,227,261,248,226,239,0,262,240,250,255,252],
[250,238,259,244,246,236,243,254,239,0,263,238,234,245],
[241,238,235,232,246,228,219,228,261,238,0,251,249,261],
[251,239,245,218,250,244,227,246,251,263,250,0,251,235],
[241,235,244,240,244,235,238,250,246,267,252,250,0,250],
[244,239,230,238,251,250,231,248,249,256,240,266,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,263,260,214,257,286,239,269,255,290,260,235,257],
[241,0,255,272,236,236,253,252,261,220,232,247,268,258],
[238,246,0,247,244,263,259,227,269,228,246,261,230,223],
[241,229,254,0,226,244,263,204,249,192,231,219,242,217],
[287,265,257,275,0,278,287,266,281,236,268,255,249,254],
[244,265,238,257,223,0,258,239,267,202,258,245,272,228],
[215,248,242,238,214,243,0,252,270,218,226,234,250,233],
[262,249,274,297,235,262,249,0,275,244,264,267,275,264],
[232,240,232,252,220,234,231,226,0,218,248,228,241,237],
[246,281,273,309,265,299,283,257,283,0,273,260,269,249],
[211,269,255,270,233,243,275,237,253,228,0,249,248,232],
[241,254,240,282,246,256,267,234,273,241,252,0,274,229],
[266,233,271,259,252,229,251,226,260,232,253,227,0,252],
[244,243,278,284,247,273,268,237,264,252,269,272,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,254,270,273,247,276,265,255,255,255,275,259,253],
[253,0,246,241,241,237,278,264,267,261,269,257,270,259],
[247,255,0,252,256,232,265,275,262,225,247,254,247,237],
[231,260,249,0,257,268,274,280,268,265,259,266,260,253],
[228,260,245,244,0,255,261,255,250,261,248,240,261,251],
[254,264,269,233,246,0,254,256,260,255,239,248,258,238],
[225,223,236,227,240,247,0,234,232,237,239,235,245,220],
[236,237,226,221,246,245,267,0,242,235,258,255,245,241],
[246,234,239,233,251,241,269,259,0,240,238,239,245,245],
[246,240,276,236,240,246,264,266,261,0,269,237,265,265],
[246,232,254,242,253,262,262,243,263,232,0,247,247,241],
[226,244,247,235,261,253,266,246,262,264,254,0,252,240],
[242,231,254,241,240,243,256,256,256,236,254,249,0,246],
[248,242,264,248,250,263,281,260,256,236,260,261,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,329,221,209,246,225,201,212,287,237,320,318,286,253],
[172,0,207,189,191,206,207,219,206,201,267,193,236,200],
[280,294,0,215,212,223,228,239,273,160,272,242,237,266],
[292,312,286,0,296,288,259,247,269,256,322,285,285,245],
[255,310,289,205,0,238,209,188,257,199,264,279,222,240],
[276,295,278,213,263,0,238,219,245,196,257,299,206,256],
[300,294,273,242,292,263,0,287,252,246,309,274,283,233],
[289,282,262,254,313,282,214,0,258,233,294,277,270,267],
[214,295,228,232,244,256,249,243,0,237,268,237,253,235],
[264,300,341,245,302,305,255,268,264,0,313,306,254,271],
[181,234,229,179,237,244,192,207,233,188,0,251,239,195],
[183,308,259,216,222,202,227,224,264,195,250,0,207,199],
[215,265,264,216,279,295,218,231,248,247,262,294,0,210],
[248,301,235,256,261,245,268,234,266,230,306,302,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,240,240,249,243,244,240,237,227,240,244,254,239],
[259,0,262,266,262,246,256,252,243,253,267,263,254,264],
[261,239,0,238,247,238,243,249,238,230,243,241,231,232],
[261,235,263,0,267,251,243,254,250,240,263,269,246,254],
[252,239,254,234,0,246,253,250,253,246,262,257,250,257],
[258,255,263,250,255,0,242,247,253,233,243,265,248,250],
[257,245,258,258,248,259,0,252,251,257,259,263,250,248],
[261,249,252,247,251,254,249,0,246,240,262,262,244,253],
[264,258,263,251,248,248,250,255,0,251,253,266,258,249],
[274,248,271,261,255,268,244,261,250,0,271,268,254,250],
[261,234,258,238,239,258,242,239,248,230,0,256,239,240],
[257,238,260,232,244,236,238,239,235,233,245,0,246,239],
[247,247,270,255,251,253,251,257,243,247,262,255,0,238],
[262,237,269,247,244,251,253,248,252,251,261,262,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,236,275,243,248,261,218,197,314,221,234,228,261],
[235,0,291,299,282,262,255,256,217,326,229,291,246,280],
[265,210,0,234,279,192,268,257,310,312,247,269,234,236],
[226,202,267,0,260,218,272,238,240,326,185,274,202,204],
[258,219,222,241,0,220,256,203,207,252,152,225,188,181],
[253,239,309,283,281,0,277,275,263,350,271,235,191,340],
[240,246,233,229,245,224,0,216,280,326,173,195,197,169],
[283,245,244,263,298,226,285,0,250,263,196,229,234,207],
[304,284,191,261,294,238,221,251,0,328,256,246,198,230],
[187,175,189,175,249,151,175,238,173,0,151,178,145,196],
[280,272,254,316,349,230,328,305,245,350,0,258,231,266],
[267,210,232,227,276,266,306,272,255,323,243,0,288,243],
[273,255,267,299,313,310,304,267,303,356,270,213,0,267],
[240,221,265,297,320,161,332,294,271,305,235,258,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,281,344,227,262,293,261,270,230,311,302,320,274],
[194,0,223,230,188,217,221,264,183,246,210,302,199,272],
[220,278,0,323,263,280,242,283,276,249,288,273,269,289],
[157,271,178,0,214,218,221,277,233,218,239,231,246,225],
[274,313,238,287,0,232,250,277,247,271,276,254,266,272],
[239,284,221,283,269,0,256,270,238,264,326,287,254,265],
[208,280,259,280,251,245,0,268,219,259,299,246,275,272],
[240,237,218,224,224,231,233,0,218,263,230,221,238,232],
[231,318,225,268,254,263,282,283,0,251,289,308,322,252],
[271,255,252,283,230,237,242,238,250,0,255,254,281,268],
[190,291,213,262,225,175,202,271,212,246,0,223,249,271],
[199,199,228,270,247,214,255,280,193,247,278,0,239,247],
[181,302,232,255,235,247,226,263,179,220,252,262,0,263],
[227,229,212,276,229,236,229,269,249,233,230,254,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,267,277,267,256,286,256,246,278,228,275,256,265],
[266,0,233,269,238,253,267,252,250,260,244,263,244,241],
[234,268,0,247,256,244,254,238,233,269,252,262,269,233],
[224,232,254,0,237,219,243,228,211,263,230,261,244,234],
[234,263,245,264,0,255,253,235,251,265,237,266,244,230],
[245,248,257,282,246,0,265,252,261,287,230,242,247,265],
[215,234,247,258,248,236,0,218,237,262,235,259,249,240],
[245,249,263,273,266,249,283,0,244,267,251,289,279,262],
[255,251,268,290,250,240,264,257,0,252,268,263,268,244],
[223,241,232,238,236,214,239,234,249,0,231,229,241,232],
[273,257,249,271,264,271,266,250,233,270,0,297,258,250],
[226,238,239,240,235,259,242,212,238,272,204,0,243,229],
[245,257,232,257,257,254,252,222,233,260,243,258,0,245],
[236,260,268,267,271,236,261,239,257,269,251,272,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,239,240,246,238,235,244,238,241,239,246,260,247],
[243,0,248,252,254,236,257,237,253,243,257,266,275,255],
[262,253,0,246,270,251,252,246,247,251,265,258,274,261],
[261,249,255,0,261,243,254,234,254,255,239,248,277,257],
[255,247,231,240,0,247,233,246,246,241,246,250,261,258],
[263,265,250,258,254,0,251,245,257,255,253,256,268,261],
[266,244,249,247,268,250,0,257,259,243,253,260,269,259],
[257,264,255,267,255,256,244,0,263,249,265,275,272,260],
[263,248,254,247,255,244,242,238,0,238,251,245,251,250],
[260,258,250,246,260,246,258,252,263,0,250,255,267,260],
[262,244,236,262,255,248,248,236,250,251,0,255,265,256],
[255,235,243,253,251,245,241,226,256,246,246,0,259,250],
[241,226,227,224,240,233,232,229,250,234,236,242,0,238],
[254,246,240,244,243,240,242,241,251,241,245,251,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,261,248,265,255,270,262,254,264,268,278,267,246],
[228,0,246,269,243,240,266,264,267,264,246,284,255,263],
[240,255,0,275,259,241,277,278,239,272,248,272,281,249],
[253,232,226,0,243,225,246,256,252,251,228,258,267,239],
[236,258,242,258,0,238,262,255,254,249,235,269,278,246],
[246,261,260,276,263,0,265,268,268,253,247,276,257,261],
[231,235,224,255,239,236,0,265,262,254,259,265,258,244],
[239,237,223,245,246,233,236,0,265,233,250,266,240,235],
[247,234,262,249,247,233,239,236,0,240,217,258,249,240],
[237,237,229,250,252,248,247,268,261,0,235,270,250,267],
[233,255,253,273,266,254,242,251,284,266,0,289,261,252],
[223,217,229,243,232,225,236,235,243,231,212,0,253,242],
[234,246,220,234,223,244,243,261,252,251,240,248,0,245],
[255,238,252,262,255,240,257,266,261,234,249,259,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,240,248,243,233,244,226,251,256,254,268,245,264],
[262,0,275,257,260,247,282,256,248,263,254,285,255,257],
[261,226,0,250,247,252,240,230,253,249,271,256,255,264],
[253,244,251,0,256,244,252,245,222,267,287,263,256,255],
[258,241,254,245,0,227,237,237,245,260,276,258,248,261],
[268,254,249,257,274,0,251,269,237,263,271,263,273,285],
[257,219,261,249,264,250,0,232,248,268,268,260,257,255],
[275,245,271,256,264,232,269,0,232,260,293,278,254,252],
[250,253,248,279,256,264,253,269,0,269,278,280,275,271],
[245,238,252,234,241,238,233,241,232,0,258,263,215,238],
[247,247,230,214,225,230,233,208,223,243,0,247,232,219],
[233,216,245,238,243,238,241,223,221,238,254,0,230,229],
[256,246,246,245,253,228,244,247,226,286,269,271,0,262],
[237,244,237,246,240,216,246,249,230,263,282,272,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,321,226,199,298,274,132,274,205,167,253,266,164],
[253,0,298,246,161,224,140,222,291,227,182,279,208,157],
[180,203,0,172,123,235,208,169,266,139,152,190,176,132],
[275,255,329,0,230,258,204,236,282,239,215,195,200,130],
[302,340,378,271,0,239,261,251,254,294,237,320,324,159],
[203,277,266,243,262,0,213,152,216,246,263,331,295,262],
[227,361,293,297,240,288,0,263,286,302,170,329,257,173],
[369,279,332,265,250,349,238,0,344,249,308,325,285,234],
[227,210,235,219,247,285,215,157,0,200,220,283,198,205],
[296,274,362,262,207,255,199,252,301,0,204,304,279,173],
[334,319,349,286,264,238,331,193,281,297,0,350,330,241],
[248,222,311,306,181,170,172,176,218,197,151,0,230,117],
[235,293,325,301,177,206,244,216,303,222,171,271,0,120],
[337,344,369,371,342,239,328,267,296,328,260,384,381,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,255,257,247,259,267,261,256,253,246,251,249,267],
[239,0,242,252,230,250,246,247,251,257,255,242,239,254],
[246,259,0,266,251,243,250,242,253,258,255,242,252,260],
[244,249,235,0,218,237,240,256,260,259,232,236,244,232],
[254,271,250,283,0,265,268,269,258,270,250,253,262,262],
[242,251,258,264,236,0,266,271,259,261,256,255,252,262],
[234,255,251,261,233,235,0,253,244,254,233,239,247,246],
[240,254,259,245,232,230,248,0,243,252,258,252,245,252],
[245,250,248,241,243,242,257,258,0,256,235,247,245,263],
[248,244,243,242,231,240,247,249,245,0,266,243,238,247],
[255,246,246,269,251,245,268,243,266,235,0,233,258,264],
[250,259,259,265,248,246,262,249,254,258,268,0,255,260],
[252,262,249,257,239,249,254,256,256,263,243,246,0,259],
[234,247,241,269,239,239,255,249,238,254,237,241,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,261,294,269,233,293,283,284,248,257,278,278,274],
[261,0,263,319,266,245,275,293,265,267,255,275,291,296],
[240,238,0,283,248,254,283,287,275,273,247,279,262,263],
[207,182,218,0,216,218,255,250,241,234,229,234,247,274],
[232,235,253,285,0,215,254,256,255,228,237,244,267,267],
[268,256,247,283,286,0,266,274,253,275,246,272,258,277],
[208,226,218,246,247,235,0,230,233,246,226,224,248,266],
[218,208,214,251,245,227,271,0,262,271,214,241,215,230],
[217,236,226,260,246,248,268,239,0,263,227,243,235,222],
[253,234,228,267,273,226,255,230,238,0,254,276,249,267],
[244,246,254,272,264,255,275,287,274,247,0,284,288,290],
[223,226,222,267,257,229,277,260,258,225,217,0,247,276],
[223,210,239,254,234,243,253,286,266,252,213,254,0,269],
[227,205,238,227,234,224,235,271,279,234,211,225,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,235,243,224,239,235,219,257,254,250,251,239,250],
[264,0,261,248,249,259,246,257,262,254,257,259,247,254],
[266,240,0,233,238,229,237,225,250,248,233,252,220,226],
[258,253,268,0,251,255,258,239,262,263,255,269,248,242],
[277,252,263,250,0,264,253,238,264,265,253,272,256,255],
[262,242,272,246,237,0,256,231,264,248,253,271,244,253],
[266,255,264,243,248,245,0,242,262,246,250,257,244,264],
[282,244,276,262,263,270,259,0,286,266,267,266,252,249],
[244,239,251,239,237,237,239,215,0,254,231,249,246,244],
[247,247,253,238,236,253,255,235,247,0,237,245,229,259],
[251,244,268,246,248,248,251,234,270,264,0,259,248,255],
[250,242,249,232,229,230,244,235,252,256,242,0,226,233],
[262,254,281,253,245,257,257,249,255,272,253,275,0,263],
[251,247,275,259,246,248,237,252,257,242,246,268,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,247,250,236,239,237,233,244,261,251,245,253,229],
[268,0,258,245,243,236,267,240,245,259,265,273,265,234],
[254,243,0,243,230,243,250,224,242,252,256,246,255,228],
[251,256,258,0,243,245,257,249,244,260,253,269,248,232],
[265,258,271,258,0,260,262,243,241,265,280,246,257,249],
[262,265,258,256,241,0,259,257,260,268,258,255,248,250],
[264,234,251,244,239,242,0,239,251,261,267,251,249,247],
[268,261,277,252,258,244,262,0,249,251,265,261,253,248],
[257,256,259,257,260,241,250,252,0,277,273,252,270,241],
[240,242,249,241,236,233,240,250,224,0,259,248,249,229],
[250,236,245,248,221,243,234,236,228,242,0,238,242,252],
[256,228,255,232,255,246,250,240,249,253,263,0,249,221],
[248,236,246,253,244,253,252,248,231,252,259,252,0,234],
[272,267,273,269,252,251,254,253,260,272,249,280,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,253,255,254,238,253,229,246,245,256,260,253,273],
[241,0,247,223,245,228,249,245,253,247,241,255,226,252],
[248,254,0,259,235,235,265,238,258,248,226,279,250,237],
[246,278,242,0,247,237,265,244,268,251,264,272,241,271],
[247,256,266,254,0,243,270,258,272,244,276,271,251,246],
[263,273,266,264,258,0,272,249,271,250,266,275,249,247],
[248,252,236,236,231,229,0,249,261,229,251,244,222,247],
[272,256,263,257,243,252,252,0,274,261,260,258,261,261],
[255,248,243,233,229,230,240,227,0,233,232,242,217,224],
[256,254,253,250,257,251,272,240,268,0,252,271,243,274],
[245,260,275,237,225,235,250,241,269,249,0,255,217,274],
[241,246,222,229,230,226,257,243,259,230,246,0,227,252],
[248,275,251,260,250,252,279,240,284,258,284,274,0,277],
[228,249,264,230,255,254,254,240,277,227,227,249,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,241,252,238,254,240,251,245,237,249,213,243,251],
[231,0,230,251,240,250,236,239,259,275,253,253,244,268],
[260,271,0,264,228,255,233,248,244,240,237,242,220,253],
[249,250,237,0,236,230,244,220,246,261,268,240,216,266],
[263,261,273,265,0,267,270,253,258,274,284,249,230,258],
[247,251,246,271,234,0,249,264,256,242,267,232,241,257],
[261,265,268,257,231,252,0,258,258,266,241,241,245,284],
[250,262,253,281,248,237,243,0,271,243,275,227,222,258],
[256,242,257,255,243,245,243,230,0,242,250,250,230,245],
[264,226,261,240,227,259,235,258,259,0,255,248,231,267],
[252,248,264,233,217,234,260,226,251,246,0,243,231,249],
[288,248,259,261,252,269,260,274,251,253,258,0,254,274],
[258,257,281,285,271,260,256,279,271,270,270,247,0,284],
[250,233,248,235,243,244,217,243,256,234,252,227,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,264,257,252,260,249,248,265,277,236,258,242,258],
[258,0,257,246,267,260,248,244,278,275,256,252,251,246],
[237,244,0,221,251,249,223,227,270,261,232,225,232,238],
[244,255,280,0,260,258,255,234,267,274,253,243,249,266],
[249,234,250,241,0,253,229,234,245,267,246,256,225,245],
[241,241,252,243,248,0,241,221,252,269,249,225,244,236],
[252,253,278,246,272,260,0,239,267,285,251,264,249,252],
[253,257,274,267,267,280,262,0,282,286,265,256,250,264],
[236,223,231,234,256,249,234,219,0,257,237,234,236,240],
[224,226,240,227,234,232,216,215,244,0,230,238,228,215],
[265,245,269,248,255,252,250,236,264,271,0,253,246,230],
[243,249,276,258,245,276,237,245,267,263,248,0,242,268],
[259,250,269,252,276,257,252,251,265,273,255,259,0,255],
[243,255,263,235,256,265,249,237,261,286,271,233,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,253,274,221,275,214,256,262,275,260,270,241,236],
[257,0,238,266,218,260,239,266,258,270,256,257,241,248],
[248,263,0,255,221,236,221,268,261,239,273,253,231,239],
[227,235,246,0,219,244,222,240,235,240,258,254,216,230],
[280,283,280,282,0,269,250,280,283,264,284,289,257,262],
[226,241,265,257,232,0,194,247,233,266,254,268,229,252],
[287,262,280,279,251,307,0,291,282,289,269,288,244,276],
[245,235,233,261,221,254,210,0,259,260,236,251,240,226],
[239,243,240,266,218,268,219,242,0,257,245,237,219,234],
[226,231,262,261,237,235,212,241,244,0,259,239,249,231],
[241,245,228,243,217,247,232,265,256,242,0,251,245,259],
[231,244,248,247,212,233,213,250,264,262,250,0,227,225],
[260,260,270,285,244,272,257,261,282,252,256,274,0,269],
[265,253,262,271,239,249,225,275,267,270,242,276,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,266,295,296,291,319,247,253,316,263,286,272,283],
[226,0,257,286,230,275,276,264,235,264,234,273,246,294],
[235,244,0,278,248,224,300,279,260,268,245,259,275,279],
[206,215,223,0,183,223,262,247,202,280,235,207,230,270],
[205,271,253,318,0,268,290,274,234,308,263,229,264,281],
[210,226,277,278,233,0,291,258,196,274,247,228,239,236],
[182,225,201,239,211,210,0,231,211,264,221,225,242,251],
[254,237,222,254,227,243,270,0,273,285,230,251,259,251],
[248,266,241,299,267,305,290,228,0,289,247,284,252,269],
[185,237,233,221,193,227,237,216,212,0,200,256,220,229],
[238,267,256,266,238,254,280,271,254,301,0,252,256,253],
[215,228,242,294,272,273,276,250,217,245,249,0,235,266],
[229,255,226,271,237,262,259,242,249,281,245,266,0,212],
[218,207,222,231,220,265,250,250,232,272,248,235,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,269,264,257,272,276,250,269,273,264,254,238,255],
[251,0,260,251,253,259,267,254,259,260,260,256,244,256],
[232,241,0,257,248,254,258,246,256,254,264,261,230,252],
[237,250,244,0,237,245,253,244,256,239,250,253,243,251],
[244,248,253,264,0,258,257,258,264,267,263,245,253,246],
[229,242,247,256,243,0,257,247,254,252,246,254,241,257],
[225,234,243,248,244,244,0,239,245,256,237,232,227,248],
[251,247,255,257,243,254,262,0,255,257,242,256,243,260],
[232,242,245,245,237,247,256,246,0,254,232,232,225,253],
[228,241,247,262,234,249,245,244,247,0,243,235,236,240],
[237,241,237,251,238,255,264,259,269,258,0,255,240,249],
[247,245,240,248,256,247,269,245,269,266,246,0,231,254],
[263,257,271,258,248,260,274,258,276,265,261,270,0,273],
[246,245,249,250,255,244,253,241,248,261,252,247,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,259,244,257,246,251,237,262,242,256,252,242,278],
[244,0,261,246,257,263,250,245,252,254,257,263,254,283],
[242,240,0,231,258,244,229,221,228,216,213,231,223,252],
[257,255,270,0,259,266,270,250,279,264,275,261,249,270],
[244,244,243,242,0,247,231,237,251,239,230,243,241,260],
[255,238,257,235,254,0,269,258,259,237,242,248,256,243],
[250,251,272,231,270,232,0,245,244,238,251,244,259,260],
[264,256,280,251,264,243,256,0,286,253,270,262,253,281],
[239,249,273,222,250,242,257,215,0,223,222,244,249,252],
[259,247,285,237,262,264,263,248,278,0,250,256,258,265],
[245,244,288,226,271,259,250,231,279,251,0,284,256,270],
[249,238,270,240,258,253,257,239,257,245,217,0,239,247],
[259,247,278,252,260,245,242,248,252,243,245,262,0,253],
[223,218,249,231,241,258,241,220,249,236,231,254,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,228,243,259,237,241,247,249,243,233,243,231,247],
[266,0,248,234,254,250,253,225,254,250,243,250,251,271],
[273,253,0,245,266,248,261,257,275,264,246,252,254,275],
[258,267,256,0,267,253,254,250,268,258,249,260,255,265],
[242,247,235,234,0,240,232,247,245,243,238,251,230,261],
[264,251,253,248,261,0,256,266,255,270,255,266,252,272],
[260,248,240,247,269,245,0,264,270,247,261,264,258,274],
[254,276,244,251,254,235,237,0,251,267,254,261,239,255],
[252,247,226,233,256,246,231,250,0,254,248,256,246,263],
[258,251,237,243,258,231,254,234,247,0,234,262,249,257],
[268,258,255,252,263,246,240,247,253,267,0,262,245,268],
[258,251,249,241,250,235,237,240,245,239,239,0,232,256],
[270,250,247,246,271,249,243,262,255,252,256,269,0,269],
[254,230,226,236,240,229,227,246,238,244,233,245,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,223,248,231,231,239,228,228,221,222,250,223,226],
[258,0,260,259,259,261,272,248,254,249,227,262,245,255],
[278,241,0,249,266,264,260,254,251,235,234,257,243,253],
[253,242,252,0,260,269,245,257,232,231,240,253,245,240],
[270,242,235,241,0,261,255,246,229,228,231,251,243,258],
[270,240,237,232,240,0,255,246,228,229,232,248,242,256],
[262,229,241,256,246,246,0,244,234,247,211,249,234,250],
[273,253,247,244,255,255,257,0,244,237,242,247,243,251],
[273,247,250,269,272,273,267,257,0,241,250,269,261,254],
[280,252,266,270,273,272,254,264,260,0,235,262,258,256],
[279,274,267,261,270,269,290,259,251,266,0,268,250,258],
[251,239,244,248,250,253,252,254,232,239,233,0,240,261],
[278,256,258,256,258,259,267,258,240,243,251,261,0,259],
[275,246,248,261,243,245,251,250,247,245,243,240,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,255,253,244,238,268,252,251,260,267,241,252,256],
[255,0,261,258,235,245,275,255,258,265,261,234,241,257],
[246,240,0,244,216,234,267,247,240,236,250,225,245,252],
[248,243,257,0,239,242,282,255,268,259,270,237,259,239],
[257,266,285,262,0,224,270,245,251,254,257,242,246,247],
[263,256,267,259,277,0,265,262,268,273,262,245,252,253],
[233,226,234,219,231,236,0,238,234,246,256,221,237,237],
[249,246,254,246,256,239,263,0,253,240,257,234,230,244],
[250,243,261,233,250,233,267,248,0,233,251,235,226,262],
[241,236,265,242,247,228,255,261,268,0,264,240,247,245],
[234,240,251,231,244,239,245,244,250,237,0,225,224,227],
[260,267,276,264,259,256,280,267,266,261,276,0,258,247],
[249,260,256,242,255,249,264,271,275,254,277,243,0,256],
[245,244,249,262,254,248,264,257,239,256,274,254,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,262,272,278,280,266,276,251,239,255,263,250,267],
[216,0,233,256,258,243,230,231,230,231,230,237,236,251],
[239,268,0,262,258,258,242,254,231,237,233,239,235,247],
[229,245,239,0,248,240,236,241,241,217,235,242,230,253],
[223,243,243,253,0,238,229,238,226,234,226,226,240,235],
[221,258,243,261,263,0,238,249,244,238,232,242,239,241],
[235,271,259,265,272,263,0,254,254,230,254,255,256,250],
[225,270,247,260,263,252,247,0,245,240,244,239,247,249],
[250,271,270,260,275,257,247,256,0,244,246,247,242,244],
[262,270,264,284,267,263,271,261,257,0,248,262,256,260],
[246,271,268,266,275,269,247,257,255,253,0,247,245,263],
[238,264,262,259,275,259,246,262,254,239,254,0,247,264],
[251,265,266,271,261,262,245,254,259,245,256,254,0,264],
[234,250,254,248,266,260,251,252,257,241,238,237,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,247,250,268,237,253,244,231,249,232,239,253,227],
[246,0,243,252,243,243,237,252,231,234,224,251,233,241],
[254,258,0,257,258,219,216,240,232,238,234,243,227,224],
[251,249,244,0,253,227,231,225,219,236,242,232,233,230],
[233,258,243,248,0,253,243,238,246,228,227,241,227,221],
[264,258,282,274,248,0,250,228,240,236,238,259,243,248],
[248,264,285,270,258,251,0,281,253,257,247,265,253,242],
[257,249,261,276,263,273,220,0,260,233,241,252,238,251],
[270,270,269,282,255,261,248,241,0,259,246,263,242,261],
[252,267,263,265,273,265,244,268,242,0,252,245,259,244],
[269,277,267,259,274,263,254,260,255,249,0,257,255,254],
[262,250,258,269,260,242,236,249,238,256,244,0,245,237],
[248,268,274,268,274,258,248,263,259,242,246,256,0,237],
[274,260,277,271,280,253,259,250,240,257,247,264,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,239,225,213,251,215,232,228,246,244,221,254,230],
[239,0,248,232,219,240,227,223,233,245,241,240,243,241],
[262,253,0,253,243,264,251,247,252,254,260,238,256,245],
[276,269,248,0,241,254,240,244,244,267,262,244,260,259],
[288,282,258,260,0,277,232,260,253,270,249,256,265,255],
[250,261,237,247,224,0,245,231,228,232,251,237,230,228],
[286,274,250,261,269,256,0,242,266,272,262,259,271,242],
[269,278,254,257,241,270,259,0,271,250,254,278,262,249],
[273,268,249,257,248,273,235,230,0,249,247,239,254,261],
[255,256,247,234,231,269,229,251,252,0,243,249,236,238],
[257,260,241,239,252,250,239,247,254,258,0,245,235,227],
[280,261,263,257,245,264,242,223,262,252,256,0,247,226],
[247,258,245,241,236,271,230,239,247,265,266,254,0,243],
[271,260,256,242,246,273,259,252,240,263,274,275,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,266,261,242,239,226,248,239,236,226,221,278,247],
[246,0,240,266,238,241,235,232,283,248,244,219,259,246],
[235,261,0,275,229,221,262,241,259,205,240,241,275,234],
[240,235,226,0,222,226,224,211,247,226,225,227,256,228],
[259,263,272,279,0,256,248,243,260,279,236,249,284,270],
[262,260,280,275,245,0,274,264,292,254,264,225,268,281],
[275,266,239,277,253,227,0,239,268,256,238,234,271,270],
[253,269,260,290,258,237,262,0,263,255,255,231,268,268],
[262,218,242,254,241,209,233,238,0,220,247,207,244,238],
[265,253,296,275,222,247,245,246,281,0,246,257,289,248],
[275,257,261,276,265,237,263,246,254,255,0,241,262,264],
[280,282,260,274,252,276,267,270,294,244,260,0,298,266],
[223,242,226,245,217,233,230,233,257,212,239,203,0,219],
[254,255,267,273,231,220,231,233,263,253,237,235,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,258,234,230,221,239,264,268,236,245,238,248,235],
[265,0,260,253,254,276,262,271,264,250,266,248,258,255],
[243,241,0,242,248,247,230,247,269,258,214,227,245,242],
[267,248,259,0,265,255,253,259,260,252,266,242,250,265],
[271,247,253,236,0,249,237,244,291,239,233,223,239,243],
[280,225,254,246,252,0,246,255,244,255,248,253,263,258],
[262,239,271,248,264,255,0,250,259,260,245,239,236,243],
[237,230,254,242,257,246,251,0,269,245,228,227,236,246],
[233,237,232,241,210,257,242,232,0,238,231,220,239,209],
[265,251,243,249,262,246,241,256,263,0,246,242,249,227],
[256,235,287,235,268,253,256,273,270,255,0,237,257,254],
[263,253,274,259,278,248,262,274,281,259,264,0,240,257],
[253,243,256,251,262,238,265,265,262,252,244,261,0,255],
[266,246,259,236,258,243,258,255,292,274,247,244,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,259,245,262,261,256,261,252,263,270,257,270,253],
[230,0,251,232,237,250,228,233,245,258,239,234,266,220],
[242,250,0,237,242,247,244,240,233,261,250,252,251,230],
[256,269,264,0,250,261,249,256,256,259,250,239,259,253],
[239,264,259,251,0,257,246,251,247,235,241,247,271,248],
[240,251,254,240,244,0,240,246,232,253,255,251,258,230],
[245,273,257,252,255,261,0,256,238,265,256,255,269,247],
[240,268,261,245,250,255,245,0,241,250,252,232,254,246],
[249,256,268,245,254,269,263,260,0,245,260,254,274,256],
[238,243,240,242,266,248,236,251,256,0,251,244,263,236],
[231,262,251,251,260,246,245,249,241,250,0,259,259,264],
[244,267,249,262,254,250,246,269,247,257,242,0,256,252],
[231,235,250,242,230,243,232,247,227,238,242,245,0,238],
[248,281,271,248,253,271,254,255,245,265,237,249,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,258,235,251,257,276,270,258,278,255,263,277,268],
[233,0,253,228,258,259,253,244,241,258,245,251,253,277],
[243,248,0,226,251,251,269,262,238,271,258,249,255,252],
[266,273,275,0,249,268,294,260,262,267,260,267,271,291],
[250,243,250,252,0,262,270,266,238,274,231,256,254,258],
[244,242,250,233,239,0,263,253,227,272,250,255,257,255],
[225,248,232,207,231,238,0,249,231,246,224,229,238,237],
[231,257,239,241,235,248,252,0,241,267,237,246,253,247],
[243,260,263,239,263,274,270,260,0,261,244,255,248,262],
[223,243,230,234,227,229,255,234,240,0,229,232,239,247],
[246,256,243,241,270,251,277,264,257,272,0,252,258,260],
[238,250,252,234,245,246,272,255,246,269,249,0,250,253],
[224,248,246,230,247,244,263,248,253,262,243,251,0,254],
[233,224,249,210,243,246,264,254,239,254,241,248,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,268,263,273,247,258,272,255,288,259,230,264,286],
[252,0,246,246,234,234,250,232,209,265,227,234,258,260],
[233,255,0,246,236,237,271,232,242,280,254,227,241,268],
[238,255,255,0,252,253,249,235,226,276,234,242,289,259],
[228,267,265,249,0,237,283,256,236,259,206,233,259,223],
[254,267,264,248,264,0,252,238,233,281,239,242,283,253],
[243,251,230,252,218,249,0,217,221,278,226,216,274,237],
[229,269,269,266,245,263,284,0,248,278,234,254,273,230],
[246,292,259,275,265,268,280,253,0,280,223,242,282,259],
[213,236,221,225,242,220,223,223,221,0,216,209,248,246],
[242,274,247,267,295,262,275,267,278,285,0,267,282,268],
[271,267,274,259,268,259,285,247,259,292,234,0,284,250],
[237,243,260,212,242,218,227,228,219,253,219,217,0,220],
[215,241,233,242,278,248,264,271,242,255,233,251,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,251,246,265,227,258,242,304,277,247,283,273,255],
[278,0,231,263,247,241,241,218,305,269,261,288,264,246],
[250,270,0,266,283,282,244,264,309,264,269,281,290,254],
[255,238,235,0,239,234,219,212,252,240,244,269,275,229],
[236,254,218,262,0,234,230,258,285,274,245,288,274,251],
[274,260,219,267,267,0,275,243,298,295,267,298,328,277],
[243,260,257,282,271,226,0,239,304,291,269,299,285,252],
[259,283,237,289,243,258,262,0,295,265,274,274,268,261],
[197,196,192,249,216,203,197,206,0,230,237,237,207,257],
[224,232,237,261,227,206,210,236,271,0,251,242,246,239],
[254,240,232,257,256,234,232,227,264,250,0,260,271,273],
[218,213,220,232,213,203,202,227,264,259,241,0,249,207],
[228,237,211,226,227,173,216,233,294,255,230,252,0,262],
[246,255,247,272,250,224,249,240,244,262,228,294,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,334,206,289,300,210,178,284,216,252,227,279,295],
[330,0,314,309,286,320,283,207,344,261,283,268,249,316],
[167,187,0,160,194,204,199,160,209,191,175,207,235,262],
[295,192,341,0,285,326,285,258,366,265,327,276,298,316],
[212,215,307,216,0,267,224,240,290,228,298,239,232,307],
[201,181,297,175,234,0,250,226,232,188,217,250,216,283],
[291,218,302,216,277,251,0,234,238,223,301,236,268,282],
[323,294,341,243,261,275,267,0,304,302,302,270,264,276],
[217,157,292,135,211,269,263,197,0,234,203,202,245,257],
[285,240,310,236,273,313,278,199,267,0,217,208,179,336],
[249,218,326,174,203,284,200,199,298,284,0,247,238,284],
[274,233,294,225,262,251,265,231,299,293,254,0,223,337],
[222,252,266,203,269,285,233,237,256,322,263,278,0,327],
[206,185,239,185,194,218,219,225,244,165,217,164,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,244,282,251,230,237,264,258,253,243,216,243,243],
[274,0,251,244,266,232,259,250,239,262,255,253,262,264],
[257,250,0,254,264,257,263,248,245,272,250,258,257,254],
[219,257,247,0,237,235,230,226,273,258,239,225,247,250],
[250,235,237,264,0,247,242,245,246,257,259,246,251,264],
[271,269,244,266,254,0,257,271,261,278,252,273,280,281],
[264,242,238,271,259,244,0,256,264,254,231,221,288,239],
[237,251,253,275,256,230,245,0,266,269,241,259,259,259],
[243,262,256,228,255,240,237,235,0,277,252,242,261,263],
[248,239,229,243,244,223,247,232,224,0,239,244,238,252],
[258,246,251,262,242,249,270,260,249,262,0,260,268,292],
[285,248,243,276,255,228,280,242,259,257,241,0,252,250],
[258,239,244,254,250,221,213,242,240,263,233,249,0,242],
[258,237,247,251,237,220,262,242,238,249,209,251,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,240,254,234,275,241,260,257,240,258,246,279,232],
[267,0,258,244,222,275,247,242,245,257,262,249,267,266],
[261,243,0,244,228,257,244,255,256,251,242,248,278,248],
[247,257,257,0,235,279,240,263,254,245,261,244,295,272],
[267,279,273,266,0,289,253,270,275,259,257,250,275,267],
[226,226,244,222,212,0,238,251,257,225,229,219,247,235],
[260,254,257,261,248,263,0,243,249,241,249,247,266,249],
[241,259,246,238,231,250,258,0,256,253,256,243,268,275],
[244,256,245,247,226,244,252,245,0,223,251,242,292,239],
[261,244,250,256,242,276,260,248,278,0,253,257,284,252],
[243,239,259,240,244,272,252,245,250,248,0,263,278,236],
[255,252,253,257,251,282,254,258,259,244,238,0,302,259],
[222,234,223,206,226,254,235,233,209,217,223,199,0,227],
[269,235,253,229,234,266,252,226,262,249,265,242,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,227,212,270,257,307,252,264,268,230,246,205,270],
[256,0,240,221,289,261,296,267,259,232,231,249,220,288],
[274,261,0,253,273,284,268,258,253,246,255,267,224,265],
[289,280,248,0,287,281,289,265,262,284,271,273,267,312],
[231,212,228,214,0,234,260,226,238,222,216,202,210,243],
[244,240,217,220,267,0,279,226,262,225,251,253,236,230],
[194,205,233,212,241,222,0,244,235,215,220,223,221,248],
[249,234,243,236,275,275,257,0,257,241,246,233,231,271],
[237,242,248,239,263,239,266,244,0,235,229,252,231,274],
[233,269,255,217,279,276,286,260,266,0,234,231,235,255],
[271,270,246,230,285,250,281,255,272,267,0,238,229,278],
[255,252,234,228,299,248,278,268,249,270,263,0,236,285],
[296,281,277,234,291,265,280,270,270,266,272,265,0,267],
[231,213,236,189,258,271,253,230,227,246,223,216,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,256,259,264,259,266,255,255,249,272,254,260,243],
[256,0,237,239,224,260,248,245,238,246,257,223,255,236],
[245,264,0,260,255,261,253,251,253,243,265,252,266,246],
[242,262,241,0,240,244,263,229,241,249,248,243,249,240],
[237,277,246,261,0,262,254,251,258,235,251,242,259,249],
[242,241,240,257,239,0,248,246,232,255,262,248,255,241],
[235,253,248,238,247,253,0,229,240,236,259,244,254,238],
[246,256,250,272,250,255,272,0,243,270,263,250,256,252],
[246,263,248,260,243,269,261,258,0,252,266,249,269,240],
[252,255,258,252,266,246,265,231,249,0,266,248,267,238],
[229,244,236,253,250,239,242,238,235,235,0,240,253,226],
[247,278,249,258,259,253,257,251,252,253,261,0,253,241],
[241,246,235,252,242,246,247,245,232,234,248,248,0,244],
[258,265,255,261,252,260,263,249,261,263,275,260,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,234,279,276,257,247,267,252,267,300,263,256,297],
[308,0,253,298,229,206,241,280,223,270,305,231,266,253],
[267,248,0,283,300,270,288,303,240,221,258,273,284,261],
[222,203,218,0,284,217,269,254,243,245,286,274,233,246],
[225,272,201,217,0,229,234,232,240,238,282,217,242,227],
[244,295,231,284,272,0,273,317,276,287,304,306,291,254],
[254,260,213,232,267,228,0,287,233,217,242,262,261,219],
[234,221,198,247,269,184,214,0,195,215,255,286,214,248],
[249,278,261,258,261,225,268,306,0,251,297,254,234,239],
[234,231,280,256,263,214,284,286,250,0,254,274,260,251],
[201,196,243,215,219,197,259,246,204,247,0,231,216,275],
[238,270,228,227,284,195,239,215,247,227,270,0,258,225],
[245,235,217,268,259,210,240,287,267,241,285,243,0,271],
[204,248,240,255,274,247,282,253,262,250,226,276,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,234,249,244,258,246,236,256,252,244,244,243,242],
[274,0,246,261,249,235,259,241,249,257,263,245,237,240],
[267,255,0,258,241,235,244,240,268,268,252,257,258,242],
[252,240,243,0,233,240,259,234,264,268,241,232,239,220],
[257,252,260,268,0,241,254,238,256,265,239,255,246,241],
[243,266,266,261,260,0,271,263,278,266,260,260,252,263],
[255,242,257,242,247,230,0,243,256,261,253,253,234,235],
[265,260,261,267,263,238,258,0,266,255,263,251,251,249],
[245,252,233,237,245,223,245,235,0,248,255,238,241,239],
[249,244,233,233,236,235,240,246,253,0,259,242,235,244],
[257,238,249,260,262,241,248,238,246,242,0,260,252,237],
[257,256,244,269,246,241,248,250,263,259,241,0,231,254],
[258,264,243,262,255,249,267,250,260,266,249,270,0,254],
[259,261,259,281,260,238,266,252,262,257,264,247,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,228,265,229,238,237,247,234,235,241,245,244,238],
[229,0,218,220,247,234,221,218,227,231,219,212,235,225],
[273,283,0,244,255,253,236,251,257,234,271,258,263,254],
[236,281,257,0,239,237,229,242,260,257,248,257,244,231],
[272,254,246,262,0,250,220,241,264,225,259,241,242,258],
[263,267,248,264,251,0,265,250,253,241,262,270,254,253],
[264,280,265,272,281,236,0,268,284,265,296,281,289,234],
[254,283,250,259,260,251,233,0,241,252,250,235,261,234],
[267,274,244,241,237,248,217,260,0,267,259,249,242,246],
[266,270,267,244,276,260,236,249,234,0,251,272,248,231],
[260,282,230,253,242,239,205,251,242,250,0,253,238,227],
[256,289,243,244,260,231,220,266,252,229,248,0,245,242],
[257,266,238,257,259,247,212,240,259,253,263,256,0,244],
[263,276,247,270,243,248,267,267,255,270,274,259,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,238,236,216,251,250,245,254,272,261,257,254,273],
[267,0,253,262,241,255,259,265,262,271,265,248,271,264],
[263,248,0,247,234,261,253,266,257,276,274,257,265,273],
[265,239,254,0,254,252,269,264,268,272,267,263,267,270],
[285,260,267,247,0,264,265,261,269,285,263,259,264,283],
[250,246,240,249,237,0,266,245,261,253,278,268,266,254],
[251,242,248,232,236,235,0,257,257,271,258,242,246,258],
[256,236,235,237,240,256,244,0,259,248,268,260,269,270],
[247,239,244,233,232,240,244,242,0,257,269,241,265,269],
[229,230,225,229,216,248,230,253,244,0,259,250,250,261],
[240,236,227,234,238,223,243,233,232,242,0,229,241,253],
[244,253,244,238,242,233,259,241,260,251,272,0,257,264],
[247,230,236,234,237,235,255,232,236,251,260,244,0,261],
[228,237,228,231,218,247,243,231,232,240,248,237,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,210,224,307,255,217,220,289,221,217,259,304,194],
[291,0,259,257,271,292,258,283,251,240,251,275,286,313],
[291,242,0,308,347,334,291,313,354,277,300,308,324,246],
[277,244,193,0,279,297,210,264,275,246,278,250,279,249],
[194,230,154,222,0,293,212,207,256,227,309,241,259,186],
[246,209,167,204,208,0,176,189,245,208,267,272,231,207],
[284,243,210,291,289,325,0,234,290,237,323,294,328,275],
[281,218,188,237,294,312,267,0,267,240,277,221,284,246],
[212,250,147,226,245,256,211,234,0,174,239,232,222,228],
[280,261,224,255,274,293,264,261,327,0,321,318,300,232],
[284,250,201,223,192,234,178,224,262,180,0,255,292,196],
[242,226,193,251,260,229,207,280,269,183,246,0,262,198],
[197,215,177,222,242,270,173,217,279,201,209,239,0,184],
[307,188,255,252,315,294,226,255,273,269,305,303,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,267,199,286,251,294,267,269,222,263,264,275,293],
[210,0,240,234,294,256,264,260,265,253,236,234,289,289],
[234,261,0,259,263,258,284,266,275,256,236,225,291,294],
[302,267,242,0,278,280,273,267,286,256,278,269,260,303],
[215,207,238,223,0,244,233,220,239,216,210,228,242,245],
[250,245,243,221,257,0,250,266,263,215,240,225,281,264],
[207,237,217,228,268,251,0,258,234,228,231,216,227,260],
[234,241,235,234,281,235,243,0,256,239,253,275,276,263],
[232,236,226,215,262,238,267,245,0,183,222,211,264,246],
[279,248,245,245,285,286,273,262,318,0,277,280,293,267],
[238,265,265,223,291,261,270,248,279,224,0,208,311,300],
[237,267,276,232,273,276,285,226,290,221,293,0,255,316],
[226,212,210,241,259,220,274,225,237,208,190,246,0,256],
[208,212,207,198,256,237,241,238,255,234,201,185,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,242,258,220,257,247,250,255,243,251,249,245,255],
[268,0,243,259,246,268,281,262,244,256,268,261,261,265],
[259,258,0,251,228,271,248,264,249,239,261,259,249,260],
[243,242,250,0,223,259,265,252,244,240,250,267,252,252],
[281,255,273,278,0,263,252,273,255,265,249,266,271,269],
[244,233,230,242,238,0,254,258,250,226,240,244,251,239],
[254,220,253,236,249,247,0,264,236,227,254,250,267,260],
[251,239,237,249,228,243,237,0,235,224,238,232,244,254],
[246,257,252,257,246,251,265,266,0,256,252,261,254,269],
[258,245,262,261,236,275,274,277,245,0,260,255,253,264],
[250,233,240,251,252,261,247,263,249,241,0,252,243,258],
[252,240,242,234,235,257,251,269,240,246,249,0,259,252],
[256,240,252,249,230,250,234,257,247,248,258,242,0,267],
[246,236,241,249,232,262,241,247,232,237,243,249,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,244,259,229,250,245,269,243,243,256,240,245,244],
[250,0,235,241,244,256,254,248,252,247,243,241,253,248],
[257,266,0,257,257,251,259,266,257,256,250,247,265,249],
[242,260,244,0,250,264,271,261,258,246,262,241,264,271],
[272,257,244,251,0,229,259,257,246,245,259,241,257,241],
[251,245,250,237,272,0,254,257,242,230,241,243,261,260],
[256,247,242,230,242,247,0,238,218,242,263,227,243,242],
[232,253,235,240,244,244,263,0,238,240,242,230,245,241],
[258,249,244,243,255,259,283,263,0,253,257,257,266,254],
[258,254,245,255,256,271,259,261,248,0,249,255,264,255],
[245,258,251,239,242,260,238,259,244,252,0,244,270,248],
[261,260,254,260,260,258,274,271,244,246,257,0,274,249],
[256,248,236,237,244,240,258,256,235,237,231,227,0,245],
[257,253,252,230,260,241,259,260,247,246,253,252,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,246,263,233,231,248,236,250,240,270,258,265,269],
[272,0,240,261,246,239,253,244,249,252,258,267,250,262],
[255,261,0,268,260,241,268,253,246,231,255,272,267,244],
[238,240,233,0,234,224,232,231,241,225,245,257,242,237],
[268,255,241,267,0,254,253,243,246,251,266,264,239,259],
[270,262,260,277,247,0,272,258,249,239,276,262,251,260],
[253,248,233,269,248,229,0,242,262,232,275,268,259,259],
[265,257,248,270,258,243,259,0,254,235,286,266,282,286],
[251,252,255,260,255,252,239,247,0,243,273,275,254,273],
[261,249,270,276,250,262,269,266,258,0,272,278,253,256],
[231,243,246,256,235,225,226,215,228,229,0,249,238,242],
[243,234,229,244,237,239,233,235,226,223,252,0,241,243],
[236,251,234,259,262,250,242,219,247,248,263,260,0,246],
[232,239,257,264,242,241,242,215,228,245,259,258,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,221,240,250,250,243,251,261,232,257,253,241,225],
[262,0,227,256,251,249,238,251,257,251,245,248,250,238],
[280,274,0,261,253,259,257,274,269,255,257,278,258,249],
[261,245,240,0,246,253,258,249,254,247,259,249,245,229],
[251,250,248,255,0,256,238,255,255,251,257,263,253,247],
[251,252,242,248,245,0,236,233,244,233,253,252,252,220],
[258,263,244,243,263,265,0,262,268,251,250,263,276,253],
[250,250,227,252,246,268,239,0,258,243,258,244,266,255],
[240,244,232,247,246,257,233,243,0,238,259,250,230,247],
[269,250,246,254,250,268,250,258,263,0,257,262,254,223],
[244,256,244,242,244,248,251,243,242,244,0,240,240,229],
[248,253,223,252,238,249,238,257,251,239,261,0,245,231],
[260,251,243,256,248,249,225,235,271,247,261,256,0,232],
[276,263,252,272,254,281,248,246,254,278,272,270,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,257,250,285,258,268,220,229,268,231,259,239,254],
[290,0,266,270,277,259,279,250,255,259,248,247,284,259],
[244,235,0,235,258,289,236,252,244,261,232,239,263,270],
[251,231,266,0,269,244,232,236,211,274,228,230,246,251],
[216,224,243,232,0,214,220,213,209,204,223,238,235,250],
[243,242,212,257,287,0,237,219,237,255,230,226,278,249],
[233,222,265,269,281,264,0,250,240,268,272,255,282,267],
[281,251,249,265,288,282,251,0,288,265,276,267,276,275],
[272,246,257,290,292,264,261,213,0,263,248,238,286,295],
[233,242,240,227,297,246,233,236,238,0,262,236,273,269],
[270,253,269,273,278,271,229,225,253,239,0,248,271,253],
[242,254,262,271,263,275,246,234,263,265,253,0,262,250],
[262,217,238,255,266,223,219,225,215,228,230,239,0,285],
[247,242,231,250,251,252,234,226,206,232,248,251,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,262,258,232,237,249,249,257,238,216,234,232,232],
[286,0,259,280,232,243,280,280,270,247,268,250,258,264],
[239,242,0,257,245,210,265,263,247,245,236,243,233,227],
[243,221,244,0,248,253,267,248,271,257,242,250,241,243],
[269,269,256,253,0,243,252,241,277,240,248,238,242,234],
[264,258,291,248,258,0,283,280,301,265,254,289,236,262],
[252,221,236,234,249,218,0,221,272,221,223,241,228,245],
[252,221,238,253,260,221,280,0,262,252,266,246,268,247],
[244,231,254,230,224,200,229,239,0,236,232,231,223,230],
[263,254,256,244,261,236,280,249,265,0,246,238,244,252],
[285,233,265,259,253,247,278,235,269,255,0,229,242,246],
[267,251,258,251,263,212,260,255,270,263,272,0,245,225],
[269,243,268,260,259,265,273,233,278,257,259,256,0,242],
[269,237,274,258,267,239,256,254,271,249,255,276,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,258,284,288,264,253,256,261,263,257,259,250,255],
[248,0,233,259,236,248,258,254,260,259,237,240,253,228],
[243,268,0,272,258,263,256,253,264,260,247,252,247,240],
[217,242,229,0,252,242,238,223,240,239,236,247,253,220],
[213,265,243,249,0,238,234,247,251,240,246,249,232,205],
[237,253,238,259,263,0,242,235,247,263,236,255,234,234],
[248,243,245,263,267,259,0,252,250,237,251,251,237,243],
[245,247,248,278,254,266,249,0,254,252,249,255,250,224],
[240,241,237,261,250,254,251,247,0,250,242,243,242,221],
[238,242,241,262,261,238,264,249,251,0,236,249,242,249],
[244,264,254,265,255,265,250,252,259,265,0,246,255,245],
[242,261,249,254,252,246,250,246,258,252,255,0,254,229],
[251,248,254,248,269,267,264,251,259,259,246,247,0,244],
[246,273,261,281,296,267,258,277,280,252,256,272,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,282,251,234,218,193,207,208,242,253,233,247,232],
[239,0,263,239,233,231,234,214,207,270,216,251,248,218],
[219,238,0,231,198,216,205,212,227,222,224,212,237,219],
[250,262,270,0,241,234,238,258,219,257,251,252,261,231],
[267,268,303,260,0,242,240,251,246,278,280,264,290,272],
[283,270,285,267,259,0,251,242,247,278,252,262,268,257],
[308,267,296,263,261,250,0,252,241,297,269,251,267,255],
[294,287,289,243,250,259,249,0,248,264,266,244,247,265],
[293,294,274,282,255,254,260,253,0,282,249,271,272,286],
[259,231,279,244,223,223,204,237,219,0,235,227,235,219],
[248,285,277,250,221,249,232,235,252,266,0,263,261,269],
[268,250,289,249,237,239,250,257,230,274,238,0,265,265],
[254,253,264,240,211,233,234,254,229,266,240,236,0,248],
[269,283,282,270,229,244,246,236,215,282,232,236,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,224,236,219,222,249,232,231,227,242,238,243,205],
[231,0,238,216,227,218,250,236,220,230,249,237,243,225],
[277,263,0,241,245,258,285,261,236,252,267,266,265,252],
[265,285,260,0,254,251,265,256,259,260,255,263,275,248],
[282,274,256,247,0,255,279,258,254,257,277,261,260,253],
[279,283,243,250,246,0,259,269,259,260,280,257,276,255],
[252,251,216,236,222,242,0,239,245,248,243,245,240,250],
[269,265,240,245,243,232,262,0,252,245,252,243,237,250],
[270,281,265,242,247,242,256,249,0,247,244,236,262,215],
[274,271,249,241,244,241,253,256,254,0,262,246,276,242],
[259,252,234,246,224,221,258,249,257,239,0,250,248,253],
[263,264,235,238,240,244,256,258,265,255,251,0,258,247],
[258,258,236,226,241,225,261,264,239,225,253,243,0,234],
[296,276,249,253,248,246,251,251,286,259,248,254,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,238,249,255,245,242,256,237,235,241,245,242,248],
[261,0,229,237,276,237,252,231,247,237,248,245,238,252],
[263,272,0,254,263,253,275,242,259,267,257,249,260,261],
[252,264,247,0,254,252,252,245,248,243,236,244,257,250],
[246,225,238,247,0,239,254,235,241,242,222,227,236,257],
[256,264,248,249,262,0,266,257,250,263,249,252,245,252],
[259,249,226,249,247,235,0,254,225,244,250,244,251,252],
[245,270,259,256,266,244,247,0,246,257,258,234,260,261],
[264,254,242,253,260,251,276,255,0,247,246,247,255,257],
[266,264,234,258,259,238,257,244,254,0,246,250,257,260],
[260,253,244,265,279,252,251,243,255,255,0,250,265,266],
[256,256,252,257,274,249,257,267,254,251,251,0,261,264],
[259,263,241,244,265,256,250,241,246,244,236,240,0,254],
[253,249,240,251,244,249,249,240,244,241,235,237,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,256,232,267,231,236,243,244,257,251,245,257,268],
[253,0,254,262,256,224,249,267,253,250,254,249,234,250],
[245,247,0,235,272,242,249,227,239,266,256,233,250,264],
[269,239,266,0,266,249,262,268,240,270,261,259,255,278],
[234,245,229,235,0,233,235,239,250,249,231,244,239,251],
[270,277,259,252,268,0,252,270,237,264,262,284,270,259],
[265,252,252,239,266,249,0,247,241,272,251,242,243,247],
[258,234,274,233,262,231,254,0,250,253,248,247,255,252],
[257,248,262,261,251,264,260,251,0,278,245,248,244,258],
[244,251,235,231,252,237,229,248,223,0,236,250,248,239],
[250,247,245,240,270,239,250,253,256,265,0,243,247,249],
[256,252,268,242,257,217,259,254,253,251,258,0,269,257],
[244,267,251,246,262,231,258,246,257,253,254,232,0,255],
[233,251,237,223,250,242,254,249,243,262,252,244,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,264,280,245,256,224,256,224,240,270,255,246,243],
[259,0,265,274,277,276,236,265,205,246,272,241,276,263],
[237,236,0,253,239,230,223,255,213,231,240,240,248,249],
[221,227,248,0,242,246,228,239,207,221,263,237,230,258],
[256,224,262,259,0,247,239,260,226,251,265,224,257,241],
[245,225,271,255,254,0,229,255,227,248,282,207,250,249],
[277,265,278,273,262,272,0,252,234,244,277,252,260,290],
[245,236,246,262,241,246,249,0,234,241,280,249,255,248],
[277,296,288,294,275,274,267,267,0,247,274,263,278,285],
[261,255,270,280,250,253,257,260,254,0,256,252,252,276],
[231,229,261,238,236,219,224,221,227,245,0,224,237,240],
[246,260,261,264,277,294,249,252,238,249,277,0,248,267],
[255,225,253,271,244,251,241,246,223,249,264,253,0,256],
[258,238,252,243,260,252,211,253,216,225,261,234,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,204,147,179,148,166,134,138,151,173,140,66,158],
[373,0,265,235,274,261,264,359,230,251,250,330,263,287],
[297,236,0,143,191,197,128,264,212,247,193,206,199,186],
[354,266,358,0,204,235,240,297,210,232,169,164,139,348],
[322,227,310,297,0,217,268,313,321,332,259,226,306,352],
[353,240,304,266,284,0,223,273,230,234,244,227,199,263],
[335,237,373,261,233,278,0,295,285,303,223,183,228,235],
[367,142,237,204,188,228,206,0,222,231,216,152,119,252],
[363,271,289,291,180,271,216,279,0,308,280,197,275,326],
[350,250,254,269,169,267,198,270,193,0,184,198,136,319],
[328,251,308,332,242,257,278,285,221,317,0,296,165,327],
[361,171,295,337,275,274,318,349,304,303,205,0,261,325],
[435,238,302,362,195,302,273,382,226,365,336,240,0,257],
[343,214,315,153,149,238,266,249,175,182,174,176,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,250,247,246,248,272,254,258,253,239,251,250,267],
[247,0,242,246,244,251,271,247,240,245,230,253,243,252],
[251,259,0,242,230,257,263,239,221,251,245,247,255,248],
[254,255,259,0,236,268,261,238,243,247,243,251,255,253],
[255,257,271,265,0,261,275,257,255,258,249,267,267,275],
[253,250,244,233,240,0,259,238,229,232,231,242,245,255],
[229,230,238,240,226,242,0,234,231,235,233,226,251,233],
[247,254,262,263,244,263,267,0,246,246,259,253,257,259],
[243,261,280,258,246,272,270,255,0,258,253,264,278,276],
[248,256,250,254,243,269,266,255,243,0,247,252,258,257],
[262,271,256,258,252,270,268,242,248,254,0,245,265,267],
[250,248,254,250,234,259,275,248,237,249,256,0,261,247],
[251,258,246,246,234,256,250,244,223,243,236,240,0,257],
[234,249,253,248,226,246,268,242,225,244,234,254,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,239,255,242,234,241,255,255,248,243,260,262,241],
[265,0,259,259,240,254,255,254,260,249,243,260,271,271],
[262,242,0,262,230,257,243,251,256,238,251,254,260,252],
[246,242,239,0,245,241,248,243,242,240,247,248,249,245],
[259,261,271,256,0,256,249,269,288,262,273,282,266,283],
[267,247,244,260,245,0,259,260,270,246,264,251,264,266],
[260,246,258,253,252,242,0,268,265,251,251,260,262,264],
[246,247,250,258,232,241,233,0,253,256,238,246,252,263],
[246,241,245,259,213,231,236,248,0,248,230,252,258,236],
[253,252,263,261,239,255,250,245,253,0,253,246,250,243],
[258,258,250,254,228,237,250,263,271,248,0,240,256,264],
[241,241,247,253,219,250,241,255,249,255,261,0,255,254],
[239,230,241,252,235,237,239,249,243,251,245,246,0,230],
[260,230,249,256,218,235,237,238,265,258,237,247,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,246,256,232,231,245,243,243,218,243,232,249,244],
[264,0,253,264,252,258,287,255,263,240,274,259,251,261],
[255,248,0,259,243,251,264,264,279,244,250,267,267,258],
[245,237,242,0,219,240,235,231,234,217,249,234,261,221],
[269,249,258,282,0,259,274,250,270,267,267,266,275,264],
[270,243,250,261,242,0,256,254,271,233,255,247,257,251],
[256,214,237,266,227,245,0,257,234,222,250,220,246,249],
[258,246,237,270,251,247,244,0,248,234,262,255,272,255],
[258,238,222,267,231,230,267,253,0,252,243,244,258,246],
[283,261,257,284,234,268,279,267,249,0,260,251,263,245],
[258,227,251,252,234,246,251,239,258,241,0,233,260,248],
[269,242,234,267,235,254,281,246,257,250,268,0,264,264],
[252,250,234,240,226,244,255,229,243,238,241,237,0,243],
[257,240,243,280,237,250,252,246,255,256,253,237,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,257,259,274,260,245,247,238,268,242,269,265,268],
[259,0,263,254,261,257,253,261,261,266,238,268,272,276],
[244,238,0,256,255,251,244,236,235,255,239,251,256,267],
[242,247,245,0,252,243,226,237,248,244,239,258,258,253],
[227,240,246,249,0,236,226,220,228,240,227,238,242,263],
[241,244,250,258,265,0,229,241,237,249,249,250,255,254],
[256,248,257,275,275,272,0,262,254,272,263,268,266,278],
[254,240,265,264,281,260,239,0,249,260,249,260,251,259],
[263,240,266,253,273,264,247,252,0,266,245,270,271,276],
[233,235,246,257,261,252,229,241,235,0,240,240,255,256],
[259,263,262,262,274,252,238,252,256,261,0,257,265,271],
[232,233,250,243,263,251,233,241,231,261,244,0,263,259],
[236,229,245,243,259,246,235,250,230,246,236,238,0,267],
[233,225,234,248,238,247,223,242,225,245,230,242,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,262,256,268,280,261,277,251,270,260,251,248,254],
[236,0,267,242,248,251,253,256,265,263,253,258,247,258],
[239,234,0,222,239,249,245,241,247,255,242,253,248,238],
[245,259,279,0,256,263,271,274,273,287,272,260,257,260],
[233,253,262,245,0,247,250,252,246,271,252,237,240,244],
[221,250,252,238,254,0,249,260,247,264,250,237,240,239],
[240,248,256,230,251,252,0,258,255,259,253,243,244,240],
[224,245,260,227,249,241,243,0,242,256,251,243,239,229],
[250,236,254,228,255,254,246,259,0,247,241,238,237,249],
[231,238,246,214,230,237,242,245,254,0,252,236,243,228],
[241,248,259,229,249,251,248,250,260,249,0,246,237,236],
[250,243,248,241,264,264,258,258,263,265,255,0,253,249],
[253,254,253,244,261,261,257,262,264,258,264,248,0,253],
[247,243,263,241,257,262,261,272,252,273,265,252,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,288,255,254,250,255,246,274,254,284,264,273,254],
[249,0,289,256,261,279,265,267,273,253,267,260,259,258],
[213,212,0,226,225,231,238,219,237,206,234,241,235,234],
[246,245,275,0,274,259,269,252,262,258,260,244,253,261],
[247,240,276,227,0,263,243,232,277,249,265,255,259,268],
[251,222,270,242,238,0,228,245,258,230,245,255,239,243],
[246,236,263,232,258,273,0,234,260,239,267,225,252,259],
[255,234,282,249,269,256,267,0,250,246,276,250,255,255],
[227,228,264,239,224,243,241,251,0,236,235,243,235,244],
[247,248,295,243,252,271,262,255,265,0,251,244,254,263],
[217,234,267,241,236,256,234,225,266,250,0,237,250,244],
[237,241,260,257,246,246,276,251,258,257,264,0,255,259],
[228,242,266,248,242,262,249,246,266,247,251,246,0,239],
[247,243,267,240,233,258,242,246,257,238,257,242,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,257,252,257,247,245,232,254,225,251,245,245,244],
[256,0,258,260,261,249,239,231,267,251,249,240,229,234],
[244,243,0,242,251,243,250,233,234,214,236,237,249,240],
[249,241,259,0,256,249,252,249,268,237,251,246,244,253],
[244,240,250,245,0,237,242,236,243,211,246,235,224,232],
[254,252,258,252,264,0,241,254,267,209,243,234,243,250],
[256,262,251,249,259,260,0,245,256,234,257,257,245,235],
[269,270,268,252,265,247,256,0,269,236,248,246,264,267],
[247,234,267,233,258,234,245,232,0,214,258,242,245,251],
[276,250,287,264,290,292,267,265,287,0,276,269,285,270],
[250,252,265,250,255,258,244,253,243,225,0,250,245,251],
[256,261,264,255,266,267,244,255,259,232,251,0,242,256],
[256,272,252,257,277,258,256,237,256,216,256,259,0,247],
[257,267,261,248,269,251,266,234,250,231,250,245,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,283,247,247,288,254,273,290,283,267,268,258,295],
[252,0,281,256,268,279,251,265,285,254,274,266,238,305],
[218,220,0,210,193,219,214,210,216,221,221,210,215,241],
[254,245,291,0,243,260,264,242,280,248,281,240,226,260],
[254,233,308,258,0,261,258,280,303,264,278,272,253,288],
[213,222,282,241,240,0,244,238,291,240,229,248,217,250],
[247,250,287,237,243,257,0,277,283,273,248,258,262,257],
[228,236,291,259,221,263,224,0,251,243,253,250,242,247],
[211,216,285,221,198,210,218,250,0,251,221,253,214,254],
[218,247,280,253,237,261,228,258,250,0,234,244,227,276],
[234,227,280,220,223,272,253,248,280,267,0,256,241,278],
[233,235,291,261,229,253,243,251,248,257,245,0,249,252],
[243,263,286,275,248,284,239,259,287,274,260,252,0,263],
[206,196,260,241,213,251,244,254,247,225,223,249,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,235,238,238,232,231,251,245,244,244,250,229,243],
[240,0,245,246,236,243,232,248,251,237,256,244,222,246],
[266,256,0,242,242,247,246,255,260,231,261,254,260,251],
[263,255,259,0,248,256,253,260,260,248,262,253,255,275],
[263,265,259,253,0,254,243,272,260,256,251,267,251,272],
[269,258,254,245,247,0,247,273,273,254,274,262,255,257],
[270,269,255,248,258,254,0,247,262,248,267,255,237,257],
[250,253,246,241,229,228,254,0,263,223,250,252,239,267],
[256,250,241,241,241,228,239,238,0,240,236,252,237,253],
[257,264,270,253,245,247,253,278,261,0,266,258,256,274],
[257,245,240,239,250,227,234,251,265,235,0,245,249,262],
[251,257,247,248,234,239,246,249,249,243,256,0,245,253],
[272,279,241,246,250,246,264,262,264,245,252,256,0,267],
[258,255,250,226,229,244,244,234,248,227,239,248,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,226,242,254,221,232,275,241,269,240,273,262,263],
[242,0,253,243,263,236,254,261,252,250,263,256,273,229],
[275,248,0,247,231,236,220,237,241,254,246,245,242,242],
[259,258,254,0,270,241,272,229,265,241,229,256,239,262],
[247,238,270,231,0,249,257,247,240,277,258,294,270,265],
[280,265,265,260,252,0,268,305,229,265,251,265,279,243],
[269,247,281,229,244,233,0,274,236,241,245,262,261,247],
[226,240,264,272,254,196,227,0,242,283,240,298,248,268],
[260,249,260,236,261,272,265,259,0,249,272,264,258,272],
[232,251,247,260,224,236,260,218,252,0,278,278,269,249],
[261,238,255,272,243,250,256,261,229,223,0,272,309,228],
[228,245,256,245,207,236,239,203,237,223,229,0,246,237],
[239,228,259,262,231,222,240,253,243,232,192,255,0,257],
[238,272,259,239,236,258,254,233,229,252,273,264,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,263,276,255,252,260,260,260,260,269,251,251,268],
[251,0,251,246,216,250,245,245,239,238,246,248,234,253],
[238,250,0,242,247,260,234,258,253,250,249,257,256,254],
[225,255,259,0,228,252,249,247,250,238,250,259,226,256],
[246,285,254,273,0,263,261,274,270,265,261,265,261,267],
[249,251,241,249,238,0,248,256,238,252,238,254,243,266],
[241,256,267,252,240,253,0,253,262,266,247,242,250,250],
[241,256,243,254,227,245,248,0,245,235,240,236,244,248],
[241,262,248,251,231,263,239,256,0,246,250,256,246,248],
[241,263,251,263,236,249,235,266,255,0,250,264,244,250],
[232,255,252,251,240,263,254,261,251,251,0,256,251,252],
[250,253,244,242,236,247,259,265,245,237,245,0,251,252],
[250,267,245,275,240,258,251,257,255,257,250,250,0,263],
[233,248,247,245,234,235,251,253,253,251,249,249,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,244,255,256,242,266,236,238,241,259,250,247,230],
[257,0,245,264,257,238,250,224,226,228,254,238,239,241],
[257,256,0,266,270,247,264,220,233,261,257,259,247,264],
[246,237,235,0,251,234,259,244,223,231,244,232,253,253],
[245,244,231,250,0,234,231,226,233,235,247,222,228,230],
[259,263,254,267,267,0,270,249,232,258,265,256,251,275],
[235,251,237,242,270,231,0,243,240,238,254,241,248,236],
[265,277,281,257,275,252,258,0,240,261,296,236,250,256],
[263,275,268,278,268,269,261,261,0,266,260,249,255,254],
[260,273,240,270,266,243,263,240,235,0,274,263,264,260],
[242,247,244,257,254,236,247,205,241,227,0,224,260,240],
[251,263,242,269,279,245,260,265,252,238,277,0,258,255],
[254,262,254,248,273,250,253,251,246,237,241,243,0,259],
[271,260,237,248,271,226,265,245,247,241,261,246,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,212,247,228,241,214,259,245,254,244,226,229,249],
[254,0,252,244,264,255,283,268,252,237,277,253,231,250],
[289,249,0,277,265,260,264,269,250,249,290,271,273,282],
[254,257,224,0,226,235,230,247,241,246,243,263,235,245],
[273,237,236,275,0,249,244,261,221,238,244,230,255,252],
[260,246,241,266,252,0,260,257,238,263,233,271,248,250],
[287,218,237,271,257,241,0,261,235,268,272,277,257,242],
[242,233,232,254,240,244,240,0,244,222,248,241,239,265],
[256,249,251,260,280,263,266,257,0,246,272,276,277,270],
[247,264,252,255,263,238,233,279,255,0,268,259,298,271],
[257,224,211,258,257,268,229,253,229,233,0,250,232,233],
[275,248,230,238,271,230,224,260,225,242,251,0,267,251],
[272,270,228,266,246,253,244,262,224,203,269,234,0,270],
[252,251,219,256,249,251,259,236,231,230,268,250,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,165,258,229,257,256,241,261,241,227,172,242,197],
[277,0,202,253,303,279,238,277,249,241,253,253,256,226],
[336,299,0,311,341,315,295,317,309,281,243,271,262,245],
[243,248,190,0,266,283,255,284,277,212,212,208,235,208],
[272,198,160,235,0,240,232,259,234,159,206,233,234,214],
[244,222,186,218,261,0,199,254,241,213,223,219,208,240],
[245,263,206,246,269,302,0,227,259,172,213,178,231,227],
[260,224,184,217,242,247,274,0,251,168,218,172,204,181],
[240,252,192,224,267,260,242,250,0,211,171,199,243,208],
[260,260,220,289,342,288,329,333,290,0,253,262,280,264],
[274,248,258,289,295,278,288,283,330,248,0,244,294,250],
[329,248,230,293,268,282,323,329,302,239,257,0,266,253],
[259,245,239,266,267,293,270,297,258,221,207,235,0,218],
[304,275,256,293,287,261,274,320,293,237,251,248,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,292,237,232,249,276,254,257,253,210,316,278,201],
[262,0,244,224,256,250,245,306,255,296,199,261,285,242],
[209,257,0,174,300,277,224,241,200,243,143,243,220,227],
[264,277,327,0,276,325,254,302,298,304,258,309,257,222],
[269,245,201,225,0,262,253,233,287,331,206,235,221,220],
[252,251,224,176,239,0,274,233,179,265,222,206,236,175],
[225,256,277,247,248,227,0,232,221,300,259,240,271,207],
[247,195,260,199,268,268,269,0,194,258,193,242,260,258],
[244,246,301,203,214,322,280,307,0,282,244,311,231,241],
[248,205,258,197,170,236,201,243,219,0,230,299,179,221],
[291,302,358,243,295,279,242,308,257,271,0,254,304,238],
[185,240,258,192,266,295,261,259,190,202,247,0,210,214],
[223,216,281,244,280,265,230,241,270,322,197,291,0,186],
[300,259,274,279,281,326,294,243,260,280,263,287,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,256,239,273,239,240,265,255,253,248,253,248,244],
[239,0,253,237,262,249,232,248,257,251,249,252,253,245],
[245,248,0,234,267,231,241,240,270,257,242,248,248,247],
[262,264,267,0,267,255,252,247,271,268,250,256,254,271],
[228,239,234,234,0,240,215,234,240,232,234,227,243,236],
[262,252,270,246,261,0,231,249,258,256,246,260,268,260],
[261,269,260,249,286,270,0,269,272,272,266,258,258,278],
[236,253,261,254,267,252,232,0,272,267,251,251,255,241],
[246,244,231,230,261,243,229,229,0,239,241,248,245,246],
[248,250,244,233,269,245,229,234,262,0,246,243,234,234],
[253,252,259,251,267,255,235,250,260,255,0,250,242,260],
[248,249,253,245,274,241,243,250,253,258,251,0,252,255],
[253,248,253,247,258,233,243,246,256,267,259,249,0,248],
[257,256,254,230,265,241,223,260,255,267,241,246,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,237,250,238,247,278,248,239,241,243,258,245,234],
[261,0,250,257,245,244,266,261,254,241,261,271,271,238],
[264,251,0,241,246,238,261,264,264,238,267,259,284,246],
[251,244,260,0,239,243,285,267,244,257,256,250,262,238],
[263,256,255,262,0,269,281,268,253,243,278,268,271,252],
[254,257,263,258,232,0,290,273,254,258,255,252,256,257],
[223,235,240,216,220,211,0,240,237,227,236,247,242,228],
[253,240,237,234,233,228,261,0,239,240,252,244,268,239],
[262,247,237,257,248,247,264,262,0,238,263,257,267,240],
[260,260,263,244,258,243,274,261,263,0,273,256,293,242],
[258,240,234,245,223,246,265,249,238,228,0,252,257,237],
[243,230,242,251,233,249,254,257,244,245,249,0,259,225],
[256,230,217,239,230,245,259,233,234,208,244,242,0,233],
[267,263,255,263,249,244,273,262,261,259,264,276,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,284,259,243,245,269,256,238,309,290,279,299,261],
[216,0,265,208,244,206,231,215,242,267,241,217,259,252],
[217,236,0,209,219,200,205,220,200,249,230,231,240,231],
[242,293,292,0,261,255,229,233,233,286,261,249,305,236],
[258,257,282,240,0,258,226,233,255,266,265,237,277,239],
[256,295,301,246,243,0,240,253,279,288,265,248,291,259],
[232,270,296,272,275,261,0,272,274,295,301,283,260,260],
[245,286,281,268,268,248,229,0,265,269,267,246,263,280],
[263,259,301,268,246,222,227,236,0,266,251,258,277,261],
[192,234,252,215,235,213,206,232,235,0,236,232,263,236],
[211,260,271,240,236,236,200,234,250,265,0,257,267,259],
[222,284,270,252,264,253,218,255,243,269,244,0,255,243],
[202,242,261,196,224,210,241,238,224,238,234,246,0,234],
[240,249,270,265,262,242,241,221,240,265,242,258,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,258,248,239,252,284,266,239,273,254,283,279,270],
[276,0,260,255,261,262,279,274,244,274,278,276,298,254],
[243,241,0,252,240,239,273,263,233,257,251,266,291,242],
[253,246,249,0,253,227,264,265,232,261,267,279,280,261],
[262,240,261,248,0,272,287,237,259,260,263,271,274,250],
[249,239,262,274,229,0,275,257,257,248,263,272,267,267],
[217,222,228,237,214,226,0,216,216,244,234,227,250,220],
[235,227,238,236,264,244,285,0,247,258,240,266,266,248],
[262,257,268,269,242,244,285,254,0,292,260,302,282,271],
[228,227,244,240,241,253,257,243,209,0,253,276,265,258],
[247,223,250,234,238,238,267,261,241,248,0,245,271,248],
[218,225,235,222,230,229,274,235,199,225,256,0,248,221],
[222,203,210,221,227,234,251,235,219,236,230,253,0,229],
[231,247,259,240,251,234,281,253,230,243,253,280,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,263,256,246,255,245,247,257,249,251,251,257,247],
[254,0,268,253,240,260,247,254,257,256,262,266,254,252],
[238,233,0,233,236,250,260,246,251,233,248,249,248,247],
[245,248,268,0,254,263,250,265,255,249,244,261,254,245],
[255,261,265,247,0,265,259,264,257,245,261,261,258,269],
[246,241,251,238,236,0,250,239,254,244,245,247,240,232],
[256,254,241,251,242,251,0,257,244,244,246,254,245,245],
[254,247,255,236,237,262,244,0,265,249,256,256,246,240],
[244,244,250,246,244,247,257,236,0,251,248,252,234,235],
[252,245,268,252,256,257,257,252,250,0,248,256,244,247],
[250,239,253,257,240,256,255,245,253,253,0,254,248,257],
[250,235,252,240,240,254,247,245,249,245,247,0,245,244],
[244,247,253,247,243,261,256,255,267,257,253,256,0,244],
[254,249,254,256,232,269,256,261,266,254,244,257,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,248,274,250,258,244,253,256,255,248,267,255,245],
[229,0,229,239,244,242,229,233,237,234,223,252,249,229],
[253,272,0,264,255,271,269,265,275,272,247,264,254,263],
[227,262,237,0,246,259,247,242,240,235,244,256,257,231],
[251,257,246,255,0,274,251,254,262,262,252,261,249,248],
[243,259,230,242,227,0,242,231,242,255,241,248,238,234],
[257,272,232,254,250,259,0,239,262,249,239,252,245,241],
[248,268,236,259,247,270,262,0,266,249,238,255,256,250],
[245,264,226,261,239,259,239,235,0,254,242,253,256,236],
[246,267,229,266,239,246,252,252,247,0,253,261,252,246],
[253,278,254,257,249,260,262,263,259,248,0,256,270,255],
[234,249,237,245,240,253,249,246,248,240,245,0,248,253],
[246,252,247,244,252,263,256,245,245,249,231,253,0,242],
[256,272,238,270,253,267,260,251,265,255,246,248,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,255,256,199,237,244,209,224,206,220,206,247,225],
[278,0,280,274,277,274,232,242,233,226,224,219,274,268],
[246,221,0,239,235,218,213,208,227,215,196,193,264,235],
[245,227,262,0,214,242,229,205,235,209,223,239,269,253],
[302,224,266,287,0,257,280,250,236,261,209,238,286,245],
[264,227,283,259,244,0,245,208,225,237,245,215,245,231],
[257,269,288,272,221,256,0,240,251,228,243,219,275,268],
[292,259,293,296,251,293,261,0,241,237,242,228,287,241],
[277,268,274,266,265,276,250,260,0,240,260,260,278,281],
[295,275,286,292,240,264,273,264,261,0,254,222,270,272],
[281,277,305,278,292,256,258,259,241,247,0,245,297,294],
[295,282,308,262,263,286,282,273,241,279,256,0,277,272],
[254,227,237,232,215,256,226,214,223,231,204,224,0,235],
[276,233,266,248,256,270,233,260,220,229,207,229,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,255,290,231,259,256,246,263,245,247,261,228,288],
[234,0,222,277,230,252,235,228,217,251,244,231,223,236],
[246,279,0,314,282,287,266,289,253,265,280,265,257,285],
[211,224,187,0,194,263,221,234,200,222,229,222,244,232],
[270,271,219,307,0,257,256,255,237,248,258,258,238,257],
[242,249,214,238,244,0,232,252,226,233,245,228,216,228],
[245,266,235,280,245,269,0,266,237,251,254,250,225,258],
[255,273,212,267,246,249,235,0,255,250,214,232,256,269],
[238,284,248,301,264,275,264,246,0,252,267,251,233,264],
[256,250,236,279,253,268,250,251,249,0,270,238,224,275],
[254,257,221,272,243,256,247,287,234,231,0,255,239,254],
[240,270,236,279,243,273,251,269,250,263,246,0,250,277],
[273,278,244,257,263,285,276,245,268,277,262,251,0,272],
[213,265,216,269,244,273,243,232,237,226,247,224,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,241,239,240,251,269,265,242,272,244,258,254,255],
[245,0,217,231,237,221,241,248,210,237,264,224,260,222],
[260,284,0,233,239,262,266,273,264,283,266,259,287,251],
[262,270,268,0,243,252,281,271,250,258,257,261,272,251],
[261,264,262,258,0,226,289,252,228,256,265,257,279,262],
[250,280,239,249,275,0,271,245,251,257,248,249,262,270],
[232,260,235,220,212,230,0,248,212,222,245,237,252,224],
[236,253,228,230,249,256,253,0,233,237,235,238,253,231],
[259,291,237,251,273,250,289,268,0,276,235,260,280,258],
[229,264,218,243,245,244,279,264,225,0,234,237,243,246],
[257,237,235,244,236,253,256,266,266,267,0,236,235,238],
[243,277,242,240,244,252,264,263,241,264,265,0,273,263],
[247,241,214,229,222,239,249,248,221,258,266,228,0,250],
[246,279,250,250,239,231,277,270,243,255,263,238,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,246,238,281,266,252,249,257,268,277,242,254,263],
[240,0,235,229,254,244,235,227,246,266,266,243,253,274],
[255,266,0,286,278,274,255,255,262,301,270,249,257,273],
[263,272,215,0,260,261,244,237,232,282,258,248,259,238],
[220,247,223,241,0,231,251,238,237,261,257,240,279,239],
[235,257,227,240,270,0,240,227,228,275,243,250,249,235],
[249,266,246,257,250,261,0,271,258,266,271,274,269,258],
[252,274,246,264,263,274,230,0,241,266,263,239,293,267],
[244,255,239,269,264,273,243,260,0,262,288,234,273,268],
[233,235,200,219,240,226,235,235,239,0,270,241,226,272],
[224,235,231,243,244,258,230,238,213,231,0,236,251,238],
[259,258,252,253,261,251,227,262,267,260,265,0,263,251],
[247,248,244,242,222,252,232,208,228,275,250,238,0,244],
[238,227,228,263,262,266,243,234,233,229,263,250,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,282,235,317,321,281,228,227,339,276,246,281,313],
[219,0,242,248,302,306,236,239,237,280,297,295,249,280],
[219,259,0,197,258,291,232,208,213,265,262,238,258,250],
[266,253,304,0,274,271,242,254,253,349,205,288,289,346],
[184,199,243,227,0,198,242,210,168,204,262,166,242,236],
[180,195,210,230,303,0,197,221,207,256,255,217,227,272],
[220,265,269,259,259,304,0,235,210,308,260,272,243,253],
[273,262,293,247,291,280,266,0,236,301,286,277,279,289],
[274,264,288,248,333,294,291,265,0,328,286,278,281,305],
[162,221,236,152,297,245,193,200,173,0,233,274,209,281],
[225,204,239,296,239,246,241,215,215,268,0,204,308,294],
[255,206,263,213,335,284,229,224,223,227,297,0,259,183],
[220,252,243,212,259,274,258,222,220,292,193,242,0,292],
[188,221,251,155,265,229,248,212,196,220,207,318,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,270,260,250,270,281,255,263,250,243,243,235,269],
[265,0,250,263,226,240,279,243,255,265,242,257,225,255],
[231,251,0,263,246,260,260,251,242,238,239,244,244,245],
[241,238,238,0,235,267,252,237,250,236,239,247,236,254],
[251,275,255,266,0,273,315,280,276,271,243,265,261,265],
[231,261,241,234,228,0,260,245,253,235,208,230,225,247],
[220,222,241,249,186,241,0,232,226,237,256,207,239,247],
[246,258,250,264,221,256,269,0,244,243,231,244,249,271],
[238,246,259,251,225,248,275,257,0,243,226,250,221,246],
[251,236,263,265,230,266,264,258,258,0,236,237,224,273],
[258,259,262,262,258,293,245,270,275,265,0,255,257,268],
[258,244,257,254,236,271,294,257,251,264,246,0,242,294],
[266,276,257,265,240,276,262,252,280,277,244,259,0,283],
[232,246,256,247,236,254,254,230,255,228,233,207,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,242,219,291,218,245,271,288,211,261,238,363,245],
[241,0,226,183,239,179,217,263,282,182,190,205,298,205],
[259,275,0,230,219,217,279,348,264,192,279,284,329,243],
[282,318,271,0,301,234,274,298,346,224,265,236,307,247],
[210,262,282,200,0,206,243,255,237,205,262,246,295,223],
[283,322,284,267,295,0,269,275,318,249,256,270,357,241],
[256,284,222,227,258,232,0,272,350,291,214,247,334,291],
[230,238,153,203,246,226,229,0,287,229,256,193,338,237],
[213,219,237,155,264,183,151,214,0,160,178,219,282,251],
[290,319,309,277,296,252,210,272,341,0,270,284,378,251],
[240,311,222,236,239,245,287,245,323,231,0,210,294,187],
[263,296,217,265,255,231,254,308,282,217,291,0,301,249],
[138,203,172,194,206,144,167,163,219,123,207,200,0,166],
[256,296,258,254,278,260,210,264,250,250,314,252,335,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,311,324,220,194,201,270,274,233,315,294,244,299],
[185,0,194,258,207,168,162,156,231,195,243,189,211,221],
[190,307,0,344,250,166,243,226,266,195,261,274,194,266],
[177,243,157,0,195,168,196,228,211,190,248,168,221,197],
[281,294,251,306,0,250,235,262,223,229,334,296,232,239],
[307,333,335,333,251,0,334,289,287,229,369,346,279,279],
[300,339,258,305,266,167,0,252,281,238,300,229,254,306],
[231,345,275,273,239,212,249,0,248,258,299,261,223,277],
[227,270,235,290,278,214,220,253,0,246,270,226,245,216],
[268,306,306,311,272,272,263,243,255,0,276,292,245,250],
[186,258,240,253,167,132,201,202,231,225,0,240,196,192],
[207,312,227,333,205,155,272,240,275,209,261,0,256,326],
[257,290,307,280,269,222,247,278,256,256,305,245,0,353],
[202,280,235,304,262,222,195,224,285,251,309,175,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,302,208,269,216,284,266,224,217,251,222,262,224],
[260,0,244,175,196,190,209,203,195,217,211,164,218,202],
[199,257,0,191,234,220,181,239,195,157,187,200,240,194],
[293,326,310,0,245,261,284,278,222,229,243,249,270,228],
[232,305,267,256,0,174,295,216,213,205,236,227,251,235],
[285,311,281,240,327,0,262,306,268,227,336,276,287,217],
[217,292,320,217,206,239,0,242,179,229,230,228,252,256],
[235,298,262,223,285,195,259,0,237,253,243,247,258,235],
[277,306,306,279,288,233,322,264,0,261,256,240,357,284],
[284,284,344,272,296,274,272,248,240,0,308,230,289,254],
[250,290,314,258,265,165,271,258,245,193,0,225,271,234],
[279,337,301,252,274,225,273,254,261,271,276,0,295,290],
[239,283,261,231,250,214,249,243,144,212,230,206,0,193],
[277,299,307,273,266,284,245,266,217,247,267,211,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,271,273,241,225,228,238,250,251,241,262,272,219],
[252,0,264,246,263,243,245,252,267,246,257,255,241,258],
[230,237,0,240,255,249,181,222,226,251,216,236,266,204],
[228,255,261,0,278,241,234,248,278,257,244,282,269,227],
[260,238,246,223,0,260,217,229,246,241,225,238,247,245],
[276,258,252,260,241,0,227,245,260,256,245,275,278,225],
[273,256,320,267,284,274,0,250,292,257,287,283,287,235],
[263,249,279,253,272,256,251,0,273,274,240,279,274,248],
[251,234,275,223,255,241,209,228,0,255,230,273,277,227],
[250,255,250,244,260,245,244,227,246,0,266,258,257,229],
[260,244,285,257,276,256,214,261,271,235,0,274,261,228],
[239,246,265,219,263,226,218,222,228,243,227,0,256,244],
[229,260,235,232,254,223,214,227,224,244,240,245,0,213],
[282,243,297,274,256,276,266,253,274,272,273,257,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,248,221,235,262,247,251,216,255,248,259,219,239],
[238,0,235,240,222,268,255,257,221,235,227,275,232,238],
[253,266,0,247,245,258,255,267,244,261,255,291,240,264],
[280,261,254,0,253,276,271,261,239,253,233,280,236,238],
[266,279,256,248,0,278,255,259,253,262,254,273,250,258],
[239,233,243,225,223,0,235,255,241,242,213,260,221,232],
[254,246,246,230,246,266,0,252,254,259,234,239,225,230],
[250,244,234,240,242,246,249,0,226,239,226,260,231,254],
[285,280,257,262,248,260,247,275,0,258,268,277,252,259],
[246,266,240,248,239,259,242,262,243,0,240,291,232,259],
[253,274,246,268,247,288,267,275,233,261,0,282,268,276],
[242,226,210,221,228,241,262,241,224,210,219,0,226,234],
[282,269,261,265,251,280,276,270,249,269,233,275,0,276],
[262,263,237,263,243,269,271,247,242,242,225,267,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,242,229,228,251,232,222,228,253,240,229,266,244],
[276,0,279,263,240,256,229,246,232,271,241,260,272,246],
[259,222,0,244,255,230,243,230,231,237,251,250,248,242],
[272,238,257,0,250,252,236,225,223,243,223,236,254,234],
[273,261,246,251,0,255,242,234,239,262,252,259,260,257],
[250,245,271,249,246,0,240,231,229,239,238,282,275,244],
[269,272,258,265,259,261,0,234,254,262,263,266,282,249],
[279,255,271,276,267,270,267,0,246,270,247,289,288,255],
[273,269,270,278,262,272,247,255,0,266,247,284,290,268],
[248,230,264,258,239,262,239,231,235,0,237,256,268,258],
[261,260,250,278,249,263,238,254,254,264,0,262,274,252],
[272,241,251,265,242,219,235,212,217,245,239,0,245,232],
[235,229,253,247,241,226,219,213,211,233,227,256,0,220],
[257,255,259,267,244,257,252,246,233,243,249,269,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,255,275,258,260,248,263,263,249,270,264,257,269],
[233,0,251,271,233,245,251,241,248,240,254,253,240,244],
[246,250,0,272,233,246,243,237,253,250,253,266,244,242],
[226,230,229,0,218,247,241,218,225,224,245,234,237,226],
[243,268,268,283,0,264,262,272,254,249,261,262,258,252],
[241,256,255,254,237,0,241,251,238,249,256,258,252,248],
[253,250,258,260,239,260,0,261,255,245,258,263,269,244],
[238,260,264,283,229,250,240,0,244,248,257,258,247,242],
[238,253,248,276,247,263,246,257,0,247,264,257,262,245],
[252,261,251,277,252,252,256,253,254,0,257,252,255,232],
[231,247,248,256,240,245,243,244,237,244,0,263,243,247],
[237,248,235,267,239,243,238,243,244,249,238,0,258,237],
[244,261,257,264,243,249,232,254,239,246,258,243,0,240],
[232,257,259,275,249,253,257,259,256,269,254,264,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,246,257,259,254,265,252,258,244,254,271,251,248],
[227,0,231,245,238,231,243,229,242,236,234,235,219,244],
[255,270,0,246,265,264,266,250,259,255,268,270,243,262],
[244,256,255,0,258,267,282,244,258,251,253,273,253,258],
[242,263,236,243,0,242,246,249,240,233,252,247,230,227],
[247,270,237,234,259,0,270,253,265,241,258,271,235,253],
[236,258,235,219,255,231,0,252,242,242,244,248,222,246],
[249,272,251,257,252,248,249,0,262,258,269,269,253,257],
[243,259,242,243,261,236,259,239,0,246,255,253,232,255],
[257,265,246,250,268,260,259,243,255,0,269,264,249,259],
[247,267,233,248,249,243,257,232,246,232,0,255,232,236],
[230,266,231,228,254,230,253,232,248,237,246,0,229,237],
[250,282,258,248,271,266,279,248,269,252,269,272,0,252],
[253,257,239,243,274,248,255,244,246,242,265,264,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,221,290,247,274,234,230,258,263,282,248,254,256,236],
[280,0,315,260,271,272,264,273,275,323,265,278,271,225],
[211,186,0,211,235,221,209,234,230,240,223,217,215,227],
[254,241,290,0,243,248,225,246,260,252,241,228,216,229],
[227,230,266,258,0,247,220,264,235,241,202,238,234,214],
[267,229,280,253,254,0,231,262,262,242,247,237,251,253],
[271,237,292,276,281,270,0,280,285,256,255,261,266,274],
[243,228,267,255,237,239,221,0,238,234,223,249,228,233],
[238,226,271,241,266,239,216,263,0,241,234,227,237,247],
[219,178,261,249,260,259,245,267,260,0,219,230,247,214],
[253,236,278,260,299,254,246,278,267,282,0,262,239,235],
[247,223,284,273,263,264,240,252,274,271,239,0,242,252],
[245,230,286,285,267,250,235,273,264,254,262,259,0,244],
[265,276,274,272,287,248,227,268,254,287,266,249,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,276,241,227,224,267,254,227,242,268,243,279,251],
[244,0,279,282,272,279,293,262,265,283,307,267,279,281],
[225,222,0,251,263,235,259,234,210,236,284,217,226,266],
[260,219,250,0,255,281,250,281,262,284,276,247,257,268],
[274,229,238,246,0,276,252,250,237,242,295,250,222,283],
[277,222,266,220,225,0,251,257,236,229,277,241,250,287],
[234,208,242,251,249,250,0,225,237,208,272,212,244,264],
[247,239,267,220,251,244,276,0,251,257,264,253,247,244],
[274,236,291,239,264,265,264,250,0,266,329,284,237,283],
[259,218,265,217,259,272,293,244,235,0,279,240,256,258],
[233,194,217,225,206,224,229,237,172,222,0,202,205,200],
[258,234,284,254,251,260,289,248,217,261,299,0,312,283],
[222,222,275,244,279,251,257,254,264,245,296,189,0,224],
[250,220,235,233,218,214,237,257,218,243,301,218,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,264,261,255,264,270,282,281,262,265,265,270,241],
[221,0,223,242,223,235,243,254,259,245,235,237,254,227],
[237,278,0,261,248,274,271,250,261,260,258,265,263,243],
[240,259,240,0,245,266,262,258,254,255,241,266,229,241],
[246,278,253,256,0,259,262,273,258,260,248,243,243,245],
[237,266,227,235,242,0,260,261,258,250,226,240,264,247],
[231,258,230,239,239,241,0,253,273,252,249,244,249,245],
[219,247,251,243,228,240,248,0,259,256,225,266,250,242],
[220,242,240,247,243,243,228,242,0,246,237,243,244,236],
[239,256,241,246,241,251,249,245,255,0,260,249,244,240],
[236,266,243,260,253,275,252,276,264,241,0,272,269,254],
[236,264,236,235,258,261,257,235,258,252,229,0,244,255],
[231,247,238,272,258,237,252,251,257,257,232,257,0,242],
[260,274,258,260,256,254,256,259,265,261,247,246,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,242,271,268,214,252,221,221,255,236,254,244,258],
[279,0,278,297,285,249,273,244,292,255,260,276,256,304],
[259,223,0,258,285,203,283,244,257,254,242,251,260,268],
[230,204,243,0,265,226,240,225,220,228,250,255,235,224],
[233,216,216,236,0,220,253,247,240,226,239,239,230,227],
[287,252,298,275,281,0,286,239,263,285,275,267,291,276],
[249,228,218,261,248,215,0,255,234,230,239,255,245,229],
[280,257,257,276,254,262,246,0,270,244,256,244,262,283],
[280,209,244,281,261,238,267,231,0,281,253,265,249,266],
[246,246,247,273,275,216,271,257,220,0,268,258,269,253],
[265,241,259,251,262,226,262,245,248,233,0,252,243,275],
[247,225,250,246,262,234,246,257,236,243,249,0,258,269],
[257,245,241,266,271,210,256,239,252,232,258,243,0,265],
[243,197,233,277,274,225,272,218,235,248,226,232,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,140,224,167,185,198,203,199,165,259,243,149,255],
[348,0,238,304,315,245,335,325,228,241,330,288,212,375],
[361,263,0,281,221,190,250,267,232,248,325,267,252,311],
[277,197,220,0,254,210,241,293,249,285,231,241,120,301],
[334,186,280,247,0,199,257,217,222,248,251,215,236,350],
[316,256,311,291,302,0,257,296,266,316,299,301,247,404],
[303,166,251,260,244,244,0,331,164,249,278,210,249,302],
[298,176,234,208,284,205,170,0,226,276,231,236,221,314],
[302,273,269,252,279,235,337,275,0,299,296,329,230,380],
[336,260,253,216,253,185,252,225,202,0,318,232,177,330],
[242,171,176,270,250,202,223,270,205,183,0,244,187,215],
[258,213,234,260,286,200,291,265,172,269,257,0,167,332],
[352,289,249,381,265,254,252,280,271,324,314,334,0,366],
[246,126,190,200,151,97,199,187,121,171,286,169,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,259,247,257,214,248,235,251,277,241,252,259,254],
[225,0,225,224,254,242,236,231,239,245,227,227,228,235],
[242,276,0,248,252,215,247,253,258,265,254,235,232,236],
[254,277,253,0,252,241,239,248,264,265,238,255,251,240],
[244,247,249,249,0,240,236,221,240,238,241,224,222,241],
[287,259,286,260,261,0,259,256,281,281,253,243,280,267],
[253,265,254,262,265,242,0,239,271,278,259,246,239,245],
[266,270,248,253,280,245,262,0,271,269,255,228,243,259],
[250,262,243,237,261,220,230,230,0,252,238,238,241,245],
[224,256,236,236,263,220,223,232,249,0,245,240,221,233],
[260,274,247,263,260,248,242,246,263,256,0,245,250,248],
[249,274,266,246,277,258,255,273,263,261,256,0,243,256],
[242,273,269,250,279,221,262,258,260,280,251,258,0,266],
[247,266,265,261,260,234,256,242,256,268,253,245,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,242,268,246,275,247,274,247,263,295,260,242,277],
[267,0,262,246,257,257,244,258,245,269,280,277,254,274],
[259,239,0,252,260,264,266,214,253,309,284,278,279,292],
[233,255,249,0,248,221,239,252,234,238,261,259,255,245],
[255,244,241,253,0,241,250,224,273,290,257,269,272,254],
[226,244,237,280,260,0,242,252,246,253,260,260,264,279],
[254,257,235,262,251,259,0,263,252,270,283,258,256,263],
[227,243,287,249,277,249,238,0,270,259,257,264,271,252],
[254,256,248,267,228,255,249,231,0,269,257,279,252,272],
[238,232,192,263,211,248,231,242,232,0,249,222,256,261],
[206,221,217,240,244,241,218,244,244,252,0,215,239,254],
[241,224,223,242,232,241,243,237,222,279,286,0,248,267],
[259,247,222,246,229,237,245,230,249,245,262,253,0,272],
[224,227,209,256,247,222,238,249,229,240,247,234,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,268,231,253,256,238,250,232,251,262,270,251,265],
[235,0,241,239,252,231,231,231,220,238,259,257,230,243],
[233,260,0,228,266,242,242,230,233,235,256,248,244,257],
[270,262,273,0,263,251,252,251,254,242,261,264,242,273],
[248,249,235,238,0,223,241,247,243,235,248,247,238,260],
[245,270,259,250,278,0,256,249,259,243,266,263,256,279],
[263,270,259,249,260,245,0,243,251,240,260,268,237,271],
[251,270,271,250,254,252,258,0,250,238,257,266,246,275],
[269,281,268,247,258,242,250,251,0,245,262,270,244,280],
[250,263,266,259,266,258,261,263,256,0,281,275,258,264],
[239,242,245,240,253,235,241,244,239,220,0,267,235,254],
[231,244,253,237,254,238,233,235,231,226,234,0,231,249],
[250,271,257,259,263,245,264,255,257,243,266,270,0,268],
[236,258,244,228,241,222,230,226,221,237,247,252,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,245,235,255,224,228,239,242,235,266,226,245,254],
[263,0,215,249,235,238,232,244,251,239,261,216,242,247],
[256,286,0,244,253,252,263,259,275,268,285,245,265,265],
[266,252,257,0,245,235,241,248,259,274,262,250,251,274],
[246,266,248,256,0,233,222,266,262,236,256,227,252,246],
[277,263,249,266,268,0,234,267,282,260,274,271,265,269],
[273,269,238,260,279,267,0,233,265,249,287,252,266,254],
[262,257,242,253,235,234,268,0,247,265,254,238,255,261],
[259,250,226,242,239,219,236,254,0,242,270,213,257,250],
[266,262,233,227,265,241,252,236,259,0,276,209,232,252],
[235,240,216,239,245,227,214,247,231,225,0,230,234,258],
[275,285,256,251,274,230,249,263,288,292,271,0,283,278],
[256,259,236,250,249,236,235,246,244,269,267,218,0,256],
[247,254,236,227,255,232,247,240,251,249,243,223,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,250,226,238,237,238,252,235,240,236,247,239,245],
[278,0,240,233,242,242,233,251,240,254,257,254,261,263],
[251,261,0,245,252,248,247,271,250,247,244,261,266,243],
[275,268,256,0,236,236,239,260,229,239,246,253,243,229],
[263,259,249,265,0,241,236,260,254,253,269,265,226,234],
[264,259,253,265,260,0,250,274,259,258,273,262,243,261],
[263,268,254,262,265,251,0,268,233,249,275,284,246,241],
[249,250,230,241,241,227,233,0,234,232,247,250,244,227],
[266,261,251,272,247,242,268,267,0,251,262,244,241,258],
[261,247,254,262,248,243,252,269,250,0,266,259,257,231],
[265,244,257,255,232,228,226,254,239,235,0,262,241,246],
[254,247,240,248,236,239,217,251,257,242,239,0,236,233],
[262,240,235,258,275,258,255,257,260,244,260,265,0,252],
[256,238,258,272,267,240,260,274,243,270,255,268,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,226,260,221,305,206,240,224,246,240,240,241,265],
[231,0,235,249,217,253,209,254,226,234,245,268,263,257],
[275,266,0,230,218,272,221,283,252,274,272,219,276,255],
[241,252,271,0,191,273,208,233,237,284,264,233,243,271],
[280,284,283,310,0,308,245,282,271,289,260,309,287,290],
[196,248,229,228,193,0,197,252,203,228,235,234,237,237],
[295,292,280,293,256,304,0,262,271,306,238,280,282,298],
[261,247,218,268,219,249,239,0,235,256,258,249,267,258],
[277,275,249,264,230,298,230,266,0,272,277,262,296,274],
[255,267,227,217,212,273,195,245,229,0,222,241,265,272],
[261,256,229,237,241,266,263,243,224,279,0,258,284,266],
[261,233,282,268,192,267,221,252,239,260,243,0,236,271],
[260,238,225,258,214,264,219,234,205,236,217,265,0,251],
[236,244,246,230,211,264,203,243,227,229,235,230,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,253,261,268,262,268,249,261,268,288,253,250,257],
[237,0,240,246,240,224,249,246,246,241,244,245,229,239],
[248,261,0,243,266,253,278,257,253,264,259,256,246,259],
[240,255,258,0,259,251,266,243,258,254,294,261,251,267],
[233,261,235,242,0,245,262,252,238,234,280,259,258,251],
[239,277,248,250,256,0,258,252,243,243,272,248,250,264],
[233,252,223,235,239,243,0,231,235,226,245,242,224,239],
[252,255,244,258,249,249,270,0,253,229,265,254,234,238],
[240,255,248,243,263,258,266,248,0,260,276,250,242,257],
[233,260,237,247,267,258,275,272,241,0,267,253,245,252],
[213,257,242,207,221,229,256,236,225,234,0,238,220,231],
[248,256,245,240,242,253,259,247,251,248,263,0,237,247],
[251,272,255,250,243,251,277,267,259,256,281,264,0,266],
[244,262,242,234,250,237,262,263,244,249,270,254,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,247,262,243,235,250,259,253,236,230,257,232,254],
[260,0,246,269,246,253,249,265,257,239,249,241,239,249],
[254,255,0,252,249,258,256,262,273,235,243,253,239,243],
[239,232,249,0,228,239,246,239,236,223,229,250,229,230],
[258,255,252,273,0,264,249,242,238,244,235,253,232,241],
[266,248,243,262,237,0,243,245,235,223,236,253,233,241],
[251,252,245,255,252,258,0,256,234,229,230,249,233,246],
[242,236,239,262,259,256,245,0,254,254,248,249,238,247],
[248,244,228,265,263,266,267,247,0,247,242,259,245,248],
[265,262,266,278,257,278,272,247,254,0,251,256,239,259],
[271,252,258,272,266,265,271,253,259,250,0,254,252,277],
[244,260,248,251,248,248,252,252,242,245,247,0,249,242],
[269,262,262,272,269,268,268,263,256,262,249,252,0,254],
[247,252,258,271,260,260,255,254,253,242,224,259,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,269,265,251,251,255,265,267,255,238,247,256,271],
[244,0,276,260,245,255,266,241,268,266,237,258,245,252],
[232,225,0,237,245,239,242,241,244,248,220,243,237,255],
[236,241,264,0,241,242,244,249,254,240,225,250,234,246],
[250,256,256,260,0,252,245,257,252,265,236,259,243,271],
[250,246,262,259,249,0,245,246,253,255,243,251,257,267],
[246,235,259,257,256,256,0,232,240,244,251,243,241,254],
[236,260,260,252,244,255,269,0,248,248,248,259,252,252],
[234,233,257,247,249,248,261,253,0,253,250,258,248,253],
[246,235,253,261,236,246,257,253,248,0,237,246,256,254],
[263,264,281,276,265,258,250,253,251,264,0,274,249,266],
[254,243,258,251,242,250,258,242,243,255,227,0,267,255],
[245,256,264,267,258,244,260,249,253,245,252,234,0,275],
[230,249,246,255,230,234,247,249,248,247,235,246,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,219,226,218,246,257,253,272,229,233,254,296,229],
[300,0,245,263,255,246,259,275,280,242,267,240,316,303],
[282,256,0,297,230,253,270,267,312,216,246,243,324,252],
[275,238,204,0,218,223,282,260,290,251,201,253,309,246],
[283,246,271,283,0,257,284,280,313,281,278,269,332,286],
[255,255,248,278,244,0,273,285,294,273,266,260,318,303],
[244,242,231,219,217,228,0,266,277,211,184,226,277,249],
[248,226,234,241,221,216,235,0,311,212,222,230,279,238],
[229,221,189,211,188,207,224,190,0,229,205,176,279,238],
[272,259,285,250,220,228,290,289,272,0,218,254,302,236],
[268,234,255,300,223,235,317,279,296,283,0,242,324,304],
[247,261,258,248,232,241,275,271,325,247,259,0,315,262],
[205,185,177,192,169,183,224,222,222,199,177,186,0,195],
[272,198,249,255,215,198,252,263,263,265,197,239,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,261,221,260,248,258,258,273,249,236,260,231,263],
[259,0,254,253,269,263,259,284,249,260,245,264,242,252],
[240,247,0,214,256,235,242,249,236,240,246,241,233,241],
[280,248,287,0,267,280,274,286,256,267,265,281,251,265],
[241,232,245,234,0,244,258,247,246,226,233,239,231,244],
[253,238,266,221,257,0,247,267,237,258,239,247,248,262],
[243,242,259,227,243,254,0,266,245,246,224,241,232,240],
[243,217,252,215,254,234,235,0,223,241,204,230,243,247],
[228,252,265,245,255,264,256,278,0,247,244,250,244,261],
[252,241,261,234,275,243,255,260,254,0,222,256,240,255],
[265,256,255,236,268,262,277,297,257,279,0,274,258,244],
[241,237,260,220,262,254,260,271,251,245,227,0,238,252],
[270,259,268,250,270,253,269,258,257,261,243,263,0,264],
[238,249,260,236,257,239,261,254,240,246,257,249,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,236,259,265,200,226,224,198,219,274,278,200,233],
[290,0,245,294,319,226,231,235,159,258,265,304,216,230],
[265,256,0,298,307,228,305,189,215,265,276,326,213,255],
[242,207,203,0,287,235,287,202,185,247,221,305,227,209],
[236,182,194,214,0,188,214,218,203,238,207,251,168,166],
[301,275,273,266,313,0,316,271,241,287,302,287,270,291],
[275,270,196,214,287,185,0,306,249,253,297,267,207,243],
[277,266,312,299,283,230,195,0,204,272,298,307,205,270],
[303,342,286,316,298,260,252,297,0,228,303,306,241,329],
[282,243,236,254,263,214,248,229,273,0,243,230,176,214],
[227,236,225,280,294,199,204,203,198,258,0,279,215,217],
[223,197,175,196,250,214,234,194,195,271,222,0,198,239],
[301,285,288,274,333,231,294,296,260,325,286,303,0,261],
[268,271,246,292,335,210,258,231,172,287,284,262,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,253,249,258,272,270,241,248,251,239,267,262,265],
[250,0,252,267,277,267,287,261,251,250,279,262,262,268],
[248,249,0,254,260,251,261,243,239,256,257,258,253,251],
[252,234,247,0,260,251,267,240,235,261,248,274,240,251],
[243,224,241,241,0,264,272,257,225,237,240,256,228,242],
[229,234,250,250,237,0,251,238,242,226,239,259,245,237],
[231,214,240,234,229,250,0,232,211,232,236,238,245,250],
[260,240,258,261,244,263,269,0,236,245,253,265,258,258],
[253,250,262,266,276,259,290,265,0,250,252,272,261,250],
[250,251,245,240,264,275,269,256,251,0,249,272,280,267],
[262,222,244,253,261,262,265,248,249,252,0,266,244,256],
[234,239,243,227,245,242,263,236,229,229,235,0,233,259],
[239,239,248,261,273,256,256,243,240,221,257,268,0,239],
[236,233,250,250,259,264,251,243,251,234,245,242,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,245,271,268,264,255,238,255,234,235,250,247,231],
[244,0,262,264,289,261,243,260,262,255,235,213,262,238],
[256,239,0,246,276,243,248,247,259,243,221,220,270,244],
[230,237,255,0,256,218,247,236,234,227,216,241,243,224],
[233,212,225,245,0,244,260,233,212,223,184,228,243,220],
[237,240,258,283,257,0,241,255,260,249,224,236,264,272],
[246,258,253,254,241,260,0,258,244,273,242,251,254,241],
[263,241,254,265,268,246,243,0,253,244,262,221,287,266],
[246,239,242,267,289,241,257,248,0,244,256,241,260,265],
[267,246,258,274,278,252,228,257,257,0,243,261,272,268],
[266,266,280,285,317,277,259,239,245,258,0,263,285,280],
[251,288,281,260,273,265,250,280,260,240,238,0,273,248],
[254,239,231,258,258,237,247,214,241,229,216,228,0,228],
[270,263,257,277,281,229,260,235,236,233,221,253,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,243,256,252,253,247,233,251,244,230,254,239,238],
[249,0,243,272,261,262,259,252,263,242,225,264,232,255],
[258,258,0,270,264,249,253,255,263,243,250,271,242,257],
[245,229,231,0,240,234,236,226,232,228,233,238,208,227],
[249,240,237,261,0,254,240,251,227,246,228,253,227,256],
[248,239,252,267,247,0,232,242,246,240,238,262,237,258],
[254,242,248,265,261,269,0,246,267,255,255,277,239,261],
[268,249,246,275,250,259,255,0,252,252,243,275,249,243],
[250,238,238,269,274,255,234,249,0,254,242,259,241,241],
[257,259,258,273,255,261,246,249,247,0,236,262,252,253],
[271,276,251,268,273,263,246,258,259,265,0,272,245,257],
[247,237,230,263,248,239,224,226,242,239,229,0,230,246],
[262,269,259,293,274,264,262,252,260,249,256,271,0,258],
[263,246,244,274,245,243,240,258,260,248,244,255,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,270,279,250,247,264,242,253,274,252,263,253,251],
[249,0,251,234,210,242,262,218,222,251,248,252,241,239],
[231,250,0,234,219,227,238,211,236,249,249,246,233,208],
[222,267,267,0,205,254,277,233,252,257,260,249,235,247],
[251,291,282,296,0,279,280,250,274,277,277,267,263,243],
[254,259,274,247,222,0,274,217,243,254,245,254,252,244],
[237,239,263,224,221,227,0,226,225,241,227,222,241,229],
[259,283,290,268,251,284,275,0,268,256,285,262,259,244],
[248,279,265,249,227,258,276,233,0,256,254,256,252,225],
[227,250,252,244,224,247,260,245,245,0,241,240,229,243],
[249,253,252,241,224,256,274,216,247,260,0,237,251,223],
[238,249,255,252,234,247,279,239,245,261,264,0,249,245],
[248,260,268,266,238,249,260,242,249,272,250,252,0,234],
[250,262,293,254,258,257,272,257,276,258,278,256,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,235,330,232,276,368,280,326,227,191,253,194,277],
[222,0,254,305,249,279,293,272,255,220,230,289,228,307],
[266,247,0,305,200,244,314,288,305,208,225,248,258,273],
[171,196,196,0,257,250,314,347,292,253,194,236,256,190],
[269,252,301,244,0,239,326,297,227,285,178,258,199,285],
[225,222,257,251,262,0,281,327,243,238,262,246,203,255],
[133,208,187,187,175,220,0,265,293,228,204,204,176,212],
[221,229,213,154,204,174,236,0,212,232,181,158,164,183],
[175,246,196,209,274,258,208,289,0,157,192,243,156,234],
[274,281,293,248,216,263,273,269,344,0,191,266,199,215],
[310,271,276,307,323,239,297,320,309,310,0,268,264,293],
[248,212,253,265,243,255,297,343,258,235,233,0,229,244],
[307,273,243,245,302,298,325,337,345,302,237,272,0,270],
[224,194,228,311,216,246,289,318,267,286,208,257,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,244,256,236,252,231,253,265,256,242,257,274,229],
[265,0,231,249,254,255,220,230,253,266,274,258,284,225],
[257,270,0,232,250,244,225,228,271,231,263,298,249,228],
[245,252,269,0,263,257,238,274,278,266,264,260,271,240],
[265,247,251,238,0,230,223,225,256,238,231,270,256,246],
[249,246,257,244,271,0,222,221,266,251,241,240,258,235],
[270,281,276,263,278,279,0,244,288,292,271,293,280,263],
[248,271,273,227,276,280,257,0,287,259,270,301,297,286],
[236,248,230,223,245,235,213,214,0,244,231,235,273,222],
[245,235,270,235,263,250,209,242,257,0,259,263,245,214],
[259,227,238,237,270,260,230,231,270,242,0,285,264,241],
[244,243,203,241,231,261,208,200,266,238,216,0,255,219],
[227,217,252,230,245,243,221,204,228,256,237,246,0,209],
[272,276,273,261,255,266,238,215,279,287,260,282,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,234,269,256,235,270,248,251,219,244,249,248,248],
[236,0,273,276,278,287,265,264,296,233,256,277,294,267],
[267,228,0,282,250,257,293,265,280,230,277,244,292,245],
[232,225,219,0,243,245,239,215,238,231,230,231,254,231],
[245,223,251,258,0,261,247,248,253,224,268,246,255,242],
[266,214,244,256,240,0,266,244,282,257,260,251,287,266],
[231,236,208,262,254,235,0,229,255,226,245,233,262,229],
[253,237,236,286,253,257,272,0,255,201,239,234,286,254],
[250,205,221,263,248,219,246,246,0,212,254,228,271,243],
[282,268,271,270,277,244,275,300,289,0,282,271,304,272],
[257,245,224,271,233,241,256,262,247,219,0,241,265,268],
[252,224,257,270,255,250,268,267,273,230,260,0,270,239],
[253,207,209,247,246,214,239,215,230,197,236,231,0,238],
[253,234,256,270,259,235,272,247,258,229,233,262,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,231,263,266,245,252,265,235,254,249,261,240,239],
[266,0,245,256,248,246,263,287,276,275,253,259,226,245],
[270,256,0,264,248,268,250,286,260,275,257,260,264,237],
[238,245,237,0,257,237,261,263,237,261,258,242,236,220],
[235,253,253,244,0,255,245,264,249,246,253,265,230,230],
[256,255,233,264,246,0,249,275,233,268,250,265,226,246],
[249,238,251,240,256,252,0,261,241,250,245,259,237,237],
[236,214,215,238,237,226,240,0,238,240,232,227,227,204],
[266,225,241,264,252,268,260,263,0,257,243,270,243,232],
[247,226,226,240,255,233,251,261,244,0,243,243,227,220],
[252,248,244,243,248,251,256,269,258,258,0,252,233,228],
[240,242,241,259,236,236,242,274,231,258,249,0,215,236],
[261,275,237,265,271,275,264,274,258,274,268,286,0,260],
[262,256,264,281,271,255,264,297,269,281,273,265,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,240,235,235,240,222,228,238,222,234,225,239,231],
[255,0,257,243,247,265,231,236,242,241,237,232,236,218],
[261,244,0,270,242,258,243,246,257,246,251,236,250,224],
[266,258,231,0,258,244,239,241,252,236,253,238,249,232],
[266,254,259,243,0,259,251,240,255,254,242,230,265,240],
[261,236,243,257,242,0,247,228,251,237,241,224,237,229],
[279,270,258,262,250,254,0,244,266,242,239,234,264,234],
[273,265,255,260,261,273,257,0,269,237,243,253,266,241],
[263,259,244,249,246,250,235,232,0,231,233,227,240,228],
[279,260,255,265,247,264,259,264,270,0,241,246,261,229],
[267,264,250,248,259,260,262,258,268,260,0,249,261,257],
[276,269,265,263,271,277,267,248,274,255,252,0,259,255],
[262,265,251,252,236,264,237,235,261,240,240,242,0,244],
[270,283,277,269,261,272,267,260,273,272,244,246,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,254,266,249,249,255,242,253,245,229,231,249,249],
[261,0,267,255,251,255,261,250,268,265,251,234,257,268],
[247,234,0,243,245,237,262,250,252,261,237,232,253,239],
[235,246,258,0,257,241,251,252,251,254,227,241,254,240],
[252,250,256,244,0,238,247,258,255,252,242,231,240,254],
[252,246,264,260,263,0,255,249,257,255,229,233,253,254],
[246,240,239,250,254,246,0,237,245,260,235,237,262,242],
[259,251,251,249,243,252,264,0,244,257,235,255,249,241],
[248,233,249,250,246,244,256,257,0,257,251,238,245,244],
[256,236,240,247,249,246,241,244,244,0,229,225,241,252],
[272,250,264,274,259,272,266,266,250,272,0,241,270,251],
[270,267,269,260,270,268,264,246,263,276,260,0,258,256],
[252,244,248,247,261,248,239,252,256,260,231,243,0,239],
[252,233,262,261,247,247,259,260,257,249,250,245,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,224,223,276,248,260,223,230,247,267,281,255,229],
[246,0,213,237,269,250,260,251,222,268,261,291,259,265],
[277,288,0,257,268,288,269,267,249,276,259,308,250,268],
[278,264,244,0,274,254,304,289,266,276,267,296,289,282],
[225,232,233,227,0,251,261,234,235,237,288,265,238,234],
[253,251,213,247,250,0,273,220,234,244,261,283,232,222],
[241,241,232,197,240,228,0,250,229,214,274,279,244,222],
[278,250,234,212,267,281,251,0,245,237,294,285,239,258],
[271,279,252,235,266,267,272,256,0,274,296,293,250,280],
[254,233,225,225,264,257,287,264,227,0,265,258,247,229],
[234,240,242,234,213,240,227,207,205,236,0,261,252,249],
[220,210,193,205,236,218,222,216,208,243,240,0,269,213],
[246,242,251,212,263,269,257,262,251,254,249,232,0,255],
[272,236,233,219,267,279,279,243,221,272,252,288,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,262,247,224,260,241,228,262,233,246,254,241,223],
[266,0,280,249,247,265,271,259,278,231,270,262,248,250],
[239,221,0,225,215,237,250,211,254,217,243,226,199,210],
[254,252,276,0,234,249,253,250,269,225,254,251,234,236],
[277,254,286,267,0,283,279,253,282,230,276,263,244,256],
[241,236,264,252,218,0,242,240,264,223,251,241,224,238],
[260,230,251,248,222,259,0,253,269,238,261,235,236,241],
[273,242,290,251,248,261,248,0,274,261,262,258,255,248],
[239,223,247,232,219,237,232,227,0,228,241,218,208,216],
[268,270,284,276,271,278,263,240,273,0,273,258,257,246],
[255,231,258,247,225,250,240,239,260,228,0,217,217,235],
[247,239,275,250,238,260,266,243,283,243,284,0,254,241],
[260,253,302,267,257,277,265,246,293,244,284,247,0,261],
[278,251,291,265,245,263,260,253,285,255,266,260,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,251,249,230,249,236,243,235,253,241,243,258,249],
[260,0,268,272,248,251,264,262,241,248,281,239,263,243],
[250,233,0,256,236,254,248,258,229,246,258,245,251,257],
[252,229,245,0,232,251,256,244,239,254,255,244,261,249],
[271,253,265,269,0,262,273,253,256,247,265,264,266,254],
[252,250,247,250,239,0,259,251,241,251,247,244,255,250],
[265,237,253,245,228,242,0,240,229,226,257,242,253,246],
[258,239,243,257,248,250,261,0,229,241,243,244,253,243],
[266,260,272,262,245,260,272,272,0,262,280,271,263,264],
[248,253,255,247,254,250,275,260,239,0,260,253,264,265],
[260,220,243,246,236,254,244,258,221,241,0,250,258,244],
[258,262,256,257,237,257,259,257,230,248,251,0,243,245],
[243,238,250,240,235,246,248,248,238,237,243,258,0,237],
[252,258,244,252,247,251,255,258,237,236,257,256,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,245,260,249,234,239,225,235,246,248,240,228,245],
[226,0,230,245,245,231,240,227,215,222,236,236,214,212],
[256,271,0,247,242,226,230,274,247,251,260,248,238,268],
[241,256,254,0,229,224,235,239,244,238,255,244,239,236],
[252,256,259,272,0,238,257,263,244,233,272,259,249,254],
[267,270,275,277,263,0,241,269,242,278,278,254,269,256],
[262,261,271,266,244,260,0,248,231,237,261,254,230,252],
[276,274,227,262,238,232,253,0,238,237,250,239,221,250],
[266,286,254,257,257,259,270,263,0,242,267,271,250,261],
[255,279,250,263,268,223,264,264,259,0,257,248,248,263],
[253,265,241,246,229,223,240,251,234,244,0,268,249,253],
[261,265,253,257,242,247,247,262,230,253,233,0,249,247],
[273,287,263,262,252,232,271,280,251,253,252,252,0,257],
[256,289,233,265,247,245,249,251,240,238,248,254,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,158,291,229,322,301,177,269,217,289,300,324,226],
[198,0,168,263,278,205,199,209,215,190,193,252,288,242],
[343,333,0,314,309,273,259,261,305,233,311,370,316,332],
[210,238,187,0,245,235,189,130,247,176,248,269,213,233],
[272,223,192,256,0,275,237,159,321,223,215,294,246,250],
[179,296,228,266,226,0,193,115,248,164,273,275,190,251],
[200,302,242,312,264,308,0,210,263,260,278,318,308,254],
[324,292,240,371,342,386,291,0,359,266,295,313,285,285],
[232,286,196,254,180,253,238,142,0,179,221,294,187,251],
[284,311,268,325,278,337,241,235,322,0,307,296,295,270],
[212,308,190,253,286,228,223,206,280,194,0,262,292,301],
[201,249,131,232,207,226,183,188,207,205,239,0,213,184],
[177,213,185,288,255,311,193,216,314,206,209,288,0,237],
[275,259,169,268,251,250,247,216,250,231,200,317,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,214,199,254,257,226,277,215,206,231,260,288,278],
[227,0,202,198,230,255,204,286,219,137,246,267,257,226],
[287,299,0,251,276,274,220,309,265,277,243,260,293,260],
[302,303,250,0,279,277,266,296,233,237,333,270,288,282],
[247,271,225,222,0,224,195,297,225,218,272,228,249,271],
[244,246,227,224,277,0,188,288,183,200,281,232,253,246],
[275,297,281,235,306,313,0,321,265,239,294,271,296,271],
[224,215,192,205,204,213,180,0,171,200,196,229,246,229],
[286,282,236,268,276,318,236,330,0,238,272,315,317,283],
[295,364,224,264,283,301,262,301,263,0,283,279,281,272],
[270,255,258,168,229,220,207,305,229,218,0,207,231,219],
[241,234,241,231,273,269,230,272,186,222,294,0,262,267],
[213,244,208,213,252,248,205,255,184,220,270,239,0,264],
[223,275,241,219,230,255,230,272,218,229,282,234,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,255,272,286,261,255,250,247,254,257,258,278,247],
[238,0,260,260,279,247,254,244,275,260,269,251,267,265],
[246,241,0,244,267,246,255,255,261,258,253,261,264,240],
[229,241,257,0,268,243,234,244,253,252,236,255,251,252],
[215,222,234,233,0,225,227,237,231,219,234,224,246,233],
[240,254,255,258,276,0,254,254,259,242,259,258,263,240],
[246,247,246,267,274,247,0,251,258,255,249,250,259,249],
[251,257,246,257,264,247,250,0,257,260,235,244,254,237],
[254,226,240,248,270,242,243,244,0,242,242,244,274,245],
[247,241,243,249,282,259,246,241,259,0,244,242,267,244],
[244,232,248,265,267,242,252,266,259,257,0,245,265,250],
[243,250,240,246,277,243,251,257,257,259,256,0,265,252],
[223,234,237,250,255,238,242,247,227,234,236,236,0,235],
[254,236,261,249,268,261,252,264,256,257,251,249,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,218,191,239,241,247,229,251,251,226,237,282,249],
[268,0,250,237,240,250,267,234,254,215,260,254,261,233],
[283,251,0,243,245,246,268,230,306,254,264,266,307,273],
[310,264,258,0,265,285,280,258,267,290,264,257,291,228],
[262,261,256,236,0,264,222,275,242,255,244,290,304,246],
[260,251,255,216,237,0,248,262,262,249,288,258,271,205],
[254,234,233,221,279,253,0,258,230,257,258,227,281,240],
[272,267,271,243,226,239,243,0,255,251,259,231,247,228],
[250,247,195,234,259,239,271,246,0,249,261,226,271,258],
[250,286,247,211,246,252,244,250,252,0,253,244,262,267],
[275,241,237,237,257,213,243,242,240,248,0,243,294,234],
[264,247,235,244,211,243,274,270,275,257,258,0,276,236],
[219,240,194,210,197,230,220,254,230,239,207,225,0,221],
[252,268,228,273,255,296,261,273,243,234,267,265,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,241,243,245,263,263,246,259,256,260,256,263,252],
[249,0,228,256,225,250,259,247,256,240,242,240,253,249],
[260,273,0,254,252,267,276,246,261,262,255,263,262,263],
[258,245,247,0,240,263,263,244,263,243,247,248,259,257],
[256,276,249,261,0,261,275,259,256,268,258,252,258,265],
[238,251,234,238,240,0,244,234,258,256,243,247,249,256],
[238,242,225,238,226,257,0,230,240,234,234,235,240,241],
[255,254,255,257,242,267,271,0,264,258,246,253,257,262],
[242,245,240,238,245,243,261,237,0,243,238,243,251,248],
[245,261,239,258,233,245,267,243,258,0,257,246,252,252],
[241,259,246,254,243,258,267,255,263,244,0,242,263,269],
[245,261,238,253,249,254,266,248,258,255,259,0,259,252],
[238,248,239,242,243,252,261,244,250,249,238,242,0,255],
[249,252,238,244,236,245,260,239,253,249,232,249,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,238,240,230,243,236,245,259,228,244,237,248,240],
[254,0,256,254,260,247,235,248,245,243,253,260,240,237],
[263,245,0,245,254,273,264,277,242,247,256,256,247,250],
[261,247,256,0,255,243,246,253,260,231,255,258,253,249],
[271,241,247,246,0,232,240,238,224,248,254,252,247,252],
[258,254,228,258,269,0,238,263,261,239,256,245,236,239],
[265,266,237,255,261,263,0,255,252,233,267,246,256,245],
[256,253,224,248,263,238,246,0,232,234,253,242,238,249],
[242,256,259,241,277,240,249,269,0,243,267,255,226,245],
[273,258,254,270,253,262,268,267,258,0,286,266,240,261],
[257,248,245,246,247,245,234,248,234,215,0,238,247,238],
[264,241,245,243,249,256,255,259,246,235,263,0,231,256],
[253,261,254,248,254,265,245,263,275,261,254,270,0,256],
[261,264,251,252,249,262,256,252,256,240,263,245,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,210,259,244,225,251,225,229,255,226,243,220,238],
[258,0,235,238,239,245,235,230,231,246,201,240,229,242],
[291,266,0,270,269,263,257,239,244,270,251,260,257,263],
[242,263,231,0,232,230,248,240,232,254,229,238,241,234],
[257,262,232,269,0,230,233,214,228,242,233,229,240,237],
[276,256,238,271,271,0,248,251,270,275,237,261,238,253],
[250,266,244,253,268,253,0,232,228,249,238,250,243,244],
[276,271,262,261,287,250,269,0,246,276,255,278,264,270],
[272,270,257,269,273,231,273,255,0,277,248,277,251,258],
[246,255,231,247,259,226,252,225,224,0,236,243,242,236],
[275,300,250,272,268,264,263,246,253,265,0,270,258,254],
[258,261,241,263,272,240,251,223,224,258,231,0,248,256],
[281,272,244,260,261,263,258,237,250,259,243,253,0,241],
[263,259,238,267,264,248,257,231,243,265,247,245,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,266,260,256,264,234,250,259,253,253,243,239,266],
[278,0,281,300,248,279,263,300,247,257,240,245,245,285],
[235,220,0,272,235,251,220,263,242,236,227,230,211,250],
[241,201,229,0,242,245,244,232,209,247,199,223,214,247],
[245,253,266,259,0,273,245,261,256,253,225,243,239,290],
[237,222,250,256,228,0,233,236,248,248,243,220,220,248],
[267,238,281,257,256,268,0,270,257,286,222,221,226,260],
[251,201,238,269,240,265,231,0,262,257,206,219,249,272],
[242,254,259,292,245,253,244,239,0,249,236,221,237,243],
[248,244,265,254,248,253,215,244,252,0,234,245,215,266],
[248,261,274,302,276,258,279,295,265,267,0,250,262,305],
[258,256,271,278,258,281,280,282,280,256,251,0,249,296],
[262,256,290,287,262,281,275,252,264,286,239,252,0,287],
[235,216,251,254,211,253,241,229,258,235,196,205,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,229,249,221,231,259,224,228,241,240,246,282,258],
[242,0,222,237,197,239,233,213,255,242,248,257,250,244],
[272,279,0,283,225,281,272,244,260,253,271,261,296,258],
[252,264,218,0,235,254,240,227,253,225,262,254,267,231],
[280,304,276,266,0,276,276,265,279,242,284,265,305,297],
[270,262,220,247,225,0,265,218,241,243,262,251,263,250],
[242,268,229,261,225,236,0,222,271,218,253,261,250,251],
[277,288,257,274,236,283,279,0,281,257,283,289,296,267],
[273,246,241,248,222,260,230,220,0,239,269,268,272,271],
[260,259,248,276,259,258,283,244,262,0,261,263,281,253],
[261,253,230,239,217,239,248,218,232,240,0,264,272,243],
[255,244,240,247,236,250,240,212,233,238,237,0,259,229],
[219,251,205,234,196,238,251,205,229,220,229,242,0,218],
[243,257,243,270,204,251,250,234,230,248,258,272,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,233,256,253,237,256,219,244,254,245,230,231,254],
[261,0,253,278,271,243,242,223,263,250,256,252,243,266],
[268,248,0,247,263,235,256,235,248,261,260,257,247,244],
[245,223,254,0,247,223,242,225,245,246,246,242,246,269],
[248,230,238,254,0,241,245,225,265,261,243,245,245,267],
[264,258,266,278,260,0,255,232,269,262,256,250,249,281],
[245,259,245,259,256,246,0,242,264,259,245,256,258,262],
[282,278,266,276,276,269,259,0,272,266,257,255,248,276],
[257,238,253,256,236,232,237,229,0,259,237,244,239,252],
[247,251,240,255,240,239,242,235,242,0,254,231,236,278],
[256,245,241,255,258,245,256,244,264,247,0,255,247,278],
[271,249,244,259,256,251,245,246,257,270,246,0,259,272],
[270,258,254,255,256,252,243,253,262,265,254,242,0,278],
[247,235,257,232,234,220,239,225,249,223,223,229,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,279,245,243,233,259,247,233,244,260,262,246,267],
[272,0,255,247,259,246,245,255,227,253,268,263,260,260],
[222,246,0,255,249,239,227,240,224,237,259,255,228,244],
[256,254,246,0,243,244,254,262,225,260,252,254,240,266],
[258,242,252,258,0,243,242,237,236,249,261,268,242,249],
[268,255,262,257,258,0,250,252,239,257,270,275,260,256],
[242,256,274,247,259,251,0,254,252,260,266,265,247,279],
[254,246,261,239,264,249,247,0,243,247,267,270,253,266],
[268,274,277,276,265,262,249,258,0,260,265,277,271,266],
[257,248,264,241,252,244,241,254,241,0,261,268,258,257],
[241,233,242,249,240,231,235,234,236,240,0,255,243,243],
[239,238,246,247,233,226,236,231,224,233,246,0,240,244],
[255,241,273,261,259,241,254,248,230,243,258,261,0,262],
[234,241,257,235,252,245,222,235,235,244,258,257,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,238,245,261,266,250,263,265,262,254,267,281,235],
[231,0,239,228,243,241,239,239,240,234,261,224,250,238],
[263,262,0,246,256,260,245,266,258,256,269,250,266,258],
[256,273,255,0,239,259,253,245,264,246,253,250,260,257],
[240,258,245,262,0,255,252,250,251,263,247,239,272,250],
[235,260,241,242,246,0,249,255,254,248,255,238,261,244],
[251,262,256,248,249,252,0,255,255,249,240,242,252,243],
[238,262,235,256,251,246,246,0,239,251,258,229,256,241],
[236,261,243,237,250,247,246,262,0,257,247,251,244,255],
[239,267,245,255,238,253,252,250,244,0,253,241,257,242],
[247,240,232,248,254,246,261,243,254,248,0,247,264,254],
[234,277,251,251,262,263,259,272,250,260,254,0,268,250],
[220,251,235,241,229,240,249,245,257,244,237,233,0,233],
[266,263,243,244,251,257,258,260,246,259,247,251,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,230,298,344,276,315,280,252,286,353,270,352,280],
[178,0,179,212,247,313,333,194,225,210,302,218,280,257],
[271,322,0,238,254,338,330,208,212,263,289,224,310,224],
[203,289,263,0,290,320,309,253,232,295,319,260,298,239],
[157,254,247,211,0,305,307,195,211,227,212,237,323,242],
[225,188,163,181,196,0,171,223,208,168,210,186,143,168],
[186,168,171,192,194,330,0,214,199,198,189,170,214,173],
[221,307,293,248,306,278,287,0,250,265,240,153,262,231],
[249,276,289,269,290,293,302,251,0,283,202,198,308,326],
[215,291,238,206,274,333,303,236,218,0,249,180,250,190],
[148,199,212,182,289,291,312,261,299,252,0,130,242,282],
[231,283,277,241,264,315,331,348,303,321,371,0,324,274],
[149,221,191,203,178,358,287,239,193,251,259,177,0,247],
[221,244,277,262,259,333,328,270,175,311,219,227,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,230,232,192,200,257,214,248,235,232,222,230,247],
[233,0,215,230,166,130,155,212,233,213,189,198,174,203],
[271,286,0,279,240,226,286,262,250,272,274,308,283,280],
[269,271,222,0,259,189,247,279,244,236,245,265,242,246],
[309,335,261,242,0,217,212,290,230,245,275,297,209,244],
[301,371,275,312,284,0,258,311,277,244,314,292,274,285],
[244,346,215,254,289,243,0,276,244,240,248,299,264,248],
[287,289,239,222,211,190,225,0,210,243,259,232,202,245],
[253,268,251,257,271,224,257,291,0,243,254,263,243,281],
[266,288,229,265,256,257,261,258,258,0,307,255,242,253],
[269,312,227,256,226,187,253,242,247,194,0,217,230,278],
[279,303,193,236,204,209,202,269,238,246,284,0,251,254],
[271,327,218,259,292,227,237,299,258,259,271,250,0,275],
[254,298,221,255,257,216,253,256,220,248,223,247,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,282,254,302,229,253,168,278,243,234,216,283,249],
[268,0,262,262,313,254,255,179,356,241,256,260,293,255],
[219,239,0,230,281,231,244,224,227,228,283,244,286,250],
[247,239,271,0,356,257,289,192,326,317,288,295,289,309],
[199,188,220,145,0,233,196,164,274,207,250,163,235,205],
[272,247,270,244,268,0,250,257,283,257,260,236,302,302],
[248,246,257,212,305,251,0,224,284,245,294,156,252,211],
[333,322,277,309,337,244,277,0,297,234,255,243,252,337],
[223,145,274,175,227,218,217,204,0,252,193,175,259,189],
[258,260,273,184,294,244,256,267,249,0,286,171,278,243],
[267,245,218,213,251,241,207,246,308,215,0,227,295,247],
[285,241,257,206,338,265,345,258,326,330,274,0,307,303],
[218,208,215,212,266,199,249,249,242,223,206,194,0,209],
[252,246,251,192,296,199,290,164,312,258,254,198,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 501, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mercw/mercw_14_501.csv", index=False, header=False)

import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,508,499,465,475,475,472,528,462,508,518,478,436],
[493,0,479,480,472,499,488,521,469,459,511,493,456],
[502,522,0,487,485,497,489,527,476,490,504,500,483],
[536,521,514,0,528,497,548,543,523,495,538,499,495],
[526,529,516,473,0,490,500,543,499,464,552,479,504],
[526,502,504,504,511,0,493,553,522,484,545,522,489],
[529,513,512,453,501,508,0,519,459,513,543,503,499],
[473,480,474,458,458,448,482,0,464,447,516,467,465],
[539,532,525,478,502,479,542,537,0,486,564,504,501],
[493,542,511,506,537,517,488,554,515,0,557,523,514],
[483,490,497,463,449,456,458,485,437,444,0,445,431],
[523,508,501,502,522,479,498,534,497,478,556,0,512],
[565,545,518,506,497,512,502,536,500,487,570,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,488,497,505,513,535,478,527,518,531,511,553],
[512,0,503,476,499,475,531,500,489,516,526,512,516],
[513,498,0,464,512,504,551,475,506,526,516,492,551],
[504,525,537,0,494,484,550,497,523,542,522,518,568],
[496,502,489,507,0,525,548,481,529,559,519,514,529],
[488,526,497,517,476,0,545,525,490,534,524,524,533],
[466,470,450,451,453,456,0,484,502,469,504,479,528],
[523,501,526,504,520,476,517,0,532,521,550,504,533],
[474,512,495,478,472,511,499,469,0,522,517,476,525],
[483,485,475,459,442,467,532,480,479,0,524,480,509],
[470,475,485,479,482,477,497,451,484,477,0,501,553],
[490,489,509,483,487,477,522,497,525,521,500,0,535],
[448,485,450,433,472,468,473,468,476,492,448,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,546,486,526,535,552,530,503,522,526,508,563,489],
[455,0,476,494,493,492,456,524,465,463,497,538,445],
[515,525,0,535,569,556,501,539,484,526,536,517,508],
[475,507,466,0,512,481,498,503,465,490,529,492,475],
[466,508,432,489,0,480,501,526,425,468,508,501,456],
[449,509,445,520,521,0,475,502,495,469,521,521,510],
[471,545,500,503,500,526,0,514,501,509,504,500,477],
[498,477,462,498,475,499,487,0,463,455,517,501,465],
[479,536,517,536,576,506,500,538,0,477,500,559,481],
[475,538,475,511,533,532,492,546,524,0,520,529,513],
[493,504,465,472,493,480,497,484,501,481,0,538,475],
[438,463,484,509,500,480,501,500,442,472,463,0,487],
[512,556,493,526,545,491,524,536,520,488,526,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,485,520,488,490,492,500,529,510,494,510,499],
[510,0,479,505,492,522,523,517,538,491,491,496,520],
[516,522,0,478,509,516,511,526,537,499,477,512,534],
[481,496,523,0,480,500,477,521,503,496,487,516,521],
[513,509,492,521,0,543,511,526,491,497,504,552,521],
[511,479,485,501,458,0,482,498,520,475,473,511,468],
[509,478,490,524,490,519,0,506,505,501,500,521,502],
[501,484,475,480,475,503,495,0,494,465,473,501,499],
[472,463,464,498,510,481,496,507,0,471,483,490,482],
[491,510,502,505,504,526,500,536,530,0,511,557,492],
[507,510,524,514,497,528,501,528,518,490,0,505,501],
[491,505,489,485,449,490,480,500,511,444,496,0,501],
[502,481,467,480,480,533,499,502,519,509,500,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,482,486,470,491,505,498,506,481,506,486,518],
[518,0,497,495,493,518,522,498,520,492,507,505,541],
[519,504,0,482,509,520,523,514,504,506,507,517,544],
[515,506,519,0,499,525,508,490,518,502,495,508,538],
[531,508,492,502,0,504,512,508,515,495,515,512,546],
[510,483,481,476,497,0,499,467,518,488,514,489,541],
[496,479,478,493,489,502,0,507,504,491,499,495,531],
[503,503,487,511,493,534,494,0,523,474,514,502,531],
[495,481,497,483,486,483,497,478,0,470,491,487,528],
[520,509,495,499,506,513,510,527,531,0,501,526,532],
[495,494,494,506,486,487,502,487,510,500,0,502,518],
[515,496,484,493,489,512,506,499,514,475,499,0,548],
[483,460,457,463,455,460,470,470,473,469,483,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,584,609,515,450,524,625,504,541,641,549,545],
[537,0,545,526,509,425,582,537,567,539,571,458,516],
[417,456,0,442,393,491,447,466,417,407,495,364,444],
[392,475,559,0,325,432,553,471,461,453,510,450,519],
[486,492,608,676,0,558,553,637,531,596,626,493,594],
[551,576,510,569,443,0,555,599,446,548,696,486,599],
[477,419,554,448,448,446,0,524,445,444,461,468,470],
[376,464,535,530,364,402,477,0,456,493,565,435,553],
[497,434,584,540,470,555,556,545,0,446,614,501,566],
[460,462,594,548,405,453,557,508,555,0,606,422,545],
[360,430,506,491,375,305,540,436,387,395,0,400,497],
[452,543,637,551,508,515,533,566,500,579,601,0,497],
[456,485,557,482,407,402,531,448,435,456,504,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,554,511,532,478,567,513,496,524,533,523,513,481],
[447,0,484,507,513,532,522,527,488,523,456,500,447],
[490,517,0,552,501,545,521,501,505,479,517,512,528],
[469,494,449,0,460,540,487,435,469,457,508,519,459],
[523,488,500,541,0,556,540,482,443,554,523,572,502],
[434,469,456,461,445,0,467,455,460,541,511,474,462],
[488,479,480,514,461,534,0,520,424,535,484,492,456],
[505,474,500,566,519,546,481,0,482,506,506,498,517],
[477,513,496,532,558,541,577,519,0,542,507,522,468],
[468,478,522,544,447,460,466,495,459,0,480,453,483],
[478,545,484,493,478,490,517,495,494,521,0,538,497],
[488,501,489,482,429,527,509,503,479,548,463,0,472],
[520,554,473,542,499,539,545,484,533,518,504,529,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,530,520,491,567,532,541,506,457,593,544,487,592],
[471,0,456,399,482,517,466,497,456,494,464,474,504],
[481,545,0,509,505,559,482,473,450,514,500,511,541],
[510,602,492,0,564,546,506,537,524,561,550,518,550],
[434,519,496,437,0,512,475,479,491,527,481,508,542],
[469,484,442,455,489,0,497,456,446,481,469,509,503],
[460,535,519,495,526,504,0,532,470,511,527,502,551],
[495,504,528,464,522,545,469,0,504,478,482,502,516],
[544,545,551,477,510,555,531,497,0,502,504,516,549],
[408,507,487,440,474,520,490,523,499,0,502,469,549],
[457,537,501,451,520,532,474,519,497,499,0,519,541],
[514,527,490,483,493,492,499,499,485,532,482,0,524],
[409,497,460,451,459,498,450,485,452,452,460,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,444,521,472,529,491,462,497,492,487,539,473],
[532,0,496,540,497,541,531,463,509,496,531,507,499],
[557,505,0,544,516,539,496,507,520,516,510,540,551],
[480,461,457,0,468,492,448,455,476,468,499,500,461],
[529,504,485,533,0,542,515,483,520,513,500,524,484],
[472,460,462,509,459,0,493,449,499,470,506,497,500],
[510,470,505,553,486,508,0,490,529,526,532,509,517],
[539,538,494,546,518,552,511,0,492,561,530,563,552],
[504,492,481,525,481,502,472,509,0,475,492,501,476],
[509,505,485,533,488,531,475,440,526,0,492,502,515],
[514,470,491,502,501,495,469,471,509,509,0,517,516],
[462,494,461,501,477,504,492,438,500,499,484,0,473],
[528,502,450,540,517,501,484,449,525,486,485,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,428,483,483,476,504,446,469,439,476,479,489],
[515,0,452,481,493,485,519,439,480,494,454,489,495],
[573,549,0,515,517,495,555,542,512,533,509,530,564],
[518,520,486,0,472,504,482,481,506,496,493,492,521],
[518,508,484,529,0,487,477,492,498,524,509,530,519],
[525,516,506,497,514,0,507,502,510,528,490,522,524],
[497,482,446,519,524,494,0,483,459,507,494,499,521],
[555,562,459,520,509,499,518,0,538,504,516,531,517],
[532,521,489,495,503,491,542,463,0,526,506,511,499],
[562,507,468,505,477,473,494,497,475,0,490,492,493],
[525,547,492,508,492,511,507,485,495,511,0,506,507],
[522,512,471,509,471,479,502,470,490,509,495,0,466],
[512,506,437,480,482,477,480,484,502,508,494,535,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,512,493,518,516,505,496,499,492,532,512,496],
[501,0,517,479,505,509,504,486,495,492,512,483,487],
[489,484,0,489,513,514,500,489,486,504,494,494,474],
[508,522,512,0,522,522,517,515,485,513,514,494,520],
[483,496,488,479,0,490,483,496,467,461,503,475,472],
[485,492,487,479,511,0,505,492,473,469,492,483,495],
[496,497,501,484,518,496,0,510,480,474,509,489,487],
[505,515,512,486,505,509,491,0,492,486,491,508,486],
[502,506,515,516,534,528,521,509,0,494,512,512,497],
[509,509,497,488,540,532,527,515,507,0,528,493,487],
[469,489,507,487,498,509,492,510,489,473,0,493,482],
[489,518,507,507,526,518,512,493,489,508,508,0,506],
[505,514,527,481,529,506,514,515,504,514,519,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,536,525,535,506,466,507,498,494,512,532,524],
[502,0,529,516,536,512,489,496,501,496,537,543,520],
[465,472,0,489,506,479,441,466,481,472,459,487,476],
[476,485,512,0,517,490,493,498,508,477,490,521,521],
[466,465,495,484,0,469,438,474,485,476,480,500,514],
[495,489,522,511,532,0,483,518,479,488,512,525,525],
[535,512,560,508,563,518,0,536,520,499,521,563,534],
[494,505,535,503,527,483,465,0,478,494,498,527,509],
[503,500,520,493,516,522,481,523,0,490,495,510,532],
[507,505,529,524,525,513,502,507,511,0,486,539,529],
[489,464,542,511,521,489,480,503,506,515,0,528,532],
[469,458,514,480,501,476,438,474,491,462,473,0,501],
[477,481,525,480,487,476,467,492,469,472,469,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,578,566,503,499,508,559,568,513,597,530,540,554],
[423,0,482,454,415,392,391,439,452,481,447,492,450],
[435,519,0,495,490,490,504,501,504,508,516,501,508],
[498,547,506,0,497,487,470,561,500,554,510,529,500],
[502,586,511,504,0,460,521,492,548,585,521,473,487],
[493,609,511,514,541,0,571,597,536,593,570,541,539],
[442,610,497,531,480,430,0,558,530,495,530,450,540],
[433,562,500,440,509,404,443,0,403,480,447,423,466],
[488,549,497,501,453,465,471,598,0,536,493,460,450],
[404,520,493,447,416,408,506,521,465,0,389,433,472],
[471,554,485,491,480,431,471,554,508,612,0,505,514],
[461,509,500,472,528,460,551,578,541,568,496,0,502],
[447,551,493,501,514,462,461,535,551,529,487,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,475,483,501,532,493,515,510,527,525,494,491],
[525,0,528,492,480,513,498,521,473,523,516,438,564],
[526,473,0,490,432,531,519,549,530,533,518,514,523],
[518,509,511,0,460,399,444,542,521,587,520,495,514],
[500,521,569,541,0,565,533,560,587,575,559,487,578],
[469,488,470,602,436,0,501,543,514,588,524,474,544],
[508,503,482,557,468,500,0,528,469,516,501,484,608],
[486,480,452,459,441,458,473,0,465,484,469,438,452],
[491,528,471,480,414,487,532,536,0,498,452,460,585],
[474,478,468,414,426,413,485,517,503,0,465,440,486],
[476,485,483,481,442,477,500,532,549,536,0,509,490],
[507,563,487,506,514,527,517,563,541,561,492,0,545],
[510,437,478,487,423,457,393,549,416,515,511,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,521,463,440,561,484,447,394,446,494,546,360,566],
[480,0,470,436,449,364,414,435,424,373,418,389,504],
[538,531,0,461,513,414,467,464,433,419,563,407,488],
[561,565,540,0,559,496,488,501,525,447,506,446,568],
[440,552,488,442,0,534,494,400,428,386,517,386,538],
[517,637,587,505,467,0,488,512,486,438,600,463,541],
[554,587,534,513,507,513,0,509,522,460,551,509,618],
[607,566,537,500,601,489,492,0,469,513,613,478,590],
[555,577,568,476,573,515,479,532,0,441,558,407,609],
[507,628,582,554,615,563,541,488,560,0,637,553,529],
[455,583,438,495,484,401,450,388,443,364,0,410,507],
[641,612,594,555,615,538,492,523,594,448,591,0,685],
[435,497,513,433,463,460,383,411,392,472,494,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,513,553,515,521,499,500,471,540,508,503,494],
[513,0,520,566,518,526,507,498,491,510,518,496,498],
[488,481,0,510,457,493,503,528,433,498,507,512,508],
[448,435,491,0,532,522,461,466,443,490,455,497,501],
[486,483,544,469,0,512,493,530,468,494,501,527,517],
[480,475,508,479,489,0,487,457,453,508,520,499,518],
[502,494,498,540,508,514,0,517,478,493,509,503,493],
[501,503,473,535,471,544,484,0,496,535,491,538,496],
[530,510,568,558,533,548,523,505,0,496,558,549,511],
[461,491,503,511,507,493,508,466,505,0,502,509,483],
[493,483,494,546,500,481,492,510,443,499,0,506,476],
[498,505,489,504,474,502,498,463,452,492,495,0,493],
[507,503,493,500,484,483,508,505,490,518,525,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,495,487,468,492,520,500,497,492,506,493,494],
[498,0,494,488,475,483,519,511,504,511,517,504,489],
[506,507,0,495,484,503,523,505,505,518,519,509,515],
[514,513,506,0,490,485,527,499,493,497,519,500,503],
[533,526,517,511,0,489,538,506,517,514,528,505,494],
[509,518,498,516,512,0,530,508,505,498,537,486,506],
[481,482,478,474,463,471,0,472,464,471,493,477,476],
[501,490,496,502,495,493,529,0,488,497,506,481,475],
[504,497,496,508,484,496,537,513,0,500,515,496,494],
[509,490,483,504,487,503,530,504,501,0,501,472,492],
[495,484,482,482,473,464,508,495,486,500,0,479,477],
[508,497,492,501,496,515,524,520,505,529,522,0,494],
[507,512,486,498,507,495,525,526,507,509,524,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,526,474,436,432,512,451,536,490,486,484,474,508],
[475,0,479,395,419,473,420,535,428,427,465,448,457],
[527,522,0,524,456,549,512,532,516,502,543,515,520],
[565,606,477,0,441,533,517,580,458,430,502,489,519],
[569,582,545,560,0,541,471,573,510,521,571,515,571],
[489,528,452,468,460,0,447,548,487,482,507,440,537],
[550,581,489,484,530,554,0,601,521,538,529,532,538],
[465,466,469,421,428,453,400,0,414,479,467,465,506],
[511,573,485,543,491,514,480,587,0,511,500,519,518],
[515,574,499,571,480,519,463,522,490,0,526,511,499],
[517,536,458,499,430,494,472,534,501,475,0,470,535],
[527,553,486,512,486,561,469,536,482,490,531,0,534],
[493,544,481,482,430,464,463,495,483,502,466,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,592,451,556,504,690,625,591,478,720,557,529,630],
[409,0,447,373,461,491,391,403,243,485,413,418,538],
[550,554,0,514,530,641,496,551,523,640,397,620,714],
[445,628,487,0,536,650,524,592,481,731,428,580,647],
[497,540,471,465,0,565,502,625,477,613,432,584,654],
[311,510,360,351,436,0,291,517,258,382,217,409,446],
[376,610,505,477,499,710,0,617,426,585,436,620,714],
[410,598,450,409,376,484,384,0,354,580,359,457,542],
[523,758,478,520,524,743,575,647,0,646,412,590,568],
[281,516,361,270,388,619,416,421,355,0,415,435,401],
[444,588,604,573,569,784,565,642,589,586,0,665,729],
[472,583,381,421,417,592,381,544,411,566,336,0,426],
[371,463,287,354,347,555,287,459,433,600,272,575,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,493,497,510,499,501,520,512,511,496,491,495],
[497,0,492,505,499,489,504,510,511,505,492,479,468],
[508,509,0,483,514,516,534,515,521,522,491,490,484],
[504,496,518,0,521,510,500,538,547,526,516,497,477],
[491,502,487,480,0,494,496,522,488,510,489,478,463],
[502,512,485,491,507,0,496,524,518,512,528,512,516],
[500,497,467,501,505,505,0,504,504,512,461,492,470],
[481,491,486,463,479,477,497,0,487,487,482,456,450],
[489,490,480,454,513,483,497,514,0,495,497,508,459],
[490,496,479,475,491,489,489,514,506,0,471,476,453],
[505,509,510,485,512,473,540,519,504,530,0,499,492],
[510,522,511,504,523,489,509,545,493,525,502,0,480],
[506,533,517,524,538,485,531,551,542,548,509,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,514,507,492,515,537,508,531,473,507,493,525],
[521,0,547,529,500,519,543,502,538,520,520,503,536],
[487,454,0,500,493,509,508,492,507,470,490,475,498],
[494,472,501,0,494,523,522,493,502,485,502,497,500],
[509,501,508,507,0,488,514,495,522,475,493,491,526],
[486,482,492,478,513,0,493,485,498,468,498,485,511],
[464,458,493,479,487,508,0,464,496,458,484,480,497],
[493,499,509,508,506,516,537,0,519,489,503,501,512],
[470,463,494,499,479,503,505,482,0,446,475,474,474],
[528,481,531,516,526,533,543,512,555,0,516,506,527],
[494,481,511,499,508,503,517,498,526,485,0,482,517],
[508,498,526,504,510,516,521,500,527,495,519,0,521],
[476,465,503,501,475,490,504,489,527,474,484,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,522,504,503,500,483,507,503,468,501,465,510],
[523,0,507,533,507,494,507,506,510,492,545,502,521],
[479,494,0,509,498,487,497,470,500,460,494,453,502],
[497,468,492,0,484,490,496,484,540,464,505,475,518],
[498,494,503,517,0,486,484,491,514,470,491,501,515],
[501,507,514,511,515,0,477,493,501,482,489,504,486],
[518,494,504,505,517,524,0,481,518,481,511,501,498],
[494,495,531,517,510,508,520,0,512,503,516,484,537],
[498,491,501,461,487,500,483,489,0,452,513,472,515],
[533,509,541,537,531,519,520,498,549,0,532,488,540],
[500,456,507,496,510,512,490,485,488,469,0,462,496],
[536,499,548,526,500,497,500,517,529,513,539,0,500],
[491,480,499,483,486,515,503,464,486,461,505,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,530,496,511,502,517,522,524,503,508,515,511,512],
[471,0,494,502,485,525,500,485,505,487,516,481,523],
[505,507,0,495,507,527,496,496,521,492,510,496,507],
[490,499,506,0,500,520,501,505,513,486,511,479,503],
[499,516,494,501,0,505,488,504,513,492,517,500,481],
[484,476,474,481,496,0,495,494,497,470,505,480,484],
[479,501,505,500,513,506,0,514,497,483,521,502,505],
[477,516,505,496,497,507,487,0,493,501,497,472,507],
[498,496,480,488,488,504,504,508,0,480,487,483,469],
[493,514,509,515,509,531,518,500,521,0,524,509,514],
[486,485,491,490,484,496,480,504,514,477,0,482,502],
[490,520,505,522,501,521,499,529,518,492,519,0,503],
[489,478,494,498,520,517,496,494,532,487,499,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,536,525,510,490,519,491,510,507,515,526,522,527],
[465,0,504,469,452,477,460,515,477,506,486,494,485],
[476,497,0,454,424,464,439,467,473,460,508,494,464],
[491,532,547,0,510,500,500,510,547,506,537,533,556],
[511,549,577,491,0,506,505,505,520,539,533,534,532],
[482,524,537,501,495,0,494,524,524,505,524,529,508],
[510,541,562,501,496,507,0,526,525,521,539,520,545],
[491,486,534,491,496,477,475,0,523,517,505,521,514],
[494,524,528,454,481,477,476,478,0,476,530,509,509],
[486,495,541,495,462,496,480,484,525,0,528,502,511],
[475,515,493,464,468,477,462,496,471,473,0,512,511],
[479,507,507,468,467,472,481,480,492,499,489,0,520],
[474,516,537,445,469,493,456,487,492,490,490,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,519,545,535,511,464,539,512,493,500,536,488],
[490,0,505,536,502,456,516,521,496,511,492,551,472],
[482,496,0,476,505,459,420,500,511,479,473,518,480],
[456,465,525,0,484,464,439,478,471,462,485,480,481],
[466,499,496,517,0,460,452,500,509,498,496,533,505],
[490,545,542,537,541,0,495,553,541,515,515,553,515],
[537,485,581,562,549,506,0,535,532,506,518,578,529],
[462,480,501,523,501,448,466,0,493,466,449,507,474],
[489,505,490,530,492,460,469,508,0,494,473,515,470],
[508,490,522,539,503,486,495,535,507,0,518,556,472],
[501,509,528,516,505,486,483,552,528,483,0,534,495],
[465,450,483,521,468,448,423,494,486,445,467,0,464],
[513,529,521,520,496,486,472,527,531,529,506,537,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,441,443,408,468,410,480,450,454,442,420,386],
[542,0,506,492,440,548,442,531,503,530,534,524,451],
[560,495,0,522,535,525,496,541,435,495,446,422,492],
[558,509,479,0,483,464,504,531,443,463,468,452,440],
[593,561,466,518,0,538,490,498,516,538,543,456,515],
[533,453,476,537,463,0,448,504,436,523,460,476,499],
[591,559,505,497,511,553,0,526,501,526,514,463,433],
[521,470,460,470,503,497,475,0,411,480,450,472,480],
[551,498,566,558,485,565,500,590,0,580,546,515,465],
[547,471,506,538,463,478,475,521,421,0,509,463,471],
[559,467,555,533,458,541,487,551,455,492,0,485,509],
[581,477,579,549,545,525,538,529,486,538,516,0,505],
[615,550,509,561,486,502,568,521,536,530,492,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,495,507,475,475,473,485,473,489,509,491,507],
[483,0,494,500,506,456,506,498,487,488,472,482,519],
[506,507,0,467,481,496,492,516,481,497,482,506,536],
[494,501,534,0,495,480,497,523,489,468,498,497,506],
[526,495,520,506,0,487,538,509,487,510,523,510,540],
[526,545,505,521,514,0,501,531,515,506,498,503,535],
[528,495,509,504,463,500,0,503,471,501,502,492,495],
[516,503,485,478,492,470,498,0,464,500,489,484,493],
[528,514,520,512,514,486,530,537,0,532,525,541,568],
[512,513,504,533,491,495,500,501,469,0,495,492,507],
[492,529,519,503,478,503,499,512,476,506,0,493,516],
[510,519,495,504,491,498,509,517,460,509,508,0,508],
[494,482,465,495,461,466,506,508,433,494,485,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,465,467,483,486,506,461,509,492,472,514,512],
[521,0,503,490,476,502,508,497,520,491,479,490,507],
[536,498,0,485,461,504,521,495,498,492,489,528,485],
[534,511,516,0,493,527,508,509,525,497,501,527,515],
[518,525,540,508,0,513,531,495,558,499,531,507,533],
[515,499,497,474,488,0,527,496,493,459,474,480,474],
[495,493,480,493,470,474,0,477,493,468,487,493,509],
[540,504,506,492,506,505,524,0,514,507,497,492,521],
[492,481,503,476,443,508,508,487,0,487,473,497,497],
[509,510,509,504,502,542,533,494,514,0,514,517,519],
[529,522,512,500,470,527,514,504,528,487,0,538,538],
[487,511,473,474,494,521,508,509,504,484,463,0,527],
[489,494,516,486,468,527,492,480,504,482,463,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,516,512,514,497,499,509,507,521,491,510,497],
[504,0,516,503,498,516,502,507,513,532,486,535,513],
[485,485,0,491,510,486,491,506,495,509,496,494,489],
[489,498,510,0,508,532,507,506,522,553,515,515,502],
[487,503,491,493,0,519,491,491,477,494,479,492,491],
[504,485,515,469,482,0,480,510,498,506,475,522,475],
[502,499,510,494,510,521,0,488,512,536,515,514,535],
[492,494,495,495,510,491,513,0,502,523,480,514,518],
[494,488,506,479,524,503,489,499,0,543,505,524,514],
[480,469,492,448,507,495,465,478,458,0,475,496,468],
[510,515,505,486,522,526,486,521,496,526,0,508,513],
[491,466,507,486,509,479,487,487,477,505,493,0,510],
[504,488,512,499,510,526,466,483,487,533,488,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,494,511,477,527,511,512,506,484,506,525,500],
[506,0,526,521,528,505,520,526,513,511,497,516,516],
[507,475,0,486,492,487,497,496,491,478,490,504,490],
[490,480,515,0,493,496,504,503,487,470,488,496,482],
[524,473,509,508,0,499,536,528,494,491,499,527,487],
[474,496,514,505,502,0,510,508,484,501,501,509,523],
[490,481,504,497,465,491,0,483,488,457,470,508,460],
[489,475,505,498,473,493,518,0,472,468,483,496,502],
[495,488,510,514,507,517,513,529,0,506,528,500,492],
[517,490,523,531,510,500,544,533,495,0,526,529,502],
[495,504,511,513,502,500,531,518,473,475,0,492,490],
[476,485,497,505,474,492,493,505,501,472,509,0,475],
[501,485,511,519,514,478,541,499,509,499,511,526,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,539,524,541,500,553,510,471,557,523,590,525],
[492,0,562,522,513,516,549,470,512,513,510,552,512],
[462,439,0,520,463,516,540,571,448,527,434,441,475],
[477,479,481,0,537,517,515,544,334,537,477,550,470],
[460,488,538,464,0,487,513,553,443,512,527,565,459],
[501,485,485,484,514,0,557,586,424,478,480,580,520],
[448,452,461,486,488,444,0,509,372,515,448,540,463],
[491,531,430,457,448,415,492,0,415,489,475,523,470],
[530,489,553,667,558,577,629,586,0,568,564,559,651],
[444,488,474,464,489,523,486,512,433,0,459,499,446],
[478,491,567,524,474,521,553,526,437,542,0,551,489],
[411,449,560,451,436,421,461,478,442,502,450,0,424],
[476,489,526,531,542,481,538,531,350,555,512,577,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,490,513,495,507,492,497,499,514,481,487,494],
[495,0,487,495,488,495,478,494,496,498,462,473,481],
[511,514,0,516,491,514,489,501,501,513,505,491,513],
[488,506,485,0,474,498,479,490,504,471,458,492,486],
[506,513,510,527,0,541,511,488,520,511,483,513,521],
[494,506,487,503,460,0,490,488,510,521,490,477,490],
[509,523,512,522,490,511,0,509,517,515,494,515,492],
[504,507,500,511,513,513,492,0,503,509,507,492,503],
[502,505,500,497,481,491,484,498,0,510,481,482,482],
[487,503,488,530,490,480,486,492,491,0,486,474,493],
[520,539,496,543,518,511,507,494,520,515,0,496,518],
[514,528,510,509,488,524,486,509,519,527,505,0,505],
[507,520,488,515,480,511,509,498,519,508,483,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,500,528,506,511,540,517,503,549,511,530,520],
[510,0,493,534,543,519,507,523,513,517,499,540,510],
[501,508,0,507,558,514,506,520,536,525,487,557,522],
[473,467,494,0,505,457,502,487,513,495,474,517,491],
[495,458,443,496,0,471,475,468,481,479,465,483,490],
[490,482,487,544,530,0,491,527,508,502,480,521,495],
[461,494,495,499,526,510,0,519,515,500,515,510,509],
[484,478,481,514,533,474,482,0,491,505,481,520,501],
[498,488,465,488,520,493,486,510,0,501,480,514,487],
[452,484,476,506,522,499,501,496,500,0,505,545,464],
[490,502,514,527,536,521,486,520,521,496,0,539,516],
[471,461,444,484,518,480,491,481,487,456,462,0,497],
[481,491,479,510,511,506,492,500,514,537,485,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,484,549,543,528,506,496,513,538,519,511,532],
[506,0,506,510,520,482,488,486,510,513,493,416,482],
[517,495,0,521,525,485,492,477,460,503,486,493,507],
[452,491,480,0,508,471,467,479,457,516,427,442,490],
[458,481,476,493,0,490,431,462,436,504,460,440,447],
[473,519,516,530,511,0,500,515,519,530,507,460,516],
[495,513,509,534,570,501,0,517,499,513,533,478,520],
[505,515,524,522,539,486,484,0,514,517,503,513,508],
[488,491,541,544,565,482,502,487,0,556,505,461,516],
[463,488,498,485,497,471,488,484,445,0,455,497,472],
[482,508,515,574,541,494,468,498,496,546,0,508,503],
[490,585,508,559,561,541,523,488,540,504,493,0,510],
[469,519,494,511,554,485,481,493,485,529,498,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,389,296,491,518,469,569,524,509,622,425,495],
[595,0,340,299,448,530,527,679,610,556,635,551,413],
[612,661,0,471,577,580,749,746,556,558,671,499,530],
[705,702,530,0,582,506,498,579,582,434,611,517,515],
[510,553,424,419,0,492,511,563,454,513,664,516,250],
[483,471,421,495,509,0,521,571,655,669,649,574,533],
[532,474,252,503,490,480,0,561,500,521,628,495,432],
[432,322,255,422,438,430,440,0,524,589,559,405,340],
[477,391,445,419,547,346,501,477,0,484,519,504,406],
[492,445,443,567,488,332,480,412,517,0,615,461,390],
[379,366,330,390,337,352,373,442,482,386,0,388,313],
[576,450,502,484,485,427,506,596,497,540,613,0,480],
[506,588,471,486,751,468,569,661,595,611,688,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,401,399,294,533,425,255,461,211,369,410,228],
[778,0,565,329,470,848,509,593,545,549,530,690,481],
[600,436,0,161,569,480,437,199,356,493,345,489,411],
[602,672,840,0,653,842,689,575,439,599,656,663,495],
[707,531,432,348,0,576,441,386,537,414,520,608,363],
[468,153,521,159,425,0,303,230,319,396,404,393,294],
[576,492,564,312,560,698,0,470,589,576,415,422,422],
[746,408,802,426,615,771,531,0,595,557,594,663,533],
[540,456,645,562,464,682,412,406,0,475,682,583,453],
[790,452,508,402,587,605,425,444,526,0,509,516,425],
[632,471,656,345,481,597,586,407,319,492,0,438,323],
[591,311,512,338,393,608,579,338,418,485,563,0,244],
[773,520,590,506,638,707,579,468,548,576,678,757,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,525,442,556,463,456,529,498,478,511,609,462,444],
[476,0,467,518,435,443,456,453,437,460,539,444,418],
[559,534,0,535,464,504,487,535,420,435,518,455,504],
[445,483,466,0,450,458,485,470,429,477,529,489,448],
[538,566,537,551,0,565,510,539,499,492,595,558,523],
[545,558,497,543,436,0,570,509,490,472,577,481,494],
[472,545,514,516,491,431,0,511,481,479,616,411,453],
[503,548,466,531,462,492,490,0,463,535,531,466,539],
[523,564,581,572,502,511,520,538,0,560,614,513,489],
[490,541,566,524,509,529,522,466,441,0,555,504,470],
[392,462,483,472,406,424,385,470,387,446,0,412,460],
[539,557,546,512,443,520,590,535,488,497,589,0,531],
[557,583,497,553,478,507,548,462,512,531,541,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,510,535,516,488,493,536,518,541,554,537,544],
[501,0,517,543,490,506,540,574,518,532,582,525,524],
[491,484,0,457,479,523,554,538,496,508,528,522,480],
[466,458,544,0,476,480,513,523,507,523,546,452,498],
[485,511,522,525,0,473,511,562,510,550,536,554,503],
[513,495,478,521,528,0,542,515,485,536,579,511,513],
[508,461,447,488,490,459,0,538,509,491,529,489,471],
[465,427,463,478,439,486,463,0,478,463,478,499,462],
[483,483,505,494,491,516,492,523,0,510,545,508,538],
[460,469,493,478,451,465,510,538,491,0,503,487,497],
[447,419,473,455,465,422,472,523,456,498,0,491,496],
[464,476,479,549,447,490,512,502,493,514,510,0,537],
[457,477,521,503,498,488,530,539,463,504,505,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,495,520,522,510,491,489,507,519,512,495,479],
[485,0,459,486,508,479,472,474,496,496,462,493,476],
[506,542,0,496,530,493,495,482,488,513,489,484,498],
[481,515,505,0,532,493,492,485,504,502,499,478,495],
[479,493,471,469,0,487,496,475,478,507,491,486,481],
[491,522,508,508,514,0,495,502,501,537,504,496,506],
[510,529,506,509,505,506,0,467,494,530,508,500,503],
[512,527,519,516,526,499,534,0,521,527,499,518,513],
[494,505,513,497,523,500,507,480,0,507,486,487,477],
[482,505,488,499,494,464,471,474,494,0,468,479,457],
[489,539,512,502,510,497,493,502,515,533,0,485,500],
[506,508,517,523,515,505,501,483,514,522,516,0,503],
[522,525,503,506,520,495,498,488,524,544,501,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,540,509,537,532,532,496,530,508,522,577,528,510],
[461,0,486,507,492,470,496,507,498,474,533,527,464],
[492,515,0,518,507,507,506,501,460,461,546,540,490],
[464,494,483,0,491,492,470,482,512,491,546,555,491],
[469,509,494,510,0,479,504,512,514,505,589,542,498],
[469,531,494,509,522,0,491,527,527,500,581,536,509],
[505,505,495,531,497,510,0,497,543,486,542,531,512],
[471,494,500,519,489,474,504,0,486,520,562,493,505],
[493,503,541,489,487,474,458,515,0,481,555,540,499],
[479,527,540,510,496,501,515,481,520,0,569,538,536],
[424,468,455,455,412,420,459,439,446,432,0,511,455],
[473,474,461,446,459,465,470,508,461,463,490,0,442],
[491,537,511,510,503,492,489,496,502,465,546,559,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,522,513,498,495,498,526,510,515,503,501,498],
[512,0,522,533,485,502,512,541,518,534,528,507,507],
[479,479,0,501,483,480,490,518,529,505,497,515,485],
[488,468,500,0,477,457,490,495,505,491,498,494,498],
[503,516,518,524,0,507,505,529,519,507,532,497,501],
[506,499,521,544,494,0,511,526,528,522,524,512,523],
[503,489,511,511,496,490,0,518,521,511,493,512,494],
[475,460,483,506,472,475,483,0,503,500,503,501,484],
[491,483,472,496,482,473,480,498,0,487,486,493,504],
[486,467,496,510,494,479,490,501,514,0,512,523,491],
[498,473,504,503,469,477,508,498,515,489,0,506,491],
[500,494,486,507,504,489,489,500,508,478,495,0,501],
[503,494,516,503,500,478,507,517,497,510,510,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,444,387,417,498,446,455,497,464,434,437,461],
[491,0,512,465,468,508,473,505,548,521,502,435,484],
[557,489,0,419,471,496,456,498,501,483,481,443,517],
[614,536,582,0,509,554,514,515,631,553,539,495,576],
[584,533,530,492,0,514,506,500,575,513,542,499,523],
[503,493,505,447,487,0,458,489,527,502,455,478,508],
[555,528,545,487,495,543,0,532,561,497,488,508,533],
[546,496,503,486,501,512,469,0,526,516,491,465,502],
[504,453,500,370,426,474,440,475,0,477,434,434,499],
[537,480,518,448,488,499,504,485,524,0,507,470,506],
[567,499,520,462,459,546,513,510,567,494,0,484,521],
[564,566,558,506,502,523,493,536,567,531,517,0,545],
[540,517,484,425,478,493,468,499,502,495,480,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,516,514,535,525,505,458,516,541,510,471,458],
[531,0,471,517,444,491,505,455,528,473,494,506,456],
[485,530,0,525,479,520,496,486,526,497,515,523,452],
[487,484,476,0,499,510,447,456,517,475,477,496,449],
[466,557,522,502,0,515,508,509,518,494,516,500,473],
[476,510,481,491,486,0,463,440,495,486,486,471,439],
[496,496,505,554,493,538,0,471,553,525,554,504,468],
[543,546,515,545,492,561,530,0,517,554,531,494,528],
[485,473,475,484,483,506,448,484,0,459,514,510,445],
[460,528,504,526,507,515,476,447,542,0,531,491,505],
[491,507,486,524,485,515,447,470,487,470,0,434,468],
[530,495,478,505,501,530,497,507,491,510,567,0,473],
[543,545,549,552,528,562,533,473,556,496,533,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,440,531,504,465,538,613,527,483,486,459,555],
[492,0,452,576,548,561,581,636,578,599,502,476,599],
[561,549,0,580,514,574,621,660,545,530,460,608,609],
[470,425,421,0,502,481,541,608,455,458,353,469,532],
[497,453,487,499,0,501,564,605,582,578,392,534,562],
[536,440,427,520,500,0,557,546,436,540,447,548,505],
[463,420,380,460,437,444,0,530,437,508,380,408,492],
[388,365,341,393,396,455,471,0,394,389,363,421,383],
[474,423,456,546,419,565,564,607,0,514,398,509,529],
[518,402,471,543,423,461,493,612,487,0,441,438,480],
[515,499,541,648,609,554,621,638,603,560,0,620,587],
[542,525,393,532,467,453,593,580,492,563,381,0,511],
[446,402,392,469,439,496,509,618,472,521,414,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,519,497,490,476,496,515,513,482,490,503,501,494],
[482,0,458,463,460,457,477,471,470,455,485,454,453],
[504,543,0,494,495,504,517,516,511,488,520,479,508],
[511,538,507,0,498,500,495,516,502,494,506,511,484],
[525,541,506,503,0,516,536,496,527,525,528,511,507],
[505,544,497,501,485,0,498,482,499,507,513,506,499],
[486,524,484,506,465,503,0,492,479,505,480,486,482],
[488,530,485,485,505,519,509,0,514,510,523,510,487],
[519,531,490,499,474,502,522,487,0,496,503,496,490],
[511,546,513,507,476,494,496,491,505,0,497,498,499],
[498,516,481,495,473,488,521,478,498,504,0,509,495],
[500,547,522,490,490,495,515,491,505,503,492,0,489],
[507,548,493,517,494,502,519,514,511,502,506,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,554,482,438,488,513,509,463,588,449,551,472,564],
[447,0,396,435,501,430,466,450,507,334,507,447,449],
[519,605,0,486,476,559,581,450,563,465,513,543,563],
[563,566,515,0,468,564,597,512,546,496,614,530,543],
[513,500,525,533,0,544,567,605,528,516,546,493,518],
[488,571,442,437,457,0,548,505,516,471,544,482,504],
[492,535,420,404,434,453,0,380,447,358,494,452,440],
[538,551,551,489,396,496,621,0,466,465,537,481,496],
[413,494,438,455,473,485,554,535,0,383,482,464,521],
[552,667,536,505,485,530,643,536,618,0,626,539,605],
[450,494,488,387,455,457,507,464,519,375,0,416,488],
[529,554,458,471,508,519,549,520,537,462,585,0,448],
[437,552,438,458,483,497,561,505,480,396,513,553,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,525,489,545,476,511,449,531,514,563,499,504],
[534,0,585,561,478,476,534,469,561,599,543,532,501],
[476,416,0,545,501,434,457,489,537,578,501,500,460],
[512,440,456,0,464,436,475,470,503,517,517,527,518],
[456,523,500,537,0,499,543,540,553,529,559,502,437],
[525,525,567,565,502,0,572,493,546,556,558,539,555],
[490,467,544,526,458,429,0,492,536,539,520,519,480],
[552,532,512,531,461,508,509,0,584,541,534,529,513],
[470,440,464,498,448,455,465,417,0,495,458,471,436],
[487,402,423,484,472,445,462,460,506,0,509,529,424],
[438,458,500,484,442,443,481,467,543,492,0,472,472],
[502,469,501,474,499,462,482,472,530,472,529,0,490],
[497,500,541,483,564,446,521,488,565,577,529,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,538,521,497,482,552,518,508,538,514,539,521],
[487,0,493,499,472,468,519,499,479,513,502,520,519],
[463,508,0,496,471,487,533,491,504,514,477,502,505],
[480,502,505,0,450,468,526,455,474,509,456,500,496],
[504,529,530,551,0,495,576,542,507,540,464,526,530],
[519,533,514,533,506,0,539,540,515,528,493,526,533],
[449,482,468,475,425,462,0,465,469,479,443,477,497],
[483,502,510,546,459,461,536,0,496,516,445,509,531],
[493,522,497,527,494,486,532,505,0,539,488,505,538],
[463,488,487,492,461,473,522,485,462,0,441,489,501],
[487,499,524,545,537,508,558,556,513,560,0,531,529],
[462,481,499,501,475,475,524,492,496,512,470,0,507],
[480,482,496,505,471,468,504,470,463,500,472,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,509,526,503,497,499,526,501,525,533,509,541],
[495,0,520,511,513,482,512,503,499,540,518,513,510],
[492,481,0,536,493,497,483,514,514,529,512,483,493],
[475,490,465,0,490,456,453,465,465,526,499,477,452],
[498,488,508,511,0,473,513,483,508,542,523,492,510],
[504,519,504,545,528,0,488,492,520,565,527,516,488],
[502,489,518,548,488,513,0,543,501,549,516,545,529],
[475,498,487,536,518,509,458,0,481,519,504,502,509],
[500,502,487,536,493,481,500,520,0,525,521,531,520],
[476,461,472,475,459,436,452,482,476,0,486,461,479],
[468,483,489,502,478,474,485,497,480,515,0,462,471],
[492,488,518,524,509,485,456,499,470,540,539,0,507],
[460,491,508,549,491,513,472,492,481,522,530,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,513,511,541,517,476,481,515,482,470,493,467,496],
[488,0,493,545,495,487,518,506,508,500,511,465,471],
[490,508,0,507,477,470,478,510,500,474,502,466,501],
[460,456,494,0,485,449,467,501,449,441,475,388,488],
[484,506,524,516,0,506,492,549,481,504,485,490,507],
[525,514,531,552,495,0,504,540,507,499,492,507,522],
[520,483,523,534,509,497,0,517,502,484,506,498,528],
[486,495,491,500,452,461,484,0,446,436,487,454,466],
[519,493,501,552,520,494,499,555,0,498,535,445,504],
[531,501,527,560,497,502,517,565,503,0,560,490,531],
[508,490,499,526,516,509,495,514,466,441,0,449,496],
[534,536,535,613,511,494,503,547,556,511,552,0,512],
[505,530,500,513,494,479,473,535,497,470,505,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,567,516,475,500,431,505,500,529,578,488,500,549],
[434,0,492,456,514,466,476,492,504,535,460,465,483],
[485,509,0,462,476,529,478,526,551,528,452,503,479],
[526,545,539,0,605,515,457,534,504,583,501,514,520],
[501,487,525,396,0,472,520,444,491,549,468,450,415],
[570,535,472,486,529,0,506,527,509,548,514,538,518],
[496,525,523,544,481,495,0,518,528,556,539,537,513],
[501,509,475,467,557,474,483,0,503,489,530,489,472],
[472,497,450,497,510,492,473,498,0,493,520,513,497],
[423,466,473,418,452,453,445,512,508,0,448,455,432],
[513,541,549,500,533,487,462,471,481,553,0,457,545],
[501,536,498,487,551,463,464,512,488,546,544,0,511],
[452,518,522,481,586,483,488,529,504,569,456,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,548,489,491,502,513,497,486,512,523,483,506],
[495,0,521,508,491,489,518,513,461,504,526,504,494],
[453,480,0,469,472,489,469,478,468,467,482,477,439],
[512,493,532,0,511,489,494,518,506,502,521,517,489],
[510,510,529,490,0,481,456,514,503,503,510,480,512],
[499,512,512,512,520,0,497,509,495,496,548,492,462],
[488,483,532,507,545,504,0,507,485,492,519,480,480],
[504,488,523,483,487,492,494,0,473,491,500,502,496],
[515,540,533,495,498,506,516,528,0,523,519,508,511],
[489,497,534,499,498,505,509,510,478,0,514,511,505],
[478,475,519,480,491,453,482,501,482,487,0,479,487],
[518,497,524,484,521,509,521,499,493,490,522,0,517],
[495,507,562,512,489,539,521,505,490,496,514,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,523,509,499,525,518,477,509,464,485,523,491],
[502,0,475,519,538,535,456,493,514,484,512,531,509],
[478,526,0,511,487,496,492,506,492,481,487,511,469],
[492,482,490,0,473,486,483,454,496,477,487,512,485],
[502,463,514,528,0,540,478,471,517,452,486,496,490],
[476,466,505,515,461,0,441,457,481,471,476,510,463],
[483,545,509,518,523,560,0,517,546,503,519,547,510],
[524,508,495,547,530,544,484,0,530,476,509,505,534],
[492,487,509,505,484,520,455,471,0,507,480,523,507],
[537,517,520,524,549,530,498,525,494,0,532,530,527],
[516,489,514,514,515,525,482,492,521,469,0,514,522],
[478,470,490,489,505,491,454,496,478,471,487,0,487],
[510,492,532,516,511,538,491,467,494,474,479,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,487,495,505,479,487,480,503,507,504,519,506],
[521,0,514,515,514,506,491,487,516,504,504,512,492],
[514,487,0,498,507,487,496,497,516,497,516,517,490],
[506,486,503,0,511,480,501,497,484,513,507,509,482],
[496,487,494,490,0,518,480,487,519,495,512,532,505],
[522,495,514,521,483,0,493,487,502,498,502,513,495],
[514,510,505,500,521,508,0,499,522,507,503,518,502],
[521,514,504,504,514,514,502,0,512,487,525,519,517],
[498,485,485,517,482,499,479,489,0,484,523,510,494],
[494,497,504,488,506,503,494,514,517,0,531,519,537],
[497,497,485,494,489,499,498,476,478,470,0,483,510],
[482,489,484,492,469,488,483,482,491,482,518,0,487],
[495,509,511,519,496,506,499,484,507,464,491,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,558,590,614,714,457,521,450,633,560,693,583,547],
[443,0,538,601,569,454,660,477,582,566,565,506,659],
[411,463,0,479,600,389,445,488,478,411,590,540,601],
[387,400,522,0,486,471,305,286,478,474,402,394,361],
[287,432,401,515,0,556,376,440,469,362,372,447,307],
[544,547,612,530,445,0,515,533,525,470,607,488,497],
[480,341,556,696,625,486,0,433,546,517,531,548,644],
[551,524,513,715,561,468,568,0,674,618,689,579,597],
[368,419,523,523,532,476,455,327,0,355,514,549,403],
[441,435,590,527,639,531,484,383,646,0,556,484,561],
[308,436,411,599,629,394,470,312,487,445,0,457,495],
[418,495,461,607,554,513,453,422,452,517,544,0,630],
[454,342,400,640,694,504,357,404,598,440,506,371,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,509,549,488,491,558,503,499,448,484,530,517],
[521,0,520,550,500,481,534,523,526,487,545,518,552],
[492,481,0,554,513,473,549,519,544,506,546,466,522],
[452,451,447,0,459,459,525,495,498,448,497,488,487],
[513,501,488,542,0,485,535,535,523,488,537,507,542],
[510,520,528,542,516,0,585,488,554,476,518,526,493],
[443,467,452,476,466,416,0,454,499,425,521,455,458],
[498,478,482,506,466,513,547,0,494,451,534,461,503],
[502,475,457,503,478,447,502,507,0,482,510,474,510],
[553,514,495,553,513,525,576,550,519,0,549,488,568],
[517,456,455,504,464,483,480,467,491,452,0,467,487],
[471,483,535,513,494,475,546,540,527,513,534,0,525],
[484,449,479,514,459,508,543,498,491,433,514,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,422,460,495,489,391,541,501,512,494,482,549],
[515,0,476,506,475,490,387,554,462,500,474,502,487],
[579,525,0,501,537,561,437,544,444,531,500,458,533],
[541,495,500,0,437,515,395,544,397,496,443,398,505],
[506,526,464,564,0,461,430,573,462,521,524,516,578],
[512,511,440,486,540,0,401,469,415,549,518,509,482],
[610,614,564,606,571,600,0,585,495,545,585,510,573],
[460,447,457,457,428,532,416,0,449,462,443,415,503],
[500,539,557,604,539,586,506,552,0,571,569,504,574],
[489,501,470,505,480,452,456,539,430,0,442,474,530],
[507,527,501,558,477,483,416,558,432,559,0,547,582],
[519,499,543,603,485,492,491,586,497,527,454,0,504],
[452,514,468,496,423,519,428,498,427,471,419,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,557,527,524,507,502,506,528,516,535,513,489,502],
[444,0,524,512,541,504,507,510,490,515,495,500,501],
[474,477,0,495,533,476,478,507,493,491,511,490,503],
[477,489,506,0,494,473,503,507,492,491,496,479,482],
[494,460,468,507,0,464,489,478,483,497,480,489,502],
[499,497,525,528,537,0,530,524,510,537,506,500,533],
[495,494,523,498,512,471,0,510,522,541,497,513,521],
[473,491,494,494,523,477,491,0,503,504,512,488,482],
[485,511,508,509,518,491,479,498,0,495,498,509,524],
[466,486,510,510,504,464,460,497,506,0,492,497,482],
[488,506,490,505,521,495,504,489,503,509,0,504,520],
[512,501,511,522,512,501,488,513,492,504,497,0,525],
[499,500,498,519,499,468,480,519,477,519,481,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,523,460,526,518,494,520,545,479,559,506,511],
[523,0,562,517,560,503,484,511,582,491,547,536,488],
[478,439,0,472,455,517,454,474,562,437,510,466,469],
[541,484,529,0,499,508,517,502,619,449,469,481,503],
[475,441,546,502,0,492,414,443,527,462,480,442,453],
[483,498,484,493,509,0,475,509,534,517,494,489,464],
[507,517,547,484,587,526,0,501,594,502,518,546,459],
[481,490,527,499,558,492,500,0,580,522,541,507,505],
[456,419,439,382,474,467,407,421,0,410,453,382,457],
[522,510,564,552,539,484,499,479,591,0,501,527,519],
[442,454,491,532,521,507,483,460,548,500,0,486,479],
[495,465,535,520,559,512,455,494,619,474,515,0,519],
[490,513,532,498,548,537,542,496,544,482,522,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,526,549,560,568,518,518,534,498,539,506,523],
[513,0,505,489,537,570,524,473,519,503,508,482,498],
[475,496,0,548,511,537,489,507,500,474,457,499,470],
[452,512,453,0,559,512,451,475,499,518,517,483,493],
[441,464,490,442,0,521,416,444,450,456,458,485,471],
[433,431,464,489,480,0,469,413,480,426,486,434,479],
[483,477,512,550,585,532,0,509,525,560,527,503,496],
[483,528,494,526,557,588,492,0,538,487,480,529,495],
[467,482,501,502,551,521,476,463,0,473,465,474,483],
[503,498,527,483,545,575,441,514,528,0,522,532,500],
[462,493,544,484,543,515,474,521,536,479,0,496,515],
[495,519,502,518,516,567,498,472,527,469,505,0,497],
[478,503,531,508,530,522,505,506,518,501,486,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,519,495,459,483,471,478,508,485,474,472,471,488],
[482,0,485,485,477,491,458,464,487,504,443,465,517],
[506,516,0,503,503,511,482,524,520,494,491,533,530],
[542,516,498,0,481,508,502,503,555,536,490,516,563],
[518,524,498,520,0,523,494,532,514,516,494,512,528],
[530,510,490,493,478,0,497,504,493,511,501,501,540],
[523,543,519,499,507,504,0,547,539,547,503,493,528],
[493,537,477,498,469,497,454,0,514,515,470,517,526],
[516,514,481,446,487,508,462,487,0,475,501,500,541],
[527,497,507,465,485,490,454,486,526,0,502,513,498],
[529,558,510,511,507,500,498,531,500,499,0,496,517],
[530,536,468,485,489,500,508,484,501,488,505,0,514],
[513,484,471,438,473,461,473,475,460,503,484,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,524,457,502,464,466,460,534,481,507,504,495],
[505,0,541,473,505,497,490,537,562,526,508,535,539],
[477,460,0,443,462,442,481,459,492,480,470,495,463],
[544,528,558,0,495,506,505,525,530,491,504,513,518],
[499,496,539,506,0,456,489,467,568,487,496,500,478],
[537,504,559,495,545,0,494,479,550,440,499,576,495],
[535,511,520,496,512,507,0,523,578,493,563,487,527],
[541,464,542,476,534,522,478,0,596,471,498,582,549],
[467,439,509,471,433,451,423,405,0,413,463,463,430],
[520,475,521,510,514,561,508,530,588,0,506,540,526],
[494,493,531,497,505,502,438,503,538,495,0,480,489],
[497,466,506,488,501,425,514,419,538,461,521,0,507],
[506,462,538,483,523,506,474,452,571,475,512,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,485,481,473,478,474,434,479,472,499,521,491],
[489,0,495,454,433,488,439,393,503,486,500,484,490],
[516,506,0,455,479,463,484,445,470,500,539,484,511],
[520,547,546,0,476,467,508,440,487,469,527,496,521],
[528,568,522,525,0,466,516,431,499,495,526,511,490],
[523,513,538,534,535,0,534,462,538,517,544,568,508],
[527,562,517,493,485,467,0,477,474,462,540,521,529],
[567,608,556,561,570,539,524,0,575,491,578,583,537],
[522,498,531,514,502,463,527,426,0,523,495,495,488],
[529,515,501,532,506,484,539,510,478,0,554,518,531],
[502,501,462,474,475,457,461,423,506,447,0,492,479],
[480,517,517,505,490,433,480,418,506,483,509,0,498],
[510,511,490,480,511,493,472,464,513,470,522,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,520,521,493,552,541,505,499,541,500,540,540,537],
[481,0,456,471,507,473,439,478,491,481,456,477,498],
[480,545,0,520,542,512,500,493,508,540,538,529,514],
[508,530,481,0,542,515,499,486,533,496,537,515,482],
[449,494,459,459,0,464,452,490,499,482,498,493,480],
[460,528,489,486,537,0,449,501,525,491,512,514,495],
[496,562,501,502,549,552,0,530,538,512,503,531,520],
[502,523,508,515,511,500,471,0,546,501,521,498,497],
[460,510,493,468,502,476,463,455,0,482,522,509,480],
[501,520,461,505,519,510,489,500,519,0,520,530,514],
[461,545,463,464,503,489,498,480,479,481,0,503,462],
[461,524,472,486,508,487,470,503,492,471,498,0,476],
[464,503,487,519,521,506,481,504,521,487,539,525,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,531,508,499,503,507,510,495,515,516,524,508,511],
[470,0,477,518,494,528,509,470,494,504,501,508,492],
[493,524,0,516,495,527,506,505,514,521,508,495,497],
[502,483,485,0,502,529,520,463,516,496,505,502,494],
[498,507,506,499,0,501,535,481,503,497,495,495,493],
[494,473,474,472,500,0,525,486,502,503,502,507,512],
[491,492,495,481,466,476,0,464,497,501,509,494,472],
[506,531,496,538,520,515,537,0,511,532,521,532,506],
[486,507,487,485,498,499,504,490,0,490,520,497,486],
[485,497,480,505,504,498,500,469,511,0,502,491,476],
[477,500,493,496,506,499,492,480,481,499,0,504,490],
[493,493,506,499,506,494,507,469,504,510,497,0,458],
[490,509,504,507,508,489,529,495,515,525,511,543,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,575,626,465,589,559,477,416,615,496,512,616,491],
[426,0,513,443,482,670,498,478,577,434,542,526,506],
[375,488,0,391,468,531,502,399,462,428,502,403,304],
[536,558,610,0,454,681,600,463,626,669,532,531,570],
[412,519,533,547,0,597,600,451,484,517,630,515,387],
[442,331,470,320,404,0,416,341,431,452,406,433,257],
[524,503,499,401,401,585,0,473,518,559,542,542,484],
[585,523,602,538,550,660,528,0,611,581,578,501,495],
[386,424,539,375,517,570,483,390,0,399,338,354,441],
[505,567,573,332,484,549,442,420,602,0,488,427,355],
[489,459,499,469,371,595,459,423,663,513,0,509,491],
[385,475,598,470,486,568,459,500,647,574,492,0,320],
[510,495,697,431,614,744,517,506,560,646,510,681,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,516,528,500,522,521,514,491,518,521,524,507],
[513,0,489,531,517,501,504,500,491,491,523,541,515],
[485,512,0,546,514,538,506,485,493,477,509,523,487],
[473,470,455,0,466,494,494,472,443,435,505,504,465],
[501,484,487,535,0,502,499,493,466,485,472,511,457],
[479,500,463,507,499,0,470,474,477,472,501,500,468],
[480,497,495,507,502,531,0,517,494,495,518,534,480],
[487,501,516,529,508,527,484,0,490,473,501,505,487],
[510,510,508,558,535,524,507,511,0,509,514,524,490],
[483,510,524,566,516,529,506,528,492,0,533,541,504],
[480,478,492,496,529,500,483,500,487,468,0,524,499],
[477,460,478,497,490,501,467,496,477,460,477,0,482],
[494,486,514,536,544,533,521,514,511,497,502,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,538,493,455,478,458,516,531,509,498,475,526,513],
[463,0,491,407,451,447,487,469,507,481,428,493,517],
[508,510,0,493,473,473,494,510,528,524,490,494,500],
[546,594,508,0,482,504,553,574,562,520,512,538,569],
[523,550,528,519,0,484,535,546,536,529,503,571,548],
[543,554,528,497,517,0,503,536,506,554,481,530,578],
[485,514,507,448,466,498,0,492,504,523,478,525,505],
[470,532,491,427,455,465,509,0,472,509,464,479,508],
[492,494,473,439,465,495,497,529,0,507,517,528,520],
[503,520,477,481,472,447,478,492,494,0,462,494,497],
[526,573,511,489,498,520,523,537,484,539,0,523,544],
[475,508,507,463,430,471,476,522,473,507,478,0,534],
[488,484,501,432,453,423,496,493,481,504,457,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,493,494,486,483,494,513,493,503,509,466,488],
[486,0,502,469,494,495,464,495,465,491,500,466,481],
[508,499,0,460,461,459,466,488,466,471,469,477,463],
[507,532,541,0,515,489,463,475,503,497,494,472,484],
[515,507,540,486,0,482,476,502,491,496,487,488,483],
[518,506,542,512,519,0,497,516,509,529,492,521,507],
[507,537,535,538,525,504,0,517,516,540,533,493,538],
[488,506,513,526,499,485,484,0,538,495,502,487,504],
[508,536,535,498,510,492,485,463,0,489,510,498,485],
[498,510,530,504,505,472,461,506,512,0,518,463,500],
[492,501,532,507,514,509,468,499,491,483,0,484,501],
[535,535,524,529,513,480,508,514,503,538,517,0,510],
[513,520,538,517,518,494,463,497,516,501,500,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,490,472,511,477,470,511,494,518,478,499,492],
[504,0,496,500,523,527,492,476,505,486,498,495,481],
[511,505,0,489,487,518,500,481,500,489,476,521,491],
[529,501,512,0,521,478,507,503,522,511,516,527,525],
[490,478,514,480,0,484,499,499,493,508,479,498,508],
[524,474,483,523,517,0,496,490,510,470,480,498,538],
[531,509,501,494,502,505,0,494,509,511,495,500,483],
[490,525,520,498,502,511,507,0,504,491,510,498,504],
[507,496,501,479,508,491,492,497,0,527,502,536,519],
[483,515,512,490,493,531,490,510,474,0,497,512,502],
[523,503,525,485,522,521,506,491,499,504,0,513,533],
[502,506,480,474,503,503,501,503,465,489,488,0,495],
[509,520,510,476,493,463,518,497,482,499,468,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,471,470,473,491,457,498,469,505,501,486,481],
[501,0,495,464,479,474,463,496,502,502,484,436,500],
[530,506,0,493,486,495,466,492,512,510,502,492,482],
[531,537,508,0,538,471,495,523,526,545,527,498,515],
[528,522,515,463,0,472,483,517,514,531,511,504,510],
[510,527,506,530,529,0,499,523,497,553,546,512,509],
[544,538,535,506,518,502,0,488,520,525,523,498,527],
[503,505,509,478,484,478,513,0,480,513,511,471,483],
[532,499,489,475,487,504,481,521,0,498,506,489,506],
[496,499,491,456,470,448,476,488,503,0,494,465,498],
[500,517,499,474,490,455,478,490,495,507,0,491,471],
[515,565,509,503,497,489,503,530,512,536,510,0,508],
[520,501,519,486,491,492,474,518,495,503,530,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,506,497,480,491,525,477,506,530,493,469,477],
[527,0,518,508,526,521,542,463,520,560,487,476,490],
[495,483,0,469,462,494,535,491,489,514,458,483,449],
[504,493,532,0,490,497,545,478,497,538,470,487,499],
[521,475,539,511,0,513,550,514,536,551,507,507,494],
[510,480,507,504,488,0,503,480,488,533,490,490,461],
[476,459,466,456,451,498,0,462,490,527,438,503,443],
[524,538,510,523,487,521,539,0,530,565,504,492,508],
[495,481,512,504,465,513,511,471,0,511,487,485,494],
[471,441,487,463,450,468,474,436,490,0,446,444,472],
[508,514,543,531,494,511,563,497,514,555,0,513,517],
[532,525,518,514,494,511,498,509,516,557,488,0,506],
[524,511,552,502,507,540,558,493,507,529,484,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,542,567,503,523,492,519,540,464,492,504,507,522],
[459,0,519,434,541,481,507,515,457,484,501,532,513],
[434,482,0,425,485,446,496,504,441,472,489,535,509],
[498,567,576,0,529,514,496,550,471,504,485,552,534],
[478,460,516,472,0,439,515,520,468,460,473,516,517],
[509,520,555,487,562,0,572,557,512,529,499,556,528],
[482,494,505,505,486,429,0,517,507,494,475,529,516],
[461,486,497,451,481,444,484,0,443,472,444,491,454],
[537,544,560,530,533,489,494,558,0,555,524,562,567],
[509,517,529,497,541,472,507,529,446,0,453,552,545],
[497,500,512,516,528,502,526,557,477,548,0,567,540],
[494,469,466,449,485,445,472,510,439,449,434,0,520],
[479,488,492,467,484,473,485,547,434,456,461,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,500,493,528,511,523,485,515,485,521,474,517],
[487,0,458,515,541,515,519,499,523,515,489,485,491],
[501,543,0,520,539,526,529,519,546,517,498,513,522],
[508,486,481,0,480,493,529,475,509,506,481,439,497],
[473,460,462,521,0,501,520,473,499,478,483,460,487],
[490,486,475,508,500,0,519,467,510,494,522,459,477],
[478,482,472,472,481,482,0,446,483,507,461,456,471],
[516,502,482,526,528,534,555,0,557,550,544,460,505],
[486,478,455,492,502,491,518,444,0,514,481,447,473],
[516,486,484,495,523,507,494,451,487,0,495,418,492],
[480,512,503,520,518,479,540,457,520,506,0,467,480],
[527,516,488,562,541,542,545,541,554,583,534,0,542],
[484,510,479,504,514,524,530,496,528,509,521,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,505,493,505,482,494,497,482,491,470,495,527],
[512,0,516,509,495,491,496,513,513,480,492,494,530],
[496,485,0,474,483,498,480,471,497,471,463,488,502],
[508,492,527,0,512,499,497,510,484,464,479,500,507],
[496,506,518,489,0,485,516,509,505,485,488,488,512],
[519,510,503,502,516,0,502,510,493,499,490,485,526],
[507,505,521,504,485,499,0,503,509,480,487,491,525],
[504,488,530,491,492,491,498,0,489,480,475,488,522],
[519,488,504,517,496,508,492,512,0,488,484,504,516],
[510,521,530,537,516,502,521,521,513,0,517,499,530],
[531,509,538,522,513,511,514,526,517,484,0,492,526],
[506,507,513,501,513,516,510,513,497,502,509,0,516],
[474,471,499,494,489,475,476,479,485,471,475,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,494,481,473,472,524,507,474,484,525,487,488],
[510,0,507,503,475,475,503,498,481,525,499,497,485],
[507,494,0,508,487,500,495,530,511,514,512,504,495],
[520,498,493,0,473,480,515,487,475,500,493,465,477],
[528,526,514,528,0,505,493,485,506,521,530,490,484],
[529,526,501,521,496,0,533,514,498,522,510,500,520],
[477,498,506,486,508,468,0,498,502,478,487,509,480],
[494,503,471,514,516,487,503,0,488,482,480,476,506],
[527,520,490,526,495,503,499,513,0,503,528,500,505],
[517,476,487,501,480,479,523,519,498,0,498,476,485],
[476,502,489,508,471,491,514,521,473,503,0,486,495],
[514,504,497,536,511,501,492,525,501,525,515,0,505],
[513,516,506,524,517,481,521,495,496,516,506,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,499,481,500,507,485,508,526,498,497,522,499],
[503,0,512,482,499,487,510,484,520,472,472,475,472],
[502,489,0,498,478,496,479,476,524,464,485,482,458],
[520,519,503,0,513,502,525,509,545,529,521,509,498],
[501,502,523,488,0,503,525,511,525,501,539,523,486],
[494,514,505,499,498,0,504,517,531,503,507,529,481],
[516,491,522,476,476,497,0,494,510,490,495,502,500],
[493,517,525,492,490,484,507,0,536,493,512,522,461],
[475,481,477,456,476,470,491,465,0,449,464,476,510],
[503,529,537,472,500,498,511,508,552,0,509,511,491],
[504,529,516,480,462,494,506,489,537,492,0,509,486],
[479,526,519,492,478,472,499,479,525,490,492,0,501],
[502,529,543,503,515,520,501,540,491,510,515,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,521,544,487,491,502,481,461,472,468,480,501],
[537,0,561,557,526,489,513,526,492,531,524,515,554],
[480,440,0,508,498,458,484,463,479,485,483,485,485],
[457,444,493,0,489,440,491,460,467,505,454,473,516],
[514,475,503,512,0,492,488,489,462,502,479,505,523],
[510,512,543,561,509,0,492,496,490,487,473,497,506],
[499,488,517,510,513,509,0,506,534,504,454,495,523],
[520,475,538,541,512,505,495,0,498,470,490,495,510],
[540,509,522,534,539,511,467,503,0,509,460,486,526],
[529,470,516,496,499,514,497,531,492,0,494,489,544],
[533,477,518,547,522,528,547,511,541,507,0,509,544],
[521,486,516,528,496,504,506,506,515,512,492,0,516],
[500,447,516,485,478,495,478,491,475,457,457,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,462,480,468,457,497,504,498,488,495,505,455],
[498,0,491,481,488,506,493,513,528,514,470,541,477],
[539,510,0,513,526,507,503,521,539,513,545,539,496],
[521,520,488,0,479,507,512,495,513,530,532,507,505],
[533,513,475,522,0,511,498,507,541,522,510,517,511],
[544,495,494,494,490,0,486,501,541,525,523,512,482],
[504,508,498,489,503,515,0,508,526,531,518,527,490],
[497,488,480,506,494,500,493,0,524,503,498,520,493],
[503,473,462,488,460,460,475,477,0,483,481,498,489],
[513,487,488,471,479,476,470,498,518,0,480,502,490],
[506,531,456,469,491,478,483,503,520,521,0,527,507],
[496,460,462,494,484,489,474,481,503,499,474,0,460],
[546,524,505,496,490,519,511,508,512,511,494,541,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,518,519,486,536,453,486,496,500,498,485,485],
[501,0,524,505,576,524,514,541,578,574,527,616,467],
[483,477,0,500,502,404,500,472,499,467,481,524,419],
[482,496,501,0,500,514,577,532,500,532,500,489,445],
[515,425,499,501,0,500,465,492,467,478,413,483,471],
[465,477,597,487,501,0,529,459,561,512,506,508,457],
[548,487,501,424,536,472,0,501,521,484,499,527,457],
[515,460,529,469,509,542,500,0,480,473,497,536,462],
[505,423,502,501,534,440,480,521,0,479,489,503,438],
[501,427,534,469,523,489,517,528,522,0,522,557,528],
[503,474,520,501,588,495,502,504,512,479,0,490,493],
[516,385,477,512,518,493,474,465,498,444,511,0,452],
[516,534,582,556,530,544,544,539,563,473,508,549,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,518,532,521,508,504,495,524,503,503,512,516],
[484,0,500,502,516,504,493,487,489,479,490,482,501],
[483,501,0,504,531,500,494,473,482,522,489,489,507],
[469,499,497,0,533,489,483,467,531,497,500,483,512],
[480,485,470,468,0,479,449,474,496,477,483,470,489],
[493,497,501,512,522,0,481,508,503,512,496,497,511],
[497,508,507,518,552,520,0,489,469,502,492,496,517],
[506,514,528,534,527,493,512,0,494,529,496,520,526],
[477,512,519,470,505,498,532,507,0,511,505,495,499],
[498,522,479,504,524,489,499,472,490,0,484,471,538],
[498,511,512,501,518,505,509,505,496,517,0,498,541],
[489,519,512,518,531,504,505,481,506,530,503,0,538],
[485,500,494,489,512,490,484,475,502,463,460,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,509,503,532,518,468,480,491,445,470,492,464],
[524,0,490,512,518,520,474,504,527,465,504,481,489],
[492,511,0,509,529,549,501,520,509,492,491,486,513],
[498,489,492,0,516,489,483,484,512,475,495,486,493],
[469,483,472,485,0,462,485,447,501,453,450,448,461],
[483,481,452,512,539,0,466,483,494,498,502,502,485],
[533,527,500,518,516,535,0,497,540,484,515,524,495],
[521,497,481,517,554,518,504,0,549,506,523,524,533],
[510,474,492,489,500,507,461,452,0,471,511,490,479],
[556,536,509,526,548,503,517,495,530,0,524,501,527],
[531,497,510,506,551,499,486,478,490,477,0,502,505],
[509,520,515,515,553,499,477,477,511,500,499,0,486],
[537,512,488,508,540,516,506,468,522,474,496,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,549,492,498,506,511,555,548,558,531,478,506,514],
[452,0,492,430,479,479,507,460,460,478,426,440,505],
[509,509,0,472,514,493,498,503,504,514,469,490,500],
[503,571,529,0,531,513,532,576,522,544,511,496,533],
[495,522,487,470,0,491,497,493,502,525,464,478,498],
[490,522,508,488,510,0,529,544,521,549,463,494,525],
[446,494,503,469,504,472,0,504,494,519,453,468,444],
[453,541,498,425,508,457,497,0,528,523,453,460,518],
[443,541,497,479,499,480,507,473,0,564,479,495,521],
[470,523,487,457,476,452,482,478,437,0,457,447,501],
[523,575,532,490,537,538,548,548,522,544,0,532,564],
[495,561,511,505,523,507,533,541,506,554,469,0,559],
[487,496,501,468,503,476,557,483,480,500,437,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,481,513,482,496,473,506,483,466,506,466,517],
[489,0,504,551,513,515,492,496,495,512,519,505,501],
[520,497,0,538,529,502,512,505,503,493,517,522,536],
[488,450,463,0,477,487,475,467,467,461,491,479,492],
[519,488,472,524,0,498,500,481,479,484,495,520,507],
[505,486,499,514,503,0,496,494,513,480,493,490,501],
[528,509,489,526,501,505,0,495,497,473,492,506,510],
[495,505,496,534,520,507,506,0,495,479,510,521,497],
[518,506,498,534,522,488,504,506,0,496,516,511,512],
[535,489,508,540,517,521,528,522,505,0,533,532,518],
[495,482,484,510,506,508,509,491,485,468,0,502,479],
[535,496,479,522,481,511,495,480,490,469,499,0,487],
[484,500,465,509,494,500,491,504,489,483,522,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,517,499,492,518,499,526,517,522,502,535,513],
[500,0,536,476,484,505,503,513,490,535,503,528,525],
[484,465,0,482,482,487,474,508,480,505,476,492,505],
[502,525,519,0,517,496,495,521,500,514,492,512,518],
[509,517,519,484,0,521,522,521,505,535,495,540,507],
[483,496,514,505,480,0,480,514,487,508,500,528,495],
[502,498,527,506,479,521,0,510,497,531,484,540,509],
[475,488,493,480,480,487,491,0,501,500,470,512,484],
[484,511,521,501,496,514,504,500,0,517,473,520,526],
[479,466,496,487,466,493,470,501,484,0,473,483,516],
[499,498,525,509,506,501,517,531,528,528,0,514,498],
[466,473,509,489,461,473,461,489,481,518,487,0,490],
[488,476,496,483,494,506,492,517,475,485,503,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,474,506,514,508,499,501,491,493,477,497,482],
[521,0,501,493,515,516,498,495,508,469,492,474,504],
[527,500,0,526,539,528,487,501,489,506,489,479,500],
[495,508,475,0,506,510,470,488,482,487,477,469,477],
[487,486,462,495,0,510,488,471,485,478,484,463,482],
[493,485,473,491,491,0,462,473,480,467,483,470,492],
[502,503,514,531,513,539,0,487,515,512,498,507,515],
[500,506,500,513,530,528,514,0,508,503,523,506,515],
[510,493,512,519,516,521,486,493,0,484,507,491,494],
[508,532,495,514,523,534,489,498,517,0,500,506,520],
[524,509,512,524,517,518,503,478,494,501,0,502,514],
[504,527,522,532,538,531,494,495,510,495,499,0,482],
[519,497,501,524,519,509,486,486,507,481,487,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,524,504,512,541,550,530,534,507,480,547,493,487],
[477,0,494,491,474,537,502,477,507,501,475,470,448],
[497,507,0,493,466,493,526,499,483,521,525,487,535],
[489,510,508,0,460,505,527,481,475,493,508,478,486],
[460,527,535,541,0,515,505,513,515,516,500,499,464],
[451,464,508,496,486,0,484,467,440,460,490,472,472],
[471,499,475,474,496,517,0,481,492,486,509,453,504],
[467,524,502,520,488,534,520,0,562,516,537,477,476],
[494,494,518,526,486,561,509,439,0,482,514,484,499],
[521,500,480,508,485,541,515,485,519,0,485,505,475],
[454,526,476,493,501,511,492,464,487,516,0,470,460],
[508,531,514,523,502,529,548,524,517,496,531,0,487],
[514,553,466,515,537,529,497,525,502,526,541,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,505,396,490,519,443,442,445,482,451,453,467],
[483,0,461,427,463,526,460,473,419,431,427,511,483],
[496,540,0,465,443,479,508,466,477,458,439,512,467],
[605,574,536,0,518,542,533,535,496,483,489,572,578],
[511,538,558,483,0,515,544,479,552,521,521,542,522],
[482,475,522,459,486,0,456,513,537,467,427,472,468],
[558,541,493,468,457,545,0,500,507,504,416,592,509],
[559,528,535,466,522,488,501,0,481,471,475,561,557],
[556,582,524,505,449,464,494,520,0,522,490,529,554],
[519,570,543,518,480,534,497,530,479,0,444,589,487],
[550,574,562,512,480,574,585,526,511,557,0,561,502],
[548,490,489,429,459,529,409,440,472,412,440,0,478],
[534,518,534,423,479,533,492,444,447,514,499,523,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,529,478,492,540,508,558,496,507,487,517,524,484],
[472,0,424,456,489,439,500,464,415,470,445,529,441],
[523,577,0,509,520,512,491,541,529,504,517,558,593],
[509,545,492,0,535,518,562,524,471,517,490,532,563],
[461,512,481,466,0,492,508,481,444,501,498,525,517],
[493,562,489,483,509,0,497,522,500,532,505,518,540],
[443,501,510,439,493,504,0,469,464,448,461,520,504],
[505,537,460,477,520,479,532,0,457,525,531,574,540],
[494,586,472,530,557,501,537,544,0,490,505,524,530],
[514,531,497,484,500,469,553,476,511,0,499,513,541],
[484,556,484,511,503,496,540,470,496,502,0,541,484],
[477,472,443,469,476,483,481,427,477,488,460,0,501],
[517,560,408,438,484,461,497,461,471,460,517,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,506,476,492,442,470,491,530,484,545,497,488],
[526,0,482,534,520,448,497,502,528,497,566,482,503],
[495,519,0,560,487,471,507,512,567,511,540,528,497],
[525,467,441,0,480,463,467,462,536,442,532,434,527],
[509,481,514,521,0,525,482,518,512,500,562,508,539],
[559,553,530,538,476,0,477,492,581,481,557,516,491],
[531,504,494,534,519,524,0,462,542,470,550,502,528],
[510,499,489,539,483,509,539,0,549,460,542,472,490],
[471,473,434,465,489,420,459,452,0,439,492,430,446],
[517,504,490,559,501,520,531,541,562,0,559,480,525],
[456,435,461,469,439,444,451,459,509,442,0,459,484],
[504,519,473,567,493,485,499,529,571,521,542,0,536],
[513,498,504,474,462,510,473,511,555,476,517,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,459,489,485,506,519,510,487,504,479,477,481],
[505,0,489,503,481,497,513,503,485,492,459,499,462],
[542,512,0,532,532,503,540,520,493,513,505,497,505],
[512,498,469,0,522,480,520,528,478,492,470,474,501],
[516,520,469,479,0,501,528,516,490,495,478,488,480],
[495,504,498,521,500,0,520,523,486,477,464,478,486],
[482,488,461,481,473,481,0,491,477,469,462,478,474],
[491,498,481,473,485,478,510,0,472,462,471,477,457],
[514,516,508,523,511,515,524,529,0,507,496,500,502],
[497,509,488,509,506,524,532,539,494,0,490,501,494],
[522,542,496,531,523,537,539,530,505,511,0,539,509],
[524,502,504,527,513,523,523,524,501,500,462,0,518],
[520,539,496,500,521,515,527,544,499,507,492,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,497,474,520,498,500,510,539,520,505,499,496],
[515,0,581,546,533,526,493,482,539,562,545,532,545],
[504,420,0,459,533,490,477,479,493,492,484,457,469],
[527,455,542,0,519,490,504,474,527,499,484,517,552],
[481,468,468,482,0,497,489,498,497,521,477,513,518],
[503,475,511,511,504,0,492,480,512,532,495,480,508],
[501,508,524,497,512,509,0,532,536,521,494,524,475],
[491,519,522,527,503,521,469,0,563,573,505,520,500],
[462,462,508,474,504,489,465,438,0,499,464,408,478],
[481,439,509,502,480,469,480,428,502,0,465,505,479],
[496,456,517,517,524,506,507,496,537,536,0,518,511],
[502,469,544,484,488,521,477,481,593,496,483,0,483],
[505,456,532,449,483,493,526,501,523,522,490,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,509,492,510,531,504,510,498,504,510,478,526],
[509,0,519,505,507,519,515,495,508,524,503,498,526],
[492,482,0,466,513,522,502,503,498,519,509,495,517],
[509,496,535,0,519,514,521,504,510,527,525,515,526],
[491,494,488,482,0,521,504,473,499,495,492,499,504],
[470,482,479,487,480,0,495,488,496,490,477,485,518],
[497,486,499,480,497,506,0,489,476,502,489,489,508],
[491,506,498,497,528,513,512,0,511,530,516,496,518],
[503,493,503,491,502,505,525,490,0,514,487,499,524],
[497,477,482,474,506,511,499,471,487,0,494,494,510],
[491,498,492,476,509,524,512,485,514,507,0,485,504],
[523,503,506,486,502,516,512,505,502,507,516,0,532],
[475,475,484,475,497,483,493,483,477,491,497,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,511,531,494,545,535,547,481,492,492,487,495],
[501,0,538,484,407,478,497,443,433,425,376,452,453],
[490,463,0,431,460,486,476,544,417,411,421,461,337],
[470,517,570,0,461,499,436,518,430,480,449,466,467],
[507,594,541,540,0,512,504,507,508,521,494,473,496],
[456,523,515,502,489,0,530,567,494,426,444,489,481],
[466,504,525,565,497,471,0,604,503,502,478,509,495],
[454,558,457,483,494,434,397,0,444,379,438,432,461],
[520,568,584,571,493,507,498,557,0,447,504,555,488],
[509,576,590,521,480,575,499,622,554,0,460,538,523],
[509,625,580,552,507,557,523,563,497,541,0,541,518],
[514,549,540,535,528,512,492,569,446,463,460,0,486],
[506,548,664,534,505,520,506,540,513,478,483,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,505,488,498,485,506,501,484,486,493,480,497],
[500,0,506,491,509,487,495,497,488,490,490,482,494],
[496,495,0,502,502,502,521,491,501,483,498,482,491],
[513,510,499,0,498,500,515,504,497,494,497,482,508],
[503,492,499,503,0,497,509,503,517,517,510,494,500],
[516,514,499,501,504,0,511,491,514,507,487,514,511],
[495,506,480,486,492,490,0,465,492,472,486,479,473],
[500,504,510,497,498,510,536,0,505,503,501,488,501],
[517,513,500,504,484,487,509,496,0,534,504,475,513],
[515,511,518,507,484,494,529,498,467,0,498,481,512],
[508,511,503,504,491,514,515,500,497,503,0,501,496],
[521,519,519,519,507,487,522,513,526,520,500,0,520],
[504,507,510,493,501,490,528,500,488,489,505,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,524,507,520,517,514,497,521,535,505,523,517,504],
[477,0,491,488,519,509,495,491,508,480,500,483,484],
[494,510,0,499,504,525,498,501,527,490,522,520,486],
[481,513,502,0,508,523,521,500,536,495,517,502,487],
[484,482,497,493,0,527,501,471,497,467,506,490,508],
[487,492,476,478,474,0,487,480,497,473,480,490,469],
[504,506,503,480,500,514,0,517,513,477,517,505,480],
[480,510,500,501,530,521,484,0,521,502,505,504,494],
[466,493,474,465,504,504,488,480,0,466,509,483,490],
[496,521,511,506,534,528,524,499,535,0,509,497,518],
[478,501,479,484,495,521,484,496,492,492,0,484,494],
[484,518,481,499,511,511,496,497,518,504,517,0,520],
[497,517,515,514,493,532,521,507,511,483,507,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,527,491,518,488,503,489,496,495,476,503,482],
[510,0,517,509,517,504,525,507,532,529,491,507,521],
[474,484,0,479,491,489,502,477,511,514,476,473,494],
[510,492,522,0,512,484,483,492,504,515,481,494,520],
[483,484,510,489,0,491,497,458,500,496,481,491,493],
[513,497,512,517,510,0,523,504,525,527,475,536,530],
[498,476,499,518,504,478,0,463,506,494,504,498,503],
[512,494,524,509,543,497,538,0,519,518,522,530,524],
[505,469,490,497,501,476,495,482,0,476,488,478,484],
[506,472,487,486,505,474,507,483,525,0,472,515,513],
[525,510,525,520,520,526,497,479,513,529,0,522,506],
[498,494,528,507,510,465,503,471,523,486,479,0,523],
[519,480,507,481,508,471,498,477,517,488,495,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,553,545,485,428,504,597,474,579,534,586,471,556],
[448,0,515,396,454,502,501,499,546,463,588,467,551],
[456,486,0,544,437,441,509,527,548,526,596,487,565],
[516,605,457,0,416,512,562,453,517,424,521,425,438],
[573,547,564,585,0,552,565,446,514,515,569,536,599],
[497,499,560,489,449,0,448,492,481,514,479,434,542],
[404,500,492,439,436,553,0,388,439,479,503,451,431],
[527,502,474,548,555,509,613,0,538,499,532,466,514],
[422,455,453,484,487,520,562,463,0,473,564,396,576],
[467,538,475,577,486,487,522,502,528,0,519,454,505],
[415,413,405,480,432,522,498,469,437,482,0,406,513],
[530,534,514,576,465,567,550,535,605,547,595,0,544],
[445,450,436,563,402,459,570,487,425,496,488,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,498,497,508,486,505,498,489,479,487,501,501],
[504,0,515,494,501,499,507,509,486,492,498,496,508],
[503,486,0,496,500,493,509,495,494,479,513,487,507],
[504,507,505,0,516,528,508,515,507,484,502,516,510],
[493,500,501,485,0,486,499,482,470,471,511,478,492],
[515,502,508,473,515,0,511,517,492,501,528,505,521],
[496,494,492,493,502,490,0,491,468,484,502,487,480],
[503,492,506,486,519,484,510,0,507,503,487,507,489],
[512,515,507,494,531,509,533,494,0,520,528,524,533],
[522,509,522,517,530,500,517,498,481,0,502,506,503],
[514,503,488,499,490,473,499,514,473,499,0,500,491],
[500,505,514,485,523,496,514,494,477,495,501,0,510],
[500,493,494,491,509,480,521,512,468,498,510,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,505,487,502,512,492,503,509,479,482,507,483],
[529,0,527,516,510,542,521,474,539,526,526,532,531],
[496,474,0,478,500,501,473,484,508,478,509,493,489],
[514,485,523,0,524,509,509,518,541,510,522,521,533],
[499,491,501,477,0,513,496,505,509,482,514,530,511],
[489,459,500,492,488,0,515,494,530,491,495,507,503],
[509,480,528,492,505,486,0,522,522,498,502,518,515],
[498,527,517,483,496,507,479,0,514,489,501,514,512],
[492,462,493,460,492,471,479,487,0,472,479,493,496],
[522,475,523,491,519,510,503,512,529,0,515,514,512],
[519,475,492,479,487,506,499,500,522,486,0,501,493],
[494,469,508,480,471,494,483,487,508,487,500,0,488],
[518,470,512,468,490,498,486,489,505,489,508,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,468,511,500,480,466,502,493,493,495,496,504],
[519,0,479,552,540,484,500,509,523,556,499,511,515],
[533,522,0,534,534,496,518,506,544,521,529,493,484],
[490,449,467,0,500,478,458,462,499,470,504,480,466],
[501,461,467,501,0,466,476,495,496,500,491,481,488],
[521,517,505,523,535,0,516,501,527,528,500,495,526],
[535,501,483,543,525,485,0,488,520,515,514,496,489],
[499,492,495,539,506,500,513,0,526,514,500,499,518],
[508,478,457,502,505,474,481,475,0,505,497,487,474],
[508,445,480,531,501,473,486,487,496,0,491,500,464],
[506,502,472,497,510,501,487,501,504,510,0,477,489],
[505,490,508,521,520,506,505,502,514,501,524,0,510],
[497,486,517,535,513,475,512,483,527,537,512,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,475,508,497,525,477,492,496,488,500,526,486],
[495,0,478,480,488,523,506,512,507,494,469,520,514],
[526,523,0,497,511,512,528,518,493,523,496,543,529],
[493,521,504,0,490,511,497,523,497,493,523,525,505],
[504,513,490,511,0,518,490,499,514,517,507,538,516],
[476,478,489,490,483,0,498,509,505,499,498,498,500],
[524,495,473,504,511,503,0,501,503,501,496,527,507],
[509,489,483,478,502,492,500,0,508,524,496,532,508],
[505,494,508,504,487,496,498,493,0,494,513,521,519],
[513,507,478,508,484,502,500,477,507,0,502,515,519],
[501,532,505,478,494,503,505,505,488,499,0,549,508],
[475,481,458,476,463,503,474,469,480,486,452,0,476],
[515,487,472,496,485,501,494,493,482,482,493,525,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,527,511,468,487,522,510,514,477,505,518,512,526],
[474,0,491,480,489,505,504,492,485,495,509,490,498],
[490,510,0,502,521,484,525,506,480,510,521,496,483],
[533,521,499,0,508,488,503,485,514,517,533,490,498],
[514,512,480,493,0,508,496,493,476,490,501,466,499],
[479,496,517,513,493,0,492,498,486,531,483,484,489],
[491,497,476,498,505,509,0,478,494,502,523,489,486],
[487,509,495,516,508,503,523,0,494,520,499,510,499],
[524,516,521,487,525,515,507,507,0,521,542,492,514],
[496,506,491,484,511,470,499,481,480,0,480,496,441],
[483,492,480,468,500,518,478,502,459,521,0,485,479],
[489,511,505,511,535,517,512,491,509,505,516,0,502],
[475,503,518,503,502,512,515,502,487,560,522,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,502,501,475,497,488,465,476,458,488,476,491],
[539,0,490,494,495,503,539,462,499,483,486,513,508],
[499,511,0,494,499,479,524,473,513,486,483,512,502],
[500,507,507,0,506,499,508,507,512,477,514,503,493],
[526,506,502,495,0,518,520,479,473,483,492,488,517],
[504,498,522,502,483,0,520,478,476,473,498,493,514],
[513,462,477,493,481,481,0,462,443,482,465,471,498],
[536,539,528,494,522,523,539,0,519,490,499,519,502],
[525,502,488,489,528,525,558,482,0,477,480,515,501],
[543,518,515,524,518,528,519,511,524,0,486,493,501],
[513,515,518,487,509,503,536,502,521,515,0,511,535],
[525,488,489,498,513,508,530,482,486,508,490,0,506],
[510,493,499,508,484,487,503,499,500,500,466,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,529,484,508,479,511,521,501,474,481,534,497],
[537,0,527,501,519,494,515,533,499,486,493,519,513],
[472,474,0,447,494,473,489,479,486,459,492,517,502],
[517,500,554,0,532,497,547,522,528,499,500,531,543],
[493,482,507,469,0,498,508,517,492,484,479,492,509],
[522,507,528,504,503,0,509,548,518,512,489,543,526],
[490,486,512,454,493,492,0,507,501,475,481,498,504],
[480,468,522,479,484,453,494,0,511,431,492,509,477],
[500,502,515,473,509,483,500,490,0,450,484,495,491],
[527,515,542,502,517,489,526,570,551,0,517,541,519],
[520,508,509,501,522,512,520,509,517,484,0,519,510],
[467,482,484,470,509,458,503,492,506,460,482,0,464],
[504,488,499,458,492,475,497,524,510,482,491,537,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,530,509,512,525,501,496,520,505,511,498,514,505],
[471,0,475,458,482,453,471,466,481,503,471,476,482],
[492,526,0,510,497,486,491,483,497,537,494,515,501],
[489,543,491,0,525,505,499,487,487,539,491,512,520],
[476,519,504,476,0,482,487,471,499,517,490,480,482],
[500,548,515,496,519,0,500,481,505,510,502,505,528],
[505,530,510,502,514,501,0,493,510,515,497,533,507],
[481,535,518,514,530,520,508,0,506,504,498,514,507],
[496,520,504,514,502,496,491,495,0,506,492,504,491],
[490,498,464,462,484,491,486,497,495,0,476,502,484],
[503,530,507,510,511,499,504,503,509,525,0,505,526],
[487,525,486,489,521,496,468,487,497,499,496,0,501],
[496,519,500,481,519,473,494,494,510,517,475,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,475,501,513,537,462,500,520,496,471,483,517],
[503,0,483,514,512,515,478,517,513,478,460,518,515],
[526,518,0,517,555,555,498,537,523,540,494,544,525],
[500,487,484,0,507,520,477,489,521,520,482,504,527],
[488,489,446,494,0,520,451,478,489,467,485,512,538],
[464,486,446,481,481,0,447,488,503,497,441,444,493],
[539,523,503,524,550,554,0,531,508,523,482,533,567],
[501,484,464,512,523,513,470,0,496,488,478,492,494],
[481,488,478,480,512,498,493,505,0,508,462,500,513],
[505,523,461,481,534,504,478,513,493,0,506,508,513],
[530,541,507,519,516,560,519,523,539,495,0,505,527],
[518,483,457,497,489,557,468,509,501,493,496,0,509],
[484,486,476,474,463,508,434,507,488,488,474,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,610,491,600,539,526,577,485,527,568,581,500,561],
[391,0,419,457,412,394,377,435,489,469,502,375,467],
[510,582,0,519,503,504,532,487,559,600,600,491,537],
[401,544,482,0,460,489,500,464,495,482,516,418,474],
[462,589,498,541,0,488,548,473,571,524,523,503,521],
[475,607,497,512,513,0,519,540,570,516,563,477,521],
[424,624,469,501,453,482,0,467,543,504,544,461,516],
[516,566,514,537,528,461,534,0,594,537,555,533,574],
[474,512,442,506,430,431,458,407,0,506,476,418,474],
[433,532,401,519,477,485,497,464,495,0,533,425,483],
[420,499,401,485,478,438,457,446,525,468,0,396,474],
[501,626,510,583,498,524,540,468,583,576,605,0,551],
[440,534,464,527,480,480,485,427,527,518,527,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,541,510,485,504,523,511,515,504,502,553,535],
[509,0,499,496,492,541,508,509,517,519,533,501,529],
[460,502,0,522,504,507,518,539,504,504,525,510,535],
[491,505,479,0,500,485,514,510,547,501,525,533,491],
[516,509,497,501,0,518,517,535,524,501,536,512,525],
[497,460,494,516,483,0,478,533,528,484,485,518,500],
[478,493,483,487,484,523,0,515,495,510,548,500,519],
[490,492,462,491,466,468,486,0,485,468,508,491,487],
[486,484,497,454,477,473,506,516,0,478,545,491,502],
[497,482,497,500,500,517,491,533,523,0,557,526,493],
[499,468,476,476,465,516,453,493,456,444,0,466,469],
[448,500,491,468,489,483,501,510,510,475,535,0,480],
[466,472,466,510,476,501,482,514,499,508,532,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,526,422,452,525,452,623,545,482,589,499,530,604],
[475,0,413,454,613,495,608,498,397,444,581,584,512],
[579,588,0,525,591,554,560,576,495,620,595,651,583],
[549,547,476,0,535,455,643,615,503,574,617,556,566],
[476,388,410,466,0,425,460,467,488,549,507,530,485],
[549,506,447,546,576,0,591,565,460,509,562,556,560],
[378,393,441,358,541,410,0,463,364,504,506,449,496],
[456,503,425,386,534,436,538,0,440,549,550,564,522],
[519,604,506,498,513,541,637,561,0,641,636,621,565],
[412,557,381,427,452,492,497,452,360,0,497,471,493],
[502,420,406,384,494,439,495,451,365,504,0,492,489],
[471,417,350,445,471,445,552,437,380,530,509,0,500],
[397,489,418,435,516,441,505,479,436,508,512,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,542,520,511,519,513,504,509,501,491,510,509],
[490,0,517,511,512,500,511,481,488,504,486,524,482],
[459,484,0,511,498,482,506,469,486,482,483,495,467],
[481,490,490,0,509,525,483,501,482,494,478,492,501],
[490,489,503,492,0,508,494,485,499,477,473,499,457],
[482,501,519,476,493,0,492,478,503,494,482,488,490],
[488,490,495,518,507,509,0,484,504,482,466,500,462],
[497,520,532,500,516,523,517,0,517,499,495,508,501],
[492,513,515,519,502,498,497,484,0,496,501,492,497],
[500,497,519,507,524,507,519,502,505,0,489,503,488],
[510,515,518,523,528,519,535,506,500,512,0,488,498],
[491,477,506,509,502,513,501,493,509,498,513,0,506],
[492,519,534,500,544,511,539,500,504,513,503,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,505,517,482,577,479,586,485,488,466,570,479],
[500,0,444,473,474,497,469,500,458,455,464,527,496],
[496,557,0,472,517,573,519,469,513,488,525,543,487],
[484,528,529,0,503,512,468,518,472,514,450,557,533],
[519,527,484,498,0,489,476,503,520,466,507,567,525],
[424,504,428,489,512,0,478,462,473,474,491,527,454],
[522,532,482,533,525,523,0,566,494,520,513,544,514],
[415,501,532,483,498,539,435,0,464,475,415,529,527],
[516,543,488,529,481,528,507,537,0,569,521,544,514],
[513,546,513,487,535,527,481,526,432,0,501,533,547],
[535,537,476,551,494,510,488,586,480,500,0,572,556],
[431,474,458,444,434,474,457,472,457,468,429,0,432],
[522,505,514,468,476,547,487,474,487,454,445,569,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,503,563,491,516,473,528,455,481,484,499,495],
[516,0,505,547,486,499,476,497,498,469,472,465,501],
[498,496,0,511,474,524,475,513,498,482,531,485,449],
[438,454,490,0,450,465,453,493,423,451,473,458,423],
[510,515,527,551,0,519,432,554,463,504,463,497,487],
[485,502,477,536,482,0,464,503,483,479,490,496,475],
[528,525,526,548,569,537,0,577,495,478,536,540,523],
[473,504,488,508,447,498,424,0,432,483,501,436,507],
[546,503,503,578,538,518,506,569,0,527,534,503,480],
[520,532,519,550,497,522,523,518,474,0,493,527,475],
[517,529,470,528,538,511,465,500,467,508,0,481,481],
[502,536,516,543,504,505,461,565,498,474,520,0,506],
[506,500,552,578,514,526,478,494,521,526,520,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,495,489,496,529,469,492,484,529,507,510,530],
[501,0,486,495,508,522,479,475,493,511,487,517,503],
[506,515,0,485,489,524,480,501,491,501,492,511,514],
[512,506,516,0,511,532,496,519,534,509,508,526,524],
[505,493,512,490,0,529,489,489,490,513,518,522,524],
[472,479,477,469,472,0,448,460,477,488,491,475,489],
[532,522,521,505,512,553,0,486,508,502,507,524,532],
[509,526,500,482,512,541,515,0,491,522,514,523,525],
[517,508,510,467,511,524,493,510,0,527,510,519,500],
[472,490,500,492,488,513,499,479,474,0,498,512,503],
[494,514,509,493,483,510,494,487,491,503,0,517,497],
[491,484,490,475,479,526,477,478,482,489,484,0,485],
[471,498,487,477,477,512,469,476,501,498,504,516,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,364,416,497,453,537,623,588,432,418,510,512],
[700,0,667,660,584,646,728,729,572,700,354,756,582],
[637,334,0,439,546,507,755,580,598,604,446,645,562],
[585,341,562,0,578,488,716,581,610,577,364,580,498],
[504,417,455,423,0,442,612,455,499,440,283,481,594],
[548,355,494,513,559,0,576,541,591,453,274,500,524],
[464,273,246,285,389,425,0,420,437,209,260,381,443],
[378,272,421,420,546,460,581,0,496,424,505,445,468],
[413,429,403,391,502,410,564,505,0,547,267,434,530],
[569,301,397,424,561,548,792,577,454,0,378,487,597],
[583,647,555,637,718,727,741,496,734,623,0,565,750],
[491,245,356,421,520,501,620,556,567,514,436,0,525],
[489,419,439,503,407,477,558,533,471,404,251,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,531,532,551,497,491,522,492,484,549,505,502,514],
[470,0,539,499,460,484,511,462,480,495,486,504,517],
[469,462,0,501,496,495,537,468,478,470,457,490,489],
[450,502,500,0,488,444,490,475,444,500,452,431,426],
[504,541,505,513,0,499,585,483,484,494,461,513,534],
[510,517,506,557,502,0,513,479,525,510,466,506,497],
[479,490,464,511,416,488,0,466,499,471,430,470,497],
[509,539,533,526,518,522,535,0,455,539,478,530,521],
[517,521,523,557,517,476,502,546,0,545,498,521,551],
[452,506,531,501,507,491,530,462,456,0,476,494,494],
[496,515,544,549,540,535,571,523,503,525,0,528,550],
[499,497,511,570,488,495,531,471,480,507,473,0,517],
[487,484,512,575,467,504,504,480,450,507,451,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,575,513,439,528,506,503,555,497,511,487,497,556],
[426,0,483,460,496,511,521,551,475,501,484,477,575],
[488,518,0,526,508,535,563,513,496,535,522,517,529],
[562,541,475,0,558,532,539,560,545,575,462,489,539],
[473,505,493,443,0,504,527,527,449,517,469,482,517],
[495,490,466,469,497,0,487,551,406,537,462,484,452],
[498,480,438,462,474,514,0,485,458,462,468,443,508],
[446,450,488,441,474,450,516,0,466,547,481,480,451],
[504,526,505,456,552,595,543,535,0,530,484,522,524],
[490,500,466,426,484,464,539,454,471,0,448,482,515],
[514,517,479,539,532,539,533,520,517,553,0,449,469],
[504,524,484,512,519,517,558,521,479,519,552,0,533],
[445,426,472,462,484,549,493,550,477,486,532,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,496,513,492,511,502,479,502,511,486,488,509],
[510,0,522,526,501,540,533,503,511,533,486,489,518],
[505,479,0,512,473,502,514,486,490,509,479,506,509],
[488,475,489,0,496,503,488,485,490,494,488,480,488],
[509,500,528,505,0,505,515,503,501,493,480,498,525],
[490,461,499,498,496,0,487,476,491,505,472,478,497],
[499,468,487,513,486,514,0,509,487,500,493,505,522],
[522,498,515,516,498,525,492,0,503,524,509,492,527],
[499,490,511,511,500,510,514,498,0,528,511,491,506],
[490,468,492,507,508,496,501,477,473,0,480,485,502],
[515,515,522,513,521,529,508,492,490,521,0,483,538],
[513,512,495,521,503,523,496,509,510,516,518,0,525],
[492,483,492,513,476,504,479,474,495,499,463,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,494,479,507,487,526,497,530,493,520,487,482],
[487,0,479,487,479,509,508,490,507,471,522,477,475],
[507,522,0,519,511,503,506,509,519,498,508,478,498],
[522,514,482,0,500,502,531,478,513,501,526,504,481],
[494,522,490,501,0,508,527,476,527,499,518,510,462],
[514,492,498,499,493,0,506,494,501,476,528,497,480],
[475,493,495,470,474,495,0,473,515,471,481,462,471],
[504,511,492,523,525,507,528,0,522,502,522,483,500],
[471,494,482,488,474,500,486,479,0,451,492,450,454],
[508,530,503,500,502,525,530,499,550,0,501,491,501],
[481,479,493,475,483,473,520,479,509,500,0,474,461],
[514,524,523,497,491,504,539,518,551,510,527,0,483],
[519,526,503,520,539,521,530,501,547,500,540,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,521,507,493,533,500,532,495,534,504,520,492,484],
[480,0,514,493,494,499,512,517,528,473,507,496,498],
[494,487,0,497,498,507,507,494,538,461,499,457,508],
[508,508,504,0,498,515,495,515,543,495,519,469,532],
[468,507,503,503,0,488,497,478,498,484,492,486,492],
[501,502,494,486,513,0,516,498,523,474,510,466,485],
[469,489,494,506,504,485,0,453,529,480,509,465,496],
[506,484,507,486,523,503,548,0,567,510,541,487,470],
[467,473,463,458,503,478,472,434,0,453,453,447,437],
[497,528,540,506,517,527,521,491,548,0,524,539,530],
[481,494,502,482,509,491,492,460,548,477,0,474,522],
[509,505,544,532,515,535,536,514,554,462,527,0,506],
[517,503,493,469,509,516,505,531,564,471,479,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,557,532,520,577,549,498,564,516,569,508,499,547],
[444,0,455,527,518,473,473,511,491,518,501,457,500],
[469,546,0,549,544,511,494,533,538,522,514,541,522],
[481,474,452,0,529,480,498,537,491,512,496,493,491],
[424,483,457,472,0,498,454,466,482,518,481,496,509],
[452,528,490,521,503,0,445,505,486,525,503,486,515],
[503,528,507,503,547,556,0,509,529,553,496,538,537],
[437,490,468,464,535,496,492,0,495,522,514,508,492],
[485,510,463,510,519,515,472,506,0,554,487,471,502],
[432,483,479,489,483,476,448,479,447,0,475,445,508],
[493,500,487,505,520,498,505,487,514,526,0,513,500],
[502,544,460,508,505,515,463,493,530,556,488,0,537],
[454,501,479,510,492,486,464,509,499,493,501,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,538,490,499,520,514,502,485,517,481,504,486,487],
[463,0,475,523,496,493,509,500,497,478,477,507,487],
[511,526,0,538,516,498,508,517,497,501,508,509,495],
[502,478,463,0,486,478,459,463,480,481,476,500,478],
[481,505,485,515,0,466,497,485,484,497,496,490,472],
[487,508,503,523,535,0,502,499,489,504,486,512,498],
[499,492,493,542,504,499,0,496,489,491,479,504,457],
[516,501,484,538,516,502,505,0,506,492,513,510,501],
[484,504,504,521,517,512,512,495,0,505,507,510,511],
[520,523,500,520,504,497,510,509,496,0,487,497,512],
[497,524,493,525,505,515,522,488,494,514,0,532,518],
[515,494,492,501,511,489,497,491,491,504,469,0,489],
[514,514,506,523,529,503,544,500,490,489,483,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,537,491,529,526,503,504,503,534,512,483,526],
[490,0,515,519,511,524,506,494,496,521,497,488,505],
[464,486,0,496,452,474,453,461,476,494,495,466,484],
[510,482,505,0,493,512,488,481,499,512,499,468,506],
[472,490,549,508,0,513,507,495,486,512,523,485,511],
[475,477,527,489,488,0,480,467,479,493,500,467,486],
[498,495,548,513,494,521,0,491,505,511,509,504,524],
[497,507,540,520,506,534,510,0,506,500,499,505,505],
[498,505,525,502,515,522,496,495,0,504,502,484,519],
[467,480,507,489,489,508,490,501,497,0,509,473,497],
[489,504,506,502,478,501,492,502,499,492,0,493,486],
[518,513,535,533,516,534,497,496,517,528,508,0,517],
[475,496,517,495,490,515,477,496,482,504,515,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,577,498,540,516,505,534,552,542,502,504,508,546],
[424,0,510,475,479,443,467,512,452,453,488,448,518],
[503,491,0,521,537,488,496,533,493,512,487,467,536],
[461,526,480,0,507,455,465,504,458,454,518,467,519],
[485,522,464,494,0,452,495,537,476,506,513,491,538],
[496,558,513,546,549,0,512,548,520,505,553,515,562],
[467,534,505,536,506,489,0,518,481,469,518,500,507],
[449,489,468,497,464,453,483,0,451,463,498,533,514],
[459,549,508,543,525,481,520,550,0,482,511,493,564],
[499,548,489,547,495,496,532,538,519,0,483,525,564],
[497,513,514,483,488,448,483,503,490,518,0,522,541],
[493,553,534,534,510,486,501,468,508,476,479,0,507],
[455,483,465,482,463,439,494,487,437,437,460,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,544,511,564,467,497,541,481,583,565,519,622],
[512,0,510,534,495,503,462,527,503,593,549,518,554],
[457,491,0,539,523,553,498,560,450,538,527,517,498],
[490,467,462,0,516,508,467,513,492,572,530,525,547],
[437,506,478,485,0,455,475,476,421,530,527,514,549],
[534,498,448,493,546,0,505,510,445,580,539,509,551],
[504,539,503,534,526,496,0,515,460,579,557,544,544],
[460,474,441,488,525,491,486,0,482,560,522,524,517],
[520,498,551,509,580,556,541,519,0,562,571,542,558],
[418,408,463,429,471,421,422,441,439,0,442,439,491],
[436,452,474,471,474,462,444,479,430,559,0,460,497],
[482,483,484,476,487,492,457,477,459,562,541,0,541],
[379,447,503,454,452,450,457,484,443,510,504,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,523,556,484,542,519,501,503,492,516,497,491],
[546,0,592,494,555,566,485,501,548,498,557,556,506],
[478,409,0,497,450,514,454,450,468,419,522,474,457],
[445,507,504,0,495,533,474,475,489,471,499,452,446],
[517,446,551,506,0,552,472,486,431,413,511,503,519],
[459,435,487,468,449,0,463,413,440,436,474,435,402],
[482,516,547,527,529,538,0,497,452,498,491,488,486],
[500,500,551,526,515,588,504,0,448,461,527,522,482],
[498,453,533,512,570,561,549,553,0,452,573,497,524],
[509,503,582,530,588,565,503,540,549,0,550,562,498],
[485,444,479,502,490,527,510,474,428,451,0,484,465],
[504,445,527,549,498,566,513,479,504,439,517,0,513],
[510,495,544,555,482,599,515,519,477,503,536,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,483,482,492,500,483,564,541,457,397,607,544],
[500,0,479,495,559,517,429,528,506,596,446,516,435],
[518,522,0,450,532,564,491,624,654,577,577,647,532],
[519,506,551,0,514,480,589,571,577,545,610,616,443],
[509,442,469,487,0,375,500,548,539,563,512,524,454],
[501,484,437,521,626,0,530,653,565,556,665,638,505],
[518,572,510,412,501,471,0,534,524,623,570,572,475],
[437,473,377,430,453,348,467,0,530,457,509,553,423],
[460,495,347,424,462,436,477,471,0,458,508,531,389],
[544,405,424,456,438,445,378,544,543,0,492,506,572],
[604,555,424,391,489,336,431,492,493,509,0,575,554],
[394,485,354,385,477,363,429,448,470,495,426,0,470],
[457,566,469,558,547,496,526,578,612,429,447,531,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,513,543,474,522,518,502,515,552,524,529,521],
[536,0,536,520,513,543,556,506,495,545,535,549,517],
[488,465,0,477,455,461,512,482,482,542,466,523,483],
[458,481,524,0,457,502,508,514,457,519,491,475,493],
[527,488,546,544,0,529,534,559,531,545,489,506,529],
[479,458,540,499,472,0,535,495,497,543,466,514,516],
[483,445,489,493,467,466,0,482,489,533,469,483,455],
[499,495,519,487,442,506,519,0,499,509,546,489,519],
[486,506,519,544,470,504,512,502,0,560,500,519,478],
[449,456,459,482,456,458,468,492,441,0,426,457,443],
[477,466,535,510,512,535,532,455,501,575,0,518,520],
[472,452,478,526,495,487,518,512,482,544,483,0,497],
[480,484,518,508,472,485,546,482,523,558,481,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,556,503,482,427,500,505,530,500,502,488,523],
[518,0,559,535,488,509,512,519,519,532,508,517,528],
[445,442,0,503,462,456,467,512,456,486,495,474,500],
[498,466,498,0,466,443,478,515,509,504,496,484,513],
[519,513,539,535,0,517,527,537,536,529,490,501,508],
[574,492,545,558,484,0,532,548,520,558,497,536,532],
[501,489,534,523,474,469,0,538,485,513,511,475,526],
[496,482,489,486,464,453,463,0,488,498,493,473,504],
[471,482,545,492,465,481,516,513,0,499,506,477,517],
[501,469,515,497,472,443,488,503,502,0,499,452,512],
[499,493,506,505,511,504,490,508,495,502,0,483,530],
[513,484,527,517,500,465,526,528,524,549,518,0,525],
[478,473,501,488,493,469,475,497,484,489,471,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,518,546,532,534,500,538,553,503,519,457,543],
[493,0,558,615,499,524,512,526,532,570,563,528,563],
[483,443,0,534,465,508,490,501,521,502,504,474,496],
[455,386,467,0,476,425,499,483,492,500,441,400,507],
[469,502,536,525,0,499,477,548,510,472,472,502,526],
[467,477,493,576,502,0,487,519,499,511,492,474,549],
[501,489,511,502,524,514,0,515,555,525,506,477,578],
[463,475,500,518,453,482,486,0,520,481,459,465,491],
[448,469,480,509,491,502,446,481,0,513,478,446,520],
[498,431,499,501,529,490,476,520,488,0,510,458,475],
[482,438,497,560,529,509,495,542,523,491,0,513,524],
[544,473,527,601,499,527,524,536,555,543,488,0,508],
[458,438,505,494,475,452,423,510,481,526,477,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,450,558,516,499,537,436,488,539,456,434,490],
[486,0,458,466,480,478,486,424,459,459,418,456,446],
[551,543,0,550,541,541,501,431,497,496,460,474,463],
[443,535,451,0,509,488,459,441,504,510,424,479,374],
[485,521,460,492,0,461,460,418,500,532,437,445,453],
[502,523,460,513,540,0,475,443,516,496,455,439,479],
[464,515,500,542,541,526,0,481,546,500,464,506,471],
[565,577,570,560,583,558,520,0,588,572,567,480,554],
[513,542,504,497,501,485,455,413,0,524,471,469,419],
[462,542,505,491,469,505,501,429,477,0,452,478,451],
[545,583,541,577,564,546,537,434,530,549,0,501,554],
[567,545,527,522,556,562,495,521,532,523,500,0,522],
[511,555,538,627,548,522,530,447,582,550,447,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,492,483,516,477,473,434,509,461,491,460,486],
[535,0,535,503,546,504,484,489,510,478,520,484,546],
[509,466,0,514,500,475,496,447,507,489,506,494,504],
[518,498,487,0,511,490,491,469,502,495,517,483,533],
[485,455,501,490,0,447,462,439,493,486,476,445,507],
[524,497,526,511,554,0,491,481,506,498,509,486,541],
[528,517,505,510,539,510,0,504,520,504,537,494,554],
[567,512,554,532,562,520,497,0,528,501,537,505,546],
[492,491,494,499,508,495,481,473,0,469,513,482,522],
[540,523,512,506,515,503,497,500,532,0,505,508,533],
[510,481,495,484,525,492,464,464,488,496,0,460,531],
[541,517,507,518,556,515,507,496,519,493,541,0,512],
[515,455,497,468,494,460,447,455,479,468,470,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,549,539,513,551,577,566,531,541,518,527,501,497],
[452,0,499,490,493,512,490,487,508,498,474,469,456],
[462,502,0,494,482,523,488,497,517,489,497,450,443],
[488,511,507,0,504,519,510,515,519,461,482,484,481],
[450,508,519,497,0,535,527,500,506,518,486,466,456],
[424,489,478,482,466,0,468,482,474,483,480,427,437],
[435,511,513,491,474,533,0,496,491,502,490,475,463],
[470,514,504,486,501,519,505,0,516,489,479,459,478],
[460,493,484,482,495,527,510,485,0,506,468,463,470],
[483,503,512,540,483,518,499,512,495,0,486,483,442],
[474,527,504,519,515,521,511,522,533,515,0,477,510],
[500,532,551,517,535,574,526,542,538,518,524,0,484],
[504,545,558,520,545,564,538,523,531,559,491,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,521,515,496,510,528,509,537,480,485,499,498,508],
[480,0,493,499,511,512,497,510,487,471,477,518,517],
[486,508,0,493,492,487,492,518,472,505,492,499,480],
[505,502,508,0,484,492,479,532,485,503,505,508,493],
[491,490,509,517,0,527,478,526,504,473,485,517,484],
[473,489,514,509,474,0,477,497,458,462,439,494,482],
[492,504,509,522,523,524,0,539,497,508,504,521,523],
[464,491,483,469,475,504,462,0,440,459,458,483,474],
[521,514,529,516,497,543,504,561,0,506,508,525,541],
[516,530,496,498,528,539,493,542,495,0,482,509,525],
[502,524,509,496,516,562,497,543,493,519,0,509,501],
[503,483,502,493,484,507,480,518,476,492,492,0,473],
[493,484,521,508,517,519,478,527,460,476,500,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,585,528,582,565,532,529,519,543,542,479,486,536],
[416,0,459,458,425,417,458,426,415,427,417,387,437],
[473,542,0,466,450,480,441,469,473,442,480,435,481],
[419,543,535,0,505,495,490,509,469,542,505,468,540],
[436,576,551,496,0,508,500,461,434,528,471,470,499],
[469,584,521,506,493,0,502,444,424,498,488,453,476],
[472,543,560,511,501,499,0,458,491,507,429,436,507],
[482,575,532,492,540,557,543,0,473,537,453,519,496],
[458,586,528,532,567,577,510,528,0,529,536,471,519],
[459,574,559,459,473,503,494,464,472,0,460,433,489],
[522,584,521,496,530,513,572,548,465,541,0,444,507],
[515,614,566,533,531,548,565,482,530,568,557,0,529],
[465,564,520,461,502,525,494,505,482,512,494,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,507,510,499,524,518,551,477,534,515,527,531],
[489,0,480,485,500,500,511,513,485,512,495,482,519],
[494,521,0,486,492,499,537,535,523,512,492,497,518],
[491,516,515,0,534,540,501,554,497,517,510,527,533],
[502,501,509,467,0,510,483,519,473,505,499,487,489],
[477,501,502,461,491,0,498,513,491,510,499,485,517],
[483,490,464,500,518,503,0,527,484,484,500,506,519],
[450,488,466,447,482,488,474,0,475,486,495,510,493],
[524,516,478,504,528,510,517,526,0,520,480,523,532],
[467,489,489,484,496,491,517,515,481,0,496,484,506],
[486,506,509,491,502,502,501,506,521,505,0,504,516],
[474,519,504,474,514,516,495,491,478,517,497,0,511],
[470,482,483,468,512,484,482,508,469,495,485,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,498,521,494,508,521,526,533,478,532,501,524],
[495,0,513,513,497,513,558,528,560,500,546,507,520],
[503,488,0,536,496,514,545,560,511,516,539,542,542],
[480,488,465,0,508,478,510,501,526,511,505,481,518],
[507,504,505,493,0,486,540,507,521,504,513,502,512],
[493,488,487,523,515,0,538,550,538,516,518,497,518],
[480,443,456,491,461,463,0,527,485,465,476,449,497],
[475,473,441,500,494,451,474,0,479,470,506,458,470],
[468,441,490,475,480,463,516,522,0,487,510,470,482],
[523,501,485,490,497,485,536,531,514,0,510,495,526],
[469,455,462,496,488,483,525,495,491,491,0,496,510],
[500,494,459,520,499,504,552,543,531,506,505,0,500],
[477,481,459,483,489,483,504,531,519,475,491,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,519,481,472,455,545,539,441,496,490,502,486],
[502,0,533,502,473,496,548,482,421,478,509,494,440],
[482,468,0,480,490,476,493,518,414,511,531,511,450],
[520,499,521,0,513,515,530,550,508,496,519,503,464],
[529,528,511,488,0,510,565,503,474,522,528,529,498],
[546,505,525,486,491,0,555,517,398,550,510,501,451],
[456,453,508,471,436,446,0,504,426,488,461,475,423],
[462,519,483,451,498,484,497,0,430,492,489,458,444],
[560,580,587,493,527,603,575,571,0,569,555,556,503],
[505,523,490,505,479,451,513,509,432,0,532,520,461],
[511,492,470,482,473,491,540,512,446,469,0,500,462],
[499,507,490,498,472,500,526,543,445,481,501,0,493],
[515,561,551,537,503,550,578,557,498,540,539,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,509,533,518,506,508,480,525,526,533,498,489],
[522,0,548,562,513,493,501,492,492,463,516,499,491],
[492,453,0,518,477,502,479,470,474,481,512,514,471],
[468,439,483,0,441,473,419,466,478,412,492,452,456],
[483,488,524,560,0,511,484,477,508,504,539,472,460],
[495,508,499,528,490,0,496,492,503,518,528,535,469],
[493,500,522,582,517,505,0,507,527,492,546,505,468],
[521,509,531,535,524,509,494,0,506,493,518,482,479],
[476,509,527,523,493,498,474,495,0,456,509,496,513],
[475,538,520,589,497,483,509,508,545,0,523,472,501],
[468,485,489,509,462,473,455,483,492,478,0,472,496],
[503,502,487,549,529,466,496,519,505,529,529,0,488],
[512,510,530,545,541,532,533,522,488,500,505,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,520,477,511,464,478,517,482,507,481,486,503,490],
[481,0,432,456,476,478,489,469,499,456,476,503,491],
[524,569,0,523,497,519,528,488,518,500,531,512,511],
[490,545,478,0,480,493,540,462,518,510,507,512,491],
[537,525,504,521,0,494,513,522,506,505,516,531,515],
[523,523,482,508,507,0,512,496,545,513,487,502,471],
[484,512,473,461,488,489,0,485,494,482,506,507,477],
[519,532,513,539,479,505,516,0,516,489,488,496,476],
[494,502,483,483,495,456,507,485,0,464,504,514,480],
[520,545,501,491,496,488,519,512,537,0,549,525,478],
[515,525,470,494,485,514,495,513,497,452,0,521,477],
[498,498,489,489,470,499,494,505,487,476,480,0,476],
[511,510,490,510,486,530,524,525,521,523,524,525,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,544,530,525,518,501,528,499,517,521,502,509],
[496,0,508,498,522,510,489,511,492,503,504,488,498],
[457,493,0,491,509,487,470,498,499,484,499,493,506],
[471,503,510,0,499,490,494,486,467,487,505,461,493],
[476,479,492,502,0,495,486,487,504,506,516,478,490],
[483,491,514,511,506,0,484,487,498,499,508,480,508],
[500,512,531,507,515,517,0,484,501,503,528,495,510],
[473,490,503,515,514,514,517,0,510,508,507,498,510],
[502,509,502,534,497,503,500,491,0,494,485,512,496],
[484,498,517,514,495,502,498,493,507,0,525,496,486],
[480,497,502,496,485,493,473,494,516,476,0,500,498],
[499,513,508,540,523,521,506,503,489,505,501,0,490],
[492,503,495,508,511,493,491,491,505,515,503,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,512,501,470,566,479,502,499,483,489,504,505],
[493,0,467,481,484,509,451,521,494,488,489,500,494],
[489,534,0,469,473,555,489,515,511,474,474,530,504],
[500,520,532,0,463,553,469,524,505,485,461,472,517],
[531,517,528,538,0,558,485,536,564,505,503,504,522],
[435,492,446,448,443,0,432,470,464,457,438,474,477],
[522,550,512,532,516,569,0,539,526,509,498,518,521],
[499,480,486,477,465,531,462,0,520,459,445,474,501],
[502,507,490,496,437,537,475,481,0,482,482,506,478],
[518,513,527,516,496,544,492,542,519,0,480,504,489],
[512,512,527,540,498,563,503,556,519,521,0,509,544],
[497,501,471,529,497,527,483,527,495,497,492,0,516],
[496,507,497,484,479,524,480,500,523,512,457,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,545,490,613,492,537,536,563,541,494,499,546],
[499,0,491,481,558,502,492,519,564,518,521,489,525],
[456,510,0,528,565,512,532,550,564,533,512,551,558],
[511,520,473,0,566,504,527,549,543,488,494,501,511],
[388,443,436,435,0,458,438,491,466,452,463,473,484],
[509,499,489,497,543,0,505,504,516,499,439,514,505],
[464,509,469,474,563,496,0,530,547,472,502,474,519],
[465,482,451,452,510,497,471,0,484,470,464,488,480],
[438,437,437,458,535,485,454,517,0,501,455,461,486],
[460,483,468,513,549,502,529,531,500,0,491,515,504],
[507,480,489,507,538,562,499,537,546,510,0,532,581],
[502,512,450,500,528,487,527,513,540,486,469,0,504],
[455,476,443,490,517,496,482,521,515,497,420,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,495,493,507,475,472,487,483,496,509,490,489],
[514,0,510,495,527,482,504,512,515,497,495,508,516],
[506,491,0,524,533,492,482,518,486,514,490,509,513],
[508,506,477,0,495,492,506,500,479,490,500,496,510],
[494,474,468,506,0,469,485,499,491,488,499,494,494],
[526,519,509,509,532,0,493,535,508,494,529,532,520],
[529,497,519,495,516,508,0,521,508,513,528,521,527],
[514,489,483,501,502,466,480,0,489,497,486,501,501],
[518,486,515,522,510,493,493,512,0,507,513,534,529],
[505,504,487,511,513,507,488,504,494,0,489,509,520],
[492,506,511,501,502,472,473,515,488,512,0,508,511],
[511,493,492,505,507,469,480,500,467,492,493,0,518],
[512,485,488,491,507,481,474,500,472,481,490,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,487,496,505,477,512,495,484,503,526,494,497],
[527,0,535,529,493,516,509,543,505,482,520,490,506],
[514,466,0,479,502,510,483,476,479,482,482,514,501],
[505,472,522,0,524,509,520,503,495,481,491,482,508],
[496,508,499,477,0,499,489,483,481,458,504,513,473],
[524,485,491,492,502,0,497,476,477,469,493,479,508],
[489,492,518,481,512,504,0,529,497,519,543,506,511],
[506,458,525,498,518,525,472,0,481,516,507,487,526],
[517,496,522,506,520,524,504,520,0,514,507,500,519],
[498,519,519,520,543,532,482,485,487,0,530,497,514],
[475,481,519,510,497,508,458,494,494,471,0,481,502],
[507,511,487,519,488,522,495,514,501,504,520,0,525],
[504,495,500,493,528,493,490,475,482,487,499,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,511,556,494,531,543,616,502,514,523,546,507],
[504,0,489,538,591,534,556,551,451,488,474,526,492],
[490,512,0,514,500,573,556,568,489,530,479,540,503],
[445,463,487,0,481,498,519,555,460,490,477,557,431],
[507,410,501,520,0,530,498,534,439,444,464,492,454],
[470,467,428,503,471,0,520,543,447,488,482,482,466],
[458,445,445,482,503,481,0,512,453,440,418,468,444],
[385,450,433,446,467,458,489,0,413,482,426,456,406],
[499,550,512,541,562,554,548,588,0,525,505,563,542],
[487,513,471,511,557,513,561,519,476,0,435,467,503],
[478,527,522,524,537,519,583,575,496,566,0,508,455],
[455,475,461,444,509,519,533,545,438,534,493,0,445],
[494,509,498,570,547,535,557,595,459,498,546,556,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,540,542,505,552,533,560,514,490,541,509,524,544],
[461,0,529,475,470,537,522,480,491,466,476,519,491],
[459,472,0,485,483,517,508,445,438,450,448,468,460],
[496,526,516,0,512,534,540,487,500,500,471,505,492],
[449,531,518,489,0,519,502,449,491,476,466,505,479],
[468,464,484,467,482,0,524,470,465,471,489,485,500],
[441,479,493,461,499,477,0,448,435,456,444,507,486],
[487,521,556,514,552,531,553,0,482,513,500,539,500],
[511,510,563,501,510,536,566,519,0,514,531,493,521],
[460,535,551,501,525,530,545,488,487,0,492,533,504],
[492,525,553,530,535,512,557,501,470,509,0,539,484],
[477,482,533,496,496,516,494,462,508,468,462,0,498],
[457,510,541,509,522,501,515,501,480,497,517,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,478,447,513,487,469,469,483,482,455,481,497],
[529,0,507,477,494,528,475,489,488,516,503,508,492],
[523,494,0,467,489,491,474,499,499,498,477,470,499],
[554,524,534,0,522,528,463,503,485,502,503,491,503],
[488,507,512,479,0,486,449,469,465,484,489,479,469],
[514,473,510,473,515,0,459,450,489,499,485,453,496],
[532,526,527,538,552,542,0,480,514,531,483,512,535],
[532,512,502,498,532,551,521,0,502,523,519,501,526],
[518,513,502,516,536,512,487,499,0,530,483,512,497],
[519,485,503,499,517,502,470,478,471,0,523,462,477],
[546,498,524,498,512,516,518,482,518,478,0,504,480],
[520,493,531,510,522,548,489,500,489,539,497,0,536],
[504,509,502,498,532,505,466,475,504,524,521,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,527,506,515,530,507,487,510,501,521,546,521],
[492,0,514,506,512,507,506,487,502,503,487,512,517],
[474,487,0,474,503,505,497,442,479,491,461,511,491],
[495,495,527,0,490,524,510,478,495,513,513,534,499],
[486,489,498,511,0,510,515,492,494,505,497,517,522],
[471,494,496,477,491,0,502,467,468,502,502,506,502],
[494,495,504,491,486,499,0,456,501,484,486,510,498],
[514,514,559,523,509,534,545,0,516,526,491,540,534],
[491,499,522,506,507,533,500,485,0,486,492,518,509],
[500,498,510,488,496,499,517,475,515,0,506,509,525],
[480,514,540,488,504,499,515,510,509,495,0,528,510],
[455,489,490,467,484,495,491,461,483,492,473,0,489],
[480,484,510,502,479,499,503,467,492,476,491,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,477,586,457,451,518,500,536,460,520,569,491],
[510,0,523,529,476,470,506,465,511,466,536,539,488],
[524,478,0,556,536,549,528,499,576,502,461,580,464],
[415,472,445,0,428,440,438,434,522,478,423,486,458],
[544,525,465,573,0,506,474,449,588,496,514,578,505],
[550,531,452,561,495,0,498,524,510,563,487,597,472],
[483,495,473,563,527,503,0,529,583,472,504,587,491],
[501,536,502,567,552,477,472,0,513,543,551,553,483],
[465,490,425,479,413,491,418,488,0,467,446,477,425],
[541,535,499,523,505,438,529,458,534,0,551,579,504],
[481,465,540,578,487,514,497,450,555,450,0,584,414],
[432,462,421,515,423,404,414,448,524,422,417,0,455],
[510,513,537,543,496,529,510,518,576,497,587,546,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,494,457,410,509,432,391,426,461,374,449,445],
[569,0,529,613,532,548,552,504,511,510,551,489,522],
[507,472,0,528,463,511,492,432,478,512,454,490,499],
[544,388,473,0,501,542,558,446,562,549,524,477,493],
[591,469,538,500,0,579,522,503,519,503,513,529,505],
[492,453,490,459,422,0,414,392,478,481,472,473,548],
[569,449,509,443,479,587,0,501,506,523,485,502,577],
[610,497,569,555,498,609,500,0,491,547,561,587,557],
[575,490,523,439,482,523,495,510,0,508,521,562,558],
[540,491,489,452,498,520,478,454,493,0,525,531,504],
[627,450,547,477,488,529,516,440,480,476,0,490,555],
[552,512,511,524,472,528,499,414,439,470,511,0,491],
[556,479,502,508,496,453,424,444,443,497,446,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,483,534,500,544,497,525,499,510,523,530,453],
[511,0,510,517,468,515,494,512,484,485,495,515,467],
[518,491,0,532,498,557,494,534,501,531,491,495,504],
[467,484,469,0,469,520,498,523,477,466,474,505,458],
[501,533,503,532,0,531,501,543,486,514,480,509,480],
[457,486,444,481,470,0,463,477,476,478,459,494,447],
[504,507,507,503,500,538,0,545,508,512,515,524,469],
[476,489,467,478,458,524,456,0,475,466,478,488,455],
[502,517,500,524,515,525,493,526,0,504,518,502,484],
[491,516,470,535,487,523,489,535,497,0,505,501,456],
[478,506,510,527,521,542,486,523,483,496,0,499,461],
[471,486,506,496,492,507,477,513,499,500,502,0,478],
[548,534,497,543,521,554,532,546,517,545,540,523,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,485,490,472,479,513,504,493,503,497,514,529],
[506,0,527,507,511,500,518,519,502,501,497,508,524],
[516,474,0,493,491,494,509,519,469,494,486,512,508],
[511,494,508,0,487,518,507,509,496,491,475,515,504],
[529,490,510,514,0,507,538,522,529,501,506,528,500],
[522,501,507,483,494,0,487,509,500,493,508,499,497],
[488,483,492,494,463,514,0,480,504,482,465,495,469],
[497,482,482,492,479,492,521,0,480,502,482,484,499],
[508,499,532,505,472,501,497,521,0,494,516,515,478],
[498,500,507,510,500,508,519,499,507,0,500,522,526],
[504,504,515,526,495,493,536,519,485,501,0,530,498],
[487,493,489,486,473,502,506,517,486,479,471,0,456],
[472,477,493,497,501,504,532,502,523,475,503,545,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,497,514,512,530,513,543,509,506,532,505,526],
[508,0,513,522,539,504,525,517,496,530,505,511,512],
[504,488,0,498,517,521,513,512,488,523,513,488,478],
[487,479,503,0,530,530,525,519,504,509,519,490,503],
[489,462,484,471,0,502,491,519,459,502,489,484,485],
[471,497,480,471,499,0,512,508,481,490,499,481,478],
[488,476,488,476,510,489,0,529,488,513,491,502,489],
[458,484,489,482,482,493,472,0,465,488,499,469,477],
[492,505,513,497,542,520,513,536,0,528,525,509,513],
[495,471,478,492,499,511,488,513,473,0,505,489,473],
[469,496,488,482,512,502,510,502,476,496,0,492,508],
[496,490,513,511,517,520,499,532,492,512,509,0,503],
[475,489,523,498,516,523,512,524,488,528,493,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,541,537,521,466,510,504,520,515,512,488,525,509],
[460,0,489,491,467,467,457,497,492,472,459,483,499],
[464,512,0,498,488,485,472,502,489,497,494,496,507],
[480,510,503,0,497,499,502,522,508,481,467,527,504],
[535,534,513,504,0,498,509,559,521,511,499,521,533],
[491,534,516,502,503,0,512,539,521,515,503,529,524],
[497,544,529,499,492,489,0,499,514,498,483,525,518],
[481,504,499,479,442,462,502,0,495,486,460,502,515],
[486,509,512,493,480,480,487,506,0,503,468,515,517],
[489,529,504,520,490,486,503,515,498,0,478,524,526],
[513,542,507,534,502,498,518,541,533,523,0,519,518],
[476,518,505,474,480,472,476,499,486,477,482,0,491],
[492,502,494,497,468,477,483,486,484,475,483,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,485,485,503,507,503,475,486,518,513,477,469],
[529,0,531,497,528,546,531,503,506,546,543,503,512],
[516,470,0,475,485,497,488,476,494,508,519,501,475],
[516,504,526,0,525,531,528,509,500,538,537,514,503],
[498,473,516,476,0,520,520,492,498,523,520,490,507],
[494,455,504,470,481,0,506,472,480,512,511,480,480],
[498,470,513,473,481,495,0,477,485,509,507,483,489],
[526,498,525,492,509,529,524,0,494,545,547,527,515],
[515,495,507,501,503,521,516,507,0,523,547,507,501],
[483,455,493,463,478,489,492,456,478,0,493,477,457],
[488,458,482,464,481,490,494,454,454,508,0,486,478],
[524,498,500,487,511,521,518,474,494,524,515,0,524],
[532,489,526,498,494,521,512,486,500,544,523,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,542,537,481,476,467,456,460,397,531,543,547,499],
[459,0,552,469,486,518,429,481,459,490,532,456,479],
[464,449,0,512,401,547,469,414,409,544,510,443,474],
[520,532,489,0,491,468,434,446,463,514,508,520,480],
[525,515,600,510,0,540,450,494,519,585,586,546,533],
[534,483,454,533,461,0,449,466,402,526,535,475,460],
[545,572,532,567,551,552,0,473,506,633,620,540,539],
[541,520,587,555,507,535,528,0,494,585,548,474,588],
[604,542,592,538,482,599,495,507,0,610,612,498,582],
[470,511,457,487,416,475,368,416,391,0,506,420,464],
[458,469,491,493,415,466,381,453,389,495,0,484,492],
[454,545,558,481,455,526,461,527,503,581,517,0,524],
[502,522,527,521,468,541,462,413,419,537,509,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,504,425,502,508,483,551,552,500,489,481,539],
[502,0,553,496,523,552,550,622,601,485,532,514,541],
[497,448,0,471,454,464,494,546,534,492,478,453,505],
[576,505,530,0,493,545,512,549,547,524,475,484,491],
[499,478,547,508,0,531,501,540,546,521,493,463,567],
[493,449,537,456,470,0,517,550,552,466,491,464,525],
[518,451,507,489,500,484,0,597,569,482,485,437,514],
[450,379,455,452,461,451,404,0,498,459,456,430,473],
[449,400,467,454,455,449,432,503,0,483,416,427,407],
[501,516,509,477,480,535,519,542,518,0,526,468,553],
[512,469,523,526,508,510,516,545,585,475,0,462,520],
[520,487,548,517,538,537,564,571,574,533,539,0,529],
[462,460,496,510,434,476,487,528,594,448,481,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,493,518,533,528,540,519,534,529,527,518,514],
[493,0,491,520,509,508,519,512,528,501,509,513,526],
[508,510,0,488,524,523,509,516,518,495,492,543,520],
[483,481,513,0,501,483,505,511,522,519,499,516,498],
[468,492,477,500,0,476,505,495,495,487,476,509,487],
[473,493,478,518,525,0,535,512,528,499,485,524,507],
[461,482,492,496,496,466,0,495,500,488,478,506,486],
[482,489,485,490,506,489,506,0,527,495,473,511,494],
[467,473,483,479,506,473,501,474,0,489,460,483,484],
[472,500,506,482,514,502,513,506,512,0,478,495,503],
[474,492,509,502,525,516,523,528,541,523,0,528,509],
[483,488,458,485,492,477,495,490,518,506,473,0,491],
[487,475,481,503,514,494,515,507,517,498,492,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,519,516,496,536,534,511,512,511,524,529,509],
[511,0,519,482,516,484,530,514,499,496,516,515,506],
[482,482,0,474,496,516,526,495,444,468,487,514,476],
[485,519,527,0,529,509,525,501,498,515,546,527,500],
[505,485,505,472,0,520,530,483,494,478,512,504,472],
[465,517,485,492,481,0,509,508,469,469,498,519,472],
[467,471,475,476,471,492,0,450,446,451,508,490,460],
[490,487,506,500,518,493,551,0,455,486,503,496,450],
[489,502,557,503,507,532,555,546,0,487,522,497,507],
[490,505,533,486,523,532,550,515,514,0,521,528,524],
[477,485,514,455,489,503,493,498,479,480,0,510,457],
[472,486,487,474,497,482,511,505,504,473,491,0,464],
[492,495,525,501,529,529,541,551,494,477,544,537,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,466,498,470,472,475,480,465,475,470,473,460],
[520,0,483,489,473,477,485,500,504,495,498,476,493],
[535,518,0,504,498,515,514,522,511,519,503,524,500],
[503,512,497,0,498,509,496,504,528,502,518,504,474],
[531,528,503,503,0,508,511,508,512,494,514,505,496],
[529,524,486,492,493,0,489,506,520,511,502,503,500],
[526,516,487,505,490,512,0,508,503,475,484,524,484],
[521,501,479,497,493,495,493,0,496,508,517,520,479],
[536,497,490,473,489,481,498,505,0,474,481,519,460],
[526,506,482,499,507,490,526,493,527,0,500,535,484],
[531,503,498,483,487,499,517,484,520,501,0,506,505],
[528,525,477,497,496,498,477,481,482,466,495,0,477],
[541,508,501,527,505,501,517,522,541,517,496,524,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,455,447,458,451,473,468,476,461,503,482,451],
[556,0,490,481,486,486,501,523,499,504,509,529,465],
[546,511,0,518,488,493,517,532,515,533,540,535,488],
[554,520,483,0,517,536,542,535,554,504,524,535,518],
[543,515,513,484,0,487,532,514,519,506,531,504,486],
[550,515,508,465,514,0,515,529,513,492,494,506,468],
[528,500,484,459,469,486,0,523,471,464,486,506,455],
[533,478,469,466,487,472,478,0,467,460,472,488,461],
[525,502,486,447,482,488,530,534,0,491,509,517,473],
[540,497,468,497,495,509,537,541,510,0,535,522,480],
[498,492,461,477,470,507,515,529,492,466,0,505,499],
[519,472,466,466,497,495,495,513,484,479,496,0,467],
[550,536,513,483,515,533,546,540,528,521,502,534,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,401,399,455,554,419,504,605,430,416,439,562,473],
[600,0,562,659,750,539,541,625,649,439,638,731,681],
[602,439,0,515,459,414,540,532,506,399,486,694,523],
[546,342,486,0,651,571,485,682,622,421,424,616,546],
[447,251,542,350,0,294,363,461,382,321,370,608,519],
[582,462,587,430,707,0,477,478,626,255,449,723,604],
[497,460,461,516,638,524,0,718,617,415,391,608,517],
[396,376,469,319,540,523,283,0,521,409,481,536,475],
[571,352,495,379,619,375,384,480,0,453,237,630,466],
[585,562,602,580,680,746,586,592,548,0,465,590,648],
[562,363,515,577,631,552,610,520,764,536,0,660,518],
[439,270,307,385,393,278,393,465,371,411,341,0,515],
[528,320,478,455,482,397,484,526,535,353,483,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,522,500,583,580,541,538,520,543,549,545,560,564],
[479,0,574,491,516,506,508,501,516,502,520,498,555],
[501,427,0,488,526,507,483,515,502,474,514,466,511],
[418,510,513,0,538,454,497,535,489,493,511,495,556],
[421,485,475,463,0,484,487,500,482,469,461,480,521],
[460,495,494,547,517,0,496,493,512,489,502,457,529],
[463,493,518,504,514,505,0,512,486,481,497,488,554],
[481,500,486,466,501,508,489,0,475,512,535,495,548],
[458,485,499,512,519,489,515,526,0,489,509,497,509],
[452,499,527,508,532,512,520,489,512,0,534,476,524],
[456,481,487,490,540,499,504,466,492,467,0,509,545],
[441,503,535,506,521,544,513,506,504,525,492,0,510],
[437,446,490,445,480,472,447,453,492,477,456,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,574,490,521,482,542,541,535,517,546,494,474],
[516,0,486,451,435,468,508,479,508,518,476,469,484],
[427,515,0,433,482,445,492,453,454,494,488,411,488],
[511,550,568,0,544,486,541,527,566,547,525,477,536],
[480,566,519,457,0,491,490,470,507,499,472,452,506],
[519,533,556,515,510,0,532,510,499,520,512,471,541],
[459,493,509,460,511,469,0,487,553,490,457,463,507],
[460,522,548,474,531,491,514,0,516,468,467,480,489],
[466,493,547,435,494,502,448,485,0,489,519,465,528],
[484,483,507,454,502,481,511,533,512,0,460,464,489],
[455,525,513,476,529,489,544,534,482,541,0,464,496],
[507,532,590,524,549,530,538,521,536,537,537,0,491],
[527,517,513,465,495,460,494,512,473,512,505,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,521,495,511,532,510,484,497,507,515,489,504],
[487,0,521,482,489,521,507,481,473,509,517,480,495],
[480,480,0,482,487,506,503,483,487,510,526,478,497],
[506,519,519,0,512,526,533,522,508,528,523,508,500],
[490,512,514,489,0,522,517,498,494,513,517,499,492],
[469,480,495,475,479,0,482,481,472,508,492,477,477],
[491,494,498,468,484,519,0,471,471,520,517,482,488],
[517,520,518,479,503,520,530,0,493,537,521,479,499],
[504,528,514,493,507,529,530,508,0,539,515,508,499],
[494,492,491,473,488,493,481,464,462,0,485,470,484],
[486,484,475,478,484,509,484,480,486,516,0,456,494],
[512,521,523,493,502,524,519,522,493,531,545,0,501],
[497,506,504,501,509,524,513,502,502,517,507,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,516,526,529,512,520,480,534,500,523,482,551],
[498,0,526,527,526,527,492,453,476,547,507,522,537],
[485,475,0,516,481,493,487,435,485,472,450,483,480],
[475,474,485,0,514,488,475,481,496,486,470,470,519],
[472,475,520,487,0,489,507,469,465,473,469,481,525],
[489,474,508,513,512,0,499,474,525,491,484,502,488],
[481,509,514,526,494,502,0,497,482,497,468,487,539],
[521,548,566,520,532,527,504,0,524,503,498,517,513],
[467,525,516,505,536,476,519,477,0,505,474,500,527],
[501,454,529,515,528,510,504,498,496,0,479,489,520],
[478,494,551,531,532,517,533,503,527,522,0,500,525],
[519,479,518,531,520,499,514,484,501,512,501,0,530],
[450,464,521,482,476,513,462,488,474,481,476,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,450,408,426,442,482,393,457,501,478,457,479],
[540,0,430,506,564,579,587,506,489,505,440,516,489],
[551,571,0,499,590,489,651,548,524,582,533,555,487],
[593,495,502,0,577,546,525,554,422,519,507,559,493],
[575,437,411,424,0,491,552,494,447,518,457,472,505],
[559,422,512,455,510,0,526,483,476,530,508,498,505],
[519,414,350,476,449,475,0,420,420,462,420,455,444],
[608,495,453,447,507,518,581,0,477,490,495,593,499],
[544,512,477,579,554,525,581,524,0,512,493,508,514],
[500,496,419,482,483,471,539,511,489,0,532,501,453],
[523,561,468,494,544,493,581,506,508,469,0,517,448],
[544,485,446,442,529,503,546,408,493,500,484,0,457],
[522,512,514,508,496,496,557,502,487,548,553,544,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,505,565,480,474,495,469,494,485,503,498,463],
[533,0,491,572,498,474,520,485,477,523,493,544,505],
[496,510,0,519,481,481,520,477,462,534,496,472,499],
[436,429,482,0,451,492,470,449,459,465,446,444,473],
[521,503,520,550,0,505,505,486,456,518,468,487,495],
[527,527,520,509,496,0,522,505,508,495,537,537,509],
[506,481,481,531,496,479,0,494,496,520,504,529,488],
[532,516,524,552,515,496,507,0,510,568,514,506,477],
[507,524,539,542,545,493,505,491,0,527,546,539,544],
[516,478,467,536,483,506,481,433,474,0,506,469,523],
[498,508,505,555,533,464,497,487,455,495,0,496,511],
[503,457,529,557,514,464,472,495,462,532,505,0,504],
[538,496,502,528,506,492,513,524,457,478,490,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,523,496,526,507,522,531,506,536,527,507,516,527],
[478,0,489,480,502,503,497,473,488,509,498,514,507],
[505,512,0,514,544,502,529,514,513,529,505,521,496],
[475,521,487,0,505,505,501,480,491,502,491,492,493],
[494,499,457,496,0,480,478,483,478,519,515,496,491],
[479,498,499,496,521,0,498,505,502,500,504,511,510],
[470,504,472,500,523,503,0,482,510,518,487,497,485],
[495,528,487,521,518,496,519,0,511,544,502,518,499],
[465,513,488,510,523,499,491,490,0,516,492,486,492],
[474,492,472,499,482,501,483,457,485,0,480,482,492],
[494,503,496,510,486,497,514,499,509,521,0,498,493],
[485,487,480,509,505,490,504,483,515,519,503,0,495],
[474,494,505,508,510,491,516,502,509,509,508,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,475,495,493,489,476,507,535,517,536,516,471],
[514,0,545,534,506,537,549,542,566,534,526,558,491],
[526,456,0,500,477,489,491,501,505,537,495,503,493],
[506,467,501,0,506,490,505,524,543,509,502,497,534],
[508,495,524,495,0,535,478,540,514,527,520,477,494],
[512,464,512,511,466,0,513,489,505,487,495,492,479],
[525,452,510,496,523,488,0,516,503,541,478,491,486],
[494,459,500,477,461,512,485,0,491,488,465,503,480],
[466,435,496,458,487,496,498,510,0,506,470,489,486],
[484,467,464,492,474,514,460,513,495,0,485,492,495],
[465,475,506,499,481,506,523,536,531,516,0,515,494],
[485,443,498,504,524,509,510,498,512,509,486,0,444],
[530,510,508,467,507,522,515,521,515,506,507,557,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,443,543,506,534,463,488,455,437,435,462,477],
[547,0,508,491,492,481,480,460,452,447,493,487,459],
[558,493,0,560,575,506,474,471,498,497,489,481,477],
[458,510,441,0,494,479,447,442,459,486,445,461,439],
[495,509,426,507,0,485,447,416,451,428,424,409,443],
[467,520,495,522,516,0,453,436,417,434,429,424,429],
[538,521,527,554,554,548,0,508,507,477,525,478,500],
[513,541,530,559,585,565,493,0,512,508,516,508,492],
[546,549,503,542,550,584,494,489,0,449,450,460,522],
[564,554,504,515,573,567,524,493,552,0,512,497,489],
[566,508,512,556,577,572,476,485,551,489,0,484,515],
[539,514,520,540,592,577,523,493,541,504,517,0,536],
[524,542,524,562,558,572,501,509,479,512,486,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,519,490,481,540,503,510,493,527,510,521,485,494],
[482,0,489,515,517,496,501,486,499,498,534,483,516],
[511,512,0,510,516,514,501,509,507,487,529,474,513],
[520,486,491,0,487,505,497,479,521,483,493,472,470],
[461,484,485,514,0,490,493,498,509,506,524,474,497],
[498,505,487,496,511,0,487,480,501,493,528,481,516],
[491,500,500,504,508,514,0,476,493,499,517,492,499],
[508,515,492,522,503,521,525,0,523,529,518,508,504],
[474,502,494,480,492,500,508,478,0,493,522,475,480],
[491,503,514,518,495,508,502,472,508,0,520,465,508],
[480,467,472,508,477,473,484,483,479,481,0,457,459],
[516,518,527,529,527,520,509,493,526,536,544,0,535],
[507,485,488,531,504,485,502,497,521,493,542,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,521,556,459,479,491,533,472,494,508,551,510,465],
[480,0,530,453,490,528,469,428,507,502,506,525,480],
[445,471,0,425,509,477,460,427,426,430,510,415,431],
[542,548,576,0,548,531,493,566,542,519,589,548,519],
[522,511,492,453,0,533,497,486,489,513,543,486,444],
[510,473,524,470,468,0,464,430,467,481,520,473,458],
[468,532,541,508,504,537,0,516,487,491,556,476,488],
[529,573,574,435,515,571,485,0,498,492,586,479,521],
[507,494,575,459,512,534,514,503,0,570,531,541,460],
[493,499,571,482,488,520,510,509,431,0,534,518,491],
[450,495,491,412,458,481,445,415,470,467,0,451,422],
[491,476,586,453,515,528,525,522,460,483,550,0,489],
[536,521,570,482,557,543,513,480,541,510,579,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,458,406,532,395,420,454,413,508,527,460,482],
[552,0,493,453,492,516,487,423,486,490,489,494,487],
[543,508,0,441,515,428,424,452,479,539,506,464,522],
[595,548,560,0,544,499,505,543,558,565,516,560,525],
[469,509,486,457,0,468,405,452,520,545,502,445,555],
[606,485,573,502,533,0,482,538,563,537,526,550,598],
[581,514,577,496,596,519,0,620,526,628,546,533,570],
[547,578,549,458,549,463,381,0,550,546,463,489,577],
[588,515,522,443,481,438,475,451,0,474,484,490,528],
[493,511,462,436,456,464,373,455,527,0,449,430,479],
[474,512,495,485,499,475,455,538,517,552,0,456,533],
[541,507,537,441,556,451,468,512,511,571,545,0,505],
[519,514,479,476,446,403,431,424,473,522,468,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,521,517,502,486,494,505,520,521,508,502,506,527],
[480,0,476,510,489,483,506,499,490,490,510,503,490],
[484,525,0,513,511,483,505,506,518,506,508,489,499],
[499,491,488,0,489,476,494,480,475,484,505,476,510],
[515,512,490,512,0,509,535,492,502,476,497,479,518],
[507,518,518,525,492,0,520,510,520,514,502,491,501],
[496,495,496,507,466,481,0,507,480,479,499,488,477],
[481,502,495,521,509,491,494,0,501,506,490,488,510],
[480,511,483,526,499,481,521,500,0,490,508,473,497],
[493,511,495,517,525,487,522,495,511,0,505,488,523],
[499,491,493,496,504,499,502,511,493,496,0,485,501],
[495,498,512,525,522,510,513,513,528,513,516,0,513],
[474,511,502,491,483,500,524,491,504,478,500,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,548,488,505,553,585,542,452,493,592,482,485,507],
[453,0,501,500,522,568,478,503,504,536,446,482,492],
[513,500,0,473,524,588,521,497,476,555,460,535,524],
[496,501,528,0,559,602,497,513,502,512,470,521,475],
[448,479,477,442,0,459,457,415,418,550,433,516,470],
[416,433,413,399,542,0,493,441,409,476,415,504,413],
[459,523,480,504,544,508,0,524,557,552,487,503,575],
[549,498,504,488,586,560,477,0,502,552,531,535,571],
[508,497,525,499,583,592,444,499,0,507,447,504,524],
[409,465,446,489,451,525,449,449,494,0,466,452,452],
[519,555,541,531,568,586,514,470,554,535,0,515,498],
[516,519,466,480,485,497,498,466,497,549,486,0,473],
[494,509,477,526,531,588,426,430,477,549,503,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,502,523,498,496,502,519,539,475,507,501,520],
[485,0,499,514,504,511,525,510,521,474,522,504,487],
[499,502,0,518,513,513,541,514,553,510,527,502,521],
[478,487,483,0,502,494,506,528,517,487,540,495,502],
[503,497,488,499,0,504,497,521,507,491,514,509,519],
[505,490,488,507,497,0,547,534,529,504,526,489,493],
[499,476,460,495,504,454,0,491,506,490,522,495,493],
[482,491,487,473,480,467,510,0,519,480,508,478,489],
[462,480,448,484,494,472,495,482,0,489,501,475,489],
[526,527,491,514,510,497,511,521,512,0,508,492,507],
[494,479,474,461,487,475,479,493,500,493,0,485,483],
[500,497,499,506,492,512,506,523,526,509,516,0,515],
[481,514,480,499,482,508,508,512,512,494,518,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,582,487,558,505,507,576,501,535,523,613,477,488],
[419,0,497,519,483,519,523,439,472,494,532,459,495],
[514,504,0,541,524,466,631,519,539,556,508,533,578],
[443,482,460,0,501,507,510,441,513,443,543,487,513],
[496,518,477,500,0,508,514,418,553,482,544,488,516],
[494,482,535,494,493,0,538,443,435,487,607,421,533],
[425,478,370,491,487,463,0,474,442,446,524,409,429],
[500,562,482,560,583,558,527,0,524,575,553,558,509],
[466,529,462,488,448,566,559,477,0,528,482,468,531],
[478,507,445,558,519,514,555,426,473,0,558,544,487],
[388,469,493,458,457,394,477,448,519,443,0,433,508],
[524,542,468,514,513,580,592,443,533,457,568,0,533],
[513,506,423,488,485,468,572,492,470,514,493,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,520,526,513,507,480,459,541,551,530,493,510,537],
[481,0,488,471,487,461,439,537,526,521,491,518,515],
[475,513,0,475,474,488,466,513,538,480,487,514,525],
[488,530,526,0,521,523,476,548,535,524,531,468,539],
[494,514,527,480,0,519,456,538,527,513,527,508,485],
[521,540,513,478,482,0,503,525,554,566,538,515,496],
[542,562,535,525,545,498,0,577,573,532,575,562,543],
[460,464,488,453,463,476,424,0,492,487,456,454,478],
[450,475,463,466,474,447,428,509,0,475,482,462,479],
[471,480,521,477,488,435,469,514,526,0,475,456,493],
[508,510,514,470,474,463,426,545,519,526,0,493,508],
[491,483,487,533,493,486,439,547,539,545,508,0,510],
[464,486,476,462,516,505,458,523,522,508,493,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,504,488,494,487,504,503,496,528,499,502,516],
[524,0,494,497,485,488,499,499,470,517,507,500,491],
[497,507,0,500,488,495,502,490,487,518,479,491,500],
[513,504,501,0,488,507,485,509,504,510,515,510,513],
[507,516,513,513,0,515,494,511,502,517,484,498,515],
[514,513,506,494,486,0,504,504,502,505,478,488,520],
[497,502,499,516,507,497,0,496,503,508,494,515,503],
[498,502,511,492,490,497,505,0,498,515,506,495,500],
[505,531,514,497,499,499,498,503,0,535,492,497,523],
[473,484,483,491,484,496,493,486,466,0,481,480,489],
[502,494,522,486,517,523,507,495,509,520,0,503,509],
[499,501,510,491,503,513,486,506,504,521,498,0,520],
[485,510,501,488,486,481,498,501,478,512,492,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,500,511,524,526,521,519,512,504,483,482,521],
[495,0,501,534,527,535,531,520,530,555,509,495,546],
[501,500,0,541,513,542,521,502,507,536,528,504,522],
[490,467,460,0,490,491,479,479,484,497,472,476,501],
[477,474,488,511,0,521,509,478,501,506,494,482,493],
[475,466,459,510,480,0,498,501,495,512,469,471,478],
[480,470,480,522,492,503,0,492,497,524,470,483,502],
[482,481,499,522,523,500,509,0,511,522,496,483,511],
[489,471,494,517,500,506,504,490,0,525,504,507,502],
[497,446,465,504,495,489,477,479,476,0,494,469,474],
[518,492,473,529,507,532,531,505,497,507,0,490,508],
[519,506,497,525,519,530,518,518,494,532,511,0,503],
[480,455,479,500,508,523,499,490,499,527,493,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,524,497,525,532,491,520,513,519,512,500,491],
[510,0,529,520,525,548,508,521,543,510,536,524,497],
[477,472,0,461,498,522,504,502,501,486,506,498,490],
[504,481,540,0,544,508,530,511,512,520,509,509,519],
[476,476,503,457,0,507,472,476,496,498,503,484,465],
[469,453,479,493,494,0,476,460,493,467,486,477,489],
[510,493,497,471,529,525,0,507,528,514,499,508,494],
[481,480,499,490,525,541,494,0,501,491,501,516,495],
[488,458,500,489,505,508,473,500,0,480,503,488,494],
[482,491,515,481,503,534,487,510,521,0,525,508,489],
[489,465,495,492,498,515,502,500,498,476,0,502,480],
[501,477,503,492,517,524,493,485,513,493,499,0,486],
[510,504,511,482,536,512,507,506,507,512,521,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,506,525,514,490,496,524,499,499,497,488,487],
[512,0,558,548,520,510,529,546,516,514,511,521,481],
[495,443,0,497,477,473,491,526,489,468,472,477,486],
[476,453,504,0,496,474,453,501,496,486,483,480,450],
[487,481,524,505,0,482,488,505,482,468,507,500,490],
[511,491,528,527,519,0,496,518,473,500,497,487,478],
[505,472,510,548,513,505,0,541,515,500,486,501,492],
[477,455,475,500,496,483,460,0,467,466,482,496,468],
[502,485,512,505,519,528,486,534,0,503,508,492,472],
[502,487,533,515,533,501,501,535,498,0,522,517,498],
[504,490,529,518,494,504,515,519,493,479,0,468,502],
[513,480,524,521,501,514,500,505,509,484,533,0,486],
[514,520,515,551,511,523,509,533,529,503,499,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,486,501,477,502,518,517,511,527,508,527,497],
[529,0,515,527,495,545,514,511,537,531,539,529,512],
[515,486,0,516,478,537,516,509,535,519,503,529,503],
[500,474,485,0,478,507,523,472,493,504,490,497,496],
[524,506,523,523,0,509,529,506,518,528,521,520,497],
[499,456,464,494,492,0,501,490,510,532,486,489,493],
[483,487,485,478,472,500,0,467,493,490,485,504,483],
[484,490,492,529,495,511,534,0,512,507,496,514,482],
[490,464,466,508,483,491,508,489,0,498,495,491,478],
[474,470,482,497,473,469,511,494,503,0,490,492,472],
[493,462,498,511,480,515,516,505,506,511,0,496,493],
[474,472,472,504,481,512,497,487,510,509,505,0,484],
[504,489,498,505,504,508,518,519,523,529,508,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,528,496,511,521,509,497,503,541,498,486,500],
[516,0,518,511,504,524,500,501,530,547,508,515,491],
[473,483,0,503,497,516,497,473,484,534,502,469,475],
[505,490,498,0,497,505,483,483,504,521,525,476,481],
[490,497,504,504,0,498,502,471,501,536,490,477,496],
[480,477,485,496,503,0,511,504,489,519,481,497,520],
[492,501,504,518,499,490,0,527,519,527,521,464,507],
[504,500,528,518,530,497,474,0,506,524,554,534,511],
[498,471,517,497,500,512,482,495,0,530,497,473,513],
[460,454,467,480,465,482,474,477,471,0,476,482,489],
[503,493,499,476,511,520,480,447,504,525,0,495,523],
[515,486,532,525,524,504,537,467,528,519,506,0,512],
[501,510,526,520,505,481,494,490,488,512,478,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,571,505,511,491,498,522,512,528,520,501,519,505],
[430,0,429,464,426,472,477,467,465,427,450,459,477],
[496,572,0,509,502,541,544,518,527,503,486,523,550],
[490,537,492,0,457,529,517,492,518,484,474,465,518],
[510,575,499,544,0,532,544,545,535,503,513,540,542],
[503,529,460,472,469,0,515,507,485,457,471,478,469],
[479,524,457,484,457,486,0,477,511,485,468,459,478],
[489,534,483,509,456,494,524,0,513,484,477,489,496],
[473,536,474,483,466,516,490,488,0,494,476,492,507],
[481,574,498,517,498,544,516,517,507,0,467,539,527],
[500,551,515,527,488,530,533,524,525,534,0,550,531],
[482,542,478,536,461,523,542,512,509,462,451,0,516],
[496,524,451,483,459,532,523,505,494,474,470,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,539,533,567,539,519,503,539,541,497,560,531],
[486,0,544,511,600,535,514,520,557,546,506,527,481],
[462,457,0,477,502,513,481,490,496,480,458,492,465],
[468,490,524,0,533,515,490,480,501,486,477,484,501],
[434,401,499,468,0,474,451,439,487,436,423,471,462],
[462,466,488,486,527,0,496,500,503,487,483,503,474],
[482,487,520,511,550,505,0,528,505,507,501,512,489],
[498,481,511,521,562,501,473,0,552,514,498,512,509],
[462,444,505,500,514,498,496,449,0,520,450,476,489],
[460,455,521,515,565,514,494,487,481,0,482,519,491],
[504,495,543,524,578,518,500,503,551,519,0,499,522],
[441,474,509,517,530,498,489,489,525,482,502,0,474],
[470,520,536,500,539,527,512,492,512,510,479,527,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,543,367,546,581,517,538,473,458,447,375,554,637],
[458,0,427,520,535,386,604,493,501,496,425,546,575],
[634,574,0,702,692,529,595,551,565,439,570,650,645],
[455,481,299,0,542,438,363,418,349,400,450,519,401],
[420,466,309,459,0,428,393,302,423,444,396,480,491],
[484,615,472,563,573,0,595,458,627,469,540,587,513],
[463,397,406,638,608,406,0,539,456,526,416,642,599],
[528,508,450,583,699,543,462,0,621,471,618,622,585],
[543,500,436,652,578,374,545,380,0,543,484,665,653],
[554,505,562,601,557,532,475,530,458,0,431,652,565],
[626,576,431,551,605,461,585,383,517,570,0,625,672],
[447,455,351,482,521,414,359,379,336,349,376,0,489],
[364,426,356,600,510,488,402,416,348,436,329,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,538,530,482,479,481,566,454,512,511,488,408,378],
[463,0,457,520,537,553,574,545,545,509,542,509,416],
[471,544,0,562,517,439,591,501,484,649,545,432,481],
[519,481,439,0,469,422,432,421,485,491,471,449,405],
[522,464,484,532,0,484,537,458,526,605,507,429,396],
[520,448,562,579,517,0,545,490,531,561,617,423,501],
[435,427,410,569,464,456,0,457,429,519,422,384,348],
[547,456,500,580,543,511,544,0,520,619,494,419,494],
[489,456,517,516,475,470,572,481,0,515,510,410,412],
[490,492,352,510,396,440,482,382,486,0,443,436,438],
[513,459,456,530,494,384,579,507,491,558,0,367,433],
[593,492,569,552,572,578,617,582,591,565,634,0,548],
[623,585,520,596,605,500,653,507,589,563,568,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,486,510,479,489,499,483,533,497,488,483,519],
[486,0,489,483,492,484,476,492,490,510,495,494,489],
[515,512,0,508,518,490,497,507,507,508,507,525,536],
[491,518,493,0,502,460,465,510,481,506,477,496,503],
[522,509,483,499,0,473,492,487,499,520,491,496,504],
[512,517,511,541,528,0,487,500,504,512,498,515,534],
[502,525,504,536,509,514,0,521,496,545,502,510,517],
[518,509,494,491,514,501,480,0,481,535,516,518,509],
[468,511,494,520,502,497,505,520,0,527,507,513,524],
[504,491,493,495,481,489,456,466,474,0,461,494,489],
[513,506,494,524,510,503,499,485,494,540,0,527,525],
[518,507,476,505,505,486,491,483,488,507,474,0,509],
[482,512,465,498,497,467,484,492,477,512,476,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,532,501,490,510,483,506,459,513,508,513,544,515],
[469,0,478,441,482,498,463,429,472,475,474,480,478],
[500,523,0,512,514,486,510,476,489,516,518,519,499],
[511,560,489,0,530,515,505,492,505,525,534,512,506],
[491,519,487,471,0,513,495,489,491,497,517,526,495],
[518,503,515,486,488,0,489,477,489,466,497,514,514],
[495,538,491,496,506,512,0,504,511,485,524,532,526],
[542,572,525,509,512,524,497,0,524,520,529,540,510],
[488,529,512,496,510,512,490,477,0,492,486,536,468],
[493,526,485,476,504,535,516,481,509,0,526,527,517],
[488,527,483,467,484,504,477,472,515,475,0,513,495],
[457,521,482,489,475,487,469,461,465,474,488,0,486],
[486,523,502,495,506,487,475,491,533,484,506,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,493,500,490,529,485,515,504,492,477,503,498],
[537,0,518,495,484,513,497,541,517,486,480,500,508],
[508,483,0,523,489,508,499,498,502,487,489,502,508],
[501,506,478,0,516,466,484,527,519,490,458,471,493],
[511,517,512,485,0,506,511,516,539,511,505,510,506],
[472,488,493,535,495,0,494,522,517,509,476,505,527],
[516,504,502,517,490,507,0,497,521,485,482,488,499],
[486,460,503,474,485,479,504,0,496,480,460,496,491],
[497,484,499,482,462,484,480,505,0,477,452,495,509],
[509,515,514,511,490,492,516,521,524,0,492,510,509],
[524,521,512,543,496,525,519,541,549,509,0,520,525],
[498,501,499,530,491,496,513,505,506,491,481,0,510],
[503,493,493,508,495,474,502,510,492,492,476,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,538,559,521,486,510,537,522,550,515,500,536,529],
[463,0,480,503,486,500,501,501,487,517,483,524,500],
[442,521,0,507,504,503,527,506,501,515,558,531,518],
[480,498,494,0,517,506,488,513,515,494,490,498,515],
[515,515,497,484,0,525,493,493,502,498,500,507,509],
[491,501,498,495,476,0,498,504,460,513,481,477,520],
[464,500,474,513,508,503,0,496,458,503,466,478,493],
[479,500,495,488,508,497,505,0,502,505,498,500,501],
[451,514,500,486,499,541,543,499,0,521,516,489,504],
[486,484,486,507,503,488,498,496,480,0,486,475,479],
[501,518,443,511,501,520,535,503,485,515,0,517,507],
[465,477,470,503,494,524,523,501,512,526,484,0,520],
[472,501,483,486,492,481,508,500,497,522,494,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,515,499,472,507,503,467,463,492,494,573,508],
[483,0,485,497,505,503,493,456,478,482,489,536,454],
[486,516,0,506,495,493,543,492,478,530,509,530,493],
[502,504,495,0,529,495,515,501,504,461,514,553,512],
[529,496,506,472,0,506,523,506,488,485,507,539,486],
[494,498,508,506,495,0,508,493,515,508,517,501,521],
[498,508,458,486,478,493,0,429,443,510,486,479,451],
[534,545,509,500,495,508,572,0,483,510,545,526,505],
[538,523,523,497,513,486,558,518,0,507,524,536,510],
[509,519,471,540,516,493,491,491,494,0,461,514,482],
[507,512,492,487,494,484,515,456,477,540,0,508,509],
[428,465,471,448,462,500,522,475,465,487,493,0,476],
[493,547,508,489,515,480,550,496,491,519,492,525,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,527,491,518,503,495,486,492,496,471,506,487],
[519,0,538,500,509,515,512,511,510,518,503,523,517],
[474,463,0,462,504,470,468,454,485,485,457,483,477],
[510,501,539,0,505,498,524,510,509,511,498,502,526],
[483,492,497,496,0,489,471,494,479,519,484,490,506],
[498,486,531,503,512,0,507,473,488,472,477,514,486],
[506,489,533,477,530,494,0,484,488,499,509,495,493],
[515,490,547,491,507,528,517,0,493,518,525,520,498],
[509,491,516,492,522,513,513,508,0,524,490,493,504],
[505,483,516,490,482,529,502,483,477,0,504,505,504],
[530,498,544,503,517,524,492,476,511,497,0,503,515],
[495,478,518,499,511,487,506,481,508,496,498,0,492],
[514,484,524,475,495,515,508,503,497,497,486,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,516,523,528,513,516,499,502,524,527,524,491],
[501,0,495,496,502,487,521,482,485,524,506,544,503],
[485,506,0,498,509,510,518,491,485,530,519,495,493],
[478,505,503,0,496,477,497,486,475,486,498,487,466],
[473,499,492,505,0,499,523,495,494,511,527,512,498],
[488,514,491,524,502,0,510,479,477,518,542,511,499],
[485,480,483,504,478,491,0,477,464,502,501,499,493],
[502,519,510,515,506,522,524,0,489,518,532,521,504],
[499,516,516,526,507,524,537,512,0,535,533,539,520],
[477,477,471,515,490,483,499,483,466,0,522,478,473],
[474,495,482,503,474,459,500,469,468,479,0,485,479],
[477,457,506,514,489,490,502,480,462,523,516,0,477],
[510,498,508,535,503,502,508,497,481,528,522,524,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,485,609,526,557,582,536,556,520,473,431,471],
[533,0,494,452,383,521,563,482,519,676,585,548,412],
[516,507,0,425,354,545,503,397,453,614,475,459,472],
[392,549,576,0,551,588,518,524,585,504,585,556,537],
[475,618,647,450,0,638,472,454,406,501,500,513,469],
[444,480,456,413,363,0,453,482,542,497,477,605,474],
[419,438,498,483,529,548,0,379,519,469,447,312,440],
[465,519,604,477,547,519,622,0,482,503,544,487,501],
[445,482,548,416,595,459,482,519,0,449,533,442,517],
[481,325,387,497,500,504,532,498,552,0,496,510,427],
[528,416,526,416,501,524,554,457,468,505,0,411,512],
[570,453,542,445,488,396,689,514,559,491,590,0,513],
[530,589,529,464,532,527,561,500,484,574,489,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,425,377,464,463,476,501,558,382,534,337,481],
[517,0,518,395,497,515,524,506,531,523,586,491,524],
[576,483,0,483,515,524,578,446,534,446,495,289,520],
[624,606,518,0,465,573,583,601,614,519,614,518,601],
[537,504,486,536,0,560,577,482,597,534,562,459,554],
[538,486,477,428,441,0,490,474,556,437,594,418,489],
[525,477,423,418,424,511,0,445,488,432,499,454,426],
[500,495,555,400,519,527,556,0,580,503,551,452,526],
[443,470,467,387,404,445,513,421,0,407,495,388,447],
[619,478,555,482,467,564,569,498,594,0,581,435,608],
[467,415,506,387,439,407,502,450,506,420,0,410,488],
[664,510,712,483,542,583,547,549,613,566,591,0,519],
[520,477,481,400,447,512,575,475,554,393,513,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,513,502,536,497,485,537,500,482,466,528,501],
[513,0,529,498,542,487,518,538,510,487,496,535,457],
[488,472,0,516,554,502,505,566,519,536,528,540,497],
[499,503,485,0,543,485,512,539,509,504,495,523,504],
[465,459,447,458,0,506,482,496,482,482,475,499,463],
[504,514,499,516,495,0,514,520,492,519,482,533,488],
[516,483,496,489,519,487,0,542,495,493,515,499,494],
[464,463,435,462,505,481,459,0,459,461,456,475,429],
[501,491,482,492,519,509,506,542,0,486,506,518,487],
[519,514,465,497,519,482,508,540,515,0,486,500,487],
[535,505,473,506,526,519,486,545,495,515,0,500,481],
[473,466,461,478,502,468,502,526,483,501,501,0,468],
[500,544,504,497,538,513,507,572,514,514,520,533,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1001, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mercw/mercw_13_1001.csv", index=False, header=False)
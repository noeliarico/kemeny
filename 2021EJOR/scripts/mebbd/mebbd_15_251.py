
import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg
from kemeny import sc

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,122,124,141,122,125,127,121,115,114,111,122,119,136,121],
[129,0,127,140,127,136,125,122,112,121,123,126,133,126,120],
[127,124,0,131,119,146,125,124,107,133,129,123,133,133,132],
[110,111,120,0,118,120,115,119,106,112,118,117,119,115,118],
[129,124,132,133,0,142,126,127,130,127,126,123,130,133,122],
[126,115,105,131,109,0,109,124,107,114,106,122,132,110,120],
[124,126,126,136,125,142,0,117,108,138,113,117,127,117,115],
[130,129,127,132,124,127,134,0,106,120,125,120,130,119,115],
[136,139,144,145,121,144,143,145,0,137,146,135,146,141,138],
[137,130,118,139,124,137,113,131,114,0,126,127,133,127,122],
[140,128,122,133,125,145,138,126,105,125,0,120,140,138,134],
[129,125,128,134,128,129,134,131,116,124,131,0,136,125,128],
[132,118,118,132,121,119,124,121,105,118,111,115,0,130,113],
[115,125,118,136,118,141,134,132,110,124,113,126,121,0,114],
[130,131,119,133,129,131,136,136,113,129,117,123,138,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 1, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,175,97,114,66,61,160,151,127,109,95,149,133,101],
[62,0,131,75,53,64,50,113,61,22,81,51,87,83,80],
[76,120,0,89,88,68,69,139,107,83,65,57,94,82,66],
[154,176,162,0,135,101,108,162,137,143,109,124,139,156,125],
[137,198,163,116,0,137,142,199,117,134,163,105,163,158,94],
[185,187,183,150,114,0,115,180,139,148,112,134,159,146,133],
[190,201,182,143,109,136,0,171,136,129,103,134,137,143,112],
[91,138,112,89,52,71,80,0,114,56,98,30,101,100,68],
[100,190,144,114,134,112,115,137,0,103,143,98,114,158,83],
[124,229,168,108,117,103,122,195,148,0,136,114,131,169,90],
[142,170,186,142,88,139,148,153,108,115,0,124,173,147,116],
[156,200,194,127,146,117,117,221,153,137,127,0,145,126,131],
[102,164,157,112,88,92,114,150,137,120,78,106,0,127,53],
[118,168,169,95,93,105,108,151,93,82,104,125,124,0,84],
[150,171,185,126,157,118,139,183,168,161,135,120,198,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 2, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,135,127,131,133,110,118,146,154,109,138,138,112,135],
[143,0,133,164,122,127,130,132,155,150,113,132,136,129,121],
[116,118,0,161,136,133,132,134,134,140,134,149,133,105,126],
[124,87,90,0,122,119,95,127,121,140,98,124,131,112,130],
[120,129,115,129,0,100,84,119,156,137,117,131,115,126,132],
[118,124,118,132,151,0,131,143,122,134,137,163,117,125,107],
[141,121,119,156,167,120,0,151,160,156,124,166,144,132,136],
[133,119,117,124,132,108,100,0,138,137,118,156,118,115,142],
[105,96,117,130,95,129,91,113,0,132,112,125,129,103,120],
[97,101,111,111,114,117,95,114,119,0,104,119,114,76,107],
[142,138,117,153,134,114,127,133,139,147,0,159,132,109,137],
[113,119,102,127,120,88,85,95,126,132,92,0,96,108,111],
[113,115,118,120,136,134,107,133,122,137,119,155,0,100,117],
[139,122,146,139,125,126,119,136,148,175,142,143,151,0,130],
[116,130,125,121,119,144,115,109,131,144,114,140,134,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 3, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,130,147,158,140,128,131,145,139,148,146,121,162,136],
[128,0,115,111,139,143,133,112,142,160,135,132,136,154,128],
[121,136,0,135,142,142,125,116,153,140,151,143,129,136,135],
[104,140,116,0,120,159,149,135,131,139,123,165,134,131,162],
[93,112,109,131,0,121,139,63,123,128,120,131,119,118,152],
[111,108,109,92,130,0,137,114,121,112,116,102,99,128,120],
[123,118,126,102,112,114,0,103,113,108,128,107,103,143,120],
[120,139,135,116,188,137,148,0,133,166,138,131,134,146,140],
[106,109,98,120,128,130,138,118,0,130,160,123,122,149,108],
[112,91,111,112,123,139,143,85,121,0,149,126,125,143,103],
[103,116,100,128,131,135,123,113,91,102,0,131,114,157,141],
[105,119,108,86,120,149,144,120,128,125,120,0,115,136,108],
[130,115,122,117,132,152,148,117,129,126,137,136,0,145,150],
[89,97,115,120,133,123,108,105,102,108,94,115,106,0,119],
[115,123,116,89,99,131,131,111,143,148,110,143,101,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 4, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,114,108,121,123,119,122,116,132,125,125,125,115],
[143,0,127,120,132,137,134,140,131,135,147,123,137,130,142],
[145,124,0,121,127,132,136,137,130,122,143,131,142,124,134],
[137,131,130,0,120,132,136,143,127,137,142,130,129,129,142],
[143,119,124,131,0,132,132,136,128,122,139,127,138,130,130],
[130,114,119,119,119,0,126,137,130,121,134,130,130,123,132],
[128,117,115,115,119,125,0,132,122,122,128,135,128,123,130],
[132,111,114,108,115,114,119,0,110,116,130,106,115,118,115],
[129,120,121,124,123,121,129,141,0,120,137,129,128,120,128],
[135,116,129,114,129,130,129,135,131,0,143,135,127,118,131],
[119,104,108,109,112,117,123,121,114,108,0,110,121,115,112],
[126,128,120,121,124,121,116,145,122,116,141,0,130,127,127],
[126,114,109,122,113,121,123,136,123,124,130,121,0,125,124],
[126,121,127,122,121,128,128,133,131,133,136,124,126,0,128],
[136,109,117,109,121,119,121,136,123,120,139,124,127,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 5, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,130,139,137,120,136,134,136,135,125,135,138,134,120],
[119,0,135,142,146,127,125,131,128,137,135,134,138,135,125],
[121,116,0,133,132,121,112,130,115,117,111,122,128,123,117],
[112,109,118,0,119,120,119,115,119,119,121,114,124,104,115],
[114,105,119,132,0,118,123,133,121,128,121,119,119,114,113],
[131,124,130,131,133,0,131,138,126,121,123,134,131,130,127],
[115,126,139,132,128,120,0,140,123,133,125,126,139,123,126],
[117,120,121,136,118,113,111,0,123,131,123,117,130,115,119],
[115,123,136,132,130,125,128,128,0,132,112,122,126,120,112],
[116,114,134,132,123,130,118,120,119,0,119,130,126,117,117],
[126,116,140,130,130,128,126,128,139,132,0,135,132,130,116],
[116,117,129,137,132,117,125,134,129,121,116,0,135,127,131],
[113,113,123,127,132,120,112,121,125,125,119,116,0,118,110],
[117,116,128,147,137,121,128,136,131,134,121,124,133,0,119],
[131,126,134,136,138,124,125,132,139,134,135,120,141,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 6, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,147,123,135,126,136,133,126,132,135,109,136,153,150],
[115,0,115,101,120,117,112,126,112,111,124,100,110,139,129],
[104,136,0,96,116,119,109,116,115,113,116,115,124,142,121],
[128,150,155,0,127,132,129,130,118,130,127,133,123,154,152],
[116,131,135,124,0,136,129,124,133,140,109,112,127,148,128],
[125,134,132,119,115,0,127,113,108,126,119,123,119,148,142],
[115,139,142,122,122,124,0,110,134,130,141,131,128,144,150],
[118,125,135,121,127,138,141,0,116,108,139,111,135,153,134],
[125,139,136,133,118,143,117,135,0,126,118,124,144,149,138],
[119,140,138,121,111,125,121,143,125,0,131,130,136,169,143],
[116,127,135,124,142,132,110,112,133,120,0,121,128,145,120],
[142,151,136,118,139,128,120,140,127,121,130,0,118,134,153],
[115,141,127,128,124,132,123,116,107,115,123,133,0,143,138],
[98,112,109,97,103,103,107,98,102,82,106,117,108,0,112],
[101,122,130,99,123,109,101,117,113,108,131,98,113,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 7, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,164,91,100,116,144,143,119,89,121,98,77,137,96],
[148,0,149,118,142,189,133,175,167,145,164,161,150,149,173],
[87,102,0,110,117,83,115,130,129,105,143,110,59,120,100],
[160,133,141,0,132,129,137,153,112,109,128,150,104,167,159],
[151,109,134,119,0,144,117,153,128,85,122,124,87,152,109],
[135,62,168,122,107,0,128,149,131,112,141,147,105,116,141],
[107,118,136,114,134,123,0,127,149,85,118,139,99,154,99],
[108,76,121,98,98,102,124,0,148,114,125,149,109,138,133],
[132,84,122,139,123,120,102,103,0,98,108,115,85,112,119],
[162,106,146,142,166,139,166,137,153,0,142,127,128,188,116],
[130,87,108,123,129,110,133,126,143,109,0,117,79,161,95],
[153,90,141,101,127,104,112,102,136,124,134,0,97,156,85],
[174,101,192,147,164,146,152,142,166,123,172,154,0,181,177],
[114,102,131,84,99,135,97,113,139,63,90,95,70,0,90],
[155,78,151,92,142,110,152,118,132,135,156,166,74,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 8, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,103,116,129,116,112,113,110,116,119,112,107,100,132],
[138,0,111,125,104,126,126,128,113,120,128,111,132,120,142],
[148,140,0,130,127,141,147,148,132,121,133,134,130,130,130],
[135,126,121,0,129,139,131,126,127,124,125,120,120,129,121],
[122,147,124,122,0,123,133,134,115,131,128,118,116,137,130],
[135,125,110,112,128,0,120,121,123,113,125,115,109,117,120],
[139,125,104,120,118,131,0,125,118,113,123,114,107,126,118],
[138,123,103,125,117,130,126,0,117,111,128,112,118,121,120],
[141,138,119,124,136,128,133,134,0,128,127,128,129,141,141],
[135,131,130,127,120,138,138,140,123,0,136,135,119,130,133],
[132,123,118,126,123,126,128,123,124,115,0,127,134,114,141],
[139,140,117,131,133,136,137,139,123,116,124,0,119,127,141],
[144,119,121,131,135,142,144,133,122,132,117,132,0,128,139],
[151,131,121,122,114,134,125,130,110,121,137,124,123,0,132],
[119,109,121,130,121,131,133,131,110,118,110,110,112,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 9, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,141,142,136,114,133,147,140,129,127,130,124,140,114],
[110,0,138,124,119,112,110,120,127,105,117,125,96,114,111],
[110,113,0,112,126,110,118,124,132,108,122,130,95,121,115],
[109,127,139,0,132,103,122,135,129,123,115,125,108,116,106],
[115,132,125,119,0,110,139,116,130,105,108,111,95,121,102],
[137,139,141,148,141,0,141,136,132,122,132,140,126,136,117],
[118,141,133,129,112,110,0,133,131,115,114,116,102,135,110],
[104,131,127,116,135,115,118,0,130,110,114,127,100,122,116],
[111,124,119,122,121,119,120,121,0,109,118,121,102,114,107],
[122,146,143,128,146,129,136,141,142,0,128,148,120,143,142],
[124,134,129,136,143,119,137,137,133,123,0,129,118,134,127],
[121,126,121,126,140,111,135,124,130,103,122,0,91,140,114],
[127,155,156,143,156,125,149,151,149,131,133,160,0,144,130],
[111,137,130,135,130,115,116,129,137,108,117,111,107,0,118],
[137,140,136,145,149,134,141,135,144,109,124,137,121,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 10, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,120,128,109,117,117,134,130,121,109,127,112,130,111],
[133,0,138,137,132,121,127,142,145,120,127,128,131,140,142],
[131,113,0,114,125,119,117,127,126,125,117,130,121,125,134],
[123,114,137,0,121,117,123,137,120,112,116,138,121,137,134],
[142,119,126,130,0,118,123,130,129,122,119,140,130,129,130],
[134,130,132,134,133,0,126,141,141,129,134,129,122,146,128],
[134,124,134,128,128,125,0,131,130,132,135,132,133,135,134],
[117,109,124,114,121,110,120,0,115,118,120,129,116,120,131],
[121,106,125,131,122,110,121,136,0,112,114,133,118,132,119],
[130,131,126,139,129,122,119,133,139,0,115,132,116,135,131],
[142,124,134,135,132,117,116,131,137,136,0,131,130,146,137],
[124,123,121,113,111,122,119,122,118,119,120,0,115,125,119],
[139,120,130,130,121,129,118,135,133,135,121,136,0,136,131],
[121,111,126,114,122,105,116,131,119,116,105,126,115,0,120],
[140,109,117,117,121,123,117,120,132,120,114,132,120,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 11, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,141,130,111,101,79,147,110,94,162,162,105,165,112],
[129,0,122,132,122,67,90,140,121,145,153,127,113,96,120],
[110,129,0,88,120,109,106,83,150,95,150,130,96,146,110],
[121,119,163,0,126,131,128,137,122,170,143,161,169,149,123],
[140,129,131,125,0,107,104,169,142,135,180,169,128,153,122],
[150,184,142,120,144,0,127,167,155,172,183,163,163,146,125],
[172,161,145,123,147,124,0,180,191,171,163,182,176,189,189],
[104,111,168,114,82,84,71,0,142,139,138,136,115,135,120],
[141,130,101,129,109,96,60,109,0,95,153,126,115,129,89],
[157,106,156,81,116,79,80,112,156,0,125,115,120,124,112],
[89,98,101,108,71,68,88,113,98,126,0,119,106,122,99],
[89,124,121,90,82,88,69,115,125,136,132,0,88,154,106],
[146,138,155,82,123,88,75,136,136,131,145,163,0,157,155],
[86,155,105,102,98,105,62,116,122,127,129,97,94,0,118],
[139,131,141,128,129,126,62,131,162,139,152,145,96,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 12, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,123,122,124,120,129,126,126,124,140,130,108,124,115],
[140,0,134,126,122,121,128,141,113,121,137,131,120,125,115],
[128,117,0,121,113,117,128,130,108,122,140,124,131,125,127],
[129,125,130,0,137,121,124,133,113,119,131,133,129,116,116],
[127,129,138,114,0,118,130,126,117,127,142,124,124,129,108],
[131,130,134,130,133,0,130,137,123,139,129,141,130,132,121],
[122,123,123,127,121,121,0,134,125,119,124,123,123,127,120],
[125,110,121,118,125,114,117,0,115,118,113,142,114,113,113],
[125,138,143,138,134,128,126,136,0,141,136,136,136,134,120],
[127,130,129,132,124,112,132,133,110,0,130,147,121,119,119],
[111,114,111,120,109,122,127,138,115,121,0,135,113,117,120],
[121,120,127,118,127,110,128,109,115,104,116,0,102,122,121],
[143,131,120,122,127,121,128,137,115,130,138,149,0,135,124],
[127,126,126,135,122,119,124,138,117,132,134,129,116,0,140],
[136,136,124,135,143,130,131,138,131,132,131,130,127,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 13, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,127,122,128,103,131,128,123,123,128,117,116,114,126],
[110,0,108,108,116,108,107,121,113,116,104,115,113,118,121],
[124,143,0,119,137,109,125,128,139,145,126,123,121,131,118],
[129,143,132,0,147,115,129,137,138,135,131,137,128,146,142],
[123,135,114,104,0,120,107,121,132,107,116,118,132,125,120],
[148,143,142,136,131,0,140,134,167,145,138,118,129,131,132],
[120,144,126,122,144,111,0,133,128,116,127,114,127,121,138],
[123,130,123,114,130,117,118,0,124,121,123,99,116,124,133],
[128,138,112,113,119,84,123,127,0,120,122,121,113,122,123],
[128,135,106,116,144,106,135,130,131,0,117,96,121,132,123],
[123,147,125,120,135,113,124,128,129,134,0,114,134,130,114],
[134,136,128,114,133,133,137,152,130,155,137,0,142,135,142],
[135,138,130,123,119,122,124,135,138,130,117,109,0,119,135],
[137,133,120,105,126,120,130,127,129,119,121,116,132,0,134],
[125,130,133,109,131,119,113,118,128,128,137,109,116,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 14, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,106,118,129,109,117,125,119,122,121,122,118,123,126],
[117,0,110,126,126,113,109,117,114,127,115,125,113,126,131],
[145,141,0,136,144,125,131,127,136,152,134,140,126,138,137],
[133,125,115,0,134,115,127,127,121,138,135,136,128,134,133],
[122,125,107,117,0,103,108,107,106,118,128,121,116,128,115],
[142,138,126,136,148,0,123,132,120,133,135,138,131,147,129],
[134,142,120,124,143,128,0,126,129,135,133,135,131,139,128],
[126,134,124,124,144,119,125,0,127,142,140,134,131,136,129],
[132,137,115,130,145,131,122,124,0,134,130,136,128,141,129],
[129,124,99,113,133,118,116,109,117,0,121,129,118,137,130],
[130,136,117,116,123,116,118,111,121,130,0,123,121,131,128],
[129,126,111,115,130,113,116,117,115,122,128,0,122,128,119],
[133,138,125,123,135,120,120,120,123,133,130,129,0,134,133],
[128,125,113,117,123,104,112,115,110,114,120,123,117,0,123],
[125,120,114,118,136,122,123,122,122,121,123,132,118,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 15, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,97,107,106,139,150,121,136,160,81,137,144,151,126],
[104,0,105,110,92,115,125,88,90,140,65,116,126,142,119],
[154,146,0,121,145,118,142,142,129,142,110,154,141,150,131],
[144,141,130,0,133,112,138,115,123,157,131,152,168,147,148],
[145,159,106,118,0,109,119,129,152,169,105,139,109,116,146],
[112,136,133,139,142,0,135,133,142,176,132,122,134,136,160],
[101,126,109,113,132,116,0,122,117,141,106,162,123,141,154],
[130,163,109,136,122,118,129,0,136,139,71,133,160,151,134],
[115,161,122,128,99,109,134,115,0,159,124,161,150,153,140],
[91,111,109,94,82,75,110,112,92,0,72,123,107,119,98],
[170,186,141,120,146,119,145,180,127,179,0,162,138,162,131],
[114,135,97,99,112,129,89,118,90,128,89,0,131,162,119],
[107,125,110,83,142,117,128,91,101,144,113,120,0,144,136],
[100,109,101,104,135,115,110,100,98,132,89,89,107,0,111],
[125,132,120,103,105,91,97,117,111,153,120,132,115,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 16, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,118,191,150,160,134,134,182,130,170,163,122,109,115],
[90,0,138,137,103,176,113,126,108,101,113,155,110,146,107],
[133,113,0,144,130,124,131,156,136,111,175,178,102,128,131],
[60,114,107,0,81,63,78,78,106,18,151,133,80,103,106],
[101,148,121,170,0,171,93,121,117,107,157,136,89,111,118],
[91,75,127,188,80,0,105,136,143,70,160,173,128,116,131],
[117,138,120,173,158,146,0,104,173,103,188,145,101,126,114],
[117,125,95,173,130,115,147,0,157,111,167,205,101,93,79],
[69,143,115,145,134,108,78,94,0,109,166,154,102,79,81],
[121,150,140,233,144,181,148,140,142,0,200,205,175,169,121],
[81,138,76,100,94,91,63,84,85,51,0,143,100,106,56],
[88,96,73,118,115,78,106,46,97,46,108,0,90,101,75],
[129,141,149,171,162,123,150,150,149,76,151,161,0,106,87],
[142,105,123,148,140,135,125,158,172,82,145,150,145,0,134],
[136,144,120,145,133,120,137,172,170,130,195,176,164,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 17, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,113,116,111,110,116,112,110,116,102,123,107,115,98],
[145,0,139,123,117,128,127,141,113,132,127,140,134,128,128],
[138,112,0,111,114,122,110,122,113,129,127,131,122,127,116],
[135,128,140,0,126,131,137,128,120,129,115,134,125,128,128],
[140,134,137,125,0,159,141,129,131,142,125,165,124,140,125],
[141,123,129,120,92,0,119,116,120,139,123,144,127,147,126],
[135,124,141,114,110,132,0,135,128,138,113,142,123,135,125],
[139,110,129,123,122,135,116,0,116,131,121,131,134,129,114],
[141,138,138,131,120,131,123,135,0,140,124,141,127,130,129],
[135,119,122,122,109,112,113,120,111,0,119,141,113,136,121],
[149,124,124,136,126,128,138,130,127,132,0,140,121,138,135],
[128,111,120,117,86,107,109,120,110,110,111,0,116,125,109],
[144,117,129,126,127,124,128,117,124,138,130,135,0,138,115],
[136,123,124,123,111,104,116,122,121,115,113,126,113,0,119],
[153,123,135,123,126,125,126,137,122,130,116,142,136,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 18, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,125,113,127,114,105,135,158,149,131,109,122,122,124],
[116,0,92,123,126,98,123,104,138,135,106,88,103,124,122],
[126,159,0,147,134,131,140,136,161,167,120,115,135,127,154],
[138,128,104,0,100,117,129,128,133,123,114,109,121,145,134],
[124,125,117,151,0,107,118,127,135,154,116,106,117,114,126],
[137,153,120,134,144,0,158,128,141,169,154,136,126,153,166],
[146,128,111,122,133,93,0,122,146,131,125,117,125,117,122],
[116,147,115,123,124,123,129,0,145,140,120,114,115,127,150],
[93,113,90,118,116,110,105,106,0,121,110,79,89,98,117],
[102,116,84,128,97,82,120,111,130,0,97,97,93,110,117],
[120,145,131,137,135,97,126,131,141,154,0,100,112,126,132],
[142,163,136,142,145,115,134,137,172,154,151,0,133,130,137],
[129,148,116,130,134,125,126,136,162,158,139,118,0,125,138],
[129,127,124,106,137,98,134,124,153,141,125,121,126,0,126],
[127,129,97,117,125,85,129,101,134,134,119,114,113,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 19, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,129,110,127,137,151,123,147,168,147,136,117,173,110],
[121,0,124,118,103,136,139,118,155,149,142,89,128,147,104],
[122,127,0,96,116,146,164,116,133,166,154,94,144,138,128],
[141,133,155,0,130,158,172,157,161,183,159,127,139,173,120],
[124,148,135,121,0,142,151,136,133,171,131,123,122,143,127],
[114,115,105,93,109,0,146,109,114,129,115,97,94,131,95],
[100,112,87,79,100,105,0,83,112,129,98,101,107,127,100],
[128,133,135,94,115,142,168,0,127,170,127,105,130,145,102],
[104,96,118,90,118,137,139,124,0,155,127,103,105,124,80],
[83,102,85,68,80,122,122,81,96,0,110,79,86,114,88],
[104,109,97,92,120,136,153,124,124,141,0,97,139,141,100],
[115,162,157,124,128,154,150,146,148,172,154,0,106,152,121],
[134,123,107,112,129,157,144,121,146,165,112,145,0,164,117],
[78,104,113,78,108,120,124,106,127,137,110,99,87,0,76],
[141,147,123,131,124,156,151,149,171,163,151,130,134,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 20, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,112,139,117,129,104,108,123,128,102,139,140,166,161],
[130,0,102,142,118,137,136,120,123,135,116,154,125,151,134],
[139,149,0,141,105,145,113,131,117,133,135,155,136,144,149],
[112,109,110,0,102,116,113,113,117,113,110,108,108,121,131],
[134,133,146,149,0,156,135,123,140,144,128,152,140,174,187],
[122,114,106,135,95,0,135,104,118,101,94,104,132,151,133],
[147,115,138,138,116,116,0,124,131,147,115,157,129,159,159],
[143,131,120,138,128,147,127,0,145,134,122,141,164,182,146],
[128,128,134,134,111,133,120,106,0,106,145,152,160,157,153],
[123,116,118,138,107,150,104,117,145,0,102,131,136,156,165],
[149,135,116,141,123,157,136,129,106,149,0,131,180,162,162],
[112,97,96,143,99,147,94,110,99,120,120,0,140,121,151],
[111,126,115,143,111,119,122,87,91,115,71,111,0,146,136],
[85,100,107,130,77,100,92,69,94,95,89,130,105,0,132],
[90,117,102,120,64,118,92,105,98,86,89,100,115,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 21, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,132,130,126,134,122,127,124,130,121,127,132,107,112],
[121,0,114,120,114,137,125,115,115,123,120,142,116,119,111],
[119,137,0,126,111,127,132,117,116,128,131,135,122,114,121],
[121,131,125,0,121,133,133,131,127,135,129,140,127,119,121],
[125,137,140,130,0,125,142,124,134,145,130,134,131,131,120],
[117,114,124,118,126,0,131,124,130,116,113,122,119,104,119],
[129,126,119,118,109,120,0,119,126,129,121,132,107,121,100],
[124,136,134,120,127,127,132,0,124,121,118,136,126,136,116],
[127,136,135,124,117,121,125,127,0,123,110,136,128,129,119],
[121,128,123,116,106,135,122,130,128,0,119,133,114,117,119],
[130,131,120,122,121,138,130,133,141,132,0,131,120,121,112],
[124,109,116,111,117,129,119,115,115,118,120,0,114,126,94],
[119,135,129,124,120,132,144,125,123,137,131,137,0,125,107],
[144,132,137,132,120,147,130,115,122,134,130,125,126,0,126],
[139,140,130,130,131,132,151,135,132,132,139,157,144,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 22, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,113,141,114,127,128,136,141,136,138,141,133,134,130],
[125,0,123,127,121,132,125,121,125,140,134,145,129,126,132],
[138,128,0,139,127,121,141,144,134,129,135,142,132,132,134],
[110,124,112,0,120,123,120,132,116,122,125,139,130,129,126],
[137,130,124,131,0,142,135,140,130,134,130,131,145,137,132],
[124,119,130,128,109,0,128,131,128,135,122,149,138,121,135],
[123,126,110,131,116,123,0,126,125,114,122,137,119,129,119],
[115,130,107,119,111,120,125,0,125,124,120,129,141,131,131],
[110,126,117,135,121,123,126,126,0,131,127,137,130,126,128],
[115,111,122,129,117,116,137,127,120,0,123,146,121,125,115],
[113,117,116,126,121,129,129,131,124,128,0,137,135,124,128],
[110,106,109,112,120,102,114,122,114,105,114,0,120,124,112],
[118,122,119,121,106,113,132,110,121,130,116,131,0,132,124],
[117,125,119,122,114,130,122,120,125,126,127,127,119,0,140],
[121,119,117,125,119,116,132,120,123,136,123,139,127,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 23, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,109,106,112,117,85,122,154,155,150,139,121,139,137],
[60,0,68,78,113,87,73,60,78,61,79,88,89,107,64],
[142,183,0,121,144,174,126,106,135,172,153,202,174,168,135],
[145,173,130,0,116,119,92,90,141,163,105,188,126,132,137],
[139,138,107,135,0,102,95,101,147,129,127,146,147,147,132],
[134,164,77,132,149,0,111,75,163,163,165,179,175,154,95],
[166,178,125,159,156,140,0,152,170,149,155,160,156,172,127],
[129,191,145,161,150,176,99,0,189,197,140,184,169,192,146],
[97,173,116,110,104,88,81,62,0,126,142,169,107,151,120],
[96,190,79,88,122,88,102,54,125,0,117,172,122,104,79],
[101,172,98,146,124,86,96,111,109,134,0,158,103,148,109],
[112,163,49,63,105,72,91,67,82,79,93,0,118,116,74],
[130,162,77,125,104,76,95,82,144,129,148,133,0,112,101],
[112,144,83,119,104,97,79,59,100,147,103,135,139,0,115],
[114,187,116,114,119,156,124,105,131,172,142,177,150,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 24, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,122,142,127,122,125,131,129,135,134,110,127,134,117],
[134,0,138,144,141,149,124,145,141,135,138,133,130,131,141],
[129,113,0,145,131,139,108,130,127,121,127,117,122,117,109],
[109,107,106,0,129,128,104,142,125,128,122,125,115,109,120],
[124,110,120,122,0,119,105,130,127,120,124,111,114,108,107],
[129,102,112,123,132,0,103,130,119,130,141,122,111,102,116],
[126,127,143,147,146,148,0,144,136,131,134,129,122,135,130],
[120,106,121,109,121,121,107,0,123,118,116,109,114,100,101],
[122,110,124,126,124,132,115,128,0,122,132,105,102,116,109],
[116,116,130,123,131,121,120,133,129,0,131,130,119,117,121],
[117,113,124,129,127,110,117,135,119,120,0,107,102,106,101],
[141,118,134,126,140,129,122,142,146,121,144,0,131,129,109],
[124,121,129,136,137,140,129,137,149,132,149,120,0,133,118],
[117,120,134,142,143,149,116,151,135,134,145,122,118,0,122],
[134,110,142,131,144,135,121,150,142,130,150,142,133,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 25, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,176,133,127,211,173,130,126,131,124,155,143,151,135],
[113,0,160,119,139,152,152,118,81,122,102,130,144,144,125],
[75,91,0,93,109,129,121,106,91,87,110,105,97,101,126],
[118,132,158,0,126,171,175,136,134,138,148,151,148,137,134],
[124,112,142,125,0,158,141,109,117,118,100,117,122,139,136],
[40,99,122,80,93,0,132,85,99,104,76,102,74,120,128],
[78,99,130,76,110,119,0,91,99,116,101,128,99,105,89],
[121,133,145,115,142,166,160,0,99,122,122,130,139,134,136],
[125,170,160,117,134,152,152,152,0,132,134,129,143,170,137],
[120,129,164,113,133,147,135,129,119,0,147,141,117,113,149],
[127,149,141,103,151,175,150,129,117,104,0,155,145,145,129],
[96,121,146,100,134,149,123,121,122,110,96,0,107,138,125],
[108,107,154,103,129,177,152,112,108,134,106,144,0,157,128],
[100,107,150,114,112,131,146,117,81,138,106,113,94,0,114],
[116,126,125,117,115,123,162,115,114,102,122,126,123,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 26, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,118,106,121,106,119,122,134,123,116,115,138,143,130],
[103,0,99,114,114,104,102,114,136,96,101,107,117,113,116],
[133,152,0,138,123,115,140,146,147,117,140,125,155,148,155],
[145,137,113,0,136,134,131,143,148,125,123,144,152,128,148],
[130,137,128,115,0,118,117,129,126,133,132,130,129,147,131],
[145,147,136,117,133,0,116,136,153,122,147,133,147,142,158],
[132,149,111,120,134,135,0,139,130,128,131,126,171,143,151],
[129,137,105,108,122,115,112,0,133,119,131,109,133,142,143],
[117,115,104,103,125,98,121,118,0,113,116,108,131,135,125],
[128,155,134,126,118,129,123,132,138,0,126,134,154,144,157],
[135,150,111,128,119,104,120,120,135,125,0,102,138,140,143],
[136,144,126,107,121,118,125,142,143,117,149,0,139,138,154],
[113,134,96,99,122,104,80,118,120,97,113,112,0,139,119],
[108,138,103,123,104,109,108,109,116,107,111,113,112,0,118],
[121,135,96,103,120,93,100,108,126,94,108,97,132,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 27, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,130,155,126,112,126,129,129,138,132,123,137,137,137],
[129,0,122,148,133,132,132,132,134,133,139,133,142,132,137],
[121,129,0,142,139,127,123,130,124,132,132,128,128,138,126],
[96,103,109,0,110,98,116,106,109,114,116,113,116,109,119],
[125,118,112,141,0,122,115,130,116,118,123,127,124,124,129],
[139,119,124,153,129,0,126,134,124,142,138,128,141,128,137],
[125,119,128,135,136,125,0,125,130,132,139,135,122,126,133],
[122,119,121,145,121,117,126,0,120,121,130,128,117,137,129],
[122,117,127,142,135,127,121,131,0,126,133,138,126,127,131],
[113,118,119,137,133,109,119,130,125,0,135,133,126,133,135],
[119,112,119,135,128,113,112,121,118,116,0,127,116,129,118],
[128,118,123,138,124,123,116,123,113,118,124,0,119,122,136],
[114,109,123,135,127,110,129,134,125,125,135,132,0,126,130],
[114,119,113,142,127,123,125,114,124,118,122,129,125,0,121],
[114,114,125,132,122,114,118,122,120,116,133,115,121,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 28, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,97,120,123,104,111,114,109,126,105,98,120,103,115],
[140,0,128,130,126,121,121,127,124,138,122,127,121,118,131],
[154,123,0,133,129,136,129,145,132,141,132,115,127,135,132],
[131,121,118,0,119,126,128,126,115,130,116,122,125,119,129],
[128,125,122,132,0,132,128,141,136,132,122,121,122,133,140],
[147,130,115,125,119,0,109,133,131,140,126,107,125,117,125],
[140,130,122,123,123,142,0,129,130,141,123,115,140,121,136],
[137,124,106,125,110,118,122,0,116,123,122,122,122,111,123],
[142,127,119,136,115,120,121,135,0,139,125,134,129,132,131],
[125,113,110,121,119,111,110,128,112,0,111,107,106,118,122],
[146,129,119,135,129,125,128,129,126,140,0,115,125,129,127],
[153,124,136,129,130,144,136,129,117,144,136,0,127,128,140],
[131,130,124,126,129,126,111,129,122,145,126,124,0,127,132],
[148,133,116,132,118,134,130,140,119,133,122,123,124,0,122],
[136,120,119,122,111,126,115,128,120,129,124,111,119,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 29, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,138,114,121,121,115,113,112,117,120,125,103,121],
[150,0,126,148,123,128,137,146,128,135,144,144,133,138,137],
[141,125,0,154,118,127,127,117,132,120,131,133,132,130,129],
[113,103,97,0,102,106,117,121,104,118,118,117,120,113,116],
[137,128,133,149,0,136,144,128,113,129,130,141,131,124,130],
[130,123,124,145,115,0,123,130,137,127,135,135,126,122,133],
[130,114,124,134,107,128,0,128,113,138,133,125,132,125,128],
[136,105,134,130,123,121,123,0,112,127,117,125,117,125,120],
[138,123,119,147,138,114,138,139,0,134,132,132,140,119,141],
[139,116,131,133,122,124,113,124,117,0,122,126,131,118,129],
[134,107,120,133,121,116,118,134,119,129,0,129,123,120,128],
[131,107,118,134,110,116,126,126,119,125,122,0,116,115,121],
[126,118,119,131,120,125,119,134,111,120,128,135,0,127,125],
[148,113,121,138,127,129,126,126,132,133,131,136,124,0,142],
[130,114,122,135,121,118,123,131,110,122,123,130,126,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 30, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,115,119,120,126,120,128,116,129,119,128,129,112,116],
[140,0,132,122,135,142,136,135,120,134,134,140,148,132,131],
[136,119,0,118,128,120,130,133,118,128,126,136,129,131,133],
[132,129,133,0,147,139,132,137,133,138,121,131,139,133,124],
[131,116,123,104,0,125,123,123,126,128,121,124,128,124,125],
[125,109,131,112,126,0,121,122,108,122,114,116,128,115,117],
[131,115,121,119,128,130,0,129,117,126,123,120,123,121,127],
[123,116,118,114,128,129,122,0,121,127,120,120,137,128,115],
[135,131,133,118,125,143,134,130,0,138,128,127,133,133,123],
[122,117,123,113,123,129,125,124,113,0,111,121,136,121,128],
[132,117,125,130,130,137,128,131,123,140,0,133,131,135,132],
[123,111,115,120,127,135,131,131,124,130,118,0,139,120,128],
[122,103,122,112,123,123,128,114,118,115,120,112,0,118,116],
[139,119,120,118,127,136,130,123,118,130,116,131,133,0,128],
[135,120,118,127,126,134,124,136,128,123,119,123,135,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 31, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,138,162,125,134,138,147,128,112,121,124,144,119,101],
[111,0,105,145,111,112,145,113,120,92,111,124,117,127,105],
[113,146,0,162,142,121,133,138,121,116,141,136,153,120,111],
[89,106,89,0,101,105,133,97,120,85,115,121,111,104,91],
[126,140,109,150,0,119,145,130,125,132,115,127,126,125,123],
[117,139,130,146,132,0,126,120,126,124,125,114,123,152,127],
[113,106,118,118,106,125,0,111,131,104,141,114,131,111,116],
[104,138,113,154,121,131,140,0,122,103,118,113,113,139,127],
[123,131,130,131,126,125,120,129,0,105,116,118,113,119,103],
[139,159,135,166,119,127,147,148,146,0,159,129,122,128,124],
[130,140,110,136,136,126,110,133,135,92,0,131,125,124,96],
[127,127,115,130,124,137,137,138,133,122,120,0,122,122,133],
[107,134,98,140,125,128,120,138,138,129,126,129,0,111,124],
[132,124,131,147,126,99,140,112,132,123,127,129,140,0,100],
[150,146,140,160,128,124,135,124,148,127,155,118,127,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 32, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,103,112,116,89,111,115,123,101,101,109,111,113,108],
[135,0,108,104,107,102,132,130,125,94,74,132,101,123,103],
[148,143,0,114,118,116,131,112,116,121,128,115,130,128,119],
[139,147,137,0,167,113,131,134,139,133,104,147,127,129,129],
[135,144,133,84,0,112,130,125,138,108,87,118,114,106,116],
[162,149,135,138,139,0,132,146,136,157,125,159,146,143,136],
[140,119,120,120,121,119,0,138,143,134,106,130,124,126,98],
[136,121,139,117,126,105,113,0,144,130,112,132,117,123,118],
[128,126,135,112,113,115,108,107,0,100,110,124,88,134,117],
[150,157,130,118,143,94,117,121,151,0,110,156,127,143,118],
[150,177,123,147,164,126,145,139,141,141,0,151,142,166,130],
[142,119,136,104,133,92,121,119,127,95,100,0,100,105,120],
[140,150,121,124,137,105,127,134,163,124,109,151,0,133,133],
[138,128,123,122,145,108,125,128,117,108,85,146,118,0,142],
[143,148,132,122,135,115,153,133,134,133,121,131,118,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 33, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,117,117,138,139,116,140,104,133,113,122,133,123,117],
[138,0,143,123,122,137,126,131,134,129,118,127,136,147,135],
[134,108,0,112,136,142,129,121,135,129,111,113,152,157,117],
[134,128,139,0,139,135,142,141,127,140,134,125,144,134,129],
[113,129,115,112,0,126,112,130,121,113,113,109,114,106,104],
[112,114,109,116,125,0,117,131,118,113,124,119,141,127,124],
[135,125,122,109,139,134,0,130,127,132,130,106,129,130,123],
[111,120,130,110,121,120,121,0,115,118,121,120,113,118,107],
[147,117,116,124,130,133,124,136,0,134,119,121,138,136,138],
[118,122,122,111,138,138,119,133,117,0,128,129,148,136,122],
[138,133,140,117,138,127,121,130,132,123,0,127,149,140,127],
[129,124,138,126,142,132,145,131,130,122,124,0,149,146,130],
[118,115,99,107,137,110,122,138,113,103,102,102,0,126,124],
[128,104,94,117,145,124,121,133,115,115,111,105,125,0,114],
[134,116,134,122,147,127,128,144,113,129,124,121,127,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 34, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,112,118,120,126,109,99,126,124,108,122,141,110],
[144,0,130,131,137,130,123,108,120,130,117,115,123,136,131],
[142,121,0,112,129,134,127,106,120,135,138,116,136,153,122],
[139,120,139,0,154,128,113,121,108,137,136,115,143,134,124],
[133,114,122,97,0,107,101,94,98,132,128,103,128,136,120],
[131,121,117,123,144,0,105,104,110,124,141,119,137,156,112],
[125,128,124,138,150,146,0,121,114,128,132,128,127,142,135],
[142,143,145,130,157,147,130,0,112,133,151,121,150,137,124],
[152,131,131,143,153,141,137,139,0,148,153,114,150,154,137],
[125,121,116,114,119,127,123,118,103,0,136,108,131,120,112],
[127,134,113,115,123,110,119,100,98,115,0,99,113,125,114],
[143,136,135,136,148,132,123,130,137,143,152,0,149,132,142],
[129,128,115,108,123,114,124,101,101,120,138,102,0,137,118],
[110,115,98,117,115,95,109,114,97,131,126,119,114,0,107],
[141,120,129,127,131,139,116,127,114,139,137,109,133,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 35, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,112,133,123,113,139,124,122,118,133,107,115,139,124],
[127,0,116,131,124,110,125,120,125,129,125,116,117,147,118],
[139,135,0,137,132,124,151,138,140,139,132,123,142,146,129],
[118,120,114,0,123,127,138,136,132,126,128,115,130,138,111],
[128,127,119,128,0,110,131,143,136,125,126,117,123,136,123],
[138,141,127,124,141,0,138,148,146,133,142,120,126,150,141],
[112,126,100,113,120,113,0,135,127,133,125,117,110,124,127],
[127,131,113,115,108,103,116,0,121,120,117,107,118,124,121],
[129,126,111,119,115,105,124,130,0,127,119,114,115,121,111],
[133,122,112,125,126,118,118,131,124,0,111,120,117,133,119],
[118,126,119,123,125,109,126,134,132,140,0,112,134,145,110],
[144,135,128,136,134,131,134,144,137,131,139,0,132,150,120],
[136,134,109,121,128,125,141,133,136,134,117,119,0,140,121],
[112,104,105,113,115,101,127,127,130,118,106,101,111,0,110],
[127,133,122,140,128,110,124,130,140,132,141,131,130,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 36, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,112,129,139,130,129,133,120,133,128,128,129,115,125],
[124,0,117,126,134,136,118,129,126,136,130,112,125,115,124],
[139,134,0,118,134,135,130,138,129,133,132,128,124,116,139],
[122,125,133,0,136,134,128,127,133,128,131,129,129,125,116],
[112,117,117,115,0,133,114,111,107,107,114,114,109,113,98],
[121,115,116,117,118,0,124,111,109,109,119,114,113,115,120],
[122,133,121,123,137,127,0,126,125,115,125,124,138,120,134],
[118,122,113,124,140,140,125,0,122,125,125,121,132,117,119],
[131,125,122,118,144,142,126,129,0,116,131,122,121,118,118],
[118,115,118,123,144,142,136,126,135,0,122,120,124,127,122],
[123,121,119,120,137,132,126,126,120,129,0,116,117,117,110],
[123,139,123,122,137,137,127,130,129,131,135,0,134,114,125],
[122,126,127,122,142,138,113,119,130,127,134,117,0,114,123],
[136,136,135,126,138,136,131,134,133,124,134,137,137,0,124],
[126,127,112,135,153,131,117,132,133,129,141,126,128,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 37, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,121,125,131,134,116,127,126,124,125,139,132,131,126],
[115,0,117,118,129,127,119,121,118,123,121,131,129,126,130],
[130,134,0,122,121,132,107,119,116,129,122,133,134,129,134],
[126,133,129,0,140,131,105,123,124,127,126,135,136,128,122],
[120,122,130,111,0,122,112,122,123,117,110,123,126,117,124],
[117,124,119,120,129,0,115,114,127,124,113,126,127,130,119],
[135,132,144,146,139,136,0,121,128,135,135,144,135,141,150],
[124,130,132,128,129,137,130,0,132,127,125,132,134,141,136],
[125,133,135,127,128,124,123,119,0,136,130,125,132,134,129],
[127,128,122,124,134,127,116,124,115,0,124,140,133,135,134],
[126,130,129,125,141,138,116,126,121,127,0,134,122,135,132],
[112,120,118,116,128,125,107,119,126,111,117,0,121,122,133],
[119,122,117,115,125,124,116,117,119,118,129,130,0,126,120],
[120,125,122,123,134,121,110,110,117,116,116,129,125,0,135],
[125,121,117,129,127,132,101,115,122,117,119,118,131,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 38, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,129,151,138,124,120,140,109,114,133,129,107,122,137],
[139,0,130,148,148,146,120,144,117,115,120,127,130,125,143],
[122,121,0,127,132,128,121,147,126,115,136,129,122,106,144],
[100,103,124,0,132,120,102,124,119,114,124,139,113,123,119],
[113,103,119,119,0,137,116,128,106,98,123,120,108,112,127],
[127,105,123,131,114,0,106,126,121,102,120,127,120,110,131],
[131,131,130,149,135,145,0,136,136,126,143,148,129,120,126],
[111,107,104,127,123,125,115,0,110,111,120,104,94,111,108],
[142,134,125,132,145,130,115,141,0,124,134,139,114,111,136],
[137,136,136,137,153,149,125,140,127,0,135,148,126,126,139],
[118,131,115,127,128,131,108,131,117,116,0,141,109,126,119],
[122,124,122,112,131,124,103,147,112,103,110,0,109,113,123],
[144,121,129,138,143,131,122,157,137,125,142,142,0,123,130],
[129,126,145,128,139,141,131,140,140,125,125,138,128,0,132],
[114,108,107,132,124,120,125,143,115,112,132,128,121,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 39, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,117,116,122,123,118,110,116,116,118,119,119,119,108],
[137,0,113,110,108,110,132,108,112,110,111,112,119,119,110],
[134,138,0,120,124,121,132,108,130,120,135,125,133,130,113],
[135,141,131,0,117,120,125,132,117,120,131,109,128,124,116],
[129,143,127,134,0,124,147,128,125,153,141,124,129,141,126],
[128,141,130,131,127,0,138,121,126,129,123,133,121,127,118],
[133,119,119,126,104,113,0,114,129,118,119,112,119,120,118],
[141,143,143,119,123,130,137,0,128,128,131,126,132,129,127],
[135,139,121,134,126,125,122,123,0,131,127,120,123,135,118],
[135,141,131,131,98,122,133,123,120,0,130,112,124,137,113],
[133,140,116,120,110,128,132,120,124,121,0,118,130,127,110],
[132,139,126,142,127,118,139,125,131,139,133,0,124,126,128],
[132,132,118,123,122,130,132,119,128,127,121,127,0,121,121],
[132,132,121,127,110,124,131,122,116,114,124,125,130,0,113],
[143,141,138,135,125,133,133,124,133,138,141,123,130,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 40, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,167,123,142,120,152,133,123,104,129,148,152,140,140],
[138,0,156,111,139,143,139,149,130,128,136,156,148,150,134],
[84,95,0,98,102,111,125,116,105,102,108,103,118,115,103],
[128,140,153,0,119,123,140,143,128,114,140,135,146,135,145],
[109,112,149,132,0,114,128,126,120,100,142,126,133,119,112],
[131,108,140,128,137,0,119,138,127,110,126,141,121,115,128],
[99,112,126,111,123,132,0,126,101,103,123,115,140,114,124],
[118,102,135,108,125,113,125,0,122,104,121,123,140,118,132],
[128,121,146,123,131,124,150,129,0,128,136,116,135,120,117],
[147,123,149,137,151,141,148,147,123,0,131,133,153,142,144],
[122,115,143,111,109,125,128,130,115,120,0,126,117,134,113],
[103,95,148,116,125,110,136,128,135,118,125,0,134,130,120],
[99,103,133,105,118,130,111,111,116,98,134,117,0,101,127],
[111,101,136,116,132,136,137,133,131,109,117,121,150,0,130],
[111,117,148,106,139,123,127,119,134,107,138,131,124,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 41, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,121,125,122,121,123,116,129,130,132,124,130,126,123],
[128,0,135,138,133,116,138,133,138,132,142,135,143,131,130],
[130,116,0,125,131,124,128,119,126,123,146,131,144,122,120],
[126,113,126,0,125,106,126,127,118,128,140,124,128,121,125],
[129,118,120,126,0,119,134,116,115,118,124,124,138,120,129],
[130,135,127,145,132,0,134,133,126,127,136,125,138,133,129],
[128,113,123,125,117,117,0,124,108,132,125,111,132,126,121],
[135,118,132,124,135,118,127,0,124,121,134,120,131,126,120],
[122,113,125,133,136,125,143,127,0,127,147,128,144,134,127],
[121,119,128,123,133,124,119,130,124,0,150,113,138,125,128],
[119,109,105,111,127,115,126,117,104,101,0,111,131,111,123],
[127,116,120,127,127,126,140,131,123,138,140,0,148,132,137],
[121,108,107,123,113,113,119,120,107,113,120,103,0,125,115],
[125,120,129,130,131,118,125,125,117,126,140,119,126,0,124],
[128,121,131,126,122,122,130,131,124,123,128,114,136,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 42, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,133,122,124,116,129,145,111,136,117,156,116,106,131],
[123,0,123,116,117,134,105,133,110,143,121,111,129,117,116],
[118,128,0,112,115,124,132,126,108,129,109,127,112,103,133],
[129,135,139,0,127,112,126,148,87,118,103,114,108,101,123],
[127,134,136,124,0,127,138,150,124,137,111,121,120,126,141],
[135,117,127,139,124,0,136,139,110,124,134,133,121,127,129],
[122,146,119,125,113,115,0,139,110,122,123,143,109,94,120],
[106,118,125,103,101,112,112,0,102,125,109,121,104,103,115],
[140,141,143,164,127,141,141,149,0,133,134,146,130,111,136],
[115,108,122,133,114,127,129,126,118,0,108,130,96,97,117],
[134,130,142,148,140,117,128,142,117,143,0,120,126,113,118],
[95,140,124,137,130,118,108,130,105,121,131,0,125,95,120],
[135,122,139,143,131,130,142,147,121,155,125,126,0,140,147],
[145,134,148,150,125,124,157,148,140,154,138,156,111,0,139],
[120,135,118,128,110,122,131,136,115,134,133,131,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 43, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,125,126,127,125,136,113,121,117,126,119,121,114,121],
[129,0,136,141,131,143,129,122,117,120,134,111,125,146,125],
[126,115,0,116,121,129,120,106,115,120,121,103,111,125,116],
[125,110,135,0,117,135,128,122,120,117,119,105,110,122,120],
[124,120,130,134,0,136,132,123,131,124,120,114,117,127,127],
[126,108,122,116,115,0,115,114,116,101,112,115,118,115,110],
[115,122,131,123,119,136,0,119,114,122,121,118,120,127,119],
[138,129,145,129,128,137,132,0,134,129,131,125,126,130,125],
[130,134,136,131,120,135,137,117,0,126,122,128,120,133,132],
[134,131,131,134,127,150,129,122,125,0,127,124,128,135,124],
[125,117,130,132,131,139,130,120,129,124,0,115,120,125,127],
[132,140,148,146,137,136,133,126,123,127,136,0,131,130,128],
[130,126,140,141,134,133,131,125,131,123,131,120,0,139,132],
[137,105,126,129,124,136,124,121,118,116,126,121,112,0,124],
[130,126,135,131,124,141,132,126,119,127,124,123,119,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 44, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,141,134,124,124,124,131,117,133,143,130,128,130,147],
[119,0,104,117,114,108,115,120,116,132,117,104,119,115,118],
[110,147,0,133,119,118,132,129,131,129,130,119,126,128,133],
[117,134,118,0,119,112,120,129,117,132,128,107,119,124,118],
[127,137,132,132,0,113,131,134,115,124,139,123,125,124,134],
[127,143,133,139,138,0,123,141,123,135,146,120,133,125,131],
[127,136,119,131,120,128,0,130,124,127,140,139,129,117,122],
[120,131,122,122,117,110,121,0,115,126,127,124,119,121,121],
[134,135,120,134,136,128,127,136,0,141,143,134,137,129,125],
[118,119,122,119,127,116,124,125,110,0,139,125,124,124,128],
[108,134,121,123,112,105,111,124,108,112,0,117,118,118,121],
[121,147,132,144,128,131,112,127,117,126,134,0,135,118,132],
[123,132,125,132,126,118,122,132,114,127,133,116,0,120,122],
[121,136,123,127,127,126,134,130,122,127,133,133,131,0,129],
[104,133,118,133,117,120,129,130,126,123,130,119,129,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 45, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,172,159,137,191,167,131,185,137,166,139,107,95,144],
[119,0,112,119,126,151,144,127,175,168,144,98,119,112,175],
[79,139,0,210,216,170,181,87,164,134,146,146,121,163,175],
[92,132,41,0,90,170,145,25,170,69,80,159,56,101,158],
[114,125,35,161,0,170,181,54,185,149,119,138,150,107,161],
[60,100,81,81,81,0,154,71,196,70,106,161,102,130,161],
[84,107,70,106,70,97,0,64,184,70,112,72,120,76,143],
[120,124,164,226,197,180,187,0,191,149,203,176,161,118,181],
[66,76,87,81,66,55,67,60,0,58,77,108,66,77,85],
[114,83,117,182,102,181,181,102,193,0,130,115,91,95,158],
[85,107,105,171,132,145,139,48,174,121,0,104,133,70,158],
[112,153,105,92,113,90,179,75,143,136,147,0,89,130,133],
[144,132,130,195,101,149,131,90,185,160,118,162,0,101,125],
[156,139,88,150,144,121,175,133,174,156,181,121,150,0,175],
[107,76,76,93,90,90,108,70,166,93,93,118,126,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 46, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,135,131,135,127,130,143,132,138,140,131,131,126,113],
[125,0,136,118,126,136,131,134,137,133,133,116,120,132,116],
[116,115,0,118,118,129,130,118,124,132,124,121,110,117,117],
[120,133,133,0,119,141,140,135,144,132,132,130,124,135,116],
[116,125,133,132,0,137,137,130,122,139,143,121,129,132,110],
[124,115,122,110,114,0,135,125,121,121,126,116,119,125,119],
[121,120,121,111,114,116,0,113,126,128,125,112,117,118,113],
[108,117,133,116,121,126,138,0,126,128,128,116,116,122,112],
[119,114,127,107,129,130,125,125,0,129,129,122,127,124,113],
[113,118,119,119,112,130,123,123,122,0,120,113,111,115,123],
[111,118,127,119,108,125,126,123,122,131,0,114,122,116,111],
[120,135,130,121,130,135,139,135,129,138,137,0,126,127,121],
[120,131,141,127,122,132,134,135,124,140,129,125,0,129,127],
[125,119,134,116,119,126,133,129,127,136,135,124,122,0,132],
[138,135,134,135,141,132,138,139,138,128,140,130,124,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 47, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,111,116,111,114,126,105,130,102,101,112,99,129,125],
[127,0,118,113,115,114,137,114,145,111,105,110,102,156,112],
[140,133,0,127,116,114,149,114,145,132,122,128,126,151,129],
[135,138,124,0,119,123,133,112,123,134,102,125,99,158,126],
[140,136,135,132,0,134,154,125,144,132,109,138,120,146,137],
[137,137,137,128,117,0,124,134,127,120,125,129,104,151,137],
[125,114,102,118,97,127,0,105,128,111,114,132,92,133,127],
[146,137,137,139,126,117,146,0,151,139,125,140,123,153,148],
[121,106,106,128,107,124,123,100,0,110,109,126,93,134,108],
[149,140,119,117,119,131,140,112,141,0,110,124,104,136,149],
[150,146,129,149,142,126,137,126,142,141,0,136,122,165,135],
[139,141,123,126,113,122,119,111,125,127,115,0,115,146,143],
[152,149,125,152,131,147,159,128,158,147,129,136,0,157,147],
[122,95,100,93,105,100,118,98,117,115,86,105,94,0,113],
[126,139,122,125,114,114,124,103,143,102,116,108,104,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 48, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,122,139,133,113,136,115,125,129,103,114,106,102,124],
[139,0,135,135,128,130,125,118,118,134,86,98,138,102,108],
[129,116,0,113,138,114,121,103,95,100,106,110,117,111,103],
[112,116,138,0,139,132,119,107,119,144,112,122,105,129,129],
[118,123,113,112,0,112,124,109,116,111,129,125,111,96,108],
[138,121,137,119,139,0,128,106,128,133,131,102,120,115,107],
[115,126,130,132,127,123,0,124,98,113,103,110,115,89,97],
[136,133,148,144,142,145,127,0,131,143,121,126,122,126,135],
[126,133,156,132,135,123,153,120,0,133,120,138,129,109,114],
[122,117,151,107,140,118,138,108,118,0,130,131,117,99,135],
[148,165,145,139,122,120,148,130,131,121,0,135,124,109,114],
[137,153,141,129,126,149,141,125,113,120,116,0,123,116,116],
[145,113,134,146,140,131,136,129,122,134,127,128,0,114,117],
[149,149,140,122,155,136,162,125,142,152,142,135,137,0,129],
[127,143,148,122,143,144,154,116,137,116,137,135,134,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 49, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,139,117,124,117,119,145,113,127,114,108,126,120,137],
[116,0,126,102,107,104,107,136,130,111,108,128,117,110,124],
[112,125,0,95,107,110,111,123,110,102,108,104,106,114,99],
[134,149,156,0,134,122,125,138,122,147,123,139,132,142,143],
[127,144,144,117,0,130,133,135,137,130,126,136,133,128,123],
[134,147,141,129,121,0,134,151,125,129,135,133,139,131,125],
[132,144,140,126,118,117,0,124,114,122,115,120,130,112,127],
[106,115,128,113,116,100,127,0,124,109,112,113,132,113,117],
[138,121,141,129,114,126,137,127,0,122,132,137,139,124,126],
[124,140,149,104,121,122,129,142,129,0,114,133,135,126,137],
[137,143,143,128,125,116,136,139,119,137,0,123,123,124,139],
[143,123,147,112,115,118,131,138,114,118,128,0,116,120,129],
[125,134,145,119,118,112,121,119,112,116,128,135,0,109,136],
[131,141,137,109,123,120,139,138,127,125,127,131,142,0,128],
[114,127,152,108,128,126,124,134,125,114,112,122,115,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 50, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,128,140,121,130,115,137,117,126,121,125,101,149,157],
[117,0,133,126,118,123,130,130,124,110,128,143,104,141,138],
[123,118,0,113,105,99,91,112,111,100,121,123,101,134,144],
[111,125,138,0,121,116,117,142,119,111,115,122,100,135,145],
[130,133,146,130,0,111,119,120,127,119,143,137,118,116,132],
[121,128,152,135,140,0,137,146,121,115,121,138,125,154,151],
[136,121,160,134,132,114,0,146,120,117,132,145,126,138,157],
[114,121,139,109,131,105,105,0,122,97,127,121,107,125,146],
[134,127,140,132,124,130,131,129,0,96,125,134,119,133,145],
[125,141,151,140,132,136,134,154,155,0,148,145,145,155,169],
[130,123,130,136,108,130,119,124,126,103,0,132,108,133,148],
[126,108,128,129,114,113,106,130,117,106,119,0,100,139,144],
[150,147,150,151,133,126,125,144,132,106,143,151,0,135,154],
[102,110,117,116,135,97,113,126,118,96,118,112,116,0,152],
[94,113,107,106,119,100,94,105,106,82,103,107,97,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 51, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,127,110,120,120,107,118,130,120,110,119,110,131,115],
[133,0,133,124,123,134,135,139,136,125,133,138,125,137,130],
[124,118,0,120,113,124,123,126,127,127,118,121,110,109,110],
[141,127,131,0,117,134,132,136,125,124,126,134,122,135,127],
[131,128,138,134,0,126,130,134,139,135,134,125,128,146,127],
[131,117,127,117,125,0,136,129,130,127,127,123,122,130,118],
[144,116,128,119,121,115,0,137,134,134,130,129,124,132,112],
[133,112,125,115,117,122,114,0,125,138,121,128,114,130,122],
[121,115,124,126,112,121,117,126,0,126,114,133,131,139,117],
[131,126,124,127,116,124,117,113,125,0,123,123,127,132,124],
[141,118,133,125,117,124,121,130,137,128,0,126,135,131,112],
[132,113,130,117,126,128,122,123,118,128,125,0,127,135,116],
[141,126,141,129,123,129,127,137,120,124,116,124,0,139,129],
[120,114,142,116,105,121,119,121,112,119,120,116,112,0,115],
[136,121,141,124,124,133,139,129,134,127,139,135,122,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 52, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,119,133,120,113,136,133,134,123,113,125,136,138,133],
[134,0,130,135,138,138,132,126,143,147,113,131,145,135,153],
[132,121,0,138,124,119,147,127,138,127,127,120,123,137,133],
[118,116,113,0,126,121,126,132,119,130,119,121,133,118,131],
[131,113,127,125,0,130,137,114,126,108,115,121,122,126,144],
[138,113,132,130,121,0,136,128,139,123,127,114,141,140,137],
[115,119,104,125,114,115,0,114,117,121,107,130,120,136,134],
[118,125,124,119,137,123,137,0,126,133,111,133,134,138,144],
[117,108,113,132,125,112,134,125,0,127,125,129,118,119,132],
[128,104,124,121,143,128,130,118,124,0,136,141,128,133,126],
[138,138,124,132,136,124,144,140,126,115,0,131,132,135,141],
[126,120,131,130,130,137,121,118,122,110,120,0,136,130,135],
[115,106,128,118,129,110,131,117,133,123,119,115,0,126,134],
[113,116,114,133,125,111,115,113,132,118,116,121,125,0,125],
[118,98,118,120,107,114,117,107,119,125,110,116,117,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 53, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,117,108,116,118,124,104,115,118,112,117,126,114,99],
[133,0,131,131,125,120,118,114,129,122,110,123,130,128,113],
[134,120,0,123,139,108,109,111,128,116,120,113,120,130,113],
[143,120,128,0,137,124,123,113,145,112,127,120,132,122,117],
[135,126,112,114,0,112,105,105,126,120,102,118,136,119,97],
[133,131,143,127,139,0,136,122,130,127,130,145,150,142,125],
[127,133,142,128,146,115,0,128,128,118,129,118,147,128,136],
[147,137,140,138,146,129,123,0,137,128,132,135,145,132,122],
[136,122,123,106,125,121,123,114,0,118,122,116,135,116,119],
[133,129,135,139,131,124,133,123,133,0,126,120,141,121,121],
[139,141,131,124,149,121,122,119,129,125,0,126,146,117,131],
[134,128,138,131,133,106,133,116,135,131,125,0,131,132,125],
[125,121,131,119,115,101,104,106,116,110,105,120,0,98,105],
[137,123,121,129,132,109,123,119,135,130,134,119,153,0,121],
[152,138,138,134,154,126,115,129,132,130,120,126,146,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 54, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,186,125,139,118,139,165,139,198,122,190,187,212,89],
[130,0,155,88,135,179,140,191,165,208,135,231,212,195,140],
[65,96,0,44,129,163,108,123,127,186,82,143,177,186,89],
[126,163,207,0,104,232,186,225,188,198,102,143,177,200,136],
[112,116,122,147,0,178,102,178,127,147,117,138,165,182,136],
[133,72,88,19,73,0,143,170,98,167,82,143,157,188,66],
[112,111,143,65,149,108,0,108,57,178,87,103,137,112,66],
[86,60,128,26,73,81,143,0,113,129,96,112,177,200,89],
[112,86,124,63,124,153,194,138,0,158,102,155,132,185,140],
[53,43,65,53,104,84,73,122,93,0,86,83,117,140,73],
[129,116,169,149,134,169,164,155,149,165,0,108,130,184,129],
[61,20,108,108,113,108,148,139,96,168,143,0,207,195,136],
[64,39,74,74,86,94,114,74,119,134,121,44,0,121,74],
[39,56,65,51,69,63,139,51,66,111,67,56,130,0,54],
[162,111,162,115,115,185,185,162,111,178,122,115,177,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 55, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,116,108,132,125,119,106,149,131,122,137,115,124,118],
[95,0,104,94,127,102,116,92,134,130,111,125,96,117,89],
[135,147,0,89,133,121,124,128,143,127,104,115,108,138,105],
[143,157,162,0,150,127,134,134,171,165,119,160,142,159,123],
[119,124,118,101,0,105,142,86,138,133,123,137,107,143,126],
[126,149,130,124,146,0,124,127,157,151,142,166,116,140,99],
[132,135,127,117,109,127,0,95,146,125,89,121,91,120,105],
[145,159,123,117,165,124,156,0,171,159,144,143,137,137,129],
[102,117,108,80,113,94,105,80,0,120,117,118,73,95,80],
[120,121,124,86,118,100,126,92,131,0,102,124,101,132,71],
[129,140,147,132,128,109,162,107,134,149,0,162,104,125,103],
[114,126,136,91,114,85,130,108,133,127,89,0,91,137,84],
[136,155,143,109,144,135,160,114,178,150,147,160,0,165,131],
[127,134,113,92,108,111,131,114,156,119,126,114,86,0,93],
[133,162,146,128,125,152,146,122,171,180,148,167,120,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 56, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,124,145,134,128,122,144,129,114,134,118,128,117,142],
[125,0,130,130,136,122,129,148,137,119,130,114,130,130,127],
[127,121,0,130,123,124,134,144,127,124,127,122,132,121,135],
[106,121,121,0,141,118,128,148,144,121,121,127,125,110,134],
[117,115,128,110,0,133,122,129,122,121,122,127,125,117,127],
[123,129,127,133,118,0,131,136,122,122,125,135,127,117,129],
[129,122,117,123,129,120,0,145,135,131,126,134,133,133,138],
[107,103,107,103,122,115,106,0,127,109,120,121,123,122,132],
[122,114,124,107,129,129,116,124,0,122,109,115,123,118,127],
[137,132,127,130,130,129,120,142,129,0,129,120,129,116,119],
[117,121,124,130,129,126,125,131,142,122,0,125,124,115,137],
[133,137,129,124,124,116,117,130,136,131,126,0,123,126,139],
[123,121,119,126,126,124,118,128,128,122,127,128,0,137,137],
[134,121,130,141,134,134,118,129,133,135,136,125,114,0,132],
[109,124,116,117,124,122,113,119,124,132,114,112,114,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 57, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,94,157,136,122,109,114,154,119,122,132,114,99,124],
[132,0,120,143,137,134,121,136,145,131,120,152,103,117,165],
[157,131,0,160,129,116,91,133,137,123,150,160,102,101,132],
[94,108,91,0,104,98,95,106,96,109,116,146,80,78,120],
[115,114,122,147,0,105,84,115,149,125,115,156,128,108,152],
[129,117,135,153,146,0,137,147,172,155,138,172,109,108,179],
[142,130,160,156,167,114,0,143,140,122,140,157,110,118,146],
[137,115,118,145,136,104,108,0,148,121,136,153,105,85,150],
[97,106,114,155,102,79,111,103,0,112,92,129,91,109,112],
[132,120,128,142,126,96,129,130,139,0,133,151,85,123,159],
[129,131,101,135,136,113,111,115,159,118,0,151,112,127,144],
[119,99,91,105,95,79,94,98,122,100,100,0,117,98,109],
[137,148,149,171,123,142,141,146,160,166,139,134,0,143,150],
[152,134,150,173,143,143,133,166,142,128,124,153,108,0,160],
[127,86,119,131,99,72,105,101,139,92,107,142,101,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 58, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,120,121,123,114,123,122,109,109,129,133,122,118,115],
[137,0,132,127,132,125,138,131,126,120,135,139,143,124,126],
[131,119,0,123,125,136,128,121,124,126,138,128,134,130,114],
[130,124,128,0,117,131,129,124,119,117,120,122,139,129,118],
[128,119,126,134,0,126,133,119,115,118,135,134,132,134,110],
[137,126,115,120,125,0,138,122,116,110,129,123,142,126,112],
[128,113,123,122,118,113,0,116,116,112,122,125,132,117,104],
[129,120,130,127,132,129,135,0,121,127,124,124,133,127,110],
[142,125,127,132,136,135,135,130,0,123,139,136,135,133,115],
[142,131,125,134,133,141,139,124,128,0,133,129,136,132,118],
[122,116,113,131,116,122,129,127,112,118,0,124,130,130,113],
[118,112,123,129,117,128,126,127,115,122,127,0,130,119,106],
[129,108,117,112,119,109,119,118,116,115,121,121,0,119,108],
[133,127,121,122,117,125,134,124,118,119,121,132,132,0,112],
[136,125,137,133,141,139,147,141,136,133,138,145,143,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 59, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,59,54,90,203,117,77,90,189,138,77,113,90,77],
[119,0,89,31,89,148,148,76,89,232,120,90,173,119,58],
[192,162,0,192,139,250,250,166,134,250,138,107,220,197,220],
[197,220,59,0,179,233,178,107,90,219,139,107,202,179,166],
[161,162,112,72,0,202,201,131,162,219,161,131,202,192,190],
[48,103,1,18,49,0,89,49,19,161,48,77,85,49,19],
[134,103,1,73,50,162,0,77,50,219,80,77,103,138,19],
[174,175,85,144,120,202,174,0,85,232,120,144,174,232,144],
[161,162,117,161,89,232,201,166,0,219,107,107,202,179,219],
[62,19,1,32,32,90,32,19,32,0,80,1,31,62,1],
[113,131,113,112,90,203,171,131,144,171,0,171,113,144,113],
[174,161,144,144,120,174,174,107,144,250,80,0,143,174,131],
[138,78,31,49,49,166,148,77,49,220,138,108,0,108,135],
[161,132,54,72,59,202,113,19,72,189,107,77,143,0,131],
[174,193,31,85,61,232,232,107,32,250,138,120,116,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 60, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,124,117,119,124,115,135,127,125,121,127,119,119,119],
[124,0,127,124,111,124,120,138,118,124,125,124,127,118,126],
[127,124,0,119,130,136,124,133,118,126,137,130,126,123,113],
[134,127,132,0,120,124,118,137,128,130,122,130,132,127,127],
[132,140,121,131,0,126,129,146,133,133,136,128,133,127,128],
[127,127,115,127,125,0,118,125,120,117,121,125,125,130,123],
[136,131,127,133,122,133,0,146,129,120,138,127,131,130,123],
[116,113,118,114,105,126,105,0,113,116,123,111,108,109,105],
[124,133,133,123,118,131,122,138,0,130,132,124,126,125,126],
[126,127,125,121,118,134,131,135,121,0,124,131,128,131,119],
[130,126,114,129,115,130,113,128,119,127,0,122,117,116,105],
[124,127,121,121,123,126,124,140,127,120,129,0,130,128,117],
[132,124,125,119,118,126,120,143,125,123,134,121,0,120,128],
[132,133,128,124,124,121,121,142,126,120,135,123,131,0,123],
[132,125,138,124,123,128,128,146,125,132,146,134,123,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 61, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,85,141,81,133,70,92,184,122,77,100,106,132,94],
[74,0,61,110,105,85,62,55,63,105,38,61,70,71,75],
[166,190,0,177,181,158,130,138,145,157,113,146,155,129,129],
[110,141,74,0,102,83,126,35,110,126,95,102,126,134,141],
[170,146,70,149,0,134,110,86,131,94,91,101,140,88,88],
[118,166,93,168,117,0,82,104,118,147,74,112,121,142,117],
[181,189,121,125,141,169,0,99,172,126,73,143,146,150,165],
[159,196,113,216,165,147,152,0,159,174,152,181,177,198,183],
[67,188,106,141,120,133,79,92,0,96,109,100,115,55,83],
[129,146,94,125,157,104,125,77,155,0,115,168,140,148,179],
[174,213,138,156,160,177,178,99,142,136,0,138,214,139,130],
[151,190,105,149,150,139,108,70,151,83,113,0,113,123,83],
[145,181,96,125,111,130,105,74,136,111,37,138,0,105,160],
[119,180,122,117,163,109,101,53,196,103,112,128,146,0,144],
[157,176,122,110,163,134,86,68,168,72,121,168,91,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 62, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,117,127,123,141,114,110,137,126,122,131,126,114,128],
[123,0,120,126,129,138,112,119,133,107,120,119,113,125,125],
[134,131,0,131,131,129,113,112,129,120,121,128,121,122,131],
[124,125,120,0,125,143,130,123,116,114,131,133,128,130,130],
[128,122,120,126,0,144,119,116,133,121,126,131,125,126,119],
[110,113,122,108,107,0,109,109,129,107,111,116,108,113,118],
[137,139,138,121,132,142,0,118,133,115,123,128,130,129,131],
[141,132,139,128,135,142,133,0,138,122,134,131,142,132,137],
[114,118,122,135,118,122,118,113,0,114,119,113,119,124,119],
[125,144,131,137,130,144,136,129,137,0,144,129,137,140,140],
[129,131,130,120,125,140,128,117,132,107,0,131,134,131,128],
[120,132,123,118,120,135,123,120,138,122,120,0,125,122,122],
[125,138,130,123,126,143,121,109,132,114,117,126,0,133,133],
[137,126,129,121,125,138,122,119,127,111,120,129,118,0,127],
[123,126,120,121,132,133,120,114,132,111,123,129,118,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 63, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,148,116,133,121,144,139,115,128,123,120,130,131,142],
[121,0,149,129,140,117,138,138,131,126,129,118,141,138,144],
[103,102,0,97,122,116,112,115,97,112,101,110,114,123,124],
[135,122,154,0,136,121,132,128,112,136,120,133,161,135,137],
[118,111,129,115,0,125,123,116,119,119,111,122,131,126,133],
[130,134,135,130,126,0,142,150,125,126,128,114,143,139,140],
[107,113,139,119,128,109,0,133,114,118,117,118,132,127,137],
[112,113,136,123,135,101,118,0,126,125,101,114,123,118,128],
[136,120,154,139,132,126,137,125,0,125,123,129,142,148,128],
[123,125,139,115,132,125,133,126,126,0,107,125,134,134,138],
[128,122,150,131,140,123,134,150,128,144,0,131,134,143,147],
[131,133,141,118,129,137,133,137,122,126,120,0,132,132,127],
[121,110,137,90,120,108,119,128,109,117,117,119,0,125,126],
[120,113,128,116,125,112,124,133,103,117,108,119,126,0,121],
[109,107,127,114,118,111,114,123,123,113,104,124,125,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 64, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,102,89,134,84,115,133,120,137,84,105,68,155,191],
[158,0,121,143,215,134,182,160,159,161,100,170,102,209,195],
[149,130,0,113,175,88,146,132,98,154,76,111,76,153,145],
[162,108,138,0,161,150,195,150,138,142,126,190,138,186,205],
[117,36,76,90,0,93,147,44,113,120,83,77,99,144,134],
[167,117,163,101,158,0,156,130,121,147,118,114,128,165,172],
[136,69,105,56,104,95,0,72,56,117,81,94,85,99,191],
[118,91,119,101,207,121,179,0,149,112,114,189,124,198,178],
[131,92,153,113,138,130,195,102,0,152,108,100,146,185,171],
[114,90,97,109,131,104,134,139,99,0,111,122,122,146,179],
[167,151,175,125,168,133,170,137,143,140,0,138,157,178,183],
[146,81,140,61,174,137,157,62,151,129,113,0,124,181,172],
[183,149,175,113,152,123,166,127,105,129,94,127,0,162,160],
[96,42,98,65,107,86,152,53,66,105,73,70,89,0,159],
[60,56,106,46,117,79,60,73,80,72,68,79,91,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 65, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,123,139,149,127,149,127,122,117,136,145,137,146,131],
[119,0,115,120,131,128,129,119,96,104,114,116,127,94,113],
[128,136,0,130,133,134,138,128,144,136,127,138,133,130,112],
[112,131,121,0,139,121,137,125,117,112,117,136,129,117,121],
[102,120,118,112,0,116,126,106,108,111,114,125,127,121,100],
[124,123,117,130,135,0,127,111,118,127,128,123,138,114,122],
[102,122,113,114,125,124,0,107,105,111,110,127,130,98,118],
[124,132,123,126,145,140,144,0,115,127,128,134,140,122,118],
[129,155,107,134,143,133,146,136,0,117,130,153,148,124,129],
[134,147,115,139,140,124,140,124,134,0,126,144,138,126,125],
[115,137,124,134,137,123,141,123,121,125,0,134,141,125,122],
[106,135,113,115,126,128,124,117,98,107,117,0,116,118,120],
[114,124,118,122,124,113,121,111,103,113,110,135,0,105,105],
[105,157,121,134,130,137,153,129,127,125,126,133,146,0,141],
[120,138,139,130,151,129,133,133,122,126,129,131,146,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 66, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,146,160,141,149,131,149,148,145,122,166,126,148,148],
[115,0,143,137,156,144,135,148,147,132,123,143,123,144,137],
[105,108,0,135,144,135,117,139,136,119,132,147,112,126,115],
[91,114,116,0,121,127,110,124,132,120,124,140,102,112,105],
[110,95,107,130,0,112,123,120,121,114,92,121,109,117,103],
[102,107,116,124,139,0,115,127,118,110,120,141,96,114,114],
[120,116,134,141,128,136,0,133,149,126,113,139,129,135,118],
[102,103,112,127,131,124,118,0,152,121,103,129,120,138,116],
[103,104,115,119,130,133,102,99,0,129,130,144,133,142,120],
[106,119,132,131,137,141,125,130,122,0,140,138,136,116,125],
[129,128,119,127,159,131,138,148,121,111,0,134,127,142,122],
[85,108,104,111,130,110,112,122,107,113,117,0,106,119,101],
[125,128,139,149,142,155,122,131,118,115,124,145,0,142,124],
[103,107,125,139,134,137,116,113,109,135,109,132,109,0,127],
[103,114,136,146,148,137,133,135,131,126,129,150,127,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 67, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,110,111,103,118,144,147,131,106,124,102,131,124,139],
[157,0,132,132,133,116,157,146,152,134,150,126,116,137,142],
[141,119,0,96,110,111,142,125,129,129,105,113,123,128,132],
[140,119,155,0,122,138,153,162,149,139,134,124,156,139,153],
[148,118,141,129,0,129,156,138,169,140,141,129,137,146,146],
[133,135,140,113,122,0,139,160,137,138,130,132,148,133,141],
[107,94,109,98,95,112,0,111,119,107,96,89,92,107,107],
[104,105,126,89,113,91,140,0,125,129,129,101,129,113,124],
[120,99,122,102,82,114,132,126,0,131,128,94,114,114,125],
[145,117,122,112,111,113,144,122,120,0,102,142,118,120,142],
[127,101,146,117,110,121,155,122,123,149,0,110,151,130,137],
[149,125,138,127,122,119,162,150,157,109,141,0,156,135,134],
[120,135,128,95,114,103,159,122,137,133,100,95,0,133,132],
[127,114,123,112,105,118,144,138,137,131,121,116,118,0,119],
[112,109,119,98,105,110,144,127,126,109,114,117,119,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 68, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,112,118,139,114,125,121,120,131,127,106,119,121,139],
[129,0,128,117,146,122,132,129,132,135,126,127,130,135,138],
[139,123,0,122,154,140,130,120,125,120,134,135,126,137,131],
[133,134,129,0,143,129,129,125,136,129,141,113,134,141,137],
[112,105,97,108,0,122,118,110,121,128,122,126,119,120,112],
[137,129,111,122,129,0,125,122,125,119,128,124,118,122,116],
[126,119,121,122,133,126,0,131,117,134,142,123,129,130,121],
[130,122,131,126,141,129,120,0,135,132,137,130,131,132,136],
[131,119,126,115,130,126,134,116,0,132,127,118,121,137,123],
[120,116,131,122,123,132,117,119,119,0,141,121,117,123,133],
[124,125,117,110,129,123,109,114,124,110,0,111,102,116,113],
[145,124,116,138,125,127,128,121,133,130,140,0,125,127,132],
[132,121,125,117,132,133,122,120,130,134,149,126,0,126,132],
[130,116,114,110,131,129,121,119,114,128,135,124,125,0,118],
[112,113,120,114,139,135,130,115,128,118,138,119,119,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 69, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,139,130,134,110,123,142,129,121,119,118,107,112,137],
[118,0,114,129,132,101,114,118,102,110,112,111,112,92,115],
[112,137,0,132,133,119,110,122,116,120,116,115,123,102,132],
[121,122,119,0,117,104,121,135,119,118,126,103,107,91,112],
[117,119,118,134,0,102,132,123,119,110,106,120,122,121,115],
[141,150,132,147,149,0,120,141,131,125,124,128,122,127,140],
[128,137,141,130,119,131,0,139,130,117,124,119,116,124,135],
[109,133,129,116,128,110,112,0,111,96,106,111,114,115,122],
[122,149,135,132,132,120,121,140,0,129,120,121,133,116,129],
[130,141,131,133,141,126,134,155,122,0,128,116,124,134,118],
[132,139,135,125,145,127,127,145,131,123,0,114,111,119,127],
[133,140,136,148,131,123,132,140,130,135,137,0,117,132,128],
[144,139,128,144,129,129,135,137,118,127,140,134,0,118,135],
[139,159,149,160,130,124,127,136,135,117,132,119,133,0,129],
[114,136,119,139,136,111,116,129,122,133,124,123,116,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 70, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,122,123,120,120,138,125,134,120,124,124,119,125,122],
[143,0,138,134,127,132,141,134,133,133,135,131,125,128,140],
[129,113,0,126,128,124,134,127,126,126,117,128,113,131,122],
[128,117,125,0,126,126,130,121,132,127,131,133,123,125,128],
[131,124,123,125,0,125,138,126,124,124,132,120,121,126,123],
[131,119,127,125,126,0,132,119,131,118,120,117,113,123,117],
[113,110,117,121,113,119,0,115,119,109,127,112,109,121,120],
[126,117,124,130,125,132,136,0,133,123,128,127,127,117,135],
[117,118,125,119,127,120,132,118,0,117,127,127,118,122,125],
[131,118,125,124,127,133,142,128,134,0,128,130,129,111,136],
[127,116,134,120,119,131,124,123,124,123,0,132,120,122,120],
[127,120,123,118,131,134,139,124,124,121,119,0,122,122,127],
[132,126,138,128,130,138,142,124,133,122,131,129,0,132,130],
[126,123,120,126,125,128,130,134,129,140,129,129,119,0,124],
[129,111,129,123,128,134,131,116,126,115,131,124,121,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 71, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,123,126,131,134,118,133,123,125,125,121,111,132,109],
[130,0,127,118,128,133,120,122,124,120,124,116,119,129,125],
[128,124,0,114,127,134,112,125,117,120,118,116,114,124,120],
[125,133,137,0,138,145,126,127,113,124,128,124,120,128,120],
[120,123,124,113,0,126,132,123,119,120,126,119,116,126,117],
[117,118,117,106,125,0,123,127,105,114,122,115,120,120,105],
[133,131,139,125,119,128,0,124,120,127,130,131,117,131,116],
[118,129,126,124,128,124,127,0,123,129,122,127,118,122,122],
[128,127,134,138,132,146,131,128,0,126,130,124,124,128,126],
[126,131,131,127,131,137,124,122,125,0,131,114,113,128,125],
[126,127,133,123,125,129,121,129,121,120,0,121,122,131,112],
[130,135,135,127,132,136,120,124,127,137,130,0,125,134,121],
[140,132,137,131,135,131,134,133,127,138,129,126,0,129,121],
[119,122,127,123,125,131,120,129,123,123,120,117,122,0,114],
[142,126,131,131,134,146,135,129,125,126,139,130,130,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 72, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,120,136,123,119,124,121,130,127,128,117,114,105,125],
[120,0,123,129,120,119,112,119,108,115,120,114,119,112,100],
[131,128,0,142,133,120,125,116,124,111,133,120,126,119,113],
[115,122,109,0,116,123,122,113,109,108,128,130,118,97,113],
[128,131,118,135,0,132,120,117,120,122,138,141,134,119,129],
[132,132,131,128,119,0,125,119,119,111,127,133,126,123,124],
[127,139,126,129,131,126,0,118,123,131,137,131,117,124,113],
[130,132,135,138,134,132,133,0,127,127,136,133,132,134,119],
[121,143,127,142,131,132,128,124,0,126,136,134,130,124,133],
[124,136,140,143,129,140,120,124,125,0,139,135,126,129,134],
[123,131,118,123,113,124,114,115,115,112,0,123,131,113,115],
[134,137,131,121,110,118,120,118,117,116,128,0,123,123,119],
[137,132,125,133,117,125,134,119,121,125,120,128,0,116,121],
[146,139,132,154,132,128,127,117,127,122,138,128,135,0,110],
[126,151,138,138,122,127,138,132,118,117,136,132,130,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 73, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,126,124,121,111,126,117,121,123,118,119,120,124,127],
[121,0,111,121,120,111,116,106,117,116,131,115,119,122,114],
[125,140,0,135,130,132,141,121,128,122,121,139,123,132,131],
[127,130,116,0,127,129,122,129,120,124,132,136,131,132,126],
[130,131,121,124,0,121,127,121,126,124,122,115,120,129,116],
[140,140,119,122,130,0,132,129,122,120,125,125,121,136,131],
[125,135,110,129,124,119,0,125,126,118,124,134,120,133,125],
[134,145,130,122,130,122,126,0,133,128,125,121,126,142,124],
[130,134,123,131,125,129,125,118,0,120,132,132,113,139,125],
[128,135,129,127,127,131,133,123,131,0,126,127,122,132,124],
[133,120,130,119,129,126,127,126,119,125,0,127,120,139,124],
[132,136,112,115,136,126,117,130,119,124,124,0,100,130,120],
[131,132,128,120,131,130,131,125,138,129,131,151,0,135,138],
[127,129,119,119,122,115,118,109,112,119,112,121,116,0,106],
[124,137,120,125,135,120,126,127,126,127,127,131,113,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 74, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,119,132,128,130,125,124,136,122,139,126,135,139,123],
[121,0,123,135,122,147,128,126,132,130,134,116,132,128,121],
[132,128,0,130,133,133,127,119,135,127,131,115,129,137,121],
[119,116,121,0,123,131,127,119,122,126,132,106,122,120,113],
[123,129,118,128,0,125,119,127,133,112,131,112,126,131,115],
[121,104,118,120,126,0,111,112,120,118,115,109,132,119,120],
[126,123,124,124,132,140,0,121,131,130,127,115,134,125,118],
[127,125,132,132,124,139,130,0,128,132,135,120,140,129,124],
[115,119,116,129,118,131,120,123,0,124,122,105,124,127,112],
[129,121,124,125,139,133,121,119,127,0,124,113,132,126,119],
[112,117,120,119,120,136,124,116,129,127,0,112,123,134,121],
[125,135,136,145,139,142,136,131,146,138,139,0,136,133,131],
[116,119,122,129,125,119,117,111,127,119,128,115,0,122,120],
[112,123,114,131,120,132,126,122,124,125,117,118,129,0,116],
[128,130,130,138,136,131,133,127,139,132,130,120,131,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 75, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,110,128,122,128,115,137,115,125,100,112,121,116,127],
[127,0,123,133,132,138,126,130,123,138,129,128,126,119,125],
[141,128,0,129,134,133,131,147,114,134,130,142,147,123,128],
[123,118,122,0,114,134,109,141,123,130,125,116,126,118,120],
[129,119,117,137,0,126,134,148,114,131,118,140,146,126,107],
[123,113,118,117,125,0,123,146,111,118,132,134,124,132,118],
[136,125,120,142,117,128,0,155,112,141,121,131,113,109,126],
[114,121,104,110,103,105,96,0,114,126,114,114,124,97,114],
[136,128,137,128,137,140,139,137,0,121,123,116,108,122,132],
[126,113,117,121,120,133,110,125,130,0,115,133,136,126,119],
[151,122,121,126,133,119,130,137,128,136,0,126,130,112,127],
[139,123,109,135,111,117,120,137,135,118,125,0,138,130,131],
[130,125,104,125,105,127,138,127,143,115,121,113,0,117,123],
[135,132,128,133,125,119,142,154,129,125,139,121,134,0,134],
[124,126,123,131,144,133,125,137,119,132,124,120,128,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 76, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,143,123,132,147,103,123,131,129,137,141,115,124,136],
[109,0,120,122,118,106,108,102,98,115,117,125,109,121,109],
[108,131,0,115,125,97,111,106,95,118,115,116,111,89,118],
[128,129,136,0,136,134,131,114,118,149,123,135,124,118,135],
[119,133,126,115,0,132,111,107,114,119,134,134,110,122,128],
[104,145,154,117,119,0,99,112,109,143,138,127,136,117,134],
[148,143,140,120,140,152,0,124,123,141,148,147,125,113,147],
[128,149,145,137,144,139,127,0,141,135,138,136,145,109,138],
[120,153,156,133,137,142,128,110,0,132,143,130,116,114,128],
[122,136,133,102,132,108,110,116,119,0,127,131,146,115,136],
[114,134,136,128,117,113,103,113,108,124,0,141,120,136,121],
[110,126,135,116,117,124,104,115,121,120,110,0,111,96,121],
[136,142,140,127,141,115,126,106,135,105,131,140,0,125,134],
[127,130,162,133,129,134,138,142,137,136,115,155,126,0,135],
[115,142,133,116,123,117,104,113,123,115,130,130,117,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 77, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,133,133,128,114,122,133,134,140,141,133,143,130,137],
[121,0,128,139,139,133,135,130,131,143,140,137,140,115,120],
[118,123,0,125,121,114,133,108,114,124,136,111,131,108,105],
[118,112,126,0,105,118,127,117,112,101,136,110,117,106,107],
[123,112,130,146,0,104,130,124,116,126,119,129,124,125,126],
[137,118,137,133,147,0,142,121,125,135,134,139,145,127,114],
[129,116,118,124,121,109,0,131,115,126,132,124,122,130,119],
[118,121,143,134,127,130,120,0,117,143,138,122,127,139,119],
[117,120,137,139,135,126,136,134,0,138,135,115,136,126,112],
[111,108,127,150,125,116,125,108,113,0,134,102,131,107,119],
[110,111,115,115,132,117,119,113,116,117,0,116,129,93,101],
[118,114,140,141,122,112,127,129,136,149,135,0,141,131,119],
[108,111,120,134,127,106,129,124,115,120,122,110,0,127,105],
[121,136,143,145,126,124,121,112,125,144,158,120,124,0,127],
[114,131,146,144,125,137,132,132,139,132,150,132,146,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 78, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,126,127,129,138,131,127,140,122,117,127,125,121,116],
[132,0,130,128,135,127,131,123,127,127,113,125,121,129,117],
[125,121,0,127,122,130,126,122,124,120,115,128,125,120,134],
[124,123,124,0,113,120,128,133,133,130,116,130,121,127,128],
[122,116,129,138,0,127,131,130,129,126,118,130,125,130,132],
[113,124,121,131,124,0,128,121,133,124,121,124,133,114,119],
[120,120,125,123,120,123,0,120,127,122,121,126,113,120,118],
[124,128,129,118,121,130,131,0,132,128,130,125,135,128,129],
[111,124,127,118,122,118,124,119,0,111,114,119,120,113,126],
[129,124,131,121,125,127,129,123,140,0,123,123,127,131,125],
[134,138,136,135,133,130,130,121,137,128,0,133,127,134,124],
[124,126,123,121,121,127,125,126,132,128,118,0,128,127,127],
[126,130,126,130,126,118,138,116,131,124,124,123,0,122,122],
[130,122,131,124,121,137,131,123,138,120,117,124,129,0,127],
[135,134,117,123,119,132,133,122,125,126,127,124,129,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 79, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,89,141,113,112,90,112,108,130,111,117,98,120,90],
[107,0,74,133,107,112,120,153,113,94,155,106,108,140,101],
[162,177,0,150,109,160,110,158,132,131,166,109,136,168,142],
[110,118,101,0,91,116,91,134,98,127,141,96,109,155,105],
[138,144,142,160,0,126,145,182,130,123,162,119,172,162,97],
[139,139,91,135,125,0,122,145,114,123,142,85,116,158,91],
[161,131,141,160,106,129,0,135,104,134,125,120,115,147,109],
[139,98,93,117,69,106,116,0,99,126,93,100,99,141,64],
[143,138,119,153,121,137,147,152,0,125,135,104,116,153,92],
[121,157,120,124,128,128,117,125,126,0,140,131,122,145,85],
[140,96,85,110,89,109,126,158,116,111,0,91,99,151,120],
[134,145,142,155,132,166,131,151,147,120,160,0,118,136,99],
[153,143,115,142,79,135,136,152,135,129,152,133,0,145,108],
[131,111,83,96,89,93,104,110,98,106,100,115,106,0,88],
[161,150,109,146,154,160,142,187,159,166,131,152,143,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 80, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,119,130,139,131,118,118,120,126,125,131,127,123,128],
[133,0,139,131,137,129,135,119,127,140,124,131,126,130,142],
[132,112,0,115,127,131,128,116,112,130,123,136,121,135,137],
[121,120,136,0,120,121,123,109,121,128,118,135,117,134,137],
[112,114,124,131,0,132,126,112,118,127,115,131,131,138,133],
[120,122,120,130,119,0,126,119,114,118,123,124,131,151,139],
[133,116,123,128,125,125,0,110,133,129,136,123,121,123,129],
[133,132,135,142,139,132,141,0,125,137,144,149,144,135,150],
[131,124,139,130,133,137,118,126,0,143,134,127,122,141,138],
[125,111,121,123,124,133,122,114,108,0,128,130,116,122,128],
[126,127,128,133,136,128,115,107,117,123,0,129,127,130,131],
[120,120,115,116,120,127,128,102,124,121,122,0,132,120,126],
[124,125,130,134,120,120,130,107,129,135,124,119,0,137,131],
[128,121,116,117,113,100,128,116,110,129,121,131,114,0,131],
[123,109,114,114,118,112,122,101,113,123,120,125,120,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 81, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,134,136,127,136,130,139,140,140,133,133,141,124,154],
[103,0,114,112,101,106,130,103,122,129,115,116,121,116,113],
[117,137,0,128,117,112,125,121,127,134,124,123,136,122,124],
[115,139,123,0,123,122,128,120,138,129,128,117,116,126,134],
[124,150,134,128,0,133,138,123,131,124,133,125,135,125,141],
[115,145,139,129,118,0,131,127,142,132,119,132,130,126,136],
[121,121,126,123,113,120,0,121,132,128,121,115,130,122,134],
[112,148,130,131,128,124,130,0,145,131,119,127,134,127,143],
[111,129,124,113,120,109,119,106,0,119,103,132,112,118,127],
[111,122,117,122,127,119,123,120,132,0,133,124,127,129,133],
[118,136,127,123,118,132,130,132,148,118,0,123,118,123,132],
[118,135,128,134,126,119,136,124,119,127,128,0,126,122,125],
[110,130,115,135,116,121,121,117,139,124,133,125,0,122,132],
[127,135,129,125,126,125,129,124,133,122,128,129,129,0,131],
[97,138,127,117,110,115,117,108,124,118,119,126,119,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 82, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,122,127,126,96,131,105,140,124,120,109,122,123,130],
[124,0,123,128,124,114,131,106,133,113,113,121,115,129,142],
[129,128,0,136,124,96,120,111,135,120,128,119,131,131,130],
[124,123,115,0,120,113,119,107,121,107,122,107,100,123,117],
[125,127,127,131,0,98,130,105,130,111,126,122,111,112,136],
[155,137,155,138,153,0,137,122,149,144,137,129,108,137,146],
[120,120,131,132,121,114,0,112,142,131,120,116,132,126,123],
[146,145,140,144,146,129,139,0,145,129,133,123,141,137,151],
[111,118,116,130,121,102,109,106,0,113,113,104,116,119,118],
[127,138,131,144,140,107,120,122,138,0,125,120,125,133,123],
[131,138,123,129,125,114,131,118,138,126,0,113,132,118,130],
[142,130,132,144,129,122,135,128,147,131,138,0,130,131,135],
[129,136,120,151,140,143,119,110,135,126,119,121,0,117,149],
[128,122,120,128,139,114,125,114,132,118,133,120,134,0,133],
[121,109,121,134,115,105,128,100,133,128,121,116,102,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 83, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,154,117,117,137,126,130,107,140,128,116,120,98,114],
[101,0,133,126,99,126,112,132,113,123,120,110,127,110,113],
[97,118,0,99,105,126,109,112,93,115,103,113,102,107,112],
[134,125,152,0,131,140,122,141,128,152,142,128,125,115,139],
[134,152,146,120,0,147,134,137,135,141,148,155,125,129,126],
[114,125,125,111,104,0,113,100,119,115,116,128,103,118,130],
[125,139,142,129,117,138,0,123,123,144,127,143,131,113,140],
[121,119,139,110,114,151,128,0,133,141,128,124,112,118,125],
[144,138,158,123,116,132,128,118,0,159,134,141,126,122,135],
[111,128,136,99,110,136,107,110,92,0,115,119,96,99,113],
[123,131,148,109,103,135,124,123,117,136,0,127,115,104,120],
[135,141,138,123,96,123,108,127,110,132,124,0,133,100,136],
[131,124,149,126,126,148,120,139,125,155,136,118,0,122,136],
[153,141,144,136,122,133,138,133,129,152,147,151,129,0,141],
[137,138,139,112,125,121,111,126,116,138,131,115,115,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 84, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,113,70,88,71,92,91,90,82,127,68,113,71,100],
[154,0,148,122,117,108,117,117,114,121,145,108,133,121,118],
[138,103,0,105,97,79,116,106,98,126,131,105,117,105,120],
[181,129,146,0,117,98,124,103,106,143,145,132,139,144,145],
[163,134,154,134,0,130,128,128,114,148,176,123,145,142,134],
[180,143,172,153,121,0,131,131,137,152,179,130,145,137,116],
[159,134,135,127,123,120,0,114,103,158,133,142,132,131,130],
[160,134,145,148,123,120,137,0,118,134,154,113,155,138,128],
[161,137,153,145,137,114,148,133,0,144,152,130,154,131,142],
[169,130,125,108,103,99,93,117,107,0,132,119,145,127,127],
[124,106,120,106,75,72,118,97,99,119,0,97,112,121,106],
[183,143,146,119,128,121,109,138,121,132,154,0,130,144,142],
[138,118,134,112,106,106,119,96,97,106,139,121,0,112,114],
[180,130,146,107,109,114,120,113,120,124,130,107,139,0,134],
[151,133,131,106,117,135,121,123,109,124,145,109,137,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 85, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,140,128,128,152,138,128,132,127,134,154,128,112,154],
[95,0,106,104,126,105,113,123,133,84,104,138,120,110,139],
[111,145,0,120,138,119,142,125,135,123,109,145,136,119,135],
[123,147,131,0,118,126,135,125,118,93,97,142,128,118,165],
[123,125,113,133,0,114,145,111,127,85,103,115,132,103,126],
[99,146,132,125,137,0,139,139,111,127,96,128,109,125,129],
[113,138,109,116,106,112,0,92,111,98,95,140,117,98,140],
[123,128,126,126,140,112,159,0,124,111,131,144,140,129,137],
[119,118,116,133,124,140,140,127,0,102,100,139,119,128,133],
[124,167,128,158,166,124,153,140,149,0,134,159,152,121,167],
[117,147,142,154,148,155,156,120,151,117,0,147,154,141,157],
[97,113,106,109,136,123,111,107,112,92,104,0,108,108,119],
[123,131,115,123,119,142,134,111,132,99,97,143,0,132,155],
[139,141,132,133,148,126,153,122,123,130,110,143,119,0,144],
[97,112,116,86,125,122,111,114,118,84,94,132,96,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 86, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,137,133,142,138,123,138,133,123,139,122,133,128,125],
[118,0,126,127,143,144,124,129,125,139,136,133,146,135,121],
[114,125,0,125,124,128,131,124,131,130,121,122,136,131,115],
[118,124,126,0,123,129,124,127,128,127,129,112,128,122,123],
[109,108,127,128,0,128,116,125,129,128,125,118,126,118,114],
[113,107,123,122,123,0,108,118,122,120,116,108,124,116,116],
[128,127,120,127,135,143,0,124,123,130,129,131,145,124,123],
[113,122,127,124,126,133,127,0,128,134,148,119,141,119,123],
[118,126,120,123,122,129,128,123,0,123,136,110,128,124,120],
[128,112,121,124,123,131,121,117,128,0,131,119,138,117,122],
[112,115,130,122,126,135,122,103,115,120,0,113,132,108,120],
[129,118,129,139,133,143,120,132,141,132,138,0,137,124,131],
[118,105,115,123,125,127,106,110,123,113,119,114,0,118,124],
[123,116,120,129,133,135,127,132,127,134,143,127,133,0,133],
[126,130,136,128,137,135,128,128,131,129,131,120,127,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 87, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,72,111,106,103,119,96,77,85,74,90,93,82,139],
[227,0,184,160,174,161,170,141,172,158,114,176,171,183,181],
[179,67,0,120,162,142,175,137,100,85,85,108,114,155,169],
[140,91,131,0,159,141,171,111,146,115,119,144,146,138,155],
[145,77,89,92,0,124,129,86,141,75,85,65,101,118,119],
[148,90,109,110,127,0,150,91,135,101,98,61,77,107,161],
[132,81,76,80,122,101,0,50,107,58,62,95,75,120,130],
[155,110,114,140,165,160,201,0,150,121,138,116,118,117,178],
[174,79,151,105,110,116,144,101,0,63,88,95,94,114,120],
[166,93,166,136,176,150,193,130,188,0,139,165,150,147,172],
[177,137,166,132,166,153,189,113,163,112,0,115,127,172,173],
[161,75,143,107,186,190,156,135,156,86,136,0,130,129,168],
[158,80,137,105,150,174,176,133,157,101,124,121,0,163,148],
[169,68,96,113,133,144,131,134,137,104,79,122,88,0,152],
[112,70,82,96,132,90,121,73,131,79,78,83,103,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 88, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,132,119,142,128,123,138,136,105,121,139,95,122,116],
[117,0,120,123,124,126,123,115,133,99,108,127,105,136,115],
[119,131,0,131,109,126,122,144,159,111,118,157,127,133,107],
[132,128,120,0,136,152,144,143,160,127,131,159,125,126,119],
[109,127,142,115,0,139,123,141,141,120,128,150,123,145,124],
[123,125,125,99,112,0,134,155,147,98,116,146,114,111,109],
[128,128,129,107,128,117,0,150,130,97,108,137,113,132,130],
[113,136,107,108,110,96,101,0,136,100,101,119,107,117,100],
[115,118,92,91,110,104,121,115,0,85,115,128,110,103,105],
[146,152,140,124,131,153,154,151,166,0,125,159,145,150,137],
[130,143,133,120,123,135,143,150,136,126,0,152,122,149,141],
[112,124,94,92,101,105,114,132,123,92,99,0,110,120,102],
[156,146,124,126,128,137,138,144,141,106,129,141,0,129,139],
[129,115,118,125,106,140,119,134,148,101,102,131,122,0,113],
[135,136,144,132,127,142,121,151,146,114,110,149,112,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 89, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,143,141,130,147,120,133,128,127,144,121,122,134,117],
[99,0,134,134,130,121,112,121,117,112,129,121,122,133,108],
[108,117,0,132,124,126,106,106,107,128,127,125,118,115,105],
[110,117,119,0,123,128,99,112,109,120,123,126,113,126,112],
[121,121,127,128,0,145,122,114,127,115,121,134,125,126,118],
[104,130,125,123,106,0,104,94,117,116,131,123,117,127,105],
[131,139,145,152,129,147,0,130,123,127,138,149,130,140,130],
[118,130,145,139,137,157,121,0,129,122,146,137,125,141,124],
[123,134,144,142,124,134,128,122,0,122,122,126,138,133,124],
[124,139,123,131,136,135,124,129,129,0,129,128,133,127,126],
[107,122,124,128,130,120,113,105,129,122,0,121,116,137,117],
[130,130,126,125,117,128,102,114,125,123,130,0,104,127,122],
[129,129,133,138,126,134,121,126,113,118,135,147,0,130,137],
[117,118,136,125,125,124,111,110,118,124,114,124,121,0,123],
[134,143,146,139,133,146,121,127,127,125,134,129,114,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 90, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,133,157,135,114,160,146,141,132,140,136,151,131,150],
[113,0,125,162,130,98,179,123,141,116,146,117,178,127,122],
[118,126,0,156,144,130,158,115,127,112,141,125,123,111,168],
[94,89,95,0,117,82,140,100,120,91,122,118,127,104,104],
[116,121,107,134,0,111,146,92,127,97,135,147,129,112,133],
[137,153,121,169,140,0,153,121,135,122,139,146,124,146,134],
[91,72,93,111,105,98,0,84,119,108,134,114,142,91,107],
[105,128,136,151,159,130,167,0,151,127,144,149,158,148,129],
[110,110,124,131,124,116,132,100,0,105,149,124,138,109,142],
[119,135,139,160,154,129,143,124,146,0,139,130,129,119,118],
[111,105,110,129,116,112,117,107,102,112,0,120,148,95,136],
[115,134,126,133,104,105,137,102,127,121,131,0,116,124,110],
[100,73,128,124,122,127,109,93,113,122,103,135,0,99,130],
[120,124,140,147,139,105,160,103,142,132,156,127,152,0,164],
[101,129,83,147,118,117,144,122,109,133,115,141,121,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 91, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,125,133,131,120,129,128,127,124,134,124,132,115,129],
[127,0,112,136,114,131,139,136,129,136,126,121,132,126,131],
[126,139,0,130,125,124,127,123,137,132,129,113,128,121,137],
[118,115,121,0,127,120,118,118,124,134,133,112,132,117,127],
[120,137,126,124,0,120,120,125,127,122,114,126,126,121,121],
[131,120,127,131,131,0,127,118,126,131,126,125,127,116,124],
[122,112,124,133,131,124,0,122,129,117,127,109,128,121,128],
[123,115,128,133,126,133,129,0,135,126,124,119,133,113,135],
[124,122,114,127,124,125,122,116,0,120,129,119,131,126,135],
[127,115,119,117,129,120,134,125,131,0,122,123,119,128,125],
[117,125,122,118,137,125,124,127,122,129,0,115,131,119,120],
[127,130,138,139,125,126,142,132,132,128,136,0,129,139,130],
[119,119,123,119,125,124,123,118,120,132,120,122,0,126,131],
[136,125,130,134,130,135,130,138,125,123,132,112,125,0,140],
[122,120,114,124,130,127,123,116,116,126,131,121,120,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 92, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,143,135,127,119,142,150,132,145,136,136,121,133,103],
[119,0,136,129,121,136,135,142,114,138,114,146,137,123,133],
[108,115,0,138,105,124,136,129,125,124,119,134,149,111,96],
[116,122,113,0,128,139,141,138,117,134,131,133,143,114,128],
[124,130,146,123,0,134,136,144,113,121,132,129,128,137,107],
[132,115,127,112,117,0,142,137,122,131,138,139,128,114,119],
[109,116,115,110,115,109,0,109,119,119,109,136,140,99,101],
[101,109,122,113,107,114,142,0,128,108,114,134,131,105,107],
[119,137,126,134,138,129,132,123,0,133,118,148,133,114,134],
[106,113,127,117,130,120,132,143,118,0,123,116,129,103,109],
[115,137,132,120,119,113,142,137,133,128,0,137,124,114,97],
[115,105,117,118,122,112,115,117,103,135,114,0,118,112,110],
[130,114,102,108,123,123,111,120,118,122,127,133,0,118,117],
[118,128,140,137,114,137,152,146,137,148,137,139,133,0,105],
[148,118,155,123,144,132,150,144,117,142,154,141,134,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 93, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,140,155,123,133,126,120,132,143,133,126,141,130,127],
[115,0,124,150,113,132,117,120,127,122,120,131,129,119,112],
[111,127,0,127,118,120,121,106,114,111,113,121,115,116,103],
[96,101,124,0,95,123,107,102,108,107,100,112,121,97,95],
[128,138,133,156,0,130,132,149,130,137,130,135,135,120,104],
[118,119,131,128,121,0,110,110,121,123,108,113,119,106,109],
[125,134,130,144,119,141,0,131,128,127,125,136,141,125,131],
[131,131,145,149,102,141,120,0,130,140,123,123,135,119,118],
[119,124,137,143,121,130,123,121,0,129,116,134,130,122,123],
[108,129,140,144,114,128,124,111,122,0,116,126,121,128,118],
[118,131,138,151,121,143,126,128,135,135,0,144,133,127,121],
[125,120,130,139,116,138,115,128,117,125,107,0,134,120,123],
[110,122,136,130,116,132,110,116,121,130,118,117,0,115,116],
[121,132,135,154,131,145,126,132,129,123,124,131,136,0,125],
[124,139,148,156,147,142,120,133,128,133,130,128,135,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 94, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,130,128,125,119,128,133,135,123,118,131,119,144,118],
[122,0,114,126,121,131,125,126,131,118,116,135,120,145,128],
[121,137,0,129,123,134,142,127,131,128,119,135,127,142,122],
[123,125,122,0,123,140,138,129,121,122,110,126,128,135,113],
[126,130,128,128,0,133,117,145,128,122,118,133,122,138,121],
[132,120,117,111,118,0,122,123,138,114,126,119,124,134,113],
[123,126,109,113,134,129,0,127,132,122,131,122,113,133,123],
[118,125,124,122,106,128,124,0,126,116,109,123,103,145,121],
[116,120,120,130,123,113,119,125,0,107,115,119,125,138,107],
[128,133,123,129,129,137,129,135,144,0,121,121,130,142,123],
[133,135,132,141,133,125,120,142,136,130,0,135,118,151,126],
[120,116,116,125,118,132,129,128,132,130,116,0,112,142,124],
[132,131,124,123,129,127,138,148,126,121,133,139,0,148,126],
[107,106,109,116,113,117,118,106,113,109,100,109,103,0,91],
[133,123,129,138,130,138,128,130,144,128,125,127,125,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 95, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,148,151,138,156,130,125,134,142,107,102,162,155,109],
[115,0,156,167,151,161,118,151,135,137,147,101,171,167,113],
[103,95,0,122,89,122,116,111,74,118,114,62,154,127,94],
[100,84,129,0,96,106,113,101,88,102,116,96,143,136,111],
[113,100,162,155,0,157,116,128,110,104,155,80,158,133,91],
[95,90,129,145,94,0,122,97,117,101,131,129,158,139,112],
[121,133,135,138,135,129,0,122,119,94,150,101,178,156,89],
[126,100,140,150,123,154,129,0,107,126,153,111,144,153,120],
[117,116,177,163,141,134,132,144,0,129,158,105,170,162,129],
[109,114,133,149,147,150,157,125,122,0,124,81,160,133,104],
[144,104,137,135,96,120,101,98,93,127,0,73,138,146,98],
[149,150,189,155,171,122,150,140,146,170,178,0,170,147,99],
[89,80,97,108,93,93,73,107,81,91,113,81,0,128,97],
[96,84,124,115,118,112,95,98,89,118,105,104,123,0,96],
[142,138,157,140,160,139,162,131,122,147,153,152,154,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 96, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,160,162,169,122,128,142,133,155,119,187,177,124,148],
[94,0,146,105,134,134,114,145,147,146,129,155,151,134,136],
[91,105,0,122,118,121,140,103,128,130,65,141,130,87,105],
[89,146,129,0,136,126,106,81,123,109,113,146,141,95,124],
[82,117,133,115,0,132,106,96,124,127,103,165,110,93,107],
[129,117,130,125,119,0,126,92,123,124,126,171,153,116,123],
[123,137,111,145,145,125,0,110,127,134,110,170,158,94,120],
[109,106,148,170,155,159,141,0,146,137,123,165,169,133,118],
[118,104,123,128,127,128,124,105,0,171,125,143,132,102,127],
[96,105,121,142,124,127,117,114,80,0,101,147,135,91,131],
[132,122,186,138,148,125,141,128,126,150,0,195,154,122,137],
[64,96,110,105,86,80,81,86,108,104,56,0,72,82,115],
[74,100,121,110,141,98,93,82,119,116,97,179,0,77,105],
[127,117,164,156,158,135,157,118,149,160,129,169,174,0,121],
[103,115,146,127,144,128,131,133,124,120,114,136,146,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 97, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,141,129,135,123,145,133,137,137,117,131,124,158,137],
[120,0,132,114,123,145,134,119,117,116,128,117,117,147,118],
[110,119,0,114,115,124,141,113,114,128,122,114,115,127,120],
[122,137,137,0,129,148,141,137,127,134,124,127,131,135,131],
[116,128,136,122,0,119,125,123,119,119,115,118,128,137,131],
[128,106,127,103,132,0,137,117,117,122,122,111,124,135,129],
[106,117,110,110,126,114,0,91,117,118,113,107,105,128,122],
[118,132,138,114,128,134,160,0,135,131,130,131,126,152,126],
[114,134,137,124,132,134,134,116,0,111,124,120,138,141,130],
[114,135,123,117,132,129,133,120,140,0,122,109,114,136,132],
[134,123,129,127,136,129,138,121,127,129,0,127,127,133,135],
[120,134,137,124,133,140,144,120,131,142,124,0,128,137,139],
[127,134,136,120,123,127,146,125,113,137,124,123,0,148,127],
[93,104,124,116,114,116,123,99,110,115,118,114,103,0,117],
[114,133,131,120,120,122,129,125,121,119,116,112,124,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 98, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,126,126,126,130,134,112,117,137,128,144,129,123,125],
[116,0,130,110,126,115,129,120,117,121,116,132,121,115,106],
[125,121,0,109,123,121,115,130,116,114,109,127,114,118,116],
[125,141,142,0,141,131,129,125,139,134,118,129,121,134,132],
[125,125,128,110,0,123,120,126,121,118,110,133,117,127,108],
[121,136,130,120,128,0,126,114,124,123,107,133,115,122,111],
[117,122,136,122,131,125,0,118,124,121,124,133,117,128,112],
[139,131,121,126,125,137,133,0,120,119,120,141,120,124,118],
[134,134,135,112,130,127,127,131,0,130,126,136,127,130,127],
[114,130,137,117,133,128,130,132,121,0,125,124,125,118,117],
[123,135,142,133,141,144,127,131,125,126,0,140,119,142,120],
[107,119,124,122,118,118,118,110,115,127,111,0,115,116,114],
[122,130,137,130,134,136,134,131,124,126,132,136,0,137,130],
[128,136,133,117,124,129,123,127,121,133,109,135,114,0,120],
[126,145,135,119,143,140,139,133,124,134,131,137,121,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 99, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,125,98,95,124,113,103,108,89,104,102,114,111,101],
[111,0,125,115,89,115,112,79,123,113,128,99,85,112,96],
[126,126,0,126,125,133,153,113,142,106,116,106,100,119,106],
[153,136,125,0,114,176,143,130,139,121,116,142,120,137,120],
[156,162,126,137,0,160,120,116,144,122,144,158,120,149,129],
[127,136,118,75,91,0,105,74,101,69,122,91,81,97,84],
[138,139,98,108,131,146,0,122,107,108,113,86,103,115,109],
[148,172,138,121,135,177,129,0,138,136,131,164,133,105,137],
[143,128,109,112,107,150,144,113,0,118,104,101,118,111,129],
[162,138,145,130,129,182,143,115,133,0,131,136,129,132,161],
[147,123,135,135,107,129,138,120,147,120,0,146,114,161,152],
[149,152,145,109,93,160,165,87,150,115,105,0,115,122,134],
[137,166,151,131,131,170,148,118,133,122,137,136,0,134,110],
[140,139,132,114,102,154,136,146,140,119,90,129,117,0,145],
[150,155,145,131,122,167,142,114,122,90,99,117,141,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 100, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,112,111,127,114,125,124,102,152,120,116,97,122,129],
[139,0,122,119,126,128,120,124,108,140,112,120,106,122,112],
[139,129,0,129,128,129,141,110,129,153,138,128,107,124,109],
[140,132,122,0,119,123,119,119,113,151,138,120,100,132,130],
[124,125,123,132,0,112,131,119,121,147,126,129,88,119,121],
[137,123,122,128,139,0,116,121,119,150,116,122,94,128,131],
[126,131,110,132,120,135,0,123,123,143,119,113,107,119,124],
[127,127,141,132,132,130,128,0,116,146,136,128,102,135,134],
[149,143,122,138,130,132,128,135,0,153,131,136,128,133,128],
[99,111,98,100,104,101,108,105,98,0,106,100,83,106,117],
[131,139,113,113,125,135,132,115,120,145,0,130,106,114,125],
[135,131,123,131,122,129,138,123,115,151,121,0,103,119,129],
[154,145,144,151,163,157,144,149,123,168,145,148,0,148,135],
[129,129,127,119,132,123,132,116,118,145,137,132,103,0,121],
[122,139,142,121,130,120,127,117,123,134,126,122,116,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 101, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,121,113,135,131,135,109,117,152,108,131,113,124,114],
[122,0,116,131,138,126,131,102,116,126,119,129,120,126,120],
[130,135,0,103,148,131,142,123,107,144,109,155,98,140,149],
[138,120,148,0,150,151,142,115,117,142,128,161,113,151,144],
[116,113,103,101,0,116,113,93,112,114,104,109,104,117,108],
[120,125,120,100,135,0,100,131,117,111,126,136,112,107,126],
[116,120,109,109,138,151,0,109,122,137,128,133,121,113,132],
[142,149,128,136,158,120,142,0,129,128,160,152,117,121,151],
[134,135,144,134,139,134,129,122,0,144,137,137,121,117,116],
[99,125,107,109,137,140,114,123,107,0,123,124,120,112,145],
[143,132,142,123,147,125,123,91,114,128,0,140,111,114,120],
[120,122,96,90,142,115,118,99,114,127,111,0,104,101,128],
[138,131,153,138,147,139,130,134,130,131,140,147,0,121,122],
[127,125,111,100,134,144,138,130,134,139,137,150,130,0,144],
[137,131,102,107,143,125,119,100,135,106,131,123,129,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 102, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,137,138,141,118,134,126,135,128,141,118,121,121,125],
[121,0,131,116,119,120,134,112,141,137,140,115,123,117,122],
[114,120,0,122,114,118,113,122,132,123,128,113,117,127,111],
[113,135,129,0,120,118,116,114,130,134,125,124,107,123,134],
[110,132,137,131,0,113,132,118,130,154,138,135,128,121,131],
[133,131,133,133,138,0,144,108,142,157,144,121,120,157,133],
[117,117,138,135,119,107,0,107,119,143,153,113,108,137,118],
[125,139,129,137,133,143,144,0,145,154,163,136,123,138,145],
[116,110,119,121,121,109,132,106,0,137,137,98,119,119,127],
[123,114,128,117,97,94,108,97,114,0,136,89,104,126,110],
[110,111,123,126,113,107,98,88,114,115,0,109,100,95,112],
[133,136,138,127,116,130,138,115,153,162,142,0,125,151,134],
[130,128,134,144,123,131,143,128,132,147,151,126,0,135,145],
[130,134,124,128,130,94,114,113,132,125,156,100,116,0,144],
[126,129,140,117,120,118,133,106,124,141,139,117,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 103, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,137,121,137,139,130,128,150,136,135,131,136,126,135],
[122,0,135,116,126,137,122,130,133,121,135,119,128,119,118],
[114,116,0,108,118,126,117,114,128,110,120,111,125,119,113],
[130,135,143,0,138,148,133,137,150,136,138,122,148,140,124],
[114,125,133,113,0,139,114,121,127,116,123,110,122,119,119],
[112,114,125,103,112,0,113,125,115,121,118,100,123,113,103],
[121,129,134,118,137,138,0,136,130,127,124,120,127,129,127],
[123,121,137,114,130,126,115,0,126,130,130,119,132,118,119],
[101,118,123,101,124,136,121,125,0,116,116,112,112,115,106],
[115,130,141,115,135,130,124,121,135,0,121,124,131,133,129],
[116,116,131,113,128,133,127,121,135,130,0,115,120,131,114],
[120,132,140,129,141,151,131,132,139,127,136,0,126,129,129],
[115,123,126,103,129,128,124,119,139,120,131,125,0,129,120],
[125,132,132,111,132,138,122,133,136,118,120,122,122,0,128],
[116,133,138,127,132,148,124,132,145,122,137,122,131,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 104, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,113,119,114,123,121,108,113,126,138,122,133,112,123],
[128,0,114,129,120,122,121,114,136,131,127,126,143,120,135],
[138,137,0,120,124,143,136,132,143,141,137,145,156,135,134],
[132,122,131,0,122,128,142,127,135,128,128,130,135,119,140],
[137,131,127,129,0,136,136,125,146,119,145,135,146,132,140],
[128,129,108,123,115,0,127,128,124,117,131,122,133,125,121],
[130,130,115,109,115,124,0,131,128,121,112,123,145,122,115],
[143,137,119,124,126,123,120,0,125,122,123,130,152,124,126],
[138,115,108,116,105,127,123,126,0,120,119,117,159,127,127],
[125,120,110,123,132,134,130,129,131,0,130,136,151,112,120],
[113,124,114,123,106,120,139,128,132,121,0,137,140,109,122],
[129,125,106,121,116,129,128,121,134,115,114,0,135,115,113],
[118,108,95,116,105,118,106,99,92,100,111,116,0,114,114],
[139,131,116,132,119,126,129,127,124,139,142,136,137,0,136],
[128,116,117,111,111,130,136,125,124,131,129,138,137,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 105, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,124,127,119,135,131,119,132,130,129,130,127,117,112],
[131,0,129,128,128,124,125,145,128,124,135,135,139,127,129],
[127,122,0,124,111,122,129,138,132,129,137,118,124,113,112],
[124,123,127,0,123,132,124,130,137,132,136,136,118,126,126],
[132,123,140,128,0,141,133,133,134,132,145,137,142,127,119],
[116,127,129,119,110,0,125,129,129,127,124,123,126,119,119],
[120,126,122,127,118,126,0,130,126,120,133,128,134,133,120],
[132,106,113,121,118,122,121,0,121,120,123,118,120,116,110],
[119,123,119,114,117,122,125,130,0,125,123,127,125,118,116],
[121,127,122,119,119,124,131,131,126,0,134,132,136,116,117],
[122,116,114,115,106,127,118,128,128,117,0,130,131,121,118],
[121,116,133,115,114,128,123,133,124,119,121,0,120,118,112],
[124,112,127,133,109,125,117,131,126,115,120,131,0,119,114],
[134,124,138,125,124,132,118,135,133,135,130,133,132,0,126],
[139,122,139,125,132,132,131,141,135,134,133,139,137,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 106, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,109,132,111,99,111,116,122,113,109,111,107,117,106],
[136,0,128,137,127,127,143,111,130,146,122,122,121,132,144],
[142,123,0,125,124,118,132,116,134,136,116,123,105,118,134],
[119,114,126,0,122,124,119,113,126,140,123,114,113,116,110],
[140,124,127,129,0,127,141,122,129,128,135,140,128,123,134],
[152,124,133,127,124,0,136,137,133,144,115,127,124,126,128],
[140,108,119,132,110,115,0,118,131,126,129,124,124,112,121],
[135,140,135,138,129,114,133,0,130,143,131,126,122,130,115],
[129,121,117,125,122,118,120,121,0,121,126,108,110,120,128],
[138,105,115,111,123,107,125,108,130,0,114,112,101,108,117],
[142,129,135,128,116,136,122,120,125,137,0,128,126,126,129],
[140,129,128,137,111,124,127,125,143,139,123,0,126,125,127],
[144,130,146,138,123,127,127,129,141,150,125,125,0,117,137],
[134,119,133,135,128,125,139,121,131,143,125,126,134,0,138],
[145,107,117,141,117,123,130,136,123,134,122,124,114,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 107, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,127,114,125,131,121,118,127,126,113,131,116,113,123],
[130,0,119,124,126,129,113,120,130,121,115,120,122,122,124],
[124,132,0,124,128,131,123,121,123,114,111,129,129,122,126],
[137,127,127,0,128,131,111,113,128,125,115,129,125,121,117],
[126,125,123,123,0,135,124,123,129,123,113,129,130,113,125],
[120,122,120,120,116,0,109,115,113,107,115,123,118,107,114],
[130,138,128,140,127,142,0,128,133,121,121,140,127,128,126],
[133,131,130,138,128,136,123,0,123,125,127,129,126,127,139],
[124,121,128,123,122,138,118,128,0,123,116,124,123,132,120],
[125,130,137,126,128,144,130,126,128,0,119,133,128,123,136],
[138,136,140,136,138,136,130,124,135,132,0,129,123,134,135],
[120,131,122,122,122,128,111,122,127,118,122,0,119,118,129],
[135,129,122,126,121,133,124,125,128,123,128,132,0,123,125],
[138,129,129,130,138,144,123,124,119,128,117,133,128,0,125],
[128,127,125,134,126,137,125,112,131,115,116,122,126,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 108, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,75,110,109,109,116,150,115,123,140,89,97,106,122],
[155,0,114,134,124,167,125,165,140,137,147,128,143,118,124],
[176,137,0,114,125,144,139,146,114,133,137,132,129,122,145],
[141,117,137,0,136,138,138,185,117,139,146,139,155,137,151],
[142,127,126,115,0,153,149,160,140,127,138,125,142,123,150],
[142,84,107,113,98,0,136,143,89,123,134,110,104,90,105],
[135,126,112,113,102,115,0,123,99,105,114,126,114,92,129],
[101,86,105,66,91,108,128,0,82,102,109,105,90,72,96],
[136,111,137,134,111,162,152,169,0,139,163,163,136,103,144],
[128,114,118,112,124,128,146,149,112,0,129,139,112,114,164],
[111,104,114,105,113,117,137,142,88,122,0,128,112,104,139],
[162,123,119,112,126,141,125,146,88,112,123,0,83,89,105],
[154,108,122,96,109,147,137,161,115,139,139,168,0,110,151],
[145,133,129,114,128,161,159,179,148,137,147,162,141,0,143],
[129,127,106,100,101,146,122,155,107,87,112,146,100,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 109, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,156,118,121,123,161,146,102,140,109,143,144,133,130],
[107,0,140,116,111,136,133,149,121,147,126,136,111,132,110],
[95,111,0,92,119,97,104,116,87,109,98,100,112,114,103],
[133,135,159,0,114,111,143,141,125,150,109,125,131,124,138],
[130,140,132,137,0,106,142,141,145,137,118,149,138,137,141],
[128,115,154,140,145,0,132,120,111,142,113,124,132,137,138],
[90,118,147,108,109,119,0,140,110,130,76,129,116,116,121],
[105,102,135,110,110,131,111,0,114,109,94,107,121,115,113],
[149,130,164,126,106,140,141,137,0,152,111,133,132,113,123],
[111,104,142,101,114,109,121,142,99,0,98,98,124,108,139],
[142,125,153,142,133,138,175,157,140,153,0,155,158,124,132],
[108,115,151,126,102,127,122,144,118,153,96,0,132,107,120],
[107,140,139,120,113,119,135,130,119,127,93,119,0,114,121],
[118,119,137,127,114,114,135,136,138,143,127,144,137,0,131],
[121,141,148,113,110,113,130,138,128,112,119,131,130,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 110, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,118,116,136,122,140,131,144,138,114,138,138,149,126],
[116,0,102,113,110,99,119,106,121,114,101,132,131,143,113],
[133,149,0,130,144,130,147,125,134,143,138,141,150,168,135],
[135,138,121,0,131,109,149,125,141,142,130,139,153,132,142],
[115,141,107,120,0,120,129,128,127,124,115,133,130,155,117],
[129,152,121,142,131,0,144,124,138,144,125,149,164,143,140],
[111,132,104,102,122,107,0,119,118,122,114,124,137,134,124],
[120,145,126,126,123,127,132,0,132,148,120,138,146,159,121],
[107,130,117,110,124,113,133,119,0,119,99,136,130,140,104],
[113,137,108,109,127,107,129,103,132,0,111,129,133,136,102],
[137,150,113,121,136,126,137,131,152,140,0,136,143,161,146],
[113,119,110,112,118,102,127,113,115,122,115,0,134,150,125],
[113,120,101,98,121,87,114,105,121,118,108,117,0,134,110],
[102,108,83,119,96,108,117,92,111,115,90,101,117,0,99],
[125,138,116,109,134,111,127,130,147,149,105,126,141,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 111, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,126,124,137,129,120,127,141,136,131,122,148,135,133],
[116,0,118,123,123,134,119,127,124,117,132,123,141,136,139],
[125,133,0,124,135,132,131,139,141,131,148,127,152,133,141],
[127,128,127,0,133,124,129,133,129,130,134,113,138,130,138],
[114,128,116,118,0,128,137,125,126,132,130,124,135,122,129],
[122,117,119,127,123,0,123,129,124,129,126,131,131,134,125],
[131,132,120,122,114,128,0,130,138,122,136,120,140,118,126],
[124,124,112,118,126,122,121,0,122,125,138,117,132,114,130],
[110,127,110,122,125,127,113,129,0,112,134,109,122,126,134],
[115,134,120,121,119,122,129,126,139,0,140,119,130,131,126],
[120,119,103,117,121,125,115,113,117,111,0,116,125,118,135],
[129,128,124,138,127,120,131,134,142,132,135,0,149,123,128],
[103,110,99,113,116,120,111,119,129,121,126,102,0,110,120],
[116,115,118,121,129,117,133,137,125,120,133,128,141,0,122],
[118,112,110,113,122,126,125,121,117,125,116,123,131,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 112, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,130,135,117,93,110,137,118,151,119,130,109,106,151],
[113,0,86,109,89,102,104,140,127,136,119,115,120,113,112],
[121,165,0,148,131,124,119,172,145,167,131,163,119,112,113],
[116,142,103,0,112,99,153,123,135,112,109,137,118,83,126],
[134,162,120,139,0,129,126,147,174,139,149,143,112,112,139],
[158,149,127,152,122,0,144,160,148,160,154,160,145,133,109],
[141,147,132,98,125,107,0,149,167,161,104,139,110,119,141],
[114,111,79,128,104,91,102,0,114,117,115,128,98,101,131],
[133,124,106,116,77,103,84,137,0,138,135,113,125,119,116],
[100,115,84,139,112,91,90,134,113,0,110,127,119,68,122],
[132,132,120,142,102,97,147,136,116,141,0,128,111,118,125],
[121,136,88,114,108,91,112,123,138,124,123,0,105,89,120],
[142,131,132,133,139,106,141,153,126,132,140,146,0,143,131],
[145,138,139,168,139,118,132,150,132,183,133,162,108,0,117],
[100,139,138,125,112,142,110,120,135,129,126,131,120,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 113, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,125,129,122,118,117,115,134,116,130,126,141,127,119],
[139,0,127,145,135,129,134,120,127,118,118,149,134,133,119],
[126,124,0,135,117,115,106,122,114,113,119,136,133,122,115],
[122,106,116,0,124,120,111,105,118,116,109,124,128,133,110],
[129,116,134,127,0,119,102,125,143,119,113,129,146,124,116],
[133,122,136,131,132,0,121,128,129,130,125,136,140,140,137],
[134,117,145,140,149,130,0,140,137,136,127,141,138,133,124],
[136,131,129,146,126,123,111,0,144,128,117,134,131,134,123],
[117,124,137,133,108,122,114,107,0,109,106,118,124,129,121],
[135,133,138,135,132,121,115,123,142,0,116,129,137,130,120],
[121,133,132,142,138,126,124,134,145,135,0,136,136,134,124],
[125,102,115,127,122,115,110,117,133,122,115,0,124,121,124],
[110,117,118,123,105,111,113,120,127,114,115,127,0,118,106],
[124,118,129,118,127,111,118,117,122,121,117,130,133,0,120],
[132,132,136,141,135,114,127,128,130,131,127,127,145,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 114, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,135,126,136,163,138,165,147,151,140,151,121,109,150],
[125,0,125,126,146,134,147,157,142,132,130,152,121,119,126],
[116,126,0,135,119,109,130,157,126,122,135,126,120,117,133],
[125,125,116,0,142,127,133,162,131,125,117,144,129,134,141],
[115,105,132,109,0,115,128,140,129,141,142,115,127,111,128],
[88,117,142,124,136,0,136,144,126,143,135,125,106,119,130],
[113,104,121,118,123,115,0,160,138,131,118,128,110,121,126],
[86,94,94,89,111,107,91,0,110,119,110,87,115,65,106],
[104,109,125,120,122,125,113,141,0,124,116,128,108,83,137],
[100,119,129,126,110,108,120,132,127,0,111,117,114,107,117],
[111,121,116,134,109,116,133,141,135,140,0,135,127,115,130],
[100,99,125,107,136,126,123,164,123,134,116,0,118,125,118],
[130,130,131,122,124,145,141,136,143,137,124,133,0,124,137],
[142,132,134,117,140,132,130,186,168,144,136,126,127,0,126],
[101,125,118,110,123,121,125,145,114,134,121,133,114,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 115, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,109,127,121,99,119,119,135,119,139,108,121,119,111],
[133,0,130,140,128,113,133,136,138,128,140,134,146,126,124],
[142,121,0,142,148,107,135,140,139,107,127,123,144,120,115],
[124,111,109,0,127,108,126,137,114,124,134,115,120,119,112],
[130,123,103,124,0,105,125,127,112,106,129,102,140,118,120],
[152,138,144,143,146,0,143,131,123,126,142,143,131,133,127],
[132,118,116,125,126,108,0,121,100,103,125,110,141,116,112],
[132,115,111,114,124,120,130,0,121,128,119,117,134,118,100],
[116,113,112,137,139,128,151,130,0,116,131,132,138,112,120],
[132,123,144,127,145,125,148,123,135,0,130,120,132,116,127],
[112,111,124,117,122,109,126,132,120,121,0,111,130,118,117],
[143,117,128,136,149,108,141,134,119,131,140,0,152,109,132],
[130,105,107,131,111,120,110,117,113,119,121,99,0,103,103],
[132,125,131,132,133,118,135,133,139,135,133,142,148,0,147],
[140,127,136,139,131,124,139,151,131,124,134,119,148,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 116, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,131,125,116,117,131,113,136,141,125,145,126,118,121],
[133,0,124,142,116,126,166,143,153,135,127,152,129,117,146],
[120,127,0,134,123,99,132,115,133,119,131,133,127,124,134],
[126,109,117,0,112,109,138,102,135,126,129,136,126,117,117],
[135,135,128,139,0,141,152,121,145,135,133,143,142,123,124],
[134,125,152,142,110,0,148,132,143,129,131,125,139,123,118],
[120,85,119,113,99,103,0,90,125,99,101,110,112,104,100],
[138,108,136,149,130,119,161,0,136,138,129,169,148,126,118],
[115,98,118,116,106,108,126,115,0,113,96,112,108,129,100],
[110,116,132,125,116,122,152,113,138,0,107,142,117,110,118],
[126,124,120,122,118,120,150,122,155,144,0,124,121,122,133],
[106,99,118,115,108,126,141,82,139,109,127,0,132,111,122],
[125,122,124,125,109,112,139,103,143,134,130,119,0,117,96],
[133,134,127,134,128,128,147,125,122,141,129,140,134,0,141],
[130,105,117,134,127,133,151,133,151,133,118,129,155,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 117, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,120,117,138,110,123,121,117,118,135,105,122,122,122],
[134,0,118,135,132,126,122,129,124,117,124,111,121,120,116],
[131,133,0,129,123,117,126,135,116,129,133,122,119,136,122],
[134,116,122,0,118,119,121,136,126,115,131,124,119,126,122],
[113,119,128,133,0,110,126,123,122,123,122,119,119,122,122],
[141,125,134,132,141,0,146,133,135,126,144,126,138,141,132],
[128,129,125,130,125,105,0,138,122,119,133,121,118,131,120],
[130,122,116,115,128,118,113,0,111,114,125,107,115,123,112],
[134,127,135,125,129,116,129,140,0,128,137,128,128,129,124],
[133,134,122,136,128,125,132,137,123,0,144,136,123,127,120],
[116,127,118,120,129,107,118,126,114,107,0,115,116,121,110],
[146,140,129,127,132,125,130,144,123,115,136,0,126,129,123],
[129,130,132,132,132,113,133,136,123,128,135,125,0,122,127],
[129,131,115,125,129,110,120,128,122,124,130,122,129,0,131],
[129,135,129,129,129,119,131,139,127,131,141,128,124,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 118, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,142,120,121,123,124,128,129,126,135,112,139,127,130],
[125,0,133,118,126,127,134,134,132,121,146,121,132,127,130],
[109,118,0,127,130,126,115,136,108,118,127,117,122,115,114],
[131,133,124,0,125,131,133,134,129,133,138,130,145,138,140],
[130,125,121,126,0,120,136,126,126,124,122,124,127,129,129],
[128,124,125,120,131,0,123,130,126,124,128,125,128,122,130],
[127,117,136,118,115,128,0,127,110,129,140,106,126,109,114],
[123,117,115,117,125,121,124,0,130,129,125,125,118,121,122],
[122,119,143,122,125,125,141,121,0,126,130,125,131,136,134],
[125,130,133,118,127,127,122,122,125,0,124,117,123,121,127],
[116,105,124,113,129,123,111,126,121,127,0,107,119,121,114],
[139,130,134,121,127,126,145,126,126,134,144,0,140,134,134],
[112,119,129,106,124,123,125,133,120,128,132,111,0,119,121],
[124,124,136,113,122,129,142,130,115,130,130,117,132,0,119],
[121,121,137,111,122,121,137,129,117,124,137,117,130,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 119, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,114,116,126,135,109,113,116,117,121,119,112,122,125],
[134,0,122,124,130,146,125,121,130,124,125,134,129,129,129],
[137,129,0,125,146,130,136,110,136,119,123,115,139,132,112],
[135,127,126,0,139,140,128,132,141,124,141,114,125,135,127],
[125,121,105,112,0,139,116,114,107,101,126,116,108,135,118],
[116,105,121,111,112,0,104,116,111,99,103,104,110,106,101],
[142,126,115,123,135,147,0,125,124,120,137,126,114,138,120],
[138,130,141,119,137,135,126,0,144,127,143,126,132,142,133],
[135,121,115,110,144,140,127,107,0,126,134,120,114,131,121],
[134,127,132,127,150,152,131,124,125,0,140,136,135,137,132],
[130,126,128,110,125,148,114,108,117,111,0,127,114,133,122],
[132,117,136,137,135,147,125,125,131,115,124,0,119,129,111],
[139,122,112,126,143,141,137,119,137,116,137,132,0,138,143],
[129,122,119,116,116,145,113,109,120,114,118,122,113,0,124],
[126,122,139,124,133,150,131,118,130,119,129,140,108,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 120, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,141,97,103,117,104,91,113,118,109,125,128,116,120],
[146,0,130,103,108,139,168,125,125,136,140,151,136,146,137],
[110,121,0,124,119,143,171,106,106,113,134,138,94,113,123],
[154,148,127,0,129,151,121,102,126,131,150,123,114,130,142],
[148,143,132,122,0,150,137,140,103,114,120,133,91,134,127],
[134,112,108,100,101,0,115,103,88,76,122,159,140,143,131],
[147,83,80,130,114,136,0,126,101,86,115,146,122,136,140],
[160,126,145,149,111,148,125,0,135,128,121,154,131,131,139],
[138,126,145,125,148,163,150,116,0,134,147,154,133,140,186],
[133,115,138,120,137,175,165,123,117,0,173,135,154,134,145],
[142,111,117,101,131,129,136,130,104,78,0,140,131,132,141],
[126,100,113,128,118,92,105,97,97,116,111,0,89,101,113],
[123,115,157,137,160,111,129,120,118,97,120,162,0,134,136],
[135,105,138,121,117,108,115,120,111,117,119,150,117,0,153],
[131,114,128,109,124,120,111,112,65,106,110,138,115,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 121, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,149,131,104,122,107,92,99,100,141,120,105,96,113],
[143,0,139,174,144,132,147,146,105,126,171,134,149,123,162],
[102,112,0,107,121,121,134,104,68,68,133,116,126,88,99],
[120,77,144,0,121,107,127,116,90,103,148,122,132,113,111],
[147,107,130,130,0,159,119,108,107,103,136,137,140,87,131],
[129,119,130,144,92,0,92,88,87,99,117,114,121,84,113],
[144,104,117,124,132,159,0,123,77,113,133,141,139,82,126],
[159,105,147,135,143,163,128,0,139,146,156,160,155,101,149],
[152,146,183,161,144,164,174,112,0,133,156,158,158,140,161],
[151,125,183,148,148,152,138,105,118,0,156,156,152,126,136],
[110,80,118,103,115,134,118,95,95,95,0,134,113,104,104],
[131,117,135,129,114,137,110,91,93,95,117,0,151,81,122],
[146,102,125,119,111,130,112,96,93,99,138,100,0,108,99],
[155,128,163,138,164,167,169,150,111,125,147,170,143,0,139],
[138,89,152,140,120,138,125,102,90,115,147,129,152,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 122, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,119,115,107,111,94,117,102,96,145,110,113,111,136],
[151,0,116,132,121,130,115,120,109,100,143,131,138,137,124],
[132,135,0,128,122,134,104,127,120,139,140,134,116,124,121],
[136,119,123,0,97,133,112,107,138,110,145,154,134,123,153],
[144,130,129,154,0,159,121,112,142,119,150,138,135,135,123],
[140,121,117,118,92,0,93,102,135,90,123,138,108,116,135],
[157,136,147,139,130,158,0,137,134,144,156,152,122,139,155],
[134,131,124,144,139,149,114,0,139,112,129,137,134,126,145],
[149,142,131,113,109,116,117,112,0,113,145,143,120,141,137],
[155,151,112,141,132,161,107,139,138,0,160,145,142,140,161],
[106,108,111,106,101,128,95,122,106,91,0,138,99,125,118],
[141,120,117,97,113,113,99,114,108,106,113,0,111,116,124],
[138,113,135,117,116,143,129,117,131,109,152,140,0,132,148],
[140,114,127,128,116,135,112,125,110,111,126,135,119,0,157],
[115,127,130,98,128,116,96,106,114,90,133,127,103,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 123, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,143,130,141,108,119,123,117,125,119,126,124,123,140],
[109,0,123,107,138,115,92,112,102,119,117,107,126,113,139],
[108,128,0,107,125,125,120,99,108,137,103,129,138,133,124],
[121,144,144,0,157,135,115,137,116,121,133,124,124,123,143],
[110,113,126,94,0,110,88,117,110,108,91,105,115,115,122],
[143,136,126,116,141,0,123,104,127,144,132,114,129,121,133],
[132,159,131,136,163,128,0,133,117,151,143,131,144,145,141],
[128,139,152,114,134,147,118,0,113,148,118,123,137,138,134],
[134,149,143,135,141,124,134,138,0,137,139,146,140,141,137],
[126,132,114,130,143,107,100,103,114,0,122,120,124,126,136],
[132,134,148,118,160,119,108,133,112,129,0,124,136,119,147],
[125,144,122,127,146,137,120,128,105,131,127,0,135,123,133],
[127,125,113,127,136,122,107,114,111,127,115,116,0,126,134],
[128,138,118,128,136,130,106,113,110,125,132,128,125,0,140],
[111,112,127,108,129,118,110,117,114,115,104,118,117,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 124, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,137,139,114,134,141,116,113,129,145,130,131,128,137],
[125,0,153,140,113,126,150,139,136,139,127,141,127,132,135],
[114,98,0,134,114,133,120,114,103,109,136,125,119,133,137],
[112,111,117,0,94,123,139,107,111,112,111,117,119,113,115],
[137,138,137,157,0,158,138,134,115,143,146,148,137,148,159],
[117,125,118,128,93,0,152,124,105,126,126,132,121,130,147],
[110,101,131,112,113,99,0,107,100,122,117,111,99,95,113],
[135,112,137,144,117,127,144,0,125,130,128,123,124,122,143],
[138,115,148,140,136,146,151,126,0,143,142,126,146,140,163],
[122,112,142,139,108,125,129,121,108,0,151,112,110,130,148],
[106,124,115,140,105,125,134,123,109,100,0,115,112,93,121],
[121,110,126,134,103,119,140,128,125,139,136,0,117,105,116],
[120,124,132,132,114,130,152,127,105,141,139,134,0,132,142],
[123,119,118,138,103,121,156,129,111,121,158,146,119,0,122],
[114,116,114,136,92,104,138,108,88,103,130,135,109,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 125, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,138,129,135,140,139,139,148,143,127,136,132,117,131],
[118,0,155,137,134,155,143,146,152,148,146,164,143,128,112],
[113,96,0,106,107,147,119,105,134,123,117,113,119,95,101],
[122,114,145,0,130,146,128,126,157,127,129,151,127,100,123],
[116,117,144,121,0,135,121,122,138,122,126,143,126,107,117],
[111,96,104,105,116,0,117,113,128,130,112,110,106,91,90],
[112,108,132,123,130,134,0,133,136,125,121,129,128,101,104],
[112,105,146,125,129,138,118,0,147,136,113,136,129,122,123],
[103,99,117,94,113,123,115,104,0,110,108,131,104,99,100],
[108,103,128,124,129,121,126,115,141,0,122,131,116,90,106],
[124,105,134,122,125,139,130,138,143,129,0,133,129,119,123],
[115,87,138,100,108,141,122,115,120,120,118,0,111,89,100],
[119,108,132,124,125,145,123,122,147,135,122,140,0,120,111],
[134,123,156,151,144,160,150,129,152,161,132,162,131,0,118],
[120,139,150,128,134,161,147,128,151,145,128,151,140,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 126, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,141,114,138,120,108,159,142,126,138,115,133,139,104],
[111,0,122,119,100,104,99,131,140,102,137,87,101,138,105],
[110,129,0,131,143,126,124,145,148,114,124,110,107,131,92],
[137,132,120,0,152,90,113,152,141,120,110,99,107,133,126],
[113,151,108,99,0,101,135,159,156,103,119,107,109,143,124],
[131,147,125,161,150,0,134,158,160,162,142,87,126,171,137],
[143,152,127,138,116,117,0,155,135,110,134,128,125,145,92],
[92,120,106,99,92,93,96,0,140,95,109,87,97,107,88],
[109,111,103,110,95,91,116,111,0,92,107,93,127,102,113],
[125,149,137,131,148,89,141,156,159,0,132,106,149,126,116],
[113,114,127,141,132,109,117,142,144,119,0,106,120,129,146],
[136,164,141,152,144,164,123,164,158,145,145,0,131,145,150],
[118,150,144,144,142,125,126,154,124,102,131,120,0,147,109],
[112,113,120,118,108,80,106,144,149,125,122,106,104,0,97],
[147,146,159,125,127,114,159,163,138,135,105,101,142,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 127, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,132,141,80,105,167,100,122,126,117,143,122,118,94],
[163,0,151,128,130,146,185,128,162,145,156,153,144,133,105],
[119,100,0,117,79,127,140,103,101,103,107,130,134,99,80],
[110,123,134,0,110,122,181,92,137,135,99,128,139,126,98],
[171,121,172,141,0,161,177,131,159,175,159,164,163,139,156],
[146,105,124,129,90,0,139,99,115,112,157,107,128,115,115],
[84,66,111,70,74,112,0,78,97,115,100,111,104,93,47],
[151,123,148,159,120,152,173,0,146,128,170,169,129,128,149],
[129,89,150,114,92,136,154,105,0,108,141,150,83,96,93],
[125,106,148,116,76,139,136,123,143,0,142,126,117,79,107],
[134,95,144,152,92,94,151,81,110,109,0,135,131,119,126],
[108,98,121,123,87,144,140,82,101,125,116,0,107,97,105],
[129,107,117,112,88,123,147,122,168,134,120,144,0,114,114],
[133,118,152,125,112,136,158,123,155,172,132,154,137,0,115],
[157,146,171,153,95,136,204,102,158,144,125,146,137,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 128, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,130,114,114,128,122,121,109,123,118,131,127,137,117],
[121,0,114,117,103,120,129,138,108,105,109,136,136,134,116],
[121,137,0,121,109,127,128,147,123,126,119,126,136,144,125],
[137,134,130,0,127,132,131,124,130,127,115,137,137,150,140],
[137,148,142,124,0,127,135,142,127,129,141,141,124,149,145],
[123,131,124,119,124,0,123,129,130,111,110,131,138,139,122],
[129,122,123,120,116,128,0,134,111,111,99,126,117,139,119],
[130,113,104,127,109,122,117,0,113,111,109,141,127,124,117],
[142,143,128,121,124,121,140,138,0,118,98,138,144,146,130],
[128,146,125,124,122,140,140,140,133,0,127,139,136,150,153],
[133,142,132,136,110,141,152,142,153,124,0,140,147,146,147],
[120,115,125,114,110,120,125,110,113,112,111,0,118,145,125],
[124,115,115,114,127,113,134,124,107,115,104,133,0,144,127],
[114,117,107,101,102,112,112,127,105,101,105,106,107,0,120],
[134,135,126,111,106,129,132,134,121,98,104,126,124,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 129, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,115,111,119,112,116,111,120,119,124,123,120,115,122],
[117,0,115,115,124,123,120,116,130,121,131,126,120,122,121],
[136,136,0,129,141,124,133,120,129,124,142,132,132,132,137],
[140,136,122,0,135,144,130,115,131,131,152,138,132,136,142],
[132,127,110,116,0,130,125,128,134,121,127,131,125,134,128],
[139,128,127,107,121,0,126,111,123,121,125,134,124,129,124],
[135,131,118,121,126,125,0,124,133,126,136,137,129,126,129],
[140,135,131,136,123,140,127,0,147,127,137,145,130,137,140],
[131,121,122,120,117,128,118,104,0,105,130,127,130,122,126],
[132,130,127,120,130,130,125,124,146,0,137,137,119,134,134],
[127,120,109,99,124,126,115,114,121,114,0,111,131,119,114],
[128,125,119,113,120,117,114,106,124,114,140,0,116,125,124],
[131,131,119,119,126,127,122,121,121,132,120,135,0,127,129],
[136,129,119,115,117,122,125,114,129,117,132,126,124,0,126],
[129,130,114,109,123,127,122,111,125,117,137,127,122,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 130, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,119,124,106,116,119,108,118,117,128,122,118,111,115],
[146,0,127,121,124,137,130,141,128,153,149,148,132,132,134],
[132,124,0,118,118,128,126,120,125,125,147,130,129,129,113],
[127,130,133,0,121,118,116,115,125,132,145,130,116,130,128],
[145,127,133,130,0,127,124,139,133,127,144,135,117,119,130],
[135,114,123,133,124,0,117,117,133,138,148,144,144,123,139],
[132,121,125,135,127,134,0,132,131,140,140,142,117,118,128],
[143,110,131,136,112,134,119,0,130,128,152,130,118,105,134],
[133,123,126,126,118,118,120,121,0,138,142,140,133,108,116],
[134,98,126,119,124,113,111,123,113,0,144,131,108,104,109],
[123,102,104,106,107,103,111,99,109,107,0,116,106,112,105],
[129,103,121,121,116,107,109,121,111,120,135,0,121,99,102],
[133,119,122,135,134,107,134,133,118,143,145,130,0,121,142],
[140,119,122,121,132,128,133,146,143,147,139,152,130,0,130],
[136,117,138,123,121,112,123,117,135,142,146,149,109,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 131, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,153,128,118,124,119,123,125,153,140,131,145,128,107],
[118,0,122,126,126,131,108,120,126,151,130,131,135,128,122],
[98,129,0,119,126,119,132,104,124,134,128,121,135,108,118],
[123,125,132,0,137,133,129,131,125,145,124,136,159,123,124],
[133,125,125,114,0,121,113,126,105,137,145,132,147,139,111],
[127,120,132,118,130,0,130,127,121,141,139,122,129,115,122],
[132,143,119,122,138,121,0,125,136,142,136,125,135,146,127],
[128,131,147,120,125,124,126,0,122,144,136,143,145,123,116],
[126,125,127,126,146,130,115,129,0,142,129,142,141,129,133],
[98,100,117,106,114,110,109,107,109,0,115,106,114,108,72],
[111,121,123,127,106,112,115,115,122,136,0,130,125,123,94],
[120,120,130,115,119,129,126,108,109,145,121,0,134,131,120],
[106,116,116,92,104,122,116,106,110,137,126,117,0,103,107],
[123,123,143,128,112,136,105,128,122,143,128,120,148,0,122],
[144,129,133,127,140,129,124,135,118,179,157,131,144,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 132, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,98,166,124,67,118,106,81,111,82,94,62,70,103],
[147,0,131,129,126,101,233,145,189,106,147,110,87,147,115],
[153,120,0,125,162,132,176,183,139,151,155,70,97,128,72],
[85,122,126,0,97,69,178,131,127,113,101,74,80,88,76],
[127,125,89,154,0,95,164,155,166,104,165,55,85,151,76],
[184,150,119,182,156,0,208,184,205,161,163,94,85,167,103],
[133,18,75,73,87,43,0,73,96,62,112,48,47,117,87],
[145,106,68,120,96,67,178,0,166,118,165,69,64,113,76],
[170,62,112,124,85,46,155,85,0,96,142,94,76,86,117],
[140,145,100,138,147,90,189,133,155,0,133,110,66,141,126],
[169,104,96,150,86,88,139,86,109,118,0,95,76,114,76],
[157,141,181,177,196,157,203,182,157,141,156,0,64,141,101],
[189,164,154,171,166,166,204,187,175,185,175,187,0,189,101],
[181,104,123,163,100,84,134,138,165,110,137,110,62,0,128],
[148,136,179,175,175,148,164,175,134,125,175,150,150,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 133, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,134,123,136,116,122,123,144,114,127,118,132,134,129],
[106,0,97,102,103,86,119,77,135,105,121,102,119,116,99],
[117,154,0,124,127,127,124,133,145,131,135,129,139,125,146],
[128,149,127,0,142,111,155,133,139,147,132,131,132,141,127],
[115,148,124,109,0,112,125,119,142,109,115,125,121,130,122],
[135,165,124,140,139,0,142,125,145,137,155,160,141,137,139],
[129,132,127,96,126,109,0,120,138,123,138,134,123,135,121],
[128,174,118,118,132,126,131,0,155,135,138,131,140,130,139],
[107,116,106,112,109,106,113,96,0,111,105,110,104,121,116],
[137,146,120,104,142,114,128,116,140,0,144,130,120,130,136],
[124,130,116,119,136,96,113,113,146,107,0,108,125,123,133],
[133,149,122,120,126,91,117,120,141,121,143,0,129,122,118],
[119,132,112,119,130,110,128,111,147,131,126,122,0,122,127],
[117,135,126,110,121,114,116,121,130,121,128,129,129,0,113],
[122,152,105,124,129,112,130,112,135,115,118,133,124,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 134, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,113,115,125,112,128,117,124,119,113,117,114,119,115],
[135,0,150,126,142,129,128,120,140,133,132,124,117,127,123],
[138,101,0,116,112,128,136,118,125,124,126,116,117,117,112],
[136,125,135,0,129,134,137,112,126,124,133,130,132,134,121],
[126,109,139,122,0,134,131,110,124,131,133,118,107,125,118],
[139,122,123,117,117,0,134,113,122,110,111,122,118,118,111],
[123,123,115,114,120,117,0,109,128,117,131,109,113,125,107],
[134,131,133,139,141,138,142,0,143,147,136,123,117,144,127],
[127,111,126,125,127,129,123,108,0,119,133,120,103,116,103],
[132,118,127,127,120,141,134,104,132,0,137,126,120,113,108],
[138,119,125,118,118,140,120,115,118,114,0,125,125,118,125],
[134,127,135,121,133,129,142,128,131,125,126,0,126,124,118],
[137,134,134,119,144,133,138,134,148,131,126,125,0,133,120],
[132,124,134,117,126,133,126,107,135,138,133,127,118,0,115],
[136,128,139,130,133,140,144,124,148,143,126,133,131,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 135, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,122,121,130,135,128,111,129,129,128,112,105,130,112],
[134,0,136,109,137,137,135,118,109,134,127,106,108,124,110],
[129,115,0,116,133,124,119,98,117,111,125,91,103,112,99],
[130,142,135,0,141,135,120,120,129,132,126,112,116,135,114],
[121,114,118,110,0,136,134,118,127,130,127,123,118,140,112],
[116,114,127,116,115,0,133,105,103,114,138,98,118,120,102],
[123,116,132,131,117,118,0,126,103,131,140,115,111,134,112],
[140,133,153,131,133,146,125,0,138,144,144,127,141,135,121],
[122,142,134,122,124,148,148,113,0,138,147,128,126,137,121],
[122,117,140,119,121,137,120,107,113,0,141,102,111,128,109],
[123,124,126,125,124,113,111,107,104,110,0,110,104,121,96],
[139,145,160,139,128,153,136,124,123,149,141,0,142,146,111],
[146,143,148,135,133,133,140,110,125,140,147,109,0,148,126],
[121,127,139,116,111,131,117,116,114,123,130,105,103,0,106],
[139,141,152,137,139,149,139,130,130,142,155,140,125,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 136, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,132,128,124,116,132,122,124,122,121,120,115,143,117],
[119,0,118,123,120,128,115,121,119,116,128,120,113,135,113],
[119,133,0,125,129,122,121,122,119,128,125,115,131,133,115],
[123,128,126,0,134,134,120,120,117,124,126,107,124,137,120],
[127,131,122,117,0,125,134,122,127,123,123,110,117,126,120],
[135,123,129,117,126,0,116,118,120,124,131,102,116,126,117],
[119,136,130,131,117,135,0,121,125,121,130,122,125,137,121],
[129,130,129,131,129,133,130,0,121,130,132,130,136,134,133],
[127,132,132,134,124,131,126,130,0,126,122,113,117,131,119],
[129,135,123,127,128,127,130,121,125,0,135,123,125,133,136],
[130,123,126,125,128,120,121,119,129,116,0,115,121,132,128],
[131,131,136,144,141,149,129,121,138,128,136,0,131,140,128],
[136,138,120,127,134,135,126,115,134,126,130,120,0,130,127],
[108,116,118,114,125,125,114,117,120,118,119,111,121,0,117],
[134,138,136,131,131,134,130,118,132,115,123,123,124,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 137, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,132,134,132,132,135,145,141,123,145,128,130,119,135],
[115,0,116,124,118,125,121,136,129,115,134,123,121,128,134],
[119,135,0,131,134,130,134,139,137,132,133,128,134,136,142],
[117,127,120,0,126,133,128,125,132,119,137,126,120,119,120],
[119,133,117,125,0,141,135,147,135,127,125,120,136,129,125],
[119,126,121,118,110,0,119,140,125,113,121,117,127,114,125],
[116,130,117,123,116,132,0,139,125,119,140,118,132,129,127],
[106,115,112,126,104,111,112,0,117,110,126,112,115,115,125],
[110,122,114,119,116,126,126,134,0,117,129,123,119,122,126],
[128,136,119,132,124,138,132,141,134,0,129,131,127,123,136],
[106,117,118,114,126,130,111,125,122,122,0,115,120,120,122],
[123,128,123,125,131,134,133,139,128,120,136,0,129,121,125],
[121,130,117,131,115,124,119,136,132,124,131,122,0,120,129],
[132,123,115,132,122,137,122,136,129,128,131,130,131,0,129],
[116,117,109,131,126,126,124,126,125,115,129,126,122,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 138, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,134,129,154,126,140,114,112,130,95,154,133,161,132],
[121,0,140,140,168,167,146,120,122,162,106,157,144,181,126],
[117,111,0,144,157,157,137,108,96,151,142,163,148,146,164],
[122,111,107,0,148,115,136,132,95,151,95,124,121,167,121],
[97,83,94,103,0,105,120,104,89,111,81,128,109,126,118],
[125,84,94,136,146,0,149,103,110,143,114,143,149,150,143],
[111,105,114,115,131,102,0,101,95,131,120,121,134,133,125],
[137,131,143,119,147,148,150,0,150,159,116,163,131,150,150],
[139,129,155,156,162,141,156,101,0,162,122,165,159,173,152],
[121,89,100,100,140,108,120,92,89,0,90,137,103,151,138],
[156,145,109,156,170,137,131,135,129,161,0,154,141,148,164],
[97,94,88,127,123,108,130,88,86,114,97,0,102,104,103],
[118,107,103,130,142,102,117,120,92,148,110,149,0,124,124],
[90,70,105,84,125,101,118,101,78,100,103,147,127,0,104],
[119,125,87,130,133,108,126,101,99,113,87,148,127,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 139, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,114,134,137,138,140,132,155,141,130,131,132,126,157],
[115,0,124,124,120,122,145,113,125,127,124,112,115,115,126],
[137,127,0,124,138,137,134,133,155,121,112,138,125,125,149],
[117,127,127,0,133,136,142,130,128,134,126,127,133,125,138],
[114,131,113,118,0,122,124,101,127,109,113,112,108,122,139],
[113,129,114,115,129,0,132,120,134,108,126,128,121,109,112],
[111,106,117,109,127,119,0,120,120,122,106,132,134,118,121],
[119,138,118,121,150,131,131,0,146,126,134,119,135,131,139],
[96,126,96,123,124,117,131,105,0,116,120,115,112,106,135],
[110,124,130,117,142,143,129,125,135,0,119,111,129,127,138],
[121,127,139,125,138,125,145,117,131,132,0,135,138,129,134],
[120,139,113,124,139,123,119,132,136,140,116,0,130,122,118],
[119,136,126,118,143,130,117,116,139,122,113,121,0,127,147],
[125,136,126,126,129,142,133,120,145,124,122,129,124,0,117],
[94,125,102,113,112,139,130,112,116,113,117,133,104,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 140, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,117,128,153,152,132,104,92,168,251,105,191,142,206],
[37,0,68,95,35,129,22,48,84,50,126,64,58,8,72],
[134,183,0,104,151,159,107,137,121,161,228,111,151,134,121],
[123,156,147,0,159,159,124,118,124,137,196,120,191,110,198],
[98,216,100,92,0,94,84,71,84,160,177,88,164,110,194],
[99,122,92,92,157,0,62,93,108,112,166,88,120,85,122],
[119,229,144,127,167,189,0,144,111,159,189,119,168,117,167],
[147,203,114,133,180,158,107,0,134,179,180,142,203,107,180],
[159,167,130,127,167,143,140,117,0,135,213,156,167,140,167],
[83,201,90,114,91,139,92,72,116,0,201,110,77,147,91],
[0,125,23,55,74,85,62,71,38,50,0,88,55,101,47],
[146,187,140,131,163,163,132,109,95,141,163,0,164,118,163],
[60,193,100,60,87,131,83,48,84,174,196,87,0,115,100],
[109,243,117,141,141,166,134,144,111,104,150,133,136,0,164],
[45,179,130,53,57,129,84,71,84,160,204,88,151,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 141, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,121,141,124,139,160,121,142,150,127,144,141,122,140],
[109,0,106,113,121,119,146,127,125,131,104,154,118,125,111],
[130,145,0,132,118,143,136,124,134,142,134,150,131,127,145],
[110,138,119,0,116,135,145,112,134,132,133,121,135,125,138],
[127,130,133,135,0,116,139,101,125,148,119,124,135,112,142],
[112,132,108,116,135,0,124,121,123,135,96,132,123,114,142],
[91,105,115,106,112,127,0,100,112,135,112,113,108,113,108],
[130,124,127,139,150,130,151,0,144,141,138,131,141,134,153],
[109,126,117,117,126,128,139,107,0,156,114,135,122,130,128],
[101,120,109,119,103,116,116,110,95,0,110,137,127,112,126],
[124,147,117,118,132,155,139,113,137,141,0,132,152,133,141],
[107,97,101,130,127,119,138,120,116,114,119,0,133,109,139],
[110,133,120,116,116,128,143,110,129,124,99,118,0,119,148],
[129,126,124,126,139,137,138,117,121,139,118,142,132,0,132],
[111,140,106,113,109,109,143,98,123,125,110,112,103,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 142, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,195,56,94,150,150,150,150,157,94,101,150,150,56],
[0,0,101,0,94,0,94,0,94,0,94,0,0,0,56],
[56,150,0,56,150,56,150,150,150,56,94,0,150,150,56],
[195,251,195,0,195,251,150,94,251,101,94,101,150,94,157],
[157,157,101,56,0,56,150,56,150,157,0,101,56,56,56],
[101,251,195,0,195,0,150,94,251,101,94,101,150,94,157],
[101,157,101,101,101,101,0,101,101,101,101,101,157,101,157],
[101,251,101,157,195,157,150,0,251,157,94,101,56,56,157],
[101,157,101,0,101,0,150,0,0,101,0,101,56,0,56],
[94,251,195,150,94,150,150,94,150,0,94,0,150,94,56],
[157,157,157,157,251,157,150,157,251,157,0,101,56,56,157],
[150,251,251,150,150,150,150,150,150,251,150,0,150,150,56],
[101,251,101,101,195,101,94,195,195,101,195,101,0,101,157],
[101,251,101,157,195,157,150,195,251,157,195,101,150,0,157],
[195,195,195,94,195,94,94,94,195,195,94,195,94,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 143, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,124,117,131,116,119,127,130,120,130,116,110,131,130],
[113,0,123,121,121,120,111,131,134,108,121,113,102,123,129],
[127,128,0,128,122,124,109,127,136,118,128,125,126,119,132],
[134,130,123,0,127,128,115,133,139,110,126,108,117,129,123],
[120,130,129,124,0,122,116,125,138,113,142,115,115,133,136],
[135,131,127,123,129,0,118,133,130,118,129,116,115,128,145],
[132,140,142,136,135,133,0,135,151,115,140,125,126,132,147],
[124,120,124,118,126,118,116,0,136,118,113,109,107,126,133],
[121,117,115,112,113,121,100,115,0,104,116,99,113,125,124],
[131,143,133,141,138,133,136,133,147,0,142,122,137,140,138],
[121,130,123,125,109,122,111,138,135,109,0,111,114,125,126],
[135,138,126,143,136,135,126,142,152,129,140,0,125,140,138],
[141,149,125,134,136,136,125,144,138,114,137,126,0,131,137],
[120,128,132,122,118,123,119,125,126,111,126,111,120,0,127],
[121,122,119,128,115,106,104,118,127,113,125,113,114,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 144, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,132,112,154,90,129,125,135,113,148,111,136,136,153],
[168,0,158,128,170,123,136,160,132,164,156,153,152,178,159],
[119,93,0,107,119,131,99,136,124,133,119,117,138,142,136],
[139,123,144,0,145,120,125,141,130,151,138,127,136,141,119],
[97,81,132,106,0,101,83,123,112,128,134,103,132,126,123],
[161,128,120,131,150,0,131,137,128,149,128,126,154,149,147],
[122,115,152,126,168,120,0,149,132,150,144,136,146,153,155],
[126,91,115,110,128,114,102,0,126,121,139,102,138,135,138],
[116,119,127,121,139,123,119,125,0,131,102,117,146,127,132],
[138,87,118,100,123,102,101,130,120,0,118,109,117,124,126],
[103,95,132,113,117,123,107,112,149,133,0,109,131,142,115],
[140,98,134,124,148,125,115,149,134,142,142,0,135,148,137],
[115,99,113,115,119,97,105,113,105,134,120,116,0,131,135],
[115,73,109,110,125,102,98,116,124,127,109,103,120,0,109],
[98,92,115,132,128,104,96,113,119,125,136,114,116,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 145, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,133,129,108,145,141,137,129,142,111,133,142,151,109],
[133,0,145,138,139,156,126,135,130,123,121,139,153,154,137],
[118,106,0,126,109,119,111,106,129,118,118,123,136,120,121],
[122,113,125,0,118,141,125,129,115,123,117,118,148,120,137],
[143,112,142,133,0,143,127,139,117,131,112,145,166,152,141],
[106,95,132,110,108,0,112,102,100,114,105,120,103,125,110],
[110,125,140,126,124,139,0,99,110,131,124,128,156,143,129],
[114,116,145,122,112,149,152,0,130,130,122,124,133,144,137],
[122,121,122,136,134,151,141,121,0,136,128,126,132,151,119],
[109,128,133,128,120,137,120,121,115,0,109,138,130,122,127],
[140,130,133,134,139,146,127,129,123,142,0,139,147,146,137],
[118,112,128,133,106,131,123,127,125,113,112,0,142,129,130],
[109,98,115,103,85,148,95,118,119,121,104,109,0,121,117],
[100,97,131,131,99,126,108,107,100,129,105,122,130,0,103],
[142,114,130,114,110,141,122,114,132,124,114,121,134,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 146, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,138,117,122,140,117,138,139,127,122,128,125,114,115],
[114,0,122,121,114,105,94,127,121,108,105,114,117,112,108],
[113,129,0,109,121,128,98,127,116,107,131,115,119,112,97],
[134,130,142,0,115,129,113,144,137,129,124,122,123,120,107],
[129,137,130,136,0,131,119,140,134,126,120,130,126,118,109],
[111,146,123,122,120,0,104,130,126,134,125,126,109,122,126],
[134,157,153,138,132,147,0,150,144,142,130,129,139,139,124],
[113,124,124,107,111,121,101,0,125,117,114,112,99,120,96],
[112,130,135,114,117,125,107,126,0,128,137,122,116,116,104],
[124,143,144,122,125,117,109,134,123,0,131,117,114,116,109],
[129,146,120,127,131,126,121,137,114,120,0,134,117,128,117],
[123,137,136,129,121,125,122,139,129,134,117,0,137,129,118],
[126,134,132,128,125,142,112,152,135,137,134,114,0,125,109],
[137,139,139,131,133,129,112,131,135,135,123,122,126,0,111],
[136,143,154,144,142,125,127,155,147,142,134,133,142,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 147, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,86,119,89,43,167,88,88,154,154,112,116,92,153],
[94,0,50,109,86,40,90,127,14,39,80,75,71,61,114],
[165,201,0,169,164,151,165,164,129,145,224,165,167,98,158],
[132,142,82,0,51,39,127,97,52,119,155,80,75,101,128],
[162,165,87,200,0,94,170,168,129,122,158,158,130,94,159],
[208,211,100,212,157,0,202,203,164,118,118,133,130,145,133],
[84,161,86,124,81,49,0,151,1,116,118,118,123,50,116],
[163,124,87,154,83,48,100,0,44,122,164,118,84,12,124],
[163,237,122,199,122,87,250,207,0,122,124,157,165,130,158],
[97,212,106,132,129,133,135,129,129,0,193,97,132,133,133],
[97,171,27,96,93,133,133,87,127,58,0,96,58,62,97],
[139,176,86,171,93,118,133,133,94,154,155,0,79,142,168],
[135,180,84,176,121,121,128,167,86,119,193,172,0,99,129],
[159,190,153,150,157,106,201,239,121,118,189,109,152,0,188],
[98,137,93,123,92,118,135,127,93,118,154,83,122,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 148, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,123,143,122,126,137,137,132,129,126,148,138,124,137],
[129,0,126,130,112,111,128,137,122,133,135,143,124,126,122],
[128,125,0,146,131,126,141,141,136,150,141,147,138,142,132],
[108,121,105,0,114,108,119,129,119,125,118,130,123,120,119],
[129,139,120,137,0,122,136,138,123,126,125,142,129,120,126],
[125,140,125,143,129,0,145,147,139,145,147,162,156,145,144],
[114,123,110,132,115,106,0,123,122,122,113,127,125,120,127],
[114,114,110,122,113,104,128,0,119,120,121,129,125,117,123],
[119,129,115,132,128,112,129,132,0,138,125,139,132,125,134],
[122,118,101,126,125,106,129,131,113,0,130,133,133,119,115],
[125,116,110,133,126,104,138,130,126,121,0,141,127,117,128],
[103,108,104,121,109,89,124,122,112,118,110,0,115,122,112],
[113,127,113,128,122,95,126,126,119,118,124,136,0,124,127],
[127,125,109,131,131,106,131,134,126,132,134,129,127,0,121],
[114,129,119,132,125,107,124,128,117,136,123,139,124,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 149, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,111,119,116,138,98,94,114,126,124,85,95,100,122],
[131,0,124,157,132,159,142,85,161,152,121,111,132,140,119],
[140,127,0,127,96,142,80,68,143,75,134,110,84,128,113],
[132,94,124,0,100,136,102,66,107,117,106,95,110,109,105],
[135,119,155,151,0,168,111,140,173,117,119,113,118,120,100],
[113,92,109,115,83,0,82,77,134,123,126,108,99,137,123],
[153,109,171,149,140,169,0,98,158,107,125,136,121,130,137],
[157,166,183,185,111,174,153,0,169,152,143,123,129,156,162],
[137,90,108,144,78,117,93,82,0,102,84,72,94,99,93],
[125,99,176,134,134,128,144,99,149,0,102,131,115,160,124],
[127,130,117,145,132,125,126,108,167,149,0,87,121,153,136],
[166,140,141,156,138,143,115,128,179,120,164,0,119,155,139],
[156,119,167,141,133,152,130,122,157,136,130,132,0,113,140],
[151,111,123,142,131,114,121,95,152,91,98,96,138,0,115],
[129,132,138,146,151,128,114,89,158,127,115,112,111,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 150, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,121,125,106,117,143,117,122,118,125,115,118,126,112],
[135,0,124,129,122,123,140,123,132,133,124,128,119,127,123],
[130,127,0,126,122,109,130,128,130,111,123,118,118,123,116],
[126,122,125,0,123,124,130,123,124,119,127,125,111,121,115],
[145,129,129,128,0,130,136,127,129,135,131,130,123,135,121],
[134,128,142,127,121,0,140,137,129,133,129,125,131,135,126],
[108,111,121,121,115,111,0,108,115,108,117,114,112,110,114],
[134,128,123,128,124,114,143,0,134,124,134,128,126,125,124],
[129,119,121,127,122,122,136,117,0,117,128,122,123,121,130],
[133,118,140,132,116,118,143,127,134,0,121,117,112,130,119],
[126,127,128,124,120,122,134,117,123,130,0,120,125,125,119],
[136,123,133,126,121,126,137,123,129,134,131,0,127,120,127],
[133,132,133,140,128,120,139,125,128,139,126,124,0,132,120],
[125,124,128,130,116,116,141,126,130,121,126,131,119,0,117],
[139,128,135,136,130,125,137,127,121,132,132,124,131,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 151, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,122,139,126,119,123,120,126,136,137,130,129,127,122],
[138,0,133,138,130,132,141,123,137,153,128,131,139,139,125],
[129,118,0,126,105,122,128,113,116,125,124,120,131,115,120],
[112,113,125,0,112,113,118,111,110,121,124,112,121,116,112],
[125,121,146,139,0,135,125,116,128,132,129,126,142,136,128],
[132,119,129,138,116,0,128,132,131,131,131,127,121,128,124],
[128,110,123,133,126,123,0,121,121,135,119,118,132,127,121],
[131,128,138,140,135,119,130,0,134,136,129,113,133,129,133],
[125,114,135,141,123,120,130,117,0,140,136,120,133,131,117],
[115,98,126,130,119,120,116,115,111,0,120,115,121,128,119],
[114,123,127,127,122,120,132,122,115,131,0,115,125,121,118],
[121,120,131,139,125,124,133,138,131,136,136,0,134,126,129],
[122,112,120,130,109,130,119,118,118,130,126,117,0,121,121],
[124,112,136,135,115,123,124,122,120,123,130,125,130,0,123],
[129,126,131,139,123,127,130,118,134,132,133,122,130,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 152, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,78,58,87,59,134,80,117,74,115,153,140,79,117],
[192,0,121,102,111,103,159,109,157,93,164,187,153,132,137],
[173,130,0,96,109,142,140,100,161,96,170,194,165,124,122],
[193,149,155,0,174,119,166,133,195,153,175,186,215,174,178],
[164,140,142,77,0,121,167,80,137,126,113,193,157,98,117],
[192,148,109,132,130,0,115,110,159,98,124,168,131,166,148],
[117,92,111,85,84,136,0,66,123,113,159,178,125,90,125],
[171,142,151,118,171,141,185,0,117,182,204,220,202,169,148],
[134,94,90,56,114,92,128,134,0,120,174,128,150,100,96],
[177,158,155,98,125,153,138,69,131,0,146,172,184,159,115],
[136,87,81,76,138,127,92,47,77,105,0,161,103,111,115],
[98,64,57,65,58,83,73,31,123,79,90,0,113,92,76],
[111,98,86,36,94,120,126,49,101,67,148,138,0,109,87],
[172,119,127,77,153,85,161,82,151,92,140,159,142,0,135],
[134,114,129,73,134,103,126,103,155,136,136,175,164,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 153, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,125,128,113,131,137,136,118,143,129,112,123,127,123],
[132,0,135,150,114,135,134,133,137,140,134,103,126,137,123],
[126,116,0,131,115,114,129,131,134,116,126,104,116,126,122],
[123,101,120,0,98,110,115,115,124,105,110,101,104,108,102],
[138,137,136,153,0,115,138,131,140,152,135,115,131,131,129],
[120,116,137,141,136,0,120,113,140,129,120,112,123,123,117],
[114,117,122,136,113,131,0,117,131,132,124,113,121,131,123],
[115,118,120,136,120,138,134,0,123,130,121,103,114,109,113],
[133,114,117,127,111,111,120,128,0,121,118,116,110,104,120],
[108,111,135,146,99,122,119,121,130,0,129,101,113,112,125],
[122,117,125,141,116,131,127,130,133,122,0,96,120,118,109],
[139,148,147,150,136,139,138,148,135,150,155,0,124,140,135],
[128,125,135,147,120,128,130,137,141,138,131,127,0,123,126],
[124,114,125,143,120,128,120,142,147,139,133,111,128,0,134],
[128,128,129,149,122,134,128,138,131,126,142,116,125,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 154, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,127,97,153,91,99,128,109,101,119,118,117,104,104],
[116,0,119,95,130,108,98,125,76,96,116,112,86,118,91],
[124,132,0,109,125,106,96,153,92,118,122,123,115,116,88],
[154,156,142,0,180,124,146,141,128,122,150,148,119,129,128],
[98,121,126,71,0,79,88,93,98,78,114,96,82,100,101],
[160,143,145,127,172,0,114,158,113,119,106,118,163,122,140],
[152,153,155,105,163,137,0,183,123,121,173,150,137,118,111],
[123,126,98,110,158,93,68,0,106,112,125,102,123,88,95],
[142,175,159,123,153,138,128,145,0,138,148,143,139,155,100],
[150,155,133,129,173,132,130,139,113,0,151,133,122,123,122],
[132,135,129,101,137,145,78,126,103,100,0,131,101,129,126],
[133,139,128,103,155,133,101,149,108,118,120,0,114,93,128],
[134,165,136,132,169,88,114,128,112,129,150,137,0,128,117],
[147,133,135,122,151,129,133,163,96,128,122,158,123,0,131],
[147,160,163,123,150,111,140,156,151,129,125,123,134,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 155, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,134,132,135,147,137,128,124,138,131,135,153,146,133],
[120,0,124,128,125,123,127,128,126,128,124,131,139,134,124],
[117,127,0,134,126,136,125,130,123,123,128,126,139,143,115],
[119,123,117,0,125,136,125,136,116,131,138,124,132,138,113],
[116,126,125,126,0,132,123,143,118,141,128,119,139,133,125],
[104,128,115,115,119,0,114,110,103,115,116,117,123,123,108],
[114,124,126,126,128,137,0,121,123,133,128,125,141,140,116],
[123,123,121,115,108,141,130,0,117,128,131,127,135,136,130],
[127,125,128,135,133,148,128,134,0,132,126,130,138,145,132],
[113,123,128,120,110,136,118,123,119,0,118,123,137,125,123],
[120,127,123,113,123,135,123,120,125,133,0,121,128,132,116],
[116,120,125,127,132,134,126,124,121,128,130,0,130,136,121],
[98,112,112,119,112,128,110,116,113,114,123,121,0,121,109],
[105,117,108,113,118,128,111,115,106,126,119,115,130,0,106],
[118,127,136,138,126,143,135,121,119,128,135,130,142,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 156, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,104,108,164,118,139,189,128,111,120,73,127,125,141],
[107,0,57,104,96,78,82,139,82,122,96,52,109,85,77],
[147,194,0,169,167,120,125,179,158,160,128,130,117,165,174],
[143,147,82,0,118,127,112,157,138,141,105,97,122,138,143],
[87,155,84,133,0,69,117,111,130,84,105,97,82,112,131],
[133,173,131,124,182,0,147,168,156,169,147,134,128,156,176],
[112,169,126,139,134,104,0,142,145,140,109,114,88,120,154],
[62,112,72,94,140,83,109,0,98,89,110,83,71,142,97],
[123,169,93,113,121,95,106,153,0,130,127,127,133,165,133],
[140,129,91,110,167,82,111,162,121,0,133,84,124,106,163],
[131,155,123,146,146,104,142,141,124,118,0,127,137,149,153],
[178,199,121,154,154,117,137,168,124,167,124,0,138,122,110],
[124,142,134,129,169,123,163,180,118,127,114,113,0,148,168],
[126,166,86,113,139,95,131,109,86,145,102,129,103,0,133],
[110,174,77,108,120,75,97,154,118,88,98,141,83,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 157, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,117,123,126,125,128,128,104,127,128,123,123,119,123],
[141,0,134,131,132,127,148,128,126,135,141,131,131,130,124],
[134,117,0,123,119,127,129,138,106,124,127,147,120,122,126],
[128,120,128,0,120,116,135,139,121,132,148,135,127,121,141],
[125,119,132,131,0,112,130,133,116,125,144,130,125,121,125],
[126,124,124,135,139,0,142,135,123,142,153,142,136,135,128],
[123,103,122,116,121,109,0,125,121,136,136,115,121,119,116],
[123,123,113,112,118,116,126,0,121,134,140,142,111,114,130],
[147,125,145,130,135,128,130,130,0,147,153,146,138,139,128],
[124,116,127,119,126,109,115,117,104,0,147,132,122,128,124],
[123,110,124,103,107,98,115,111,98,104,0,118,107,129,124],
[128,120,104,116,121,109,136,109,105,119,133,0,117,128,114],
[128,120,131,124,126,115,130,140,113,129,144,134,0,126,126],
[132,121,129,130,130,116,132,137,112,123,122,123,125,0,117],
[128,127,125,110,126,123,135,121,123,127,127,137,125,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 158, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,155,192,205,136,104,131,112,112,75,176,77,77,128],
[123,0,123,123,200,123,64,123,123,112,142,192,112,123,158],
[96,128,0,157,181,112,104,59,29,93,75,128,93,88,139],
[59,128,94,0,216,94,107,94,94,131,75,128,96,59,110],
[46,51,70,35,0,70,99,64,64,99,81,75,83,46,99],
[115,128,139,157,181,0,69,144,48,181,75,144,112,144,110],
[147,187,147,144,152,182,0,147,176,147,163,147,67,147,158],
[120,128,192,157,187,107,104,0,53,99,70,80,88,83,139],
[139,128,222,157,187,203,75,198,0,187,115,163,64,163,129],
[139,139,158,120,152,70,104,152,64,0,70,123,72,104,115],
[176,109,176,176,170,176,88,181,136,181,0,192,136,152,112],
[75,59,123,123,176,107,104,171,88,128,59,0,88,88,152],
[174,139,158,155,168,139,184,163,187,179,115,163,0,99,110],
[174,128,163,192,205,107,104,168,88,147,99,163,152,0,147],
[123,93,112,141,152,141,93,112,122,136,139,99,141,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 159, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,144,131,126,134,136,136,147,148,133,140,155,142,115],
[112,0,125,111,114,125,113,104,131,144,115,118,112,129,104],
[107,126,0,82,114,118,102,111,126,128,122,136,111,116,105],
[120,140,169,0,157,150,128,162,157,166,141,159,135,153,140],
[125,137,137,94,0,125,117,110,125,128,115,131,115,83,121],
[117,126,133,101,126,0,101,128,126,149,115,122,113,87,127],
[115,138,149,123,134,150,0,137,136,167,143,122,151,114,142],
[115,147,140,89,141,123,114,0,113,169,138,158,118,128,110],
[104,120,125,94,126,125,115,138,0,146,107,133,129,106,125],
[103,107,123,85,123,102,84,82,105,0,114,109,113,96,89],
[118,136,129,110,136,136,108,113,144,137,0,140,114,121,106],
[111,133,115,92,120,129,129,93,118,142,111,0,114,102,122],
[96,139,140,116,136,138,100,133,122,138,137,137,0,129,130],
[109,122,135,98,168,164,137,123,145,155,130,149,122,0,132],
[136,147,146,111,130,124,109,141,126,162,145,129,121,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 160, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,124,121,137,140,127,137,138,140,135,148,139,146,120],
[111,0,115,99,112,112,102,124,116,119,109,124,108,112,114],
[127,136,0,118,131,121,127,121,140,124,143,136,132,136,132],
[130,152,133,0,144,137,119,149,127,128,134,140,131,135,121],
[114,139,120,107,0,116,116,122,125,125,128,125,114,128,120],
[111,139,130,114,135,0,123,143,129,124,118,129,128,121,107],
[124,149,124,132,135,128,0,128,134,137,139,136,127,143,129],
[114,127,130,102,129,108,123,0,125,130,136,127,124,125,125],
[113,135,111,124,126,122,117,126,0,118,112,119,111,127,115],
[111,132,127,123,126,127,114,121,133,0,125,117,115,116,112],
[116,142,108,117,123,133,112,115,139,126,0,124,117,123,116],
[103,127,115,111,126,122,115,124,132,134,127,0,126,119,117],
[112,143,119,120,137,123,124,127,140,136,134,125,0,146,135],
[105,139,115,116,123,130,108,126,124,135,128,132,105,0,124],
[131,137,119,130,131,144,122,126,136,139,135,134,116,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 161, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,124,137,122,126,125,128,122,128,131,135,127,135,139],
[113,0,107,113,112,128,105,114,108,119,114,128,127,117,116],
[127,144,0,119,124,130,114,131,118,132,123,130,127,126,122],
[114,138,132,0,130,125,111,131,120,130,127,134,135,124,134],
[129,139,127,121,0,138,127,134,127,132,126,134,132,124,134],
[125,123,121,126,113,0,111,129,124,119,131,128,122,128,129],
[126,146,137,140,124,140,0,143,131,137,142,141,130,146,140],
[123,137,120,120,117,122,108,0,116,119,128,126,125,129,128],
[129,143,133,131,124,127,120,135,0,137,141,135,134,128,130],
[123,132,119,121,119,132,114,132,114,0,125,136,124,128,121],
[120,137,128,124,125,120,109,123,110,126,0,130,125,129,128],
[116,123,121,117,117,123,110,125,116,115,121,0,125,126,127],
[124,124,124,116,119,129,121,126,117,127,126,126,0,136,124],
[116,134,125,127,127,123,105,122,123,123,122,125,115,0,128],
[112,135,129,117,117,122,111,123,121,130,123,124,127,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 162, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,81,107,84,88,50,105,75,78,82,90,58,47,102],
[156,0,132,149,151,166,76,131,108,167,133,149,136,100,162],
[170,119,0,162,123,149,94,157,109,131,145,127,120,127,140],
[144,102,89,0,121,97,79,114,92,134,107,145,100,109,115],
[167,100,128,130,0,105,58,96,135,100,96,130,115,95,147],
[163,85,102,154,146,0,78,124,80,105,131,130,98,90,106],
[201,175,157,172,193,173,0,170,120,183,203,124,184,143,191],
[146,120,94,137,155,127,81,0,121,138,113,103,134,94,139],
[176,143,142,159,116,171,131,130,0,147,134,150,156,101,115],
[173,84,120,117,151,146,68,113,104,0,117,118,71,115,119],
[169,118,106,144,155,120,48,138,117,134,0,153,114,90,132],
[161,102,124,106,121,121,127,148,101,133,98,0,80,96,126],
[193,115,131,151,136,153,67,117,95,180,137,171,0,101,115],
[204,151,124,142,156,161,108,157,150,136,161,155,150,0,171],
[149,89,111,136,104,145,60,112,136,132,119,125,136,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 163, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,128,184,89,73,118,133,144,123,106,93,126,94,53],
[73,0,54,122,63,53,123,75,79,99,65,65,131,60,67],
[123,197,0,157,117,74,108,114,98,94,97,122,116,117,86],
[67,129,94,0,76,92,68,53,97,50,57,58,77,45,87],
[162,188,134,175,0,130,164,161,164,145,146,116,153,145,172],
[178,198,177,159,121,0,127,70,151,109,106,94,116,128,102],
[133,128,143,183,87,124,0,102,120,101,119,164,82,83,77],
[118,176,137,198,90,181,149,0,135,134,71,177,99,92,128],
[107,172,153,154,87,100,131,116,0,83,148,107,149,99,86],
[128,152,157,201,106,142,150,117,168,0,149,188,186,83,146],
[145,186,154,194,105,145,132,180,103,102,0,165,96,107,135],
[158,186,129,193,135,157,87,74,144,63,86,0,66,97,106],
[125,120,135,174,98,135,169,152,102,65,155,185,0,69,129],
[157,191,134,206,106,123,168,159,152,168,144,154,182,0,142],
[198,184,165,164,79,149,174,123,165,105,116,145,122,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 164, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,124,128,138,135,130,134,138,130,135,135,121,135,128],
[114,0,112,121,120,125,120,131,121,135,129,132,126,119,125],
[127,139,0,142,138,125,130,133,127,135,128,142,128,129,134],
[123,130,109,0,133,125,124,125,125,132,119,136,133,123,124],
[113,131,113,118,0,123,126,124,119,119,124,123,124,125,126],
[116,126,126,126,128,0,127,138,125,126,123,133,137,122,130],
[121,131,121,127,125,124,0,131,133,137,125,134,119,122,132],
[117,120,118,126,127,113,120,0,116,122,115,117,122,114,124],
[113,130,124,126,132,126,118,135,0,137,126,133,129,133,128],
[121,116,116,119,132,125,114,129,114,0,123,133,115,118,117],
[116,122,123,132,127,128,126,136,125,128,0,133,125,115,138],
[116,119,109,115,128,118,117,134,118,118,118,0,121,124,126],
[130,125,123,118,127,114,132,129,122,136,126,130,0,125,124],
[116,132,122,128,126,129,129,137,118,133,136,127,126,0,119],
[123,126,117,127,125,121,119,127,123,134,113,125,127,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 165, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,229,147,152,171,120,138,141,142,173,179,179,174,149],
[108,0,201,106,142,213,148,147,191,113,201,161,163,194,171],
[22,50,0,49,45,72,60,63,110,95,120,86,98,122,99],
[104,145,202,0,162,133,78,128,184,120,201,208,127,171,146],
[99,109,206,89,0,143,100,135,182,150,206,206,160,194,208],
[80,38,179,118,108,0,112,123,123,141,136,104,43,71,147],
[131,103,191,173,151,139,0,165,196,117,148,173,103,149,172],
[113,104,188,123,116,128,86,0,142,143,192,158,100,189,149],
[110,60,141,67,69,128,55,109,0,67,135,136,136,96,83],
[109,138,156,131,101,110,134,108,184,0,172,147,118,97,147],
[78,50,131,50,45,115,103,59,116,79,0,98,87,47,76],
[72,90,165,43,45,147,78,93,115,104,153,0,117,117,91],
[72,88,153,124,91,208,148,151,115,133,164,134,0,158,139],
[77,57,129,80,57,180,102,62,155,154,204,134,93,0,157],
[102,80,152,105,43,104,79,102,168,104,175,160,112,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 166, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,141,121,131,89,96,155,113,104,112,117,122,82,112],
[144,0,115,119,135,105,132,140,114,112,106,122,104,105,104],
[110,136,0,114,130,128,149,137,97,126,122,125,91,110,122],
[130,132,137,0,118,137,135,145,121,104,117,139,119,125,115],
[120,116,121,133,0,122,134,137,112,124,137,113,121,110,125],
[162,146,123,114,129,0,114,148,126,133,124,124,129,109,125],
[155,119,102,116,117,137,0,150,114,116,115,121,110,107,113],
[96,111,114,106,114,103,101,0,108,87,121,118,105,119,138],
[138,137,154,130,139,125,137,143,0,124,113,145,133,112,124],
[147,139,125,147,127,118,135,164,127,0,138,138,124,122,126],
[139,145,129,134,114,127,136,130,138,113,0,119,108,112,118],
[134,129,126,112,138,127,130,133,106,113,132,0,116,105,105],
[129,147,160,132,130,122,141,146,118,127,143,135,0,107,113],
[169,146,141,126,141,142,144,132,139,129,139,146,144,0,121],
[139,147,129,136,126,126,138,113,127,125,133,146,138,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 167, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,143,126,107,142,90,110,142,144,111,165,127,146,144],
[131,0,162,147,117,177,126,125,157,146,132,176,156,141,153],
[108,89,0,129,97,129,105,105,119,127,89,143,118,100,95],
[125,104,122,0,112,153,85,129,137,130,96,134,123,122,110],
[144,134,154,139,0,161,129,153,146,154,127,171,144,128,120],
[109,74,122,98,90,0,82,112,130,112,90,142,114,102,97],
[161,125,146,166,122,169,0,144,136,130,108,175,122,140,158],
[141,126,146,122,98,139,107,0,147,147,109,149,141,134,125],
[109,94,132,114,105,121,115,104,0,95,82,131,106,108,113],
[107,105,124,121,97,139,121,104,156,0,102,164,126,129,122],
[140,119,162,155,124,161,143,142,169,149,0,185,161,140,159],
[86,75,108,117,80,109,76,102,120,87,66,0,100,116,107],
[124,95,133,128,107,137,129,110,145,125,90,151,0,116,125],
[105,110,151,129,123,149,111,117,143,122,111,135,135,0,137],
[107,98,156,141,131,154,93,126,138,129,92,144,126,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 168, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,124,121,146,123,121,115,122,133,127,118,133,120,121],
[120,0,137,120,127,118,116,119,114,128,117,105,117,116,119],
[127,114,0,115,133,119,122,130,129,123,121,100,101,111,117],
[130,131,136,0,141,131,124,118,124,139,126,114,136,132,127],
[105,124,118,110,0,122,106,118,86,114,105,108,108,109,96],
[128,133,132,120,129,0,126,125,121,134,133,117,130,114,132],
[130,135,129,127,145,125,0,128,116,132,127,118,120,114,120],
[136,132,121,133,133,126,123,0,110,144,123,118,140,120,140],
[129,137,122,127,165,130,135,141,0,140,121,122,128,129,133],
[118,123,128,112,137,117,119,107,111,0,110,102,118,104,120],
[124,134,130,125,146,118,124,128,130,141,0,115,121,125,125],
[133,146,151,137,143,134,133,133,129,149,136,0,115,131,143],
[118,134,150,115,143,121,131,111,123,133,130,136,0,131,125],
[131,135,140,119,142,137,137,131,122,147,126,120,120,0,128],
[130,132,134,124,155,119,131,111,118,131,126,108,126,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 169, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,152,138,139,125,124,140,124,104,140,140,84,129,128],
[84,0,134,133,87,94,129,97,104,108,111,136,94,89,116],
[99,117,0,136,103,99,100,74,110,95,108,130,77,89,118],
[113,118,115,0,105,115,104,84,110,91,118,131,74,103,110],
[112,164,148,146,0,154,125,132,115,134,131,157,98,105,143],
[126,157,152,136,97,0,133,133,119,124,141,123,122,104,125],
[127,122,151,147,126,118,0,125,138,114,121,127,101,107,110],
[111,154,177,167,119,118,126,0,137,106,130,172,113,101,156],
[127,147,141,141,136,132,113,114,0,124,127,156,100,116,156],
[147,143,156,160,117,127,137,145,127,0,135,151,137,117,154],
[111,140,143,133,120,110,130,121,124,116,0,150,97,109,139],
[111,115,121,120,94,128,124,79,95,100,101,0,87,84,111],
[167,157,174,177,153,129,150,138,151,114,154,164,0,115,176],
[122,162,162,148,146,147,144,150,135,134,142,167,136,0,151],
[123,135,133,141,108,126,141,95,95,97,112,140,75,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 170, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,104,140,133,115,126,103,117,138,119,128,126,108,136],
[126,0,109,140,159,118,117,116,119,133,139,122,148,125,160],
[147,142,0,147,170,143,137,123,112,121,125,135,144,163,137],
[111,111,104,0,145,89,130,123,122,110,111,129,131,123,140],
[118,92,81,106,0,107,116,99,97,112,83,104,97,118,118],
[136,133,108,162,144,0,143,106,112,118,131,135,122,121,116],
[125,134,114,121,135,108,0,112,99,114,117,143,137,111,140],
[148,135,128,128,152,145,139,0,110,127,129,126,157,131,140],
[134,132,139,129,154,139,152,141,0,135,140,170,159,119,155],
[113,118,130,141,139,133,137,124,116,0,132,141,160,124,167],
[132,112,126,140,168,120,134,122,111,119,0,145,151,122,117],
[123,129,116,122,147,116,108,125,81,110,106,0,133,113,134],
[125,103,107,120,154,129,114,94,92,91,100,118,0,126,119],
[143,126,88,128,133,130,140,120,132,127,129,138,125,0,141],
[115,91,114,111,133,135,111,111,96,84,134,117,132,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 171, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,130,128,137,126,133,127,136,124,130,127,128,129,139],
[113,0,132,130,134,131,124,124,135,128,122,123,119,121,142],
[121,119,0,124,125,105,128,122,113,118,113,112,119,116,123],
[123,121,127,0,135,124,132,117,119,121,115,113,122,115,127],
[114,117,126,116,0,112,121,118,115,113,114,114,115,118,130],
[125,120,146,127,139,0,130,123,135,130,121,136,123,124,125],
[118,127,123,119,130,121,0,117,119,127,116,116,117,118,129],
[124,127,129,134,133,128,134,0,129,118,113,136,130,112,135],
[115,116,138,132,136,116,132,122,0,122,123,128,127,128,128],
[127,123,133,130,138,121,124,133,129,0,124,120,128,124,138],
[121,129,138,136,137,130,135,138,128,127,0,131,120,126,145],
[124,128,139,138,137,115,135,115,123,131,120,0,127,121,138],
[123,132,132,129,136,128,134,121,124,123,131,124,0,113,134],
[122,130,135,136,133,127,133,139,123,127,125,130,138,0,132],
[112,109,128,124,121,126,122,116,123,113,106,113,117,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 172, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,147,138,157,144,148,125,142,155,128,149,145,151,129],
[109,0,127,122,126,113,140,123,141,129,121,130,113,115,120],
[104,124,0,114,138,142,122,118,141,131,121,148,123,117,132],
[113,129,137,0,130,118,125,122,140,136,119,136,133,133,126],
[94,125,113,121,0,105,130,127,144,139,113,119,111,128,112],
[107,138,109,133,146,0,120,117,154,129,125,118,114,126,151],
[103,111,129,126,121,131,0,118,140,148,123,139,128,119,135],
[126,128,133,129,124,134,133,0,141,146,127,146,128,127,134],
[109,110,110,111,107,97,111,110,0,114,100,106,93,134,118],
[96,122,120,115,112,122,103,105,137,0,102,121,95,117,109],
[123,130,130,132,138,126,128,124,151,149,0,132,132,135,131],
[102,121,103,115,132,133,112,105,145,130,119,0,110,126,117],
[106,138,128,118,140,137,123,123,158,156,119,141,0,144,118],
[100,136,134,118,123,125,132,124,117,134,116,125,107,0,125],
[122,131,119,125,139,100,116,117,133,142,120,134,133,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 173, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,127,136,133,102,128,134,115,121,141,122,131,134,125],
[131,0,132,120,137,118,122,124,116,136,145,129,142,142,127],
[124,119,0,114,110,120,126,133,120,121,139,123,124,127,124],
[115,131,137,0,125,116,117,135,94,125,128,128,133,124,132],
[118,114,141,126,0,110,118,123,116,119,127,120,128,141,132],
[149,133,131,135,141,0,131,140,123,129,145,127,140,144,135],
[123,129,125,134,133,120,0,141,115,126,145,127,127,143,128],
[117,127,118,116,128,111,110,0,99,119,141,111,110,119,121],
[136,135,131,157,135,128,136,152,0,124,164,136,129,143,136],
[130,115,130,126,132,122,125,132,127,0,149,130,131,123,132],
[110,106,112,123,124,106,106,110,87,102,0,105,99,110,128],
[129,122,128,123,131,124,124,140,115,121,146,0,138,137,131],
[120,109,127,118,123,111,124,141,122,120,152,113,0,129,125],
[117,109,124,127,110,107,108,132,108,128,141,114,122,0,114],
[126,124,127,119,119,116,123,130,115,119,123,120,126,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 174, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,119,114,116,129,117,98,116,118,135,112,119,139,148],
[145,0,121,128,103,134,118,122,114,137,142,113,107,143,142],
[132,130,0,132,115,133,109,125,126,120,121,119,110,155,135],
[137,123,119,0,120,127,122,118,134,115,126,114,126,150,148],
[135,148,136,131,0,126,123,127,126,128,137,130,120,151,153],
[122,117,118,124,125,0,113,98,147,115,121,130,117,138,134],
[134,133,142,129,128,138,0,124,139,139,134,121,146,144,134],
[153,129,126,133,124,153,127,0,126,141,144,118,109,147,133],
[135,137,125,117,125,104,112,125,0,102,139,144,125,130,139],
[133,114,131,136,123,136,112,110,149,0,137,121,126,140,135],
[116,109,130,125,114,130,117,107,112,114,0,115,112,133,127],
[139,138,132,137,121,121,130,133,107,130,136,0,126,143,139],
[132,144,141,125,131,134,105,142,126,125,139,125,0,139,126],
[112,108,96,101,100,113,107,104,121,111,118,108,112,0,137],
[103,109,116,103,98,117,117,118,112,116,124,112,125,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 175, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,128,128,124,117,118,113,112,120,118,131,106,126,130],
[131,0,129,120,106,122,137,111,128,138,135,145,134,133,126],
[123,122,0,126,123,119,119,115,123,127,131,129,126,127,130],
[123,131,125,0,109,127,120,114,131,130,122,128,117,133,118],
[127,145,128,142,0,119,135,126,126,123,128,142,129,123,126],
[134,129,132,124,132,0,139,124,130,143,132,141,135,134,138],
[133,114,132,131,116,112,0,123,143,140,133,143,129,126,140],
[138,140,136,137,125,127,128,0,116,130,127,147,144,138,131],
[139,123,128,120,125,121,108,135,0,135,123,139,127,122,141],
[131,113,124,121,128,108,111,121,116,0,114,136,127,124,133],
[133,116,120,129,123,119,118,124,128,137,0,147,117,127,136],
[120,106,122,123,109,110,108,104,112,115,104,0,107,117,108],
[145,117,125,134,122,116,122,107,124,124,134,144,0,132,129],
[125,118,124,118,128,117,125,113,129,127,124,134,119,0,128],
[121,125,121,133,125,113,111,120,110,118,115,143,122,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 176, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,148,146,137,134,138,128,142,122,142,134,141,135,138],
[114,0,137,131,134,139,123,111,123,128,133,131,114,140,117],
[103,114,0,120,119,119,108,110,117,119,118,111,123,127,110],
[105,120,131,0,118,113,109,113,122,116,118,115,120,125,108],
[114,117,132,133,0,134,116,121,118,122,125,124,121,134,125],
[117,112,132,138,117,0,115,114,120,116,119,116,119,130,110],
[113,128,143,142,135,136,0,123,138,131,130,124,129,144,122],
[123,140,141,138,130,137,128,0,136,131,130,136,134,135,136],
[109,128,134,129,133,131,113,115,0,121,130,129,135,129,120],
[129,123,132,135,129,135,120,120,130,0,127,124,121,135,127],
[109,118,133,133,126,132,121,121,121,124,0,126,125,127,120],
[117,120,140,136,127,135,127,115,122,127,125,0,127,134,124],
[110,137,128,131,130,132,122,117,116,130,126,124,0,133,110],
[116,111,124,126,117,121,107,116,122,116,124,117,118,0,122],
[113,134,141,143,126,141,129,115,131,124,131,127,141,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 177, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,67,92,143,107,93,82,138,139,115,107,133,101,182],
[178,0,125,97,168,92,202,135,158,169,139,116,166,167,207],
[184,126,0,137,174,107,208,151,150,170,92,151,183,184,174],
[159,154,114,0,149,82,185,149,182,159,106,83,183,159,174],
[108,83,77,102,0,83,114,83,150,150,68,60,78,78,117],
[144,159,144,169,168,0,145,144,167,133,158,169,145,111,178],
[158,49,43,66,137,106,0,148,134,124,91,107,157,158,173],
[169,116,100,102,168,107,103,0,148,183,92,93,110,86,173],
[113,93,101,69,101,84,117,103,0,82,58,94,112,147,103],
[112,82,81,92,101,118,127,68,169,0,81,84,136,112,127],
[136,112,159,145,183,93,160,159,193,170,0,159,112,103,145],
[144,135,100,168,191,82,144,158,157,167,92,0,124,100,159],
[118,85,68,68,173,106,94,141,139,115,139,127,0,161,199],
[150,84,67,92,173,140,93,165,104,139,148,151,90,0,173],
[69,44,77,77,134,73,78,78,148,124,106,92,52,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 178, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,125,129,124,113,124,120,114,115,111,118,112,117,115],
[141,0,141,135,135,126,130,131,124,134,121,137,127,130,132],
[126,110,0,123,119,110,124,129,114,126,120,121,122,115,109],
[122,116,128,0,140,106,111,125,116,112,108,126,115,121,119],
[127,116,132,111,0,115,124,127,116,118,124,125,126,124,114],
[138,125,141,145,136,0,129,132,127,131,129,132,129,138,135],
[127,121,127,140,127,122,0,118,118,111,133,134,129,132,128],
[131,120,122,126,124,119,133,0,116,112,125,131,131,129,119],
[137,127,137,135,135,124,133,135,0,130,135,137,120,129,122],
[136,117,125,139,133,120,140,139,121,0,134,119,131,137,120],
[140,130,131,143,127,122,118,126,116,117,0,122,122,128,128],
[133,114,130,125,126,119,117,120,114,132,129,0,131,127,122],
[139,124,129,136,125,122,122,120,131,120,129,120,0,130,131],
[134,121,136,130,127,113,119,122,122,114,123,124,121,0,116],
[136,119,142,132,137,116,123,132,129,131,123,129,120,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 179, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,112,110,128,118,127,115,111,134,112,120,111,129,108],
[135,0,127,126,129,121,131,122,120,135,122,134,122,122,117],
[139,124,0,126,126,127,122,118,113,137,112,126,115,136,118],
[141,125,125,0,133,123,127,126,127,138,123,134,129,131,125],
[123,122,125,118,0,129,129,115,107,138,120,138,120,127,112],
[133,130,124,128,122,0,137,127,120,137,120,137,132,122,123],
[124,120,129,124,122,114,0,119,106,124,116,127,118,125,114],
[136,129,133,125,136,124,132,0,125,142,134,132,128,130,131],
[140,131,138,124,144,131,145,126,0,154,126,145,135,137,132],
[117,116,114,113,113,114,127,109,97,0,106,120,109,111,101],
[139,129,139,128,131,131,135,117,125,145,0,141,132,125,130],
[131,117,125,117,113,114,124,119,106,131,110,0,118,121,117],
[140,129,136,122,131,119,133,123,116,142,119,133,0,124,120],
[122,129,115,120,124,129,126,121,114,140,126,130,127,0,121],
[143,134,133,126,139,128,137,120,119,150,121,134,131,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 180, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,121,120,121,122,119,120,130,123,122,124,125,135,142],
[127,0,128,139,124,131,123,120,139,136,124,138,129,143,139],
[130,123,0,130,114,125,120,121,130,136,119,138,140,143,135],
[131,112,121,0,119,124,110,113,135,119,119,122,122,127,135],
[130,127,137,132,0,118,119,128,141,136,127,140,128,142,137],
[129,120,126,127,133,0,128,131,131,139,124,138,133,133,142],
[132,128,131,141,132,123,0,133,133,135,126,132,138,132,147],
[131,131,130,138,123,120,118,0,136,138,124,134,131,145,146],
[121,112,121,116,110,120,118,115,0,127,113,127,112,136,138],
[128,115,115,132,115,112,116,113,124,0,116,126,132,127,134],
[129,127,132,132,124,127,125,127,138,135,0,128,130,145,136],
[127,113,113,129,111,113,119,117,124,125,123,0,119,137,128],
[126,122,111,129,123,118,113,120,139,119,121,132,0,131,134],
[116,108,108,124,109,118,119,106,115,124,106,114,120,0,123],
[109,112,116,116,114,109,104,105,113,117,115,123,117,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 181, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,116,108,126,108,117,105,114,104,112,129,131,127,106],
[129,0,120,110,119,114,133,125,118,113,119,125,126,127,95],
[135,131,0,118,118,119,134,133,114,104,114,136,144,140,116],
[143,141,133,0,124,102,143,139,118,126,142,130,132,132,135],
[125,132,133,127,0,113,131,143,117,109,133,124,139,138,108],
[143,137,132,149,138,0,136,143,130,124,140,136,147,138,112],
[134,118,117,108,120,115,0,115,102,108,123,140,119,121,103],
[146,126,118,112,108,108,136,0,119,108,124,129,125,138,118],
[137,133,137,133,134,121,149,132,0,120,138,141,133,152,125],
[147,138,147,125,142,127,143,143,131,0,128,140,145,153,145],
[139,132,137,109,118,111,128,127,113,123,0,123,122,129,122],
[122,126,115,121,127,115,111,122,110,111,128,0,120,132,125],
[120,125,107,119,112,104,132,126,118,106,129,131,0,123,126],
[124,124,111,119,113,113,130,113,99,98,122,119,128,0,124],
[145,156,135,116,143,139,148,133,126,106,129,126,125,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 182, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,138,120,123,114,109,123,124,106,107,132,124,120,129],
[134,0,133,103,123,108,124,111,132,118,116,123,112,126,135],
[113,118,0,100,109,116,108,111,119,103,111,120,118,105,119],
[131,148,151,0,118,134,133,134,148,133,146,146,139,158,156],
[128,128,142,133,0,114,144,129,131,133,114,132,134,124,138],
[137,143,135,117,137,0,125,125,148,129,138,137,125,128,139],
[142,127,143,118,107,126,0,137,144,133,129,128,127,126,143],
[128,140,140,117,122,126,114,0,134,127,118,131,117,127,135],
[127,119,132,103,120,103,107,117,0,105,115,127,119,123,143],
[145,133,148,118,118,122,118,124,146,0,122,146,126,135,139],
[144,135,140,105,137,113,122,133,136,129,0,140,130,145,146],
[119,128,131,105,119,114,123,120,124,105,111,0,124,141,136],
[127,139,133,112,117,126,124,134,132,125,121,127,0,132,139],
[131,125,146,93,127,123,125,124,128,116,106,110,119,0,126],
[122,116,132,95,113,112,108,116,108,112,105,115,112,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 183, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,133,123,165,141,149,156,133,149,110,134,128,156,130],
[108,0,107,109,131,118,114,109,127,115,113,92,103,122,102],
[118,144,0,118,136,127,131,129,111,133,119,119,123,163,121],
[128,142,133,0,132,124,124,107,122,104,119,117,132,132,128],
[86,120,115,119,0,114,113,134,111,108,115,110,119,113,123],
[110,133,124,127,137,0,109,131,99,135,116,103,141,139,122],
[102,137,120,127,138,142,0,115,111,106,116,127,133,150,104],
[95,142,122,144,117,120,136,0,119,126,121,118,150,145,134],
[118,124,140,129,140,152,140,132,0,142,110,124,138,154,122],
[102,136,118,147,143,116,145,125,109,0,136,111,111,146,108],
[141,138,132,132,136,135,135,130,141,115,0,136,144,153,116],
[117,159,132,134,141,148,124,133,127,140,115,0,147,155,131],
[123,148,128,119,132,110,118,101,113,140,107,104,0,153,126],
[95,129,88,119,138,112,101,106,97,105,98,96,98,0,99],
[121,149,130,123,128,129,147,117,129,143,135,120,125,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 184, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,126,108,145,121,146,134,131,133,125,119,100,121,133],
[114,0,86,84,142,120,128,142,147,113,111,128,111,119,116],
[125,165,0,108,141,129,145,166,146,109,116,133,129,161,124],
[143,167,143,0,156,146,165,152,142,138,129,134,124,139,142],
[106,109,110,95,0,104,127,115,141,109,98,117,95,96,72],
[130,131,122,105,147,0,156,155,146,108,144,134,104,131,122],
[105,123,106,86,124,95,0,120,113,112,126,125,98,128,119],
[117,109,85,99,136,96,131,0,95,97,102,120,74,104,124],
[120,104,105,109,110,105,138,156,0,122,120,114,110,129,105],
[118,138,142,113,142,143,139,154,129,0,116,143,129,128,128],
[126,140,135,122,153,107,125,149,131,135,0,149,125,116,128],
[132,123,118,117,134,117,126,131,137,108,102,0,95,122,136],
[151,140,122,127,156,147,153,177,141,122,126,156,0,152,138],
[130,132,90,112,155,120,123,147,122,123,135,129,99,0,111],
[118,135,127,109,179,129,132,127,146,123,123,115,113,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 185, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,126,138,125,125,126,114,129,136,122,135,123,128,136],
[125,0,119,122,119,122,118,116,123,134,111,130,118,128,128],
[125,132,0,120,128,134,122,117,135,144,112,132,124,133,129],
[113,129,131,0,126,127,122,111,124,127,128,132,119,127,130],
[126,132,123,125,0,122,127,123,131,139,114,143,118,129,128],
[126,129,117,124,129,0,120,110,125,131,123,133,125,129,125],
[125,133,129,129,124,131,0,121,123,136,119,135,123,134,123],
[137,135,134,140,128,141,130,0,137,149,130,134,120,137,142],
[122,128,116,127,120,126,128,114,0,128,121,130,132,126,134],
[115,117,107,124,112,120,115,102,123,0,105,113,115,131,119],
[129,140,139,123,137,128,132,121,130,146,0,135,131,134,134],
[116,121,119,119,108,118,116,117,121,138,116,0,117,119,122],
[128,133,127,132,133,126,128,131,119,136,120,134,0,138,134],
[123,123,118,124,122,122,117,114,125,120,117,132,113,0,123],
[115,123,122,121,123,126,128,109,117,132,117,129,117,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 186, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,117,118,116,126,128,117,128,140,120,123,121,121,120],
[125,0,119,123,110,136,122,114,126,130,133,139,120,130,133],
[134,132,0,133,118,132,123,123,128,146,118,138,120,124,125],
[133,128,118,0,120,128,121,114,126,134,136,142,114,125,127],
[135,141,133,131,0,132,132,128,135,143,132,144,125,126,135],
[125,115,119,123,119,0,124,115,122,136,112,131,111,124,110],
[123,129,128,130,119,127,0,119,122,132,122,133,121,128,120],
[134,137,128,137,123,136,132,0,137,147,142,140,131,137,126],
[123,125,123,125,116,129,129,114,0,130,123,138,123,118,123],
[111,121,105,117,108,115,119,104,121,0,113,121,113,106,115],
[131,118,133,115,119,139,129,109,128,138,0,144,122,128,127],
[128,112,113,109,107,120,118,111,113,130,107,0,110,116,123],
[130,131,131,137,126,140,130,120,128,138,129,141,0,120,133],
[130,121,127,126,125,127,123,114,133,145,123,135,131,0,131],
[131,118,126,124,116,141,131,125,128,136,124,128,118,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 187, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,132,179,168,180,113,145,212,208,181,155,180,143,157],
[108,0,106,123,123,151,168,152,180,152,141,67,148,125,166],
[119,145,0,113,129,144,131,144,172,117,114,156,141,104,144],
[72,128,138,0,86,125,113,143,156,114,85,86,97,60,115],
[83,128,122,165,0,167,103,100,168,181,98,101,136,135,135],
[71,100,107,126,84,0,104,88,134,171,91,74,70,73,89],
[138,83,120,138,148,147,0,137,166,150,96,138,122,97,138],
[106,99,107,108,151,163,114,0,151,136,124,85,138,126,154],
[39,71,79,95,83,117,85,100,0,107,71,27,106,42,109],
[43,99,134,137,70,80,101,115,144,0,86,80,81,45,72],
[70,110,137,166,153,160,155,127,180,165,0,110,138,81,69],
[96,184,95,165,150,177,113,166,224,171,141,0,150,140,166],
[71,103,110,154,115,181,129,113,145,170,113,101,0,130,114],
[108,126,147,191,116,178,154,125,209,206,170,111,121,0,108],
[94,85,107,136,116,162,113,97,142,179,182,85,137,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 188, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,141,126,131,109,147,131,138,130,130,121,176,125,139],
[105,0,131,106,105,110,119,119,81,149,103,124,134,133,108],
[110,120,0,89,109,98,118,112,100,123,131,104,139,117,93],
[125,145,162,0,144,126,123,157,112,136,147,132,155,125,116],
[120,146,142,107,0,112,112,127,109,122,139,109,154,124,129],
[142,141,153,125,139,0,123,138,95,122,130,136,157,112,129],
[104,132,133,128,139,128,0,122,123,130,131,135,150,147,147],
[120,132,139,94,124,113,129,0,102,104,112,103,146,126,117],
[113,170,151,139,142,156,128,149,0,140,141,154,164,130,137],
[121,102,128,115,129,129,121,147,111,0,136,113,160,122,128],
[121,148,120,104,112,121,120,139,110,115,0,107,166,126,121],
[130,127,147,119,142,115,116,148,97,138,144,0,161,147,145],
[75,117,112,96,97,94,101,105,87,91,85,90,0,86,111],
[126,118,134,126,127,139,104,125,121,129,125,104,165,0,139],
[112,143,158,135,122,122,104,134,114,123,130,106,140,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 189, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,138,132,146,131,138,138,133,128,121,117,129,134,131],
[126,0,136,131,129,124,144,143,127,127,133,113,127,146,125],
[113,115,0,134,132,134,135,139,118,124,127,118,129,131,121],
[119,120,117,0,128,133,136,134,109,132,122,105,123,119,123],
[105,122,119,123,0,119,131,132,114,127,127,113,119,125,118],
[120,127,117,118,132,0,136,130,117,124,113,110,120,125,119],
[113,107,116,115,120,115,0,126,104,117,114,99,108,124,109],
[113,108,112,117,119,121,125,0,106,114,113,107,118,118,115],
[118,124,133,142,137,134,147,145,0,122,126,127,120,134,122],
[123,124,127,119,124,127,134,137,129,0,131,119,126,124,121],
[130,118,124,129,124,138,137,138,125,120,0,120,123,122,119],
[134,138,133,146,138,141,152,144,124,132,131,0,143,151,137],
[122,124,122,128,132,131,143,133,131,125,128,108,0,130,118],
[117,105,120,132,126,126,127,133,117,127,129,100,121,0,118],
[120,126,130,128,133,132,142,136,129,130,132,114,133,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 190, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,136,139,122,150,125,142,150,137,127,136,139,130,109],
[111,0,118,105,113,114,103,149,127,114,105,115,140,128,114],
[115,133,0,105,90,126,127,136,165,128,123,111,152,110,120],
[112,146,146,0,156,158,140,143,165,128,140,161,156,126,132],
[129,138,161,95,0,148,111,131,156,138,132,130,151,116,134],
[101,137,125,93,103,0,114,125,143,115,124,134,144,123,110],
[126,148,124,111,140,137,0,132,146,145,132,114,143,123,114],
[109,102,115,108,120,126,119,0,146,115,114,113,111,134,120],
[101,124,86,86,95,108,105,105,0,127,122,97,129,108,96],
[114,137,123,123,113,136,106,136,124,0,104,127,154,128,124],
[124,146,128,111,119,127,119,137,129,147,0,145,134,110,99],
[115,136,140,90,121,117,137,138,154,124,106,0,155,125,114],
[112,111,99,95,100,107,108,140,122,97,117,96,0,114,114],
[121,123,141,125,135,128,128,117,143,123,141,126,137,0,121],
[142,137,131,119,117,141,137,131,155,127,152,137,137,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 191, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,131,127,131,119,136,130,124,121,135,136,125,139,125],
[131,0,120,153,121,121,133,122,121,135,132,130,135,114,115],
[120,131,0,144,136,123,140,109,107,124,131,141,136,127,116],
[124,98,107,0,112,129,127,107,104,133,128,131,126,108,114],
[120,130,115,139,0,125,143,122,102,142,137,137,129,119,101],
[132,130,128,122,126,0,121,111,98,133,131,133,126,122,118],
[115,118,111,124,108,130,0,107,109,129,125,127,117,104,99],
[121,129,142,144,129,140,144,0,117,127,149,147,148,133,140],
[127,130,144,147,149,153,142,134,0,134,144,142,153,133,121],
[130,116,127,118,109,118,122,124,117,0,117,127,111,116,101],
[116,119,120,123,114,120,126,102,107,134,0,135,126,120,115],
[115,121,110,120,114,118,124,104,109,124,116,0,108,101,112],
[126,116,115,125,122,125,134,103,98,140,125,143,0,104,96],
[112,137,124,143,132,129,147,118,118,135,131,150,147,0,119],
[126,136,135,137,150,133,152,111,130,150,136,139,155,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 192, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,131,169,145,140,140,149,122,146,148,124,149,146,131],
[136,0,141,164,124,151,147,169,126,139,102,140,133,162,129],
[120,110,0,145,114,116,115,150,103,122,103,127,136,138,125],
[82,87,106,0,108,111,121,127,95,125,89,103,109,127,128],
[106,127,137,143,0,120,133,157,97,134,102,141,131,154,124],
[111,100,135,140,131,0,119,115,106,95,104,124,134,136,105],
[111,104,136,130,118,132,0,140,116,130,106,128,127,126,116],
[102,82,101,124,94,136,111,0,101,127,93,108,119,124,107],
[129,125,148,156,154,145,135,150,0,131,114,140,157,150,137],
[105,112,129,126,117,156,121,124,120,0,118,134,130,134,124],
[103,149,148,162,149,147,145,158,137,133,0,150,135,156,142],
[127,111,124,148,110,127,123,143,111,117,101,0,133,146,126],
[102,118,115,142,120,117,124,132,94,121,116,118,0,138,121],
[105,89,113,124,97,115,125,127,101,117,95,105,113,0,116],
[120,122,126,123,127,146,135,144,114,127,109,125,130,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 193, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,104,139,124,125,114,110,127,112,162,131,90,121,137],
[123,0,118,148,110,106,120,67,97,80,143,146,76,94,125],
[147,133,0,152,138,124,157,144,136,121,161,155,123,138,134],
[112,103,99,0,127,92,98,64,106,98,84,86,58,80,120],
[127,141,113,124,0,104,100,81,113,117,88,128,84,93,123],
[126,145,127,159,147,0,118,102,133,118,109,134,85,65,108],
[137,131,94,153,151,133,0,102,110,114,146,125,115,128,95],
[141,184,107,187,170,149,149,0,181,135,182,189,153,126,145],
[124,154,115,145,138,118,141,70,0,143,141,112,112,126,107],
[139,171,130,153,134,133,137,116,108,0,152,135,105,108,136],
[89,108,90,167,163,142,105,69,110,99,0,130,65,108,136],
[120,105,96,165,123,117,126,62,139,116,121,0,73,109,128],
[161,175,128,193,167,166,136,98,139,146,186,178,0,108,140],
[130,157,113,171,158,186,123,125,125,143,143,142,143,0,112],
[114,126,117,131,128,143,156,106,144,115,115,123,111,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 194, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,127,121,122,115,128,133,128,130,136,110,119,110,143],
[126,0,137,111,121,122,128,125,131,134,131,116,140,123,126],
[124,114,0,113,119,125,127,126,122,124,122,108,127,107,121],
[130,140,138,0,133,136,137,137,129,145,134,122,137,126,146],
[129,130,132,118,0,120,142,132,142,121,130,133,135,116,137],
[136,129,126,115,131,0,123,115,131,138,129,112,127,118,136],
[123,123,124,114,109,128,0,116,122,110,134,104,128,111,123],
[118,126,125,114,119,136,135,0,125,127,125,107,128,121,132],
[123,120,129,122,109,120,129,126,0,129,128,114,119,108,126],
[121,117,127,106,130,113,141,124,122,0,114,118,145,115,130],
[115,120,129,117,121,122,117,126,123,137,0,103,137,114,136],
[141,135,143,129,118,139,147,144,137,133,148,0,147,118,139],
[132,111,124,114,116,124,123,123,132,106,114,104,0,105,124],
[141,128,144,125,135,133,140,130,143,136,137,133,146,0,138],
[108,125,130,105,114,115,128,119,125,121,115,112,127,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 195, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,134,129,131,140,136,143,120,114,130,134,128,132,121],
[106,0,123,112,105,121,99,124,121,95,110,115,103,117,117],
[117,128,0,126,119,135,112,125,139,122,126,135,128,128,134],
[122,139,125,0,123,125,139,132,130,129,118,134,123,120,141],
[120,146,132,128,0,126,122,133,119,120,134,133,131,127,124],
[111,130,116,126,125,0,123,131,116,112,128,132,117,121,132],
[115,152,139,112,129,128,0,134,113,117,125,125,127,124,128],
[108,127,126,119,118,120,117,0,116,119,125,131,118,118,113],
[131,130,112,121,132,135,138,135,0,117,130,129,127,120,133],
[137,156,129,122,131,139,134,132,134,0,132,143,145,127,144],
[121,141,125,133,117,123,126,126,121,119,0,119,128,125,132],
[117,136,116,117,118,119,126,120,122,108,132,0,121,122,126],
[123,148,123,128,120,134,124,133,124,106,123,130,0,114,123],
[119,134,123,131,124,130,127,133,131,124,126,129,137,0,135],
[130,134,117,110,127,119,123,138,118,107,119,125,128,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 196, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,130,120,121,130,144,124,134,126,125,134,97,118,128],
[132,0,136,130,127,146,146,118,122,123,126,137,126,122,136],
[121,115,0,118,136,118,125,119,134,117,122,127,115,123,116],
[131,121,133,0,129,124,127,111,124,121,113,134,111,113,117],
[130,124,115,122,0,124,125,118,128,115,128,132,120,119,126],
[121,105,133,127,127,0,140,102,137,119,135,133,117,119,128],
[107,105,126,124,126,111,0,107,126,125,114,140,105,115,132],
[127,133,132,140,133,149,144,0,146,130,124,139,125,128,128],
[117,129,117,127,123,114,125,105,0,123,125,129,116,109,128],
[125,128,134,130,136,132,126,121,128,0,128,129,115,122,119],
[126,125,129,138,123,116,137,127,126,123,0,137,129,131,134],
[117,114,124,117,119,118,111,112,122,122,114,0,113,109,121],
[154,125,136,140,131,134,146,126,135,136,122,138,0,128,132],
[133,129,128,138,132,132,136,123,142,129,120,142,123,0,135],
[123,115,135,134,125,123,119,123,123,132,117,130,119,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 197, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,130,125,129,121,121,114,131,120,128,117,116,131,129],
[124,0,130,120,131,130,127,131,140,134,129,128,118,139,126],
[121,121,0,117,113,111,115,116,123,129,123,116,109,117,127],
[126,131,134,0,127,132,120,123,132,129,127,124,121,123,131],
[122,120,138,124,0,130,134,130,140,129,133,133,123,136,133],
[130,121,140,119,121,0,130,122,123,131,120,128,119,118,131],
[130,124,136,131,117,121,0,120,131,123,139,129,127,133,134],
[137,120,135,128,121,129,131,0,131,123,125,132,119,122,119],
[120,111,128,119,111,128,120,120,0,124,122,122,112,119,117],
[131,117,122,122,122,120,128,128,127,0,137,130,125,126,134],
[123,122,128,124,118,131,112,126,129,114,0,123,117,124,123],
[134,123,135,127,118,123,122,119,129,121,128,0,123,130,134],
[135,133,142,130,128,132,124,132,139,126,134,128,0,128,136],
[120,112,134,128,115,133,118,129,132,125,127,121,123,0,127],
[122,125,124,120,118,120,117,132,134,117,128,117,115,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 198, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,102,122,107,118,103,119,100,127,120,120,121,127,119],
[133,0,124,142,127,137,106,132,132,125,138,128,124,142,132],
[149,127,0,128,125,147,121,138,127,130,131,147,154,121,140],
[129,109,123,0,123,135,119,109,117,117,123,135,127,113,113],
[144,124,126,128,0,138,128,129,130,126,141,144,132,123,125],
[133,114,104,116,113,0,103,101,116,113,110,128,107,115,117],
[148,145,130,132,123,148,0,139,136,134,138,141,143,142,135],
[132,119,113,142,122,150,112,0,127,115,122,139,141,120,128],
[151,119,124,134,121,135,115,124,0,119,127,123,124,127,119],
[124,126,121,134,125,138,117,136,132,0,132,128,130,132,123],
[131,113,120,128,110,141,113,129,124,119,0,136,148,116,127],
[131,123,104,116,107,123,110,112,128,123,115,0,123,123,123],
[130,127,97,124,119,144,108,110,127,121,103,128,0,119,125],
[124,109,130,138,128,136,109,131,124,119,135,128,132,0,117],
[132,119,111,138,126,134,116,123,132,128,124,128,126,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 199, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,170,148,165,141,142,158,127,194,140,49,108,134,93],
[106,0,186,193,164,131,132,143,160,224,195,119,81,110,137],
[81,65,0,85,100,72,80,111,86,168,93,67,46,97,73],
[103,58,166,0,186,127,105,95,171,189,123,74,76,74,118],
[86,87,151,65,0,141,108,121,152,167,114,97,122,97,103],
[110,120,179,124,110,0,132,127,143,216,147,121,90,130,102],
[109,119,171,146,143,119,0,132,184,203,198,110,153,105,140],
[93,108,140,156,130,124,119,0,132,169,149,82,119,110,85],
[124,91,165,80,99,108,67,119,0,207,98,92,100,92,129],
[57,27,83,62,84,35,48,82,44,0,27,76,66,46,92],
[111,56,158,128,137,104,53,102,153,224,0,78,83,77,110],
[202,132,184,177,154,130,141,169,159,175,173,0,128,159,121],
[143,170,205,175,129,161,98,132,151,185,168,123,0,152,137],
[117,141,154,177,154,121,146,141,159,205,174,92,99,0,85],
[158,114,178,133,148,149,111,166,122,159,141,130,114,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 251, 200, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbd/mebbd_15_251.csv", index=False, header=False)

import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg
from kemeny import sc

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,20,28,20,25,18,23,24,27,22,25,20,29,23,21],
[31,0,32,28,30,23,28,32,26,24,26,25,30,28,25],
[23,19,0,23,27,19,26,30,26,20,23,23,28,19,21],
[31,23,28,0,29,25,28,31,28,28,25,26,30,32,23],
[26,21,24,22,0,23,25,30,22,24,23,20,32,22,19],
[33,28,32,26,28,0,30,32,28,29,25,27,31,25,25],
[28,23,25,23,26,21,0,26,17,20,15,23,32,23,17],
[27,19,21,20,21,19,25,0,23,19,18,16,29,23,19],
[24,25,25,23,29,23,34,28,0,25,27,25,32,26,24],
[29,27,31,23,27,22,31,32,26,0,27,20,31,25,21],
[26,25,28,26,28,26,36,33,24,24,0,27,34,27,25],
[31,26,28,25,31,24,28,35,26,31,24,0,32,24,23],
[22,21,23,21,19,20,19,22,19,20,17,19,0,16,14],
[28,23,32,19,29,26,28,28,25,26,24,27,35,0,27],
[30,26,30,28,32,26,34,32,27,30,26,28,37,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 1, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,18,29,30,33,27,29,27,29,23,27,27,34,27],
[30,0,24,35,25,31,28,31,22,28,24,24,29,28,19],
[33,27,0,32,30,35,32,35,30,34,29,32,33,37,25],
[22,16,19,0,22,28,24,26,20,30,25,20,22,26,22],
[21,26,21,29,0,29,29,31,20,29,25,24,23,30,24],
[18,20,16,23,22,0,25,22,11,25,26,22,20,20,17],
[24,23,19,27,22,26,0,26,25,31,25,33,24,22,27],
[22,20,16,25,20,29,25,0,21,28,26,28,19,26,25],
[24,29,21,31,31,40,26,30,0,36,29,24,29,32,28],
[22,23,17,21,22,26,20,23,15,0,25,24,21,24,20],
[28,27,22,26,26,25,26,25,22,26,0,31,21,24,21],
[24,27,19,31,27,29,18,23,27,27,20,0,20,21,19],
[24,22,18,29,28,31,27,32,22,30,30,31,0,25,25],
[17,23,14,25,21,31,29,25,19,27,27,30,26,0,17],
[24,32,26,29,27,34,24,26,23,31,30,32,26,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 2, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,23,30,33,26,35,33,34,27,27,36,27,33,30],
[20,0,24,22,25,23,25,24,28,23,22,27,25,28,15],
[28,27,0,22,31,26,28,28,31,32,25,30,29,26,26],
[21,29,29,0,31,28,26,30,34,28,21,33,29,25,23],
[18,26,20,20,0,26,15,23,25,21,16,25,25,23,18],
[25,28,25,23,25,0,24,25,23,31,21,30,28,22,26],
[16,26,23,25,36,27,0,32,31,28,22,28,23,24,22],
[18,27,23,21,28,26,19,0,24,27,21,34,25,21,20],
[17,23,20,17,26,28,20,27,0,25,19,30,24,28,20],
[24,28,19,23,30,20,23,24,26,0,17,28,26,22,18],
[24,29,26,30,35,30,29,30,32,34,0,36,30,29,24],
[15,24,21,18,26,21,23,17,21,23,15,0,24,18,17],
[24,26,22,22,26,23,28,26,27,25,21,27,0,25,25],
[18,23,25,26,28,29,27,30,23,29,22,33,26,0,23],
[21,36,25,28,33,25,29,31,31,33,27,34,26,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 3, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,27,25,29,31,23,24,30,29,24,35,21,32,19],
[22,0,22,23,21,31,25,21,22,25,25,29,18,31,13],
[24,29,0,25,25,30,23,26,28,22,24,29,23,27,22],
[26,28,26,0,26,32,22,23,24,29,31,34,18,30,23],
[22,30,26,25,0,31,27,22,27,24,24,31,17,27,23],
[20,20,21,19,20,0,22,23,20,26,24,29,19,22,18],
[28,26,28,29,24,29,0,28,27,24,27,31,25,30,22],
[27,30,25,28,29,28,23,0,33,29,26,33,23,33,21],
[21,29,23,27,24,31,24,18,0,25,28,33,25,29,22],
[22,26,29,22,27,25,27,22,26,0,25,28,24,28,18],
[27,26,27,20,27,27,24,25,23,26,0,31,26,32,18],
[16,22,22,17,20,22,20,18,18,23,20,0,20,25,18],
[30,33,28,33,34,32,26,28,26,27,25,31,0,30,30],
[19,20,24,21,24,29,21,18,22,23,19,26,21,0,21],
[32,38,29,28,28,33,29,30,29,33,33,33,21,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 4, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,27,28,26,23,25,23,32,25,25,33,27,28],
[24,0,29,26,28,29,30,28,25,31,24,29,29,31,29],
[24,22,0,26,28,27,26,22,19,34,22,31,33,25,30],
[24,25,25,0,25,26,27,22,24,30,24,27,24,23,30],
[23,23,23,26,0,26,25,21,22,31,22,27,29,24,28],
[25,22,24,25,25,0,23,22,24,26,21,28,29,24,27],
[28,21,25,24,26,28,0,21,22,27,26,28,24,19,30],
[26,23,29,29,30,29,30,0,28,31,27,31,30,28,29],
[28,26,32,27,29,27,29,23,0,31,30,32,34,29,29],
[19,20,17,21,20,25,24,20,20,0,23,21,24,22,28],
[26,27,29,27,29,30,25,24,21,28,0,29,28,25,29],
[26,22,20,24,24,23,23,20,19,30,22,0,27,19,29],
[18,22,18,27,22,22,27,21,17,27,23,24,0,24,23],
[24,20,26,28,27,27,32,23,22,29,26,32,27,0,27],
[23,22,21,21,23,24,21,22,22,23,22,22,28,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 5, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,31,24,37,26,25,27,28,22,16,36,28,24,34],
[23,0,23,17,22,19,19,24,19,12,18,20,19,17,18],
[20,28,0,29,33,24,28,37,24,21,26,33,28,30,20],
[27,34,22,0,31,27,25,34,26,22,16,27,31,23,24],
[14,29,18,20,0,12,24,25,25,15,13,21,19,19,17],
[25,32,27,24,39,0,30,35,18,26,20,39,26,22,16],
[26,32,23,26,27,21,0,33,21,23,19,34,17,24,16],
[24,27,14,17,26,16,18,0,16,21,17,29,21,18,17],
[23,32,27,25,26,33,30,35,0,19,15,31,29,16,20],
[29,39,30,29,36,25,28,30,32,0,25,34,31,19,26],
[35,33,25,35,38,31,32,34,36,26,0,35,34,22,27],
[15,31,18,24,30,12,17,22,20,17,16,0,17,19,12],
[23,32,23,20,32,25,34,30,22,20,17,34,0,20,22],
[27,34,21,28,32,29,27,33,35,32,29,32,31,0,27],
[17,33,31,27,34,35,35,34,31,25,24,39,29,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 6, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,26,27,28,34,30,24,37,46,23,21,32,37,37],
[36,0,37,36,23,35,39,30,34,40,35,38,27,47,39],
[25,14,0,36,23,20,31,31,36,29,13,15,19,25,36],
[24,15,15,0,9,20,29,22,24,31,16,18,20,23,43],
[23,28,28,42,0,28,29,25,36,41,36,33,36,27,45],
[17,16,31,31,23,0,31,25,23,40,28,15,18,30,33],
[21,12,20,22,22,20,0,13,25,28,18,21,18,16,26],
[27,21,20,29,26,26,38,0,28,32,24,20,22,23,28],
[14,17,15,27,15,28,26,23,0,32,16,14,12,18,31],
[5,11,22,20,10,11,23,19,19,0,25,9,12,18,15],
[28,16,38,35,15,23,33,27,35,26,0,22,17,40,34],
[30,13,36,33,18,36,30,31,37,42,29,0,18,30,34],
[19,24,32,31,15,33,33,29,39,39,34,33,0,36,30],
[14,4,26,28,24,21,35,28,33,33,11,21,15,0,32],
[14,12,15,8,6,18,25,23,20,36,17,17,21,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 7, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,26,35,25,29,30,29,21,34,32,36,35,30,25],
[18,0,23,31,24,31,26,19,17,21,29,29,31,24,19],
[25,28,0,35,26,32,34,18,24,27,31,30,34,30,23],
[16,20,16,0,14,24,22,10,10,22,19,19,23,19,16],
[26,27,25,37,0,29,31,23,28,33,31,30,34,26,15],
[22,20,19,27,22,0,26,19,23,27,33,31,33,26,19],
[21,25,17,29,20,25,0,18,23,19,27,22,23,22,19],
[22,32,33,41,28,32,33,0,24,24,35,32,34,30,27],
[30,34,27,41,23,28,28,27,0,30,30,29,35,27,24],
[17,30,24,29,18,24,32,27,21,0,30,28,30,29,21],
[19,22,20,32,20,18,24,16,21,21,0,24,25,18,14],
[15,22,21,32,21,20,29,19,22,23,27,0,26,24,17],
[16,20,17,28,17,18,28,17,16,21,26,25,0,20,17],
[21,27,21,32,25,25,29,21,24,22,33,27,31,0,25],
[26,32,28,35,36,32,32,24,27,30,37,34,34,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 8, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,21,14,11,25,15,10,19,23,24,13,13,12,12],
[34,0,27,34,28,27,24,24,36,37,43,35,31,30,10],
[30,24,0,17,14,26,20,16,19,23,24,16,22,17,17],
[37,17,34,0,26,29,24,23,32,40,34,30,29,23,17],
[40,23,37,25,0,38,24,26,32,29,42,32,27,23,15],
[26,24,25,22,13,0,17,18,17,24,23,20,21,11,14],
[36,27,31,27,27,34,0,33,31,34,27,25,28,20,18],
[41,27,35,28,25,33,18,0,29,31,43,26,32,23,27],
[32,15,32,19,19,34,20,22,0,31,28,26,24,17,16],
[28,14,28,11,22,27,17,20,20,0,25,19,15,19,17],
[27,8,27,17,9,28,24,8,23,26,0,21,18,18,14],
[38,16,35,21,19,31,26,25,25,32,30,0,21,26,21],
[38,20,29,22,24,30,23,19,27,36,33,30,0,24,12],
[39,21,34,28,28,40,31,28,34,32,33,25,27,0,27],
[39,41,34,34,36,37,33,24,35,34,37,30,39,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 9, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,34,28,34,27,26,37,40,26,29,26,25,29,20],
[24,0,32,33,45,30,26,33,40,28,35,20,30,40,26],
[17,19,0,19,27,26,17,25,25,15,17,20,23,27,17],
[23,18,32,0,31,23,23,27,35,24,31,19,26,29,15],
[17,6,24,20,0,22,15,31,34,9,13,15,19,17,8],
[24,21,25,28,29,0,25,31,30,22,20,22,21,28,17],
[25,25,34,28,36,26,0,35,37,25,38,18,27,31,23],
[14,18,26,24,20,20,16,0,28,13,14,12,18,22,9],
[11,11,26,16,17,21,14,23,0,13,15,11,20,21,2],
[25,23,36,27,42,29,26,38,38,0,34,24,26,34,19],
[22,16,34,20,38,31,13,37,36,17,0,19,27,25,8],
[25,31,31,32,36,29,33,39,40,27,32,0,32,36,25],
[26,21,28,25,32,30,24,33,31,25,24,19,0,25,21],
[22,11,24,22,34,23,20,29,30,17,26,15,26,0,13],
[31,25,34,36,43,34,28,42,49,32,43,26,30,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 10, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,28,37,37,35,28,31,32,45,33,24,27,36,25],
[17,0,24,27,38,33,27,25,26,40,31,24,32,41,22],
[23,27,0,27,40,43,15,28,25,47,35,31,39,41,32],
[14,24,24,0,38,33,16,30,23,40,39,16,32,30,21],
[14,13,11,13,0,14,14,16,26,23,18,14,19,7,15],
[16,18,8,18,37,0,18,25,25,40,38,14,24,26,15],
[23,24,36,35,37,33,0,21,16,35,26,36,35,29,32],
[20,26,23,21,35,26,30,0,22,42,30,22,30,32,23],
[19,25,26,28,25,26,35,29,0,35,23,24,28,29,30],
[6,11,4,11,28,11,16,9,16,0,18,7,10,12,16],
[18,20,16,12,33,13,25,21,28,33,0,16,12,26,28],
[27,27,20,35,37,37,15,29,27,44,35,0,29,30,20],
[24,19,12,19,32,27,16,21,23,41,39,22,0,25,16],
[15,10,10,21,44,25,22,19,22,39,25,21,26,0,14],
[26,29,19,30,36,36,19,28,21,35,23,31,35,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 11, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,10,24,26,6,13,22,8,19,16,9,27,22,18],
[38,0,40,34,46,26,30,35,28,37,24,33,33,37,40],
[41,11,0,32,21,16,18,39,24,20,18,16,23,18,28],
[27,17,19,0,27,23,30,16,20,20,20,24,29,18,25],
[25,5,30,24,0,6,18,36,12,26,19,19,18,14,30],
[45,25,35,28,45,0,37,35,29,30,34,45,41,29,35],
[38,21,33,21,33,14,0,28,29,31,29,35,32,24,33],
[29,16,12,35,15,16,23,0,18,20,24,15,22,25,30],
[43,23,27,31,39,22,22,33,0,24,24,37,32,40,24],
[32,14,31,31,25,21,20,31,27,0,21,21,19,24,40],
[35,27,33,31,32,17,22,27,27,30,0,27,29,28,36],
[42,18,35,27,32,6,16,36,14,30,24,0,24,24,31],
[24,18,28,22,33,10,19,29,19,32,22,27,0,22,32],
[29,14,33,33,37,22,27,26,11,27,23,27,29,0,31],
[33,11,23,26,21,16,18,21,27,11,15,20,19,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 12, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,31,32,29,30,26,24,32,28,27,24,34,30,30],
[19,0,23,26,25,22,19,21,24,32,25,21,29,21,25],
[20,28,0,28,22,25,21,25,27,25,21,22,28,26,30],
[19,25,23,0,24,18,22,24,26,26,23,24,30,23,24],
[22,26,29,27,0,24,19,23,32,24,22,19,35,29,23],
[21,29,26,33,27,0,21,28,30,27,18,25,33,29,34],
[25,32,30,29,32,30,0,27,30,31,31,27,36,31,26],
[27,30,26,27,28,23,24,0,31,24,25,26,34,31,27],
[19,27,24,25,19,21,21,20,0,23,18,21,28,24,26],
[23,19,26,25,27,24,20,27,28,0,20,18,31,28,22],
[24,26,30,28,29,33,20,26,33,31,0,24,34,32,28],
[27,30,29,27,32,26,24,25,30,33,27,0,30,23,32],
[17,22,23,21,16,18,15,17,23,20,17,21,0,18,23],
[21,30,25,28,22,22,20,20,27,23,19,28,33,0,29],
[21,26,21,27,28,17,25,24,25,29,23,19,28,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 13, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,22,32,35,27,28,25,30,31,21,28,34,27,29],
[21,0,22,31,27,24,24,15,29,28,29,27,24,20,21],
[29,29,0,18,26,30,22,27,30,34,19,24,35,28,24],
[19,20,33,0,31,18,23,18,36,20,22,20,35,17,14],
[16,24,25,20,0,24,20,16,29,16,26,14,35,16,14],
[24,27,21,33,27,0,27,25,28,27,25,23,33,21,18],
[23,27,29,28,31,24,0,22,35,27,26,18,46,23,20],
[26,36,24,33,35,26,29,0,36,29,29,23,36,26,29],
[21,22,21,15,22,23,16,15,0,18,25,14,24,23,12],
[20,23,17,31,35,24,24,22,33,0,24,20,31,24,18],
[30,22,32,29,25,26,25,22,26,27,0,23,27,25,24],
[23,24,27,31,37,28,33,28,37,31,28,0,31,24,23],
[17,27,16,16,16,18,5,15,27,20,24,20,0,13,15],
[24,31,23,34,35,30,28,25,28,27,26,27,38,0,25],
[22,30,27,37,37,33,31,22,39,33,27,28,36,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 14, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,30,16,28,25,33,17,8,15,17,23,26,19,26],
[18,0,21,12,33,20,35,19,9,5,26,15,22,18,29],
[21,30,0,13,24,26,26,17,19,5,24,27,17,13,15],
[35,39,38,0,38,31,36,38,23,27,31,32,37,31,40],
[23,18,27,13,0,12,20,14,14,14,14,28,21,18,24],
[26,31,25,20,39,0,26,25,20,20,29,37,30,24,29],
[18,16,25,15,31,25,0,17,11,10,28,22,26,17,34],
[34,32,34,13,37,26,34,0,14,10,32,26,29,33,34],
[43,42,32,28,37,31,40,37,0,23,32,42,39,27,46],
[36,46,46,24,37,31,41,41,28,0,31,44,42,31,43],
[34,25,27,20,37,22,23,19,19,20,0,26,33,22,33],
[28,36,24,19,23,14,29,25,9,7,25,0,26,15,27],
[25,29,34,14,30,21,25,22,12,9,18,25,0,24,26],
[32,33,38,20,33,27,34,18,24,20,29,36,27,0,34],
[25,22,36,11,27,22,17,17,5,8,18,24,25,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 15, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,21,22,22,24,23,26,19,20,16,17,21,21,23],
[36,0,25,29,20,25,32,26,25,26,22,19,22,30,22],
[30,26,0,25,25,29,23,24,26,28,23,23,25,26,25],
[29,22,26,0,25,28,30,28,24,24,16,23,20,29,23],
[29,31,26,26,0,28,30,31,28,25,22,20,29,24,31],
[27,26,22,23,23,0,28,23,14,21,21,17,24,33,28],
[28,19,28,21,21,23,0,23,27,26,22,23,27,18,28],
[25,25,27,23,20,28,28,0,15,24,24,19,29,27,29],
[32,26,25,27,23,37,24,36,0,26,18,23,26,30,29],
[31,25,23,27,26,30,25,27,25,0,19,24,19,25,30],
[35,29,28,35,29,30,29,27,33,32,0,31,23,29,30],
[34,32,28,28,31,34,28,32,28,27,20,0,28,28,35],
[30,29,26,31,22,27,24,22,25,32,28,23,0,28,30],
[30,21,25,22,27,18,33,24,21,26,22,23,23,0,27],
[28,29,26,28,20,23,23,22,22,21,21,16,21,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 16, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,19,19,26,22,26,28,27,29,20,23,31,27],
[28,0,27,26,22,26,21,26,25,33,30,30,28,24,29],
[25,24,0,21,20,28,24,21,22,25,25,25,23,29,22],
[32,25,30,0,24,24,29,34,28,31,31,31,21,31,24],
[32,29,31,27,0,27,29,30,30,34,34,25,26,34,29],
[25,25,23,27,24,0,28,24,21,28,26,26,21,27,24],
[29,30,27,22,22,23,0,20,24,24,27,23,28,24,20],
[25,25,30,17,21,27,31,0,30,25,28,22,23,23,30],
[23,26,29,23,21,30,27,21,0,26,27,25,26,27,27],
[24,18,26,20,17,23,27,26,25,0,27,18,19,22,30],
[22,21,26,20,17,25,24,23,24,24,0,21,19,26,23],
[31,21,26,20,26,25,28,29,26,33,30,0,18,33,27],
[28,23,28,30,25,30,23,28,25,32,32,33,0,30,33],
[20,27,22,20,17,24,27,28,24,29,25,18,21,0,30],
[24,22,29,27,22,27,31,21,24,21,28,24,18,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 17, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,30,20,25,25,28,24,21,24,31,29,27,27,30],
[22,0,26,21,23,25,28,25,24,22,32,32,29,30,35],
[21,25,0,19,26,23,27,23,22,23,26,24,22,30,29],
[31,30,32,0,31,23,30,25,27,25,34,33,32,33,34],
[26,28,25,20,0,22,20,27,20,25,29,31,25,31,35],
[26,26,28,28,29,0,31,31,25,30,32,31,32,26,36],
[23,23,24,21,31,20,0,22,20,23,24,29,24,27,31],
[27,26,28,26,24,20,29,0,24,27,28,28,24,32,32],
[30,27,29,24,31,26,31,27,0,30,29,32,30,30,39],
[27,29,28,26,26,21,28,24,21,0,28,30,29,28,30],
[20,19,25,17,22,19,27,23,22,23,0,30,23,27,29],
[22,19,27,18,20,20,22,23,19,21,21,0,22,26,26],
[24,22,29,19,26,19,27,27,21,22,28,29,0,25,27],
[24,21,21,18,20,25,24,19,21,23,24,25,26,0,30],
[21,16,22,17,16,15,20,19,12,21,22,25,24,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 18, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,18,15,20,13,18,20,18,23,28,11,10,18,34],
[31,0,22,27,18,22,32,27,20,22,23,22,29,20,42],
[33,29,0,30,23,24,32,29,20,23,26,25,27,21,32],
[36,24,21,0,32,16,24,21,27,29,32,20,17,22,36],
[31,33,28,19,0,18,29,31,25,18,24,19,22,27,36],
[38,29,27,35,33,0,39,21,30,25,31,26,31,26,33],
[33,19,19,27,22,12,0,19,29,16,26,27,12,19,26],
[31,24,22,30,20,30,32,0,21,27,28,22,28,23,32],
[33,31,31,24,26,21,22,30,0,20,25,26,23,35,37],
[28,29,28,22,33,26,35,24,31,0,27,27,20,32,31],
[23,28,25,19,27,20,25,23,26,24,0,24,22,26,37],
[40,29,26,31,32,25,24,29,25,24,27,0,24,29,36],
[41,22,24,34,29,20,39,23,28,31,29,27,0,29,39],
[33,31,30,29,24,25,32,28,16,19,25,22,22,0,39],
[17,9,19,15,15,18,25,19,14,20,14,15,12,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 19, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,21,32,36,22,36,26,28,38,26,33,28,33,36],
[17,0,25,29,25,17,25,26,23,28,30,32,26,29,29],
[30,26,0,28,30,21,28,31,28,32,28,30,30,30,32],
[19,22,23,0,23,23,25,24,20,24,21,29,24,26,26],
[15,26,21,28,0,17,23,28,22,27,25,26,26,31,28],
[29,34,30,28,34,0,32,28,26,33,32,32,23,37,36],
[15,26,23,26,28,19,0,23,19,24,20,23,21,26,25],
[25,25,20,27,23,23,28,0,24,26,24,26,24,28,28],
[23,28,23,31,29,25,32,27,0,35,26,37,29,34,27],
[13,23,19,27,24,18,27,25,16,0,17,30,21,27,24],
[25,21,23,30,26,19,31,27,25,34,0,33,29,28,34],
[18,19,21,22,25,19,28,25,14,21,18,0,18,23,27],
[23,25,21,27,25,28,30,27,22,30,22,33,0,30,27],
[18,22,21,25,20,14,25,23,17,24,23,28,21,0,28],
[15,22,19,25,23,15,26,23,24,27,17,24,24,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 20, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,29,32,28,32,22,30,30,26,26,23,31,27,29],
[10,0,12,22,18,31,23,12,17,16,21,23,13,8,11],
[22,39,0,34,29,29,31,25,26,17,24,30,27,14,25],
[19,29,17,0,23,24,24,13,22,18,19,19,23,10,18],
[23,33,22,28,0,30,34,29,34,26,25,27,26,23,22],
[19,20,22,27,21,0,31,9,24,23,12,21,18,22,20],
[29,28,20,27,17,20,0,27,30,20,21,29,21,15,23],
[21,39,26,38,22,42,24,0,33,33,34,23,28,22,31],
[21,34,25,29,17,27,21,18,0,27,24,23,23,19,22],
[25,35,34,33,25,28,31,18,24,0,21,30,25,23,30],
[25,30,27,32,26,39,30,17,27,30,0,31,27,25,35],
[28,28,21,32,24,30,22,28,28,21,20,0,16,20,20],
[20,38,24,28,25,33,30,23,28,26,24,35,0,12,34],
[24,43,37,41,28,29,36,29,32,28,26,31,39,0,26],
[22,40,26,33,29,31,28,20,29,21,16,31,17,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 21, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,23,19,24,24,23,25,30,24,21,24,25,27,25],
[30,0,34,28,23,28,26,31,34,28,27,28,26,27,24],
[28,17,0,19,24,28,20,29,34,26,27,22,26,26,22],
[32,23,32,0,26,29,30,31,31,36,29,27,30,22,34],
[27,28,27,25,0,27,26,30,31,32,24,29,31,19,26],
[27,23,23,22,24,0,25,19,27,26,19,22,21,20,22],
[28,25,31,21,25,26,0,30,31,22,22,25,28,23,27],
[26,20,22,20,21,32,21,0,27,24,22,23,25,16,23],
[21,17,17,20,20,24,20,24,0,20,17,20,22,22,22],
[27,23,25,15,19,25,29,27,31,0,22,20,28,20,29],
[30,24,24,22,27,32,29,29,34,29,0,27,23,32,25],
[27,23,29,24,22,29,26,28,31,31,24,0,25,21,29],
[26,25,25,21,20,30,23,26,29,23,28,26,0,24,27],
[24,24,25,29,32,31,28,35,29,31,19,30,27,0,24],
[26,27,29,17,25,29,24,28,29,22,26,22,24,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 22, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,17,17,19,15,13,15,14,19,13,13,16,20,14],
[32,0,25,21,24,29,18,29,33,25,28,28,23,35,22],
[34,26,0,30,29,31,25,28,32,24,26,29,24,32,25],
[34,30,21,0,26,27,21,27,29,22,28,25,27,25,22],
[32,27,22,25,0,22,18,25,26,27,31,24,25,25,17],
[36,22,20,24,29,0,25,23,28,29,24,27,23,30,22],
[38,33,26,30,33,26,0,27,27,25,31,32,35,30,26],
[36,22,23,24,26,28,24,0,26,24,26,26,28,25,20],
[37,18,19,22,25,23,24,25,0,22,17,17,27,29,19],
[32,26,27,29,24,22,26,27,29,0,26,26,20,26,27],
[38,23,25,23,20,27,20,25,34,25,0,27,23,28,19],
[38,23,22,26,27,24,19,25,34,25,24,0,28,27,25],
[35,28,27,24,26,28,16,23,24,31,28,23,0,26,21],
[31,16,19,26,26,21,21,26,22,25,23,24,25,0,25],
[37,29,26,29,34,29,25,31,32,24,32,26,30,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 23, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,21,28,15,22,24,18,30,30,20,28,24,19,12],
[26,0,32,32,20,32,25,23,35,26,34,31,26,26,28],
[30,19,0,26,19,19,21,22,26,32,21,28,29,29,20],
[23,19,25,0,16,21,17,23,29,30,25,29,28,26,20],
[36,31,32,35,0,26,31,24,28,32,34,34,35,38,24],
[29,19,32,30,25,0,24,22,36,37,34,28,21,30,23],
[27,26,30,34,20,27,0,23,29,30,29,31,32,26,25],
[33,28,29,28,27,29,28,0,27,31,24,32,25,30,31],
[21,16,25,22,23,15,22,24,0,25,25,20,23,23,13],
[21,25,19,21,19,14,21,20,26,0,23,23,19,20,21],
[31,17,30,26,17,17,22,27,26,28,0,26,29,23,23],
[23,20,23,22,17,23,20,19,31,28,25,0,22,22,15],
[27,25,22,23,16,30,19,26,28,32,22,29,0,20,17],
[32,25,22,25,13,21,25,21,28,31,28,29,31,0,22],
[39,23,31,31,27,28,26,20,38,30,28,36,34,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 24, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,21,25,21,20,25,27,25,22,21,21,23,22,21],
[28,0,24,26,21,22,24,30,23,21,27,25,23,30,25],
[30,27,0,24,27,30,24,28,29,26,27,31,22,28,32],
[26,25,27,0,26,29,28,29,24,21,24,29,26,30,27],
[30,30,24,25,0,30,28,28,28,26,26,27,28,24,29],
[31,29,21,22,21,0,27,31,28,20,27,24,22,28,26],
[26,27,27,23,23,24,0,36,26,27,30,27,25,31,28],
[24,21,23,22,23,20,15,0,17,21,26,21,23,25,23],
[26,28,22,27,23,23,25,34,0,29,27,28,25,29,29],
[29,30,25,30,25,31,24,30,22,0,33,26,26,32,28],
[30,24,24,27,25,24,21,25,24,18,0,29,23,27,30],
[30,26,20,22,24,27,24,30,23,25,22,0,23,31,25],
[28,28,29,25,23,29,26,28,26,25,28,28,0,32,27],
[29,21,23,21,27,23,20,26,22,19,24,20,19,0,24],
[30,26,19,24,22,25,23,28,22,23,21,26,24,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 25, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,20,22,31,33,30,42,25,31,26,34,30,33,32],
[23,0,27,29,43,30,32,37,38,35,22,33,25,37,39],
[31,24,0,15,41,28,36,29,26,33,31,30,24,34,34],
[29,22,36,0,34,40,31,38,32,43,20,32,33,34,36],
[20,8,10,17,0,22,24,24,12,24,14,18,14,15,23],
[18,21,23,11,29,0,25,31,23,19,23,25,18,25,23],
[21,19,15,20,27,26,0,25,22,19,11,23,20,29,38],
[9,14,22,13,27,20,26,0,22,29,20,29,17,19,30],
[26,13,25,19,39,28,29,29,0,31,27,17,19,30,35],
[20,16,18,8,27,32,32,22,20,0,13,25,17,32,38],
[25,29,20,31,37,28,40,31,24,38,0,26,16,37,36],
[17,18,21,19,33,26,28,22,34,26,25,0,29,33,25],
[21,26,27,18,37,33,31,34,32,34,35,22,0,37,30],
[18,14,17,17,36,26,22,32,21,19,14,18,14,0,29],
[19,12,17,15,28,28,13,21,16,13,15,26,21,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 26, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,32,24,15,26,21,28,27,23,23,26,31,21,19],
[34,0,26,23,19,27,23,25,22,23,24,33,28,17,29],
[19,25,0,24,18,20,22,27,26,16,27,27,25,22,19],
[27,28,27,0,25,29,28,31,33,29,32,35,31,28,23],
[36,32,33,26,0,27,24,29,26,34,32,33,33,25,24],
[25,24,31,22,24,0,24,26,22,26,33,22,27,17,21],
[30,28,29,23,27,27,0,27,24,27,30,30,28,19,27],
[23,26,24,20,22,25,24,0,32,27,33,31,34,24,26],
[24,29,25,18,25,29,27,19,0,19,28,33,21,15,28],
[28,28,35,22,17,25,24,24,32,0,28,28,25,25,26],
[28,27,24,19,19,18,21,18,23,23,0,22,25,16,22],
[25,18,24,16,18,29,21,20,18,23,29,0,28,21,13],
[20,23,26,20,18,24,23,17,30,26,26,23,0,27,20],
[30,34,29,23,26,34,32,27,36,26,35,30,24,0,26],
[32,22,32,28,27,30,24,25,23,25,29,38,31,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 27, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,18,22,21,34,27,29,18,33,33,24,15,21,22],
[29,0,26,32,29,38,35,39,28,31,31,35,24,29,31],
[33,25,0,24,15,31,35,32,14,23,30,35,33,14,20],
[29,19,27,0,23,30,32,32,13,30,35,23,29,20,25],
[30,22,36,28,0,35,35,26,9,33,32,30,19,13,24],
[17,13,20,21,16,0,35,22,16,23,28,18,23,18,15],
[24,16,16,19,16,16,0,31,0,29,22,21,20,9,15],
[22,12,19,19,25,29,20,0,16,23,25,23,17,20,23],
[33,23,37,38,42,35,51,35,0,43,33,39,28,42,20],
[18,20,28,21,18,28,22,28,8,0,32,22,25,18,23],
[18,20,21,16,19,23,29,26,18,19,0,16,30,21,19],
[27,16,16,28,21,33,30,28,12,29,35,0,23,17,22],
[36,27,18,22,32,28,31,34,23,26,21,28,0,28,20],
[30,22,37,31,38,33,42,31,9,33,30,34,23,0,24],
[29,20,31,26,27,36,36,28,31,28,32,29,31,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 28, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,13,15,18,23,25,20,25,25,28,33,28,15,18],
[33,0,27,22,24,27,20,27,29,33,30,32,31,28,25],
[38,24,0,20,28,27,33,32,28,28,38,31,35,27,33],
[36,29,31,0,25,27,32,27,25,36,35,36,37,32,31],
[33,27,23,26,0,27,28,25,28,33,36,34,35,23,33],
[28,24,24,24,24,0,24,25,25,35,31,34,32,28,19],
[26,31,18,19,23,27,0,25,27,26,29,32,35,27,20],
[31,24,19,24,26,26,26,0,25,32,29,35,34,24,28],
[26,22,23,26,23,26,24,26,0,28,28,32,31,28,24],
[26,18,23,15,18,16,25,19,23,0,30,32,29,25,19],
[23,21,13,16,15,20,22,22,23,21,0,34,32,22,21],
[18,19,20,15,17,17,19,16,19,19,17,0,22,16,16],
[23,20,16,14,16,19,16,17,20,22,19,29,0,23,18],
[36,23,24,19,28,23,24,27,23,26,29,35,28,0,27],
[33,26,18,20,18,32,31,23,27,32,30,35,33,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 29, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,32,30,33,24,31,34,29,27,33,28,27,33,28],
[27,0,26,26,30,22,30,35,25,23,29,27,23,27,25],
[19,25,0,21,29,29,22,23,23,22,31,24,27,24,21],
[21,25,30,0,28,25,21,29,21,23,35,32,31,23,21],
[18,21,22,23,0,22,26,23,24,25,26,24,27,24,25],
[27,29,22,26,29,0,24,35,29,29,35,30,28,31,25],
[20,21,29,30,25,27,0,31,23,24,33,32,36,26,21],
[17,16,28,22,28,16,20,0,18,22,28,22,23,22,19],
[22,26,28,30,27,22,28,33,0,25,30,29,22,25,23],
[24,28,29,28,26,22,27,29,26,0,37,31,29,28,25],
[18,22,20,16,25,16,18,23,21,14,0,17,19,24,16],
[23,24,27,19,27,21,19,29,22,20,34,0,23,25,17],
[24,28,24,20,24,23,15,28,29,22,32,28,0,26,25],
[18,24,27,28,27,20,25,29,26,23,27,26,25,0,18],
[23,26,30,30,26,26,30,32,28,26,35,34,26,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 30, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,40,33,30,24,28,35,29,31,29,37,27,34,26],
[26,0,29,25,27,20,26,30,28,23,25,33,29,22,18],
[11,22,0,24,17,18,24,18,17,16,22,25,21,21,14],
[18,26,27,0,26,21,26,23,21,22,25,26,27,25,18],
[21,24,34,25,0,21,32,28,31,28,29,30,29,32,17],
[27,31,33,30,30,0,32,25,26,34,26,35,33,28,24],
[23,25,27,25,19,19,0,28,23,27,23,32,26,23,17],
[16,21,33,28,23,26,23,0,22,20,22,29,19,22,19],
[22,23,34,30,20,25,28,29,0,28,31,26,29,27,17],
[20,28,35,29,23,17,24,31,23,0,28,36,34,24,19],
[22,26,29,26,22,25,28,29,20,23,0,32,27,23,17],
[14,18,26,25,21,16,19,22,25,15,19,0,16,20,18],
[24,22,30,24,22,18,25,32,22,17,24,35,0,22,19],
[17,29,30,26,19,23,28,29,24,27,28,31,29,0,21],
[25,33,37,33,34,27,34,32,34,32,34,33,32,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 31, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,15,17,19,16,23,26,31,19,17,10,16,20,25],
[29,0,19,22,20,27,27,36,33,22,21,20,24,28,23],
[36,32,0,23,28,31,25,31,34,21,17,32,32,28,31],
[34,29,28,0,28,32,33,36,33,25,30,32,27,30,29],
[32,31,23,23,0,24,29,33,38,24,31,24,30,32,28],
[35,24,20,19,27,0,24,34,27,21,19,18,26,32,28],
[28,24,26,18,22,27,0,34,30,18,22,22,31,33,27],
[25,15,20,15,18,17,17,0,24,14,14,21,21,15,18],
[20,18,17,18,13,24,21,27,0,16,14,15,17,22,17],
[32,29,30,26,27,30,33,37,35,0,24,32,34,31,35],
[34,30,34,21,20,32,29,37,37,27,0,34,36,32,30],
[41,31,19,19,27,33,29,30,36,19,17,0,31,26,31],
[35,27,19,24,21,25,20,30,34,17,15,20,0,25,27],
[31,23,23,21,19,19,18,36,29,20,19,25,26,0,30],
[26,28,20,22,23,23,24,33,34,16,21,20,24,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 32, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,27,11,21,20,28,19,32,9,31,27,24,16,23],
[34,0,29,14,22,19,37,32,33,18,38,29,26,19,20],
[24,22,0,15,17,24,31,24,33,18,44,31,31,19,21],
[40,37,36,0,24,27,46,29,38,29,46,33,31,33,29],
[30,29,34,27,0,22,29,24,40,24,38,30,26,28,25],
[31,32,27,24,29,0,30,33,36,21,27,36,22,17,23],
[23,14,20,5,22,21,0,22,21,12,32,24,27,22,23],
[32,19,27,22,27,18,29,0,31,30,34,29,20,15,21],
[19,18,18,13,11,15,30,20,0,18,31,22,24,16,21],
[42,33,33,22,27,30,39,21,33,0,42,29,22,21,18],
[20,13,7,5,13,24,19,17,20,9,0,21,13,16,18],
[24,22,20,18,21,15,27,22,29,22,30,0,18,19,24],
[27,25,20,20,25,29,24,31,27,29,38,33,0,19,21],
[35,32,32,18,23,34,29,36,35,30,35,32,32,0,29],
[28,31,30,22,26,28,28,30,30,33,33,27,30,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 33, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,35,33,25,26,27,29,30,21,30,30,34,30,34],
[25,0,35,34,34,33,32,35,35,25,39,32,33,26,36],
[16,16,0,23,15,20,16,17,22,25,24,19,25,28,22],
[18,17,28,0,17,20,21,23,22,22,27,25,23,24,21],
[26,17,36,34,0,18,24,34,23,18,31,26,33,25,31],
[25,18,31,31,33,0,27,37,35,28,40,41,38,41,39],
[24,19,35,30,27,24,0,29,26,25,25,31,31,26,27],
[22,16,34,28,17,14,22,0,24,24,28,27,35,26,33],
[21,16,29,29,28,16,25,27,0,25,39,31,36,30,30],
[30,26,26,29,33,23,26,27,26,0,25,35,28,29,30],
[21,12,27,24,20,11,26,23,12,26,0,27,29,17,33],
[21,19,32,26,25,10,20,24,20,16,24,0,25,16,26],
[17,18,26,28,18,13,20,16,15,23,22,26,0,23,15],
[21,25,23,27,26,10,25,25,21,22,34,35,28,0,27],
[17,15,29,30,20,12,24,18,21,21,18,25,36,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 34, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,30,37,33,28,33,34,32,31,34,25,29,32,26],
[12,0,20,30,24,29,25,29,32,24,25,22,17,25,24],
[21,31,0,24,28,25,19,22,30,26,26,26,16,21,26],
[14,21,27,0,25,19,20,26,19,23,28,19,17,32,17],
[18,27,23,26,0,21,19,19,25,23,19,17,23,26,22],
[23,22,26,32,30,0,26,25,29,27,30,30,20,27,26],
[18,26,32,31,32,25,0,34,25,30,26,20,15,31,22],
[17,22,29,25,32,26,17,0,23,30,25,23,17,25,25],
[19,19,21,32,26,22,26,28,0,27,21,16,23,27,23],
[20,27,25,28,28,24,21,21,24,0,25,20,22,29,24],
[17,26,25,23,32,21,25,26,30,26,0,23,22,27,21],
[26,29,25,32,34,21,31,28,35,31,28,0,26,30,33],
[22,34,35,34,28,31,36,34,28,29,29,25,0,33,18],
[19,26,30,19,25,24,20,26,24,22,24,21,18,0,14],
[25,27,25,34,29,25,29,26,28,27,30,18,33,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 35, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,36,18,18,29,30,21,26,24,23,20,31,26],
[25,0,24,24,27,23,21,24,24,20,18,26,22,26,30],
[25,27,0,28,26,25,28,18,30,22,28,23,20,35,24],
[15,27,23,0,22,16,20,21,24,19,15,20,21,22,30],
[33,24,25,29,0,28,20,29,31,19,27,31,27,27,31],
[33,28,26,35,23,0,24,22,29,24,30,22,22,26,25],
[22,30,23,31,31,27,0,26,24,21,30,18,20,27,25],
[21,27,33,30,22,29,25,0,30,24,24,20,18,33,33],
[30,27,21,27,20,22,27,21,0,19,27,25,16,25,21],
[25,31,29,32,32,27,30,27,32,0,24,19,26,30,30],
[27,33,23,36,24,21,21,27,24,27,0,21,20,33,30],
[28,25,28,31,20,29,33,31,26,32,30,0,30,32,32],
[31,29,31,30,24,29,31,33,35,25,31,21,0,31,31],
[20,25,16,29,24,25,24,18,26,21,18,19,20,0,29],
[25,21,27,21,20,26,26,18,30,21,21,19,20,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 36, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,25,28,27,27,18,21,24,21,30,25,19,33],
[27,0,32,29,29,24,22,21,25,27,27,31,24,24,33],
[27,19,0,29,27,23,26,19,20,26,16,28,20,19,27],
[26,22,22,0,31,25,24,18,19,22,18,29,19,23,33],
[23,22,24,20,0,19,18,14,20,14,18,29,17,19,28],
[24,27,28,26,32,0,29,24,28,29,25,32,24,26,29],
[24,29,25,27,33,22,0,22,16,22,22,24,20,22,26],
[33,30,32,33,37,27,29,0,23,33,30,34,31,29,32],
[30,26,31,32,31,23,35,28,0,27,29,33,29,28,33],
[27,24,25,29,37,22,29,18,24,0,23,25,22,27,35],
[30,24,35,33,33,26,29,21,22,28,0,27,22,26,33],
[21,20,23,22,22,19,27,17,18,26,24,0,18,24,25],
[26,27,31,32,34,27,31,20,22,29,29,33,0,24,32],
[32,27,32,28,32,25,29,22,23,24,25,27,27,0,30],
[18,18,24,18,23,22,25,19,18,16,18,26,19,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 37, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,23,25,27,21,23,23,23,16,22,21,21,28,30],
[25,0,25,30,25,20,19,24,21,22,20,28,25,26,30],
[28,26,0,24,26,20,26,21,28,25,23,24,24,25,25],
[26,21,27,0,31,18,24,24,26,26,25,28,25,28,28],
[24,26,25,20,0,21,24,21,26,22,24,23,22,27,25],
[30,31,31,33,30,0,27,26,28,23,29,29,27,29,31],
[28,32,25,27,27,24,0,23,29,21,25,26,27,28,29],
[28,27,30,27,30,25,28,0,31,28,25,25,30,28,31],
[28,30,23,25,25,23,22,20,0,17,24,26,25,28,25],
[35,29,26,25,29,28,30,23,34,0,27,25,28,34,34],
[29,31,28,26,27,22,26,26,27,24,0,24,24,28,28],
[30,23,27,23,28,22,25,26,25,26,27,0,24,28,28],
[30,26,27,26,29,24,24,21,26,23,27,27,0,27,27],
[23,25,26,23,24,22,23,23,23,17,23,23,24,0,27],
[21,21,26,23,26,20,22,20,26,17,23,23,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 38, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,25,28,24,22,26,27,26,28,31,32,22,29,25],
[27,0,28,32,32,31,25,24,28,27,32,31,26,32,33],
[26,23,0,28,26,25,22,24,26,31,31,26,24,31,27],
[23,19,23,0,22,22,22,24,19,28,29,24,24,25,25],
[27,19,25,29,0,22,21,22,22,25,33,24,26,28,21],
[29,20,26,29,29,0,26,25,21,29,31,26,24,34,23],
[25,26,29,29,30,25,0,25,29,27,33,29,26,29,24],
[24,27,27,27,29,26,26,0,23,29,34,30,26,30,31],
[25,23,25,32,29,30,22,28,0,30,36,28,27,29,29],
[23,24,20,23,26,22,24,22,21,0,27,28,22,27,23],
[20,19,20,22,18,20,18,17,15,24,0,20,18,25,20],
[19,20,25,27,27,25,22,21,23,23,31,0,20,24,21],
[29,25,27,27,25,27,25,25,24,29,33,31,0,29,30],
[22,19,20,26,23,17,22,21,22,24,26,27,22,0,20],
[26,18,24,26,30,28,27,20,22,28,31,30,21,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 39, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,26,27,18,45,26,20,13,35,29,19,28,19,25],
[34,0,38,43,19,29,21,15,30,38,33,23,21,21,42],
[25,13,0,35,4,25,9,11,28,29,21,15,15,13,13],
[24,8,16,0,12,27,12,11,12,34,14,15,19,14,16],
[33,32,47,39,0,28,28,23,35,39,38,32,37,26,42],
[6,22,26,24,23,0,32,22,17,26,24,17,32,18,26],
[25,30,42,39,23,19,0,12,28,35,37,27,35,17,38],
[31,36,40,40,28,29,39,0,26,38,36,25,37,31,37],
[38,21,23,39,16,34,23,25,0,29,33,23,25,31,24],
[16,13,22,17,12,25,16,13,22,0,19,10,27,13,24],
[22,18,30,37,13,27,14,15,18,32,0,23,20,18,28],
[32,28,36,36,19,34,24,26,28,41,28,0,35,30,39],
[23,30,36,32,14,19,16,14,26,24,31,16,0,16,36],
[32,30,38,37,25,33,34,20,20,38,33,21,35,0,30],
[26,9,38,35,9,25,13,14,27,27,23,12,15,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 40, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,24,18,15,22,13,16,23,21,13,27,21,21,26],
[22,0,20,17,20,22,14,21,16,27,15,18,21,17,23],
[27,31,0,26,27,25,22,23,21,31,26,24,25,17,21],
[33,34,25,0,22,18,15,22,18,29,19,21,28,21,26],
[36,31,24,29,0,28,19,22,14,21,22,18,28,23,22],
[29,29,26,33,23,0,20,16,23,26,14,22,23,22,22],
[38,37,29,36,32,31,0,31,29,32,36,30,26,30,24],
[35,30,28,29,29,35,20,0,22,32,28,34,17,27,26],
[28,35,30,33,37,28,22,29,0,29,25,29,21,20,21],
[30,24,20,22,30,25,19,19,22,0,17,27,24,24,23],
[38,36,25,32,29,37,15,23,26,34,0,29,30,23,25],
[24,33,27,30,33,29,21,17,22,24,22,0,27,20,23],
[30,30,26,23,23,28,25,34,30,27,21,24,0,22,24],
[30,34,34,30,28,29,21,24,31,27,28,31,29,0,15],
[25,28,30,25,29,29,27,25,30,28,26,28,27,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 41, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,42,30,40,48,42,33,20,28,34,34,34,32],
[9,0,29,36,16,25,40,29,13,13,6,19,19,27,18],
[9,22,0,34,22,33,26,15,25,17,18,26,12,26,13],
[9,15,17,0,11,21,30,15,8,9,1,15,7,9,6],
[21,35,29,40,0,39,40,23,27,24,19,27,19,31,20],
[11,26,18,30,12,0,30,11,21,18,10,28,3,11,16],
[3,11,25,21,11,21,0,18,22,9,3,14,3,17,9],
[9,22,36,36,28,40,33,0,26,19,18,26,33,35,13],
[18,38,26,43,24,30,29,25,0,24,14,30,22,24,30],
[31,38,34,42,27,33,42,32,27,0,26,27,16,30,22],
[23,45,33,50,32,41,48,33,37,25,0,35,25,35,30],
[17,32,25,36,24,23,37,25,21,24,16,0,9,23,20],
[17,32,39,44,32,48,48,18,29,35,26,42,0,44,30],
[17,24,25,42,20,40,34,16,27,21,16,28,7,0,14],
[19,33,38,45,31,35,42,38,21,29,21,31,21,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 42, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,22,21,22,18,25,22,22,24,20,21,18,28,26],
[25,0,19,23,27,23,31,23,22,28,22,26,19,27,24],
[29,32,0,31,32,30,32,26,28,32,21,31,24,31,33],
[30,28,20,0,22,29,29,26,29,29,23,25,23,25,31],
[29,24,19,29,0,19,19,21,24,24,17,22,20,25,29],
[33,28,21,22,32,0,24,19,28,29,23,28,23,28,29],
[26,20,19,22,32,27,0,22,22,29,22,24,18,24,20],
[29,28,25,25,30,32,29,0,32,33,25,26,28,30,33],
[29,29,23,22,27,23,29,19,0,24,21,23,22,23,29],
[27,23,19,22,27,22,22,18,27,0,27,26,23,23,22],
[31,29,30,28,34,28,29,26,30,24,0,24,28,30,30],
[30,25,20,26,29,23,27,25,28,25,27,0,25,29,26],
[33,32,27,28,31,28,33,23,29,28,23,26,0,29,31],
[23,24,20,26,26,23,27,21,28,28,21,22,22,0,28],
[25,27,18,20,22,22,31,18,22,29,21,25,20,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 43, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,33,28,22,33,32,32,30,23,22,25,31,22,26],
[21,0,28,28,18,30,29,25,24,24,22,21,26,24,25],
[18,23,0,26,20,25,28,24,24,21,28,24,28,23,27],
[23,23,25,0,20,23,25,25,21,16,19,18,25,24,23],
[29,33,31,31,0,30,29,30,28,23,24,26,31,31,27],
[18,21,26,28,21,0,22,22,26,21,19,20,21,26,19],
[19,22,23,26,22,29,0,27,27,20,23,21,28,27,25],
[19,26,27,26,21,29,24,0,21,22,21,19,23,27,28],
[21,27,27,30,23,25,24,30,0,19,18,17,30,20,26],
[28,27,30,35,28,30,31,29,32,0,28,25,29,26,27],
[29,29,23,32,27,32,28,30,33,23,0,23,33,26,26],
[26,30,27,33,25,31,30,32,34,26,28,0,31,25,26],
[20,25,23,26,20,30,23,28,21,22,18,20,0,23,23],
[29,27,28,27,20,25,24,24,31,25,25,26,28,0,23],
[25,26,24,28,24,32,26,23,25,24,25,25,28,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 44, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,33,33,22,26,42,21,33,11,31,22,24,30,26],
[21,0,14,22,22,21,14,20,31,27,25,21,11,20,14],
[18,37,0,19,24,9,38,24,27,25,18,16,36,17,11],
[18,29,32,0,20,20,25,20,38,23,25,16,29,30,31],
[29,29,27,31,0,18,23,18,25,19,12,27,29,28,22],
[25,30,42,31,33,0,38,35,33,25,27,34,29,38,38],
[9,37,13,26,28,13,0,15,31,17,22,18,15,21,20],
[30,31,27,31,33,16,36,0,24,29,16,39,29,33,23],
[18,20,24,13,26,18,20,27,0,18,11,27,11,20,20],
[40,24,26,28,32,26,34,22,33,0,38,29,19,32,22],
[20,26,33,26,39,24,29,35,40,13,0,29,26,30,22],
[29,30,35,35,24,17,33,12,24,22,22,0,33,32,22],
[27,40,15,22,22,22,36,22,40,32,25,18,0,30,20],
[21,31,34,21,23,13,30,18,31,19,21,19,21,0,21],
[25,37,40,20,29,13,31,28,31,29,29,29,31,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 45, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,19,29,31,33,27,36,35,34,24,33,24,31,27],
[24,0,25,25,26,29,27,29,23,26,19,29,20,25,22],
[32,26,0,25,42,25,28,32,30,24,31,31,27,24,29],
[22,26,26,0,31,23,25,30,27,23,30,29,28,24,30],
[20,25,9,20,0,19,17,25,25,23,18,22,18,17,16],
[18,22,26,28,32,0,27,34,26,26,29,19,28,26,29],
[24,24,23,26,34,24,0,29,27,20,27,25,26,24,29],
[15,22,19,21,26,17,22,0,23,13,21,19,24,21,25],
[16,28,21,24,26,25,24,28,0,24,26,28,22,30,28],
[17,25,27,28,28,25,31,38,27,0,28,25,21,26,29],
[27,32,20,21,33,22,24,30,25,23,0,20,24,24,22],
[18,22,20,22,29,32,26,32,23,26,31,0,22,30,30],
[27,31,24,23,33,23,25,27,29,30,27,29,0,22,34],
[20,26,27,27,34,25,27,30,21,25,27,21,29,0,24],
[24,29,22,21,35,22,22,26,23,22,29,21,17,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 46, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,32,30,24,34,37,37,27,33,33,33,35,32,34],
[15,0,18,10,21,20,22,15,19,17,19,23,21,16,25],
[19,33,0,30,29,27,35,23,26,40,35,34,28,27,32],
[21,41,21,0,33,37,37,25,32,31,33,29,30,32,41],
[27,30,22,18,0,21,29,22,26,24,21,27,25,21,33],
[17,31,24,14,30,0,37,17,23,32,34,31,32,31,31],
[14,29,16,14,22,14,0,17,17,26,16,21,17,25,25],
[14,36,28,26,29,34,34,0,27,34,34,37,33,32,34],
[24,32,25,19,25,28,34,24,0,34,32,32,25,28,36],
[18,34,11,20,27,19,25,17,17,0,20,24,26,19,32],
[18,32,16,18,30,17,35,17,19,31,0,30,28,24,31],
[18,28,17,22,24,20,30,14,19,27,21,0,16,19,34],
[16,30,23,21,26,19,34,18,26,25,23,35,0,23,27],
[19,35,24,19,30,20,26,19,23,32,27,32,28,0,33],
[17,26,19,10,18,20,26,17,15,19,20,17,24,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 47, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,23,26,29,22,25,23,28,25,25,28,33,26,32],
[30,0,30,25,27,23,29,26,25,25,28,28,35,29,28],
[28,21,0,18,29,21,21,25,23,26,26,25,26,25,28],
[25,26,33,0,25,26,29,26,24,28,30,26,31,30,25],
[22,24,22,26,0,20,29,21,18,29,27,28,27,27,28],
[29,28,30,25,31,0,28,27,23,30,27,28,32,28,30],
[26,22,30,22,22,23,0,23,24,27,22,27,29,26,23],
[28,25,26,25,30,24,28,0,24,29,25,23,29,31,30],
[23,26,28,27,33,28,27,27,0,30,26,24,34,29,27],
[26,26,25,23,22,21,24,22,21,0,24,23,29,25,24],
[26,23,25,21,24,24,29,26,25,27,0,23,29,32,26],
[23,23,26,25,23,23,24,28,27,28,28,0,29,26,25],
[18,16,25,20,24,19,22,22,17,22,22,22,0,22,23],
[25,22,26,21,24,23,25,20,22,26,19,25,29,0,21],
[19,23,23,26,23,21,28,21,24,27,25,26,28,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 48, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,24,21,20,20,22,30,24,17,30,21,33,33,28],
[30,0,33,33,27,23,28,28,33,39,40,22,29,26,27],
[27,18,0,25,22,20,25,15,17,24,29,20,26,26,28],
[30,18,26,0,23,17,30,23,20,24,28,23,28,28,26],
[31,24,29,28,0,23,29,30,31,26,43,27,26,30,29],
[31,28,31,34,28,0,36,32,29,24,36,23,36,33,29],
[29,23,26,21,22,15,0,21,26,21,35,24,26,25,32],
[21,23,36,28,21,19,30,0,31,23,35,25,22,26,36],
[27,18,34,31,20,22,25,20,0,29,34,15,21,30,26],
[34,12,27,27,25,27,30,28,22,0,28,24,23,21,29],
[21,11,22,23,8,15,16,16,17,23,0,15,17,22,26],
[30,29,31,28,24,28,27,26,36,27,36,0,25,31,30],
[18,22,25,23,25,15,25,29,30,28,34,26,0,21,19],
[18,25,25,23,21,18,26,25,21,30,29,20,30,0,26],
[23,24,23,25,22,22,19,15,25,22,25,21,32,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 49, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,33,27,31,25,28,21,33,30,33,22,30,29,34],
[20,0,19,18,18,21,23,15,18,16,18,21,20,20,21],
[18,32,0,29,17,24,20,21,18,31,37,20,16,28,28],
[24,33,22,0,24,28,25,23,21,34,28,26,23,28,31],
[20,33,34,27,0,31,28,25,26,40,32,31,27,26,30],
[26,30,27,23,20,0,24,23,24,32,31,24,23,23,30],
[23,28,31,26,23,27,0,27,24,30,26,28,25,28,29],
[30,36,30,28,26,28,24,0,30,34,32,23,23,32,29],
[18,33,33,30,25,27,27,21,0,33,32,31,28,30,22],
[21,35,20,17,11,19,21,17,18,0,24,17,20,22,19],
[18,33,14,23,19,20,25,19,19,27,0,20,22,27,26],
[29,30,31,25,20,27,23,28,20,34,31,0,24,29,30],
[21,31,35,28,24,28,26,28,23,31,29,27,0,28,29],
[22,31,23,23,25,28,23,19,21,29,24,22,23,0,28],
[17,30,23,20,21,21,22,22,29,32,25,21,22,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 50, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,30,31,30,32,27,25,27,23,23,26,31,30,31],
[20,0,27,25,23,27,24,23,23,24,25,21,23,22,27],
[21,24,0,20,26,26,22,18,22,22,23,21,22,21,24],
[20,26,31,0,24,28,27,27,25,26,23,23,26,23,24],
[21,28,25,27,0,31,28,21,22,26,21,23,26,26,26],
[19,24,25,23,20,0,20,20,19,24,23,20,25,25,23],
[24,27,29,24,23,31,0,26,28,28,23,22,29,26,28],
[26,28,33,24,30,31,25,0,27,27,27,23,32,27,29],
[24,28,29,26,29,32,23,24,0,25,25,25,26,24,28],
[28,27,29,25,25,27,23,24,26,0,25,23,27,19,27],
[28,26,28,28,30,28,28,24,26,26,0,25,25,25,29],
[25,30,30,28,28,31,29,28,26,28,26,0,24,26,27],
[20,28,29,25,25,26,22,19,25,24,26,27,0,25,23],
[21,29,30,28,25,26,25,24,27,32,26,25,26,0,30],
[20,24,27,27,25,28,23,22,23,24,22,24,28,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 51, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,29,33,32,22,27,29,25,29,27,17,34,26],
[28,0,29,28,36,31,28,24,25,28,26,23,21,31,26],
[25,22,0,27,33,26,23,20,25,26,23,20,23,28,27],
[22,23,24,0,22,29,26,25,31,24,21,23,21,31,26],
[18,15,18,29,0,24,25,19,26,27,19,20,22,25,25],
[19,20,25,22,27,0,24,22,19,25,25,24,18,30,30],
[29,23,28,25,26,27,0,22,26,27,23,26,18,31,27],
[24,27,31,26,32,29,29,0,26,25,27,27,15,34,33],
[22,26,26,20,25,32,25,25,0,25,26,20,23,25,25],
[26,23,25,27,24,26,24,26,26,0,24,24,27,35,30],
[22,25,28,30,32,26,28,24,25,27,0,25,23,32,30],
[24,28,31,28,31,27,25,24,31,27,26,0,24,29,26],
[34,30,28,30,29,33,33,36,28,24,28,27,0,34,32],
[17,20,23,20,26,21,20,17,26,16,19,22,17,0,19],
[25,25,24,25,26,21,24,18,26,21,21,25,19,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 52, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,20,29,20,33,26,29,26,32,26,19,25,35,40],
[27,0,24,26,34,23,34,23,28,34,28,18,20,29,31],
[31,27,0,29,27,26,36,25,27,34,29,28,23,31,35],
[22,25,22,0,19,22,20,23,28,27,27,15,18,23,27],
[31,17,24,32,0,18,31,18,28,37,26,23,16,26,32],
[18,28,25,29,33,0,35,30,23,31,27,17,19,20,28],
[25,17,15,31,20,16,0,17,21,36,19,20,18,26,29],
[22,28,26,28,33,21,34,0,26,29,30,20,18,33,27],
[25,23,24,23,23,28,30,25,0,25,28,25,22,27,30],
[19,17,17,24,14,20,15,22,26,0,19,20,21,19,26],
[25,23,22,24,25,24,32,21,23,32,0,23,24,31,30],
[32,33,23,36,28,34,31,31,26,31,28,0,31,34,35],
[26,31,28,33,35,32,33,33,29,30,27,20,0,26,32],
[16,22,20,28,25,31,25,18,24,32,20,17,25,0,34],
[11,20,16,24,19,23,22,24,21,25,21,16,19,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 53, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,25,33,27,29,26,26,23,27,19,30,30,36,29],
[22,0,20,23,26,29,23,23,19,26,17,26,20,29,21],
[26,31,0,30,25,32,19,26,19,27,30,31,28,33,27],
[18,28,21,0,25,29,25,23,21,27,23,25,26,30,19],
[24,25,26,26,0,30,26,27,26,31,26,29,29,34,29],
[22,22,19,22,21,0,24,17,22,23,13,19,23,28,22],
[25,28,32,26,25,27,0,26,24,30,22,33,31,34,29],
[25,28,25,28,24,34,25,0,25,28,22,32,35,36,26],
[28,32,32,30,25,29,27,26,0,29,24,33,33,33,27],
[24,25,24,24,20,28,21,23,22,0,19,26,22,30,24],
[32,34,21,28,25,38,29,29,27,32,0,31,37,38,30],
[21,25,20,26,22,32,18,19,18,25,20,0,32,28,26],
[21,31,23,25,22,28,20,16,18,29,14,19,0,29,18],
[15,22,18,21,17,23,17,15,18,21,13,23,22,0,20],
[22,30,24,32,22,29,22,25,24,27,21,25,33,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 54, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,26,30,26,17,10,22,13,23,26,25,20,20,26],
[22,0,23,26,15,21,17,27,12,15,23,24,26,19,28],
[25,28,0,22,18,21,16,24,16,24,27,25,22,22,32],
[21,25,29,0,18,22,16,22,19,24,20,26,18,20,34],
[25,36,33,33,0,27,23,24,17,26,31,33,29,18,34],
[34,30,30,29,24,0,23,26,26,28,36,32,33,26,30],
[41,34,35,35,28,28,0,30,22,23,36,31,32,27,37],
[29,24,27,29,27,25,21,0,21,29,31,27,34,14,32],
[38,39,35,32,34,25,29,30,0,34,39,38,29,24,39],
[28,36,27,27,25,23,28,22,17,0,27,27,24,23,27],
[25,28,24,31,20,15,15,20,12,24,0,26,22,18,25],
[26,27,26,25,18,19,20,24,13,24,25,0,27,15,29],
[31,25,29,33,22,18,19,17,22,27,29,24,0,19,27],
[31,32,29,31,33,25,24,37,27,28,33,36,32,0,33],
[25,23,19,17,17,21,14,19,12,24,26,22,24,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 55, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,22,29,24,23,24,23,23,22,27,25,28,22,19],
[26,0,24,35,26,27,29,23,29,26,34,27,26,21,28],
[29,27,0,29,25,23,30,27,29,31,31,24,26,22,19],
[22,16,22,0,16,17,21,19,23,16,22,18,24,16,18],
[27,25,26,35,0,24,26,23,26,31,31,26,27,24,26],
[28,24,28,34,27,0,26,27,22,24,32,26,25,27,22],
[27,22,21,30,25,25,0,25,22,29,25,25,24,22,19],
[28,28,24,32,28,24,26,0,22,22,28,26,29,23,21],
[28,22,22,28,25,29,29,29,0,33,28,26,24,25,24],
[29,25,20,35,20,27,22,29,18,0,25,22,30,17,19],
[24,17,20,29,20,19,26,23,23,26,0,24,24,21,24],
[26,24,27,33,25,25,26,25,25,29,27,0,22,27,20],
[23,25,25,27,24,26,27,22,27,21,27,29,0,24,23],
[29,30,29,35,27,24,29,28,26,34,30,24,27,0,22],
[32,23,32,33,25,29,32,30,27,32,27,31,28,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 56, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,24,30,24,32,27,33,26,30,27,30,20,19,24],
[24,0,15,23,16,32,27,20,22,20,26,23,22,22,29],
[27,36,0,25,21,34,37,34,29,33,30,35,31,28,32],
[21,28,26,0,23,33,28,34,34,24,27,24,28,20,27],
[27,35,30,28,0,41,32,27,35,34,35,38,31,25,27],
[19,19,17,18,10,0,26,16,20,13,16,19,17,13,20],
[24,24,14,23,19,25,0,25,24,26,22,27,18,17,18],
[18,31,17,17,24,35,26,0,20,25,17,29,24,21,19],
[25,29,22,17,16,31,27,31,0,28,26,28,27,26,33],
[21,31,18,27,17,38,25,26,23,0,26,29,24,24,28],
[24,25,21,24,16,35,29,34,25,25,0,30,25,21,24],
[21,28,16,27,13,32,24,22,23,22,21,0,24,16,19],
[31,29,20,23,20,34,33,27,24,27,26,27,0,22,29],
[32,29,23,31,26,38,34,30,25,27,30,35,29,0,26],
[27,22,19,24,24,31,33,32,18,23,27,32,22,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 57, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,25,35,31,26,25,24,26,33,25,31,30,23,21],
[16,0,20,25,22,25,19,13,22,30,19,26,18,11,26],
[26,31,0,25,26,27,25,18,22,34,24,32,26,25,23],
[16,26,26,0,24,17,26,14,14,37,19,27,25,19,17],
[20,29,25,27,0,17,27,10,21,30,17,21,15,26,21],
[25,26,24,34,34,0,28,30,32,29,28,27,31,27,25],
[26,32,26,25,24,23,0,17,20,30,19,17,22,27,14],
[27,38,33,37,41,21,34,0,31,43,27,35,35,34,26],
[25,29,29,37,30,19,31,20,0,37,21,26,27,30,25],
[18,21,17,14,21,22,21,8,14,0,16,16,16,17,15],
[26,32,27,32,34,23,32,24,30,35,0,32,31,34,30],
[20,25,19,24,30,24,34,16,25,35,19,0,24,25,19],
[21,33,25,26,36,20,29,16,24,35,20,27,0,29,20],
[28,40,26,32,25,24,24,17,21,34,17,26,22,0,27],
[30,25,28,34,30,26,37,25,26,36,21,32,31,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 58, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,20,27,23,19,20,27,18,25,30,21,20,20,28],
[25,0,29,27,29,18,24,30,22,26,25,27,23,23,26],
[31,22,0,32,27,28,35,29,31,34,36,36,27,32,29],
[24,24,19,0,23,21,21,19,21,21,22,26,21,17,19],
[28,22,24,28,0,22,26,33,26,29,25,21,24,19,26],
[32,33,23,30,29,0,29,36,23,24,27,30,27,21,26],
[31,27,16,30,25,22,0,29,29,26,32,28,21,22,25],
[24,21,22,32,18,15,22,0,19,25,28,24,22,17,26],
[33,29,20,30,25,28,22,32,0,30,27,25,27,23,25],
[26,25,17,30,22,27,25,26,21,0,29,28,23,20,27],
[21,26,15,29,26,24,19,23,24,22,0,25,27,22,23],
[30,24,15,25,30,21,23,27,26,23,26,0,21,30,27],
[31,28,24,30,27,24,30,29,24,28,24,30,0,27,30],
[31,28,19,34,32,30,29,34,28,31,29,21,24,0,28],
[23,25,22,32,25,25,26,25,26,24,28,24,21,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 59, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,21,24,23,29,22,24,31,25,30,26,20,29,19],
[25,0,20,19,27,28,23,20,24,22,28,26,22,26,28],
[30,31,0,26,30,28,27,28,28,24,34,29,28,32,30],
[27,32,25,0,27,35,27,32,27,27,33,30,22,33,27],
[28,24,21,24,0,29,21,26,23,21,32,23,29,29,26],
[22,23,23,16,22,0,18,18,26,16,23,26,22,27,24],
[29,28,24,24,30,33,0,28,28,24,32,29,22,34,27],
[27,31,23,19,25,33,23,0,27,20,28,26,24,34,26],
[20,27,23,24,28,25,23,24,0,24,28,31,25,21,25],
[26,29,27,24,30,35,27,31,27,0,32,30,26,31,23],
[21,23,17,18,19,28,19,23,23,19,0,27,18,25,21],
[25,25,22,21,28,25,22,25,20,21,24,0,27,31,20],
[31,29,23,29,22,29,29,27,26,25,33,24,0,28,24],
[22,25,19,18,22,24,17,17,30,20,26,20,23,0,29],
[32,23,21,24,25,27,24,25,26,28,30,31,27,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 60, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,33,27,27,27,31,33,21,23,26,31,31,29,31],
[20,0,22,24,23,25,29,28,23,27,18,27,26,21,26],
[18,29,0,25,29,24,34,30,23,30,24,33,29,27,29],
[24,27,26,0,23,21,31,24,26,26,23,27,26,25,36],
[24,28,22,28,0,27,27,29,26,32,20,32,22,27,27],
[24,26,27,30,24,0,27,27,27,34,27,30,30,24,25],
[20,22,17,20,24,24,0,26,17,24,17,25,23,21,27],
[18,23,21,27,22,24,25,0,22,29,20,29,20,21,24],
[30,28,28,25,25,24,34,29,0,30,24,30,32,34,29],
[28,24,21,25,19,17,27,22,21,0,20,31,26,25,28],
[25,33,27,28,31,24,34,31,27,31,0,34,33,31,31],
[20,24,18,24,19,21,26,22,21,20,17,0,19,20,24],
[20,25,22,25,29,21,28,31,19,25,18,32,0,18,23],
[22,30,24,26,24,27,30,30,17,26,20,31,33,0,26],
[20,25,22,15,24,26,24,27,22,23,20,27,28,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 61, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,23,8,20,18,14,21,15,20,10,3,23,22,7],
[46,0,24,31,34,31,36,33,37,48,36,33,37,39,29],
[28,27,0,19,28,28,18,41,19,44,26,19,19,47,18],
[43,20,32,0,34,43,44,36,25,47,31,23,35,31,16],
[31,17,23,17,0,12,23,33,22,32,23,15,18,34,6],
[33,20,23,8,39,0,26,36,28,48,35,25,32,23,16],
[37,15,33,7,28,25,0,32,25,32,15,15,34,31,18],
[30,18,10,15,18,15,19,0,25,43,19,15,19,21,15],
[36,14,32,26,29,23,26,26,0,25,29,28,32,31,16],
[31,3,7,4,19,3,19,8,26,0,19,15,20,9,9],
[41,15,25,20,28,16,36,32,22,32,0,28,28,22,18],
[48,18,32,28,36,26,36,36,23,36,23,0,35,30,16],
[28,14,32,16,33,19,17,32,19,31,23,16,0,31,18],
[29,12,4,20,17,28,20,30,20,42,29,21,20,0,13],
[44,22,33,35,45,35,33,36,35,42,33,35,33,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 62, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,22,20,18,17,23,31,23,26,19,23,26,29],
[28,0,27,31,29,25,23,26,30,27,31,30,28,28,32],
[25,24,0,28,21,28,19,22,27,23,23,20,25,24,23],
[29,20,23,0,23,20,18,29,33,23,23,20,22,26,27],
[31,22,30,28,0,21,17,27,35,22,26,24,30,27,29],
[33,26,23,31,30,0,27,28,36,31,33,29,27,26,32],
[34,28,32,33,34,24,0,27,40,27,32,24,25,29,34],
[28,25,29,22,24,23,24,0,34,23,27,27,25,23,28],
[20,21,24,18,16,15,11,17,0,15,21,18,13,22,20],
[28,24,28,28,29,20,24,28,36,0,27,26,24,26,30],
[25,20,28,28,25,18,19,24,30,24,0,22,22,24,24],
[32,21,31,31,27,22,27,24,33,25,29,0,25,28,30],
[28,23,26,29,21,24,26,26,38,27,29,26,0,28,31],
[25,23,27,25,24,25,22,28,29,25,27,23,23,0,30],
[22,19,28,24,22,19,17,23,31,21,27,21,20,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 63, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,19,20,23,22,32,19,17,23,24,21,20,23,17],
[30,0,28,31,27,33,25,23,23,24,28,29,23,26,31],
[32,23,0,31,28,31,29,28,26,22,28,26,25,25,23],
[31,20,20,0,28,31,31,25,17,25,28,31,19,27,26],
[28,24,23,23,0,31,25,27,21,24,26,29,25,22,26],
[29,18,20,20,20,0,22,23,16,27,25,25,21,22,21],
[19,26,22,20,26,29,0,29,18,23,24,30,22,25,27],
[32,28,23,26,24,28,22,0,21,24,26,29,25,25,27],
[34,28,25,34,30,35,33,30,0,32,32,32,30,31,31],
[28,27,29,26,27,24,28,27,19,0,31,29,24,23,25],
[27,23,23,23,25,26,27,25,19,20,0,23,16,26,21],
[30,22,25,20,22,26,21,22,19,22,28,0,26,24,23],
[31,28,26,32,26,30,29,26,21,27,35,25,0,33,26],
[28,25,26,24,29,29,26,26,20,28,25,27,18,0,25],
[34,20,28,25,25,30,24,24,20,26,30,28,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 64, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,25,29,31,27,27,26,30,28,23,26,33,26,30],
[25,0,21,24,20,22,19,18,25,21,20,25,26,20,29],
[26,30,0,26,25,24,25,27,25,23,27,22,29,28,32],
[22,27,25,0,29,29,25,26,25,18,24,28,31,29,30],
[20,31,26,22,0,26,25,28,24,21,25,24,27,27,26],
[24,29,27,22,25,0,23,25,25,21,28,26,30,24,29],
[24,32,26,26,26,28,0,28,24,24,27,28,36,31,30],
[25,33,24,25,23,26,23,0,22,22,28,24,27,28,28],
[21,26,26,26,27,26,27,29,0,25,26,24,26,30,24],
[23,30,28,33,30,30,27,29,26,0,25,32,32,33,35],
[28,31,24,27,26,23,24,23,25,26,0,19,27,27,28],
[25,26,29,23,27,25,23,27,27,19,32,0,30,27,33],
[18,25,22,20,24,21,15,24,25,19,24,21,0,27,20],
[25,31,23,22,24,27,20,23,21,18,24,24,24,0,30],
[21,22,19,21,25,22,21,23,27,16,23,18,31,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 65, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,23,23,32,26,27,28,24,33,29,33,32,30],
[28,0,24,29,24,25,22,31,24,26,28,26,28,34,30],
[25,27,0,29,26,36,27,32,24,33,35,29,31,33,34],
[28,22,22,0,19,25,26,22,26,30,33,28,26,34,26],
[28,27,25,32,0,33,23,30,25,26,35,30,32,36,31],
[19,26,15,26,18,0,24,21,25,25,28,31,27,30,29],
[25,29,24,25,28,27,0,31,23,29,30,29,27,28,31],
[24,20,19,29,21,30,20,0,23,27,30,29,31,30,28],
[23,27,27,25,26,26,28,28,0,25,32,30,28,30,34],
[27,25,18,21,25,26,22,24,26,0,34,24,31,31,22],
[18,23,16,18,16,23,21,21,19,17,0,22,20,26,27],
[22,25,22,23,21,20,22,22,21,27,29,0,27,23,32],
[18,23,20,25,19,24,24,20,23,20,31,24,0,30,19],
[19,17,18,17,15,21,23,21,21,20,25,28,21,0,27],
[21,21,17,25,20,22,20,23,17,29,24,19,32,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 66, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,22,31,27,29,24,27,29,25,25,27,27,25,30],
[25,0,24,25,24,21,19,19,30,24,25,24,26,11,34],
[29,27,0,33,27,28,27,28,22,26,28,32,29,24,36],
[20,26,18,0,20,21,20,21,17,18,28,22,26,14,29],
[24,27,24,31,0,23,22,36,27,22,24,27,29,19,34],
[22,30,23,30,28,0,20,19,24,28,29,30,25,24,34],
[27,32,24,31,29,31,0,26,28,28,28,33,28,20,33],
[24,32,23,30,15,32,25,0,28,23,26,23,28,20,35],
[22,21,29,34,24,27,23,23,0,28,28,27,32,21,31],
[26,27,25,33,29,23,23,28,23,0,35,31,34,30,39],
[26,26,23,23,27,22,23,25,23,16,0,28,26,14,32],
[24,27,19,29,24,21,18,28,24,20,23,0,24,15,37],
[24,25,22,25,22,26,23,23,19,17,25,27,0,16,26],
[26,40,27,37,32,27,31,31,30,21,37,36,35,0,42],
[21,17,15,22,17,17,18,16,20,12,19,14,25,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 67, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,26,30,28,16,21,26,29,32,27,28,26,26,31],
[30,0,25,28,31,27,24,27,29,31,29,27,30,27,33],
[25,26,0,26,29,19,21,23,31,34,31,30,23,27,25],
[21,23,25,0,28,20,23,25,27,32,26,29,31,23,28],
[23,20,22,23,0,20,16,24,23,22,21,23,26,20,28],
[35,24,32,31,31,0,21,34,29,36,32,32,32,26,31],
[30,27,30,28,35,30,0,31,25,30,32,31,30,29,32],
[25,24,28,26,27,17,20,0,27,28,29,33,26,29,28],
[22,22,20,24,28,22,26,24,0,29,30,31,24,21,26],
[19,20,17,19,29,15,21,23,22,0,26,27,24,18,28],
[24,22,20,25,30,19,19,22,21,25,0,24,21,21,23],
[23,24,21,22,28,19,20,18,20,24,27,0,17,21,21],
[25,21,28,20,25,19,21,25,27,27,30,34,0,23,26],
[25,24,24,28,31,25,22,22,30,33,30,30,28,0,29],
[20,18,26,23,23,20,19,23,25,23,28,30,25,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 68, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,29,32,25,23,27,23,18,21,32,22,27,31,25],
[22,0,20,26,25,24,27,29,20,19,24,27,23,26,29],
[22,31,0,28,31,28,27,23,22,26,24,18,29,30,27],
[19,25,23,0,22,15,20,21,15,19,22,21,22,27,22],
[26,26,20,29,0,26,21,26,20,22,27,21,23,24,23],
[28,27,23,36,25,0,25,31,23,23,29,24,25,25,26],
[24,24,24,31,30,26,0,25,21,22,24,24,22,21,22],
[28,22,28,30,25,20,26,0,24,25,25,17,23,34,27],
[33,31,29,36,31,28,30,27,0,23,30,25,27,31,24],
[30,32,25,32,29,28,29,26,28,0,29,25,27,33,31],
[19,27,27,29,24,22,27,26,21,22,0,27,25,33,27],
[29,24,33,30,30,27,27,34,26,26,24,0,29,31,30],
[24,28,22,29,28,26,29,28,24,24,26,22,0,23,27],
[20,25,21,24,27,26,30,17,20,18,18,20,28,0,25],
[26,22,24,29,28,25,29,24,27,20,24,21,24,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 69, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,22,31,24,19,22,29,25,24,24,28,30,29,22],
[26,0,30,27,25,24,30,31,26,27,26,25,31,25,25],
[29,21,0,25,28,20,28,25,22,18,21,25,22,24,28],
[20,24,26,0,19,21,25,25,26,22,22,23,24,22,25],
[27,26,23,32,0,25,30,28,26,27,24,27,29,26,28],
[32,27,31,30,26,0,31,32,21,30,26,30,28,29,26],
[29,21,23,26,21,20,0,26,22,22,24,25,27,23,26],
[22,20,26,26,23,19,25,0,24,21,22,19,21,20,24],
[26,25,29,25,25,30,29,27,0,30,26,32,29,26,30],
[27,24,33,29,24,21,29,30,21,0,20,29,27,28,29],
[27,25,30,29,27,25,27,29,25,31,0,31,30,31,27],
[23,26,26,28,24,21,26,32,19,22,20,0,23,24,29],
[21,20,29,27,22,23,24,30,22,24,21,28,0,27,26],
[22,26,27,29,25,22,28,31,25,23,20,27,24,0,24],
[29,26,23,26,23,25,25,27,21,22,24,22,25,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 70, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,23,28,22,28,26,24,31,30,26,27,27,30,25],
[26,0,26,31,28,27,22,29,30,34,27,28,23,31,27],
[28,25,0,26,22,31,25,28,31,31,28,31,27,31,28],
[23,20,25,0,24,27,30,24,25,27,23,29,22,28,26],
[29,23,29,27,0,29,23,28,32,28,27,29,20,33,26],
[23,24,20,24,22,0,18,23,21,32,21,21,22,25,22],
[25,29,26,21,28,33,0,26,36,36,31,28,27,32,26],
[27,22,23,27,23,28,25,0,32,29,30,29,22,34,29],
[20,21,20,26,19,30,15,19,0,29,24,23,25,26,22],
[21,17,20,24,23,19,15,22,22,0,23,25,17,23,18],
[25,24,23,28,24,30,20,21,27,28,0,28,27,32,25],
[24,23,20,22,22,30,23,22,28,26,23,0,25,28,24],
[24,28,24,29,31,29,24,29,26,34,24,26,0,30,26],
[21,20,20,23,18,26,19,17,25,28,19,23,21,0,13],
[26,24,23,25,25,29,25,22,29,33,26,27,25,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 71, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,19,18,21,18,25,25,27,20,25,18,23,20,18],
[34,0,26,27,24,21,24,21,24,26,31,29,21,23,27],
[32,25,0,24,31,24,27,29,26,27,31,23,25,25,26],
[33,24,27,0,26,21,31,25,24,27,27,33,30,25,27],
[30,27,20,25,0,22,30,22,27,23,22,22,19,23,22],
[33,30,27,30,29,0,32,28,32,25,28,25,29,24,28],
[26,27,24,20,21,19,0,18,21,22,28,22,20,21,23],
[26,30,22,26,29,23,33,0,26,27,29,27,22,19,25],
[24,27,25,27,24,19,30,25,0,26,27,30,22,26,31],
[31,25,24,24,28,26,29,24,25,0,31,26,25,27,30],
[26,20,20,24,29,23,23,22,24,20,0,23,25,22,26],
[33,22,28,18,29,26,29,24,21,25,28,0,23,24,22],
[28,30,26,21,32,22,31,29,29,26,26,28,0,31,27],
[31,28,26,26,28,27,30,32,25,24,29,27,20,0,26],
[33,24,25,24,29,23,28,26,20,21,25,29,24,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 72, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,9,14,23,26,20,9,15,17,19,19,19,5,17],
[28,0,23,26,44,25,34,30,34,36,39,20,28,19,29],
[42,28,0,32,35,39,12,31,24,16,30,31,41,16,29],
[37,25,19,0,27,25,30,26,11,34,22,16,26,17,27],
[28,7,16,24,0,20,19,22,7,20,19,15,25,13,12],
[25,26,12,26,31,0,16,17,25,27,28,31,25,10,17],
[31,17,39,21,32,35,0,23,21,12,23,26,30,17,24],
[42,21,20,25,29,34,28,0,13,13,25,23,38,6,12],
[36,17,27,40,44,26,30,38,0,32,33,11,35,25,25],
[34,15,35,17,31,24,39,38,19,0,22,23,27,31,25],
[32,12,21,29,32,23,28,26,18,29,0,7,14,15,22],
[32,31,20,35,36,20,25,28,40,28,44,0,27,21,21],
[32,23,10,25,26,26,21,13,16,24,37,24,0,5,11],
[46,32,35,34,38,41,34,45,26,20,36,30,46,0,25],
[34,22,22,24,39,34,27,39,26,26,29,30,40,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 73, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,24,20,29,23,21,22,19,28,27,17,24,24,22],
[25,0,28,22,23,24,20,21,22,28,25,20,19,22,20],
[27,23,0,16,19,25,18,16,20,27,32,13,12,23,18],
[31,29,35,0,25,28,20,25,20,33,29,23,28,28,24],
[22,28,32,26,0,31,22,26,25,29,30,27,26,25,28],
[28,27,26,23,20,0,17,18,19,28,29,15,22,25,25],
[30,31,33,31,29,34,0,25,30,34,31,26,32,28,29],
[29,30,35,26,25,33,26,0,26,27,30,28,27,28,30],
[32,29,31,31,26,32,21,25,0,36,31,29,29,28,27],
[23,23,24,18,22,23,17,24,15,0,23,17,17,23,19],
[24,26,19,22,21,22,20,21,20,28,0,18,19,23,20],
[34,31,38,28,24,36,25,23,22,34,33,0,31,33,30],
[27,32,39,23,25,29,19,24,22,34,32,20,0,33,22],
[27,29,28,23,26,26,23,23,23,28,28,18,18,0,22],
[29,31,33,27,23,26,22,21,24,32,31,21,29,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 74, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,27,29,8,40,24,18,16,23,16,25,40,25,16],
[21,0,15,14,14,24,21,13,15,26,25,21,15,10,10],
[24,36,0,29,7,29,29,9,11,29,26,35,38,29,13],
[22,37,22,0,11,32,32,11,28,18,18,31,39,15,16],
[43,37,44,40,0,46,44,32,42,30,22,33,40,39,40],
[11,27,22,19,5,0,12,13,15,22,12,24,32,15,10],
[27,30,22,19,7,39,0,19,24,22,15,27,28,21,16],
[33,38,42,40,19,38,32,0,37,28,33,33,39,32,34],
[35,36,40,23,9,36,27,14,0,26,25,33,44,29,30],
[28,25,22,33,21,29,29,23,25,0,40,29,30,28,29],
[35,26,25,33,29,39,36,18,26,11,0,22,37,33,33],
[26,30,16,20,18,27,24,18,18,22,29,0,24,19,21],
[11,36,13,12,11,19,23,12,7,21,14,27,0,22,16],
[26,41,22,36,12,36,30,19,22,23,18,32,29,0,24],
[35,41,38,35,11,41,35,17,21,22,18,30,35,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 75, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,31,25,30,27,28,30,32,28,32,34,33,29,27],
[23,0,22,15,21,18,26,18,18,19,20,29,26,23,19],
[20,29,0,26,26,31,28,29,30,31,30,31,27,29,25],
[26,36,25,0,30,26,33,25,29,32,35,34,30,27,27],
[21,30,25,21,0,23,26,27,28,25,30,32,30,21,25],
[24,33,20,25,28,0,31,27,29,28,28,31,27,24,25],
[23,25,23,18,25,20,0,29,24,31,22,27,22,21,20],
[21,33,22,26,24,24,22,0,29,24,27,30,31,22,25],
[19,33,21,22,23,22,27,22,0,27,26,33,29,17,25],
[23,32,20,19,26,23,20,27,24,0,22,31,24,24,19],
[19,31,21,16,21,23,29,24,25,29,0,29,27,22,22],
[17,22,20,17,19,20,24,21,18,20,22,0,17,18,18],
[18,25,24,21,21,24,29,20,22,27,24,34,0,24,21],
[22,28,22,24,30,27,30,29,34,27,29,33,27,0,25],
[24,32,26,24,26,26,31,26,26,32,29,33,30,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 76, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,23,32,26,30,31,26,23,29,26,24,20,22,17],
[32,0,29,33,28,29,35,30,22,30,33,24,26,35,21],
[28,22,0,23,22,23,25,28,22,24,28,22,14,25,21],
[19,18,28,0,23,24,29,25,19,24,31,23,22,25,21],
[25,23,29,28,0,28,31,28,24,28,27,26,17,26,13],
[21,22,28,27,23,0,24,32,26,29,26,18,24,20,22],
[20,16,26,22,20,27,0,26,22,26,31,16,15,21,16],
[25,21,23,26,23,19,25,0,21,22,22,22,18,22,14],
[28,29,29,32,27,25,29,30,0,27,29,19,20,21,25],
[22,21,27,27,23,22,25,29,24,0,23,25,18,27,16],
[25,18,23,20,24,25,20,29,22,28,0,23,15,25,17],
[27,27,29,28,25,33,35,29,32,26,28,0,25,28,29],
[31,25,37,29,34,27,36,33,31,33,36,26,0,31,30],
[29,16,26,26,25,31,30,29,30,24,26,23,20,0,23],
[34,30,30,30,38,29,35,37,26,35,34,22,21,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 77, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,19,21,15,14,19,20,24,24,19,22,25,16,17],
[32,0,30,31,24,29,28,26,29,35,29,36,34,28,23],
[32,21,0,29,25,25,24,21,33,36,29,33,27,26,28],
[30,20,22,0,24,15,24,24,25,31,22,26,24,27,19],
[36,27,26,27,0,23,28,25,23,33,24,31,26,31,26],
[37,22,26,36,28,0,28,29,29,33,30,32,26,27,28],
[32,23,27,27,23,23,0,25,28,33,24,30,27,26,27],
[31,25,30,27,26,22,26,0,27,33,22,31,27,27,25],
[27,22,18,26,28,22,23,24,0,32,21,30,24,23,24],
[27,16,15,20,18,18,18,18,19,0,19,19,21,15,18],
[32,22,22,29,27,21,27,29,30,32,0,27,31,25,25],
[29,15,18,25,20,19,21,20,21,32,24,0,20,17,18],
[26,17,24,27,25,25,24,24,27,30,20,31,0,30,18],
[35,23,25,24,20,24,25,24,28,36,26,34,21,0,30],
[34,28,23,32,25,23,24,26,27,33,26,33,33,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 78, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,24,27,19,30,27,29,25,27,26,26,31,32,24],
[30,0,26,25,23,30,28,30,27,28,33,32,33,32,27],
[27,25,0,22,27,27,27,27,30,27,29,34,29,29,26],
[24,26,29,0,24,30,29,31,26,24,26,29,32,33,24],
[32,28,24,27,0,30,29,28,27,28,29,34,32,34,28],
[21,21,24,21,21,0,24,27,19,19,24,26,29,25,20],
[24,23,24,22,22,27,0,23,21,24,26,29,28,30,25],
[22,21,24,20,23,24,28,0,22,25,23,28,31,27,20],
[26,24,21,25,24,32,30,29,0,28,25,29,31,29,25],
[24,23,24,27,23,32,27,26,23,0,24,33,28,28,27],
[25,18,22,25,22,27,25,28,26,27,0,27,24,31,21],
[25,19,17,22,17,25,22,23,22,18,24,0,25,21,16],
[20,18,22,19,19,22,23,20,20,23,27,26,0,27,21],
[19,19,22,18,17,26,21,24,22,23,20,30,24,0,20],
[27,24,25,27,23,31,26,31,26,24,30,35,30,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 79, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,23,33,35,32,31,34,34,21,24,24,32,25,31],
[27,0,27,37,30,32,29,40,30,27,28,37,30,31,25],
[28,24,0,37,30,29,24,36,26,29,25,25,34,29,23],
[18,14,14,0,33,26,20,24,25,28,17,19,30,19,15],
[16,21,21,18,0,17,18,32,10,13,18,19,26,15,14],
[19,19,22,25,34,0,26,31,23,29,18,17,29,23,22],
[20,22,27,31,33,25,0,40,17,22,22,29,33,23,19],
[17,11,15,27,19,20,11,0,12,24,13,14,25,17,16],
[17,21,25,26,41,28,34,39,0,30,30,21,36,17,19],
[30,24,22,23,38,22,29,27,21,0,20,26,30,18,20],
[27,23,26,34,33,33,29,38,21,31,0,22,31,25,22],
[27,14,26,32,32,34,22,37,30,25,29,0,29,31,20],
[19,21,17,21,25,22,18,26,15,21,20,22,0,22,16],
[26,20,22,32,36,28,28,34,34,33,26,20,29,0,26],
[20,26,28,36,37,29,32,35,32,31,29,31,35,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 80, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,36,31,21,16,25,38,13,26,25,20,14,25,17],
[28,0,24,23,21,15,18,39,12,22,19,28,19,13,12],
[15,27,0,19,17,16,29,29,4,22,23,16,16,25,1],
[20,28,32,0,17,5,17,29,27,27,27,17,27,26,11],
[30,30,34,34,0,29,34,30,34,29,34,26,34,24,26],
[35,36,35,46,22,0,35,38,23,30,35,24,30,35,19],
[26,33,22,34,17,16,0,27,20,28,29,17,26,32,16],
[13,12,22,22,21,13,24,0,4,22,17,16,17,21,12],
[38,39,47,24,17,28,31,47,0,26,38,16,35,26,13],
[25,29,29,24,22,21,23,29,25,0,20,28,25,18,14],
[26,32,28,24,17,16,22,34,13,31,0,16,17,25,6],
[31,23,35,34,25,27,34,35,35,23,35,0,35,30,24],
[37,32,35,24,17,21,25,34,16,26,34,16,0,25,12],
[26,38,26,25,27,16,19,30,25,33,26,21,26,0,21],
[34,39,50,40,25,32,35,39,38,37,45,27,39,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 81, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,23,0,27,45,23,23,23,45,45,23,45,23,23],
[28,0,5,22,33,40,6,33,51,22,27,51,27,28,0],
[28,46,0,28,33,46,6,28,46,22,33,51,51,46,6],
[51,29,23,0,33,45,29,51,51,45,51,51,51,29,29],
[24,18,18,18,0,18,24,18,24,40,45,29,45,24,18],
[6,11,5,6,33,0,11,11,29,27,33,29,33,11,11],
[28,45,45,22,27,40,0,27,45,27,27,45,45,46,27],
[28,18,23,0,33,40,24,0,51,22,27,29,45,24,18],
[28,0,5,0,27,22,6,0,0,22,27,5,27,6,0],
[6,29,29,6,11,24,24,29,29,0,29,29,29,24,29],
[6,24,18,0,6,18,24,24,24,22,0,29,40,24,18],
[28,0,0,0,22,22,6,22,46,22,22,0,22,6,0],
[6,24,0,0,6,18,6,6,24,22,11,29,0,24,0],
[28,23,5,22,27,40,5,27,45,27,27,45,27,0,5],
[28,51,45,22,33,40,24,33,51,22,33,51,51,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 82, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,18,22,18,23,18,21,21,17,22,28,25,20,27],
[33,0,29,26,27,28,26,25,25,24,26,29,30,27,27],
[33,22,0,24,26,24,27,25,22,25,29,29,28,27,29],
[29,25,27,0,25,24,29,27,25,24,23,28,24,22,27],
[33,24,25,26,0,30,28,28,27,30,27,30,31,27,29],
[28,23,27,27,21,0,22,21,20,24,23,26,21,21,26],
[33,25,24,22,23,29,0,27,22,27,29,28,22,24,26],
[30,26,26,24,23,30,24,0,26,28,29,26,29,27,28],
[30,26,29,26,24,31,29,25,0,28,29,27,27,24,28],
[34,27,26,27,21,27,24,23,23,0,25,30,30,27,31],
[29,25,22,28,24,28,22,22,22,26,0,28,26,27,27],
[23,22,22,23,21,25,23,25,24,21,23,0,26,20,24],
[26,21,23,27,20,30,29,22,24,21,25,25,0,18,25],
[31,24,24,29,24,30,27,24,27,24,24,31,33,0,28],
[24,24,22,24,22,25,25,23,23,20,24,27,26,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 83, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,29,23,24,18,27,26,25,20,24,31,19,25,32],
[20,0,24,24,24,18,22,26,22,19,20,28,26,22,25],
[22,27,0,22,17,19,23,22,21,20,16,24,23,20,22],
[28,27,29,0,23,27,27,25,26,28,27,33,30,25,31],
[27,27,34,28,0,27,27,35,29,25,24,33,24,22,27],
[33,33,32,24,24,0,28,31,32,30,25,30,27,25,31],
[24,29,28,24,24,23,0,28,31,27,30,32,23,25,32],
[25,25,29,26,16,20,23,0,27,21,23,25,27,22,25],
[26,29,30,25,22,19,20,24,0,21,25,29,24,24,27],
[31,32,31,23,26,21,24,30,30,0,28,29,25,29,27],
[27,31,35,24,27,26,21,28,26,23,0,28,29,23,26],
[20,23,27,18,18,21,19,26,22,22,23,0,22,23,27],
[32,25,28,21,27,24,28,24,27,26,22,29,0,22,29],
[26,29,31,26,29,26,26,29,27,22,28,28,29,0,32],
[19,26,29,20,24,20,19,26,24,24,25,24,22,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 84, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,22,24,36,28,25,31,24,23,21,24,27,24],
[25,0,23,21,25,28,24,20,34,22,22,29,22,25,26],
[25,28,0,19,25,31,27,26,31,23,22,30,24,25,23],
[29,30,32,0,26,34,26,24,33,31,25,29,28,27,26],
[27,26,26,25,0,29,23,21,32,23,23,26,27,27,23],
[15,23,20,17,22,0,22,18,26,19,17,22,18,25,19],
[23,27,24,25,28,29,0,21,28,24,21,23,22,27,27],
[26,31,25,27,30,33,30,0,31,26,25,27,30,30,27],
[20,17,20,18,19,25,23,20,0,21,16,21,16,22,15],
[27,29,28,20,28,32,27,25,30,0,26,29,25,27,22],
[28,29,29,26,28,34,30,26,35,25,0,31,23,27,30],
[30,22,21,22,25,29,28,24,30,22,20,0,23,22,25],
[27,29,27,23,24,33,29,21,35,26,28,28,0,30,30],
[24,26,26,24,24,26,24,21,29,24,24,29,21,0,24],
[27,25,28,25,28,32,24,24,36,29,21,26,21,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 85, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,48,29,17,36,48,29,50,26,40,40,25,48,38],
[14,0,34,14,1,22,33,15,28,13,28,30,21,26,14],
[3,17,0,26,7,28,15,7,32,20,27,32,2,19,2],
[22,37,25,0,27,13,27,27,27,27,35,27,22,25,10],
[34,50,44,24,0,37,50,29,50,26,45,40,30,49,34],
[15,29,23,38,14,0,22,14,19,14,27,19,14,14,2],
[3,18,36,24,1,29,0,8,33,18,28,31,1,18,3],
[22,36,44,24,22,37,43,0,40,26,33,40,21,39,32],
[1,23,19,24,1,32,18,11,0,0,14,15,9,11,11],
[25,38,31,24,25,37,33,25,51,0,46,41,31,28,13],
[11,23,24,16,6,24,23,18,37,5,0,27,19,28,16],
[11,21,19,24,11,32,20,11,36,10,24,0,11,21,11],
[26,30,49,29,21,37,50,30,42,20,32,40,0,41,31],
[3,25,32,26,2,37,33,12,40,23,23,30,10,0,12],
[13,37,49,41,17,49,48,19,40,38,35,40,20,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 86, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,33,24,22,26,22,22,27,26,36,25,16,23,21],
[26,0,29,24,30,27,28,21,29,26,32,22,22,25,26],
[18,22,0,20,21,23,22,22,20,19,23,20,19,22,21],
[27,27,31,0,33,27,28,26,26,33,34,25,21,27,29],
[29,21,30,18,0,23,21,21,26,26,31,19,15,22,21],
[25,24,28,24,28,0,25,25,30,24,31,25,24,23,23],
[29,23,29,23,30,26,0,22,26,26,33,24,20,27,25],
[29,30,29,25,30,26,29,0,26,29,27,26,23,25,29],
[24,22,31,25,25,21,25,25,0,24,24,23,18,23,21],
[25,25,32,18,25,27,25,22,27,0,23,24,18,24,20],
[15,19,28,17,20,20,18,24,27,28,0,24,19,21,19],
[26,29,31,26,32,26,27,25,28,27,27,0,26,29,26],
[35,29,32,30,36,27,31,28,33,33,32,25,0,27,31],
[28,26,29,24,29,28,24,26,28,27,30,22,24,0,24],
[30,25,30,22,30,28,26,22,30,31,32,25,20,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 87, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,29,28,22,24,27,29,27,27,29,25,20,23,24],
[24,0,33,28,28,28,37,29,29,36,27,31,21,31,24],
[22,18,0,19,19,23,24,26,18,24,16,24,17,22,18],
[23,23,32,0,27,29,31,30,26,34,22,32,23,25,24],
[29,23,32,24,0,27,29,28,24,29,20,28,16,25,19],
[27,23,28,22,24,0,28,23,22,26,19,26,19,23,22],
[24,14,27,20,22,23,0,24,18,23,17,22,13,18,20],
[22,22,25,21,23,28,27,0,24,29,25,24,21,16,18],
[24,22,33,25,27,29,33,27,0,36,27,27,22,29,26],
[24,15,27,17,22,25,28,22,15,0,18,17,19,20,19],
[22,24,35,29,31,32,34,26,24,33,0,25,22,25,24],
[26,20,27,19,23,25,29,27,24,34,26,0,20,30,19],
[31,30,34,28,35,32,38,30,29,32,29,31,0,29,24],
[28,20,29,26,26,28,33,35,22,31,26,21,22,0,26],
[27,27,33,27,32,29,31,33,25,32,27,32,27,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 88, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,33,18,27,30,21,33,27,33,29,18,24,22,23],
[34,0,39,23,35,29,25,33,30,34,39,22,26,28,28],
[18,12,0,14,16,11,8,12,15,23,18,14,15,14,7],
[33,28,37,0,32,36,32,28,32,37,35,22,34,33,28],
[24,16,35,19,0,22,24,25,24,34,34,14,29,22,16],
[21,22,40,15,29,0,22,25,22,40,26,19,23,27,22],
[30,26,43,19,27,29,0,21,24,39,26,18,22,21,23],
[18,18,39,23,26,26,30,0,20,29,30,20,25,31,25],
[24,21,36,19,27,29,27,31,0,35,28,13,30,31,29],
[18,17,28,14,17,11,12,22,16,0,21,13,18,8,14],
[22,12,33,16,17,25,25,21,23,30,0,14,23,27,20],
[33,29,37,29,37,32,33,31,38,38,37,0,24,29,28],
[27,25,36,17,22,28,29,26,21,33,28,27,0,23,25],
[29,23,37,18,29,24,30,20,20,43,24,22,28,0,26],
[28,23,44,23,35,29,28,26,22,37,31,23,26,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 89, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,22,18,19,26,21,15,29,20,17,22,22,26,34],
[32,0,30,20,22,29,25,26,27,26,26,23,27,24,33],
[29,21,0,25,23,30,22,23,25,29,22,24,24,28,37],
[33,31,26,0,26,26,18,19,19,26,20,32,26,27,41],
[32,29,28,25,0,28,25,29,31,32,24,30,27,28,41],
[25,22,21,25,23,0,24,22,20,30,15,25,16,27,33],
[30,26,29,33,26,27,0,28,24,32,22,30,21,25,39],
[36,25,28,32,22,29,23,0,20,26,27,21,24,27,36],
[22,24,26,32,20,31,27,31,0,28,24,28,28,27,30],
[31,25,22,25,19,21,19,25,23,0,25,25,29,25,36],
[34,25,29,31,27,36,29,24,27,26,0,22,33,30,38],
[29,28,27,19,21,26,21,30,23,26,29,0,23,23,36],
[29,24,27,25,24,35,30,27,23,22,18,28,0,31,36],
[25,27,23,24,23,24,26,24,24,26,21,28,20,0,36],
[17,18,14,10,10,18,12,15,21,15,13,15,15,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 90, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,19,21,26,22,21,22,21,25,29,26,19,26,21],
[19,0,17,15,23,23,16,19,20,22,26,21,13,22,15],
[32,34,0,25,27,29,25,26,25,25,33,23,20,30,25],
[30,36,26,0,31,28,24,31,27,28,33,29,23,33,24],
[25,28,24,20,0,22,14,23,21,22,29,22,18,23,13],
[29,28,22,23,29,0,28,29,25,27,33,24,22,29,23],
[30,35,26,27,37,23,0,36,33,27,37,28,28,29,27],
[29,32,25,20,28,22,15,0,22,17,24,29,23,20,19],
[30,31,26,24,30,26,18,29,0,28,34,28,20,30,22],
[26,29,26,23,29,24,24,34,23,0,28,26,22,28,22],
[22,25,18,18,22,18,14,27,17,23,0,20,18,20,18],
[25,30,28,22,29,27,23,22,23,25,31,0,24,20,19],
[32,38,31,28,33,29,23,28,31,29,33,27,0,27,23],
[25,29,21,18,28,22,22,31,21,23,31,31,24,0,19],
[30,36,26,27,38,28,24,32,29,29,33,32,28,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 91, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,35,32,28,29,26,27,29,32,31,29,25,30,23],
[21,0,25,26,22,26,22,26,25,28,30,26,30,29,23],
[16,26,0,24,20,22,22,22,24,26,30,28,29,28,19],
[19,25,27,0,11,18,20,22,22,19,24,23,19,26,23],
[23,29,31,40,0,28,23,26,27,25,32,25,28,33,23],
[22,25,29,33,23,0,22,23,25,25,25,23,28,28,24],
[25,29,29,31,28,29,0,27,21,21,31,27,26,27,30],
[24,25,29,29,25,28,24,0,22,25,26,29,28,26,25],
[22,26,27,29,24,26,30,29,0,32,26,31,32,28,23],
[19,23,25,32,26,26,30,26,19,0,24,26,24,28,25],
[20,21,21,27,19,26,20,25,25,27,0,25,18,27,23],
[22,25,23,28,26,28,24,22,20,25,26,0,26,24,21],
[26,21,22,32,23,23,25,23,19,27,33,25,0,24,20],
[21,22,23,25,18,23,24,25,23,23,24,27,27,0,22],
[28,28,32,28,28,27,21,26,28,26,28,30,31,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 92, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,28,24,30,24,32,28,27,28,27,25,31,32],
[24,0,28,29,26,31,26,33,29,29,26,28,26,30,27],
[23,23,0,22,23,27,25,28,23,22,21,24,21,29,29],
[23,22,29,0,21,30,28,29,25,26,22,28,25,29,23],
[27,25,28,30,0,28,23,26,29,28,25,25,29,29,28],
[21,20,24,21,23,0,18,29,24,21,21,26,23,21,25],
[27,25,26,23,28,33,0,31,29,27,25,31,25,29,28],
[19,18,23,22,25,22,20,0,18,21,23,22,18,22,26],
[23,22,28,26,22,27,22,33,0,26,26,27,25,23,29],
[24,22,29,25,23,30,24,30,25,0,24,21,24,30,29],
[23,25,30,29,26,30,26,28,25,27,0,25,24,29,25],
[24,23,27,23,26,25,20,29,24,30,26,0,26,30,28],
[26,25,30,26,22,28,26,33,26,27,27,25,0,27,27],
[20,21,22,22,22,30,22,29,28,21,22,21,24,0,26],
[19,24,22,28,23,26,23,25,22,22,26,23,24,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 93, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,24,27,33,38,30,22,37,25,33,44,27,27,24],
[26,0,29,21,26,40,28,27,37,27,21,26,34,21,33],
[27,22,0,25,25,34,25,26,25,23,20,33,28,14,33],
[24,30,26,0,34,43,37,24,32,26,25,30,26,20,37],
[18,25,26,17,0,33,35,25,36,15,25,25,20,13,31],
[13,11,17,8,18,0,15,10,18,15,10,11,7,8,18],
[21,23,26,14,16,36,0,6,24,15,23,21,18,15,21],
[29,24,25,27,26,41,45,0,34,19,28,33,19,17,30],
[14,14,26,19,15,33,27,17,0,9,20,16,11,15,26],
[26,24,28,25,36,36,36,32,42,0,31,37,30,19,35],
[18,30,31,26,26,41,28,23,31,20,0,28,25,21,30],
[7,25,18,21,26,40,30,18,35,14,23,0,26,17,24],
[24,17,23,25,31,44,33,32,40,21,26,25,0,20,35],
[24,30,37,31,38,43,36,34,36,32,30,34,31,0,42],
[27,18,18,14,20,33,30,21,25,16,21,27,16,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 94, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,27,25,26,26,29,27,30,27,27,20,30,23,21],
[23,0,22,26,26,21,31,23,28,28,30,21,25,29,18],
[24,29,0,21,28,22,26,23,23,33,33,23,30,20,19],
[26,25,30,0,24,26,27,19,36,29,35,18,28,30,21],
[25,25,23,27,0,23,31,22,26,29,32,25,31,24,22],
[25,30,29,25,28,0,28,24,27,31,30,18,25,29,20],
[22,20,25,24,20,23,0,25,29,27,39,20,25,23,18],
[24,28,28,32,29,27,26,0,26,28,31,27,30,31,21],
[21,23,28,15,25,24,22,25,0,30,35,17,23,22,18],
[24,23,18,22,22,20,24,23,21,0,38,18,22,22,18],
[24,21,18,16,19,21,12,20,16,13,0,15,21,19,11],
[31,30,28,33,26,33,31,24,34,33,36,0,32,33,29],
[21,26,21,23,20,26,26,21,28,29,30,19,0,20,26],
[28,22,31,21,27,22,28,20,29,29,32,18,31,0,21],
[30,33,32,30,29,31,33,30,33,33,40,22,25,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 95, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,21,25,24,21,24,26,24,23,24,25,24,21,24],
[27,0,25,22,21,22,28,29,26,21,21,26,22,23,24],
[30,26,0,24,26,25,29,24,24,22,27,28,24,25,25],
[26,29,27,0,29,27,25,28,28,26,25,29,28,23,28],
[27,30,25,22,0,26,29,30,29,20,21,26,25,23,24],
[30,29,26,24,25,0,25,28,28,25,29,30,26,23,26],
[27,23,22,26,22,26,0,30,27,25,25,28,26,24,23],
[25,22,27,23,21,23,21,0,26,23,26,25,20,20,24],
[27,25,27,23,22,23,24,25,0,21,27,27,20,25,24],
[28,30,29,25,31,26,26,28,30,0,26,32,27,30,25],
[27,30,24,26,30,22,26,25,24,25,0,26,23,26,22],
[26,25,23,22,25,21,23,26,24,19,25,0,18,20,26],
[27,29,27,23,26,25,25,31,31,24,28,33,0,25,28],
[30,28,26,28,28,28,27,31,26,21,25,31,26,0,29],
[27,27,26,23,27,25,28,27,27,26,29,25,23,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 96, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,38,20,9,27,28,20,38,21,27,20,15,27,31],
[31,0,50,31,39,39,27,32,42,21,26,44,39,43,31],
[13,1,0,13,1,33,21,20,13,21,20,24,13,24,32],
[31,20,38,0,28,40,28,20,51,21,27,32,27,39,32],
[42,12,50,23,0,39,27,32,30,21,26,44,39,43,31],
[24,12,18,11,12,0,12,12,30,32,19,24,11,19,12],
[23,24,30,23,24,39,0,20,42,21,26,24,12,31,31],
[31,19,31,31,19,39,31,0,31,20,26,24,19,31,31],
[13,9,38,0,21,21,9,20,0,9,20,32,20,32,20],
[30,30,30,30,30,19,30,31,42,0,30,30,19,31,30],
[24,25,31,24,25,32,25,25,31,21,0,25,24,25,43],
[31,7,27,19,7,27,27,27,19,21,26,0,7,19,31],
[36,12,38,24,12,40,39,32,31,32,27,44,0,31,32],
[24,8,27,12,8,32,20,20,19,20,26,32,20,0,31],
[20,20,19,19,20,39,20,20,31,21,8,20,19,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 97, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,33,29,31,35,30,26,25,33,26,33,32,31,34],
[22,0,26,24,22,29,24,23,22,28,25,29,27,23,27],
[18,25,0,27,29,27,28,23,18,25,23,28,24,24,26],
[22,27,24,0,20,25,24,17,22,22,19,26,24,27,26],
[20,29,22,31,0,29,28,25,22,25,21,26,23,24,29],
[16,22,24,26,22,0,24,23,21,23,22,23,22,23,25],
[21,27,23,27,23,27,0,22,26,26,21,24,27,23,28],
[25,28,28,34,26,28,29,0,25,28,29,26,25,29,32],
[26,29,33,29,29,30,25,26,0,28,25,25,26,29,27],
[18,23,26,29,26,28,25,23,23,0,23,29,26,25,25],
[25,26,28,32,30,29,30,22,26,28,0,29,27,27,27],
[18,22,23,25,25,28,27,25,26,22,22,0,20,21,23],
[19,24,27,27,28,29,24,26,25,25,24,31,0,22,22],
[20,28,27,24,27,28,28,22,22,26,24,30,29,0,30],
[17,24,25,25,22,26,23,19,24,26,24,28,29,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 98, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,36,16,34,29,33,39,25,22,34,22,36,46,39],
[27,0,32,26,27,36,34,29,27,17,17,20,36,33,26],
[15,19,0,24,29,24,31,29,17,17,29,30,31,19,12],
[35,25,27,0,42,37,31,37,35,20,42,32,36,39,39],
[17,24,22,9,0,27,31,31,30,14,34,27,36,34,14],
[22,15,27,14,24,0,31,24,35,19,14,15,29,39,24],
[18,17,20,20,20,20,0,30,28,22,20,20,29,17,17],
[12,22,22,14,20,27,21,0,13,7,37,20,36,24,4],
[26,24,34,16,21,16,23,38,0,16,28,29,36,36,16],
[29,34,34,31,37,32,29,44,35,0,44,25,46,46,39],
[17,34,22,9,17,37,31,14,23,7,0,30,36,34,14],
[29,31,21,19,24,36,31,31,22,26,21,0,23,33,24],
[15,15,20,15,15,22,22,15,15,5,15,28,0,17,10],
[5,18,32,12,17,12,34,27,15,5,17,18,34,0,0],
[12,25,39,12,37,27,34,47,35,12,37,27,41,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 99, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,30,27,23,25,23,27,25,27,26,22,33,35,19],
[21,0,27,15,29,19,20,21,22,23,20,20,28,24,21],
[21,24,0,19,21,25,15,24,24,25,22,20,22,30,21],
[24,36,32,0,30,24,28,27,36,36,34,26,35,36,26],
[28,22,30,21,0,23,26,21,25,21,24,19,31,27,19],
[26,32,26,27,28,0,26,31,27,32,25,25,35,35,22],
[28,31,36,23,25,25,0,25,29,33,26,20,27,31,23],
[24,30,27,24,30,20,26,0,25,20,27,19,25,33,16],
[26,29,27,15,26,24,22,26,0,28,23,25,33,30,19],
[24,28,26,15,30,19,18,31,23,0,29,21,28,30,28],
[25,31,29,17,27,26,25,24,28,22,0,26,29,25,18],
[29,31,31,25,32,26,31,32,26,30,25,0,33,36,27],
[18,23,29,16,20,16,24,26,18,23,22,18,0,32,16],
[16,27,21,15,24,16,20,18,21,21,26,15,19,0,19],
[32,30,30,25,32,29,28,35,32,23,33,24,35,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 100, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,19,21,21,26,22,18,23,22,23,19,20,20,23],
[27,0,24,27,20,26,23,21,25,24,22,22,20,28,24],
[32,27,0,28,24,29,27,24,25,29,21,25,25,22,27],
[30,24,23,0,24,27,27,24,28,26,24,26,28,28,24],
[30,31,27,27,0,28,25,25,26,23,23,27,22,31,30],
[25,25,22,24,23,0,25,26,25,25,24,22,23,22,26],
[29,28,24,24,26,26,0,27,23,26,24,27,27,27,32],
[33,30,27,27,26,25,24,0,27,28,25,27,26,27,26],
[28,26,26,23,25,26,28,24,0,27,28,27,24,27,28],
[29,27,22,25,28,26,25,23,24,0,24,24,25,24,24],
[28,29,30,27,28,27,27,26,23,27,0,24,25,26,29],
[32,29,26,25,24,29,24,24,24,27,27,0,23,25,24],
[31,31,26,23,29,28,24,25,27,26,26,28,0,29,30],
[31,23,29,23,20,29,24,24,24,27,25,26,22,0,24],
[28,27,24,27,21,25,19,25,23,27,22,27,21,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 101, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,22,25,29,24,31,24,27,29,28,20,26,28,26],
[23,0,26,24,32,22,29,21,27,28,29,25,26,24,27],
[29,25,0,26,27,23,31,25,31,32,30,24,27,29,29],
[26,27,25,0,30,28,31,28,30,29,30,24,28,30,21],
[22,19,24,21,0,20,27,23,23,28,24,18,22,26,21],
[27,29,28,23,31,0,31,25,28,29,28,24,23,30,30],
[20,22,20,20,24,20,0,23,25,29,25,22,21,16,24],
[27,30,26,23,28,26,28,0,31,26,31,24,26,27,29],
[24,24,20,21,28,23,26,20,0,30,26,21,27,24,27],
[22,23,19,22,23,22,22,25,21,0,25,19,22,24,24],
[23,22,21,21,27,23,26,20,25,26,0,23,25,26,21],
[31,26,27,27,33,27,29,27,30,32,28,0,28,27,25],
[25,25,24,23,29,28,30,25,24,29,26,23,0,22,27],
[23,27,22,21,25,21,35,24,27,27,25,24,29,0,21],
[25,24,22,30,30,21,27,22,24,27,30,26,24,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 102, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,24,29,26,24,25,23,25,28,26,24,27,30],
[24,0,27,25,24,25,24,30,23,27,27,24,28,33,27],
[24,24,0,23,25,19,28,28,25,23,23,24,26,28,29],
[27,26,28,0,25,29,27,27,27,23,29,25,28,29,29],
[22,27,26,26,0,21,27,33,28,28,28,25,26,27,30],
[25,26,32,22,30,0,26,26,28,24,24,26,21,28,33],
[27,27,23,24,24,25,0,27,27,27,24,27,23,29,34],
[26,21,23,24,18,25,24,0,22,21,21,25,22,24,30],
[28,28,26,24,23,23,24,29,0,26,26,25,24,28,25],
[26,24,28,28,23,27,24,30,25,0,21,24,27,29,31],
[23,24,28,22,23,27,27,30,25,30,0,28,25,29,29],
[25,27,27,26,26,25,24,26,26,27,23,0,23,33,30],
[27,23,25,23,25,30,28,29,27,24,26,28,0,31,32],
[24,18,23,22,24,23,22,27,23,22,22,18,20,0,29],
[21,24,22,22,21,18,17,21,26,20,22,21,19,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 103, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,27,24,31,33,37,34,26,32,22,30,26,19,30],
[17,0,11,21,18,37,23,28,21,27,27,15,31,16,28],
[24,40,0,23,24,37,35,39,33,26,27,33,34,32,34],
[27,30,28,0,34,34,40,37,31,32,25,30,33,22,33],
[20,33,27,17,0,31,42,33,25,28,31,29,32,22,35],
[18,14,14,17,20,0,26,22,21,17,9,17,20,18,29],
[14,28,16,11,9,25,0,21,16,15,18,18,25,12,21],
[17,23,12,14,18,29,30,0,18,24,19,19,18,16,22],
[25,30,18,20,26,30,35,33,0,25,22,22,19,17,32],
[19,24,25,19,23,34,36,27,26,0,20,18,22,18,33],
[29,24,24,26,20,42,33,32,29,31,0,19,26,23,26],
[21,36,18,21,22,34,33,32,29,33,32,0,30,16,31],
[25,20,17,18,19,31,26,33,32,29,25,21,0,16,29],
[32,35,19,29,29,33,39,35,34,33,28,35,35,0,28],
[21,23,17,18,16,22,30,29,19,18,25,20,22,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 104, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,27,20,28,28,26,31,22,28,25,27,29,17,22],
[25,0,32,27,28,28,25,31,26,29,33,22,27,26,24],
[24,19,0,18,18,21,21,24,24,25,25,21,17,12,20],
[31,24,33,0,32,30,24,32,27,30,28,25,27,21,25],
[23,23,33,19,0,31,23,24,22,20,22,25,24,21,16],
[23,23,30,21,20,0,24,28,25,21,27,23,26,22,23],
[25,26,30,27,28,27,0,26,24,27,29,25,26,21,27],
[20,20,27,19,27,23,25,0,21,23,18,17,20,23,21],
[29,25,27,24,29,26,27,30,0,21,30,26,27,16,21],
[23,22,26,21,31,30,24,28,30,0,26,23,27,20,19],
[26,18,26,23,29,24,22,33,21,25,0,20,23,15,17],
[24,29,30,26,26,28,26,34,25,28,31,0,29,20,27],
[22,24,34,24,27,25,25,31,24,24,28,22,0,22,27],
[34,25,39,30,30,29,30,28,35,31,36,31,29,0,28],
[29,27,31,26,35,28,24,30,30,32,34,24,24,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 105, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,20,24,28,19,25,20,21,21,25,27,22,21,21],
[28,0,24,25,26,22,25,20,27,23,22,23,23,22,19],
[31,27,0,24,33,26,22,22,27,26,28,28,27,25,27],
[27,26,27,0,27,25,25,20,30,22,25,34,26,26,20],
[23,25,18,24,0,21,21,23,21,19,22,29,16,22,18],
[32,29,25,26,30,0,29,23,26,24,26,36,27,30,23],
[26,26,29,26,30,22,0,26,29,17,23,32,32,24,25],
[31,31,29,31,28,28,25,0,34,26,32,31,30,28,21],
[30,24,24,21,30,25,22,17,0,20,28,27,23,25,17],
[30,28,25,29,32,27,34,25,31,0,24,33,26,27,30],
[26,29,23,26,29,25,28,19,23,27,0,32,22,28,22],
[24,28,23,17,22,15,19,20,24,18,19,0,24,22,13],
[29,28,24,25,35,24,19,21,28,25,29,27,0,26,26],
[30,29,26,25,29,21,27,23,26,24,23,29,25,0,20],
[30,32,24,31,33,28,26,30,34,21,29,38,25,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 106, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,9,8,14,22,26,23,13,22,33,9,28,20,10],
[42,0,22,31,26,32,17,37,24,32,25,24,42,33,24],
[42,29,0,29,30,32,36,36,20,32,25,24,42,42,32],
[43,20,22,0,22,33,22,37,15,26,26,16,43,38,24],
[37,25,21,29,0,32,30,36,36,26,41,35,35,41,36],
[29,19,19,18,19,0,19,28,23,28,29,18,28,30,21],
[25,34,15,29,21,32,0,26,24,20,25,23,26,37,12],
[28,14,15,14,15,23,25,0,19,27,29,8,33,22,28],
[38,27,31,36,15,28,27,32,0,27,26,23,32,23,19],
[29,19,19,25,25,23,31,24,24,0,34,19,34,37,23],
[18,26,26,25,10,22,26,22,25,17,0,22,22,26,18],
[42,27,27,35,16,33,28,43,28,32,29,0,43,22,28],
[23,9,9,8,16,23,25,18,19,17,29,8,0,22,28],
[31,18,9,13,10,21,14,29,28,14,25,29,29,0,12],
[41,27,19,27,15,30,39,23,32,28,33,23,23,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 107, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,34,29,12,33,37,13,27,44,30,37,29,39,32],
[14,0,7,28,14,28,21,12,22,28,19,32,19,19,19],
[17,44,0,33,14,21,32,20,29,37,24,44,24,33,21],
[22,23,18,0,19,14,25,27,15,35,25,30,15,34,19],
[39,37,37,32,0,36,27,11,18,37,34,44,30,49,34],
[18,23,30,37,15,0,25,21,18,44,25,28,15,35,23],
[14,30,19,26,24,26,0,18,8,32,31,39,5,31,12],
[38,39,31,24,40,30,33,0,24,43,26,46,31,43,35],
[24,29,22,36,33,33,43,27,0,36,36,41,34,34,24],
[7,23,14,16,14,7,19,8,15,0,19,30,22,12,5],
[21,32,27,26,17,26,20,25,15,32,0,32,12,24,19],
[14,19,7,21,7,23,12,5,10,21,19,0,17,14,14],
[22,32,27,36,21,36,46,20,17,29,39,34,0,41,22],
[12,32,18,17,2,16,20,8,17,39,27,37,10,0,24],
[19,32,30,32,17,28,39,16,27,46,32,37,29,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 108, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,25,23,27,23,22,25,25,24,22,28,25,26,24],
[24,0,24,22,24,24,20,21,26,26,23,29,26,24,28],
[26,27,0,25,27,24,19,24,28,26,23,26,26,29,30],
[28,29,26,0,24,25,22,20,28,24,19,30,24,29,26],
[24,27,24,27,0,23,16,20,29,29,18,29,20,23,28],
[28,27,27,26,28,0,25,27,35,25,26,33,25,29,31],
[29,31,32,29,35,26,0,25,33,30,27,35,26,33,35],
[26,30,27,31,31,24,26,0,30,28,27,31,29,33,31],
[26,25,23,23,22,16,18,21,0,25,21,24,26,28,26],
[27,25,25,27,22,26,21,23,26,0,27,27,24,24,31],
[29,28,28,32,33,25,24,24,30,24,0,32,25,31,34],
[23,22,25,21,22,18,16,20,27,24,19,0,16,22,24],
[26,25,25,27,31,26,25,22,25,27,26,35,0,26,28],
[25,27,22,22,28,22,18,18,23,27,20,29,25,0,33],
[27,23,21,25,23,20,16,20,25,20,17,27,23,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 109, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,28,24,41,14,29,14,42,15,40,30,26,38,24],
[34,0,21,21,30,3,29,24,27,8,27,29,21,43,13],
[23,30,0,16,24,17,25,22,16,10,23,26,12,35,13],
[27,30,35,0,37,19,27,19,19,25,30,32,19,38,20],
[10,21,27,14,0,3,29,14,23,3,19,23,20,38,13],
[37,48,34,32,48,0,40,25,47,34,37,47,44,46,34],
[22,22,26,24,22,11,0,24,14,12,25,35,19,35,23],
[37,27,29,32,37,26,27,0,29,22,37,29,34,45,27],
[9,24,35,32,28,4,37,22,0,22,35,25,25,36,22],
[36,43,41,26,48,17,39,29,29,0,37,42,25,51,26],
[11,24,28,21,32,14,26,14,16,14,0,25,24,32,11],
[21,22,25,19,28,4,16,22,26,9,26,0,30,42,14],
[25,30,39,32,31,7,32,17,26,26,27,21,0,35,18],
[13,8,16,13,13,5,16,6,15,0,19,9,16,0,13],
[27,38,38,31,38,17,28,24,29,25,40,37,33,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 110, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,25,24,22,31,21,19,22,21,19,20,28,23,29],
[28,0,27,23,18,33,25,26,25,29,17,27,25,25,33],
[26,24,0,16,17,31,17,15,25,20,20,21,15,11,28],
[27,28,35,0,22,28,24,30,27,20,26,22,25,28,29],
[29,33,34,29,0,35,27,27,28,20,32,32,29,28,30],
[20,18,20,23,16,0,22,17,18,18,13,12,19,16,23],
[30,26,34,27,24,29,0,28,22,29,25,31,26,30,33],
[32,25,36,21,24,34,23,0,25,21,28,34,29,32,33],
[29,26,26,24,23,33,29,26,0,28,21,22,25,21,27],
[30,22,31,31,31,33,22,30,23,0,25,27,24,27,33],
[32,34,31,25,19,38,26,23,30,26,0,21,29,25,33],
[31,24,30,29,19,39,20,17,29,24,30,0,16,17,38],
[23,26,36,26,22,32,25,22,26,27,22,35,0,32,34],
[28,26,40,23,23,35,21,19,30,24,26,34,19,0,41],
[22,18,23,22,21,28,18,18,24,18,18,13,17,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 111, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,27,28,26,27,23,28,27,29,29,29,28,25,25],
[23,0,24,26,30,27,23,26,26,29,26,27,27,25,31],
[24,27,0,22,23,23,18,24,22,27,23,26,27,22,27],
[23,25,29,0,29,26,22,23,26,29,26,30,30,22,27],
[25,21,28,22,0,22,25,22,26,24,26,26,24,23,28],
[24,24,28,25,29,0,22,22,26,28,22,25,27,25,25],
[28,28,33,29,26,29,0,23,25,28,28,27,28,26,28],
[23,25,27,28,29,29,28,0,27,26,29,29,22,28,32],
[24,25,29,25,25,25,26,24,0,27,26,26,25,28,28],
[22,22,24,22,27,23,23,25,24,0,23,26,24,27,27],
[22,25,28,25,25,29,23,22,25,28,0,26,25,28,23],
[22,24,25,21,25,26,24,22,25,25,25,0,25,26,29],
[23,24,24,21,27,24,23,29,26,27,26,26,0,25,25],
[26,26,29,29,28,26,25,23,23,24,23,25,26,0,28],
[26,20,24,24,23,26,23,19,23,24,28,22,26,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 112, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,23,23,23,25,26,25,22,25,24,26,25,23,23],
[24,0,26,24,25,27,30,25,26,23,22,23,27,23,27],
[28,25,0,26,24,28,22,24,22,24,23,21,28,22,24],
[28,27,25,0,30,32,25,28,25,26,27,23,26,25,24],
[28,26,27,21,0,28,22,27,24,23,23,22,31,23,23],
[26,24,23,19,23,0,22,26,26,21,22,27,23,26,20],
[25,21,29,26,29,29,0,21,27,22,24,24,26,23,29],
[26,26,27,23,24,25,30,0,25,24,18,22,28,24,25],
[29,25,29,26,27,25,24,26,0,25,25,23,27,20,23],
[26,28,27,25,28,30,29,27,26,0,26,29,30,25,22],
[27,29,28,24,28,29,27,33,26,25,0,26,27,26,28],
[25,28,30,28,29,24,27,29,28,22,25,0,26,25,28],
[26,24,23,25,20,28,25,23,24,21,24,25,0,22,25],
[28,28,29,26,28,25,28,27,31,26,25,26,29,0,27],
[28,24,27,27,28,31,22,26,28,29,23,23,26,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 113, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,29,28,24,25,28,30,31,25,28,26,25,25,29],
[24,0,26,27,26,29,27,28,24,23,24,20,24,23,30],
[22,25,0,19,26,25,21,29,30,28,26,29,24,15,24],
[23,24,32,0,21,23,23,31,29,25,31,29,30,29,29],
[27,25,25,30,0,25,29,31,30,33,30,28,29,30,31],
[26,22,26,28,26,0,24,34,25,21,26,21,28,30,26],
[23,24,30,28,22,27,0,32,32,23,37,28,27,27,24],
[21,23,22,20,20,17,19,0,28,23,22,22,21,20,18],
[20,27,21,22,21,26,19,23,0,23,24,28,22,17,25],
[26,28,23,26,18,30,28,28,28,0,30,26,27,24,25],
[23,27,25,20,21,25,14,29,27,21,0,27,23,23,23],
[25,31,22,22,23,30,23,29,23,25,24,0,21,21,27],
[26,27,27,21,22,23,24,30,29,24,28,30,0,19,23],
[26,28,36,22,21,21,24,31,34,27,28,30,32,0,29],
[22,21,27,22,20,25,27,33,26,26,28,24,28,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 114, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,27,26,25,24,25,24,21,26,27,26,21,25,24],
[29,0,24,26,29,28,22,25,25,26,25,26,23,26,29],
[24,27,0,30,25,29,29,28,27,27,34,27,26,24,27],
[25,25,21,0,24,23,21,21,26,31,33,28,24,24,23],
[26,22,26,27,0,32,26,21,26,23,29,26,28,26,25],
[27,23,22,28,19,0,18,20,26,24,26,25,23,23,25],
[26,29,22,30,25,33,0,23,24,26,27,27,29,25,30],
[27,26,23,30,30,31,28,0,26,33,34,26,24,29,26],
[30,26,24,25,25,25,27,25,0,27,27,27,22,27,25],
[25,25,24,20,28,27,25,18,24,0,24,26,22,20,20],
[24,26,17,18,22,25,24,17,24,27,0,23,20,22,21],
[25,25,24,23,25,26,24,25,24,25,28,0,26,24,24],
[30,28,25,27,23,28,22,27,29,29,31,25,0,30,22],
[26,25,27,27,25,28,26,22,24,31,29,27,21,0,24],
[27,22,24,28,26,26,21,25,26,31,30,27,29,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 115, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,26,33,29,28,27,28,21,24,30,27,22,21,23],
[19,0,23,27,26,26,25,26,17,19,28,22,25,16,16],
[25,28,0,25,29,30,31,30,24,21,31,29,24,22,24],
[18,24,26,0,24,22,22,23,16,19,23,23,19,18,15],
[22,25,22,27,0,29,25,28,16,17,27,23,19,19,24],
[23,25,21,29,22,0,27,26,21,21,30,28,23,20,22],
[24,26,20,29,26,24,0,25,20,23,29,27,23,20,20],
[23,25,21,28,23,25,26,0,19,23,24,22,16,18,20],
[30,34,27,35,35,30,31,32,0,30,35,26,26,23,24],
[27,32,30,32,34,30,28,28,21,0,31,28,22,25,23],
[21,23,20,28,24,21,22,27,16,20,0,23,21,18,18],
[24,29,22,28,28,23,24,29,25,23,28,0,23,22,26],
[29,26,27,32,32,28,28,35,25,29,30,28,0,24,27],
[30,35,29,33,32,31,31,33,28,26,33,29,27,0,24],
[28,35,27,36,27,29,31,31,27,28,33,25,24,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 116, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,15,26,6,28,21,33,33,11,18,17,38,15,18],
[26,0,33,30,29,19,18,22,28,30,30,29,29,27,29],
[36,18,0,30,18,22,21,30,39,26,30,21,32,30,18],
[25,21,21,0,25,17,14,26,39,28,25,17,28,33,39],
[45,22,33,26,0,25,30,33,36,44,34,40,48,34,40],
[23,32,29,34,26,0,26,27,29,27,27,29,40,31,37],
[30,33,30,37,21,25,0,41,33,22,22,32,28,23,40],
[18,29,21,25,18,24,10,0,21,21,11,28,25,14,21],
[18,23,12,12,15,22,18,30,0,12,27,22,18,27,30],
[40,21,25,23,7,24,29,30,39,0,38,29,40,37,29],
[33,21,21,26,17,24,29,40,24,13,0,25,33,22,39],
[34,22,30,34,11,22,19,23,29,22,26,0,28,23,33],
[13,22,19,23,3,11,23,26,33,11,18,23,0,12,22],
[36,24,21,18,17,20,28,37,24,14,29,28,39,0,39],
[33,22,33,12,11,14,11,30,21,22,12,18,29,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 117, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,23,21,22,24,32,27,24,22,27,25,25,22],
[28,0,28,21,18,23,22,30,28,30,23,32,28,29,19],
[25,23,0,20,21,24,25,27,28,31,26,26,25,24,25],
[28,30,31,0,25,28,24,30,30,28,25,31,27,30,27],
[30,33,30,26,0,32,22,31,37,35,29,29,30,25,23],
[29,28,27,23,19,0,24,33,29,28,21,26,33,22,23],
[27,29,26,27,29,27,0,33,29,35,20,28,26,33,24],
[19,21,24,21,20,18,18,0,26,25,18,22,19,20,22],
[24,23,23,21,14,22,22,25,0,26,18,21,19,17,13],
[27,21,20,23,16,23,16,26,25,0,22,27,23,22,18],
[29,28,25,26,22,30,31,33,33,29,0,31,29,30,23],
[24,19,25,20,22,25,23,29,30,24,20,0,25,23,23],
[26,23,26,24,21,18,25,32,32,28,22,26,0,26,25],
[26,22,27,21,26,29,18,31,34,29,21,28,25,0,24],
[29,32,26,24,28,28,27,29,38,33,28,28,26,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 118, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,29,30,28,25,22,25,25,28,25,25,22,23,27],
[14,0,28,20,28,24,19,21,24,19,23,21,16,20,30],
[22,23,0,22,22,20,14,20,27,26,22,23,21,24,23],
[21,31,29,0,27,23,21,24,31,30,25,24,20,19,29],
[23,23,29,24,0,23,20,19,26,27,19,25,19,20,25],
[26,27,31,28,28,0,21,28,31,30,30,30,26,26,30],
[29,32,37,30,31,30,0,27,31,27,35,26,29,24,33],
[26,30,31,27,32,23,24,0,30,26,23,25,19,24,24],
[26,27,24,20,25,20,20,21,0,25,17,22,17,20,18],
[23,32,25,21,24,21,24,25,26,0,26,23,23,23,25],
[26,28,29,26,32,21,16,28,34,25,0,23,24,21,29],
[26,30,28,27,26,21,25,26,29,28,28,0,25,24,23],
[29,35,30,31,32,25,22,32,34,28,27,26,0,23,32],
[28,31,27,32,31,25,27,27,31,28,30,27,28,0,33],
[24,21,28,22,26,21,18,27,33,26,22,28,19,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 119, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,35,36,23,32,36,33,33,28,32,33,30,33,39],
[11,0,34,26,22,25,26,16,30,23,31,27,28,20,29],
[16,17,0,17,18,22,20,18,21,12,18,16,13,13,27],
[15,25,34,0,25,22,25,18,34,22,28,32,29,10,31],
[28,29,33,26,0,23,27,29,31,16,27,29,26,17,39],
[19,26,29,29,28,0,27,22,24,19,25,27,33,19,27],
[15,25,31,26,24,24,0,20,22,18,29,31,30,16,23],
[18,35,33,33,22,29,31,0,39,21,31,37,33,26,36],
[18,21,30,17,20,27,29,12,0,12,25,22,22,10,28],
[23,28,39,29,35,32,33,30,39,0,30,41,38,19,28],
[19,20,33,23,24,26,22,20,26,21,0,32,30,17,24],
[18,24,35,19,22,24,20,14,29,10,19,0,21,15,33],
[21,23,38,22,25,18,21,18,29,13,21,30,0,11,30],
[18,31,38,41,34,32,35,25,41,32,34,36,40,0,34],
[12,22,24,20,12,24,28,15,23,23,27,18,21,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 120, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,36,33,30,46,33,20,21,32,32,51,30,20,21],
[30,0,19,16,13,30,30,3,18,15,15,34,27,17,21],
[15,32,0,21,18,32,32,21,35,35,33,39,32,35,21],
[18,35,30,0,31,35,32,17,32,31,43,36,32,31,21],
[21,38,33,20,0,33,22,7,18,50,33,34,15,21,25],
[5,21,19,16,18,0,21,20,21,33,32,37,18,21,21],
[18,21,19,19,29,30,0,20,21,32,32,51,18,24,25],
[31,48,30,34,44,31,31,0,15,48,51,51,44,19,39],
[30,33,16,19,33,30,30,36,0,33,36,50,29,21,36],
[19,36,16,20,1,18,19,3,18,0,15,34,15,19,25],
[19,36,18,8,18,19,19,0,15,36,0,36,32,19,25],
[0,17,12,15,17,14,0,0,1,17,15,0,17,0,20],
[21,24,19,19,36,33,33,7,22,36,19,34,0,7,25],
[31,34,16,20,30,30,27,32,30,32,32,51,44,0,33],
[30,30,30,30,26,30,26,12,15,26,26,31,26,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 121, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,30,32,32,28,26,25,31,33,29,40,34,39,36],
[23,0,27,25,34,27,30,27,16,30,32,33,23,38,37],
[21,24,0,18,29,28,30,29,29,20,31,39,29,31,28],
[19,26,33,0,31,28,25,28,27,27,26,33,23,32,25],
[19,17,22,20,0,17,20,22,17,17,30,27,15,26,28],
[23,24,23,23,34,0,30,31,23,29,25,39,31,34,32],
[25,21,21,26,31,21,0,25,27,21,31,32,30,34,33],
[26,24,22,23,29,20,26,0,20,27,24,26,20,28,21],
[20,35,22,24,34,28,24,31,0,25,33,29,26,29,33],
[18,21,31,24,34,22,30,24,26,0,33,29,27,24,26],
[22,19,20,25,21,26,20,27,18,18,0,27,18,30,30],
[11,18,12,18,24,12,19,25,22,22,24,0,18,25,24],
[17,28,22,28,36,20,21,31,25,24,33,33,0,30,35],
[12,13,20,19,25,17,17,23,22,27,21,26,21,0,24],
[15,14,23,26,23,19,18,30,18,25,21,27,16,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 122, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,31,21,20,28,20,34,27,20,27,28,25,24,23],
[31,0,32,25,27,29,22,36,29,26,26,30,23,27,26],
[20,19,0,26,18,24,17,22,24,21,28,30,22,20,17],
[30,26,25,0,26,28,21,35,30,27,29,30,24,27,27],
[31,24,33,25,0,27,26,34,30,27,28,26,25,23,23],
[23,22,27,23,24,0,20,36,29,18,29,27,23,27,19],
[31,29,34,30,25,31,0,31,29,26,26,27,23,24,25],
[17,15,29,16,17,15,20,0,24,17,23,25,22,11,18],
[24,22,27,21,21,22,22,27,0,25,24,22,17,21,23],
[31,25,30,24,24,33,25,34,26,0,27,27,26,33,29],
[24,25,23,22,23,22,25,28,27,24,0,25,18,23,24],
[23,21,21,21,25,24,24,26,29,24,26,0,17,20,17],
[26,28,29,27,26,28,28,29,34,25,33,34,0,28,23],
[27,24,31,24,28,24,27,40,30,18,28,31,23,0,23],
[28,25,34,24,28,32,26,33,28,22,27,34,28,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 123, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,17,23,18,32,25,31,12,14,27,28,25,20,18],
[28,0,12,20,29,28,20,32,25,22,17,24,16,20,30],
[34,39,0,35,39,32,18,41,35,27,37,30,38,30,31],
[28,31,16,0,30,27,28,47,30,26,14,36,25,25,30],
[33,22,12,21,0,30,19,35,23,18,20,31,16,21,19],
[19,23,19,24,21,0,19,33,15,17,27,30,25,22,22],
[26,31,33,23,32,32,0,33,23,30,35,31,31,31,31],
[20,19,10,4,16,18,18,0,17,12,14,30,16,17,26],
[39,26,16,21,28,36,28,34,0,22,20,23,20,19,23],
[37,29,24,25,33,34,21,39,29,0,20,36,26,27,28],
[24,34,14,37,31,24,16,37,31,31,0,26,28,25,26],
[23,27,21,15,20,21,20,21,28,15,25,0,27,28,33],
[26,35,13,26,35,26,20,35,31,25,23,24,0,18,18],
[31,31,21,26,30,29,20,34,32,24,26,23,33,0,25],
[33,21,20,21,32,29,20,25,28,23,25,18,33,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 124, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,17,28,28,24,20,20,12,31,26,22,24,33,24],
[25,0,25,27,32,17,25,29,25,28,29,33,31,34,30],
[34,26,0,24,32,22,23,27,17,23,26,28,24,29,24],
[23,24,27,0,34,31,16,19,20,26,25,21,30,20,32],
[23,19,19,17,0,20,24,19,11,24,27,32,25,22,20],
[27,34,29,20,31,0,24,27,22,28,34,32,25,32,27],
[31,26,28,35,27,27,0,25,22,28,35,27,27,27,31],
[31,22,24,32,32,24,26,0,15,26,32,26,30,32,28],
[39,26,34,31,40,29,29,36,0,34,37,38,34,37,25],
[20,23,28,25,27,23,23,25,17,0,22,23,20,35,25],
[25,22,25,26,24,17,16,19,14,29,0,26,28,29,26],
[29,18,23,30,19,19,24,25,13,28,25,0,18,33,30],
[27,20,27,21,26,26,24,21,17,31,23,33,0,29,25],
[18,17,22,31,29,19,24,19,14,16,22,18,22,0,25],
[27,21,27,19,31,24,20,23,26,26,25,21,26,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 125, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,24,21,29,24,25,22,23,26,24,24,26,22,30],
[26,0,22,22,29,23,26,24,22,20,19,18,23,25,25],
[27,29,0,26,28,23,26,25,25,27,28,24,29,23,29],
[30,29,25,0,29,23,29,32,24,24,26,22,27,27,24],
[22,22,23,22,0,19,24,28,22,29,23,21,22,25,26],
[27,28,28,28,32,0,25,28,27,27,23,24,26,26,26],
[26,25,25,22,27,26,0,27,27,23,24,24,25,28,28],
[29,27,26,19,23,23,24,0,25,27,23,26,25,22,28],
[28,29,26,27,29,24,24,26,0,27,23,21,27,26,30],
[25,31,24,27,22,24,28,24,24,0,26,22,24,25,28],
[27,32,23,25,28,28,27,28,28,25,0,25,29,26,32],
[27,33,27,29,30,27,27,25,30,29,26,0,28,26,31],
[25,28,22,24,29,25,26,26,24,27,22,23,0,22,28],
[29,26,28,24,26,25,23,29,25,26,25,25,29,0,25],
[21,26,22,27,25,25,23,23,21,23,19,20,23,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 126, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,24,28,26,22,28,21,24,24,25,32,24,24,24],
[28,0,21,19,20,20,27,23,20,26,25,24,23,22,24],
[27,30,0,25,22,28,28,21,25,25,24,31,26,26,26],
[23,32,26,0,20,25,34,25,23,25,26,25,26,26,28],
[25,31,29,31,0,26,36,26,27,31,29,28,32,30,28],
[29,31,23,26,25,0,35,21,28,25,25,32,24,27,27],
[23,24,23,17,15,16,0,18,21,23,20,23,22,22,24],
[30,28,30,26,25,30,33,0,24,26,28,27,30,28,31],
[27,31,26,28,24,23,30,27,0,29,29,30,24,29,26],
[27,25,26,26,20,26,28,25,22,0,25,24,24,30,26],
[26,26,27,25,22,26,31,23,22,26,0,26,25,27,21],
[19,27,20,26,23,19,28,24,21,27,25,0,27,23,25],
[27,28,25,25,19,27,29,21,27,27,26,24,0,21,27],
[27,29,25,25,21,24,29,23,22,21,24,28,30,0,27],
[27,27,25,23,23,24,27,20,25,25,30,26,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 127, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,19,22,24,24,16,26,25,17,23,25,15,21,21],
[39,0,30,28,26,20,34,26,33,31,23,29,27,25,26],
[32,21,0,27,30,24,26,21,38,34,30,33,29,24,27],
[29,23,24,0,18,21,20,24,32,31,18,21,25,24,19],
[27,25,21,33,0,24,27,25,31,30,27,27,22,31,21],
[27,31,27,30,27,0,29,30,31,30,26,35,25,27,26],
[35,17,25,31,24,22,0,27,36,35,26,29,29,20,24],
[25,25,30,27,26,21,24,0,30,24,17,27,25,27,24],
[26,18,13,19,20,20,15,21,0,25,20,14,22,22,13],
[34,20,17,20,21,21,16,27,26,0,23,23,18,26,17],
[28,28,21,33,24,25,25,34,31,28,0,27,24,29,21],
[26,22,18,30,24,16,22,24,37,28,24,0,21,18,22],
[36,24,22,26,29,26,22,26,29,33,27,30,0,24,20],
[30,26,27,27,20,24,31,24,29,25,22,33,27,0,21],
[30,25,24,32,30,25,27,27,38,34,30,29,31,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 128, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,29,20,19,21,27,25,23,22,18,20,27,21,23],
[27,0,21,21,19,23,21,24,22,19,21,20,25,25,21],
[22,30,0,27,20,23,23,20,26,26,23,22,31,26,19],
[31,30,24,0,24,30,29,26,22,24,22,21,32,27,26],
[32,32,31,27,0,29,25,26,29,24,26,23,33,22,26],
[30,28,28,21,22,0,24,26,27,22,25,23,29,23,24],
[24,30,28,22,26,27,0,27,23,23,22,22,30,23,26],
[26,27,31,25,25,25,24,0,28,22,21,25,29,21,24],
[28,29,25,29,22,24,28,23,0,27,17,23,29,24,23],
[29,32,25,27,27,29,28,29,24,0,22,24,32,25,28],
[33,30,28,29,25,26,29,30,34,29,0,28,29,30,25],
[31,31,29,30,28,28,29,26,28,27,23,0,29,25,25],
[24,26,20,19,18,22,21,22,22,19,22,22,0,22,17],
[30,26,25,24,29,28,28,30,27,26,21,26,29,0,34],
[28,30,32,25,25,27,25,27,28,23,26,26,34,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 129, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,30,26,27,27,34,28,25,25,29,34,33,29,25],
[19,0,21,21,23,27,24,27,23,23,26,26,25,24,23],
[21,30,0,22,27,25,27,24,25,22,25,27,22,23,24],
[25,30,29,0,24,29,29,31,29,30,28,32,30,31,26],
[24,28,24,27,0,25,25,26,23,25,30,27,25,27,23],
[24,24,26,22,26,0,25,27,23,25,24,29,24,25,24],
[17,27,24,22,26,26,0,29,24,20,25,26,26,27,25],
[23,24,27,20,25,24,22,0,23,27,22,25,25,25,22],
[26,28,26,22,28,28,27,28,0,29,29,27,26,24,26],
[26,28,29,21,26,26,31,24,22,0,25,32,30,26,21],
[22,25,26,23,21,27,26,29,22,26,0,26,22,29,20],
[17,25,24,19,24,22,25,26,24,19,25,0,24,23,19],
[18,26,29,21,26,27,25,26,25,21,29,27,0,24,22],
[22,27,28,20,24,26,24,26,27,25,22,28,27,0,20],
[26,28,27,25,28,27,26,29,25,30,31,32,29,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 130, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,20,28,28,28,42,36,22,31,28,31,22,11,34],
[45,0,31,36,36,44,44,47,25,45,33,44,41,41,50],
[31,20,0,41,17,30,36,24,25,36,41,33,35,24,28],
[23,15,10,0,12,20,28,25,10,9,36,33,19,9,35],
[23,15,34,39,0,20,44,30,23,25,30,38,30,13,24],
[23,7,21,31,31,0,39,36,21,26,22,42,25,17,29],
[9,7,15,23,7,12,0,30,15,25,16,14,22,12,18],
[15,4,27,26,21,15,21,0,26,26,22,21,25,12,10],
[29,26,26,41,28,30,36,25,0,31,36,33,30,19,34],
[20,6,15,42,26,25,26,25,20,0,33,31,28,22,34],
[23,18,10,15,21,29,35,29,15,18,0,29,17,20,35],
[20,7,18,18,13,9,37,30,18,20,22,0,19,20,24],
[29,10,16,32,21,26,29,26,21,23,34,32,0,6,35],
[40,10,27,42,38,34,39,39,32,29,31,31,45,0,46],
[17,1,23,16,27,22,33,41,17,17,16,27,16,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 131, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,29,31,21,26,23,26,27,26,25,31,31,31,26],
[27,0,27,29,23,21,30,26,27,25,25,30,32,28,24],
[22,24,0,28,29,26,30,23,26,22,32,28,32,26,24],
[20,22,23,0,21,15,21,23,24,22,24,25,24,24,21],
[30,28,22,30,0,23,29,22,26,22,26,27,27,26,24],
[25,30,25,36,28,0,27,28,33,27,25,26,31,32,28],
[28,21,21,30,22,24,0,26,26,22,20,20,27,30,22],
[25,25,28,28,29,23,25,0,28,23,27,25,29,30,23],
[24,24,25,27,25,18,25,23,0,23,24,25,30,25,26],
[25,26,29,29,29,24,29,28,28,0,31,29,35,28,29],
[26,26,19,27,25,26,31,24,27,20,0,28,32,25,27],
[20,21,23,26,24,25,31,26,26,22,23,0,26,27,30],
[20,19,19,27,24,20,24,22,21,16,19,25,0,25,23],
[20,23,25,27,25,19,21,21,26,23,26,24,26,0,23],
[25,27,27,30,27,23,29,28,25,22,24,21,28,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 132, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,15,19,27,19,27,24,23,14,24,14,19,18,14],
[32,0,22,36,36,24,17,33,22,32,41,23,18,18,18],
[36,29,0,23,46,33,17,33,28,19,33,24,29,18,14],
[32,15,28,0,32,19,18,19,19,5,19,10,15,19,14],
[24,15,5,19,0,29,0,24,14,5,29,15,10,14,14],
[32,27,18,32,22,0,22,24,22,22,32,19,9,18,9],
[24,34,34,33,51,29,0,33,34,34,33,34,34,14,38],
[27,18,18,32,27,27,18,0,27,18,42,18,18,27,22],
[28,29,23,32,37,29,17,24,0,28,37,29,19,18,19],
[37,19,32,46,46,29,17,33,23,0,46,33,19,18,14],
[27,10,18,32,22,19,18,9,14,5,0,5,10,14,9],
[37,28,27,41,36,32,17,33,22,18,46,0,28,31,14],
[32,33,22,36,41,42,17,33,32,32,41,23,0,18,18],
[33,33,33,32,37,33,37,24,33,33,37,20,33,0,24],
[37,33,37,37,37,42,13,29,32,37,42,37,33,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 133, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,23,20,28,25,27,21,25,23,26,27,27,25,22],
[23,0,28,29,25,28,26,26,31,29,31,28,26,26,26],
[28,23,0,19,26,22,23,16,21,23,27,20,24,23,16],
[31,22,32,0,31,26,31,26,26,27,32,26,30,31,23],
[23,26,25,20,0,27,27,22,19,23,23,27,30,23,19],
[26,23,29,25,24,0,23,22,18,20,29,22,29,24,17],
[24,25,28,20,24,28,0,24,23,23,25,25,27,28,25],
[30,25,35,25,29,29,27,0,27,22,29,31,36,24,26],
[26,20,30,25,32,33,28,24,0,23,33,29,35,26,22],
[28,22,28,24,28,31,28,29,28,0,35,25,29,30,26],
[25,20,24,19,28,22,26,22,18,16,0,20,25,21,21],
[24,23,31,25,24,29,26,20,22,26,31,0,28,27,24],
[24,25,27,21,21,22,24,15,16,22,26,23,0,26,17],
[26,25,28,20,28,27,23,27,25,21,30,24,25,0,24],
[29,25,35,28,32,34,26,25,29,25,30,27,34,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 134, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,21,21,27,29,24,17,27,28,32,24,26,22,25],
[27,0,26,27,22,23,34,25,29,26,27,23,25,27,22],
[30,25,0,23,19,31,27,24,24,27,28,29,25,32,20],
[30,24,28,0,20,24,25,24,20,31,30,26,21,29,13],
[24,29,32,31,0,26,24,23,24,27,29,27,24,32,25],
[22,28,20,27,25,0,30,17,26,20,30,26,25,23,20],
[27,17,24,26,27,21,0,21,29,23,28,30,23,26,23],
[34,26,27,27,28,34,30,0,27,31,36,23,32,32,17],
[24,22,27,31,27,25,22,24,0,30,25,28,22,27,19],
[23,25,24,20,24,31,28,20,21,0,31,23,22,26,14],
[19,24,23,21,22,21,23,15,26,20,0,25,22,28,18],
[27,28,22,25,24,25,21,28,23,28,26,0,27,26,16],
[25,26,26,30,27,26,28,19,29,29,29,24,0,32,28],
[29,24,19,22,19,28,25,19,24,25,23,25,19,0,18],
[26,29,31,38,26,31,28,34,32,37,33,35,23,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 135, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,19,0,8,9,6,16,7,22,6,18,7,19,15],
[45,0,30,32,25,29,34,26,24,34,34,36,18,37,18],
[32,21,0,22,12,22,27,27,12,33,21,29,19,19,23],
[51,19,29,0,16,39,42,26,26,42,35,29,26,32,26],
[43,26,39,35,0,35,46,24,33,40,25,34,24,33,26],
[42,22,29,12,16,0,33,32,29,39,24,29,17,32,32],
[45,17,24,9,5,18,0,24,27,37,21,29,9,18,18],
[35,25,24,25,27,19,27,0,17,34,27,29,5,34,24],
[44,27,39,25,18,22,24,34,0,42,24,29,17,34,42],
[29,17,18,9,11,12,14,17,9,0,18,23,0,9,11],
[45,17,30,16,26,27,30,24,27,33,0,36,24,30,20],
[33,15,22,22,17,22,22,22,22,28,15,0,22,22,27],
[44,33,32,25,27,34,42,46,34,51,27,29,0,42,42],
[32,14,32,19,18,19,33,17,17,42,21,29,9,0,20],
[36,33,28,25,25,19,33,27,9,40,31,24,9,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 136, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,42,38,38,30,34,29,31,33,26,38,29,27,30],
[26,0,33,23,17,28,26,13,22,18,21,28,21,21,15],
[9,18,0,19,19,14,11,9,27,21,17,21,20,15,10],
[13,28,32,0,33,23,26,18,38,31,28,35,35,23,17],
[13,34,32,18,0,27,25,23,30,27,27,39,35,22,19],
[21,23,37,28,24,0,24,22,27,26,26,25,31,21,23],
[17,25,40,25,26,27,0,21,40,33,23,34,34,27,21],
[22,38,42,33,28,29,30,0,39,27,27,32,35,24,30],
[20,29,24,13,21,24,11,12,0,21,21,31,28,24,14],
[18,33,30,20,24,25,18,24,30,0,30,33,37,24,20],
[25,30,34,23,24,25,28,24,30,21,0,36,39,29,18],
[13,23,30,16,12,26,17,19,20,18,15,0,33,19,16],
[22,30,31,16,16,20,17,16,23,14,12,18,0,18,17],
[24,30,36,28,29,30,24,27,27,27,22,32,33,0,24],
[21,36,41,34,32,28,30,21,37,31,33,35,34,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 137, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,30,20,24,20,24,24,29,31,34,24,32,21,22],
[24,0,25,17,25,24,16,21,17,24,28,22,26,19,19],
[21,26,0,25,26,28,24,29,20,27,27,24,23,22,27],
[31,34,26,0,24,32,21,31,22,26,29,31,27,21,23],
[27,26,25,27,0,28,26,29,32,32,34,38,35,26,27],
[31,27,23,19,23,0,25,23,28,30,33,29,29,22,23],
[27,35,27,30,25,26,0,22,26,30,31,30,23,28,26],
[27,30,22,20,22,28,29,0,27,29,29,28,28,27,22],
[22,34,31,29,19,23,25,24,0,29,31,31,30,19,27],
[20,27,24,25,19,21,21,22,22,0,26,23,24,20,17],
[17,23,24,22,17,18,20,22,20,25,0,18,19,19,18],
[27,29,27,20,13,22,21,23,20,28,33,0,22,20,23],
[19,25,28,24,16,22,28,23,21,27,32,29,0,19,22],
[30,32,29,30,25,29,23,24,32,31,32,31,32,0,25],
[29,32,24,28,24,28,25,29,24,34,33,28,29,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 138, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,22,26,23,25,27,28,20,30,26,31,27,25,22],
[18,0,19,24,21,21,25,27,25,17,19,22,26,27,16],
[29,32,0,26,23,24,33,30,24,27,25,25,27,23,24],
[25,27,25,0,30,19,22,21,26,24,22,25,26,27,16],
[28,30,28,21,0,27,23,30,29,27,27,28,26,26,20],
[26,30,27,32,24,0,28,25,28,30,28,24,20,25,28],
[24,26,18,29,28,23,0,27,23,25,24,25,28,22,22],
[23,24,21,30,21,26,24,0,32,24,25,20,32,24,19],
[31,26,27,25,22,23,28,19,0,26,27,21,25,21,18],
[21,34,24,27,24,21,26,27,25,0,21,26,24,33,18],
[25,32,26,29,24,23,27,26,24,30,0,24,25,27,24],
[20,29,26,26,23,27,26,31,30,25,27,0,30,28,23],
[24,25,24,25,25,31,23,19,26,27,26,21,0,25,24],
[26,24,28,24,25,26,29,27,30,18,24,23,26,0,22],
[29,35,27,35,31,23,29,32,33,33,27,28,27,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 139, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,19,23,15,26,16,14,21,16,25,23,21,17,9],
[40,0,23,34,25,30,23,26,32,29,29,33,26,36,29],
[32,28,0,29,27,35,26,23,30,24,34,28,26,28,24],
[28,17,22,0,17,22,24,14,28,21,25,22,21,21,16],
[36,26,24,34,0,23,24,24,29,34,29,27,27,28,18],
[25,21,16,29,28,0,23,23,22,25,32,28,24,24,27],
[35,28,25,27,27,28,0,22,39,31,28,28,24,32,25],
[37,25,28,37,27,28,29,0,30,31,36,31,29,31,24],
[30,19,21,23,22,29,12,21,0,26,29,23,23,22,18],
[35,22,27,30,17,26,20,20,25,0,29,23,20,27,19],
[26,22,17,26,22,19,23,15,22,22,0,24,21,20,21],
[28,18,23,29,24,23,23,20,28,28,27,0,24,21,25],
[30,25,25,30,24,27,27,22,28,31,30,27,0,29,22],
[34,15,23,30,23,27,19,20,29,24,31,30,22,0,24],
[42,22,27,35,33,24,26,27,33,32,30,26,29,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 140, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,35,29,23,32,31,19,25,31,25,33,30,27,27],
[20,0,29,22,24,19,22,21,23,21,23,30,24,22,22],
[16,22,0,19,23,19,16,19,14,15,21,25,26,16,22],
[22,29,32,0,23,27,27,20,26,31,22,29,32,27,25],
[28,27,28,28,0,26,21,22,21,22,21,30,24,23,17],
[19,32,32,24,25,0,27,19,22,23,25,28,34,25,20],
[20,29,35,24,30,24,0,21,25,25,28,33,30,23,23],
[32,30,32,31,29,32,30,0,29,32,25,32,31,28,27],
[26,28,37,25,30,29,26,22,0,29,26,35,29,27,23],
[20,30,36,20,29,28,26,19,22,0,22,30,28,21,25],
[26,28,30,29,30,26,23,26,25,29,0,29,34,27,22],
[18,21,26,22,21,23,18,19,16,21,22,0,24,23,20],
[21,27,25,19,27,17,21,20,22,23,17,27,0,20,22],
[24,29,35,24,28,26,28,23,24,30,24,28,31,0,25],
[24,29,29,26,34,31,28,24,28,26,29,31,29,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 141, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,51,20,51,41,20,30,41,30,51,41,20,41,30],
[0,0,5,5,26,36,20,25,36,15,41,41,15,36,20],
[0,46,0,20,51,36,20,25,36,25,51,41,15,36,20],
[31,46,31,0,51,46,46,25,46,25,51,51,25,46,30],
[0,25,0,0,0,36,15,25,36,25,46,41,15,36,15],
[10,15,15,5,15,0,20,10,15,30,15,51,5,20,15],
[31,31,31,5,36,31,0,10,21,10,36,36,10,21,15],
[21,26,26,26,26,41,41,0,36,41,41,41,26,41,20],
[10,15,15,5,15,36,30,15,0,15,36,36,15,51,15],
[21,36,26,26,26,21,41,10,36,0,26,26,21,36,5],
[0,10,0,0,5,36,15,10,15,25,0,41,0,15,0],
[10,10,10,0,10,0,15,10,15,25,10,0,0,15,10],
[31,36,36,26,36,46,41,25,36,30,51,51,0,36,30],
[10,15,15,5,15,31,30,10,0,15,36,36,15,0,15],
[21,31,31,21,36,36,36,31,36,46,51,41,21,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 142, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,19,12,24,20,19,22,22,23,16,21,11,14,18],
[25,0,28,22,29,34,24,23,19,29,21,20,13,25,10],
[32,23,0,17,32,18,28,20,21,29,6,22,19,19,22],
[39,29,34,0,37,33,29,22,23,25,23,23,25,19,31],
[27,22,19,14,0,17,21,22,20,32,12,15,9,14,23],
[31,17,33,18,34,0,27,15,22,34,16,22,8,21,15],
[32,27,23,22,30,24,0,24,12,31,11,30,11,23,20],
[29,28,31,29,29,36,27,0,36,32,24,25,19,28,21],
[29,32,30,28,31,29,39,15,0,24,20,22,18,26,25],
[28,22,22,26,19,17,20,19,27,0,16,10,13,20,21],
[35,30,45,28,39,35,40,27,31,35,0,29,29,35,25],
[30,31,29,28,36,29,21,26,29,41,22,0,18,32,26],
[40,38,32,26,42,43,40,32,33,38,22,33,0,37,19],
[37,26,32,32,37,30,28,23,25,31,16,19,14,0,21],
[33,41,29,20,28,36,31,30,26,30,26,25,32,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 143, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,26,39,22,24,27,35,24,28,16,29,26,25,29],
[26,0,23,38,22,25,36,40,26,27,27,19,30,27,31],
[25,28,0,27,22,22,26,36,22,25,20,23,30,23,23],
[12,13,24,0,13,18,11,17,13,14,15,16,17,5,21],
[29,29,29,38,0,32,33,38,24,31,23,25,39,34,27],
[27,26,29,33,19,0,25,34,25,27,25,24,28,29,32],
[24,15,25,40,18,26,0,30,19,21,27,17,23,19,21],
[16,11,15,34,13,17,21,0,14,18,15,11,22,15,17],
[27,25,29,38,27,26,32,37,0,30,27,25,27,25,32],
[23,24,26,37,20,24,30,33,21,0,23,15,32,26,25],
[35,24,31,36,28,26,24,36,24,28,0,27,29,19,29],
[22,32,28,35,26,27,34,40,26,36,24,0,35,24,28],
[25,21,21,34,12,23,28,29,24,19,22,16,0,20,26],
[26,24,28,46,17,22,32,36,26,25,32,27,31,0,26],
[22,20,28,30,24,19,30,34,19,26,22,23,25,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 144, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,28,29,26,33,18,28,27,25,28,27,31,28,15],
[25,0,34,30,20,24,17,27,25,33,29,21,15,25,23],
[23,17,0,21,30,23,21,26,20,26,30,15,22,29,24],
[22,21,30,0,22,20,14,24,30,22,33,22,14,22,22],
[25,31,21,29,0,14,24,41,30,35,38,22,22,31,22],
[18,27,28,31,37,0,28,36,29,33,30,22,27,22,28],
[33,34,30,37,27,23,0,34,39,31,40,27,21,28,34],
[23,24,25,27,10,15,17,0,27,30,24,18,21,17,25],
[24,26,31,21,21,22,12,24,0,33,37,27,23,34,29],
[26,18,25,29,16,18,20,21,18,0,40,22,29,29,14],
[23,22,21,18,13,21,11,27,14,11,0,15,20,16,21],
[24,30,36,29,29,29,24,33,24,29,36,0,30,31,36],
[20,36,29,37,29,24,30,30,28,22,31,21,0,32,25],
[23,26,22,29,20,29,23,34,17,22,35,20,19,0,24],
[36,28,27,29,29,23,17,26,22,37,30,15,26,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 145, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,18,18,23,31,21,28,19,28,20,17,22,16,22],
[29,0,25,25,30,29,24,26,21,30,25,23,27,22,25],
[33,26,0,25,28,32,26,28,22,31,26,20,26,22,23],
[33,26,26,0,31,34,31,27,22,29,25,25,26,26,23],
[28,21,23,20,0,31,22,28,17,27,25,22,23,22,25],
[20,22,19,17,20,0,21,20,16,27,19,20,18,13,17],
[30,27,25,20,29,30,0,25,25,29,23,24,28,23,23],
[23,25,23,24,23,31,26,0,19,27,25,21,23,22,24],
[32,30,29,29,34,35,26,32,0,32,29,29,24,30,31],
[23,21,20,22,24,24,22,24,19,0,25,22,20,21,19],
[31,26,25,26,26,32,28,26,22,26,0,22,24,21,24],
[34,28,31,26,29,31,27,30,22,29,29,0,26,25,29],
[29,24,25,25,28,33,23,28,27,31,27,25,0,25,27],
[35,29,29,25,29,38,28,29,21,30,30,26,26,0,32],
[29,26,28,28,26,34,28,27,20,32,27,22,24,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 146, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,24,24,21,19,21,27,18,26,20,24,23,19,28],
[29,0,30,26,24,25,24,27,19,30,26,24,26,25,28],
[27,21,0,23,19,22,22,25,16,24,20,21,22,20,28],
[27,25,28,0,24,19,22,28,17,23,18,18,22,20,27],
[30,27,32,27,0,25,25,32,24,30,23,25,25,27,32],
[32,26,29,32,26,0,27,31,17,29,29,26,23,27,29],
[30,27,29,29,26,24,0,30,24,28,26,29,25,21,24],
[24,24,26,23,19,20,21,0,19,29,21,20,22,21,26],
[33,32,35,34,27,34,27,32,0,34,30,26,29,23,33],
[25,21,27,28,21,22,23,22,17,0,20,22,20,18,23],
[31,25,31,33,28,22,25,30,21,31,0,22,26,25,29],
[27,27,30,33,26,25,22,31,25,29,29,0,31,21,32],
[28,25,29,29,26,28,26,29,22,31,25,20,0,25,31],
[32,26,31,31,24,24,30,30,28,33,26,30,26,0,31],
[23,23,23,24,19,22,27,25,18,28,22,19,20,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 147, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,10,14,7,7,23,17,17,10,26,16,19,21,19],
[41,0,17,37,28,26,20,34,17,35,49,26,27,45,36],
[41,34,0,29,37,45,38,32,26,32,43,33,24,39,35],
[37,14,22,0,22,18,11,14,19,14,14,22,26,50,31],
[44,23,14,29,0,11,18,31,23,41,33,30,34,43,34],
[44,25,6,33,40,0,23,32,15,33,44,25,25,34,27],
[28,31,13,40,33,28,0,39,22,26,51,29,32,41,32],
[34,17,19,37,20,19,12,0,19,32,42,38,38,48,38],
[34,34,25,32,28,36,29,32,0,34,34,21,25,45,44],
[41,16,19,37,10,18,25,19,17,0,29,18,19,45,28],
[25,2,8,37,18,7,0,9,17,22,0,28,27,38,17],
[35,25,18,29,21,26,22,13,30,33,23,0,6,39,30],
[32,24,27,25,17,26,19,13,26,32,24,45,0,48,38],
[30,6,12,1,8,17,10,3,6,6,13,12,3,0,15],
[32,15,16,20,17,24,19,13,7,23,34,21,13,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 148, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,14,25,13,34,18,14,24,14,38,34,11,23,25],
[33,0,25,34,25,34,24,13,33,22,33,33,10,23,22],
[37,26,0,37,29,37,14,10,47,36,37,37,14,37,35],
[26,17,14,0,15,13,14,13,22,36,47,12,14,23,35],
[38,26,22,36,0,48,26,22,47,48,48,38,36,48,36],
[17,17,14,38,3,0,17,13,27,27,38,17,14,25,38],
[33,27,37,37,25,34,0,26,36,37,33,33,11,23,34],
[37,38,41,38,29,38,25,0,37,37,37,37,25,27,38],
[27,18,4,29,4,24,15,14,0,25,26,27,15,27,26],
[37,29,15,15,3,24,14,14,26,0,37,23,1,13,12],
[13,18,14,4,3,13,18,14,25,14,0,13,1,23,11],
[17,18,14,39,13,34,18,14,24,28,38,0,25,25,39],
[40,41,37,37,15,37,40,26,36,50,50,26,0,23,51],
[28,28,14,28,3,26,28,24,24,38,28,26,28,0,28],
[26,29,16,16,15,13,17,13,25,39,40,12,0,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 149, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,34,37,31,26,28,36,30,42,30,27,22,34,49],
[10,0,16,22,10,16,18,21,30,33,18,25,10,21,21],
[17,35,0,30,25,20,22,30,24,41,17,29,24,24,43],
[14,29,21,0,18,24,18,31,21,38,19,15,6,23,34],
[20,41,26,33,0,35,30,43,33,31,35,26,22,31,39],
[25,35,31,27,16,0,35,34,42,38,35,25,27,30,42],
[23,33,29,33,21,16,0,31,33,33,29,29,21,39,40],
[15,30,21,20,8,17,20,0,35,20,14,21,8,20,26],
[21,21,27,30,18,9,18,16,0,26,18,27,18,26,31],
[9,18,10,13,20,13,18,31,25,0,12,17,13,10,32],
[21,33,34,32,16,16,22,37,33,39,0,22,22,28,44],
[24,26,22,36,25,26,22,30,24,34,29,0,27,27,31],
[29,41,27,45,29,24,30,43,33,38,29,24,0,32,46],
[17,30,27,28,20,21,12,31,25,41,23,24,19,0,34],
[2,30,8,17,12,9,11,25,20,19,7,20,5,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 150, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,25,25,23,33,30,28,26,31,30,28,30,32,24],
[30,0,23,28,24,31,27,26,26,28,29,24,27,32,24],
[26,28,0,28,26,29,31,26,25,26,31,28,28,31,23],
[26,23,23,0,23,29,28,26,26,25,28,25,24,34,24],
[28,27,25,28,0,31,39,28,26,26,29,29,27,36,29],
[18,20,22,22,20,0,29,24,18,21,23,19,23,27,20],
[21,24,20,23,12,22,0,24,20,21,25,24,21,25,19],
[23,25,25,25,23,27,27,0,20,22,26,26,23,31,25],
[25,25,26,25,25,33,31,31,0,27,30,27,24,31,24],
[20,23,25,26,25,30,30,29,24,0,29,28,26,34,25],
[21,22,20,23,22,28,26,25,21,22,0,25,23,26,21],
[23,27,23,26,22,32,27,25,24,23,26,0,24,33,24],
[21,24,23,27,24,28,30,28,27,25,28,27,0,31,25],
[19,19,20,17,15,24,26,20,20,17,25,18,20,0,18],
[27,27,28,27,22,31,32,26,27,26,30,27,26,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 151, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,25,27,26,22,29,20,19,28,17,21,21,23,24],
[25,0,24,26,31,21,25,18,21,17,19,21,19,22,21],
[26,27,0,21,26,18,20,13,18,26,21,17,19,29,17],
[24,25,30,0,25,16,24,18,22,25,16,15,17,25,22],
[25,20,25,26,0,27,22,23,16,22,18,23,17,28,23],
[29,30,33,35,24,0,31,31,32,30,20,27,20,34,25],
[22,26,31,27,29,20,0,24,27,27,21,21,13,33,20],
[31,33,38,33,28,20,27,0,30,32,28,23,27,31,28],
[32,30,33,29,35,19,24,21,0,22,22,24,20,41,27],
[23,34,25,26,29,21,24,19,29,0,24,25,23,33,25],
[34,32,30,35,33,31,30,23,29,27,0,27,26,36,25],
[30,30,34,36,28,24,30,28,27,26,24,0,22,30,24],
[30,32,32,34,34,31,38,24,31,28,25,29,0,34,28],
[28,29,22,26,23,17,18,20,10,18,15,21,17,0,22],
[27,30,34,29,28,26,31,23,24,26,26,27,23,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 152, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,47,23,30,31,31,23,26,30,24,23,22,24,31],
[27,0,44,33,38,28,39,22,21,28,25,17,31,25,26],
[4,7,0,18,13,14,31,5,16,10,7,9,20,11,16],
[28,18,33,0,26,32,40,20,21,20,28,11,16,19,31],
[21,13,38,25,0,26,41,9,22,15,25,8,19,24,28],
[20,23,37,19,25,0,40,17,24,18,15,12,30,9,23],
[20,12,20,11,10,11,0,7,18,9,8,13,11,7,13],
[28,29,46,31,42,34,44,0,28,22,24,33,32,26,35],
[25,30,35,30,29,27,33,23,0,21,30,21,26,20,37],
[21,23,41,31,36,33,42,29,30,0,30,21,26,30,28],
[27,26,44,23,26,36,43,27,21,21,0,23,28,32,31],
[28,34,42,40,43,39,38,18,30,30,28,0,36,27,34],
[29,20,31,35,32,21,40,19,25,25,23,15,0,24,26],
[27,26,40,32,27,42,44,25,31,21,19,24,27,0,32],
[20,25,35,20,23,28,38,16,14,23,20,17,25,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 153, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,21,29,24,10,10,16,28,13,21,26,16,16,29],
[33,0,34,31,40,24,22,43,29,38,36,40,31,44,40],
[30,17,0,14,20,7,21,20,25,11,19,8,17,26,11],
[22,20,37,0,30,27,21,32,32,25,25,38,21,19,35],
[27,11,31,21,0,16,28,27,36,18,16,26,20,28,38],
[41,27,44,24,35,0,27,34,31,24,30,37,28,36,45],
[41,29,30,30,23,24,0,28,35,24,23,23,28,40,26],
[35,8,31,19,24,17,23,0,18,33,29,31,19,29,25],
[23,22,26,19,15,20,16,33,0,24,20,22,21,20,22],
[38,13,40,26,33,27,27,18,27,0,39,18,21,38,26],
[30,15,32,26,35,21,28,22,31,12,0,25,17,26,30],
[25,11,43,13,25,14,28,20,29,33,26,0,12,28,17],
[35,20,34,30,31,23,23,32,30,30,34,39,0,24,41],
[35,7,25,32,23,15,11,22,31,13,25,23,27,0,33],
[22,11,40,16,13,6,25,26,29,25,21,34,10,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 154, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,21,31,32,23,32,26,31,28,32,22,26,22,27],
[23,0,19,22,33,29,30,28,36,30,29,27,35,28,29],
[30,32,0,25,39,32,28,28,31,37,35,39,30,29,32],
[20,29,26,0,32,22,29,27,26,30,19,24,31,31,36],
[19,18,12,19,0,28,20,23,20,28,27,25,27,24,29],
[28,22,19,29,23,0,28,27,25,29,35,33,35,23,25],
[19,21,23,22,31,23,0,23,32,27,28,19,25,20,19],
[25,23,23,24,28,24,28,0,27,33,29,28,31,28,38],
[20,15,20,25,31,26,19,24,0,24,21,24,26,17,27],
[23,21,14,21,23,22,24,18,27,0,29,22,18,24,28],
[19,22,16,32,24,16,23,22,30,22,0,19,27,21,23],
[29,24,12,27,26,18,32,23,27,29,32,0,30,20,28],
[25,16,21,20,24,16,26,20,25,33,24,21,0,19,26],
[29,23,22,20,27,28,31,23,34,27,30,31,32,0,19],
[24,22,19,15,22,26,32,13,24,23,28,23,25,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 155, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,18,27,21,29,23,29,26,28,23,18,18,22,20],
[26,0,21,25,25,32,27,30,30,28,24,16,17,27,25],
[33,30,0,25,27,35,26,37,25,32,27,28,24,33,30],
[24,26,26,0,26,28,27,29,25,29,21,21,15,24,23],
[30,26,24,25,0,36,26,31,23,26,27,22,22,28,25],
[22,19,16,23,15,0,23,30,22,22,16,18,17,18,22],
[28,24,25,24,25,28,0,32,23,27,27,20,19,27,26],
[22,21,14,22,20,21,19,0,21,19,21,17,13,22,17],
[25,21,26,26,28,29,28,30,0,27,26,21,18,30,24],
[23,23,19,22,25,29,24,32,24,0,23,19,20,26,20],
[28,27,24,30,24,35,24,30,25,28,0,18,21,26,27],
[33,35,23,30,29,33,31,34,30,32,33,0,25,31,24],
[33,34,27,36,29,34,32,38,33,31,30,26,0,29,23],
[29,24,18,27,23,33,24,29,21,25,25,20,22,0,25],
[31,26,21,28,26,29,25,34,27,31,24,27,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 156, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,24,26,29,30,29,28,30,28,34,29,29,35,23],
[24,0,21,24,24,29,30,25,28,28,29,29,31,30,24],
[27,30,0,23,28,31,31,23,26,31,31,26,29,33,27],
[25,27,28,0,27,30,31,25,26,33,29,29,30,30,25],
[22,27,23,24,0,29,29,27,26,28,29,29,28,26,26],
[21,22,20,21,22,0,22,24,23,28,24,24,23,29,25],
[22,21,20,20,22,29,0,26,22,27,28,25,28,26,24],
[23,26,28,26,24,27,25,0,22,30,31,25,29,25,23],
[21,23,25,25,25,28,29,29,0,31,31,32,30,26,23],
[23,23,20,18,23,23,24,21,20,0,26,28,28,25,23],
[17,22,20,22,22,27,23,20,20,25,0,25,28,25,21],
[22,22,25,22,22,27,26,26,19,23,26,0,27,29,25],
[22,20,22,21,23,28,23,22,21,23,23,24,0,25,22],
[16,21,18,21,25,22,25,26,25,26,26,22,26,0,23],
[28,27,24,26,25,26,27,28,28,28,30,26,29,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 157, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,38,33,27,37,33,35,34,29,24,36,32,35,30],
[19,0,28,23,20,31,22,32,27,21,22,24,25,25,25],
[13,23,0,23,24,25,24,33,22,15,20,37,20,24,23],
[18,28,28,0,22,29,24,37,33,22,25,28,25,29,24],
[24,31,27,29,0,33,33,36,35,26,25,31,29,33,32],
[14,20,26,22,18,0,20,35,22,19,17,24,23,19,22],
[18,29,27,27,18,31,0,34,24,26,23,29,27,24,33],
[16,19,18,14,15,16,17,0,16,19,16,20,16,11,15],
[17,24,29,18,16,29,27,35,0,21,24,26,19,18,25],
[22,30,36,29,25,32,25,32,30,0,30,31,28,29,31],
[27,29,31,26,26,34,28,35,27,21,0,35,21,34,26],
[15,27,14,23,20,27,22,31,25,20,16,0,20,20,20],
[19,26,31,26,22,28,24,35,32,23,30,31,0,26,29],
[16,26,27,22,18,32,27,40,33,22,17,31,25,0,22],
[21,26,28,27,19,29,18,36,26,20,25,31,22,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 158, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,26,29,25,20,25,27,23,29,24,29,20,23,25],
[26,0,29,25,22,18,20,20,22,25,19,25,20,27,24],
[25,22,0,25,19,18,22,22,20,24,23,26,20,25,23],
[22,26,26,0,25,23,19,26,19,28,21,27,19,31,25],
[26,29,32,26,0,20,23,32,26,28,28,29,25,31,31],
[31,33,33,28,31,0,24,28,25,33,29,32,26,29,33],
[26,31,29,32,28,27,0,28,27,28,24,28,21,33,31],
[24,31,29,25,19,23,23,0,25,23,26,23,20,31,26],
[28,29,31,32,25,26,24,26,0,26,24,34,22,28,25],
[22,26,27,23,23,18,23,28,25,0,20,24,15,26,26],
[27,32,28,30,23,22,27,25,27,31,0,29,21,27,34],
[22,26,25,24,22,19,23,28,17,27,22,0,19,22,23],
[31,31,31,32,26,25,30,31,29,36,30,32,0,30,30],
[28,24,26,20,20,22,18,20,23,25,24,29,21,0,22],
[26,27,28,26,20,18,20,25,26,25,17,28,21,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 159, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,32,29,25,31,28,31,28,32,22,24,25,27,32],
[21,0,27,26,23,24,24,25,27,22,17,18,17,20,20],
[19,24,0,23,15,18,27,18,24,20,19,17,16,28,17],
[22,25,28,0,23,24,28,21,22,25,22,21,23,21,26],
[26,28,36,28,0,36,29,30,29,29,22,27,23,24,30],
[20,27,33,27,15,0,26,28,29,29,28,22,21,31,27],
[23,27,24,23,22,25,0,28,20,22,27,22,28,24,23],
[20,26,33,30,21,23,23,0,24,31,23,21,23,22,21],
[23,24,27,29,22,22,31,27,0,23,20,17,18,23,23],
[19,29,31,26,22,22,29,20,28,0,18,25,15,22,17],
[29,34,32,29,29,23,24,28,31,33,0,28,26,27,31],
[27,33,34,30,24,29,29,30,34,26,23,0,19,22,23],
[26,34,35,28,28,30,23,28,33,36,25,32,0,30,29],
[24,31,23,30,27,20,27,29,28,29,24,29,21,0,25],
[19,31,34,25,21,24,28,30,28,34,20,28,22,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 160, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,30,51,23,23,40,51,23,51,30,19,39,37,19],
[19,0,19,30,19,23,19,26,23,40,23,19,7,19,19],
[21,32,0,44,7,25,40,40,37,21,4,33,28,21,0],
[0,21,7,0,7,7,40,47,0,21,0,12,28,21,0],
[28,32,44,44,0,25,40,44,44,44,23,33,39,37,40],
[28,28,26,44,26,0,47,40,44,40,19,40,35,40,19],
[11,32,11,11,11,4,0,32,11,32,11,7,32,25,7],
[0,25,11,4,7,11,19,0,4,25,4,12,32,0,0],
[28,28,14,51,7,7,40,47,0,28,14,40,28,21,7],
[0,11,30,30,7,11,19,26,23,0,30,12,11,0,0],
[21,28,47,51,28,32,40,47,37,21,0,33,28,21,21],
[32,32,18,39,18,11,44,39,11,39,18,0,39,25,7],
[12,44,23,23,12,16,19,19,23,40,23,12,0,12,12],
[14,32,30,30,14,11,26,51,30,51,30,26,39,0,26],
[32,32,51,51,11,32,44,51,44,51,30,44,39,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 161, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,26,22,25,26,25,19,22,26,31,27,30,23,27],
[21,0,21,19,22,22,22,20,21,26,22,18,27,17,23],
[25,30,0,20,28,21,24,19,24,25,24,23,30,24,23],
[29,32,31,0,29,28,29,25,25,30,30,27,33,27,26],
[26,29,23,22,0,23,19,22,19,22,27,25,27,19,25],
[25,29,30,23,28,0,27,16,17,24,28,20,32,21,28],
[26,29,27,22,32,24,0,25,28,26,29,27,34,20,25],
[32,31,32,26,29,35,26,0,27,27,33,28,32,24,32],
[29,30,27,26,32,34,23,24,0,27,31,33,33,27,27],
[25,25,26,21,29,27,25,24,24,0,27,22,33,27,29],
[20,29,27,21,24,23,22,18,20,24,0,28,30,24,25],
[24,33,28,24,26,31,24,23,18,29,23,0,33,23,28],
[21,24,21,18,24,19,17,19,18,18,21,18,0,15,22],
[28,34,27,24,32,30,31,27,24,24,27,28,36,0,30],
[24,28,28,25,26,23,26,19,24,22,26,23,29,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 162, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,28,27,28,26,31,29,46,36,22,33,27,30],
[28,0,18,26,28,20,22,28,34,35,39,28,25,26,27],
[25,33,0,32,32,26,24,23,32,31,39,16,23,29,34],
[23,25,19,0,21,12,16,24,32,34,28,29,15,20,18],
[24,23,19,30,0,25,21,19,15,28,25,14,15,13,29],
[23,31,25,39,26,0,27,29,37,35,44,23,25,30,37],
[25,29,27,35,30,24,0,27,27,37,37,22,25,25,24],
[20,23,28,27,32,22,24,0,26,26,33,13,26,36,30],
[22,17,19,19,36,14,24,25,0,28,25,17,18,20,27],
[5,16,20,17,23,16,14,25,23,0,34,22,16,24,17],
[15,12,12,23,26,7,14,18,26,17,0,11,22,34,20],
[29,23,35,22,37,28,29,38,34,29,40,0,31,31,36],
[18,26,28,36,36,26,26,25,33,35,29,20,0,37,35],
[24,25,22,31,38,21,26,15,31,27,17,20,14,0,24],
[21,24,17,33,22,14,27,21,24,34,31,15,16,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 163, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,24,24,30,30,29,28,29,27,28,26,26,29,24],
[23,0,23,19,28,25,28,23,24,27,20,22,26,22,28],
[27,28,0,27,31,31,35,30,25,33,30,29,31,29,32],
[27,32,24,0,28,31,32,25,28,28,28,30,30,27,31],
[21,23,20,23,0,25,31,23,20,26,23,20,25,27,26],
[21,26,20,20,26,0,26,22,26,24,20,26,22,26,27],
[22,23,16,19,20,25,0,21,22,23,23,20,24,20,25],
[23,28,21,26,28,29,30,0,28,32,29,28,27,25,27],
[22,27,26,23,31,25,29,23,0,25,22,24,25,28,22],
[24,24,18,23,25,27,28,19,26,0,21,23,23,28,27],
[23,31,21,23,28,31,28,22,29,30,0,23,27,25,25],
[25,29,22,21,31,25,31,23,27,28,28,0,28,27,29],
[25,25,20,21,26,29,27,24,26,28,24,23,0,22,27],
[22,29,22,24,24,25,31,26,23,23,26,24,29,0,29],
[27,23,19,20,25,24,26,24,29,24,26,22,24,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 164, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,30,23,32,28,17,27,29,30,20,24,28,24,18],
[20,0,29,27,32,24,21,25,19,28,27,17,25,25,17],
[21,22,0,25,30,30,23,26,27,28,30,24,21,28,26],
[28,24,26,0,33,25,26,25,23,29,26,20,30,29,24],
[19,19,21,18,0,24,21,19,23,18,22,18,23,18,12],
[23,27,21,26,27,0,26,25,25,28,22,26,23,25,18],
[34,30,28,25,30,25,0,26,30,27,20,24,23,21,20],
[24,26,25,26,32,26,25,0,27,26,24,21,26,21,21],
[22,32,24,28,28,26,21,24,0,25,23,24,30,27,23],
[21,23,23,22,33,23,24,25,26,0,27,23,26,25,22],
[31,24,21,25,29,29,31,27,28,24,0,23,19,20,24],
[27,34,27,31,33,25,27,30,27,28,28,0,28,28,25],
[23,26,30,21,28,28,28,25,21,25,32,23,0,26,24],
[27,26,23,22,33,26,30,30,24,26,31,23,25,0,25],
[33,34,25,27,39,33,31,30,28,29,27,26,27,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 165, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,27,29,37,27,26,33,29,31,33,31,23,25,26],
[17,0,22,20,31,23,22,22,23,26,26,29,20,30,22],
[24,29,0,26,33,27,32,24,32,37,31,31,26,29,22],
[22,31,25,0,31,32,27,28,34,29,32,31,24,20,26],
[14,20,18,20,0,18,17,21,23,26,24,23,20,19,17],
[24,28,24,19,33,0,23,30,28,29,30,23,26,18,24],
[25,29,19,24,34,28,0,28,34,30,31,27,21,23,20],
[18,29,27,23,30,21,23,0,27,24,24,26,19,27,19],
[22,28,19,17,28,23,17,24,0,21,27,22,15,13,24],
[20,25,14,22,25,22,21,27,30,0,23,22,21,12,22],
[18,25,20,19,27,21,20,27,24,28,0,25,16,16,19],
[20,22,20,20,28,28,24,25,29,29,26,0,27,26,20],
[28,31,25,27,31,25,30,32,36,30,35,24,0,21,25],
[26,21,22,31,32,33,28,24,38,39,35,25,30,0,30],
[25,29,29,25,34,27,31,32,27,29,32,31,26,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 166, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,26,17,28,21,30,29,33,27,27,30,23,29,25],
[22,0,27,24,25,27,28,27,30,27,28,21,14,25,25],
[25,24,0,19,25,19,25,20,23,23,22,18,20,22,24],
[34,27,32,0,28,32,27,27,31,30,33,27,22,32,30],
[23,26,26,23,0,31,26,22,30,29,29,27,27,30,33],
[30,24,32,19,20,0,29,19,32,30,33,25,21,29,29],
[21,23,26,24,25,22,0,18,22,24,22,22,20,27,27],
[22,24,31,24,29,32,33,0,33,25,28,33,19,34,30],
[18,21,28,20,21,19,29,18,0,27,24,25,21,25,29],
[24,24,28,21,22,21,27,26,24,0,26,22,24,33,28],
[24,23,29,18,22,18,29,23,27,25,0,24,22,25,22],
[21,30,33,24,24,26,29,18,26,29,27,0,24,24,33],
[28,37,31,29,24,30,31,32,30,27,29,27,0,33,37],
[22,26,29,19,21,22,24,17,26,18,26,27,18,0,29],
[26,26,27,21,18,22,24,21,22,23,29,18,14,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 167, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,21,17,20,22,20,25,23,18,22,31,21,20,22],
[20,0,15,20,21,18,15,26,23,16,17,25,22,17,20],
[30,36,0,20,31,23,26,36,24,33,20,27,27,27,19],
[34,31,31,0,28,26,31,34,25,29,23,25,29,32,23],
[31,30,20,23,0,22,32,31,20,28,23,31,28,28,18],
[29,33,28,25,29,0,30,34,28,28,26,36,33,28,30],
[31,36,25,20,19,21,0,33,25,30,17,20,24,28,16],
[26,25,15,17,20,17,18,0,20,19,17,19,21,14,12],
[28,28,27,26,31,23,26,31,0,27,30,30,32,27,23],
[33,35,18,22,23,23,21,32,24,0,15,27,25,28,19],
[29,34,31,28,28,25,34,34,21,36,0,29,36,30,21],
[20,26,24,26,20,15,31,32,21,24,22,0,28,26,13],
[30,29,24,22,23,18,27,30,19,26,15,23,0,28,18],
[31,34,24,19,23,23,23,37,24,23,21,25,23,0,23],
[29,31,32,28,33,21,35,39,28,32,30,38,33,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 168, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,20,15,14,19,9,14,18,13,27,26,20,32,20],
[31,0,26,12,27,18,20,18,16,21,36,18,19,30,26],
[31,25,0,26,22,19,16,25,17,26,36,30,18,31,13],
[36,39,25,0,32,11,26,23,10,31,30,23,18,37,24],
[37,24,29,19,0,12,20,37,22,17,36,29,18,30,24],
[32,33,32,40,39,0,21,25,17,32,37,32,25,42,30],
[42,31,35,25,31,30,0,37,22,17,42,36,18,37,30],
[37,33,26,28,14,26,14,0,29,26,43,27,25,37,31],
[33,35,34,41,29,34,29,22,0,28,46,29,26,39,26],
[38,30,25,20,34,19,34,25,23,0,36,25,18,31,25],
[24,15,15,21,15,14,9,8,5,15,0,8,13,18,13],
[25,33,21,28,22,19,15,24,22,26,43,0,25,30,26],
[31,32,33,33,33,26,33,26,25,33,38,26,0,36,31],
[19,21,20,14,21,9,14,14,12,20,33,21,15,0,19],
[31,25,38,27,27,21,21,20,25,26,38,25,20,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 169, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,17,18,19,23,35,12,31,22,18,22,18,17,23],
[28,0,27,20,26,27,31,19,30,18,19,16,24,16,23],
[34,24,0,19,25,20,30,17,26,24,27,19,14,22,22],
[33,31,32,0,33,38,34,25,38,34,31,32,27,32,32],
[32,25,26,18,0,23,36,20,34,18,35,19,17,26,27],
[28,24,31,13,28,0,36,16,31,25,31,23,24,20,28],
[16,20,21,17,15,15,0,9,19,15,13,16,11,9,17],
[39,32,34,26,31,35,42,0,32,34,29,31,28,24,35],
[20,21,25,13,17,20,32,19,0,21,19,21,18,23,25],
[29,33,27,17,33,26,36,17,30,0,28,26,22,19,28],
[33,32,24,20,16,20,38,22,32,23,0,26,19,26,23],
[29,35,32,19,32,28,35,20,30,25,25,0,25,23,30],
[33,27,37,24,34,27,40,23,33,29,32,26,0,23,31],
[34,35,29,19,25,31,42,27,28,32,25,28,28,0,29],
[28,28,29,19,24,23,34,16,26,23,28,21,20,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 170, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,12,42,30,20,24,26,12,38,20,33,20,23,29],
[30,0,23,28,25,22,22,23,22,33,25,26,19,19,24],
[39,28,0,33,35,28,33,27,12,26,25,35,27,32,31],
[9,23,18,0,26,17,19,20,15,28,19,28,17,19,31],
[21,26,16,25,0,17,24,22,19,26,27,38,24,26,34],
[31,29,23,34,34,0,27,12,20,26,25,30,19,29,26],
[27,29,18,32,27,24,0,24,17,29,25,28,21,9,22],
[25,28,24,31,29,39,27,0,18,31,26,44,26,29,39],
[39,29,39,36,32,31,34,33,0,35,27,39,31,25,38],
[13,18,25,23,25,25,22,20,16,0,26,25,13,22,31],
[31,26,26,32,24,26,26,25,24,25,0,26,30,26,28],
[18,25,16,23,13,21,23,7,12,26,25,0,19,17,23],
[31,32,24,34,27,32,30,25,20,38,21,32,0,36,44],
[28,32,19,32,25,22,42,22,26,29,25,34,15,0,20],
[22,27,20,20,17,25,29,12,13,20,23,28,7,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 171, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,28,29,24,32,37,35,25,25,35,27,34,35,32],
[19,0,21,12,18,13,14,27,16,12,19,13,14,19,23],
[23,30,0,26,29,25,31,30,27,23,27,27,31,34,34],
[22,39,25,0,30,29,19,36,23,27,31,20,23,33,35],
[27,33,22,21,0,28,30,34,21,20,31,24,26,33,27],
[19,38,26,22,23,0,21,38,25,22,23,15,19,29,26],
[14,37,20,32,21,30,0,36,26,26,30,22,27,26,26],
[16,24,21,15,17,13,15,0,19,14,15,13,15,24,20],
[26,35,24,28,30,26,25,32,0,28,27,29,25,31,28],
[26,39,28,24,31,29,25,37,23,0,23,27,28,31,30],
[16,32,24,20,20,28,21,36,24,28,0,26,23,24,23],
[24,38,24,31,27,36,29,38,22,24,25,0,28,28,32],
[17,37,20,28,25,32,24,36,26,23,28,23,0,40,30],
[16,32,17,18,18,22,25,27,20,20,27,23,11,0,25],
[19,28,17,16,24,25,25,31,23,21,28,19,21,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 172, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,23,33,27,19,21,27,24,23,23,25,24,23,24],
[26,0,20,25,22,25,20,31,29,21,22,26,27,23,21],
[28,31,0,28,29,27,21,33,32,23,28,29,26,22,29],
[18,26,23,0,26,22,19,26,23,12,20,26,23,21,24],
[24,29,22,25,0,23,26,26,26,14,25,24,23,22,23],
[32,26,24,29,28,0,21,38,28,20,27,28,31,24,29],
[30,31,30,32,25,30,0,33,32,25,30,31,29,28,23],
[24,20,18,25,25,13,18,0,19,15,25,28,25,20,23],
[27,22,19,28,25,23,19,32,0,19,31,28,27,20,22],
[28,30,28,39,37,31,26,36,32,0,23,31,31,27,32],
[28,29,23,31,26,24,21,26,20,28,0,27,24,26,19],
[26,25,22,25,27,23,20,23,23,20,24,0,20,24,26],
[27,24,25,28,28,20,22,26,24,20,27,31,0,24,29],
[28,28,29,30,29,27,23,31,31,24,25,27,27,0,24],
[27,30,22,27,28,22,28,28,29,19,32,25,22,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 173, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,25,14,25,20,18,26,22,26,20,22,20,23,10],
[15,0,16,14,27,22,18,30,15,27,16,13,13,20,11],
[26,35,0,21,31,34,24,31,26,33,22,21,19,26,19],
[37,37,30,0,35,32,26,33,21,32,26,31,24,31,23],
[26,24,20,16,0,26,23,22,23,24,19,16,19,32,17],
[31,29,17,19,25,0,25,22,22,27,22,26,23,29,13],
[33,33,27,25,28,26,0,26,22,24,21,16,17,31,23],
[25,21,20,18,29,29,25,0,24,31,13,20,22,27,20],
[29,36,25,30,28,29,29,27,0,37,26,24,32,37,24],
[25,24,18,19,27,24,27,20,14,0,22,20,15,23,14],
[31,35,29,25,32,29,30,38,25,29,0,23,20,30,23],
[29,38,30,20,35,25,35,31,27,31,28,0,25,35,24],
[31,38,32,27,32,28,34,29,19,36,31,26,0,34,27],
[28,31,25,20,19,22,20,24,14,28,21,16,17,0,15],
[41,40,32,28,34,38,28,31,27,37,28,27,24,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 174, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,49,44,44,49,40,24,40,40,40,42,28,33,51],
[18,0,39,36,44,41,22,8,32,33,29,28,33,13,42],
[2,12,0,11,40,11,20,10,23,26,10,29,6,10,44],
[7,15,40,0,44,19,23,11,35,27,14,28,17,11,45],
[7,7,11,7,0,14,20,15,30,30,17,16,10,18,40],
[2,10,40,32,37,0,18,13,37,38,16,23,8,16,47],
[11,29,31,28,31,33,0,14,24,32,32,29,23,27,39],
[27,43,41,40,36,38,37,0,25,45,34,36,43,27,36],
[11,19,28,16,21,14,27,26,0,35,16,28,19,19,29],
[11,18,25,24,21,13,19,6,16,0,16,16,15,14,21],
[11,22,41,37,34,35,19,17,35,35,0,24,17,20,38],
[9,23,22,23,35,28,22,15,23,35,27,0,18,27,33],
[23,18,45,34,41,43,28,8,32,36,34,33,0,15,42],
[18,38,41,40,33,35,24,24,32,37,31,24,36,0,34],
[0,9,7,6,11,4,12,15,22,30,13,18,9,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 175, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,26,17,23,23,18,22,24,15,25,27,24,20,20],
[42,0,36,30,33,30,22,31,32,33,32,33,36,32,35],
[25,15,0,15,27,27,21,23,19,18,23,23,23,18,22],
[34,21,36,0,31,33,23,31,28,29,28,38,34,26,28],
[28,18,24,20,0,25,24,29,24,21,28,30,27,21,21],
[28,21,24,18,26,0,27,24,29,22,25,34,28,21,26],
[33,29,30,28,27,24,0,24,29,29,31,31,32,27,33],
[29,20,28,20,22,27,27,0,24,26,29,29,27,27,28],
[27,19,32,23,27,22,22,27,0,24,31,28,24,22,23],
[36,18,33,22,30,29,22,25,27,0,27,37,34,19,28],
[26,19,28,23,23,26,20,22,20,24,0,24,27,15,21],
[24,18,28,13,21,17,20,22,23,14,27,0,23,18,22],
[27,15,28,17,24,23,19,24,27,17,24,28,0,14,17],
[31,19,33,25,30,30,24,24,29,32,36,33,37,0,24],
[31,16,29,23,30,25,18,23,28,23,30,29,34,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 176, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,30,17,24,15,19,20,22,18,23,23,22,16,20],
[31,0,35,27,36,26,29,31,30,32,33,25,32,30,31],
[21,16,0,21,25,19,19,23,21,23,26,16,24,15,19],
[34,24,30,0,24,21,24,26,21,24,28,24,26,21,25],
[27,15,26,27,0,19,18,26,23,25,29,17,29,21,17],
[36,25,32,30,32,0,27,31,24,31,37,31,31,27,31],
[32,22,32,27,33,24,0,28,27,31,31,33,33,28,29],
[31,20,28,25,25,20,23,0,24,29,28,19,26,20,28],
[29,21,30,30,28,27,24,27,0,28,33,29,29,24,32],
[33,19,28,27,26,20,20,22,23,0,27,24,22,16,24],
[28,18,25,23,22,14,20,23,18,24,0,19,30,16,23],
[28,26,35,27,34,20,18,32,22,27,32,0,28,24,29],
[29,19,27,25,22,20,18,25,22,29,21,23,0,16,19],
[35,21,36,30,30,24,23,31,27,35,35,27,35,0,27],
[31,20,32,26,34,20,22,23,19,27,28,22,32,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 177, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,28,22,23,25,24,17,21,25,19,26,24,24],
[24,0,32,30,29,20,31,28,18,22,27,27,25,26,24],
[23,19,0,21,23,15,25,22,17,19,20,18,20,25,23],
[23,21,30,0,30,22,26,28,17,18,19,22,21,27,21],
[29,22,28,21,0,19,29,18,20,22,18,18,18,20,21],
[28,31,36,29,32,0,33,28,22,26,25,24,29,29,33],
[26,20,26,25,22,18,0,20,20,20,18,15,25,21,28],
[27,23,29,23,33,23,31,0,26,26,25,30,28,25,30],
[34,33,34,34,31,29,31,25,0,24,32,29,29,33,33],
[30,29,32,33,29,25,31,25,27,0,26,26,32,31,29],
[26,24,31,32,33,26,33,26,19,25,0,20,26,32,31],
[32,24,33,29,33,27,36,21,22,25,31,0,27,26,31],
[25,26,31,30,33,22,26,23,22,19,25,24,0,21,29],
[27,25,26,24,31,22,30,26,18,20,19,25,30,0,31],
[27,27,28,30,30,18,23,21,18,22,20,20,22,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 178, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,28,20,46,27,27,27,23,20,23,41,20,35,28],
[28,0,32,0,28,23,12,12,15,28,41,28,0,48,5],
[23,19,0,0,26,23,7,7,10,23,36,21,0,26,0],
[31,51,51,0,51,23,28,48,31,48,51,28,36,51,31],
[5,23,25,0,0,0,0,5,8,5,25,21,0,28,5],
[24,28,28,28,51,0,8,32,8,44,44,21,28,51,8],
[24,39,44,23,51,43,0,48,24,44,44,21,39,51,24],
[24,39,44,3,46,19,3,0,8,19,39,21,23,51,24],
[28,36,41,20,43,43,27,43,0,43,36,41,20,48,21],
[31,23,28,3,46,7,7,32,8,0,23,21,23,35,8],
[28,10,15,0,26,7,7,12,15,28,0,28,0,15,5],
[10,23,30,23,30,30,30,30,10,30,23,0,23,30,3],
[31,51,51,15,51,23,12,28,31,28,51,28,0,51,31],
[16,3,25,0,23,0,0,0,3,16,36,21,0,0,0],
[23,46,51,20,46,43,27,27,30,43,46,48,20,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 179, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,24,26,28,20,23,24,23,26,26,23,18,29,27],
[30,0,31,24,26,22,26,27,28,26,31,24,21,30,29],
[27,20,0,20,26,19,19,18,21,23,28,17,16,20,27],
[25,27,31,0,25,28,23,21,23,27,30,21,23,27,26],
[23,25,25,26,0,24,25,23,24,22,31,23,24,24,24],
[31,29,32,23,27,0,24,31,28,26,31,22,23,32,31],
[28,25,32,28,26,27,0,31,27,24,36,31,25,26,25],
[27,24,33,30,28,20,20,0,29,24,29,21,22,32,29],
[28,23,30,28,27,23,24,22,0,19,29,22,23,29,27],
[25,25,28,24,29,25,27,27,32,0,33,21,22,33,32],
[25,20,23,21,20,20,15,22,22,18,0,22,19,22,23],
[28,27,34,30,28,29,20,30,29,30,29,0,26,31,31],
[33,30,35,28,27,28,26,29,28,29,32,25,0,33,27],
[22,21,31,24,27,19,25,19,22,18,29,20,18,0,28],
[24,22,24,25,27,20,26,22,24,19,28,20,24,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 180, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,19,29,13,26,21,25,24,19,27,27,26,8,27],
[42,0,19,30,20,26,22,33,32,26,24,44,49,31,26],
[32,32,0,36,27,22,31,35,25,19,37,35,41,29,28],
[22,21,15,0,15,19,14,31,32,22,17,26,30,22,13],
[38,31,24,36,0,26,30,31,36,23,24,44,40,29,23],
[25,25,29,32,25,0,25,25,24,27,25,38,34,23,19],
[30,29,20,37,21,26,0,27,33,26,18,34,36,23,22],
[26,18,16,20,20,26,24,0,21,14,29,22,27,19,12],
[27,19,26,19,15,27,18,30,0,21,30,38,28,28,20],
[32,25,32,29,28,24,25,37,30,0,28,36,41,22,23],
[24,27,14,34,27,26,33,22,21,23,0,34,34,14,21],
[24,7,16,25,7,13,17,29,13,15,17,0,23,15,20],
[25,2,10,21,11,17,15,24,23,10,17,28,0,15,9],
[43,20,22,29,22,28,28,32,23,29,37,36,36,0,29],
[24,25,23,38,28,32,29,39,31,28,30,31,42,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 181, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,23,20,27,22,21,18,26,21,19,15,21,26,20],
[25,0,31,26,31,32,25,24,24,24,23,22,25,34,27],
[28,20,0,21,21,23,23,16,21,21,18,18,18,28,25],
[31,25,30,0,25,28,23,29,22,21,26,23,25,28,31],
[24,20,30,26,0,26,26,28,26,23,23,23,27,31,23],
[29,19,28,23,25,0,25,24,24,24,29,20,24,26,25],
[30,26,28,28,25,26,0,25,25,24,26,22,26,29,25],
[33,27,35,22,23,27,26,0,28,29,28,22,25,32,33],
[25,27,30,29,25,27,26,23,0,22,25,22,26,34,29],
[30,27,30,30,28,27,27,22,29,0,25,29,29,32,28],
[32,28,33,25,28,22,25,23,26,26,0,18,22,33,22],
[36,29,33,28,28,31,29,29,29,22,33,0,31,34,26],
[30,26,33,26,24,27,25,26,25,22,29,20,0,32,28],
[25,17,23,23,20,25,22,19,17,19,18,17,19,0,20],
[31,24,26,20,28,26,26,18,22,23,29,25,23,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 182, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,18,22,19,19,16,25,23,24,20,24,24,32,16],
[25,0,19,20,15,23,26,18,23,17,26,25,29,31,8],
[33,32,0,42,30,30,36,38,22,33,31,25,36,33,26],
[29,31,9,0,20,25,22,24,18,24,21,21,29,18,21],
[32,36,21,31,0,21,37,36,31,36,25,29,37,37,25],
[32,28,21,26,30,0,28,36,21,25,32,28,37,28,17],
[35,25,15,29,14,23,0,20,19,29,26,20,31,36,14],
[26,33,13,27,15,15,31,0,24,23,31,22,30,27,6],
[28,28,29,33,20,30,32,27,0,23,17,28,34,33,16],
[27,34,18,27,15,26,22,28,28,0,28,28,33,28,17],
[31,25,20,30,26,19,25,20,34,23,0,32,30,32,16],
[27,26,26,30,22,23,31,29,23,23,19,0,41,40,14],
[27,22,15,22,14,14,20,21,17,18,21,10,0,22,10],
[19,20,18,33,14,23,15,24,18,23,19,11,29,0,15],
[35,43,25,30,26,34,37,45,35,34,35,37,41,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 183, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,25,20,19,23,17,21,23,24,19,23,25,19,20],
[22,0,17,19,14,19,19,22,17,13,18,24,17,19,27],
[26,34,0,29,24,27,27,31,20,27,22,28,32,29,24],
[31,32,22,0,22,29,26,32,28,27,21,27,24,30,25],
[32,37,27,29,0,29,28,26,26,22,29,28,33,28,30],
[28,32,24,22,22,0,25,26,18,21,19,20,31,23,28],
[34,32,24,25,23,26,0,36,25,26,33,28,26,24,23],
[30,29,20,19,25,25,15,0,25,24,21,25,25,26,26],
[28,34,31,23,25,33,26,26,0,26,21,28,28,27,28],
[27,38,24,24,29,30,25,27,25,0,28,30,31,27,31],
[32,33,29,30,22,32,18,30,30,23,0,29,29,28,26],
[28,27,23,24,23,31,23,26,23,21,22,0,26,26,24],
[26,34,19,27,18,20,25,26,23,20,22,25,0,27,25],
[32,32,22,21,23,28,27,25,24,24,23,25,24,0,22],
[31,24,27,26,21,23,28,25,23,20,25,27,26,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 184, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,24,16,26,22,30,26,21,20,17,19,33,29,34],
[23,0,30,19,25,32,24,30,30,9,19,18,35,34,31],
[27,21,0,27,26,25,26,22,32,17,19,20,29,31,27],
[35,32,24,0,32,21,30,36,32,31,32,17,32,31,31],
[25,26,25,19,0,33,20,32,29,16,19,22,29,26,36],
[29,19,26,30,18,0,25,24,24,20,19,23,18,25,21],
[21,27,25,21,31,26,0,29,23,23,26,28,30,29,40],
[25,21,29,15,19,27,22,0,29,16,12,23,31,26,26],
[30,21,19,19,22,27,28,22,0,25,25,25,24,30,28],
[31,42,34,20,35,31,28,35,26,0,23,19,37,30,33],
[34,32,32,19,32,32,25,39,26,28,0,29,32,26,29],
[32,33,31,34,29,28,23,28,26,32,22,0,31,33,28],
[18,16,22,19,22,33,21,20,27,14,19,20,0,20,22],
[22,17,20,20,25,26,22,25,21,21,25,18,31,0,25],
[17,20,24,20,15,30,11,25,23,18,22,23,29,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 185, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,28,24,19,19,0,19,37,42,28,0,28,18,24],
[32,0,46,14,37,27,27,27,27,51,14,27,28,23,33],
[23,5,0,5,23,23,0,0,23,42,5,23,0,23,5],
[27,37,46,0,37,37,27,37,37,37,9,18,28,18,28],
[32,14,28,14,0,14,9,9,32,51,14,14,28,23,14],
[32,24,28,14,37,0,9,19,37,51,14,23,28,23,33],
[51,24,51,24,42,42,0,19,42,42,33,42,33,42,24],
[32,24,51,14,42,32,32,0,51,51,14,32,33,23,33],
[14,24,28,14,19,14,9,0,0,51,14,14,28,5,33],
[9,0,9,14,0,0,9,0,0,0,9,0,9,0,14],
[23,37,46,42,37,37,18,37,37,42,0,18,37,23,42],
[51,24,28,33,37,28,9,19,37,51,33,0,28,23,33],
[23,23,51,23,23,23,18,18,23,42,14,23,0,23,23],
[33,28,28,33,28,28,9,28,46,51,28,28,28,0,33],
[27,18,46,23,37,18,27,18,18,37,9,18,28,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 186, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,28,30,28,27,31,26,30,26,25,24,34,29,25],
[25,0,27,24,26,31,26,28,31,23,28,27,30,21,30],
[23,24,0,22,26,24,23,24,32,25,26,29,24,19,26],
[21,27,29,0,25,26,20,24,27,22,25,21,26,20,28],
[23,25,25,26,0,24,25,27,29,26,27,23,23,21,25],
[24,20,27,25,27,0,27,25,29,23,26,26,33,23,29],
[20,25,28,31,26,24,0,26,30,26,30,23,29,23,28],
[25,23,27,27,24,26,25,0,28,21,27,21,25,23,24],
[21,20,19,24,22,22,21,23,0,20,24,20,25,18,22],
[25,28,26,29,25,28,25,30,31,0,25,30,28,26,31],
[26,23,25,26,24,25,21,24,27,26,0,23,29,19,29],
[27,24,22,30,28,25,28,30,31,21,28,0,28,28,30],
[17,21,27,25,28,18,22,26,26,23,22,23,0,20,23],
[22,30,32,31,30,28,28,28,33,25,32,23,31,0,30],
[26,21,25,23,26,22,23,27,29,20,22,21,28,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 187, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,29,38,25,35,31,28,29,31,30,23,34,32,32],
[21,0,27,26,27,25,27,31,20,27,26,24,31,25,21],
[22,24,0,30,27,32,23,26,24,24,25,22,27,26,22],
[13,25,21,0,27,25,22,21,21,26,22,20,23,28,20],
[26,24,24,24,0,28,24,30,25,30,31,22,28,31,26],
[16,26,19,26,23,0,22,21,24,26,22,21,19,26,22],
[20,24,28,29,27,29,0,25,26,34,29,23,26,32,28],
[23,20,25,30,21,30,26,0,27,34,26,30,31,24,26],
[22,31,27,30,26,27,25,24,0,28,29,31,26,26,30],
[20,24,27,25,21,25,17,17,23,0,20,20,26,18,24],
[21,25,26,29,20,29,22,25,22,31,0,21,27,25,27],
[28,27,29,31,29,30,28,21,20,31,30,0,29,30,24],
[17,20,24,28,23,32,25,20,25,25,24,22,0,25,20],
[19,26,25,23,20,25,19,27,25,33,26,21,26,0,27],
[19,30,29,31,25,29,23,25,21,27,24,27,31,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 188, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,30,25,28,25,22,24,37,33,29,32,27,33,29],
[22,0,32,27,24,27,24,22,34,29,29,30,35,30,29],
[21,19,0,13,16,15,10,14,26,24,21,26,17,23,30],
[26,24,38,0,26,29,25,29,35,32,26,33,35,25,26],
[23,27,35,25,0,31,29,21,34,25,27,18,37,26,29],
[26,24,36,22,20,0,19,20,30,19,27,17,25,29,21],
[29,27,41,26,22,32,0,16,31,25,23,22,33,31,31],
[27,29,37,22,30,31,35,0,35,26,33,26,29,32,32],
[14,17,25,16,17,21,20,16,0,18,18,11,17,14,20],
[18,22,27,19,26,32,26,25,33,0,27,25,27,24,24],
[22,22,30,25,24,24,28,18,33,24,0,27,26,20,33],
[19,21,25,18,33,34,29,25,40,26,24,0,28,25,25],
[24,16,34,16,14,26,18,22,34,24,25,23,0,27,26],
[18,21,28,26,25,22,20,19,37,27,31,26,24,0,31],
[22,22,21,25,22,30,20,19,31,27,18,26,25,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 189, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,29,24,27,28,27,26,28,29,24,23,22,21,27],
[22,0,25,18,26,18,32,22,27,27,27,20,22,20,25],
[22,26,0,24,22,23,26,20,23,27,29,21,17,20,23],
[27,33,27,0,31,27,36,29,30,36,30,27,23,27,30],
[24,25,29,20,0,28,27,21,25,27,27,22,24,21,27],
[23,33,28,24,23,0,34,25,24,30,28,26,29,21,32],
[24,19,25,15,24,17,0,19,19,23,24,16,23,15,24],
[25,29,31,22,30,26,32,0,25,30,25,25,23,15,24],
[23,24,28,21,26,27,32,26,0,33,26,23,21,15,26],
[22,24,24,15,24,21,28,21,18,0,22,19,19,15,26],
[27,24,22,21,24,23,27,26,25,29,0,16,23,17,25],
[28,31,30,24,29,25,35,26,28,32,35,0,27,22,35],
[29,29,34,28,27,22,28,28,30,32,28,24,0,24,30],
[30,31,31,24,30,30,36,36,36,36,34,29,27,0,32],
[24,26,28,21,24,19,27,27,25,25,26,16,21,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 190, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,28,25,28,27,29,25,24,22,23,19,19,28,30],
[18,0,18,17,23,21,24,25,20,24,12,23,12,27,32],
[23,33,0,24,27,36,37,23,32,30,25,24,19,30,31],
[26,34,27,0,32,37,34,33,32,35,27,33,25,27,31],
[23,28,24,19,0,17,26,14,20,21,15,19,20,28,30],
[24,30,15,14,34,0,32,23,27,35,27,27,28,26,27],
[22,27,14,17,25,19,0,13,18,23,11,17,11,21,27],
[26,26,28,18,37,28,38,0,23,29,26,23,31,30,30],
[27,31,19,19,31,24,33,28,0,29,28,21,24,34,26],
[29,27,21,16,30,16,28,22,22,0,22,23,23,24,29],
[28,39,26,24,36,24,40,25,23,29,0,29,37,35,32],
[32,28,27,18,32,24,34,28,30,28,22,0,22,21,21],
[32,39,32,26,31,23,40,20,27,28,14,29,0,26,33],
[23,24,21,24,23,25,30,21,17,27,16,30,25,0,20],
[21,19,20,20,21,24,24,21,25,22,19,30,18,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 191, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,21,16,28,19,22,15,28,23,28,26,10,19,30],
[28,0,23,30,31,15,18,18,22,27,17,24,19,19,27],
[30,28,0,27,33,21,15,28,26,23,26,25,20,19,28],
[35,21,24,0,31,18,30,22,33,23,30,27,20,19,31],
[23,20,18,20,0,14,16,17,20,16,18,27,20,16,27],
[32,36,30,33,37,0,27,31,30,27,30,23,23,26,29],
[29,33,36,21,35,24,0,30,38,33,31,26,22,28,34],
[36,33,23,29,34,20,21,0,31,25,24,20,19,16,27],
[23,29,25,18,31,21,13,20,0,28,29,23,21,21,33],
[28,24,28,28,35,24,18,26,23,0,21,23,25,12,28],
[23,34,25,21,33,21,20,27,22,30,0,29,16,30,23],
[25,27,26,24,24,28,25,31,28,28,22,0,23,26,31],
[41,32,31,31,31,28,29,32,30,26,35,28,0,23,33],
[32,32,32,32,35,25,23,35,30,39,21,25,28,0,36],
[21,24,23,20,24,22,17,24,18,23,28,20,18,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 192, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,23,20,22,19,20,24,22,25,25,25,24,31,22],
[36,0,28,24,27,28,24,26,29,27,29,34,28,27,22],
[28,23,0,25,24,24,26,25,30,28,20,25,24,29,29],
[31,27,26,0,30,28,28,29,26,33,25,30,28,29,22],
[29,24,27,21,0,27,25,26,25,25,25,29,23,26,24],
[32,23,27,23,24,0,23,23,31,31,20,28,26,31,22],
[31,27,25,23,26,28,0,30,34,28,24,33,27,27,32],
[27,25,26,22,25,28,21,0,31,27,25,25,19,28,23],
[29,22,21,25,26,20,17,20,0,23,19,25,25,26,25],
[26,24,23,18,26,20,23,24,28,0,21,30,21,27,21],
[26,22,31,26,26,31,27,26,32,30,0,33,19,29,26],
[26,17,26,21,22,23,18,26,26,21,18,0,18,31,26],
[27,23,27,23,28,25,24,32,26,30,32,33,0,29,27],
[20,24,22,22,25,20,24,23,25,24,22,20,22,0,25],
[29,29,22,29,27,29,19,28,26,30,25,25,24,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 193, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,26,33,27,24,24,22,26,18,24,44,31,32,29],
[10,0,8,15,14,15,15,8,10,7,6,21,7,11,24],
[25,43,0,33,27,21,26,28,28,27,31,29,42,36,27],
[18,36,18,0,27,26,29,13,21,13,15,25,21,18,22],
[24,37,24,24,0,26,21,16,18,21,24,23,26,24,29],
[27,36,30,25,25,0,29,24,20,24,24,26,30,23,18],
[27,36,25,22,30,22,0,23,21,17,25,28,22,23,28],
[29,43,23,38,35,27,28,0,34,19,27,35,32,36,29],
[25,41,23,30,33,31,30,17,0,12,19,37,30,19,24],
[33,44,24,38,30,27,34,32,39,0,36,35,40,26,26],
[27,45,20,36,27,27,26,24,32,15,0,39,27,26,29],
[7,30,22,26,28,25,23,16,14,16,12,0,18,21,19],
[20,44,9,30,25,21,29,19,21,11,24,33,0,14,24],
[19,40,15,33,27,28,28,15,32,25,25,30,37,0,26],
[22,27,24,29,22,33,23,22,27,25,22,32,27,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 194, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,28,25,29,22,24,16,20,22,14,19,23,20,23],
[32,0,24,26,30,31,22,25,21,20,15,24,26,31,25],
[23,27,0,30,30,26,25,24,16,20,22,21,26,30,27],
[26,25,21,0,27,21,21,16,13,22,14,23,23,26,21],
[22,21,21,24,0,23,28,18,16,28,14,23,25,24,20],
[29,20,25,30,28,0,27,21,18,28,25,27,32,32,25],
[27,29,26,30,23,24,0,27,27,39,22,22,22,32,29],
[35,26,27,35,33,30,24,0,22,28,20,26,28,37,30],
[31,30,35,38,35,33,24,29,0,29,32,30,38,36,32],
[29,31,31,29,23,23,12,23,22,0,20,28,27,34,27],
[37,36,29,37,37,26,29,31,19,31,0,32,40,34,37],
[32,27,30,28,28,24,29,25,21,23,19,0,32,31,29],
[28,25,25,28,26,19,29,23,13,24,11,19,0,25,22],
[31,20,21,25,27,19,19,14,15,17,17,20,26,0,26],
[28,26,24,30,31,26,22,21,19,24,14,22,29,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 195, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,19,27,25,31,22,29,26,30,28,24,20,34,26],
[26,0,23,27,19,23,21,26,18,22,23,26,21,26,19],
[32,28,0,32,35,37,29,32,24,34,30,29,22,32,36],
[24,24,19,0,24,29,22,29,25,22,26,18,27,27,21],
[26,32,16,27,0,32,23,27,26,29,19,19,20,23,30],
[20,28,14,22,19,0,15,21,21,21,17,21,19,27,19],
[29,30,22,29,28,36,0,33,28,33,20,30,28,28,30],
[22,25,19,22,24,30,18,0,20,18,18,16,21,27,15],
[25,33,27,26,25,30,23,31,0,23,22,27,22,29,23],
[21,29,17,29,22,30,18,33,28,0,20,17,20,27,22],
[23,28,21,25,32,34,31,33,29,31,0,25,23,32,30],
[27,25,22,33,32,30,21,35,24,34,26,0,20,33,29],
[31,30,29,24,31,32,23,30,29,31,28,31,0,30,33],
[17,25,19,24,28,24,23,24,22,24,19,18,21,0,18],
[25,32,15,30,21,32,21,36,28,29,21,22,18,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 196, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,17,29,32,26,24,22,33,22,18,25,22,26,29],
[32,0,18,36,43,35,27,28,30,37,28,29,37,24,36],
[34,33,0,38,40,39,32,33,34,39,33,32,34,23,35],
[22,15,13,0,28,24,28,21,22,29,18,16,22,24,22],
[19,8,11,23,0,25,21,16,22,21,20,20,16,19,28],
[25,16,12,27,26,0,29,31,22,19,17,22,24,24,29],
[27,24,19,23,30,22,0,24,26,26,22,30,24,29,31],
[29,23,18,30,35,20,27,0,28,29,24,28,30,24,32],
[18,21,17,29,29,29,25,23,0,24,21,26,22,25,26],
[29,14,12,22,30,32,25,22,27,0,24,19,22,25,32],
[33,23,18,33,31,34,29,27,30,27,0,30,33,27,30],
[26,22,19,35,31,29,21,23,25,32,21,0,28,23,27],
[29,14,17,29,35,27,27,21,29,29,18,23,0,18,21],
[25,27,28,27,32,27,22,27,26,26,24,28,33,0,32],
[22,15,16,29,23,22,20,19,25,19,21,24,30,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 197, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,31,33,23,20,31,32,29,26,27,26,33,25,25],
[25,0,38,26,27,16,29,30,35,32,32,29,34,25,30],
[20,13,0,20,20,16,26,25,22,24,24,23,28,21,16],
[18,25,31,0,26,23,29,24,32,21,24,26,35,24,20],
[28,24,31,25,0,21,27,26,31,27,27,25,33,23,26],
[31,35,35,28,30,0,33,27,36,30,34,33,33,33,24],
[20,22,25,22,24,18,0,18,30,24,18,22,33,26,23],
[19,21,26,27,25,24,33,0,37,29,34,29,34,28,26],
[22,16,29,19,20,15,21,14,0,16,20,17,25,20,24],
[25,19,27,30,24,21,27,22,35,0,27,29,31,25,25],
[24,19,27,27,24,17,33,17,31,24,0,24,35,20,26],
[25,22,28,25,26,18,29,22,34,22,27,0,31,24,21],
[18,17,23,16,18,18,18,17,26,20,16,20,0,27,12],
[26,26,30,27,28,18,25,23,31,26,31,27,24,0,20],
[26,21,35,31,25,27,28,25,27,26,25,30,39,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 198, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,27,22,29,19,29,26,33,27,24,27,24,22,34],
[31,0,31,20,30,31,31,22,34,30,29,29,34,20,36],
[24,20,0,20,31,23,29,23,29,25,24,26,26,21,31],
[29,31,31,0,26,28,26,30,26,24,32,23,26,19,33],
[22,21,20,25,0,27,18,25,20,29,21,20,28,24,28],
[32,20,28,23,24,0,28,26,26,26,25,25,24,20,35],
[22,20,22,25,33,23,0,21,29,28,21,21,30,25,27],
[25,29,28,21,26,25,30,0,32,29,26,25,31,22,36],
[18,17,22,25,31,25,22,19,0,27,21,22,18,22,26],
[24,21,26,27,22,25,23,22,24,0,25,22,19,23,24],
[27,22,27,19,30,26,30,25,30,26,0,27,30,23,31],
[24,22,25,28,31,26,30,26,29,29,24,0,29,22,30],
[27,17,25,25,23,27,21,20,33,32,21,22,0,29,34],
[29,31,30,32,27,31,26,29,29,28,28,29,22,0,28],
[17,15,20,18,23,16,24,15,25,27,20,21,17,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 199, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,20,25,24,13,25,33,21,13,15,25,21,20,23],
[27,0,18,32,27,28,31,38,21,24,22,35,28,23,30],
[31,33,0,34,24,26,32,31,28,22,21,37,25,27,32],
[26,19,17,0,22,27,28,31,16,17,19,27,28,19,23],
[27,24,27,29,0,22,28,43,28,22,23,26,18,31,30],
[38,23,25,24,29,0,34,37,24,17,18,26,22,27,23],
[26,20,19,23,23,17,0,31,24,18,24,24,16,14,24],
[18,13,20,20,8,14,20,0,21,12,13,19,11,16,12],
[30,30,23,35,23,27,27,30,0,18,15,40,21,29,23],
[38,27,29,34,29,34,33,39,33,0,29,30,19,32,27],
[36,29,30,32,28,33,27,38,36,22,0,37,18,22,33],
[26,16,14,24,25,25,27,32,11,21,14,0,29,24,23],
[30,23,26,23,33,29,35,40,30,32,33,22,0,30,28],
[31,28,24,32,20,24,37,35,22,19,29,27,21,0,26],
[28,21,19,28,21,28,27,39,28,24,18,28,23,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 51, 200, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbd/mebbd_15_51.csv", index=False, header=False)
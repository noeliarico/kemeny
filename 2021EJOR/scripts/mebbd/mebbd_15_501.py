
import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg
from kemeny import sc

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,245,246,255,250,244,249,248,269,251,266,252,253,251,247],
[256,0,261,260,274,259,248,265,259,265,276,246,263,252,263],
[255,240,0,246,249,253,234,250,245,241,240,231,261,229,247],
[246,241,255,0,247,266,253,260,263,257,263,240,252,230,260],
[251,227,252,254,0,264,249,269,251,256,257,235,259,230,249],
[257,242,248,235,237,0,240,265,251,245,244,245,251,237,260],
[252,253,267,248,252,261,0,276,265,262,253,262,276,256,262],
[253,236,251,241,232,236,225,0,246,247,248,224,245,229,236],
[232,242,256,238,250,250,236,255,0,242,229,227,242,222,239],
[250,236,260,244,245,256,239,254,259,0,254,251,250,234,255],
[235,225,261,238,244,257,248,253,272,247,0,228,255,245,227],
[249,255,270,261,266,256,239,277,274,250,273,0,267,251,275],
[248,238,240,249,242,250,225,256,259,251,246,234,0,238,243],
[250,249,272,271,271,264,245,272,279,267,256,250,263,0,258],
[254,238,254,241,252,241,239,265,262,246,274,226,258,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 1, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,270,262,269,244,257,265,258,268,260,246,260,273,260],
[244,0,257,254,226,245,239,255,242,254,248,242,251,246,253],
[231,244,0,242,244,232,235,246,251,244,249,247,246,255,245],
[239,247,259,0,256,245,247,263,237,255,242,247,241,258,237],
[232,275,257,245,0,234,247,256,247,269,250,230,245,268,240],
[257,256,269,256,267,0,258,261,248,268,262,243,257,263,258],
[244,262,266,254,254,243,0,262,258,255,254,244,239,275,255],
[236,246,255,238,245,240,239,0,238,237,232,237,261,262,242],
[243,259,250,264,254,253,243,263,0,270,238,250,255,265,260],
[233,247,257,246,232,233,246,264,231,0,244,246,251,266,247],
[241,253,252,259,251,239,247,269,263,257,0,252,256,271,267],
[255,259,254,254,271,258,257,264,251,255,249,0,232,260,265],
[241,250,255,260,256,244,262,240,246,250,245,269,0,260,260],
[228,255,246,243,233,238,226,239,236,235,230,241,241,0,230],
[241,248,256,264,261,243,246,259,241,254,234,236,241,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 2, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,246,247,227,234,236,263,248,230,239,255,230,255,224],
[286,0,269,269,274,240,259,290,261,258,260,271,263,280,271],
[255,232,0,242,246,236,242,266,253,237,257,271,251,261,260],
[254,232,259,0,239,234,241,274,230,235,242,263,252,252,237],
[274,227,255,262,0,243,245,271,243,252,252,278,256,262,247],
[267,261,265,267,258,0,254,271,261,261,261,257,245,284,256],
[265,242,259,260,256,247,0,270,254,261,261,264,262,257,254],
[238,211,235,227,230,230,231,0,222,234,239,247,225,233,235],
[253,240,248,271,258,240,247,279,0,235,263,274,243,269,253],
[271,243,264,266,249,240,240,267,266,0,248,265,248,263,243],
[262,241,244,259,249,240,240,262,238,253,0,255,246,273,255],
[246,230,230,238,223,244,237,254,227,236,246,0,232,261,233],
[271,238,250,249,245,256,239,276,258,253,255,269,0,275,255],
[246,221,240,249,239,217,244,268,232,238,228,240,226,0,247],
[277,230,241,264,254,245,247,266,248,258,246,268,246,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 3, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,225,225,234,220,229,255,231,240,245,232,231,234,241],
[263,0,237,275,261,245,233,267,244,281,247,260,238,261,269],
[276,264,0,264,279,251,255,260,274,306,273,248,255,243,255],
[276,226,237,0,258,229,255,258,242,290,266,257,269,265,265],
[267,240,222,243,0,221,230,251,232,249,268,231,236,253,230],
[281,256,250,272,280,0,242,249,237,271,260,240,264,275,251],
[272,268,246,246,271,259,0,276,280,287,279,255,257,270,260],
[246,234,241,243,250,252,225,0,247,273,263,236,248,262,243],
[270,257,227,259,269,264,221,254,0,263,251,252,249,271,256],
[261,220,195,211,252,230,214,228,238,0,237,246,224,252,245],
[256,254,228,235,233,241,222,238,250,264,0,226,246,254,245],
[269,241,253,244,270,261,246,265,249,255,275,0,250,257,248],
[270,263,246,232,265,237,244,253,252,277,255,251,0,266,269],
[267,240,258,236,248,226,231,239,230,249,247,244,235,0,248],
[260,232,246,236,271,250,241,258,245,256,256,253,232,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 4, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,240,205,247,233,224,206,230,264,217,239,229,293,234],
[236,0,250,213,210,214,241,209,212,234,235,202,232,251,207],
[261,251,0,218,248,217,237,206,203,268,266,222,271,263,246],
[296,288,283,0,260,276,276,265,291,306,276,238,281,328,265],
[254,291,253,241,0,242,261,228,243,275,241,235,279,271,291],
[268,287,284,225,259,0,279,238,251,281,231,247,269,285,271],
[277,260,264,225,240,222,0,250,262,272,224,241,273,281,269],
[295,292,295,236,273,263,251,0,259,296,265,255,281,310,263],
[271,289,298,210,258,250,239,242,0,271,263,267,271,249,259],
[237,267,233,195,226,220,229,205,230,0,230,191,268,277,248],
[284,266,235,225,260,270,277,236,238,271,0,233,291,266,275],
[262,299,279,263,266,254,260,246,234,310,268,0,264,280,273],
[272,269,230,220,222,232,228,220,230,233,210,237,0,253,234],
[208,250,238,173,230,216,220,191,252,224,235,221,248,0,223],
[267,294,255,236,210,230,232,238,242,253,226,228,267,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 5, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,238,274,251,200,185,229,240,248,245,269,242,251,220],
[260,0,219,260,203,240,232,245,224,242,227,267,248,227,217],
[263,282,0,263,256,263,242,273,229,287,277,272,252,262,282],
[227,241,238,0,237,237,220,228,247,264,234,256,232,238,266],
[250,298,245,264,0,228,206,278,251,262,235,257,253,243,235],
[301,261,238,264,273,0,249,261,254,275,254,259,271,264,240],
[316,269,259,281,295,252,0,270,272,283,263,289,285,245,276],
[272,256,228,273,223,240,231,0,219,260,253,267,245,230,251],
[261,277,272,254,250,247,229,282,0,304,268,276,260,222,259],
[253,259,214,237,239,226,218,241,197,0,238,241,247,224,218],
[256,274,224,267,266,247,238,248,233,263,0,262,253,258,252],
[232,234,229,245,244,242,212,234,225,260,239,0,232,227,235],
[259,253,249,269,248,230,216,256,241,254,248,269,0,252,260],
[250,274,239,263,258,237,256,271,279,277,243,274,249,0,269],
[281,284,219,235,266,261,225,250,242,283,249,266,241,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 6, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,236,288,263,240,249,251,252,272,256,252,268,250,269],
[245,0,256,271,251,252,244,262,262,280,266,268,251,251,270],
[265,245,0,286,267,282,253,266,259,275,267,268,260,260,268],
[213,230,215,0,225,237,238,228,236,259,239,252,232,227,252],
[238,250,234,276,0,263,255,243,261,264,251,269,246,234,274],
[261,249,219,264,238,0,223,245,248,273,244,243,242,235,261],
[252,257,248,263,246,278,0,243,257,283,270,262,256,243,265],
[250,239,235,273,258,256,258,0,247,266,261,272,243,238,270],
[249,239,242,265,240,253,244,254,0,284,274,283,263,249,257],
[229,221,226,242,237,228,218,235,217,0,233,242,217,229,240],
[245,235,234,262,250,257,231,240,227,268,0,255,249,241,243],
[249,233,233,249,232,258,239,229,218,259,246,0,229,232,249],
[233,250,241,269,255,259,245,258,238,284,252,272,0,243,258],
[251,250,241,274,267,266,258,263,252,272,260,269,258,0,261],
[232,231,233,249,227,240,236,231,244,261,258,252,243,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 7, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,235,239,239,250,240,265,220,248,247,264,248,229,231],
[262,0,238,227,244,279,255,267,223,257,265,294,271,246,251],
[266,263,0,258,276,249,274,276,251,264,274,300,278,280,266],
[262,274,243,0,298,275,253,285,255,287,251,272,292,278,244],
[262,257,225,203,0,247,249,248,220,243,237,247,251,226,237],
[251,222,252,226,254,0,249,253,208,229,234,260,247,247,236],
[261,246,227,248,252,252,0,266,223,252,252,276,269,242,259],
[236,234,225,216,253,248,235,0,221,242,222,264,265,247,216],
[281,278,250,246,281,293,278,280,0,288,255,262,267,269,263],
[253,244,237,214,258,272,249,259,213,0,248,249,276,246,244],
[254,236,227,250,264,267,249,279,246,253,0,262,252,271,255],
[237,207,201,229,254,241,225,237,239,252,239,0,259,245,225],
[253,230,223,209,250,254,232,236,234,225,249,242,0,248,211],
[272,255,221,223,275,254,259,254,232,255,230,256,253,0,241],
[270,250,235,257,264,265,242,285,238,257,246,276,290,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 8, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,262,248,229,267,260,247,255,234,246,244,234,243,263],
[263,0,270,255,274,263,278,256,265,250,255,248,248,257,268],
[239,231,0,234,235,241,233,241,230,241,221,234,225,234,242],
[253,246,267,0,252,267,257,253,248,251,238,251,244,234,267],
[272,227,266,249,0,252,250,247,250,239,240,250,252,250,255],
[234,238,260,234,249,0,249,239,253,249,241,231,237,233,250],
[241,223,268,244,251,252,0,247,244,241,239,221,219,238,263],
[254,245,260,248,254,262,254,0,249,261,253,243,252,249,259],
[246,236,271,253,251,248,257,252,0,259,244,231,237,243,250],
[267,251,260,250,262,252,260,240,242,0,246,250,250,253,270],
[255,246,280,263,261,260,262,248,257,255,0,250,247,252,267],
[257,253,267,250,251,270,280,258,270,251,251,0,264,249,266],
[267,253,276,257,249,264,282,249,264,251,254,237,0,254,279],
[258,244,267,267,251,268,263,252,258,248,249,252,247,0,270],
[238,233,259,234,246,251,238,242,251,231,234,235,222,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 9, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,247,248,249,252,238,247,241,243,230,237,261,235,253],
[257,0,221,234,236,234,240,237,221,229,212,213,242,250,242],
[254,280,0,261,255,257,250,236,254,254,271,254,273,259,250],
[253,267,240,0,243,246,243,260,234,243,235,227,265,246,242],
[252,265,246,258,0,244,263,251,250,282,254,236,265,270,253],
[249,267,244,255,257,0,244,256,251,244,234,254,266,241,250],
[263,261,251,258,238,257,0,257,257,238,232,244,271,253,260],
[254,264,265,241,250,245,244,0,247,249,243,242,264,242,252],
[260,280,247,267,251,250,244,254,0,266,232,230,263,258,255],
[258,272,247,258,219,257,263,252,235,0,234,233,268,252,248],
[271,289,230,266,247,267,269,258,269,267,0,256,275,275,254],
[264,288,247,274,265,247,257,259,271,268,245,0,273,247,265],
[240,259,228,236,236,235,230,237,238,233,226,228,0,235,231],
[266,251,242,255,231,260,248,259,243,249,226,254,266,0,254],
[248,259,251,259,248,251,241,249,246,253,247,236,270,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 10, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,218,209,201,201,222,222,230,232,206,245,233,195,248],
[290,0,236,223,248,260,264,241,232,289,252,249,241,232,286],
[283,265,0,276,271,278,285,243,237,266,271,277,259,255,280],
[292,278,225,0,277,237,278,284,247,241,249,270,251,260,268],
[300,253,230,224,0,240,275,251,253,259,225,261,242,251,293],
[300,241,223,264,261,0,276,270,249,255,250,249,250,256,259],
[279,237,216,223,226,225,0,235,225,276,243,286,249,220,256],
[279,260,258,217,250,231,266,0,236,250,239,264,231,253,264],
[271,269,264,254,248,252,276,265,0,265,240,288,248,260,281],
[269,212,235,260,242,246,225,251,236,0,228,250,235,244,249],
[295,249,230,252,276,251,258,262,261,273,0,237,246,251,262],
[256,252,224,231,240,252,215,237,213,251,264,0,236,231,244],
[268,260,242,250,259,251,252,270,253,266,255,265,0,265,289],
[306,269,246,241,250,245,281,248,241,257,250,270,236,0,280],
[253,215,221,233,208,242,245,237,220,252,239,257,212,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 11, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,235,243,245,262,260,204,242,236,233,215,238,216,223],
[251,0,256,269,270,290,258,231,233,233,265,218,255,279,236],
[266,245,0,245,256,277,255,213,251,251,262,209,252,266,225],
[258,232,256,0,246,296,262,243,239,233,239,203,236,245,233],
[256,231,245,255,0,273,252,233,266,234,247,208,246,248,239],
[239,211,224,205,228,0,226,208,235,190,224,202,234,220,209],
[241,243,246,239,249,275,0,220,224,234,245,226,234,236,243],
[297,270,288,258,268,293,281,0,277,262,264,251,278,262,248],
[259,268,250,262,235,266,277,224,0,244,227,248,249,257,269],
[265,268,250,268,267,311,267,239,257,0,260,245,247,274,248],
[268,236,239,262,254,277,256,237,274,241,0,218,249,240,249],
[286,283,292,298,293,299,275,250,253,256,283,0,280,254,251],
[263,246,249,265,255,267,267,223,252,254,252,221,0,250,238],
[285,222,235,256,253,281,265,239,244,227,261,247,251,0,241],
[278,265,276,268,262,292,258,253,232,253,252,250,263,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 12, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,254,233,205,231,233,224,225,238,291,256,245,214,254],
[260,0,200,229,224,220,212,219,221,245,223,197,234,192,222],
[247,301,0,250,251,258,253,235,264,256,281,237,249,240,259],
[268,272,251,0,246,233,223,223,237,265,260,216,244,229,227],
[296,277,250,255,0,241,223,272,220,244,286,260,237,236,252],
[270,281,243,268,260,0,247,245,241,259,297,225,253,220,258],
[268,289,248,278,278,254,0,261,269,259,290,273,271,227,239],
[277,282,266,278,229,256,240,0,253,228,290,271,239,240,263],
[276,280,237,264,281,260,232,248,0,264,293,253,268,235,232],
[263,256,245,236,257,242,242,273,237,0,276,244,254,251,265],
[210,278,220,241,215,204,211,211,208,225,0,221,224,218,208],
[245,304,264,285,241,276,228,230,248,257,280,0,276,216,248],
[256,267,252,257,264,248,230,262,233,247,277,225,0,216,233],
[287,309,261,272,265,281,274,261,266,250,283,285,285,0,282],
[247,279,242,274,249,243,262,238,269,236,293,253,268,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 13, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,258,264,249,249,253,264,256,253,262,252,239,256,234],
[258,0,259,236,242,258,260,256,268,251,247,232,238,261,231],
[243,242,0,243,245,254,265,241,247,255,247,248,232,257,232],
[237,265,258,0,237,264,261,248,254,251,245,253,233,270,244],
[252,259,256,264,0,276,282,256,262,259,275,261,253,278,240],
[252,243,247,237,225,0,261,245,249,231,254,236,233,250,240],
[248,241,236,240,219,240,0,228,241,242,243,235,224,232,227],
[237,245,260,253,245,256,273,0,257,263,260,260,241,260,243],
[245,233,254,247,239,252,260,244,0,243,257,251,251,255,226],
[248,250,246,250,242,270,259,238,258,0,243,247,234,248,255],
[239,254,254,256,226,247,258,241,244,258,0,234,237,245,226],
[249,269,253,248,240,265,266,241,250,254,267,0,243,252,245],
[262,263,269,268,248,268,277,260,250,267,264,258,0,269,253],
[245,240,244,231,223,251,269,241,246,253,256,249,232,0,246],
[267,270,269,257,261,261,274,258,275,246,275,256,248,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 14, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,243,186,233,261,211,263,234,241,220,223,220,256,221],
[273,0,265,208,274,262,275,316,288,271,264,268,223,270,261],
[258,236,0,198,227,265,247,267,260,238,204,237,238,245,237],
[315,293,303,0,295,273,309,302,281,311,235,317,274,279,298],
[268,227,274,206,0,271,287,282,270,263,246,259,239,266,251],
[240,239,236,228,230,0,253,277,248,246,211,229,237,254,264],
[290,226,254,192,214,248,0,258,230,240,206,213,212,254,273],
[238,185,234,199,219,224,243,0,217,227,197,209,229,251,257],
[267,213,241,220,231,253,271,284,0,241,233,239,237,265,254],
[260,230,263,190,238,255,261,274,260,0,216,232,234,258,268],
[281,237,297,266,255,290,295,304,268,285,0,265,259,255,272],
[278,233,264,184,242,272,288,292,262,269,236,0,246,250,258],
[281,278,263,227,262,264,289,272,264,267,242,255,0,254,272],
[245,231,256,222,235,247,247,250,236,243,246,251,247,0,234],
[280,240,264,203,250,237,228,244,247,233,229,243,229,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 15, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,245,244,250,233,234,223,246,238,252,243,251,255,219],
[271,0,270,243,262,270,258,257,274,224,289,263,247,247,258],
[256,231,0,246,241,240,258,251,255,254,272,260,237,226,219],
[257,258,255,0,242,252,253,246,255,235,257,274,229,260,249],
[251,239,260,259,0,235,240,242,251,255,282,241,248,248,227],
[268,231,261,249,266,0,275,242,268,235,281,259,270,259,226],
[267,243,243,248,261,226,0,253,251,254,283,243,246,273,209],
[278,244,250,255,259,259,248,0,252,271,270,253,248,269,250],
[255,227,246,246,250,233,250,249,0,255,259,266,240,255,229],
[263,277,247,266,246,266,247,230,246,0,273,276,268,253,278],
[249,212,229,244,219,220,218,231,242,228,0,249,241,225,218],
[258,238,241,227,260,242,258,248,235,225,252,0,245,273,230],
[250,254,264,272,253,231,255,253,261,233,260,256,0,263,239],
[246,254,275,241,253,242,228,232,246,248,276,228,238,0,231],
[282,243,282,252,274,275,292,251,272,223,283,271,262,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 16, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,193,245,186,262,229,257,162,312,230,328,200,184,105],
[363,0,300,260,323,285,388,338,357,296,278,364,238,195,252],
[308,201,0,267,256,359,280,349,330,324,242,245,205,334,228],
[256,241,234,0,178,281,333,334,244,257,221,275,227,150,80],
[315,178,245,323,0,243,265,302,310,282,266,279,217,225,210],
[239,216,142,220,258,0,219,277,319,296,216,247,229,252,219],
[272,113,221,168,236,282,0,293,302,252,186,297,132,194,124],
[244,163,152,167,199,224,208,0,132,188,207,156,105,74,159],
[339,144,171,257,191,182,199,369,0,351,246,260,193,231,202],
[189,205,177,244,219,205,249,313,150,0,205,244,124,187,159],
[271,223,259,280,235,285,315,294,255,296,0,305,168,230,188],
[173,137,256,226,222,254,204,345,241,257,196,0,198,189,91],
[301,263,296,274,284,272,369,396,308,377,333,303,0,259,181],
[317,306,167,351,276,249,307,427,270,314,271,312,242,0,244],
[396,249,273,421,291,282,377,342,299,342,313,410,320,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 17, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,233,229,234,251,213,227,250,242,250,235,212,249,211],
[301,0,270,264,292,273,241,269,280,269,294,279,260,257,228],
[268,231,0,242,257,277,241,251,281,243,250,271,245,273,254],
[272,237,259,0,250,289,253,259,274,253,272,259,258,257,225],
[267,209,244,251,0,283,235,240,263,247,237,243,243,227,222],
[250,228,224,212,218,0,223,225,224,224,219,213,204,242,194],
[288,260,260,248,266,278,0,273,273,265,278,261,238,239,241],
[274,232,250,242,261,276,228,0,277,236,228,243,207,263,206],
[251,221,220,227,238,277,228,224,0,232,242,234,248,257,218],
[259,232,258,248,254,277,236,265,269,0,259,264,225,263,226],
[251,207,251,229,264,282,223,273,259,242,0,260,209,275,211],
[266,222,230,242,258,288,240,258,267,237,241,0,226,275,241],
[289,241,256,243,258,297,263,294,253,276,292,275,0,269,263],
[252,244,228,244,274,259,262,238,244,238,226,226,232,0,212],
[290,273,247,276,279,307,260,295,283,275,290,260,238,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 18, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,289,295,309,238,259,271,344,293,215,269,258,302,252],
[240,0,291,276,321,240,170,270,315,292,251,272,268,274,283],
[212,210,0,236,269,244,225,256,263,332,266,195,176,232,188],
[206,225,265,0,316,265,230,263,317,296,243,243,272,334,212],
[192,180,232,185,0,219,166,205,282,251,206,195,192,248,204],
[263,261,257,236,282,0,259,314,286,287,222,302,245,318,247],
[242,331,276,271,335,242,0,228,318,333,213,301,283,313,281],
[230,231,245,238,296,187,273,0,343,288,257,259,308,242,263],
[157,186,238,184,219,215,183,158,0,219,185,188,143,229,201],
[208,209,169,205,250,214,168,213,282,0,185,198,220,220,246],
[286,250,235,258,295,279,288,244,316,316,0,280,296,290,260],
[232,229,306,258,306,199,200,242,313,303,221,0,254,265,222],
[243,233,325,229,309,256,218,193,358,281,205,247,0,301,193],
[199,227,269,167,253,183,188,259,272,281,211,236,200,0,183],
[249,218,313,289,297,254,220,238,300,255,241,279,308,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 19, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,254,232,256,236,274,245,281,269,229,253,269,270,247],
[257,0,232,233,262,247,230,238,251,249,208,252,270,226,237],
[247,269,0,252,234,228,254,236,268,249,226,227,228,233,250],
[269,268,249,0,266,246,264,273,261,281,278,274,286,248,293],
[245,239,267,235,0,240,246,241,246,238,221,249,233,228,244],
[265,254,273,255,261,0,257,232,274,257,243,226,271,267,250],
[227,271,247,237,255,244,0,233,271,280,249,270,270,256,258],
[256,263,265,228,260,269,268,0,263,271,221,264,272,243,244],
[220,250,233,240,255,227,230,238,0,247,238,261,250,235,225],
[232,252,252,220,263,244,221,230,254,0,237,242,251,241,220],
[272,293,275,223,280,258,252,280,263,264,0,262,286,254,255],
[248,249,274,227,252,275,231,237,240,259,239,0,271,240,210],
[232,231,273,215,268,230,231,229,251,250,215,230,0,209,245],
[231,275,268,253,273,234,245,258,266,260,247,261,292,0,247],
[254,264,251,208,257,251,243,257,276,281,246,291,256,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 20, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,267,232,205,237,243,255,171,290,278,264,233,237,226],
[227,0,277,261,187,216,192,191,196,262,201,237,273,184,193],
[234,224,0,280,221,254,265,209,216,259,228,269,240,210,248],
[269,240,221,0,219,262,258,221,213,270,231,248,244,238,221],
[296,314,280,282,0,255,241,271,261,289,308,320,297,255,244],
[264,285,247,239,246,0,225,255,201,267,264,277,275,247,279],
[258,309,236,243,260,276,0,215,193,283,270,281,300,254,232],
[246,310,292,280,230,246,286,0,218,265,302,289,283,267,277],
[330,305,285,288,240,300,308,283,0,337,274,281,321,298,284],
[211,239,242,231,212,234,218,236,164,0,232,264,212,202,237],
[223,300,273,270,193,237,231,199,227,269,0,281,242,229,185],
[237,264,232,253,181,224,220,212,220,237,220,0,249,254,186],
[268,228,261,257,204,226,201,218,180,289,259,252,0,247,220],
[264,317,291,263,246,254,247,234,203,299,272,247,254,0,235],
[275,308,253,280,257,222,269,224,217,264,316,315,281,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 21, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,258,280,253,242,247,235,264,241,231,221,252,248,246],
[284,0,276,264,262,265,251,244,268,246,272,239,277,262,258],
[243,225,0,267,248,273,252,233,248,254,252,252,270,244,279],
[221,237,234,0,243,245,251,227,248,225,235,228,256,236,235],
[248,239,253,258,0,262,255,250,265,244,247,227,258,236,258],
[259,236,228,256,239,0,241,226,286,224,265,269,255,258,256],
[254,250,249,250,246,260,0,229,267,246,271,258,250,258,250],
[266,257,268,274,251,275,272,0,253,261,278,264,276,248,270],
[237,233,253,253,236,215,234,248,0,217,242,236,250,223,232],
[260,255,247,276,257,277,255,240,284,0,272,265,277,275,273],
[270,229,249,266,254,236,230,223,259,229,0,234,239,252,265],
[280,262,249,273,274,232,243,237,265,236,267,0,248,238,269],
[249,224,231,245,243,246,251,225,251,224,262,253,0,225,269],
[253,239,257,265,265,243,243,253,278,226,249,263,276,0,259],
[255,243,222,266,243,245,251,231,269,228,236,232,232,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 22, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,273,229,228,245,206,229,285,255,198,209,274,203,176],
[240,0,281,274,257,232,188,224,300,313,231,215,274,275,202],
[228,220,0,238,310,237,160,241,352,217,178,230,223,295,228],
[272,227,263,0,245,233,158,262,273,205,179,259,222,236,172],
[273,244,191,256,0,213,135,215,260,205,178,236,319,237,147],
[256,269,264,268,288,0,265,243,214,272,247,338,334,367,304],
[295,313,341,343,366,236,0,320,272,297,219,252,335,299,337],
[272,277,260,239,286,258,181,0,308,249,243,278,269,253,286],
[216,201,149,228,241,287,229,193,0,199,215,244,232,239,260],
[246,188,284,296,296,229,204,252,302,0,266,235,301,321,207],
[303,270,323,322,323,254,282,258,286,235,0,281,313,299,290],
[292,286,271,242,265,163,249,223,257,266,220,0,378,240,258],
[227,227,278,279,182,167,166,232,269,200,188,123,0,213,179],
[298,226,206,265,264,134,202,248,262,180,202,261,288,0,217],
[325,299,273,329,354,197,164,215,241,294,211,243,322,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 23, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,240,252,234,269,249,235,268,248,250,268,242,249,238],
[253,0,252,256,254,266,250,255,257,223,241,255,246,248,251],
[261,249,0,256,264,268,242,245,246,261,249,271,248,253,230],
[249,245,245,0,242,254,251,252,246,242,248,266,257,258,249],
[267,247,237,259,0,258,240,238,259,246,254,258,253,242,235],
[232,235,233,247,243,0,235,238,258,238,230,249,232,254,233],
[252,251,259,250,261,266,0,250,259,231,250,257,250,253,237],
[266,246,256,249,263,263,251,0,246,246,245,254,245,259,229],
[233,244,255,255,242,243,242,255,0,238,251,239,251,259,234],
[253,278,240,259,255,263,270,255,263,0,268,278,271,273,256],
[251,260,252,253,247,271,251,256,250,233,0,269,270,262,227],
[233,246,230,235,243,252,244,247,262,223,232,0,247,246,225],
[259,255,253,244,248,269,251,256,250,230,231,254,0,247,246],
[252,253,248,243,259,247,248,242,242,228,239,255,254,0,239],
[263,250,271,252,266,268,264,272,267,245,274,276,255,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 24, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,267,255,298,281,291,257,231,282,274,282,290,281,286],
[244,0,264,228,268,263,269,234,247,274,245,254,263,254,282],
[234,237,0,259,264,261,270,248,229,266,260,258,256,268,259],
[246,273,242,0,279,275,284,252,257,295,258,260,266,264,277],
[203,233,237,222,0,245,254,239,243,282,253,257,256,258,276],
[220,238,240,226,256,0,270,230,241,264,248,248,243,261,250],
[210,232,231,217,247,231,0,204,226,239,238,218,251,251,226],
[244,267,253,249,262,271,297,0,240,285,266,256,258,260,268],
[270,254,272,244,258,260,275,261,0,305,281,293,266,258,273],
[219,227,235,206,219,237,262,216,196,0,256,219,245,232,256],
[227,256,241,243,248,253,263,235,220,245,0,243,265,263,284],
[219,247,243,241,244,253,283,245,208,282,258,0,227,244,259],
[211,238,245,235,245,258,250,243,235,256,236,274,0,243,257],
[220,247,233,237,243,240,250,241,243,269,238,257,258,0,257],
[215,219,242,224,225,251,275,233,228,245,217,242,244,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 25, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,254,232,252,225,241,229,226,246,250,238,253,251,251],
[244,0,253,234,245,205,233,226,235,215,220,209,256,240,246],
[247,248,0,248,248,240,234,232,223,242,236,256,239,254,264],
[269,267,253,0,258,233,251,233,229,258,228,252,275,248,262],
[249,256,253,243,0,232,236,226,237,242,238,246,261,236,270],
[276,296,261,268,269,0,255,265,256,278,261,240,287,258,276],
[260,268,267,250,265,246,0,244,248,252,233,256,255,236,291],
[272,275,269,268,275,236,257,0,261,265,252,242,259,269,276],
[275,266,278,272,264,245,253,240,0,255,257,252,255,276,272],
[255,286,259,243,259,223,249,236,246,0,234,237,265,253,280],
[251,281,265,273,263,240,268,249,244,267,0,265,289,271,285],
[263,292,245,249,255,261,245,259,249,264,236,0,264,252,257],
[248,245,262,226,240,214,246,242,246,236,212,237,0,237,250],
[250,261,247,253,265,243,265,232,225,248,230,249,264,0,257],
[250,255,237,239,231,225,210,225,229,221,216,244,251,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 26, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,250,259,260,257,259,246,270,251,255,277,248,267,252],
[242,0,252,252,252,254,251,234,262,253,239,262,245,245,259],
[251,249,0,272,260,266,256,263,287,276,264,269,237,275,252],
[242,249,229,0,251,238,251,229,260,243,240,271,230,243,253],
[241,249,241,250,0,254,248,230,269,256,236,258,234,251,234],
[244,247,235,263,247,0,245,224,257,251,253,259,231,235,247],
[242,250,245,250,253,256,0,240,259,249,233,268,241,247,245],
[255,267,238,272,271,277,261,0,270,271,254,281,259,275,260],
[231,239,214,241,232,244,242,231,0,245,250,263,233,254,245],
[250,248,225,258,245,250,252,230,256,0,247,260,231,252,248],
[246,262,237,261,265,248,268,247,251,254,0,259,248,269,254],
[224,239,232,230,243,242,233,220,238,241,242,0,221,246,249],
[253,256,264,271,267,270,260,242,268,270,253,280,0,267,266],
[234,256,226,258,250,266,254,226,247,249,232,255,234,0,247],
[249,242,249,248,267,254,256,241,256,253,247,252,235,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 27, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,258,246,269,239,263,261,259,276,250,241,236,233,258],
[251,0,246,237,278,224,260,249,236,262,234,246,259,224,250],
[243,255,0,247,268,248,241,237,250,250,240,251,261,227,250],
[255,264,254,0,260,229,256,271,247,261,254,229,254,227,232],
[232,223,233,241,0,220,255,237,235,257,241,244,258,242,232],
[262,277,253,272,281,0,255,274,267,282,253,240,250,251,259],
[238,241,260,245,246,246,0,256,247,260,260,228,270,238,236],
[240,252,264,230,264,227,245,0,243,231,244,237,252,235,247],
[242,265,251,254,266,234,254,258,0,271,257,231,272,235,245],
[225,239,251,240,244,219,241,270,230,0,253,211,258,249,234],
[251,267,261,247,260,248,241,257,244,248,0,230,239,234,237],
[260,255,250,272,257,261,273,264,270,290,271,0,251,257,248],
[265,242,240,247,243,251,231,249,229,243,262,250,0,228,258],
[268,277,274,274,259,250,263,266,266,252,267,244,273,0,243],
[243,251,251,269,269,242,265,254,256,267,264,253,243,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 28, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,252,265,263,264,253,254,265,234,245,251,268,257,248],
[224,0,234,262,232,258,243,232,236,228,245,232,239,228,228],
[249,267,0,250,257,255,248,246,244,229,248,245,277,247,238],
[236,239,251,0,246,272,249,251,225,237,243,223,256,242,228],
[238,269,244,255,0,260,237,254,266,219,242,251,264,257,241],
[237,243,246,229,241,0,230,235,238,227,220,238,256,249,243],
[248,258,253,252,264,271,0,261,253,242,247,249,258,226,246],
[247,269,255,250,247,266,240,0,247,241,242,243,283,227,245],
[236,265,257,276,235,263,248,254,0,237,247,238,245,236,254],
[267,273,272,264,282,274,259,260,264,0,247,263,294,276,263],
[256,256,253,258,259,281,254,259,254,254,0,251,259,257,249],
[250,269,256,278,250,263,252,258,263,238,250,0,270,258,254],
[233,262,224,245,237,245,243,218,256,207,242,231,0,227,241],
[244,273,254,259,244,252,275,274,265,225,244,243,274,0,251],
[253,273,263,273,260,258,255,256,247,238,252,247,260,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 29, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,234,314,258,288,238,269,247,316,256,295,274,267,271],
[200,0,178,281,248,253,266,239,233,235,265,185,200,276,213],
[267,323,0,302,231,341,269,274,239,277,259,183,260,291,295],
[187,220,199,0,213,223,224,247,217,231,221,205,226,259,199],
[243,253,270,288,0,280,262,260,216,224,240,263,265,258,215],
[213,248,160,278,221,0,218,220,200,244,228,172,181,262,233],
[263,235,232,277,239,283,0,209,202,210,195,250,230,260,232],
[232,262,227,254,241,281,292,0,249,281,215,205,233,283,225],
[254,268,262,284,285,301,299,252,0,236,238,243,251,251,278],
[185,266,224,270,277,257,291,220,265,0,261,240,234,241,200],
[245,236,242,280,261,273,306,286,263,240,0,233,214,281,279],
[206,316,318,296,238,329,251,296,258,261,268,0,263,261,266],
[227,301,241,275,236,320,271,268,250,267,287,238,0,274,263],
[234,225,210,242,243,239,241,218,250,260,220,240,227,0,251],
[230,288,206,302,286,268,269,276,223,301,222,235,238,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 30, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,242,252,255,251,241,248,244,244,246,248,253,233,257],
[257,0,263,249,247,253,265,243,246,264,246,254,255,257,251],
[259,238,0,249,240,246,258,243,239,255,253,256,257,258,258],
[249,252,252,0,244,239,249,241,246,245,256,245,244,263,262],
[246,254,261,257,0,267,258,252,246,243,253,269,266,257,263],
[250,248,255,262,234,0,262,260,244,243,251,260,260,267,262],
[260,236,243,252,243,239,0,236,245,253,254,246,261,245,257],
[253,258,258,260,249,241,265,0,259,248,260,257,261,261,276],
[257,255,262,255,255,257,256,242,0,265,250,256,251,256,259],
[257,237,246,256,258,258,248,253,236,0,262,258,253,257,257],
[255,255,248,245,248,250,247,241,251,239,0,252,250,253,247],
[253,247,245,256,232,241,255,244,245,243,249,0,254,239,248],
[248,246,244,257,235,241,240,240,250,248,251,247,0,250,256],
[268,244,243,238,244,234,256,240,245,244,248,262,251,0,253],
[244,250,243,239,238,239,244,225,242,244,254,253,245,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 31, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,288,281,260,254,272,256,247,274,264,247,276,284,278],
[232,0,263,260,237,231,235,232,244,258,243,233,257,247,248],
[213,238,0,258,240,230,239,225,232,244,228,224,236,244,230],
[220,241,243,0,215,230,247,218,219,247,240,240,243,238,231],
[241,264,261,286,0,250,267,249,241,268,270,254,265,257,264],
[247,270,271,271,251,0,264,242,247,264,269,247,260,272,264],
[229,266,262,254,234,237,0,236,236,247,230,248,255,265,234],
[245,269,276,283,252,259,265,0,258,238,258,249,259,262,260],
[254,257,269,282,260,254,265,243,0,273,257,255,259,264,265],
[227,243,257,254,233,237,254,263,228,0,246,242,237,263,250],
[237,258,273,261,231,232,271,243,244,255,0,248,256,270,241],
[254,268,277,261,247,254,253,252,246,259,253,0,265,266,254],
[225,244,265,258,236,241,246,242,242,264,245,236,0,259,252],
[217,254,257,263,244,229,236,239,237,238,231,235,242,0,236],
[223,253,271,270,237,237,267,241,236,251,260,247,249,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 32, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,247,270,262,237,263,252,254,274,270,241,258,266,244],
[235,0,236,274,241,237,249,255,235,281,249,247,249,254,236],
[254,265,0,269,247,239,261,244,233,264,254,243,266,250,244],
[231,227,232,0,221,230,230,218,219,247,242,213,257,221,210],
[239,260,254,280,0,252,253,252,239,268,261,241,274,242,247],
[264,264,262,271,249,0,264,251,254,280,268,241,263,253,236],
[238,252,240,271,248,237,0,252,248,254,242,232,262,236,244],
[249,246,257,283,249,250,249,0,256,272,267,246,276,243,246],
[247,266,268,282,262,247,253,245,0,263,261,261,275,258,270],
[227,220,237,254,233,221,247,229,238,0,239,213,230,229,208],
[231,252,247,259,240,233,259,234,240,262,0,233,242,231,225],
[260,254,258,288,260,260,269,255,240,288,268,0,276,265,252],
[243,252,235,244,227,238,239,225,226,271,259,225,0,258,229],
[235,247,251,280,259,248,265,258,243,272,270,236,243,0,231],
[257,265,257,291,254,265,257,255,231,293,276,249,272,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 33, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,266,250,272,248,265,245,267,243,250,259,263,254,258],
[252,0,269,253,275,264,265,257,260,247,255,272,267,266,281],
[235,232,0,236,235,241,254,230,242,239,245,245,251,249,234],
[251,248,265,0,248,266,262,243,251,258,255,249,265,268,260],
[229,226,266,253,0,258,259,245,246,224,241,256,238,250,245],
[253,237,260,235,243,0,258,246,256,240,266,239,264,250,255],
[236,236,247,239,242,243,0,234,250,230,251,250,238,243,251],
[256,244,271,258,256,255,267,0,264,247,259,262,249,251,277],
[234,241,259,250,255,245,251,237,0,253,252,251,261,266,254],
[258,254,262,243,277,261,271,254,248,0,257,256,258,248,258],
[251,246,256,246,260,235,250,242,249,244,0,257,234,253,246],
[242,229,256,252,245,262,251,239,250,245,244,0,237,250,244],
[238,234,250,236,263,237,263,252,240,243,267,264,0,250,265],
[247,235,252,233,251,251,258,250,235,253,248,251,251,0,247],
[243,220,267,241,256,246,250,224,247,243,255,257,236,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 34, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,276,235,250,235,255,278,248,259,243,243,276,265,247],
[241,0,253,232,232,250,242,238,237,237,254,236,239,254,240],
[225,248,0,243,225,250,262,234,242,252,254,234,266,251,250],
[266,269,258,0,244,249,256,248,241,262,259,260,251,249,248],
[251,269,276,257,0,255,268,250,261,251,278,268,277,262,270],
[266,251,251,252,246,0,249,250,255,267,264,259,289,259,264],
[246,259,239,245,233,252,0,248,236,250,279,244,279,257,262],
[223,263,267,253,251,251,253,0,250,263,262,249,274,276,250],
[253,264,259,260,240,246,265,251,0,250,275,254,279,264,244],
[242,264,249,239,250,234,251,238,251,0,257,255,271,247,241],
[258,247,247,242,223,237,222,239,226,244,0,235,243,247,228],
[258,265,267,241,233,242,257,252,247,246,266,0,266,257,269],
[225,262,235,250,224,212,222,227,222,230,258,235,0,260,266],
[236,247,250,252,239,242,244,225,237,254,254,244,241,0,241],
[254,261,251,253,231,237,239,251,257,260,273,232,235,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 35, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,250,249,270,267,273,266,245,282,270,242,235,288,270],
[244,0,219,228,233,232,252,216,208,249,247,215,214,259,224],
[251,282,0,271,267,269,307,247,268,264,268,250,256,271,241],
[252,273,230,0,261,272,260,259,205,256,257,237,222,270,253],
[231,268,234,240,0,248,261,221,237,245,262,255,209,250,250],
[234,269,232,229,253,0,239,211,202,244,224,230,206,266,237],
[228,249,194,241,240,262,0,248,229,251,226,196,224,259,250],
[235,285,254,242,280,290,253,0,221,269,268,268,224,274,259],
[256,293,233,296,264,299,272,280,0,291,264,259,276,276,277],
[219,252,237,245,256,257,250,232,210,0,259,227,221,253,280],
[231,254,233,244,239,277,275,233,237,242,0,258,238,271,250],
[259,286,251,264,246,271,305,233,242,274,243,0,242,262,271],
[266,287,245,279,292,295,277,277,225,280,263,259,0,289,256],
[213,242,230,231,251,235,242,227,225,248,230,239,212,0,238],
[231,277,260,248,251,264,251,242,224,221,251,230,245,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 36, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,244,254,235,252,249,241,254,250,244,256,244,248,239],
[252,0,245,234,247,260,251,239,246,246,244,248,243,230,219],
[257,256,0,240,240,260,257,242,248,232,236,241,255,240,228],
[247,267,261,0,239,270,262,252,257,252,244,262,249,259,253],
[266,254,261,262,0,272,244,253,241,269,258,254,258,262,253],
[249,241,241,231,229,0,233,247,231,241,230,227,235,229,218],
[252,250,244,239,257,268,0,247,243,256,240,254,243,252,257],
[260,262,259,249,248,254,254,0,247,260,261,247,259,246,255],
[247,255,253,244,260,270,258,254,0,257,241,248,259,238,245],
[251,255,269,249,232,260,245,241,244,0,245,244,259,251,237],
[257,257,265,257,243,271,261,240,260,256,0,243,260,262,242],
[245,253,260,239,247,274,247,254,253,257,258,0,246,250,238],
[257,258,246,252,243,266,258,242,242,242,241,255,0,262,247],
[253,271,261,242,239,272,249,255,263,250,239,251,239,0,252],
[262,282,273,248,248,283,244,246,256,264,259,263,254,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 37, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,263,249,257,253,249,264,256,258,234,260,251,277,247],
[254,0,237,239,263,244,231,238,249,262,244,238,227,253,232],
[238,264,0,244,248,262,240,242,259,250,261,255,235,278,233],
[252,262,257,0,280,245,240,242,248,257,249,234,239,278,248],
[244,238,253,221,0,257,224,251,237,250,238,248,226,259,227],
[248,257,239,256,244,0,243,247,237,246,251,257,218,263,229],
[252,270,261,261,277,258,0,257,256,261,252,264,234,273,245],
[237,263,259,259,250,254,244,0,249,247,252,261,235,261,228],
[245,252,242,253,264,264,245,252,0,248,257,239,226,285,229],
[243,239,251,244,251,255,240,254,253,0,242,240,228,266,235],
[267,257,240,252,263,250,249,249,244,259,0,237,241,262,225],
[241,263,246,267,253,244,237,240,262,261,264,0,229,278,233],
[250,274,266,262,275,283,267,266,275,273,260,272,0,291,257],
[224,248,223,223,242,238,228,240,216,235,239,223,210,0,206],
[254,269,268,253,274,272,256,273,272,266,276,268,244,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 38, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,241,242,240,241,237,226,234,246,244,238,242,233,227],
[268,0,260,255,257,252,255,269,260,247,269,263,257,256,254],
[260,241,0,248,235,237,240,251,247,254,259,241,250,234,228],
[259,246,253,0,254,253,244,252,261,259,263,263,251,259,253],
[261,244,266,247,0,251,244,251,248,246,265,254,261,246,240],
[260,249,264,248,250,0,246,255,249,253,257,260,249,247,245],
[264,246,261,257,257,255,0,257,250,251,265,260,273,258,240],
[275,232,250,249,250,246,244,0,243,245,259,249,252,244,245],
[267,241,254,240,253,252,251,258,0,246,267,252,260,244,251],
[255,254,247,242,255,248,250,256,255,0,266,255,257,235,243],
[257,232,242,238,236,244,236,242,234,235,0,252,248,241,247],
[263,238,260,238,247,241,241,252,249,246,249,0,243,241,237],
[259,244,251,250,240,252,228,249,241,244,253,258,0,241,245],
[268,245,267,242,255,254,243,257,257,266,260,260,260,0,259],
[274,247,273,248,261,256,261,256,250,258,254,264,256,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 39, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,227,231,243,261,243,250,237,260,241,248,263,228,237],
[257,0,249,254,251,277,249,264,256,284,272,263,273,257,256],
[274,252,0,249,261,267,270,251,241,256,243,268,280,258,258],
[270,247,252,0,260,250,238,260,253,254,244,260,277,252,257],
[258,250,240,241,0,268,257,264,248,258,246,272,281,252,269],
[240,224,234,251,233,0,249,226,218,245,251,246,265,225,248],
[258,252,231,263,244,252,0,268,234,247,233,268,261,234,232],
[251,237,250,241,237,275,233,0,224,263,254,239,268,257,271],
[264,245,260,248,253,283,267,277,0,280,245,267,277,253,261],
[241,217,245,247,243,256,254,238,221,0,245,259,270,229,270],
[260,229,258,257,255,250,268,247,256,256,0,262,275,247,244],
[253,238,233,241,229,255,233,262,234,242,239,0,245,225,240],
[238,228,221,224,220,236,240,233,224,231,226,256,0,223,245],
[273,244,243,249,249,276,267,244,248,272,254,276,278,0,260],
[264,245,243,244,232,253,269,230,240,231,257,261,256,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 40, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,257,267,261,240,250,254,253,258,263,257,264,259,253],
[264,0,249,253,269,259,270,266,246,254,263,266,285,266,258],
[244,252,0,254,262,248,245,258,239,251,267,267,281,253,244],
[234,248,247,0,256,248,253,242,248,248,251,259,261,250,255],
[240,232,239,245,0,244,249,252,256,250,253,255,264,249,239],
[261,242,253,253,257,0,257,253,251,255,262,271,273,271,258],
[251,231,256,248,252,244,0,268,257,260,261,249,264,245,243],
[247,235,243,259,249,248,233,0,252,241,248,256,249,250,250],
[248,255,262,253,245,250,244,249,0,253,258,246,255,262,252],
[243,247,250,253,251,246,241,260,248,0,253,257,259,250,239],
[238,238,234,250,248,239,240,253,243,248,0,246,253,251,238],
[244,235,234,242,246,230,252,245,255,244,255,0,257,248,243],
[237,216,220,240,237,228,237,252,246,242,248,244,0,249,237],
[242,235,248,251,252,230,256,251,239,251,250,253,252,0,236],
[248,243,257,246,262,243,258,251,249,262,263,258,264,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 41, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,237,236,242,228,234,230,259,244,238,247,238,229,256],
[264,0,275,262,256,236,250,250,256,263,251,284,281,246,257],
[264,226,0,273,256,216,250,249,239,234,226,237,256,242,257],
[265,239,228,0,248,229,242,259,257,244,240,239,248,227,254],
[259,245,245,253,0,239,241,236,246,238,234,252,260,241,261],
[273,265,285,272,262,0,250,251,259,245,256,265,265,256,265],
[267,251,251,259,260,251,0,252,233,237,247,259,280,255,277],
[271,251,252,242,265,250,249,0,264,259,229,264,265,234,237],
[242,245,262,244,255,242,268,237,0,243,246,265,245,232,264],
[257,238,267,257,263,256,264,242,258,0,235,267,258,234,271],
[263,250,275,261,267,245,254,272,255,266,0,268,273,246,267],
[254,217,264,262,249,236,242,237,236,234,233,0,253,223,263],
[263,220,245,253,241,236,221,236,256,243,228,248,0,229,265],
[272,255,259,274,260,245,246,267,269,267,255,278,272,0,275],
[245,244,244,247,240,236,224,264,237,230,234,238,236,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 42, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,267,237,184,239,248,234,239,315,218,209,225,218,211],
[285,0,254,248,145,282,289,269,266,296,227,222,241,257,172],
[234,247,0,221,195,218,249,231,242,264,250,170,247,227,203],
[264,253,280,0,177,234,291,241,261,289,268,177,240,292,212],
[317,356,306,324,0,304,334,334,294,372,319,294,330,265,235],
[262,219,283,267,197,0,222,296,277,290,233,197,279,217,209],
[253,212,252,210,167,279,0,197,264,228,242,212,216,194,191],
[267,232,270,260,167,205,304,0,206,295,256,193,234,224,167],
[262,235,259,240,207,224,237,295,0,278,234,211,205,262,185],
[186,205,237,212,129,211,273,206,223,0,190,215,218,165,154],
[283,274,251,233,182,268,259,245,267,311,0,208,241,258,261],
[292,279,331,324,207,304,289,308,290,286,293,0,268,299,240],
[276,260,254,261,171,222,285,267,296,283,260,233,0,202,189],
[283,244,274,209,236,284,307,277,239,336,243,202,299,0,258],
[290,329,298,289,266,292,310,334,316,347,240,261,312,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 43, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,264,256,250,252,258,260,252,250,260,252,229,236,228],
[257,0,265,253,255,273,272,277,272,254,274,283,249,252,258],
[237,236,0,258,234,263,274,252,250,247,240,259,258,238,233],
[245,248,243,0,238,259,248,246,270,229,248,258,234,234,235],
[251,246,267,263,0,281,267,266,274,242,252,266,251,246,263],
[249,228,238,242,220,0,251,245,265,251,234,231,241,233,246],
[243,229,227,253,234,250,0,241,240,235,244,250,242,225,220],
[241,224,249,255,235,256,260,0,257,233,241,255,234,233,244],
[249,229,251,231,227,236,261,244,0,229,237,258,240,226,226],
[251,247,254,272,259,250,266,268,272,0,270,253,260,231,250],
[241,227,261,253,249,267,257,260,264,231,0,235,241,228,247],
[249,218,242,243,235,270,251,246,243,248,266,0,236,223,224],
[272,252,243,267,250,260,259,267,261,241,260,265,0,236,243],
[265,249,263,267,255,268,276,268,275,270,273,278,265,0,239],
[273,243,268,266,238,255,281,257,275,251,254,277,258,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 44, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,224,187,228,239,228,170,216,194,236,232,213,233,223],
[250,0,228,226,212,268,270,200,227,208,235,256,245,238,262],
[277,273,0,219,277,234,269,262,233,247,234,260,251,231,283],
[314,275,282,0,259,275,261,234,274,290,298,283,296,257,306],
[273,289,224,242,0,257,251,246,265,234,268,253,250,251,273],
[262,233,267,226,244,0,274,199,232,227,235,240,269,269,230],
[273,231,232,240,250,227,0,218,219,223,222,219,221,225,236],
[331,301,239,267,255,302,283,0,283,254,276,281,278,263,303],
[285,274,268,227,236,269,282,218,0,223,249,267,281,276,282],
[307,293,254,211,267,274,278,247,278,0,272,269,247,249,304],
[265,266,267,203,233,266,279,225,252,229,0,243,272,261,281],
[269,245,241,218,248,261,282,220,234,232,258,0,238,231,276],
[288,256,250,205,251,232,280,223,220,254,229,263,0,240,276],
[268,263,270,244,250,232,276,238,225,252,240,270,261,0,286],
[278,239,218,195,228,271,265,198,219,197,220,225,225,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 45, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,224,279,260,226,202,224,259,228,266,234,254,269,281],
[221,0,270,269,245,281,215,237,274,218,226,242,273,299,259],
[277,231,0,247,285,281,266,189,235,211,229,253,261,309,252],
[222,232,254,0,274,276,233,245,227,251,227,267,252,300,288],
[241,256,216,227,0,282,223,227,282,243,249,285,265,299,273],
[275,220,220,225,219,0,247,210,235,237,225,265,246,326,284],
[299,286,235,268,278,254,0,201,275,273,275,261,328,334,285],
[277,264,312,256,274,291,300,0,285,250,280,319,313,339,289],
[242,227,266,274,219,266,226,216,0,249,240,228,283,289,274],
[273,283,290,250,258,264,228,251,252,0,278,248,267,291,289],
[235,275,272,274,252,276,226,221,261,223,0,235,298,272,246],
[267,259,248,234,216,236,240,182,273,253,266,0,285,278,254],
[247,228,240,249,236,255,173,188,218,234,203,216,0,275,234],
[232,202,192,201,202,175,167,162,212,210,229,223,226,0,232],
[220,242,249,213,228,217,216,212,227,212,255,247,267,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 46, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,235,219,227,227,228,232,224,223,239,218,224,220,224],
[285,0,250,248,258,260,253,259,269,267,269,261,252,272,251],
[266,251,0,250,259,249,246,242,255,241,274,255,258,262,246],
[282,253,251,0,261,261,248,247,244,237,279,253,252,255,247],
[274,243,242,240,0,252,229,269,246,240,254,235,241,251,245],
[274,241,252,240,249,0,232,257,252,239,260,257,245,250,252],
[273,248,255,253,272,269,0,263,254,257,258,267,247,260,254],
[269,242,259,254,232,244,238,0,260,235,272,240,239,239,231],
[277,232,246,257,255,249,247,241,0,241,267,252,259,249,242],
[278,234,260,264,261,262,244,266,260,0,271,262,240,251,245],
[262,232,227,222,247,241,243,229,234,230,0,232,233,244,224],
[283,240,246,248,266,244,234,261,249,239,269,0,245,260,237],
[277,249,243,249,260,256,254,262,242,261,268,256,0,265,252],
[281,229,239,246,250,251,241,262,252,250,257,241,236,0,240],
[277,250,255,254,256,249,247,270,259,256,277,264,249,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 47, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,286,237,246,256,229,254,225,284,259,292,251,249,184],
[253,0,259,254,268,273,208,271,253,292,260,278,249,244,225],
[215,242,0,219,235,229,230,215,219,247,217,235,233,223,218],
[264,247,282,0,263,267,231,263,249,283,257,281,289,268,266],
[255,233,266,238,0,227,215,256,191,258,259,256,265,262,219],
[245,228,272,234,274,0,261,263,264,260,270,276,246,242,233],
[272,293,271,270,286,240,0,275,264,283,285,302,240,318,270],
[247,230,286,238,245,238,226,0,225,237,258,283,262,251,223],
[276,248,282,252,310,237,237,276,0,290,262,304,276,253,264],
[217,209,254,218,243,241,218,264,211,0,257,259,233,251,186],
[242,241,284,244,242,231,216,243,239,244,0,284,251,249,192],
[209,223,266,220,245,225,199,218,197,242,217,0,227,255,205],
[250,252,268,212,236,255,261,239,225,268,250,274,0,240,193],
[252,257,278,233,239,259,183,250,248,250,252,246,261,0,239],
[317,276,283,235,282,268,231,278,237,315,309,296,308,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 48, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,251,255,252,247,243,249,242,235,266,249,258,249,264],
[240,0,249,262,264,253,231,247,236,255,258,248,249,254,260],
[250,252,0,235,245,241,238,240,221,238,265,231,237,243,263],
[246,239,266,0,249,257,232,238,222,249,254,239,241,245,266],
[249,237,256,252,0,248,233,245,240,233,267,236,243,254,255],
[254,248,260,244,253,0,241,244,230,247,271,260,232,274,273],
[258,270,263,269,268,260,0,269,239,261,264,256,257,261,278],
[252,254,261,263,256,257,232,0,243,249,260,247,229,254,257],
[259,265,280,279,261,271,262,258,0,260,269,247,248,259,272],
[266,246,263,252,268,254,240,252,241,0,266,255,264,277,277],
[235,243,236,247,234,230,237,241,232,235,0,218,230,256,257],
[252,253,270,262,265,241,245,254,254,246,283,0,233,269,266],
[243,252,264,260,258,269,244,272,253,237,271,268,0,266,263],
[252,247,258,256,247,227,240,247,242,224,245,232,235,0,263],
[237,241,238,235,246,228,223,244,229,224,244,235,238,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 49, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,252,255,258,250,276,261,261,294,267,267,264,275,270],
[237,0,250,251,237,240,247,241,256,265,254,254,240,231,235],
[249,251,0,255,252,238,226,230,249,231,224,251,238,247,244],
[246,250,246,0,231,242,268,255,250,256,254,250,252,229,262],
[243,264,249,270,0,238,249,244,254,258,246,272,241,248,258],
[251,261,263,259,263,0,260,275,268,272,268,257,250,241,239],
[225,254,275,233,252,241,0,251,247,254,240,267,262,239,240],
[240,260,271,246,257,226,250,0,247,269,268,257,247,244,249],
[240,245,252,251,247,233,254,254,0,253,247,268,245,239,241],
[207,236,270,245,243,229,247,232,248,0,240,236,239,238,243],
[234,247,277,247,255,233,261,233,254,261,0,261,245,243,248],
[234,247,250,251,229,244,234,244,233,265,240,0,234,240,219],
[237,261,263,249,260,251,239,254,256,262,256,267,0,258,257],
[226,270,254,272,253,260,262,257,262,263,258,261,243,0,245],
[231,266,257,239,243,262,261,252,260,258,253,282,244,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 50, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,310,247,149,185,232,219,221,348,376,268,301,176,252],
[256,0,333,330,225,278,292,281,343,303,337,377,317,275,301],
[191,168,0,208,149,223,288,335,246,348,277,280,317,231,280],
[254,171,293,0,261,240,215,274,216,309,261,274,320,179,229],
[352,276,352,240,0,234,314,311,373,347,358,397,343,266,239],
[316,223,278,261,267,0,225,233,267,357,342,306,256,213,354],
[269,209,213,286,187,276,0,389,278,345,286,333,303,214,289],
[282,220,166,227,190,268,112,0,254,312,274,367,404,189,218],
[280,158,255,285,128,234,223,247,0,255,223,233,268,118,317],
[153,198,153,192,154,144,156,189,246,0,263,248,153,167,209],
[125,164,224,240,143,159,215,227,278,238,0,191,221,216,244],
[233,124,221,227,104,195,168,134,268,253,310,0,305,244,252],
[200,184,184,181,158,245,198,97,233,348,280,196,0,175,267],
[325,226,270,322,235,288,287,312,383,334,285,257,326,0,298],
[249,200,221,272,262,147,212,283,184,292,257,249,234,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 51, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,255,265,251,267,262,260,239,264,258,247,238,247,262],
[244,0,244,263,249,247,247,246,241,274,225,263,231,239,228],
[246,257,0,250,259,262,277,267,238,262,255,268,255,258,259],
[236,238,251,0,248,267,261,243,215,252,252,230,240,242,242],
[250,252,242,253,0,250,240,259,240,248,241,239,225,248,250],
[234,254,239,234,251,0,249,254,228,261,246,234,234,246,250],
[239,254,224,240,261,252,0,243,234,254,236,251,222,230,235],
[241,255,234,258,242,247,258,0,237,258,259,237,223,244,251],
[262,260,263,286,261,273,267,264,0,277,276,259,244,269,271],
[237,227,239,249,253,240,247,243,224,0,245,235,244,229,237],
[243,276,246,249,260,255,265,242,225,256,0,251,251,258,246],
[254,238,233,271,262,267,250,264,242,266,250,0,252,242,255],
[263,270,246,261,276,267,279,278,257,257,250,249,0,249,261],
[254,262,243,259,253,255,271,257,232,272,243,259,252,0,255],
[239,273,242,259,251,251,266,250,230,264,255,246,240,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 52, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,249,254,291,236,276,251,268,265,261,271,258,241,236],
[240,0,234,221,271,251,264,233,226,256,254,271,260,239,243],
[252,267,0,250,271,248,282,240,243,290,246,302,287,285,267],
[247,280,251,0,268,263,237,258,241,261,248,259,273,228,240],
[210,230,230,233,0,225,257,205,225,257,228,243,243,231,212],
[265,250,253,238,276,0,265,256,228,258,246,269,267,249,243],
[225,237,219,264,244,236,0,244,248,287,254,246,237,257,262],
[250,268,261,243,296,245,257,0,256,277,263,268,252,257,240],
[233,275,258,260,276,273,253,245,0,278,258,273,262,258,257],
[236,245,211,240,244,243,214,224,223,0,246,258,244,216,244],
[240,247,255,253,273,255,247,238,243,255,0,277,269,252,259],
[230,230,199,242,258,232,255,233,228,243,224,0,240,236,218],
[243,241,214,228,258,234,264,249,239,257,232,261,0,247,204],
[260,262,216,273,270,252,244,244,243,285,249,265,254,0,258],
[265,258,234,261,289,258,239,261,244,257,242,283,297,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 53, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,277,250,274,250,252,270,270,260,265,263,258,261,270],
[239,0,270,257,266,254,258,256,272,253,259,274,265,257,279],
[224,231,0,241,238,242,218,246,258,236,231,250,254,229,256],
[251,244,260,0,243,232,235,263,277,242,244,251,261,249,257],
[227,235,263,258,0,236,234,269,274,241,249,253,240,250,266],
[251,247,259,269,265,0,245,263,285,250,250,265,265,263,279],
[249,243,283,266,267,256,0,263,270,243,244,270,265,252,270],
[231,245,255,238,232,238,238,0,272,246,239,249,254,237,270],
[231,229,243,224,227,216,231,229,0,221,228,241,245,233,251],
[241,248,265,259,260,251,258,255,280,0,255,263,242,245,261],
[236,242,270,257,252,251,257,262,273,246,0,261,257,247,283],
[238,227,251,250,248,236,231,252,260,238,240,0,250,246,264],
[243,236,247,240,261,236,236,247,256,259,244,251,0,241,266],
[240,244,272,252,251,238,249,264,268,256,254,255,260,0,265],
[231,222,245,244,235,222,231,231,250,240,218,237,235,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 54, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,251,238,244,251,237,255,257,238,247,253,250,244,235],
[248,0,249,242,257,247,226,262,245,236,242,240,238,247,244],
[250,252,0,242,253,245,229,241,257,229,256,251,253,242,232],
[263,259,259,0,253,251,234,271,249,255,252,237,248,243,240],
[257,244,248,248,0,238,243,259,241,242,244,251,249,246,240],
[250,254,256,250,263,0,238,254,266,260,249,253,237,244,259],
[264,275,272,267,258,263,0,261,258,268,267,241,258,271,255],
[246,239,260,230,242,247,240,0,259,239,246,240,223,245,240],
[244,256,244,252,260,235,243,242,0,250,269,235,219,248,225],
[263,265,272,246,259,241,233,262,251,0,252,251,243,248,245],
[254,259,245,249,257,252,234,255,232,249,0,247,235,250,246],
[248,261,250,264,250,248,260,261,266,250,254,0,267,260,256],
[251,263,248,253,252,264,243,278,282,258,266,234,0,265,238],
[257,254,259,258,255,257,230,256,253,253,251,241,236,0,237],
[266,257,269,261,261,242,246,261,276,256,255,245,263,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 55, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,226,221,317,240,258,244,260,278,263,207,266,221,239],
[221,0,257,180,280,222,267,206,226,236,252,238,249,194,230],
[275,244,0,246,318,260,257,251,260,270,243,243,259,249,225],
[280,321,255,0,304,302,309,273,255,309,293,276,302,241,264],
[184,221,183,197,0,205,195,194,234,234,206,197,215,188,221],
[261,279,241,199,296,0,235,256,266,263,261,225,270,214,225],
[243,234,244,192,306,266,0,216,251,247,250,227,269,233,239],
[257,295,250,228,307,245,285,0,246,290,263,247,291,266,272],
[241,275,241,246,267,235,250,255,0,285,279,243,266,217,232],
[223,265,231,192,267,238,254,211,216,0,260,227,219,241,240],
[238,249,258,208,295,240,251,238,222,241,0,203,249,207,227],
[294,263,258,225,304,276,274,254,258,274,298,0,265,248,253],
[235,252,242,199,286,231,232,210,235,282,252,236,0,214,231],
[280,307,252,260,313,287,268,235,284,260,294,253,287,0,255],
[262,271,276,237,280,276,262,229,269,261,274,248,270,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 56, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,240,82,207,501,365,218,0,240,365,125,82,365,0],
[419,0,240,261,419,501,365,343,419,283,283,261,294,501,125],
[261,261,0,261,261,343,261,343,261,419,283,261,136,501,125],
[419,240,240,0,283,501,365,376,158,283,365,261,158,365,283],
[294,82,240,218,0,376,365,218,158,240,240,261,240,365,0],
[0,0,158,0,125,0,283,136,0,158,283,125,0,283,0],
[136,136,240,136,136,218,0,218,136,158,158,136,136,376,0],
[283,158,158,125,283,365,283,0,158,283,283,125,158,365,125],
[501,82,240,343,343,501,365,343,0,365,365,343,240,501,207],
[261,218,82,218,261,343,343,218,136,0,365,261,136,501,0],
[136,218,218,136,261,218,343,218,136,136,0,261,136,501,136],
[376,240,240,240,240,376,365,376,158,240,240,0,240,240,240],
[419,207,365,343,261,501,365,343,261,365,365,261,0,501,125],
[136,0,0,136,136,218,125,136,0,0,0,261,0,0,0],
[501,376,376,218,501,501,501,376,294,501,365,261,376,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 57, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,244,255,256,260,250,229,227,231,266,269,253,249,259],
[228,0,220,265,262,267,239,221,227,211,223,269,281,252,245],
[257,281,0,284,256,290,259,251,303,260,239,319,282,290,266],
[246,236,217,0,216,237,261,219,238,234,224,254,220,233,222],
[245,239,245,285,0,284,277,245,272,238,267,292,265,257,252],
[241,234,211,264,217,0,262,224,245,233,238,305,250,234,243],
[251,262,242,240,224,239,0,229,259,209,234,282,250,251,218],
[272,280,250,282,256,277,272,0,260,263,251,294,272,256,248],
[274,274,198,263,229,256,242,241,0,207,251,265,278,257,237],
[270,290,241,267,263,268,292,238,294,0,268,301,286,279,268],
[235,278,262,277,234,263,267,250,250,233,0,276,256,250,248],
[232,232,182,247,209,196,219,207,236,200,225,0,217,237,211],
[248,220,219,281,236,251,251,229,223,215,245,284,0,255,215],
[252,249,211,268,244,267,250,245,244,222,251,264,246,0,238],
[242,256,235,279,249,258,283,253,264,233,253,290,286,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 58, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,201,231,227,228,253,211,240,225,245,227,240,266,229],
[276,0,253,257,247,237,214,229,269,226,282,242,245,276,264],
[300,248,0,287,241,261,263,246,278,258,279,271,294,280,248],
[270,244,214,0,217,238,236,217,235,235,246,237,242,241,248],
[274,254,260,284,0,247,235,252,267,260,281,271,274,281,246],
[273,264,240,263,254,0,247,247,255,240,262,238,255,280,254],
[248,287,238,265,266,254,0,244,275,253,259,251,252,267,244],
[290,272,255,284,249,254,257,0,266,266,281,261,259,273,285],
[261,232,223,266,234,246,226,235,0,240,267,246,251,257,231],
[276,275,243,266,241,261,248,235,261,0,252,246,246,277,241],
[256,219,222,255,220,239,242,220,234,249,0,224,237,245,225],
[274,259,230,264,230,263,250,240,255,255,277,0,256,238,244],
[261,256,207,259,227,246,249,242,250,255,264,245,0,251,250],
[235,225,221,260,220,221,234,228,244,224,256,263,250,0,221],
[272,237,253,253,255,247,257,216,270,260,276,257,251,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 59, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,267,284,276,245,282,264,270,280,277,295,269,290,275],
[231,0,226,262,281,218,273,240,269,277,261,296,298,266,257],
[234,275,0,284,251,254,303,274,270,267,249,256,292,268,292],
[217,239,217,0,251,214,267,241,272,238,227,263,277,238,268],
[225,220,250,250,0,233,277,235,275,236,278,268,285,249,272],
[256,283,247,287,268,0,296,238,262,273,276,300,270,248,260],
[219,228,198,234,224,205,0,205,219,195,205,224,235,211,208],
[237,261,227,260,266,263,296,0,278,262,269,271,270,280,263],
[231,232,231,229,226,239,282,223,0,238,250,260,289,254,234],
[221,224,234,263,265,228,306,239,263,0,238,258,276,245,235],
[224,240,252,274,223,225,296,232,251,263,0,277,273,246,266],
[206,205,245,238,233,201,277,230,241,243,224,0,221,234,236],
[232,203,209,224,216,231,266,231,212,225,228,280,0,234,244],
[211,235,233,263,252,253,290,221,247,256,255,267,267,0,257],
[226,244,209,233,229,241,293,238,267,266,235,265,257,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 60, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,246,253,226,258,275,236,251,247,256,252,255,257,232],
[272,0,238,264,257,272,281,244,250,275,253,266,244,283,241],
[255,263,0,264,243,235,272,252,254,234,249,236,243,273,228],
[248,237,237,0,230,242,239,228,238,234,260,230,221,258,227],
[275,244,258,271,0,276,272,244,252,261,273,254,252,293,240],
[243,229,266,259,225,0,265,250,246,236,261,227,232,273,233],
[226,220,229,262,229,236,0,225,223,229,237,228,246,250,225],
[265,257,249,273,257,251,276,0,267,250,265,245,263,268,248],
[250,251,247,263,249,255,278,234,0,240,269,248,242,276,249],
[254,226,267,267,240,265,272,251,261,0,254,231,231,277,237],
[245,248,252,241,228,240,264,236,232,247,0,235,247,270,237],
[249,235,265,271,247,274,273,256,253,270,266,0,259,266,253],
[246,257,258,280,249,269,255,238,259,270,254,242,0,282,244],
[244,218,228,243,208,228,251,233,225,224,231,235,219,0,222],
[269,260,273,274,261,268,276,253,252,264,264,248,257,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 61, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,249,242,269,142,211,181,253,230,381,225,271,220,200],
[247,0,228,200,233,225,214,265,242,277,266,248,316,174,260],
[252,273,0,290,194,244,175,215,305,198,294,243,260,161,203],
[259,301,211,0,239,258,243,164,269,240,220,162,248,132,288],
[232,268,307,262,0,263,271,230,292,301,278,228,289,243,215],
[359,276,257,243,238,0,260,266,389,281,318,244,236,222,218],
[290,287,326,258,230,241,0,286,306,281,334,181,320,270,304],
[320,236,286,337,271,235,215,0,299,257,288,282,266,212,221],
[248,259,196,232,209,112,195,202,0,225,214,164,237,153,204],
[271,224,303,261,200,220,220,244,276,0,289,246,230,187,224],
[120,235,207,281,223,183,167,213,287,212,0,286,303,233,202],
[276,253,258,339,273,257,320,219,337,255,215,0,299,205,237],
[230,185,241,253,212,265,181,235,264,271,198,202,0,159,206],
[281,327,340,369,258,279,231,289,348,314,268,296,342,0,259],
[301,241,298,213,286,283,197,280,297,277,299,264,295,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 62, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,257,260,243,270,260,262,240,283,274,256,245,247,254],
[262,0,284,269,247,267,277,276,277,250,275,239,264,260,255],
[244,217,0,230,239,238,239,247,261,223,258,233,247,227,245],
[241,232,271,0,219,243,246,237,253,232,257,228,223,212,232],
[258,254,262,282,0,247,256,253,252,292,257,214,257,239,251],
[231,234,263,258,254,0,233,225,277,249,247,229,243,232,223],
[241,224,262,255,245,268,0,244,267,278,263,244,254,246,245],
[239,225,254,264,248,276,257,0,254,251,258,231,229,202,242],
[261,224,240,248,249,224,234,247,0,230,252,253,220,208,242],
[218,251,278,269,209,252,223,250,271,0,251,225,227,213,257],
[227,226,243,244,244,254,238,243,249,250,0,223,234,231,231],
[245,262,268,273,287,272,257,270,248,276,278,0,239,235,260],
[256,237,254,278,244,258,247,272,281,274,267,262,0,237,253],
[254,241,274,289,262,269,255,299,293,288,270,266,264,0,289],
[247,246,256,269,250,278,256,259,259,244,270,241,248,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 63, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,267,256,265,253,264,273,246,271,254,253,273,264,251],
[248,0,259,251,254,254,245,270,248,263,252,253,274,260,252],
[234,242,0,244,238,245,244,268,224,251,228,229,263,253,236],
[245,250,257,0,256,248,248,266,238,268,257,249,261,261,253],
[236,247,263,245,0,241,235,269,236,269,236,233,255,248,255],
[248,247,256,253,260,0,243,257,240,264,226,243,264,251,250],
[237,256,257,253,266,258,0,269,237,267,250,251,259,262,239],
[228,231,233,235,232,244,232,0,227,245,235,231,263,250,245],
[255,253,277,263,265,261,264,274,0,273,238,257,272,279,263],
[230,238,250,233,232,237,234,256,228,0,226,229,252,245,244],
[247,249,273,244,265,275,251,266,263,275,0,257,260,270,265],
[248,248,272,252,268,258,250,270,244,272,244,0,276,259,256],
[228,227,238,240,246,237,242,238,229,249,241,225,0,237,242],
[237,241,248,240,253,250,239,251,222,256,231,242,264,0,244],
[250,249,265,248,246,251,262,256,238,257,236,245,259,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 64, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,289,252,232,252,320,294,233,220,283,217,217,279,279],
[260,0,288,223,265,257,323,269,244,243,266,259,254,273,273],
[212,213,0,222,243,224,248,246,228,211,230,224,231,216,240],
[249,278,279,0,240,281,282,259,254,245,276,257,296,276,278],
[269,236,258,261,0,281,322,281,242,242,255,278,287,278,257],
[249,244,277,220,220,0,254,231,242,217,251,254,232,230,226],
[181,178,253,219,179,247,0,229,218,182,220,207,204,191,208],
[207,232,255,242,220,270,272,0,251,221,239,250,268,260,249],
[268,257,273,247,259,259,283,250,0,200,262,239,243,258,269],
[281,258,290,256,259,284,319,280,301,0,264,263,277,232,272],
[218,235,271,225,246,250,281,262,239,237,0,281,235,263,227],
[284,242,277,244,223,247,294,251,262,238,220,0,234,280,220],
[284,247,270,205,214,269,297,233,258,224,266,267,0,285,272],
[222,228,285,225,223,271,310,241,243,269,238,221,216,0,284],
[222,228,261,223,244,275,293,252,232,229,274,281,229,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 65, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,257,240,272,259,277,280,260,264,255,249,276,282,270],
[203,0,222,221,240,241,248,242,232,266,249,238,241,236,238],
[244,279,0,240,262,264,268,276,240,272,253,266,251,253,271],
[261,280,261,0,271,258,273,280,273,239,254,261,270,278,281],
[229,261,239,230,0,216,254,251,240,244,260,229,242,256,234],
[242,260,237,243,285,0,266,276,259,264,237,257,280,292,280],
[224,253,233,228,247,235,0,260,247,266,253,240,250,254,245],
[221,259,225,221,250,225,241,0,269,268,255,223,253,257,243],
[241,269,261,228,261,242,254,232,0,253,257,245,254,267,265],
[237,235,229,262,257,237,235,233,248,0,247,244,262,274,250],
[246,252,248,247,241,264,248,246,244,254,0,244,254,258,259],
[252,263,235,240,272,244,261,278,256,257,257,0,269,275,252],
[225,260,250,231,259,221,251,248,247,239,247,232,0,267,234],
[219,265,248,223,245,209,247,244,234,227,243,226,234,0,244],
[231,263,230,220,267,221,256,258,236,251,242,249,267,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 66, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,266,256,261,255,247,258,268,270,264,265,283,267,240],
[243,0,249,247,246,237,246,227,266,261,251,261,255,256,240],
[235,252,0,231,251,236,226,240,260,235,256,249,246,251,248],
[245,254,270,0,280,271,241,277,276,255,256,271,257,265,252],
[240,255,250,221,0,230,215,231,253,222,242,245,238,227,237],
[246,264,265,230,271,0,227,261,249,271,244,256,246,214,254],
[254,255,275,260,286,274,0,262,272,282,263,247,266,261,266],
[243,274,261,224,270,240,239,0,264,279,271,265,236,248,243],
[233,235,241,225,248,252,229,237,0,242,240,248,244,234,244],
[231,240,266,246,279,230,219,222,259,0,253,238,248,244,242],
[237,250,245,245,259,257,238,230,261,248,0,250,244,254,243],
[236,240,252,230,256,245,254,236,253,263,251,0,267,246,261],
[218,246,255,244,263,255,235,265,257,253,257,234,0,253,247],
[234,245,250,236,274,287,240,253,267,257,247,255,248,0,247],
[261,261,253,249,264,247,235,258,257,259,258,240,254,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 67, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,236,241,266,241,237,225,230,242,223,238,213,250,221],
[250,0,248,221,239,215,214,235,250,239,216,225,228,245,214],
[265,253,0,223,259,226,215,235,245,247,230,249,237,265,262],
[260,280,278,0,265,248,248,232,242,255,239,237,249,256,245],
[235,262,242,236,0,238,237,231,241,270,231,240,239,256,245],
[260,286,275,253,263,0,269,259,279,264,250,265,242,295,263],
[264,287,286,253,264,232,0,260,253,250,240,245,268,301,256],
[276,266,266,269,270,242,241,0,256,247,240,259,238,285,267],
[271,251,256,259,260,222,248,245,0,246,251,243,259,274,240],
[259,262,254,246,231,237,251,254,255,0,251,244,231,263,234],
[278,285,271,262,270,251,261,261,250,250,0,261,262,269,251],
[263,276,252,264,261,236,256,242,258,257,240,0,256,290,256],
[288,273,264,252,262,259,233,263,242,270,239,245,0,270,246],
[251,256,236,245,245,206,200,216,227,238,232,211,231,0,237],
[280,287,239,256,256,238,245,234,261,267,250,245,255,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 68, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,269,238,239,255,270,252,253,238,251,245,253,237,275],
[273,0,246,250,249,262,278,277,248,261,277,275,297,233,270],
[232,255,0,271,249,251,263,254,243,245,253,263,274,238,245],
[263,251,230,0,263,237,244,229,253,235,248,259,248,212,243],
[262,252,252,238,0,248,262,223,254,235,251,237,251,236,242],
[246,239,250,264,253,0,276,266,259,261,252,268,287,238,247],
[231,223,238,257,239,225,0,242,264,235,245,248,238,222,221],
[249,224,247,272,278,235,259,0,239,235,265,245,252,222,251],
[248,253,258,248,247,242,237,262,0,252,253,266,250,244,226],
[263,240,256,266,266,240,266,266,249,0,243,277,270,250,270],
[250,224,248,253,250,249,256,236,248,258,0,266,256,248,246],
[256,226,238,242,264,233,253,256,235,224,235,0,276,221,250],
[248,204,227,253,250,214,263,249,251,231,245,225,0,199,243],
[264,268,263,289,265,263,279,279,257,251,253,280,302,0,243],
[226,231,256,258,259,254,280,250,275,231,255,251,258,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 69, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,334,259,353,244,277,289,308,346,293,298,250,251,321,245],
[167,0,256,264,188,214,251,257,259,250,270,248,209,247,253],
[242,245,0,282,224,193,247,186,278,269,210,246,171,188,227],
[148,237,219,0,178,183,215,205,261,237,245,233,221,196,256],
[257,313,277,323,0,212,237,275,287,285,299,234,243,262,279],
[224,287,308,318,289,0,312,283,288,302,331,251,269,264,255],
[212,250,254,286,264,189,0,254,304,263,257,258,252,262,267],
[193,244,315,296,226,218,247,0,342,273,245,262,205,210,266],
[155,242,223,240,214,213,197,159,0,249,249,207,232,253,252],
[208,251,232,264,216,199,238,228,252,0,262,215,198,268,252],
[203,231,291,256,202,170,244,256,252,239,0,207,195,180,261],
[251,253,255,268,267,250,243,239,294,286,294,0,236,271,278],
[250,292,330,280,258,232,249,296,269,303,306,265,0,276,249],
[180,254,313,305,239,237,239,291,248,233,321,230,225,0,231],
[256,248,274,245,222,246,234,235,249,249,240,223,252,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 70, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,260,237,258,232,232,255,247,247,251,248,262,251,257],
[247,0,252,252,259,240,238,266,248,240,236,245,255,249,265],
[241,249,0,247,254,252,248,257,228,250,245,240,241,244,259],
[264,249,254,0,251,263,261,268,247,259,249,256,258,262,262],
[243,242,247,250,0,248,253,257,241,245,251,245,250,238,256],
[269,261,249,238,253,0,242,270,250,253,254,252,274,243,261],
[269,263,253,240,248,259,0,275,258,265,254,246,249,248,259],
[246,235,244,233,244,231,226,0,226,241,242,237,237,249,256],
[254,253,273,254,260,251,243,275,0,245,251,244,268,265,268],
[254,261,251,242,256,248,236,260,256,0,261,268,265,254,263],
[250,265,256,252,250,247,247,259,250,240,0,242,256,243,267],
[253,256,261,245,256,249,255,264,257,233,259,0,258,258,269],
[239,246,260,243,251,227,252,264,233,236,245,243,0,255,256],
[250,252,257,239,263,258,253,252,236,247,258,243,246,0,257],
[244,236,242,239,245,240,242,245,233,238,234,232,245,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 71, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,239,243,288,260,254,263,274,251,255,257,247,254,273],
[248,0,263,234,269,249,250,265,258,250,250,255,236,234,258],
[262,238,0,242,268,260,250,258,264,242,254,259,258,239,271],
[258,267,259,0,287,267,254,253,269,251,244,271,249,255,268],
[213,232,233,214,0,240,234,234,235,232,222,240,219,225,239],
[241,252,241,234,261,0,236,252,263,252,243,247,248,246,250],
[247,251,251,247,267,265,0,255,266,262,240,283,253,256,276],
[238,236,243,248,267,249,246,0,260,242,237,256,242,242,269],
[227,243,237,232,266,238,235,241,0,236,251,236,251,241,262],
[250,251,259,250,269,249,239,259,265,0,253,254,251,243,260],
[246,251,247,257,279,258,261,264,250,248,0,260,248,245,265],
[244,246,242,230,261,254,218,245,265,247,241,0,219,239,261],
[254,265,243,252,282,253,248,259,250,250,253,282,0,242,260],
[247,267,262,246,276,255,245,259,260,258,256,262,259,0,271],
[228,243,230,233,262,251,225,232,239,241,236,240,241,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 72, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,176,300,145,225,173,126,240,195,246,231,118,220,105],
[296,0,276,347,236,203,197,161,255,243,255,292,155,286,208],
[325,225,0,273,153,221,202,175,225,221,297,296,118,255,127],
[201,154,228,0,168,209,82,145,208,142,305,194,166,203,111],
[356,265,348,333,0,293,204,332,298,219,338,314,253,302,197],
[276,298,280,292,208,0,267,258,338,281,248,272,215,237,202],
[328,304,299,419,297,234,0,307,222,243,394,212,295,376,294],
[375,340,326,356,169,243,194,0,314,272,325,351,244,286,142],
[261,246,276,293,203,163,279,187,0,269,301,294,181,320,177],
[306,258,280,359,282,220,258,229,232,0,323,286,228,239,218],
[255,246,204,196,163,253,107,176,200,178,0,255,98,281,113],
[270,209,205,307,187,229,289,150,207,215,246,0,169,286,136],
[383,346,383,335,248,286,206,257,320,273,403,332,0,322,227],
[281,215,246,298,199,264,125,215,181,262,220,215,179,0,176],
[396,293,374,390,304,299,207,359,324,283,388,365,274,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 73, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,265,248,264,230,214,256,251,265,248,241,270,273,262],
[245,0,277,254,250,237,219,256,263,255,240,247,223,260,261],
[236,224,0,214,201,195,211,228,180,217,185,222,226,224,205],
[253,247,287,0,264,236,241,245,255,245,227,236,224,234,255],
[237,251,300,237,0,218,228,243,238,238,219,260,223,254,238],
[271,264,306,265,283,0,244,259,269,286,245,290,268,281,244],
[287,282,290,260,273,257,0,237,226,269,242,277,265,254,268],
[245,245,273,256,258,242,264,0,262,255,228,284,249,230,285],
[250,238,321,246,263,232,275,239,0,236,239,262,239,262,257],
[236,246,284,256,263,215,232,246,265,0,252,253,235,245,275],
[253,261,316,274,282,256,259,273,262,249,0,264,227,255,284],
[260,254,279,265,241,211,224,217,239,248,237,0,222,243,261],
[231,278,275,277,278,233,236,252,262,266,274,279,0,227,281],
[228,241,277,267,247,220,247,271,239,256,246,258,274,0,238],
[239,240,296,246,263,257,233,216,244,226,217,240,220,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 74, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,263,246,285,255,294,240,246,258,236,250,288,272,249],
[212,0,242,257,246,217,251,251,257,235,258,235,227,236,255],
[238,259,0,250,289,266,260,245,222,266,246,245,264,236,271],
[255,244,251,0,254,237,258,226,272,246,259,235,254,259,251],
[216,255,212,247,0,235,252,237,250,269,247,231,238,265,270],
[246,284,235,264,266,0,270,238,272,257,247,236,251,261,269],
[207,250,241,243,249,231,0,232,264,252,243,237,262,237,256],
[261,250,256,275,264,263,269,0,278,266,264,260,273,258,285],
[255,244,279,229,251,229,237,223,0,257,242,230,225,276,277],
[243,266,235,255,232,244,249,235,244,0,242,238,224,236,245],
[265,243,255,242,254,254,258,237,259,259,0,232,251,248,262],
[251,266,256,266,270,265,264,241,271,263,269,0,245,261,269],
[213,274,237,247,263,250,239,228,276,277,250,256,0,260,250],
[229,265,265,242,236,240,264,243,225,265,253,240,241,0,264],
[252,246,230,250,231,232,245,216,224,256,239,232,251,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 75, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,263,260,254,239,228,289,271,305,267,291,263,300,283],
[196,0,257,263,242,247,205,241,210,239,261,272,256,297,281],
[238,244,0,273,252,232,259,260,272,235,250,272,274,291,264],
[241,238,228,0,248,284,223,276,237,223,232,274,265,236,237],
[247,259,249,253,0,203,178,251,289,250,209,266,226,277,226],
[262,254,269,217,298,0,216,252,270,268,261,270,248,277,269],
[273,296,242,278,323,285,0,311,293,276,281,306,281,343,299],
[212,260,241,225,250,249,190,0,241,245,282,291,236,282,249],
[230,291,229,264,212,231,208,260,0,242,287,283,195,257,230],
[196,262,266,278,251,233,225,256,259,0,237,282,248,265,262],
[234,240,251,269,292,240,220,219,214,264,0,250,237,260,282],
[210,229,229,227,235,231,195,210,218,219,251,0,258,247,244],
[238,245,227,236,275,253,220,265,306,253,264,243,0,297,278],
[201,204,210,265,224,224,158,219,244,236,241,254,204,0,177],
[218,220,237,264,275,232,202,252,271,239,219,257,223,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 76, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,257,235,186,155,186,215,244,282,197,286,243,255,267],
[229,0,265,220,254,227,290,179,361,267,283,370,371,291,301],
[244,236,0,224,136,95,249,230,215,270,234,232,239,172,278],
[266,281,277,0,229,249,293,246,323,348,283,357,291,281,280],
[315,247,365,272,0,256,302,269,384,330,338,386,375,314,298],
[346,274,406,252,245,0,289,286,369,292,394,330,350,321,343],
[315,211,252,208,199,212,0,300,364,346,223,280,297,287,330],
[286,322,271,255,232,215,201,0,355,240,296,364,345,268,258],
[257,140,286,178,117,132,137,146,0,283,190,375,198,225,153],
[219,234,231,153,171,209,155,261,218,0,228,261,272,251,219],
[304,218,267,218,163,107,278,205,311,273,0,302,260,234,275],
[215,131,269,144,115,171,221,137,126,240,199,0,171,142,198],
[258,130,262,210,126,151,204,156,303,229,241,330,0,173,242],
[246,210,329,220,187,180,214,233,276,250,267,359,328,0,232],
[234,200,223,221,203,158,171,243,348,282,226,303,259,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 77, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,256,287,258,265,256,246,266,238,261,285,264,265,260],
[247,0,266,276,242,289,265,231,254,253,266,278,255,286,261],
[245,235,0,247,239,260,213,230,239,234,228,243,263,258,251],
[214,225,254,0,223,239,218,217,249,221,223,245,237,252,215],
[243,259,262,278,0,273,228,251,249,247,250,275,264,267,263],
[236,212,241,262,228,0,233,223,248,235,244,237,252,249,230],
[245,236,288,283,273,268,0,249,279,265,260,268,281,282,261],
[255,270,271,284,250,278,252,0,247,256,255,289,288,254,272],
[235,247,262,252,252,253,222,254,0,234,251,258,287,245,259],
[263,248,267,280,254,266,236,245,267,0,257,270,252,261,267],
[240,235,273,278,251,257,241,246,250,244,0,273,256,241,252],
[216,223,258,256,226,264,233,212,243,231,228,0,232,250,224],
[237,246,238,264,237,249,220,213,214,249,245,269,0,242,221],
[236,215,243,249,234,252,219,247,256,240,260,251,259,0,262],
[241,240,250,286,238,271,240,229,242,234,249,277,280,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 78, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,257,237,251,234,253,241,246,238,234,240,222,236,247],
[247,0,255,243,240,247,231,229,226,238,238,248,241,252,239],
[244,246,0,246,240,236,236,238,227,259,232,254,245,238,259],
[264,258,255,0,271,230,241,253,248,247,241,249,254,263,256],
[250,261,261,230,0,247,247,254,241,250,247,252,250,249,259],
[267,254,265,271,254,0,247,240,245,251,254,257,256,266,250],
[248,270,265,260,254,254,0,235,248,254,248,257,260,262,273],
[260,272,263,248,247,261,266,0,250,256,248,253,266,261,260],
[255,275,274,253,260,256,253,251,0,259,266,267,240,256,238],
[263,263,242,254,251,250,247,245,242,0,258,242,262,267,241],
[267,263,269,260,254,247,253,253,235,243,0,248,258,259,258],
[261,253,247,252,249,244,244,248,234,259,253,0,262,265,254],
[279,260,256,247,251,245,241,235,261,239,243,239,0,253,256],
[265,249,263,238,252,235,239,240,245,234,242,236,248,0,245],
[254,262,242,245,242,251,228,241,263,260,243,247,245,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 79, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,244,242,256,243,251,249,247,269,249,253,245,277,273],
[252,0,252,263,251,249,246,246,267,271,238,261,240,257,264],
[257,249,0,258,245,259,243,235,242,267,234,259,254,279,254],
[259,238,243,0,254,256,246,239,267,266,246,257,247,262,269],
[245,250,256,247,0,253,243,246,248,278,254,274,240,273,257],
[258,252,242,245,248,0,264,252,244,276,244,267,250,255,271],
[250,255,258,255,258,237,0,250,247,267,254,261,257,262,270],
[252,255,266,262,255,249,251,0,257,275,261,255,253,276,288],
[254,234,259,234,253,257,254,244,0,291,239,265,246,279,278],
[232,230,234,235,223,225,234,226,210,0,223,243,237,242,247],
[252,263,267,255,247,257,247,240,262,278,0,260,250,266,263],
[248,240,242,244,227,234,240,246,236,258,241,0,230,269,259],
[256,261,247,254,261,251,244,248,255,264,251,271,0,267,265],
[224,244,222,239,228,246,239,225,222,259,235,232,234,0,245],
[228,237,247,232,244,230,231,213,223,254,238,242,236,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 80, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,227,212,237,227,284,239,233,213,254,253,255,226,189],
[264,0,291,248,275,274,348,308,267,262,289,266,291,281,230],
[274,210,0,188,233,234,269,259,213,206,233,221,234,258,182],
[289,253,313,0,258,246,318,299,248,287,313,290,272,306,260],
[264,226,268,243,0,252,285,288,213,239,297,248,237,256,194],
[274,227,267,255,249,0,326,298,246,256,266,256,271,292,192],
[217,153,232,183,216,175,0,204,174,158,214,244,196,219,167],
[262,193,242,202,213,203,297,0,205,210,291,241,220,250,204],
[268,234,288,253,288,255,327,296,0,262,296,296,257,309,238],
[288,239,295,214,262,245,343,291,239,0,279,271,275,287,255],
[247,212,268,188,204,235,287,210,205,222,0,207,218,224,192],
[248,235,280,211,253,245,257,260,205,230,294,0,247,251,243],
[246,210,267,229,264,230,305,281,244,226,283,254,0,264,237],
[275,220,243,195,245,209,282,251,192,214,277,250,237,0,214],
[312,271,319,241,307,309,334,297,263,246,309,258,264,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 81, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,220,220,205,131,241,182,150,203,176,197,196,196,227],
[263,0,238,234,210,162,253,189,209,257,178,249,261,193,242],
[281,263,0,185,251,209,227,270,232,192,213,253,250,230,250],
[281,267,316,0,255,210,299,289,239,241,290,248,277,242,307],
[296,291,250,246,0,213,246,265,259,212,260,242,249,272,281],
[370,339,292,291,288,0,223,302,264,300,311,329,326,234,332],
[260,248,274,202,255,278,0,248,183,270,252,256,230,189,273],
[319,312,231,212,236,199,253,0,191,184,199,276,263,217,266],
[351,292,269,262,242,237,318,310,0,268,222,302,299,269,321],
[298,244,309,260,289,201,231,317,233,0,251,308,256,259,324],
[325,323,288,211,241,190,249,302,279,250,0,292,251,214,318],
[304,252,248,253,259,172,245,225,199,193,209,0,229,194,259],
[305,240,251,224,252,175,271,238,202,245,250,272,0,213,293],
[305,308,271,259,229,267,312,284,232,242,287,307,288,0,311],
[274,259,251,194,220,169,228,235,180,177,183,242,208,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 82, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,221,245,250,266,223,230,243,233,239,227,259,231,234,229],
[280,0,251,250,271,233,270,245,258,270,236,255,224,263,263],
[256,250,0,245,266,253,229,245,249,236,234,254,223,260,241],
[251,251,256,0,276,239,251,253,271,279,257,260,255,276,240],
[235,230,235,225,0,218,247,242,254,255,203,238,235,224,240],
[278,268,248,262,283,0,255,255,281,266,261,274,243,257,252],
[271,231,272,250,254,246,0,269,265,252,244,239,243,242,243],
[258,256,256,248,259,246,232,0,261,256,228,259,230,238,230],
[268,243,252,230,247,220,236,240,0,255,227,253,243,251,246],
[262,231,265,222,246,235,249,245,246,0,242,254,233,239,238],
[274,265,267,244,298,240,257,273,274,259,0,267,252,268,255],
[242,246,247,241,263,227,262,242,248,247,234,0,235,244,260],
[270,277,278,246,266,258,258,271,258,268,249,266,0,249,254],
[267,238,241,225,277,244,259,263,250,262,233,257,252,0,250],
[272,238,260,261,261,249,258,271,255,263,246,241,247,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 83, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,200,244,233,239,193,213,217,276,239,223,244,268,218],
[289,0,275,279,287,268,273,248,280,317,261,248,271,262,302],
[301,226,0,256,286,243,257,250,271,315,257,245,235,259,260],
[257,222,245,0,283,268,230,231,249,300,239,221,261,235,258],
[268,214,215,218,0,262,201,202,192,242,236,202,238,233,193],
[262,233,258,233,239,0,231,252,239,287,234,226,243,286,241],
[308,228,244,271,300,270,0,271,269,288,254,259,279,263,254],
[288,253,251,270,299,249,230,0,230,285,265,234,258,266,264],
[284,221,230,252,309,262,232,271,0,291,217,255,279,279,235],
[225,184,186,201,259,214,213,216,210,0,218,175,218,244,192],
[262,240,244,262,265,267,247,236,284,283,0,235,269,280,262],
[278,253,256,280,299,275,242,267,246,326,266,0,292,280,271],
[257,230,266,240,263,258,222,243,222,283,232,209,0,248,279],
[233,239,242,266,268,215,238,235,222,257,221,221,253,0,242],
[283,199,241,243,308,260,247,237,266,309,239,230,222,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 84, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,250,233,237,276,227,249,278,275,247,227,254,268,236],
[253,0,257,211,251,251,246,253,258,267,267,245,248,267,216],
[251,244,0,217,231,236,223,239,252,285,215,200,264,258,220],
[268,290,284,0,253,261,242,253,272,290,263,248,267,264,243],
[264,250,270,248,0,267,237,236,263,269,272,246,265,257,230],
[225,250,265,240,234,0,230,237,237,266,240,227,261,254,209],
[274,255,278,259,264,271,0,267,255,277,252,247,280,280,251],
[252,248,262,248,265,264,234,0,275,285,244,242,270,269,243],
[223,243,249,229,238,264,246,226,0,262,247,216,240,265,223],
[226,234,216,211,232,235,224,216,239,0,231,220,239,236,204],
[254,234,286,238,229,261,249,257,254,270,0,234,268,240,238],
[274,256,301,253,255,274,254,259,285,281,267,0,278,269,239],
[247,253,237,234,236,240,221,231,261,262,233,223,0,233,213],
[233,234,243,237,244,247,221,232,236,265,261,232,268,0,195],
[265,285,281,258,271,292,250,258,278,297,263,262,288,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 85, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,246,258,254,252,249,255,244,262,248,248,244,252,256],
[250,0,261,250,255,258,237,245,245,265,245,228,252,253,253],
[255,240,0,249,274,262,234,236,244,265,253,254,244,260,260],
[243,251,252,0,240,263,229,247,236,263,237,235,260,241,234],
[247,246,227,261,0,233,229,238,236,254,237,225,229,246,244],
[249,243,239,238,268,0,237,252,242,268,236,220,233,251,259],
[252,264,267,272,272,264,0,250,257,277,270,260,274,272,257],
[246,256,265,254,263,249,251,0,230,271,253,234,253,250,272],
[257,256,257,265,265,259,244,271,0,285,264,245,270,275,262],
[239,236,236,238,247,233,224,230,216,0,239,225,234,229,224],
[253,256,248,264,264,265,231,248,237,262,0,228,243,267,248],
[253,273,247,266,276,281,241,267,256,276,273,0,269,273,262],
[257,249,257,241,272,268,227,248,231,267,258,232,0,262,255],
[249,248,241,260,255,250,229,251,226,272,234,228,239,0,247],
[245,248,241,267,257,242,244,229,239,277,253,239,246,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 86, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,255,285,287,245,227,233,281,230,260,219,242,241,279],
[234,0,251,271,273,270,211,243,235,241,238,243,231,240,253],
[246,250,0,260,259,260,231,266,269,175,236,232,254,251,254],
[216,230,241,0,198,251,173,253,236,212,210,242,224,202,239],
[214,228,242,303,0,279,220,269,198,234,260,281,244,276,242],
[256,231,241,250,222,0,198,207,255,205,234,201,229,226,244],
[274,290,270,328,281,303,0,285,306,269,301,244,247,277,298],
[268,258,235,248,232,294,216,0,242,228,233,238,269,204,264],
[220,266,232,265,303,246,195,259,0,217,286,247,269,280,241],
[271,260,326,289,267,296,232,273,284,0,261,243,242,248,300],
[241,263,265,291,241,267,200,268,215,240,0,248,239,202,255],
[282,258,269,259,220,300,257,263,254,258,253,0,299,249,286],
[259,270,247,277,257,272,254,232,232,259,262,202,0,225,282],
[260,261,250,299,225,275,224,297,221,253,299,252,276,0,275],
[222,248,247,262,259,257,203,237,260,201,246,215,219,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 87, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,285,259,286,252,268,258,270,263,235,273,291,267,254],
[242,0,274,261,272,263,281,243,230,269,270,252,277,276,255],
[216,227,0,245,255,230,256,260,231,262,236,251,264,238,228],
[242,240,256,0,268,266,262,248,242,270,246,257,275,248,232],
[215,229,246,233,0,222,250,222,241,237,233,245,266,249,231],
[249,238,271,235,279,0,266,243,243,252,235,259,264,257,240],
[233,220,245,239,251,235,0,236,249,242,220,252,273,267,236],
[243,258,241,253,279,258,265,0,261,271,248,248,289,257,258],
[231,271,270,259,260,258,252,240,0,254,252,250,275,247,248],
[238,232,239,231,264,249,259,230,247,0,258,254,278,269,225],
[266,231,265,255,268,266,281,253,249,243,0,250,288,242,235],
[228,249,250,244,256,242,249,253,251,247,251,0,263,272,231],
[210,224,237,226,235,237,228,212,226,223,213,238,0,215,222],
[234,225,263,253,252,244,234,244,254,232,259,229,286,0,235],
[247,246,273,269,270,261,265,243,253,276,266,270,279,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 88, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,255,247,262,229,234,239,247,227,226,221,253,258,258],
[260,0,257,239,236,231,259,272,244,214,254,212,245,278,255],
[246,244,0,287,249,275,241,252,256,224,262,242,252,267,252],
[254,262,214,0,235,239,217,222,205,233,230,211,224,231,247],
[239,265,252,266,0,240,229,243,221,242,236,213,245,237,256],
[272,270,226,262,261,0,243,231,212,246,223,201,239,250,248],
[267,242,260,284,272,258,0,255,243,255,263,239,237,283,273],
[262,229,249,279,258,270,246,0,227,225,247,238,246,262,251],
[254,257,245,296,280,289,258,274,0,238,252,229,244,270,265],
[274,287,277,268,259,255,246,276,263,0,266,259,288,283,275],
[275,247,239,271,265,278,238,254,249,235,0,247,246,262,261],
[280,289,259,290,288,300,262,263,272,242,254,0,285,296,301],
[248,256,249,277,256,262,264,255,257,213,255,216,0,241,258],
[243,223,234,270,264,251,218,239,231,218,239,205,260,0,261],
[243,246,249,254,245,253,228,250,236,226,240,200,243,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 89, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,246,274,260,247,272,255,273,248,267,240,261,255,279],
[276,0,263,279,245,275,260,243,262,268,278,258,273,260,280],
[255,238,0,249,226,256,244,257,234,241,252,232,267,238,241],
[227,222,252,0,254,259,253,248,228,268,226,235,244,263,284],
[241,256,275,247,0,257,266,260,267,262,252,274,259,245,286],
[254,226,245,242,244,0,236,225,261,244,241,234,241,239,258],
[229,241,257,248,235,265,0,253,238,235,279,233,258,252,256],
[246,258,244,253,241,276,248,0,236,261,259,238,263,266,275],
[228,239,267,273,234,240,263,265,0,247,253,255,253,245,261],
[253,233,260,233,239,257,266,240,254,0,228,248,262,242,260],
[234,223,249,275,249,260,222,242,248,273,0,256,227,241,290],
[261,243,269,266,227,267,268,263,246,253,245,0,259,259,270],
[240,228,234,257,242,260,243,238,248,239,274,242,0,244,256],
[246,241,263,238,256,262,249,235,256,259,260,242,257,0,256],
[222,221,260,217,215,243,245,226,240,241,211,231,245,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 90, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,259,257,253,261,267,262,251,240,252,253,237,252,252],
[255,0,266,253,260,268,261,245,247,235,251,258,249,262,259],
[242,235,0,248,249,248,242,231,248,237,242,242,245,248,251],
[244,248,253,0,253,251,266,238,244,240,229,250,227,250,257],
[248,241,252,248,0,251,266,242,252,234,256,255,247,254,255],
[240,233,253,250,250,0,259,218,232,223,253,252,235,245,242],
[234,240,259,235,235,242,0,228,222,237,238,249,239,247,261],
[239,256,270,263,259,283,273,0,252,254,266,261,254,264,250],
[250,254,253,257,249,269,279,249,0,257,261,264,257,249,260],
[261,266,264,261,267,278,264,247,244,0,257,269,270,260,263],
[249,250,259,272,245,248,263,235,240,244,0,250,269,264,270],
[248,243,259,251,246,249,252,240,237,232,251,0,252,250,259],
[264,252,256,274,254,266,262,247,244,231,232,249,0,244,255],
[249,239,253,251,247,256,254,237,252,241,237,251,257,0,252],
[249,242,250,244,246,259,240,251,241,238,231,242,246,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 91, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,279,275,215,254,264,266,273,233,284,267,204,211,243],
[259,0,294,265,256,272,304,262,352,244,245,250,286,213,287],
[222,207,0,233,208,259,246,259,265,197,248,188,193,246,280],
[226,236,268,0,217,243,233,220,253,214,254,202,212,228,238],
[286,245,293,284,0,282,240,240,314,285,287,223,262,263,227],
[247,229,242,258,219,0,251,240,318,207,240,232,212,229,237],
[237,197,255,268,261,250,0,227,298,280,262,260,196,228,229],
[235,239,242,281,261,261,274,0,311,250,312,291,232,213,254],
[228,149,236,248,187,183,203,190,0,241,234,176,168,163,153],
[268,257,304,287,216,294,221,251,260,0,300,257,257,210,246],
[217,256,253,247,214,261,239,189,267,201,0,265,169,190,231],
[234,251,313,299,278,269,241,210,325,244,236,0,239,227,258],
[297,215,308,289,239,289,305,269,333,244,332,262,0,260,269],
[290,288,255,273,238,272,273,288,338,291,311,274,241,0,273],
[258,214,221,263,274,264,272,247,348,255,270,243,232,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 92, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,260,275,269,252,237,263,278,255,262,255,246,263,263],
[243,0,240,267,277,238,231,240,250,264,252,246,232,247,245],
[241,261,0,275,276,248,232,243,263,247,252,240,242,262,245],
[226,234,226,0,257,231,220,214,261,236,219,238,217,230,240],
[232,224,225,244,0,228,225,240,256,251,226,239,208,249,241],
[249,263,253,270,273,0,244,247,255,243,232,258,249,265,245],
[264,270,269,281,276,257,0,250,295,263,245,251,237,261,248],
[238,261,258,287,261,254,251,0,283,247,259,250,264,266,258],
[223,251,238,240,245,246,206,218,0,239,237,224,221,239,242],
[246,237,254,265,250,258,238,254,262,0,252,253,240,260,250],
[239,249,249,282,275,269,256,242,264,249,0,266,244,266,263],
[246,255,261,263,262,243,250,251,277,248,235,0,246,262,259],
[255,269,259,284,293,252,264,237,280,261,257,255,0,264,252],
[238,254,239,271,252,236,240,235,262,241,235,239,237,0,254],
[238,256,256,261,260,256,253,243,259,251,238,242,249,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 93, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,91,417,124,151,216,92,360,154,301,302,125,242,151],
[404,0,298,390,390,358,301,327,390,357,298,327,224,357,360],
[410,203,0,373,288,203,321,353,333,281,267,343,321,320,251],
[84,111,128,0,37,64,129,176,129,114,220,247,176,220,74],
[377,111,213,464,0,189,177,139,306,136,325,401,176,242,107],
[350,143,298,437,312,0,268,283,303,312,298,374,261,404,282],
[285,200,180,372,324,233,0,198,363,163,325,316,233,319,166],
[409,174,148,325,362,218,303,0,362,240,358,387,266,272,181],
[141,111,168,372,195,198,138,139,0,168,325,257,139,260,198],
[347,144,220,387,365,189,338,261,333,0,328,354,236,279,151],
[200,203,234,281,176,203,176,143,176,173,0,133,143,143,166],
[199,174,158,254,100,127,185,114,244,147,368,0,239,126,137],
[376,277,180,325,325,240,268,235,362,265,358,262,0,265,295],
[259,144,181,281,259,97,182,229,241,222,358,375,236,0,107],
[350,141,250,427,394,219,335,320,303,350,335,364,206,394,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 94, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,269,243,238,281,227,212,249,231,266,262,264,297,224],
[208,0,188,210,224,221,211,205,214,179,204,226,236,215,208],
[232,313,0,235,245,228,221,209,254,215,211,252,264,267,259],
[258,291,266,0,255,256,258,261,209,265,234,238,284,311,244],
[263,277,256,246,0,264,249,242,225,235,227,288,280,279,238],
[220,280,273,245,237,0,231,225,251,226,199,260,272,238,241],
[274,290,280,243,252,270,0,238,214,218,222,268,291,275,249],
[289,296,292,240,259,276,263,0,250,222,273,293,283,261,246],
[252,287,247,292,276,250,287,251,0,220,260,278,270,281,243],
[270,322,286,236,266,275,283,279,281,0,265,278,283,275,235],
[235,297,290,267,274,302,279,228,241,236,0,289,270,305,223],
[239,275,249,263,213,241,233,208,223,223,212,0,256,241,217],
[237,265,237,217,221,229,210,218,231,218,231,245,0,238,244],
[204,286,234,190,222,263,226,240,220,226,196,260,263,0,193],
[277,293,242,257,263,260,252,255,258,266,278,284,257,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 95, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,268,283,292,284,308,309,292,278,281,300,261,230,247],
[182,0,225,242,262,239,260,227,265,255,232,253,263,217,212],
[233,276,0,257,283,256,262,259,272,269,247,285,261,212,233],
[218,259,244,0,277,260,273,301,249,280,255,269,241,247,212],
[209,239,218,224,0,238,242,265,249,257,238,244,231,214,211],
[217,262,245,241,263,0,249,263,258,263,279,269,234,232,219],
[193,241,239,228,259,252,0,261,228,260,238,279,248,202,232],
[192,274,242,200,236,238,240,0,239,264,227,267,227,208,222],
[209,236,229,252,252,243,273,262,0,235,215,259,237,215,242],
[223,246,232,221,244,238,241,237,266,0,221,260,222,222,222],
[220,269,254,246,263,222,263,274,286,280,0,276,260,242,254],
[201,248,216,232,257,232,222,234,242,241,225,0,209,193,198],
[240,238,240,260,270,267,253,274,264,279,241,292,0,229,239],
[271,284,289,254,287,269,299,293,286,279,259,308,272,0,246],
[254,289,268,289,290,282,269,279,259,279,247,303,262,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 96, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,244,232,199,195,224,192,249,270,232,229,263,243,216],
[311,0,277,277,265,272,269,252,287,310,235,288,310,298,272],
[257,224,0,231,241,248,251,204,244,244,206,217,258,240,223],
[269,224,270,0,243,232,261,226,233,224,224,269,263,258,249],
[302,236,260,258,0,226,262,245,259,268,247,252,278,278,256],
[306,229,253,269,275,0,272,253,287,277,257,279,307,287,259],
[277,232,250,240,239,229,0,205,250,251,223,257,270,255,232],
[309,249,297,275,256,248,296,0,284,275,244,282,287,278,280],
[252,214,257,268,242,214,251,217,0,240,207,216,252,240,206],
[231,191,257,277,233,224,250,226,261,0,231,234,267,248,230],
[269,266,295,277,254,244,278,257,294,270,0,291,299,263,262],
[272,213,284,232,249,222,244,219,285,267,210,0,255,248,239],
[238,191,243,238,223,194,231,214,249,234,202,246,0,253,212],
[258,203,261,243,223,214,246,223,261,253,238,253,248,0,252],
[285,229,278,252,245,242,269,221,295,271,239,262,289,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 97, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,257,259,256,260,263,272,254,249,265,271,247,258,252],
[255,0,246,246,271,250,272,248,246,264,266,265,240,246,260],
[244,255,0,239,258,256,273,246,238,252,267,248,241,241,258],
[242,255,262,0,276,259,277,261,249,268,276,268,261,242,257],
[245,230,243,225,0,265,256,242,240,239,254,259,230,240,233],
[241,251,245,242,236,0,282,253,240,242,265,252,244,235,244],
[238,229,228,224,245,219,0,222,219,237,254,227,217,216,235],
[229,253,255,240,259,248,279,0,252,242,256,235,243,245,257],
[247,255,263,252,261,261,282,249,0,269,276,260,246,253,261],
[252,237,249,233,262,259,264,259,232,0,257,240,236,237,247],
[236,235,234,225,247,236,247,245,225,244,0,245,237,227,252],
[230,236,253,233,242,249,274,266,241,261,256,0,231,252,242],
[254,261,260,240,271,257,284,258,255,265,264,270,0,251,267],
[243,255,260,259,261,266,285,256,248,264,274,249,250,0,266],
[249,241,243,244,268,257,266,244,240,254,249,259,234,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 98, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,255,244,252,256,267,241,250,227,264,237,230,253,239],
[254,0,245,244,241,243,271,228,246,244,256,247,248,250,233],
[246,256,0,238,242,238,254,231,251,257,248,235,244,252,251],
[257,257,263,0,272,275,266,260,243,256,269,267,249,267,251],
[249,260,259,229,0,259,247,248,239,244,265,246,239,255,255],
[245,258,263,226,242,0,255,223,230,238,255,250,235,248,245],
[234,230,247,235,254,246,0,230,245,244,248,243,254,259,242],
[260,273,270,241,253,278,271,0,243,263,273,248,244,268,261],
[251,255,250,258,262,271,256,258,0,254,269,245,238,249,255],
[274,257,244,245,257,263,257,238,247,0,271,263,239,265,264],
[237,245,253,232,236,246,253,228,232,230,0,227,259,243,243],
[264,254,266,234,255,251,258,253,256,238,274,0,254,257,247],
[271,253,257,252,262,266,247,257,263,262,242,247,0,262,259],
[248,251,249,234,246,253,242,233,252,236,258,244,239,0,248],
[262,268,250,250,246,256,259,240,246,237,258,254,242,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 99, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,267,246,255,251,267,246,253,253,247,256,276,271,229],
[208,0,231,214,225,242,249,242,219,228,248,225,256,263,232],
[234,270,0,234,223,234,251,233,234,224,229,228,274,249,212],
[255,287,267,0,257,256,282,246,253,243,273,256,280,286,251],
[246,276,278,244,0,271,255,252,251,266,252,232,271,277,239],
[250,259,267,245,230,0,263,241,251,251,235,227,261,281,229],
[234,252,250,219,246,238,0,242,221,215,236,229,268,250,201],
[255,259,268,255,249,260,259,0,238,265,240,231,271,280,228],
[248,282,267,248,250,250,280,263,0,267,262,226,276,273,225],
[248,273,277,258,235,250,286,236,234,0,258,242,271,281,233],
[254,253,272,228,249,266,265,261,239,243,0,241,260,264,251],
[245,276,273,245,269,274,272,270,275,259,260,0,282,277,239],
[225,245,227,221,230,240,233,230,225,230,241,219,0,267,215],
[230,238,252,215,224,220,251,221,228,220,237,224,234,0,208],
[272,269,289,250,262,272,300,273,276,268,250,262,286,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 100, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,240,238,248,224,230,272,233,246,259,242,211,244,275],
[248,0,255,242,241,237,244,262,227,277,228,247,231,233,254],
[261,246,0,245,253,259,272,299,253,256,242,259,226,239,285],
[263,259,256,0,264,263,266,305,236,278,267,249,237,260,265],
[253,260,248,237,0,256,244,282,226,246,245,251,212,225,280],
[277,264,242,238,245,0,282,263,247,262,261,232,238,235,268],
[271,257,229,235,257,219,0,261,223,255,239,239,218,228,257],
[229,239,202,196,219,238,240,0,213,228,238,212,188,219,220],
[268,274,248,265,275,254,278,288,0,267,261,259,224,260,265],
[255,224,245,223,255,239,246,273,234,0,243,230,199,241,244],
[242,273,259,234,256,240,262,263,240,258,0,225,210,243,292],
[259,254,242,252,250,269,262,289,242,271,276,0,251,260,268],
[290,270,275,264,289,263,283,313,277,302,291,250,0,284,288],
[257,268,262,241,276,266,273,282,241,260,258,241,217,0,261],
[226,247,216,236,221,233,244,281,236,257,209,233,213,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 101, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,259,258,257,244,264,243,259,248,253,268,260,272,271],
[225,0,236,240,234,213,224,224,236,225,228,237,218,228,246],
[242,265,0,260,253,231,239,238,252,250,245,250,243,273,259],
[243,261,241,0,242,245,246,242,260,240,244,255,245,265,261],
[244,267,248,259,0,238,247,245,250,250,254,252,248,262,268],
[257,288,270,256,263,0,247,263,276,249,250,267,248,270,262],
[237,277,262,255,254,254,0,241,267,257,248,255,278,277,265],
[258,277,263,259,256,238,260,0,271,250,255,254,260,282,273],
[242,265,249,241,251,225,234,230,0,246,236,232,246,256,255],
[253,276,251,261,251,252,244,251,255,0,247,270,244,261,275],
[248,273,256,257,247,251,253,246,265,254,0,252,258,277,282],
[233,264,251,246,249,234,246,247,269,231,249,0,225,272,267],
[241,283,258,256,253,253,223,241,255,257,243,276,0,272,266],
[229,273,228,236,239,231,224,219,245,240,224,229,229,0,255],
[230,255,242,240,233,239,236,228,246,226,219,234,235,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 102, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,228,246,231,257,258,225,212,261,256,239,215,245,237],
[251,0,265,242,261,281,242,243,253,280,257,256,258,263,266],
[273,236,0,262,266,262,256,252,271,268,271,254,241,292,252],
[255,259,239,0,226,266,275,249,252,246,248,249,242,252,252],
[270,240,235,275,0,282,292,252,259,263,276,253,253,238,256],
[244,220,239,235,219,0,249,224,258,229,255,211,229,202,245],
[243,259,245,226,209,252,0,212,242,273,258,228,228,225,249],
[276,258,249,252,249,277,289,0,270,274,305,253,253,255,251],
[289,248,230,249,242,243,259,231,0,255,274,257,228,255,255],
[240,221,233,255,238,272,228,227,246,0,256,238,216,240,236],
[245,244,230,253,225,246,243,196,227,245,0,218,234,228,219],
[262,245,247,252,248,290,273,248,244,263,283,0,248,262,271],
[286,243,260,259,248,272,273,248,273,285,267,253,0,262,265],
[256,238,209,249,263,299,276,246,246,261,273,239,239,0,258],
[264,235,249,249,245,256,252,250,246,265,282,230,236,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 103, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,261,267,243,253,255,253,251,245,257,243,248,243,249],
[268,0,254,254,243,255,266,271,248,278,272,257,250,255,259],
[240,247,0,241,257,245,271,240,264,250,273,259,273,237,247],
[234,247,260,0,226,233,242,231,236,230,252,248,255,227,235],
[258,258,244,275,0,252,245,259,237,268,237,257,249,239,247],
[248,246,256,268,249,0,273,239,231,271,251,259,262,251,269],
[246,235,230,259,256,228,0,231,231,267,251,232,248,227,261],
[248,230,261,270,242,262,270,0,228,260,250,256,273,236,273],
[250,253,237,265,264,270,270,273,0,268,270,268,254,253,257],
[256,223,251,271,233,230,234,241,233,0,258,251,277,246,244],
[244,229,228,249,264,250,250,251,231,243,0,250,249,237,246],
[258,244,242,253,244,242,269,245,233,250,251,0,265,240,255],
[253,251,228,246,252,239,253,228,247,224,252,236,0,234,229],
[258,246,264,274,262,250,274,265,248,255,264,261,267,0,269],
[252,242,254,266,254,232,240,228,244,257,255,246,272,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 104, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,256,263,245,267,261,261,267,261,276,258,267,234,252],
[251,0,247,258,247,245,251,268,245,265,270,243,259,248,247],
[245,254,0,269,241,250,255,237,246,247,267,252,267,233,242],
[238,243,232,0,230,234,235,243,243,253,253,241,245,243,227],
[256,254,260,271,0,255,237,268,253,259,281,247,265,246,238],
[234,256,251,267,246,0,241,266,249,262,269,258,249,248,253],
[240,250,246,266,264,260,0,249,267,263,276,263,254,259,250],
[240,233,264,258,233,235,252,0,252,246,278,244,258,240,242],
[234,256,255,258,248,252,234,249,0,248,260,252,254,242,254],
[240,236,254,248,242,239,238,255,253,0,272,252,256,245,237],
[225,231,234,248,220,232,225,223,241,229,0,241,229,229,240],
[243,258,249,260,254,243,238,257,249,249,260,0,252,244,250],
[234,242,234,256,236,252,247,243,247,245,272,249,0,238,243],
[267,253,268,258,255,253,242,261,259,256,272,257,263,0,251],
[249,254,259,274,263,248,251,259,247,264,261,251,258,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 105, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,253,261,258,272,249,273,272,261,241,246,256,265,281],
[256,0,251,233,247,237,246,249,259,263,239,248,239,232,245],
[248,250,0,260,270,265,247,255,247,256,226,248,239,256,253],
[240,268,241,0,265,272,234,264,260,251,255,239,236,233,254],
[243,254,231,236,0,240,235,268,247,258,236,246,229,246,249],
[229,264,236,229,261,0,233,243,228,243,220,243,245,229,257],
[252,255,254,267,266,268,0,261,286,290,243,251,289,268,242],
[228,252,246,237,233,258,240,0,249,254,213,230,238,245,237],
[229,242,254,241,254,273,215,252,0,279,221,243,242,258,235],
[240,238,245,250,243,258,211,247,222,0,223,223,232,228,242],
[260,262,275,246,265,281,258,288,280,278,0,248,270,272,269],
[255,253,253,262,255,258,250,271,258,278,253,0,246,251,250],
[245,262,262,265,272,256,212,263,259,269,231,255,0,257,255],
[236,269,245,268,255,272,233,256,243,273,229,250,244,0,270],
[220,256,248,247,252,244,259,264,266,259,232,251,246,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 106, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,272,247,268,256,258,248,263,195,243,252,288,263,241],
[246,0,267,219,236,223,275,212,219,220,217,229,242,242,238],
[229,234,0,241,236,260,251,197,244,219,260,242,202,205,209],
[254,282,260,0,266,294,291,214,289,261,253,270,278,258,275],
[233,265,265,235,0,236,236,184,238,222,270,259,287,239,244],
[245,278,241,207,265,0,241,208,249,202,232,259,263,275,226],
[243,226,250,210,265,260,0,205,217,239,230,229,240,228,177],
[253,289,304,287,317,293,296,0,299,248,323,285,294,292,279],
[238,282,257,212,263,252,284,202,0,207,214,275,276,251,241],
[306,281,282,240,279,299,262,253,294,0,268,283,279,268,282],
[258,284,241,248,231,269,271,178,287,233,0,268,278,300,277],
[249,272,259,231,242,242,272,216,226,218,233,0,238,264,220],
[213,259,299,223,214,238,261,207,225,222,223,263,0,261,213],
[238,259,296,243,262,226,273,209,250,233,201,237,240,0,235],
[260,263,292,226,257,275,324,222,260,219,224,281,288,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 107, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,185,290,245,232,291,288,214,257,266,246,287,356,284],
[307,0,259,264,299,261,335,291,241,289,313,271,312,351,244],
[316,242,0,305,262,266,311,325,233,274,285,283,271,306,302],
[211,237,196,0,227,218,215,255,191,199,262,218,247,247,206],
[256,202,239,274,0,232,274,284,232,278,311,253,305,293,268],
[269,240,235,283,269,0,276,295,207,257,274,257,255,294,268],
[210,166,190,286,227,225,0,222,154,238,287,222,281,259,267],
[213,210,176,246,217,206,279,0,201,192,235,238,253,257,194],
[287,260,268,310,269,294,347,300,0,261,294,242,303,338,294],
[244,212,227,302,223,244,263,309,240,0,274,307,295,307,237],
[235,188,216,239,190,227,214,266,207,227,0,239,241,247,222],
[255,230,218,283,248,244,279,263,259,194,262,0,292,226,256],
[214,189,230,254,196,246,220,248,198,206,260,209,0,263,256],
[145,150,195,254,208,207,242,244,163,194,254,275,238,0,242],
[217,257,199,295,233,233,234,307,207,264,279,245,245,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 108, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,269,241,285,238,264,270,254,266,239,247,248,251,269],
[265,0,261,243,278,238,241,280,259,290,247,243,252,267,284],
[232,240,0,217,267,247,238,269,240,241,230,267,243,234,272],
[260,258,284,0,286,237,261,284,269,288,258,265,251,261,295],
[216,223,234,215,0,232,229,234,217,247,236,234,236,241,246],
[263,263,254,264,269,0,256,279,232,272,257,255,264,255,272],
[237,260,263,240,272,245,0,276,243,278,245,259,257,242,260],
[231,221,232,217,267,222,225,0,230,265,236,228,235,226,231],
[247,242,261,232,284,269,258,271,0,270,252,266,264,272,256],
[235,211,260,213,254,229,223,236,231,0,231,238,228,236,231],
[262,254,271,243,265,244,256,265,249,270,0,265,236,258,255],
[254,258,234,236,267,246,242,273,235,263,236,0,233,260,257],
[253,249,258,250,265,237,244,266,237,273,265,268,0,251,281],
[250,234,267,240,260,246,259,275,229,265,243,241,250,0,254],
[232,217,229,206,255,229,241,270,245,270,246,244,220,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 109, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,251,237,239,250,254,249,238,229,268,228,226,242,253],
[261,0,261,263,256,264,279,250,267,259,263,253,260,262,245],
[250,240,0,253,234,255,258,251,232,273,245,221,236,251,234],
[264,238,248,0,254,260,268,257,255,256,265,239,242,243,249],
[262,245,267,247,0,254,273,249,257,271,259,256,259,251,240],
[251,237,246,241,247,0,263,243,239,243,259,237,259,257,262],
[247,222,243,233,228,238,0,232,228,231,241,224,218,229,228],
[252,251,250,244,252,258,269,0,243,251,244,236,242,234,223],
[263,234,269,246,244,262,273,258,0,238,256,221,246,262,252],
[272,242,228,245,230,258,270,250,263,0,257,245,253,250,242],
[233,238,256,236,242,242,260,257,245,244,0,233,244,256,249],
[273,248,280,262,245,264,277,265,280,256,268,0,273,274,272],
[275,241,265,259,242,242,283,259,255,248,257,228,0,252,248],
[259,239,250,258,250,244,272,267,239,251,245,227,249,0,239],
[248,256,267,252,261,239,273,278,249,259,252,229,253,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 110, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,265,235,229,243,250,234,245,233,240,243,231,247,248],
[246,0,261,246,218,233,243,244,221,237,229,237,224,243,275],
[236,240,0,231,223,250,237,230,239,210,233,228,227,226,242],
[266,255,270,0,241,256,249,249,241,235,236,233,244,247,273],
[272,283,278,260,0,257,250,248,253,253,262,272,251,262,266],
[258,268,251,245,244,0,256,227,236,243,248,254,231,246,260],
[251,258,264,252,251,245,0,251,255,231,242,256,245,257,277],
[267,257,271,252,253,274,250,0,249,243,247,246,235,268,264],
[256,280,262,260,248,265,246,252,0,265,251,254,248,260,273],
[268,264,291,266,248,258,270,258,236,0,251,269,248,272,278],
[261,272,268,265,239,253,259,254,250,250,0,263,251,257,278],
[258,264,273,268,229,247,245,255,247,232,238,0,254,258,273],
[270,277,274,257,250,270,256,266,253,253,250,247,0,264,283],
[254,258,275,254,239,255,244,233,241,229,244,243,237,0,275],
[253,226,259,228,235,241,224,237,228,223,223,228,218,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 111, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,259,233,219,258,246,235,246,230,234,240,229,233,243],
[271,0,254,267,249,277,272,250,271,255,241,254,246,242,262],
[242,247,0,247,236,263,255,252,241,246,234,237,256,237,262],
[268,234,254,0,246,261,258,263,266,236,242,243,249,247,272],
[282,252,265,255,0,281,275,252,259,255,247,250,240,255,273],
[243,224,238,240,220,0,230,234,244,219,233,215,237,239,235],
[255,229,246,243,226,271,0,239,246,238,215,227,237,241,240],
[266,251,249,238,249,267,262,0,247,263,221,252,248,246,266],
[255,230,260,235,242,257,255,254,0,248,239,245,231,253,235],
[271,246,255,265,246,282,263,238,253,0,263,244,254,255,268],
[267,260,267,259,254,268,286,280,262,238,0,261,252,255,270],
[261,247,264,258,251,286,274,249,256,257,240,0,243,243,256],
[272,255,245,252,261,264,264,253,270,247,249,258,0,242,270],
[268,259,264,254,246,262,260,255,248,246,246,258,259,0,255],
[258,239,239,229,228,266,261,235,266,233,231,245,231,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 112, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,247,260,263,285,253,276,253,241,242,271,254,281,246],
[238,0,245,248,262,264,237,253,217,229,216,246,234,285,251],
[254,256,0,272,262,286,259,250,238,252,242,282,244,290,266],
[241,253,229,0,266,273,258,257,247,247,220,271,254,269,270],
[238,239,239,235,0,280,245,247,255,229,220,269,244,266,270],
[216,237,215,228,221,0,245,234,222,205,180,256,223,253,232],
[248,264,242,243,256,256,0,254,241,222,220,251,245,269,273],
[225,248,251,244,254,267,247,0,231,232,212,243,225,262,228],
[248,284,263,254,246,279,260,270,0,241,232,272,247,276,252],
[260,272,249,254,272,296,279,269,260,0,245,268,282,283,263],
[259,285,259,281,281,321,281,289,269,256,0,288,227,306,282],
[230,255,219,230,232,245,250,258,229,233,213,0,252,271,236],
[247,267,257,247,257,278,256,276,254,219,274,249,0,281,270],
[220,216,211,232,235,248,232,239,225,218,195,230,220,0,242],
[255,250,235,231,231,269,228,273,249,238,219,265,231,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 113, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,259,233,294,228,256,271,264,238,287,241,268,268,257],
[208,0,217,168,225,218,214,255,235,217,243,157,214,200,194],
[242,284,0,235,239,230,238,287,254,243,260,213,243,201,243],
[268,333,266,0,303,231,246,299,291,268,303,256,307,267,285],
[207,276,262,198,0,225,236,254,245,225,260,213,216,217,209],
[273,283,271,270,276,0,252,300,256,239,268,243,282,217,241],
[245,287,263,255,265,249,0,280,259,258,266,244,273,245,269],
[230,246,214,202,247,201,221,0,217,217,229,205,212,184,223],
[237,266,247,210,256,245,242,284,0,241,247,208,239,234,233],
[263,284,258,233,276,262,243,284,260,0,273,228,249,243,237],
[214,258,241,198,241,233,235,272,254,228,0,212,252,197,206],
[260,344,288,245,288,258,257,296,293,273,289,0,301,266,269],
[233,287,258,194,285,219,228,289,262,252,249,200,0,254,210],
[233,301,300,234,284,284,256,317,267,258,304,235,247,0,261],
[244,307,258,216,292,260,232,278,268,264,295,232,291,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 114, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,228,263,234,237,265,241,264,270,223,247,249,256,244],
[268,0,251,252,247,247,269,242,279,256,255,262,266,252,249],
[273,250,0,265,262,256,273,247,270,266,241,245,259,256,257],
[238,249,236,0,237,242,262,238,263,269,240,238,256,250,250],
[267,254,239,264,0,262,257,230,267,256,239,256,254,269,260],
[264,254,245,259,239,0,262,258,279,252,250,242,269,273,250],
[236,232,228,239,244,239,0,232,251,236,217,243,241,246,244],
[260,259,254,263,271,243,269,0,285,271,250,250,254,277,262],
[237,222,231,238,234,222,250,216,0,250,220,224,234,244,235],
[231,245,235,232,245,249,265,230,251,0,215,232,241,252,245],
[278,246,260,261,262,251,284,251,281,286,0,248,256,279,262],
[254,239,256,263,245,259,258,251,277,269,253,0,268,259,259],
[252,235,242,245,247,232,260,247,267,260,245,233,0,264,256],
[245,249,245,251,232,228,255,224,257,249,222,242,237,0,246],
[257,252,244,251,241,251,257,239,266,256,239,242,245,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 115, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,243,290,244,236,285,223,289,275,283,233,257,214,272],
[219,0,201,256,237,219,263,153,238,273,282,204,264,191,252],
[258,300,0,297,284,269,272,198,287,301,300,264,267,276,297],
[211,245,204,0,277,184,228,188,293,254,239,202,222,189,218],
[257,264,217,224,0,194,208,203,254,263,238,224,241,169,263],
[265,282,232,317,307,0,269,242,299,317,329,256,281,216,254],
[216,238,229,273,293,232,0,196,266,251,279,250,253,193,253],
[278,348,303,313,298,259,305,0,322,337,324,271,298,231,294],
[212,263,214,208,247,202,235,179,0,228,241,219,208,173,213],
[226,228,200,247,238,184,250,164,273,0,218,186,211,176,198],
[218,219,201,262,263,172,222,177,260,283,0,190,178,202,227],
[268,297,237,299,277,245,251,230,282,315,311,0,246,220,275],
[244,237,234,279,260,220,248,203,293,290,323,255,0,218,278],
[287,310,225,312,332,285,308,270,328,325,299,281,283,0,271],
[229,249,204,283,238,247,248,207,288,303,274,226,223,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 116, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,239,246,246,256,253,250,260,258,252,250,248,260,264],
[238,0,219,223,244,242,242,222,230,225,238,239,231,245,238],
[262,282,0,251,263,265,258,246,265,271,261,259,255,270,258],
[255,278,250,0,254,252,242,245,246,254,263,243,258,256,260],
[255,257,238,247,0,248,253,246,244,255,256,246,246,250,245],
[245,259,236,249,253,0,252,240,253,251,250,238,239,244,257],
[248,259,243,259,248,249,0,239,254,259,257,254,250,255,259],
[251,279,255,256,255,261,262,0,261,274,262,247,267,270,260],
[241,271,236,255,257,248,247,240,0,238,252,240,237,255,244],
[243,276,230,247,246,250,242,227,263,0,244,252,232,241,254],
[249,263,240,238,245,251,244,239,249,257,0,238,245,248,258],
[251,262,242,258,255,263,247,254,261,249,263,0,237,252,255],
[253,270,246,243,255,262,251,234,264,269,256,264,0,240,254],
[241,256,231,245,251,257,246,231,246,260,253,249,261,0,249],
[237,263,243,241,256,244,242,241,257,247,243,246,247,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 117, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,249,237,231,220,230,211,269,241,258,225,250,237,260],
[244,0,253,251,245,220,255,224,278,248,262,245,242,244,258],
[252,248,0,250,250,208,255,220,283,254,266,225,256,234,256],
[264,250,251,0,234,233,262,233,256,250,242,231,247,244,252],
[270,256,251,267,0,210,250,236,262,258,264,240,257,237,253],
[281,281,293,268,291,0,259,284,286,303,289,273,250,270,289],
[271,246,246,239,251,242,0,256,276,269,247,229,245,243,242],
[290,277,281,268,265,217,245,0,307,297,280,262,257,251,272],
[232,223,218,245,239,215,225,194,0,239,237,214,239,218,273],
[260,253,247,251,243,198,232,204,262,0,253,217,244,222,267],
[243,239,235,259,237,212,254,221,264,248,0,223,228,221,244],
[276,256,276,270,261,228,272,239,287,284,278,0,254,259,273],
[251,259,245,254,244,251,256,244,262,257,273,247,0,232,248],
[264,257,267,257,264,231,258,250,283,279,280,242,269,0,272],
[241,243,245,249,248,212,259,229,228,234,257,228,253,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 118, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,257,253,275,241,259,246,258,242,245,247,264,247,276],
[253,0,248,247,264,247,260,246,239,249,256,248,246,235,248],
[244,253,0,245,264,238,254,245,232,247,239,228,248,226,242],
[248,254,256,0,246,238,246,253,239,242,239,250,251,224,254],
[226,237,237,255,0,229,249,245,232,245,233,246,242,239,246],
[260,254,263,263,272,0,265,236,259,259,258,254,265,244,271],
[242,241,247,255,252,236,0,246,248,245,244,251,261,243,258],
[255,255,256,248,256,265,255,0,247,253,256,242,253,245,267],
[243,262,269,262,269,242,253,254,0,257,268,247,258,254,280],
[259,252,254,259,256,242,256,248,244,0,244,251,253,237,253],
[256,245,262,262,268,243,257,245,233,257,0,243,276,236,265],
[254,253,273,251,255,247,250,259,254,250,258,0,273,236,255],
[237,255,253,250,259,236,240,248,243,248,225,228,0,240,252],
[254,266,275,277,262,257,258,256,247,264,265,265,261,0,277],
[225,253,259,247,255,230,243,234,221,248,236,246,249,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 119, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,265,256,265,258,262,270,266,279,266,251,235,274,267],
[254,0,271,247,272,241,253,252,273,284,253,257,265,271,281],
[236,230,0,256,261,238,234,251,265,250,253,240,244,258,265],
[245,254,245,0,264,246,247,251,251,265,270,256,244,269,254],
[236,229,240,237,0,244,248,230,249,235,232,226,227,271,231],
[243,260,263,255,257,0,247,256,263,269,252,249,256,277,252],
[239,248,267,254,253,254,0,252,253,270,270,229,239,268,284],
[231,249,250,250,271,245,249,0,247,267,263,257,257,279,262],
[235,228,236,250,252,238,248,254,0,253,260,231,242,269,260],
[222,217,251,236,266,232,231,234,248,0,253,234,224,263,249],
[235,248,248,231,269,249,231,238,241,248,0,229,222,268,232],
[250,244,261,245,275,252,272,244,270,267,272,0,256,279,255],
[266,236,257,257,274,245,262,244,259,277,279,245,0,265,273],
[227,230,243,232,230,224,233,222,232,238,233,222,236,0,251],
[234,220,236,247,270,249,217,239,241,252,269,246,228,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 120, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,263,249,247,259,241,259,250,261,246,254,256,246,249],
[257,0,265,259,253,244,266,249,250,240,250,260,232,239,241],
[238,236,0,236,241,234,249,237,231,242,234,253,250,237,238],
[252,242,265,0,242,245,260,267,247,252,264,263,238,243,260],
[254,248,260,259,0,265,278,264,249,266,244,264,254,251,258],
[242,257,267,256,236,0,264,262,249,263,256,250,236,253,250],
[260,235,252,241,223,237,0,236,247,235,245,240,231,242,238],
[242,252,264,234,237,239,265,0,234,242,234,236,250,251,262],
[251,251,270,254,252,252,254,267,0,238,251,253,249,228,270],
[240,261,259,249,235,238,266,259,263,0,261,252,242,252,267],
[255,251,267,237,257,245,256,267,250,240,0,248,251,237,248],
[247,241,248,238,237,251,261,265,248,249,253,0,244,237,239],
[245,269,251,263,247,265,270,251,252,259,250,257,0,239,257],
[255,262,264,258,250,248,259,250,273,249,264,264,262,0,266],
[252,260,263,241,243,251,263,239,231,234,253,262,244,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 121, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,246,241,213,233,241,274,273,236,262,281,247,247,258],
[250,0,236,236,232,234,248,252,236,247,232,236,230,240,249],
[255,265,0,265,261,244,287,259,259,264,244,273,255,254,282],
[260,265,236,0,224,256,259,272,278,242,259,243,226,237,285],
[288,269,240,277,0,251,278,284,278,247,248,249,259,234,294],
[268,267,257,245,250,0,284,298,270,241,268,265,234,240,282],
[260,253,214,242,223,217,0,260,255,229,245,216,221,247,246],
[227,249,242,229,217,203,241,0,251,226,232,224,234,209,280],
[228,265,242,223,223,231,246,250,0,226,229,236,230,224,268],
[265,254,237,259,254,260,272,275,275,0,279,263,261,260,289],
[239,269,257,242,253,233,256,269,272,222,0,243,246,232,260],
[220,265,228,258,252,236,285,277,265,238,258,0,256,238,267],
[254,271,246,275,242,267,280,267,271,240,255,245,0,234,274],
[254,261,247,264,267,261,254,292,277,241,269,263,267,0,272],
[243,252,219,216,207,219,255,221,233,212,241,234,227,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 122, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,247,267,241,260,267,254,265,261,253,257,255,261,242],
[250,0,252,271,250,246,274,246,274,262,258,271,250,263,244],
[254,249,0,271,241,248,266,252,263,250,256,272,256,255,226],
[234,230,230,0,233,230,254,235,259,246,258,244,236,241,232],
[260,251,260,268,0,259,293,253,265,260,267,259,269,249,253],
[241,255,253,271,242,0,264,248,253,255,255,261,256,252,236],
[234,227,235,247,208,237,0,232,248,238,248,242,226,239,211],
[247,255,249,266,248,253,269,0,271,259,269,281,256,267,250],
[236,227,238,242,236,248,253,230,0,232,248,246,240,231,235],
[240,239,251,255,241,246,263,242,269,0,255,262,246,243,240],
[248,243,245,243,234,246,253,232,253,246,0,253,245,250,242],
[244,230,229,257,242,240,259,220,255,239,248,0,241,244,230],
[246,251,245,265,232,245,275,245,261,255,256,260,0,252,253],
[240,238,246,260,252,249,262,234,270,258,251,257,249,0,241],
[259,257,275,269,248,265,290,251,266,261,259,271,248,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 123, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,267,249,249,264,261,282,254,272,275,262,265,264,270],
[250,0,283,242,273,266,246,265,256,242,272,260,273,260,286],
[234,218,0,222,221,244,238,266,245,231,249,253,236,221,257],
[252,259,279,0,257,283,273,281,271,248,290,273,275,274,266],
[252,228,280,244,0,256,265,275,259,265,275,252,271,257,261],
[237,235,257,218,245,0,241,268,251,241,258,264,240,238,257],
[240,255,263,228,236,260,0,265,251,233,263,248,249,236,252],
[219,236,235,220,226,233,236,0,248,228,234,241,247,229,236],
[247,245,256,230,242,250,250,253,0,231,264,246,272,250,249],
[229,259,270,253,236,260,268,273,270,0,271,260,260,247,256],
[226,229,252,211,226,243,238,267,237,230,0,245,231,220,228],
[239,241,248,228,249,237,253,260,255,241,256,0,261,252,249],
[236,228,265,226,230,261,252,254,229,241,270,240,0,249,225],
[237,241,280,227,244,263,265,272,251,254,281,249,252,0,251],
[231,215,244,235,240,244,249,265,252,245,273,252,276,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 124, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,251,295,277,263,241,256,243,289,220,259,234,235,247],
[229,0,254,276,230,269,198,227,209,239,232,246,213,214,248],
[250,247,0,285,270,259,234,240,220,253,217,256,228,224,241],
[206,225,216,0,249,265,229,227,235,232,227,262,212,225,214],
[224,271,231,252,0,236,207,229,233,247,198,275,249,220,248],
[238,232,242,236,265,0,230,235,235,245,225,221,250,225,230],
[260,303,267,272,294,271,0,277,218,273,272,280,255,247,247],
[245,274,261,274,272,266,224,0,243,252,235,265,239,238,252],
[258,292,281,266,268,266,283,258,0,282,253,284,265,237,249],
[212,262,248,269,254,256,228,249,219,0,231,274,249,218,250],
[281,269,284,274,303,276,229,266,248,270,0,286,241,248,244],
[242,255,245,239,226,280,221,236,217,227,215,0,234,184,229],
[267,288,273,289,252,251,246,262,236,252,260,267,0,246,252],
[266,287,277,276,281,276,254,263,264,283,253,317,255,0,233],
[254,253,260,287,253,271,254,249,252,251,257,272,249,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 125, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,262,282,256,253,263,263,260,246,240,254,272,267,270],
[239,0,239,257,218,259,250,242,239,227,233,273,255,263,239],
[239,262,0,267,242,246,265,250,256,255,251,280,241,246,262],
[219,244,234,0,224,225,256,220,233,224,240,264,255,231,236],
[245,283,259,277,0,256,280,267,250,257,259,267,280,264,272],
[248,242,255,276,245,0,275,246,242,245,232,246,249,252,261],
[238,251,236,245,221,226,0,217,236,233,241,241,244,250,252],
[238,259,251,281,234,255,284,0,254,242,263,265,265,250,262],
[241,262,245,268,251,259,265,247,0,241,250,247,261,242,246],
[255,274,246,277,244,256,268,259,260,0,256,259,271,258,264],
[261,268,250,261,242,269,260,238,251,245,0,270,264,264,251],
[247,228,221,237,234,255,260,236,254,242,231,0,255,233,245],
[229,246,260,246,221,252,257,236,240,230,237,246,0,240,244],
[234,238,255,270,237,249,251,251,259,243,237,268,261,0,242],
[231,262,239,265,229,240,249,239,255,237,250,256,257,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 126, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,225,201,236,205,232,244,219,243,217,248,218,205,245],
[296,0,248,263,275,240,220,334,249,256,300,262,285,263,275],
[276,253,0,222,238,225,214,282,228,285,266,253,256,257,238],
[300,238,279,0,251,216,254,270,269,277,244,260,241,263,228],
[265,226,263,250,0,210,222,235,235,258,223,259,267,235,264],
[296,261,276,285,291,0,265,282,307,253,288,281,300,236,275],
[269,281,287,247,279,236,0,317,285,277,279,259,230,212,243],
[257,167,219,231,266,219,184,0,226,260,268,212,259,214,248],
[282,252,273,232,266,194,216,275,0,237,234,219,269,228,238],
[258,245,216,224,243,248,224,241,264,0,271,259,225,213,256],
[284,201,235,257,278,213,222,233,267,230,0,236,236,218,244],
[253,239,248,241,242,220,242,289,282,242,265,0,235,226,253],
[283,216,245,260,234,201,271,242,232,276,265,266,0,230,274],
[296,238,244,238,266,265,289,287,273,288,283,275,271,0,270],
[256,226,263,273,237,226,258,253,263,245,257,248,227,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 127, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,211,235,262,262,241,228,255,203,239,206,271,252,265],
[286,0,246,265,296,300,279,275,287,257,266,278,310,275,268],
[290,255,0,270,319,273,298,273,288,283,276,237,305,306,292],
[266,236,231,0,270,248,247,256,264,247,260,268,277,267,269],
[239,205,182,231,0,211,211,224,223,221,212,218,269,208,213],
[239,201,228,253,290,0,235,225,252,224,228,230,250,227,227],
[260,222,203,254,290,266,0,279,292,245,255,229,286,268,256],
[273,226,228,245,277,276,222,0,274,268,234,252,304,254,236],
[246,214,213,237,278,249,209,227,0,212,220,223,281,247,254],
[298,244,218,254,280,277,256,233,289,0,236,255,284,254,265],
[262,235,225,241,289,273,246,267,281,265,0,249,289,250,262],
[295,223,264,233,283,271,272,249,278,246,252,0,263,249,253],
[230,191,196,224,232,251,215,197,220,217,212,238,0,247,235],
[249,226,195,234,293,274,233,247,254,247,251,252,254,0,248],
[236,233,209,232,288,274,245,265,247,236,239,248,266,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 128, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,244,249,225,256,232,234,250,242,232,254,242,255,247],
[254,0,256,267,230,254,241,244,243,249,229,254,247,245,232],
[257,245,0,257,235,268,251,244,261,251,248,268,246,266,269],
[252,234,244,0,226,251,232,228,238,256,220,254,241,251,247],
[276,271,266,275,0,287,268,250,259,291,264,274,267,278,269],
[245,247,233,250,214,0,256,225,243,259,239,242,236,243,246],
[269,260,250,269,233,245,0,253,254,254,239,262,253,254,245],
[267,257,257,273,251,276,248,0,252,271,249,270,257,271,262],
[251,258,240,263,242,258,247,249,0,267,248,251,261,257,254],
[259,252,250,245,210,242,247,230,234,0,237,249,242,247,246],
[269,272,253,281,237,262,262,252,253,264,0,273,267,275,261],
[247,247,233,247,227,259,239,231,250,252,228,0,237,249,248],
[259,254,255,260,234,265,248,244,240,259,234,264,0,242,255],
[246,256,235,250,223,258,247,230,244,254,226,252,259,0,239],
[254,269,232,254,232,255,256,239,247,255,240,253,246,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 129, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,228,241,248,258,235,254,253,239,242,234,232,211,225],
[265,0,247,255,252,257,239,248,259,248,254,243,244,241,228],
[273,254,0,251,262,263,256,253,267,241,252,249,254,233,245],
[260,246,250,0,258,258,243,249,267,253,248,244,252,247,242],
[253,249,239,243,0,253,233,244,251,239,242,251,238,230,233],
[243,244,238,243,248,0,244,246,255,237,240,235,233,221,229],
[266,262,245,258,268,257,0,251,267,243,256,258,246,253,253],
[247,253,248,252,257,255,250,0,251,233,249,238,241,243,239],
[248,242,234,234,250,246,234,250,0,250,251,233,242,237,241],
[262,253,260,248,262,264,258,268,251,0,264,246,237,239,243],
[259,247,249,253,259,261,245,252,250,237,0,257,245,238,243],
[267,258,252,257,250,266,243,263,268,255,244,0,262,238,250],
[269,257,247,249,263,268,255,260,259,264,256,239,0,235,232],
[290,260,268,254,271,280,248,258,264,262,263,263,266,0,237],
[276,273,256,259,268,272,248,262,260,258,258,251,269,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 130, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,247,264,243,258,234,254,254,241,263,240,248,247,262],
[259,0,254,264,241,263,255,261,235,239,261,252,248,244,240],
[254,247,0,275,250,267,268,271,244,261,264,256,256,261,266],
[237,237,226,0,228,246,241,253,217,224,261,224,228,228,234],
[258,260,251,273,0,275,241,264,244,259,260,246,255,254,258],
[243,238,234,255,226,0,236,248,225,253,252,230,237,237,233],
[267,246,233,260,260,265,0,260,232,257,266,247,233,249,261],
[247,240,230,248,237,253,241,0,228,237,257,233,255,235,247],
[247,266,257,284,257,276,269,273,0,268,276,252,250,261,264],
[260,262,240,277,242,248,244,264,233,0,255,244,256,239,241],
[238,240,237,240,241,249,235,244,225,246,0,239,221,225,224],
[261,249,245,277,255,271,254,268,249,257,262,0,270,267,237],
[253,253,245,273,246,264,268,246,251,245,280,231,0,246,244],
[254,257,240,273,247,264,252,266,240,262,276,234,255,0,266],
[239,261,235,267,243,268,240,254,237,260,277,264,257,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 131, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,282,218,242,242,345,268,222,297,309,275,316,292,268],
[186,0,238,238,228,195,293,193,224,272,266,244,224,276,250],
[219,263,0,269,248,286,306,271,243,298,247,280,266,229,244],
[283,263,232,0,246,235,286,254,215,267,303,255,285,224,224],
[259,273,253,255,0,224,288,252,252,284,224,302,259,233,271],
[259,306,215,266,277,0,269,259,275,274,270,290,303,257,254],
[156,208,195,215,213,232,0,208,178,243,251,216,266,215,207],
[233,308,230,247,249,242,293,0,250,251,267,266,257,241,222],
[279,277,258,286,249,226,323,251,0,288,292,276,295,272,284],
[204,229,203,234,217,227,258,250,213,0,231,176,282,191,217],
[192,235,254,198,277,231,250,234,209,270,0,238,255,253,271],
[226,257,221,246,199,211,285,235,225,325,263,0,254,244,258],
[185,277,235,216,242,198,235,244,206,219,246,247,0,223,180],
[209,225,272,277,268,244,286,260,229,310,248,257,278,0,257],
[233,251,257,277,230,247,294,279,217,284,230,243,321,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 132, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,302,347,295,144,165,231,209,376,186,255,280,246,363],
[191,0,290,286,206,180,233,242,214,256,198,189,310,190,303],
[199,211,0,349,214,152,194,280,194,295,128,139,222,264,366],
[154,215,152,0,229,145,137,189,118,280,156,131,273,152,237],
[206,295,287,272,0,165,137,197,215,264,267,258,372,185,346],
[357,321,349,356,336,0,165,231,243,415,376,261,314,188,349],
[336,268,307,364,364,336,0,267,334,348,223,317,306,310,395],
[270,259,221,312,304,270,234,0,282,287,282,282,270,340,417],
[292,287,307,383,286,258,167,219,0,383,228,306,376,256,337],
[125,245,206,221,237,86,153,214,118,0,158,250,305,118,290],
[315,303,373,345,234,125,278,219,273,343,0,223,306,285,331],
[246,312,362,370,243,240,184,219,195,251,278,0,281,304,334],
[221,191,279,228,129,187,195,231,125,196,195,220,0,221,279],
[255,311,237,349,316,313,191,161,245,383,216,197,280,0,489],
[138,198,135,264,155,152,106,84,164,211,170,167,222,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 133, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,245,245,252,254,242,220,248,244,240,244,254,243,251],
[270,0,233,251,237,274,243,234,255,261,233,256,252,252,234],
[256,268,0,258,267,265,254,239,245,252,243,259,274,259,243],
[256,250,243,0,250,269,235,247,247,251,242,246,253,245,246],
[249,264,234,251,0,243,236,245,249,241,223,251,247,233,249],
[247,227,236,232,258,0,218,226,235,223,221,236,234,231,214],
[259,258,247,266,265,283,0,246,254,250,253,262,256,247,251],
[281,267,262,254,256,275,255,0,258,253,257,263,265,254,239],
[253,246,256,254,252,266,247,243,0,256,259,257,253,257,235],
[257,240,249,250,260,278,251,248,245,0,240,257,249,260,245],
[261,268,258,259,278,280,248,244,242,261,0,262,265,259,252],
[257,245,242,255,250,265,239,238,244,244,239,0,263,252,244],
[247,249,227,248,254,267,245,236,248,252,236,238,0,241,242],
[258,249,242,256,268,270,254,247,244,241,242,249,260,0,238],
[250,267,258,255,252,287,250,262,266,256,249,257,259,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 134, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,234,254,211,249,245,223,266,250,227,272,221,239,254],
[271,0,241,269,252,281,250,270,270,256,246,259,250,255,258],
[267,260,0,245,248,271,251,263,277,274,213,269,264,266,247],
[247,232,256,0,239,251,275,255,252,246,240,269,234,232,271],
[290,249,253,262,0,263,266,269,254,274,231,299,263,253,259],
[252,220,230,250,238,0,249,243,244,248,227,267,243,224,250],
[256,251,250,226,235,252,0,270,248,247,232,242,254,234,250],
[278,231,238,246,232,258,231,0,249,252,230,242,245,230,248],
[235,231,224,249,247,257,253,252,0,244,214,268,241,254,254],
[251,245,227,255,227,253,254,249,257,0,256,254,253,233,270],
[274,255,288,261,270,274,269,271,287,245,0,269,267,235,266],
[229,242,232,232,202,234,259,259,233,247,232,0,251,237,264],
[280,251,237,267,238,258,247,256,260,248,234,250,0,235,266],
[262,246,235,269,248,277,267,271,247,268,266,264,266,0,283],
[247,243,254,230,242,251,251,253,247,231,235,237,235,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 135, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,251,280,275,276,281,268,278,266,255,282,264,271,250],
[243,0,254,267,263,254,268,256,272,263,254,259,237,251,252],
[250,247,0,264,265,269,264,236,259,251,256,259,244,259,257],
[221,234,237,0,250,261,266,256,254,246,253,258,248,247,253],
[226,238,236,251,0,242,267,246,243,237,237,251,244,225,235],
[225,247,232,240,259,0,256,239,250,248,236,247,232,239,240],
[220,233,237,235,234,245,0,235,249,245,242,242,241,237,223],
[233,245,265,245,255,262,266,0,245,258,249,261,258,250,257],
[223,229,242,247,258,251,252,256,0,257,257,251,240,247,241],
[235,238,250,255,264,253,256,243,244,0,245,248,240,251,252],
[246,247,245,248,264,265,259,252,244,256,0,266,267,254,251],
[219,242,242,243,250,254,259,240,250,253,235,0,230,237,246],
[237,264,257,253,257,269,260,243,261,261,234,271,0,250,250],
[230,250,242,254,276,262,264,251,254,250,247,264,251,0,248],
[251,249,244,248,266,261,278,244,260,249,250,255,251,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 136, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,178,229,266,189,186,249,212,248,288,246,192,168,205],
[347,0,271,253,333,246,265,381,293,307,261,279,247,292,249],
[323,230,0,255,331,281,243,320,295,308,267,280,239,253,238],
[272,248,246,0,275,220,234,320,244,284,289,252,208,263,188],
[235,168,170,226,0,174,150,214,200,239,234,258,159,187,183],
[312,255,220,281,327,0,228,270,240,273,300,273,213,225,221],
[315,236,258,267,351,273,0,345,299,338,284,313,218,236,254],
[252,120,181,181,287,231,156,0,230,229,233,264,172,206,197],
[289,208,206,257,301,261,202,271,0,244,275,256,228,244,230],
[253,194,193,217,262,228,163,272,257,0,215,228,172,195,160],
[213,240,234,212,267,201,217,268,226,286,0,197,219,226,228],
[255,222,221,249,243,228,188,237,245,273,304,0,196,203,207],
[309,254,262,293,342,288,283,329,273,329,282,305,0,251,211],
[333,209,248,238,314,276,265,295,257,306,275,298,250,0,204],
[296,252,263,313,318,280,247,304,271,341,273,294,290,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 137, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,252,247,231,231,254,236,258,244,268,238,258,268,255],
[236,0,239,238,231,219,243,230,256,223,254,225,244,276,248],
[249,262,0,269,249,247,260,267,274,272,253,249,283,277,270],
[254,263,232,0,254,259,265,243,261,256,285,253,285,282,268],
[270,270,252,247,0,254,287,260,279,247,265,253,271,281,267],
[270,282,254,242,247,0,233,250,264,260,277,253,265,285,269],
[247,258,241,236,214,268,0,267,273,246,264,228,270,266,263],
[265,271,234,258,241,251,234,0,272,250,275,250,261,268,254],
[243,245,227,240,222,237,228,229,0,242,248,235,255,255,254],
[257,278,229,245,254,241,255,251,259,0,276,244,265,275,263],
[233,247,248,216,236,224,237,226,253,225,0,248,248,269,251],
[263,276,252,248,248,248,273,251,266,257,253,0,257,275,258],
[243,257,218,216,230,236,231,240,246,236,253,244,0,261,260],
[233,225,224,219,220,216,235,233,246,226,232,226,240,0,235],
[246,253,231,233,234,232,238,247,247,238,250,243,241,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 138, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,243,266,266,240,236,227,237,239,276,234,234,258,231],
[246,0,249,266,262,249,234,253,250,244,270,261,233,278,251],
[258,252,0,270,271,241,254,250,245,231,275,225,245,258,229],
[235,235,231,0,261,242,213,215,229,228,266,211,243,265,220],
[235,239,230,240,0,241,228,221,248,246,237,220,224,253,243],
[261,252,260,259,260,0,238,235,264,250,281,240,237,286,250],
[265,267,247,288,273,263,0,249,272,264,282,245,254,257,269],
[274,248,251,286,280,266,252,0,274,272,275,244,245,279,247],
[264,251,256,272,253,237,229,227,0,228,257,252,244,255,244],
[262,257,270,273,255,251,237,229,273,0,284,254,235,284,242],
[225,231,226,235,264,220,219,226,244,217,0,225,231,249,234],
[267,240,276,290,281,261,256,257,249,247,276,0,260,278,247],
[267,268,256,258,277,264,247,256,257,266,270,241,0,270,261],
[243,223,243,236,248,215,244,222,246,217,252,223,231,0,222],
[270,250,272,281,258,251,232,254,257,259,267,254,240,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 139, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,283,253,282,269,256,257,247,274,267,279,277,252,300],
[247,0,256,260,266,275,242,244,263,269,251,286,254,277,285],
[218,245,0,225,265,234,231,234,244,240,232,272,251,248,290],
[248,241,276,0,249,257,242,239,281,277,249,248,258,245,256],
[219,235,236,252,0,248,238,249,237,263,233,255,235,280,274],
[232,226,267,244,253,0,227,235,251,266,228,261,234,243,259],
[245,259,270,259,263,274,0,237,271,280,259,292,249,256,281],
[244,257,267,262,252,266,264,0,266,282,247,299,284,263,269],
[254,238,257,220,264,250,230,235,0,264,240,275,259,252,276],
[227,232,261,224,238,235,221,219,237,0,235,267,255,250,265],
[234,250,269,252,268,273,242,254,261,266,0,275,268,267,291],
[222,215,229,253,246,240,209,202,226,234,226,0,241,233,238],
[224,247,250,243,266,267,252,217,242,246,233,260,0,260,261],
[249,224,253,256,221,258,245,238,249,251,234,268,241,0,256],
[201,216,211,245,227,242,220,232,225,236,210,263,240,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 140, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,256,235,215,210,268,221,267,271,217,212,234,224,236],
[253,0,257,253,236,222,228,231,245,237,239,263,212,242,244],
[245,244,0,211,213,225,244,208,236,285,191,238,209,271,248],
[266,248,290,0,259,244,235,237,303,281,227,264,262,256,255],
[286,265,288,242,0,238,265,250,276,259,231,251,272,301,281],
[291,279,276,257,263,0,271,253,283,268,241,245,251,280,278],
[233,273,257,266,236,230,0,232,222,301,247,242,247,254,245],
[280,270,293,264,251,248,269,0,275,286,252,239,219,261,265],
[234,256,265,198,225,218,279,226,0,278,211,237,219,254,247],
[230,264,216,220,242,233,200,215,223,0,196,236,208,266,274],
[284,262,310,274,270,260,254,249,290,305,0,244,259,279,273],
[289,238,263,237,250,256,259,262,264,265,257,0,218,232,267],
[267,289,292,239,229,250,254,282,282,293,242,283,0,279,268],
[277,259,230,245,200,221,247,240,247,235,222,269,222,0,234],
[265,257,253,246,220,223,256,236,254,227,228,234,233,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 141, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,248,240,248,240,255,242,240,238,251,260,249,245,264],
[249,0,244,245,255,255,258,243,244,239,257,276,250,241,272],
[253,257,0,258,256,265,260,250,256,246,271,276,256,255,267],
[261,256,243,0,266,257,256,241,247,251,257,276,246,242,255],
[253,246,245,235,0,232,240,235,227,258,257,253,243,244,248],
[261,246,236,244,269,0,258,250,250,257,271,267,253,261,269],
[246,243,241,245,261,243,0,239,234,243,249,269,245,234,267],
[259,258,251,260,266,251,262,0,250,260,261,266,260,260,282],
[261,257,245,254,274,251,267,251,0,256,260,270,250,242,275],
[263,262,255,250,243,244,258,241,245,0,262,264,240,250,265],
[250,244,230,244,244,230,252,240,241,239,0,259,235,232,250],
[241,225,225,225,248,234,232,235,231,237,242,0,227,223,239],
[252,251,245,255,258,248,256,241,251,261,266,274,0,246,262],
[256,260,246,259,257,240,267,241,259,251,269,278,255,0,262],
[237,229,234,246,253,232,234,219,226,236,251,262,239,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 142, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,256,247,248,268,245,268,265,269,264,268,260,271,250],
[236,0,246,240,252,268,240,244,249,250,275,264,256,252,254],
[245,255,0,252,242,263,265,243,250,254,277,273,268,263,269],
[254,261,249,0,242,255,255,247,258,252,263,267,265,259,243],
[253,249,259,259,0,257,250,253,249,259,275,257,253,262,252],
[233,233,238,246,244,0,248,242,242,250,261,239,247,247,240],
[256,261,236,246,251,253,0,248,254,254,264,253,260,267,251],
[233,257,258,254,248,259,253,0,240,237,260,252,255,257,234],
[236,252,251,243,252,259,247,261,0,263,270,273,272,266,254],
[232,251,247,249,242,251,247,264,238,0,257,258,253,266,261],
[237,226,224,238,226,240,237,241,231,244,0,243,231,231,236],
[233,237,228,234,244,262,248,249,228,243,258,0,250,234,242],
[241,245,233,236,248,254,241,246,229,248,270,251,0,260,240],
[230,249,238,242,239,254,234,244,235,235,270,267,241,0,228],
[251,247,232,258,249,261,250,267,247,240,265,259,261,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 143, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,243,246,241,235,233,233,288,270,219,231,298,238,238],
[268,0,233,251,238,227,236,263,276,263,227,285,272,228,258],
[258,268,0,296,247,256,209,227,313,268,254,313,276,235,248],
[255,250,205,0,214,215,222,237,326,238,251,245,281,205,260],
[260,263,254,287,0,306,234,280,296,262,274,295,280,227,266],
[266,274,245,286,195,0,289,319,272,222,240,277,321,228,233],
[268,265,292,279,267,212,0,248,252,264,287,282,257,259,252],
[268,238,274,264,221,182,253,0,251,269,235,266,275,230,217],
[213,225,188,175,205,229,249,250,0,192,242,260,207,187,224],
[231,238,233,263,239,279,237,232,309,0,228,232,250,193,285],
[282,274,247,250,227,261,214,266,259,273,0,276,241,222,215],
[270,216,188,256,206,224,219,235,241,269,225,0,248,232,244],
[203,229,225,220,221,180,244,226,294,251,260,253,0,233,250],
[263,273,266,296,274,273,242,271,314,308,279,269,268,0,297],
[263,243,253,241,235,268,249,284,277,216,286,257,251,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 144, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,298,181,241,223,227,270,213,270,287,240,211,298,286],
[181,0,302,194,294,259,244,228,188,258,253,266,170,255,255],
[203,199,0,180,249,147,211,214,246,279,205,187,179,199,217],
[320,307,321,0,276,210,255,261,260,269,298,251,218,276,270],
[260,207,252,225,0,210,190,261,216,266,261,236,187,259,261],
[278,242,354,291,291,0,239,296,269,326,304,268,271,270,271],
[274,257,290,246,311,262,0,292,217,245,264,230,267,271,267],
[231,273,287,240,240,205,209,0,246,250,257,178,233,252,265],
[288,313,255,241,285,232,284,255,0,290,264,246,236,293,256],
[231,243,222,232,235,175,256,251,211,0,240,265,193,218,232],
[214,248,296,203,240,197,237,244,237,261,0,195,235,247,294],
[261,235,314,250,265,233,271,323,255,236,306,0,268,282,291],
[290,331,322,283,314,230,234,268,265,308,266,233,0,290,295],
[203,246,302,225,242,231,230,249,208,283,254,219,211,0,277],
[215,246,284,231,240,230,234,236,245,269,207,210,206,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 145, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,253,268,248,257,256,247,254,263,295,277,247,281,255],
[233,0,259,267,231,262,249,249,275,262,266,278,260,263,257],
[248,242,0,246,249,264,244,237,252,267,261,261,243,259,246],
[233,234,255,0,258,238,252,237,254,267,268,249,249,258,252],
[253,270,252,243,0,263,240,264,269,281,266,255,259,248,269],
[244,239,237,263,238,0,257,243,259,258,270,270,246,263,252],
[245,252,257,249,261,244,0,255,282,268,267,259,232,273,256],
[254,252,264,264,237,258,246,0,251,254,275,263,232,260,243],
[247,226,249,247,232,242,219,250,0,235,267,255,249,240,237],
[238,239,234,234,220,243,233,247,266,0,257,259,226,243,227],
[206,235,240,233,235,231,234,226,234,244,0,240,238,245,227],
[224,223,240,252,246,231,242,238,246,242,261,0,213,242,208],
[254,241,258,252,242,255,269,269,252,275,263,288,0,264,249],
[220,238,242,243,253,238,228,241,261,258,256,259,237,0,211],
[246,244,255,249,232,249,245,258,264,274,274,293,252,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 146, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,254,242,257,231,260,256,241,246,245,260,249,242,254],
[251,0,239,239,239,242,257,243,223,239,251,243,258,234,249],
[247,262,0,242,244,256,262,261,239,244,246,237,260,229,254],
[259,262,259,0,261,249,269,280,255,253,254,260,270,252,262],
[244,262,257,240,0,245,266,254,240,254,259,251,266,246,258],
[270,259,245,252,256,0,258,253,248,248,255,262,252,234,252],
[241,244,239,232,235,243,0,257,229,236,236,241,245,238,257],
[245,258,240,221,247,248,244,0,238,245,242,240,260,236,251],
[260,278,262,246,261,253,272,263,0,248,251,252,267,237,270],
[255,262,257,248,247,253,265,256,253,0,253,260,261,249,260],
[256,250,255,247,242,246,265,259,250,248,0,242,261,247,260],
[241,258,264,241,250,239,260,261,249,241,259,0,249,240,262],
[252,243,241,231,235,249,256,241,234,240,240,252,0,233,247],
[259,267,272,249,255,267,263,265,264,252,254,261,268,0,260],
[247,252,247,239,243,249,244,250,231,241,241,239,254,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 147, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,250,252,243,243,235,240,253,233,254,241,237,239,234],
[264,0,252,255,251,242,244,254,250,254,252,243,252,252,242],
[251,249,0,256,247,247,243,250,250,250,261,253,252,244,239],
[249,246,245,0,244,247,230,251,252,251,246,251,249,228,241],
[258,250,254,257,0,259,240,252,246,247,260,248,254,253,254],
[258,259,254,254,242,0,243,259,252,251,260,254,259,257,238],
[266,257,258,271,261,258,0,280,275,248,256,261,257,256,248],
[261,247,251,250,249,242,221,0,247,251,246,255,236,242,228],
[248,251,251,249,255,249,226,254,0,246,242,252,244,247,246],
[268,247,251,250,254,250,253,250,255,0,253,256,256,255,256],
[247,249,240,255,241,241,245,255,259,248,0,260,255,260,255],
[260,258,248,250,253,247,240,246,249,245,241,0,247,253,241],
[264,249,249,252,247,242,244,265,257,245,246,254,0,247,254],
[262,249,257,273,248,244,245,259,254,246,241,248,254,0,237],
[267,259,262,260,247,263,253,273,255,245,246,260,247,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 148, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,253,276,170,366,203,217,241,263,203,296,255,270,301],
[181,0,233,162,159,137,193,189,175,163,213,192,147,197,233],
[248,268,0,291,248,307,186,150,298,264,185,245,290,237,229],
[225,339,210,0,113,238,198,246,208,270,255,141,179,140,209],
[331,342,253,388,0,300,220,314,184,251,329,323,336,356,293],
[135,364,194,263,201,0,186,190,299,255,234,195,262,252,313],
[298,308,315,303,281,315,0,283,345,313,202,246,294,341,328],
[284,312,351,255,187,311,218,0,232,243,290,240,281,301,298],
[260,326,203,293,317,202,156,269,0,200,226,231,290,238,255],
[238,338,237,231,250,246,188,258,301,0,214,262,249,271,239],
[298,288,316,246,172,267,299,211,275,287,0,252,185,247,276],
[205,309,256,360,178,306,255,261,270,239,249,0,202,392,217],
[246,354,211,322,165,239,207,220,211,252,316,299,0,283,213],
[231,304,264,361,145,249,160,200,263,230,254,109,218,0,248],
[200,268,272,292,208,188,173,203,246,262,225,284,288,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 149, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,252,239,255,240,254,231,244,233,224,251,244,235,253],
[274,0,272,250,269,268,283,271,279,274,252,274,281,260,260],
[249,229,0,228,259,251,257,235,262,247,245,225,239,226,244],
[262,251,273,0,258,268,266,268,261,269,263,260,256,246,277],
[246,232,242,243,0,244,253,230,247,249,234,248,233,222,261],
[261,233,250,233,257,0,261,245,253,245,238,250,246,236,257],
[247,218,244,235,248,240,0,256,236,231,233,225,222,229,254],
[270,230,266,233,271,256,245,0,253,254,244,252,251,247,269],
[257,222,239,240,254,248,265,248,0,246,257,260,263,239,262],
[268,227,254,232,252,256,270,247,255,0,244,257,262,233,257],
[277,249,256,238,267,263,268,257,244,257,0,275,271,234,270],
[250,227,276,241,253,251,276,249,241,244,226,0,246,232,250],
[257,220,262,245,268,255,279,250,238,239,230,255,0,239,272],
[266,241,275,255,279,265,272,254,262,268,267,269,262,0,275],
[248,241,257,224,240,244,247,232,239,244,231,251,229,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 150, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,249,245,240,246,243,251,268,253,237,240,242,242,266],
[255,0,244,235,234,261,236,257,265,257,246,250,238,229,243],
[252,257,0,255,251,249,248,263,263,263,240,248,250,247,264],
[256,266,246,0,234,248,248,248,261,252,235,231,245,242,246],
[261,267,250,267,0,256,255,270,254,273,254,261,253,251,277],
[255,240,252,253,245,0,254,260,256,262,250,259,257,244,271],
[258,265,253,253,246,247,0,263,256,265,257,238,258,229,256],
[250,244,238,253,231,241,238,0,243,254,242,239,237,221,258],
[233,236,238,240,247,245,245,258,0,250,251,229,236,237,245],
[248,244,238,249,228,239,236,247,251,0,233,238,239,227,241],
[264,255,261,266,247,251,244,259,250,268,0,243,255,226,261],
[261,251,253,270,240,242,263,262,272,263,258,0,242,236,254],
[259,263,251,256,248,244,243,264,265,262,246,259,0,228,256],
[259,272,254,259,250,257,272,280,264,274,275,265,273,0,268],
[235,258,237,255,224,230,245,243,256,260,240,247,245,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 151, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,225,249,242,244,236,229,243,209,246,238,239,242,243],
[288,0,255,268,271,272,261,241,265,253,281,255,279,263,253],
[276,246,0,268,266,262,253,227,260,247,267,248,269,265,246],
[252,233,233,0,250,241,246,210,246,233,257,238,243,244,234],
[259,230,235,251,0,252,247,231,246,227,265,242,245,239,250],
[257,229,239,260,249,0,258,236,251,229,263,246,245,257,240],
[265,240,248,255,254,243,0,236,263,227,269,249,255,260,240],
[272,260,274,291,270,265,265,0,261,250,294,267,271,274,265],
[258,236,241,255,255,250,238,240,0,234,257,240,242,261,251],
[292,248,254,268,274,272,274,251,267,0,278,266,262,269,269],
[255,220,234,244,236,238,232,207,244,223,0,221,235,238,223],
[263,246,253,263,259,255,252,234,261,235,280,0,255,259,255],
[262,222,232,258,256,256,246,230,259,239,266,246,0,248,263],
[259,238,236,257,262,244,241,227,240,232,263,242,253,0,231],
[258,248,255,267,251,261,261,236,250,232,278,246,238,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 152, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,238,247,266,253,249,239,259,255,237,237,257,254,229],
[259,0,249,273,263,257,266,228,259,266,255,238,297,236,227],
[263,252,0,254,247,253,263,253,265,264,251,263,264,244,253],
[254,228,247,0,246,251,251,237,259,254,255,223,248,246,238],
[235,238,254,255,0,244,251,240,245,236,245,231,261,240,245],
[248,244,248,250,257,0,263,234,269,262,232,252,250,248,250],
[252,235,238,250,250,238,0,224,264,261,243,233,260,247,225],
[262,273,248,264,261,267,277,0,272,259,245,239,261,267,249],
[242,242,236,242,256,232,237,229,0,248,228,228,248,245,226],
[246,235,237,247,265,239,240,242,253,0,229,233,250,237,238],
[264,246,250,246,256,269,258,256,273,272,0,231,250,267,250],
[264,263,238,278,270,249,268,262,273,268,270,0,292,271,263],
[244,204,237,253,240,251,241,240,253,251,251,209,0,243,235],
[247,265,257,255,261,253,254,234,256,264,234,230,258,0,242],
[272,274,248,263,256,251,276,252,275,263,251,238,266,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 153, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,220,222,230,225,220,220,223,220,224,236,225,248,223],
[260,0,253,242,243,251,251,237,227,254,257,248,264,261,242],
[281,248,0,248,265,256,234,233,237,245,245,254,262,258,243],
[279,259,253,0,236,241,234,247,234,231,256,254,245,265,251],
[271,258,236,265,0,246,243,252,239,252,258,266,251,267,247],
[276,250,245,260,255,0,255,247,234,234,247,268,269,263,232],
[281,250,267,267,258,246,0,262,226,235,246,256,270,260,230],
[281,264,268,254,249,254,239,0,244,252,268,268,260,257,251],
[278,274,264,267,262,267,275,257,0,265,260,267,273,267,241],
[281,247,256,270,249,267,266,249,236,0,268,276,255,269,242],
[277,244,256,245,243,254,255,233,241,233,0,268,254,265,233],
[265,253,247,247,235,233,245,233,234,225,233,0,242,255,239],
[276,237,239,256,250,232,231,241,228,246,247,259,0,264,250],
[253,240,243,236,234,238,241,244,234,232,236,246,237,0,235],
[278,259,258,250,254,269,271,250,260,259,268,262,251,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 154, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,272,241,251,225,234,218,246,261,215,222,231,217,230],
[272,0,250,243,252,240,238,234,226,253,246,259,234,265,268],
[229,251,0,219,248,215,229,224,247,239,192,229,236,239,236],
[260,258,282,0,263,256,236,257,240,262,254,267,245,259,267],
[250,249,253,238,0,220,235,226,267,227,230,240,224,257,257],
[276,261,286,245,281,0,248,270,271,247,248,246,266,266,286],
[267,263,272,265,266,253,0,231,253,281,257,265,256,249,266],
[283,267,277,244,275,231,270,0,247,271,270,269,255,275,254],
[255,275,254,261,234,230,248,254,0,273,262,274,258,273,273],
[240,248,262,239,274,254,220,230,228,0,240,257,238,261,266],
[286,255,309,247,271,253,244,231,239,261,0,237,251,271,249],
[279,242,272,234,261,255,236,232,227,244,264,0,238,269,249],
[270,267,265,256,277,235,245,246,243,263,250,263,0,252,270],
[284,236,262,242,244,235,252,226,228,240,230,232,249,0,251],
[271,233,265,234,244,215,235,247,228,235,252,252,231,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 155, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,258,232,253,261,260,246,243,259,254,255,258,238,261],
[249,0,234,233,253,261,264,260,246,250,241,262,240,248,243],
[243,267,0,244,253,294,277,258,233,258,270,248,259,258,273],
[269,268,257,0,250,270,272,280,244,253,254,265,255,243,266],
[248,248,248,251,0,265,250,273,246,261,250,267,263,257,260],
[240,240,207,231,236,0,242,257,231,243,250,228,245,231,245],
[241,237,224,229,251,259,0,269,221,251,258,243,243,236,251],
[255,241,243,221,228,244,232,0,238,250,244,232,231,234,252],
[258,255,268,257,255,270,280,263,0,260,280,243,261,259,278],
[242,251,243,248,240,258,250,251,241,0,256,261,234,249,249],
[247,260,231,247,251,251,243,257,221,245,0,255,243,245,262],
[246,239,253,236,234,273,258,269,258,240,246,0,253,252,258],
[243,261,242,246,238,256,258,270,240,267,258,248,0,259,240],
[263,253,243,258,244,270,265,267,242,252,256,249,242,0,268],
[240,258,228,235,241,256,250,249,223,252,239,243,261,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 156, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,260,284,250,251,246,247,269,266,247,227,266,253,263],
[255,0,260,262,250,276,246,264,276,278,284,233,253,270,261],
[241,241,0,265,247,247,273,254,244,255,260,274,237,268,267],
[217,239,236,0,235,232,257,255,268,251,250,242,244,244,253],
[251,251,254,266,0,249,241,247,251,257,250,229,250,254,247],
[250,225,254,269,252,0,248,284,263,254,250,241,282,259,269],
[255,255,228,244,260,253,0,274,251,262,237,261,234,274,284],
[254,237,247,246,254,217,227,0,222,244,255,262,237,255,247],
[232,225,257,233,250,238,250,279,0,238,240,248,239,251,287],
[235,223,246,250,244,247,239,257,263,0,248,202,241,232,256],
[254,217,241,251,251,251,264,246,261,253,0,247,239,254,274],
[274,268,227,259,272,260,240,239,253,299,254,0,269,264,278],
[235,248,264,257,251,219,267,264,262,260,262,232,0,241,244],
[248,231,233,257,247,242,227,246,250,269,247,237,260,0,248],
[238,240,234,248,254,232,217,254,214,245,227,223,257,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 157, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,258,216,186,254,251,334,258,170,208,241,176,237,158],
[318,0,277,293,224,358,243,360,317,248,273,288,284,253,272],
[243,224,0,276,211,248,214,293,260,219,159,244,208,248,244],
[285,208,225,0,165,296,248,318,344,196,242,244,254,241,208],
[315,277,290,336,0,244,253,360,351,193,256,299,205,276,245],
[247,143,253,205,257,0,191,329,270,243,228,234,230,223,222],
[250,258,287,253,248,310,0,317,319,270,275,269,267,206,264],
[167,141,208,183,141,172,184,0,219,158,206,144,217,182,195],
[243,184,241,157,150,231,182,282,0,179,217,198,203,183,180],
[331,253,282,305,308,258,231,343,322,0,268,323,334,288,353],
[293,228,342,259,245,273,226,295,284,233,0,269,273,277,278],
[260,213,257,257,202,267,232,357,303,178,232,0,273,280,230],
[325,217,293,247,296,271,234,284,298,167,228,228,0,248,282],
[264,248,253,260,225,278,295,319,318,213,224,221,253,0,245],
[343,229,257,293,256,279,237,306,321,148,223,271,219,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 158, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,302,291,252,249,258,249,297,285,279,261,294,274,275],
[195,0,230,240,243,228,218,260,233,256,267,255,243,258,245],
[199,271,0,230,223,217,254,223,237,257,274,230,261,254,253],
[210,261,271,0,239,241,249,275,270,256,267,217,266,238,247],
[249,258,278,262,0,238,240,234,247,261,249,257,254,283,234],
[252,273,284,260,263,0,246,273,267,263,278,256,260,272,242],
[243,283,247,252,261,255,0,230,257,263,280,248,281,274,227],
[252,241,278,226,267,228,271,0,257,229,305,238,290,240,240],
[204,268,264,231,254,234,244,244,0,258,258,223,293,249,216],
[216,245,244,245,240,238,238,272,243,0,257,248,273,234,238],
[222,234,227,234,252,223,221,196,243,244,0,213,270,229,222],
[240,246,271,284,244,245,253,263,278,253,288,0,289,234,227],
[207,258,240,235,247,241,220,211,208,228,231,212,0,231,222],
[227,243,247,263,218,229,227,261,252,267,272,267,270,0,228],
[226,256,248,254,267,259,274,261,285,263,279,274,279,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 159, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,207,223,231,201,244,280,222,223,238,274,265,210,253],
[252,0,220,288,273,256,238,309,274,270,268,275,301,297,261],
[294,281,0,254,267,250,244,300,243,227,250,262,272,251,270],
[278,213,247,0,232,231,234,255,252,257,252,265,311,274,278],
[270,228,234,269,0,199,223,298,266,259,251,300,284,257,250],
[300,245,251,270,302,0,240,324,257,269,284,307,312,272,268],
[257,263,257,267,278,261,0,326,277,245,289,282,294,292,310],
[221,192,201,246,203,177,175,0,207,226,231,222,266,255,232],
[279,227,258,249,235,244,224,294,0,258,268,297,279,259,272],
[278,231,274,244,242,232,256,275,243,0,284,271,277,273,294],
[263,233,251,249,250,217,212,270,233,217,0,271,260,221,285],
[227,226,239,236,201,194,219,279,204,230,230,0,258,242,255],
[236,200,229,190,217,189,207,235,222,224,241,243,0,251,236],
[291,204,250,227,244,229,209,246,242,228,280,259,250,0,225],
[248,240,231,223,251,233,191,269,229,207,216,246,265,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 160, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,270,268,257,261,257,256,260,250,261,239,241,252,265],
[252,0,267,276,253,259,251,251,253,270,266,271,247,255,249],
[231,234,0,250,253,226,220,244,235,243,247,261,244,229,238],
[233,225,251,0,239,236,218,246,227,244,247,256,241,243,243],
[244,248,248,262,0,264,231,266,244,240,259,265,238,241,244],
[240,242,275,265,237,0,248,264,246,252,264,267,241,241,241],
[244,250,281,283,270,253,0,271,257,262,265,275,256,239,272],
[245,250,257,255,235,237,230,0,245,265,251,245,235,248,252],
[241,248,266,274,257,255,244,256,0,244,275,261,249,256,241],
[251,231,258,257,261,249,239,236,257,0,242,236,244,234,237],
[240,235,254,254,242,237,236,250,226,259,0,256,244,248,250],
[262,230,240,245,236,234,226,256,240,265,245,0,231,231,242],
[260,254,257,260,263,260,245,266,252,257,257,270,0,262,260],
[249,246,272,258,260,260,262,253,245,267,253,270,239,0,260],
[236,252,263,258,257,260,229,249,260,264,251,259,241,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 161, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,228,245,249,246,249,261,248,236,252,242,252,269,256],
[262,0,235,244,259,255,256,265,251,258,248,255,260,280,248],
[273,266,0,272,271,272,254,266,254,255,269,240,269,291,267],
[256,257,229,0,264,263,241,262,262,245,243,242,271,270,245],
[252,242,230,237,0,250,237,247,250,250,251,243,256,260,229],
[255,246,229,238,251,0,241,256,252,220,247,245,258,258,239],
[252,245,247,260,264,260,0,261,247,254,262,265,275,291,238],
[240,236,235,239,254,245,240,0,243,245,241,237,249,269,244],
[253,250,247,239,251,249,254,258,0,248,257,249,254,263,233],
[265,243,246,256,251,281,247,256,253,0,266,255,247,277,253],
[249,253,232,258,250,254,239,260,244,235,0,247,255,273,244],
[259,246,261,259,258,256,236,264,252,246,254,0,261,259,259],
[249,241,232,230,245,243,226,252,247,254,246,240,0,277,247],
[232,221,210,231,241,243,210,232,238,224,228,242,224,0,240],
[245,253,234,256,272,262,263,257,268,248,257,242,254,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 162, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,261,273,220,207,245,224,229,266,254,230,235,244,264],
[265,0,240,236,255,235,229,256,270,274,242,277,239,243,274],
[240,261,0,239,233,235,215,243,259,231,242,239,237,243,212],
[228,265,262,0,195,238,240,229,246,297,265,238,237,231,238],
[281,246,268,306,0,271,235,283,285,262,291,291,268,265,295],
[294,266,266,263,230,0,256,259,271,282,251,275,243,262,232],
[256,272,286,261,266,245,0,292,269,267,267,274,265,265,277],
[277,245,258,272,218,242,209,0,237,309,241,273,246,238,256],
[272,231,242,255,216,230,232,264,0,271,254,245,276,251,232],
[235,227,270,204,239,219,234,192,230,0,252,245,197,249,253],
[247,259,259,236,210,250,234,260,247,249,0,249,265,249,226],
[271,224,262,263,210,226,227,228,256,256,252,0,212,243,245],
[266,262,264,264,233,258,236,255,225,304,236,289,0,243,266],
[257,258,258,270,236,239,236,263,250,252,252,258,258,0,248],
[237,227,289,263,206,269,224,245,269,248,275,256,235,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 163, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,264,280,255,246,254,247,222,225,245,237,261,211,211],
[254,0,255,275,261,251,220,246,255,232,228,264,230,193,259],
[237,246,0,239,226,255,217,230,247,225,244,253,211,226,228],
[221,226,262,0,241,236,243,255,241,197,208,240,236,209,246],
[246,240,275,260,0,258,250,268,266,203,256,293,277,221,257],
[255,250,246,265,243,0,255,258,225,254,258,255,247,225,230],
[247,281,284,258,251,246,0,271,256,252,260,273,245,216,231],
[254,255,271,246,233,243,230,0,235,215,227,237,248,238,226],
[279,246,254,260,235,276,245,266,0,217,243,274,254,212,238],
[276,269,276,304,298,247,249,286,284,0,264,264,246,240,291],
[256,273,257,293,245,243,241,274,258,237,0,234,282,252,227],
[264,237,248,261,208,246,228,264,227,237,267,0,214,230,254],
[240,271,290,265,224,254,256,253,247,255,219,287,0,223,270],
[290,308,275,292,280,276,285,263,289,261,249,271,278,0,288],
[290,242,273,255,244,271,270,275,263,210,274,247,231,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 164, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,230,198,236,255,221,238,242,227,213,221,240,198,248],
[274,0,263,237,259,258,227,255,244,249,248,238,254,246,289],
[271,238,0,219,258,278,251,268,267,234,255,254,266,236,282],
[303,264,282,0,248,286,253,261,276,247,272,230,263,254,292],
[265,242,243,253,0,238,233,245,252,226,237,261,265,219,252],
[246,243,223,215,263,0,214,232,223,214,236,242,228,223,279],
[280,274,250,248,268,287,0,234,251,251,251,238,253,240,280],
[263,246,233,240,256,269,267,0,263,242,239,258,278,224,288],
[259,257,234,225,249,278,250,238,0,226,256,256,249,239,272],
[274,252,267,254,275,287,250,259,275,0,276,263,281,276,291],
[288,253,246,229,264,265,250,262,245,225,0,268,280,237,279],
[280,263,247,271,240,259,263,243,245,238,233,0,252,244,282],
[261,247,235,238,236,273,248,223,252,220,221,249,0,224,296],
[303,255,265,247,282,278,261,277,262,225,264,257,277,0,281],
[253,212,219,209,249,222,221,213,229,210,222,219,205,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 165, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,244,240,269,260,270,268,275,235,267,272,254,255,261],
[240,0,242,239,241,246,229,239,245,235,256,259,236,250,245],
[257,259,0,241,260,258,243,258,257,253,257,259,246,251,247],
[261,262,260,0,258,253,243,257,264,238,265,255,251,260,263],
[232,260,241,243,0,233,250,251,256,260,261,244,239,246,245],
[241,255,243,248,268,0,254,259,247,246,251,263,251,265,251],
[231,272,258,258,251,247,0,251,247,243,244,272,247,253,255],
[233,262,243,244,250,242,250,0,242,245,252,247,236,243,244],
[226,256,244,237,245,254,254,259,0,228,259,245,255,254,244],
[266,266,248,263,241,255,258,256,273,0,262,261,251,259,269],
[234,245,244,236,240,250,257,249,242,239,0,246,236,254,254],
[229,242,242,246,257,238,229,254,256,240,255,0,240,242,234],
[247,265,255,250,262,250,254,265,246,250,265,261,0,266,257],
[246,251,250,241,255,236,248,258,247,242,247,259,235,0,251],
[240,256,254,238,256,250,246,257,257,232,247,267,244,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 166, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,240,274,258,257,255,255,251,255,265,248,264,254,240],
[246,0,245,253,246,267,263,254,272,234,274,260,269,255,246],
[261,256,0,246,262,277,250,260,262,261,251,253,270,249,248],
[227,248,255,0,240,272,254,251,260,269,256,260,261,238,251],
[243,255,239,261,0,262,260,258,280,244,267,251,288,273,260],
[244,234,224,229,239,0,248,248,244,220,260,260,258,243,236],
[246,238,251,247,241,253,0,258,249,245,255,255,279,250,239],
[246,247,241,250,243,253,243,0,244,246,260,227,260,249,233],
[250,229,239,241,221,257,252,257,0,241,265,243,259,238,224],
[246,267,240,232,257,281,256,255,260,0,253,256,277,251,225],
[236,227,250,245,234,241,246,241,236,248,0,237,260,231,225],
[253,241,248,241,250,241,246,274,258,245,264,0,257,263,248],
[237,232,231,240,213,243,222,241,242,224,241,244,0,233,228],
[247,246,252,263,228,258,251,252,263,250,270,238,268,0,239],
[261,255,253,250,241,265,262,268,277,276,276,253,273,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 167, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,238,235,236,221,239,240,237,247,223,244,217,221,221],
[276,0,258,272,272,245,266,262,251,262,259,262,246,255,262],
[263,243,0,251,254,245,242,254,248,267,251,282,231,233,246],
[266,229,250,0,242,227,246,257,237,271,241,258,241,237,234],
[265,229,247,259,0,232,238,253,241,247,239,251,241,215,256],
[280,256,256,274,269,0,257,251,257,277,270,264,265,246,257],
[262,235,259,255,263,244,0,254,239,269,237,270,240,236,239],
[261,239,247,244,248,250,247,0,254,251,245,249,233,237,240],
[264,250,253,264,260,244,262,247,0,261,257,265,244,248,244],
[254,239,234,230,254,224,232,250,240,0,243,239,217,214,235],
[278,242,250,260,262,231,264,256,244,258,0,266,241,244,257],
[257,239,219,243,250,237,231,252,236,262,235,0,229,234,252],
[284,255,270,260,260,236,261,268,257,284,260,272,0,249,260],
[280,246,268,264,286,255,265,264,253,287,257,267,252,0,258],
[280,239,255,267,245,244,262,261,257,266,244,249,241,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 168, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,233,271,279,260,274,245,266,284,246,253,248,261,254],
[258,0,259,268,266,255,257,245,243,284,254,272,249,262,253],
[268,242,0,265,279,251,256,232,265,286,248,242,245,268,281],
[230,233,236,0,262,221,232,236,223,266,224,257,240,239,222],
[222,235,222,239,0,219,246,231,228,247,237,252,252,230,244],
[241,246,250,280,282,0,257,259,260,269,253,269,278,257,270],
[227,244,245,269,255,244,0,244,245,263,258,242,229,279,263],
[256,256,269,265,270,242,257,0,268,294,260,276,254,268,276],
[235,258,236,278,273,241,256,233,0,283,254,253,256,259,257],
[217,217,215,235,254,232,238,207,218,0,223,222,220,215,229],
[255,247,253,277,264,248,243,241,247,278,0,264,246,264,254],
[248,229,259,244,249,232,259,225,248,279,237,0,228,238,266],
[253,252,256,261,249,223,272,247,245,281,255,273,0,273,271],
[240,239,233,262,271,244,222,233,242,286,237,263,228,0,228],
[247,248,220,279,257,231,238,225,244,272,247,235,230,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 169, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,240,243,235,234,240,232,238,257,241,246,232,240,253],
[263,0,250,243,245,249,255,232,238,249,252,263,238,245,266],
[261,251,0,247,249,236,254,223,222,256,241,239,233,252,254],
[258,258,254,0,249,222,242,237,246,252,245,256,237,253,256],
[266,256,252,252,0,220,257,243,245,254,244,249,237,254,253],
[267,252,265,279,281,0,260,234,250,265,262,259,250,268,281],
[261,246,247,259,244,241,0,236,236,253,233,248,247,246,251],
[269,269,278,264,258,267,265,0,275,265,262,267,263,246,269],
[263,263,279,255,256,251,265,226,0,272,249,263,243,258,259],
[244,252,245,249,247,236,248,236,229,0,225,233,236,251,265],
[260,249,260,256,257,239,268,239,252,276,0,267,258,257,262],
[255,238,262,245,252,242,253,234,238,268,234,0,246,243,249],
[269,263,268,264,264,251,254,238,258,265,243,255,0,253,265],
[261,256,249,248,247,233,255,255,243,250,244,258,248,0,257],
[248,235,247,245,248,220,250,232,242,236,239,252,236,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 170, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,276,255,276,265,264,263,266,251,258,261,270,295,245],
[227,0,252,253,257,243,237,252,252,248,265,260,267,261,262],
[225,249,0,248,252,235,230,253,222,241,241,238,261,263,252],
[246,248,253,0,256,238,232,250,231,233,240,243,252,255,236],
[225,244,249,245,0,254,251,260,239,242,274,234,244,260,251],
[236,258,266,263,247,0,227,245,238,235,257,236,239,272,240],
[237,264,271,269,250,274,0,255,258,267,286,266,260,259,252],
[238,249,248,251,241,256,246,0,248,252,252,275,262,267,262],
[235,249,279,270,262,263,243,253,0,244,260,249,257,283,262],
[250,253,260,268,259,266,234,249,257,0,266,241,249,256,250],
[243,236,260,261,227,244,215,249,241,235,0,241,250,266,228],
[240,241,263,258,267,265,235,226,252,260,260,0,251,262,251],
[231,234,240,249,257,262,241,239,244,252,251,250,0,255,250],
[206,240,238,246,241,229,242,234,218,245,235,239,246,0,234],
[256,239,249,265,250,261,249,239,239,251,273,250,251,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 171, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,246,257,240,254,242,238,260,221,231,245,231,239,234],
[259,0,252,272,268,272,271,254,273,228,253,253,263,257,268],
[255,249,0,264,243,245,243,248,264,237,240,237,252,240,248],
[244,229,237,0,227,247,244,223,255,219,217,228,234,235,222],
[261,233,258,274,0,260,250,241,252,253,243,252,254,248,251],
[247,229,256,254,241,0,239,229,260,216,232,250,237,227,237],
[259,230,258,257,251,262,0,241,268,239,238,244,238,241,241],
[263,247,253,278,260,272,260,0,268,252,252,270,262,249,241],
[241,228,237,246,249,241,233,233,0,209,221,226,231,224,230],
[280,273,264,282,248,285,262,249,292,0,251,278,263,247,258],
[270,248,261,284,258,269,263,249,280,250,0,248,257,257,250],
[256,248,264,273,249,251,257,231,275,223,253,0,242,248,253],
[270,238,249,267,247,264,263,239,270,238,244,259,0,244,262],
[262,244,261,266,253,274,260,252,277,254,244,253,257,0,260],
[267,233,253,279,250,264,260,260,271,243,251,248,239,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 172, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,246,244,279,256,269,244,239,263,265,278,241,246,266],
[256,0,255,243,279,237,283,254,250,286,262,280,263,248,268],
[255,246,0,254,262,241,285,250,255,289,272,267,243,242,289],
[257,258,247,0,269,246,254,241,242,285,262,274,257,252,271],
[222,222,239,232,0,227,247,223,218,245,244,255,228,230,240],
[245,264,260,255,274,0,254,265,234,279,282,269,259,258,274],
[232,218,216,247,254,247,0,237,228,269,245,242,228,229,252],
[257,247,251,260,278,236,264,0,251,278,274,276,240,257,269],
[262,251,246,259,283,267,273,250,0,265,263,295,280,276,285],
[238,215,212,216,256,222,232,223,236,0,248,241,227,223,257],
[236,239,229,239,257,219,256,227,238,253,0,242,232,235,239],
[223,221,234,227,246,232,259,225,206,260,259,0,235,230,248],
[260,238,258,244,273,242,273,261,221,274,269,266,0,238,267],
[255,253,259,249,271,243,272,244,225,278,266,271,263,0,272],
[235,233,212,230,261,227,249,232,216,244,262,253,234,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 173, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,263,275,281,280,250,271,279,252,257,279,247,275,269],
[238,0,262,277,241,258,255,259,267,246,255,256,251,276,260],
[238,239,0,257,258,263,259,245,246,240,243,252,247,259,245],
[226,224,244,0,255,238,232,235,237,223,239,263,234,253,249],
[220,260,243,246,0,258,229,250,247,248,255,268,249,267,250],
[221,243,238,263,243,0,224,244,248,230,247,252,243,244,249],
[251,246,242,269,272,277,0,264,262,249,257,263,249,263,279],
[230,242,256,266,251,257,237,0,251,251,265,272,252,259,249],
[222,234,255,264,254,253,239,250,0,234,254,259,229,271,248],
[249,255,261,278,253,271,252,250,267,0,252,270,243,268,275],
[244,246,258,262,246,254,244,236,247,249,0,256,239,265,263],
[222,245,249,238,233,249,238,229,242,231,245,0,240,257,254],
[254,250,254,267,252,258,252,249,272,258,262,261,0,267,265],
[226,225,242,248,234,257,238,242,230,233,236,244,234,0,233],
[232,241,256,252,251,252,222,252,253,226,238,247,236,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 174, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,201,204,221,192,240,242,282,273,249,246,200,240,219],
[239,0,241,220,233,209,289,229,296,223,221,270,221,285,222],
[300,260,0,245,296,222,334,245,301,255,270,281,253,292,221],
[297,281,256,0,296,231,334,261,315,265,264,280,188,258,253],
[280,268,205,205,0,210,287,205,267,221,238,252,218,216,197],
[309,292,279,270,291,0,336,268,318,251,291,271,269,309,228],
[261,212,167,167,214,165,0,193,272,184,193,204,202,221,155],
[259,272,256,240,296,233,308,0,287,287,251,277,246,266,245],
[219,205,200,186,234,183,229,214,0,223,189,202,174,238,146],
[228,278,246,236,280,250,317,214,278,0,251,259,235,241,222],
[252,280,231,237,263,210,308,250,312,250,0,254,239,274,216],
[255,231,220,221,249,230,297,224,299,242,247,0,210,269,204],
[301,280,248,313,283,232,299,255,327,266,262,291,0,305,229],
[261,216,209,243,285,192,280,235,263,260,227,232,196,0,220],
[282,279,280,248,304,273,346,256,355,279,285,297,272,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 175, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,249,288,226,241,280,271,285,234,252,282,250,275,270],
[279,0,270,252,233,268,258,241,257,246,260,257,292,235,237],
[252,231,0,273,228,265,278,236,244,253,254,255,247,255,257],
[213,249,228,0,228,244,258,235,244,241,220,258,247,230,233],
[275,268,273,273,0,277,280,242,261,253,222,268,264,255,257],
[260,233,236,257,224,0,262,248,260,229,245,283,224,239,237],
[221,243,223,243,221,239,0,192,225,230,212,238,235,204,217],
[230,260,265,266,259,253,309,0,307,248,254,275,271,250,251],
[216,244,257,257,240,241,276,194,0,229,240,225,209,225,239],
[267,255,248,260,248,272,271,253,272,0,269,252,293,243,254],
[249,241,247,281,279,256,289,247,261,232,0,264,235,222,218],
[219,244,246,243,233,218,263,226,276,249,237,0,251,249,258],
[251,209,254,254,237,277,266,230,292,208,266,250,0,246,256],
[226,266,246,271,246,262,297,251,276,258,279,252,255,0,251],
[231,264,244,268,244,264,284,250,262,247,283,243,245,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 176, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,227,245,254,231,229,258,259,237,241,245,241,269,256],
[252,0,229,240,281,224,222,261,265,242,254,233,241,275,243],
[274,272,0,257,281,248,251,268,284,257,283,244,257,258,262],
[256,261,244,0,248,247,232,272,261,241,247,249,258,257,250],
[247,220,220,253,0,225,213,259,256,223,221,219,230,278,247],
[270,277,253,254,276,0,251,274,284,247,272,264,255,283,276],
[272,279,250,269,288,250,0,291,280,272,277,266,261,291,277],
[243,240,233,229,242,227,210,0,235,227,242,228,230,258,249],
[242,236,217,240,245,217,221,266,0,243,250,242,219,258,258],
[264,259,244,260,278,254,229,274,258,0,254,259,257,279,270],
[260,247,218,254,280,229,224,259,251,247,0,255,227,259,225],
[256,268,257,252,282,237,235,273,259,242,246,0,243,273,268],
[260,260,244,243,271,246,240,271,282,244,274,258,0,258,252],
[232,226,243,244,223,218,210,243,243,222,242,228,243,0,241],
[245,258,239,251,254,225,224,252,243,231,276,233,249,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 177, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,254,245,239,251,256,260,224,237,256,228,257,249,240],
[263,0,286,255,239,265,280,268,251,253,246,227,272,260,240],
[247,215,0,219,213,241,233,220,220,224,237,215,232,235,227],
[256,246,282,0,237,258,254,265,258,247,258,259,275,264,255],
[262,262,288,264,0,287,279,254,247,276,264,248,266,265,276],
[250,236,260,243,214,0,238,222,217,221,234,230,256,225,235],
[245,221,268,247,222,263,0,239,233,247,243,222,251,241,245],
[241,233,281,236,247,279,262,0,229,244,263,241,271,268,251],
[277,250,281,243,254,284,268,272,0,262,255,260,276,276,256],
[264,248,277,254,225,280,254,257,239,0,242,241,268,253,260],
[245,255,264,243,237,267,258,238,246,259,0,228,246,262,226],
[273,274,286,242,253,271,279,260,241,260,273,0,290,267,261],
[244,229,269,226,235,245,250,230,225,233,255,211,0,227,232],
[252,241,266,237,236,276,260,233,225,248,239,234,274,0,248],
[261,261,274,246,225,266,256,250,245,241,275,240,269,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 178, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,264,252,276,278,261,263,245,252,259,255,257,261,260],
[229,0,230,227,248,243,236,235,220,229,229,232,235,236,220],
[237,271,0,242,270,241,257,258,248,250,257,251,254,262,224],
[249,274,259,0,264,257,259,256,261,255,261,251,248,252,247],
[225,253,231,237,0,253,257,247,226,244,236,240,235,234,235],
[223,258,260,244,248,0,246,244,254,261,247,227,248,248,216],
[240,265,244,242,244,255,0,242,259,265,249,238,247,243,227],
[238,266,243,245,254,257,259,0,250,265,247,253,256,248,233],
[256,281,253,240,275,247,242,251,0,254,248,243,246,267,239],
[249,272,251,246,257,240,236,236,247,0,248,244,256,236,233],
[242,272,244,240,265,254,252,254,253,253,0,251,245,249,245],
[246,269,250,250,261,274,263,248,258,257,250,0,263,246,230],
[244,266,247,253,266,253,254,245,255,245,256,238,0,251,231],
[240,265,239,249,267,253,258,253,234,265,252,255,250,0,245],
[241,281,277,254,266,285,274,268,262,268,256,271,270,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 179, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,229,252,249,242,233,247,249,251,239,264,242,247,248],
[264,0,250,268,263,257,251,251,271,266,244,260,257,252,266],
[272,251,0,272,260,255,260,264,271,269,266,276,243,256,252],
[249,233,229,0,250,244,234,243,259,258,250,255,247,246,247],
[252,238,241,251,0,239,245,240,248,237,255,253,232,248,230],
[259,244,246,257,262,0,243,260,253,266,252,264,243,265,257],
[268,250,241,267,256,258,0,257,264,257,262,261,263,260,246],
[254,250,237,258,261,241,244,0,263,258,246,248,241,247,247],
[252,230,230,242,253,248,237,238,0,249,244,255,252,247,232],
[250,235,232,243,264,235,244,243,252,0,248,261,260,252,237],
[262,257,235,251,246,249,239,255,257,253,0,253,237,249,235],
[237,241,225,246,248,237,240,253,246,240,248,0,234,245,232],
[259,244,258,254,269,258,238,260,249,241,264,267,0,263,245],
[254,249,245,255,253,236,241,254,254,249,252,256,238,0,242],
[253,235,249,254,271,244,255,254,269,264,266,269,256,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 180, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,240,228,217,249,222,238,221,245,249,235,246,244,251],
[259,0,238,225,231,233,225,217,214,215,232,219,250,224,231],
[261,263,0,250,258,247,221,250,227,256,250,247,242,228,249],
[273,276,251,0,249,261,241,252,238,253,259,229,266,250,254],
[284,270,243,252,0,255,240,263,237,254,263,246,282,244,272],
[252,268,254,240,246,0,238,243,225,231,252,232,251,236,249],
[279,276,280,260,261,263,0,271,234,260,269,234,281,249,249],
[263,284,251,249,238,258,230,0,233,245,253,240,254,249,247],
[280,287,274,263,264,276,267,268,0,253,254,246,279,259,260],
[256,286,245,248,247,270,241,256,248,0,241,220,268,246,251],
[252,269,251,242,238,249,232,248,247,260,0,233,257,254,244],
[266,282,254,272,255,269,267,261,255,281,268,0,270,248,249],
[255,251,259,235,219,250,220,247,222,233,244,231,0,233,231],
[257,277,273,251,257,265,252,252,242,255,247,253,268,0,237],
[250,270,252,247,229,252,252,254,241,250,257,252,270,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 181, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,260,257,242,264,270,265,247,276,266,264,265,262,255],
[275,0,260,261,259,289,249,243,259,255,267,289,272,281,240],
[241,241,0,257,259,256,228,239,257,225,258,252,279,249,235],
[244,240,244,0,252,251,251,233,262,266,268,261,264,284,235],
[259,242,242,249,0,242,220,248,305,236,240,273,243,260,231],
[237,212,245,250,259,0,247,241,241,228,257,239,264,252,222],
[231,252,273,250,281,254,0,239,249,273,270,256,273,264,245],
[236,258,262,268,253,260,262,0,266,241,277,275,266,262,261],
[254,242,244,239,196,260,252,235,0,227,253,289,263,260,233],
[225,246,276,235,265,273,228,260,274,0,280,260,266,268,242],
[235,234,243,233,261,244,231,224,248,221,0,248,265,270,230],
[237,212,249,240,228,262,245,226,212,241,253,0,250,251,232],
[236,229,222,237,258,237,228,235,238,235,236,251,0,269,225],
[239,220,252,217,241,249,237,239,241,233,231,250,232,0,230],
[246,261,266,266,270,279,256,240,268,259,271,269,276,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 182, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,237,242,260,239,229,251,224,254,251,222,234,245,231],
[273,0,282,260,272,265,285,265,247,262,264,251,257,248,266],
[264,219,0,273,258,272,262,247,225,232,255,236,244,224,260],
[259,241,228,0,253,242,250,246,225,277,225,240,244,238,251],
[241,229,243,248,0,216,242,251,211,221,209,241,237,214,222],
[262,236,229,259,285,0,234,235,258,258,237,249,243,236,238],
[272,216,239,251,259,267,0,233,219,243,269,227,235,208,263],
[250,236,254,255,250,266,268,0,241,233,229,235,246,234,261],
[277,254,276,276,290,243,282,260,0,291,254,250,266,230,263],
[247,239,269,224,280,243,258,268,210,0,241,246,223,235,247],
[250,237,246,276,292,264,232,272,247,260,0,236,266,243,260],
[279,250,265,261,260,252,274,266,251,255,265,0,266,257,258],
[267,244,257,257,264,258,266,255,235,278,235,235,0,236,229],
[256,253,277,263,287,265,293,267,271,266,258,244,265,0,280],
[270,235,241,250,279,263,238,240,238,254,241,243,272,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 183, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,261,213,239,239,260,235,216,243,218,261,263,259,215],
[279,0,271,253,221,257,270,235,218,242,244,270,259,249,214],
[240,230,0,262,190,272,271,220,202,228,234,234,256,233,229],
[288,248,239,0,228,259,278,251,213,219,234,260,258,254,211],
[262,280,311,273,0,282,287,256,251,268,270,267,278,246,259],
[262,244,229,242,219,0,255,242,217,227,244,232,254,252,240],
[241,231,230,223,214,246,0,226,205,227,212,214,232,242,226],
[266,266,281,250,245,259,275,0,228,227,235,254,273,246,247],
[285,283,299,288,250,284,296,273,0,255,256,268,256,259,262],
[258,259,273,282,233,274,274,274,246,0,257,252,242,258,250],
[283,257,267,267,231,257,289,266,245,244,0,269,257,267,253],
[240,231,267,241,234,269,287,247,233,249,232,0,249,241,217],
[238,242,245,243,223,247,269,228,245,259,244,252,0,247,225],
[242,252,268,247,255,249,259,255,242,243,234,260,254,0,226],
[286,287,272,290,242,261,275,254,239,251,248,284,276,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 184, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,241,239,252,254,245,240,251,258,255,274,248,252,245],
[255,0,246,256,252,258,252,265,248,267,252,264,240,247,240],
[260,255,0,250,262,267,247,252,261,264,254,271,242,260,238],
[262,245,251,0,241,257,251,249,242,265,259,252,238,246,250],
[249,249,239,260,0,249,233,232,246,258,246,253,228,253,250],
[247,243,234,244,252,0,244,224,233,245,233,240,237,244,242],
[256,249,254,250,268,257,0,243,249,259,250,262,247,254,253],
[261,236,249,252,269,277,258,0,259,270,254,261,255,261,256],
[250,253,240,259,255,268,252,242,0,256,254,272,240,262,226],
[243,234,237,236,243,256,242,231,245,0,247,253,238,248,249],
[246,249,247,242,255,268,251,247,247,254,0,274,246,243,243],
[227,237,230,249,248,261,239,240,229,248,227,0,231,237,234],
[253,261,259,263,273,264,254,246,261,263,255,270,0,263,261],
[249,254,241,255,248,257,247,240,239,253,258,264,238,0,251],
[256,261,263,251,251,259,248,245,275,252,258,267,240,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 185, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,251,267,258,248,263,231,260,256,274,238,270,250,244],
[234,0,257,242,246,253,230,234,246,247,254,261,255,257,226],
[250,244,0,264,254,270,232,238,260,266,260,246,265,242,232],
[234,259,237,0,264,249,239,251,228,273,250,244,264,249,245],
[243,255,247,237,0,248,245,238,242,251,253,237,270,243,227],
[253,248,231,252,253,0,237,226,244,252,268,244,260,247,231],
[238,271,269,262,256,264,0,245,261,259,266,266,280,248,246],
[270,267,263,250,263,275,256,0,259,284,258,264,283,259,251],
[241,255,241,273,259,257,240,242,0,270,248,251,253,239,234],
[245,254,235,228,250,249,242,217,231,0,255,242,265,228,229],
[227,247,241,251,248,233,235,243,253,246,0,250,260,239,222],
[263,240,255,257,264,257,235,237,250,259,251,0,254,247,240],
[231,246,236,237,231,241,221,218,248,236,241,247,0,231,222],
[251,244,259,252,258,254,253,242,262,273,262,254,270,0,240],
[257,275,269,256,274,270,255,250,267,272,279,261,279,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 186, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,278,250,257,258,284,274,270,277,254,252,263,279,258],
[227,0,241,218,231,220,244,251,242,239,237,222,235,227,238],
[223,260,0,225,236,244,254,252,245,260,248,227,224,212,247],
[251,283,276,0,263,271,285,269,280,267,265,245,274,262,270],
[244,270,265,238,0,237,241,253,271,229,264,237,239,230,251],
[243,281,257,230,264,0,259,263,262,262,271,242,251,251,260],
[217,257,247,216,260,242,0,246,247,239,249,214,234,236,241],
[227,250,249,232,248,238,255,0,252,250,257,226,238,238,248],
[231,259,256,221,230,239,254,249,0,230,226,230,241,231,234],
[224,262,241,234,272,239,262,251,271,0,257,224,242,250,263],
[247,264,253,236,237,230,252,244,275,244,0,245,248,249,238],
[249,279,274,256,264,259,287,275,271,277,256,0,278,267,275],
[238,266,277,227,262,250,267,263,260,259,253,223,0,254,257],
[222,274,289,239,271,250,265,263,270,251,252,234,247,0,272],
[243,263,254,231,250,241,260,253,267,238,263,226,244,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 187, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,207,202,259,199,264,248,187,251,195,255,286,280,178],
[241,0,271,280,341,262,295,261,271,265,241,295,357,341,249],
[294,230,0,335,354,266,264,278,220,284,277,334,331,324,235],
[299,221,166,0,273,265,250,259,198,260,216,330,312,250,207],
[242,160,147,228,0,199,271,161,183,184,182,272,227,226,167],
[302,239,235,236,302,0,283,260,245,233,228,271,297,289,259],
[237,206,237,251,230,218,0,220,225,197,233,243,255,251,197],
[253,240,223,242,340,241,281,0,260,287,241,262,265,301,181],
[314,230,281,303,318,256,276,241,0,266,253,282,315,301,199],
[250,236,217,241,317,268,304,214,235,0,257,277,313,267,222],
[306,260,224,285,319,273,268,260,248,244,0,292,283,325,215],
[246,206,167,171,229,230,258,239,219,224,209,0,258,236,203],
[215,144,170,189,274,204,246,236,186,188,218,243,0,244,172],
[221,160,177,251,275,212,250,200,200,234,176,265,257,0,161],
[323,252,266,294,334,242,304,320,302,279,286,298,329,340,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 188, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,161,161,238,209,273,376,273,200,447,323,274,297,225],
[178,0,136,209,262,103,139,289,302,200,400,305,187,210,267],
[340,365,0,471,388,227,263,413,450,379,477,376,316,384,315],
[340,292,30,0,102,152,263,290,301,242,390,266,142,214,194],
[263,239,113,399,0,74,263,336,275,326,313,276,113,186,141],
[292,398,274,349,427,0,398,339,299,350,472,398,137,321,300],
[228,362,238,238,238,103,0,337,302,165,477,352,216,374,330],
[125,212,88,211,165,162,164,0,211,212,398,276,113,271,228],
[228,199,51,200,226,202,199,290,0,151,361,287,113,260,289],
[301,301,122,259,175,151,336,289,350,0,360,352,187,260,315],
[54,101,24,111,188,29,24,103,140,141,0,252,137,136,117],
[178,196,125,235,225,103,149,225,214,149,249,0,163,260,191],
[227,314,185,359,388,364,285,388,388,314,364,338,0,283,388],
[204,291,117,287,315,180,127,230,241,241,365,241,218,0,244],
[276,234,186,307,360,201,171,273,212,186,384,310,113,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 189, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,252,256,256,273,242,272,253,250,281,256,261,271,270],
[239,0,264,260,232,253,233,263,269,230,267,238,266,271,268],
[249,237,0,241,245,256,236,255,238,229,254,248,268,264,263],
[245,241,260,0,243,271,254,276,251,243,256,256,246,269,284],
[245,269,256,258,0,268,254,258,255,253,295,265,278,281,289],
[228,248,245,230,233,0,254,252,260,250,249,243,263,250,250],
[259,268,265,247,247,247,0,264,262,247,277,261,274,245,275],
[229,238,246,225,243,249,237,0,243,235,240,233,237,255,257],
[248,232,263,250,246,241,239,258,0,242,259,248,268,264,273],
[251,271,272,258,248,251,254,266,259,0,270,249,266,241,267],
[220,234,247,245,206,252,224,261,242,231,0,244,269,255,239],
[245,263,253,245,236,258,240,268,253,252,257,0,274,268,251],
[240,235,233,255,223,238,227,264,233,235,232,227,0,238,279],
[230,230,237,232,220,251,256,246,237,260,246,233,263,0,256],
[231,233,238,217,212,251,226,244,228,234,262,250,222,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 190, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,202,147,172,206,160,172,219,197,179,158,221,257,240],
[292,0,223,227,247,217,245,222,233,273,211,262,206,227,260],
[299,278,0,208,280,268,232,238,250,234,236,186,223,272,272],
[354,274,293,0,251,231,257,242,280,263,256,245,268,292,284],
[329,254,221,250,0,219,195,224,265,283,246,217,250,260,269],
[295,284,233,270,282,0,225,221,275,271,200,266,257,241,246],
[341,256,269,244,306,276,0,268,268,256,230,204,301,268,237],
[329,279,263,259,277,280,233,0,254,238,221,208,249,249,231],
[282,268,251,221,236,226,233,247,0,227,190,198,219,256,256],
[304,228,267,238,218,230,245,263,274,0,244,198,215,263,264],
[322,290,265,245,255,301,271,280,311,257,0,212,280,299,312],
[343,239,315,256,284,235,297,293,303,303,289,0,304,233,340],
[280,295,278,233,251,244,200,252,282,286,221,197,0,271,312],
[244,274,229,209,241,260,233,252,245,238,202,268,230,0,318],
[261,241,229,217,232,255,264,270,245,237,189,161,189,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 191, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,278,274,237,264,196,229,231,296,226,289,198,191,286],
[248,0,227,191,294,187,166,169,178,284,273,231,223,255,279],
[223,274,0,281,269,255,268,249,289,360,309,299,271,238,212],
[227,310,220,0,190,193,242,178,209,324,289,251,182,206,225],
[264,207,232,311,0,156,248,167,164,335,313,196,168,258,268],
[237,314,246,308,345,0,322,269,247,304,350,273,212,262,255],
[305,335,233,259,253,179,0,193,240,278,330,269,239,216,299],
[272,332,252,323,334,232,308,0,246,388,359,286,235,257,268],
[270,323,212,292,337,254,261,255,0,307,331,281,198,224,231],
[205,217,141,177,166,197,223,113,194,0,262,231,233,188,261],
[275,228,192,212,188,151,171,142,170,239,0,194,156,195,193],
[212,270,202,250,305,228,232,215,220,270,307,0,212,195,213],
[303,278,230,319,333,289,262,266,303,268,345,289,0,232,296],
[310,246,263,295,243,239,285,244,277,313,306,306,269,0,295],
[215,222,289,276,233,246,202,233,270,240,308,288,205,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 192, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,173,216,291,281,284,232,268,234,243,283,261,267,268],
[216,0,172,187,249,299,277,220,205,241,244,247,191,240,197],
[328,329,0,272,334,340,327,289,279,297,242,312,298,280,308],
[285,314,229,0,270,354,305,226,315,295,276,315,289,296,259],
[210,252,167,231,0,277,211,194,250,196,212,227,188,215,204],
[220,202,161,147,224,0,215,146,209,184,177,183,168,221,195],
[217,224,174,196,290,286,0,247,230,226,220,294,301,257,214],
[269,281,212,275,307,355,254,0,313,269,266,310,222,238,277],
[233,296,222,186,251,292,271,188,0,265,260,288,253,255,243],
[267,260,204,206,305,317,275,232,236,0,216,251,257,256,261],
[258,257,259,225,289,324,281,235,241,285,0,260,275,244,247],
[218,254,189,186,274,318,207,191,213,250,241,0,200,263,252],
[240,310,203,212,313,333,200,279,248,244,226,301,0,233,293],
[234,261,221,205,286,280,244,263,246,245,257,238,268,0,221],
[233,304,193,242,297,306,287,224,258,240,254,249,208,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 193, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,237,273,254,238,243,270,249,240,244,241,230,245,246],
[260,0,253,260,260,247,253,278,242,246,253,234,240,243,241],
[264,248,0,260,258,244,242,262,256,259,254,235,228,250,234],
[228,241,241,0,248,246,244,264,259,239,254,243,226,235,237],
[247,241,243,253,0,241,241,271,259,239,243,237,239,243,230],
[263,254,257,255,260,0,255,273,254,246,237,246,242,242,249],
[258,248,259,257,260,246,0,262,253,233,253,255,236,257,222],
[231,223,239,237,230,228,239,0,224,222,221,230,226,209,228],
[252,259,245,242,242,247,248,277,0,233,238,256,241,254,235],
[261,255,242,262,262,255,268,279,268,0,254,256,243,270,247],
[257,248,247,247,258,264,248,280,263,247,0,252,252,253,264],
[260,267,266,258,264,255,246,271,245,245,249,0,232,267,239],
[271,261,273,275,262,259,265,275,260,258,249,269,0,270,265],
[256,258,251,266,258,259,244,292,247,231,248,234,231,0,243],
[255,260,267,264,271,252,279,273,266,254,237,262,236,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 194, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,262,266,235,247,254,211,211,311,254,285,269,263,218],
[210,0,269,210,265,222,247,203,189,246,212,246,208,239,204],
[239,232,0,261,239,235,236,218,205,236,198,264,208,201,195],
[235,291,240,0,264,250,224,224,228,270,202,248,259,239,209],
[266,236,262,237,0,217,235,235,170,254,217,229,246,244,214],
[254,279,266,251,284,0,254,236,214,260,223,238,260,258,227],
[247,254,265,277,266,247,0,221,181,257,246,244,234,248,220],
[290,298,283,277,266,265,280,0,210,284,278,255,223,242,220],
[290,312,296,273,331,287,320,291,0,315,287,327,289,259,233],
[190,255,265,231,247,241,244,217,186,0,227,233,218,236,192],
[247,289,303,299,284,278,255,223,214,274,0,283,280,249,235],
[216,255,237,253,272,263,257,246,174,268,218,0,226,233,194],
[232,293,293,242,255,241,267,278,212,283,221,275,0,273,260],
[238,262,300,262,257,243,253,259,242,265,252,268,228,0,212],
[283,297,306,292,287,274,281,281,268,309,266,307,241,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 195, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,238,264,242,272,261,278,248,255,247,258,263,254,249],
[241,0,258,254,244,272,250,259,266,235,247,240,286,257,258],
[263,243,0,275,250,275,248,280,263,235,249,239,265,248,266],
[237,247,226,0,247,274,228,256,258,252,229,230,269,238,256],
[259,257,251,254,0,262,257,284,265,242,248,237,272,245,248],
[229,229,226,227,239,0,218,244,249,225,237,218,240,227,250],
[240,251,253,273,244,283,0,255,248,253,240,239,256,255,264],
[223,242,221,245,217,257,246,0,258,259,244,231,249,245,244],
[253,235,238,243,236,252,253,243,0,226,242,218,261,241,244],
[246,266,266,249,259,276,248,242,275,0,238,222,283,271,263],
[254,254,252,272,253,264,261,257,259,263,0,244,261,252,259],
[243,261,262,271,264,283,262,270,283,279,257,0,270,281,264],
[238,215,236,232,229,261,245,252,240,218,240,231,0,227,219],
[247,244,253,263,256,274,246,256,260,230,249,220,274,0,243],
[252,243,235,245,253,251,237,257,257,238,242,237,282,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 196, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,243,271,270,264,257,244,263,260,252,251,259,275,249],
[247,0,235,260,256,246,248,266,261,257,243,242,260,258,250],
[258,266,0,263,274,270,265,249,261,264,248,243,268,271,261],
[230,241,238,0,249,256,246,242,236,264,244,227,250,256,232],
[231,245,227,252,0,247,237,247,243,254,248,232,255,254,238],
[237,255,231,245,254,0,239,233,241,246,238,233,248,267,235],
[244,253,236,255,264,262,0,256,252,244,224,229,263,245,248],
[257,235,252,259,254,268,245,0,252,265,249,249,257,250,258],
[238,240,240,265,258,260,249,249,0,252,247,237,245,251,233],
[241,244,237,237,247,255,257,236,249,0,241,234,262,263,253],
[249,258,253,257,253,263,277,252,254,260,0,247,277,249,247],
[250,259,258,274,269,268,272,252,264,267,254,0,266,256,243],
[242,241,233,251,246,253,238,244,256,239,224,235,0,252,240],
[226,243,230,245,247,234,256,251,250,238,252,245,249,0,246],
[252,251,240,269,263,266,253,243,268,248,254,258,261,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 197, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,252,242,242,241,259,245,249,266,251,244,259,246,256],
[251,0,252,246,233,233,247,241,258,248,242,248,251,248,267],
[249,249,0,250,223,236,251,245,240,237,249,250,241,255,264],
[259,255,251,0,243,232,252,243,248,247,249,245,257,254,258],
[259,268,278,258,0,245,268,254,258,257,262,259,265,269,271],
[260,268,265,269,256,0,278,247,259,249,271,245,266,264,264],
[242,254,250,249,233,223,0,244,239,249,249,245,251,242,250],
[256,260,256,258,247,254,257,0,263,258,263,259,252,260,263],
[252,243,261,253,243,242,262,238,0,243,253,253,258,243,258],
[235,253,264,254,244,252,252,243,258,0,260,264,259,252,252],
[250,259,252,252,239,230,252,238,248,241,0,256,254,254,250],
[257,253,251,256,242,256,256,242,248,237,245,0,262,256,262],
[242,250,260,244,236,235,250,249,243,242,247,239,0,240,252],
[255,253,246,247,232,237,259,241,258,249,247,245,261,0,255],
[245,234,237,243,230,237,251,238,243,249,251,239,249,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 198, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,213,234,233,239,250,266,225,224,263,234,268,264,237],
[244,0,242,244,215,245,259,254,227,237,252,228,237,253,259],
[288,259,0,246,261,251,278,272,257,276,293,283,288,287,290],
[267,257,255,0,241,239,244,259,229,250,247,230,259,265,272],
[268,286,240,260,0,258,262,277,259,260,277,256,281,288,288],
[262,256,250,262,243,0,262,270,250,252,271,233,273,245,264],
[251,242,223,257,239,239,0,256,234,247,261,238,234,259,261],
[235,247,229,242,224,231,245,0,243,233,241,247,236,246,255],
[276,274,244,272,242,251,267,258,0,245,264,248,258,282,278],
[277,264,225,251,241,249,254,268,256,0,261,246,249,254,256],
[238,249,208,254,224,230,240,260,237,240,0,255,251,254,254],
[267,273,218,271,245,268,263,254,253,255,246,0,241,270,273],
[233,264,213,242,220,228,267,265,243,252,250,260,0,241,241],
[237,248,214,236,213,256,242,255,219,247,247,231,260,0,248],
[264,242,211,229,213,237,240,246,223,245,247,228,260,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 199, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,245,264,248,250,250,244,241,265,258,249,252,250,248],
[241,0,249,234,243,250,239,244,225,262,245,234,243,235,244],
[256,252,0,264,250,267,261,259,255,271,272,250,266,258,253],
[237,267,237,0,244,238,250,241,241,256,257,254,244,249,235],
[253,258,251,257,0,250,254,256,247,268,255,240,255,254,260],
[251,251,234,263,251,0,244,242,229,251,253,238,246,247,247],
[251,262,240,251,247,257,0,256,241,266,246,242,242,244,252],
[257,257,242,260,245,259,245,0,238,260,269,252,248,257,248],
[260,276,246,260,254,272,260,263,0,260,271,257,254,254,240],
[236,239,230,245,233,250,235,241,241,0,251,235,235,233,247],
[243,256,229,244,246,248,255,232,230,250,0,237,253,236,247],
[252,267,251,247,261,263,259,249,244,266,264,0,250,252,258],
[249,258,235,257,246,255,259,253,247,266,248,251,0,256,262],
[251,266,243,252,247,254,257,244,247,268,265,249,245,0,263],
[253,257,248,266,241,254,249,253,261,254,254,243,239,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 501, 200, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbd/mebbd_15_501.csv", index=False, header=False)
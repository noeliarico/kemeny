
import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg
from kemeny import sc

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,503,493,508,548,531,512,512,503,509,483,516,525,552,501],
[498,0,527,503,520,522,516,486,462,507,488,498,533,516,467],
[508,474,0,493,526,549,501,519,449,575,518,510,566,513,507],
[493,498,508,0,503,513,520,512,468,525,505,525,533,499,501],
[453,481,475,498,0,495,502,477,482,486,484,494,511,493,475],
[470,479,452,488,506,0,490,496,449,490,479,537,546,474,491],
[489,485,500,481,499,511,0,488,476,521,472,491,529,461,483],
[489,515,482,489,524,505,513,0,477,537,493,510,543,503,477],
[498,539,552,533,519,552,525,524,0,555,530,555,574,540,525],
[492,494,426,476,515,511,480,464,446,0,457,482,524,476,422],
[518,513,483,496,517,522,529,508,471,544,0,533,557,525,512],
[485,503,491,476,507,464,510,491,446,519,468,0,526,457,471],
[476,468,435,468,490,455,472,458,427,477,444,475,0,487,467],
[449,485,488,502,508,527,540,498,461,525,476,544,514,0,452],
[500,534,494,500,526,510,518,524,476,579,489,530,534,549,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 1, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,432,461,429,458,455,458,467,508,482,503,521,484,444],
[558,0,460,521,501,521,525,548,522,562,547,535,549,508,518],
[569,541,0,523,521,550,542,533,526,549,600,557,582,490,529],
[540,480,478,0,482,548,536,546,512,559,512,539,514,495,536],
[572,500,480,519,0,540,511,534,518,526,514,525,579,496,528],
[543,480,451,453,461,0,519,522,490,519,508,530,506,475,479],
[546,476,459,465,490,482,0,511,504,490,487,538,512,494,476],
[543,453,468,455,467,479,490,0,454,493,502,476,512,463,477],
[534,479,475,489,483,511,497,547,0,496,501,519,529,466,495],
[493,439,452,442,475,482,511,508,505,0,493,507,485,448,469],
[519,454,401,489,487,493,514,499,500,508,0,506,536,458,466],
[498,466,444,462,476,471,463,525,482,494,495,0,486,490,465],
[480,452,419,487,422,495,489,489,472,516,465,515,0,486,446],
[517,493,511,506,505,526,507,538,535,553,543,511,515,0,497],
[557,483,472,465,473,522,525,524,506,532,535,536,555,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 2, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,521,530,534,546,483,501,542,518,512,506,509,523,535,512],
[480,0,510,496,489,484,470,511,482,477,487,483,501,493,513],
[471,491,0,471,500,464,463,494,485,469,465,500,481,494,493],
[467,505,530,0,510,483,486,509,489,483,469,489,490,500,493],
[455,512,501,491,0,463,495,508,487,516,471,464,480,511,458],
[518,517,537,518,538,0,506,529,504,500,510,509,522,538,523],
[500,531,538,515,506,495,0,539,519,500,504,489,497,534,522],
[459,490,507,492,493,472,462,0,486,460,471,460,508,507,487],
[483,519,516,512,514,497,482,515,0,504,469,497,520,513,510],
[489,524,532,518,485,501,501,541,497,0,500,524,520,534,518],
[495,514,536,532,530,491,497,530,532,501,0,515,520,541,514],
[492,518,501,512,537,492,512,541,504,477,486,0,483,518,523],
[478,500,520,511,521,479,504,493,481,481,481,518,0,505,507],
[466,508,507,501,490,463,467,494,488,467,460,483,496,0,477],
[489,488,508,508,543,478,479,514,491,483,487,478,494,524,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 3, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,501,492,491,462,508,525,515,487,518,518,463,504,471],
[514,0,485,505,490,466,514,532,493,486,507,523,502,516,495],
[500,516,0,484,505,491,514,533,527,487,513,538,499,513,509],
[509,496,517,0,519,497,533,537,509,492,514,556,515,503,476],
[510,511,496,482,0,490,511,529,500,493,521,525,509,517,468],
[539,535,510,504,511,0,545,544,526,531,526,530,486,528,499],
[493,487,487,468,490,456,0,510,509,456,504,488,475,487,484],
[476,469,468,464,472,457,491,0,483,465,483,495,464,477,478],
[486,508,474,492,501,475,492,518,0,480,508,510,491,492,474],
[514,515,514,509,508,470,545,536,521,0,516,535,496,512,477],
[483,494,488,487,480,475,497,518,493,485,0,500,488,504,463],
[483,478,463,445,476,471,513,506,491,466,501,0,470,500,472],
[538,499,502,486,492,515,526,537,510,505,513,531,0,529,480],
[497,485,488,498,484,473,514,524,509,489,497,501,472,0,525],
[530,506,492,525,533,502,517,523,527,524,538,529,521,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 4, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,525,515,544,507,513,514,508,519,520,543,478,535,551,525],
[476,0,496,551,523,501,507,516,496,467,504,495,524,520,544],
[486,505,0,528,520,524,472,520,508,470,538,466,517,527,517],
[457,450,473,0,476,480,489,490,488,493,518,504,482,476,508],
[494,478,481,525,0,521,458,501,491,469,510,476,497,497,520],
[488,500,477,521,480,0,491,491,492,484,545,499,492,509,521],
[487,494,529,512,543,510,0,529,509,468,528,509,504,502,534],
[493,485,481,511,500,510,472,0,494,486,507,474,493,523,517],
[482,505,493,513,510,509,492,507,0,477,543,493,513,518,506],
[481,534,531,508,532,517,533,515,524,0,562,535,537,518,554],
[458,497,463,483,491,456,473,494,458,439,0,460,477,489,487],
[523,506,535,497,525,502,492,527,508,466,541,0,512,519,539],
[466,477,484,519,504,509,497,508,488,464,524,489,0,522,515],
[450,481,474,525,504,492,499,478,483,483,512,482,479,0,507],
[476,457,484,493,481,480,467,484,495,447,514,462,486,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 5, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,469,546,526,480,500,506,477,517,516,463,486,474,511],
[531,0,508,533,498,495,507,517,489,537,540,499,483,501,510],
[532,493,0,540,500,524,507,505,491,519,542,488,497,508,508],
[455,468,461,0,466,463,485,488,460,514,485,477,461,492,483],
[475,503,501,535,0,520,528,500,479,520,494,499,461,482,524],
[521,506,477,538,481,0,468,490,501,537,506,457,454,456,515],
[501,494,494,516,473,533,0,487,496,549,523,466,492,482,478],
[495,484,496,513,501,511,514,0,463,514,526,499,446,485,485],
[524,512,510,541,522,500,505,538,0,558,558,533,519,492,527],
[484,464,482,487,481,464,452,487,443,0,485,465,429,468,491],
[485,461,459,516,507,495,478,475,443,516,0,455,460,485,465],
[538,502,513,524,502,544,535,502,468,536,546,0,476,508,531],
[515,518,504,540,540,547,509,555,482,572,541,525,0,512,518],
[527,500,493,509,519,545,519,516,509,533,516,493,489,0,504],
[490,491,493,518,477,486,523,516,474,510,536,470,483,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 6, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,449,480,479,495,514,529,463,508,496,510,506,494,475],
[566,0,514,517,553,575,556,539,490,538,519,562,574,533,506],
[552,487,0,458,505,465,539,530,473,537,483,549,499,537,530],
[521,484,543,0,568,540,539,550,521,568,474,519,555,526,500],
[522,448,496,433,0,474,489,487,480,507,460,487,503,504,474],
[506,426,536,461,527,0,485,531,465,518,474,484,542,499,468],
[487,445,462,462,512,516,0,524,461,511,475,466,484,463,495],
[472,462,471,451,514,470,477,0,472,492,461,491,522,512,446],
[538,511,528,480,521,536,540,529,0,561,497,506,532,527,517],
[493,463,464,433,494,483,490,509,440,0,435,488,524,481,491],
[505,482,518,527,541,527,526,540,504,566,0,533,530,563,528],
[491,439,452,482,514,517,535,510,495,513,468,0,546,477,504],
[495,427,502,446,498,459,517,479,469,477,471,455,0,493,459],
[507,468,464,475,497,502,538,489,474,520,438,524,508,0,477],
[526,495,471,501,527,533,506,555,484,510,473,497,542,524,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 7, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,529,480,491,510,514,499,502,465,480,528,491,500,498,497],
[472,0,480,458,512,510,461,489,465,480,493,463,494,486,484],
[521,521,0,467,480,514,484,505,470,485,513,500,499,482,512],
[510,543,534,0,527,531,494,494,510,482,531,538,545,521,492],
[491,489,521,474,0,507,472,499,468,453,494,487,497,495,463],
[487,491,487,470,494,0,478,457,465,471,480,492,480,479,492],
[502,540,517,507,529,523,0,503,494,482,515,522,530,497,522],
[499,512,496,507,502,544,498,0,504,490,524,496,523,495,509],
[536,536,531,491,533,536,507,497,0,505,535,513,514,494,490],
[521,521,516,519,548,530,519,511,496,0,512,547,525,514,516],
[473,508,488,470,507,521,486,477,466,489,0,489,479,486,465],
[510,538,501,463,514,509,479,505,488,454,512,0,513,473,503],
[501,507,502,456,504,521,471,478,487,476,522,488,0,465,474],
[503,515,519,480,506,522,504,506,507,487,515,528,536,0,508],
[504,517,489,509,538,509,479,492,511,485,536,498,527,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 8, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,537,507,523,523,524,496,527,503,500,491,529,558,522,524],
[464,0,456,451,469,460,482,458,466,470,462,455,478,496,478],
[494,545,0,492,536,527,497,496,518,512,522,510,530,536,503],
[478,550,509,0,551,517,480,505,518,479,495,505,533,502,511],
[478,532,465,450,0,468,475,477,504,529,487,475,487,516,481],
[477,541,474,484,533,0,482,507,509,486,463,497,519,502,495],
[505,519,504,521,526,519,0,508,511,502,498,505,514,513,512],
[474,543,505,496,524,494,493,0,499,496,492,513,514,524,509],
[498,535,483,483,497,492,490,502,0,504,465,482,489,502,497],
[501,531,489,522,472,515,499,505,497,0,505,506,535,518,511],
[510,539,479,506,514,538,503,509,536,496,0,514,527,528,512],
[472,546,491,496,526,504,496,488,519,495,487,0,506,502,514],
[443,523,471,468,514,482,487,487,512,466,474,495,0,504,491],
[479,505,465,499,485,499,488,477,499,483,473,499,497,0,489],
[477,523,498,490,520,506,489,492,504,490,489,487,510,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 9, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,512,496,488,496,504,493,484,495,488,496,514,500,510],
[507,0,519,512,493,512,512,523,504,513,508,514,532,529,512],
[489,482,0,493,497,498,481,500,488,493,513,479,530,499,497],
[505,489,508,0,484,494,490,501,498,508,515,505,513,482,501],
[513,508,504,517,0,503,500,516,488,506,518,493,525,503,484],
[505,489,503,507,498,0,496,489,504,495,502,490,505,502,501],
[497,489,520,511,501,505,0,498,488,513,507,487,538,512,505],
[508,478,501,500,485,512,503,0,514,500,507,485,527,510,486],
[517,497,513,503,513,497,513,487,0,513,531,500,516,515,500],
[506,488,508,493,495,506,488,501,488,0,522,475,531,510,492],
[513,493,488,486,483,499,494,494,470,479,0,483,515,486,486],
[505,487,522,496,508,511,514,516,501,526,518,0,536,532,529],
[487,469,471,488,476,496,463,474,485,470,486,465,0,481,493],
[501,472,502,519,498,499,489,491,486,491,515,469,520,0,513],
[491,489,504,500,517,500,496,515,501,509,515,472,508,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 10, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,482,444,452,467,529,463,474,495,449,453,471,477,467],
[540,0,498,479,507,512,560,489,447,494,504,458,470,571,519],
[519,503,0,495,495,532,552,467,485,551,476,484,481,575,476],
[557,522,506,0,492,535,565,554,525,516,493,484,491,552,498],
[549,494,506,509,0,534,572,477,537,517,450,499,470,558,520],
[534,489,469,466,467,0,540,479,502,465,439,474,492,513,448],
[472,441,449,436,429,461,0,455,438,498,420,450,442,477,457],
[538,512,534,447,524,522,546,0,500,503,476,503,514,523,478],
[527,554,516,476,464,499,563,501,0,496,454,515,482,561,519],
[506,507,450,485,484,536,503,498,505,0,464,466,471,529,448],
[552,497,525,508,551,562,581,525,547,537,0,500,529,561,538],
[548,543,517,517,502,527,551,498,486,535,501,0,509,530,482],
[530,531,520,510,531,509,559,487,519,530,472,492,0,550,547],
[524,430,426,449,443,488,524,478,440,472,440,471,451,0,456],
[534,482,525,503,481,553,544,523,482,553,463,519,454,545,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 11, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,524,439,527,518,636,494,541,541,523,494,469,509,478,490],
[477,0,479,489,534,640,477,500,575,524,505,470,522,543,567],
[562,522,0,449,564,627,489,532,517,565,507,540,580,561,569],
[474,512,552,0,533,587,501,506,502,546,445,515,505,529,539],
[483,467,437,468,0,636,448,524,502,557,499,492,476,501,507],
[365,361,374,414,365,0,430,450,406,399,384,402,379,409,430],
[507,524,512,500,553,571,0,468,483,497,498,471,510,485,453],
[460,501,469,495,477,551,533,0,500,446,509,500,563,526,484],
[460,426,484,499,499,595,518,501,0,540,450,496,536,504,495],
[478,477,436,455,444,602,504,555,461,0,495,473,542,514,540],
[507,496,494,556,502,617,503,492,551,506,0,463,470,512,495],
[532,531,461,486,509,599,530,501,505,528,538,0,490,472,507],
[492,479,421,496,525,622,491,438,465,459,531,511,0,440,450],
[523,458,440,472,500,592,516,475,497,487,489,529,561,0,508],
[511,434,432,462,494,571,548,517,506,461,506,494,551,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 12, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,516,505,490,472,489,507,482,497,505,479,474,496,481],
[499,0,499,479,488,472,500,504,519,505,487,464,476,484,472],
[485,502,0,483,483,474,507,485,502,494,490,474,464,493,468],
[496,522,518,0,480,488,503,491,486,512,480,481,467,510,486],
[511,513,518,521,0,495,541,511,498,502,528,508,502,502,483],
[529,529,527,513,506,0,526,524,501,509,535,490,494,509,509],
[512,501,494,498,460,475,0,477,476,486,491,484,475,458,476],
[494,497,516,510,490,477,524,0,500,511,506,498,482,501,493],
[519,482,499,515,503,500,525,501,0,503,523,514,515,504,485],
[504,496,507,489,499,492,515,490,498,0,502,496,478,489,514],
[496,514,511,521,473,466,510,495,478,499,0,481,478,489,480],
[522,537,527,520,493,511,517,503,487,505,520,0,494,488,505],
[527,525,537,534,499,507,526,519,486,523,523,507,0,496,505],
[505,517,508,491,499,492,543,500,497,512,512,513,505,0,500],
[520,529,533,515,518,492,525,508,516,487,521,496,496,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 13, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,492,489,482,486,497,475,508,483,484,484,496,487,484],
[530,0,513,510,511,501,467,500,531,516,503,503,542,479,497],
[509,488,0,512,495,508,483,493,512,516,505,492,493,491,513],
[512,491,489,0,494,520,501,497,511,494,515,491,516,496,493],
[519,490,506,507,0,524,489,501,536,492,499,494,526,472,519],
[515,500,493,481,477,0,502,478,510,467,512,511,520,501,508],
[504,534,518,500,512,499,0,508,525,524,523,525,539,513,538],
[526,501,508,504,500,523,493,0,515,502,521,511,518,499,504],
[493,470,489,490,465,491,476,486,0,465,493,482,505,469,476],
[518,485,485,507,509,534,477,499,536,0,518,505,518,519,497],
[517,498,496,486,502,489,478,480,508,483,0,492,516,485,502],
[517,498,509,510,507,490,476,490,519,496,509,0,527,488,508],
[505,459,508,485,475,481,462,483,496,483,485,474,0,477,506],
[514,522,510,505,529,500,488,502,532,482,516,513,524,0,504],
[517,504,488,508,482,493,463,497,525,504,499,493,495,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 14, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,577,527,555,542,536,504,547,555,497,523,546,535,565,538],
[424,0,469,464,500,473,467,530,523,440,467,497,481,507,476],
[474,532,0,486,496,485,479,523,535,474,462,521,473,537,484],
[446,537,515,0,527,461,456,510,542,493,466,524,517,509,514],
[459,501,505,474,0,491,491,504,502,481,469,517,452,517,539],
[465,528,516,540,510,0,505,531,524,485,506,541,514,509,499],
[497,534,522,545,510,496,0,575,527,493,492,526,499,533,554],
[454,471,478,491,497,470,426,0,532,466,504,496,478,518,538],
[446,478,466,459,499,477,474,469,0,489,479,501,462,515,489],
[504,561,527,508,520,516,508,535,512,0,471,493,494,530,509],
[478,534,539,535,532,495,509,497,522,530,0,520,498,541,509],
[455,504,480,477,484,460,475,505,500,508,481,0,483,508,515],
[466,520,528,484,549,487,502,523,539,507,503,518,0,568,546],
[436,494,464,492,484,492,468,483,486,471,460,493,433,0,469],
[463,525,517,487,462,502,447,463,512,492,492,486,455,532,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 15, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,533,468,472,458,509,509,555,520,501,497,476,494,482,491],
[468,0,517,500,423,503,482,496,453,497,511,484,521,470,491],
[533,484,0,507,480,513,521,571,469,499,560,521,537,516,470],
[529,501,494,0,437,496,468,499,462,485,484,471,521,476,491],
[543,578,521,564,0,532,535,564,565,526,570,496,546,500,541],
[492,498,488,505,469,0,456,481,482,490,498,522,480,478,480],
[492,519,480,533,466,545,0,554,470,494,545,498,550,479,458],
[446,505,430,502,437,520,447,0,479,481,514,454,481,439,422],
[481,548,532,539,436,519,531,522,0,503,548,486,521,505,491],
[500,504,502,516,475,511,507,520,498,0,496,506,541,506,485],
[504,490,441,517,431,503,456,487,453,505,0,450,487,434,419],
[525,517,480,530,505,479,503,547,515,495,551,0,545,503,480],
[507,480,464,480,455,521,451,520,480,460,514,456,0,475,466],
[519,531,485,525,501,523,522,562,496,495,567,498,526,0,485],
[510,510,531,510,460,521,543,579,510,516,582,521,535,516,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 16, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,484,493,508,553,494,468,515,493,507,528,529,509,511],
[515,0,524,495,547,556,518,494,516,479,531,527,519,519,545],
[517,477,0,502,520,529,485,484,496,493,519,507,506,528,522],
[508,506,499,0,512,540,509,487,485,518,527,540,544,517,551],
[493,454,481,489,0,531,490,472,500,489,503,519,514,479,490],
[448,445,472,461,470,0,486,463,493,471,481,483,469,503,495],
[507,483,516,492,511,515,0,468,502,466,500,499,511,518,493],
[533,507,517,514,529,538,533,0,490,484,547,523,531,538,530],
[486,485,505,516,501,508,499,511,0,502,541,506,527,489,527],
[508,522,508,483,512,530,535,517,499,0,551,519,559,536,547],
[494,470,482,474,498,520,501,454,460,450,0,473,528,522,518],
[473,474,494,461,482,518,502,478,495,482,528,0,486,510,494],
[472,482,495,457,487,532,490,470,474,442,473,515,0,514,520],
[492,482,473,484,522,498,483,463,512,465,479,491,487,0,484],
[490,456,479,450,511,506,508,471,474,454,483,507,481,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 17, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,515,474,509,463,504,473,487,490,488,478,504,508,498],
[494,0,499,477,506,461,480,456,520,491,466,465,509,504,485],
[486,502,0,501,516,479,474,482,491,523,492,506,479,528,522],
[527,524,500,0,523,466,494,479,494,515,484,500,535,496,515],
[492,495,485,478,0,457,453,453,506,484,467,476,498,486,483],
[538,540,522,535,544,0,505,509,530,550,514,491,540,509,521],
[497,521,527,507,548,496,0,495,509,510,455,518,518,514,529],
[528,545,519,522,548,492,506,0,519,534,505,488,524,564,518],
[514,481,510,507,495,471,492,482,0,507,477,486,476,536,486],
[511,510,478,486,517,451,491,467,494,0,455,479,503,503,501],
[513,535,509,517,534,487,546,496,524,546,0,514,552,546,545],
[523,536,495,501,525,510,483,513,515,522,487,0,525,531,517],
[497,492,522,466,503,461,483,477,525,498,449,476,0,508,489],
[493,497,473,505,515,492,487,437,465,498,455,470,493,0,498],
[503,516,479,486,518,480,472,483,515,500,456,484,512,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 18, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,523,500,502,520,497,516,533,522,512,505,515,514,494,534],
[478,0,483,457,520,486,517,509,515,517,489,475,518,477,516],
[501,518,0,485,520,525,512,515,529,526,511,538,501,513,509],
[499,544,516,0,543,528,531,534,539,518,515,525,515,507,523],
[481,481,481,458,0,488,517,493,513,493,486,496,509,490,472],
[504,515,476,473,513,0,492,501,503,495,503,490,489,476,490],
[485,484,489,470,484,509,0,501,530,507,492,478,505,484,470],
[468,492,486,467,508,500,500,0,513,501,485,488,514,486,527],
[479,486,472,462,488,498,471,488,0,495,489,489,506,492,493],
[489,484,475,483,508,506,494,500,506,0,494,508,504,465,513],
[496,512,490,486,515,498,509,516,512,507,0,485,512,515,497],
[486,526,463,476,505,511,523,513,512,493,516,0,523,494,492],
[487,483,500,486,492,512,496,487,495,497,489,478,0,477,512],
[507,524,488,494,511,525,517,515,509,536,486,507,524,0,496],
[467,485,492,478,529,511,531,474,508,488,504,509,489,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 19, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,523,478,498,470,504,508,511,505,480,477,459,491,480],
[526,0,540,489,501,502,507,509,503,506,507,489,483,492,519],
[478,461,0,466,505,489,474,468,486,489,458,472,452,474,471],
[523,512,535,0,506,512,512,520,526,543,499,502,497,500,502],
[503,500,496,495,0,479,512,494,502,511,501,489,493,493,488],
[531,499,512,489,522,0,495,504,497,509,485,487,479,488,477],
[497,494,527,489,489,506,0,503,506,501,514,479,483,517,514],
[493,492,533,481,507,497,498,0,507,489,485,491,494,469,529],
[490,498,515,475,499,504,495,494,0,503,510,480,488,489,497],
[496,495,512,458,490,492,500,512,498,0,500,479,496,471,503],
[521,494,543,502,500,516,487,516,491,501,0,488,487,504,486],
[524,512,529,499,512,514,522,510,521,522,513,0,486,496,503],
[542,518,549,504,508,522,518,507,513,505,514,515,0,486,514],
[510,509,527,501,508,513,484,532,512,530,497,505,515,0,493],
[521,482,530,499,513,524,487,472,504,498,515,498,487,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 20, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,493,512,513,495,485,515,508,499,524,512,508,471,506],
[491,0,482,483,512,495,470,487,476,480,537,484,502,480,473],
[508,519,0,535,526,524,503,512,518,497,540,539,529,501,504],
[489,518,466,0,512,515,476,504,489,493,539,530,523,474,505],
[488,489,475,489,0,496,468,481,466,486,511,496,515,486,469],
[506,506,477,486,505,0,480,485,482,471,526,502,504,498,495],
[516,531,498,525,533,521,0,503,515,510,546,522,535,526,511],
[486,514,489,497,520,516,498,0,504,484,519,510,515,502,480],
[493,525,483,512,535,519,486,497,0,486,529,506,506,502,496],
[502,521,504,508,515,530,491,517,515,0,540,525,512,506,518],
[477,464,461,462,490,475,455,482,472,461,0,492,481,479,474],
[489,517,462,471,505,499,479,491,495,476,509,0,488,490,485],
[493,499,472,478,486,497,466,486,495,489,520,513,0,488,506],
[530,521,500,527,515,503,475,499,499,495,522,511,513,0,482],
[495,528,497,496,532,506,490,521,505,483,527,516,495,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 21, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,462,549,496,530,462,489,583,451,574,529,546,580,443],
[519,0,518,554,482,563,502,509,501,455,556,480,504,480,458],
[539,483,0,508,540,512,441,435,510,455,572,469,498,504,442],
[452,447,493,0,489,509,492,477,530,473,506,410,477,516,459],
[505,519,461,512,0,514,421,512,539,415,535,452,490,511,472],
[471,438,489,492,487,0,422,445,513,462,487,497,531,510,471],
[539,499,560,509,580,579,0,511,595,551,593,521,514,524,505],
[512,492,566,524,489,556,490,0,506,467,551,532,529,563,509],
[418,500,491,471,462,488,406,495,0,448,500,455,466,496,426],
[550,546,546,528,586,539,450,534,553,0,559,462,544,516,497],
[427,445,429,495,466,514,408,450,501,442,0,458,447,515,374],
[472,521,532,591,549,504,480,469,546,539,543,0,461,514,473],
[455,497,503,524,511,470,487,472,535,457,554,540,0,533,466],
[421,521,497,485,490,491,477,438,505,485,486,487,468,0,479],
[558,543,559,542,529,530,496,492,575,504,627,528,535,522,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 22, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,524,524,518,538,514,522,537,504,504,526,526,494,494],
[494,0,502,528,516,530,522,501,500,497,488,512,496,517,473],
[477,499,0,518,489,504,499,503,474,494,486,501,530,468,501],
[477,473,483,0,456,505,500,511,484,504,481,504,488,489,486],
[483,485,512,545,0,501,514,521,495,507,484,529,517,506,495],
[463,471,497,496,500,0,495,506,491,500,481,490,505,471,471],
[487,479,502,501,487,506,0,500,486,482,487,511,482,464,483],
[479,500,498,490,480,495,501,0,503,505,480,495,530,490,490],
[464,501,527,517,506,510,515,498,0,484,486,504,481,489,500],
[497,504,507,497,494,501,519,496,517,0,487,519,531,507,496],
[497,513,515,520,517,520,514,521,515,514,0,526,510,504,497],
[475,489,500,497,472,511,490,506,497,482,475,0,499,493,490],
[475,505,471,513,484,496,519,471,520,470,491,502,0,485,490],
[507,484,533,512,495,530,537,511,512,494,497,508,516,0,505],
[507,528,500,515,506,530,518,511,501,505,504,511,511,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 23, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,496,474,500,505,493,501,522,451,495,465,485,482,467],
[507,0,510,496,523,525,504,522,540,486,491,515,530,507,498],
[505,491,0,481,517,507,509,516,539,488,487,504,541,519,485],
[527,505,520,0,516,538,532,524,544,506,496,536,527,510,518],
[501,478,484,485,0,521,512,489,524,476,492,510,521,501,488],
[496,476,494,463,480,0,485,496,521,463,478,471,494,477,463],
[508,497,492,469,489,516,0,496,517,462,482,504,511,499,489],
[500,479,485,477,512,505,505,0,526,483,492,484,522,483,486],
[479,461,462,457,477,480,484,475,0,445,478,454,489,473,457],
[550,515,513,495,525,538,539,518,556,0,510,511,549,528,530],
[506,510,514,505,509,523,519,509,523,491,0,507,519,505,504],
[536,486,497,465,491,530,497,517,547,490,494,0,508,502,506],
[516,471,460,474,480,507,490,479,512,452,482,493,0,496,507],
[519,494,482,491,500,524,502,518,528,473,496,499,505,0,514],
[534,503,516,483,513,538,512,515,544,471,497,495,494,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 24, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,514,493,517,498,520,506,520,513,512,527,530,501,484],
[483,0,513,466,484,522,500,473,483,493,515,501,501,493,476],
[487,488,0,483,481,508,514,454,498,490,518,499,496,481,480],
[508,535,518,0,507,508,487,479,485,519,532,512,506,490,479],
[484,517,520,494,0,514,506,457,512,492,531,534,534,507,517],
[503,479,493,493,487,0,489,444,478,494,511,487,539,477,484],
[481,501,487,514,495,512,0,448,476,505,541,490,537,475,476],
[495,528,547,522,544,557,553,0,530,504,550,529,562,537,506],
[481,518,503,516,489,523,525,471,0,498,545,513,523,507,493],
[488,508,511,482,509,507,496,497,503,0,539,499,531,471,486],
[489,486,483,469,470,490,460,451,456,462,0,490,473,467,453],
[474,500,502,489,467,514,511,472,488,502,511,0,495,503,497],
[471,500,505,495,467,462,464,439,478,470,528,506,0,478,497],
[500,508,520,511,494,524,526,464,494,530,534,498,523,0,490],
[517,525,521,522,484,517,525,495,508,515,548,504,504,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 25, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,487,500,495,498,502,515,479,541,527,521,493,526,510],
[499,0,475,457,470,474,498,458,465,508,505,482,477,477,456],
[514,526,0,500,493,500,513,503,512,537,536,528,500,535,519],
[501,544,501,0,493,508,529,482,501,532,524,507,487,524,530],
[506,531,508,508,0,497,535,503,500,535,517,520,481,517,523],
[503,527,501,493,504,0,514,475,487,536,505,496,458,523,493],
[499,503,488,472,466,487,0,494,482,509,498,476,488,496,483],
[486,543,498,519,498,526,507,0,511,537,554,518,488,536,524],
[522,536,489,500,501,514,519,490,0,547,537,524,509,514,509],
[460,493,464,469,466,465,492,464,454,0,495,454,467,505,500],
[474,496,465,477,484,496,503,447,464,506,0,518,468,506,484],
[480,519,473,494,481,505,525,483,477,547,483,0,482,504,522],
[508,524,501,514,520,543,513,513,492,534,533,519,0,541,495],
[475,524,466,477,484,478,505,465,487,496,495,497,460,0,499],
[491,545,482,471,478,508,518,477,492,501,517,479,506,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 26, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,533,523,516,498,485,502,515,501,526,476,564,511,554,474],
[468,0,461,480,495,467,470,444,480,497,468,511,473,502,449],
[478,540,0,507,502,506,504,479,500,519,500,543,486,539,474],
[485,521,494,0,499,466,505,464,485,508,480,511,476,533,497],
[503,506,499,502,0,504,477,508,465,525,499,537,491,526,478],
[516,534,495,535,497,0,487,496,478,519,489,554,489,528,489],
[499,531,497,496,524,514,0,478,511,541,495,541,491,528,493],
[486,557,522,537,493,505,523,0,500,503,516,529,510,520,495],
[500,521,501,516,536,523,490,501,0,504,511,513,513,522,506],
[475,504,482,493,476,482,460,498,497,0,490,500,503,514,462],
[525,533,501,521,502,512,506,485,490,511,0,523,515,534,487],
[437,490,458,490,464,447,460,472,488,501,478,0,455,494,452],
[490,528,515,525,510,512,510,491,488,498,486,546,0,534,493],
[447,499,462,468,475,473,473,481,479,487,467,507,467,0,460],
[527,552,527,504,523,512,508,506,495,539,514,549,508,541,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 27, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,502,517,540,482,501,525,494,494,487,507,506,477,491],
[504,0,496,520,560,501,515,532,498,522,498,519,540,500,506],
[499,505,0,518,524,494,488,516,499,501,509,511,527,502,491],
[484,481,483,0,513,472,481,530,465,466,469,494,503,478,490],
[461,441,477,488,0,452,457,493,485,455,465,458,502,458,465],
[519,500,507,529,549,0,495,538,498,515,509,504,513,504,503],
[500,486,513,520,544,506,0,547,529,520,489,512,511,514,487],
[476,469,485,471,508,463,454,0,480,479,461,477,497,431,483],
[507,503,502,536,516,503,472,521,0,512,475,515,513,495,519],
[507,479,500,535,546,486,481,522,489,0,489,493,517,518,481],
[514,503,492,532,536,492,512,540,526,512,0,513,521,501,505],
[494,482,490,507,543,497,489,524,486,508,488,0,523,499,493],
[495,461,474,498,499,488,490,504,488,484,480,478,0,472,478],
[524,501,499,523,543,497,487,570,506,483,500,502,529,0,515],
[510,495,510,511,536,498,514,518,482,520,496,508,523,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 28, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,488,441,469,472,488,454,525,480,481,503,480,475,500],
[526,0,563,473,513,487,515,542,520,506,505,549,545,505,530],
[513,438,0,473,498,450,513,484,477,455,433,460,490,472,490],
[560,528,528,0,528,516,526,564,518,493,481,529,493,493,527],
[532,488,503,473,0,492,494,498,496,467,462,462,509,469,517],
[529,514,551,485,509,0,500,500,511,468,500,506,481,485,515],
[513,486,488,475,507,501,0,520,471,440,501,471,532,475,542],
[547,459,517,437,503,501,481,0,509,448,459,501,494,467,472],
[476,481,524,483,505,490,530,492,0,461,476,526,442,458,527],
[521,495,546,508,534,533,561,553,540,0,497,535,508,482,567],
[520,496,568,520,539,501,500,542,525,504,0,514,520,508,533],
[498,452,541,472,539,495,530,500,475,466,487,0,505,447,506],
[521,456,511,508,492,520,469,507,559,493,481,496,0,451,505],
[526,496,529,508,532,516,526,534,543,519,493,554,550,0,536],
[501,471,511,474,484,486,459,529,474,434,468,495,496,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 29, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,500,475,506,513,499,499,487,508,502,493,508,507,505],
[496,0,508,491,511,529,512,506,489,501,524,507,536,513,514],
[501,493,0,490,528,501,513,490,491,502,500,473,505,506,497],
[526,510,511,0,511,523,537,517,501,510,522,497,525,542,504],
[495,490,473,490,0,507,503,499,504,493,513,480,510,510,486],
[488,472,500,478,494,0,486,487,481,479,458,484,490,501,478],
[502,489,488,464,498,515,0,494,488,479,490,477,481,483,473],
[502,495,511,484,502,514,507,0,488,517,505,504,504,517,499],
[514,512,510,500,497,520,513,513,0,508,501,528,502,523,507],
[493,500,499,491,508,522,522,484,493,0,490,484,503,506,497],
[499,477,501,479,488,543,511,496,500,511,0,495,524,507,482],
[508,494,528,504,521,517,524,497,473,517,506,0,517,515,490],
[493,465,496,476,491,511,520,497,499,498,477,484,0,510,520],
[494,488,495,459,491,500,518,484,478,495,494,486,491,0,502],
[496,487,504,497,515,523,528,502,494,504,519,511,481,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 30, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,524,508,496,500,498,492,496,499,506,504,497,475,528],
[498,0,524,515,504,495,521,521,504,492,528,513,511,489,526],
[477,477,0,488,475,513,484,465,476,486,473,493,489,474,495],
[493,486,513,0,502,523,494,487,514,475,479,507,487,473,508],
[505,497,526,499,0,513,486,502,499,486,486,497,480,489,512],
[501,506,488,478,488,0,503,476,487,495,503,497,502,473,512],
[503,480,517,507,515,498,0,511,491,486,501,507,499,488,495],
[509,480,536,514,499,525,490,0,506,515,492,507,507,488,524],
[505,497,525,487,502,514,510,495,0,482,493,544,508,500,511],
[502,509,515,526,515,506,515,486,519,0,513,509,517,478,516],
[495,473,528,522,515,498,500,509,508,488,0,509,507,481,550],
[497,488,508,494,504,504,494,494,457,492,492,0,485,479,492],
[504,490,512,514,521,499,502,494,493,484,494,516,0,506,533],
[526,512,527,528,512,528,513,513,501,523,520,522,495,0,536],
[473,475,506,493,489,489,506,477,490,485,451,509,468,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 31, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,475,515,465,527,440,535,535,468,501,520,459,536,510],
[501,0,527,525,498,533,488,539,532,520,490,524,495,530,508],
[526,474,0,478,476,504,465,496,493,487,516,481,444,490,498],
[486,476,523,0,513,526,459,503,506,505,492,499,417,537,518],
[536,503,525,488,0,539,502,559,551,439,509,503,501,499,524],
[474,468,497,475,462,0,478,543,462,449,489,506,421,479,490],
[561,513,536,542,499,523,0,516,561,519,528,517,471,586,575],
[466,462,505,498,442,458,485,0,484,425,456,466,402,472,471],
[466,469,508,495,450,539,440,517,0,506,488,470,427,500,460],
[533,481,514,496,562,552,482,576,495,0,530,505,484,548,527],
[500,511,485,509,492,512,473,545,513,471,0,502,493,503,534],
[481,477,520,502,498,495,484,535,531,496,499,0,453,506,537],
[542,506,557,584,500,580,530,599,574,517,508,548,0,595,543],
[465,471,511,464,502,522,415,529,501,453,498,495,406,0,449],
[491,493,503,483,477,511,426,530,541,474,467,464,458,552,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 32, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,542,505,520,523,521,536,540,516,485,547,503,495,512,510],
[459,0,455,468,458,493,500,517,460,436,525,453,459,489,485],
[496,546,0,515,537,510,526,524,510,502,534,502,520,526,505],
[481,533,486,0,497,513,518,491,500,469,528,457,467,503,473],
[478,543,464,504,0,517,529,528,500,478,507,468,494,509,464],
[480,508,491,488,484,0,523,513,484,467,513,440,495,477,473],
[465,501,475,483,472,478,0,510,468,454,534,465,504,501,463],
[461,484,477,510,473,488,491,0,463,462,523,474,487,478,483],
[485,541,491,501,501,517,533,538,0,498,530,491,500,535,500],
[516,565,499,532,523,534,547,539,503,0,540,506,499,498,520],
[454,476,467,473,494,488,467,478,471,461,0,453,466,474,454],
[498,548,499,544,533,561,536,527,510,495,548,0,513,513,488],
[506,542,481,534,507,506,497,514,501,502,535,488,0,511,488],
[489,512,475,498,492,524,500,523,466,503,527,488,490,0,473],
[491,516,496,528,537,528,538,518,501,481,547,513,513,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 33, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,530,500,514,506,517,554,508,517,543,521,508,507,523,532],
[471,0,482,501,499,508,518,492,495,532,504,501,465,475,477],
[501,519,0,501,520,520,523,496,503,512,501,509,492,503,520],
[487,500,500,0,501,503,532,496,483,528,511,478,488,490,509],
[495,502,481,500,0,476,501,470,485,505,488,499,466,489,520],
[484,493,481,498,525,0,515,497,482,524,520,494,482,494,497],
[447,483,478,469,500,486,0,473,471,487,491,493,476,474,471],
[493,509,505,505,531,504,528,0,498,528,530,498,477,489,526],
[484,506,498,518,516,519,530,503,0,537,513,525,496,507,511],
[458,469,489,473,496,477,514,473,464,0,481,480,467,476,490],
[480,497,500,490,513,481,510,471,488,520,0,501,482,501,499],
[493,500,492,523,502,507,508,503,476,521,500,0,481,486,494],
[494,536,509,513,535,519,525,524,505,534,519,520,0,513,537],
[478,526,498,511,512,507,527,512,494,525,500,515,488,0,508],
[469,524,481,492,481,504,530,475,490,511,502,507,464,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 34, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,597,309,736,590,345,374,339,470,577,495,310,598,160,537],
[404,0,303,700,211,349,543,366,400,357,569,255,454,208,448],
[692,698,0,908,692,637,758,491,618,552,787,404,613,357,597],
[265,301,93,0,125,1,126,313,404,308,569,66,302,94,308],
[411,790,309,876,0,477,638,459,687,511,688,310,598,503,664],
[656,652,364,1000,524,0,718,513,675,632,569,430,652,234,598],
[627,458,243,875,363,283,0,392,669,549,688,363,580,147,761],
[662,635,510,688,542,488,609,0,428,548,610,344,785,300,514],
[531,601,383,597,314,326,332,573,0,359,598,423,531,260,508],
[424,644,449,693,490,369,452,453,642,0,546,327,791,206,521],
[506,432,214,432,313,432,313,391,403,455,0,254,463,188,339],
[691,746,597,935,691,571,638,657,578,674,747,0,935,412,664],
[403,547,388,699,403,349,421,216,470,210,538,66,0,261,514],
[841,793,644,907,498,767,854,701,741,795,813,589,740,0,881],
[464,553,404,693,337,403,240,487,493,480,662,337,487,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 35, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,518,498,524,503,525,500,526,519,520,509,521,508,507],
[484,0,493,495,525,497,499,503,506,487,512,492,508,498,510],
[483,508,0,505,501,503,496,491,529,492,493,519,522,501,474],
[503,506,496,0,498,495,515,507,497,507,502,498,509,491,476],
[477,476,500,503,0,489,506,500,501,498,496,508,498,492,489],
[498,504,498,506,512,0,497,508,519,513,497,509,495,496,504],
[476,502,505,486,495,504,0,484,503,511,491,492,501,523,480],
[501,498,510,494,501,493,517,0,515,507,492,509,506,509,478],
[475,495,472,504,500,482,498,486,0,510,525,489,497,498,468],
[482,514,509,494,503,488,490,494,491,0,494,508,486,502,481],
[481,489,508,499,505,504,510,509,476,507,0,491,488,504,487],
[492,509,482,503,493,492,509,492,512,493,510,0,498,499,494],
[480,493,479,492,503,506,500,495,504,515,513,503,0,511,482],
[493,503,500,510,509,505,478,492,503,499,497,502,490,0,479],
[494,491,527,525,512,497,521,523,533,520,514,507,519,522,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 36, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,488,552,511,524,511,543,527,531,541,571,542,531,526],
[523,0,510,557,489,485,516,528,505,555,572,552,533,528,520],
[513,491,0,575,492,521,545,545,547,554,546,562,584,564,514],
[449,444,426,0,473,464,497,494,487,511,497,513,511,482,502],
[490,512,509,528,0,511,548,546,514,515,549,561,553,514,525],
[477,516,480,537,490,0,533,546,516,545,565,598,588,539,542],
[490,485,456,504,453,468,0,478,500,504,488,498,501,470,497],
[458,473,456,507,455,455,523,0,483,490,501,506,513,484,466],
[474,496,454,514,487,485,501,518,0,547,535,532,542,530,526],
[470,446,447,490,486,456,497,511,454,0,517,498,537,467,471],
[460,429,455,504,452,436,513,500,466,484,0,529,498,476,480],
[430,449,439,488,440,403,503,495,469,503,472,0,488,502,455],
[459,468,417,490,448,413,500,488,459,464,503,513,0,470,500],
[470,473,437,519,487,462,531,517,471,534,525,499,531,0,483],
[475,481,487,499,476,459,504,535,475,530,521,546,501,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 37, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,459,522,484,480,565,465,459,521,535,480,446,492,488],
[515,0,474,522,514,485,579,546,546,510,529,524,468,514,464],
[542,527,0,506,491,473,549,473,496,481,537,563,475,493,472],
[479,479,495,0,472,457,524,468,445,453,525,493,441,475,483],
[517,487,510,529,0,497,545,504,506,537,523,514,463,463,465],
[521,516,528,544,504,0,550,496,486,553,555,519,454,515,526],
[436,422,452,477,456,451,0,453,438,453,482,484,473,461,430],
[536,455,528,533,497,505,548,0,515,522,580,539,486,471,493],
[542,455,505,556,495,515,563,486,0,489,510,536,476,467,496],
[480,491,520,548,464,448,548,479,512,0,522,537,449,468,496],
[466,472,464,476,478,446,519,421,491,479,0,486,422,441,495],
[521,477,438,508,487,482,517,462,465,464,515,0,470,482,414],
[555,533,526,560,538,547,528,515,525,552,579,531,0,504,486],
[509,487,508,526,538,486,540,530,534,533,560,519,497,0,508],
[513,537,529,518,536,475,571,508,505,505,506,587,515,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 38, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,530,528,494,542,502,497,527,499,552,528,506,531,524,520],
[471,0,495,485,483,467,486,478,472,537,499,484,490,476,487],
[473,506,0,478,511,487,474,512,473,507,505,489,476,470,518],
[507,516,523,0,526,512,509,555,501,519,516,494,515,490,525],
[459,518,490,475,0,464,463,482,481,509,520,465,498,482,496],
[499,534,514,489,537,0,504,535,507,559,502,503,515,507,505],
[504,515,527,492,538,497,0,516,508,556,532,498,509,511,530],
[474,523,489,446,519,466,485,0,507,547,527,490,481,491,497],
[502,529,528,500,520,494,493,494,0,524,523,499,508,511,513],
[449,464,494,482,492,442,445,454,477,0,489,455,479,475,469],
[473,502,496,485,481,499,469,474,478,512,0,465,488,482,493],
[495,517,512,507,536,498,503,511,502,546,536,0,522,509,532],
[470,511,525,486,503,486,492,520,493,522,513,479,0,512,506],
[477,525,531,511,519,494,490,510,490,526,519,492,489,0,518],
[481,514,483,476,505,496,471,504,488,532,508,469,495,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 39, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,520,470,480,560,414,493,477,425,467,384,469,394,502,428],
[481,0,510,446,498,441,397,523,491,488,459,480,452,469,446],
[531,491,0,443,523,417,419,513,476,414,444,486,506,519,476],
[521,555,558,0,523,447,465,511,497,509,456,500,500,503,501],
[441,503,478,478,0,410,443,516,459,512,451,444,468,485,476],
[587,560,584,554,591,0,549,563,593,549,476,561,549,614,581],
[508,604,582,536,558,452,0,569,525,467,460,536,540,587,579],
[524,478,488,490,485,438,432,0,463,429,431,459,400,488,483],
[576,510,525,504,542,408,476,538,0,444,426,466,495,542,482],
[534,513,587,492,489,452,534,572,557,0,506,498,503,552,492],
[617,542,557,545,550,525,541,570,575,495,0,516,553,584,516],
[532,521,515,501,557,440,465,542,535,503,485,0,527,588,503],
[607,549,495,501,533,452,461,601,506,498,448,474,0,506,504],
[499,532,482,498,516,387,414,513,459,449,417,413,495,0,473],
[573,555,525,500,525,420,422,518,519,509,485,498,497,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 40, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,538,516,540,529,538,517,525,508,489,541,558,525,515,534],
[463,0,450,445,454,500,441,469,470,461,478,520,520,491,460],
[485,551,0,485,481,519,451,503,495,518,523,539,516,503,483],
[461,556,516,0,488,489,461,502,477,501,493,533,543,482,478],
[472,547,520,513,0,552,513,508,530,522,528,561,536,543,546],
[463,501,482,512,449,0,427,493,470,469,515,496,469,482,480],
[484,560,550,540,488,574,0,566,531,540,566,564,522,548,519],
[476,532,498,499,493,508,435,0,478,490,550,523,524,502,507],
[493,531,506,524,471,531,470,523,0,512,555,538,538,487,478],
[512,540,483,500,479,532,461,511,489,0,526,569,504,520,500],
[460,523,478,508,473,486,435,451,446,475,0,517,493,489,496],
[443,481,462,468,440,505,437,478,463,432,484,0,468,492,480],
[476,481,485,458,465,532,479,477,463,497,508,533,0,511,461],
[486,510,498,519,458,519,453,499,514,481,512,509,490,0,488],
[467,541,518,523,455,521,482,494,523,501,505,521,540,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 41, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,510,474,477,480,472,531,488,487,515,518,505,519,516],
[490,0,504,499,474,464,477,513,471,467,465,496,474,504,523],
[491,497,0,513,481,472,513,514,466,479,501,502,495,482,542],
[527,502,488,0,474,525,523,526,482,499,509,525,538,512,534],
[524,527,520,527,0,495,527,536,495,501,534,510,529,527,538],
[521,537,529,476,506,0,491,566,503,495,504,477,570,525,538],
[529,524,488,478,474,510,0,549,513,506,497,486,507,508,522],
[470,488,487,475,465,435,452,0,440,454,494,466,467,486,516],
[513,530,535,519,506,498,488,561,0,514,508,510,551,564,559],
[514,534,522,502,500,506,495,547,487,0,536,542,511,545,528],
[486,536,500,492,467,497,504,507,493,465,0,479,491,462,533],
[483,505,499,476,491,524,515,535,491,459,522,0,532,539,544],
[496,527,506,463,472,431,494,534,450,490,510,469,0,511,515],
[482,497,519,489,474,476,493,515,437,456,539,462,490,0,500],
[485,478,459,467,463,463,479,485,442,473,468,457,486,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 42, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,496,502,552,502,513,510,524,508,513,526,515,507,528],
[498,0,531,504,544,499,507,517,523,517,507,516,504,498,529],
[505,470,0,490,517,498,486,479,492,492,493,505,503,489,519],
[499,497,511,0,541,500,499,473,506,496,498,532,503,493,523],
[449,457,484,460,0,478,467,459,467,478,473,489,468,475,472],
[499,502,503,501,523,0,497,491,519,528,504,527,519,500,502],
[488,494,515,502,534,504,0,493,505,509,523,537,503,502,526],
[491,484,522,528,542,510,508,0,517,499,503,541,522,496,528],
[477,478,509,495,534,482,496,484,0,492,506,506,514,489,540],
[493,484,509,505,523,473,492,502,509,0,517,518,523,478,518],
[488,494,508,503,528,497,478,498,495,484,0,520,493,483,503],
[475,485,496,469,512,474,464,460,495,483,481,0,466,476,511],
[486,497,498,498,533,482,498,479,487,478,508,535,0,482,511],
[494,503,512,508,526,501,499,505,512,523,518,525,519,0,529],
[473,472,482,478,529,499,475,473,461,483,498,490,490,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 43, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,446,500,550,467,524,486,485,504,485,494,501,540,454],
[509,0,507,539,553,510,528,499,530,542,567,563,517,532,539],
[555,494,0,518,549,547,535,493,506,530,534,524,524,511,525],
[501,462,483,0,504,461,515,513,504,482,512,474,486,498,496],
[451,448,452,497,0,467,485,480,523,502,504,477,458,523,495],
[534,491,454,540,534,0,492,492,536,501,512,486,470,527,538],
[477,473,466,486,516,509,0,482,516,536,521,485,510,490,502],
[515,502,508,488,521,509,519,0,529,548,554,514,493,498,547],
[516,471,495,497,478,465,485,472,0,480,507,474,429,544,503],
[497,459,471,519,499,500,465,453,521,0,531,495,468,482,498],
[516,434,467,489,497,489,480,447,494,470,0,466,469,472,499],
[507,438,477,527,524,515,516,487,527,506,535,0,472,524,527],
[500,484,477,515,543,531,491,508,572,533,532,529,0,522,519],
[461,469,490,503,478,474,511,503,457,519,529,477,479,0,489],
[547,462,476,505,506,463,499,454,498,503,502,474,482,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 44, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,406,463,477,404,459,450,429,439,494,443,390,505,381],
[544,0,537,542,453,476,548,585,487,423,498,495,518,578,475],
[595,464,0,508,483,487,483,524,520,455,495,380,483,601,533],
[538,459,493,0,432,374,433,450,506,442,473,436,499,558,481],
[524,548,518,569,0,511,506,589,451,460,524,552,515,532,510],
[597,525,514,627,490,0,522,546,654,536,604,544,587,585,529],
[542,453,518,568,495,479,0,566,553,511,525,504,535,571,526],
[551,416,477,551,412,455,435,0,513,408,486,455,583,477,481],
[572,514,481,495,550,347,448,488,0,435,494,459,505,502,520],
[562,578,546,559,541,465,490,593,566,0,563,452,470,596,627],
[507,503,506,528,477,397,476,515,507,438,0,505,510,471,453],
[558,506,621,565,449,457,497,546,542,549,496,0,549,513,524],
[611,483,518,502,486,414,466,418,496,531,491,452,0,569,532],
[496,423,400,443,469,416,430,524,499,405,530,488,432,0,465],
[620,526,468,520,491,472,475,520,481,374,548,477,469,536,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 45, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,483,483,504,462,462,480,474,497,466,495,488,497,475],
[525,0,500,489,506,492,506,484,520,522,492,495,496,516,496],
[518,501,0,498,507,494,487,490,500,496,465,502,519,525,481],
[518,512,503,0,510,471,504,500,506,534,498,499,514,514,499],
[497,495,494,491,0,470,478,494,476,501,475,491,494,493,460],
[539,509,507,530,531,0,502,529,509,519,514,517,519,516,491],
[539,495,514,497,523,499,0,516,508,518,488,520,513,492,486],
[521,517,511,501,507,472,485,0,497,512,475,516,491,504,490],
[527,481,501,495,525,492,493,504,0,524,484,535,501,536,500],
[504,479,505,467,500,482,483,489,477,0,489,502,497,502,485],
[535,509,536,503,526,487,513,526,517,512,0,512,513,534,515],
[506,506,499,502,510,484,481,485,466,499,489,0,500,516,493],
[513,505,482,487,507,482,488,510,500,504,488,501,0,501,493],
[504,485,476,487,508,485,509,497,465,499,467,485,500,0,490],
[526,505,520,502,541,510,515,511,501,516,486,508,508,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 46, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,516,386,484,496,461,466,551,515,437,459,428,535,641],
[507,0,559,450,536,468,484,535,474,485,481,377,490,528,599],
[485,442,0,361,513,497,400,354,453,419,397,400,352,478,521],
[615,551,640,0,518,571,573,518,547,600,473,474,529,595,670],
[517,465,488,483,0,451,504,415,446,426,404,386,450,470,572],
[505,533,504,430,550,0,435,466,556,531,453,406,517,592,666],
[540,517,601,428,497,566,0,462,541,529,560,459,547,611,609],
[535,466,647,483,586,535,539,0,554,572,488,452,505,574,667],
[450,527,548,454,555,445,460,447,0,545,541,538,494,585,549],
[486,516,582,401,575,470,472,429,456,0,444,421,463,545,582],
[564,520,604,528,597,548,441,513,460,557,0,456,480,562,614],
[542,624,601,527,615,595,542,549,463,580,545,0,494,601,689],
[573,511,649,472,551,484,454,496,507,538,521,507,0,579,642],
[466,473,523,406,531,409,390,427,416,456,439,400,422,0,581],
[360,402,480,331,429,335,392,334,452,419,387,312,359,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 47, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,512,502,554,498,493,515,509,523,487,502,520,525,493],
[497,0,525,515,528,501,514,519,477,508,517,489,499,539,497],
[489,476,0,506,532,511,503,516,488,524,506,489,521,506,497],
[499,486,495,0,512,505,488,497,477,532,492,495,501,490,486],
[447,473,469,489,0,462,465,474,449,515,477,478,502,490,467],
[503,500,490,496,539,0,498,475,475,521,476,472,493,519,495],
[508,487,498,513,536,503,0,511,482,531,490,482,497,522,496],
[486,482,485,504,527,526,490,0,484,505,504,491,521,502,518],
[492,524,513,524,552,526,519,517,0,537,547,508,502,532,505],
[478,493,477,469,486,480,470,496,464,0,489,460,491,504,478],
[514,484,495,509,524,525,511,497,454,512,0,479,511,489,493],
[499,512,512,506,523,529,519,510,493,541,522,0,526,527,519],
[481,502,480,500,499,508,504,480,499,510,490,475,0,477,488],
[476,462,495,511,511,482,479,499,469,497,512,474,524,0,485],
[508,504,504,515,534,506,505,483,496,523,508,482,513,516,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 48, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,514,518,515,495,514,518,511,482,521,503,483,513,519],
[508,0,524,515,507,521,499,506,507,485,508,497,499,518,511],
[487,477,0,493,497,488,475,486,489,482,486,484,485,486,506],
[483,486,508,0,504,508,506,497,481,508,479,497,479,501,528],
[486,494,504,497,0,498,524,502,508,490,511,524,500,505,513],
[506,480,513,493,503,0,499,469,476,500,494,510,486,493,510],
[487,502,526,495,477,502,0,485,481,480,508,492,495,500,507],
[483,495,515,504,499,532,516,0,495,495,512,505,498,506,496],
[490,494,512,520,493,525,520,506,0,502,509,510,495,482,503],
[519,516,519,493,511,501,521,506,499,0,512,517,509,499,515],
[480,493,515,522,490,507,493,489,492,489,0,501,504,515,526],
[498,504,517,504,477,491,509,496,491,484,500,0,507,499,522],
[518,502,516,522,501,515,506,503,506,492,497,494,0,486,494],
[488,483,515,500,496,508,501,495,519,502,486,502,515,0,511],
[482,490,495,473,488,491,494,505,498,486,475,479,507,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 49, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,491,536,511,496,449,482,538,494,531,511,459,490,514],
[485,0,469,536,525,486,469,457,515,505,513,482,454,467,495],
[510,532,0,554,543,514,464,499,533,516,513,490,465,509,501],
[465,465,447,0,479,449,439,413,497,435,469,479,418,424,457],
[490,476,458,522,0,477,443,472,528,494,480,491,445,493,489],
[505,515,487,552,524,0,469,455,495,461,479,510,479,501,496],
[552,532,537,562,558,532,0,495,560,514,513,522,451,532,512],
[519,544,502,588,529,546,506,0,567,486,538,535,519,527,539],
[463,486,468,504,473,506,441,434,0,469,487,438,423,467,470],
[507,496,485,566,507,540,487,515,532,0,538,539,496,528,498],
[470,488,488,532,521,522,488,463,514,463,0,516,461,496,506],
[490,519,511,522,510,491,479,466,563,462,485,0,474,490,511],
[542,547,536,583,556,522,550,482,578,505,540,527,0,551,522],
[511,534,492,577,508,500,469,474,534,473,505,511,450,0,504],
[487,506,500,544,512,505,489,462,531,503,495,490,479,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 50, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,500,509,464,461,477,501,498,494,511,499,514,500,517],
[496,0,518,494,479,490,496,488,486,497,485,496,499,503,506],
[501,483,0,498,464,463,472,485,496,467,487,490,488,504,538],
[492,507,503,0,468,464,483,488,459,478,483,497,484,476,512],
[537,522,537,533,0,499,509,520,510,524,523,519,509,530,556],
[540,511,538,537,502,0,501,531,527,498,510,527,530,527,537],
[524,505,529,518,492,500,0,509,510,491,494,529,517,529,535],
[500,513,516,513,481,470,492,0,525,484,492,512,502,523,514],
[503,515,505,542,491,474,491,476,0,501,489,501,489,518,518],
[507,504,534,523,477,503,510,517,500,0,497,508,503,505,528],
[490,516,514,518,478,491,507,509,512,504,0,509,499,522,547],
[502,505,511,504,482,474,472,489,500,493,492,0,483,501,527],
[487,502,513,517,492,471,484,499,512,498,502,518,0,524,535],
[501,498,497,525,471,474,472,478,483,496,479,500,477,0,507],
[484,495,463,489,445,464,466,487,483,473,454,474,466,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 51, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,497,517,490,529,482,480,494,464,467,498,485,473,484],
[492,0,474,525,503,533,484,476,503,488,481,514,517,493,498],
[504,527,0,523,512,540,489,489,514,478,498,509,501,480,489],
[484,476,478,0,481,494,482,464,485,474,449,493,468,454,468],
[511,498,489,520,0,524,489,488,513,469,483,516,510,477,501],
[472,468,461,507,477,0,462,436,499,454,439,504,476,454,463],
[519,517,512,519,512,539,0,528,538,491,480,519,526,484,521],
[521,525,512,537,513,565,473,0,551,495,504,527,503,498,511],
[507,498,487,516,488,502,463,450,0,487,473,520,487,477,479],
[537,513,523,527,532,547,510,506,514,0,499,543,518,509,517],
[534,520,503,552,518,562,521,497,528,502,0,538,527,484,508],
[503,487,492,508,485,497,482,474,481,458,463,0,483,457,481],
[516,484,500,533,491,525,475,498,514,483,474,518,0,475,490],
[528,508,521,547,524,547,517,503,524,492,517,544,526,0,524],
[517,503,512,533,500,538,480,490,522,484,493,520,511,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 52, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,495,496,490,520,537,518,489,486,535,522,496,490,488],
[539,0,500,514,548,503,578,510,519,541,540,536,503,505,542],
[506,501,0,500,534,498,557,488,507,496,553,505,521,520,513],
[505,487,501,0,540,512,573,544,515,547,558,532,534,494,524],
[511,453,467,461,0,523,528,508,491,493,527,521,485,486,464],
[481,498,503,489,478,0,578,503,493,491,547,492,517,479,498],
[464,423,444,428,473,423,0,432,420,470,488,460,454,421,465],
[483,491,513,457,493,498,569,0,497,496,519,478,497,482,514],
[512,482,494,486,510,508,581,504,0,533,549,523,495,499,510],
[515,460,505,454,508,510,531,505,468,0,526,489,497,469,482],
[466,461,448,443,474,454,513,482,452,475,0,487,501,458,509],
[479,465,496,469,480,509,541,523,478,512,514,0,469,502,494],
[505,498,480,467,516,484,547,504,506,504,500,532,0,496,520],
[511,496,481,507,515,522,580,519,502,532,543,499,505,0,522],
[513,459,488,477,537,503,536,487,491,519,492,507,481,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 53, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,508,478,494,493,485,472,515,473,488,465,484,489,480],
[500,0,525,492,509,495,507,479,519,491,504,474,500,507,515],
[493,476,0,470,498,463,493,460,526,494,483,482,507,503,499],
[523,509,531,0,547,519,485,534,544,502,512,514,514,494,507],
[507,492,503,454,0,475,476,483,490,471,503,475,492,486,491],
[508,506,538,482,526,0,497,486,524,500,519,498,495,508,511],
[516,494,508,516,525,504,0,494,528,510,502,498,533,519,509],
[529,522,541,467,518,515,507,0,528,521,509,491,496,528,512],
[486,482,475,457,511,477,473,473,0,475,478,466,484,465,487],
[528,510,507,499,530,501,491,480,526,0,511,492,506,508,515],
[513,497,518,489,498,482,499,492,523,490,0,478,524,498,504],
[536,527,519,487,526,503,503,510,535,509,523,0,528,517,509],
[517,501,494,487,509,506,468,505,517,495,477,473,0,486,491],
[512,494,498,507,515,493,482,473,536,493,503,484,515,0,517],
[521,486,502,494,510,490,492,489,514,486,497,492,510,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 54, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,498,500,495,518,489,509,514,507,494,518,479,513,489],
[522,0,494,511,485,487,506,527,498,509,507,515,496,519,497],
[503,507,0,522,507,528,516,497,524,510,509,535,525,512,499],
[501,490,479,0,474,500,486,505,494,502,516,507,486,501,498],
[506,516,494,527,0,511,497,531,515,505,498,528,487,517,500],
[483,514,473,501,490,0,484,521,493,519,495,512,498,501,503],
[512,495,485,515,504,517,0,502,516,538,524,532,500,525,514],
[492,474,504,496,470,480,499,0,489,482,496,497,481,488,473],
[487,503,477,507,486,508,485,512,0,497,513,527,483,508,493],
[494,492,491,499,496,482,463,519,504,0,512,522,499,497,482],
[507,494,492,485,503,506,477,505,488,489,0,519,491,509,485],
[483,486,466,494,473,489,469,504,474,479,482,0,484,490,470],
[522,505,476,515,514,503,501,520,518,502,510,517,0,512,481],
[488,482,489,500,484,500,476,513,493,504,492,511,489,0,480],
[512,504,502,503,501,498,487,528,508,519,516,531,520,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 55, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,474,498,500,503,492,511,540,532,525,499,520,512,529],
[508,0,500,494,504,491,500,519,508,534,526,497,511,509,499],
[527,501,0,536,517,515,484,512,493,512,506,492,497,507,516],
[503,507,465,0,491,507,456,487,497,516,497,487,483,491,476],
[501,497,484,510,0,497,459,521,486,503,516,471,485,496,489],
[498,510,486,494,504,0,505,530,504,516,509,503,494,497,516],
[509,501,517,545,542,496,0,519,562,548,529,521,515,544,501],
[490,482,489,514,480,471,482,0,491,512,510,470,491,489,473],
[461,493,508,504,515,497,439,510,0,551,523,491,481,526,508],
[469,467,489,485,498,485,453,489,450,0,498,475,465,484,482],
[476,475,495,504,485,492,472,491,478,503,0,491,494,486,516],
[502,504,509,514,530,498,480,531,510,526,510,0,493,509,497],
[481,490,504,518,516,507,486,510,520,536,507,508,0,509,502],
[489,492,494,510,505,504,457,512,475,517,515,492,492,0,492],
[472,502,485,525,512,485,500,528,493,519,485,504,499,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 56, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,504,431,563,411,538,526,535,467,422,458,483,516,484],
[522,0,517,457,500,471,480,512,526,521,486,510,531,549,494],
[497,484,0,480,520,509,527,525,480,513,476,540,520,518,544],
[570,544,521,0,559,516,577,544,570,541,487,535,536,570,557],
[438,501,481,442,0,432,469,465,445,477,441,415,481,543,496],
[590,530,492,485,569,0,568,573,488,511,509,549,579,562,544],
[463,521,474,424,532,433,0,508,464,498,449,454,503,451,476],
[475,489,476,457,536,428,493,0,451,496,429,457,502,519,465],
[466,475,521,431,556,513,537,550,0,502,446,519,532,567,477],
[534,480,488,460,524,490,503,505,499,0,448,501,458,501,459],
[579,515,525,514,560,492,552,572,555,553,0,544,547,553,494],
[543,491,461,466,586,452,547,544,482,500,457,0,514,566,527],
[518,470,481,465,520,422,498,499,469,543,454,487,0,479,539],
[485,452,483,431,458,439,550,482,434,500,448,435,522,0,500],
[517,507,457,444,505,457,525,536,524,542,507,474,462,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 57, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,541,502,569,508,563,500,536,494,465,489,551,470,515,561],
[460,0,472,570,507,578,450,540,505,527,484,532,498,517,557],
[499,529,0,548,500,512,488,525,524,460,512,524,506,486,552],
[432,431,453,0,480,521,484,519,482,452,448,497,482,474,524],
[493,494,501,521,0,496,438,536,468,484,474,491,476,453,511],
[438,423,489,480,505,0,484,490,487,467,452,438,451,475,530],
[501,551,513,517,563,517,0,567,522,527,510,511,468,522,565],
[465,461,476,482,465,511,434,0,455,414,466,469,467,471,493],
[507,496,477,519,533,514,479,546,0,495,527,532,485,481,569],
[536,474,541,549,517,534,474,587,506,0,557,521,506,458,584],
[512,517,489,553,527,549,491,535,474,444,0,499,469,496,531],
[450,469,477,504,510,563,490,532,469,480,502,0,496,439,541],
[531,503,495,519,525,550,533,534,516,495,532,505,0,526,585],
[486,484,515,527,548,526,479,530,520,543,505,562,475,0,509],
[440,444,449,477,490,471,436,508,432,417,470,460,416,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 58, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,505,509,487,548,525,512,483,434,501,529,499,521,505],
[532,0,515,498,528,549,558,525,505,490,506,574,522,576,508],
[496,486,0,530,504,525,571,526,516,507,519,535,490,499,527],
[492,503,471,0,508,510,499,504,501,473,498,527,494,493,520],
[514,473,497,493,0,533,527,502,489,488,501,511,492,499,486],
[453,452,476,491,468,0,484,462,440,471,449,478,462,513,502],
[476,443,430,502,474,517,0,485,493,459,483,516,456,513,471],
[489,476,475,497,499,539,516,0,480,486,489,519,492,487,488],
[518,496,485,500,512,561,508,521,0,474,505,502,501,529,522],
[567,511,494,528,513,530,542,515,527,0,525,519,537,546,513],
[500,495,482,503,500,552,518,512,496,476,0,508,499,534,507],
[472,427,466,474,490,523,485,482,499,482,493,0,481,495,496],
[502,479,511,507,509,539,545,509,500,464,502,520,0,515,528],
[480,425,502,508,502,488,488,514,472,455,467,506,486,0,491],
[496,493,474,481,515,499,530,513,479,488,494,505,473,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 59, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,524,528,486,508,482,486,510,495,499,515,497,465,498,502],
[477,0,525,480,485,479,519,487,488,488,499,499,473,501,516],
[473,476,0,480,471,479,470,484,459,472,477,457,450,485,485],
[515,521,521,0,508,496,518,502,497,493,525,509,469,521,494],
[493,516,530,493,0,491,509,496,492,502,506,551,500,505,508],
[519,522,522,505,510,0,503,509,495,527,533,533,504,527,526],
[515,482,531,483,492,498,0,502,467,488,518,513,477,509,529],
[491,514,517,499,505,492,499,0,476,515,480,506,488,506,529],
[506,513,542,504,509,506,534,525,0,507,517,489,495,533,499],
[502,513,529,508,499,474,513,486,494,0,479,533,498,532,511],
[486,502,524,476,495,468,483,521,484,522,0,514,495,525,522],
[504,502,544,492,450,468,488,495,512,468,487,0,481,532,514],
[536,528,551,532,501,497,524,513,506,503,506,520,0,563,539],
[503,500,516,480,496,474,492,495,468,469,476,469,438,0,508],
[499,485,516,507,493,475,472,472,502,490,479,487,462,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 60, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,495,431,448,502,477,462,524,491,461,433,497,436,431],
[514,0,482,463,458,479,473,497,528,501,461,445,471,483,514],
[506,519,0,511,500,541,487,524,503,458,468,490,512,433,480],
[570,538,490,0,468,549,523,544,513,460,469,419,522,430,503],
[553,543,501,533,0,502,482,491,543,550,485,508,567,499,496],
[499,522,460,452,499,0,526,442,497,496,497,489,509,458,482],
[524,528,514,478,519,475,0,457,554,467,461,496,505,479,539],
[539,504,477,457,510,559,544,0,523,562,477,484,457,518,469],
[477,473,498,488,458,504,447,478,0,515,463,483,516,476,502],
[510,500,543,541,451,505,534,439,486,0,490,494,495,503,529],
[540,540,533,532,516,504,540,524,538,511,0,475,537,481,525],
[568,556,511,582,493,512,505,517,518,507,526,0,554,522,550],
[504,530,489,479,434,492,496,544,485,506,464,447,0,433,476],
[565,518,568,571,502,543,522,483,525,498,520,479,568,0,512],
[570,487,521,498,505,519,462,532,499,472,476,451,525,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 61, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,462,505,491,470,491,513,491,513,518,505,508,510,506],
[483,0,463,491,492,482,473,496,483,494,509,480,494,517,507],
[539,538,0,516,498,498,513,528,506,528,539,531,512,502,529],
[496,510,485,0,506,483,489,522,503,512,529,508,490,498,529],
[510,509,503,495,0,479,475,486,493,504,503,520,489,506,489],
[531,519,503,518,522,0,507,548,518,518,524,524,499,512,509],
[510,528,488,512,526,494,0,548,506,519,528,531,515,517,500],
[488,505,473,479,515,453,453,0,506,489,507,498,479,500,501],
[510,518,495,498,508,483,495,495,0,490,512,509,529,501,527],
[488,507,473,489,497,483,482,512,511,0,526,518,491,486,525],
[483,492,462,472,498,477,473,494,489,475,0,481,496,488,515],
[496,521,470,493,481,477,470,503,492,483,520,0,505,502,497],
[493,507,489,511,512,502,486,522,472,510,505,496,0,495,534],
[491,484,499,503,495,489,484,501,500,515,513,499,506,0,526],
[495,494,472,472,512,492,501,500,474,476,486,504,467,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 62, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,510,476,480,505,486,499,493,482,491,494,473,491,491],
[517,0,515,518,507,536,502,502,519,513,520,505,488,506,520],
[491,486,0,496,484,528,484,493,498,491,512,496,492,512,523],
[525,483,505,0,497,509,491,508,521,491,500,488,495,511,538],
[521,494,517,504,0,544,510,491,517,498,492,509,481,500,531],
[496,465,473,492,457,0,474,487,496,468,484,485,470,493,501],
[515,499,517,510,491,527,0,506,526,506,501,488,505,504,533],
[502,499,508,493,510,514,495,0,483,496,486,495,491,507,518],
[508,482,503,480,484,505,475,518,0,480,491,507,476,506,493],
[519,488,510,510,503,533,495,505,521,0,529,505,505,513,530],
[510,481,489,501,509,517,500,515,510,472,0,495,467,511,517],
[507,496,505,513,492,516,513,506,494,496,506,0,487,492,515],
[528,513,509,506,520,531,496,510,525,496,534,514,0,512,544],
[510,495,489,490,501,508,497,494,495,488,490,509,489,0,510],
[510,481,478,463,470,500,468,483,508,471,484,486,457,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 63, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,483,523,506,488,509,491,530,503,475,490,487,496,490],
[522,0,496,477,516,492,526,503,534,509,505,500,514,495,502],
[518,505,0,520,506,491,513,504,515,510,482,474,503,492,506],
[478,524,481,0,511,477,507,495,527,514,502,477,511,486,496],
[495,485,495,490,0,483,478,473,497,478,476,487,476,492,502],
[513,509,510,524,518,0,498,515,533,498,515,496,522,516,526],
[492,475,488,494,523,503,0,487,513,507,465,499,506,494,511],
[510,498,497,506,528,486,514,0,532,508,508,496,493,489,518],
[471,467,486,474,504,468,488,469,0,493,456,451,481,473,488],
[498,492,491,487,523,503,494,493,508,0,461,489,486,492,504],
[526,496,519,499,525,486,536,493,545,540,0,480,505,514,509],
[511,501,527,524,514,505,502,505,550,512,521,0,532,498,533],
[514,487,498,490,525,479,495,508,520,515,496,469,0,507,515],
[505,506,509,515,509,485,507,512,528,509,487,503,494,0,520],
[511,499,495,505,499,475,490,483,513,497,492,468,486,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 64, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,531,487,508,504,511,515,489,530,512,501,502,493,518,516],
[470,0,442,454,491,470,489,457,474,458,472,483,456,483,479],
[514,559,0,506,534,520,524,483,547,536,503,512,506,525,496],
[493,547,495,0,521,494,512,494,500,506,512,488,517,497,506],
[497,510,467,480,0,475,499,490,513,499,493,475,490,493,484],
[490,531,481,507,526,0,513,483,520,508,512,480,500,469,514],
[486,512,477,489,502,488,0,480,506,505,492,494,507,489,516],
[512,544,518,507,511,518,521,0,528,532,507,491,520,516,514],
[471,527,454,501,488,481,495,473,0,448,474,466,464,497,488],
[489,543,465,495,502,493,496,469,553,0,482,489,474,489,486],
[500,529,498,489,508,489,509,494,527,519,0,489,500,499,511],
[499,518,489,513,526,521,507,510,535,512,512,0,494,516,523],
[508,545,495,484,511,501,494,481,537,527,501,507,0,483,488],
[483,518,476,504,508,532,512,485,504,512,502,485,518,0,497],
[485,522,505,495,517,487,485,487,513,515,490,478,513,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 65, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,539,517,515,506,497,565,504,560,531,544,509,487,558,556],
[462,0,504,482,498,468,497,482,478,498,526,473,434,527,485],
[484,497,0,508,496,477,529,456,511,516,520,461,467,513,514],
[486,519,493,0,472,504,546,460,499,529,500,503,438,526,515],
[495,503,505,529,0,467,548,480,476,529,520,473,486,535,513],
[504,533,524,497,534,0,516,529,481,540,543,541,464,522,535],
[436,504,472,455,453,485,0,458,470,472,483,484,435,512,470],
[497,519,545,541,521,472,543,0,537,544,560,523,505,549,530],
[441,523,490,502,525,520,531,464,0,524,527,508,478,547,544],
[470,503,485,472,472,461,529,457,477,0,492,463,473,511,520],
[457,475,481,501,481,458,518,441,474,509,0,470,444,514,487],
[492,528,540,498,528,460,517,478,493,538,531,0,450,588,536],
[514,567,534,563,515,537,566,496,523,528,557,551,0,586,532],
[443,474,488,475,466,479,489,452,454,490,487,413,415,0,501],
[445,516,487,486,488,466,531,471,457,481,514,465,469,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 66, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,532,541,515,536,502,509,491,532,491,506,485,536,502,540],
[469,0,479,510,494,492,515,476,506,495,513,495,488,462,471],
[460,522,0,500,513,473,509,491,483,504,478,480,511,465,487],
[486,491,501,0,481,459,485,511,494,512,462,482,519,463,504],
[465,507,488,520,0,482,510,487,507,502,490,490,525,490,487],
[499,509,528,542,519,0,520,483,527,514,505,510,535,490,522],
[492,486,492,516,491,481,0,496,508,526,505,513,531,488,507],
[510,525,510,490,514,518,505,0,536,514,519,492,530,488,530],
[469,495,518,507,494,474,493,465,0,512,509,476,519,485,506],
[510,506,497,489,499,487,475,487,489,0,484,496,492,463,490],
[495,488,523,539,511,496,496,482,492,517,0,499,551,471,510],
[516,506,521,519,511,491,488,509,525,505,502,0,553,478,508],
[465,513,490,482,476,466,470,471,482,509,450,448,0,461,482],
[499,539,536,538,511,511,513,513,516,538,530,523,540,0,563],
[461,530,514,497,514,479,494,471,495,511,491,493,519,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 67, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,592,546,531,629,455,589,562,574,461,499,541,611,585,506],
[409,0,477,609,530,342,482,464,579,427,426,466,495,496,412],
[455,524,0,483,469,400,470,448,493,436,546,451,488,513,426],
[470,392,518,0,512,341,488,446,550,398,502,446,438,469,501],
[372,471,532,489,0,433,445,508,514,422,453,528,513,500,439],
[546,659,601,660,568,0,637,593,601,505,514,566,638,555,494],
[412,519,531,513,556,364,0,464,493,291,430,454,466,563,488],
[439,537,553,555,493,408,537,0,575,389,492,491,543,543,484],
[427,422,508,451,487,400,508,426,0,330,409,418,435,388,425],
[540,574,565,603,579,496,710,612,671,0,633,612,557,503,539],
[502,575,455,499,548,487,571,509,592,368,0,506,580,566,493],
[460,535,550,555,473,435,547,510,583,389,495,0,493,516,490],
[390,506,513,563,488,363,535,458,566,444,421,508,0,458,534],
[416,505,488,532,501,446,438,458,613,498,435,485,543,0,542],
[495,589,575,500,562,507,513,517,576,462,508,511,467,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 68, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,513,504,523,476,515,512,522,540,512,494,547,516,519,506],
[488,0,501,518,485,494,497,489,522,512,498,526,509,503,476],
[497,500,0,533,485,495,522,498,527,496,503,550,516,504,490],
[478,483,468,0,463,477,476,480,511,497,501,506,477,497,482],
[525,516,516,538,0,511,550,506,534,510,510,513,525,500,515],
[486,507,506,524,490,0,526,517,509,497,507,533,511,510,494],
[489,504,479,525,451,475,0,488,503,494,497,487,482,506,462],
[479,512,503,521,495,484,513,0,530,503,500,529,503,514,512],
[461,479,474,490,467,492,498,471,0,472,472,492,489,474,481],
[489,489,505,504,491,504,507,498,529,0,509,524,510,503,509],
[507,503,498,500,491,494,504,501,529,492,0,528,506,508,502],
[454,475,451,495,488,468,514,472,509,477,473,0,486,494,478],
[485,492,485,524,476,490,519,498,512,491,495,515,0,495,513],
[482,498,497,504,501,491,495,487,527,498,493,507,506,0,489],
[495,525,511,519,486,507,539,489,520,492,499,523,488,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 69, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,539,477,532,487,512,504,498,540,527,492,506,520,484,513],
[462,0,496,509,507,495,472,473,512,479,473,484,478,506,486],
[524,505,0,525,521,521,511,515,531,543,462,506,516,537,482],
[469,492,476,0,499,493,521,485,516,491,477,492,496,498,511],
[514,494,480,502,0,506,474,496,513,486,459,543,529,502,492],
[489,506,480,508,495,0,480,473,504,509,497,477,510,500,517],
[497,529,490,480,527,521,0,509,479,512,490,509,501,516,504],
[503,528,486,516,505,528,492,0,531,500,489,515,489,493,501],
[461,489,470,485,488,497,522,470,0,516,509,505,474,484,519],
[474,522,458,510,515,492,489,501,485,0,467,515,486,504,526],
[509,528,539,524,542,504,511,512,492,534,0,521,496,520,531],
[495,517,495,509,458,524,492,486,496,486,480,0,474,458,512],
[481,523,485,505,472,491,500,512,527,515,505,527,0,505,505],
[517,495,464,503,499,501,485,508,517,497,481,543,496,0,482],
[488,515,519,490,509,484,497,500,482,475,470,489,496,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 70, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,482,521,499,492,507,494,484,482,479,539,503,510,500],
[526,0,513,549,486,506,500,518,513,492,508,548,538,554,504],
[519,488,0,533,503,505,524,515,532,519,510,560,496,519,520],
[480,452,468,0,473,451,499,462,466,477,502,534,485,490,469],
[502,515,498,528,0,486,531,511,493,495,499,544,535,522,489],
[509,495,496,550,515,0,531,513,488,481,511,513,497,509,529],
[494,501,477,502,470,470,0,474,476,473,491,526,457,504,481],
[507,483,486,539,490,488,527,0,489,460,519,521,506,494,501],
[517,488,469,535,508,513,525,512,0,483,503,512,515,498,466],
[519,509,482,524,506,520,528,541,518,0,491,539,513,506,505],
[522,493,491,499,502,490,510,482,498,510,0,532,519,512,488],
[462,453,441,467,457,488,475,480,489,462,469,0,463,469,479],
[498,463,505,516,466,504,544,495,486,488,482,538,0,515,496],
[491,447,482,511,479,492,497,507,503,495,489,532,486,0,477],
[501,497,481,532,512,472,520,500,535,496,513,522,505,524,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 71, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,528,485,500,503,510,475,492,489,484,476,516,497,482],
[505,0,495,477,491,485,461,491,462,470,473,465,498,467,486],
[473,506,0,513,508,533,507,499,479,465,480,475,514,487,485],
[516,524,488,0,492,520,517,477,508,475,486,498,499,481,508],
[501,510,493,509,0,508,495,496,478,475,479,486,485,481,482],
[498,516,468,481,493,0,487,461,477,467,466,482,496,477,490],
[491,540,494,484,506,514,0,477,481,487,471,482,519,503,489],
[526,510,502,524,505,540,524,0,481,490,521,539,538,524,505],
[509,539,522,493,523,524,520,520,0,510,534,487,517,525,496],
[512,531,536,526,526,534,514,511,491,0,508,497,523,502,512],
[517,528,521,515,522,535,530,480,467,493,0,506,494,529,481],
[525,536,526,503,515,519,519,462,514,504,495,0,522,516,509],
[485,503,487,502,516,505,482,463,484,478,507,479,0,504,459],
[504,534,514,520,520,524,498,477,476,499,472,485,497,0,501],
[519,515,516,493,519,511,512,496,505,489,520,492,542,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 72, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,391,470,509,550,449,497,475,445,530,458,487,408,399],
[511,0,424,473,503,512,431,423,480,480,513,456,529,403,408],
[610,577,0,568,548,587,510,502,549,482,549,506,607,431,456],
[531,528,433,0,494,568,494,460,523,469,518,471,559,442,433],
[492,498,453,507,0,536,449,449,510,482,522,531,571,405,442],
[451,489,414,433,465,0,449,429,472,413,421,414,508,417,396],
[552,570,491,507,552,552,0,518,546,439,542,531,581,478,422],
[504,578,499,541,552,572,483,0,541,523,545,530,598,507,487],
[526,521,452,478,491,529,455,460,0,485,505,456,553,471,513],
[556,521,519,532,519,588,562,478,516,0,575,504,596,451,475],
[471,488,452,483,479,580,459,456,496,426,0,476,550,434,383],
[543,545,495,530,470,587,470,471,545,497,525,0,608,436,524],
[514,472,394,442,430,493,420,403,448,405,451,393,0,353,371],
[593,598,570,559,596,584,523,494,530,550,567,565,648,0,517],
[602,593,545,568,559,605,579,514,488,526,618,477,630,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 73, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,538,516,495,521,494,505,485,500,501,496,483,470,515],
[510,0,542,505,491,526,525,514,484,496,533,498,499,491,504],
[463,459,0,510,480,502,504,496,465,478,504,488,487,469,508],
[485,496,491,0,490,498,502,499,482,488,517,448,501,470,488],
[506,510,521,511,0,502,527,502,504,515,531,490,516,486,507],
[480,475,499,503,499,0,490,468,471,487,504,494,498,463,474],
[507,476,497,499,474,511,0,496,463,483,521,481,471,443,505],
[496,487,505,502,499,533,505,0,473,486,512,475,495,479,493],
[516,517,536,519,497,530,538,528,0,522,526,512,535,527,558],
[501,505,523,513,486,514,518,515,479,0,495,493,511,462,517],
[500,468,497,484,470,497,480,489,475,506,0,496,480,456,473],
[505,503,513,553,511,507,520,526,489,508,505,0,504,482,498],
[518,502,514,500,485,503,530,506,466,490,521,497,0,459,493],
[531,510,532,531,515,538,558,522,474,539,545,519,542,0,548],
[486,497,493,513,494,527,496,508,443,484,528,503,508,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 74, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,535,514,499,518,513,506,549,545,543,507,542,542,519],
[487,0,497,520,458,521,469,492,502,514,537,503,504,490,471],
[466,504,0,490,473,513,513,486,450,516,531,487,492,498,473],
[487,481,511,0,490,512,472,518,470,538,543,498,508,481,468],
[502,543,528,511,0,538,468,539,530,583,505,535,525,485,551],
[483,480,488,489,463,0,463,516,529,519,518,491,511,442,443],
[488,532,488,529,533,538,0,524,514,542,532,523,506,517,518],
[495,509,515,483,462,485,477,0,499,515,532,481,515,471,500],
[452,499,551,531,471,472,487,502,0,528,512,517,508,459,464],
[456,487,485,463,418,482,459,486,473,0,486,493,492,441,435],
[458,464,470,458,496,483,469,469,489,515,0,474,487,471,481],
[494,498,514,503,466,510,478,520,484,508,527,0,515,493,492],
[459,497,509,493,476,490,495,486,493,509,514,486,0,483,454],
[459,511,503,520,516,559,484,530,542,560,530,508,518,0,510],
[482,530,528,533,450,558,483,501,537,566,520,509,547,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 75, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,507,499,482,487,493,480,504,503,485,496,495,496,489],
[517,0,504,514,491,534,510,504,513,526,498,495,497,506,496],
[494,497,0,514,501,484,489,477,490,494,467,492,502,498,474],
[502,487,487,0,496,530,524,512,500,499,516,516,504,487,521],
[519,510,500,505,0,492,498,496,509,503,487,518,508,493,503],
[514,467,517,471,509,0,479,466,479,491,480,502,498,509,476],
[508,491,512,477,503,522,0,492,509,482,499,501,491,483,487],
[521,497,524,489,505,535,509,0,500,504,499,498,525,506,494],
[497,488,511,501,492,522,492,501,0,527,516,529,508,516,480],
[498,475,507,502,498,510,519,497,474,0,493,493,492,496,501],
[516,503,534,485,514,521,502,502,485,508,0,519,518,516,502],
[505,506,509,485,483,499,500,503,472,508,482,0,515,504,526],
[506,504,499,497,493,503,510,476,493,509,483,486,0,483,492],
[505,495,503,514,508,492,518,495,485,505,485,497,518,0,501],
[512,505,527,480,498,525,514,507,521,500,499,475,509,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 76, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,522,518,534,561,584,577,493,518,520,546,544,555,556,531],
[479,0,501,520,540,494,513,482,488,483,511,470,494,510,523],
[483,500,0,509,501,533,532,469,466,464,498,492,505,513,495],
[467,481,492,0,514,518,470,472,445,429,489,467,519,518,464],
[440,461,500,487,0,465,498,456,455,426,495,503,514,494,471],
[417,507,468,483,536,0,512,448,474,493,489,482,492,503,487],
[424,488,469,531,503,489,0,481,466,460,479,494,511,496,424],
[508,519,532,529,545,553,520,0,473,473,527,518,531,523,517],
[483,513,535,556,546,527,535,528,0,507,518,494,554,548,498],
[481,518,537,572,575,508,541,528,494,0,532,530,524,558,565],
[455,490,503,512,506,512,522,474,483,469,0,480,568,490,514],
[457,531,509,534,498,519,507,483,507,471,521,0,531,510,487],
[446,507,496,482,487,509,490,470,447,477,433,470,0,499,478],
[445,491,488,483,507,498,505,478,453,443,511,491,502,0,468],
[470,478,506,537,530,514,577,484,503,436,487,514,523,533,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 77, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,515,490,411,465,522,491,513,477,500,547,462,539,468],
[555,0,585,488,406,482,528,489,493,443,511,520,479,549,461],
[486,416,0,434,412,544,533,498,498,487,443,520,449,530,458],
[511,513,567,0,504,568,534,525,503,497,517,538,511,596,466],
[590,595,589,497,0,588,591,593,599,558,605,622,594,665,582],
[536,519,457,433,413,0,545,525,505,474,478,533,489,554,489],
[479,473,468,467,410,456,0,510,513,451,510,488,528,542,469],
[510,512,503,476,408,476,491,0,500,433,460,524,445,522,420],
[488,508,503,498,402,496,488,501,0,504,497,522,520,582,500],
[524,558,514,504,443,527,550,568,497,0,542,609,563,542,508],
[501,490,558,484,396,523,491,541,504,459,0,549,477,518,460],
[454,481,481,463,379,468,513,477,479,392,452,0,400,507,463],
[539,522,552,490,407,512,473,556,481,438,524,601,0,589,485],
[462,452,471,405,336,447,459,479,419,459,483,494,412,0,464],
[533,540,543,535,419,512,532,581,501,493,541,538,516,537,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 78, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,513,464,520,485,468,501,489,488,500,473,519,490,541],
[526,0,509,459,567,495,479,522,504,529,565,484,523,508,528],
[488,492,0,468,530,455,457,502,475,468,521,462,466,465,515],
[537,542,533,0,540,508,499,481,470,526,557,541,504,500,578],
[481,434,471,461,0,482,434,477,469,488,489,452,465,470,541],
[516,506,546,493,519,0,483,499,501,477,538,489,510,518,545],
[533,522,544,502,567,518,0,493,499,503,551,511,527,478,525],
[500,479,499,520,524,502,508,0,513,540,529,496,489,496,551],
[512,497,526,531,532,500,502,488,0,534,511,497,507,512,542],
[513,472,533,475,513,524,498,461,467,0,551,441,529,481,550],
[501,436,480,444,512,463,450,472,490,450,0,462,469,462,521],
[528,517,539,460,549,512,490,505,504,560,539,0,555,519,604],
[482,478,535,497,536,491,474,512,494,472,532,446,0,508,579],
[511,493,536,501,531,483,523,505,489,520,539,482,493,0,540],
[460,473,486,423,460,456,476,450,459,451,480,397,422,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 79, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,483,468,455,462,505,480,466,486,539,488,484,463,464],
[520,0,471,451,469,463,511,466,509,484,520,476,496,508,488],
[518,530,0,510,492,496,538,512,519,482,556,500,533,511,494],
[533,550,491,0,485,503,530,500,510,494,541,490,519,505,480],
[546,532,509,516,0,533,549,522,518,524,561,498,524,504,533],
[539,538,505,498,468,0,516,490,498,540,576,512,482,512,513],
[496,490,463,471,452,485,0,511,500,474,532,472,485,449,471],
[521,535,489,501,479,511,490,0,495,493,548,517,505,513,509],
[535,492,482,491,483,503,501,506,0,491,544,479,529,479,495],
[515,517,519,507,477,461,527,508,510,0,550,507,499,492,492],
[462,481,445,460,440,425,469,453,457,451,0,445,472,482,450],
[513,525,501,511,503,489,529,484,522,494,556,0,500,471,498],
[517,505,468,482,477,519,516,496,472,502,529,501,0,484,493],
[538,493,490,496,497,489,552,488,522,509,519,530,517,0,499],
[537,513,507,521,468,488,530,492,506,509,551,503,508,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 80, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,528,594,450,482,451,465,463,540,532,501,464,529,448,449],
[473,0,494,449,469,462,460,461,480,505,510,479,466,482,492],
[407,507,0,404,489,442,421,435,497,481,425,463,468,447,428],
[551,552,597,0,535,517,491,492,571,587,517,557,572,538,506],
[519,532,512,466,0,477,461,437,561,469,498,453,515,503,507],
[550,539,559,484,524,0,514,493,537,529,494,534,517,536,489],
[536,541,580,510,540,487,0,520,491,542,550,507,531,530,465],
[538,540,566,509,564,508,481,0,553,578,522,504,482,484,500],
[461,521,504,430,440,464,510,448,0,528,499,450,486,465,437],
[469,496,520,414,532,472,459,423,473,0,442,487,464,520,490],
[500,491,576,484,503,507,451,479,502,559,0,465,481,517,481],
[537,522,538,444,548,467,494,497,551,514,536,0,478,498,467],
[472,535,533,429,486,484,470,519,515,537,520,523,0,506,432],
[553,519,554,463,498,465,471,517,536,481,484,503,495,0,446],
[552,509,573,495,494,512,536,501,564,511,520,534,569,555,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 81, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,487,437,440,476,443,497,508,523,520,479,437,540,624],
[595,0,548,522,496,559,502,547,572,536,634,609,554,594,684],
[514,453,0,525,471,553,463,591,537,529,607,518,544,551,631],
[564,479,476,0,531,541,497,522,500,559,565,581,498,512,617],
[561,505,530,470,0,490,497,525,561,546,594,547,538,603,646],
[525,442,448,460,511,0,486,532,530,536,560,534,526,591,610],
[558,499,538,504,504,515,0,515,559,547,581,593,504,584,656],
[504,454,410,479,476,469,486,0,541,518,516,463,517,552,600],
[493,429,464,501,440,471,442,460,0,486,526,499,447,515,576],
[478,465,472,442,455,465,454,483,515,0,514,472,492,498,568],
[481,367,394,436,407,441,420,485,475,487,0,456,388,452,518],
[522,392,483,420,454,467,408,538,502,529,545,0,487,506,569],
[564,447,457,503,463,475,497,484,554,509,613,514,0,518,646],
[461,407,450,489,398,410,417,449,486,503,549,495,483,0,526],
[377,317,370,384,355,391,345,401,425,433,483,432,355,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 82, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,527,488,483,497,498,497,507,514,491,479,516,501,483,502],
[474,0,469,466,491,519,478,472,513,484,504,520,490,470,509],
[513,532,0,515,477,521,514,483,530,506,537,536,495,510,543],
[518,535,486,0,492,507,492,480,524,496,495,531,486,485,505],
[504,510,524,509,0,510,480,497,502,537,504,514,486,501,504],
[503,482,480,494,491,0,495,505,521,512,514,504,472,503,518],
[504,523,487,509,521,506,0,496,515,509,524,526,502,480,532],
[494,529,518,521,504,496,505,0,503,519,519,519,503,518,550],
[487,488,471,477,499,480,486,498,0,502,497,513,496,482,503],
[510,517,495,505,464,489,492,482,499,0,504,502,467,499,515],
[522,497,464,506,497,487,477,482,504,497,0,522,473,506,504],
[485,481,465,470,487,497,475,482,488,499,479,0,474,470,477],
[500,511,506,515,515,529,499,498,505,534,528,527,0,507,506],
[518,531,491,516,500,498,521,483,519,502,495,531,494,0,510],
[499,492,458,496,497,483,469,451,498,486,497,524,495,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 83, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,531,514,499,503,480,535,511,507,513,526,508,510,493,524],
[470,0,482,459,460,493,482,472,470,493,508,470,495,474,456],
[487,519,0,503,469,492,539,507,485,512,509,477,498,471,509],
[502,542,498,0,511,503,520,535,507,517,534,507,522,514,516],
[498,541,532,490,0,508,519,525,524,546,543,506,543,495,519],
[521,508,509,498,493,0,502,521,519,520,546,519,500,482,509],
[466,519,462,481,482,499,0,513,483,511,498,478,505,503,519],
[490,529,494,466,476,480,488,0,489,513,523,477,502,486,494],
[494,531,516,494,477,482,518,512,0,509,516,469,505,474,500],
[488,508,489,484,455,481,490,488,492,0,498,494,504,491,483],
[475,493,492,467,458,455,503,478,485,503,0,468,481,465,488],
[493,531,524,494,495,482,523,524,532,507,533,0,508,480,513],
[491,506,503,479,458,501,496,499,496,497,520,493,0,472,483],
[508,527,530,487,506,519,498,515,527,510,536,521,529,0,496],
[477,545,492,485,482,492,482,507,501,518,513,488,518,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 84, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,508,489,489,531,464,436,468,527,495,514,470,500,513],
[534,0,493,480,470,522,461,486,509,521,510,519,502,472,512],
[493,508,0,458,485,553,506,474,527,528,526,541,470,470,520],
[512,521,543,0,476,535,510,517,523,543,517,525,510,542,530],
[512,531,516,525,0,543,512,466,482,543,509,513,487,503,526],
[470,479,448,466,458,0,467,448,451,519,451,486,443,444,502],
[537,540,495,491,489,534,0,512,532,534,499,510,503,497,486],
[565,515,527,484,535,553,489,0,521,569,543,585,508,498,558],
[533,492,474,478,519,550,469,480,0,549,499,516,523,485,540],
[474,480,473,458,458,482,467,432,452,0,461,493,461,452,486],
[506,491,475,484,492,550,502,458,502,540,0,533,473,512,553],
[487,482,460,476,488,515,491,416,485,508,468,0,467,487,509],
[531,499,531,491,514,558,498,493,478,540,528,534,0,490,522],
[501,529,531,459,498,557,504,503,516,549,489,514,511,0,550],
[488,489,481,471,475,499,515,443,461,515,448,492,479,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 85, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,534,502,504,492,532,507,494,496,481,472,483,478,533],
[502,0,520,508,495,508,529,499,508,525,495,492,518,520,501],
[467,481,0,478,473,485,506,496,490,508,492,438,487,489,473],
[499,493,523,0,474,513,485,510,489,521,519,464,494,496,513],
[497,506,528,527,0,486,516,496,507,543,512,498,470,489,515],
[509,493,516,488,515,0,491,518,493,497,519,497,486,515,514],
[469,472,495,516,485,510,0,497,469,498,508,444,456,493,497],
[494,502,505,491,505,483,504,0,486,512,509,482,468,506,514],
[507,493,511,512,494,508,532,515,0,515,530,498,511,521,529],
[505,476,493,480,458,504,503,489,486,0,476,484,483,503,516],
[520,506,509,482,489,482,493,492,471,525,0,488,494,507,492],
[529,509,563,537,503,504,557,519,503,517,513,0,499,504,526],
[518,483,514,507,531,515,545,533,490,518,507,502,0,525,543],
[523,481,512,505,512,486,508,495,480,498,494,497,476,0,489],
[468,500,528,488,486,487,504,487,472,485,509,475,458,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 86, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,512,531,529,478,491,490,519,488,473,458,506,527,437],
[523,0,485,537,513,498,523,486,513,516,510,461,541,494,452],
[489,516,0,506,467,467,514,504,516,477,491,486,493,502,459],
[470,464,495,0,491,498,490,489,520,481,495,454,483,480,441],
[472,488,534,510,0,474,532,502,490,478,488,472,517,504,488],
[523,503,534,503,527,0,535,518,558,536,474,514,512,514,501],
[510,478,487,511,469,466,0,487,508,514,472,444,519,524,452],
[511,515,497,512,499,483,514,0,507,498,487,482,497,523,495],
[482,488,485,481,511,443,493,494,0,497,468,447,478,518,464],
[513,485,524,520,523,465,487,503,504,0,466,456,501,516,484],
[528,491,510,506,513,527,529,514,533,535,0,476,500,543,487],
[543,540,515,547,529,487,557,519,554,545,525,0,546,539,502],
[495,460,508,518,484,489,482,504,523,500,501,455,0,495,487],
[474,507,499,521,497,487,477,478,483,485,458,462,506,0,473],
[564,549,542,560,513,500,549,506,537,517,514,499,514,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 87, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,426,461,451,487,437,476,450,466,440,485,459,497,478],
[516,0,509,513,504,523,520,504,468,534,509,528,547,520,508],
[575,492,0,508,533,538,486,471,497,521,506,550,507,555,512],
[540,488,493,0,478,501,443,486,483,485,498,498,499,538,522],
[550,497,468,523,0,539,477,514,466,515,492,521,505,525,512],
[514,478,463,500,462,0,491,491,464,452,474,527,518,476,473],
[564,481,515,558,524,510,0,526,470,486,483,534,545,519,515],
[525,497,530,515,487,510,475,0,469,521,518,518,488,505,519],
[551,533,504,518,535,537,531,532,0,532,485,555,547,535,501],
[535,467,480,516,486,549,515,480,469,0,516,559,501,545,497],
[561,492,495,503,509,527,518,483,516,485,0,568,498,545,498],
[516,473,451,503,480,474,467,483,446,442,433,0,470,488,472],
[542,454,494,502,496,483,456,513,454,500,503,531,0,539,539],
[504,481,446,463,476,525,482,496,466,456,456,513,462,0,496],
[523,493,489,479,489,528,486,482,500,504,503,529,462,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 88, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,520,509,513,525,492,508,486,507,495,476,480,475,515],
[510,0,515,475,501,486,522,512,490,513,493,508,474,501,508],
[481,486,0,462,522,489,511,476,497,498,470,476,457,473,511],
[492,526,539,0,508,508,513,496,489,540,503,500,500,491,523],
[488,500,479,493,0,470,499,491,496,492,498,483,460,480,491],
[476,515,512,493,531,0,526,513,504,530,501,487,483,492,509],
[509,479,490,488,502,475,0,484,484,493,487,466,462,468,500],
[493,489,525,505,510,488,517,0,455,512,524,512,482,503,513],
[515,511,504,512,505,497,517,546,0,519,513,530,485,509,535],
[494,488,503,461,509,471,508,489,482,0,492,502,462,504,510],
[506,508,531,498,503,500,514,477,488,509,0,494,483,523,499],
[525,493,525,501,518,514,535,489,471,499,507,0,474,500,505],
[521,527,544,501,541,518,539,519,516,539,518,527,0,492,538],
[526,500,528,510,521,509,533,498,492,497,478,501,509,0,530],
[486,493,490,478,510,492,501,488,466,491,502,496,463,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 89, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,526,469,528,492,511,504,505,509,522,507,519,493,525],
[498,0,504,464,516,533,517,538,518,516,500,546,513,480,486],
[475,497,0,472,510,508,505,492,485,475,499,500,493,501,498],
[532,537,529,0,512,524,511,553,509,503,490,539,533,507,522],
[473,485,491,489,0,514,490,505,499,501,503,534,505,504,518],
[509,468,493,477,487,0,487,510,515,467,488,492,516,474,491],
[490,484,496,490,511,514,0,528,492,495,495,508,531,491,510],
[497,463,509,448,496,491,473,0,488,492,485,482,480,487,501],
[496,483,516,492,502,486,509,513,0,472,490,503,501,495,516],
[492,485,526,498,500,534,506,509,529,0,492,523,513,508,508],
[479,501,502,511,498,513,506,516,511,509,0,522,494,503,521],
[494,455,501,462,467,509,493,519,498,478,479,0,489,487,490],
[482,488,508,468,496,485,470,521,500,488,507,512,0,512,480],
[508,521,500,494,497,527,510,514,506,493,498,514,489,0,501],
[476,515,503,479,483,510,491,500,485,493,480,511,521,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 90, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,538,569,525,542,558,531,614,494,557,538,543,552,482,547],
[463,0,453,459,476,495,478,516,444,421,459,482,461,434,527],
[432,548,0,472,434,489,497,501,480,484,476,497,471,455,505],
[476,542,529,0,507,579,536,600,505,502,507,507,551,507,516],
[459,525,567,494,0,527,494,594,516,505,519,507,484,495,499],
[443,506,512,422,474,0,491,525,485,435,470,464,447,433,501],
[470,523,504,465,507,510,0,527,457,474,499,515,450,502,511],
[387,485,500,401,407,476,474,0,459,477,452,477,452,438,434],
[507,557,521,496,485,516,544,542,0,517,523,521,507,508,529],
[444,580,517,499,496,566,527,524,484,0,516,508,503,478,510],
[463,542,525,494,482,531,502,549,478,485,0,487,483,495,524],
[458,519,504,494,494,537,486,524,480,493,514,0,513,473,510],
[449,540,530,450,517,554,551,549,494,498,518,488,0,489,534],
[519,567,546,494,506,568,499,563,493,523,506,528,512,0,547],
[454,474,496,485,502,500,490,567,472,491,477,491,467,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 91, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,502,506,506,515,490,515,501,482,511,494,519,511,508],
[506,0,516,495,495,509,475,498,479,497,535,492,477,513,500],
[499,485,0,495,481,479,485,490,469,497,490,498,483,522,482],
[495,506,506,0,497,496,485,506,499,481,498,489,505,507,487],
[495,506,520,504,0,502,486,501,497,499,505,498,497,503,488],
[486,492,522,505,499,0,481,502,487,526,517,499,523,511,498],
[511,526,516,516,515,520,0,529,494,525,513,535,510,524,502],
[486,503,511,495,500,499,472,0,478,485,514,509,497,507,485],
[500,522,532,502,504,514,507,523,0,523,517,521,502,536,527],
[519,504,504,520,502,475,476,516,478,0,517,488,501,504,513],
[490,466,511,503,496,484,488,487,484,484,0,490,485,509,499],
[507,509,503,512,503,502,466,492,480,513,511,0,496,502,497],
[482,524,518,496,504,478,491,504,499,500,516,505,0,507,492],
[490,488,479,494,498,490,477,494,465,497,492,499,494,0,478],
[493,501,519,514,513,503,499,516,474,488,502,504,509,523,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 92, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,415,468,462,444,495,497,531,478,457,481,506,571,431],
[556,0,502,583,575,535,565,559,537,530,494,601,518,565,516],
[586,499,0,580,517,535,502,563,531,549,537,488,574,601,520],
[533,418,421,0,473,528,450,534,505,464,434,502,507,526,405],
[539,426,484,528,0,534,480,505,501,526,444,479,530,514,375],
[557,466,466,473,467,0,494,578,545,465,441,461,484,544,469],
[506,436,499,551,521,507,0,511,458,491,467,587,549,559,422],
[504,442,438,467,496,423,490,0,471,471,414,467,497,483,460],
[470,464,470,496,500,456,543,530,0,562,468,494,473,554,423],
[523,471,452,537,475,536,510,530,439,0,482,507,499,568,407],
[544,507,464,567,557,560,534,587,533,519,0,508,538,559,505],
[520,400,513,499,522,540,414,534,507,494,493,0,519,491,503],
[495,483,427,494,471,517,452,504,528,502,463,482,0,588,464],
[430,436,400,475,487,457,442,518,447,433,442,510,413,0,415],
[570,485,481,596,626,532,579,541,578,594,496,498,537,586,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 93, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,483,494,501,492,510,516,543,498,514,521,495,502,484],
[504,0,483,488,511,494,506,486,517,477,520,521,494,514,496],
[518,518,0,491,514,517,491,516,533,517,518,532,500,507,503],
[507,513,510,0,492,506,504,526,525,525,517,533,513,507,508],
[500,490,487,509,0,484,492,511,530,497,509,503,509,496,498],
[509,507,484,495,517,0,511,509,532,501,526,525,516,511,501],
[491,495,510,497,509,490,0,509,510,497,498,529,515,502,486],
[485,515,485,475,490,492,492,0,506,489,515,503,491,502,485],
[458,484,468,476,471,469,491,495,0,473,507,492,482,467,464],
[503,524,484,476,504,500,504,512,528,0,503,517,493,496,494],
[487,481,483,484,492,475,503,486,494,498,0,496,503,490,479],
[480,480,469,468,498,476,472,498,509,484,505,0,482,491,489],
[506,507,501,488,492,485,486,510,519,508,498,519,0,516,510],
[499,487,494,494,505,490,499,499,534,505,511,510,485,0,471],
[517,505,498,493,503,500,515,516,537,507,522,512,491,530,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 94, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,534,479,511,472,525,467,476,560,515,552,544,470,489],
[532,0,528,490,478,447,516,484,456,520,533,492,523,510,510],
[467,473,0,446,513,457,538,458,418,530,466,467,512,516,462],
[522,511,555,0,544,503,538,532,495,522,514,485,520,534,523],
[490,523,488,457,0,459,489,462,447,494,474,475,485,489,443],
[529,554,544,498,542,0,585,508,468,573,536,511,551,547,544],
[476,485,463,463,512,416,0,454,470,502,469,456,529,485,458],
[534,517,543,469,539,493,547,0,517,554,531,458,548,564,547],
[525,545,583,506,554,533,531,484,0,575,550,513,536,549,526],
[441,481,471,479,507,428,499,447,426,0,488,430,471,479,420],
[486,468,535,487,527,465,532,470,451,513,0,495,506,518,480],
[449,509,534,516,526,490,545,543,488,571,506,0,547,523,510],
[457,478,489,481,516,450,472,453,465,530,495,454,0,526,464],
[531,491,485,467,512,454,516,437,452,522,483,478,475,0,508],
[512,491,539,478,558,457,543,454,475,581,521,491,537,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 95, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,452,476,435,449,443,480,479,486,471,482,502,446,475],
[533,0,529,541,516,493,521,482,474,505,500,568,484,513,575],
[549,472,0,503,498,445,509,429,438,492,460,473,443,526,492],
[525,460,498,0,480,432,436,463,460,478,505,500,462,486,482],
[566,485,503,521,0,442,491,515,504,465,455,527,493,483,506],
[552,508,556,569,559,0,500,468,502,497,515,522,541,517,568],
[558,480,492,565,510,501,0,501,491,550,468,570,525,494,534],
[521,519,572,538,486,533,500,0,535,530,509,537,549,485,547],
[522,527,563,541,497,499,510,466,0,538,495,540,498,518,530],
[515,496,509,523,536,504,451,471,463,0,453,534,467,486,539],
[530,501,541,496,546,486,533,492,506,548,0,577,552,518,546],
[519,433,528,501,474,479,431,464,461,467,424,0,463,445,488],
[499,517,558,539,508,460,476,452,503,534,449,538,0,507,548],
[555,488,475,515,518,484,507,516,483,515,483,556,494,0,496],
[526,426,509,519,495,433,467,454,471,462,455,513,453,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 96, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,474,494,462,461,501,488,480,509,504,510,500,475,495],
[498,0,498,485,474,483,497,463,505,494,476,474,492,486,484],
[527,503,0,495,488,491,513,495,501,519,517,501,514,491,510],
[507,516,506,0,485,512,512,497,471,510,495,513,495,494,510],
[539,527,513,516,0,508,531,494,509,527,512,527,525,512,527],
[540,518,510,489,493,0,499,483,489,522,501,516,522,510,518],
[500,504,488,489,470,502,0,492,513,526,499,493,522,498,499],
[513,538,506,504,507,518,509,0,499,520,505,511,524,497,519],
[521,496,500,530,492,512,488,502,0,515,497,514,515,506,502],
[492,507,482,491,474,479,475,481,486,0,469,475,498,496,488],
[497,525,484,506,489,500,502,496,504,532,0,523,514,483,511],
[491,527,500,488,474,485,508,490,487,526,478,0,526,480,496],
[501,509,487,506,476,479,479,477,486,503,487,475,0,480,467],
[526,515,510,507,489,491,503,504,495,505,518,521,521,0,518],
[506,517,491,491,474,483,502,482,499,513,490,505,534,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 97, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,541,379,495,679,382,285,399,738,449,648,493,568,556,358],
[460,0,440,488,664,469,467,429,800,407,584,594,600,452,326],
[622,561,0,549,786,497,372,449,769,472,575,639,605,504,393],
[506,513,452,0,655,382,341,605,662,394,519,525,459,500,290],
[322,337,215,346,0,352,319,254,515,285,553,452,491,464,246],
[619,532,504,619,649,0,502,451,753,459,655,641,589,603,331],
[716,534,629,660,682,499,0,466,791,488,718,642,545,820,447],
[602,572,552,396,747,550,535,0,707,685,588,661,576,651,525],
[263,201,232,339,486,248,210,294,0,275,278,315,384,216,186],
[552,594,529,607,716,542,513,316,726,0,611,562,516,661,335],
[353,417,426,482,448,346,283,413,723,390,0,516,349,521,353],
[508,407,362,476,549,360,359,340,686,439,485,0,483,447,347],
[433,401,396,542,510,412,456,425,617,485,652,518,0,380,332],
[445,549,497,501,537,398,181,350,785,340,480,554,621,0,287],
[643,675,608,711,755,670,554,476,815,666,648,654,669,714,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 98, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,511,345,539,436,437,436,466,466,476,385,539,411,427],
[537,0,585,607,419,485,486,524,492,441,506,477,514,464,469],
[490,416,0,367,409,505,397,309,419,298,451,331,528,443,411],
[656,394,634,0,557,547,439,499,557,464,616,436,556,496,456],
[462,582,592,444,0,470,499,528,487,466,630,454,440,378,534],
[565,516,496,454,531,0,357,535,364,421,569,433,403,418,375],
[564,515,604,562,502,644,0,391,603,489,619,434,450,377,478],
[565,477,692,502,473,466,610,0,526,456,534,489,458,509,545],
[535,509,582,444,514,637,398,475,0,500,461,408,516,403,450],
[535,560,703,537,535,580,512,545,501,0,619,503,582,464,445],
[525,495,550,385,371,432,382,467,540,382,0,433,347,438,455],
[616,524,670,565,547,568,567,512,593,498,568,0,614,462,438],
[462,487,473,445,561,598,551,543,485,419,654,387,0,501,447],
[590,537,558,505,623,583,624,492,598,537,563,539,500,0,630],
[574,532,590,545,467,626,523,456,551,556,546,563,554,371,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 99, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,535,523,526,538,566,570,520,548,497,519,495,505,577,519],
[466,0,502,452,529,524,511,468,505,455,515,469,503,490,495],
[478,499,0,479,510,490,494,480,489,465,481,456,507,499,516],
[475,549,522,0,526,507,522,474,478,513,487,478,519,546,509],
[463,472,491,475,0,513,491,494,467,471,517,453,473,500,468],
[435,477,511,494,488,0,481,464,506,454,506,475,466,516,464],
[431,490,507,479,510,520,0,478,496,500,516,463,478,498,477],
[481,533,521,527,507,537,523,0,496,528,512,491,520,555,508],
[453,496,512,523,534,495,505,505,0,473,525,457,522,535,515],
[504,546,536,488,530,547,501,473,528,0,490,473,511,536,505],
[482,486,520,514,484,495,485,489,476,511,0,463,508,518,448],
[506,532,545,523,548,526,538,510,544,528,538,0,508,564,496],
[496,498,494,482,528,535,523,481,479,490,493,493,0,517,528],
[424,511,502,455,501,485,503,446,466,465,483,437,484,0,439],
[482,506,485,492,533,537,524,493,486,496,553,505,473,562,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 100, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,466,460,448,458,467,434,492,457,422,481,470,423,474],
[529,0,487,514,510,544,542,477,512,469,479,520,512,484,513],
[535,514,0,503,479,497,501,494,526,492,507,515,506,474,498],
[541,487,498,0,452,513,520,451,522,473,473,494,509,488,470],
[553,491,522,549,0,518,532,506,501,533,472,550,524,507,537],
[543,457,504,488,483,0,494,444,507,476,497,514,471,456,507],
[534,459,500,481,469,507,0,462,497,489,473,511,481,458,483],
[567,524,507,550,495,557,539,0,522,515,531,574,554,502,487],
[509,489,475,479,500,494,504,479,0,458,452,498,479,472,476],
[544,532,509,528,468,525,512,486,543,0,486,550,521,472,524],
[579,522,494,528,529,504,528,470,549,515,0,513,516,501,521],
[520,481,486,507,451,487,490,427,503,451,488,0,483,467,507],
[531,489,495,492,477,530,520,447,522,480,485,518,0,467,522],
[578,517,527,513,494,545,543,499,529,529,500,534,534,0,543],
[527,488,503,531,464,494,518,514,525,477,480,494,479,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 101, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,507,487,562,531,584,499,497,520,499,553,481,540,531],
[496,0,500,513,546,462,600,511,514,594,537,556,544,526,518],
[494,501,0,503,541,473,568,512,512,578,512,529,490,521,562],
[514,488,498,0,552,493,541,491,466,584,505,545,528,523,530],
[439,455,460,449,0,445,519,451,463,491,486,518,455,489,486],
[470,539,528,508,556,0,536,521,483,549,547,544,521,550,569],
[417,401,433,460,482,465,0,452,434,509,441,484,436,453,501],
[502,490,489,510,550,480,549,0,495,514,528,565,463,500,510],
[504,487,489,535,538,518,567,506,0,539,513,597,540,532,564],
[481,407,423,417,510,452,492,487,462,0,463,511,451,481,504],
[502,464,489,496,515,454,560,473,488,538,0,529,497,520,483],
[448,445,472,456,483,457,517,436,404,490,472,0,469,500,484],
[520,457,511,473,546,480,565,538,461,550,504,532,0,526,556],
[461,475,480,478,512,451,548,501,469,520,481,501,475,0,496],
[470,483,439,471,515,432,500,491,437,497,518,517,445,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 102, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,486,531,513,517,483,504,515,497,469,524,452,527,519],
[497,0,514,533,487,496,505,505,524,491,488,498,496,531,504],
[515,487,0,537,512,527,523,496,506,510,491,527,489,531,522],
[470,468,464,0,506,477,471,479,466,457,434,498,465,502,496],
[488,514,489,495,0,511,482,502,491,488,485,527,500,530,497],
[484,505,474,524,490,0,476,504,483,463,497,510,514,513,504],
[518,496,478,530,519,525,0,487,514,492,463,515,490,512,530],
[497,496,505,522,499,497,514,0,513,519,517,537,497,524,538],
[486,477,495,535,510,518,487,488,0,494,467,516,460,550,506],
[504,510,491,544,513,538,509,482,507,0,492,534,486,527,512],
[532,513,510,567,516,504,538,484,534,509,0,521,497,537,541],
[477,503,474,503,474,491,486,464,485,467,480,0,467,521,501],
[549,505,512,536,501,487,511,504,541,515,504,534,0,535,524],
[474,470,470,499,471,488,489,477,451,474,464,480,466,0,480],
[482,497,479,505,504,497,471,463,495,489,460,500,477,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 103, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,640,544,546,604,502,569,505,566,566,520,494,558,538,533],
[361,0,484,464,519,502,481,421,441,469,404,430,469,520,391],
[457,517,0,510,648,390,536,519,500,588,523,448,557,504,442],
[455,537,491,0,615,469,522,520,449,602,451,501,498,477,495],
[397,482,353,386,0,350,453,475,456,448,437,413,405,416,408],
[499,499,611,532,651,0,544,495,453,611,510,485,519,543,470],
[432,520,465,479,548,457,0,449,566,514,491,491,480,469,532],
[496,580,482,481,526,506,552,0,578,533,430,483,478,538,534],
[435,560,501,552,545,548,435,423,0,528,463,506,440,465,468],
[435,532,413,399,553,390,487,468,473,0,460,461,392,489,481],
[481,597,478,550,564,491,510,571,538,541,0,479,490,537,527],
[507,571,553,500,588,516,510,518,495,540,522,0,557,505,537],
[443,532,444,503,596,482,521,523,561,609,511,444,0,510,460],
[463,481,497,524,585,458,532,463,536,512,464,496,491,0,512],
[468,610,559,506,593,531,469,467,533,520,474,464,541,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 104, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,523,508,527,516,533,495,510,495,502,512,521,481,517,512],
[478,0,463,494,494,477,467,488,477,457,485,497,479,480,491],
[493,538,0,517,534,520,508,525,515,488,531,544,503,508,508],
[474,507,484,0,480,492,461,488,488,467,511,484,472,465,509],
[485,507,467,521,0,497,513,484,480,478,495,509,447,490,497],
[468,524,481,509,504,0,488,492,491,468,517,488,469,498,477],
[506,534,493,540,488,513,0,499,506,507,514,512,503,510,502],
[491,513,476,513,517,509,502,0,483,495,470,500,480,514,494],
[506,524,486,513,521,510,495,518,0,499,501,516,479,516,496],
[499,544,513,534,523,533,494,506,502,0,512,522,494,511,503],
[489,516,470,490,506,484,487,531,500,489,0,521,466,483,489],
[480,504,457,517,492,513,489,501,485,479,480,0,477,472,482],
[520,522,498,529,554,532,498,521,522,507,535,524,0,527,508],
[484,521,493,536,511,503,491,487,485,490,518,529,474,0,515],
[489,510,493,492,504,524,499,507,505,498,512,519,493,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 105, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,492,513,503,508,495,499,478,492,495,530,510,508,513],
[498,0,508,517,484,524,516,496,507,502,517,499,510,506,531],
[509,493,0,516,517,527,534,508,520,504,516,548,514,506,537],
[488,484,485,0,482,516,509,499,499,514,503,527,513,515,527],
[498,517,484,519,0,512,509,486,495,485,520,515,478,498,488],
[493,477,474,485,489,0,503,494,481,502,506,520,498,510,507],
[506,485,467,492,492,498,0,492,516,473,511,514,499,498,510],
[502,505,493,502,515,507,509,0,509,497,523,507,498,513,519],
[523,494,481,502,506,520,485,492,0,492,502,525,520,486,506],
[509,499,497,487,516,499,528,504,509,0,521,544,530,511,506],
[506,484,485,498,481,495,490,478,499,480,0,499,486,490,492],
[471,502,453,474,486,481,487,494,476,457,502,0,483,492,479],
[491,491,487,488,523,503,502,503,481,471,515,518,0,523,521],
[493,495,495,486,503,491,503,488,515,490,511,509,478,0,525],
[488,470,464,474,513,494,491,482,495,495,509,522,480,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 106, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,482,414,450,501,447,438,438,481,476,453,495,437,374],
[570,0,515,479,488,537,474,495,472,472,487,470,446,428,493],
[519,486,0,389,469,503,445,458,463,451,421,560,480,449,400],
[587,522,612,0,521,628,504,512,499,524,504,546,484,556,532],
[551,513,532,480,0,567,531,549,518,484,532,624,525,535,559],
[500,464,498,373,434,0,438,441,441,442,373,461,453,462,452],
[554,527,556,497,470,563,0,504,527,468,518,517,537,467,494],
[563,506,543,489,452,560,497,0,457,448,444,527,501,463,480],
[563,529,538,502,483,560,474,544,0,462,467,480,463,444,401],
[520,529,550,477,517,559,533,553,539,0,492,541,463,518,480],
[525,514,580,497,469,628,483,557,534,509,0,458,450,450,465],
[548,531,441,455,377,540,484,474,521,460,543,0,444,431,413],
[506,555,521,517,476,548,464,500,538,538,551,557,0,532,447],
[564,573,552,445,466,539,534,538,557,483,551,570,469,0,433],
[627,508,601,469,442,549,507,521,600,521,536,588,554,568,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 107, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,490,468,451,485,489,511,450,486,490,490,473,469,465],
[530,0,501,478,492,499,504,483,434,485,506,470,525,477,474],
[511,500,0,499,507,483,471,514,474,502,530,463,514,482,499],
[533,523,502,0,509,488,515,497,490,530,521,483,523,521,491],
[550,509,494,492,0,489,482,532,526,508,551,483,521,485,522],
[516,502,518,513,512,0,499,518,500,495,548,480,522,500,478],
[512,497,530,486,519,502,0,512,462,521,555,444,551,499,501],
[490,518,487,504,469,483,489,0,456,492,534,469,502,487,502],
[551,567,527,511,475,501,539,545,0,525,524,516,544,507,506],
[515,516,499,471,493,506,480,509,476,0,519,451,520,501,507],
[511,495,471,480,450,453,446,467,477,482,0,456,489,464,476],
[511,531,538,518,518,521,557,532,485,550,545,0,547,517,515],
[528,476,487,478,480,479,450,499,457,481,512,454,0,492,463],
[532,524,519,480,516,501,502,514,494,500,537,484,509,0,481],
[536,527,502,510,479,523,500,499,495,494,525,486,538,520,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 108, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,490,475,499,483,503,482,473,509,500,497,481,522,485],
[503,0,499,493,482,475,503,496,483,500,491,493,470,483,475],
[511,502,0,494,476,495,486,486,493,484,496,498,476,507,486],
[526,508,507,0,497,498,522,509,494,507,510,506,497,494,500],
[502,519,525,504,0,500,495,505,501,511,523,493,487,498,491],
[518,526,506,503,501,0,524,500,497,506,505,497,497,535,511],
[498,498,515,479,506,477,0,489,489,485,496,479,481,515,489],
[519,505,515,492,496,501,512,0,498,499,495,499,492,508,516],
[528,518,508,507,500,504,512,503,0,501,487,503,480,503,502],
[492,501,517,494,490,495,516,502,500,0,499,491,477,520,514],
[501,510,505,491,478,496,505,506,514,502,0,487,480,508,490],
[504,508,503,495,508,504,522,502,498,510,514,0,495,519,491],
[520,531,525,504,514,504,520,509,521,524,521,506,0,520,497],
[479,518,494,507,503,466,486,493,498,481,493,482,481,0,483],
[516,526,515,501,510,490,512,485,499,487,511,510,504,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 109, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,510,517,527,518,487,499,527,489,519,488,495,471,496],
[489,0,516,504,517,523,492,490,506,488,521,487,503,486,485],
[491,485,0,493,508,505,508,483,510,483,500,491,511,495,492],
[484,497,508,0,526,505,489,497,493,462,500,476,483,492,481],
[474,484,493,475,0,500,457,484,502,456,498,480,486,476,471],
[483,478,496,496,501,0,503,492,516,492,499,489,514,490,493],
[514,509,493,512,544,498,0,492,507,483,521,499,504,495,497],
[502,511,518,504,517,509,509,0,510,486,513,498,503,490,510],
[474,495,491,508,499,485,494,491,0,485,486,463,495,484,489],
[512,513,518,539,545,509,518,515,516,0,521,507,520,498,498],
[482,480,501,501,503,502,480,488,515,480,0,486,489,490,477],
[513,514,510,525,521,512,502,503,538,494,515,0,542,512,513],
[506,498,490,518,515,487,497,498,506,481,512,459,0,478,489],
[530,515,506,509,525,511,506,511,517,503,511,489,523,0,491],
[505,516,509,520,530,508,504,491,512,503,524,488,512,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 110, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,536,548,491,523,551,524,537,524,535,531,518,518,545,525],
[465,0,507,483,481,503,489,491,518,490,471,492,487,494,523],
[453,494,0,488,495,524,511,496,500,495,467,479,508,509,521],
[510,518,513,0,503,544,536,513,482,507,492,503,464,526,537],
[478,520,506,498,0,498,490,476,480,480,502,488,491,528,530],
[450,498,477,457,503,0,495,487,488,498,469,477,487,477,463],
[477,512,490,465,511,506,0,480,497,515,490,486,506,513,501],
[464,510,505,488,525,514,521,0,500,495,482,473,476,509,514],
[477,483,501,519,521,513,504,501,0,484,495,491,495,520,524],
[466,511,506,494,521,503,486,506,517,0,489,514,499,476,524],
[470,530,534,509,499,532,511,519,506,512,0,522,524,535,511],
[483,509,522,498,513,524,515,528,510,487,479,0,494,514,523],
[483,514,493,537,510,514,495,525,506,502,477,507,0,527,546],
[456,507,492,475,473,524,488,492,481,525,466,487,474,0,507],
[476,478,480,464,471,538,500,487,477,477,490,478,455,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 111, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,532,567,559,493,530,560,554,553,557,530,529,504,542,534],
[469,0,465,469,407,454,516,473,485,503,466,504,468,512,425],
[434,536,0,507,467,485,529,511,516,491,471,482,445,458,477],
[442,532,494,0,444,521,505,515,512,492,480,500,485,488,491],
[508,594,534,557,0,533,534,523,600,527,516,507,514,580,499],
[471,547,516,480,468,0,550,541,514,514,508,506,487,541,468],
[441,485,472,496,467,451,0,497,456,510,514,447,482,525,479],
[447,528,490,486,478,460,504,0,509,509,491,463,478,544,481],
[448,516,485,489,401,487,545,492,0,505,507,458,490,548,463],
[444,498,510,509,474,487,491,492,496,0,474,457,488,511,474],
[471,535,530,521,485,493,487,510,494,527,0,494,486,494,465],
[472,497,519,501,494,495,554,538,543,544,507,0,508,556,504],
[497,533,556,516,487,514,519,523,511,513,515,493,0,552,463],
[459,489,543,513,421,460,476,457,453,490,507,445,449,0,429],
[467,576,524,510,502,533,522,520,538,527,536,497,538,572,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 112, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,527,482,527,517,506,510,508,490,508,510,520,486,508,494],
[474,0,502,491,505,484,501,497,476,483,482,491,486,477,476],
[519,499,0,520,516,508,510,520,509,507,500,500,466,498,489],
[474,510,481,0,510,498,489,509,515,509,494,494,498,481,485],
[484,496,485,491,0,476,498,505,481,489,475,485,490,484,474],
[495,517,493,503,525,0,504,511,500,500,482,495,493,504,497],
[491,500,491,512,503,497,0,482,470,481,492,489,472,511,482],
[493,504,481,492,496,490,519,0,492,498,490,498,467,480,487],
[511,525,492,486,520,501,531,509,0,497,497,508,494,507,493],
[493,518,494,492,512,501,520,503,504,0,483,481,488,522,486],
[491,519,501,507,526,519,509,511,504,518,0,513,502,503,513],
[481,510,501,507,516,506,512,503,493,520,488,0,462,519,484],
[515,515,535,503,511,508,529,534,507,513,499,539,0,519,503],
[493,524,503,520,517,497,490,521,494,479,498,482,482,0,491],
[507,525,512,516,527,504,519,514,508,515,488,517,498,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 113, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,522,503,505,479,488,510,511,495,526,514,497,529,518,507],
[479,0,499,497,470,477,498,505,486,509,489,486,496,503,523],
[498,502,0,510,465,486,511,515,483,506,515,512,522,541,526],
[496,504,491,0,481,466,492,500,477,497,493,491,493,520,501],
[522,531,536,520,0,494,515,532,518,527,530,515,537,548,537],
[513,524,515,535,507,0,525,516,499,496,532,490,532,520,524],
[491,503,490,509,486,476,0,520,494,511,520,495,501,510,514],
[490,496,486,501,469,485,481,0,496,507,514,498,489,511,503],
[506,515,518,524,483,502,507,505,0,494,508,507,518,505,512],
[475,492,495,504,474,505,490,494,507,0,504,507,504,505,503],
[487,512,486,508,471,469,481,487,493,497,0,509,501,510,502],
[504,515,489,510,486,511,506,503,494,494,492,0,509,517,534],
[472,505,479,508,464,469,500,512,483,497,500,492,0,491,504],
[483,498,460,481,453,481,491,490,496,496,491,484,510,0,505],
[494,478,475,500,464,477,487,498,489,498,499,467,497,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 114, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,507,509,499,488,503,499,490,503,497,510,515,532,516],
[490,0,503,486,488,489,467,456,502,465,497,488,492,512,496],
[494,498,0,498,500,491,497,475,484,477,487,494,508,506,485],
[492,515,503,0,493,484,498,504,490,512,494,496,510,519,500],
[502,513,501,508,0,499,510,488,502,500,491,517,505,516,501],
[513,512,510,517,502,0,496,504,513,525,510,507,517,525,504],
[498,534,504,503,491,505,0,489,495,499,498,513,491,511,494],
[502,545,526,497,513,497,512,0,528,500,524,527,509,519,512],
[511,499,517,511,499,488,506,473,0,482,514,503,517,515,504],
[498,536,524,489,501,476,502,501,519,0,512,508,527,528,515],
[504,504,514,507,510,491,503,477,487,489,0,499,488,513,500],
[491,513,507,505,484,494,488,474,498,493,502,0,488,527,477],
[486,509,493,491,496,484,510,492,484,474,513,513,0,522,513],
[469,489,495,482,485,476,490,482,486,473,488,474,479,0,485],
[485,505,516,501,500,497,507,489,497,486,501,524,488,516,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 115, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,517,500,509,520,471,527,421,490,488,442,444,477,481],
[510,0,522,490,506,524,492,521,497,529,502,494,472,484,472],
[484,479,0,533,504,513,466,500,437,476,462,427,444,428,449],
[501,511,468,0,530,534,511,475,459,518,494,494,489,451,470],
[492,495,497,471,0,525,452,481,434,470,502,458,474,493,448],
[481,477,488,467,476,0,467,491,493,448,470,467,408,445,485],
[530,509,535,490,549,534,0,522,480,503,492,479,511,458,490],
[474,480,501,526,520,510,479,0,438,460,511,457,452,432,461],
[580,504,564,542,567,508,521,563,0,507,554,531,500,476,526],
[511,472,525,483,531,553,498,541,494,0,551,436,477,453,483],
[513,499,539,507,499,531,509,490,447,450,0,474,467,438,459],
[559,507,574,507,543,534,522,544,470,565,527,0,503,485,519],
[557,529,557,512,527,593,490,549,501,524,534,498,0,494,475],
[524,517,573,550,508,556,543,569,525,548,563,516,507,0,457],
[520,529,552,531,553,516,511,540,475,518,542,482,526,544,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 116, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,524,512,471,519,495,522,512,553,503,544,496,543,466],
[498,0,532,517,459,515,458,506,512,540,501,496,459,531,435],
[477,469,0,507,404,481,484,504,525,471,467,504,481,530,461],
[489,484,494,0,442,497,520,491,495,518,478,504,516,572,464],
[530,542,597,559,0,517,523,487,568,557,510,532,518,568,506],
[482,486,520,504,484,0,494,494,481,513,503,537,494,521,435],
[506,543,517,481,478,507,0,548,528,527,512,513,486,551,456],
[479,495,497,510,514,507,453,0,530,498,478,517,504,543,488],
[489,489,476,506,433,520,473,471,0,552,489,519,497,523,462],
[448,461,530,483,444,488,474,503,449,0,473,457,430,493,471],
[498,500,534,523,491,498,489,523,512,528,0,534,525,549,490],
[457,505,497,497,469,464,488,484,482,544,467,0,493,495,439],
[505,542,520,485,483,507,515,497,504,571,476,508,0,555,491],
[458,470,471,429,433,480,450,458,478,508,452,506,446,0,407],
[535,566,540,537,495,566,545,513,539,530,511,562,510,594,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 117, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,498,523,528,522,495,508,492,523,532,539,507,530,496],
[493,0,475,492,501,484,487,456,477,483,518,523,500,517,503],
[503,526,0,516,541,551,514,503,514,519,523,544,527,549,478],
[478,509,485,0,498,513,480,512,497,509,525,515,516,535,507],
[473,500,460,503,0,496,500,504,488,504,516,555,510,521,482],
[479,517,450,488,505,0,485,483,496,484,504,506,517,512,484],
[506,514,487,521,501,516,0,477,516,503,534,547,540,533,511],
[493,545,498,489,497,518,524,0,523,514,526,543,532,540,505],
[509,524,487,504,513,505,485,478,0,488,500,537,492,548,502],
[478,518,482,492,497,517,498,487,513,0,540,530,523,528,503],
[469,483,478,476,485,497,467,475,501,461,0,515,498,514,443],
[462,478,457,486,446,495,454,458,464,471,486,0,475,502,482],
[494,501,474,485,491,484,461,469,509,478,503,526,0,518,483],
[471,484,452,466,480,489,468,461,453,473,487,499,483,0,479],
[505,498,523,494,519,517,490,496,499,498,558,519,518,522,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 118, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,513,505,456,551,469,524,468,510,497,550,536,485,486],
[502,0,528,501,488,506,505,496,463,534,460,473,463,473,487],
[488,473,0,482,454,516,475,488,484,581,473,523,478,546,479],
[496,500,519,0,476,542,528,476,443,468,496,441,471,492,458],
[545,513,547,525,0,566,561,520,521,527,454,510,532,559,556],
[450,495,485,459,435,0,437,416,506,464,421,454,490,503,393],
[532,496,526,473,440,564,0,589,441,541,471,531,543,530,532],
[477,505,513,525,481,585,412,0,483,545,511,509,546,470,464],
[533,538,517,558,480,495,560,518,0,511,511,531,499,506,502],
[491,467,420,533,474,537,460,456,490,0,436,469,565,534,491],
[504,541,528,505,547,580,530,490,490,565,0,552,492,524,477],
[451,528,478,560,491,547,470,492,470,532,449,0,460,456,452],
[465,538,523,530,469,511,458,455,502,436,509,541,0,513,438],
[516,528,455,509,442,498,471,531,495,467,477,545,488,0,530],
[515,514,522,543,445,608,469,537,499,510,524,549,563,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 119, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,464,469,493,494,531,496,478,511,506,486,478,488,497],
[524,0,471,537,515,469,528,511,496,552,527,479,532,534,530],
[537,530,0,509,536,532,523,532,514,555,545,498,539,582,524],
[532,464,492,0,511,483,513,539,460,514,528,458,520,498,471],
[508,486,465,490,0,497,486,531,468,526,507,479,524,518,497],
[507,532,469,518,504,0,512,538,446,528,500,502,516,536,492],
[470,473,478,488,515,489,0,487,503,495,479,463,495,531,505],
[505,490,469,462,470,463,514,0,452,499,509,460,495,470,477],
[523,505,487,541,533,555,498,549,0,524,513,485,544,526,517],
[490,449,446,487,475,473,506,502,477,0,519,447,504,490,495],
[495,474,456,473,494,501,522,492,488,482,0,444,476,521,507],
[515,522,503,543,522,499,538,541,516,554,557,0,507,549,503],
[523,469,462,481,477,485,506,506,457,497,525,494,0,534,501],
[513,467,419,503,483,465,470,531,475,511,480,452,467,0,484],
[504,471,477,530,504,509,496,524,484,506,494,498,500,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 120, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,515,504,503,513,530,515,508,497,532,532,515,510,533],
[495,0,522,513,535,518,518,523,537,509,533,523,513,516,521],
[486,479,0,492,489,494,485,488,478,491,488,493,493,521,508],
[497,488,509,0,541,504,506,506,490,504,494,501,491,523,521],
[498,466,512,460,0,510,502,492,476,492,506,512,508,477,508],
[488,483,507,497,491,0,522,519,493,506,492,539,507,502,508],
[471,483,516,495,499,479,0,493,480,501,488,502,492,487,497],
[486,478,513,495,509,482,508,0,483,502,496,558,509,519,501],
[493,464,523,511,525,508,521,518,0,510,490,486,514,507,521],
[504,492,510,497,509,495,500,499,491,0,508,525,497,500,495],
[469,468,513,507,495,509,513,505,511,493,0,504,515,523,503],
[469,478,508,500,489,462,499,443,515,476,497,0,476,480,501],
[486,488,508,510,493,494,509,492,487,504,486,525,0,512,480],
[491,485,480,478,524,499,514,482,494,501,478,521,489,0,520],
[468,480,493,480,493,493,504,500,480,506,498,500,521,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 121, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,521,543,494,523,519,520,509,510,517,526,520,499,506,507],
[480,0,503,486,526,511,507,475,493,501,510,516,493,504,491],
[458,498,0,472,521,493,509,476,491,487,502,498,498,495,480],
[507,515,529,0,503,537,515,496,519,519,517,521,525,521,500],
[478,475,480,498,0,495,486,459,476,488,496,490,481,487,478],
[482,490,508,464,506,0,480,481,478,478,498,500,497,498,474],
[481,494,492,486,515,521,0,496,486,484,513,510,509,502,486],
[492,526,525,505,542,520,505,0,515,516,522,530,534,522,517],
[491,508,510,482,525,523,515,486,0,494,530,536,524,492,479],
[484,500,514,482,513,523,517,485,507,0,489,513,513,488,480],
[475,491,499,484,505,503,488,479,471,512,0,512,481,490,482],
[481,485,503,480,511,501,491,471,465,488,489,0,484,477,466],
[502,508,503,476,520,504,492,467,477,488,520,517,0,497,492],
[495,497,506,480,514,503,499,479,509,513,511,524,504,0,480],
[494,510,521,501,523,527,515,484,522,521,519,535,509,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 122, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,460,533,503,525,529,485,543,522,511,472,488,489,502],
[535,0,474,573,540,541,528,525,528,511,513,494,479,518,544],
[541,527,0,557,559,527,585,537,536,548,544,471,507,522,543],
[468,428,444,0,458,506,541,486,487,483,456,455,446,446,509],
[498,461,442,543,0,479,480,477,505,480,521,436,460,442,491],
[476,460,474,495,522,0,563,489,497,467,470,456,458,453,496],
[472,473,416,460,521,438,0,444,482,466,494,411,409,473,460],
[516,476,464,515,524,512,557,0,549,546,522,464,487,535,513],
[458,473,465,514,496,504,519,452,0,479,505,434,474,488,506],
[479,490,453,518,521,534,535,455,522,0,495,424,459,510,517],
[490,488,457,545,480,531,507,479,496,506,0,477,491,486,463],
[529,507,530,546,565,545,590,537,567,577,524,0,495,520,513],
[513,522,494,555,541,543,592,514,527,542,510,506,0,501,524],
[512,483,479,555,559,548,528,466,513,491,515,481,500,0,505],
[499,457,458,492,510,505,541,488,495,484,538,488,477,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 123, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,489,505,399,492,473,448,543,407,332,495,420,425,516],
[513,0,421,583,453,467,502,467,521,439,474,500,502,476,485],
[512,580,0,546,429,494,550,484,488,487,506,527,555,457,530],
[496,418,455,0,375,401,445,442,500,372,325,490,456,430,434],
[602,548,572,626,0,527,658,542,544,568,518,637,652,467,566],
[509,534,507,600,474,0,574,393,496,428,457,546,494,462,542],
[528,499,451,556,343,427,0,465,453,464,490,520,554,444,427],
[553,534,517,559,459,608,536,0,574,548,488,556,550,543,531],
[458,480,513,501,457,505,548,427,0,493,505,455,514,468,541],
[594,562,514,629,433,573,537,453,508,0,544,647,586,472,633],
[669,527,495,676,483,544,511,513,496,457,0,559,556,504,555],
[506,501,474,511,364,455,481,445,546,354,442,0,402,375,544],
[581,499,446,545,349,507,447,451,487,415,445,599,0,400,500],
[576,525,544,571,534,539,557,458,533,529,497,626,601,0,544],
[485,516,471,567,435,459,574,470,460,368,446,457,501,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 124, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,468,469,505,464,454,502,470,491,472,460,470,464,458],
[530,0,504,482,533,487,492,527,513,533,498,531,503,505,492],
[533,497,0,498,502,479,477,513,457,509,494,504,495,498,492],
[532,519,503,0,552,512,495,544,504,540,513,563,521,524,504],
[496,468,499,449,0,498,480,507,478,522,496,501,488,489,476],
[537,514,522,489,503,0,489,531,485,513,507,527,489,505,509],
[547,509,524,506,521,512,0,513,507,526,499,509,493,532,507],
[499,474,488,457,494,470,488,0,480,487,489,511,480,484,487],
[531,488,544,497,523,516,494,521,0,527,498,535,513,521,498],
[510,468,492,461,479,488,475,514,474,0,471,500,470,492,500],
[529,503,507,488,505,494,502,512,503,530,0,519,510,503,508],
[541,470,497,438,500,474,492,490,466,501,482,0,459,490,484],
[531,498,506,480,513,512,508,521,488,531,491,542,0,508,515],
[537,496,503,477,512,496,469,517,480,509,498,511,493,0,499],
[543,509,509,497,525,492,494,514,503,501,493,517,486,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 125, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,447,516,485,513,501,478,461,480,473,491,511,513,478],
[523,0,467,528,497,531,496,492,472,470,522,485,520,501,511],
[554,534,0,560,503,543,534,517,514,489,533,530,532,533,515],
[485,473,441,0,479,501,496,473,470,450,499,466,474,481,484],
[516,504,498,522,0,528,495,494,479,498,519,520,529,500,520],
[488,470,458,500,473,0,494,478,450,462,493,486,505,483,472],
[500,505,467,505,506,507,0,504,493,482,494,511,521,499,492],
[523,509,484,528,507,523,497,0,509,480,499,506,490,505,474],
[540,529,487,531,522,551,508,492,0,493,520,511,524,517,509],
[521,531,512,551,503,539,519,521,508,0,527,491,534,535,533],
[528,479,468,502,482,508,507,502,481,474,0,497,527,489,488],
[510,516,471,535,481,515,490,495,490,510,504,0,497,500,520],
[490,481,469,527,472,496,480,511,477,467,474,504,0,481,491],
[488,500,468,520,501,518,502,496,484,466,512,501,520,0,503],
[523,490,486,517,481,529,509,527,492,468,513,481,510,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 126, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,468,515,497,505,499,494,519,529,469,502,491,514,503],
[506,0,475,549,500,507,507,494,531,516,523,517,510,504,529],
[533,526,0,518,523,509,489,478,504,519,509,520,505,519,521],
[486,452,483,0,467,466,468,462,498,494,479,463,474,496,482],
[504,501,478,534,0,495,511,489,524,517,523,499,503,493,514],
[496,494,492,535,506,0,510,484,496,504,507,492,501,500,516],
[502,494,512,533,490,491,0,481,509,490,489,493,487,500,511],
[507,507,523,539,512,517,520,0,545,502,508,488,518,539,511],
[482,470,497,503,477,505,492,456,0,500,474,466,487,498,479],
[472,485,482,507,484,497,511,499,501,0,467,480,503,494,490],
[532,478,492,522,478,494,512,493,527,534,0,485,508,519,521],
[499,484,481,538,502,509,508,513,535,521,516,0,500,506,515],
[510,491,496,527,498,500,514,483,514,498,493,501,0,508,495],
[487,497,482,505,508,501,501,462,503,507,482,495,493,0,491],
[498,472,480,519,487,485,490,490,522,511,480,486,506,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 127, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,321,420,472,375,366,625,402,430,369,421,264,552,395],
[494,0,280,463,321,361,395,511,335,467,393,473,283,406,297],
[680,721,0,552,608,424,539,746,410,506,521,485,436,703,632],
[581,538,449,0,448,244,395,552,285,357,480,589,296,497,423],
[529,680,393,553,0,520,446,611,302,528,470,506,400,635,544],
[626,640,577,757,481,0,385,726,424,599,436,648,386,560,530],
[635,606,462,606,555,616,0,641,591,517,493,661,367,701,521],
[376,490,255,449,390,275,360,0,340,450,342,483,237,443,348],
[599,666,591,716,699,577,410,661,0,600,540,527,519,647,587],
[571,534,495,644,473,402,484,551,401,0,410,435,345,657,556],
[632,608,480,521,531,565,508,659,461,591,0,557,408,722,540],
[580,528,516,412,495,353,340,518,474,566,444,0,371,538,417],
[737,718,565,705,601,615,634,764,482,656,593,630,0,763,634],
[449,595,298,504,366,441,300,558,354,344,279,463,238,0,328],
[606,704,369,578,457,471,480,653,414,445,461,584,367,673,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 128, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,530,506,515,524,522,524,509,514,530,494,501,524,519,532],
[471,0,503,494,478,494,515,468,486,501,475,471,479,490,520],
[495,498,0,493,490,511,537,495,497,521,487,500,495,505,533],
[486,507,508,0,501,481,523,493,504,516,498,476,501,502,504],
[477,523,511,500,0,519,518,489,480,514,495,496,476,492,508],
[479,507,490,520,482,0,531,472,473,512,505,502,484,502,510],
[477,486,464,478,483,470,0,479,497,496,477,470,479,492,511],
[492,533,506,508,512,529,522,0,528,509,510,501,490,517,525],
[487,515,504,497,521,528,504,473,0,513,478,498,494,517,522],
[471,500,480,485,487,489,505,492,488,0,455,481,491,477,505],
[507,526,514,503,506,496,524,491,523,546,0,511,503,493,541],
[500,530,501,525,505,499,531,500,503,520,490,0,519,515,527],
[477,522,506,500,525,517,522,511,507,510,498,482,0,493,531],
[482,511,496,499,509,499,509,484,484,524,508,486,508,0,514],
[469,481,468,497,493,491,490,476,479,496,460,474,470,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 129, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,560,442,558,531,486,579,557,520,448,482,478,463,473,613],
[441,0,430,514,465,400,452,494,403,455,486,398,421,383,547],
[559,571,0,601,500,462,548,589,442,482,506,458,582,530,661],
[443,487,400,0,561,493,477,468,456,441,454,473,467,477,576],
[470,536,501,440,0,443,440,553,463,405,599,439,535,433,572],
[515,601,539,508,558,0,477,569,503,426,430,469,537,415,569],
[422,549,453,524,561,524,0,586,405,454,550,577,476,436,654],
[444,507,412,533,448,432,415,0,443,473,447,366,412,390,590],
[481,598,559,545,538,498,596,558,0,428,516,444,543,533,676],
[553,546,519,560,596,575,547,528,573,0,485,456,530,525,640],
[519,515,495,547,402,571,451,554,485,516,0,425,509,498,567],
[523,603,543,528,562,532,424,635,557,545,576,0,525,567,709],
[538,580,419,534,466,464,525,589,458,471,492,476,0,481,652],
[528,618,471,524,568,586,565,611,468,476,503,434,520,0,664],
[388,454,340,425,429,432,347,411,325,361,434,292,349,337,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 130, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,464,555,524,485,470,517,553,492,484,548,459,557,530],
[498,0,473,458,466,487,479,490,509,482,480,455,426,507,481],
[537,528,0,470,514,520,430,501,585,488,575,523,429,483,519],
[446,543,531,0,529,482,472,521,549,471,533,558,455,490,572],
[477,535,487,472,0,492,503,498,516,488,513,587,495,498,487],
[516,514,481,519,509,0,483,524,529,511,491,553,447,509,521],
[531,522,571,529,498,518,0,526,562,501,556,589,489,533,558],
[484,511,500,480,503,477,475,0,558,523,452,561,451,553,454],
[448,492,416,452,485,472,439,443,0,504,482,474,435,403,504],
[509,519,513,530,513,490,500,478,497,0,479,554,507,565,504],
[517,521,426,468,488,510,445,549,519,522,0,509,471,551,503],
[453,546,478,443,414,448,412,440,527,447,492,0,471,533,461],
[542,575,572,546,506,554,512,550,566,494,530,530,0,556,550],
[444,494,518,511,503,492,468,448,598,436,450,468,445,0,480],
[471,520,482,429,514,480,443,547,497,497,498,540,451,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 131, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,493,501,495,506,496,506,490,504,494,484,515,462,503],
[509,0,490,502,514,535,496,516,489,507,494,504,514,490,508],
[508,511,0,518,495,529,500,515,483,503,492,502,521,493,505],
[500,499,483,0,483,505,482,488,464,491,474,476,514,472,487],
[506,487,506,518,0,519,484,488,488,506,503,511,490,476,511],
[495,466,472,496,482,0,476,501,474,483,501,487,502,483,485],
[505,505,501,519,517,525,0,489,499,515,485,513,522,487,526],
[495,485,486,513,513,500,512,0,478,516,492,484,498,476,522],
[511,512,518,537,513,527,502,523,0,514,522,519,520,493,513],
[497,494,498,510,495,518,486,485,487,0,495,501,494,477,502],
[507,507,509,527,498,500,516,509,479,506,0,484,533,496,510],
[517,497,499,525,490,514,488,517,482,500,517,0,494,501,514],
[486,487,480,487,511,499,479,503,481,507,468,507,0,493,511],
[539,511,508,529,525,518,514,525,508,524,505,500,508,0,527],
[498,493,496,514,490,516,475,479,488,499,491,487,490,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 132, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,493,490,477,474,476,472,499,490,488,512,501,482,499],
[489,0,488,484,483,487,460,489,492,477,493,501,492,468,509],
[508,513,0,496,511,521,507,490,517,510,492,515,519,501,485],
[511,517,505,0,507,492,485,479,514,520,505,521,514,508,505],
[524,518,490,494,0,491,513,512,510,504,509,517,526,521,488],
[527,514,480,509,510,0,499,502,511,530,505,521,512,504,515],
[525,541,494,516,488,502,0,479,504,505,508,514,523,493,491],
[529,512,511,522,489,499,522,0,531,514,520,528,517,510,511],
[502,509,484,487,491,490,497,470,0,496,490,515,494,477,475],
[511,524,491,481,497,471,496,487,505,0,496,509,518,485,496],
[513,508,509,496,492,496,493,481,511,505,0,513,499,491,491],
[489,500,486,480,484,480,487,473,486,492,488,0,485,471,474],
[500,509,482,487,475,489,478,484,507,483,502,516,0,498,491],
[519,533,500,493,480,497,508,491,524,516,510,530,503,0,516],
[502,492,516,496,513,486,510,490,526,505,510,527,510,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 133, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,537,518,537,526,521,523,511,525,516,498,514,504,500],
[498,0,515,515,513,516,531,521,513,530,512,517,520,545,504],
[464,486,0,496,482,471,504,515,485,504,509,499,478,486,479],
[483,486,505,0,499,491,503,508,500,514,492,496,495,508,494],
[464,488,519,502,0,499,515,499,497,501,508,503,495,524,500],
[475,485,530,510,502,0,498,503,510,515,515,507,508,511,517],
[480,470,497,498,486,503,0,511,495,502,504,498,481,509,487],
[478,480,486,493,502,498,490,0,470,502,501,493,498,494,472],
[490,488,516,501,504,491,506,531,0,510,508,510,492,501,511],
[476,471,497,487,500,486,499,499,491,0,486,483,480,488,483],
[485,489,492,509,493,486,497,500,493,515,0,517,506,508,481],
[503,484,502,505,498,494,503,508,491,518,484,0,503,518,491],
[487,481,523,506,506,493,520,503,509,521,495,498,0,517,484],
[497,456,515,493,477,490,492,507,500,513,493,483,484,0,489],
[501,497,522,507,501,484,514,529,490,518,520,510,517,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 134, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,527,500,518,468,508,500,504,483,537,505,470,506,502],
[494,0,540,504,518,480,518,494,509,486,509,518,539,502,496],
[474,461,0,469,476,456,467,430,492,454,459,500,477,518,491],
[501,497,532,0,502,480,515,517,508,519,518,519,496,511,505],
[483,483,525,499,0,474,521,461,492,467,497,516,458,495,454],
[533,521,545,521,527,0,489,513,553,527,507,551,497,513,512],
[493,483,534,486,480,512,0,467,521,505,490,550,492,488,513],
[501,507,571,484,540,488,534,0,534,497,507,501,503,526,510],
[497,492,509,493,509,448,480,467,0,469,458,484,442,475,487],
[518,515,547,482,534,474,496,504,532,0,524,534,484,552,513],
[464,492,542,483,504,494,511,494,543,477,0,489,471,507,522],
[496,483,501,482,485,450,451,500,517,467,512,0,459,510,452],
[531,462,524,505,543,504,509,498,559,517,530,542,0,538,462],
[495,499,483,490,506,488,513,475,526,449,494,491,463,0,494],
[499,505,510,496,547,489,488,491,514,488,479,549,539,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 135, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,499,505,498,497,503,501,507,510,500,489,500,497,497],
[491,0,484,485,503,520,492,491,492,501,474,487,519,497,499],
[502,517,0,469,490,522,503,499,487,507,474,484,533,500,506],
[496,516,532,0,516,519,513,493,516,513,509,526,544,498,499],
[503,498,511,485,0,488,490,503,485,519,485,500,494,493,495],
[504,481,479,482,513,0,480,500,490,494,489,468,531,476,498],
[498,509,498,488,511,521,0,513,515,512,507,496,526,511,492],
[500,510,502,508,498,501,488,0,485,523,489,489,519,493,493],
[494,509,514,485,516,511,486,516,0,524,503,507,519,512,499],
[491,500,494,488,482,507,489,478,477,0,470,480,488,509,487],
[501,527,527,492,516,512,494,512,498,531,0,496,529,512,495],
[512,514,517,475,501,533,505,512,494,521,505,0,506,502,493],
[501,482,468,457,507,470,475,482,482,513,472,495,0,487,475],
[504,504,501,503,508,525,490,508,489,492,489,499,514,0,496],
[504,502,495,502,506,503,509,508,502,514,506,508,526,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 136, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,475,477,471,478,491,477,481,473,497,469,501,463,482],
[522,0,488,514,511,489,479,508,501,510,535,487,511,481,501],
[526,513,0,506,510,501,513,530,535,512,538,501,508,478,514],
[524,487,495,0,495,503,504,491,521,496,518,469,501,503,510],
[530,490,491,506,0,490,509,491,508,499,504,481,505,500,490],
[523,512,500,498,511,0,490,503,510,491,509,496,493,486,519],
[510,522,488,497,492,511,0,485,511,483,511,503,510,494,500],
[524,493,471,510,510,498,516,0,519,493,533,486,515,498,516],
[520,500,466,480,493,491,490,482,0,496,500,492,500,460,504],
[528,491,489,505,502,510,518,508,505,0,523,489,497,507,514],
[504,466,463,483,497,492,490,468,501,478,0,473,478,463,488],
[532,514,500,532,520,505,498,515,509,512,528,0,479,501,508],
[500,490,493,500,496,508,491,486,501,504,523,522,0,486,513],
[538,520,523,498,501,515,507,503,541,494,538,500,515,0,521],
[519,500,487,491,511,482,501,485,497,487,513,493,488,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 137, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,505,493,503,453,507,449,434,482,441,464,478,490,456],
[519,0,508,515,511,460,499,489,466,530,471,482,480,514,471],
[496,493,0,470,537,476,512,486,424,510,468,485,464,480,466],
[508,486,531,0,511,482,514,469,433,519,470,468,482,455,474],
[498,490,464,490,0,457,495,447,436,483,426,459,433,485,451],
[548,541,525,519,544,0,509,509,472,516,479,506,507,514,511],
[494,502,489,487,506,492,0,449,444,483,408,437,456,489,471],
[552,512,515,532,554,492,552,0,494,552,484,511,529,531,483],
[567,535,577,568,565,529,557,507,0,562,489,506,519,561,508],
[519,471,491,482,518,485,518,449,439,0,459,457,452,470,451],
[560,530,533,531,575,522,593,517,512,542,0,530,534,510,500],
[537,519,516,533,542,495,564,490,495,544,471,0,497,501,499],
[523,521,537,519,568,494,545,472,482,549,467,504,0,519,470],
[511,487,521,546,516,487,512,470,440,531,491,500,482,0,476],
[545,530,535,527,550,490,530,518,493,550,501,502,531,525,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 138, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,508,533,557,528,535,508,519,492,539,541,584,476,546],
[487,0,501,562,588,549,590,521,579,477,522,522,581,446,570],
[493,500,0,504,516,433,523,461,550,483,480,490,520,484,529],
[468,439,497,0,525,489,520,497,561,496,447,481,520,416,544],
[444,413,485,476,0,433,489,450,516,444,427,482,529,424,526],
[473,452,568,512,568,0,593,474,544,543,545,514,555,467,557],
[466,411,478,481,512,408,0,403,469,431,408,428,480,397,484],
[493,480,540,504,551,527,598,0,536,549,485,505,533,502,571],
[482,422,451,440,485,457,532,465,0,423,463,474,463,371,540],
[509,524,518,505,557,458,570,452,578,0,503,533,571,542,559],
[462,479,521,554,574,456,593,516,538,498,0,508,599,517,542],
[460,479,511,520,519,487,573,496,527,468,493,0,499,428,543],
[417,420,481,481,472,446,521,468,538,430,402,502,0,424,481],
[525,555,517,585,577,534,604,499,630,459,484,573,577,0,570],
[455,431,472,457,475,444,517,430,461,442,459,458,520,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 139, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,474,508,504,512,528,510,518,515,496,522,496,521,539],
[490,0,466,490,496,495,506,490,495,476,483,520,500,492,504],
[527,535,0,501,503,506,525,510,507,519,511,532,491,507,533],
[493,511,500,0,510,515,513,508,515,518,503,510,500,515,524],
[497,505,498,491,0,495,506,520,495,496,487,526,504,500,526],
[489,506,495,486,506,0,525,510,509,498,508,506,505,505,519],
[473,495,476,488,495,476,0,494,499,478,471,483,489,478,522],
[491,511,491,493,481,491,507,0,484,494,468,494,483,487,496],
[483,506,494,486,506,492,502,517,0,492,494,525,508,499,533],
[486,525,482,483,505,503,523,507,509,0,485,511,511,488,516],
[505,518,490,498,514,493,530,533,507,516,0,524,501,520,551],
[479,481,469,491,475,495,518,507,476,490,477,0,482,494,500],
[505,501,510,501,497,496,512,518,493,490,500,519,0,511,528],
[480,509,494,486,501,496,523,514,502,513,481,507,490,0,513],
[462,497,468,477,475,482,479,505,468,485,450,501,473,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 140, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,419,448,406,410,470,472,525,439,459,425,473,522,402],
[529,0,537,511,533,542,503,528,535,494,518,530,546,587,533],
[582,464,0,534,513,523,490,516,507,547,541,552,530,542,534],
[553,490,467,0,460,502,540,552,553,500,510,506,560,560,467],
[595,468,488,541,0,481,529,510,496,511,475,512,552,550,462],
[591,459,478,499,520,0,499,477,484,546,467,523,593,570,480],
[531,498,511,461,472,502,0,491,594,493,514,512,557,503,492],
[529,473,485,449,491,524,510,0,571,522,492,533,567,461,447],
[476,466,494,448,505,517,407,430,0,507,380,520,511,503,455],
[562,507,454,501,490,455,508,479,494,0,528,475,519,535,498],
[542,483,460,491,526,534,487,509,621,473,0,583,560,549,529],
[576,471,449,495,489,478,489,468,481,526,418,0,531,553,450],
[528,455,471,441,449,408,444,434,490,482,441,470,0,465,489],
[479,414,459,441,451,431,498,540,498,466,452,448,536,0,441],
[599,468,467,534,539,521,509,554,546,503,472,551,512,560,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 141, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,506,508,494,512,514,537,542,509,496,496,480,534,514],
[521,0,497,516,549,523,508,504,506,517,492,503,472,502,518],
[495,504,0,527,512,519,528,495,526,491,517,517,494,563,533],
[493,485,474,0,468,500,476,541,499,473,519,508,472,474,478],
[507,452,489,533,0,520,512,493,497,497,478,495,490,532,486],
[489,478,482,501,481,0,497,478,498,459,499,443,470,499,461],
[487,493,473,525,489,504,0,518,519,513,496,535,502,497,534],
[464,497,506,460,508,523,483,0,487,483,513,456,465,504,528],
[459,495,475,502,504,503,482,514,0,492,499,494,479,480,522],
[492,484,510,528,504,542,488,518,509,0,530,490,515,528,518],
[505,509,484,482,523,502,505,488,502,471,0,497,484,505,520],
[505,498,484,493,506,558,466,545,507,511,504,0,504,548,501],
[521,529,507,529,511,531,499,536,522,486,517,497,0,519,526],
[467,499,438,527,469,502,504,497,521,473,496,453,482,0,480],
[487,483,468,523,515,540,467,473,479,483,481,500,475,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 142, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,513,519,512,543,504,493,538,531,454,499,478,532,476],
[524,0,512,520,485,521,489,485,514,494,507,502,484,511,503],
[488,489,0,479,511,533,464,516,499,498,499,483,449,510,459],
[482,481,522,0,499,502,488,494,519,479,447,494,446,482,472],
[489,516,490,502,0,515,472,526,524,496,456,479,480,502,485],
[458,480,468,499,486,0,488,481,489,455,453,456,409,488,499],
[497,512,537,513,529,513,0,539,521,515,495,511,509,531,492],
[508,516,485,507,475,520,462,0,475,518,453,502,452,477,487],
[463,487,502,482,477,512,480,526,0,451,426,443,450,492,470],
[470,507,503,522,505,546,486,483,550,0,497,544,449,498,494],
[547,494,502,554,545,548,506,548,575,504,0,531,534,537,541],
[502,499,518,507,522,545,490,499,558,457,470,0,453,466,504],
[523,517,552,555,521,592,492,549,551,552,467,548,0,535,503],
[469,490,491,519,499,513,470,524,509,503,464,535,466,0,456],
[525,498,542,529,516,502,509,514,531,507,460,497,498,545,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 143, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,489,494,493,515,489,493,483,490,518,471,479,505,488],
[495,0,482,485,469,499,511,489,485,478,502,453,504,493,473],
[512,519,0,511,472,529,492,497,476,505,513,476,503,469,480],
[507,516,490,0,511,533,523,515,486,471,520,462,507,501,506],
[508,532,529,490,0,518,517,501,508,487,553,477,509,517,493],
[486,502,472,468,483,0,504,475,487,475,486,450,465,485,471],
[512,490,509,478,484,497,0,493,490,462,492,470,497,475,498],
[508,512,504,486,500,526,508,0,484,482,505,471,495,474,497],
[518,516,525,515,493,514,511,517,0,492,502,482,521,481,487],
[511,523,496,530,514,526,539,519,509,0,519,519,520,512,494],
[483,499,488,481,448,515,509,496,499,482,0,441,489,480,470],
[530,548,525,539,524,551,531,530,519,482,560,0,527,520,511],
[522,497,498,494,492,536,504,506,480,481,512,474,0,499,504],
[496,508,532,500,484,516,526,527,520,489,521,481,502,0,488],
[513,528,521,495,508,530,503,504,514,507,531,490,497,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 144, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,481,493,470,466,482,451,506,463,507,458,470,474,481],
[528,0,497,493,475,504,492,490,487,459,507,491,499,458,512],
[520,504,0,499,472,471,508,490,484,502,509,496,493,465,493],
[508,508,502,0,483,498,519,498,501,469,505,495,508,482,501],
[531,526,529,518,0,491,521,483,509,477,535,496,516,490,533],
[535,497,530,503,510,0,500,510,496,471,511,467,510,464,527],
[519,509,493,482,480,501,0,508,514,490,489,465,508,470,504],
[550,511,511,503,518,491,493,0,517,487,539,492,531,482,532],
[495,514,517,500,492,505,487,484,0,447,536,491,493,469,507],
[538,542,499,532,524,530,511,514,554,0,545,508,536,520,531],
[494,494,492,496,466,490,512,462,465,456,0,483,517,469,509],
[543,510,505,506,505,534,536,509,510,493,518,0,516,500,516],
[531,502,508,493,485,491,493,470,508,465,484,485,0,472,511],
[527,543,536,519,511,537,531,519,532,481,532,501,529,0,536],
[520,489,508,500,468,474,497,469,494,470,492,485,490,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 145, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,536,521,534,467,468,531,483,457,469,460,519,474,528],
[535,0,523,568,537,555,531,536,549,503,545,516,521,496,533],
[465,478,0,530,505,499,480,513,494,487,509,499,520,506,551],
[480,433,471,0,515,480,457,493,493,439,459,447,464,470,498],
[467,464,496,486,0,486,454,498,500,479,461,464,507,464,528],
[534,446,502,521,515,0,512,508,508,500,489,459,518,481,509],
[533,470,521,544,547,489,0,561,545,520,501,538,546,493,529],
[470,465,488,508,503,493,440,0,517,479,458,442,498,463,534],
[518,452,507,508,501,493,456,484,0,484,500,466,473,469,535],
[544,498,514,562,522,501,481,522,517,0,473,504,496,490,559],
[532,456,492,542,540,512,500,543,501,528,0,466,488,490,515],
[541,485,502,554,537,542,463,559,535,497,535,0,577,516,565],
[482,480,481,537,494,483,455,503,528,505,513,424,0,477,520],
[527,505,495,531,537,520,508,538,532,511,511,485,524,0,543],
[473,468,450,503,473,492,472,467,466,442,486,436,481,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 146, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,512,493,520,463,488,510,522,554,498,493,500,497,495],
[487,0,490,497,505,459,489,486,508,514,471,481,480,489,493],
[489,511,0,505,536,479,523,515,508,511,511,483,467,534,500],
[508,504,496,0,497,458,473,504,482,524,474,488,477,504,484],
[481,496,465,504,0,457,499,491,506,506,448,484,459,496,492],
[538,542,522,543,544,0,526,525,489,516,510,497,499,514,521],
[513,512,478,528,502,475,0,511,526,521,485,502,483,522,515],
[491,515,486,497,510,476,490,0,528,525,504,494,490,511,507],
[479,493,493,519,495,512,475,473,0,526,501,507,501,511,507],
[447,487,490,477,495,485,480,476,475,0,461,481,440,508,489],
[503,530,490,527,553,491,516,497,500,540,0,525,491,520,504],
[508,520,518,513,517,504,499,507,494,520,476,0,481,507,494],
[501,521,534,524,542,502,518,511,500,561,510,520,0,535,515],
[504,512,467,497,505,487,479,490,490,493,481,494,466,0,487],
[506,508,501,517,509,480,486,494,494,512,497,507,486,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 147, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,438,477,488,500,502,457,507,513,467,488,440,454,418],
[519,0,492,484,521,492,474,443,491,503,499,479,491,459,496],
[563,509,0,504,520,523,505,487,518,514,497,502,516,492,463],
[524,517,497,0,505,538,442,487,491,495,552,476,504,429,462],
[513,480,481,496,0,523,454,435,475,461,481,475,442,434,442],
[501,509,478,463,478,0,438,451,504,463,499,493,510,427,489],
[499,527,496,559,547,563,0,483,534,504,513,479,530,472,428],
[544,558,514,514,566,550,518,0,510,550,564,510,552,514,497],
[494,510,483,510,526,497,467,491,0,493,498,517,508,443,489],
[488,498,487,506,540,538,497,451,508,0,511,483,466,465,473],
[534,502,504,449,520,502,488,437,503,490,0,488,510,483,468],
[513,522,499,525,526,508,522,491,484,518,513,0,484,423,504],
[561,510,485,497,559,491,471,449,493,535,491,517,0,519,458],
[547,542,509,572,567,574,529,487,558,536,518,578,482,0,525],
[583,505,538,539,559,512,573,504,512,528,533,497,543,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 148, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,530,488,489,451,557,521,491,498,483,502,513,565,544,539],
[471,0,475,516,503,524,510,511,488,505,474,490,502,514,479],
[513,526,0,532,472,495,549,456,495,492,514,512,499,512,526],
[512,485,469,0,465,545,520,485,478,448,485,501,475,557,533],
[550,498,529,536,0,567,553,553,537,530,494,540,535,546,560],
[444,477,506,456,434,0,486,431,452,480,480,433,467,502,469],
[480,491,452,481,448,515,0,510,449,448,468,476,487,524,497],
[510,490,545,516,448,570,491,0,482,498,480,519,496,552,524],
[503,513,506,523,464,549,552,519,0,511,537,515,580,557,556],
[518,496,509,553,471,521,553,503,490,0,505,518,509,548,562],
[499,527,487,516,507,521,533,521,464,496,0,524,533,559,489],
[488,511,489,500,461,568,525,482,486,483,477,0,536,568,501],
[436,499,502,526,466,534,514,505,421,492,468,465,0,488,494],
[457,487,489,444,455,499,477,449,444,453,442,433,513,0,509],
[462,522,475,468,441,532,504,477,445,439,512,500,507,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 149, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,467,490,513,552,457,439,516,545,446,472,485,429,417],
[537,0,501,499,558,540,499,448,556,607,483,528,488,493,450],
[534,500,0,510,591,530,458,482,555,571,462,493,531,474,499],
[511,502,491,0,544,552,472,458,585,608,453,524,562,480,504],
[488,443,410,457,0,425,427,423,500,518,413,412,442,474,387],
[449,461,471,449,576,0,479,471,576,523,525,430,537,464,396],
[544,502,543,529,574,522,0,453,529,549,501,504,549,474,498],
[562,553,519,543,578,530,548,0,593,599,508,551,590,519,499],
[485,445,446,416,501,425,472,408,0,514,457,415,501,463,419],
[456,394,430,393,483,478,452,402,487,0,442,490,457,466,378],
[555,518,539,548,588,476,500,493,544,559,0,517,579,517,478],
[529,473,508,477,589,571,497,450,586,511,484,0,556,465,475],
[516,513,470,439,559,464,452,411,500,544,422,445,0,443,453],
[572,508,527,521,527,537,527,482,538,535,484,536,558,0,462],
[584,551,502,497,614,605,503,502,582,623,523,526,548,539,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 150, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,480,494,475,491,478,500,526,484,504,519,516,517,527],
[505,0,507,498,482,514,503,509,507,508,508,521,498,480,507],
[521,494,0,480,478,491,467,499,491,475,484,505,500,487,499],
[507,503,521,0,519,495,513,513,514,514,500,532,524,510,509],
[526,519,523,482,0,493,508,511,512,520,531,526,502,495,534],
[510,487,510,506,508,0,477,500,485,506,498,500,495,490,510],
[523,498,534,488,493,524,0,521,520,524,521,514,518,521,516],
[501,492,502,488,490,501,480,0,514,502,504,520,484,502,508],
[475,494,510,487,489,516,481,487,0,493,524,498,489,479,490],
[517,493,526,487,481,495,477,499,508,0,514,513,508,502,513],
[497,493,517,501,470,503,480,497,477,487,0,499,490,495,504],
[482,480,496,469,475,501,487,481,503,488,502,0,498,495,498],
[485,503,501,477,499,506,483,517,512,493,511,503,0,487,492],
[484,521,514,491,506,511,480,499,522,499,506,506,514,0,527],
[474,494,502,492,467,491,485,493,511,488,497,503,509,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 151, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,520,514,498,510,481,478,475,485,484,494,494,477,501],
[517,0,504,526,475,515,493,528,507,522,504,499,510,533,514],
[481,497,0,541,473,476,488,491,494,488,506,490,515,496,485],
[487,475,460,0,464,457,490,466,480,462,481,492,496,477,482],
[503,526,528,537,0,503,518,527,496,516,498,492,512,504,540],
[491,486,525,544,498,0,481,490,492,520,483,522,500,509,496],
[520,508,513,511,483,520,0,478,518,505,490,485,499,504,497],
[523,473,510,535,474,511,523,0,475,514,496,524,524,499,547],
[526,494,507,521,505,509,483,526,0,512,522,522,533,496,519],
[516,479,513,539,485,481,496,487,489,0,492,481,499,507,518],
[517,497,495,520,503,518,511,505,479,509,0,504,512,506,523],
[507,502,511,509,509,479,516,477,479,520,497,0,512,477,517],
[507,491,486,505,489,501,502,477,468,502,489,489,0,471,502],
[524,468,505,524,497,492,497,502,505,494,495,524,530,0,519],
[500,487,516,519,461,505,504,454,482,483,478,484,499,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 152, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,540,513,526,464,529,529,516,492,498,482,450,521,532],
[492,0,517,513,498,479,506,514,477,474,508,481,448,490,504],
[461,484,0,528,514,464,499,507,519,479,461,472,453,510,503],
[488,488,473,0,465,478,485,500,475,486,465,468,462,467,505],
[475,503,487,536,0,476,523,520,496,486,488,482,492,479,532],
[537,522,537,523,525,0,520,545,498,506,482,505,502,538,543],
[472,495,502,516,478,481,0,485,510,449,486,465,467,480,516],
[472,487,494,501,481,456,516,0,473,467,448,495,475,490,482],
[485,524,482,526,505,503,491,528,0,501,485,469,476,494,498],
[509,527,522,515,515,495,552,534,500,0,491,499,480,504,518],
[503,493,540,536,513,519,515,553,516,510,0,521,479,509,534],
[519,520,529,533,519,496,536,506,532,502,480,0,473,517,524],
[551,553,548,539,509,499,534,526,525,521,522,528,0,505,553],
[480,511,491,534,522,463,521,511,507,497,492,484,496,0,519],
[469,497,498,496,469,458,485,519,503,483,467,477,448,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 153, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,382,531,469,434,487,446,465,419,580,515,514,496,485],
[515,0,439,499,420,456,568,394,532,473,625,482,553,479,588],
[619,562,0,577,617,534,488,470,577,541,595,602,598,635,515],
[470,502,424,0,455,455,546,467,482,461,556,510,613,496,471],
[532,581,384,546,0,489,489,380,551,426,457,483,525,445,513],
[567,545,467,546,512,0,577,494,498,393,626,447,588,533,575],
[514,433,513,455,512,424,0,440,559,481,641,510,594,533,504],
[555,607,531,534,621,507,561,0,562,458,601,552,561,528,594],
[536,469,424,519,450,503,442,439,0,462,451,433,457,504,474],
[582,528,460,540,575,608,520,543,539,0,555,544,559,438,527],
[421,376,406,445,544,375,360,400,550,446,0,473,493,461,456],
[486,519,399,491,518,554,491,449,568,457,528,0,510,472,459],
[487,448,403,388,476,413,407,440,544,442,508,491,0,414,437],
[505,522,366,505,556,468,468,473,497,563,540,529,587,0,490],
[516,413,486,530,488,426,497,407,527,474,545,542,564,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 154, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,592,535,308,397,588,329,506,519,469,589,596,519,506],
[542,0,587,607,421,371,546,442,567,659,484,372,495,584,476],
[409,414,0,370,347,320,378,363,449,350,428,307,482,428,334],
[466,394,631,0,416,375,505,409,461,552,345,451,447,559,505],
[693,580,654,585,0,417,561,479,540,601,444,534,537,561,449],
[604,630,681,626,584,0,639,524,598,632,593,493,527,614,471],
[413,455,623,496,440,362,0,379,525,507,399,556,379,509,521],
[672,559,638,592,522,477,622,0,555,615,518,482,530,595,481],
[495,434,552,540,461,403,476,446,0,732,456,576,397,592,476],
[482,342,651,449,400,369,494,386,269,0,504,307,306,625,360],
[532,517,573,656,557,408,602,483,545,497,0,476,399,471,485],
[412,629,694,550,467,508,445,519,425,694,525,0,435,638,368],
[405,506,519,554,464,474,622,471,604,695,602,566,0,601,591],
[482,417,573,442,440,387,492,406,409,376,530,363,400,0,288],
[495,525,667,496,552,530,480,520,525,641,516,633,410,713,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 155, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,486,486,537,528,509,532,535,501,534,516,486,477,514],
[510,0,499,524,473,495,520,487,527,486,498,504,471,457,507],
[515,502,0,470,450,478,489,480,491,484,481,520,454,465,480],
[515,477,531,0,508,518,511,533,542,489,527,511,513,493,516],
[464,528,551,493,0,492,500,506,494,460,537,508,491,473,477],
[473,506,523,483,509,0,525,551,495,468,510,506,476,489,531],
[492,481,512,490,501,476,0,483,506,500,490,508,455,472,475],
[469,514,521,468,495,450,518,0,500,463,526,512,474,513,507],
[466,474,510,459,507,506,495,501,0,444,452,493,467,514,533],
[500,515,517,512,541,533,501,538,557,0,529,522,497,496,557],
[467,503,520,474,464,491,511,475,549,472,0,468,457,496,502],
[485,497,481,490,493,495,493,489,508,479,533,0,463,480,500],
[515,530,547,488,510,525,546,527,534,504,544,538,0,496,492],
[524,544,536,508,528,512,529,488,487,505,505,521,505,0,530],
[487,494,521,485,524,470,526,494,468,444,499,501,509,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 156, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,454,567,442,468,471,507,506,521,479,460,479,571,432],
[495,0,460,527,445,486,551,498,502,494,431,412,430,534,475],
[547,541,0,526,518,464,484,554,571,535,532,457,451,577,488],
[434,474,475,0,434,431,484,455,455,458,399,398,396,498,414],
[559,556,483,567,0,505,486,460,546,513,475,497,496,587,449],
[533,515,537,570,496,0,500,599,581,553,528,531,505,630,539],
[530,450,517,517,515,501,0,555,564,548,449,436,505,591,456],
[494,503,447,546,541,402,446,0,560,515,469,467,477,552,428],
[495,499,430,546,455,420,437,441,0,457,446,410,456,561,496],
[480,507,466,543,488,448,453,486,544,0,445,386,490,527,482],
[522,570,469,602,526,473,552,532,555,556,0,534,551,603,493],
[541,589,544,603,504,470,565,534,591,615,467,0,517,629,530],
[522,571,550,605,505,496,496,524,545,511,450,484,0,638,488],
[430,467,424,503,414,371,410,449,440,474,398,372,363,0,395],
[569,526,513,587,552,462,545,573,505,519,508,471,513,606,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 157, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,519,492,492,499,513,500,481,489,501,486,494,489,511,505],
[482,0,489,485,462,518,492,482,479,496,487,509,471,490,489],
[509,512,0,504,501,510,497,489,489,494,496,512,486,473,507],
[509,516,497,0,515,526,506,504,525,514,499,527,515,518,516],
[502,539,500,486,0,501,498,497,503,497,481,499,481,490,513],
[488,483,491,475,500,0,483,469,491,484,474,492,485,508,500],
[501,509,504,495,503,518,0,493,499,485,468,529,495,511,510],
[520,519,512,497,504,532,508,0,510,500,497,507,493,512,519],
[512,522,512,476,498,510,502,491,0,500,505,511,495,504,494],
[500,505,507,487,504,517,516,501,501,0,486,528,509,507,513],
[515,514,505,502,520,527,533,504,496,515,0,520,492,507,516],
[507,492,489,474,502,509,472,494,490,473,481,0,466,492,493],
[512,530,515,486,520,516,506,508,506,492,509,535,0,512,526],
[490,511,528,483,511,493,490,489,497,494,494,509,489,0,490],
[496,512,494,485,488,501,491,482,507,488,485,508,475,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 158, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,477,483,495,502,487,523,487,446,509,490,477,455,455],
[512,0,533,483,505,556,493,482,535,470,535,527,501,508,459],
[524,468,0,472,536,468,467,508,502,484,518,430,488,452,480],
[518,518,529,0,501,504,439,486,550,503,520,452,484,464,443],
[506,496,465,500,0,526,471,486,489,445,459,460,498,417,481],
[499,445,533,497,475,0,468,449,514,424,476,462,483,462,425],
[514,508,534,562,530,533,0,521,524,520,513,506,546,506,496],
[478,519,493,515,515,552,480,0,525,497,493,484,504,488,470],
[514,466,499,451,512,487,477,476,0,479,521,501,505,465,477],
[555,531,517,498,556,577,481,504,522,0,509,518,566,488,504],
[492,466,483,481,542,525,488,508,480,492,0,477,513,458,486],
[511,474,571,549,541,539,495,517,500,483,524,0,511,525,480],
[524,500,513,517,503,518,455,497,496,435,488,490,0,494,465],
[546,493,549,537,584,539,495,513,536,513,543,476,507,0,502],
[546,542,521,558,520,576,505,531,524,497,515,521,536,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 159, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,424,476,477,454,447,452,479,468,470,487,409,499,468],
[524,0,463,503,450,465,515,493,459,480,508,451,480,468,529],
[577,538,0,533,516,510,518,529,527,531,524,497,507,544,556],
[525,498,468,0,488,510,513,511,466,522,526,483,463,489,510],
[524,551,485,513,0,501,503,488,470,475,540,481,492,543,494],
[547,536,491,491,500,0,499,486,485,510,498,498,477,501,528],
[554,486,483,488,498,502,0,484,473,512,480,502,456,485,507],
[549,508,472,490,513,515,517,0,494,555,535,515,452,522,560],
[522,542,474,535,531,516,528,507,0,538,547,527,490,519,566],
[533,521,470,479,526,491,489,446,463,0,524,495,489,512,485],
[531,493,477,475,461,503,521,466,454,477,0,509,511,546,544],
[514,550,504,518,520,503,499,486,474,506,492,0,456,516,472],
[592,521,494,538,509,524,545,549,511,512,490,545,0,550,547],
[502,533,457,512,458,500,516,479,482,489,455,485,451,0,482],
[533,472,445,491,507,473,494,441,435,516,457,529,454,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 160, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,524,443,502,430,461,507,537,465,470,498,520,525,422,488],
[477,0,444,469,432,462,524,462,441,454,499,496,473,425,494],
[558,557,0,449,437,550,531,542,489,499,511,490,586,444,530],
[499,532,552,0,464,553,527,588,546,514,495,567,542,499,521],
[571,569,564,537,0,599,579,560,537,579,546,587,568,482,577],
[540,539,451,448,402,0,453,484,464,462,489,494,480,426,437],
[494,477,470,474,422,548,0,536,451,496,530,523,525,452,453],
[464,539,459,413,441,517,465,0,457,491,515,487,496,495,478],
[536,560,512,455,464,537,550,544,0,520,503,553,525,497,519],
[531,547,502,487,422,539,505,510,481,0,476,509,526,512,437],
[503,502,490,506,455,512,471,486,498,525,0,532,520,486,487],
[481,505,511,434,414,507,478,514,448,492,469,0,534,372,457],
[476,528,415,459,433,521,476,505,476,475,481,467,0,464,523],
[579,576,557,502,519,575,549,506,504,489,515,629,537,0,512],
[513,507,471,480,424,564,548,523,482,564,514,544,478,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 161, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,496,507,494,481,525,464,504,497,512,481,493,507,499],
[514,0,508,499,508,509,539,507,524,513,523,489,482,523,506],
[505,493,0,504,514,492,510,505,502,481,495,507,489,521,491],
[494,502,497,0,492,491,519,486,514,493,494,480,512,499,496],
[507,493,487,509,0,497,514,493,503,493,509,498,492,486,511],
[520,492,509,510,504,0,529,484,527,506,496,496,522,500,514],
[476,462,491,482,487,472,0,468,486,469,477,475,473,478,471],
[537,494,496,515,508,517,533,0,515,508,521,524,501,497,510],
[497,477,499,487,498,474,515,486,0,504,506,479,504,486,509],
[504,488,520,508,508,495,532,493,497,0,499,489,518,516,513],
[489,478,506,507,492,505,524,480,495,502,0,491,525,506,503],
[520,512,494,521,503,505,526,477,522,512,510,0,512,505,508],
[508,519,512,489,509,479,528,500,497,483,476,489,0,496,517],
[494,478,480,502,515,501,523,504,515,485,495,496,505,0,493],
[502,495,510,505,490,487,530,491,492,488,498,493,484,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 162, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,523,482,501,485,500,503,524,536,501,481,522,527,493,509],
[478,0,467,482,470,480,483,480,484,478,474,471,491,481,487],
[519,534,0,520,496,512,530,520,515,524,508,514,521,515,546],
[500,519,481,0,499,472,490,507,518,482,473,500,496,506,502],
[516,531,505,502,0,501,508,512,551,515,483,514,502,508,506],
[501,521,489,529,500,0,532,540,530,491,496,507,511,505,536],
[498,518,471,511,493,469,0,489,497,490,492,498,510,504,519],
[477,521,481,494,489,461,512,0,500,506,479,494,490,498,491],
[465,517,486,483,450,471,504,501,0,493,468,501,471,497,517],
[500,523,477,519,486,510,511,495,508,0,490,510,498,535,530],
[520,527,493,528,518,505,509,522,533,511,0,502,533,508,510],
[479,530,487,501,487,494,503,507,500,491,499,0,501,496,522],
[474,510,480,505,499,490,491,511,530,503,468,500,0,500,513],
[508,520,486,495,493,496,497,503,504,466,493,505,501,0,543],
[492,514,455,499,495,465,482,510,484,471,491,479,488,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 163, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,499,521,513,511,508,494,498,506,515,505,492,511,498],
[498,0,480,503,508,501,521,474,513,467,500,496,485,494,484],
[502,521,0,509,520,514,522,503,505,499,506,525,492,504,510],
[480,498,492,0,509,478,504,478,512,496,492,502,501,495,491],
[488,493,481,492,0,482,483,467,489,470,521,501,468,500,477],
[490,500,487,523,519,0,508,480,501,485,494,493,510,497,520],
[493,480,479,497,518,493,0,487,515,499,520,506,483,513,474],
[507,527,498,523,534,521,514,0,525,481,495,495,498,528,505],
[503,488,496,489,512,500,486,476,0,469,502,490,476,484,467],
[495,534,502,505,531,516,502,520,532,0,501,511,502,517,518],
[486,501,495,509,480,507,481,506,499,500,0,513,495,500,474],
[496,505,476,499,500,508,495,506,511,490,488,0,510,509,505],
[509,516,509,500,533,491,518,503,525,499,506,491,0,514,503],
[490,507,497,506,501,504,488,473,517,484,501,492,487,0,506],
[503,517,491,510,524,481,527,496,534,483,527,496,498,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 164, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,505,499,513,496,490,486,490,488,494,526,485,500,493],
[501,0,522,499,549,538,490,535,515,531,497,557,512,545,531],
[496,479,0,514,532,542,515,523,504,506,493,540,519,514,495],
[502,502,487,0,484,548,512,545,488,480,485,537,494,492,499],
[488,452,469,517,0,539,495,548,512,515,519,526,477,519,499],
[505,463,459,453,462,0,468,483,493,445,466,510,460,497,469],
[511,511,486,489,506,533,0,543,515,476,510,533,501,507,491],
[515,466,478,456,453,518,458,0,456,472,473,509,459,513,481],
[511,486,497,513,489,508,486,545,0,500,503,524,494,521,484],
[513,470,495,521,486,556,525,529,501,0,518,563,513,522,500],
[507,504,508,516,482,535,491,528,498,483,0,509,508,513,478],
[475,444,461,464,475,491,468,492,477,438,492,0,459,463,470],
[516,489,482,507,524,541,500,542,507,488,493,542,0,519,500],
[501,456,487,509,482,504,494,488,480,479,488,538,482,0,442],
[508,470,506,502,502,532,510,520,517,501,523,531,501,559,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 165, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,493,500,488,490,493,503,499,521,483,495,488,506,496],
[503,0,512,505,519,499,479,496,504,492,511,475,500,502,490],
[508,489,0,505,500,500,489,507,488,498,490,493,534,498,514],
[501,496,496,0,475,480,481,505,481,490,485,483,496,485,488],
[513,482,501,526,0,527,503,524,512,509,491,487,524,500,486],
[511,502,501,521,474,0,487,514,506,512,488,501,503,495,504],
[508,522,512,520,498,514,0,513,517,497,498,498,494,502,506],
[498,505,494,496,477,487,488,0,495,481,487,493,503,491,471],
[502,497,513,520,489,495,484,506,0,520,498,498,529,491,503],
[480,509,503,511,492,489,504,520,481,0,492,499,514,516,493],
[518,490,511,516,510,513,503,514,503,509,0,503,502,485,502],
[506,526,508,518,514,500,503,508,503,502,498,0,531,522,488],
[513,501,467,505,477,498,507,498,472,487,499,470,0,500,507],
[495,499,503,516,501,506,499,510,510,485,516,479,501,0,508],
[505,511,487,513,515,497,495,530,498,508,499,513,494,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 166, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,515,513,455,439,519,494,470,440,485,489,522,468,497],
[560,0,540,529,491,475,493,498,564,470,481,521,475,491,506],
[486,461,0,527,514,475,513,541,498,470,522,488,501,510,451],
[488,472,474,0,494,466,527,521,513,434,466,536,513,485,441],
[546,510,487,507,0,469,580,557,458,470,500,506,533,517,494],
[562,526,526,535,532,0,564,543,545,463,508,511,544,536,495],
[482,508,488,474,421,437,0,481,493,455,482,482,506,464,403],
[507,503,460,480,444,458,520,0,503,403,413,500,457,448,463],
[531,437,503,488,543,456,508,498,0,464,390,499,473,550,485],
[561,531,531,567,531,538,546,598,537,0,494,541,484,502,460],
[516,520,479,535,501,493,519,588,611,507,0,522,503,556,531],
[512,480,513,465,495,490,519,501,502,460,479,0,504,499,478],
[479,526,500,488,468,457,495,544,528,517,498,497,0,482,478],
[533,510,491,516,484,465,537,553,451,499,445,502,519,0,482],
[504,495,550,560,507,506,598,538,516,541,470,523,523,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 167, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,467,495,472,514,493,486,540,517,521,522,548,498,541],
[526,0,485,521,505,537,524,491,554,542,499,521,553,535,569],
[534,516,0,475,477,536,507,514,539,523,559,495,511,486,561],
[506,480,526,0,466,511,531,488,555,521,525,533,561,537,544],
[529,496,524,535,0,542,512,494,500,517,509,544,562,517,545],
[487,464,465,490,459,0,514,479,527,480,490,484,542,482,501],
[508,477,494,470,489,487,0,483,560,518,500,513,533,544,557],
[515,510,487,513,507,522,518,0,553,544,512,521,489,510,561],
[461,447,462,446,501,474,441,448,0,519,503,515,472,523,548],
[484,459,478,480,484,521,483,457,482,0,473,485,490,475,538],
[480,502,442,476,492,511,501,489,498,528,0,523,514,503,530],
[479,480,506,468,457,517,488,480,486,516,478,0,508,475,527],
[453,448,490,440,439,459,468,512,529,511,487,493,0,471,502],
[503,466,515,464,484,519,457,491,478,526,498,526,530,0,559],
[460,432,440,457,456,500,444,440,453,463,471,474,499,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 168, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,503,506,416,452,459,485,457,488,490,481,428,459,428],
[513,0,540,483,425,476,524,492,437,436,464,521,429,514,494],
[498,461,0,502,442,457,486,512,419,447,455,479,445,469,453],
[495,518,499,0,388,449,490,481,461,455,511,498,411,524,449],
[585,576,559,613,0,566,543,547,536,524,545,562,520,564,484],
[549,525,544,552,435,0,509,477,481,445,546,464,423,489,470],
[542,477,515,511,458,492,0,508,437,464,553,488,479,523,454],
[516,509,489,520,454,524,493,0,475,469,562,530,435,512,464],
[544,564,582,540,465,520,564,526,0,511,557,568,500,569,493],
[513,565,554,546,477,556,537,532,490,0,578,543,483,535,505],
[511,537,546,490,456,455,448,439,444,423,0,507,468,542,458],
[520,480,522,503,439,537,513,471,433,458,494,0,483,550,446],
[573,572,556,590,481,578,522,566,501,518,533,518,0,559,551],
[542,487,532,477,437,512,478,489,432,466,459,451,442,0,421],
[573,507,548,552,517,531,547,537,508,496,543,555,450,580,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 169, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,556,525,537,501,533,513,543,516,479,503,526,568,510,530],
[445,0,468,483,460,475,435,515,444,450,494,485,505,482,481],
[476,533,0,514,450,529,512,558,463,495,510,548,528,523,556],
[464,518,487,0,488,536,472,563,457,480,524,517,540,499,563],
[500,541,551,513,0,506,521,547,498,514,522,503,523,511,518],
[468,526,472,465,495,0,475,562,463,466,489,492,539,532,499],
[488,566,489,529,480,526,0,533,480,469,519,523,564,510,514],
[458,486,443,438,454,439,468,0,452,455,464,489,476,473,493],
[485,557,538,544,503,538,521,549,0,483,523,541,575,546,535],
[522,551,506,521,487,535,532,546,518,0,503,485,541,516,553],
[498,507,491,477,479,512,482,537,478,498,0,506,517,536,497],
[475,516,453,484,498,509,478,512,460,516,495,0,534,510,503],
[433,496,473,461,478,462,437,525,426,460,484,467,0,481,477],
[491,519,478,502,490,469,491,528,455,485,465,491,520,0,518],
[471,520,445,438,483,502,487,508,466,448,504,498,524,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 170, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,493,507,459,495,532,445,512,472,526,511,445,496,512],
[560,0,581,521,500,550,533,530,582,536,583,549,532,566,573],
[508,420,0,490,446,452,540,456,523,476,486,488,476,521,496],
[494,480,511,0,414,491,531,484,560,525,518,476,481,514,528],
[542,501,555,587,0,529,581,480,575,539,554,530,566,551,564],
[506,451,549,510,472,0,503,492,571,513,504,534,519,520,505],
[469,468,461,470,420,498,0,467,516,503,491,477,472,488,493],
[556,471,545,517,521,509,534,0,559,516,532,522,504,569,538],
[489,419,478,441,426,430,485,442,0,469,449,473,475,517,468],
[529,465,525,476,462,488,498,485,532,0,526,511,507,515,534],
[475,418,515,483,447,497,510,469,552,475,0,515,482,509,504],
[490,452,513,525,471,467,524,479,528,490,486,0,498,516,522],
[556,469,525,520,435,482,529,497,526,494,519,503,0,566,531],
[505,435,480,487,450,481,513,432,484,486,492,485,435,0,492],
[489,428,505,473,437,496,508,463,533,467,497,479,470,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 171, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,520,499,496,526,511,497,533,511,518,534,520,510,503],
[509,0,529,505,504,523,506,498,526,525,512,531,505,513,502],
[481,472,0,466,469,520,495,481,493,484,485,518,481,488,483],
[502,496,535,0,483,529,520,523,501,519,520,526,519,500,494],
[505,497,532,518,0,534,512,523,536,516,528,540,520,524,504],
[475,478,481,472,467,0,492,471,482,487,483,507,478,479,472],
[490,495,506,481,489,509,0,517,511,502,510,525,509,492,490],
[504,503,520,478,478,530,484,0,502,511,511,522,511,491,495],
[468,475,508,500,465,519,490,499,0,482,499,490,506,486,487],
[490,476,517,482,485,514,499,490,519,0,505,499,498,496,513],
[483,489,516,481,473,518,491,490,502,496,0,503,493,487,467],
[467,470,483,475,461,494,476,479,511,502,498,0,486,493,474],
[481,496,520,482,481,523,492,490,495,503,508,515,0,509,481],
[491,488,513,501,477,522,509,510,515,505,514,508,492,0,490],
[498,499,518,507,497,529,511,506,514,488,534,527,520,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 172, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,462,477,506,481,500,463,513,492,480,503,483,501,477],
[485,0,464,494,493,482,447,447,496,488,500,496,485,495,489],
[539,537,0,511,538,508,511,504,564,506,549,491,522,541,518],
[524,507,490,0,541,528,496,486,500,501,528,501,534,522,499],
[495,508,463,460,0,491,475,467,507,484,491,479,479,488,460],
[520,519,493,473,510,0,490,480,497,475,518,497,488,540,488],
[501,554,490,505,526,511,0,483,543,496,483,510,517,552,501],
[538,554,497,515,534,521,518,0,514,521,516,525,525,546,512],
[488,505,437,501,494,504,458,487,0,471,502,483,502,513,485],
[509,513,495,500,517,526,505,480,530,0,527,511,513,525,499],
[521,501,452,473,510,483,518,485,499,474,0,506,493,525,481],
[498,505,510,500,522,504,491,476,518,490,495,0,510,517,521],
[518,516,479,467,522,513,484,476,499,488,508,491,0,551,511],
[500,506,460,479,513,461,449,455,488,476,476,484,450,0,480],
[524,512,483,502,541,513,500,489,516,502,520,480,490,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 173, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,511,520,496,512,524,522,490,521,506,527,522,492,472],
[484,0,492,498,506,488,509,490,496,505,495,524,489,476,502],
[490,509,0,531,521,508,502,512,508,507,509,529,510,525,482],
[481,503,470,0,457,524,525,510,504,504,506,520,512,495,476],
[505,495,480,544,0,516,538,543,513,528,511,521,537,528,492],
[489,513,493,477,485,0,512,490,484,503,499,523,491,486,499],
[477,492,499,476,463,489,0,500,500,494,496,511,526,499,484],
[479,511,489,491,458,511,501,0,501,505,505,518,525,512,471],
[511,505,493,497,488,517,501,500,0,510,490,527,494,521,479],
[480,496,494,497,473,498,507,496,491,0,471,504,520,508,447],
[495,506,492,495,490,502,505,496,511,530,0,523,502,525,487],
[474,477,472,481,480,478,490,483,474,497,478,0,511,503,477],
[479,512,491,489,464,510,475,476,507,481,499,490,0,479,467],
[509,525,476,506,473,515,502,489,480,493,476,498,522,0,479],
[529,499,519,525,509,502,517,530,522,554,514,524,534,522,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 174, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,688,472,542,517,463,681,547,535,665,553,655,548,623,644],
[313,0,419,338,398,340,509,350,346,475,414,517,398,538,465],
[529,582,0,524,498,487,597,397,517,567,504,600,542,614,669],
[459,663,477,0,537,609,630,448,503,637,502,469,539,561,570],
[484,603,503,464,0,558,567,438,472,617,506,542,460,573,554],
[538,661,514,392,443,0,569,453,350,564,501,566,500,527,467],
[320,492,404,371,434,432,0,358,387,452,446,562,379,479,379],
[454,651,604,553,563,548,643,0,427,568,545,544,600,589,602],
[466,655,484,498,529,651,614,574,0,571,511,494,422,622,534],
[336,526,434,364,384,437,549,433,430,0,468,530,349,542,505],
[448,587,497,499,495,500,555,456,490,533,0,495,395,677,453],
[346,484,401,532,459,435,439,457,507,471,506,0,426,633,479],
[453,603,459,462,541,501,622,401,579,652,606,575,0,645,523],
[378,463,387,440,428,474,522,412,379,459,324,368,356,0,359],
[357,536,332,431,447,534,622,399,467,496,548,522,478,642,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 175, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,500,452,490,499,505,517,497,477,513,506,488,453,484],
[511,0,496,486,526,466,485,523,534,487,468,496,514,533,558],
[501,505,0,461,469,491,467,490,504,472,424,444,480,490,513],
[549,515,540,0,524,494,516,499,539,486,498,463,540,546,523],
[511,475,532,477,0,486,491,493,510,474,451,472,504,494,488],
[502,535,510,507,515,0,528,509,528,501,495,455,510,516,505],
[496,516,534,485,510,473,0,485,508,487,462,470,486,507,535],
[484,478,511,502,508,492,516,0,501,479,465,495,495,517,530],
[504,467,497,462,491,473,493,500,0,515,464,446,505,481,511],
[524,514,529,515,527,500,514,522,486,0,501,461,539,511,536],
[488,533,577,503,550,506,539,536,537,500,0,497,546,522,548],
[495,505,557,538,529,546,531,506,555,540,504,0,511,526,560],
[513,487,521,461,497,491,515,506,496,462,455,490,0,502,510],
[548,468,511,455,507,485,494,484,520,490,479,475,499,0,514],
[517,443,488,478,513,496,466,471,490,465,453,441,491,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 176, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,526,523,517,512,526,488,512,492,514,522,506,526,519,495],
[475,0,493,477,479,487,470,500,492,464,495,493,494,497,476],
[478,508,0,501,485,494,479,492,477,489,499,462,499,483,472],
[484,524,500,0,522,508,492,499,494,511,512,498,504,511,470],
[489,522,516,479,0,524,482,502,481,488,494,486,508,493,478],
[475,514,507,493,477,0,480,481,489,466,514,474,489,481,473],
[513,531,522,509,519,521,0,502,511,500,518,492,530,519,491],
[489,501,509,502,499,520,499,0,486,494,512,513,509,500,480],
[509,509,524,507,520,512,490,515,0,505,504,489,508,527,499],
[487,537,512,490,513,535,501,507,496,0,519,488,512,505,503],
[479,506,502,489,507,487,483,489,497,482,0,484,489,495,490],
[495,508,539,503,515,527,509,488,512,513,517,0,508,527,510],
[475,507,502,497,493,512,471,492,493,489,512,493,0,493,466],
[482,504,518,490,508,520,482,501,474,496,506,474,508,0,481],
[506,525,529,531,523,528,510,521,502,498,511,491,535,520,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 177, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,533,484,512,549,457,487,491,456,541,540,525,538,444,507],
[468,0,489,483,470,448,440,513,482,500,488,495,479,470,486],
[517,512,0,527,507,510,503,496,502,537,500,522,503,525,546],
[489,518,474,0,513,491,510,494,467,501,484,504,500,483,456],
[452,531,494,488,0,492,536,502,501,460,497,497,518,503,502],
[544,553,491,510,509,0,591,512,524,560,558,517,534,518,574],
[514,561,498,491,465,410,0,503,461,536,482,521,427,475,481],
[510,488,505,507,499,489,498,0,466,512,565,529,450,481,507],
[545,519,499,534,500,477,540,535,0,524,483,534,527,523,486],
[460,501,464,500,541,441,465,489,477,0,519,521,526,524,493],
[461,513,501,517,504,443,519,436,518,482,0,509,526,483,510],
[476,506,479,497,504,484,480,472,467,480,492,0,539,443,507],
[463,522,498,501,483,467,574,551,474,475,475,462,0,422,461],
[557,531,476,518,498,483,526,520,478,477,518,558,579,0,509],
[494,515,455,545,499,427,520,494,515,508,491,494,540,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 178, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,523,527,449,535,510,528,498,508,517,501,525,542,511],
[484,0,496,532,510,491,472,533,503,495,515,504,497,518,499],
[478,505,0,504,516,500,497,518,482,519,500,509,518,510,493],
[474,469,497,0,499,525,478,533,466,472,493,534,507,526,481],
[552,491,485,502,0,535,505,552,488,492,495,508,501,517,494],
[466,510,501,476,466,0,502,526,470,507,501,503,494,531,516],
[491,529,504,523,496,499,0,542,497,488,487,494,518,555,484],
[473,468,483,468,449,475,459,0,455,486,490,472,481,516,458],
[503,498,519,535,513,531,504,546,0,521,488,503,502,558,504],
[493,506,482,529,509,494,513,515,480,0,500,481,521,542,465],
[484,486,501,508,506,500,514,511,513,501,0,505,488,534,507],
[500,497,492,467,493,498,507,529,498,520,496,0,503,520,526],
[476,504,483,494,500,507,483,520,499,480,513,498,0,519,474],
[459,483,491,475,484,470,446,485,443,459,467,481,482,0,463],
[490,502,508,520,507,485,517,543,497,536,494,475,527,538,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 179, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,523,496,484,497,506,491,493,483,501,509,491,488,480,506],
[478,0,494,479,473,488,495,470,471,524,504,482,472,465,487],
[505,507,0,492,472,477,501,504,491,501,494,478,477,476,488],
[517,522,509,0,489,488,518,496,518,524,497,506,496,501,497],
[504,528,529,512,0,507,528,499,488,508,526,501,515,482,520],
[495,513,524,513,494,0,494,525,489,507,515,503,525,484,494],
[510,506,500,483,473,507,0,496,496,495,515,488,503,481,510],
[508,531,497,505,502,476,505,0,493,521,523,504,499,500,512],
[518,530,510,483,513,512,505,508,0,532,525,521,525,507,538],
[500,477,500,477,493,494,506,480,469,0,505,467,488,470,499],
[492,497,507,504,475,486,486,478,476,496,0,491,498,480,484],
[510,519,523,495,500,498,513,497,480,534,510,0,501,484,506],
[513,529,524,505,486,476,498,502,476,513,503,500,0,496,535],
[521,536,525,500,519,517,520,501,494,531,521,517,505,0,505],
[495,514,513,504,481,507,491,489,463,502,517,495,466,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 180, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,487,503,477,502,512,463,498,493,466,481,490,519,507],
[483,0,521,485,435,462,481,430,453,506,438,467,494,456,452],
[514,480,0,515,476,482,521,493,482,547,517,501,510,491,523],
[498,516,486,0,488,471,495,493,453,497,477,478,501,525,495],
[524,566,525,513,0,484,491,538,466,509,499,508,493,514,498],
[499,539,519,530,517,0,519,476,476,500,482,501,502,527,525],
[489,520,480,506,510,482,0,433,515,518,446,457,503,493,517],
[538,571,508,508,463,525,568,0,478,524,493,498,554,520,523],
[503,548,519,548,535,525,486,523,0,516,481,532,520,527,547],
[508,495,454,504,492,501,483,477,485,0,478,449,478,510,506],
[535,563,484,524,502,519,555,508,520,523,0,526,559,533,541],
[520,534,500,523,493,500,544,503,469,552,475,0,507,497,495],
[511,507,491,500,508,499,498,447,481,523,442,494,0,511,472],
[482,545,510,476,487,474,508,481,474,491,468,504,490,0,479],
[494,549,478,506,503,476,484,478,454,495,460,506,529,522,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 181, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,522,555,476,530,478,511,481,434,521,503,525,470,515,489],
[479,0,557,491,543,480,538,516,513,517,512,502,496,516,492],
[446,444,0,457,496,419,480,439,388,451,472,444,440,445,459],
[525,510,544,0,571,466,529,497,488,499,570,546,480,514,494],
[471,458,505,430,0,435,467,434,405,450,501,487,451,436,491],
[523,521,582,535,566,0,541,546,506,556,564,530,495,509,510],
[490,463,521,472,534,460,0,458,472,501,533,481,425,487,454],
[520,485,562,504,567,455,543,0,485,533,563,538,494,529,512],
[567,488,613,513,596,495,529,516,0,515,559,541,474,532,498],
[480,484,550,502,551,445,500,468,486,0,526,506,495,460,507],
[498,489,529,431,500,437,468,438,442,475,0,490,441,487,417],
[476,499,557,455,514,471,520,463,460,495,511,0,449,488,477],
[531,505,561,521,550,506,576,507,527,506,560,552,0,537,483],
[486,485,556,487,565,492,514,472,469,541,514,513,464,0,472],
[512,509,542,507,510,491,547,489,503,494,584,524,518,529,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 182, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,531,498,484,510,492,492,518,478,507,506,542,510,489,536],
[470,0,496,471,506,471,487,467,500,497,490,470,464,477,501],
[503,505,0,492,502,495,486,498,461,469,504,522,498,504,495],
[517,530,509,0,527,487,495,499,509,487,559,505,493,489,525],
[491,495,499,474,0,470,482,484,513,483,515,469,486,459,513],
[509,530,506,514,531,0,514,509,504,496,517,529,507,492,525],
[509,514,515,506,519,487,0,511,489,497,513,509,502,480,527],
[483,534,503,502,517,492,490,0,478,502,496,517,493,497,514],
[523,501,540,492,488,497,512,523,0,491,503,525,530,489,512],
[494,504,532,514,518,505,504,499,510,0,544,509,542,491,521],
[495,511,497,442,486,484,488,505,498,457,0,487,506,476,497],
[459,531,479,496,532,472,492,484,476,492,514,0,508,473,502],
[491,537,503,508,515,494,499,508,471,459,495,493,0,487,543],
[512,524,497,512,542,509,521,504,512,510,525,528,514,0,518],
[465,500,506,476,488,476,474,487,489,480,504,499,458,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 183, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,484,499,454,470,460,477,486,450,454,500,453,479,480],
[534,0,521,542,489,525,544,541,533,505,542,518,536,523,512],
[517,480,0,497,500,530,511,536,522,497,512,500,495,520,485],
[502,459,504,0,491,510,510,514,492,473,466,488,513,477,503],
[547,512,501,510,0,523,530,514,495,486,515,513,496,495,494],
[531,476,471,491,478,0,499,487,519,447,487,474,482,484,495],
[541,457,490,491,471,502,0,518,508,482,485,508,519,500,482],
[524,460,465,487,487,514,483,0,506,481,501,497,503,487,496],
[515,468,479,509,506,482,493,495,0,501,495,510,516,487,497],
[551,496,504,528,515,554,519,520,500,0,509,538,527,511,510],
[547,459,489,535,486,514,516,500,506,492,0,499,496,507,514],
[501,483,501,513,488,527,493,504,491,463,502,0,466,496,507],
[548,465,506,488,505,519,482,498,485,474,505,535,0,488,515],
[522,478,481,524,506,517,501,514,514,490,494,505,513,0,478],
[521,489,516,498,507,506,519,505,504,491,487,494,486,523,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 184, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,534,443,500,504,543,512,471,496,477,486,521,510,462],
[516,0,532,466,527,482,517,469,507,466,516,524,482,516,503],
[467,469,0,489,500,482,483,498,502,503,478,440,473,511,502],
[558,535,512,0,576,521,493,520,483,482,540,550,509,499,474],
[501,474,501,425,0,463,505,467,501,454,474,513,496,504,476],
[497,519,519,480,538,0,532,494,472,485,516,513,532,535,512],
[458,484,518,508,496,469,0,497,459,457,493,496,479,529,488],
[489,532,503,481,534,507,504,0,516,508,499,523,517,546,516],
[530,494,499,518,500,529,542,485,0,491,533,477,478,525,500],
[505,535,498,519,547,516,544,493,510,0,510,502,536,511,511],
[524,485,523,461,527,485,508,502,468,491,0,527,493,539,491],
[515,477,561,451,488,488,505,478,524,499,474,0,504,467,510],
[480,519,528,492,505,469,522,484,523,465,508,497,0,478,521],
[491,485,490,502,497,466,472,455,476,490,462,534,523,0,526],
[539,498,499,527,525,489,513,485,501,490,510,491,480,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 185, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,568,488,480,502,479,503,547,531,530,520,462,522,473],
[504,0,539,478,474,499,495,507,559,543,546,548,494,550,481],
[433,462,0,423,460,438,448,486,467,541,454,474,406,489,433],
[513,523,578,0,507,526,521,537,578,505,535,537,508,576,478],
[521,527,541,494,0,487,480,538,514,567,526,534,464,509,482],
[499,502,563,475,514,0,516,525,549,545,514,527,484,545,499],
[522,506,553,480,521,485,0,497,517,542,529,542,508,549,503],
[498,494,515,464,463,476,504,0,523,528,470,520,486,541,511],
[454,442,534,423,487,452,484,478,0,528,509,492,468,525,444],
[470,458,460,496,434,456,459,473,473,0,479,467,484,517,442],
[471,455,547,466,475,487,472,531,492,522,0,531,443,536,509],
[481,453,527,464,467,474,459,481,509,534,470,0,506,518,484],
[539,507,595,493,537,517,493,515,533,517,558,495,0,508,475],
[479,451,512,425,492,456,452,460,476,484,465,483,493,0,427],
[528,520,568,523,519,502,498,490,557,559,492,517,526,574,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 186, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,532,482,487,468,534,534,496,555,467,498,501,508,496],
[486,0,538,501,509,482,491,518,488,511,494,510,503,503,476],
[469,463,0,526,465,488,533,490,479,498,468,471,516,494,491],
[519,500,475,0,475,470,510,495,473,507,474,476,465,480,487],
[514,492,536,526,0,493,502,508,513,552,482,498,550,539,523],
[533,519,513,531,508,0,523,546,488,551,526,513,511,509,523],
[467,510,468,491,499,478,0,499,497,531,488,474,474,496,498],
[467,483,511,506,493,455,502,0,466,533,506,486,516,509,506],
[505,513,522,528,488,513,504,535,0,536,523,508,492,501,505],
[446,490,503,494,449,450,470,468,465,0,461,456,473,494,501],
[534,507,533,527,519,475,513,495,478,540,0,480,486,483,493],
[503,491,530,525,503,488,527,515,493,545,521,0,523,537,508],
[500,498,485,536,451,490,527,485,509,528,515,478,0,486,482],
[493,498,507,521,462,492,505,492,500,507,518,464,515,0,493],
[505,525,510,514,478,478,503,495,496,500,508,493,519,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 187, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,483,466,467,477,477,522,503,457,481,484,471,489,478],
[519,0,508,514,512,525,524,553,519,482,528,488,506,508,521],
[518,493,0,488,504,491,526,552,497,475,503,488,512,486,505],
[535,487,513,0,502,518,508,507,488,455,498,481,486,528,484],
[534,489,497,499,0,476,521,558,510,491,513,473,506,532,494],
[524,476,510,483,525,0,523,515,529,505,495,479,513,525,501],
[524,477,475,493,480,478,0,517,492,447,526,475,475,493,481],
[479,448,449,494,443,486,484,0,473,451,472,444,473,471,444],
[498,482,504,513,491,472,509,528,0,453,518,493,489,494,500],
[544,519,526,546,510,496,554,550,548,0,540,509,519,520,523],
[520,473,498,503,488,506,475,529,483,461,0,493,490,488,479],
[517,513,513,520,528,522,526,557,508,492,508,0,526,527,523],
[530,495,489,515,495,488,526,528,512,482,511,475,0,524,520],
[512,493,515,473,469,476,508,530,507,481,513,474,477,0,477],
[523,480,496,517,507,500,520,557,501,478,522,478,481,524,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 188, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,496,500,505,504,515,533,521,516,511,534,512,523,516],
[514,0,517,515,504,489,530,564,505,487,531,509,528,533,539],
[505,484,0,503,501,502,516,554,519,499,507,509,527,528,519],
[501,486,498,0,491,488,500,524,481,473,525,500,507,503,500],
[496,497,500,510,0,507,516,534,517,484,502,493,513,491,520],
[497,512,499,513,494,0,520,541,509,478,527,491,521,536,525],
[486,471,485,501,485,481,0,518,482,486,508,484,495,523,514],
[468,437,447,477,467,460,483,0,466,462,488,465,485,469,495],
[480,496,482,520,484,492,519,535,0,477,500,478,489,498,490],
[485,514,502,528,517,523,515,539,524,0,533,534,539,519,537],
[490,470,494,476,499,474,493,513,501,468,0,491,493,497,521],
[467,492,492,501,508,510,517,536,523,467,510,0,508,500,516],
[489,473,474,494,488,480,506,516,512,462,508,493,0,518,526],
[478,468,473,498,510,465,478,532,503,482,504,501,483,0,514],
[485,462,482,501,481,476,487,506,511,464,480,485,475,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 189, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,462,467,526,557,491,473,511,521,474,485,466,488,499],
[525,0,475,485,533,541,526,461,540,566,501,531,498,492,520],
[539,526,0,526,567,545,500,494,533,559,525,537,531,502,502],
[534,516,475,0,512,558,490,475,520,549,505,516,480,485,538],
[475,468,434,489,0,497,479,466,479,524,483,504,505,471,483],
[444,460,456,443,504,0,452,460,462,501,483,482,474,439,451],
[510,475,501,511,522,549,0,525,508,568,510,518,539,494,541],
[528,540,507,526,535,541,476,0,526,543,535,545,488,533,491],
[490,461,468,481,522,539,493,475,0,534,524,509,495,472,543],
[480,435,442,452,477,500,433,458,467,0,456,503,461,455,474],
[527,500,476,496,518,518,491,466,477,545,0,533,488,474,535],
[516,470,464,485,497,519,483,456,492,498,468,0,502,487,501],
[535,503,470,521,496,527,462,513,506,540,513,499,0,477,493],
[513,509,499,516,530,562,507,468,529,546,527,514,524,0,501],
[502,481,499,463,518,550,460,510,458,527,466,500,508,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 190, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,542,495,515,522,530,544,517,513,525,496,524,514,499],
[499,0,518,486,512,495,502,522,503,500,515,503,496,492,478],
[459,483,0,490,474,484,463,485,463,481,473,489,480,481,478],
[506,515,511,0,510,500,487,525,499,490,514,492,495,493,465],
[486,489,527,491,0,484,509,524,487,478,519,496,496,495,486],
[479,506,517,501,517,0,502,515,503,515,538,523,521,514,492],
[471,499,538,514,492,499,0,506,505,490,509,517,503,492,474],
[457,479,516,476,477,486,495,0,490,481,495,477,491,461,471],
[484,498,538,502,514,498,496,511,0,501,504,510,504,493,479],
[488,501,520,511,523,486,511,520,500,0,518,505,516,498,501],
[476,486,528,487,482,463,492,506,497,483,0,474,483,495,467],
[505,498,512,509,505,478,484,524,491,496,527,0,485,487,473],
[477,505,521,506,505,480,498,510,497,485,518,516,0,499,475],
[487,509,520,508,506,487,509,540,508,503,506,514,502,0,483],
[502,523,523,536,515,509,527,530,522,500,534,528,526,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 191, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,469,450,495,392,519,392,287,317,379,511,457,635,640],
[568,0,508,447,596,558,546,417,425,502,510,436,525,452,496],
[532,493,0,526,521,563,608,470,362,425,587,495,488,561,643],
[551,554,475,0,549,465,519,380,392,365,465,565,609,625,593],
[506,405,480,452,0,590,522,372,317,396,475,475,448,576,500],
[609,443,438,536,411,0,414,439,326,345,471,435,474,554,536],
[482,455,393,482,479,587,0,374,313,339,467,436,462,538,556],
[609,584,531,621,629,562,627,0,574,501,459,634,611,668,687],
[714,576,639,609,684,675,688,427,0,518,610,582,667,665,724],
[684,499,576,636,605,656,662,500,483,0,523,509,625,683,715],
[622,491,414,536,526,530,534,542,391,478,0,616,519,616,565],
[490,565,506,436,526,566,565,367,419,492,385,0,569,591,516],
[544,476,513,392,553,527,539,390,334,376,482,432,0,571,610],
[366,549,440,376,425,447,463,333,336,318,385,410,430,0,470],
[361,505,358,408,501,465,445,314,277,286,436,485,391,531,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 192, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,469,552,476,495,482,484,508,477,517,500,497,471,499],
[537,0,495,532,482,503,476,505,523,506,522,495,520,516,519],
[532,506,0,521,477,506,504,517,489,502,497,485,532,503,541],
[449,469,480,0,438,458,475,484,504,484,491,476,491,458,503],
[525,519,524,563,0,517,521,524,524,542,547,492,539,514,546],
[506,498,495,543,484,0,493,518,509,536,499,486,516,529,534],
[519,525,497,526,480,508,0,506,496,506,513,504,522,492,521],
[517,496,484,517,477,483,495,0,504,507,494,455,514,509,522],
[493,478,512,497,477,492,505,497,0,504,503,470,515,514,513],
[524,495,499,517,459,465,495,494,497,0,497,480,529,509,527],
[484,479,504,510,454,502,488,507,498,504,0,486,509,501,493],
[501,506,516,525,509,515,497,546,531,521,515,0,535,517,538],
[504,481,469,510,462,485,479,487,486,472,492,466,0,493,496],
[530,485,498,543,487,472,509,492,487,492,500,484,508,0,518],
[502,482,460,498,455,467,480,479,488,474,508,463,505,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 193, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,533,526,547,552,503,507,479,525,513,501,544,522,520,533],
[468,0,506,492,519,543,468,468,525,478,496,495,505,499,452],
[475,495,0,487,527,502,468,497,493,506,501,504,514,449,515],
[454,509,514,0,551,508,482,499,550,522,507,529,540,479,505],
[449,482,474,450,0,448,455,442,441,477,473,467,477,427,490],
[498,458,499,493,553,0,457,488,500,479,513,497,528,480,488],
[494,533,533,519,546,544,0,494,532,545,523,540,525,476,472],
[522,533,504,502,559,513,507,0,528,523,496,537,506,494,494],
[476,476,508,451,560,501,469,473,0,476,495,510,488,446,483],
[488,523,495,479,524,522,456,478,525,0,498,524,522,437,490],
[500,505,500,494,528,488,478,505,506,503,0,531,475,419,493],
[457,506,497,472,534,504,461,464,491,477,470,0,508,437,497],
[479,496,487,461,524,473,476,495,513,479,526,493,0,463,447],
[481,502,552,522,574,521,525,507,555,564,582,564,538,0,527],
[468,549,486,496,511,513,529,507,518,511,508,504,554,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 194, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,593,542,512,523,506,557,512,486,473,568,486,557,479,485],
[408,0,491,470,497,456,537,499,484,436,493,426,509,470,403],
[459,510,0,510,519,489,494,505,463,463,524,479,558,475,443],
[489,531,491,0,537,458,514,528,466,457,563,518,547,473,456],
[478,504,482,464,0,475,518,462,441,420,504,450,508,451,429],
[495,545,512,543,526,0,539,527,488,504,561,486,545,494,459],
[444,464,507,487,483,462,0,509,421,498,498,456,510,454,456],
[489,502,496,473,539,474,492,0,463,466,539,474,557,496,473],
[515,517,538,535,560,513,580,538,0,481,524,519,528,495,469],
[528,565,538,544,581,497,503,535,520,0,601,497,539,482,508],
[433,508,477,438,497,440,503,462,477,400,0,451,522,433,397],
[515,575,522,483,551,515,545,527,482,504,550,0,555,484,461],
[444,492,443,454,493,456,491,444,473,462,479,446,0,414,413],
[522,531,526,528,550,507,547,505,506,519,568,517,587,0,495],
[516,598,558,545,572,542,545,528,532,493,604,540,588,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 195, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,497,532,468,488,503,540,500,539,493,515,503,516,514],
[493,0,487,517,485,506,496,546,510,520,483,476,541,495,537],
[504,514,0,497,466,505,481,528,477,516,460,467,494,531,497],
[469,484,504,0,480,470,491,534,491,478,496,484,530,532,521],
[533,516,535,521,0,525,506,546,553,530,511,487,554,547,535],
[513,495,496,531,476,0,464,554,487,497,485,483,526,494,460],
[498,505,520,510,495,537,0,518,506,505,469,489,515,540,516],
[461,455,473,467,455,447,483,0,481,496,468,455,477,504,511],
[501,491,524,510,448,514,495,520,0,503,491,464,505,486,481],
[462,481,485,523,471,504,496,505,498,0,492,480,513,495,481],
[508,518,541,505,490,516,532,533,510,509,0,545,563,550,536],
[486,525,534,517,514,518,512,546,537,521,456,0,542,531,500],
[498,460,507,471,447,475,486,524,496,488,438,459,0,504,488],
[485,506,470,469,454,507,461,497,515,506,451,470,497,0,512],
[487,464,504,480,466,541,485,490,520,520,465,501,513,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 196, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,479,491,489,500,471,468,512,512,501,488,515,486,477],
[515,0,496,513,518,515,519,493,519,509,507,495,523,525,490],
[522,505,0,516,507,509,507,498,528,511,493,486,534,516,500],
[510,488,485,0,491,492,485,502,524,522,492,482,520,531,498],
[512,483,494,510,0,494,485,484,492,497,489,485,507,496,490],
[501,486,492,509,507,0,485,479,490,494,487,487,501,502,495],
[530,482,494,516,516,516,0,486,539,508,513,496,529,522,495],
[533,508,503,499,517,522,515,0,540,530,511,491,520,522,522],
[489,482,473,477,509,511,462,461,0,492,480,483,500,484,488],
[489,492,490,479,504,507,493,471,509,0,492,470,523,489,485],
[500,494,508,509,512,514,488,490,521,509,0,491,515,525,498],
[513,506,515,519,516,514,505,510,518,531,510,0,538,501,495],
[486,478,467,481,494,500,472,481,501,478,486,463,0,480,483],
[515,476,485,470,505,499,479,479,517,512,476,500,521,0,490],
[524,511,501,503,511,506,506,479,513,516,503,506,518,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 197, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,512,520,471,535,494,481,482,516,547,464,461,481,522],
[501,0,562,518,509,524,506,528,510,529,534,485,488,462,525],
[489,439,0,492,491,496,456,465,487,475,501,484,476,459,481],
[481,483,509,0,495,485,490,522,464,503,511,491,479,434,519],
[530,492,510,506,0,514,515,508,475,487,517,473,526,471,491],
[466,477,505,516,487,0,471,461,495,489,523,458,462,460,495],
[507,495,545,511,486,530,0,518,513,500,518,516,487,468,516],
[520,473,536,479,493,540,483,0,494,503,504,496,491,429,520],
[519,491,514,537,526,506,488,507,0,474,498,489,487,467,502],
[485,472,526,498,514,512,501,498,527,0,528,480,487,460,515],
[454,467,500,490,484,478,483,497,503,473,0,467,467,452,479],
[537,516,517,510,528,543,485,505,512,521,534,0,501,477,503],
[540,513,525,522,475,539,514,510,514,514,534,500,0,502,531],
[520,539,542,567,530,541,533,572,534,541,549,524,499,0,555],
[479,476,520,482,510,506,485,481,499,486,522,498,470,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 198, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,441,478,473,438,436,442,453,475,441,455,501,451,507],
[510,0,508,489,539,548,468,502,526,490,554,501,501,492,524],
[560,493,0,512,535,531,505,520,488,487,496,546,567,509,547],
[523,512,489,0,509,534,491,506,481,458,514,496,517,517,509],
[528,462,466,492,0,523,455,547,451,486,541,499,517,488,505],
[563,453,470,467,478,0,443,500,485,477,509,490,496,492,528],
[565,533,496,510,546,558,0,496,545,451,538,539,559,520,573],
[559,499,481,495,454,501,505,0,468,457,529,542,482,497,577],
[548,475,513,520,550,516,456,533,0,506,480,523,557,509,603],
[526,511,514,543,515,524,550,544,495,0,487,517,577,492,541],
[560,447,505,487,460,492,463,472,521,514,0,524,525,467,548],
[546,500,455,505,502,511,462,459,478,484,477,0,494,509,529],
[500,500,434,484,484,505,442,519,444,424,476,507,0,437,473],
[550,509,492,484,513,509,481,504,492,509,534,492,564,0,554],
[494,477,454,492,496,473,428,424,398,460,453,472,528,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 199, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,527,554,382,476,529,530,465,514,546,533,522,557,551,553],
[474,0,538,408,476,468,494,495,490,505,521,504,495,473,515],
[447,463,0,360,399,471,467,402,430,494,421,425,440,453,476],
[619,593,641,0,511,495,620,508,552,620,580,577,569,560,586],
[525,525,602,490,0,541,579,524,551,556,543,567,590,583,630],
[472,533,530,506,460,0,565,426,524,565,565,546,527,506,609],
[471,507,534,381,422,436,0,442,477,514,499,470,455,454,517],
[536,506,599,493,477,575,559,0,498,566,602,571,547,543,583],
[487,511,571,449,450,477,524,503,0,560,507,443,507,481,531],
[455,496,507,381,445,436,487,435,441,0,483,465,489,473,512],
[468,480,580,421,458,436,502,399,494,518,0,520,548,519,536],
[479,497,576,424,434,455,531,430,558,536,481,0,480,501,525],
[444,506,561,432,411,474,546,454,494,512,453,521,0,526,487],
[450,528,548,441,418,495,547,458,520,528,482,500,475,0,471],
[448,486,525,415,371,392,484,418,470,489,465,476,514,530,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1001, 200, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbd/mebbd_15_1001.csv", index=False, header=False)
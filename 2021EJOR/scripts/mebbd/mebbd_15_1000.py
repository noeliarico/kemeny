
import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg
from kemeny import sc

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,502,492,507,547,530,511,511,503,508,482,515,524,551,500],
[498,0,527,503,520,522,516,486,462,507,488,498,533,516,467],
[508,473,0,493,526,549,500,519,449,574,518,510,566,513,507],
[493,497,507,0,503,513,519,512,468,524,505,525,533,499,501],
[453,480,474,497,0,494,501,476,482,485,483,493,510,492,474],
[470,478,451,487,506,0,489,495,449,489,479,536,545,474,490],
[489,484,500,481,499,511,0,488,476,521,472,491,529,461,483],
[489,514,481,488,524,505,512,0,477,536,493,510,542,503,477],
[497,538,551,532,518,551,524,523,0,554,529,554,573,539,524],
[492,493,426,476,515,511,479,464,446,0,457,482,524,476,422],
[518,512,482,495,517,521,528,507,471,543,0,532,556,525,511],
[485,502,490,475,507,464,509,490,446,518,468,0,525,457,471],
[476,467,434,467,490,455,471,458,427,476,444,475,0,487,467],
[449,484,487,501,508,526,539,497,461,524,475,543,513,0,451],
[500,533,493,499,526,510,517,523,476,578,489,529,533,549,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 1, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,492,500,524,489,496,501,509,516,505,528,516,514,514],
[491,0,478,496,510,498,485,523,482,499,505,501,533,502,516],
[508,522,0,497,520,501,491,522,499,498,491,513,523,499,512],
[500,504,503,0,518,522,500,526,499,507,498,523,522,510,526],
[476,490,480,482,0,480,476,513,492,495,480,488,513,511,507],
[511,502,499,478,520,0,505,526,497,501,499,519,510,511,530],
[504,515,509,500,524,495,0,518,515,499,502,529,513,519,518],
[499,477,478,474,487,474,482,0,476,467,492,479,509,499,497],
[491,518,501,501,508,503,485,524,0,506,465,507,517,503,512],
[484,501,502,493,505,499,501,533,494,0,504,529,512,502,507],
[495,495,509,502,520,501,498,508,535,496,0,522,529,524,510],
[472,499,487,477,512,481,471,521,493,471,478,0,491,507,515],
[484,467,477,478,487,490,487,491,483,488,471,509,0,497,502],
[486,498,501,490,489,489,481,501,497,498,476,493,503,0,492],
[486,484,488,474,493,470,482,503,488,493,490,485,498,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 2, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,473,499,488,445,496,510,498,471,510,513,468,495,480],
[530,0,503,532,499,452,505,552,502,501,499,522,510,521,510],
[527,497,0,499,502,482,505,534,533,496,523,540,502,517,505],
[501,468,501,0,500,480,498,526,491,470,513,535,485,497,472],
[512,501,498,500,0,489,497,521,515,480,527,523,504,522,477],
[555,548,518,520,511,0,527,537,522,527,536,535,497,536,508],
[504,495,495,502,503,473,0,516,513,459,507,483,484,506,491],
[490,448,466,474,479,463,484,0,478,464,487,478,461,481,472],
[502,498,467,509,485,478,487,522,0,471,528,518,490,524,489],
[529,499,504,530,520,473,541,536,529,0,516,543,501,521,503],
[490,501,477,487,473,464,493,513,472,484,0,498,459,491,481],
[487,478,460,465,477,465,517,522,482,457,502,0,478,529,490],
[532,490,498,515,496,503,516,539,510,499,541,522,0,534,510],
[505,479,483,503,478,464,494,519,476,479,509,471,466,0,523],
[520,490,495,528,523,492,509,528,511,497,519,510,490,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 3, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,492,529,487,506,474,469,486,500,536,545,521,514,476],
[492,0,472,468,439,506,490,490,468,465,528,574,498,490,499],
[508,528,0,495,465,517,482,496,477,513,545,530,511,519,508],
[471,532,505,0,466,505,459,494,488,510,522,545,503,487,516],
[513,561,535,534,0,515,507,535,504,539,527,523,546,535,483],
[494,494,483,495,485,0,503,502,479,472,514,535,529,497,486],
[526,510,518,541,493,497,0,533,514,511,528,545,510,503,499],
[531,510,504,506,465,498,467,0,492,459,516,531,533,515,502],
[514,532,523,512,496,521,486,508,0,547,507,532,535,537,507],
[500,535,487,490,461,528,489,541,453,0,502,527,515,492,485],
[464,472,455,478,473,486,472,484,493,498,0,506,472,456,483],
[455,426,470,455,477,465,455,469,468,473,494,0,468,517,437],
[479,502,489,497,454,471,490,467,465,485,528,532,0,505,465],
[486,510,481,513,465,503,497,485,463,508,544,483,495,0,501],
[524,501,492,484,517,514,501,498,493,515,517,563,535,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 4, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,484,541,476,488,540,519,496,525,513,482,489,530,490],
[516,0,505,559,531,534,496,563,495,533,477,521,557,528,526],
[516,495,0,549,520,496,479,537,494,488,536,493,504,503,483],
[459,441,451,0,456,462,480,513,484,518,499,513,473,495,500],
[524,469,480,544,0,511,457,505,480,496,492,488,490,474,466],
[512,466,504,538,489,0,479,529,461,537,537,507,501,540,494],
[460,504,521,520,543,521,0,601,506,510,492,516,510,523,503],
[481,437,463,487,495,471,399,0,447,464,455,436,500,477,430],
[504,505,506,516,520,539,494,553,0,503,545,485,514,536,493],
[475,467,512,482,504,463,490,536,497,0,538,540,495,484,504],
[487,523,464,501,508,463,508,545,455,462,0,500,483,512,457],
[518,479,507,487,512,493,484,564,515,460,500,0,523,494,484],
[511,443,496,527,510,499,490,500,486,505,517,477,0,535,484],
[470,472,497,505,526,460,477,523,464,516,488,506,465,0,468],
[510,474,517,500,534,506,497,570,507,496,543,516,516,532,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 5, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,520,522,569,536,487,461,530,558,519,544,490,561,533,573],
[480,0,445,526,519,472,487,481,530,483,493,477,523,499,548],
[478,555,0,545,540,488,472,566,528,506,561,467,535,526,556],
[431,474,455,0,498,467,467,494,474,487,508,469,528,460,520],
[464,481,460,502,0,476,422,471,455,426,478,451,507,463,544],
[513,528,512,533,524,0,504,529,535,492,567,515,558,512,542],
[539,513,528,533,578,496,0,529,515,496,562,525,552,533,591],
[470,519,434,506,529,471,471,0,484,479,517,466,499,518,548],
[442,470,472,526,545,465,485,516,0,478,555,450,525,509,527],
[481,517,494,513,574,508,504,521,522,0,553,508,591,535,578],
[456,507,439,492,522,433,438,483,445,447,0,434,489,456,487],
[510,523,533,531,549,485,475,534,550,492,566,0,520,501,591],
[439,477,465,472,493,442,448,501,475,409,511,480,0,483,507],
[467,501,474,540,537,488,467,482,491,465,544,499,517,0,563],
[427,452,444,480,456,458,409,452,473,422,513,409,493,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 6, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,479,492,502,509,495,491,476,493,499,484,490,492,487],
[505,0,482,483,498,515,483,488,489,491,486,484,491,516,478],
[521,518,0,487,504,507,525,506,499,502,515,504,502,513,497],
[508,517,513,0,527,524,525,505,518,504,515,504,532,532,494],
[498,502,496,473,0,504,480,478,495,467,492,478,477,495,465],
[491,485,493,476,496,0,478,487,481,481,510,479,488,498,491],
[505,517,475,475,520,522,0,508,500,496,509,496,501,487,502],
[509,512,494,495,522,513,492,0,487,480,503,498,491,495,484],
[524,511,501,482,505,519,500,513,0,502,510,482,490,497,486],
[507,509,498,496,533,519,504,520,498,0,505,509,512,526,488],
[501,514,485,485,508,490,491,497,490,495,0,477,489,484,460],
[516,516,496,496,522,521,504,502,518,491,523,0,506,486,490],
[510,509,498,468,523,512,499,509,510,488,511,494,0,489,498],
[508,484,487,468,505,502,513,505,503,474,516,514,511,0,477],
[513,522,503,506,535,509,498,516,514,512,540,510,502,523,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 7, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,538,512,539,517,536,498,549,507,519,505,526,536,516,517],
[462,0,488,468,501,509,478,486,497,499,473,474,496,494,497],
[488,512,0,487,486,530,467,492,483,503,498,516,520,488,502],
[461,532,513,0,536,535,463,493,524,497,496,524,538,491,493],
[483,499,514,464,0,508,473,498,498,502,489,484,492,500,494],
[464,491,470,465,492,0,452,495,488,468,449,480,500,473,481],
[502,522,533,537,527,548,0,503,509,509,499,530,533,516,522],
[451,514,508,507,502,505,497,0,506,508,486,500,494,500,506],
[493,503,517,476,502,512,491,494,0,512,473,503,481,482,503],
[481,501,497,503,498,532,491,492,488,0,490,520,519,495,502],
[495,527,502,504,511,551,501,514,527,510,0,533,515,517,504],
[474,526,484,476,516,520,470,500,497,480,467,0,504,497,509],
[464,504,480,462,508,500,467,506,519,481,485,496,0,488,482],
[484,506,512,509,500,527,484,500,518,505,483,503,512,0,513],
[483,503,498,507,506,519,478,494,497,498,496,491,518,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 8, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,518,504,491,493,506,472,506,489,499,511,517,502,502],
[517,0,515,507,488,504,523,510,512,499,497,525,523,532,512],
[482,485,0,506,496,494,487,481,508,491,519,502,540,502,500],
[496,493,494,0,468,493,491,498,493,491,511,495,520,489,503],
[509,512,504,532,0,506,519,504,495,512,530,507,542,522,489],
[507,496,506,507,494,0,510,487,509,489,508,507,518,514,504],
[494,477,513,509,481,490,0,483,489,493,503,487,527,503,501],
[528,490,519,502,496,513,517,0,526,504,519,506,533,525,506],
[494,488,492,507,505,491,511,474,0,501,515,498,528,511,485],
[511,501,509,509,488,511,507,496,499,0,518,488,537,519,504],
[501,503,481,489,470,492,497,481,485,482,0,488,520,494,473],
[489,475,498,505,493,493,513,494,502,512,512,0,532,523,512],
[483,477,460,480,458,482,473,467,472,463,480,468,0,477,482],
[498,468,498,511,478,486,497,475,489,481,506,477,523,0,497],
[498,488,500,497,511,496,499,494,515,496,527,488,518,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 9, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,463,472,486,506,493,467,489,512,482,468,477,479,501],
[509,0,491,485,516,517,500,481,474,529,496,450,484,532,518],
[537,509,0,490,524,529,518,478,500,544,489,496,504,551,523],
[528,515,510,0,515,532,520,526,506,519,463,492,495,546,524],
[514,484,476,485,0,513,500,504,514,510,462,463,472,514,521],
[494,483,471,468,487,0,491,484,484,464,473,468,479,505,488],
[507,500,482,480,500,509,0,475,465,525,487,488,487,507,504],
[533,519,522,474,496,516,525,0,515,510,485,490,490,521,481],
[511,526,500,494,486,516,535,485,0,523,470,516,498,524,525],
[488,471,456,481,490,536,475,490,477,0,466,469,486,514,479],
[518,504,511,537,538,527,513,515,530,534,0,469,491,524,537],
[532,550,504,508,537,532,512,510,484,531,531,0,507,536,516],
[523,516,496,505,528,521,513,510,502,514,509,493,0,543,529],
[521,468,449,454,486,495,493,479,476,486,476,464,457,0,493],
[499,482,477,476,479,512,496,519,475,521,463,484,471,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 10, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,506,501,472,509,486,525,446,518,503,470,480,495,500],
[515,0,470,484,487,485,474,487,460,517,495,466,466,509,465],
[494,530,0,542,490,532,532,526,495,540,514,487,494,537,506],
[499,516,458,0,451,501,502,486,474,517,475,446,456,499,468],
[528,513,510,549,0,522,529,524,464,485,539,497,482,523,505],
[491,515,468,499,478,0,499,505,456,488,520,459,483,498,492],
[514,526,468,498,471,501,0,491,459,475,506,489,481,497,468],
[475,513,474,514,476,495,509,0,452,505,517,486,473,522,469],
[554,540,505,526,536,544,541,548,0,535,519,548,513,532,494],
[482,483,460,483,515,512,525,495,465,0,524,494,452,519,490],
[497,505,486,525,461,480,494,483,481,476,0,473,477,488,492],
[530,534,513,554,503,541,511,514,452,506,527,0,507,476,484],
[520,534,506,544,518,517,519,527,487,548,523,493,0,484,475],
[505,491,463,501,477,502,503,478,468,481,512,524,516,0,487],
[500,535,494,532,495,508,532,531,506,510,508,516,525,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 11, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,502,452,492,500,471,476,493,486,472,492,476,503,490],
[519,0,548,480,530,516,523,522,528,505,520,529,511,506,504],
[498,452,0,447,471,480,461,477,477,464,457,480,442,466,486],
[548,520,553,0,526,518,539,534,518,533,496,552,511,513,533],
[508,470,529,474,0,491,502,504,507,482,483,500,495,496,499],
[500,484,520,482,509,0,517,501,502,493,474,489,494,493,503],
[529,477,539,461,498,483,0,494,494,492,472,477,499,482,506],
[524,478,523,466,496,499,506,0,514,499,484,489,476,480,511],
[507,472,523,482,493,498,506,486,0,475,475,493,483,493,509],
[514,495,536,467,518,507,508,501,525,0,488,527,495,507,523],
[528,480,543,504,517,526,528,516,525,512,0,522,508,501,505],
[508,471,520,448,500,511,523,511,507,473,478,0,486,513,503],
[524,489,558,489,505,506,501,524,517,505,492,514,0,502,512],
[497,494,534,487,504,507,518,520,507,493,499,487,498,0,520],
[510,496,514,467,501,497,494,489,491,477,495,497,488,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 12, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,474,451,499,450,478,488,556,478,488,491,514,511,483],
[542,0,474,480,541,481,460,510,565,529,530,516,535,463,532],
[526,526,0,491,525,507,492,524,559,534,550,503,511,514,525],
[549,520,509,0,513,532,500,531,540,521,557,522,564,515,533],
[501,459,475,487,0,479,465,470,544,475,532,482,503,458,516],
[550,519,493,468,521,0,471,523,532,477,525,452,498,511,516],
[522,540,508,500,535,529,0,524,546,538,547,534,577,522,554],
[512,490,476,469,530,477,476,0,527,504,487,485,504,484,488],
[444,435,441,460,456,468,454,473,0,459,494,451,493,492,464],
[522,471,466,479,525,523,462,496,541,0,517,517,506,506,473],
[512,470,450,443,468,475,453,513,506,483,0,472,494,455,459],
[509,484,497,478,518,548,466,515,549,483,528,0,568,494,493],
[486,465,489,436,497,502,423,496,507,494,506,432,0,464,482],
[489,537,486,485,542,489,478,516,508,494,545,506,536,0,506],
[517,468,475,467,484,484,446,512,536,527,541,507,518,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 13, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,500,510,481,475,466,436,459,486,465,502,480,446,470],
[527,0,552,496,528,509,444,445,485,531,510,506,512,481,497],
[500,448,0,535,527,506,469,472,482,493,473,518,490,465,527],
[490,504,465,0,482,498,471,452,476,458,484,504,483,457,480],
[519,472,473,518,0,531,462,483,505,491,471,508,502,434,510],
[525,491,494,502,469,0,499,459,481,464,492,570,510,483,502],
[534,556,531,529,538,501,0,500,505,518,539,537,532,504,565],
[564,555,528,548,517,541,500,0,496,529,549,580,535,489,537],
[541,515,518,524,495,519,495,504,0,501,505,526,509,446,526],
[514,469,507,542,509,536,482,471,499,0,509,526,502,484,514],
[535,490,527,516,529,508,461,451,495,491,0,511,499,471,546],
[498,494,482,496,492,430,463,420,474,474,489,0,462,422,514],
[520,488,510,517,498,490,468,465,491,498,501,538,0,443,546],
[554,519,535,543,566,517,496,511,554,516,529,578,557,0,559],
[530,503,473,520,490,498,435,463,474,486,454,486,454,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 14, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,499,509,511,530,494,521,506,510,513,519,490,514,512],
[482,0,503,475,502,499,498,508,484,478,505,524,506,490,487],
[501,497,0,469,474,506,486,503,483,496,500,510,478,505,466],
[491,525,531,0,500,506,492,512,497,516,493,529,507,505,498],
[489,498,526,500,0,511,500,495,497,498,506,533,489,528,487],
[470,501,494,494,489,0,496,491,481,484,495,510,500,493,471],
[506,502,514,508,500,504,0,519,492,504,487,517,491,516,482],
[479,492,497,488,505,509,481,0,500,508,501,502,504,505,489],
[494,516,517,503,503,519,508,500,0,512,504,529,484,522,473],
[490,522,504,484,502,516,496,492,488,0,485,500,485,504,488],
[487,495,500,507,494,505,513,499,496,515,0,504,489,517,483],
[481,476,490,471,467,490,483,498,471,500,496,0,494,489,474],
[510,494,522,493,511,500,509,496,516,515,511,506,0,532,494],
[486,510,495,495,472,507,484,495,478,496,483,511,468,0,478],
[488,513,534,502,513,529,518,511,527,512,517,526,506,522,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 15, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,522,492,551,476,494,490,453,497,470,517,506,543,528],
[499,0,514,491,516,480,483,486,475,507,469,484,533,519,529],
[478,486,0,497,496,491,471,489,458,496,492,498,480,507,504],
[508,509,503,0,508,465,497,483,455,515,473,491,521,538,519],
[449,484,504,492,0,464,463,471,462,511,494,476,500,497,514],
[524,520,509,535,536,0,514,529,506,559,497,514,567,544,534],
[506,517,529,503,537,486,0,459,504,510,464,482,523,515,525],
[510,514,511,517,529,471,541,0,492,523,506,483,525,535,531],
[547,525,542,545,538,494,496,508,0,524,501,510,505,542,540],
[503,493,504,485,489,441,490,477,476,0,446,451,514,492,515],
[530,531,508,527,506,503,536,494,499,554,0,510,527,561,561],
[483,516,502,509,524,486,518,517,490,549,490,0,481,530,524],
[494,467,520,479,500,433,477,475,495,486,473,519,0,504,487],
[457,481,493,462,503,456,485,465,458,508,439,470,496,0,509],
[472,471,496,481,486,466,475,469,460,485,439,476,513,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 16, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,505,452,516,445,487,529,494,510,477,465,447,432,519],
[498,0,493,461,536,457,494,481,488,494,469,474,466,443,504],
[495,507,0,451,529,497,486,443,471,481,458,489,481,443,501],
[548,539,549,0,553,487,524,548,519,517,548,482,525,490,530],
[484,464,471,447,0,425,496,464,485,486,489,476,485,461,473],
[555,543,503,513,575,0,497,504,514,547,498,507,498,492,513],
[513,506,514,476,504,503,0,511,497,498,505,481,504,505,511],
[471,519,557,452,536,496,489,0,483,484,473,484,501,474,528],
[506,512,529,481,515,486,503,517,0,540,492,494,522,472,526],
[490,506,519,483,514,453,502,516,460,0,491,472,482,472,508],
[523,531,542,452,511,502,495,527,508,509,0,482,458,473,497],
[535,526,511,518,524,493,519,516,506,528,518,0,488,483,501],
[553,534,519,475,515,502,496,499,478,518,542,512,0,471,524],
[568,557,557,510,539,508,495,526,528,528,527,517,529,0,502],
[481,496,499,470,527,487,489,472,474,492,503,499,476,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 17, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,514,501,509,516,507,503,520,513,508,487,500,503,499],
[507,0,514,471,483,501,474,481,481,487,514,466,493,494,491],
[486,486,0,478,498,498,483,475,484,476,493,480,488,494,479],
[499,529,522,0,515,535,497,517,500,518,523,509,523,494,503],
[491,517,502,485,0,511,499,489,488,501,534,499,518,492,492],
[484,499,502,465,489,0,486,499,466,464,490,483,497,485,454],
[493,526,517,503,501,514,0,491,505,513,531,497,506,518,497],
[497,519,525,483,511,501,509,0,504,498,517,500,513,487,515],
[480,519,516,500,512,534,495,496,0,492,525,490,499,498,501],
[487,513,524,482,499,536,487,502,508,0,526,498,518,497,517],
[492,486,507,477,466,510,469,483,475,474,0,480,501,489,460],
[513,534,520,491,501,517,503,500,510,502,520,0,529,516,511],
[500,507,512,477,482,503,494,487,501,482,499,471,0,469,487],
[497,506,506,506,508,515,482,513,502,503,511,484,531,0,485],
[501,509,521,497,508,546,503,485,499,483,540,489,513,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 18, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,519,500,519,497,512,509,508,512,485,497,508,502,548,522],
[481,0,510,526,474,527,508,516,506,492,484,484,496,509,481],
[500,490,0,519,498,509,501,491,493,480,480,493,531,514,479],
[481,474,481,0,462,500,488,512,472,477,498,444,467,486,454],
[503,526,502,538,0,484,509,537,536,472,505,524,507,532,498],
[488,473,491,500,516,0,474,502,497,482,465,496,502,506,504],
[491,492,499,512,491,526,0,506,509,489,465,506,481,468,479],
[492,484,509,488,463,498,494,0,480,501,478,482,513,484,478],
[488,494,507,528,464,503,491,520,0,470,466,461,474,518,484],
[515,508,520,523,528,518,511,499,530,0,486,510,536,524,501],
[503,516,520,502,495,535,535,522,534,514,0,489,513,523,493],
[492,516,507,556,476,504,494,518,539,490,511,0,520,542,513],
[498,504,469,533,493,498,519,487,526,464,487,480,0,476,497],
[452,491,486,514,468,494,532,516,482,476,477,458,524,0,466],
[478,519,521,546,502,496,521,522,516,499,507,487,503,534,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 19, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,525,531,511,538,502,505,533,516,524,523,534,498,496],
[510,0,523,543,515,522,513,493,509,522,495,509,506,529,488],
[475,477,0,504,478,497,483,472,475,503,476,487,513,476,502],
[469,457,496,0,462,486,492,493,482,512,480,507,483,494,492],
[489,485,522,538,0,502,503,505,499,507,500,526,508,517,496],
[462,478,503,514,498,0,496,494,497,510,488,503,510,498,488],
[498,487,517,508,497,504,0,487,503,508,505,513,491,499,489],
[495,507,528,507,495,506,513,0,516,525,509,510,524,519,521],
[467,491,525,518,501,503,497,484,0,500,493,490,488,502,504],
[484,478,497,488,493,490,492,475,500,0,488,497,508,502,489],
[476,505,524,520,500,512,495,491,507,512,0,525,501,501,491],
[477,491,513,493,474,497,487,490,510,503,475,0,499,484,493],
[466,494,487,517,492,490,509,476,512,492,499,501,0,505,489],
[502,471,524,506,483,502,501,481,498,498,499,516,495,0,501],
[504,512,498,508,504,512,511,479,496,511,509,507,511,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 20, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,505,536,516,491,488,421,547,445,476,418,449,409,453],
[491,0,491,503,478,474,540,512,523,491,427,411,445,472,448],
[495,509,0,578,511,539,574,463,504,444,514,415,481,472,473],
[464,497,422,0,459,420,524,432,468,423,423,370,440,418,426],
[484,522,489,541,0,527,560,475,504,468,515,454,546,472,448],
[509,526,461,580,473,0,562,464,489,494,444,472,414,513,419],
[512,460,426,476,440,438,0,443,454,481,479,404,427,424,412],
[579,488,537,568,525,536,557,0,539,505,526,480,485,525,507],
[453,477,496,532,496,511,546,461,0,504,487,429,447,470,466],
[555,509,556,577,532,506,519,495,496,0,561,477,484,571,483],
[524,573,486,577,485,556,521,474,513,439,0,444,471,465,455],
[582,589,585,630,546,528,596,520,571,523,556,0,471,510,487],
[551,555,519,560,454,586,573,515,553,516,529,529,0,498,505],
[591,528,528,582,528,487,576,475,530,429,535,490,502,0,470],
[547,552,527,574,552,581,588,493,534,517,545,513,495,530,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 21, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,543,515,515,524,529,496,498,495,504,482,522,504,510],
[482,0,508,492,495,491,489,506,497,501,497,490,518,502,499],
[457,492,0,476,487,478,490,467,472,479,469,467,488,484,476],
[485,508,524,0,471,507,506,496,477,491,492,502,504,497,525],
[485,505,513,529,0,524,527,499,513,516,539,503,513,507,522],
[476,509,522,493,476,0,492,490,487,493,499,478,479,501,510],
[471,511,510,494,473,508,0,476,479,490,480,507,511,501,517],
[504,494,533,504,501,510,524,0,508,482,533,493,514,513,522],
[502,503,528,523,487,513,521,492,0,506,508,487,493,506,513],
[505,499,521,509,484,507,510,518,494,0,508,497,510,511,515],
[496,503,531,508,461,501,520,467,492,492,0,491,510,486,500],
[518,510,533,498,497,522,493,507,513,503,509,0,519,500,531],
[478,482,512,496,487,521,489,486,507,490,490,481,0,505,526],
[496,498,516,503,493,499,499,487,494,489,514,500,495,0,522],
[490,501,524,475,478,490,483,478,487,485,500,469,474,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 22, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,529,550,538,473,524,466,495,496,515,485,536,521,514,499],
[471,0,511,545,478,524,473,492,489,473,462,525,441,494,479],
[450,489,0,501,463,504,464,464,466,433,445,469,449,462,413],
[462,455,499,0,433,505,447,477,426,474,425,484,459,439,432],
[527,522,537,567,0,521,497,579,510,500,512,559,503,520,446],
[476,476,496,495,479,0,441,463,467,461,437,490,454,461,460],
[534,527,536,553,503,559,0,525,508,512,492,569,551,527,523],
[505,508,536,523,421,537,475,0,479,477,466,502,482,473,481],
[504,511,534,574,490,533,492,521,0,507,488,557,496,555,499],
[485,527,567,526,500,539,488,523,493,0,460,512,481,502,471],
[515,538,555,575,488,563,508,534,512,540,0,549,523,496,480],
[464,475,531,516,441,510,431,498,443,488,451,0,473,479,459],
[479,559,551,541,497,546,449,518,504,519,477,527,0,523,519],
[486,506,538,561,480,539,473,527,445,498,504,521,477,0,446],
[501,521,587,568,554,540,477,519,501,529,520,541,481,554,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 23, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,556,440,612,444,423,413,592,442,581,564,624,404,544],
[510,0,462,440,547,451,392,436,428,558,508,444,597,361,480],
[444,538,0,363,488,391,364,414,480,504,444,522,499,399,454],
[560,560,637,0,538,552,467,489,627,607,469,584,651,549,600],
[388,453,512,462,0,408,504,353,496,391,436,532,485,345,413],
[556,549,609,448,592,0,454,473,470,508,460,514,663,363,596],
[577,608,636,533,496,546,0,450,570,600,534,664,598,477,624],
[587,564,586,511,647,527,550,0,621,520,549,566,642,432,631],
[408,572,520,373,504,530,430,379,0,626,484,575,592,471,517],
[558,442,496,393,609,492,400,480,374,0,470,509,559,429,499],
[419,492,556,531,564,540,466,451,516,530,0,585,570,520,475],
[436,556,478,416,468,486,336,434,425,491,415,0,489,351,443],
[376,403,501,349,515,337,402,358,408,441,430,511,0,325,501],
[596,639,601,451,655,637,523,568,529,571,480,649,675,0,481],
[456,520,546,400,587,404,376,369,483,501,525,557,499,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 24, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,489,490,505,498,530,509,476,542,500,526,494,513,506],
[496,0,487,461,486,480,506,466,467,503,483,489,481,478,441],
[511,513,0,485,511,508,523,510,506,525,517,530,477,523,507],
[510,539,515,0,530,532,541,505,494,540,521,511,489,542,518],
[495,514,489,470,0,486,526,496,492,502,499,533,458,512,496],
[502,520,492,468,514,0,514,477,470,516,486,517,459,515,483],
[470,494,477,459,474,486,0,478,468,499,487,490,464,493,469],
[491,534,490,495,504,523,522,0,487,504,517,525,463,522,493],
[524,533,494,506,508,530,532,513,0,526,540,529,502,519,498],
[458,497,475,460,498,484,501,496,474,0,491,470,467,498,508],
[500,517,483,479,501,514,513,483,460,509,0,531,465,522,490],
[474,511,470,489,467,483,510,475,471,530,469,0,455,491,494],
[506,519,523,511,542,541,536,537,498,533,535,545,0,540,510],
[487,522,477,458,488,485,507,478,481,502,478,509,460,0,490],
[494,559,493,482,504,517,531,507,502,492,510,506,490,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 25, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,527,522,504,512,512,530,501,526,528,505,537,520,550,478],
[473,0,499,469,516,514,492,463,495,492,483,483,469,499,452],
[478,501,0,454,496,500,475,477,484,482,475,486,505,510,434],
[496,531,546,0,528,521,520,500,534,517,505,501,503,563,506],
[488,484,504,472,0,520,465,473,472,496,496,483,488,515,475],
[488,486,500,479,480,0,478,478,474,517,468,475,497,502,462],
[470,508,525,480,535,522,0,476,515,525,496,509,493,523,506],
[499,537,523,500,527,522,524,0,526,510,506,506,516,524,481],
[474,505,516,466,528,526,485,474,0,503,450,472,485,488,465],
[472,508,518,483,504,483,475,490,497,0,469,488,507,508,460],
[495,517,525,495,504,532,504,494,550,531,0,488,518,538,484],
[463,517,514,499,517,525,491,494,528,512,512,0,482,516,480],
[480,531,495,497,512,503,507,484,515,493,482,518,0,529,483],
[450,501,490,437,485,498,477,476,512,492,462,484,471,0,469],
[522,548,566,494,525,538,494,519,535,540,516,520,517,531,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 26, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,501,503,495,480,508,491,513,518,511,501,508,491,501],
[510,0,503,513,511,483,499,518,534,507,530,509,511,522,495],
[499,497,0,496,476,482,490,503,521,506,501,486,523,492,471],
[497,487,504,0,504,486,498,497,517,509,502,507,505,527,508],
[505,489,524,496,0,506,516,511,511,503,523,511,531,511,494],
[520,517,518,514,494,0,510,532,523,520,522,533,516,522,504],
[492,501,510,502,484,490,0,511,499,483,514,502,533,515,477],
[509,482,497,503,489,468,489,0,489,487,507,495,518,498,469],
[487,466,479,483,489,477,501,511,0,479,511,485,501,503,491],
[482,493,494,491,497,480,517,513,521,0,510,508,505,502,489],
[489,470,499,498,477,478,486,493,489,490,0,503,516,499,489],
[499,491,514,493,489,467,498,505,515,492,497,0,494,501,479],
[492,489,477,495,469,484,467,482,499,495,484,506,0,496,491],
[509,478,508,473,489,478,485,502,497,498,501,499,504,0,487],
[499,505,529,492,506,496,523,531,509,511,511,521,509,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 27, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,471,491,458,475,482,484,470,487,447,480,461,478,473],
[544,0,519,553,506,528,527,521,527,541,497,508,531,549,540],
[529,481,0,506,473,497,500,485,483,494,454,503,506,507,501],
[509,447,494,0,477,487,469,464,473,488,461,492,485,483,482],
[542,494,527,523,0,536,523,508,506,512,502,529,511,503,535],
[525,472,503,513,464,0,485,500,455,480,488,522,486,482,494],
[518,473,500,531,477,515,0,481,497,493,479,515,498,513,498],
[516,479,515,536,492,500,519,0,470,504,489,498,508,517,510],
[530,473,517,527,494,545,503,530,0,527,496,481,509,532,505],
[513,459,506,512,488,520,507,496,473,0,485,513,504,494,527],
[553,503,546,539,498,512,521,511,504,515,0,535,507,514,522],
[520,492,497,508,471,478,485,502,519,487,465,0,494,504,502],
[539,469,494,515,489,514,502,492,491,496,493,506,0,501,507],
[522,451,493,517,497,518,487,483,468,506,486,496,499,0,506],
[527,460,499,518,465,506,502,490,495,473,478,498,493,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 28, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,479,455,501,486,492,463,526,543,470,496,520,518,477],
[510,0,462,485,483,502,511,508,514,505,493,531,535,492,529],
[521,538,0,490,513,553,557,514,528,546,529,556,562,570,548],
[545,515,510,0,516,499,548,520,522,560,511,525,550,510,580],
[499,517,487,484,0,531,509,508,494,516,452,519,501,539,514],
[514,498,447,501,469,0,529,489,521,540,505,519,577,495,536],
[508,489,443,452,491,471,0,464,508,533,434,487,514,482,504],
[537,492,486,480,492,511,536,0,506,562,493,522,564,518,519],
[474,486,472,478,506,479,492,494,0,511,445,504,472,479,475],
[457,495,454,440,484,460,467,438,489,0,461,473,513,451,460],
[530,507,471,489,548,495,566,507,555,539,0,558,547,504,543],
[504,469,444,475,481,481,513,478,496,527,442,0,547,512,506],
[480,465,438,450,499,423,486,436,528,487,453,453,0,512,492],
[482,508,430,490,461,505,518,482,521,549,496,488,488,0,484],
[523,471,452,420,486,464,496,481,525,540,457,494,508,516,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 29, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,586,555,506,546,466,580,569,540,627,549,621,527,574,594],
[414,0,510,403,443,446,549,595,398,539,505,542,454,494,532],
[445,490,0,377,487,350,424,544,395,505,433,558,399,471,524],
[494,597,623,0,485,477,601,646,534,514,525,640,532,492,681],
[454,557,513,515,0,530,585,559,532,538,609,608,495,556,661],
[534,554,650,523,470,0,565,569,557,608,589,671,526,577,511],
[420,451,576,399,415,435,0,650,444,455,512,515,457,432,519],
[431,405,456,354,441,431,350,0,412,501,441,559,475,466,565],
[460,602,605,466,468,443,556,588,0,546,583,601,479,538,515],
[373,461,495,486,462,392,545,499,454,0,415,586,437,482,574],
[451,495,567,475,391,411,488,559,417,585,0,483,463,562,583],
[379,458,442,360,392,329,485,441,399,414,517,0,423,415,430],
[473,546,601,468,505,474,543,525,521,563,537,577,0,506,537],
[426,506,529,508,444,423,568,534,462,518,438,585,494,0,524],
[406,468,476,319,339,489,481,435,485,426,417,570,463,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 30, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,484,502,517,494,498,499,504,480,481,505,506,482,485],
[512,0,505,519,536,513,520,535,511,510,493,517,542,501,504],
[516,495,0,509,496,490,482,501,494,478,494,507,513,494,480],
[498,481,491,0,510,495,490,518,508,476,459,506,490,483,505],
[483,464,504,490,0,482,470,501,508,464,466,479,510,480,481],
[506,487,510,505,518,0,477,505,510,492,492,507,502,506,502],
[502,480,518,510,530,523,0,528,535,499,474,513,520,495,491],
[501,465,499,482,499,495,472,0,513,481,458,501,507,464,487],
[496,489,506,492,492,490,465,487,0,487,466,494,483,482,496],
[520,490,522,524,536,508,501,519,513,0,484,511,536,514,490],
[519,507,506,541,534,508,526,542,534,516,0,516,521,509,498],
[495,483,493,494,521,493,487,499,506,489,484,0,516,497,493],
[494,458,487,510,490,498,480,493,517,464,479,484,0,475,494],
[518,499,506,517,520,494,505,536,518,486,491,503,525,0,514],
[515,496,520,495,519,498,509,513,504,510,502,507,506,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 31, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,488,484,500,454,486,484,521,508,515,460,496,463,481],
[526,0,514,544,515,485,504,536,523,498,513,498,506,484,482],
[512,486,0,482,472,422,468,497,488,481,510,463,467,496,446],
[516,456,518,0,464,456,518,529,514,490,523,465,504,486,476],
[500,485,528,536,0,478,496,490,487,501,484,493,505,490,513],
[546,515,578,544,522,0,526,523,542,511,557,509,541,537,498],
[514,496,532,482,504,474,0,536,515,477,528,486,505,517,483],
[516,464,503,471,510,477,464,0,499,501,484,479,480,485,448],
[479,477,512,486,513,458,485,501,0,496,503,501,496,479,473],
[492,502,519,510,499,489,523,499,504,0,506,530,498,479,465],
[485,487,490,477,516,443,472,516,497,494,0,473,488,484,460],
[540,502,537,535,507,491,514,521,499,470,527,0,501,496,496],
[504,494,533,496,495,459,495,520,504,502,512,499,0,469,467],
[537,516,504,514,510,463,483,515,521,521,516,504,531,0,538],
[519,518,554,524,487,502,517,552,527,535,540,504,533,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 32, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,487,498,523,477,489,486,507,480,520,503,485,498,509],
[500,0,503,500,526,490,508,504,531,502,518,507,500,501,489],
[513,497,0,490,500,499,500,514,506,492,520,477,496,498,524],
[502,500,510,0,513,489,518,495,500,520,531,504,499,515,506],
[477,474,500,487,0,493,504,492,509,481,508,482,481,507,482],
[523,510,501,511,507,0,521,500,500,505,539,516,499,523,524],
[511,492,500,482,496,479,0,501,482,485,531,502,494,486,492],
[514,496,486,505,508,500,499,0,524,522,526,491,492,495,513],
[493,469,494,500,491,500,518,476,0,496,518,492,483,468,498],
[520,498,508,480,519,495,515,478,504,0,545,489,507,497,513],
[480,482,480,469,492,461,469,474,482,455,0,461,466,473,488],
[497,493,523,496,518,484,498,509,508,511,539,0,496,501,498],
[515,500,504,501,519,501,506,508,517,493,534,504,0,491,482],
[502,499,502,485,493,477,514,505,532,503,527,499,509,0,509],
[491,511,476,494,518,476,508,487,502,487,512,502,518,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 33, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,667,497,487,477,507,541,448,427,483,536,512,404,526,575],
[333,0,375,466,334,371,495,435,416,288,452,383,327,341,334],
[503,625,0,488,452,369,401,379,534,336,404,557,512,443,622],
[513,534,512,0,429,487,485,455,391,479,418,473,526,485,543],
[523,666,548,571,0,462,613,452,490,484,471,436,396,563,609],
[493,629,631,513,538,0,531,603,594,457,699,526,478,599,497],
[459,505,599,515,387,469,0,483,453,310,627,581,515,460,413],
[552,565,621,545,548,397,517,0,527,434,543,539,605,539,523],
[573,584,466,609,510,406,547,473,0,519,525,543,462,420,476],
[517,712,664,521,516,543,690,566,481,0,570,527,515,634,492],
[464,548,596,582,529,301,373,457,475,430,0,556,518,545,518],
[488,617,443,527,564,474,419,461,457,473,444,0,448,406,449],
[596,673,488,474,604,522,485,395,538,485,482,552,0,468,691],
[474,659,557,515,437,401,540,461,580,366,455,594,532,0,408],
[425,666,378,457,391,503,587,477,524,508,482,551,309,592,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 34, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,487,519,509,528,525,518,522,538,512,484,481,513,508],
[495,0,506,501,512,523,502,503,508,536,483,513,468,484,480],
[513,494,0,472,519,506,504,523,510,499,485,511,481,511,503],
[481,499,528,0,528,546,513,537,490,519,526,473,497,517,495],
[491,488,481,472,0,489,488,491,504,496,495,487,467,501,505],
[472,477,494,454,511,0,505,506,496,504,501,485,462,493,476],
[475,498,496,487,512,495,0,507,508,521,489,523,488,495,494],
[482,497,477,463,509,494,493,0,496,518,519,488,472,500,494],
[478,492,490,510,496,504,492,504,0,532,520,521,506,513,517],
[462,464,501,481,504,496,479,482,468,0,486,493,474,493,475],
[488,517,515,474,505,499,511,481,480,514,0,497,477,515,476],
[516,487,489,527,513,515,477,512,479,507,503,0,500,519,488],
[519,532,519,503,533,538,512,528,494,526,523,500,0,512,507],
[487,516,489,483,499,507,505,500,487,507,485,481,488,0,491],
[492,520,497,505,495,524,506,506,483,525,524,512,493,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 35, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,513,503,482,541,489,515,489,491,498,488,522,511,499],
[502,0,502,520,533,558,506,532,511,503,538,499,503,531,532],
[487,498,0,489,465,509,470,479,503,474,513,486,489,483,480],
[497,480,511,0,495,524,492,524,461,489,507,459,496,510,473],
[518,467,535,505,0,526,499,537,452,532,482,509,530,532,502],
[459,442,491,476,474,0,486,475,474,468,480,462,463,487,491],
[511,494,530,508,501,514,0,481,449,536,505,498,521,522,504],
[485,468,521,476,463,525,519,0,492,475,476,485,456,519,459],
[511,489,497,539,548,526,551,508,0,535,533,490,518,560,499],
[509,497,526,511,468,532,464,525,465,0,479,480,497,502,464],
[502,462,487,493,518,520,495,524,467,521,0,494,420,541,472],
[512,501,514,541,491,538,502,515,510,520,506,0,491,540,512],
[478,497,511,504,470,537,479,544,482,503,580,509,0,548,532],
[489,469,517,490,468,513,478,481,440,498,459,460,452,0,454],
[501,468,520,527,498,509,496,541,501,536,528,488,468,546,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 36, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,480,506,514,497,526,485,507,515,505,525,515,488,500],
[500,0,476,501,500,479,503,475,505,486,491,521,523,495,498],
[520,524,0,539,508,521,523,500,541,519,494,546,556,528,511],
[494,499,461,0,485,482,520,486,503,508,486,511,513,479,506],
[486,500,492,515,0,494,517,487,528,488,494,532,509,496,496],
[503,521,479,518,506,0,524,508,530,525,508,553,524,517,526],
[474,497,477,480,483,476,0,470,513,484,463,500,488,481,476],
[515,525,500,514,513,492,530,0,524,524,497,528,519,507,510],
[493,495,459,497,472,470,487,476,0,499,503,513,513,491,480],
[485,514,481,492,512,475,516,476,501,0,476,517,510,500,478],
[495,509,506,514,506,492,537,503,497,524,0,530,523,502,508],
[475,479,454,489,468,447,500,472,487,483,470,0,483,464,471],
[485,477,444,487,491,476,512,481,487,490,477,517,0,487,484],
[512,505,472,521,504,483,519,493,509,500,498,536,513,0,500],
[500,502,489,494,504,474,524,490,520,522,492,529,516,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 37, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,503,506,510,503,493,500,477,492,495,504,483,490,516],
[500,0,475,476,476,503,472,503,481,501,491,518,515,481,486],
[497,525,0,487,493,504,474,502,483,512,497,520,496,493,501],
[494,524,513,0,523,480,474,499,487,506,490,509,511,470,504],
[490,524,507,477,0,513,502,498,498,505,506,507,504,509,506],
[497,497,496,520,487,0,486,518,496,499,497,510,494,497,511],
[507,528,526,526,498,514,0,537,519,518,527,528,497,528,524],
[500,497,498,501,502,482,463,0,481,490,502,512,472,497,506],
[523,519,517,513,502,504,481,519,0,510,514,524,513,493,481],
[508,499,488,494,495,501,482,510,490,0,495,526,490,492,507],
[505,509,503,510,494,503,473,498,486,505,0,516,493,489,509],
[496,482,480,491,493,490,472,488,476,474,484,0,491,497,491],
[517,485,504,489,496,506,503,528,487,510,507,509,0,485,479],
[510,519,507,530,491,503,472,503,507,508,511,503,515,0,504],
[484,514,499,496,494,489,476,494,519,493,491,509,521,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 38, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,561,523,537,519,502,534,517,522,528,544,550,494,550,571],
[439,0,499,501,488,484,468,487,519,517,482,523,457,471,535],
[477,501,0,518,474,460,483,477,450,458,481,506,465,482,499],
[463,499,482,0,507,493,500,453,478,459,505,482,485,471,466],
[481,512,526,493,0,497,492,501,502,492,510,511,492,523,529],
[498,516,540,507,503,0,509,465,496,524,488,564,477,487,509],
[466,532,517,500,508,491,0,447,491,526,484,522,472,463,540],
[483,513,523,547,499,535,553,0,507,514,516,588,495,470,526],
[478,481,550,522,498,504,509,493,0,479,492,551,494,520,521],
[472,483,542,541,508,476,474,486,521,0,520,520,528,482,538],
[456,518,519,495,490,512,516,484,508,480,0,537,479,505,531],
[450,477,494,518,489,436,478,412,449,480,463,0,463,472,498],
[506,543,535,515,508,523,528,505,506,472,521,537,0,476,528],
[450,529,518,529,477,513,537,530,480,518,495,528,524,0,495],
[429,465,501,534,471,491,460,474,479,462,469,502,472,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 39, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,537,510,517,500,520,473,470,509,491,510,509,527,511],
[494,0,531,507,479,516,494,467,506,517,527,517,510,535,513],
[463,469,0,480,473,490,471,460,481,487,490,496,484,493,495],
[490,493,520,0,485,507,501,490,488,487,503,495,492,532,493],
[483,521,527,515,0,506,515,488,507,504,504,517,483,528,508],
[500,484,510,493,494,0,500,465,491,481,502,476,477,503,517],
[480,506,529,499,485,500,0,504,527,520,524,506,514,520,524],
[527,533,540,510,512,535,496,0,498,527,533,537,498,534,517],
[530,494,519,512,493,509,473,502,0,501,525,518,484,544,523],
[491,483,513,513,496,519,480,473,499,0,515,521,493,508,512],
[509,473,510,497,496,498,476,467,475,485,0,499,471,509,511],
[490,483,504,505,483,524,494,463,482,479,501,0,480,517,488],
[491,490,516,508,517,523,486,502,516,507,529,520,0,537,504],
[473,465,507,468,472,497,480,466,456,492,491,483,463,0,488],
[489,487,505,507,492,483,476,483,477,488,489,512,496,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 40, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,495,517,515,494,464,503,493,517,489,501,511,501,492],
[519,0,493,494,516,485,504,491,512,524,486,481,481,493,515],
[505,507,0,503,519,501,477,479,524,514,476,470,499,496,492],
[483,506,497,0,512,476,488,495,510,523,498,476,509,494,492],
[485,484,481,488,0,472,476,478,489,482,469,465,489,471,473],
[506,515,499,524,528,0,470,513,504,523,500,492,494,494,483],
[536,496,523,512,524,530,0,527,522,512,499,508,527,479,491],
[497,509,521,505,522,487,473,0,504,495,475,514,496,472,481],
[507,488,476,490,511,496,478,496,0,503,459,507,513,511,494],
[483,476,486,477,518,477,488,505,497,0,503,496,483,471,483],
[511,514,524,502,531,500,501,525,541,497,0,509,510,513,526],
[499,519,530,524,535,508,492,486,493,504,491,0,525,502,502],
[489,519,501,491,511,506,473,504,487,517,490,475,0,476,484],
[499,507,504,506,529,506,521,528,489,529,487,498,524,0,504],
[508,485,508,508,527,517,509,519,506,517,474,498,516,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 41, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,532,553,533,519,454,511,576,526,515,517,475,511,522],
[484,0,515,542,514,509,473,475,546,511,527,517,474,523,515],
[468,485,0,549,554,497,438,459,536,522,519,498,464,505,491],
[447,458,451,0,498,465,408,411,517,474,434,486,391,468,458],
[467,486,446,502,0,479,452,486,518,535,469,501,436,501,476],
[481,491,503,535,521,0,475,471,504,499,489,525,505,510,473],
[546,527,562,592,548,525,0,501,563,523,545,524,482,527,517],
[489,525,541,589,514,529,499,0,560,489,515,510,524,561,511],
[424,454,464,483,482,496,437,440,0,472,476,464,419,472,476],
[474,489,478,526,465,501,477,511,528,0,481,525,464,534,511],
[485,473,481,566,531,511,455,485,524,519,0,542,481,517,531],
[483,483,502,514,499,475,476,490,536,475,458,0,493,513,487],
[525,526,536,609,564,495,518,476,581,536,519,507,0,525,517],
[489,477,495,532,499,490,473,439,528,466,483,487,475,0,468],
[478,485,509,542,524,527,483,489,524,489,469,513,483,532,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 42, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,521,490,503,523,523,509,512,499,507,500,514,516,479],
[483,0,488,496,488,495,506,483,511,515,482,488,520,498,473],
[479,512,0,505,503,501,501,480,508,505,488,503,505,499,500],
[510,504,495,0,510,501,506,540,491,521,505,489,503,531,484],
[497,512,497,490,0,513,524,518,497,501,525,480,486,523,480],
[477,505,499,499,487,0,509,495,521,492,500,495,512,510,472],
[477,494,499,494,476,491,0,505,498,498,481,497,501,502,468],
[491,517,520,460,482,505,495,0,474,488,499,509,496,510,485],
[488,489,492,509,503,479,502,526,0,488,491,473,517,523,498],
[501,485,495,479,499,508,502,512,512,0,479,497,504,502,473],
[493,518,512,495,475,500,519,501,509,521,0,503,513,526,499],
[500,512,497,511,520,505,503,491,527,503,497,0,519,531,482],
[486,480,495,497,514,488,499,504,483,496,487,481,0,496,494],
[484,502,501,469,477,490,498,490,477,498,474,469,504,0,466],
[521,527,500,516,520,528,532,515,502,527,501,518,506,534,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 43, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,472,483,462,464,444,495,474,508,517,485,503,552,489],
[524,0,529,480,525,517,513,466,452,539,491,530,516,544,476],
[528,471,0,509,496,504,502,482,534,512,499,509,516,510,548],
[517,520,491,0,486,506,472,495,462,461,494,513,516,488,492],
[538,475,504,514,0,484,495,500,475,507,519,494,499,564,502],
[536,483,496,494,516,0,504,499,492,504,520,525,529,555,512],
[556,487,498,528,505,496,0,499,498,499,491,498,544,551,510],
[505,534,518,505,500,501,501,0,514,502,513,508,535,535,524],
[526,548,466,538,525,508,502,486,0,518,514,526,502,574,503],
[492,461,488,539,493,496,501,498,482,0,508,473,505,511,488],
[483,509,501,506,481,480,509,487,486,492,0,511,515,528,519],
[515,470,491,487,506,475,502,492,474,527,489,0,476,539,479],
[497,484,484,484,501,471,456,465,498,495,485,524,0,536,480],
[448,456,490,512,436,445,449,465,426,489,472,461,464,0,485],
[511,524,452,508,498,488,490,476,497,512,481,521,520,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 44, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,634,557,712,585,684,476,632,617,549,586,453,606,481,501],
[366,0,516,662,458,627,458,554,499,478,638,527,590,497,461],
[443,484,0,630,431,369,461,592,407,530,649,436,527,526,386],
[288,338,370,0,313,457,345,355,327,467,488,359,303,484,377],
[415,542,569,687,0,633,506,436,463,528,590,459,432,479,512],
[316,373,631,543,367,0,457,396,360,404,571,375,373,436,240],
[524,542,539,655,494,543,0,526,511,436,538,463,497,515,532],
[368,446,408,645,564,604,474,0,510,469,585,464,485,469,374],
[383,501,593,673,537,640,489,490,0,561,659,486,428,498,494],
[451,522,470,533,472,596,564,531,439,0,551,531,538,387,469],
[414,362,351,512,410,429,462,415,341,449,0,400,458,389,327],
[547,473,564,641,541,625,537,536,514,469,600,0,646,470,514],
[394,410,473,697,568,627,503,515,572,462,542,354,0,560,476],
[519,503,474,516,521,564,485,531,502,613,611,530,440,0,497],
[499,539,614,623,488,760,468,626,506,531,673,486,524,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 45, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,459,467,512,522,479,463,443,465,411,465,494,497,437],
[498,0,440,531,532,533,531,451,531,521,492,516,476,467,437],
[541,560,0,522,552,585,525,449,521,539,496,486,480,536,478],
[533,469,478,0,495,554,489,453,495,508,435,506,446,510,505],
[488,468,448,505,0,566,490,496,435,480,499,520,467,494,465],
[478,467,415,446,434,0,525,367,488,459,429,463,520,470,450],
[521,469,475,511,510,475,0,426,466,433,448,475,423,458,524],
[537,549,551,547,504,633,574,0,538,548,570,596,496,555,538],
[557,469,479,505,565,512,534,462,0,491,467,549,517,536,512],
[535,479,461,492,520,541,567,452,509,0,433,503,511,574,555],
[589,508,504,565,501,571,552,430,533,567,0,539,522,564,519],
[535,484,514,494,480,537,525,404,451,497,461,0,440,465,444],
[506,524,520,554,533,480,577,504,483,489,478,560,0,575,507],
[503,533,464,490,506,530,542,445,464,426,436,535,425,0,486],
[563,563,522,495,535,550,476,462,488,445,481,556,493,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 46, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,642,411,456,499,450,381,353,459,384,495,502,349,448,470],
[358,0,333,460,343,418,317,346,458,283,402,262,379,405,414],
[589,667,0,565,418,583,494,491,545,477,547,470,474,406,453],
[544,540,435,0,421,485,508,510,477,441,492,431,464,456,463],
[501,657,582,579,0,628,529,525,643,590,513,500,508,515,585],
[550,582,417,515,372,0,436,456,559,382,472,423,394,459,512],
[619,683,506,492,471,564,0,490,603,501,588,570,508,497,541],
[647,654,509,490,475,544,510,0,609,579,578,564,494,503,517],
[541,542,455,523,357,441,397,391,0,389,528,348,411,373,403],
[616,717,523,559,410,618,499,421,611,0,578,515,497,521,509],
[505,598,453,508,487,528,412,422,472,422,0,457,509,524,426],
[498,738,530,569,500,577,430,436,652,485,543,0,483,489,536],
[651,621,526,536,492,606,492,506,589,503,491,517,0,469,508],
[552,595,594,544,485,541,503,497,627,479,476,511,531,0,455],
[530,586,547,537,415,488,459,483,597,491,574,464,492,545,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 47, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,439,469,498,529,488,528,472,465,495,475,478,464,468],
[570,0,480,508,558,507,528,482,520,500,515,487,518,468,532],
[561,520,0,520,531,511,536,500,534,512,558,480,490,487,487],
[531,492,480,0,584,496,530,543,535,561,560,533,536,486,542],
[502,442,469,416,0,490,482,489,481,483,513,501,494,471,474],
[471,493,489,504,510,0,498,508,512,492,530,477,518,479,472],
[512,472,464,470,518,502,0,466,470,481,491,446,528,477,484],
[472,518,500,457,511,492,534,0,510,495,493,460,482,447,507],
[528,480,466,465,519,488,530,490,0,512,515,486,498,470,482],
[535,500,488,439,517,508,519,505,488,0,526,472,495,492,497],
[505,485,442,440,487,470,509,507,485,474,0,485,499,480,493],
[525,513,520,467,499,523,554,540,514,528,515,0,528,495,519],
[522,482,510,464,506,482,472,518,502,505,501,472,0,512,517],
[536,532,513,514,529,521,523,553,530,508,520,505,488,0,534],
[532,468,513,458,526,528,516,493,518,503,507,481,483,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 48, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,549,521,431,565,468,504,528,500,476,501,448,486,504,445],
[451,0,455,472,559,460,560,539,567,539,528,482,519,548,474],
[479,545,0,464,578,454,543,566,544,518,489,451,474,542,514],
[569,528,536,0,561,497,562,588,570,524,573,511,545,573,495],
[435,441,422,439,0,426,482,494,428,491,479,446,438,455,450],
[532,540,546,503,574,0,541,537,533,547,585,485,485,585,584],
[496,440,457,438,518,459,0,481,463,511,557,467,498,517,489],
[472,461,434,412,506,463,519,0,504,447,508,389,520,503,512],
[500,433,456,430,572,467,537,496,0,563,501,402,461,525,467],
[524,461,482,476,509,453,489,553,437,0,502,482,480,519,488],
[499,472,511,427,521,415,443,492,499,498,0,403,479,439,419],
[552,518,549,489,554,515,533,611,598,518,597,0,508,594,529],
[514,481,526,455,562,515,502,480,539,520,521,492,0,551,499],
[496,452,458,427,545,415,483,497,475,481,561,406,449,0,460],
[555,526,486,505,550,416,511,488,533,512,581,471,501,540,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 49, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,425,426,418,465,465,448,470,466,448,422,467,443,443],
[513,0,435,449,455,416,424,443,508,481,489,427,478,458,453],
[575,565,0,536,501,520,512,505,534,500,513,499,536,510,488],
[574,551,464,0,515,502,511,525,511,509,508,492,501,452,526],
[582,545,499,485,0,513,521,476,543,506,478,516,542,492,519],
[535,584,480,498,487,0,490,460,505,489,474,494,494,501,497],
[535,576,488,489,479,510,0,474,506,473,503,469,513,483,475],
[552,557,495,475,524,540,526,0,522,514,526,469,544,498,496],
[530,492,466,489,457,495,494,478,0,505,496,465,520,502,458],
[534,519,500,491,494,511,527,486,495,0,496,461,530,474,519],
[552,511,487,492,522,526,497,474,504,504,0,484,537,444,440],
[578,573,501,508,484,506,531,531,535,539,516,0,527,519,492],
[533,522,464,499,458,506,487,456,480,470,463,473,0,467,472],
[557,542,490,548,508,499,517,502,498,526,556,481,533,0,508],
[557,547,512,474,481,503,525,504,542,481,560,508,528,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 50, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,525,494,487,505,504,469,480,491,490,501,510,492,514,515],
[475,0,475,485,480,498,476,501,503,487,504,503,482,520,523],
[506,525,0,486,471,501,501,516,503,492,498,507,502,510,534],
[513,515,514,0,467,522,513,513,487,492,511,500,515,545,541],
[495,520,529,533,0,544,509,533,520,516,507,509,509,520,548],
[496,502,499,478,456,0,500,491,491,507,477,487,481,532,506],
[531,524,499,487,491,500,0,482,476,485,503,511,492,505,503],
[520,499,484,487,467,509,518,0,492,510,480,482,490,537,493],
[509,497,497,513,480,509,524,508,0,534,511,510,503,512,513],
[510,513,508,508,484,493,515,490,466,0,513,507,472,526,544],
[499,496,502,489,493,523,497,520,489,487,0,502,485,511,522],
[490,497,493,500,491,513,489,518,490,493,498,0,499,533,528],
[508,518,498,485,491,519,508,510,497,528,515,501,0,539,529],
[486,480,490,455,480,468,495,463,488,474,489,467,461,0,496],
[485,477,466,459,452,494,497,507,487,456,478,472,471,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 51, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,543,484,512,515,507,506,485,502,510,516,533,492,527,509],
[457,0,478,499,501,486,459,484,500,487,478,497,477,484,497],
[516,522,0,544,505,503,495,505,520,512,513,523,495,555,498],
[488,501,456,0,483,501,493,492,507,491,500,503,482,529,493],
[485,499,495,517,0,490,491,489,507,492,507,506,488,506,517],
[493,514,497,499,510,0,487,495,524,480,479,495,492,495,504],
[494,541,505,507,509,513,0,489,516,521,512,511,532,539,514],
[515,516,495,508,511,505,511,0,524,503,524,499,485,525,502],
[498,500,480,493,493,476,484,476,0,500,493,496,479,506,512],
[490,513,488,509,508,520,479,497,500,0,490,523,472,500,518],
[484,522,487,500,493,521,488,476,507,510,0,503,519,537,517],
[467,503,477,497,494,505,489,501,504,477,497,0,474,521,513],
[508,523,505,518,512,508,468,515,521,528,481,526,0,537,513],
[473,516,445,471,494,505,461,475,494,500,463,479,463,0,498],
[491,503,502,507,483,496,486,498,488,482,483,487,487,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 52, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,515,528,489,501,530,534,518,513,506,517,502,490,511],
[515,0,497,503,482,470,515,524,484,508,501,480,472,497,495],
[485,503,0,508,487,476,527,475,491,484,500,489,520,484,497],
[472,497,492,0,443,453,490,479,469,466,468,482,481,486,477],
[511,518,513,557,0,499,511,529,478,525,501,501,510,498,501],
[499,530,524,547,501,0,535,509,509,539,502,531,507,512,544],
[470,485,473,510,489,465,0,463,488,515,496,493,487,485,503],
[466,476,525,521,471,491,537,0,484,489,501,485,512,494,511],
[482,516,509,531,522,491,512,516,0,509,516,517,492,485,530],
[487,492,516,534,475,461,485,511,491,0,502,512,523,513,502],
[494,499,500,532,499,498,504,499,484,498,0,499,486,489,506],
[483,520,511,518,499,469,507,515,483,488,501,0,495,492,509],
[498,528,480,519,490,493,513,488,508,477,514,505,0,496,512],
[510,503,516,514,502,488,515,506,515,487,511,508,504,0,515],
[489,505,503,523,499,456,497,489,470,498,494,491,488,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 53, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,493,514,527,511,513,546,534,515,530,524,540,529,531],
[518,0,529,508,533,496,535,543,512,554,532,486,535,512,528],
[507,471,0,522,504,507,494,529,509,506,502,517,495,482,525],
[486,492,478,0,525,505,492,519,512,526,534,503,519,502,517],
[473,467,496,475,0,471,460,500,467,494,521,491,488,477,502],
[489,504,493,495,529,0,491,527,482,526,528,501,517,493,528],
[487,465,506,508,540,509,0,517,526,550,520,508,543,517,498],
[454,457,471,481,500,473,483,0,474,486,502,455,484,491,470],
[466,488,491,488,533,518,474,526,0,529,507,492,501,521,507],
[485,446,494,474,506,474,450,514,471,0,502,475,483,478,483],
[470,468,498,466,479,472,480,498,493,498,0,493,496,493,489],
[476,514,483,497,509,499,492,545,508,525,507,0,500,498,506],
[460,465,505,481,512,483,457,516,499,517,504,500,0,491,507],
[471,488,518,498,523,507,483,509,479,522,507,502,509,0,523],
[469,472,475,483,498,472,502,530,493,517,511,494,493,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 54, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,522,523,508,500,493,520,509,501,489,500,506,503,510,524],
[478,0,512,480,470,475,486,500,471,493,495,491,478,507,540],
[477,488,0,484,462,471,486,476,467,441,477,478,484,462,489],
[492,520,516,0,483,489,511,510,489,470,504,496,499,495,525],
[500,530,538,517,0,485,493,500,490,493,517,545,515,524,527],
[507,525,529,511,515,0,508,509,482,516,525,535,505,517,526],
[480,514,514,489,507,492,0,509,487,483,496,520,492,515,538],
[491,500,524,490,500,491,491,0,487,493,484,502,479,516,525],
[499,529,533,511,510,518,513,513,0,505,513,513,520,524,535],
[511,507,559,530,507,484,517,507,495,0,504,530,514,536,534],
[500,505,523,496,483,475,504,516,487,496,0,517,508,511,540],
[494,509,522,504,455,465,480,498,487,470,483,0,499,516,524],
[497,522,516,501,485,495,508,521,480,486,492,501,0,514,538],
[490,493,538,505,476,483,485,484,476,464,489,484,486,0,532],
[476,460,511,475,473,474,462,475,465,466,460,476,462,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 55, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,478,491,532,499,490,521,499,535,492,500,491,479,487],
[495,0,502,497,527,518,479,509,527,546,502,461,531,499,511],
[522,498,0,511,539,526,480,558,510,529,527,518,555,510,520],
[509,503,489,0,543,529,491,508,520,546,506,471,507,502,549],
[468,473,461,457,0,489,475,433,475,512,469,471,454,483,473],
[501,482,474,471,511,0,485,484,512,525,494,488,517,460,485],
[510,521,520,509,525,515,0,521,530,546,488,489,522,516,501],
[479,491,442,492,567,516,479,0,517,521,499,515,529,482,527],
[501,473,490,480,525,488,470,483,0,510,485,469,518,483,519],
[465,454,471,454,488,475,454,479,490,0,477,474,459,465,492],
[508,498,473,494,531,506,512,501,515,523,0,472,511,514,493],
[500,539,482,529,529,512,511,485,531,526,528,0,521,505,503],
[509,469,445,493,546,483,478,471,482,541,489,479,0,465,482],
[521,501,490,498,517,540,484,518,517,535,486,495,535,0,518],
[513,489,480,451,527,515,499,473,481,508,507,497,518,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 56, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,504,506,504,497,499,507,485,485,502,497,471,490,482],
[514,0,521,511,515,516,513,505,494,514,518,497,490,502,508],
[496,479,0,488,475,501,487,483,470,480,501,510,477,497,496],
[494,489,512,0,497,496,499,504,512,497,502,499,497,490,497],
[496,485,525,503,0,518,492,495,489,494,497,502,485,498,508],
[503,484,499,504,482,0,494,507,482,485,490,524,475,502,493],
[501,487,513,501,508,506,0,501,502,503,493,511,492,506,502],
[493,495,517,496,505,493,499,0,458,491,495,493,465,490,490],
[515,506,530,488,511,518,498,542,0,512,515,524,497,514,492],
[515,486,520,503,506,515,497,509,488,0,515,501,502,501,496],
[498,482,499,498,503,510,507,505,485,485,0,505,464,501,504],
[503,503,490,501,498,476,489,507,476,499,495,0,489,483,506],
[529,510,523,503,515,525,508,535,503,498,536,511,0,527,535],
[510,498,503,510,502,498,494,510,486,499,499,517,473,0,504],
[518,492,504,503,492,507,498,510,508,504,496,494,465,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 57, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,464,489,445,488,514,477,538,472,466,517,482,515,463],
[504,0,488,453,499,499,519,502,585,478,528,504,515,493,484],
[536,512,0,483,517,530,528,498,574,515,498,466,538,516,504],
[511,547,517,0,526,528,519,494,580,551,520,474,557,509,523],
[555,501,483,474,0,540,486,455,547,486,478,468,487,472,487],
[512,501,470,472,460,0,480,486,550,432,487,481,537,463,498],
[486,481,472,481,514,520,0,470,539,469,469,494,481,501,484],
[523,498,502,506,545,514,530,0,597,540,511,503,519,512,514],
[462,415,426,420,453,450,461,403,0,435,448,421,430,443,427],
[528,522,485,449,514,568,531,460,565,0,494,502,510,498,523],
[534,472,502,480,522,513,531,489,552,506,0,492,479,504,501],
[483,496,534,526,532,519,506,497,579,498,508,0,568,520,544],
[518,485,462,443,513,463,519,481,570,490,521,432,0,497,493],
[485,507,484,491,528,537,499,488,557,502,496,480,503,0,505],
[537,516,496,477,513,502,516,486,573,477,499,456,507,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 58, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,496,497,505,520,516,495,526,512,525,499,493,526,521],
[486,0,465,461,486,478,499,473,465,447,507,500,458,494,471],
[504,535,0,507,505,522,508,473,526,513,528,496,488,526,489],
[503,539,493,0,510,520,505,489,488,501,534,490,507,517,508],
[495,514,495,490,0,493,511,481,496,474,530,490,504,519,475],
[480,522,478,480,507,0,508,471,491,488,520,485,476,485,500],
[484,501,492,495,489,492,0,469,485,497,509,506,481,499,493],
[505,527,527,511,519,529,531,0,521,522,548,503,526,539,499],
[474,535,474,512,504,509,515,479,0,461,525,482,476,517,491],
[488,553,487,499,526,512,503,478,539,0,536,499,483,504,498],
[475,493,472,466,470,480,491,452,475,464,0,475,476,488,475],
[501,500,504,510,510,515,494,497,518,501,525,0,486,539,514],
[507,542,512,493,496,524,519,474,524,517,524,514,0,516,503],
[474,506,474,483,481,515,501,461,483,496,512,461,484,0,489],
[479,529,511,492,525,500,507,501,509,502,525,486,497,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 59, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,527,521,509,512,513,511,467,542,486,490,485,532,501,541],
[473,0,475,482,500,498,517,474,513,508,489,489,472,458,486],
[479,525,0,519,525,467,493,443,515,516,489,478,514,465,509],
[491,518,481,0,456,486,486,498,502,498,479,471,507,462,504],
[488,500,475,544,0,483,491,483,497,527,505,495,527,486,494],
[487,502,533,514,517,0,510,478,543,536,515,515,515,496,529],
[489,483,507,514,509,490,0,487,501,546,503,510,539,496,525],
[533,526,557,502,517,522,513,0,534,538,528,509,504,481,542],
[458,487,485,498,503,457,499,466,0,501,517,484,492,468,538],
[514,492,484,502,473,464,454,462,499,0,500,475,495,468,510],
[510,511,511,521,495,485,497,472,483,500,0,495,527,475,523],
[515,511,522,529,505,485,490,491,516,525,505,0,525,509,508],
[468,528,486,493,473,485,461,496,508,505,473,475,0,468,485],
[499,542,535,538,514,504,504,519,532,532,525,491,532,0,556],
[459,514,491,496,506,471,475,458,462,490,477,492,515,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 60, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,521,492,496,494,496,503,505,504,504,509,495,509,521],
[495,0,509,494,496,483,504,475,504,499,479,505,489,489,504],
[479,491,0,476,494,488,492,484,482,492,484,497,488,487,509],
[508,506,524,0,508,503,503,509,510,505,522,521,485,495,526],
[504,504,506,492,0,506,528,492,511,496,485,500,488,512,512],
[506,517,512,497,494,0,513,513,501,508,509,517,494,510,511],
[504,496,508,497,472,487,0,492,493,470,515,478,469,503,507],
[497,525,516,491,508,487,508,0,511,507,502,503,512,518,534],
[495,496,518,490,489,499,507,489,0,476,493,491,485,480,524],
[496,501,508,495,504,492,530,493,524,0,516,510,481,501,517],
[496,521,516,478,515,491,485,498,507,484,0,496,503,496,486],
[491,495,503,479,500,483,522,497,509,490,504,0,495,479,503],
[505,511,512,515,512,506,531,488,515,519,497,505,0,494,534],
[491,511,513,505,488,490,497,482,520,499,504,521,506,0,531],
[479,496,491,474,488,489,493,466,476,483,514,497,466,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 61, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,521,513,480,528,515,512,492,464,477,467,474,475,415,460],
[479,0,503,491,522,508,479,462,441,463,480,462,469,454,453],
[487,497,0,492,547,504,503,465,457,443,512,493,497,430,460],
[520,509,508,0,529,572,529,482,488,465,515,506,520,464,463],
[472,478,453,471,0,446,488,416,469,425,463,495,462,449,460],
[485,492,496,428,554,0,481,481,458,464,455,412,507,434,450],
[488,521,497,471,512,519,0,482,432,457,461,487,505,428,442],
[508,538,535,518,584,519,518,0,475,472,517,517,546,468,506],
[536,559,543,512,531,542,568,525,0,506,506,509,549,492,504],
[523,537,557,535,575,536,543,528,494,0,537,537,535,503,532],
[533,520,488,485,537,545,539,483,494,463,0,525,523,514,466],
[526,538,507,494,505,588,513,483,491,463,475,0,539,456,494],
[525,531,503,480,538,493,495,454,451,465,477,461,0,474,454],
[585,546,570,536,551,566,572,532,508,497,486,544,526,0,497],
[540,547,540,537,540,550,558,494,496,468,534,506,546,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 62, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,567,508,519,512,532,500,510,537,520,508,480,561,510,506],
[433,0,495,478,449,489,451,434,483,462,470,452,431,484,460],
[492,505,0,546,531,517,489,547,506,560,438,474,485,538,511],
[481,522,454,0,476,482,506,479,523,477,462,488,499,515,566],
[488,551,469,524,0,517,521,510,555,534,480,541,549,565,514],
[468,511,483,518,483,0,499,456,476,486,495,471,525,508,545],
[500,549,511,494,479,501,0,528,464,513,480,492,535,572,521],
[490,566,453,521,490,544,472,0,492,477,500,524,511,489,513],
[463,517,494,477,445,524,536,508,0,517,531,536,504,509,509],
[480,538,440,523,466,514,487,523,483,0,448,537,476,507,498],
[492,530,562,538,520,505,520,500,469,552,0,503,509,529,544],
[520,548,526,512,459,529,508,476,464,463,497,0,493,515,564],
[439,569,515,501,451,475,465,489,496,524,491,507,0,519,527],
[490,516,462,485,435,492,428,511,491,493,471,485,481,0,469],
[494,540,489,434,486,455,479,487,491,502,456,436,473,531,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 63, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,496,512,511,506,507,474,482,524,512,524,499,520,486],
[531,0,532,527,517,515,486,508,499,510,508,517,523,510,525],
[504,468,0,519,505,514,493,499,484,509,490,504,516,515,515],
[488,473,481,0,480,481,497,454,493,492,486,519,500,488,487],
[489,483,495,520,0,504,502,487,469,494,497,523,507,502,493],
[494,485,486,519,496,0,496,480,473,493,494,524,500,502,496],
[493,514,507,503,498,504,0,498,487,488,497,525,493,509,481],
[526,492,501,546,513,520,502,0,494,517,526,543,523,532,524],
[518,501,516,507,531,527,513,506,0,520,509,515,510,524,489],
[476,490,491,508,506,507,512,483,480,0,477,515,496,487,516],
[488,492,510,514,503,506,503,474,491,523,0,517,498,542,493],
[476,483,496,481,477,476,475,457,485,485,483,0,487,498,485],
[501,477,484,500,493,500,507,477,490,504,502,513,0,517,480],
[480,490,485,512,498,498,491,468,476,513,458,502,483,0,494],
[514,475,485,513,507,504,519,476,511,484,507,515,520,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 64, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,488,520,495,498,523,493,498,542,454,501,513,522,538],
[485,0,483,453,488,494,506,495,490,481,458,497,479,488,514],
[512,517,0,464,477,470,467,543,466,478,442,499,490,481,547],
[480,547,536,0,450,529,541,530,485,528,455,507,491,522,517],
[505,512,523,550,0,520,554,549,494,541,513,508,517,516,535],
[502,506,530,471,480,0,538,577,506,527,506,507,526,537,532],
[477,494,533,459,446,462,0,505,524,512,470,523,489,504,524],
[507,505,457,470,451,423,495,0,468,498,413,509,472,497,518],
[502,510,534,515,506,494,476,532,0,501,453,499,553,505,543],
[458,519,522,472,459,473,488,502,499,0,456,507,494,483,545],
[546,542,558,545,487,494,530,587,547,544,0,524,540,547,563],
[499,503,501,493,492,493,477,491,501,493,476,0,474,495,551],
[487,521,510,509,483,474,511,528,447,506,460,526,0,480,513],
[478,512,519,478,484,463,496,503,495,517,453,505,520,0,546],
[462,486,453,483,465,468,476,482,457,455,437,449,487,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 65, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,513,528,518,507,516,506,493,502,501,514,514,482,498,533],
[487,0,489,509,486,514,513,478,475,463,502,490,470,475,507],
[472,511,0,512,492,527,529,496,487,502,502,506,498,498,527],
[482,491,488,0,500,510,507,485,493,489,520,479,479,474,505],
[493,514,508,500,0,503,524,506,495,519,521,509,492,481,510],
[484,486,473,490,497,0,513,459,481,489,493,488,475,464,481],
[494,487,471,493,476,487,0,480,471,489,512,496,459,457,493],
[507,522,504,515,494,541,520,0,494,502,519,507,499,495,514],
[498,525,513,507,505,519,529,506,0,513,526,506,510,509,538],
[499,537,498,511,481,511,511,498,487,0,496,503,494,460,501],
[486,498,498,480,479,507,488,481,474,504,0,498,456,461,486],
[486,510,494,521,491,512,504,493,494,497,502,0,504,485,486],
[518,530,502,521,508,525,541,501,490,506,544,496,0,498,518],
[502,525,502,526,519,536,543,505,491,540,539,515,502,0,536],
[467,493,473,495,490,519,507,486,462,499,514,514,482,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 66, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,496,486,501,485,495,458,514,499,497,476,510,488,502],
[517,0,479,512,482,518,496,464,506,508,476,505,495,500,468],
[504,521,0,528,496,486,507,467,485,487,486,497,526,499,478],
[514,488,472,0,485,508,482,491,481,492,478,489,510,489,489],
[499,518,504,515,0,470,477,491,508,494,445,511,500,467,509],
[515,482,514,492,530,0,459,464,500,470,472,496,517,484,454],
[505,504,493,518,523,541,0,477,502,483,482,504,508,474,489],
[542,536,533,509,509,536,523,0,530,505,516,523,530,515,494],
[486,494,515,519,492,500,498,470,0,499,505,510,502,497,473],
[501,492,513,508,506,530,517,495,501,0,478,512,508,508,512],
[503,524,514,522,555,528,518,484,495,522,0,503,541,526,523],
[524,495,503,511,489,504,496,477,490,488,497,0,507,488,517],
[490,505,474,490,500,483,492,470,498,492,459,493,0,474,481],
[512,500,501,511,533,516,526,485,503,492,474,512,526,0,492],
[498,532,522,511,491,546,511,506,527,488,477,483,519,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 67, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,512,554,417,474,450,481,509,477,439,473,492,504,495],
[528,0,529,574,486,524,494,558,546,538,510,506,546,534,536],
[488,471,0,516,450,491,451,517,503,518,430,447,515,480,526],
[446,426,484,0,442,496,503,496,504,460,478,460,496,451,529],
[583,514,550,558,0,520,537,572,527,539,511,520,555,499,533],
[526,476,509,504,480,0,467,509,490,474,472,516,529,517,535],
[550,506,549,497,463,533,0,558,526,489,500,507,535,508,519],
[519,442,483,504,428,491,442,0,507,449,426,446,530,450,511],
[491,454,497,496,473,510,474,493,0,479,481,511,536,499,519],
[523,462,482,540,461,526,511,551,521,0,517,456,499,492,557],
[561,490,570,522,489,528,500,574,519,483,0,489,515,502,545],
[527,494,553,540,480,484,493,554,489,544,511,0,526,475,563],
[508,454,485,504,445,471,465,470,464,501,485,474,0,463,502],
[496,466,520,549,501,483,492,550,501,508,498,525,537,0,561],
[505,464,474,471,467,465,481,489,481,443,455,437,498,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 68, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,470,518,566,501,516,542,497,496,479,517,484,533,491],
[511,0,515,541,539,497,535,577,538,542,521,521,473,518,509],
[530,485,0,514,581,525,527,484,467,491,534,506,498,539,488],
[482,459,486,0,527,485,533,535,479,513,541,513,504,500,532],
[434,461,419,473,0,412,506,466,472,450,419,454,472,454,428],
[499,503,475,515,588,0,540,519,491,527,487,488,490,492,479],
[484,465,473,467,494,460,0,489,465,520,502,475,459,511,448],
[458,423,516,465,534,481,511,0,454,508,473,468,493,496,494],
[503,462,533,521,528,509,535,546,0,538,504,520,505,559,495],
[504,458,509,487,550,473,480,492,462,0,508,484,503,517,509],
[521,479,466,459,581,513,498,527,496,492,0,513,573,541,474],
[483,479,494,487,546,512,525,532,480,516,487,0,486,524,515],
[516,527,502,496,528,510,541,507,495,497,427,514,0,497,502],
[467,482,461,500,546,508,489,504,441,483,459,476,503,0,457],
[509,491,512,468,572,521,552,506,505,491,526,485,498,543,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 69, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,579,605,437,497,618,683,561,479,652,664,598,611,556,579],
[421,0,433,475,536,529,618,450,507,505,403,463,353,419,460],
[395,567,0,611,530,548,587,435,611,519,511,610,322,511,488],
[563,525,389,0,466,462,611,492,465,442,498,440,399,542,392],
[503,464,470,534,0,466,427,519,327,337,433,464,371,349,309],
[382,471,452,538,534,0,450,381,442,452,502,534,349,509,396],
[317,382,413,389,573,550,0,413,540,512,397,380,495,398,399],
[439,550,565,508,481,619,587,0,387,544,609,549,432,384,476],
[521,493,389,535,673,558,460,613,0,493,544,492,344,511,411],
[348,495,481,558,663,548,488,456,507,0,451,525,371,432,498],
[336,597,489,502,567,498,603,391,456,549,0,529,279,455,527],
[402,537,390,560,536,466,620,451,508,475,471,0,360,475,436],
[389,647,678,601,629,651,505,568,656,629,721,640,0,609,512],
[444,581,489,458,651,491,602,616,489,568,545,525,391,0,346],
[421,540,512,608,691,604,601,524,589,502,473,564,488,654,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 70, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,490,490,494,492,513,508,509,483,520,512,500,498,530],
[504,0,496,490,497,506,522,508,523,486,532,547,516,508,538],
[510,504,0,513,507,515,508,515,506,498,539,528,501,506,537],
[510,510,487,0,510,499,503,507,510,492,523,533,500,497,522],
[506,503,493,490,0,489,493,515,488,523,522,521,514,505,506],
[508,494,485,501,511,0,522,509,513,514,535,539,515,530,538],
[487,478,492,497,507,478,0,502,478,487,521,528,495,483,523],
[492,492,485,493,485,491,498,0,492,504,500,501,494,498,529],
[491,477,494,490,512,487,522,508,0,494,517,535,497,500,528],
[517,514,502,508,477,486,513,496,506,0,521,519,491,498,522],
[480,468,461,477,478,465,479,500,483,479,0,507,489,484,500],
[488,453,472,467,479,461,472,499,465,481,493,0,466,462,493],
[500,484,499,500,486,485,505,506,503,509,511,534,0,497,519],
[502,492,494,503,495,470,517,502,500,502,516,538,503,0,527],
[470,462,463,478,494,462,477,471,472,478,500,507,481,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 71, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,508,510,474,523,496,514,520,506,518,519,517,550,484],
[498,0,514,520,496,551,518,499,523,518,537,544,498,527,523],
[492,486,0,518,515,541,480,505,548,513,516,551,533,535,495],
[490,480,482,0,476,521,518,485,517,467,515,503,499,514,442],
[526,504,485,524,0,550,501,547,527,523,538,541,499,526,507],
[477,449,459,479,450,0,487,508,476,478,506,488,501,493,457],
[504,482,520,482,499,513,0,506,501,467,508,518,498,526,489],
[486,501,495,515,453,492,494,0,497,462,490,500,515,506,460],
[480,477,452,483,473,524,499,503,0,482,490,519,497,484,469],
[494,482,487,533,477,522,533,538,518,0,520,515,500,530,504],
[482,463,484,485,462,494,492,510,510,480,0,480,510,486,484],
[481,456,449,497,459,512,482,500,481,485,520,0,502,485,451],
[483,502,467,501,501,499,502,485,503,500,490,498,0,533,469],
[450,473,465,486,474,507,474,494,516,470,514,515,467,0,441],
[516,477,505,558,493,543,511,540,531,496,516,549,531,559,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 72, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,505,518,472,470,495,500,434,477,528,500,481,481,478],
[509,0,525,505,480,484,489,492,427,460,552,489,502,476,454],
[495,475,0,490,458,463,518,497,431,488,534,503,499,466,491],
[482,495,510,0,490,490,511,556,460,499,554,512,519,533,503],
[528,520,542,510,0,479,525,534,507,519,581,515,536,500,493],
[530,516,537,510,521,0,485,542,486,499,529,545,492,509,475],
[505,511,482,489,475,515,0,511,455,491,505,491,507,497,479],
[500,508,503,444,466,458,489,0,462,484,534,475,512,462,462],
[566,573,569,540,493,514,545,538,0,515,596,531,536,502,524],
[523,540,512,501,481,501,509,516,485,0,543,527,484,510,470],
[472,448,466,446,419,471,495,466,404,457,0,475,463,448,450],
[500,511,497,488,485,455,509,525,469,473,525,0,507,476,480],
[519,498,501,481,464,508,493,488,464,516,537,493,0,463,470],
[519,524,534,467,500,491,503,538,498,490,552,524,537,0,459],
[522,546,509,497,507,525,521,538,476,530,550,520,530,541,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 73, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,473,460,513,451,485,489,530,489,506,484,470,486,487],
[538,0,476,475,500,489,527,505,503,509,497,482,515,490,490],
[527,524,0,517,506,527,521,508,545,520,522,475,517,471,481],
[540,525,483,0,516,486,538,535,535,525,493,517,536,485,501],
[487,500,494,484,0,513,534,528,537,500,509,497,512,496,496],
[549,511,473,514,487,0,530,498,522,517,520,500,513,483,488],
[515,473,479,462,466,470,0,509,532,477,473,465,464,476,474],
[511,495,492,465,472,502,491,0,516,522,508,505,489,480,487],
[470,497,455,465,463,478,468,484,0,469,432,441,483,463,461],
[511,491,480,475,500,483,523,478,531,0,474,476,519,486,485],
[494,503,478,507,491,480,527,492,568,526,0,478,522,511,497],
[516,518,525,483,503,500,535,495,559,524,522,0,500,509,490],
[530,485,483,464,488,487,536,511,517,481,478,500,0,483,504],
[514,510,529,515,504,517,524,520,537,514,489,491,517,0,485],
[513,510,519,499,504,512,526,513,539,515,503,510,496,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 74, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,490,497,497,466,485,496,508,496,496,476,505,497,464],
[542,0,504,525,504,504,521,518,518,517,530,523,495,533,499],
[510,496,0,531,513,475,503,524,528,498,520,501,517,519,481],
[503,475,469,0,496,479,460,498,506,502,498,477,476,510,490],
[503,496,487,504,0,507,490,513,499,500,507,495,490,509,462],
[534,496,525,521,493,0,485,504,539,523,516,509,487,508,487],
[515,479,497,540,510,515,0,554,534,519,506,512,496,521,500],
[504,482,476,502,487,496,446,0,496,478,480,462,492,512,458],
[492,482,472,494,501,461,466,504,0,502,510,474,483,506,460],
[504,483,502,498,500,477,481,522,498,0,504,494,503,506,497],
[504,470,480,502,493,484,494,520,490,496,0,473,505,490,488],
[524,477,499,523,505,491,488,538,526,506,527,0,502,514,475],
[495,505,483,524,510,513,504,508,517,497,495,498,0,505,484],
[503,467,481,490,491,492,479,488,494,494,510,486,495,0,450],
[536,501,519,510,538,513,500,542,540,503,512,525,516,550,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 75, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,481,496,524,490,437,476,472,522,508,518,456,473,513],
[507,0,460,535,495,497,437,466,508,504,528,485,498,494,531],
[519,540,0,535,552,543,467,507,528,551,538,510,493,510,560],
[504,465,465,0,467,479,442,479,462,493,470,462,465,496,512],
[476,505,448,533,0,490,453,442,489,528,460,489,478,486,502],
[510,503,457,521,510,0,458,485,478,520,468,491,448,469,523],
[563,563,533,558,547,542,0,562,557,531,539,522,479,528,543],
[524,534,493,521,558,515,438,0,499,535,532,523,487,497,546],
[528,492,472,538,511,522,443,501,0,524,498,471,501,517,504],
[478,496,449,507,472,480,469,465,476,0,468,475,467,476,474],
[492,472,462,530,540,532,461,468,502,532,0,513,441,529,548],
[482,515,490,538,511,509,478,477,529,525,487,0,501,522,507],
[544,502,507,535,522,552,521,513,499,533,559,499,0,545,565],
[527,506,490,504,514,531,472,503,483,524,471,478,455,0,525],
[487,469,440,488,498,477,457,454,496,526,452,493,435,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 76, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,496,510,568,489,545,463,498,553,478,592,476,459,491],
[510,0,510,606,561,530,519,586,573,612,422,655,528,499,576],
[504,490,0,535,558,472,534,531,521,552,499,514,528,419,529],
[490,394,465,0,561,507,544,577,476,620,486,601,450,464,536],
[432,439,442,439,0,408,486,509,485,551,437,570,432,476,537],
[511,470,528,493,592,0,492,487,492,625,470,568,463,419,550],
[455,481,466,456,514,508,0,554,465,542,429,564,399,510,511],
[537,414,469,423,491,513,446,0,430,611,402,556,458,409,494],
[502,427,479,524,515,508,535,570,0,565,516,598,508,455,565],
[447,388,448,380,449,375,458,389,435,0,359,534,426,408,478],
[522,578,501,514,563,530,571,598,484,641,0,652,541,555,602],
[408,345,486,399,430,432,436,444,402,466,348,0,418,359,457],
[524,472,472,550,568,537,601,542,492,574,459,582,0,510,557],
[541,501,581,536,524,581,490,591,545,592,445,641,490,0,591],
[509,424,471,464,463,450,489,506,435,522,398,543,443,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 77, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,478,468,502,487,497,483,494,450,487,493,473,481,494],
[524,0,490,493,525,506,508,506,526,502,519,507,498,519,480],
[522,510,0,493,519,490,505,466,520,473,504,472,486,505,490],
[532,507,507,0,539,497,518,483,510,493,514,495,506,518,495],
[498,475,481,461,0,466,492,471,477,460,502,475,470,470,483],
[513,494,510,503,534,0,540,505,529,487,524,519,489,527,498],
[503,492,495,482,508,460,0,480,505,474,503,471,472,496,485],
[517,494,534,517,529,495,520,0,521,483,537,510,509,507,504],
[506,474,480,490,523,471,495,479,0,472,502,470,476,504,495],
[550,498,527,507,540,513,526,517,528,0,532,496,496,520,511],
[513,481,496,486,498,476,497,463,498,468,0,480,469,495,467],
[507,493,528,505,525,481,529,490,530,504,520,0,496,507,499],
[527,502,514,494,530,511,528,491,524,504,531,504,0,515,530],
[519,481,495,482,530,473,504,493,496,480,505,493,485,0,490],
[506,520,510,505,517,502,515,496,505,489,533,501,470,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 78, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,479,543,447,491,486,492,493,429,513,480,441,484,463],
[532,0,513,566,482,503,497,496,489,500,548,501,537,537,470],
[521,487,0,513,514,447,515,486,506,491,538,447,527,484,478],
[457,434,487,0,428,433,505,464,516,463,524,430,485,469,442],
[553,518,486,572,0,498,524,544,506,509,581,503,557,507,515],
[509,497,553,567,502,0,537,521,526,490,564,506,570,477,536],
[514,503,485,495,476,463,0,488,472,462,578,430,496,488,498],
[508,504,514,536,456,479,512,0,546,475,577,469,494,463,450],
[507,511,494,484,494,474,528,454,0,471,537,418,478,442,501],
[571,500,509,537,491,510,538,525,529,0,612,516,588,518,511],
[487,452,462,476,419,436,422,423,463,388,0,405,460,449,453],
[520,499,553,570,497,494,570,531,582,484,595,0,515,524,529],
[559,463,473,515,443,430,504,506,522,412,540,485,0,496,487],
[516,463,516,531,493,523,512,537,558,482,551,476,504,0,502],
[537,530,522,558,485,464,502,550,499,489,547,471,513,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 79, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,549,481,514,533,495,476,488,475,511,485,509,490,485,510],
[451,0,476,449,499,476,475,471,469,507,451,503,493,473,490],
[519,524,0,491,558,510,489,504,490,522,485,504,498,492,503],
[486,551,509,0,523,498,472,487,500,537,527,500,514,507,534],
[467,501,442,477,0,456,446,470,453,509,447,491,465,467,476],
[505,524,490,502,544,0,489,499,513,521,477,509,503,502,497],
[524,525,511,528,554,511,0,530,514,518,496,516,535,523,529],
[512,529,496,513,530,501,470,0,469,528,507,537,491,510,515],
[525,531,510,500,547,487,486,531,0,531,490,539,536,510,510],
[489,493,478,463,491,479,482,472,469,0,462,525,482,503,483],
[515,549,515,473,553,523,504,493,510,538,0,551,518,548,517],
[491,497,496,500,509,491,484,463,461,475,449,0,478,480,463],
[510,507,502,486,535,497,465,509,464,518,482,522,0,509,525],
[515,527,508,493,533,498,477,490,490,497,452,520,491,0,526],
[490,510,497,466,524,503,471,485,490,517,483,537,475,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 80, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,516,498,455,484,583,426,480,442,429,404,437,435,470],
[496,0,477,489,410,414,455,415,447,457,456,472,453,523,483],
[484,523,0,470,485,461,540,430,507,446,460,434,525,496,496],
[502,511,530,0,466,473,540,454,412,449,453,519,497,485,486],
[545,590,515,534,0,501,544,500,549,473,546,482,506,524,496],
[516,586,539,527,499,0,513,504,541,498,510,441,539,515,524],
[417,545,460,460,456,487,0,424,431,380,474,434,449,437,458],
[574,585,570,546,500,496,576,0,496,514,512,500,527,550,563],
[520,553,493,588,451,459,569,504,0,484,499,487,538,556,541],
[558,543,554,551,527,502,620,486,516,0,572,496,533,587,538],
[571,544,540,547,454,490,526,488,501,428,0,483,518,529,477],
[596,528,566,481,518,559,566,500,513,504,517,0,553,591,559],
[563,547,475,503,494,461,551,473,462,467,482,447,0,492,489],
[565,477,504,515,476,485,563,450,444,413,471,409,508,0,472],
[530,517,504,514,504,476,542,437,459,462,523,441,511,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 81, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,511,461,524,477,492,508,474,506,514,498,454,468,507],
[555,0,569,505,547,526,543,541,515,552,536,540,509,496,498],
[489,431,0,455,501,467,476,483,488,478,477,499,433,491,490],
[539,495,545,0,507,493,508,504,468,513,499,506,481,502,490],
[476,453,499,493,0,472,484,466,480,507,477,510,460,513,477],
[523,474,533,507,528,0,505,531,495,531,499,545,505,499,512],
[508,457,524,492,516,495,0,481,490,508,471,498,465,465,477],
[492,459,517,496,534,469,519,0,442,526,501,524,481,516,477],
[526,485,512,532,520,505,510,558,0,535,483,536,502,509,505],
[494,448,522,487,493,469,492,474,465,0,453,496,462,499,494],
[486,464,523,501,523,501,529,499,517,547,0,519,477,521,513],
[502,460,501,494,490,455,502,476,464,504,481,0,466,454,473],
[546,491,567,519,540,495,535,519,498,538,523,534,0,506,524],
[532,504,509,498,487,501,535,484,491,501,479,546,494,0,483],
[493,502,510,510,523,488,523,523,495,506,487,527,476,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 82, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,495,516,513,523,496,524,509,538,547,509,507,512,510],
[495,0,515,499,493,508,473,493,466,499,540,486,465,517,493],
[505,485,0,495,484,502,463,492,471,527,496,496,477,524,480],
[484,501,505,0,499,503,484,494,491,495,477,492,512,493,493],
[487,507,516,501,0,505,461,503,504,513,523,494,479,490,499],
[477,492,498,497,495,0,456,489,473,539,528,488,521,493,496],
[504,527,537,516,539,544,0,536,494,552,521,549,520,512,503],
[476,507,508,506,497,511,464,0,485,490,542,509,490,499,481],
[491,534,529,509,496,527,506,515,0,537,539,520,499,523,523],
[462,501,473,505,487,461,448,510,463,0,513,467,487,484,489],
[453,460,504,523,477,472,479,458,461,487,0,492,477,506,480],
[491,514,504,508,506,512,451,491,480,533,508,0,489,487,501],
[493,535,523,488,521,479,480,510,501,513,523,511,0,501,497],
[488,483,476,507,510,507,488,501,477,516,494,513,499,0,486],
[490,507,520,507,501,504,497,519,477,511,520,499,503,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 83, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,493,511,481,497,503,523,515,492,488,480,543,481,518],
[492,0,473,477,470,481,475,508,499,507,503,493,496,492,492],
[507,527,0,494,505,514,514,523,514,522,524,509,535,508,550],
[489,523,506,0,497,494,503,547,517,507,504,501,524,509,526],
[519,530,495,503,0,503,487,525,527,501,500,506,520,504,516],
[503,519,486,506,497,0,499,527,525,531,501,516,521,483,511],
[497,525,486,497,513,501,0,515,522,510,498,517,520,505,538],
[477,492,477,453,475,473,485,0,486,493,493,468,492,459,494],
[485,501,486,483,473,475,478,514,0,490,491,495,532,482,498],
[508,493,478,493,499,469,490,507,510,0,475,471,512,474,491],
[512,497,476,496,500,499,502,507,509,525,0,480,512,488,519],
[520,507,491,499,494,484,483,532,505,529,520,0,536,482,512],
[457,504,465,476,480,479,480,508,468,488,488,464,0,480,482],
[519,508,492,491,496,517,495,541,518,526,512,518,520,0,514],
[482,508,450,474,484,489,462,506,502,509,481,488,518,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 84, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,481,492,492,509,519,544,507,483,527,498,520,545,529],
[528,0,482,480,507,528,519,547,513,506,524,515,522,552,498],
[519,518,0,523,518,540,503,547,517,499,537,477,525,566,539],
[508,520,477,0,507,528,479,526,517,487,491,496,542,533,488],
[508,493,482,493,0,508,485,512,505,519,507,493,529,519,477],
[491,472,460,472,492,0,468,522,491,416,500,486,493,505,477],
[481,481,497,521,515,532,0,521,489,502,528,536,550,562,471],
[456,453,453,474,488,478,479,0,473,472,469,468,485,515,480],
[493,487,483,483,495,509,511,527,0,499,506,484,505,527,481],
[517,494,501,513,481,584,498,528,501,0,535,503,500,547,512],
[473,476,463,509,493,500,472,531,494,465,0,471,505,517,475],
[502,485,523,504,507,514,464,532,516,497,529,0,519,521,523],
[480,478,475,458,471,507,450,515,495,500,495,481,0,549,501],
[455,448,434,467,481,495,438,485,473,453,483,479,451,0,484],
[471,502,461,512,523,523,529,520,519,488,525,477,499,516,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 85, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,524,547,492,507,525,507,530,506,491,491,495,542,478,504],
[476,0,506,467,488,493,470,501,462,486,479,472,482,465,532],
[453,494,0,460,464,508,511,500,477,496,499,480,492,456,484],
[508,533,540,0,505,542,516,517,523,498,501,490,504,483,526],
[493,512,536,495,0,501,520,519,498,509,515,527,547,485,512],
[475,507,492,458,499,0,498,493,464,499,513,462,483,456,530],
[493,530,489,484,480,502,0,503,456,488,488,505,488,453,512],
[470,499,500,483,481,507,497,0,471,493,482,460,504,482,522],
[494,538,523,477,502,536,544,529,0,491,511,491,516,499,505],
[509,514,504,502,491,501,512,507,509,0,510,481,504,515,546],
[509,521,501,499,485,487,512,518,489,490,0,494,537,516,513],
[505,528,520,510,473,538,495,540,509,519,506,0,500,498,563],
[458,518,508,496,453,517,512,496,484,496,463,500,0,464,538],
[522,535,544,517,515,544,547,518,501,485,484,502,536,0,542],
[496,468,516,474,488,470,488,478,495,454,487,437,462,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 86, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,496,525,499,521,511,491,525,485,487,492,484,520,501],
[495,0,489,528,524,530,528,496,530,469,521,502,522,517,540],
[504,511,0,513,497,504,505,508,519,503,495,492,510,514,527],
[475,472,487,0,471,496,491,452,497,459,454,468,483,495,466],
[501,476,503,529,0,526,496,483,496,494,510,488,487,511,511],
[479,470,496,504,474,0,473,453,500,460,482,482,459,482,487],
[489,472,495,509,504,527,0,482,520,498,500,487,472,493,488],
[509,504,492,548,517,547,518,0,520,516,509,542,514,517,504],
[475,470,481,503,504,500,480,480,0,454,476,459,475,485,494],
[515,531,497,541,506,540,502,484,546,0,508,512,507,505,505],
[513,479,505,546,490,518,500,491,524,492,0,478,504,516,502],
[508,498,508,532,512,518,513,458,541,488,522,0,485,521,516],
[516,478,490,517,513,541,528,486,525,493,496,515,0,502,534],
[480,483,486,505,489,518,507,483,515,495,484,479,498,0,504],
[499,460,473,534,489,513,512,496,506,495,498,484,466,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 87, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,500,508,528,525,501,509,502,496,500,535,474,520,509],
[501,0,515,517,506,494,532,507,511,519,493,527,515,516,495],
[500,485,0,504,511,509,531,496,503,517,495,534,480,525,523],
[492,483,496,0,524,481,485,492,477,499,483,524,478,500,490],
[472,494,489,476,0,477,488,464,468,486,480,528,488,510,490],
[475,506,491,519,523,0,489,502,478,489,517,526,505,508,508],
[499,468,469,515,512,511,0,489,499,507,481,514,476,506,521],
[491,493,504,508,536,498,511,0,504,519,514,555,491,515,511],
[498,489,497,523,532,522,501,496,0,507,497,553,493,541,510],
[504,481,483,501,514,511,493,481,493,0,494,525,480,502,509],
[500,507,505,517,520,483,519,486,503,506,0,530,492,524,517],
[465,473,466,476,472,474,486,445,447,475,470,0,473,493,484],
[526,485,520,522,512,495,524,509,507,520,508,527,0,527,516],
[480,484,475,500,490,492,494,485,459,498,476,507,473,0,480],
[491,505,477,510,510,492,479,489,490,491,483,516,484,520,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 88, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,479,507,509,513,460,492,525,485,500,515,487,510,476],
[508,0,461,484,489,499,451,496,493,466,497,494,481,501,508],
[521,539,0,522,525,514,491,540,529,498,529,540,520,515,523],
[493,516,478,0,505,520,468,489,506,471,516,497,473,473,503],
[491,511,475,495,0,476,504,494,491,493,499,505,465,486,484],
[487,501,486,480,524,0,495,507,507,469,509,496,468,490,456],
[540,549,509,532,496,505,0,515,533,505,519,521,505,522,510],
[508,504,460,511,506,493,485,0,500,496,469,504,494,498,488],
[475,507,471,494,509,493,467,500,0,495,494,505,488,494,488],
[515,534,502,529,507,531,495,504,505,0,515,505,499,514,483],
[500,503,471,484,501,491,481,531,506,485,0,523,472,489,495],
[485,506,460,503,495,504,479,496,495,495,477,0,467,478,492],
[513,519,480,527,535,532,495,506,512,501,528,533,0,512,500],
[490,499,485,527,514,510,478,502,506,486,511,522,488,0,512],
[524,492,477,497,516,544,490,512,512,517,505,508,500,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 89, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,487,452,506,510,485,472,466,511,494,530,501,522,476],
[528,0,503,494,512,519,500,514,463,522,507,535,492,502,478],
[513,497,0,491,507,536,481,483,483,505,511,525,491,525,459],
[548,506,509,0,513,537,511,513,466,530,530,510,507,515,499],
[494,488,493,487,0,513,473,470,457,498,504,484,478,497,490],
[490,481,464,463,487,0,477,452,453,474,475,467,471,489,459],
[515,500,519,489,527,523,0,487,478,498,514,519,501,532,513],
[528,486,517,487,530,548,513,0,495,521,504,534,519,533,495],
[534,537,517,534,543,547,522,505,0,529,515,547,498,548,478],
[489,478,495,470,502,526,502,479,471,0,509,494,483,511,482],
[506,493,489,470,496,525,486,496,485,491,0,539,481,512,493],
[470,465,475,490,516,533,481,466,453,506,461,0,478,510,463],
[499,508,509,493,522,529,499,481,502,517,519,522,0,527,500],
[478,498,475,485,503,511,468,467,452,489,488,490,473,0,477],
[524,522,541,501,510,541,487,505,522,518,507,537,500,523,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 90, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,527,447,489,535,460,515,456,494,402,539,463,488,453,507],
[473,0,531,432,572,516,507,472,519,444,554,451,563,450,502],
[553,469,0,510,590,492,580,477,524,511,587,461,543,451,567],
[511,568,490,0,629,549,564,497,541,428,596,503,518,537,553],
[465,428,410,371,0,419,492,474,428,424,473,431,479,410,492],
[540,484,508,451,581,0,614,488,560,550,612,505,566,485,556],
[485,493,420,436,508,386,0,472,461,367,493,459,462,429,436],
[544,528,523,503,526,512,528,0,547,471,636,578,564,525,560],
[506,481,476,459,572,440,539,453,0,449,566,456,528,472,490],
[598,556,489,572,576,450,633,529,551,0,613,554,564,487,602],
[461,446,413,404,527,388,507,364,434,387,0,445,453,424,470],
[537,549,539,497,569,495,541,422,544,446,555,0,565,511,503],
[512,437,457,482,521,434,538,436,472,436,547,435,0,446,535],
[547,550,549,463,590,515,571,475,528,513,576,489,554,0,578],
[493,498,433,447,508,444,564,440,510,398,530,497,465,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 91, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,513,528,530,527,542,466,496,538,510,522,510,497,482,517],
[487,0,530,508,514,512,457,473,502,489,520,494,497,477,496],
[472,470,0,476,504,500,481,468,507,486,486,511,506,495,497],
[470,492,524,0,525,493,463,488,502,465,495,477,471,482,493],
[473,486,496,475,0,511,440,465,507,467,511,491,475,478,476],
[458,488,500,507,489,0,472,478,514,488,488,493,499,483,496],
[534,543,519,537,560,528,0,502,536,515,541,526,515,499,524],
[504,527,532,512,535,522,498,0,520,498,527,505,500,493,518],
[462,498,493,498,493,486,464,480,0,484,473,470,477,479,500],
[490,511,514,535,533,512,485,502,516,0,517,505,506,488,499],
[478,480,514,505,489,512,459,473,527,483,0,501,489,493,480],
[490,506,489,523,509,507,474,495,530,495,499,0,517,491,515],
[503,503,494,529,525,501,485,500,523,494,511,483,0,466,506],
[518,523,505,518,522,517,501,507,521,512,507,509,534,0,492],
[483,504,503,507,524,504,476,482,500,501,520,485,494,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 92, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,513,486,474,504,464,557,464,519,544,535,478,534,460,460],
[487,0,493,468,500,510,508,446,445,498,461,512,516,469,452],
[514,507,0,529,524,542,538,499,519,595,498,480,561,471,474],
[526,532,471,0,564,501,523,506,461,612,512,518,549,493,502],
[496,500,476,436,0,476,540,483,471,526,476,467,517,424,422],
[536,490,458,499,524,0,520,491,494,550,540,516,534,478,476],
[443,492,462,477,460,480,0,449,473,525,458,486,521,431,413],
[536,554,501,494,517,509,551,0,525,586,508,539,578,507,500],
[481,555,481,539,529,506,527,475,0,573,507,524,513,452,457],
[456,502,405,388,474,450,475,414,427,0,472,439,503,404,415],
[465,539,502,488,524,460,542,492,493,528,0,509,504,441,463],
[522,488,520,482,533,484,514,461,476,561,491,0,488,470,467],
[466,484,439,451,483,466,479,422,487,497,496,512,0,422,414],
[540,531,529,507,576,522,569,493,548,596,559,530,578,0,478],
[540,548,526,498,578,524,587,500,543,585,537,533,586,522,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 93, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,504,486,487,503,511,479,511,472,473,448,461,527,487],
[502,0,515,494,517,513,520,514,528,508,477,463,515,522,522],
[496,485,0,466,492,507,530,483,493,482,461,420,463,516,509],
[514,506,534,0,535,513,540,502,545,496,506,480,479,531,514],
[513,483,508,465,0,487,491,475,515,465,486,418,452,518,502],
[497,487,493,487,513,0,527,472,470,500,489,437,449,503,477],
[489,480,470,460,509,473,0,494,521,452,471,444,453,508,488],
[521,486,517,498,525,528,506,0,513,479,504,460,498,542,503],
[489,472,507,455,485,530,479,487,0,459,453,432,456,515,501],
[528,492,518,504,535,500,548,521,541,0,530,491,511,539,527],
[527,523,539,494,514,511,529,496,547,470,0,485,497,526,495],
[552,537,580,520,582,563,556,540,568,509,515,0,500,552,536],
[539,485,537,521,548,551,547,502,544,489,503,500,0,554,543],
[473,478,484,469,482,497,492,458,485,461,474,448,446,0,467],
[513,478,491,486,498,523,512,497,499,473,505,464,457,533,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 94, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,492,433,523,559,579,479,533,523,453,554,553,319,539],
[578,0,591,477,484,559,560,542,440,564,516,540,433,305,562],
[508,409,0,395,471,482,540,342,520,525,372,542,353,351,439],
[567,523,605,0,432,555,604,393,629,555,565,659,585,365,603],
[477,516,529,568,0,524,575,587,482,623,495,453,569,433,591],
[441,441,518,445,476,0,545,368,409,429,354,524,458,382,565],
[421,440,460,396,425,455,0,353,482,456,492,423,433,322,491],
[521,458,658,607,413,632,647,0,558,676,621,665,605,522,580],
[467,560,480,371,518,591,518,442,0,403,453,621,464,301,615],
[477,436,475,445,377,571,544,324,597,0,450,571,508,229,453],
[547,484,628,435,505,646,508,379,547,550,0,552,478,361,545],
[446,460,458,341,547,476,577,335,379,429,448,0,428,202,499],
[447,567,647,415,431,542,567,395,536,492,522,572,0,399,605],
[681,695,649,635,567,618,678,478,699,771,639,798,601,0,623],
[461,438,561,397,409,435,509,420,385,547,455,501,395,377,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 95, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,563,515,493,483,554,496,542,529,514,503,495,486,453],
[559,0,518,479,450,473,547,467,495,473,530,533,466,522,436],
[437,482,0,433,417,481,520,444,485,463,420,458,475,444,449],
[485,521,567,0,482,513,556,506,521,519,563,544,532,532,497],
[507,550,583,518,0,500,532,469,606,521,524,490,505,555,464],
[517,527,519,487,500,0,554,478,547,492,496,527,486,516,499],
[446,453,480,444,468,446,0,481,474,515,449,449,470,497,447],
[504,533,556,494,531,522,519,0,578,531,503,504,522,514,503],
[458,505,515,479,394,453,526,422,0,492,489,454,490,502,450],
[471,527,537,481,479,508,485,469,508,0,484,453,478,517,453],
[486,470,580,437,476,504,551,497,511,516,0,500,497,504,492],
[497,467,542,456,510,473,551,496,546,547,500,0,484,542,471],
[505,534,525,468,495,514,530,478,510,522,503,516,0,520,472],
[514,478,556,468,445,484,503,486,498,483,496,458,480,0,461],
[547,564,551,503,536,501,553,497,550,547,508,529,528,539,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 96, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,508,532,513,499,494,524,498,514,498,497,486,505,489],
[482,0,510,493,485,478,481,502,471,477,476,477,476,480,474],
[492,490,0,513,500,488,485,518,487,488,482,472,452,477,467],
[468,507,487,0,496,498,476,510,506,482,488,483,480,477,485],
[487,515,500,504,0,479,488,527,492,485,471,474,498,493,481],
[501,522,512,502,521,0,508,534,501,498,478,494,497,500,495],
[506,519,515,524,512,492,0,516,481,487,504,497,475,518,469],
[476,498,482,490,473,466,484,0,458,467,473,458,449,456,461],
[502,529,513,494,508,499,519,542,0,492,496,505,491,504,488],
[486,523,512,518,515,502,513,533,508,0,494,479,498,528,480],
[502,524,518,512,529,522,496,527,504,506,0,507,505,508,513],
[503,523,528,517,526,506,503,542,495,521,493,0,473,535,485],
[514,524,548,520,502,503,525,551,509,502,495,527,0,523,511],
[495,520,523,523,507,500,482,544,496,472,492,465,477,0,480],
[511,526,533,515,519,505,531,539,512,520,487,515,489,520,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 97, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,377,421,420,435,412,450,433,472,436,478,499,422,443],
[551,0,468,451,458,461,423,461,484,499,484,483,509,438,479],
[623,532,0,554,530,555,539,549,506,510,528,493,562,503,570],
[579,549,446,0,472,511,442,497,475,521,523,530,568,489,526],
[580,542,470,528,0,504,519,531,490,537,513,496,570,514,520],
[565,539,445,489,496,0,469,484,460,501,472,496,539,443,478],
[588,577,461,558,481,531,0,505,513,546,490,529,604,487,490],
[550,539,451,503,469,516,495,0,511,491,537,517,514,421,495],
[567,516,494,525,510,540,487,489,0,538,544,576,575,505,520],
[528,501,490,479,463,499,454,509,462,0,481,502,528,479,455],
[564,516,472,477,487,528,510,463,456,519,0,568,575,479,499],
[522,517,507,470,504,504,471,483,424,498,432,0,503,477,495],
[501,491,438,432,430,461,396,486,425,472,425,497,0,439,507],
[578,562,497,511,486,557,513,579,495,521,521,523,561,0,547],
[557,521,430,474,480,522,510,505,480,545,501,505,493,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 98, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,535,526,542,519,508,539,480,529,497,534,520,511,552],
[494,0,558,522,541,524,503,521,493,483,501,529,515,483,539],
[465,442,0,498,523,486,464,485,479,456,419,513,476,454,506],
[474,478,502,0,526,483,489,509,496,496,472,536,474,471,507],
[458,459,477,474,0,463,459,463,468,470,445,497,459,475,482],
[481,476,514,517,537,0,503,521,493,512,484,528,492,512,510],
[492,497,536,511,541,497,0,499,515,490,484,511,493,528,518],
[461,479,515,491,537,479,501,0,497,487,468,502,481,471,516],
[520,507,521,504,532,507,485,503,0,504,490,516,510,488,561],
[471,517,544,504,530,488,510,513,496,0,447,516,498,509,516],
[503,499,581,528,555,516,516,532,510,553,0,547,517,533,526],
[466,471,487,464,503,472,489,498,484,484,453,0,476,493,478],
[480,485,524,526,541,508,507,519,490,502,483,524,0,509,498],
[489,517,546,529,525,488,472,529,512,491,467,507,491,0,521],
[448,461,494,493,518,490,482,484,439,484,474,522,502,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 99, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,535,512,519,501,498,506,577,506,492,546,526,486,500,523],
[465,0,479,463,485,455,446,504,469,436,503,495,469,477,483],
[488,521,0,515,485,513,450,532,543,519,519,546,516,526,515],
[481,537,485,0,458,530,481,592,537,462,510,506,517,511,522],
[499,515,515,542,0,532,465,575,525,484,529,526,519,533,549],
[502,545,487,470,468,0,512,545,516,484,487,536,482,503,543],
[494,554,550,519,535,488,0,583,533,505,537,535,463,494,541],
[423,496,468,408,425,455,417,0,459,417,469,488,437,426,513],
[494,531,457,463,475,484,467,541,0,468,527,496,484,478,500],
[508,564,481,538,516,516,495,583,532,0,521,528,468,534,548],
[454,497,481,490,471,513,463,531,473,479,0,513,475,489,510],
[474,505,454,494,474,464,465,512,504,472,487,0,457,499,521],
[514,531,484,483,481,518,537,563,516,532,525,543,0,509,523],
[500,523,474,489,467,497,506,574,522,466,511,501,491,0,503],
[477,517,485,478,451,457,459,487,500,452,490,479,477,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 100, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,507,523,495,484,503,498,489,463,495,452,455,469,490],
[554,0,525,550,534,504,522,553,536,530,536,501,469,505,511],
[493,475,0,514,505,506,492,507,484,459,480,490,445,445,479],
[477,450,486,0,528,492,504,488,478,466,499,488,454,468,481],
[505,466,495,472,0,492,484,479,486,468,529,478,448,489,485],
[516,496,494,508,508,0,478,522,520,452,526,502,444,476,523],
[497,478,508,496,516,522,0,515,500,482,511,481,453,467,494],
[502,447,493,512,521,478,485,0,510,455,526,484,450,474,482],
[511,464,516,522,514,480,500,490,0,464,509,505,470,482,498],
[537,470,541,534,532,548,518,545,536,0,540,519,500,482,526],
[505,464,520,501,471,474,489,474,491,460,0,481,472,438,464],
[548,499,510,512,522,498,519,516,495,481,519,0,476,482,514],
[545,531,555,546,552,556,547,550,530,500,528,524,0,506,546],
[531,495,555,532,511,524,533,526,518,518,562,518,494,0,489],
[510,489,521,519,515,477,506,518,502,474,536,486,454,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 101, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,539,514,507,509,500,539,514,525,540,530,510,508,503,500],
[461,0,499,465,475,501,503,484,480,491,489,519,472,459,479],
[486,501,0,477,483,523,477,497,499,524,506,492,512,489,485],
[493,535,523,0,488,539,532,516,524,520,532,532,524,521,460],
[491,525,517,512,0,526,507,517,531,531,562,549,501,505,501],
[500,499,477,461,474,0,472,475,488,502,499,488,506,463,456],
[461,497,523,468,493,528,0,511,508,504,526,503,488,472,473],
[486,516,503,484,483,525,489,0,497,519,531,516,495,507,473],
[475,520,501,476,469,512,492,503,0,514,507,489,507,457,460],
[460,509,476,480,469,498,496,481,486,0,478,496,486,458,465],
[470,511,494,468,438,501,474,469,493,522,0,477,481,490,473],
[490,481,508,468,451,512,497,484,511,504,523,0,478,489,467],
[492,528,488,476,499,494,512,505,493,514,519,522,0,508,466],
[497,541,511,479,495,537,528,493,543,542,510,511,492,0,489],
[500,521,515,540,499,544,527,527,540,535,527,533,534,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 102, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,496,485,519,535,512,519,476,527,530,560,494,532,493],
[504,0,491,497,499,492,502,498,509,559,527,545,492,580,503],
[504,509,0,478,477,538,486,483,507,552,486,545,512,546,502],
[515,503,522,0,514,517,483,514,501,513,520,542,496,554,484],
[481,501,523,486,0,486,522,489,516,506,502,539,506,562,496],
[465,508,462,483,514,0,498,494,496,507,491,508,526,584,460],
[488,498,514,517,478,502,0,506,506,537,520,515,580,550,530],
[481,502,517,486,511,506,494,0,497,512,503,530,515,542,505],
[524,491,493,499,484,504,494,503,0,500,507,512,512,572,500],
[473,441,448,487,494,493,463,488,500,0,478,493,525,535,495],
[470,473,514,480,498,509,480,497,493,522,0,507,494,585,480],
[440,455,455,458,461,492,485,470,488,507,493,0,468,520,480],
[506,508,488,504,494,474,420,485,488,475,506,532,0,553,503],
[468,420,454,446,438,416,450,458,428,465,415,480,447,0,467],
[507,497,498,516,504,540,470,495,500,505,520,520,497,533,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 103, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,476,502,485,455,497,512,479,510,509,472,479,505,458],
[530,0,514,506,516,454,508,501,496,529,475,499,518,535,483],
[524,486,0,524,487,490,477,484,519,513,535,508,509,552,496],
[498,494,476,0,475,457,519,509,497,509,489,492,516,490,467],
[515,484,513,525,0,490,476,513,495,515,497,513,493,537,503],
[545,546,510,543,510,0,527,498,496,546,517,534,508,543,521],
[503,492,523,481,524,473,0,502,520,505,475,517,524,538,497],
[488,499,516,491,487,502,498,0,485,526,494,511,516,507,490],
[521,504,481,503,505,504,480,515,0,529,501,484,524,527,486],
[490,471,487,491,485,454,495,474,471,0,481,480,478,505,451],
[491,525,465,511,503,483,525,506,499,519,0,499,504,540,508],
[528,501,492,508,487,466,483,489,516,520,501,0,471,535,480],
[521,482,491,484,507,492,476,484,476,522,496,529,0,530,505],
[495,465,448,510,463,457,462,493,473,495,460,465,470,0,481],
[542,517,504,533,497,479,503,510,514,549,492,520,495,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 104, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,505,496,500,514,513,498,494,509,534,539,511,512,535],
[496,0,519,519,524,504,522,509,517,518,531,529,510,520,519],
[495,481,0,482,508,485,491,488,480,495,497,499,503,514,515],
[504,481,518,0,517,504,492,494,494,506,517,512,509,516,513],
[500,476,492,483,0,512,499,483,470,486,517,518,501,491,498],
[486,496,515,496,488,0,503,500,481,499,509,528,500,513,505],
[487,478,509,508,501,497,0,476,479,506,505,500,512,500,502],
[502,491,512,506,517,500,524,0,499,517,517,544,516,530,517],
[506,483,520,506,530,519,521,501,0,524,511,526,541,518,527],
[491,482,505,494,514,501,494,483,476,0,506,523,504,512,500],
[466,469,503,483,483,491,495,483,489,494,0,489,511,509,495],
[461,471,501,488,482,472,500,456,474,477,511,0,489,487,484],
[489,490,497,491,499,500,488,484,459,496,489,511,0,503,483],
[488,480,486,484,509,487,500,470,482,488,491,513,497,0,499],
[465,481,485,487,502,495,498,483,473,500,505,516,517,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 105, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,442,476,471,489,480,497,486,494,466,459,470,466,475],
[538,0,482,518,499,507,498,519,529,518,510,520,510,497,511],
[558,518,0,516,505,503,529,537,487,528,528,515,514,497,516],
[524,482,484,0,508,511,534,520,494,516,497,526,508,516,512],
[529,501,495,492,0,504,515,513,495,517,519,498,494,484,510],
[511,493,497,489,496,0,517,523,483,501,490,504,483,484,499],
[520,502,471,466,485,483,0,513,474,504,504,483,474,483,505],
[503,481,463,480,487,477,487,0,499,506,485,497,487,478,495],
[514,471,513,506,505,517,526,501,0,510,505,509,507,504,522],
[506,482,472,484,483,499,496,494,490,0,494,480,477,486,534],
[534,490,472,503,481,510,496,515,495,506,0,523,497,488,503],
[541,480,485,474,502,496,517,503,491,520,477,0,470,478,497],
[530,490,486,492,506,517,526,513,493,523,503,530,0,498,520],
[534,503,503,484,516,516,517,522,496,514,512,522,502,0,510],
[525,489,484,488,490,501,495,505,478,466,497,503,480,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 106, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,531,537,440,504,525,446,595,443,437,489,580,577,569],
[578,0,568,674,438,524,609,525,546,491,504,605,555,580,567],
[469,432,0,544,394,513,444,502,488,458,427,516,566,459,494],
[463,326,456,0,402,422,465,389,421,379,399,468,520,457,446],
[560,562,606,598,0,559,590,483,554,551,570,515,656,564,576],
[496,476,487,578,441,0,515,455,511,458,411,554,532,454,572],
[475,391,556,535,410,485,0,470,505,422,414,489,522,518,480],
[554,475,498,611,517,545,530,0,527,534,499,517,601,535,446],
[405,454,512,579,446,489,495,473,0,456,421,557,513,495,497],
[557,509,542,621,449,542,578,466,544,0,508,564,552,568,590],
[563,496,573,601,430,589,586,501,579,492,0,539,592,495,551],
[511,395,484,532,485,446,511,483,443,436,461,0,535,472,501],
[420,445,434,480,344,468,478,399,487,448,408,465,0,428,479],
[423,420,541,543,436,546,482,465,505,432,505,528,572,0,510],
[431,433,506,554,424,428,520,554,503,410,449,499,521,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 107, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,455,508,485,501,501,495,492,490,488,509,506,502,489],
[513,0,490,533,506,527,508,501,503,475,517,495,523,512,516],
[545,510,0,546,510,529,526,522,520,479,528,522,531,526,511],
[492,467,454,0,488,502,492,489,499,462,491,477,467,477,489],
[515,494,490,512,0,527,491,495,497,484,506,499,519,502,518],
[499,473,471,498,473,0,492,484,483,466,492,482,495,484,477],
[499,492,474,508,509,508,0,512,504,490,491,501,512,496,493],
[505,499,478,511,505,516,488,0,513,478,492,503,487,499,470],
[508,497,480,501,503,517,496,487,0,472,488,489,500,485,492],
[510,525,521,538,516,534,510,522,528,0,531,492,528,523,532],
[512,483,472,509,494,508,509,508,512,469,0,504,526,496,503],
[491,505,478,523,501,518,499,497,511,508,496,0,501,493,519],
[494,477,469,533,481,505,488,513,500,472,474,499,0,485,503],
[498,488,474,523,498,516,504,501,515,477,504,507,515,0,500],
[511,484,489,511,482,523,507,530,508,468,497,481,497,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 108, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,523,509,493,464,514,503,518,489,560,446,445,484,527,464],
[477,0,555,485,548,585,463,570,519,599,513,503,498,552,438],
[491,445,0,425,522,456,458,526,427,492,443,511,520,509,449],
[507,515,575,0,576,562,466,528,554,553,530,561,605,495,516],
[536,452,478,424,0,456,439,446,422,527,485,453,465,507,414],
[486,415,544,438,544,0,414,471,472,519,473,480,545,533,397],
[497,537,542,534,561,586,0,514,508,532,478,513,566,577,492],
[482,430,474,472,554,529,486,0,455,486,440,463,490,477,426],
[511,481,573,446,578,528,492,545,0,484,463,535,586,505,494],
[440,401,508,447,473,481,468,514,516,0,450,507,511,439,466],
[554,487,557,470,515,527,522,560,537,550,0,505,569,545,478],
[555,497,489,439,547,520,487,537,465,493,495,0,499,500,427],
[516,502,480,395,535,455,434,510,414,489,431,501,0,483,470],
[473,448,491,505,493,467,423,523,495,561,455,500,517,0,463],
[536,562,551,484,586,603,508,574,506,534,522,573,530,537,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 109, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,534,523,527,528,493,532,501,516,524,497,513,481,512,514],
[466,0,474,503,496,494,496,489,508,497,487,511,475,482,501],
[477,526,0,501,503,497,483,495,498,504,498,521,469,503,511],
[473,497,499,0,474,435,466,482,472,486,486,492,424,500,508],
[472,504,497,526,0,489,513,509,501,515,521,509,486,485,529],
[507,506,503,565,511,0,507,500,482,542,526,533,486,518,556],
[468,504,517,534,487,493,0,494,516,511,518,518,488,484,527],
[499,511,505,518,491,500,506,0,518,510,497,511,504,517,524],
[484,492,502,528,499,518,484,482,0,520,488,490,473,504,510],
[476,503,496,514,485,458,489,490,480,0,510,494,500,490,515],
[503,513,502,514,479,474,482,503,512,490,0,486,481,491,529],
[487,489,479,508,491,467,482,489,510,506,514,0,453,483,524],
[519,525,531,576,514,514,512,496,527,500,519,547,0,511,528],
[488,518,497,500,515,482,516,483,496,510,509,517,489,0,503],
[486,499,489,492,471,444,473,476,490,485,471,476,472,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 110, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,485,446,505,495,490,492,481,485,525,443,530,471,488],
[579,0,559,531,558,565,551,521,495,573,593,545,568,536,570],
[515,441,0,473,477,535,536,509,487,514,533,457,517,437,502],
[554,469,527,0,555,534,531,498,478,533,564,497,538,499,526],
[495,442,523,445,0,502,500,490,474,545,563,483,465,451,503],
[505,435,465,466,498,0,505,492,493,493,507,451,506,490,500],
[510,449,464,469,500,495,0,475,455,483,522,447,485,489,530],
[508,479,491,502,510,508,525,0,470,513,560,464,517,469,525],
[519,505,513,522,526,507,545,530,0,510,590,502,513,498,533],
[515,427,486,467,455,507,517,487,490,0,547,485,529,483,502],
[475,407,467,436,437,493,478,440,410,453,0,452,492,429,459],
[557,455,543,503,517,549,553,536,498,515,548,0,509,529,565],
[470,432,483,462,535,494,515,483,487,471,508,491,0,509,499],
[529,464,563,501,549,510,511,531,502,517,571,471,491,0,522],
[512,430,498,474,497,500,470,475,467,498,541,435,501,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 111, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,522,495,503,495,487,516,473,497,505,519,513,528,466,511],
[478,0,488,477,481,498,497,485,473,475,498,491,525,458,486],
[505,512,0,526,521,517,532,487,523,528,500,506,535,503,488],
[497,523,474,0,504,493,493,476,497,518,511,512,539,497,503],
[505,519,479,496,0,492,517,480,500,502,506,514,533,494,488],
[513,502,483,507,508,0,509,497,515,526,508,514,535,475,500],
[484,503,468,507,483,491,0,449,496,488,499,489,512,467,464],
[527,515,513,524,520,503,551,0,513,528,517,506,547,495,507],
[503,527,477,503,500,485,504,487,0,504,504,516,511,467,463],
[495,525,472,482,498,474,512,472,496,0,500,491,532,492,480],
[481,502,500,489,494,492,501,483,496,500,0,491,513,478,476],
[487,509,494,488,486,486,511,494,484,509,509,0,493,483,465],
[472,475,465,461,467,465,488,453,489,468,487,507,0,476,463],
[534,542,497,503,506,525,533,505,533,508,522,517,524,0,504],
[489,514,512,497,512,500,536,493,537,520,524,535,537,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 112, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,582,524,541,646,493,633,560,560,560,602,577,511,407,709],
[418,0,490,551,557,456,430,648,565,448,541,473,552,383,549],
[476,510,0,432,688,403,578,598,635,554,654,515,476,431,533],
[459,449,568,0,809,469,539,556,592,568,678,545,528,509,645],
[354,443,312,191,0,341,462,416,398,370,387,482,382,395,494],
[507,544,597,531,659,0,606,604,646,569,504,617,576,402,546],
[367,570,422,461,538,394,0,565,503,427,532,418,570,349,584],
[440,352,402,444,584,396,435,0,605,412,511,391,577,429,498],
[440,435,365,408,602,354,497,395,0,417,504,414,445,293,504],
[440,552,446,432,630,431,573,588,583,0,494,519,530,396,555],
[398,459,346,322,613,496,468,489,496,506,0,500,490,445,486],
[423,527,485,455,518,383,582,609,586,481,500,0,472,334,513],
[489,448,524,472,618,424,430,423,555,470,510,528,0,457,638],
[593,617,569,491,605,598,651,571,707,604,555,666,543,0,599],
[291,451,467,355,506,454,416,502,496,445,514,487,362,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 113, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,535,546,563,539,504,496,510,483,494,462,486,445,484,485],
[465,0,501,522,531,478,502,510,491,499,498,506,466,500,448],
[454,499,0,492,498,445,472,487,461,497,482,512,470,477,446],
[437,478,508,0,476,483,458,430,444,462,467,444,451,494,455],
[461,469,502,524,0,484,464,480,482,459,496,483,450,492,447],
[496,522,555,517,516,0,485,489,488,500,522,512,497,499,481],
[504,498,528,542,536,515,0,490,500,489,535,530,483,513,453],
[490,490,513,570,520,511,510,0,475,498,495,489,487,532,430],
[517,509,539,556,518,512,500,525,0,489,491,524,479,513,492],
[506,501,503,538,541,500,511,502,511,0,515,494,500,501,519],
[538,502,518,533,504,478,465,505,509,485,0,526,496,529,444],
[514,494,488,556,517,488,470,511,476,506,474,0,493,514,490],
[555,534,530,549,550,503,517,513,521,500,504,507,0,523,465],
[516,500,523,506,508,501,487,468,487,499,471,486,477,0,482],
[515,552,554,545,553,519,547,570,508,481,556,510,535,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 114, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,483,473,474,474,494,461,470,464,497,470,505,462,486],
[521,0,491,500,514,485,488,489,493,497,520,491,511,486,499],
[517,509,0,500,501,497,509,508,527,516,520,501,505,480,506],
[527,500,500,0,502,496,514,485,516,493,518,478,511,507,512],
[526,486,499,498,0,483,513,484,508,498,488,492,502,499,487],
[526,515,503,504,517,0,502,500,508,491,508,517,502,498,517],
[506,512,491,486,487,498,0,472,494,469,498,504,511,498,494],
[539,511,492,515,516,500,528,0,521,497,534,508,529,515,519],
[530,507,473,484,492,492,506,479,0,506,501,496,514,474,504],
[536,503,484,507,502,509,531,503,494,0,519,495,508,512,512],
[503,480,480,482,512,492,502,466,499,481,0,493,484,475,497],
[530,509,499,522,508,483,496,492,504,505,507,0,480,501,504],
[495,489,495,489,498,498,489,471,486,492,516,520,0,483,502],
[538,514,520,493,501,502,502,485,526,488,525,499,517,0,519],
[514,501,494,488,513,483,506,481,496,488,503,496,498,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 115, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,512,497,515,486,510,470,488,515,466,489,530,499,452],
[520,0,510,520,516,499,521,501,480,505,498,507,511,499,476],
[488,490,0,469,537,494,513,484,469,501,474,495,487,485,479],
[503,480,531,0,531,490,520,486,481,511,500,493,504,485,485],
[485,484,463,469,0,478,487,446,468,485,453,488,490,470,473],
[514,501,506,510,522,0,484,495,500,515,471,500,512,490,492],
[490,479,487,480,513,516,0,463,458,496,448,468,471,486,485],
[530,499,516,514,554,505,537,0,500,517,507,519,528,530,488],
[512,520,531,519,532,500,542,500,0,538,482,495,505,513,482],
[485,495,499,489,515,485,504,483,462,0,472,488,496,477,471],
[534,502,526,500,547,529,552,493,518,528,0,526,528,486,507],
[511,493,505,507,512,500,532,481,505,512,474,0,502,484,485],
[470,489,513,496,510,488,529,472,495,504,472,498,0,496,447],
[501,501,515,515,530,510,514,470,487,523,514,516,504,0,500],
[548,524,521,515,527,508,515,512,518,529,493,515,553,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 116, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,471,489,516,489,495,499,518,482,487,490,506,498,485],
[506,0,480,503,541,512,492,503,530,495,505,508,498,508,517],
[529,520,0,518,549,518,518,530,520,512,534,517,491,535,532],
[511,497,482,0,510,504,505,492,517,485,491,483,477,495,481],
[484,459,451,490,0,478,465,495,494,477,492,474,477,479,496],
[511,488,482,496,522,0,515,509,524,485,517,492,504,522,521],
[505,508,482,495,535,485,0,523,522,523,517,521,493,502,505],
[501,497,470,508,505,491,477,0,510,477,498,486,501,506,501],
[482,470,480,483,506,476,478,490,0,464,478,471,468,510,492],
[518,505,488,515,523,515,477,523,536,0,522,485,479,500,514],
[513,495,466,509,508,483,483,502,522,478,0,482,488,512,498],
[510,492,483,517,526,508,479,514,529,515,518,0,504,488,518],
[494,502,509,523,523,496,507,499,532,521,512,496,0,533,512],
[502,492,465,505,521,478,498,494,490,500,488,512,467,0,498],
[515,483,468,519,504,479,495,499,508,486,502,482,488,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 117, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,474,526,491,492,509,510,495,521,490,494,458,501,472],
[523,0,475,538,493,499,485,521,502,498,492,503,517,490,499],
[526,525,0,556,528,526,546,538,526,524,525,510,500,498,517],
[474,462,444,0,489,495,494,489,474,506,474,461,456,472,460],
[509,507,472,511,0,532,486,539,525,515,518,492,496,500,481],
[508,501,474,505,468,0,468,553,473,478,498,470,479,517,474],
[491,515,454,506,514,532,0,515,508,501,487,497,489,503,487],
[490,479,462,511,461,447,485,0,474,468,457,443,486,480,471],
[505,498,474,526,475,527,492,526,0,482,502,457,476,507,512],
[479,502,476,494,485,522,499,532,518,0,528,503,469,489,508],
[510,508,475,526,482,502,513,543,498,472,0,477,516,489,494],
[506,497,490,539,508,530,503,557,543,497,523,0,504,499,519],
[542,483,500,544,504,521,511,514,524,531,484,496,0,496,501],
[499,510,502,528,500,483,497,520,493,511,511,501,504,0,485],
[528,501,483,540,519,526,513,529,488,492,506,481,499,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 118, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,483,527,521,466,529,531,514,530,531,548,537,501,540],
[493,0,505,504,458,461,522,488,481,445,519,491,456,436,514],
[517,495,0,503,524,483,510,486,483,479,495,502,521,439,545],
[473,496,497,0,505,509,453,524,510,500,484,525,505,480,510],
[479,542,476,495,0,459,440,431,503,467,548,501,440,402,520],
[534,539,517,491,541,0,446,535,533,541,541,504,517,486,574],
[471,478,490,547,560,554,0,541,579,544,585,544,520,472,546],
[469,512,514,476,569,465,459,0,449,478,545,485,484,461,591],
[486,519,517,490,497,467,421,551,0,525,518,482,488,486,547],
[470,555,521,500,533,459,456,522,475,0,519,463,538,475,539],
[469,481,505,516,452,459,415,455,482,481,0,470,427,424,496],
[452,509,498,475,499,496,456,515,518,537,530,0,496,459,541],
[463,544,479,495,560,483,480,516,512,462,573,504,0,452,518],
[499,564,561,520,598,514,528,539,514,525,576,541,548,0,568],
[460,486,455,490,480,426,454,409,453,461,504,459,482,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 119, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,532,507,521,629,550,575,546,603,484,597,564,569,549,621],
[468,0,531,619,593,511,605,600,619,477,517,487,629,546,603],
[493,469,0,553,608,460,548,490,611,489,470,495,544,483,535],
[479,381,447,0,570,434,443,470,541,418,382,472,547,402,491],
[371,407,392,430,0,367,471,480,493,393,381,416,447,433,472],
[450,489,540,566,633,0,641,539,582,508,564,500,551,501,554],
[425,395,452,557,529,359,0,402,462,357,371,411,466,426,473],
[454,400,510,530,520,461,598,0,517,492,473,426,448,489,520],
[397,381,389,459,507,418,538,483,0,417,387,433,448,387,532],
[516,523,511,582,607,492,643,508,583,0,507,522,601,537,465],
[403,483,530,618,619,436,629,527,613,493,0,493,545,563,546],
[436,513,505,528,584,500,589,574,567,478,507,0,507,445,584],
[431,371,456,453,553,449,534,552,552,399,455,493,0,463,441],
[451,454,517,598,567,499,574,511,613,463,437,555,537,0,520],
[379,397,465,509,528,446,527,480,468,535,454,416,559,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 120, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,500,512,515,493,492,528,491,505,483,530,474,485,510],
[490,0,500,491,517,505,520,532,487,511,496,540,508,462,514],
[500,500,0,486,466,456,518,542,443,519,473,497,507,472,491],
[488,509,514,0,480,473,524,524,472,487,471,446,501,460,497],
[485,483,534,520,0,473,538,549,499,510,489,493,521,496,533],
[507,495,544,527,527,0,533,490,495,542,500,500,516,483,506],
[508,480,482,476,462,467,0,537,473,511,447,489,441,454,516],
[472,468,458,476,451,510,463,0,459,481,460,490,491,436,495],
[509,513,557,528,501,505,527,541,0,504,519,497,498,482,520],
[495,489,481,513,490,458,489,519,496,0,454,536,485,492,514],
[517,504,527,529,511,500,553,540,481,546,0,488,528,500,532],
[470,460,503,554,507,500,511,510,503,464,512,0,521,437,514],
[526,492,493,499,479,484,559,509,502,515,472,479,0,489,520],
[515,538,528,540,504,517,546,564,518,508,500,563,511,0,493],
[490,486,509,503,467,494,484,505,480,486,468,486,480,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 121, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,465,514,513,511,540,506,505,506,485,544,503,525,538],
[489,0,470,491,500,501,509,474,491,454,468,518,497,472,501],
[535,530,0,492,522,521,545,516,504,498,493,537,493,494,524],
[486,509,508,0,529,533,513,496,522,507,504,509,531,515,524],
[487,500,478,471,0,503,505,503,481,458,471,517,497,496,514],
[489,499,479,467,497,0,518,480,494,470,473,486,495,487,515],
[460,491,455,487,495,482,0,469,488,441,457,479,480,458,515],
[494,526,484,504,497,520,531,0,487,474,475,499,492,497,492],
[495,509,496,478,519,506,512,513,0,469,480,534,516,504,542],
[494,546,502,493,542,530,559,526,531,0,488,531,535,506,543],
[515,532,507,496,529,527,543,525,520,512,0,532,522,530,548],
[456,482,463,491,483,514,521,501,466,469,468,0,488,492,498],
[497,503,507,469,503,505,520,508,484,465,478,512,0,499,526],
[475,528,506,485,504,513,542,503,496,494,470,508,501,0,516],
[462,499,476,476,486,485,485,508,458,457,452,502,474,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 122, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,464,492,479,505,504,496,537,517,518,490,502,504,512],
[515,0,477,502,500,502,538,502,493,501,524,493,529,525,506],
[536,523,0,510,518,519,536,495,499,540,530,528,507,527,525],
[508,498,490,0,486,503,527,494,487,535,498,475,485,514,491],
[521,500,482,514,0,490,532,514,488,532,510,497,503,511,525],
[495,498,481,497,510,0,534,503,498,532,517,496,512,495,501],
[496,462,464,473,468,466,0,481,478,504,481,499,481,486,526],
[504,498,505,506,486,497,519,0,502,554,460,509,506,519,524],
[463,507,501,513,512,502,522,498,0,528,520,501,510,512,530],
[483,499,460,465,468,468,496,446,472,0,485,473,501,496,490],
[482,476,470,502,490,483,519,540,480,515,0,508,482,504,519],
[510,507,472,525,503,504,501,491,499,527,492,0,498,500,487],
[498,471,493,515,497,488,519,494,490,499,518,502,0,529,516],
[496,475,473,486,489,505,514,481,488,504,496,500,471,0,504],
[488,494,475,509,475,499,474,476,470,510,481,513,484,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 123, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,522,534,503,529,523,508,525,529,510,500,502,522,552,503],
[478,0,507,484,559,551,507,498,473,509,479,488,527,543,499],
[466,493,0,517,524,510,496,496,509,494,492,528,510,549,529],
[497,516,483,0,509,536,504,535,504,513,516,504,538,493,492],
[471,441,476,491,0,504,485,472,442,477,445,482,525,505,447],
[477,449,490,464,496,0,485,448,460,456,453,433,505,511,448],
[492,493,504,496,515,515,0,518,511,504,488,539,548,514,510],
[475,502,504,465,528,552,482,0,497,489,521,460,509,516,499],
[471,527,491,496,558,540,489,503,0,508,486,526,532,530,506],
[490,491,506,487,523,544,496,511,492,0,509,506,548,520,538],
[500,521,508,484,555,547,512,479,514,491,0,499,531,525,556],
[498,512,472,496,518,567,461,540,474,494,501,0,537,565,495],
[478,473,490,462,475,495,452,491,468,452,469,463,0,474,466],
[448,457,451,507,495,489,486,484,470,480,475,435,526,0,468],
[497,501,471,508,553,552,490,501,494,462,444,505,534,532,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 124, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,500,522,504,530,517,500,537,547,493,505,552,515,538],
[500,0,504,503,483,542,487,460,498,510,513,491,523,496,508],
[500,496,0,491,484,528,485,492,524,506,520,497,529,501,491],
[478,497,509,0,472,510,494,510,504,501,497,522,504,515,497],
[496,517,516,528,0,527,482,514,543,523,503,533,541,540,527],
[470,458,472,490,473,0,490,453,508,499,486,481,496,501,503],
[483,513,515,506,518,510,0,505,539,540,516,526,546,533,528],
[500,540,508,490,486,547,495,0,518,533,527,504,535,517,535],
[463,502,476,496,457,492,461,482,0,492,459,482,504,478,482],
[453,490,494,499,477,501,460,467,508,0,485,494,494,489,484],
[507,487,480,503,497,514,484,473,541,515,0,489,554,524,531],
[495,509,503,478,467,519,474,496,518,506,511,0,507,498,484],
[448,477,471,496,459,504,454,465,496,506,446,493,0,490,507],
[485,504,499,485,460,499,467,483,522,511,476,502,510,0,486],
[462,492,509,503,473,497,472,465,518,516,469,516,493,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 125, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,528,510,511,530,490,469,473,507,474,489,507,529,545],
[503,0,519,494,486,493,489,459,504,435,469,483,452,491,498],
[472,481,0,504,492,513,497,452,495,444,507,507,475,495,493],
[490,506,496,0,497,501,457,457,478,473,483,495,471,511,505],
[489,514,508,503,0,501,505,468,492,470,453,487,467,498,472],
[470,507,487,499,499,0,466,449,490,422,466,472,456,485,517],
[510,511,503,543,495,534,0,502,512,488,483,508,487,536,524],
[531,541,548,543,532,551,498,0,515,499,505,514,449,526,545],
[527,496,505,522,508,510,488,485,0,475,479,505,476,528,536],
[493,565,556,527,530,578,512,501,525,0,508,550,485,519,557],
[526,531,493,517,547,534,517,495,521,492,0,526,490,504,548],
[511,517,493,505,513,528,492,486,495,450,474,0,471,490,532],
[493,548,525,529,533,544,513,551,524,515,510,529,0,561,536],
[471,509,505,489,502,515,464,474,472,481,496,510,439,0,527],
[455,502,507,495,528,483,476,455,464,443,452,468,464,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 126, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,531,499,499,501,473,503,508,497,487,476,520,502,497],
[497,0,531,494,504,459,479,539,502,452,468,483,478,505,486],
[469,469,0,502,475,470,458,496,491,490,465,483,475,465,464],
[501,506,498,0,511,498,497,542,514,507,531,520,502,489,493],
[501,496,525,489,0,462,460,489,531,502,493,499,486,470,487],
[499,541,530,502,538,0,483,532,543,527,497,496,540,515,523],
[527,521,542,503,540,517,0,535,536,475,503,521,538,507,539],
[497,461,504,458,511,468,465,0,496,479,462,484,493,458,508],
[492,498,509,486,469,457,464,504,0,474,491,491,486,492,487],
[503,548,510,493,498,473,525,521,526,0,509,512,525,529,536],
[513,532,535,469,507,503,497,538,509,491,0,484,527,493,508],
[524,517,517,480,501,504,479,516,509,488,516,0,489,481,507],
[480,522,525,498,514,460,462,507,514,475,473,511,0,507,502],
[498,495,535,511,530,485,493,542,508,471,507,519,493,0,493],
[503,514,536,507,513,477,461,492,513,464,492,493,498,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 127, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,484,532,481,524,483,483,505,501,511,483,478,515,508],
[492,0,510,506,463,515,508,508,486,475,509,513,484,492,491],
[516,490,0,511,486,489,496,497,481,506,502,488,488,474,471],
[468,494,489,0,460,509,505,471,477,475,484,488,491,485,476],
[519,537,514,540,0,496,512,498,497,495,536,508,505,532,507],
[476,485,511,491,504,0,507,490,492,496,506,482,487,475,485],
[517,492,504,495,488,493,0,501,523,492,509,483,516,519,507],
[517,492,503,529,502,510,499,0,507,508,530,518,519,500,500],
[495,514,519,523,503,508,477,493,0,486,513,517,504,519,491],
[499,525,494,525,505,504,508,492,514,0,541,512,506,511,474],
[489,491,498,516,464,494,491,470,487,459,0,494,506,499,490],
[517,487,512,512,492,518,517,482,483,488,506,0,509,507,482],
[522,516,512,509,495,513,484,481,496,494,494,491,0,513,498],
[485,508,526,515,468,525,481,500,481,489,501,493,487,0,497],
[492,509,529,524,493,515,493,500,509,526,510,518,502,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 128, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,478,442,513,497,485,441,501,531,465,503,466,475,479],
[519,0,562,494,532,529,480,493,516,543,525,499,550,524,546],
[522,438,0,455,492,517,456,454,468,502,437,477,516,473,456],
[558,506,545,0,542,534,477,529,536,546,559,513,557,488,502],
[487,468,508,458,0,516,424,437,465,505,495,440,475,455,468],
[503,471,483,466,484,0,458,449,514,513,499,484,501,470,518],
[515,520,544,523,576,542,0,508,527,518,509,526,575,502,495],
[559,507,546,471,563,551,492,0,520,575,568,503,545,559,517],
[499,484,532,464,535,486,473,480,0,506,508,506,497,493,526],
[469,457,498,454,495,487,482,425,494,0,490,470,459,492,501],
[535,475,563,441,505,501,491,432,492,510,0,524,551,505,510],
[497,501,523,487,560,516,474,497,494,530,476,0,532,499,468],
[534,450,484,443,525,499,425,455,503,541,449,468,0,505,458],
[525,476,527,512,545,530,498,441,507,508,495,501,495,0,523],
[521,454,544,498,532,482,505,483,474,499,490,532,542,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 129, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,550,543,458,512,532,494,542,527,614,528,437,659,443,491],
[450,0,554,443,442,598,470,425,455,487,473,402,480,524,405],
[457,446,0,505,401,497,476,445,436,501,451,434,534,410,440],
[542,557,495,0,456,636,565,525,485,561,507,562,631,489,433],
[488,558,599,544,0,584,633,510,597,615,507,522,621,497,475],
[468,402,503,364,416,0,424,388,472,441,412,388,533,364,344],
[506,530,524,435,367,576,0,467,486,632,459,423,642,404,369],
[458,575,555,475,490,612,533,0,584,608,489,493,642,466,459],
[473,545,564,515,403,528,514,416,0,536,534,478,494,406,403],
[386,513,499,439,385,559,368,392,464,0,427,412,492,407,446],
[472,527,549,493,493,588,541,511,466,573,0,521,561,442,469],
[563,598,566,438,478,612,577,507,522,588,479,0,642,444,500],
[341,520,466,369,379,467,358,358,506,508,439,358,0,375,301],
[557,476,590,511,503,636,596,534,594,593,558,556,625,0,414],
[509,595,560,567,525,656,631,541,597,554,531,500,699,586,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 130, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,522,530,500,517,507,518,521,517,503,491,531,516,460,495],
[478,0,506,498,487,499,510,469,494,492,483,508,510,489,485],
[470,494,0,468,481,474,495,452,491,471,461,502,486,448,476],
[500,502,532,0,494,488,523,508,514,499,507,532,515,514,505],
[483,513,519,506,0,488,502,504,505,489,481,537,503,494,481],
[493,501,526,512,512,0,509,527,520,501,501,521,514,501,503],
[482,490,505,477,498,491,0,479,482,511,467,508,509,461,473],
[479,531,548,492,496,473,521,0,505,491,478,511,507,469,472],
[483,506,509,486,495,480,518,495,0,489,482,479,497,478,496],
[497,508,529,501,511,499,489,509,511,0,503,496,505,463,485],
[509,517,539,493,519,499,533,522,518,497,0,524,517,499,505],
[469,492,498,468,463,479,492,489,521,504,476,0,506,470,467],
[484,490,514,485,497,486,491,493,503,495,483,494,0,477,499],
[540,511,552,486,506,499,539,531,522,537,501,530,523,0,503],
[505,515,524,495,519,497,527,528,504,515,495,533,501,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 131, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,523,499,505,489,492,469,493,501,472,503,511,497,496],
[567,0,467,482,500,513,499,494,482,510,544,543,489,519,518],
[477,533,0,499,514,512,471,532,444,465,531,486,523,543,514],
[501,518,501,0,494,505,458,529,469,519,550,525,453,544,470],
[495,500,486,506,0,475,452,509,422,492,514,469,464,544,460],
[511,487,488,495,525,0,512,515,493,491,569,509,474,525,514],
[508,501,529,542,548,488,0,577,502,495,534,553,525,577,534],
[531,506,468,471,491,485,423,0,418,473,521,459,483,483,455],
[507,518,556,531,578,507,498,582,0,528,530,552,494,527,506],
[499,490,535,481,508,509,505,527,472,0,495,501,473,550,486],
[528,456,469,450,486,431,466,479,470,505,0,435,485,545,499],
[497,457,514,475,531,491,447,541,448,499,565,0,494,512,434],
[489,511,477,547,536,526,475,517,506,527,515,506,0,529,535],
[503,481,457,456,456,475,423,517,473,450,455,488,471,0,484],
[504,482,486,530,540,486,466,545,494,514,501,566,465,516,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 132, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,540,526,508,536,563,528,494,511,537,504,535,528,511,517],
[460,0,493,497,506,510,510,502,496,532,493,532,492,473,490],
[474,507,0,508,524,515,533,475,499,505,495,506,504,498,492],
[492,503,492,0,525,537,509,491,499,508,489,547,510,506,504],
[464,494,476,475,0,476,485,472,488,487,462,483,485,487,491],
[437,490,485,463,524,0,500,465,487,486,479,481,477,467,476],
[472,490,467,491,515,500,0,458,456,472,470,489,498,484,480],
[506,498,525,509,528,535,542,0,514,524,487,538,517,511,514],
[489,504,501,501,512,513,544,486,0,515,492,523,507,491,494],
[463,468,495,492,513,514,528,476,485,0,484,508,484,498,484],
[496,507,505,511,538,521,530,513,508,516,0,532,523,494,488],
[465,468,494,453,517,519,511,462,477,492,468,0,504,492,487],
[472,508,496,490,515,523,502,483,493,516,477,496,0,493,497],
[489,527,502,494,513,533,516,489,509,502,506,508,507,0,498],
[483,510,508,496,509,524,520,486,506,516,512,513,503,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 133, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,491,518,493,505,498,510,520,496,489,510,501,507,507],
[507,0,504,531,503,515,519,510,533,513,508,492,508,488,499],
[509,496,0,507,491,518,496,494,506,480,484,510,499,482,475],
[482,469,493,0,506,467,490,491,505,483,489,493,493,483,472],
[507,497,509,494,0,506,516,517,522,510,515,504,497,504,503],
[495,485,482,533,494,0,462,487,498,476,504,480,490,483,472],
[502,481,504,510,484,538,0,497,519,499,503,492,490,502,493],
[490,490,506,509,483,513,503,0,520,492,497,501,482,486,487],
[480,467,494,495,478,502,481,480,0,478,497,499,476,484,458],
[504,487,520,517,490,524,501,508,522,0,504,532,522,513,491],
[511,492,516,511,485,496,497,503,503,496,0,483,491,495,501],
[490,508,490,507,496,520,508,499,501,468,517,0,502,501,492],
[499,492,501,507,503,510,510,518,524,478,509,498,0,505,488],
[493,512,518,517,496,517,498,514,516,487,505,499,495,0,507],
[493,501,525,528,497,528,507,513,542,509,499,508,512,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 134, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,577,472,524,449,635,476,565,572,543,429,504,555,511,535],
[423,0,585,478,530,587,508,621,474,587,451,511,528,407,498],
[528,415,0,451,420,455,397,534,459,511,284,448,454,390,459],
[476,522,549,0,473,546,449,525,480,579,346,480,546,466,410],
[551,470,580,527,0,551,477,545,452,560,440,455,474,507,574],
[365,413,545,454,449,0,426,485,455,487,288,341,484,323,477],
[524,492,603,551,523,574,0,656,521,585,392,420,507,453,477],
[435,379,466,475,455,515,344,0,484,460,370,468,431,424,431],
[428,526,541,520,548,545,479,516,0,573,396,432,486,500,469],
[457,413,489,421,440,513,415,540,427,0,389,415,455,382,386],
[571,549,716,654,560,712,608,630,604,611,0,485,589,602,599],
[496,489,552,520,545,659,580,532,568,585,515,0,595,523,519],
[445,472,546,454,526,516,493,569,514,545,411,405,0,468,448],
[489,593,610,534,493,677,547,576,500,618,398,477,532,0,503],
[465,502,541,590,426,523,523,569,531,614,401,481,552,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 135, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,459,509,542,459,510,484,546,461,497,512,519,469,518],
[521,0,464,542,500,470,525,478,510,509,517,468,548,474,557],
[541,536,0,538,545,493,483,495,529,521,514,557,611,527,506],
[491,458,462,0,517,431,465,445,466,442,428,477,485,485,510],
[458,500,455,483,0,448,457,428,492,444,424,474,494,401,461],
[541,530,507,569,552,0,517,516,522,479,510,498,574,505,582],
[490,475,517,535,543,483,0,482,539,548,511,576,540,511,546],
[516,522,505,555,572,484,518,0,550,518,518,543,544,509,570],
[454,490,471,534,508,478,461,450,0,495,451,494,520,519,504],
[539,491,479,558,556,521,452,482,505,0,515,495,532,460,534],
[503,483,486,572,576,490,489,482,549,485,0,510,494,488,534],
[488,532,443,523,526,502,424,457,506,505,490,0,496,475,478],
[481,452,389,515,506,426,460,456,480,468,506,504,0,465,481],
[531,526,473,515,599,495,489,491,481,540,512,525,535,0,508],
[482,443,494,490,539,418,454,430,496,466,466,522,519,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 136, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,373,381,412,382,465,446,440,464,452,498,427,407,450,529],
[627,0,553,535,378,396,501,475,510,493,581,477,448,467,666],
[619,447,0,506,430,540,494,514,519,555,533,608,466,498,546],
[588,465,494,0,483,409,442,456,493,430,520,481,419,519,573],
[618,622,570,517,0,513,555,518,554,580,631,500,582,627,609],
[535,604,460,591,487,0,566,521,570,472,562,538,459,514,684],
[554,499,506,558,445,434,0,472,543,471,608,494,451,473,554],
[560,525,486,544,482,479,528,0,585,514,561,512,519,612,567],
[536,490,481,507,446,430,457,415,0,415,456,387,402,474,527],
[548,507,445,570,420,528,529,486,585,0,574,536,415,561,642],
[502,419,467,480,369,438,392,439,544,426,0,413,487,508,525],
[573,523,392,519,500,462,506,488,613,464,587,0,472,591,553],
[593,552,534,581,418,541,549,481,598,585,513,528,0,527,607],
[550,533,502,481,373,486,527,388,526,439,492,409,473,0,587],
[471,334,454,427,391,316,446,433,473,358,475,447,393,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 137, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,520,456,494,482,506,509,486,500,532,500,516,491,506,465],
[480,0,466,491,457,531,488,496,473,495,502,515,447,509,466],
[544,534,0,499,494,522,492,496,525,520,507,539,494,534,513],
[506,509,501,0,507,518,496,504,514,493,479,498,504,504,471],
[518,543,506,493,0,516,498,481,501,501,501,526,503,507,479],
[494,469,478,482,484,0,490,524,472,496,479,500,491,518,482],
[491,512,508,504,502,510,0,508,509,506,488,503,494,500,463],
[514,504,504,496,519,476,492,0,481,488,508,495,481,533,477],
[500,527,475,486,499,528,491,519,0,503,479,500,519,564,520],
[468,505,480,507,499,504,494,512,497,0,478,505,504,519,495],
[500,498,493,521,499,521,512,492,521,522,0,520,502,517,483],
[484,485,461,502,474,500,497,505,500,495,480,0,484,521,472],
[509,553,506,496,497,509,506,519,481,496,498,516,0,531,467],
[494,491,466,496,493,482,500,467,436,481,483,479,469,0,457],
[535,534,487,529,521,518,537,523,480,505,517,528,533,543,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 138, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,466,459,496,500,492,479,479,442,480,485,441,481,475],
[504,0,495,490,484,527,525,493,505,471,516,507,486,510,489],
[534,505,0,486,518,508,513,516,509,492,514,481,476,524,501],
[541,510,514,0,503,512,507,505,515,515,510,496,468,498,493],
[504,516,482,497,0,531,516,504,488,467,497,493,487,491,493],
[500,473,492,488,469,0,515,482,482,454,485,476,459,495,476],
[508,475,487,493,484,485,0,502,486,493,480,496,464,490,484],
[521,507,484,495,496,518,498,0,513,494,504,505,458,515,495],
[521,495,491,485,512,518,514,487,0,481,519,509,463,504,512],
[558,529,508,485,533,546,507,506,519,0,522,525,522,521,511],
[520,484,486,490,503,515,520,496,481,478,0,502,479,503,509],
[515,493,519,504,507,524,504,495,491,475,498,0,463,508,491],
[559,514,524,532,513,541,536,542,537,478,521,537,0,547,537],
[519,490,476,502,509,505,510,485,496,479,497,492,453,0,481],
[525,511,499,507,507,524,516,505,488,489,491,509,463,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 139, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,484,483,487,477,505,473,495,497,496,481,491,504,489],
[511,0,500,486,490,509,519,502,512,508,520,500,476,507,503],
[516,500,0,503,509,506,509,499,500,487,493,514,490,515,503],
[517,514,497,0,493,518,517,503,511,495,486,502,514,504,507],
[513,510,491,507,0,501,515,498,504,502,508,506,498,489,516],
[523,491,494,482,499,0,499,481,518,504,465,499,507,485,501],
[495,481,491,483,485,501,0,488,503,492,480,502,475,482,485],
[527,498,501,497,502,519,512,0,511,504,497,527,498,500,503],
[505,488,500,489,496,482,497,489,0,513,489,491,510,485,509],
[503,492,513,505,498,496,508,496,487,0,474,494,510,507,514],
[504,480,507,514,492,535,520,503,511,526,0,517,532,516,515],
[519,500,486,498,494,501,498,473,509,506,483,0,494,497,496],
[509,524,510,486,502,493,525,502,490,490,468,506,0,490,511],
[496,493,485,496,511,515,518,500,515,493,484,503,510,0,488],
[511,497,497,493,484,499,515,497,491,486,485,504,489,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 140, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,498,510,465,484,501,479,481,471,504,455,488,465,460],
[527,0,523,503,500,546,514,517,504,487,502,478,516,532,481],
[502,477,0,501,478,499,499,518,488,472,485,459,498,512,466],
[490,497,499,0,481,498,499,519,479,481,495,476,515,461,485],
[535,500,522,519,0,516,517,526,503,498,522,505,513,522,501],
[516,454,501,502,484,0,505,499,446,470,484,451,501,471,481],
[499,486,501,501,483,495,0,508,490,490,467,472,489,487,493],
[521,483,482,481,474,501,492,0,471,475,504,503,505,483,467],
[519,496,512,521,497,554,510,529,0,493,505,506,505,521,490],
[529,513,528,519,502,530,510,525,507,0,528,495,521,517,508],
[496,498,515,505,478,516,533,496,495,472,0,469,517,511,489],
[545,522,541,524,495,549,528,497,494,505,531,0,513,514,503],
[512,484,502,485,487,499,511,495,495,479,483,487,0,495,461],
[535,468,488,539,478,529,513,517,479,483,489,486,505,0,494],
[540,519,534,515,499,519,507,533,510,492,511,497,539,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 141, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,536,506,553,470,488,488,593,545,523,525,481,512,498,519],
[464,0,447,487,429,497,471,526,495,476,530,460,476,464,451],
[494,553,0,524,454,501,495,523,528,511,535,490,494,528,509],
[447,513,476,0,454,509,475,534,503,505,533,464,470,511,480],
[530,571,546,546,0,525,538,565,575,566,546,520,496,572,524],
[512,503,499,491,475,0,525,578,514,479,515,496,519,493,526],
[512,529,505,525,462,475,0,556,481,488,511,468,515,543,506],
[407,474,477,466,435,422,444,0,483,462,517,426,434,501,458],
[455,505,472,497,425,486,519,517,0,487,494,475,480,530,510],
[477,524,489,495,434,521,512,538,513,0,557,497,469,566,538],
[475,470,465,467,454,485,489,483,506,443,0,433,490,495,486],
[519,540,510,536,480,504,532,574,525,503,567,0,542,565,531],
[488,524,506,530,504,481,485,566,520,531,510,458,0,519,530],
[502,536,472,489,428,507,457,499,470,434,505,435,481,0,530],
[481,549,491,520,476,474,494,542,490,462,514,469,470,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 142, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,477,486,501,500,471,475,473,474,487,486,506,473,487],
[494,0,451,483,506,470,483,454,468,466,466,490,472,472,487],
[523,549,0,511,536,501,517,499,491,503,498,531,474,484,501],
[514,517,489,0,545,485,508,490,515,501,498,514,502,496,499],
[499,494,464,455,0,455,481,453,465,468,491,495,453,484,477],
[500,530,499,515,545,0,508,499,504,503,518,502,522,508,520],
[529,517,483,492,519,492,0,503,505,515,517,498,498,515,506],
[525,546,501,510,547,501,497,0,487,482,501,493,517,516,497],
[527,532,509,485,535,496,495,513,0,490,516,518,473,510,499],
[526,534,497,499,532,497,485,518,510,0,496,506,504,516,516],
[513,534,502,502,509,482,483,499,484,504,0,525,513,509,489],
[514,510,469,486,505,498,502,507,482,494,475,0,493,478,505],
[494,528,526,498,547,478,502,483,527,496,487,507,0,516,477],
[527,528,516,504,516,492,485,484,490,484,491,522,484,0,514],
[513,513,499,501,523,480,494,503,501,484,511,495,523,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 143, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,514,503,516,504,493,483,468,475,501,510,496,494,499],
[514,0,490,499,510,480,512,486,498,482,513,520,526,494,510],
[486,510,0,493,510,479,486,515,498,493,515,514,515,500,528],
[497,501,507,0,514,488,486,497,481,502,498,505,501,495,503],
[484,490,490,486,0,468,479,495,482,464,503,498,489,509,480],
[496,520,521,512,532,0,507,519,500,510,501,503,512,508,533],
[507,488,514,514,521,493,0,496,511,497,508,525,502,512,528],
[517,514,485,503,505,481,504,0,512,494,499,509,529,498,528],
[532,502,502,519,518,500,489,488,0,500,509,507,537,491,518],
[525,518,507,498,536,490,503,506,500,0,482,507,514,521,524],
[499,487,485,502,497,499,492,501,491,518,0,500,500,494,513],
[490,480,486,495,502,497,475,491,493,493,500,0,498,474,510],
[504,474,485,499,511,488,498,471,463,486,500,502,0,480,513],
[506,506,500,505,491,492,488,502,509,479,506,526,520,0,518],
[501,490,472,497,520,467,472,472,482,476,487,490,487,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 144, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,674,777,596,452,675,637,659,580,675,594,468,649,436,620],
[326,0,558,376,390,690,460,305,408,392,319,347,511,497,404],
[223,442,0,319,336,645,602,474,442,645,395,379,439,336,400],
[404,624,681,0,724,732,563,667,539,617,535,526,604,437,674],
[548,610,664,276,0,614,490,623,455,609,560,361,519,510,628],
[325,310,355,268,386,0,405,366,235,334,315,167,581,331,288],
[363,540,398,437,510,595,0,530,459,447,535,416,564,506,480],
[341,695,526,333,377,634,470,0,428,468,235,287,589,446,461],
[420,592,558,461,545,765,541,572,0,568,379,524,495,397,603],
[325,608,355,383,391,666,553,532,432,0,522,464,478,326,487],
[406,681,605,465,440,685,465,765,621,478,0,450,705,463,590],
[532,653,621,474,639,833,584,713,476,536,550,0,575,590,791],
[351,489,561,396,481,419,436,411,505,522,295,425,0,419,434],
[564,503,664,563,490,669,494,554,603,674,537,410,581,0,662],
[380,596,600,326,372,712,520,539,397,513,410,209,566,338,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 145, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,366,510,465,468,406,459,483,408,483,465,511,448,476],
[533,0,466,513,486,461,538,492,492,481,432,455,528,518,526],
[634,534,0,528,475,455,535,596,511,498,521,474,484,387,572],
[490,487,472,0,497,462,481,443,499,446,489,510,491,490,535],
[535,514,525,503,0,377,505,485,467,457,487,445,607,495,524],
[532,539,545,538,623,0,539,538,514,444,491,543,534,535,578],
[594,462,465,519,495,461,0,519,586,466,475,443,515,510,581],
[541,508,404,557,515,462,481,0,483,446,519,492,540,450,522],
[517,508,489,501,533,486,414,517,0,493,461,506,467,483,554],
[592,519,502,554,543,556,534,554,507,0,520,528,457,444,548],
[517,568,479,511,513,509,525,481,539,480,0,518,544,505,474],
[535,545,526,490,555,457,557,508,494,472,482,0,531,485,536],
[489,472,516,509,393,466,485,460,533,543,456,469,0,527,516],
[552,482,613,510,505,465,490,550,517,556,495,515,473,0,558],
[524,474,428,465,476,422,419,478,446,452,526,464,484,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 146, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,534,476,436,530,518,508,467,549,534,501,422,482,547,481],
[466,0,500,440,474,494,514,451,482,469,541,473,472,499,454],
[524,500,0,444,525,465,522,459,454,474,504,436,469,464,507],
[564,560,556,0,550,527,540,412,567,504,555,485,511,510,475],
[470,526,475,450,0,454,550,487,543,500,513,466,460,492,487],
[482,506,535,473,546,0,550,508,535,537,609,505,521,523,474],
[492,486,478,460,450,450,0,398,526,465,495,471,444,463,401],
[533,549,541,588,513,492,602,0,566,480,568,537,527,504,509],
[451,518,546,433,457,465,474,434,0,474,473,512,447,490,463],
[466,531,526,496,500,463,535,520,526,0,510,477,501,479,432],
[499,459,496,445,487,391,505,432,527,490,0,500,454,421,436],
[578,527,564,515,534,495,529,463,488,523,500,0,458,531,456],
[518,528,531,489,540,479,556,473,553,499,546,542,0,531,510],
[453,501,536,490,508,477,537,496,510,521,579,469,469,0,472],
[519,546,493,525,513,526,599,491,537,568,564,544,490,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 147, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,501,477,514,497,497,450,443,476,507,470,458,501,516],
[504,0,473,447,466,457,501,456,417,493,498,475,443,475,491],
[499,527,0,524,500,464,508,518,467,473,533,458,479,493,523],
[523,553,476,0,452,471,515,507,450,507,515,501,488,518,542],
[486,534,500,548,0,472,520,476,444,484,524,477,465,525,516],
[503,543,536,529,528,0,503,486,413,521,543,487,491,532,550],
[503,499,492,485,480,497,0,487,447,486,523,489,462,483,523],
[550,544,482,493,524,514,513,0,453,493,549,485,476,502,518],
[557,583,533,550,556,587,553,547,0,519,592,497,523,556,576],
[524,507,527,493,516,479,514,507,481,0,536,499,475,520,530],
[493,502,467,485,476,457,477,451,408,464,0,429,482,477,505],
[530,525,542,499,523,513,511,515,503,501,571,0,486,539,556],
[542,557,521,512,535,509,538,524,477,525,518,514,0,538,517],
[499,525,507,482,475,468,517,498,444,480,523,461,462,0,510],
[484,509,477,458,484,450,477,482,424,470,495,444,483,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 148, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,446,597,529,508,504,504,424,492,524,394,564,521,484],
[532,0,445,598,571,506,511,459,458,518,517,495,564,531,506],
[554,555,0,625,590,573,550,574,503,476,565,574,602,538,540],
[403,402,375,0,438,405,411,413,375,374,421,381,461,437,448],
[471,429,410,562,0,507,428,515,444,480,499,482,583,494,472],
[492,494,427,595,493,0,499,499,462,446,514,525,550,473,457],
[496,489,450,589,572,501,0,570,504,490,542,501,571,584,495],
[496,541,426,587,485,501,430,0,454,508,515,444,584,511,493],
[576,542,497,625,556,538,496,546,0,555,558,518,539,589,512],
[508,482,524,626,520,554,510,492,445,0,541,510,560,578,508],
[476,483,435,579,501,486,458,485,442,459,0,455,533,526,453],
[606,505,426,619,518,475,499,556,482,490,545,0,633,548,531],
[436,436,398,539,417,450,429,416,461,440,467,367,0,494,386],
[479,469,462,563,506,527,416,489,411,422,474,452,506,0,456],
[516,494,460,552,528,543,505,507,488,492,547,469,614,544,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 149, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,523,491,521,511,468,548,476,521,528,557,505,503,527],
[529,0,533,519,559,502,472,545,473,524,517,546,552,529,521],
[477,467,0,491,498,481,440,506,423,469,530,493,482,492,511],
[509,481,509,0,552,521,457,539,467,524,542,521,491,512,514],
[479,441,502,448,0,484,433,516,445,472,492,507,518,465,508],
[489,498,519,479,516,0,460,521,467,521,527,549,497,518,516],
[532,528,560,543,567,540,0,572,500,544,591,595,547,563,555],
[452,455,494,461,484,479,428,0,452,480,528,513,509,447,487],
[524,527,577,533,555,533,500,548,0,567,568,582,525,558,543],
[479,476,531,476,528,479,456,520,433,0,520,501,511,515,527],
[472,483,470,458,508,473,409,472,432,480,0,510,448,482,463],
[443,454,507,479,493,451,405,487,418,499,490,0,488,468,486],
[495,448,518,509,482,503,453,491,475,489,552,512,0,499,529],
[497,471,508,488,535,482,437,553,442,485,518,532,501,0,518],
[473,479,489,486,492,484,445,513,457,473,537,514,471,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 150, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,546,497,496,515,538,530,485,551,520,532,567,523,518,524],
[454,0,488,455,494,517,472,443,536,491,494,525,485,485,503],
[503,512,0,485,492,544,529,476,525,498,508,582,505,501,496],
[504,545,515,0,483,535,547,525,528,525,542,552,542,506,507],
[485,506,508,517,0,521,523,505,517,504,522,575,515,519,514],
[462,483,456,465,479,0,493,432,485,489,477,504,484,512,486],
[470,528,471,453,477,507,0,495,519,477,514,526,498,497,477],
[515,557,524,475,495,568,505,0,527,517,564,573,507,519,519],
[449,464,475,472,483,515,481,473,0,494,497,494,500,469,493],
[480,509,502,475,496,511,523,483,506,0,511,520,493,486,539],
[468,506,492,458,478,523,486,436,503,489,0,531,472,490,459],
[433,475,418,448,425,496,474,427,506,480,469,0,463,477,457],
[477,515,495,458,485,516,502,493,500,507,528,537,0,526,514],
[482,515,499,494,481,488,503,481,531,514,510,523,474,0,478],
[476,497,504,493,486,514,523,481,507,461,541,543,486,522,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 151, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,483,486,506,493,497,495,498,503,490,492,483,504,474],
[500,0,476,497,489,485,479,472,496,482,491,497,486,489,500],
[517,524,0,497,520,499,493,518,557,505,528,501,505,544,511],
[514,503,503,0,518,540,505,514,522,502,515,519,527,530,499],
[494,511,480,482,0,500,489,512,524,505,505,490,508,530,478],
[507,515,501,460,500,0,500,502,510,489,517,514,490,517,491],
[503,521,507,495,511,500,0,505,547,502,509,509,518,551,495],
[505,528,482,486,488,498,495,0,501,513,492,493,493,525,488],
[502,504,443,478,476,490,453,499,0,472,496,502,483,515,482],
[497,518,495,498,495,511,498,487,528,0,505,498,523,534,480],
[510,509,472,485,495,483,491,508,504,495,0,502,489,527,494],
[508,503,499,481,510,486,491,507,498,502,498,0,504,533,480],
[517,514,495,473,492,510,482,507,517,477,511,496,0,531,492],
[496,511,456,470,470,483,449,475,485,466,473,467,469,0,466],
[526,500,489,501,522,509,505,512,518,520,506,520,508,534,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 152, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,536,531,537,509,534,521,542,470,531,519,488,542,557,512],
[464,0,524,496,484,482,484,497,479,477,534,485,515,514,474],
[469,476,0,496,486,484,484,492,492,496,502,444,491,494,459],
[463,504,504,0,522,529,519,505,496,539,511,481,496,534,471],
[491,516,514,478,0,528,498,497,478,527,512,505,497,518,475],
[466,518,516,471,472,0,504,465,493,462,503,470,499,492,473],
[479,516,516,481,502,496,0,499,475,491,525,482,526,535,471],
[458,503,508,495,503,535,501,0,480,478,525,482,523,501,476],
[530,521,508,504,522,507,525,520,0,515,515,476,512,540,488],
[469,523,504,461,473,538,509,522,485,0,516,451,485,508,502],
[481,466,498,489,488,497,475,475,485,484,0,451,501,505,471],
[512,515,556,519,495,530,518,518,524,549,549,0,521,565,496],
[458,485,509,504,503,501,474,477,488,515,499,479,0,497,463],
[443,486,506,466,482,508,465,499,460,492,495,435,503,0,461],
[488,526,541,529,525,527,529,524,512,498,529,504,537,539,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 153, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,560,537,482,541,522,489,531,539,531,507,506,539,514,512],
[440,0,462,437,482,487,433,496,521,442,475,459,467,484,493],
[463,538,0,487,453,508,445,520,503,469,442,439,498,478,496],
[518,563,513,0,537,521,503,519,524,537,511,483,543,540,545],
[459,518,547,463,0,526,458,522,493,492,458,441,533,498,492],
[478,513,492,479,474,0,458,534,503,493,478,421,488,502,483],
[511,567,555,497,542,542,0,538,552,507,530,466,556,519,522],
[469,504,480,481,478,466,462,0,522,508,465,465,501,510,475],
[461,479,497,476,507,497,448,478,0,443,446,428,477,475,487],
[469,558,531,463,508,507,493,492,557,0,495,469,528,484,527],
[493,525,558,489,542,522,470,535,554,505,0,482,511,492,531],
[494,541,561,517,559,579,534,535,572,531,518,0,554,536,553],
[461,533,502,457,467,512,444,499,523,472,489,446,0,494,502],
[486,516,522,460,502,498,481,490,525,516,508,464,506,0,513],
[488,507,504,455,508,517,478,525,513,473,469,447,498,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 154, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,517,508,487,450,487,447,437,531,483,472,438,469,521],
[534,0,465,513,517,530,543,530,436,508,510,549,497,487,598],
[483,535,0,473,464,510,540,481,499,547,527,567,533,478,525],
[492,487,527,0,464,515,536,435,435,460,444,475,429,511,487],
[513,483,536,536,0,533,524,515,452,493,498,558,506,516,503],
[550,470,490,485,467,0,565,388,447,527,543,525,450,452,564],
[513,457,460,464,476,435,0,426,425,530,462,489,413,387,494],
[553,470,519,565,485,612,574,0,497,539,534,559,470,502,586],
[563,564,501,565,548,553,575,503,0,618,533,584,463,505,524],
[469,492,453,540,507,473,470,461,382,0,394,493,381,467,495],
[517,490,473,556,502,457,538,466,467,606,0,445,395,479,570],
[528,451,433,525,442,475,511,441,416,507,555,0,410,413,553],
[562,503,467,571,494,550,587,530,537,619,605,590,0,509,549],
[531,513,522,489,484,548,613,498,495,533,521,587,491,0,569],
[479,402,475,513,497,436,506,414,476,505,430,447,451,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 155, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,520,513,476,528,523,538,495,499,503,488,496,524,519],
[510,0,514,520,527,519,510,531,506,530,501,500,495,527,528],
[480,486,0,477,505,482,500,507,497,502,485,491,494,493,502],
[487,480,523,0,501,514,502,522,498,508,491,502,491,509,501],
[524,473,495,499,0,533,516,534,501,512,483,510,508,508,510],
[472,481,518,486,467,0,500,494,487,527,479,476,471,496,514],
[477,490,500,498,484,500,0,512,485,503,483,483,505,506,493],
[462,469,493,478,466,506,488,0,474,503,501,479,479,507,498],
[505,494,503,502,499,513,515,526,0,532,498,501,505,524,520],
[501,470,498,492,488,473,497,497,468,0,473,482,478,512,503],
[497,499,515,509,517,521,517,499,502,527,0,509,485,523,532],
[512,500,509,498,490,524,517,521,499,518,491,0,485,522,519],
[504,505,506,509,492,529,495,521,495,522,515,515,0,517,517],
[476,473,507,491,492,504,494,493,476,488,477,478,483,0,507],
[481,472,498,499,490,486,507,502,480,497,468,481,483,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 156, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,461,474,460,482,474,502,466,480,474,453,494,474,510],
[528,0,523,506,511,502,508,539,500,514,504,511,518,500,563],
[539,477,0,500,479,481,477,507,477,505,474,477,483,508,523],
[526,494,500,0,475,494,510,497,496,506,507,505,506,524,518],
[540,489,521,525,0,505,506,495,495,492,508,496,517,502,516],
[518,498,519,506,495,0,490,547,503,504,534,512,517,523,518],
[526,492,523,490,494,510,0,513,493,480,507,481,527,488,529],
[498,461,493,503,505,453,487,0,460,467,486,464,481,496,503],
[534,500,523,504,505,497,507,540,0,528,501,507,519,501,549],
[520,486,495,494,508,496,520,533,472,0,481,489,513,504,541],
[526,496,526,493,492,466,493,514,499,519,0,460,509,509,530],
[547,489,523,495,504,488,519,536,493,511,540,0,510,513,545],
[506,482,517,494,483,483,473,519,481,487,491,490,0,484,531],
[526,500,492,476,498,477,512,504,499,496,491,487,516,0,514],
[490,437,477,482,484,482,471,497,451,459,470,455,469,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 157, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,525,477,478,516,491,514,482,484,490,496,487,458,480,485],
[475,0,476,489,483,499,503,444,476,531,503,497,441,479,453],
[523,524,0,513,482,502,527,488,515,522,510,494,454,483,484],
[522,511,487,0,488,495,499,497,533,515,491,511,472,478,481],
[484,517,518,512,0,512,531,496,503,517,513,514,481,499,510],
[509,501,498,505,488,0,488,500,504,499,477,493,502,478,472],
[486,497,473,501,469,512,0,481,498,498,493,460,466,471,489],
[518,556,512,503,504,500,519,0,540,545,536,542,506,520,511],
[516,524,485,467,497,496,502,460,0,524,520,496,488,489,504],
[510,469,478,485,483,501,502,455,476,0,508,474,454,485,485],
[504,497,490,509,487,523,507,464,480,492,0,501,471,488,465],
[513,503,506,489,486,507,540,458,504,526,499,0,474,488,489],
[542,559,546,528,519,498,534,494,512,546,529,526,0,522,522],
[520,521,517,522,501,522,529,480,511,515,512,512,478,0,497],
[515,547,516,519,490,528,511,489,496,515,535,511,478,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 158, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,489,459,506,481,484,480,493,510,472,488,492,492,488],
[505,0,507,482,502,481,498,499,500,515,465,497,525,511,498],
[511,493,0,490,517,484,512,501,506,517,501,505,502,484,494],
[541,518,510,0,506,503,527,516,527,532,493,517,522,532,524],
[494,498,483,494,0,484,471,471,501,495,468,510,516,520,477],
[519,519,516,497,516,0,531,504,517,521,485,522,502,530,491],
[516,502,488,473,529,469,0,484,524,512,456,489,515,530,520],
[520,501,499,484,529,496,516,0,525,515,479,504,518,511,505],
[507,500,494,473,499,483,476,475,0,522,483,498,497,507,477],
[490,485,483,468,505,479,488,485,478,0,483,473,475,516,479],
[528,535,499,507,532,515,544,521,517,517,0,533,538,531,527],
[512,503,495,483,490,478,511,496,502,527,467,0,490,498,495],
[508,475,498,478,484,498,485,482,503,525,462,510,0,532,482],
[508,489,516,468,480,470,470,489,493,484,469,502,468,0,477],
[512,502,506,476,523,509,480,495,523,521,473,505,518,523,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 159, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,435,510,540,491,571,480,497,488,529,490,390,525,532],
[513,0,631,532,476,471,471,320,488,569,545,550,462,449,478],
[565,369,0,533,485,428,511,421,449,496,600,416,420,431,466],
[490,468,467,0,440,379,428,388,405,457,577,412,410,450,403],
[460,524,515,560,0,535,442,425,395,565,562,471,393,474,414],
[509,529,572,621,465,0,493,429,518,537,491,542,484,501,435],
[429,529,489,572,558,507,0,373,511,531,487,405,408,379,492],
[520,680,579,612,575,571,627,0,560,576,672,511,445,599,549],
[503,512,551,595,605,482,489,440,0,537,529,533,451,512,519],
[512,431,504,543,435,463,469,424,463,0,521,405,300,464,451],
[471,455,400,423,438,509,513,328,471,479,0,431,326,438,403],
[510,450,584,588,529,458,595,489,467,595,569,0,457,441,504],
[610,538,580,590,607,516,592,555,549,700,674,543,0,487,557],
[475,551,569,550,526,499,621,401,488,536,562,559,513,0,468],
[468,522,534,597,586,565,508,451,481,549,597,496,443,532,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 160, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,480,480,505,495,492,504,496,505,517,510,524,490,513],
[496,0,477,493,509,492,497,478,496,490,518,479,484,494,509],
[520,523,0,521,544,520,511,524,498,511,539,533,526,533,530],
[520,507,479,0,521,496,502,499,488,507,521,506,514,500,523],
[495,491,456,479,0,475,489,464,500,485,512,476,472,478,504],
[505,508,480,504,525,0,516,500,487,510,509,493,520,496,521],
[508,503,489,498,511,484,0,484,478,501,508,499,504,472,502],
[496,522,476,501,536,500,516,0,491,514,522,504,510,513,499],
[504,504,502,512,500,513,522,509,0,512,509,515,519,494,501],
[495,510,489,493,515,490,499,486,488,0,533,492,516,502,515],
[483,482,461,479,488,491,492,478,491,467,0,472,515,479,498],
[490,521,467,494,524,507,501,496,485,508,528,0,522,501,507],
[476,516,474,486,528,480,496,490,481,484,485,478,0,487,513],
[510,506,467,500,522,504,528,487,506,498,521,499,513,0,524],
[487,491,470,477,496,479,498,501,499,485,502,493,487,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 161, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,528,476,504,492,427,409,467,484,440,485,410,491,463],
[524,0,543,555,532,495,485,467,493,467,472,482,465,460,473],
[472,457,0,544,493,446,384,395,475,468,481,491,429,469,398],
[524,445,456,0,434,481,412,395,454,453,519,534,418,468,435],
[496,468,507,566,0,486,492,480,561,515,500,454,465,466,531],
[508,505,554,519,514,0,461,403,524,442,501,440,421,445,474],
[573,515,616,588,508,539,0,512,531,507,523,517,519,555,464],
[591,533,605,605,520,597,488,0,538,535,557,600,514,520,538],
[533,507,525,546,439,476,469,462,0,468,475,476,441,482,485],
[516,533,532,547,485,558,493,465,532,0,507,541,479,511,480],
[560,528,519,481,500,499,477,443,525,493,0,541,473,471,482],
[515,518,509,466,546,560,483,400,524,459,459,0,456,452,478],
[590,535,571,582,535,579,481,486,559,521,527,544,0,523,475],
[509,540,531,532,534,555,445,480,518,489,529,548,477,0,502],
[537,527,602,565,469,526,536,462,515,520,518,522,525,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 162, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,517,484,469,458,444,496,472,466,495,485,474,480,498],
[529,0,518,521,491,515,515,530,490,518,528,511,528,518,495],
[483,482,0,440,492,501,459,531,496,476,494,481,471,508,468],
[516,479,560,0,515,519,550,536,495,509,485,508,531,509,513],
[531,509,508,485,0,491,498,517,495,496,501,494,493,474,507],
[542,485,499,481,509,0,484,512,500,472,502,492,504,495,483],
[556,485,541,450,502,516,0,523,506,506,477,489,514,537,494],
[504,470,469,464,483,488,477,0,499,478,482,490,511,475,498],
[528,510,504,505,505,500,494,501,0,533,504,505,527,500,499],
[534,482,524,491,504,528,494,522,467,0,497,525,529,528,500],
[505,472,506,515,499,498,523,518,496,503,0,487,500,492,518],
[515,489,519,492,506,508,511,510,495,475,513,0,496,506,493],
[526,472,529,469,507,496,486,489,473,471,500,504,0,476,487],
[520,482,492,491,526,505,463,525,500,472,508,494,524,0,466],
[502,505,532,487,493,517,506,502,501,500,482,507,513,534,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 163, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,513,494,495,484,487,516,495,494,506,484,488,497,495,495],
[487,0,521,483,502,515,476,499,470,494,493,500,489,494,453],
[506,479,0,495,499,496,511,495,487,485,493,481,516,502,480],
[505,517,505,0,498,502,519,494,500,501,481,500,498,488,487],
[516,498,501,502,0,482,490,487,495,509,477,466,508,520,490],
[513,485,504,498,518,0,511,511,499,514,499,510,506,480,488],
[484,524,489,481,510,489,0,486,495,487,491,489,495,490,483],
[505,501,505,506,513,489,514,0,489,523,496,488,516,503,504],
[506,530,513,500,505,501,505,511,0,509,506,518,494,489,486],
[494,506,515,499,491,486,513,477,491,0,501,497,507,503,506],
[516,507,507,519,523,501,509,504,494,499,0,475,492,482,491],
[512,500,519,500,534,490,511,512,482,503,525,0,523,497,501],
[503,511,484,502,492,494,505,484,506,493,508,477,0,476,491],
[505,506,498,512,480,520,510,497,511,497,518,503,524,0,498],
[505,547,520,513,510,512,517,496,514,494,509,499,509,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 164, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,478,483,515,468,483,485,493,497,469,482,516,485,489],
[541,0,517,527,547,508,529,517,527,525,484,533,549,534,524],
[522,483,0,510,528,479,527,491,518,530,486,495,525,516,515],
[517,473,490,0,496,464,513,488,516,498,444,492,513,513,496],
[485,453,472,504,0,469,505,473,498,511,452,478,519,500,496],
[532,492,521,536,531,0,535,491,532,521,504,514,550,547,521],
[517,471,473,487,495,465,0,494,504,503,463,492,513,509,508],
[515,483,509,512,527,509,506,0,522,518,490,491,519,508,493],
[507,473,482,484,502,468,496,478,0,480,457,488,495,491,489],
[503,475,470,502,489,479,497,482,520,0,476,495,503,493,483],
[531,516,514,556,548,496,537,510,543,524,0,514,541,533,502],
[518,467,505,508,522,486,508,509,512,505,486,0,529,515,513],
[484,451,475,487,481,450,487,481,505,497,459,471,0,493,482],
[515,466,484,487,500,453,491,492,509,507,467,485,507,0,467],
[511,476,485,504,504,479,492,507,511,517,498,487,518,533,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 165, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,462,474,478,498,516,501,473,488,468,507,483,479,467],
[532,0,510,508,519,480,512,516,486,479,547,505,516,509,504],
[538,490,0,517,515,531,523,524,513,480,501,509,483,491,508],
[526,492,483,0,510,464,469,521,460,459,490,460,507,464,472],
[522,481,485,490,0,526,494,497,486,459,460,467,492,459,522],
[502,520,469,536,474,0,503,513,488,477,504,490,498,497,501],
[484,488,477,531,506,497,0,512,462,461,511,479,461,502,443],
[499,484,476,479,503,487,488,0,480,481,513,522,504,461,505],
[527,514,487,540,514,512,538,520,0,473,507,516,498,499,512],
[512,521,520,541,541,523,539,519,527,0,525,525,557,482,517],
[532,453,499,510,540,496,489,487,493,475,0,515,510,496,536],
[493,495,491,540,533,510,521,478,484,475,485,0,513,483,514],
[517,484,517,493,508,502,539,496,502,443,490,487,0,492,512],
[521,491,509,536,541,503,498,539,501,518,504,517,508,0,539],
[533,496,492,528,478,499,557,495,488,483,464,486,488,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 166, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,482,459,401,455,478,532,483,517,520,470,417,457,461],
[540,0,568,482,495,545,571,577,559,516,552,553,512,554,576],
[518,432,0,389,450,515,508,552,517,477,488,495,467,514,476],
[541,518,611,0,511,521,562,536,554,520,628,550,491,531,536],
[599,505,550,489,0,516,576,520,538,506,548,516,508,532,579],
[545,455,485,479,484,0,510,530,551,515,546,472,469,540,522],
[522,429,492,438,424,490,0,499,477,496,525,451,388,525,510],
[468,423,448,464,480,470,501,0,457,482,492,468,396,457,459],
[517,441,483,446,462,449,523,543,0,489,512,495,404,460,510],
[483,484,523,480,494,485,504,518,511,0,534,556,481,507,550],
[480,448,512,372,452,454,475,508,488,466,0,459,396,497,522],
[530,447,505,450,484,528,549,532,505,444,541,0,437,460,496],
[583,488,533,509,492,531,612,604,596,519,604,563,0,551,580],
[543,446,486,469,468,460,475,543,540,493,503,540,449,0,478],
[539,424,524,464,421,478,490,541,490,450,478,504,420,522,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 167, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,519,528,508,495,528,559,505,480,505,531,575,538,553,565],
[481,0,551,530,448,515,551,444,529,516,495,491,559,525,528],
[472,449,0,536,456,496,595,465,516,433,509,513,557,493,521],
[492,470,464,0,439,453,541,476,506,481,522,432,557,456,482],
[505,552,544,561,0,580,616,470,557,525,501,542,606,533,550],
[472,485,504,547,420,0,582,453,509,530,529,505,533,505,549],
[441,449,405,459,384,418,0,442,462,421,446,508,462,464,437],
[495,556,535,524,530,547,558,0,502,559,552,478,597,557,570],
[520,471,484,494,443,491,538,498,0,472,574,521,537,491,517],
[495,484,567,519,475,470,579,441,528,0,526,537,601,529,471],
[469,505,491,478,499,471,554,448,426,474,0,473,558,482,503],
[425,509,487,568,458,495,492,522,479,463,527,0,553,495,516],
[462,441,443,443,394,467,538,403,463,399,442,447,0,439,446],
[447,475,507,544,467,495,536,443,509,471,518,505,561,0,519],
[435,472,479,518,450,451,563,430,483,529,497,484,554,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 168, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,540,479,506,529,432,548,437,476,521,489,497,462,431,437],
[460,0,509,552,494,441,568,468,472,483,442,527,480,432,488],
[521,491,0,497,480,433,565,420,453,486,432,543,450,518,476],
[494,448,503,0,399,415,535,433,453,492,455,462,440,406,442],
[471,506,520,601,0,422,546,490,488,516,459,560,467,455,393],
[568,559,567,585,578,0,578,565,512,553,463,576,523,476,513],
[452,432,435,465,454,422,0,459,426,419,440,488,438,405,379],
[563,532,580,567,510,435,541,0,457,543,424,537,488,453,480],
[524,528,547,547,512,488,574,543,0,457,536,584,546,508,461],
[479,517,514,508,484,447,581,457,543,0,458,535,460,506,469],
[511,558,568,545,541,537,560,576,464,542,0,588,484,461,510],
[503,473,457,538,440,424,512,463,416,465,412,0,407,466,455],
[538,520,550,560,533,477,562,512,454,540,516,593,0,463,454],
[569,568,482,594,545,524,595,547,492,494,539,534,537,0,440],
[563,512,524,558,607,487,621,520,539,531,490,545,546,560,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 169, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,544,527,525,532,561,513,540,514,536,496,558,546,514,552],
[456,0,479,465,492,516,505,470,453,475,436,484,502,441,484],
[473,521,0,484,493,495,499,494,480,501,480,494,503,490,484],
[475,535,516,0,513,541,509,514,491,522,511,518,505,518,531],
[468,508,507,487,0,528,506,508,485,505,520,513,486,501,515],
[439,484,505,459,472,0,460,461,440,490,465,466,478,479,482],
[487,495,501,491,494,540,0,500,480,508,480,502,525,497,517],
[460,530,506,486,492,539,500,0,482,480,511,511,512,481,520],
[486,547,520,509,515,560,520,518,0,513,506,558,551,514,558],
[464,525,499,478,495,510,492,520,487,0,483,507,503,510,519],
[504,564,520,489,480,535,520,489,494,517,0,526,542,503,536],
[442,516,506,482,487,534,498,489,442,493,474,0,514,489,534],
[454,498,497,495,514,522,475,488,449,497,458,486,0,485,520],
[486,559,510,482,499,521,503,519,486,490,497,511,515,0,496],
[448,516,516,469,485,518,483,480,442,481,464,466,480,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 170, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,535,501,520,488,544,529,511,512,519,501,511,515,524],
[505,0,507,516,502,496,510,525,491,511,516,516,516,500,481],
[465,493,0,479,466,473,471,490,424,493,461,458,466,478,501],
[499,484,521,0,508,484,503,518,487,487,532,482,485,498,463],
[480,498,534,492,0,463,524,521,475,474,517,507,502,522,504],
[512,504,527,516,537,0,532,532,496,552,551,527,524,542,519],
[456,490,529,497,476,468,0,489,488,481,498,502,489,501,482],
[471,475,510,482,479,468,511,0,484,481,516,498,514,486,476],
[489,509,576,513,525,504,512,516,0,510,518,516,506,506,497],
[488,489,507,513,526,448,519,519,490,0,494,489,500,514,503],
[481,484,539,468,483,449,502,484,482,506,0,466,476,513,482],
[499,484,542,518,493,473,498,502,484,511,534,0,491,480,488],
[489,484,534,515,498,476,511,486,494,500,524,509,0,501,492],
[485,500,522,502,478,458,499,514,494,486,487,520,499,0,495],
[476,519,499,537,496,481,518,524,503,497,518,512,508,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 171, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,476,514,479,499,501,518,508,494,506,478,524,474,505],
[511,0,500,493,482,502,486,497,522,492,517,499,500,496,482],
[524,500,0,513,477,514,515,500,510,501,524,508,509,500,503],
[486,507,487,0,470,489,493,501,521,501,488,494,507,487,495],
[521,518,523,530,0,533,500,532,519,519,542,502,539,514,520],
[501,498,486,511,467,0,497,524,510,510,510,508,523,499,499],
[499,514,485,507,500,503,0,505,496,491,491,504,527,479,489],
[482,503,500,499,468,476,495,0,506,504,487,484,516,476,509],
[492,478,490,479,481,490,504,494,0,499,494,485,501,499,493],
[506,508,499,499,481,490,509,496,501,0,496,490,522,479,518],
[494,483,476,512,458,490,509,513,506,504,0,479,516,491,475],
[522,501,492,506,498,492,496,516,515,510,521,0,511,514,474],
[476,500,491,493,461,477,473,484,499,478,484,489,0,513,498],
[526,504,500,513,486,501,521,524,501,521,509,486,487,0,474],
[495,518,497,505,480,501,511,491,507,482,525,526,502,526,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 172, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,519,508,511,518,457,476,493,489,489,505,516,505,513,498],
[481,0,539,498,503,479,462,499,502,501,511,495,484,508,471],
[492,461,0,473,510,454,469,509,461,467,469,470,496,484,496],
[489,502,527,0,529,478,495,509,494,511,504,524,526,515,518],
[482,497,490,471,0,474,500,481,444,481,489,478,486,472,474],
[543,521,546,522,526,0,501,521,484,538,530,511,541,543,528],
[524,538,531,505,500,499,0,528,496,513,533,500,512,514,497],
[507,501,491,491,519,479,472,0,503,501,493,489,492,496,491],
[511,498,539,506,556,516,504,497,0,542,531,538,523,509,520],
[511,499,533,489,519,462,487,499,458,0,505,504,510,473,478],
[495,489,531,496,511,470,467,507,469,495,0,493,490,471,493],
[484,505,530,476,522,489,500,511,462,496,507,0,515,501,473],
[495,516,504,474,514,459,488,508,477,490,510,485,0,482,482],
[487,492,516,485,528,457,486,504,491,527,529,499,518,0,498],
[502,529,504,482,526,472,503,509,480,522,507,527,518,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 173, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,529,506,509,480,483,498,513,495,462,507,493,502,497,471],
[471,0,503,464,493,463,492,491,497,475,483,474,522,498,443],
[494,497,0,489,478,469,470,527,509,481,487,483,521,494,470],
[491,536,511,0,518,488,510,532,534,497,526,521,532,510,492],
[520,507,522,482,0,483,498,515,511,481,497,516,507,510,512],
[517,537,531,512,517,0,514,528,522,508,535,526,541,515,485],
[502,508,530,490,502,486,0,508,495,505,490,498,502,506,489],
[487,509,473,468,485,472,492,0,511,485,510,491,505,508,478],
[505,503,491,466,489,478,505,489,0,491,502,495,506,482,466],
[538,525,519,503,519,492,495,515,509,0,522,498,528,518,495],
[493,517,513,474,503,465,510,490,498,478,0,506,505,491,475],
[507,526,517,479,484,474,502,509,505,502,494,0,507,509,488],
[498,478,479,468,493,459,498,495,494,472,495,493,0,481,458],
[503,502,506,490,490,485,494,492,518,482,509,491,519,0,488],
[529,557,530,508,488,515,511,522,534,505,525,512,542,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 174, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,524,535,547,480,496,547,538,504,511,558,461,498,545],
[517,0,531,497,472,555,514,593,483,541,521,550,524,461,523],
[476,469,0,435,470,532,493,540,516,504,444,513,475,424,459],
[465,503,565,0,481,397,531,509,499,482,453,519,471,483,424],
[453,528,530,519,0,465,492,529,513,459,455,556,445,542,498],
[520,445,468,603,535,0,466,518,493,459,459,467,476,474,379],
[504,486,507,469,508,534,0,509,496,485,461,455,420,459,470],
[453,407,460,491,471,482,491,0,468,458,447,425,400,444,441],
[462,517,484,501,487,507,504,532,0,494,542,495,468,482,435],
[496,459,496,518,541,541,515,542,506,0,516,539,538,494,490],
[489,479,556,547,545,541,539,553,458,484,0,528,520,523,453],
[442,450,487,481,444,533,545,575,505,461,472,0,496,443,460],
[539,476,525,529,555,524,580,600,532,462,480,504,0,523,530],
[502,539,576,517,458,526,541,556,518,506,477,557,477,0,538],
[455,477,541,576,502,621,530,559,565,510,547,540,470,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 175, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,479,471,483,493,444,454,487,479,485,474,488,462,462],
[508,0,487,487,507,505,495,473,493,476,509,496,518,507,461],
[521,513,0,484,501,503,490,495,511,496,483,471,527,486,478],
[529,513,516,0,498,513,488,521,534,539,497,489,536,538,523],
[517,493,499,502,0,512,472,478,493,480,511,495,514,473,488],
[507,495,497,487,488,0,462,469,485,458,474,482,482,480,478],
[556,505,510,512,528,538,0,489,540,508,519,500,544,517,515],
[546,527,505,479,522,531,511,0,535,519,513,501,514,513,537],
[513,507,489,466,507,515,460,465,0,485,475,492,506,489,500],
[521,524,504,461,520,542,492,481,515,0,499,491,535,497,504],
[515,491,517,503,489,526,481,487,525,501,0,502,526,528,500],
[526,504,529,511,505,518,500,499,508,509,498,0,528,484,502],
[512,482,473,464,486,518,456,486,494,465,474,472,0,478,471],
[538,493,514,462,527,520,483,487,511,503,472,516,522,0,506],
[538,539,522,477,512,522,485,463,500,496,500,498,529,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 176, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,545,504,489,522,511,454,487,466,493,531,432,502,521],
[524,0,539,496,519,486,503,482,508,511,560,513,473,478,510],
[455,461,0,493,470,504,508,448,478,457,501,501,459,480,493],
[496,504,507,0,503,524,515,506,462,474,481,500,480,467,510],
[511,481,530,497,0,508,517,464,483,440,535,517,501,503,510],
[478,514,496,476,492,0,474,432,471,451,474,504,463,463,482],
[489,497,492,485,483,526,0,466,503,467,476,525,459,461,490],
[546,518,552,494,536,568,534,0,511,516,532,559,503,487,513],
[513,492,522,538,517,529,497,489,0,451,487,505,466,491,506],
[534,489,543,526,560,549,533,484,549,0,533,541,499,485,537],
[507,440,499,519,465,526,524,468,513,467,0,514,443,495,496],
[469,487,499,500,483,496,475,441,495,459,486,0,445,450,487],
[568,527,541,520,499,537,541,497,534,501,557,555,0,537,557],
[498,522,520,533,497,537,539,513,509,515,505,550,463,0,513],
[479,490,507,490,490,518,510,487,494,463,504,513,443,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 177, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,513,492,531,479,533,507,479,493,548,553,452,486,527,545],
[487,0,514,511,523,518,495,517,488,520,521,475,517,482,499],
[508,486,0,517,532,529,506,486,515,510,542,501,531,495,523],
[469,489,483,0,490,536,495,502,493,506,541,468,472,469,514],
[521,477,468,510,0,527,529,499,485,523,503,469,500,483,505],
[467,482,471,464,473,0,482,484,501,498,542,453,489,467,519],
[493,505,494,505,471,518,0,495,492,510,535,478,501,477,509],
[521,483,514,498,501,516,505,0,508,528,529,490,499,482,534],
[507,512,485,507,515,499,508,492,0,529,509,473,492,495,519],
[452,480,490,494,477,502,490,472,471,0,515,472,480,465,502],
[447,479,458,459,497,458,465,471,491,485,0,452,485,470,458],
[548,525,499,532,531,547,522,510,527,528,548,0,509,537,520],
[514,483,469,528,500,511,499,501,508,520,515,491,0,504,517],
[473,518,505,531,517,533,523,518,505,535,530,463,496,0,535],
[455,501,477,486,495,481,491,466,481,498,542,480,483,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 178, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,588,528,586,452,430,561,556,588,539,530,498,503,587,633],
[412,0,483,513,489,451,512,486,556,443,506,571,624,520,586],
[472,517,0,431,220,309,492,469,448,433,472,385,580,507,572],
[414,487,569,0,445,315,395,519,507,468,396,587,566,580,646],
[548,511,780,555,0,432,555,511,557,570,571,595,673,701,693],
[570,549,691,685,568,0,537,663,579,562,482,580,740,683,678],
[439,488,508,605,445,463,0,462,516,428,489,514,613,528,612],
[444,514,531,481,489,337,538,0,551,432,460,564,600,587,572],
[412,444,552,493,443,421,484,449,0,417,388,434,595,467,452],
[461,557,567,532,430,438,572,568,583,0,446,627,581,519,546],
[470,494,528,604,429,518,511,540,612,554,0,467,631,600,622],
[502,429,615,413,405,420,486,436,566,373,533,0,645,538,552],
[497,376,420,434,327,260,387,400,405,419,369,355,0,330,486],
[413,480,493,420,299,317,472,413,533,481,400,462,670,0,547],
[367,414,428,354,307,322,388,428,548,454,378,448,514,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 179, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,516,466,494,493,491,478,481,505,488,496,512,499,511],
[513,0,524,495,516,510,498,515,540,493,538,505,518,499,528],
[484,476,0,476,471,475,473,505,485,487,464,504,492,473,502],
[534,505,524,0,492,491,511,497,486,497,512,504,490,481,508],
[506,484,529,508,0,514,490,535,493,511,524,521,536,489,544],
[507,490,525,509,486,0,505,510,501,505,530,518,506,483,539],
[509,502,527,489,510,495,0,505,517,492,515,509,508,480,530],
[522,485,495,503,465,490,495,0,493,500,529,529,503,501,538],
[519,460,515,514,507,499,483,507,0,503,504,495,523,490,534],
[495,507,513,503,489,495,508,500,497,0,476,514,499,483,506],
[512,462,536,488,476,470,485,471,496,524,0,536,513,484,531],
[504,495,496,496,479,482,491,471,505,486,464,0,488,489,500],
[488,482,508,510,464,494,492,497,477,501,487,512,0,490,501],
[501,501,527,519,511,517,520,499,510,517,516,511,510,0,536],
[489,472,498,492,456,461,470,462,466,494,469,500,499,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 180, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,346,456,488,346,643,562,775,323,480,492,605,594,756,781],
[654,0,387,430,589,660,529,660,514,428,611,655,660,605,723],
[544,613,0,602,394,517,518,561,485,398,669,569,507,665,613],
[512,570,398,0,301,565,465,522,386,514,666,616,457,424,669],
[654,411,606,699,0,684,618,674,602,602,849,711,472,663,742],
[357,340,483,435,316,0,480,557,294,475,655,701,397,509,340],
[438,471,482,535,382,520,0,683,499,438,388,438,576,539,507],
[225,340,439,478,326,443,317,0,336,336,489,508,338,634,326],
[677,486,515,614,398,706,501,664,0,570,543,664,515,704,695],
[520,572,602,486,398,525,562,664,430,0,581,464,359,704,422],
[508,389,331,334,151,345,612,511,457,419,0,431,333,552,408],
[395,345,431,384,289,299,562,492,336,536,569,0,289,677,408],
[406,340,493,543,528,603,424,662,485,641,667,711,0,553,562],
[244,395,335,576,337,491,461,366,296,296,448,323,447,0,366],
[219,277,387,331,258,660,493,674,305,578,592,592,438,634,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 181, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,524,533,541,517,497,498,477,514,550,470,476,525,504,519],
[476,0,519,553,521,472,532,504,480,544,520,451,538,517,512],
[467,481,0,549,514,471,455,474,498,504,473,457,477,463,520],
[459,447,451,0,513,467,440,441,474,494,459,433,476,489,459],
[483,479,486,487,0,450,456,468,462,488,500,458,515,518,511],
[503,528,529,533,550,0,516,492,507,544,506,502,539,512,494],
[502,468,545,560,544,484,0,485,477,532,536,492,457,568,518],
[523,496,526,559,532,508,515,0,486,560,518,511,520,547,532],
[486,520,502,526,538,493,523,514,0,526,505,445,496,510,529],
[450,456,496,506,512,456,468,440,474,0,478,437,457,502,486],
[530,480,527,541,500,494,464,482,495,522,0,467,484,508,491],
[524,549,543,567,542,498,508,489,555,563,533,0,532,528,530],
[475,462,523,524,485,461,543,480,504,543,516,468,0,537,526],
[496,483,537,511,482,488,432,453,490,498,492,472,463,0,467],
[481,488,480,541,489,506,482,468,471,514,509,470,474,533,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 182, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,557,648,556,373,591,552,395,358,456,391,480,412,462],
[508,0,516,585,533,481,480,515,547,425,455,471,472,511,579],
[443,484,0,577,484,437,510,500,452,427,387,398,512,396,472],
[352,415,423,0,493,387,527,479,333,336,450,459,470,431,519],
[444,467,516,507,0,417,527,591,459,457,484,445,504,508,567],
[627,519,563,613,583,0,601,542,523,425,510,449,548,526,627],
[409,520,490,473,473,399,0,454,423,459,430,495,471,546,511],
[448,485,500,521,409,458,546,0,451,465,457,437,475,532,557],
[605,453,548,667,541,477,577,549,0,537,435,421,545,493,503],
[642,575,573,664,543,575,541,535,463,0,587,477,534,581,573],
[544,545,613,550,516,490,570,543,565,413,0,443,600,520,561],
[609,529,602,541,555,551,505,563,579,523,557,0,497,543,566],
[520,528,488,530,496,452,529,525,455,466,400,503,0,471,523],
[588,489,604,569,492,474,454,468,507,419,480,457,529,0,584],
[538,421,528,481,433,373,489,443,497,427,439,434,477,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 183, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,468,494,502,500,477,470,516,468,501,471,510,487,475],
[485,0,490,481,481,499,483,470,490,486,492,475,506,463,461],
[532,510,0,496,506,531,504,497,521,488,489,513,510,506,504],
[506,519,504,0,505,548,488,482,510,500,476,481,504,494,479],
[498,519,494,495,0,483,476,463,501,479,483,479,483,475,485],
[500,501,469,452,517,0,492,489,523,493,499,469,489,473,462],
[523,517,496,512,524,508,0,465,534,517,486,480,502,501,481],
[530,530,503,518,537,511,535,0,534,515,493,484,538,509,475],
[484,510,479,490,499,477,466,466,0,473,473,478,485,447,459],
[532,514,512,500,521,507,483,485,527,0,537,497,492,499,489],
[499,508,511,524,517,501,514,507,527,463,0,477,530,503,496],
[529,525,487,519,521,531,520,516,522,503,523,0,526,490,495],
[490,494,490,496,517,511,498,462,515,508,470,474,0,491,479],
[513,537,494,506,525,527,499,491,553,501,497,510,509,0,494],
[525,539,496,521,515,538,519,525,541,511,504,505,521,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 184, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,493,536,519,491,517,536,525,483,531,489,503,503,475],
[530,0,521,536,493,502,499,551,500,477,536,499,504,510,475],
[507,479,0,502,481,467,500,507,487,506,514,483,462,514,484],
[464,464,498,0,486,435,456,494,477,488,522,494,473,501,483],
[481,507,519,514,0,482,502,521,517,469,545,478,467,499,488],
[509,498,533,565,518,0,492,548,535,515,563,511,525,506,510],
[483,501,500,544,498,508,0,511,500,506,532,462,472,525,475],
[464,449,493,506,479,452,489,0,497,461,540,468,467,472,466],
[475,500,513,523,483,465,500,503,0,461,526,489,491,501,476],
[517,523,494,512,531,485,494,539,539,0,557,463,481,489,502],
[469,464,486,478,455,437,468,460,474,443,0,445,444,468,483],
[511,501,517,506,522,489,538,532,511,537,555,0,493,522,483],
[497,496,538,527,533,475,528,533,509,519,556,507,0,484,501],
[497,490,486,499,501,494,475,528,499,511,532,478,516,0,508],
[525,525,516,517,512,490,525,534,524,498,517,517,499,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 185, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,582,555,457,523,537,560,578,523,596,462,450,555,677,657],
[418,0,508,435,390,465,472,324,436,386,259,411,464,581,533],
[445,492,0,442,448,482,460,483,459,457,326,406,445,544,614],
[543,565,558,0,644,534,482,649,416,458,473,414,531,599,678],
[477,610,552,356,0,618,512,413,412,409,494,383,557,556,512],
[463,535,518,466,382,0,361,425,371,506,353,430,461,435,538],
[440,528,540,518,488,639,0,521,611,587,507,472,507,565,599],
[422,676,517,351,587,575,479,0,444,489,523,402,486,631,679],
[477,564,541,584,588,629,389,556,0,537,586,539,474,557,696],
[404,614,543,542,591,494,413,511,463,0,465,479,573,509,646],
[538,741,674,527,506,647,493,477,414,535,0,527,639,602,678],
[550,589,594,586,617,570,528,598,461,521,473,0,493,582,685],
[445,536,555,469,443,539,493,514,526,427,361,507,0,543,579],
[323,419,456,401,444,565,435,369,443,491,398,418,457,0,585],
[343,467,386,322,488,462,401,321,304,354,322,315,421,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 186, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,496,493,499,491,475,493,469,499,485,482,477,477,502],
[499,0,503,489,489,496,496,452,500,485,502,480,492,484,513],
[504,497,0,511,496,517,473,479,484,508,486,474,483,490,516],
[507,511,489,0,497,487,483,489,494,495,482,486,490,480,502],
[501,511,504,503,0,525,497,501,508,513,510,504,493,500,520],
[509,504,483,513,475,0,509,482,510,500,509,499,487,489,520],
[525,504,527,517,503,491,0,479,488,510,501,496,491,527,526],
[507,548,521,511,499,518,521,0,512,524,530,512,495,524,529],
[531,500,516,506,492,490,512,488,0,507,493,521,487,504,515],
[501,515,492,505,487,500,490,476,493,0,517,497,470,492,520],
[515,498,514,518,490,491,499,470,507,483,0,482,485,478,519],
[518,520,526,514,496,501,504,488,479,503,518,0,486,512,531],
[523,508,517,510,507,513,509,505,513,530,515,514,0,500,521],
[523,516,510,520,500,511,473,476,496,508,522,488,500,0,503],
[498,487,484,498,480,480,474,471,485,480,481,469,479,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 187, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,513,538,589,526,531,453,458,593,471,504,555,489,553],
[488,0,498,522,596,528,537,435,435,562,400,509,547,473,508],
[487,502,0,495,540,493,489,396,469,543,441,495,512,454,482],
[462,478,505,0,547,520,546,448,481,524,451,507,515,450,484],
[411,404,460,453,0,539,460,378,429,500,347,424,458,450,442],
[474,472,507,480,461,0,520,432,469,532,374,510,525,505,488],
[469,463,511,454,540,480,0,434,442,418,446,504,513,455,470],
[547,565,604,552,622,568,566,0,555,542,480,522,542,602,554],
[542,565,531,519,571,531,558,445,0,488,512,550,517,499,506],
[407,438,457,476,500,468,582,458,512,0,434,461,473,503,507],
[529,600,559,549,653,626,554,520,488,566,0,553,598,518,552],
[496,491,505,493,576,490,496,478,450,539,447,0,488,429,504],
[445,453,488,485,542,475,487,458,483,527,402,512,0,497,454],
[511,527,546,550,550,495,545,398,501,497,482,571,503,0,418],
[447,492,518,516,558,512,530,446,494,493,448,496,546,582,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 188, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,536,488,482,492,499,495,488,472,493,476,494,506,486],
[492,0,536,462,482,490,476,483,490,493,482,492,493,499,498],
[464,464,0,456,481,469,479,470,465,458,472,464,486,470,458],
[512,538,544,0,506,510,520,522,518,537,516,515,512,503,496],
[518,518,519,494,0,496,524,496,511,495,513,507,494,481,486],
[508,510,531,490,504,0,522,502,508,528,512,512,505,496,498],
[501,524,521,480,476,478,0,503,501,511,488,482,502,477,482],
[505,517,530,478,504,498,497,0,499,515,506,499,515,489,487],
[512,510,535,482,489,492,499,501,0,497,496,497,494,471,482],
[528,507,542,463,505,472,489,485,503,0,488,477,525,477,464],
[507,518,528,484,487,488,512,494,504,512,0,500,510,481,485],
[524,508,536,485,493,488,518,501,503,523,500,0,515,509,506],
[506,507,514,488,506,495,498,485,506,475,490,485,0,480,489],
[494,501,530,497,519,504,523,511,529,523,519,491,520,0,497],
[514,502,542,504,514,502,518,513,518,536,515,494,511,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 189, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,500,483,531,515,503,527,500,488,481,497,521,496,527],
[484,0,488,452,480,492,475,503,460,473,490,490,506,491,488],
[500,512,0,473,496,488,482,509,487,486,486,491,491,494,511],
[517,548,527,0,530,519,559,542,522,516,498,530,549,507,535],
[469,520,504,470,0,502,479,480,492,489,498,478,497,498,498],
[485,508,512,481,498,0,491,489,493,508,491,483,509,505,500],
[497,525,518,441,521,509,0,524,462,491,479,490,513,515,504],
[473,497,491,458,520,511,476,0,488,493,481,488,514,477,488],
[500,540,513,478,508,507,538,512,0,516,492,483,510,497,514],
[512,527,514,484,511,492,509,507,484,0,488,492,525,504,506],
[519,510,514,502,502,509,521,519,508,512,0,475,533,498,514],
[503,510,509,470,522,517,510,512,517,508,525,0,517,511,505],
[479,494,509,451,503,491,487,486,490,475,467,483,0,491,507],
[504,509,506,493,502,495,485,523,503,496,502,489,509,0,498],
[473,512,489,465,502,500,496,512,486,494,486,495,493,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 190, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,507,524,515,499,491,487,496,509,511,526,482,500,490],
[528,0,492,542,536,514,533,508,514,503,518,534,510,517,515],
[493,508,0,514,514,506,528,491,530,493,513,541,501,522,479],
[476,458,486,0,494,507,497,507,493,478,461,504,473,492,476],
[485,464,486,506,0,488,515,491,503,476,497,506,490,484,468],
[501,486,494,493,512,0,509,479,514,486,516,526,508,513,512],
[509,467,472,503,485,491,0,506,496,477,476,522,480,487,496],
[513,492,509,493,509,521,494,0,505,502,489,551,495,490,487],
[504,486,470,507,497,486,504,495,0,490,493,522,494,485,490],
[491,497,507,522,524,514,523,498,510,0,539,540,518,493,504],
[489,482,487,539,503,484,524,511,507,461,0,514,488,515,493],
[474,466,459,496,494,474,478,449,478,460,486,0,477,474,483],
[518,490,499,527,510,492,520,505,506,482,512,523,0,496,492],
[500,483,478,508,516,487,513,510,515,507,485,526,504,0,494],
[510,485,521,524,532,488,504,513,510,496,507,517,508,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 191, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,522,530,526,514,520,503,497,548,481,487,506,512,543,508],
[478,0,540,515,514,488,491,492,539,471,521,499,517,557,506],
[470,460,0,503,477,469,468,445,493,453,473,483,459,515,469],
[474,485,497,0,488,477,468,452,487,469,475,499,478,502,458],
[486,486,523,512,0,515,480,471,522,478,470,497,506,532,517],
[480,512,531,523,485,0,477,472,551,489,510,504,504,537,487],
[497,509,532,532,520,523,0,501,523,500,492,520,502,529,521],
[503,508,555,548,529,528,499,0,540,483,512,514,521,539,497],
[452,461,507,513,478,449,477,460,0,466,470,510,472,502,481],
[519,529,547,531,522,511,500,517,534,0,547,503,514,532,514],
[513,479,527,525,530,490,508,488,530,453,0,516,488,534,515],
[494,501,517,501,503,496,480,486,490,497,484,0,471,506,463],
[488,483,541,522,494,496,498,479,528,486,512,529,0,529,489],
[457,443,485,498,468,463,471,461,498,468,466,494,471,0,453],
[492,494,531,542,483,513,479,503,519,486,485,537,511,547,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 192, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,572,499,535,541,520,526,557,536,527,516,480,522,502,514],
[428,0,462,498,500,486,417,501,500,443,417,464,499,414,479],
[501,538,0,524,510,530,492,560,533,497,474,544,521,462,525],
[465,502,476,0,500,499,462,499,526,445,468,454,527,440,517],
[459,500,490,500,0,476,471,483,535,469,432,483,523,445,531],
[480,514,470,501,524,0,457,538,503,477,462,524,497,441,550],
[474,583,508,538,529,543,0,575,513,504,466,501,552,466,571],
[443,499,440,501,517,462,425,0,466,472,484,452,488,434,508],
[464,500,467,474,465,497,487,534,0,458,433,452,477,437,511],
[473,557,503,555,531,523,496,528,542,0,492,484,525,477,562],
[484,583,526,532,568,538,534,516,567,508,0,513,516,484,566],
[520,536,456,546,517,476,499,548,548,516,487,0,520,506,545],
[478,501,479,473,477,503,448,512,523,475,484,480,0,424,511],
[498,586,538,560,555,559,534,566,563,523,516,494,576,0,598],
[486,521,475,483,469,450,429,492,489,438,434,455,489,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 193, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,523,506,512,515,509,504,495,519,487,496,500,517,504,496],
[477,0,496,510,515,486,479,477,495,487,472,514,486,490,495],
[494,504,0,504,506,502,507,480,505,489,503,510,522,502,529],
[488,490,496,0,482,506,482,497,503,489,493,508,486,490,513],
[485,485,494,518,0,498,505,470,510,490,486,507,497,475,495],
[491,514,498,494,502,0,492,480,488,495,488,505,491,485,491],
[496,521,493,518,495,508,0,497,524,498,489,512,511,500,492],
[505,523,520,503,530,520,503,0,520,488,514,524,520,485,510],
[481,505,495,497,490,512,476,480,0,504,475,503,490,485,502],
[513,513,511,511,510,505,502,512,496,0,493,505,518,494,483],
[504,528,497,507,514,512,511,486,525,507,0,517,484,518,508],
[500,486,490,492,493,495,488,476,497,495,483,0,500,484,493],
[483,514,478,514,503,509,489,480,510,482,516,500,0,486,512],
[496,510,498,510,525,515,500,515,515,506,482,516,514,0,519],
[504,505,471,487,505,509,508,490,498,517,492,507,488,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 194, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,525,505,486,505,465,468,510,499,524,518,521,435,559],
[503,0,508,494,511,540,446,530,495,519,527,542,544,486,539],
[475,492,0,494,523,497,459,549,479,578,491,548,517,490,538],
[495,506,506,0,524,518,479,504,508,505,527,551,512,554,521],
[514,489,477,476,0,455,498,524,521,560,577,548,468,506,480],
[495,460,503,482,545,0,479,562,503,574,526,619,469,512,487],
[535,554,541,521,502,521,0,549,488,551,534,540,459,499,533],
[532,470,451,496,476,438,451,0,494,538,521,473,447,489,483],
[490,505,521,492,479,497,512,506,0,553,500,577,506,474,570],
[501,481,422,495,440,426,449,462,447,0,523,474,437,410,458],
[476,473,509,473,423,474,466,479,500,477,0,515,445,462,500],
[482,458,452,449,452,381,460,527,423,526,485,0,436,392,456],
[479,456,483,488,532,531,541,553,494,563,555,564,0,456,504],
[565,514,510,446,494,488,501,511,526,590,538,608,544,0,560],
[441,461,462,479,520,513,467,517,430,542,500,544,496,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 195, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,559,503,475,534,484,508,495,505,526,484,472,537,467],
[501,0,574,543,519,568,506,506,525,524,509,489,452,505,535],
[441,426,0,455,473,500,424,478,428,477,438,445,425,457,432],
[497,457,545,0,499,501,480,510,462,514,501,460,472,496,510],
[525,481,527,501,0,498,513,498,471,524,551,468,442,493,507],
[466,432,500,499,502,0,467,488,409,510,468,468,408,489,493],
[516,494,576,520,487,533,0,498,485,537,533,469,495,529,479],
[492,494,522,490,502,512,502,0,491,490,497,478,447,525,469],
[505,475,572,538,529,591,515,509,0,526,529,513,462,493,508],
[495,476,523,486,476,490,463,510,474,0,490,440,382,513,469],
[474,491,562,499,449,532,467,503,471,510,0,472,451,459,479],
[516,511,555,540,532,532,531,522,487,560,528,0,500,532,516],
[528,548,575,528,558,592,505,553,538,618,549,500,0,567,538],
[463,495,543,504,507,511,471,475,507,487,541,468,433,0,484],
[533,465,568,490,493,507,521,531,492,531,521,484,462,516,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 196, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,530,480,480,498,476,479,485,503,499,510,460,493,469,509],
[470,0,489,474,531,475,491,478,490,500,479,473,506,458,483],
[520,511,0,508,529,509,518,522,520,534,509,487,552,475,514],
[520,526,492,0,533,518,500,507,512,498,520,481,536,488,525],
[502,469,471,467,0,486,495,481,512,471,511,499,509,481,482],
[524,525,491,482,514,0,459,498,509,457,493,483,538,476,510],
[521,509,482,500,505,541,0,484,495,519,542,509,522,496,492],
[515,522,478,493,519,502,516,0,517,512,528,489,511,476,499],
[497,510,480,488,488,491,505,483,0,480,520,488,507,461,520],
[501,500,466,502,529,543,481,488,520,0,519,481,550,500,488],
[490,521,491,480,489,507,458,472,480,481,0,488,495,467,498],
[540,527,513,519,501,517,491,511,512,519,512,0,538,488,496],
[507,494,448,464,491,462,478,489,493,450,505,462,0,459,472],
[531,542,525,512,519,524,504,524,539,500,533,512,541,0,510],
[491,517,486,475,518,490,508,501,480,512,502,504,528,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 197, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,507,465,510,508,522,521,475,517,472,469,473,480,472],
[519,0,494,476,563,502,505,534,540,484,507,470,521,510,525],
[493,506,0,444,537,470,486,495,460,496,475,474,497,501,514],
[535,524,556,0,556,526,510,540,532,547,506,480,504,548,532],
[490,437,463,444,0,495,436,477,468,512,424,422,460,489,470],
[492,498,530,474,505,0,505,492,458,508,505,451,475,502,483],
[478,495,514,490,564,495,0,513,532,505,502,493,528,514,508],
[479,466,505,460,523,508,487,0,461,503,501,467,483,493,509],
[525,460,540,468,532,542,468,539,0,518,505,475,503,498,516],
[483,516,504,453,488,492,495,497,482,0,465,484,488,497,456],
[528,493,525,494,576,495,498,499,495,535,0,500,511,529,505],
[531,530,526,520,578,549,507,533,525,516,500,0,509,525,526],
[527,479,503,496,540,525,472,517,497,512,489,491,0,513,481],
[520,490,499,452,511,498,486,507,502,503,471,475,487,0,472],
[528,475,486,468,530,517,492,491,484,544,495,474,519,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 198, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,475,493,558,503,382,521,525,424,498,439,434,460,522],
[550,0,523,404,599,512,394,494,578,432,515,470,472,555,572],
[525,477,0,459,470,489,332,442,497,508,461,489,504,501,430],
[507,596,541,0,476,451,461,547,617,526,478,542,529,566,558],
[442,401,530,524,0,446,386,465,577,460,476,465,507,420,544],
[497,488,511,549,554,0,460,460,601,436,503,428,475,465,592],
[618,606,668,539,614,540,0,593,651,623,473,579,595,599,593],
[479,506,558,453,535,540,407,0,543,461,451,494,521,505,598],
[475,422,503,383,423,399,349,457,0,422,440,423,345,435,520],
[576,568,492,474,540,564,377,539,578,0,488,468,503,531,550],
[502,485,539,522,524,497,527,549,560,512,0,496,483,530,623],
[561,530,511,458,535,572,421,506,577,532,504,0,475,512,607],
[566,528,496,471,493,525,405,479,655,497,517,525,0,528,545],
[540,445,499,434,580,535,401,495,565,469,470,488,472,0,539],
[478,428,570,442,456,408,407,402,480,450,377,393,455,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 199, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,523,480,539,492,508,489,547,506,516,553,524,504,535],
[505,0,494,489,500,511,497,493,545,518,536,530,517,519,508],
[477,506,0,462,506,515,506,472,521,515,530,540,550,499,508],
[520,511,538,0,518,520,509,520,550,514,525,564,530,492,497],
[461,500,494,482,0,493,456,460,513,449,477,511,493,482,455],
[508,489,485,480,507,0,491,503,552,503,533,518,517,514,512],
[492,503,494,491,544,509,0,493,523,497,506,548,499,469,505],
[511,507,528,480,540,497,507,0,539,525,506,562,511,511,542],
[453,455,479,450,487,448,477,461,0,467,489,513,488,463,476],
[494,482,485,486,551,497,503,475,533,0,516,512,535,476,502],
[484,464,470,475,523,467,494,494,511,484,0,532,514,498,479],
[447,470,460,436,489,482,452,438,487,488,468,0,472,475,459],
[476,483,450,470,507,483,501,489,512,465,486,528,0,463,501],
[496,481,501,508,518,486,531,489,537,524,502,525,537,0,534],
[465,492,492,503,545,488,495,458,524,498,521,541,499,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 1000, 200, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbd/mebbd_15_1000.csv", index=False, header=False)
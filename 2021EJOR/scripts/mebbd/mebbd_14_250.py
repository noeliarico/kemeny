
import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg
from kemeny import sc

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,120,123,135,130,119,118,114,122,127,137,127,122,121],
[130,0,137,131,133,135,121,116,122,141,145,133,145,123],
[127,113,0,138,130,123,119,120,123,141,136,132,127,125],
[115,119,112,0,137,111,112,128,111,120,124,122,127,114],
[120,117,120,113,0,114,105,113,108,128,132,115,131,119],
[131,115,127,139,136,0,125,113,125,132,146,134,134,119],
[132,129,131,138,145,125,0,128,127,141,137,155,135,124],
[136,134,130,122,137,137,122,0,127,131,142,131,135,125],
[128,128,127,139,142,125,123,123,0,134,146,139,137,120],
[123,109,109,130,122,118,109,119,116,0,128,124,122,123],
[113,105,114,126,118,104,113,108,104,122,0,116,117,101],
[123,117,118,128,135,116,95,119,111,126,134,0,141,114],
[128,105,123,123,119,116,115,115,113,128,133,109,0,121],
[129,127,125,136,131,131,126,125,130,127,149,136,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 1, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,148,141,121,114,158,139,150,153,147,150,146,103],
[119,0,146,133,109,104,118,102,102,134,130,129,125,138],
[102,104,0,100,114,108,102,124,132,119,143,129,103,117],
[109,117,150,0,119,94,125,119,118,113,106,122,106,105],
[129,141,136,131,0,136,112,157,152,105,156,143,116,119],
[136,146,142,156,114,0,125,126,137,131,157,140,128,116],
[92,132,148,125,138,125,0,134,147,117,114,142,131,113],
[111,148,126,131,93,124,116,0,141,128,151,141,133,125],
[100,148,118,132,98,113,103,109,0,135,97,154,130,125],
[97,116,131,137,145,119,133,122,115,0,142,136,116,119],
[103,120,107,144,94,93,136,99,153,108,0,136,111,132],
[100,121,121,128,107,110,108,109,96,114,114,0,127,139],
[104,125,147,144,134,122,119,117,120,134,139,123,0,135],
[147,112,133,145,131,134,137,125,125,131,118,111,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 2, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,120,133,109,130,111,95,115,142,100,129,122,132],
[134,0,123,115,102,128,116,127,139,144,132,123,121,124],
[130,127,0,158,128,142,122,129,154,135,133,141,136,128],
[117,135,92,0,125,134,106,111,145,138,129,121,125,129],
[141,148,122,125,0,126,132,131,145,150,163,142,159,153],
[120,122,108,116,124,0,105,106,104,132,104,112,114,129],
[139,134,128,144,118,145,0,121,162,130,130,141,132,149],
[155,123,121,139,119,144,129,0,148,144,131,148,130,121],
[135,111,96,105,105,146,88,102,0,122,114,119,126,129],
[108,106,115,112,100,118,120,106,128,0,121,110,124,114],
[150,118,117,121,87,146,120,119,136,129,0,134,131,132],
[121,127,109,129,108,138,109,102,131,140,116,0,139,133],
[128,129,114,125,91,136,118,120,124,126,119,111,0,130],
[118,126,122,121,97,121,101,129,121,136,118,117,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 3, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,135,121,123,121,138,126,119,149,128,107,105,121],
[122,0,112,120,114,134,128,118,127,128,120,117,119,119],
[115,138,0,123,119,120,133,106,131,117,124,123,126,125],
[129,130,127,0,131,137,126,115,126,119,137,120,125,135],
[127,136,131,119,0,134,122,121,124,125,129,125,115,127],
[129,116,130,113,116,0,131,114,120,116,122,105,120,120],
[112,122,117,124,128,119,0,109,121,123,123,115,120,125],
[124,132,144,135,129,136,141,0,132,125,120,121,120,128],
[131,123,119,124,126,130,129,118,0,129,124,121,130,123],
[101,122,133,131,125,134,127,125,121,0,123,122,119,127],
[122,130,126,113,121,128,127,130,126,127,0,110,124,124],
[143,133,127,130,125,145,135,129,129,128,140,0,127,136],
[145,131,124,125,135,130,130,130,120,131,126,123,0,125],
[129,131,125,115,123,130,125,122,127,123,126,114,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 4, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,134,146,146,144,108,134,122,133,135,155,125,136],
[112,0,124,130,130,128,110,105,107,132,108,140,124,123],
[116,126,0,145,126,140,110,117,130,121,117,140,117,127],
[104,120,105,0,112,121,92,109,99,114,101,133,110,106],
[104,120,124,138,0,147,113,128,108,132,117,137,114,127],
[106,122,110,129,103,0,93,119,119,120,85,124,108,112],
[142,140,140,158,137,157,0,114,132,144,122,144,124,133],
[116,145,133,141,122,131,136,0,131,137,127,134,133,125],
[128,143,120,151,142,131,118,119,0,144,124,149,143,137],
[117,118,129,136,118,130,106,113,106,0,110,139,110,109],
[115,142,133,149,133,165,128,123,126,140,0,147,139,136],
[95,110,110,117,113,126,106,116,101,111,103,0,113,117],
[125,126,133,140,136,142,126,117,107,140,111,137,0,121],
[114,127,123,144,123,138,117,125,113,141,114,133,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 5, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,135,139,134,135,131,140,120,132,140,125,130,130],
[125,0,135,128,140,126,118,129,121,134,123,114,127,138],
[115,115,0,125,134,114,115,126,116,122,107,110,123,117],
[111,122,125,0,123,117,123,123,116,119,116,114,128,120],
[116,110,116,127,0,130,122,119,113,121,110,115,132,116],
[115,124,136,133,120,0,116,131,118,122,110,131,130,112],
[119,132,135,127,128,134,0,142,117,122,135,112,122,109],
[110,121,124,127,131,119,108,0,121,117,108,103,120,124],
[130,129,134,134,137,132,133,129,0,128,137,122,132,127],
[118,116,128,131,129,128,128,133,122,0,127,113,128,116],
[110,127,143,134,140,140,115,142,113,123,0,135,132,112],
[125,136,140,136,135,119,138,147,128,137,115,0,134,142],
[120,123,127,122,118,120,128,130,118,122,118,116,0,115],
[120,112,133,130,134,138,141,126,123,134,138,108,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 6, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,119,116,138,123,123,119,115,131,115,134,119,122],
[119,0,119,125,118,107,117,116,109,125,111,123,117,124],
[131,131,0,127,137,120,128,122,122,146,125,117,111,121],
[134,125,123,0,135,127,115,121,110,134,108,123,117,121],
[112,132,113,115,0,115,124,118,114,135,101,116,110,111],
[127,143,130,123,135,0,129,126,127,141,123,132,122,127],
[127,133,122,135,126,121,0,124,124,139,126,128,128,135],
[131,134,128,129,132,124,126,0,123,142,127,125,115,134],
[135,141,128,140,136,123,126,127,0,155,121,130,125,140],
[119,125,104,116,115,109,111,108,95,0,102,111,108,122],
[135,139,125,142,149,127,124,123,129,148,0,137,128,136],
[116,127,133,127,134,118,122,125,120,139,113,0,118,127],
[131,133,139,133,140,128,122,135,125,142,122,132,0,134],
[128,126,129,129,139,123,115,116,110,128,114,123,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 7, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,119,132,131,123,105,130,138,118,121,124,121,132],
[127,0,136,117,129,115,132,134,132,121,120,128,113,131],
[131,114,0,111,128,110,107,130,126,120,107,131,112,128],
[118,133,139,0,136,128,127,144,145,124,125,135,118,133],
[119,121,122,114,0,128,120,122,130,128,118,128,112,135],
[127,135,140,122,122,0,129,139,136,131,117,125,113,130],
[145,118,143,123,130,121,0,136,144,128,126,149,123,131],
[120,116,120,106,128,111,114,0,126,112,118,117,113,117],
[112,118,124,105,120,114,106,124,0,116,100,118,107,115],
[132,129,130,126,122,119,122,138,134,0,125,127,127,143],
[129,130,143,125,132,133,124,132,150,125,0,137,129,145],
[126,122,119,115,122,125,101,133,132,123,113,0,115,131],
[129,137,138,132,138,137,127,137,143,123,121,135,0,135],
[118,119,122,117,115,120,119,133,135,107,105,119,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 8, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,131,128,128,109,125,127,128,117,125,141,118,145],
[143,0,114,123,130,122,138,135,119,141,129,160,139,150],
[119,136,0,129,130,117,126,139,127,118,128,153,129,140],
[122,127,121,0,116,120,116,122,139,126,140,154,125,133],
[122,120,120,134,0,122,120,122,119,130,119,146,110,133],
[141,128,133,130,128,0,153,131,124,118,136,153,143,155],
[125,112,124,134,130,97,0,120,110,121,129,143,132,135],
[123,115,111,128,128,119,130,0,123,105,123,144,121,117],
[122,131,123,111,131,126,140,127,0,118,136,157,129,140],
[133,109,132,124,120,132,129,145,132,0,127,153,136,150],
[125,121,122,110,131,114,121,127,114,123,0,135,131,129],
[109,90,97,96,104,97,107,106,93,97,115,0,99,112],
[132,111,121,125,140,107,118,129,121,114,119,151,0,157],
[105,100,110,117,117,95,115,133,110,100,121,138,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 9, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,126,128,140,157,126,117,128,140,140,129,119,111],
[106,0,109,115,133,137,120,110,122,138,137,127,116,125],
[124,141,0,138,148,157,121,126,141,152,139,130,148,139],
[122,135,112,0,133,132,118,123,119,135,134,130,142,131],
[110,117,102,117,0,128,115,117,108,126,122,106,122,115],
[93,113,93,118,122,0,97,96,111,112,118,109,110,112],
[124,130,129,132,135,153,0,130,130,141,139,130,143,134],
[133,140,124,127,133,154,120,0,116,138,127,131,129,126],
[122,128,109,131,142,139,120,134,0,137,139,125,118,141],
[110,112,98,115,124,138,109,112,113,0,117,103,118,113],
[110,113,111,116,128,132,111,123,111,133,0,111,119,119],
[121,123,120,120,144,141,120,119,125,147,139,0,129,135],
[131,134,102,108,128,140,107,121,132,132,131,121,0,112],
[139,125,111,119,135,138,116,124,109,137,131,115,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 10, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,81,114,131,135,120,82,97,90,108,140,111,123],
[139,0,93,148,158,126,147,125,103,141,142,96,125,130],
[169,157,0,110,182,111,106,130,168,157,161,122,152,148],
[136,102,140,0,132,152,121,133,100,118,125,138,148,145],
[119,92,68,118,0,81,121,70,72,100,88,117,122,77],
[115,124,139,98,169,0,90,136,110,126,102,107,120,179],
[130,103,144,129,129,160,0,111,95,131,116,126,94,116],
[168,125,120,117,180,114,139,0,110,107,133,137,127,142],
[153,147,82,150,178,140,155,140,0,174,88,118,151,118],
[160,109,93,132,150,124,119,143,76,0,95,110,111,115],
[142,108,89,125,162,148,134,117,162,155,0,118,149,111],
[110,154,128,112,133,143,124,113,132,140,132,0,118,139],
[139,125,98,102,128,130,156,123,99,139,101,132,0,144],
[127,120,102,105,173,71,134,108,132,135,139,111,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 11, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,126,119,128,121,130,132,136,129,132,139,120,128],
[114,0,121,110,117,115,124,117,136,120,136,124,106,117],
[124,129,0,123,123,123,132,122,135,128,137,138,115,127],
[131,140,127,0,124,127,135,118,129,136,140,132,126,129],
[122,133,127,126,0,124,129,120,133,135,137,135,120,131],
[129,135,127,123,126,0,125,123,134,132,137,141,126,122],
[120,126,118,115,121,125,0,111,124,120,125,125,126,123],
[118,133,128,132,130,127,139,0,135,140,138,139,129,130],
[114,114,115,121,117,116,126,115,0,120,121,121,112,123],
[121,130,122,114,115,118,130,110,130,0,129,129,117,121],
[118,114,113,110,113,113,125,112,129,121,0,125,116,123],
[111,126,112,118,115,109,125,111,129,121,125,0,115,111],
[130,144,135,124,130,124,124,121,138,133,134,135,0,131],
[122,133,123,121,119,128,127,120,127,129,127,139,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 12, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,124,129,132,118,130,108,133,124,119,110,109,132],
[120,0,119,122,127,116,133,105,130,123,121,117,111,138],
[126,131,0,115,132,123,123,116,128,138,127,125,120,143],
[121,128,135,0,136,129,135,120,138,119,124,136,117,153],
[118,123,118,114,0,119,118,107,116,121,115,123,118,140],
[132,134,127,121,131,0,144,130,136,129,124,123,122,136],
[120,117,127,115,132,106,0,117,135,122,114,133,121,131],
[142,145,134,130,143,120,133,0,141,134,132,131,125,157],
[117,120,122,112,134,114,115,109,0,121,118,118,113,142],
[126,127,112,131,129,121,128,116,129,0,118,114,119,145],
[131,129,123,126,135,126,136,118,132,132,0,127,129,143],
[140,133,125,114,127,127,117,119,132,136,123,0,117,134],
[141,139,130,133,132,128,129,125,137,131,121,133,0,159],
[118,112,107,97,110,114,119,93,108,105,107,116,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 13, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,117,105,116,125,113,118,130,124,118,113,108,125],
[133,0,113,119,115,131,112,125,123,139,115,118,108,134],
[133,137,0,124,133,144,117,141,144,135,122,131,117,131],
[145,131,126,0,127,148,130,126,121,137,114,128,122,144],
[134,135,117,123,0,130,119,121,132,142,125,107,102,125],
[125,119,106,102,120,0,101,107,129,131,113,116,104,146],
[137,138,133,120,131,149,0,124,136,141,117,146,118,160],
[132,125,109,124,129,143,126,0,129,128,115,121,126,152],
[120,127,106,129,118,121,114,121,0,129,116,114,104,120],
[126,111,115,113,108,119,109,122,121,0,104,124,113,134],
[132,135,128,136,125,137,133,135,134,146,0,135,124,148],
[137,132,119,122,143,134,104,129,136,126,115,0,113,130],
[142,142,133,128,148,146,132,124,146,137,126,137,0,140],
[125,116,119,106,125,104,90,98,130,116,102,120,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 14, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,121,120,125,131,124,128,128,119,133,115,133,137],
[144,0,125,139,132,144,146,146,135,156,155,138,155,147],
[129,125,0,121,129,132,128,124,125,138,140,118,127,139],
[130,111,129,0,124,127,121,127,127,139,130,112,134,120],
[125,118,121,126,0,136,125,122,122,129,135,125,139,124],
[119,106,118,123,114,0,120,129,110,123,131,110,125,119],
[126,104,122,129,125,130,0,132,128,133,136,115,130,128],
[122,104,126,123,128,121,118,0,117,113,126,116,131,122],
[122,115,125,123,128,140,122,133,0,125,130,113,139,128],
[131,94,112,111,121,127,117,137,125,0,130,105,131,127],
[117,95,110,120,115,119,114,124,120,120,0,102,120,122],
[135,112,132,138,125,140,135,134,137,145,148,0,146,129],
[117,95,123,116,111,125,120,119,111,119,130,104,0,116],
[113,103,111,130,126,131,122,128,122,123,128,121,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 15, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,128,146,118,131,115,130,136,140,133,131,135,134],
[123,0,117,126,125,125,116,120,129,125,121,125,119,129],
[122,133,0,136,124,131,123,133,129,135,142,128,127,134],
[104,124,114,0,110,126,104,122,118,122,131,126,121,123],
[132,125,126,140,0,127,126,130,131,140,130,134,131,126],
[119,125,119,124,123,0,118,115,120,127,133,132,119,125],
[135,134,127,146,124,132,0,138,143,141,142,137,126,147],
[120,130,117,128,120,135,112,0,128,131,129,128,120,135],
[114,121,121,132,119,130,107,122,0,130,133,126,121,124],
[110,125,115,128,110,123,109,119,120,0,126,124,109,111],
[117,129,108,119,120,117,108,121,117,124,0,119,105,117],
[119,125,122,124,116,118,113,122,124,126,131,0,114,132],
[115,131,123,129,119,131,124,130,129,141,145,136,0,131],
[116,121,116,127,124,125,103,115,126,139,133,118,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 16, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,120,124,111,135,117,132,121,110,112,124,114,121],
[148,0,139,150,119,119,110,138,134,147,118,139,124,122],
[130,111,0,140,120,107,107,112,112,123,121,133,121,120],
[126,100,110,0,113,109,95,109,118,121,114,123,122,105],
[139,131,130,137,0,137,117,136,129,114,123,133,134,128],
[115,131,143,141,113,0,126,122,121,137,138,121,126,127],
[133,140,143,155,133,124,0,132,126,141,133,137,137,129],
[118,112,138,141,114,128,118,0,133,119,122,112,132,136],
[129,116,138,132,121,129,124,117,0,130,135,123,135,132],
[140,103,127,129,136,113,109,131,120,0,128,123,136,114],
[138,132,129,136,127,112,117,128,115,122,0,150,125,117],
[126,111,117,127,117,129,113,138,127,127,100,0,127,129],
[136,126,129,128,116,124,113,118,115,114,125,123,0,116],
[129,128,130,145,122,123,121,114,118,136,133,121,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 17, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,121,159,96,111,139,136,109,118,123,130,150],
[147,0,123,119,144,119,122,147,121,123,112,140,127,140],
[148,127,0,127,150,125,127,150,145,129,133,142,132,148],
[129,131,123,0,152,116,129,136,148,136,128,147,136,144],
[91,106,100,98,0,102,101,115,110,107,119,116,133,133],
[154,131,125,134,148,0,132,156,139,124,145,155,138,155],
[139,128,123,121,149,118,0,136,133,117,112,142,142,157],
[111,103,100,114,135,94,114,0,120,107,104,115,120,114],
[114,129,105,102,140,111,117,130,0,131,125,132,135,150],
[141,127,121,114,143,126,133,143,119,0,126,152,134,146],
[132,138,117,122,131,105,138,146,125,124,0,128,143,158],
[127,110,108,103,134,95,108,135,118,98,122,0,121,137],
[120,123,118,114,117,112,108,130,115,116,107,129,0,130],
[100,110,102,106,117,95,93,136,100,104,92,113,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 18, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,119,107,113,109,108,104,111,106,125,140,90,130],
[138,0,130,134,141,135,128,147,132,129,121,149,109,152],
[131,120,0,105,123,114,112,110,110,100,118,141,95,124],
[143,116,145,0,151,138,142,132,125,121,124,155,114,137],
[137,109,127,99,0,124,127,111,112,108,129,162,103,131],
[141,115,136,112,126,0,135,122,120,100,133,151,111,145],
[142,122,138,108,123,115,0,116,112,95,121,149,111,131],
[146,103,140,118,139,128,134,0,116,131,121,171,123,139],
[139,118,140,125,138,130,138,134,0,134,132,145,135,146],
[144,121,150,129,142,150,155,119,116,0,139,153,127,143],
[125,129,132,126,121,117,129,129,118,111,0,134,111,125],
[110,101,109,95,88,99,101,79,105,97,116,0,95,116],
[160,141,155,136,147,139,139,127,115,123,139,155,0,140],
[120,98,126,113,119,105,119,111,104,107,125,134,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 19, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,125,112,140,127,117,123,138,139,117,118,97,123],
[114,0,120,116,125,107,119,103,113,104,114,102,106,106],
[125,130,0,125,120,120,130,110,110,122,126,104,111,120],
[138,134,125,0,133,131,134,115,134,124,121,120,131,130],
[110,125,130,117,0,119,129,105,115,109,108,110,106,117],
[123,143,130,119,131,0,127,110,115,128,128,123,125,115],
[133,131,120,116,121,123,0,116,136,123,116,106,116,118],
[127,147,140,135,145,140,134,0,120,135,126,125,116,128],
[112,137,140,116,135,135,114,130,0,122,111,120,119,121],
[111,146,128,126,141,122,127,115,128,0,127,110,114,127],
[133,136,124,129,142,122,134,124,139,123,0,119,121,131],
[132,148,146,130,140,127,144,125,130,140,131,0,127,139],
[153,144,139,119,144,125,134,134,131,136,129,123,0,135],
[127,144,130,120,133,135,132,122,129,123,119,111,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 20, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,122,129,124,134,130,115,122,137,124,140,133,128],
[118,0,130,109,121,126,122,119,119,121,120,130,132,127],
[128,120,0,127,128,131,129,118,118,125,118,137,130,127],
[121,141,123,0,132,139,135,121,129,141,127,132,130,138],
[126,129,122,118,0,134,123,128,135,140,132,139,123,140],
[116,124,119,111,116,0,133,118,123,134,116,132,121,125],
[120,128,121,115,127,117,0,122,125,130,117,127,124,123],
[135,131,132,129,122,132,128,0,121,142,126,136,135,132],
[128,131,132,121,115,127,125,129,0,135,130,133,132,139],
[113,129,125,109,110,116,120,108,115,0,120,117,123,121],
[126,130,132,123,118,134,133,124,120,130,0,131,125,125],
[110,120,113,118,111,118,123,114,117,133,119,0,121,124],
[117,118,120,120,127,129,126,115,118,127,125,129,0,124],
[122,123,123,112,110,125,127,118,111,129,125,126,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 21, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,136,133,121,119,125,134,117,122,121,123,128,139],
[135,0,128,129,119,133,131,135,113,128,123,124,137,135],
[114,122,0,112,122,120,131,111,119,113,114,116,133,128],
[117,121,138,0,117,135,128,127,131,131,129,122,136,130],
[129,131,128,133,0,136,128,126,119,131,123,127,129,130],
[131,117,130,115,114,0,119,113,122,124,115,115,124,122],
[125,119,119,122,122,131,0,118,113,120,126,116,126,116],
[116,115,139,123,124,137,132,0,118,136,129,129,137,131],
[133,137,131,119,131,128,137,132,0,132,125,120,130,128],
[128,122,137,119,119,126,130,114,118,0,123,123,130,129],
[129,127,136,121,127,135,124,121,125,127,0,123,130,139],
[127,126,134,128,123,135,134,121,130,127,127,0,141,125],
[122,113,117,114,121,126,124,113,120,120,120,109,0,116],
[111,115,122,120,120,128,134,119,122,121,111,125,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 22, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,125,133,126,132,105,121,116,135,114,121,113,122],
[126,0,129,125,126,124,117,126,117,123,120,118,118,108],
[125,121,0,127,121,128,126,119,126,123,131,127,125,125],
[117,125,123,0,114,116,116,122,112,120,111,126,123,128],
[124,124,129,136,0,132,118,131,119,122,119,121,119,132],
[118,126,122,134,118,0,118,126,129,121,126,123,122,114],
[145,133,124,134,132,132,0,116,118,126,127,128,122,145],
[129,124,131,128,119,124,134,0,120,120,126,125,116,127],
[134,133,124,138,131,121,132,130,0,123,120,128,121,130],
[115,127,127,130,128,129,124,130,127,0,122,122,119,127],
[136,130,119,139,131,124,123,124,130,128,0,125,128,127],
[129,132,123,124,129,127,122,125,122,128,125,0,125,123],
[137,132,125,127,131,128,128,134,129,131,122,125,0,133],
[128,142,125,122,118,136,105,123,120,123,123,127,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 23, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,129,150,126,129,127,138,129,132,119,129,140,155],
[119,0,128,153,136,125,132,136,121,130,126,112,137,141],
[121,122,0,144,142,133,129,123,125,136,117,122,138,143],
[100,97,106,0,110,116,113,114,108,121,91,101,121,123],
[124,114,108,140,0,123,110,132,108,118,111,105,121,131],
[121,125,117,134,127,0,110,130,127,130,112,125,129,115],
[123,118,121,137,140,140,0,129,116,127,96,123,123,149],
[112,114,127,136,118,120,121,0,111,124,113,107,131,129],
[121,129,125,142,142,123,134,139,0,136,103,138,134,132],
[118,120,114,129,132,120,123,126,114,0,115,129,143,136],
[131,124,133,159,139,138,154,137,147,135,0,129,136,145],
[121,138,128,149,145,125,127,143,112,121,121,0,140,133],
[110,113,112,129,129,121,127,119,116,107,114,110,0,111],
[95,109,107,127,119,135,101,121,118,114,105,117,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 24, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,119,131,118,125,140,133,129,143,129,143,132,131],
[127,0,121,132,128,131,130,131,123,129,121,147,129,133],
[131,129,0,129,131,136,133,120,124,131,133,142,137,134],
[119,118,121,0,119,116,131,131,115,123,129,133,124,122],
[132,122,119,131,0,127,138,128,118,128,119,143,133,126],
[125,119,114,134,123,0,138,139,125,134,130,137,124,124],
[110,120,117,119,112,112,0,128,118,116,117,134,112,114],
[117,119,130,119,122,111,122,0,121,135,121,137,117,126],
[121,127,126,135,132,125,132,129,0,128,136,150,127,133],
[107,121,119,127,122,116,134,115,122,0,120,144,126,119],
[121,129,117,121,131,120,133,129,114,130,0,133,139,118],
[107,103,108,117,107,113,116,113,100,106,117,0,116,109],
[118,121,113,126,117,126,138,133,123,124,111,134,0,113],
[119,117,116,128,124,126,136,124,117,131,132,141,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 25, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,120,118,130,123,110,123,127,110,126,123,131,120],
[115,0,118,123,116,113,114,119,112,108,118,116,125,106],
[130,132,0,122,120,140,124,129,133,110,138,142,136,130],
[132,127,128,0,112,122,105,121,130,115,114,122,126,130],
[120,134,130,138,0,126,112,123,124,117,124,129,134,116],
[127,137,110,128,124,0,118,118,120,124,126,133,135,131],
[140,136,126,145,138,132,0,130,138,125,129,134,140,131],
[127,131,121,129,127,132,120,0,131,112,126,124,137,125],
[123,138,117,120,126,130,112,119,0,119,124,132,125,122],
[140,142,140,135,133,126,125,138,131,0,136,139,136,127],
[124,132,112,136,126,124,121,124,126,114,0,123,138,122],
[127,134,108,128,121,117,116,126,118,111,127,0,123,124],
[119,125,114,124,116,115,110,113,125,114,112,127,0,119],
[130,144,120,120,134,119,119,125,128,123,128,126,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 26, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,122,126,134,130,139,112,131,128,137,136,119,132],
[125,0,122,125,138,135,131,131,131,126,121,130,140,123],
[128,128,0,120,133,140,142,114,137,139,131,133,125,132],
[124,125,130,0,143,133,130,130,134,138,130,140,129,124],
[116,112,117,107,0,120,122,110,120,123,114,117,119,125],
[120,115,110,117,130,0,124,113,125,113,120,112,121,132],
[111,119,108,120,128,126,0,110,118,118,120,114,125,128],
[138,119,136,120,140,137,140,0,130,125,133,126,120,134],
[119,119,113,116,130,125,132,120,0,125,127,114,130,132],
[122,124,111,112,127,137,132,125,125,0,115,117,132,136],
[113,129,119,120,136,130,130,117,123,135,0,123,121,133],
[114,120,117,110,133,138,136,124,136,133,127,0,123,121],
[131,110,125,121,131,129,125,130,120,118,129,127,0,126],
[118,127,118,126,125,118,122,116,118,114,117,129,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 27, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,132,124,107,118,117,119,110,119,125,133,133,122],
[122,0,112,129,120,131,120,120,115,111,123,134,129,126],
[118,138,0,140,133,127,134,132,118,142,136,146,148,141],
[126,121,110,0,102,115,121,115,119,119,122,129,132,123],
[143,130,117,148,0,135,133,132,130,133,138,140,149,137],
[132,119,123,135,115,0,111,119,122,122,118,126,120,124],
[133,130,116,129,117,139,0,143,118,132,123,142,134,132],
[131,130,118,135,118,131,107,0,117,110,119,130,139,127],
[140,135,132,131,120,128,132,133,0,136,126,139,147,121],
[131,139,108,131,117,128,118,140,114,0,118,139,135,118],
[125,127,114,128,112,132,127,131,124,132,0,143,143,133],
[117,116,104,121,110,124,108,120,111,111,107,0,124,117],
[117,121,102,118,101,130,116,111,103,115,107,126,0,124],
[128,124,109,127,113,126,118,123,129,132,117,133,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 28, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,117,107,112,122,109,111,110,103,108,104,133,109],
[148,0,127,138,128,131,116,140,125,133,136,125,132,133],
[133,123,0,127,118,133,124,124,114,130,122,117,136,117],
[143,112,123,0,114,132,118,121,124,126,129,122,140,112],
[138,122,132,136,0,132,119,132,132,131,132,130,135,135],
[128,119,117,118,118,0,116,135,121,123,117,119,128,113],
[141,134,126,132,131,134,0,124,127,120,120,130,131,131],
[139,110,126,129,118,115,126,0,116,123,125,126,122,122],
[140,125,136,126,118,129,123,134,0,122,134,130,133,131],
[147,117,120,124,119,127,130,127,128,0,121,118,140,119],
[142,114,128,121,118,133,130,125,116,129,0,126,134,120],
[146,125,133,128,120,131,120,124,120,132,124,0,143,118],
[117,118,114,110,115,122,119,128,117,110,116,107,0,116],
[141,117,133,138,115,137,119,128,119,131,130,132,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 29, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,119,123,136,137,122,108,134,128,154,123,134,143],
[124,0,129,124,134,142,125,112,134,135,146,112,141,141],
[131,121,0,125,146,141,135,120,128,145,148,117,128,153],
[127,126,125,0,134,127,131,137,122,136,139,134,125,141],
[114,116,104,116,0,123,109,106,127,133,138,111,114,147],
[113,108,109,123,127,0,101,110,129,130,128,124,95,145],
[128,125,115,119,141,149,0,126,154,142,125,136,118,147],
[142,138,130,113,144,140,124,0,126,144,165,130,127,166],
[116,116,122,128,123,121,96,124,0,124,134,108,119,139],
[122,115,105,114,117,120,108,106,126,0,127,104,102,121],
[96,104,102,111,112,122,125,85,116,123,0,112,101,113],
[127,138,133,116,139,126,114,120,142,146,138,0,117,165],
[116,109,122,125,136,155,132,123,131,148,149,133,0,139],
[107,109,97,109,103,105,103,84,111,129,137,85,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 30, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,121,120,134,124,77,129,136,107,145,100,105,114],
[139,0,128,121,117,130,114,151,138,126,135,107,104,120],
[129,122,0,134,131,126,110,144,153,108,104,125,105,104],
[130,129,116,0,137,140,131,142,151,98,113,116,100,107],
[116,133,119,113,0,118,99,154,131,121,137,106,101,106],
[126,120,124,110,132,0,93,147,129,107,132,140,82,132],
[173,136,140,119,151,157,0,163,160,129,135,135,122,143],
[121,99,106,108,96,103,87,0,121,106,123,121,95,109],
[114,112,97,99,119,121,90,129,0,103,104,85,113,118],
[143,124,142,152,129,143,121,144,147,0,135,124,125,126],
[105,115,146,137,113,118,115,127,146,115,0,114,96,127],
[150,143,125,134,144,110,115,129,165,126,136,0,126,126],
[145,146,145,150,149,168,128,155,137,125,154,124,0,123],
[136,130,146,143,144,118,107,141,132,124,123,124,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 31, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,106,134,127,124,127,138,128,141,131,136,114,107],
[109,0,127,84,93,93,91,87,110,112,132,109,112,95],
[144,123,0,111,91,101,111,98,145,132,112,124,98,91],
[116,166,139,0,103,131,122,109,128,115,130,135,139,107],
[123,157,159,147,0,116,125,122,112,124,164,166,158,127],
[126,157,149,119,134,0,117,109,142,155,128,153,134,124],
[123,159,139,128,125,133,0,118,133,128,149,157,110,120],
[112,163,152,141,128,141,132,0,140,139,125,144,136,129],
[122,140,105,122,138,108,117,110,0,141,135,137,124,103],
[109,138,118,135,126,95,122,111,109,0,116,141,130,110],
[119,118,138,120,86,122,101,125,115,134,0,136,110,112],
[114,141,126,115,84,97,93,106,113,109,114,0,98,100],
[136,138,152,111,92,116,140,114,126,120,140,152,0,123],
[143,155,159,143,123,126,130,121,147,140,138,150,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 32, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,110,120,133,134,122,111,143,120,130,108,120,125],
[139,0,116,135,136,137,132,123,150,139,135,130,131,131],
[140,134,0,135,151,139,137,132,135,145,138,139,148,125],
[130,115,115,0,146,130,130,114,136,130,128,123,125,131],
[117,114,99,104,0,108,112,101,126,116,123,111,111,124],
[116,113,111,120,142,0,124,112,132,133,121,120,119,124],
[128,118,113,120,138,126,0,121,131,130,131,125,124,132],
[139,127,118,136,149,138,129,0,148,141,123,129,139,130],
[107,100,115,114,124,118,119,102,0,106,117,110,116,111],
[130,111,105,120,134,117,120,109,144,0,126,126,118,134],
[120,115,112,122,127,129,119,127,133,124,0,123,128,119],
[142,120,111,127,139,130,125,121,140,124,127,0,129,128],
[130,119,102,125,139,131,126,111,134,132,122,121,0,126],
[125,119,125,119,126,126,118,120,139,116,131,122,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 33, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,141,114,114,127,124,109,120,115,127,111,133,122],
[130,0,130,133,117,128,127,109,123,111,120,127,132,115],
[109,120,0,109,103,123,115,104,101,103,108,98,123,109],
[136,117,141,0,124,133,128,121,122,119,119,117,129,121],
[136,133,147,126,0,127,126,119,126,117,129,128,138,127],
[123,122,127,117,123,0,127,117,121,115,124,112,132,113],
[126,123,135,122,124,123,0,125,122,117,117,122,134,123],
[141,141,146,129,131,133,125,0,122,120,132,116,147,118],
[130,127,149,128,124,129,128,128,0,125,138,120,154,127],
[135,139,147,131,133,135,133,130,125,0,129,130,127,123],
[123,130,142,131,121,126,133,118,112,121,0,118,137,116],
[139,123,152,133,122,138,128,134,130,120,132,0,140,116],
[117,118,127,121,112,118,116,103,96,123,113,110,0,116],
[128,135,141,129,123,137,127,132,123,127,134,134,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 34, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,147,162,143,136,139,112,155,125,85,131,116,93],
[125,0,122,112,129,112,85,110,109,102,66,124,148,76],
[103,128,0,122,126,107,102,97,147,99,47,129,71,70],
[88,138,128,0,167,106,120,106,124,97,61,106,101,91],
[107,121,124,83,0,90,78,100,124,115,59,113,108,80],
[114,138,143,144,160,0,137,136,168,138,114,156,141,119],
[111,165,148,130,172,113,0,108,149,149,116,142,139,115],
[138,140,153,144,150,114,142,0,161,128,126,116,136,117],
[95,141,103,126,126,82,101,89,0,77,75,115,118,102],
[125,148,151,153,135,112,101,122,173,0,80,140,157,102],
[165,184,203,189,191,136,134,124,175,170,0,157,147,150],
[119,126,121,144,137,94,108,134,135,110,93,0,125,111],
[134,102,179,149,142,109,111,114,132,93,103,125,0,85],
[157,174,180,159,170,131,135,133,148,148,100,139,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 35, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,119,133,129,135,144,135,123,124,134,131,135,123],
[121,0,128,125,128,130,134,124,133,129,132,124,135,136],
[131,122,0,134,126,143,139,138,133,139,137,131,137,141],
[117,125,116,0,112,122,130,130,127,111,131,125,131,126],
[121,122,124,138,0,132,128,121,125,133,127,125,125,131],
[115,120,107,128,118,0,127,124,115,121,116,128,113,122],
[106,116,111,120,122,123,0,124,121,111,117,116,118,121],
[115,126,112,120,129,126,126,0,120,117,111,118,118,139],
[127,117,117,123,125,135,129,130,0,125,127,116,132,125],
[126,121,111,139,117,129,139,133,125,0,128,122,130,139],
[116,118,113,119,123,134,133,139,123,122,0,135,121,130],
[119,126,119,125,125,122,134,132,134,128,115,0,120,138],
[115,115,113,119,125,137,132,132,118,120,129,130,0,120],
[127,114,109,124,119,128,129,111,125,111,120,112,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 36, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,130,115,118,116,127,138,134,128,129,139,134,139],
[129,0,107,115,111,114,119,130,132,116,124,136,137,133],
[120,143,0,139,143,144,127,142,137,156,145,144,142,155],
[135,135,111,0,118,139,131,125,137,129,144,138,136,141],
[132,139,107,132,0,115,131,120,133,128,137,137,138,137],
[134,136,106,111,135,0,121,124,140,122,128,137,139,113],
[123,131,123,119,119,129,0,128,140,128,131,139,128,125],
[112,120,108,125,130,126,122,0,123,108,122,129,135,135],
[116,118,113,113,117,110,110,127,0,106,119,133,128,115],
[122,134,94,121,122,128,122,142,144,0,139,136,125,135],
[121,126,105,106,113,122,119,128,131,111,0,133,124,125],
[111,114,106,112,113,113,111,121,117,114,117,0,121,112],
[116,113,108,114,112,111,122,115,122,125,126,129,0,131],
[111,117,95,109,113,137,125,115,135,115,125,138,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 37, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,137,112,143,143,126,119,171,152,128,134,140,134],
[106,0,116,87,109,116,133,115,122,109,119,107,83,71],
[113,134,0,88,115,163,121,159,125,130,109,88,125,103],
[138,163,162,0,149,154,140,176,147,135,156,170,152,123],
[107,141,135,101,0,152,98,137,103,132,132,108,124,86],
[107,134,87,96,98,0,112,141,137,126,105,72,96,83],
[124,117,129,110,152,138,0,161,150,136,110,122,136,119],
[131,135,91,74,113,109,89,0,118,117,101,99,124,97],
[79,128,125,103,147,113,100,132,0,141,128,97,134,57],
[98,141,120,115,118,124,114,133,109,0,113,105,90,87],
[122,131,141,94,118,145,140,149,122,137,0,107,115,106],
[116,143,162,80,142,178,128,151,153,145,143,0,113,115],
[110,167,125,98,126,154,114,126,116,160,135,137,0,91],
[116,179,147,127,164,167,131,153,193,163,144,135,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 38, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,118,119,115,117,116,120,131,119,125,122,132,126],
[131,0,128,122,132,128,129,134,132,123,131,127,129,142],
[132,122,0,128,131,118,134,128,126,117,137,132,132,127],
[131,128,122,0,117,125,118,116,127,123,122,123,125,133],
[135,118,119,133,0,120,125,127,125,125,132,133,128,123],
[133,122,132,125,130,0,124,126,145,120,138,136,133,121],
[134,121,116,132,125,126,0,127,134,119,131,127,126,132],
[130,116,122,134,123,124,123,0,131,133,127,132,133,143],
[119,118,124,123,125,105,116,119,0,114,117,119,121,136],
[131,127,133,127,125,130,131,117,136,0,132,130,127,139],
[125,119,113,128,118,112,119,123,133,118,0,112,117,136],
[128,123,118,127,117,114,123,118,131,120,138,0,136,129],
[118,121,118,125,122,117,124,117,129,123,133,114,0,134],
[124,108,123,117,127,129,118,107,114,111,114,121,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 39, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,142,137,164,156,137,122,134,148,132,141,193,130],
[124,0,118,128,153,125,114,116,80,157,95,97,151,117],
[108,132,0,153,129,133,120,116,131,119,115,123,158,148],
[113,122,97,0,135,137,130,108,72,164,114,114,195,104],
[86,97,121,115,0,73,118,62,101,87,67,76,124,121],
[94,125,117,113,177,0,117,131,82,131,89,131,129,92],
[113,136,130,120,132,133,0,100,73,117,95,82,153,122],
[128,134,134,142,188,119,150,0,145,177,114,104,180,128],
[116,170,119,178,149,168,177,105,0,129,147,124,188,164],
[102,93,131,86,163,119,133,73,121,0,88,71,108,113],
[118,155,135,136,183,161,155,136,103,162,0,127,170,105],
[109,153,127,136,174,119,168,146,126,179,123,0,173,111],
[57,99,92,55,126,121,97,70,62,142,80,77,0,82],
[120,133,102,146,129,158,128,122,86,137,145,139,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 40, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,128,179,158,90,165,144,175,157,200,208,167,135],
[82,0,107,117,73,119,100,111,73,113,156,132,36,102],
[122,143,0,137,87,164,127,126,108,113,189,210,103,97],
[71,133,113,0,103,108,88,135,113,95,126,109,104,92],
[92,177,163,147,0,99,151,140,148,121,202,173,132,101],
[160,131,86,142,151,0,166,198,146,133,170,164,148,106],
[85,150,123,162,99,84,0,130,127,136,196,167,102,76],
[106,139,124,115,110,52,120,0,91,68,153,160,81,88],
[75,177,142,137,102,104,123,159,0,132,169,166,103,80],
[93,137,137,155,129,117,114,182,118,0,140,146,87,89],
[50,94,61,124,48,80,54,97,81,110,0,127,68,79],
[42,118,40,141,77,86,83,90,84,104,123,0,99,56],
[83,214,147,146,118,102,148,169,147,163,182,151,0,119],
[115,148,153,158,149,144,174,162,170,161,171,194,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 41, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,112,123,133,129,134,124,147,109,134,129,118,122],
[117,0,123,133,116,129,131,110,143,111,137,148,116,118],
[138,127,0,138,140,132,139,130,153,121,144,149,136,127],
[127,117,112,0,125,115,132,115,133,111,137,133,115,108],
[117,134,110,125,0,134,149,124,134,119,134,140,125,123],
[121,121,118,135,116,0,124,118,134,125,148,131,129,119],
[116,119,111,118,101,126,0,113,127,105,142,118,111,108],
[126,140,120,135,126,132,137,0,118,141,148,143,125,138],
[103,107,97,117,116,116,123,132,0,98,112,127,99,100],
[141,139,129,139,131,125,145,109,152,0,128,134,121,134],
[116,113,106,113,116,102,108,102,138,122,0,128,105,100],
[121,102,101,117,110,119,132,107,123,116,122,0,97,110],
[132,134,114,135,125,121,139,125,151,129,145,153,0,124],
[128,132,123,142,127,131,142,112,150,116,150,140,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 42, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,153,159,135,138,135,128,150,121,156,121,106,115],
[115,0,150,160,115,129,131,114,141,106,154,112,94,112],
[97,100,0,147,112,100,119,110,141,90,139,101,99,94],
[91,90,103,0,93,91,94,89,94,100,98,97,89,92],
[115,135,138,157,0,105,146,108,154,156,151,126,120,102],
[112,121,150,159,145,0,140,134,160,125,140,137,133,130],
[115,119,131,156,104,110,0,108,126,98,123,117,98,113],
[122,136,140,161,142,116,142,0,150,128,156,154,131,136],
[100,109,109,156,96,90,124,100,0,100,124,108,92,103],
[129,144,160,150,94,125,152,122,150,0,147,131,120,104],
[94,96,111,152,99,110,127,94,126,103,0,101,95,93],
[129,138,149,153,124,113,133,96,142,119,149,0,124,106],
[144,156,151,161,130,117,152,119,158,130,155,126,0,116],
[135,138,156,158,148,120,137,114,147,146,157,144,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 43, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,137,155,142,132,137,149,124,137,153,130,117,138],
[101,0,125,116,126,113,104,123,103,111,141,110,104,112],
[113,125,0,130,124,122,108,129,110,112,125,121,106,116],
[95,134,120,0,122,116,134,128,118,105,125,112,104,123],
[108,124,126,128,0,122,125,139,106,112,129,110,111,121],
[118,137,128,134,128,0,113,137,118,122,130,113,123,128],
[113,146,142,116,125,137,0,137,118,114,120,118,125,124],
[101,127,121,122,111,113,113,0,109,109,121,108,103,111],
[126,147,140,132,144,132,132,141,0,113,142,119,117,125],
[113,139,138,145,138,128,136,141,137,0,136,141,119,132],
[97,109,125,125,121,120,130,129,108,114,0,118,114,122],
[120,140,129,138,140,137,132,142,131,109,132,0,121,117],
[133,146,144,146,139,127,125,147,133,131,136,129,0,133],
[112,138,134,127,129,122,126,139,125,118,128,133,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 44, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,119,126,130,115,117,115,130,114,128,123,117,116],
[135,0,133,127,144,126,127,114,139,131,129,136,124,142],
[131,117,0,132,140,127,132,118,129,119,133,125,120,125],
[124,123,118,0,123,117,128,117,125,108,123,123,125,126],
[120,106,110,127,0,121,131,114,117,111,128,122,114,132],
[135,124,123,133,129,0,132,126,132,113,129,134,129,135],
[133,123,118,122,119,118,0,114,123,123,117,127,126,135],
[135,136,132,133,136,124,136,0,136,127,130,137,123,135],
[120,111,121,125,133,118,127,114,0,120,121,124,130,127],
[136,119,131,142,139,137,127,123,130,0,141,141,134,136],
[122,121,117,127,122,121,133,120,129,109,0,128,118,135],
[127,114,125,127,128,116,123,113,126,109,122,0,116,127],
[133,126,130,125,136,121,124,127,120,116,132,134,0,139],
[134,108,125,124,118,115,115,115,123,114,115,123,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 45, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,139,119,127,149,122,126,107,147,134,132,120,146],
[109,0,135,126,107,125,110,119,130,117,108,122,121,118],
[111,115,0,130,123,118,122,133,118,106,136,94,101,129],
[131,124,120,0,118,156,132,131,121,122,123,134,127,125],
[123,143,127,132,0,152,121,128,131,134,130,125,122,139],
[101,125,132,94,98,0,102,107,107,95,110,119,121,130],
[128,140,128,118,129,148,0,141,116,123,139,122,129,130],
[124,131,117,119,122,143,109,0,124,117,121,131,114,141],
[143,120,132,129,119,143,134,126,0,135,149,143,136,135],
[103,133,144,128,116,155,127,133,115,0,123,139,121,151],
[116,142,114,127,120,140,111,129,101,127,0,122,122,128],
[118,128,156,116,125,131,128,119,107,111,128,0,115,121],
[130,129,149,123,128,129,121,136,114,129,128,135,0,137],
[104,132,121,125,111,120,120,109,115,99,122,129,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 46, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,140,108,108,160,160,153,152,143,117,148,163,142],
[115,0,120,97,129,161,126,141,150,114,120,151,131,133],
[110,130,0,112,100,140,95,128,152,122,91,122,129,114],
[142,153,138,0,115,157,135,148,162,125,119,161,138,118],
[142,121,150,135,0,158,154,137,161,125,119,156,143,132],
[90,89,110,93,92,0,111,122,121,105,114,106,119,86],
[90,124,155,115,96,139,0,115,138,103,92,118,129,86],
[97,109,122,102,113,128,135,0,122,116,133,118,125,103],
[98,100,98,88,89,129,112,128,0,117,94,114,138,85],
[107,136,128,125,125,145,147,134,133,0,127,136,157,102],
[133,130,159,131,131,136,158,117,156,123,0,140,149,130],
[102,99,128,89,94,144,132,132,136,114,110,0,126,103],
[87,119,121,112,107,131,121,125,112,93,101,124,0,102],
[108,117,136,132,118,164,164,147,165,148,120,147,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 47, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,144,120,127,121,121,116,110,115,115,117,120,110],
[124,0,124,113,132,129,147,129,138,128,122,135,125,122],
[106,126,0,116,109,117,130,135,112,130,123,108,108,118],
[130,137,134,0,133,131,132,140,149,117,126,123,118,112],
[123,118,141,117,0,119,136,129,118,128,136,122,124,126],
[129,121,133,119,131,0,145,144,139,123,109,120,114,123],
[129,103,120,118,114,105,0,125,109,114,127,110,117,105],
[134,121,115,110,121,106,125,0,128,102,129,124,98,115],
[140,112,138,101,132,111,141,122,0,108,136,122,128,115],
[135,122,120,133,122,127,136,148,142,0,111,133,115,119],
[135,128,127,124,114,141,123,121,114,139,0,132,121,130],
[133,115,142,127,128,130,140,126,128,117,118,0,105,129],
[130,125,142,132,126,136,133,152,122,135,129,145,0,130],
[140,128,132,138,124,127,145,135,135,131,120,121,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 48, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,123,130,139,131,128,133,126,112,127,135,143,118],
[120,0,108,123,150,137,133,123,132,107,136,127,133,124],
[127,142,0,133,140,133,127,120,135,119,134,132,148,135],
[120,127,117,0,142,135,136,127,138,118,120,126,149,129],
[111,100,110,108,0,112,113,115,127,115,109,107,111,110],
[119,113,117,115,138,0,124,115,124,113,115,119,125,124],
[122,117,123,114,137,126,0,119,126,116,116,119,134,114],
[117,127,130,123,135,135,131,0,138,130,127,129,134,127],
[124,118,115,112,123,126,124,112,0,115,119,119,126,121],
[138,143,131,132,135,137,134,120,135,0,131,128,138,132],
[123,114,116,130,141,135,134,123,131,119,0,122,134,126],
[115,123,118,124,143,131,131,121,131,122,128,0,134,131],
[107,117,102,101,139,125,116,116,124,112,116,116,0,112],
[132,126,115,121,140,126,136,123,129,118,124,119,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 49, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,118,125,109,131,104,105,119,128,110,110,101,116],
[123,0,112,122,115,138,115,131,112,114,127,126,114,117],
[132,138,0,123,122,145,118,126,113,136,145,121,121,124],
[125,128,127,0,117,123,109,124,113,132,125,113,122,121],
[141,135,128,133,0,145,117,125,117,136,136,117,129,117],
[119,112,105,127,105,0,111,118,113,121,121,114,111,110],
[146,135,132,141,133,139,0,128,125,145,133,118,137,126],
[145,119,124,126,125,132,122,0,110,121,114,106,109,118],
[131,138,137,137,133,137,125,140,0,143,129,118,121,125],
[122,136,114,118,114,129,105,129,107,0,117,112,122,120],
[140,123,105,125,114,129,117,136,121,133,0,130,114,131],
[140,124,129,137,133,136,132,144,132,138,120,0,124,128],
[149,136,129,128,121,139,113,141,129,128,136,126,0,131],
[134,133,126,129,133,140,124,132,125,130,119,122,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 50, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,114,127,122,137,146,111,108,138,128,121,126],
[148,0,123,123,127,134,138,119,117,130,146,138,122,130],
[148,127,0,133,139,131,137,146,124,133,137,148,143,120],
[136,127,117,0,123,125,121,139,117,115,128,130,146,137],
[123,123,111,127,0,126,123,147,106,119,127,130,132,131],
[128,116,119,125,124,0,126,132,111,120,115,129,132,121],
[113,112,113,129,127,124,0,128,108,103,130,128,138,113],
[104,131,104,111,103,118,122,0,98,92,111,131,111,112],
[139,133,126,133,144,139,142,152,0,123,135,127,152,140],
[142,120,117,135,131,130,147,158,127,0,140,138,139,136],
[112,104,113,122,123,135,120,139,115,110,0,122,131,117],
[122,112,102,120,120,121,122,119,123,112,128,0,135,119],
[129,128,107,104,118,118,112,139,98,111,119,115,0,121],
[124,120,130,113,119,129,137,138,110,114,133,131,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 51, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,119,123,117,139,135,124,127,130,122,125,123,133],
[119,0,123,123,117,123,117,122,120,121,121,126,118,125],
[131,127,0,124,125,129,126,128,124,115,130,118,122,129],
[127,127,126,0,120,126,128,131,118,127,132,126,127,136],
[133,133,125,130,0,136,141,135,125,122,132,130,141,130],
[111,127,121,124,114,0,137,116,117,107,127,117,114,131],
[115,133,124,122,109,113,0,128,117,112,131,121,131,123],
[126,128,122,119,115,134,122,0,119,119,123,123,128,128],
[123,130,126,132,125,133,133,131,0,127,130,130,123,133],
[120,129,135,123,128,143,138,131,123,0,130,121,126,134],
[128,129,120,118,118,123,119,127,120,120,0,116,115,124],
[125,124,132,124,120,133,129,127,120,129,134,0,122,133],
[127,132,128,123,109,136,119,122,127,124,135,128,0,128],
[117,125,121,114,120,119,127,122,117,116,126,117,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 52, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,117,114,99,124,124,140,132,128,128,123,125,129],
[124,0,125,120,107,113,117,143,123,125,111,123,124,127],
[133,125,0,134,126,142,126,145,116,139,123,126,133,132],
[136,130,116,0,123,123,136,145,131,139,133,138,131,128],
[151,143,124,127,0,136,127,147,121,153,135,133,126,136],
[126,137,108,127,114,0,125,135,125,127,119,128,126,126],
[126,133,124,114,123,125,0,136,123,131,119,138,123,143],
[110,107,105,105,103,115,114,0,93,109,117,107,111,109],
[118,127,134,119,129,125,127,157,0,133,123,126,126,122],
[122,125,111,111,97,123,119,141,117,0,115,130,118,133],
[122,139,127,117,115,131,131,133,127,135,0,126,132,128],
[127,127,124,112,117,122,112,143,124,120,124,0,126,127],
[125,126,117,119,124,124,127,139,124,132,118,124,0,127],
[121,123,118,122,114,124,107,141,128,117,122,123,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 53, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,132,131,120,121,131,120,134,127,127,135,130,127],
[127,0,130,119,123,129,122,121,133,130,132,141,127,143],
[118,120,0,124,129,125,133,128,129,122,120,135,119,126],
[119,131,126,0,122,124,131,132,126,129,130,142,126,134],
[130,127,121,128,0,128,125,114,127,124,112,132,108,130],
[129,121,125,126,122,0,126,111,131,124,119,127,124,117],
[119,128,117,119,125,124,0,114,126,112,115,123,124,137],
[130,129,122,118,136,139,136,0,136,121,126,141,140,126],
[116,117,121,124,123,119,124,114,0,124,124,133,109,126],
[123,120,128,121,126,126,138,129,126,0,119,132,129,134],
[123,118,130,120,138,131,135,124,126,131,0,146,118,141],
[115,109,115,108,118,123,127,109,117,118,104,0,109,117],
[120,123,131,124,142,126,126,110,141,121,132,141,0,132],
[123,107,124,116,120,133,113,124,124,116,109,133,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 54, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,141,135,153,155,135,134,156,152,122,153,149,140],
[98,0,113,101,124,116,109,119,120,121,116,110,113,102],
[109,137,0,98,129,120,125,125,129,137,119,131,125,128],
[115,149,152,0,134,142,142,139,147,137,125,151,140,128],
[97,126,121,116,0,111,102,106,123,115,117,112,120,120],
[95,134,130,108,139,0,112,132,140,134,126,131,130,141],
[115,141,125,108,148,138,0,118,145,126,108,131,120,138],
[116,131,125,111,144,118,132,0,126,112,112,117,122,130],
[94,130,121,103,127,110,105,124,0,109,105,121,117,117],
[98,129,113,113,135,116,124,138,141,0,113,126,126,133],
[128,134,131,125,133,124,142,138,145,137,0,137,148,143],
[97,140,119,99,138,119,119,133,129,124,113,0,126,129],
[101,137,125,110,130,120,130,128,133,124,102,124,0,132],
[110,148,122,122,130,109,112,120,133,117,107,121,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 55, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,118,121,133,113,123,121,128,124,112,115,128,124],
[119,0,118,125,133,112,101,116,115,127,108,103,111,108],
[132,132,0,133,148,129,121,138,123,134,124,117,139,133],
[129,125,117,0,135,124,135,137,115,137,118,112,125,113],
[117,117,102,115,0,99,126,125,109,115,100,107,121,109],
[137,138,121,126,151,0,116,138,134,138,137,120,113,126],
[127,149,129,115,124,134,0,141,131,139,132,138,125,125],
[129,134,112,113,125,112,109,0,124,132,130,103,125,118],
[122,135,127,135,141,116,119,126,0,132,118,106,124,105],
[126,123,116,113,135,112,111,118,118,0,106,110,110,115],
[138,142,126,132,150,113,118,120,132,144,0,120,127,127],
[135,147,133,138,143,130,112,147,144,140,130,0,135,132],
[122,139,111,125,129,137,125,125,126,140,123,115,0,111],
[126,142,117,137,141,124,125,132,145,135,123,118,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 56, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,126,113,130,144,130,119,125,112,138,116,115,119],
[116,0,114,110,111,124,119,108,123,116,131,110,118,116],
[124,136,0,109,120,130,104,97,110,119,115,118,126,103],
[137,140,141,0,125,146,134,122,137,128,137,121,135,117],
[120,139,130,125,0,122,122,122,129,110,132,103,116,115],
[106,126,120,104,128,0,110,102,128,113,123,110,112,111],
[120,131,146,116,128,140,0,113,118,124,127,124,125,122],
[131,142,153,128,128,148,137,0,121,129,137,128,138,139],
[125,127,140,113,121,122,132,129,0,127,128,111,122,121],
[138,134,131,122,140,137,126,121,123,0,132,124,113,119],
[112,119,135,113,118,127,123,113,122,118,0,111,116,107],
[134,140,132,129,147,140,126,122,139,126,139,0,126,127],
[135,132,124,115,134,138,125,112,128,137,134,124,0,104],
[131,134,147,133,135,139,128,111,129,131,143,123,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 57, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,105,108,107,119,105,107,111,87,119,98,124,142],
[142,0,138,137,139,139,129,121,149,122,126,137,133,147],
[145,112,0,111,110,130,130,116,121,123,114,126,126,148],
[142,113,139,0,124,128,126,101,125,134,145,124,144,135],
[143,111,140,126,0,138,142,115,120,129,141,141,153,143],
[131,111,120,122,112,0,117,99,98,116,123,124,138,118],
[145,121,120,124,108,133,0,108,107,115,107,103,148,147],
[143,129,134,149,135,151,142,0,128,137,146,125,154,155],
[139,101,129,125,130,152,143,122,0,137,130,136,151,139],
[163,128,127,116,121,134,135,113,113,0,131,137,137,152],
[131,124,136,105,109,127,143,104,120,119,0,112,133,150],
[152,113,124,126,109,126,147,125,114,113,138,0,130,144],
[126,117,124,106,97,112,102,96,99,113,117,120,0,121],
[108,103,102,115,107,132,103,95,111,98,100,106,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 58, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,119,129,129,137,131,135,135,127,134,133,119,131],
[117,0,121,128,127,138,125,123,133,133,123,134,120,119],
[131,129,0,122,126,136,129,133,129,132,127,125,114,121],
[121,122,128,0,125,132,126,125,122,124,120,125,107,115],
[121,123,124,125,0,143,128,134,128,126,135,133,115,113],
[113,112,114,118,107,0,115,118,114,109,126,114,112,110],
[119,125,121,124,122,135,0,130,123,114,128,128,116,106],
[115,127,117,125,116,132,120,0,116,124,121,127,125,113],
[115,117,121,128,122,136,127,134,0,125,122,130,106,117],
[123,117,118,126,124,141,136,126,125,0,122,129,124,112],
[116,127,123,130,115,124,122,129,128,128,0,125,120,110],
[117,116,125,125,117,136,122,123,120,121,125,0,117,116],
[131,130,136,143,135,138,134,125,144,126,130,133,0,130],
[119,131,129,135,137,140,144,137,133,138,140,134,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 59, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,145,139,128,130,141,141,122,115,128,118,127,142],
[128,0,135,137,120,126,129,139,120,113,123,133,132,139],
[105,115,0,105,116,108,113,118,99,106,105,109,110,123],
[111,113,145,0,111,124,132,142,117,105,124,128,119,143],
[122,130,134,139,0,127,124,131,125,106,126,124,125,135],
[120,124,142,126,123,0,132,139,116,119,119,118,132,145],
[109,121,137,118,126,118,0,133,118,107,118,116,114,130],
[109,111,132,108,119,111,117,0,105,97,117,101,107,130],
[128,130,151,133,125,134,132,145,0,125,152,137,138,141],
[135,137,144,145,144,131,143,153,125,0,133,139,144,154],
[122,127,145,126,124,131,132,133,98,117,0,121,132,133],
[132,117,141,122,126,132,134,149,113,111,129,0,133,144],
[123,118,140,131,125,118,136,143,112,106,118,117,0,151],
[108,111,127,107,115,105,120,120,109,96,117,106,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 60, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,125,127,123,120,118,132,130,126,124,130,122,116],
[119,0,115,104,121,114,107,109,120,115,121,116,116,108],
[125,135,0,115,127,123,123,123,125,126,119,124,131,124],
[123,146,135,0,119,134,128,129,129,129,127,131,136,135],
[127,129,123,131,0,123,130,115,126,133,125,135,134,129],
[130,136,127,116,127,0,130,125,127,127,126,129,128,123],
[132,143,127,122,120,120,0,120,131,134,132,134,132,128],
[118,141,127,121,135,125,130,0,127,139,120,132,139,131],
[120,130,125,121,124,123,119,123,0,131,114,119,131,124],
[124,135,124,121,117,123,116,111,119,0,124,121,128,120],
[126,129,131,123,125,124,118,130,136,126,0,121,125,119],
[120,134,126,119,115,121,116,118,131,129,129,0,126,123],
[128,134,119,114,116,122,118,111,119,122,125,124,0,125],
[134,142,126,115,121,127,122,119,126,130,131,127,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 61, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,119,123,120,126,124,118,121,125,113,130,114,130],
[125,0,121,132,128,123,127,114,122,118,116,120,124,134],
[131,129,0,143,126,123,124,128,121,126,120,122,114,126],
[127,118,107,0,119,121,124,113,117,118,109,113,118,125],
[130,122,124,131,0,126,109,116,122,114,119,125,112,118],
[124,127,127,129,124,0,126,132,138,131,124,115,122,132],
[126,123,126,126,141,124,0,113,129,115,119,125,119,124],
[132,136,122,137,134,118,137,0,127,115,119,128,125,129],
[129,128,129,133,128,112,121,123,0,120,119,124,114,135],
[125,132,124,132,136,119,135,135,130,0,131,128,117,135],
[137,134,130,141,131,126,131,131,131,119,0,123,123,135],
[120,130,128,137,125,135,125,122,126,122,127,0,113,128],
[136,126,136,132,138,128,131,125,136,133,127,137,0,134],
[120,116,124,125,132,118,126,121,115,115,115,122,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 62, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,128,120,139,128,123,115,119,123,111,126,133,130],
[124,0,130,121,140,128,121,127,118,125,111,129,130,127],
[122,120,0,121,137,127,118,129,130,124,125,123,136,121],
[130,129,129,0,138,130,126,129,123,129,112,133,135,127],
[111,110,113,112,0,121,113,115,101,121,116,112,118,120],
[122,122,123,120,129,0,110,116,121,124,114,121,133,114],
[127,129,132,124,137,140,0,127,119,128,123,133,138,125],
[135,123,121,121,135,134,123,0,116,120,118,127,132,126],
[131,132,120,127,149,129,131,134,0,136,128,133,138,131],
[127,125,126,121,129,126,122,130,114,0,118,130,118,129],
[139,139,125,138,134,136,127,132,122,132,0,134,141,130],
[124,121,127,117,138,129,117,123,117,120,116,0,130,119],
[117,120,114,115,132,117,112,118,112,132,109,120,0,122],
[120,123,129,123,130,136,125,124,119,121,120,131,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 63, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,112,144,141,130,124,126,122,119,133,125,146,135],
[120,0,121,137,124,123,112,129,131,132,109,113,128,91],
[138,129,0,148,135,140,140,133,117,137,126,135,152,136],
[106,113,102,0,104,137,116,103,119,105,110,106,111,94],
[109,126,115,146,0,146,114,133,104,129,107,113,135,133],
[120,127,110,113,104,0,116,113,107,99,108,116,124,102],
[126,138,110,134,136,134,0,102,119,113,118,132,131,126],
[124,121,117,147,117,137,148,0,129,115,111,125,129,125],
[128,119,133,131,146,143,131,121,0,140,125,133,137,123],
[131,118,113,145,121,151,137,135,110,0,99,114,129,113],
[117,141,124,140,143,142,132,139,125,151,0,128,137,117],
[125,137,115,144,137,134,118,125,117,136,122,0,127,115],
[104,122,98,139,115,126,119,121,113,121,113,123,0,112],
[115,159,114,156,117,148,124,125,127,137,133,135,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 64, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,94,116,109,114,105,101,116,109,96,106,125,94],
[135,0,118,133,129,131,114,113,138,121,117,110,130,99],
[156,132,0,143,156,157,112,125,140,156,122,137,167,128],
[134,117,107,0,127,142,111,119,114,140,109,108,125,79],
[141,121,94,123,0,151,114,126,118,129,129,112,126,95],
[136,119,93,108,99,0,104,83,103,108,122,119,119,103],
[145,136,138,139,136,146,0,119,134,134,127,116,145,111],
[149,137,125,131,124,167,131,0,127,151,135,123,144,135],
[134,112,110,136,132,147,116,123,0,119,123,109,114,102],
[141,129,94,110,121,142,116,99,131,0,129,124,120,94],
[154,133,128,141,121,128,123,115,127,121,0,132,146,121],
[144,140,113,142,138,131,134,127,141,126,118,0,127,112],
[125,120,83,125,124,131,105,106,136,130,104,123,0,111],
[156,151,122,171,155,147,139,115,148,156,129,138,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 65, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,135,130,135,153,131,145,151,144,139,148,155,115],
[122,0,145,133,139,131,128,146,133,148,136,161,152,127],
[115,105,0,123,131,103,101,122,122,100,98,144,111,126],
[120,117,127,0,109,117,139,134,139,103,121,121,126,114],
[115,111,119,141,0,135,121,138,135,131,118,135,140,117],
[97,119,147,133,115,0,115,146,135,120,127,132,129,119],
[119,122,149,111,129,135,0,157,148,125,106,145,137,132],
[105,104,128,116,112,104,93,0,104,92,107,129,128,101],
[99,117,128,111,115,115,102,146,0,101,117,129,139,119],
[106,102,150,147,119,130,125,158,149,0,132,157,136,101],
[111,114,152,129,132,123,144,143,133,118,0,154,149,108],
[102,89,106,129,115,118,105,121,121,93,96,0,135,102],
[95,98,139,124,110,121,113,122,111,114,101,115,0,103],
[135,123,124,136,133,131,118,149,131,149,142,148,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 66, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,128,132,123,124,120,150,155,130,125,117,120,113],
[106,0,95,103,106,105,100,108,133,105,94,126,86,88],
[122,155,0,109,105,82,109,113,132,107,108,139,112,106],
[118,147,141,0,122,123,147,132,146,132,132,129,123,134],
[127,144,145,128,0,93,117,158,136,113,109,157,140,128],
[126,145,168,127,157,0,153,146,152,118,147,157,141,139],
[130,150,141,103,133,97,0,116,135,101,86,132,110,133],
[100,142,137,118,92,104,134,0,176,116,111,126,129,105],
[95,117,118,104,114,98,115,74,0,116,96,106,82,112],
[120,145,143,118,137,132,149,134,134,0,135,122,114,101],
[125,156,142,118,141,103,164,139,154,115,0,135,111,113],
[133,124,111,121,93,93,118,124,144,128,115,0,107,126],
[130,164,138,127,110,109,140,121,168,136,139,143,0,132],
[137,162,144,116,122,111,117,145,138,149,137,124,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 67, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,122,134,137,124,136,127,120,121,128,121,127,132],
[133,0,122,128,143,127,141,138,138,130,141,118,134,142],
[128,128,0,124,130,135,130,125,132,115,125,119,118,130],
[116,122,126,0,128,131,133,120,125,112,118,111,122,130],
[113,107,120,122,0,117,129,123,131,110,129,101,121,124],
[126,123,115,119,133,0,139,127,126,122,127,114,123,117],
[114,109,120,117,121,111,0,119,127,113,123,111,123,116],
[123,112,125,130,127,123,131,0,133,126,113,132,132,132],
[130,112,118,125,119,124,123,117,0,112,113,113,124,123],
[129,120,135,138,140,128,137,124,138,0,140,123,143,139],
[122,109,125,132,121,123,127,137,137,110,0,117,122,130],
[129,132,131,139,149,136,139,118,137,127,133,0,134,138],
[123,116,132,128,129,127,127,118,126,107,128,116,0,127],
[118,108,120,120,126,133,134,118,127,111,120,112,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 68, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,126,107,108,150,91,140,111,91,118,115,125,125],
[133,0,137,131,135,134,107,128,129,119,116,114,106,113],
[124,113,0,139,141,158,110,122,112,116,127,135,106,129],
[143,119,111,0,136,151,101,122,108,105,120,102,129,130],
[142,115,109,114,0,137,107,117,120,103,108,110,108,112],
[100,116,92,99,113,0,94,97,89,112,122,95,105,71],
[159,143,140,149,143,156,0,141,146,137,155,146,123,164],
[110,122,128,128,133,153,109,0,107,98,94,106,118,111],
[139,121,138,142,130,161,104,143,0,130,130,145,149,150],
[159,131,134,145,147,138,113,152,120,0,155,119,123,138],
[132,134,123,130,142,128,95,156,120,95,0,124,119,120],
[135,136,115,148,140,155,104,144,105,131,126,0,112,136],
[125,144,144,121,142,145,127,132,101,127,131,138,0,153],
[125,137,121,120,138,179,86,139,100,112,130,114,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 69, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,102,161,156,184,182,125,194,166,159,158,148,167],
[107,0,80,127,139,150,164,129,179,150,92,145,146,154],
[148,170,0,157,155,151,206,200,177,156,192,122,164,184],
[89,123,93,0,118,162,163,137,172,136,140,132,191,170],
[94,111,95,132,0,133,155,143,169,109,125,120,142,120],
[66,100,99,88,117,0,159,116,128,117,143,89,111,128],
[68,86,44,87,95,91,0,104,158,91,106,119,68,123],
[125,121,50,113,107,134,146,0,185,148,149,123,129,150],
[56,71,73,78,81,122,92,65,0,73,87,105,78,61],
[84,100,94,114,141,133,159,102,177,0,156,146,114,125],
[91,158,58,110,125,107,144,101,163,94,0,99,116,114],
[92,105,128,118,130,161,131,127,145,104,151,0,110,125],
[102,104,86,59,108,139,182,121,172,136,134,140,0,163],
[83,96,66,80,130,122,127,100,189,125,136,125,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 70, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,115,107,116,122,110,120,130,112,123,124,119,117],
[129,0,137,126,129,128,126,131,139,123,128,140,129,131],
[135,113,0,104,126,129,117,129,127,120,126,133,126,117],
[143,124,146,0,134,135,125,141,136,130,136,142,137,122],
[134,121,124,116,0,118,122,119,123,112,132,140,123,126],
[128,122,121,115,132,0,115,118,121,117,133,137,124,123],
[140,124,133,125,128,135,0,137,136,116,138,141,138,129],
[130,119,121,109,131,132,113,0,140,107,126,137,129,117],
[120,111,123,114,127,129,114,110,0,109,121,128,120,110],
[138,127,130,120,138,133,134,143,141,0,138,140,136,129],
[127,122,124,114,118,117,112,124,129,112,0,132,125,113],
[126,110,117,108,110,113,109,113,122,110,118,0,126,113],
[131,121,124,113,127,126,112,121,130,114,125,124,0,125],
[133,119,133,128,124,127,121,133,140,121,137,137,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 71, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,122,110,115,121,121,115,118,124,107,123,110,107],
[126,0,120,113,114,113,120,116,120,136,111,117,120,111],
[128,130,0,121,132,125,129,134,138,138,114,122,126,129],
[140,137,129,0,125,144,131,133,144,149,139,127,136,132],
[135,136,118,125,0,135,130,135,128,138,136,113,124,128],
[129,137,125,106,115,0,118,121,123,142,125,114,114,126],
[129,130,121,119,120,132,0,126,136,132,125,106,122,130],
[135,134,116,117,115,129,124,0,135,129,121,119,121,124],
[132,130,112,106,122,127,114,115,0,126,114,118,118,106],
[126,114,112,101,112,108,118,121,124,0,122,107,116,98],
[143,139,136,111,114,125,125,129,136,128,0,120,113,119],
[127,133,128,123,137,136,144,131,132,143,130,0,125,116],
[140,130,124,114,126,136,128,129,132,134,137,125,0,130],
[143,139,121,118,122,124,120,126,144,152,131,134,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 72, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,144,123,119,154,115,143,138,138,135,135,130,144],
[110,0,126,115,109,137,116,142,117,114,114,118,108,118],
[106,124,0,111,121,138,116,140,113,114,125,136,115,129],
[127,135,139,0,136,132,133,148,135,137,124,139,131,144],
[131,141,129,114,0,143,129,140,136,132,130,142,106,128],
[96,113,112,118,107,0,108,132,104,109,111,124,108,117],
[135,134,134,117,121,142,0,131,115,120,109,133,120,135],
[107,108,110,102,110,118,119,0,112,107,110,108,113,118],
[112,133,137,115,114,146,135,138,0,129,120,146,122,140],
[112,136,136,113,118,141,130,143,121,0,131,138,123,131],
[115,136,125,126,120,139,141,140,130,119,0,137,124,144],
[115,132,114,111,108,126,117,142,104,112,113,0,108,133],
[120,142,135,119,144,142,130,137,128,127,126,142,0,138],
[106,132,121,106,122,133,115,132,110,119,106,117,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 73, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,148,111,133,136,100,99,130,163,113,112,152,105],
[102,0,64,102,125,145,78,93,89,141,83,93,124,79],
[102,186,0,158,141,160,105,147,169,193,112,147,189,132],
[139,148,92,0,125,128,128,107,126,168,113,114,156,96],
[117,125,109,125,0,126,92,114,117,149,112,95,149,88],
[114,105,90,122,124,0,84,58,91,104,77,105,112,82],
[150,172,145,122,158,166,0,123,170,183,118,148,165,116],
[151,157,103,143,136,192,127,0,126,164,143,132,146,128],
[120,161,81,124,133,159,80,124,0,151,115,119,193,84],
[87,109,57,82,101,146,67,86,99,0,76,74,112,84],
[137,167,138,137,138,173,132,107,135,174,0,119,156,101],
[138,157,103,136,155,145,102,118,131,176,131,0,158,108],
[98,126,61,94,101,138,85,104,57,138,94,92,0,89],
[145,171,118,154,162,168,134,122,166,166,149,142,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 74, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,142,167,151,114,158,119,128,126,108,124,156,135],
[127,0,171,192,142,149,169,141,141,119,120,165,164,160],
[108,79,0,156,99,102,177,120,102,116,93,120,150,125],
[83,58,94,0,102,76,117,84,111,100,87,110,134,82],
[99,108,151,148,0,114,123,147,99,110,104,135,154,150],
[136,101,148,174,136,0,173,111,103,118,125,128,130,133],
[92,81,73,133,127,77,0,101,118,85,87,119,114,115],
[131,109,130,166,103,139,149,0,107,110,108,130,171,166],
[122,109,148,139,151,147,132,143,0,105,119,132,152,135],
[124,131,134,150,140,132,165,140,145,0,110,130,143,133],
[142,130,157,163,146,125,163,142,131,140,0,121,148,146],
[126,85,130,140,115,122,131,120,118,120,129,0,146,142],
[94,86,100,116,96,120,136,79,98,107,102,104,0,125],
[115,90,125,168,100,117,135,84,115,117,104,108,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 75, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,116,117,128,114,100,113,139,144,120,118,130,107],
[131,0,149,136,147,144,114,135,150,175,118,149,107,140],
[134,101,0,122,159,123,94,125,141,113,89,125,120,114],
[133,114,128,0,129,115,113,113,146,125,107,148,123,109],
[122,103,91,121,0,123,71,115,97,134,88,126,110,104],
[136,106,127,135,127,0,102,109,151,144,131,141,115,127],
[150,136,156,137,179,148,0,123,174,181,141,148,153,142],
[137,115,125,137,135,141,127,0,172,144,119,146,136,112],
[111,100,109,104,153,99,76,78,0,124,73,95,110,105],
[106,75,137,125,116,106,69,106,126,0,103,116,124,106],
[130,132,161,143,162,119,109,131,177,147,0,168,127,118],
[132,101,125,102,124,109,102,104,155,134,82,0,119,92],
[120,143,130,127,140,135,97,114,140,126,123,131,0,116],
[143,110,136,141,146,123,108,138,145,144,132,158,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 76, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,120,123,124,141,139,123,137,133,130,128,137,132],
[118,0,110,117,120,128,131,116,136,115,120,116,124,119],
[130,140,0,136,140,132,125,127,143,142,136,124,130,133],
[127,133,114,0,127,117,126,120,138,125,130,112,122,132],
[126,130,110,123,0,128,120,111,133,114,123,118,123,119],
[109,122,118,133,122,0,120,120,135,126,126,119,119,135],
[111,119,125,124,130,130,0,109,142,125,119,122,126,127],
[127,134,123,130,139,130,141,0,149,138,125,117,129,136],
[113,114,107,112,117,115,108,101,0,111,107,107,120,116],
[117,135,108,125,136,124,125,112,139,0,116,127,121,122],
[120,130,114,120,127,124,131,125,143,134,0,109,128,120],
[122,134,126,138,132,131,128,133,143,123,141,0,129,139],
[113,126,120,128,127,131,124,121,130,129,122,121,0,137],
[118,131,117,118,131,115,123,114,134,128,130,111,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 77, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,125,133,128,144,131,123,139,114,116,134,133,130],
[130,0,120,136,143,152,126,122,154,132,137,134,147,126],
[125,130,0,144,150,150,133,138,145,145,131,139,149,148],
[117,114,106,0,134,123,110,110,137,134,105,106,129,123],
[122,107,100,116,0,131,122,112,127,106,98,137,147,111],
[106,98,100,127,119,0,108,96,118,120,104,103,107,113],
[119,124,117,140,128,142,0,128,121,114,115,133,124,126],
[127,128,112,140,138,154,122,0,126,125,109,134,133,125],
[111,96,105,113,123,132,129,124,0,112,92,118,120,118],
[136,118,105,116,144,130,136,125,138,0,96,135,145,136],
[134,113,119,145,152,146,135,141,158,154,0,146,150,139],
[116,116,111,144,113,147,117,116,132,115,104,0,132,139],
[117,103,101,121,103,143,126,117,130,105,100,118,0,113],
[120,124,102,127,139,137,124,125,132,114,111,111,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 78, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,146,114,109,134,143,100,149,111,95,156,99,155],
[111,0,107,75,109,81,112,97,114,87,84,104,120,107],
[104,143,0,127,116,107,134,111,128,136,97,134,112,109],
[136,175,123,0,119,97,145,123,127,115,102,143,104,157],
[141,141,134,131,0,108,159,136,126,151,127,141,127,115],
[116,169,143,153,142,0,137,125,138,163,117,147,116,147],
[107,138,116,105,91,113,0,114,113,126,88,103,120,114],
[150,153,139,127,114,125,136,0,127,139,120,142,102,112],
[101,136,122,123,124,112,137,123,0,127,107,98,90,114],
[139,163,114,135,99,87,124,111,123,0,118,124,100,108],
[155,166,153,148,123,133,162,130,143,132,0,152,138,129],
[94,146,116,107,109,103,147,108,152,126,98,0,121,84],
[151,130,138,146,123,134,130,148,160,150,112,129,0,116],
[95,143,141,93,135,103,136,138,136,142,121,166,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 79, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,142,133,117,134,133,129,132,132,141,136,115,111],
[133,0,140,140,118,112,134,137,120,141,127,130,110,119],
[108,110,0,126,106,108,101,123,101,124,132,124,110,115],
[117,110,124,0,108,119,124,116,116,121,118,135,97,114],
[133,132,144,142,0,128,133,123,139,131,142,126,123,129],
[116,138,142,131,122,0,129,126,139,136,133,131,112,127],
[117,116,149,126,117,121,0,131,128,127,134,135,108,120],
[121,113,127,134,127,124,119,0,119,133,139,127,115,106],
[118,130,149,134,111,111,122,131,0,133,118,132,122,122],
[118,109,126,129,119,114,123,117,117,0,133,122,111,116],
[109,123,118,132,108,117,116,111,132,117,0,112,114,121],
[114,120,126,115,124,119,115,123,118,128,138,0,120,120],
[135,140,140,153,127,138,142,135,128,139,136,130,0,123],
[139,131,135,136,121,123,130,144,128,134,129,130,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 80, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,148,157,96,120,132,98,118,143,141,104,139,95],
[99,0,84,115,81,79,109,89,134,94,99,79,129,76],
[102,166,0,157,101,115,118,104,109,140,128,101,131,90],
[93,135,93,0,58,94,138,93,117,139,82,104,93,88],
[154,169,149,192,0,169,161,143,141,175,157,124,103,132],
[130,171,135,156,81,0,127,106,134,153,147,130,120,105],
[118,141,132,112,89,123,0,104,108,125,128,93,137,92],
[152,161,146,157,107,144,146,0,163,160,132,106,139,122],
[132,116,141,133,109,116,142,87,0,116,112,91,128,92],
[107,156,110,111,75,97,125,90,134,0,106,75,111,89],
[109,151,122,168,93,103,122,118,138,144,0,124,106,97],
[146,171,149,146,126,120,157,144,159,175,126,0,149,127],
[111,121,119,157,147,130,113,111,122,139,144,101,0,87],
[155,174,160,162,118,145,158,128,158,161,153,123,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 81, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,146,128,123,124,121,129,130,134,120,117,130,127],
[133,0,149,116,131,117,116,130,122,114,125,126,146,124],
[104,101,0,92,115,125,107,114,114,91,115,102,120,110],
[122,134,158,0,137,136,129,140,121,136,128,135,149,131],
[127,119,135,113,0,129,122,136,119,123,118,138,138,119],
[126,133,125,114,121,0,118,136,116,116,117,113,135,116],
[129,134,143,121,128,132,0,150,116,136,133,142,155,146],
[121,120,136,110,114,114,100,0,110,114,109,112,137,111],
[120,128,136,129,131,134,134,140,0,116,132,131,142,126],
[116,136,159,114,127,134,114,136,134,0,137,124,145,130],
[130,125,135,122,132,133,117,141,118,113,0,123,142,130],
[133,124,148,115,112,137,108,138,119,126,127,0,149,124],
[120,104,130,101,112,115,95,113,108,105,108,101,0,108],
[123,126,140,119,131,134,104,139,124,120,120,126,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 82, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,110,116,129,127,133,117,147,103,125,114,103,123],
[129,0,102,105,125,113,116,120,133,109,135,120,107,118],
[140,148,0,140,128,132,147,133,145,128,147,110,124,139],
[134,145,110,0,127,130,121,125,141,124,121,112,121,131],
[121,125,122,123,0,119,132,122,133,106,137,125,122,117],
[123,137,118,120,131,0,138,133,142,125,141,128,138,137],
[117,134,103,129,118,112,0,122,134,122,105,105,117,108],
[133,130,117,125,128,117,128,0,133,136,123,119,112,111],
[103,117,105,109,117,108,116,117,0,116,130,109,96,115],
[147,141,122,126,144,125,128,114,134,0,122,108,128,121],
[125,115,103,129,113,109,145,127,120,128,0,108,96,119],
[136,130,140,138,125,122,145,131,141,142,142,0,109,140],
[147,143,126,129,128,112,133,138,154,122,154,141,0,126],
[127,132,111,119,133,113,142,139,135,129,131,110,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 83, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,124,140,127,113,125,135,122,112,138,114,123,135],
[125,0,124,130,130,128,119,137,118,131,131,123,122,122],
[126,126,0,140,134,134,133,134,128,123,133,133,133,130],
[110,120,110,0,112,107,124,117,123,102,117,99,111,128],
[123,120,116,138,0,122,123,124,124,114,120,114,124,129],
[137,122,116,143,128,0,128,133,122,107,132,109,119,132],
[125,131,117,126,127,122,0,126,114,122,124,116,118,127],
[115,113,116,133,126,117,124,0,125,133,125,115,123,121],
[128,132,122,127,126,128,136,125,0,124,134,117,121,126],
[138,119,127,148,136,143,128,117,126,0,130,116,130,146],
[112,119,117,133,130,118,126,125,116,120,0,116,121,126],
[136,127,117,151,136,141,134,135,133,134,134,0,139,129],
[127,128,117,139,126,131,132,127,129,120,129,111,0,132],
[115,128,120,122,121,118,123,129,124,104,124,121,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 84, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,118,121,119,122,116,114,130,118,142,115,138,136],
[134,0,114,130,132,132,117,109,122,136,156,125,155,137],
[132,136,0,138,134,139,128,135,144,119,133,126,159,165],
[129,120,112,0,112,121,115,110,128,108,123,83,138,135],
[131,118,116,138,0,122,118,110,133,118,143,105,152,136],
[128,118,111,129,128,0,122,108,131,118,132,113,136,143],
[134,133,122,135,132,128,0,126,137,120,138,111,148,134],
[136,141,115,140,140,142,124,0,144,119,158,133,146,151],
[120,128,106,122,117,119,113,106,0,116,137,108,144,142],
[132,114,131,142,132,132,130,131,134,0,134,122,148,148],
[108,94,117,127,107,118,112,92,113,116,0,88,134,131],
[135,125,124,167,145,137,139,117,142,128,162,0,174,162],
[112,95,91,112,98,114,102,104,106,102,116,76,0,100],
[114,113,85,115,114,107,116,99,108,102,119,88,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 85, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,128,118,123,121,138,123,113,131,137,120,139,122],
[133,0,138,127,128,119,128,124,133,137,135,132,134,133],
[122,112,0,124,100,107,112,111,108,127,108,103,121,124],
[132,123,126,0,117,125,121,115,110,135,129,124,132,115],
[127,122,150,133,0,124,133,130,121,128,139,128,129,116],
[129,131,143,125,126,0,124,131,120,135,152,125,142,133],
[112,122,138,129,117,126,0,120,119,136,136,123,127,129],
[127,126,139,135,120,119,130,0,130,143,131,115,127,115],
[137,117,142,140,129,130,131,120,0,148,152,121,142,135],
[119,113,123,115,122,115,114,107,102,0,124,115,132,117],
[113,115,142,121,111,98,114,119,98,126,0,126,130,128],
[130,118,147,126,122,125,127,135,129,135,124,0,137,115],
[111,116,129,118,121,108,123,123,108,118,120,113,0,116],
[128,117,126,135,134,117,121,135,115,133,122,135,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 86, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,117,113,107,116,100,108,113,118,116,114,116,123],
[135,0,135,126,125,132,121,125,128,126,136,130,136,129],
[133,115,0,115,114,116,112,121,115,120,133,126,119,123],
[137,124,135,0,131,128,122,133,131,139,137,144,141,128],
[143,125,136,119,0,125,121,126,133,125,134,129,133,124],
[134,118,134,122,125,0,113,128,119,133,125,130,130,120],
[150,129,138,128,129,137,0,140,124,140,137,138,130,131],
[142,125,129,117,124,122,110,0,116,124,131,128,122,117],
[137,122,135,119,117,131,126,134,0,130,130,131,127,137],
[132,124,130,111,125,117,110,126,120,0,123,122,121,126],
[134,114,117,113,116,125,113,119,120,127,0,129,129,124],
[136,120,124,106,121,120,112,122,119,128,121,0,128,118],
[134,114,131,109,117,120,120,128,123,129,121,122,0,133],
[127,121,127,122,126,130,119,133,113,124,126,132,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 87, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,122,125,141,134,122,114,122,118,144,126,137,122],
[132,0,126,142,126,136,125,114,116,120,140,115,137,111],
[128,124,0,126,114,132,113,115,116,114,138,127,130,125],
[125,108,124,0,131,132,105,105,109,117,116,113,123,112],
[109,124,136,119,0,149,125,114,127,130,139,139,138,130],
[116,114,118,118,101,0,115,114,101,122,124,120,125,115],
[128,125,137,145,125,135,0,124,130,127,157,138,142,146],
[136,136,135,145,136,136,126,0,130,132,155,116,131,137],
[128,134,134,141,123,149,120,120,0,127,142,117,141,129],
[132,130,136,133,120,128,123,118,123,0,144,129,154,139],
[106,110,112,134,111,126,93,95,108,106,0,105,114,115],
[124,135,123,137,111,130,112,134,133,121,145,0,138,116],
[113,113,120,127,112,125,108,119,109,96,136,112,0,130],
[128,139,125,138,120,135,104,113,121,111,135,134,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 88, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,125,126,138,130,134,114,133,119,127,126,123,134],
[134,0,131,136,138,141,132,127,119,127,131,136,129,129],
[125,119,0,136,138,140,127,131,126,122,147,124,133,129],
[124,114,114,0,117,146,126,110,117,121,133,120,122,125],
[112,112,112,133,0,125,115,109,115,121,131,111,122,106],
[120,109,110,104,125,0,116,102,124,118,123,124,117,128],
[116,118,123,124,135,134,0,118,122,134,122,125,122,120],
[136,123,119,140,141,148,132,0,136,151,132,130,135,132],
[117,131,124,133,135,126,128,114,0,127,128,126,137,128],
[131,123,128,129,129,132,116,99,123,0,121,107,128,132],
[123,119,103,117,119,127,128,118,122,129,0,120,140,121],
[124,114,126,130,139,126,125,120,124,143,130,0,131,123],
[127,121,117,128,128,133,128,115,113,122,110,119,0,124],
[116,121,121,125,144,122,130,118,122,118,129,127,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 89, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,137,126,118,130,143,142,134,134,129,147,128,128],
[126,0,122,103,102,114,123,118,108,127,111,134,118,110],
[113,128,0,112,104,116,135,116,119,120,129,132,121,120],
[124,147,138,0,123,130,126,139,125,120,137,147,125,114],
[132,148,146,127,0,135,134,125,134,143,146,158,124,133],
[120,136,134,120,115,0,122,129,126,119,119,135,124,110],
[107,127,115,124,116,128,0,118,113,129,107,142,120,110],
[108,132,134,111,125,121,132,0,115,121,127,141,108,110],
[116,142,131,125,116,124,137,135,0,132,125,140,127,121],
[116,123,130,130,107,131,121,129,118,0,115,136,125,114],
[121,139,121,113,104,131,143,123,125,135,0,132,113,122],
[103,116,118,103,92,115,108,109,110,114,118,0,95,114],
[122,132,129,125,126,126,130,142,123,125,137,155,0,117],
[122,140,130,136,117,140,140,140,129,136,128,136,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 90, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,124,117,120,133,127,105,115,118,122,102,120,124],
[123,0,142,136,117,133,136,129,124,131,118,127,114,123],
[126,108,0,111,111,115,126,112,116,107,115,108,118,105],
[133,114,139,0,122,135,136,121,133,124,123,118,110,127],
[130,133,139,128,0,132,137,114,122,125,128,133,118,131],
[117,117,135,115,118,0,115,110,120,112,124,121,107,119],
[123,114,124,114,113,135,0,106,114,122,127,126,123,114],
[145,121,138,129,136,140,144,0,138,137,134,141,129,137],
[135,126,134,117,128,130,136,112,0,138,123,114,121,130],
[132,119,143,126,125,138,128,113,112,0,127,120,112,126],
[128,132,135,127,122,126,123,116,127,123,0,118,109,124],
[148,123,142,132,117,129,124,109,136,130,132,0,124,128],
[130,136,132,140,132,143,127,121,129,138,141,126,0,141],
[126,127,145,123,119,131,136,113,120,124,126,122,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 91, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,193,172,101,107,114,148,87,131,105,140,111,84],
[40,0,114,158,40,87,23,100,72,62,61,102,58,84],
[57,136,0,153,34,125,77,62,110,70,77,125,73,131],
[78,92,97,0,49,146,69,60,116,91,99,146,102,108],
[149,210,216,201,0,129,99,202,115,178,129,144,115,123],
[143,163,125,104,121,0,130,105,105,104,145,183,120,108],
[136,227,173,181,151,120,0,159,160,111,85,160,183,118],
[102,150,188,190,48,145,91,0,116,124,120,116,110,108],
[163,178,140,134,135,145,90,134,0,125,144,150,119,107],
[119,188,180,159,72,146,139,126,125,0,146,178,119,171],
[145,189,173,151,121,105,165,130,106,104,0,159,154,141],
[110,148,125,104,106,67,90,134,100,72,91,0,123,54],
[139,192,177,148,135,130,67,140,131,131,96,127,0,118],
[166,166,119,142,127,142,132,142,143,79,109,196,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 92, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,140,132,141,133,123,142,123,131,135,136,132,134],
[122,0,138,120,134,137,123,137,126,128,125,125,124,142],
[110,112,0,122,125,126,127,130,108,112,127,123,118,119],
[118,130,128,0,140,130,120,138,117,134,126,126,120,128],
[109,116,125,110,0,117,111,130,113,114,125,123,111,130],
[117,113,124,120,133,0,112,135,113,120,122,114,117,120],
[127,127,123,130,139,138,0,128,116,132,141,130,132,129],
[108,113,120,112,120,115,122,0,105,125,120,120,126,108],
[127,124,142,133,137,137,134,145,0,136,130,128,135,128],
[119,122,138,116,136,130,118,125,114,0,123,132,119,129],
[115,125,123,124,125,128,109,130,120,127,0,124,126,128],
[114,125,127,124,127,136,120,130,122,118,126,0,114,127],
[118,126,132,130,139,133,118,124,115,131,124,136,0,129],
[116,108,131,122,120,130,121,142,122,121,122,123,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 93, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,122,111,116,102,120,108,129,114,122,113,121,121],
[117,0,122,116,122,117,116,121,123,120,117,107,129,120],
[128,128,0,115,117,114,106,124,120,123,115,114,121,109],
[139,134,135,0,130,123,120,126,138,135,123,117,132,127],
[134,128,133,120,0,123,109,112,127,129,117,116,126,122],
[148,133,136,127,127,0,119,126,135,127,123,120,136,130],
[130,134,144,130,141,131,0,128,136,127,129,122,128,132],
[142,129,126,124,138,124,122,0,142,134,123,126,134,124],
[121,127,130,112,123,115,114,108,0,119,113,118,119,112],
[136,130,127,115,121,123,123,116,131,0,122,120,129,125],
[128,133,135,127,133,127,121,127,137,128,0,124,131,125],
[137,143,136,133,134,130,128,124,132,130,126,0,132,137],
[129,121,129,118,124,114,122,116,131,121,119,118,0,117],
[129,130,141,123,128,120,118,126,138,125,125,113,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 94, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,110,134,118,134,104,111,128,114,134,111,138,143],
[129,0,99,118,113,142,134,108,135,127,112,119,130,130],
[140,151,0,131,126,136,130,105,129,129,119,147,129,131],
[116,132,119,0,127,154,124,122,123,129,128,119,131,126],
[132,137,124,123,0,142,137,134,128,129,142,140,128,140],
[116,108,114,96,108,0,102,99,118,105,111,113,112,128],
[146,116,120,126,113,148,0,120,142,132,130,124,137,155],
[139,142,145,128,116,151,130,0,145,115,129,130,131,136],
[122,115,121,127,122,132,108,105,0,120,115,125,114,129],
[136,123,121,121,121,145,118,135,130,0,134,135,148,148],
[116,138,131,122,108,139,120,121,135,116,0,125,122,122],
[139,131,103,131,110,137,126,120,125,115,125,0,123,133],
[112,120,121,119,122,138,113,119,136,102,128,127,0,123],
[107,120,119,124,110,122,95,114,121,102,128,117,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 95, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,129,127,137,116,148,139,136,146,134,141,150,131],
[109,0,101,112,124,109,127,127,123,128,127,119,116,112],
[121,149,0,132,130,127,140,141,129,147,124,143,133,123],
[123,138,118,0,126,122,137,142,127,131,127,123,139,116],
[113,126,120,124,0,103,138,137,130,130,113,126,122,105],
[134,141,123,128,147,0,147,142,120,144,136,141,145,126],
[102,123,110,113,112,103,0,123,119,130,113,118,125,126],
[111,123,109,108,113,108,127,0,109,120,118,115,119,111],
[114,127,121,123,120,130,131,141,0,130,127,125,135,126],
[104,122,103,119,120,106,120,130,120,0,114,128,124,94],
[116,123,126,123,137,114,137,132,123,136,0,128,118,120],
[109,131,107,127,124,109,132,135,125,122,122,0,134,112],
[100,134,117,111,128,105,125,131,115,126,132,116,0,118],
[119,138,127,134,145,124,124,139,124,156,130,138,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 96, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,140,134,131,114,118,129,112,140,130,118,112,124],
[124,0,122,98,115,119,96,110,99,134,146,125,105,126],
[110,128,0,121,136,134,122,121,114,128,116,117,119,131],
[116,152,129,0,138,135,135,151,131,163,140,132,123,140],
[119,135,114,112,0,119,118,125,109,129,131,129,94,130],
[136,131,116,115,131,0,108,125,128,119,129,128,126,111],
[132,154,128,115,132,142,0,154,121,152,137,132,110,139],
[121,140,129,99,125,125,96,0,109,126,135,112,113,124],
[138,151,136,119,141,122,129,141,0,142,131,142,120,146],
[110,116,122,87,121,131,98,124,108,0,112,107,80,128],
[120,104,134,110,119,121,113,115,119,138,0,112,94,120],
[132,125,133,118,121,122,118,138,108,143,138,0,102,123],
[138,145,131,127,156,124,140,137,130,170,156,148,0,142],
[126,124,119,110,120,139,111,126,104,122,130,127,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 97, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,90,116,118,120,123,114,101,115,118,121,108,118],
[139,0,102,135,120,119,114,124,121,121,115,127,111,120],
[160,148,0,146,132,141,135,125,122,136,126,137,126,139],
[134,115,104,0,124,116,123,119,106,125,116,118,118,113],
[132,130,118,126,0,126,120,122,121,139,125,127,115,117],
[130,131,109,134,124,0,131,131,120,140,127,120,131,124],
[127,136,115,127,130,119,0,126,107,131,127,126,112,115],
[136,126,125,131,128,119,124,0,123,129,123,112,127,124],
[149,129,128,144,129,130,143,127,0,142,132,127,128,123],
[135,129,114,125,111,110,119,121,108,0,117,126,119,113],
[132,135,124,134,125,123,123,127,118,133,0,129,116,125],
[129,123,113,132,123,130,124,138,123,124,121,0,123,127],
[142,139,124,132,135,119,138,123,122,131,134,127,0,129],
[132,130,111,137,133,126,135,126,127,137,125,123,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 98, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,130,106,110,114,94,97,107,137,112,110,120,89],
[148,0,131,102,124,119,99,105,130,138,133,141,136,132],
[120,119,0,131,137,125,80,106,120,145,98,131,98,108],
[144,148,119,0,137,127,152,109,159,166,142,136,143,140],
[140,126,113,113,0,135,93,104,126,155,142,115,123,115],
[136,131,125,123,115,0,108,123,133,132,125,103,144,117],
[156,151,170,98,157,142,0,132,132,155,128,161,135,146],
[153,145,144,141,146,127,118,0,139,126,143,141,129,146],
[143,120,130,91,124,117,118,111,0,145,113,112,138,126],
[113,112,105,84,95,118,95,124,105,0,137,104,112,96],
[138,117,152,108,108,125,122,107,137,113,0,138,150,120],
[140,109,119,114,135,147,89,109,138,146,112,0,120,98],
[130,114,152,107,127,106,115,121,112,138,100,130,0,101],
[161,118,142,110,135,133,104,104,124,154,130,152,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 99, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,140,128,112,125,129,140,111,127,121,121,131,117],
[121,0,132,126,124,115,115,118,120,123,116,112,120,119],
[110,118,0,125,109,125,128,135,118,116,131,114,113,116],
[122,124,125,0,108,118,117,139,127,125,123,114,120,123],
[138,126,141,142,0,118,131,143,129,137,127,126,119,122],
[125,135,125,132,132,0,129,134,130,113,124,117,118,123],
[121,135,122,133,119,121,0,135,122,123,125,121,111,125],
[110,132,115,111,107,116,115,0,117,123,113,114,109,113],
[139,130,132,123,121,120,128,133,0,128,128,121,129,125],
[123,127,134,125,113,137,127,127,122,0,130,123,118,113],
[129,134,119,127,123,126,125,137,122,120,0,117,121,119],
[129,138,136,136,124,133,129,136,129,127,133,0,132,125],
[119,130,137,130,131,132,139,141,121,132,129,118,0,121],
[133,131,134,127,128,127,125,137,125,137,131,125,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 100, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,147,134,142,129,137,124,125,129,132,127,145,156],
[102,0,133,121,122,122,120,102,128,120,118,124,133,125],
[103,117,0,128,126,117,126,125,113,114,127,111,125,138],
[116,129,122,0,120,133,115,103,116,120,125,109,140,142],
[108,128,124,130,0,122,125,113,109,122,122,115,127,124],
[121,128,133,117,128,0,122,114,114,116,131,111,134,138],
[113,130,124,135,125,128,0,126,119,120,116,115,131,139],
[126,148,125,147,137,136,124,0,133,118,139,134,142,136],
[125,122,137,134,141,136,131,117,0,137,127,123,132,140],
[121,130,136,130,128,134,130,132,113,0,129,128,142,128],
[118,132,123,125,128,119,134,111,123,121,0,121,133,134],
[123,126,139,141,135,139,135,116,127,122,129,0,139,138],
[105,117,125,110,123,116,119,108,118,108,117,111,0,127],
[94,125,112,108,126,112,111,114,110,122,116,112,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 101, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,118,117,118,107,128,123,126,117,129,135,116,120],
[121,0,113,129,126,110,117,120,121,110,126,114,118,122],
[132,137,0,136,125,117,128,133,140,125,137,126,130,125],
[133,121,114,0,130,110,125,122,126,112,127,125,125,125],
[132,124,125,120,0,108,119,125,126,123,124,120,121,123],
[143,140,133,140,142,0,124,133,143,128,142,138,134,141],
[122,133,122,125,131,126,0,123,129,114,137,130,126,118],
[127,130,117,128,125,117,127,0,132,125,139,134,125,134],
[124,129,110,124,124,107,121,118,0,107,128,122,119,119],
[133,140,125,138,127,122,136,125,143,0,134,133,129,133],
[121,124,113,123,126,108,113,111,122,116,0,124,111,127],
[115,136,124,125,130,112,120,116,128,117,126,0,119,125],
[134,132,120,125,129,116,124,125,131,121,139,131,0,124],
[130,128,125,125,127,109,132,116,131,117,123,125,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 102, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,125,134,139,124,117,93,117,128,112,101,112,113],
[130,0,136,133,121,131,107,115,130,110,116,120,121,115],
[125,114,0,114,126,113,115,117,133,125,109,126,121,116],
[116,117,136,0,122,109,106,99,124,107,103,111,109,112],
[111,129,124,128,0,108,109,106,113,127,109,113,120,121],
[126,119,137,141,142,0,117,136,127,119,118,130,113,128],
[133,143,135,144,141,133,0,122,142,117,111,126,112,126],
[157,135,133,151,144,114,128,0,129,120,128,147,124,152],
[133,120,117,126,137,123,108,121,0,116,112,117,108,128],
[122,140,125,143,123,131,133,130,134,0,120,126,124,154],
[138,134,141,147,141,132,139,122,138,130,0,129,128,128],
[149,130,124,139,137,120,124,103,133,124,121,0,113,146],
[138,129,129,141,130,137,138,126,142,126,122,137,0,132],
[137,135,134,138,129,122,124,98,122,96,122,104,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 103, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,104,141,108,105,130,119,84,103,140,90,109,161],
[109,0,131,119,126,114,94,92,123,97,111,124,128,149],
[146,119,0,93,98,107,122,140,126,127,107,125,132,155],
[109,131,157,0,125,124,136,147,132,118,119,119,116,148],
[142,124,152,125,0,132,142,139,135,87,141,128,151,150],
[145,136,143,126,118,0,129,128,115,103,131,113,112,141],
[120,156,128,114,108,121,0,134,122,111,118,130,127,113],
[131,158,110,103,111,122,116,0,101,124,143,104,99,150],
[166,127,124,118,115,135,128,149,0,120,136,133,135,154],
[147,153,123,132,163,147,139,126,130,0,137,140,133,173],
[110,139,143,131,109,119,132,107,114,113,0,124,120,145],
[160,126,125,131,122,137,120,146,117,110,126,0,166,158],
[141,122,118,134,99,138,123,151,115,117,130,84,0,150],
[89,101,95,102,100,109,137,100,96,77,105,92,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 104, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,125,144,122,142,127,133,117,135,135,122,135,133],
[123,0,131,130,117,129,126,125,123,131,128,132,134,133],
[125,119,0,123,112,128,127,122,122,125,128,115,135,131],
[106,120,127,0,114,122,131,128,116,126,120,116,124,131],
[128,133,138,136,0,135,138,132,120,134,133,126,129,132],
[108,121,122,128,115,0,125,120,113,126,126,112,112,126],
[123,124,123,119,112,125,0,118,116,131,135,120,118,133],
[117,125,128,122,118,130,132,0,126,136,124,112,121,129],
[133,127,128,134,130,137,134,124,0,137,132,127,139,138],
[115,119,125,124,116,124,119,114,113,0,126,108,120,128],
[115,122,122,130,117,124,115,126,118,124,0,117,124,121],
[128,118,135,134,124,138,130,138,123,142,133,0,139,131],
[115,116,115,126,121,138,132,129,111,130,126,111,0,136],
[117,117,119,119,118,124,117,121,112,122,129,119,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 105, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,107,119,139,110,126,115,118,123,133,131,114,122],
[117,0,120,97,119,118,106,105,107,116,117,113,119,120],
[143,130,0,135,128,110,131,119,114,130,133,127,138,124],
[131,153,115,0,142,143,126,139,128,147,131,136,137,125],
[111,131,122,108,0,121,112,107,121,114,128,115,123,117],
[140,132,140,107,129,0,126,131,123,130,140,117,139,136],
[124,144,119,124,138,124,0,143,142,144,144,131,140,131],
[135,145,131,111,143,119,107,0,130,134,120,119,137,129],
[132,143,136,122,129,127,108,120,0,118,136,123,133,118],
[127,134,120,103,136,120,106,116,132,0,121,120,126,122],
[117,133,117,119,122,110,106,130,114,129,0,130,136,145],
[119,137,123,114,135,133,119,131,127,130,120,0,138,130],
[136,131,112,113,127,111,110,113,117,124,114,112,0,130],
[128,130,126,125,133,114,119,121,132,128,105,120,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 106, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,125,130,117,125,118,130,128,125,144,118,120,108],
[123,0,136,119,116,132,127,128,140,132,138,121,126,115],
[125,114,0,111,122,124,117,118,135,112,134,106,127,108],
[120,131,139,0,125,133,127,132,133,120,130,116,135,117],
[133,134,128,125,0,129,131,127,142,134,151,123,138,126],
[125,118,126,117,121,0,118,122,126,115,135,113,129,116],
[132,123,133,123,119,132,0,117,131,129,142,115,119,109],
[120,122,132,118,123,128,133,0,134,132,135,113,117,109],
[122,110,115,117,108,124,119,116,0,123,135,116,137,102],
[125,118,138,130,116,135,121,118,127,0,126,110,126,97],
[106,112,116,120,99,115,108,115,115,124,0,112,120,95],
[132,129,144,134,127,137,135,137,134,140,138,0,139,113],
[130,124,123,115,112,121,131,133,113,124,130,111,0,115],
[142,135,142,133,124,134,141,141,148,153,155,137,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 107, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,147,141,137,148,143,125,132,141,128,136,140,141],
[117,0,122,134,128,132,119,128,121,119,124,115,130,128],
[103,128,0,134,123,120,116,118,113,118,109,110,118,109],
[109,116,116,0,118,112,110,101,110,110,109,105,110,104],
[113,122,127,132,0,141,135,117,119,125,120,111,137,124],
[102,118,130,138,109,0,132,125,120,123,104,115,126,123],
[107,131,134,140,115,118,0,112,117,127,113,126,125,113],
[125,122,132,149,133,125,138,0,127,131,124,116,123,132],
[118,129,137,140,131,130,133,123,0,132,124,130,133,138],
[109,131,132,140,125,127,123,119,118,0,126,128,121,119],
[122,126,141,141,130,146,137,126,126,124,0,127,129,127],
[114,135,140,145,139,135,124,134,120,122,123,0,121,135],
[110,120,132,140,113,124,125,127,117,129,121,129,0,116],
[109,122,141,146,126,127,137,118,112,131,123,115,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 108, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,164,125,144,131,134,140,147,148,122,138,152,155],
[117,0,147,115,129,132,124,118,147,124,134,141,121,131],
[86,103,0,110,132,123,118,99,125,139,120,128,131,118],
[125,135,140,0,128,139,131,128,143,144,145,126,136,143],
[106,121,118,122,0,128,129,117,122,137,113,119,129,140],
[119,118,127,111,122,0,107,128,126,123,132,112,127,133],
[116,126,132,119,121,143,0,124,133,135,117,116,140,135],
[110,132,151,122,133,122,126,0,142,121,115,124,129,154],
[103,103,125,107,128,124,117,108,0,113,110,120,116,142],
[102,126,111,106,113,127,115,129,137,0,122,130,135,114],
[128,116,130,105,137,118,133,135,140,128,0,121,124,117],
[112,109,122,124,131,138,134,126,130,120,129,0,125,132],
[98,129,119,114,121,123,110,121,134,115,126,125,0,127],
[95,119,132,107,110,117,115,96,108,136,133,118,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 109, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,116,131,129,130,128,111,127,139,143,120,123,112],
[133,0,120,135,120,133,130,129,136,141,155,131,135,124],
[134,130,0,139,144,152,127,128,129,142,142,126,122,131],
[119,115,111,0,122,120,105,124,115,126,137,120,117,119],
[121,130,106,128,0,142,109,118,126,146,136,126,111,117],
[120,117,98,130,108,0,114,122,111,120,131,118,105,115],
[122,120,123,145,141,136,0,126,143,116,137,135,131,121],
[139,121,122,126,132,128,124,0,132,133,135,125,133,134],
[123,114,121,135,124,139,107,118,0,122,127,106,120,106],
[111,109,108,124,104,130,134,117,128,0,130,124,104,118],
[107,95,108,113,114,119,113,115,123,120,0,122,114,115],
[130,119,124,130,124,132,115,125,144,126,128,0,110,113],
[127,115,128,133,139,145,119,117,130,146,136,140,0,125],
[138,126,119,131,133,135,129,116,144,132,135,137,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 110, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,136,128,140,129,125,125,135,151,139,121,132,140],
[125,0,133,111,133,122,113,119,136,132,141,121,120,140],
[114,117,0,117,120,123,101,96,117,123,125,121,108,123],
[122,139,133,0,125,134,110,129,135,130,136,124,113,132],
[110,117,130,125,0,117,120,119,122,136,126,120,119,131],
[121,128,127,116,133,0,118,120,123,135,145,129,121,133],
[125,137,149,140,130,132,0,125,135,135,147,136,119,140],
[125,131,154,121,131,130,125,0,123,132,135,123,122,133],
[115,114,133,115,128,127,115,127,0,133,125,131,126,125],
[99,118,127,120,114,115,115,118,117,0,124,116,119,125],
[111,109,125,114,124,105,103,115,125,126,0,111,114,116],
[129,129,129,126,130,121,114,127,119,134,139,0,117,132],
[118,130,142,137,131,129,131,128,124,131,136,133,0,122],
[110,110,127,118,119,117,110,117,125,125,134,118,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 111, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,150,136,150,135,130,137,133,131,145,143,138,139],
[125,0,131,137,135,133,129,140,137,126,153,137,130,132],
[100,119,0,124,121,120,124,111,113,120,129,123,118,115],
[114,113,126,0,126,120,126,118,128,112,131,129,126,125],
[100,115,129,124,0,126,119,120,122,122,135,128,127,129],
[115,117,130,130,124,0,124,129,128,120,131,129,127,122],
[120,121,126,124,131,126,0,123,122,116,130,127,128,121],
[113,110,139,132,130,121,127,0,117,124,143,133,120,127],
[117,113,137,122,128,122,128,133,0,124,139,140,118,123],
[119,124,130,138,128,130,134,126,126,0,134,123,131,132],
[105,97,121,119,115,119,120,107,111,116,0,120,119,110],
[107,113,127,121,122,121,123,117,110,127,130,0,127,112],
[112,120,132,124,123,123,122,130,132,119,131,123,0,122],
[111,118,135,125,121,128,129,123,127,118,140,138,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 112, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,114,119,125,113,115,134,116,125,125,128,120,113],
[124,0,127,127,114,119,135,139,100,119,130,119,141,132],
[136,123,0,111,125,117,140,130,103,111,123,121,145,114],
[131,123,139,0,138,131,123,141,124,121,134,135,150,117],
[125,136,125,112,0,116,136,137,110,112,124,120,143,108],
[137,131,133,119,134,0,134,136,115,110,134,120,141,109],
[135,115,110,127,114,116,0,133,99,97,126,113,125,113],
[116,111,120,109,113,114,117,0,100,96,122,99,125,103],
[134,150,147,126,140,135,151,150,0,115,130,127,145,131],
[125,131,139,129,138,140,153,154,135,0,130,142,154,122],
[125,120,127,116,126,116,124,128,120,120,0,125,131,121],
[122,131,129,115,130,130,137,151,123,108,125,0,137,130],
[130,109,105,100,107,109,125,125,105,96,119,113,0,118],
[137,118,136,133,142,141,137,147,119,128,129,120,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 113, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,121,121,109,110,103,124,118,135,114,113,119,109],
[139,0,129,134,126,135,128,124,128,130,125,124,137,119],
[129,121,0,134,118,122,124,127,128,132,131,118,131,128],
[129,116,116,0,122,117,124,120,128,115,113,124,135,118],
[141,124,132,128,0,143,131,128,129,127,133,127,135,118],
[140,115,128,133,107,0,124,127,122,128,118,123,126,129],
[147,122,126,126,119,126,0,126,119,129,112,134,133,124],
[126,126,123,130,122,123,124,0,126,126,110,113,129,110],
[132,122,122,122,121,128,131,124,0,122,121,128,137,127],
[115,120,118,135,123,122,121,124,128,0,118,127,137,116],
[136,125,119,137,117,132,138,140,129,132,0,120,139,119],
[137,126,132,126,123,127,116,137,122,123,130,0,128,117],
[131,113,119,115,115,124,117,121,113,113,111,122,0,108],
[141,131,122,132,132,121,126,140,123,134,131,133,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 114, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,111,115,112,114,134,124,127,117,131,122,121,104],
[129,0,110,112,119,130,126,136,133,131,124,133,125,125],
[139,140,0,120,117,126,129,136,127,125,126,129,129,117],
[135,138,130,0,122,139,126,133,127,134,132,128,125,114],
[138,131,133,128,0,126,131,140,136,134,131,132,143,121],
[136,120,124,111,124,0,126,126,129,119,122,131,117,111],
[116,124,121,124,119,124,0,132,137,134,137,133,121,118],
[126,114,114,117,110,124,118,0,120,107,114,113,124,123],
[123,117,123,123,114,121,113,130,0,126,128,129,138,109],
[133,119,125,116,116,131,116,143,124,0,116,131,123,120],
[119,126,124,118,119,128,113,136,122,134,0,134,114,115],
[128,117,121,122,118,119,117,137,121,119,116,0,129,114],
[129,125,121,125,107,133,129,126,112,127,136,121,0,109],
[146,125,133,136,129,139,132,127,141,130,135,136,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 115, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,132,122,132,128,138,128,137,147,130,133,133,138],
[112,0,117,110,121,122,113,119,134,126,119,115,118,127],
[118,133,0,122,128,135,138,129,131,134,126,135,144,131],
[128,140,128,0,128,124,142,131,140,131,123,141,139,133],
[118,129,122,122,0,129,136,127,137,133,127,138,129,134],
[122,128,115,126,121,0,134,127,144,122,132,130,132,135],
[112,137,112,108,114,116,0,119,131,120,123,127,121,122],
[122,131,121,119,123,123,131,0,134,128,125,123,131,129],
[113,116,119,110,113,106,119,116,0,118,113,117,117,114],
[103,124,116,119,117,128,130,122,132,0,125,127,128,132],
[120,131,124,127,123,118,127,125,137,125,0,126,130,139],
[117,135,115,109,112,120,123,127,133,123,124,0,126,119],
[117,132,106,111,121,118,129,119,133,122,120,124,0,135],
[112,123,119,117,116,115,128,121,136,118,111,131,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 116, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,120,107,121,112,118,98,107,104,114,123,115,120],
[117,0,130,117,129,126,121,108,109,129,115,123,116,125],
[130,120,0,122,112,105,105,105,98,115,103,113,120,105],
[143,133,128,0,130,116,124,119,109,121,133,141,123,126],
[129,121,138,120,0,123,123,119,111,132,118,112,112,123],
[138,124,145,134,127,0,122,122,117,134,121,146,142,135],
[132,129,145,126,127,128,0,118,123,119,122,134,129,143],
[152,142,145,131,131,128,132,0,128,141,117,134,148,139],
[143,141,152,141,139,133,127,122,0,134,138,159,140,121],
[146,121,135,129,118,116,131,109,116,0,113,140,132,119],
[136,135,147,117,132,129,128,133,112,137,0,133,132,139],
[127,127,137,109,138,104,116,116,91,110,117,0,138,122],
[135,134,130,127,138,108,121,102,110,118,118,112,0,133],
[130,125,145,124,127,115,107,111,129,131,111,128,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 117, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,136,140,130,127,133,136,120,133,131,131,120,145],
[119,0,116,133,109,111,126,129,114,124,107,119,113,125],
[114,134,0,131,114,125,129,123,126,125,120,125,128,120],
[110,117,119,0,109,117,120,121,117,118,111,115,103,137],
[120,141,136,141,0,133,117,130,131,127,134,131,128,138],
[123,139,125,133,117,0,126,130,126,127,125,120,120,130],
[117,124,121,130,133,124,0,126,134,131,122,132,126,128],
[114,121,127,129,120,120,124,0,125,125,123,115,111,144],
[130,136,124,133,119,124,116,125,0,134,118,121,106,132],
[117,126,125,132,123,123,119,125,116,0,124,124,115,133],
[119,143,130,139,116,125,128,127,132,126,0,129,123,134],
[119,131,125,135,119,130,118,135,129,126,121,0,119,139],
[130,137,122,147,122,130,124,139,144,135,127,131,0,138],
[105,125,130,113,112,120,122,106,118,117,116,111,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 118, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,117,154,132,128,120,142,143,126,128,131,124,145],
[128,0,112,140,129,137,114,131,115,138,122,133,123,121],
[133,138,0,157,137,154,129,135,142,128,133,135,124,153],
[96,110,93,0,115,125,107,132,113,108,111,111,99,126],
[118,121,113,135,0,138,110,136,124,134,129,131,129,134],
[122,113,96,125,112,0,100,115,111,112,110,121,106,112],
[130,136,121,143,140,150,0,139,139,131,137,134,134,139],
[108,119,115,118,114,135,111,0,114,120,122,117,108,131],
[107,135,108,137,126,139,111,136,0,126,124,121,123,128],
[124,112,122,142,116,138,119,130,124,0,133,123,130,132],
[122,128,117,139,121,140,113,128,126,117,0,123,124,131],
[119,117,115,139,119,129,116,133,129,127,127,0,132,134],
[126,127,126,151,121,144,116,142,127,120,126,118,0,131],
[105,129,97,124,116,138,111,119,122,118,119,116,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 119, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,143,131,134,104,123,128,128,132,116,120,130,125],
[128,0,140,135,137,128,136,126,140,132,133,121,123,132],
[107,110,0,125,125,106,116,105,111,115,111,106,101,103],
[119,115,125,0,118,118,122,124,119,122,109,121,117,112],
[116,113,125,132,0,122,133,120,129,128,124,124,114,119],
[146,122,144,132,128,0,130,130,133,125,126,124,126,122],
[127,114,134,128,117,120,0,118,130,138,131,133,125,143],
[122,124,145,126,130,120,132,0,132,122,131,124,126,127],
[122,110,139,131,121,117,120,118,0,130,123,114,139,111],
[118,118,135,128,122,125,112,128,120,0,134,98,128,114],
[134,117,139,141,126,124,119,119,127,116,0,126,121,132],
[130,129,144,129,126,126,117,126,136,152,124,0,128,113],
[120,127,149,133,136,124,125,124,111,122,129,122,0,116],
[125,118,147,138,131,128,107,123,139,136,118,137,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 120, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,120,99,123,87,108,114,96,124,113,86,142,101],
[123,0,117,132,135,77,129,102,115,118,97,81,132,83],
[130,133,0,117,161,89,124,144,101,112,104,113,167,124],
[151,118,133,0,145,114,134,114,89,134,108,105,136,104],
[127,115,89,105,0,89,97,97,90,124,100,85,126,83],
[163,173,161,136,161,0,169,164,128,167,149,96,159,135],
[142,121,126,116,153,81,0,145,120,146,100,106,133,107],
[136,148,106,136,153,86,105,0,122,145,124,91,144,113],
[154,135,149,161,160,122,130,128,0,167,143,107,151,103],
[126,132,138,116,126,83,104,105,83,0,86,83,120,102],
[137,153,146,142,150,101,150,126,107,164,0,108,174,123],
[164,169,137,145,165,154,144,159,143,167,142,0,178,121],
[108,118,83,114,124,91,117,106,99,130,76,72,0,76],
[149,167,126,146,167,115,143,137,147,148,127,129,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 121, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,137,129,138,134,125,132,126,141,129,145,126,148],
[127,0,130,110,121,121,122,120,112,149,107,134,122,126],
[113,120,0,110,125,112,118,121,122,124,115,129,133,135],
[121,140,140,0,133,126,133,128,125,147,136,135,133,144],
[112,129,125,117,0,123,145,122,123,147,126,135,141,139],
[116,129,138,124,127,0,138,145,125,140,129,152,139,133],
[125,128,132,117,105,112,0,121,110,139,117,126,125,130],
[118,130,129,122,128,105,129,0,106,140,123,132,125,147],
[124,138,128,125,127,125,140,144,0,143,130,121,127,137],
[109,101,126,103,103,110,111,110,107,0,102,123,108,119],
[121,143,135,114,124,121,133,127,120,148,0,135,136,139],
[105,116,121,115,115,98,124,118,129,127,115,0,107,125],
[124,128,117,117,109,111,125,125,123,142,114,143,0,136],
[102,124,115,106,111,117,120,103,113,131,111,125,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 122, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,123,111,115,115,124,132,122,122,141,141,122,122],
[136,0,134,156,125,136,137,138,135,140,150,156,123,146],
[127,116,0,131,106,127,121,121,119,138,141,141,120,125],
[139,94,119,0,111,121,133,130,123,117,135,145,120,137],
[135,125,144,139,0,147,143,131,145,127,150,157,147,128],
[135,114,123,129,103,0,116,130,131,132,145,141,130,115],
[126,113,129,117,107,134,0,149,122,126,143,133,121,128],
[118,112,129,120,119,120,101,0,125,131,140,134,124,122],
[128,115,131,127,105,119,128,125,0,129,135,139,116,104],
[128,110,112,133,123,118,124,119,121,0,143,150,120,127],
[109,100,109,115,100,105,107,110,115,107,0,139,105,124],
[109,94,109,105,93,109,117,116,111,100,111,0,114,111],
[128,127,130,130,103,120,129,126,134,130,145,136,0,131],
[128,104,125,113,122,135,122,128,146,123,126,139,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 123, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,127,155,113,132,139,146,162,138,148,81,119,128],
[118,0,94,117,106,99,112,131,143,141,148,96,105,106],
[123,156,0,141,117,126,121,143,147,152,138,124,142,109],
[95,133,109,0,101,132,156,157,139,112,131,99,126,122],
[137,144,133,149,0,126,120,158,149,136,134,122,159,156],
[118,151,124,118,124,0,149,129,127,129,125,96,128,111],
[111,138,129,94,130,101,0,141,128,145,152,119,147,128],
[104,119,107,93,92,121,109,0,95,113,121,91,115,70],
[88,107,103,111,101,123,122,155,0,104,108,106,137,121],
[112,109,98,138,114,121,105,137,146,0,146,122,125,120],
[102,102,112,119,116,125,98,129,142,104,0,96,121,104],
[169,154,126,151,128,154,131,159,144,128,154,0,145,114],
[131,145,108,124,91,122,103,135,113,125,129,105,0,111],
[122,144,141,128,94,139,122,180,129,130,146,136,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 124, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,124,128,138,130,144,131,131,151,128,145,132,148],
[100,0,104,104,107,111,109,102,93,122,111,103,105,104],
[126,146,0,130,146,128,128,114,125,141,118,138,132,135],
[122,146,120,0,124,142,127,107,116,138,138,126,123,131],
[112,143,104,126,0,127,119,124,128,132,116,124,108,129],
[120,139,122,108,123,0,122,117,111,129,137,138,122,122],
[106,141,122,123,131,128,0,106,132,142,122,136,128,119],
[119,148,136,143,126,133,144,0,135,133,135,147,127,140],
[119,157,125,134,122,139,118,115,0,139,136,136,132,135],
[99,128,109,112,118,121,108,117,111,0,112,127,108,118],
[122,139,132,112,134,113,128,115,114,138,0,138,129,133],
[105,147,112,124,126,112,114,103,114,123,112,0,115,135],
[118,145,118,127,142,128,122,123,118,142,121,135,0,129],
[102,146,115,119,121,128,131,110,115,132,117,115,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 125, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,93,112,99,138,99,99,119,141,114,129,99,112],
[127,0,129,140,128,134,135,133,139,153,120,159,116,134],
[157,121,0,140,113,172,132,115,140,143,99,141,117,123],
[138,110,110,0,118,153,124,118,142,132,122,119,109,128],
[151,122,137,132,0,140,152,119,153,174,137,150,137,123],
[112,116,78,97,110,0,101,96,100,110,87,105,99,92],
[151,115,118,126,98,149,0,119,139,157,121,128,128,112],
[151,117,135,132,131,154,131,0,134,166,129,135,132,121],
[131,111,110,108,97,150,111,116,0,143,115,122,92,99],
[109,97,107,118,76,140,93,84,107,0,120,93,99,86],
[136,130,151,128,113,163,129,121,135,130,0,123,116,124],
[121,91,109,131,100,145,122,115,128,157,127,0,129,93],
[151,134,133,141,113,151,122,118,158,151,134,121,0,114],
[138,116,127,122,127,158,138,129,151,164,126,157,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 126, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,114,127,136,118,124,117,126,123,133,127,120,132],
[129,0,128,141,128,123,120,120,136,135,128,132,131,136],
[136,122,0,139,130,135,124,129,133,139,131,127,129,143],
[123,109,111,0,131,113,112,123,116,121,123,125,128,113],
[114,122,120,119,0,110,111,100,118,125,120,110,122,127],
[132,127,115,137,140,0,115,119,134,140,123,138,129,125],
[126,130,126,138,139,135,0,131,126,128,127,127,125,142],
[133,130,121,127,150,131,119,0,138,136,125,130,125,146],
[124,114,117,134,132,116,124,112,0,127,125,109,118,131],
[127,115,111,129,125,110,122,114,123,0,119,127,115,136],
[117,122,119,127,130,127,123,125,125,131,0,128,126,119],
[123,118,123,125,140,112,123,120,141,123,122,0,128,131],
[130,119,121,122,128,121,125,125,132,135,124,122,0,117],
[118,114,107,137,123,125,108,104,119,114,131,119,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 127, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,133,158,158,165,142,133,141,156,147,117,129,120],
[110,0,120,157,138,136,133,144,125,160,138,118,113,119],
[117,130,0,144,133,154,137,143,130,139,119,108,112,113],
[92,93,106,0,107,124,101,109,93,136,107,99,100,112],
[92,112,117,143,0,137,141,148,132,137,114,110,122,115],
[85,114,96,126,113,0,128,124,91,131,112,78,103,100],
[108,117,113,149,109,122,0,125,124,139,125,110,110,121],
[117,106,107,141,102,126,125,0,115,123,138,105,114,136],
[109,125,120,157,118,159,126,135,0,153,118,110,133,108],
[94,90,111,114,113,119,111,127,97,0,107,106,98,96],
[103,112,131,143,136,138,125,112,132,143,0,129,123,130],
[133,132,142,151,140,172,140,145,140,144,121,0,139,137],
[121,137,138,150,128,147,140,136,117,152,127,111,0,135],
[130,131,137,138,135,150,129,114,142,154,120,113,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 128, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,111,126,124,122,117,127,127,115,121,121,126,120],
[124,0,112,124,127,113,115,113,125,106,116,116,122,117],
[139,138,0,134,144,114,133,123,124,133,140,127,142,125],
[124,126,116,0,122,111,115,116,115,126,118,121,130,107],
[126,123,106,128,0,119,117,128,120,107,120,131,124,117],
[128,137,136,139,131,0,137,119,133,119,133,125,128,126],
[133,135,117,135,133,113,0,125,138,132,136,131,145,135],
[123,137,127,134,122,131,125,0,129,122,132,125,128,133],
[123,125,126,135,130,117,112,121,0,112,130,125,126,124],
[135,144,117,124,143,131,118,128,138,0,130,141,132,127],
[129,134,110,132,130,117,114,118,120,120,0,119,127,115],
[129,134,123,129,119,125,119,125,125,109,131,0,123,118],
[124,128,108,120,126,122,105,122,124,118,123,127,0,119],
[130,133,125,143,133,124,115,117,126,123,135,132,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 129, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,142,155,149,164,159,152,123,173,141,177,156,130],
[90,0,140,136,141,145,130,140,111,142,124,157,128,96],
[108,110,0,127,125,137,132,140,124,133,137,144,130,118],
[95,114,123,0,129,131,148,128,113,136,117,138,116,97],
[101,109,125,121,0,114,135,109,109,129,119,137,132,111],
[86,105,113,119,136,0,125,130,107,142,127,130,127,113],
[91,120,118,102,115,125,0,114,110,145,109,120,125,96],
[98,110,110,122,141,120,136,0,120,140,126,149,131,105],
[127,139,126,137,141,143,140,130,0,161,120,148,133,126],
[77,108,117,114,121,108,105,110,89,0,110,143,107,103],
[109,126,113,133,131,123,141,124,130,140,0,131,121,115],
[73,93,106,112,113,120,130,101,102,107,119,0,113,81],
[94,122,120,134,118,123,125,119,117,143,129,137,0,101],
[120,154,132,153,139,137,154,145,124,147,135,169,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 130, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,133,124,140,152,125,142,150,145,143,153,131,122],
[120,0,121,131,132,140,125,125,126,141,128,145,137,111],
[117,129,0,140,135,146,125,117,149,143,135,162,118,142],
[126,119,110,0,122,112,108,103,147,140,135,137,136,121],
[110,118,115,128,0,124,120,132,144,123,143,133,131,129],
[98,110,104,138,126,0,93,116,132,116,135,138,139,108],
[125,125,125,142,130,157,0,133,133,159,134,144,142,128],
[108,125,133,147,118,134,117,0,136,126,139,140,148,109],
[100,124,101,103,106,118,117,114,0,135,104,132,106,110],
[105,109,107,110,127,134,91,124,115,0,113,118,130,114],
[107,122,115,115,107,115,116,111,146,137,0,140,123,119],
[97,105,88,113,117,112,106,110,118,132,110,0,122,103],
[119,113,132,114,119,111,108,102,144,120,127,128,0,103],
[128,139,108,129,121,142,122,141,140,136,131,147,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 131, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,145,133,130,126,107,123,117,127,136,122,117,140],
[123,0,119,122,118,119,120,116,106,126,128,102,119,122],
[105,131,0,117,128,117,114,120,119,132,119,110,115,124],
[117,128,133,0,124,128,126,128,123,135,133,123,122,133],
[120,132,122,126,0,125,122,124,120,119,126,117,124,128],
[124,131,133,122,125,0,125,128,116,130,130,117,121,120],
[143,130,136,124,128,125,0,137,128,133,117,108,126,136],
[127,134,130,122,126,122,113,0,120,139,128,117,115,131],
[133,144,131,127,130,134,122,130,0,136,135,131,121,139],
[123,124,118,115,131,120,117,111,114,0,133,105,115,127],
[114,122,131,117,124,120,133,122,115,117,0,106,120,120],
[128,148,140,127,133,133,142,133,119,145,144,0,118,132],
[133,131,135,128,126,129,124,135,129,135,130,132,0,128],
[110,128,126,117,122,130,114,119,111,123,130,118,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 132, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,149,139,136,163,155,167,146,176,148,130,151,151],
[138,0,167,128,122,150,148,121,129,126,133,113,142,134],
[101,83,0,92,106,127,115,113,106,133,109,94,123,108],
[111,122,158,0,119,142,142,146,117,138,116,108,138,153],
[114,128,144,131,0,125,115,140,126,140,124,126,127,113],
[87,100,123,108,125,0,137,133,126,123,138,99,121,117],
[95,102,135,108,135,113,0,120,134,122,129,88,107,139],
[83,129,137,104,110,117,130,0,116,96,107,113,109,132],
[104,121,144,133,124,124,116,134,0,126,102,107,133,127],
[74,124,117,112,110,127,128,154,124,0,120,99,120,119],
[102,117,141,134,126,112,121,143,148,130,0,86,136,136],
[120,137,156,142,124,151,162,137,143,151,164,0,133,116],
[99,108,127,112,123,129,143,141,117,130,114,117,0,120],
[99,116,142,97,137,133,111,118,123,131,114,134,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 133, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,109,138,160,155,150,130,151,105,111,121,102,157],
[129,0,137,119,121,146,146,124,125,123,130,139,123,124],
[141,113,0,120,171,141,145,159,156,91,127,143,130,123],
[112,131,130,0,162,148,118,142,141,120,111,141,131,121],
[90,129,79,88,0,111,112,102,95,78,79,112,89,92],
[95,104,109,102,139,0,131,140,105,85,93,116,79,119],
[100,104,105,132,138,119,0,113,90,132,139,116,130,140],
[120,126,91,108,148,110,137,0,114,108,105,151,109,122],
[99,125,94,109,155,145,160,136,0,114,131,114,100,109],
[145,127,159,130,172,165,118,142,136,0,131,140,141,165],
[139,120,123,139,171,157,111,145,119,119,0,127,128,133],
[129,111,107,109,138,134,134,99,136,110,123,0,106,137],
[148,127,120,119,161,171,120,141,150,109,122,144,0,119],
[93,126,127,129,158,131,110,128,141,85,117,113,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 134, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,119,135,103,138,122,123,117,131,135,128,133,129],
[129,0,130,124,123,128,147,145,123,121,127,128,141,126],
[131,120,0,131,99,126,138,124,130,126,146,138,137,122],
[115,126,119,0,111,109,126,122,119,119,124,128,135,120],
[147,127,151,139,0,123,154,151,129,129,155,161,148,147],
[112,122,124,141,127,0,126,118,110,118,129,150,138,125],
[128,103,112,124,96,124,0,112,120,121,134,125,131,132],
[127,105,126,128,99,132,138,0,124,116,129,133,134,120],
[133,127,120,131,121,140,130,126,0,124,134,124,144,114],
[119,129,124,131,121,132,129,134,126,0,130,136,123,123],
[115,123,104,126,95,121,116,121,116,120,0,111,112,114],
[122,122,112,122,89,100,125,117,126,114,139,0,123,128],
[117,109,113,115,102,112,119,116,106,127,138,127,0,111],
[121,124,128,130,103,125,118,130,136,127,136,122,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 135, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,133,118,117,113,111,113,113,125,121,118,124,126],
[129,0,135,126,126,132,113,115,123,137,112,122,128,123],
[117,115,0,115,104,112,121,119,119,125,111,113,110,122],
[132,124,135,0,121,117,118,121,119,131,127,123,120,123],
[133,124,146,129,0,134,120,127,125,137,124,132,123,117],
[137,118,138,133,116,0,115,114,128,135,114,115,123,122],
[139,137,129,132,130,135,0,134,131,127,123,133,134,139],
[137,135,131,129,123,136,116,0,124,136,127,137,129,137],
[137,127,131,131,125,122,119,126,0,125,110,127,123,130],
[125,113,125,119,113,115,123,114,125,0,118,114,112,121],
[129,138,139,123,126,136,127,123,140,132,0,129,129,131],
[132,128,137,127,118,135,117,113,123,136,121,0,121,134],
[126,122,140,130,127,127,116,121,127,138,121,129,0,123],
[124,127,128,127,133,128,111,113,120,129,119,116,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 136, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,95,96,100,107,127,109,119,83,134,127,111,114],
[152,0,112,91,108,119,125,112,126,109,130,135,126,118],
[155,138,0,121,113,144,140,129,134,132,161,147,132,133],
[154,159,129,0,137,143,157,143,130,146,160,160,140,117],
[150,142,137,113,0,138,143,137,144,153,151,149,136,136],
[143,131,106,107,112,0,130,125,129,106,138,138,125,122],
[123,125,110,93,107,120,0,133,107,101,141,123,124,121],
[141,138,121,107,113,125,117,0,113,98,120,127,119,126],
[131,124,116,120,106,121,143,137,0,128,143,141,129,129],
[167,141,118,104,97,144,149,152,122,0,161,150,132,122],
[116,120,89,90,99,112,109,130,107,89,0,130,123,119],
[123,115,103,90,101,112,127,123,109,100,120,0,119,108],
[139,124,118,110,114,125,126,131,121,118,127,131,0,115],
[136,132,117,133,114,128,129,124,121,128,131,142,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 137, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,129,127,147,127,139,142,127,138,114,137,130,124],
[133,0,116,115,140,124,126,131,124,135,116,123,129,122],
[121,134,0,134,136,127,129,130,130,134,121,143,138,133],
[123,135,116,0,138,125,132,130,124,129,123,141,121,127],
[103,110,114,112,0,110,108,109,108,118,116,123,121,109],
[123,126,123,125,140,0,139,135,132,127,120,139,135,126],
[111,124,121,118,142,111,0,124,120,120,118,129,134,107],
[108,119,120,120,141,115,126,0,117,132,115,126,119,105],
[123,126,120,126,142,118,130,133,0,125,124,133,128,129],
[112,115,116,121,132,123,130,118,125,0,117,128,126,115],
[136,134,129,127,134,130,132,135,126,133,0,122,133,121],
[113,127,107,109,127,111,121,124,117,122,128,0,122,113],
[120,121,112,129,129,115,116,131,122,124,117,128,0,120],
[126,128,117,123,141,124,143,145,121,135,129,137,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 138, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,104,60,80,128,64,144,122,84,157,134,150,97],
[117,0,81,76,81,144,102,104,111,81,173,123,166,89],
[146,169,0,178,131,114,110,186,161,131,185,139,178,133],
[190,174,72,0,133,152,93,185,151,85,146,146,157,85],
[170,169,119,117,0,144,110,154,161,70,156,163,205,168],
[122,106,136,98,106,0,86,106,81,51,130,83,186,117],
[186,148,140,157,140,164,0,170,134,133,164,183,189,117],
[106,146,64,65,96,144,80,0,143,97,162,133,166,84],
[128,139,89,99,89,169,116,107,0,76,145,81,174,92],
[166,169,119,165,180,199,117,153,174,0,193,164,221,144],
[93,77,65,104,94,120,86,88,105,57,0,54,192,97],
[116,127,111,104,87,167,67,117,169,86,196,0,189,136],
[100,84,72,93,45,64,61,84,76,29,58,61,0,48],
[153,161,117,165,82,133,133,166,158,106,153,114,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 139, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,132,130,121,131,118,124,145,134,131,133,134,139],
[128,0,135,123,120,129,125,129,133,132,127,131,134,137],
[118,115,0,100,99,120,114,108,117,115,115,108,117,127],
[120,127,150,0,121,142,131,130,145,142,134,142,128,137],
[129,130,151,129,0,133,124,135,139,126,136,127,152,135],
[119,121,130,108,117,0,115,122,122,123,119,106,129,123],
[132,125,136,119,126,135,0,123,136,130,134,134,132,134],
[126,121,142,120,115,128,127,0,130,145,125,119,114,129],
[105,117,133,105,111,128,114,120,0,137,111,114,122,115],
[116,118,135,108,124,127,120,105,113,0,118,115,128,118],
[119,123,135,116,114,131,116,125,139,132,0,127,120,122],
[117,119,142,108,123,144,116,131,136,135,123,0,133,129],
[116,116,133,122,98,121,118,136,128,122,130,117,0,123],
[111,113,123,113,115,127,116,121,135,132,128,121,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 140, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,116,127,132,114,129,130,127,138,136,126,130,128],
[122,0,120,125,125,128,123,127,120,130,120,118,138,120],
[134,130,0,132,130,124,114,113,133,107,134,122,120,141],
[123,125,118,0,128,116,117,131,128,124,119,140,137,126],
[118,125,120,122,0,122,107,124,120,123,125,124,123,133],
[136,122,126,134,128,0,114,131,121,124,131,121,135,132],
[121,127,136,133,143,136,0,124,145,130,139,137,132,137],
[120,123,137,119,126,119,126,0,126,115,136,133,129,123],
[123,130,117,122,130,129,105,124,0,124,125,124,132,125],
[112,120,143,126,127,126,120,135,126,0,143,117,112,120],
[114,130,116,131,125,119,111,114,125,107,0,125,131,130],
[124,132,128,110,126,129,113,117,126,133,125,0,129,122],
[120,112,130,113,127,115,118,121,118,138,119,121,0,122],
[122,130,109,124,117,118,113,127,125,130,120,128,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 141, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,105,117,123,104,111,113,123,110,135,115,112,123],
[139,0,122,126,142,110,130,126,106,123,139,138,128,117],
[145,128,0,143,152,131,139,108,146,152,158,142,145,128],
[133,124,107,0,118,104,137,117,124,114,146,130,126,135],
[127,108,98,132,0,124,112,108,93,122,116,114,108,95],
[146,140,119,146,126,0,115,122,129,138,149,136,132,112],
[139,120,111,113,138,135,0,104,122,118,135,131,126,120],
[137,124,142,133,142,128,146,0,149,129,145,123,149,127],
[127,144,104,126,157,121,128,101,0,136,135,131,135,132],
[140,127,98,136,128,112,132,121,114,0,131,119,107,126],
[115,111,92,104,134,101,115,105,115,119,0,115,110,110],
[135,112,108,120,136,114,119,127,119,131,135,0,137,101],
[138,122,105,124,142,118,124,101,115,143,140,113,0,128],
[127,133,122,115,155,138,130,123,118,124,140,149,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 142, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,128,123,130,124,126,124,133,131,113,123,127,135],
[142,0,128,132,122,125,152,120,148,140,133,132,134,137],
[122,122,0,129,113,131,133,119,137,121,118,114,115,135],
[127,118,121,0,110,123,132,112,144,119,111,120,127,120],
[120,128,137,140,0,139,137,118,142,126,136,129,130,144],
[126,125,119,127,111,0,138,127,138,116,114,121,128,133],
[124,98,117,118,113,112,0,107,131,110,103,109,121,127],
[126,130,131,138,132,123,143,0,141,138,121,121,122,135],
[117,102,113,106,108,112,119,109,0,111,111,105,107,118],
[119,110,129,131,124,134,140,112,139,0,120,111,119,128],
[137,117,132,139,114,136,147,129,139,130,0,129,130,140],
[127,118,136,130,121,129,141,129,145,139,121,0,119,132],
[123,116,135,123,120,122,129,128,143,131,120,131,0,135],
[115,113,115,130,106,117,123,115,132,122,110,118,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 143, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,117,141,146,144,128,135,140,140,137,142,128,124],
[120,0,99,121,130,115,121,128,134,129,127,124,121,121],
[133,151,0,129,158,134,140,144,136,154,137,149,124,132],
[109,129,121,0,134,116,121,124,130,126,119,132,131,120],
[104,120,92,116,0,107,108,106,118,122,108,110,115,104],
[106,135,116,134,143,0,126,120,143,137,119,142,133,128],
[122,129,110,129,142,124,0,130,142,137,125,130,121,118],
[115,122,106,126,144,130,120,0,129,134,118,131,116,124],
[110,116,114,120,132,107,108,121,0,133,119,128,115,108],
[110,121,96,124,128,113,113,116,117,0,104,120,115,112],
[113,123,113,131,142,131,125,132,131,146,0,140,129,132],
[108,126,101,118,140,108,120,119,122,130,110,0,110,115],
[122,129,126,119,135,117,129,134,135,135,121,140,0,119],
[126,129,118,130,146,122,132,126,142,138,118,135,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 144, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,98,140,133,92,150,166,143,129,112,139,98,172],
[64,0,62,158,123,51,53,99,63,56,97,73,74,103],
[152,188,0,142,196,142,152,203,174,145,193,138,61,188],
[110,92,108,0,110,94,113,119,139,84,110,84,65,100],
[117,127,54,140,0,96,88,151,108,80,145,63,96,123],
[158,199,108,156,154,0,147,180,193,144,231,132,129,201],
[100,197,98,137,162,103,0,144,156,133,154,53,100,129],
[84,151,47,131,99,70,106,0,109,124,90,134,62,159],
[107,187,76,111,142,57,94,141,0,100,152,91,35,164],
[121,194,105,166,170,106,117,126,150,0,152,104,101,148],
[138,153,57,140,105,19,96,160,98,98,0,109,43,128],
[111,177,112,166,187,118,197,116,159,146,141,0,103,154],
[152,176,189,185,154,121,150,188,215,149,207,147,0,164],
[78,147,62,150,127,49,121,91,86,102,122,96,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 145, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,140,129,116,132,134,133,127,123,132,129,119,126],
[125,0,131,134,129,117,124,122,116,112,122,123,118,129],
[110,119,0,123,112,121,117,110,113,108,110,127,119,116],
[121,116,127,0,116,114,122,112,125,102,113,113,114,115],
[134,121,138,134,0,131,128,135,128,117,127,126,124,133],
[118,133,129,136,119,0,127,111,126,111,119,124,134,126],
[116,126,133,128,122,123,0,134,132,121,126,133,128,133],
[117,128,140,138,115,139,116,0,129,125,121,126,126,135],
[123,134,137,125,122,124,118,121,0,113,128,111,120,117],
[127,138,142,148,133,139,129,125,137,0,130,131,134,138],
[118,128,140,137,123,131,124,129,122,120,0,122,126,137],
[121,127,123,137,124,126,117,124,139,119,128,0,136,125],
[131,132,131,136,126,116,122,124,130,116,124,114,0,138],
[124,121,134,135,117,124,117,115,133,112,113,125,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 146, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,132,138,123,125,134,119,142,128,141,137,140,143],
[121,0,102,110,101,116,131,112,97,105,137,119,125,158],
[118,148,0,119,112,130,135,134,132,131,132,125,122,154],
[112,140,131,0,105,131,128,113,117,116,128,125,135,149],
[127,149,138,145,0,134,138,145,117,117,148,136,155,152],
[125,134,120,119,116,0,112,121,123,114,131,118,129,155],
[116,119,115,122,112,138,0,122,105,121,127,132,129,121],
[131,138,116,137,105,129,128,0,115,110,154,125,134,153],
[108,153,118,133,133,127,145,135,0,108,145,132,145,147],
[122,145,119,134,133,136,129,140,142,0,150,125,156,161],
[109,113,118,122,102,119,123,96,105,100,0,111,121,126],
[113,131,125,125,114,132,118,125,118,125,139,0,147,148],
[110,125,128,115,95,121,121,116,105,94,129,103,0,135],
[107,92,96,101,98,95,129,97,103,89,124,102,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 147, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,143,119,124,117,142,133,133,124,112,117,143,130],
[126,0,157,110,151,89,145,138,126,124,122,120,127,116],
[107,93,0,107,93,89,99,110,98,110,107,84,114,113],
[131,140,143,0,115,129,138,141,102,137,131,106,130,103],
[126,99,157,135,0,90,109,150,102,129,107,100,117,118],
[133,161,161,121,160,0,155,135,120,151,134,128,119,137],
[108,105,151,112,141,95,0,146,129,122,131,115,111,114],
[117,112,140,109,100,115,104,0,111,130,131,112,114,102],
[117,124,152,148,148,130,121,139,0,119,127,128,146,122],
[126,126,140,113,121,99,128,120,131,0,110,104,131,101],
[138,128,143,119,143,116,119,119,123,140,0,136,138,129],
[133,130,166,144,150,122,135,138,122,146,114,0,132,156],
[107,123,136,120,133,131,139,136,104,119,112,118,0,124],
[120,134,137,147,132,113,136,148,128,149,121,94,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 148, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,136,138,129,132,125,137,135,145,119,142,136,121],
[121,0,128,131,120,119,129,128,129,121,138,129,139,117],
[114,122,0,122,123,119,116,131,130,125,117,130,142,109],
[112,119,128,0,128,137,119,133,135,126,127,132,132,116],
[121,130,127,122,0,126,111,131,128,137,122,127,135,119],
[118,131,131,113,124,0,121,129,122,122,111,126,140,113],
[125,121,134,131,139,129,0,141,138,133,134,142,141,135],
[113,122,119,117,119,121,109,0,127,128,126,131,133,110],
[115,121,120,115,122,128,112,123,0,128,115,119,127,114],
[105,129,125,124,113,128,117,122,122,0,119,126,138,110],
[131,112,133,123,128,139,116,124,135,131,0,135,132,114],
[108,121,120,118,123,124,108,119,131,124,115,0,127,99],
[114,111,108,118,115,110,109,117,123,112,118,123,0,101],
[129,133,141,134,131,137,115,140,136,140,136,151,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 149, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,127,124,126,120,133,134,132,116,127,142,128,130],
[130,0,119,113,127,114,143,141,142,139,121,140,142,130],
[123,131,0,138,122,120,139,135,139,101,119,128,120,123],
[126,137,112,0,132,125,139,137,137,131,115,132,146,124],
[124,123,128,118,0,123,144,145,141,124,126,140,139,126],
[130,136,130,125,127,0,143,139,147,124,123,135,138,120],
[117,107,111,111,106,107,0,118,110,104,106,108,123,108],
[116,109,115,113,105,111,132,0,123,103,123,133,120,131],
[118,108,111,113,109,103,140,127,0,113,112,121,125,123],
[134,111,149,119,126,126,146,147,137,0,127,134,155,136],
[123,129,131,135,124,127,144,127,138,123,0,125,137,132],
[108,110,122,118,110,115,142,117,129,116,125,0,132,126],
[122,108,130,104,111,112,127,130,125,95,113,118,0,121],
[120,120,127,126,124,130,142,119,127,114,118,124,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 150, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,127,124,118,127,116,127,126,129,124,140,119,128],
[128,0,123,113,125,132,125,120,126,137,126,129,122,131],
[123,127,0,116,109,126,127,124,125,119,125,133,116,122],
[126,137,134,0,122,139,125,127,130,133,129,138,126,133],
[132,125,141,128,0,133,133,135,127,140,134,137,127,134],
[123,118,124,111,117,0,115,123,113,117,110,128,101,124],
[134,125,123,125,117,135,0,126,110,122,121,130,118,131],
[123,130,126,123,115,127,124,0,119,119,120,131,121,127],
[124,124,125,120,123,137,140,131,0,131,126,138,117,132],
[121,113,131,117,110,133,128,131,119,0,118,130,123,124],
[126,124,125,121,116,140,129,130,124,132,0,140,118,136],
[110,121,117,112,113,122,120,119,112,120,110,0,111,117],
[131,128,134,124,123,149,132,129,133,127,132,139,0,123],
[122,119,128,117,116,126,119,123,118,126,114,133,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 151, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,115,106,127,118,96,108,107,107,84,116,96,92],
[123,0,133,100,142,106,98,106,87,128,83,106,99,120],
[135,117,0,107,130,112,78,112,107,96,82,86,117,101],
[144,150,143,0,145,131,137,147,137,122,116,132,128,117],
[123,108,120,105,0,107,94,91,136,115,83,111,132,100],
[132,144,138,119,143,0,111,129,133,139,132,115,140,109],
[154,152,172,113,156,139,0,140,129,115,134,113,140,131],
[142,144,138,103,159,121,110,0,125,106,102,112,125,105],
[143,163,143,113,114,117,121,125,0,127,118,141,136,103],
[143,122,154,128,135,111,135,144,123,0,100,131,134,119],
[166,167,168,134,167,118,116,148,132,150,0,128,120,132],
[134,144,164,118,139,135,137,138,109,119,122,0,160,113],
[154,151,133,122,118,110,110,125,114,116,130,90,0,130],
[158,130,149,133,150,141,119,145,147,131,118,137,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 152, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,113,109,109,124,125,119,121,117,129,104,107,104],
[113,0,82,127,108,92,112,123,125,93,144,97,120,125],
[137,168,0,103,124,79,115,138,131,119,129,109,92,133],
[141,123,147,0,109,107,121,106,73,123,106,104,126,123],
[141,142,126,141,0,97,135,150,129,135,115,125,98,134],
[126,158,171,143,153,0,132,144,125,148,141,148,151,136],
[125,138,135,129,115,118,0,142,114,135,159,126,146,141],
[131,127,112,144,100,106,108,0,98,106,126,120,126,133],
[129,125,119,177,121,125,136,152,0,124,139,134,144,139],
[133,157,131,127,115,102,115,144,126,0,110,146,144,132],
[121,106,121,144,135,109,91,124,111,140,0,125,141,126],
[146,153,141,146,125,102,124,130,116,104,125,0,143,131],
[143,130,158,124,152,99,104,124,106,106,109,107,0,143],
[146,125,117,127,116,114,109,117,111,118,124,119,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 153, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,115,120,122,127,135,111,126,131,124,123,139,125],
[118,0,105,111,116,115,119,113,125,115,129,118,115,120],
[135,145,0,114,126,141,128,137,124,117,128,126,133,122],
[130,139,136,0,126,134,135,137,134,133,124,127,133,130],
[128,134,124,124,0,140,133,126,137,138,127,125,124,120],
[123,135,109,116,110,0,114,123,126,121,109,131,131,124],
[115,131,122,115,117,136,0,120,124,122,121,129,132,126],
[139,137,113,113,124,127,130,0,132,120,114,124,124,135],
[124,125,126,116,113,124,126,118,0,130,116,122,123,115],
[119,135,133,117,112,129,128,130,120,0,123,123,127,119],
[126,121,122,126,123,141,129,136,134,127,0,128,124,118],
[127,132,124,123,125,119,121,126,128,127,122,0,134,120],
[111,135,117,117,126,119,118,126,127,123,126,116,0,121],
[125,130,128,120,130,126,124,115,135,131,132,130,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 154, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,127,134,139,135,127,126,132,111,123,130,122,105],
[128,0,139,155,140,123,119,127,134,123,132,133,118,130],
[123,111,0,128,123,102,116,122,127,102,132,125,86,102],
[116,95,122,0,124,110,98,118,135,118,103,127,101,113],
[111,110,127,126,0,131,125,115,133,115,124,114,110,121],
[115,127,148,140,119,0,113,126,131,126,128,127,124,115],
[123,131,134,152,125,137,0,112,145,130,121,143,116,115],
[124,123,128,132,135,124,138,0,128,124,138,141,120,126],
[118,116,123,115,117,119,105,122,0,114,115,123,116,98],
[139,127,148,132,135,124,120,126,136,0,130,143,117,112],
[127,118,118,147,126,122,129,112,135,120,0,144,131,130],
[120,117,125,123,136,123,107,109,127,107,106,0,106,122],
[128,132,164,149,140,126,134,130,134,133,119,144,0,108],
[145,120,148,137,129,135,135,124,152,138,120,128,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 155, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,119,124,119,123,125,137,128,141,120,125,132,137],
[114,0,133,147,127,121,137,145,130,141,136,118,129,126],
[131,117,0,128,130,120,142,138,135,154,132,121,135,131],
[126,103,122,0,127,102,126,123,118,138,115,109,129,122],
[131,123,120,123,0,113,123,127,125,136,121,125,122,116],
[127,129,130,148,137,0,138,141,144,158,125,120,138,148],
[125,113,108,124,127,112,0,127,122,127,127,115,117,117],
[113,105,112,127,123,109,123,0,122,119,113,107,126,114],
[122,120,115,132,125,106,128,128,0,143,111,108,110,113],
[109,109,96,112,114,92,123,131,107,0,110,94,107,119],
[130,114,118,135,129,125,123,137,139,140,0,125,129,123],
[125,132,129,141,125,130,135,143,142,156,125,0,148,137],
[118,121,115,121,128,112,133,124,140,143,121,102,0,130],
[113,124,119,128,134,102,133,136,137,131,127,113,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 156, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,161,141,114,122,136,128,118,120,124,135,133,158],
[125,0,180,85,137,177,155,145,163,156,193,184,112,203],
[89,70,0,4,90,132,86,62,79,84,105,123,73,125],
[109,165,246,0,135,162,170,151,116,175,181,161,138,168],
[136,113,160,115,0,152,197,165,129,152,199,191,130,202],
[128,73,118,88,98,0,149,134,90,104,110,124,142,151],
[114,95,164,80,53,101,0,49,103,173,154,164,123,118],
[122,105,188,99,85,116,201,0,127,159,197,151,163,153],
[132,87,171,134,121,160,147,123,0,181,79,215,131,119],
[130,94,166,75,98,146,77,91,69,0,98,134,90,111],
[126,57,145,69,51,140,96,53,171,152,0,174,102,123],
[115,66,127,89,59,126,86,99,35,116,76,0,51,95],
[117,138,177,112,120,108,127,87,119,160,148,199,0,99],
[92,47,125,82,48,99,132,97,131,139,127,155,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 157, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,126,128,119,123,122,126,138,124,133,121,120,127],
[120,0,132,133,119,129,120,124,133,126,132,127,124,118],
[124,118,0,125,123,131,110,130,135,115,133,126,120,114],
[122,117,125,0,119,119,121,123,130,117,131,119,113,116],
[131,131,127,131,0,142,129,131,146,120,133,128,115,126],
[127,121,119,131,108,0,124,126,126,127,129,123,118,111],
[128,130,140,129,121,126,0,130,139,128,134,123,124,113],
[124,126,120,127,119,124,120,0,132,129,130,122,112,115],
[112,117,115,120,104,124,111,118,0,114,128,108,112,105],
[126,124,135,133,130,123,122,121,136,0,130,129,125,118],
[117,118,117,119,117,121,116,120,122,120,0,112,118,116],
[129,123,124,131,122,127,127,128,142,121,138,0,124,108],
[130,126,130,137,135,132,126,138,138,125,132,126,0,125],
[123,132,136,134,124,139,137,135,145,132,134,142,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 158, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,132,128,127,124,135,124,123,142,106,132,120,118],
[133,0,121,126,116,126,135,123,125,143,128,128,118,117],
[118,129,0,119,120,120,124,116,112,138,116,128,127,115],
[122,124,131,0,124,112,122,111,117,136,112,133,119,113],
[123,134,130,126,0,122,130,115,127,140,126,131,120,115],
[126,124,130,138,128,0,137,122,128,145,115,122,121,128],
[115,115,126,128,120,113,0,110,115,131,113,127,117,118],
[126,127,134,139,135,128,140,0,130,139,125,146,132,125],
[127,125,138,133,123,122,135,120,0,141,133,127,133,116],
[108,107,112,114,110,105,119,111,109,0,107,103,119,112],
[144,122,134,138,124,135,137,125,117,143,0,140,125,111],
[118,122,122,117,119,128,123,104,123,147,110,0,121,120],
[130,132,123,131,130,129,133,118,117,131,125,129,0,122],
[132,133,135,137,135,122,132,125,134,138,139,130,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 159, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,94,109,132,118,118,108,122,121,133,125,121,135],
[128,0,106,110,123,109,118,106,122,122,125,114,121,132],
[156,144,0,132,145,125,138,133,145,126,144,138,124,136],
[141,140,118,0,130,135,127,125,146,130,138,126,126,132],
[118,127,105,120,0,126,131,114,121,126,126,119,117,129],
[132,141,125,115,124,0,133,127,137,132,135,134,118,128],
[132,132,112,123,119,117,0,118,119,132,134,116,126,121],
[142,144,117,125,136,123,132,0,131,138,127,139,128,142],
[128,128,105,104,129,113,131,119,0,125,134,127,118,125],
[129,128,124,120,124,118,118,112,125,0,128,127,112,131],
[117,125,106,112,124,115,116,123,116,122,0,112,123,122],
[125,136,112,124,131,116,134,111,123,123,138,0,127,126],
[129,129,126,124,133,132,124,122,132,138,127,123,0,138],
[115,118,114,118,121,122,129,108,125,119,128,124,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 160, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,144,107,128,128,133,110,120,127,127,137,120,114],
[131,0,139,102,139,120,112,135,130,132,127,121,120,131],
[106,111,0,115,111,103,132,117,130,136,115,102,119,134],
[143,148,135,0,151,114,131,128,138,137,124,113,113,125],
[122,111,139,99,0,111,119,103,106,108,135,113,117,127],
[122,130,147,136,139,0,143,144,143,131,138,96,112,130],
[117,138,118,119,131,107,0,112,130,123,116,107,96,109],
[140,115,133,122,147,106,138,0,110,126,140,108,98,124],
[130,120,120,112,144,107,120,140,0,127,131,114,106,137],
[123,118,114,113,142,119,127,124,123,0,125,106,104,132],
[123,123,135,126,115,112,134,110,119,125,0,99,90,121],
[113,129,148,137,137,154,143,142,136,144,151,0,132,141],
[130,130,131,137,133,138,154,152,144,146,160,118,0,138],
[136,119,116,125,123,120,141,126,113,118,129,109,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 161, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,133,142,146,163,141,124,145,139,153,161,155,146],
[142,0,137,167,154,172,110,147,176,132,144,173,156,129],
[117,113,0,119,148,157,112,89,120,110,128,154,109,128],
[108,83,131,0,118,148,121,79,135,115,93,161,130,121],
[104,96,102,132,0,150,123,101,116,126,126,129,131,120],
[87,78,93,102,100,0,102,109,126,93,85,141,131,115],
[109,140,138,129,127,148,0,111,137,118,154,124,143,125],
[126,103,161,171,149,141,139,0,179,116,150,157,146,155],
[105,74,130,115,134,124,113,71,0,127,122,161,122,136],
[111,118,140,135,124,157,132,134,123,0,153,148,153,127],
[97,106,122,157,124,165,96,100,128,97,0,125,126,72],
[89,77,96,89,121,109,126,93,89,102,125,0,105,127],
[95,94,141,120,119,119,107,104,128,97,124,145,0,131],
[104,121,122,129,130,135,125,95,114,123,178,123,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 162, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,101,141,128,154,149,109,146,117,122,121,120,152],
[112,0,85,133,97,128,92,100,108,97,93,92,73,78],
[149,165,0,161,151,180,165,143,165,126,161,114,130,133],
[109,117,89,0,110,134,124,99,91,125,106,95,112,121],
[122,153,99,140,0,170,147,144,137,123,133,121,130,129],
[96,122,70,116,80,0,109,64,116,101,114,88,104,102],
[101,158,85,126,103,141,0,123,126,113,123,73,130,106],
[141,150,107,151,106,186,127,0,120,136,157,99,124,125],
[104,142,85,159,113,134,124,130,0,125,127,110,145,140],
[133,153,124,125,127,149,137,114,125,0,135,107,122,137],
[128,157,89,144,117,136,127,93,123,115,0,99,138,126],
[129,158,136,155,129,162,177,151,140,143,151,0,124,160],
[130,177,120,138,120,146,120,126,105,128,112,126,0,125],
[98,172,117,129,121,148,144,125,110,113,124,90,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 163, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,127,115,118,130,136,127,135,145,117,128,135,121],
[129,0,122,102,123,115,120,126,124,131,98,127,129,115],
[123,128,0,133,128,126,122,134,130,141,97,127,126,125],
[135,148,117,0,132,125,126,135,119,137,113,132,107,130],
[132,127,122,118,0,127,109,117,123,142,108,120,100,127],
[120,135,124,125,123,0,145,127,144,134,129,145,130,118],
[114,130,128,124,141,105,0,126,127,132,114,129,124,132],
[123,124,116,115,133,123,124,0,127,137,123,127,118,126],
[115,126,120,131,127,106,123,123,0,129,113,125,117,132],
[105,119,109,113,108,116,118,113,121,0,109,125,113,120],
[133,152,153,137,142,121,136,127,137,141,0,146,144,132],
[122,123,123,118,130,105,121,123,125,125,104,0,116,119],
[115,121,124,143,150,120,126,132,133,137,106,134,0,128],
[129,135,125,120,123,132,118,124,118,130,118,131,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 164, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,115,114,90,131,115,120,123,121,135,123,118,141],
[126,0,127,121,105,115,140,130,133,115,133,110,132,135],
[135,123,0,131,115,128,136,133,131,120,145,123,127,138],
[136,129,119,0,99,107,120,111,116,115,144,111,133,115],
[160,145,135,151,0,137,142,147,134,120,155,145,140,140],
[119,135,122,143,113,0,121,129,134,105,139,125,130,127],
[135,110,114,130,108,129,0,128,134,102,141,110,115,146],
[130,120,117,139,103,121,122,0,117,115,136,120,124,145],
[127,117,119,134,116,116,116,133,0,134,143,116,123,121],
[129,135,130,135,130,145,148,135,116,0,164,130,144,130],
[115,117,105,106,95,111,109,114,107,86,0,103,118,118],
[127,140,127,139,105,125,140,130,134,120,147,0,122,130],
[132,118,123,117,110,120,135,126,127,106,132,128,0,135],
[109,115,112,135,110,123,104,105,129,120,132,120,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 165, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,131,132,149,118,127,136,133,136,128,124,140,110],
[118,0,132,133,144,121,136,130,129,123,138,145,147,122],
[119,118,0,112,135,113,115,124,111,120,132,132,127,110],
[118,117,138,0,146,113,139,120,135,129,118,126,136,114],
[101,106,115,104,0,109,102,120,109,112,104,120,122,107],
[132,129,137,137,141,0,137,138,138,139,124,135,138,126],
[123,114,135,111,148,113,0,129,134,112,126,128,131,123],
[114,120,126,130,130,112,121,0,124,120,122,134,120,120],
[117,121,139,115,141,112,116,126,0,109,113,135,125,116],
[114,127,130,121,138,111,138,130,141,0,114,126,133,104],
[122,112,118,132,146,126,124,128,137,136,0,138,132,120],
[126,105,118,124,130,115,122,116,115,124,112,0,121,109],
[110,103,123,114,128,112,119,130,125,117,118,129,0,116],
[140,128,140,136,143,124,127,130,134,146,130,141,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 166, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,130,111,117,111,134,130,100,128,142,124,122,135],
[114,0,114,120,144,113,147,127,119,133,141,129,132,107],
[120,136,0,121,164,122,142,135,111,141,153,147,119,120],
[139,130,129,0,139,128,110,124,105,136,125,128,114,125],
[133,106,86,111,0,91,116,118,83,117,148,125,136,127],
[139,137,128,122,159,0,162,119,127,159,154,144,140,149],
[116,103,108,140,134,88,0,126,106,126,134,130,120,114],
[120,123,115,126,132,131,124,0,112,145,141,130,121,130],
[150,131,139,145,167,123,144,138,0,162,187,130,135,131],
[122,117,109,114,133,91,124,105,88,0,109,126,96,124],
[108,109,97,125,102,96,116,109,63,141,0,108,126,95],
[126,121,103,122,125,106,120,120,120,124,142,0,122,107],
[128,118,131,136,114,110,130,129,115,154,124,128,0,129],
[115,143,130,125,123,101,136,120,119,126,155,143,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 167, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,128,130,121,130,115,110,118,127,125,111,100,122],
[135,0,130,134,136,144,126,124,139,137,132,120,119,142],
[122,120,0,126,111,122,110,99,115,121,124,99,92,121],
[120,116,124,0,138,127,120,119,118,137,128,112,118,122],
[129,114,139,112,0,130,119,115,127,141,135,109,125,121],
[120,106,128,123,120,0,105,113,119,114,136,101,98,124],
[135,124,140,130,131,145,0,110,138,127,140,120,110,138],
[140,126,151,131,135,137,140,0,133,133,146,112,110,122],
[132,111,135,132,123,131,112,117,0,127,128,109,107,130],
[123,113,129,113,109,136,123,117,123,0,127,104,112,110],
[125,118,126,122,115,114,110,104,122,123,0,118,107,116],
[139,130,151,138,141,149,130,138,141,146,132,0,108,138],
[150,131,158,132,125,152,140,140,143,138,143,142,0,155],
[128,108,129,128,129,126,112,128,120,140,134,112,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 168, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,132,117,120,131,107,131,118,125,124,115,122,130],
[138,0,170,121,121,133,139,154,144,133,156,141,144,155],
[118,80,0,115,93,115,105,123,104,108,102,103,109,101],
[133,129,135,0,139,134,104,159,134,142,117,141,138,117],
[130,129,157,111,0,126,129,134,149,128,116,144,136,127],
[119,117,135,116,124,0,123,153,140,103,90,129,123,117],
[143,111,145,146,121,127,0,167,155,151,139,142,145,119],
[119,96,127,91,116,97,83,0,117,107,143,103,110,107],
[132,106,146,116,101,110,95,133,0,113,106,132,120,98],
[125,117,142,108,122,147,99,143,137,0,123,138,137,129],
[126,94,148,133,134,160,111,107,144,127,0,129,125,118],
[135,109,147,109,106,121,108,147,118,112,121,0,142,124],
[128,106,141,112,114,127,105,140,130,113,125,108,0,114],
[120,95,149,133,123,133,131,143,152,121,132,126,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 169, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,133,116,129,121,125,134,126,127,139,149,138,120],
[118,0,122,144,134,121,133,133,135,128,124,150,131,120],
[117,128,0,129,124,112,140,140,115,134,122,141,142,133],
[134,106,121,0,126,112,146,150,147,136,119,142,134,130],
[121,116,126,124,0,113,132,130,110,128,119,133,136,123],
[129,129,138,138,137,0,136,140,144,128,124,149,132,134],
[125,117,110,104,118,114,0,135,128,121,126,136,131,123],
[116,117,110,100,120,110,115,0,116,109,108,126,120,107],
[124,115,135,103,140,106,122,134,0,116,108,125,133,120],
[123,122,116,114,122,122,129,141,134,0,106,144,121,133],
[111,126,128,131,131,126,124,142,142,144,0,149,139,123],
[101,100,109,108,117,101,114,124,125,106,101,0,129,125],
[112,119,108,116,114,118,119,130,117,129,111,121,0,127],
[130,130,117,120,127,116,127,143,130,117,127,125,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 170, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,137,164,142,131,134,140,127,106,149,135,146,139],
[104,0,122,114,110,98,108,99,108,92,100,123,114,107],
[113,128,0,130,120,121,117,131,120,86,126,118,134,126],
[86,136,120,0,133,125,113,121,102,106,144,122,128,120],
[108,140,130,117,0,94,124,134,91,104,132,162,130,105],
[119,152,129,125,156,0,117,148,124,125,153,128,121,148],
[116,142,133,137,126,133,0,111,99,114,130,126,135,136],
[110,151,119,129,116,102,139,0,91,91,131,141,115,114],
[123,142,130,148,159,126,151,159,0,135,174,167,173,124],
[144,158,164,144,146,125,136,159,115,0,169,143,137,137],
[101,150,124,106,118,97,120,119,76,81,0,137,119,100],
[115,127,132,128,88,122,124,109,83,107,113,0,111,113],
[104,136,116,122,120,129,115,135,77,113,131,139,0,109],
[111,143,124,130,145,102,114,136,126,113,150,137,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 171, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,144,125,134,123,121,115,136,141,136,120,131,129],
[115,0,133,124,105,115,105,126,121,135,129,113,146,114],
[106,117,0,115,112,115,98,115,126,133,109,111,141,112],
[125,126,135,0,104,124,120,118,121,121,134,120,151,134],
[116,145,138,146,0,121,117,147,115,152,126,120,151,110],
[127,135,135,126,129,0,138,138,121,145,127,122,143,126],
[129,145,152,130,133,112,0,124,131,152,132,124,151,139],
[135,124,135,132,103,112,126,0,127,118,149,138,140,126],
[114,129,124,129,135,129,119,123,0,135,127,139,152,127],
[109,115,117,129,98,105,98,132,115,0,127,123,139,110],
[114,121,141,116,124,123,118,101,123,123,0,104,144,114],
[130,137,139,130,130,128,126,112,111,127,146,0,146,128],
[119,104,109,99,99,107,99,110,98,111,106,104,0,103],
[121,136,138,116,140,124,111,124,123,140,136,122,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 172, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,81,112,69,62,153,121,106,122,112,107,76,96],
[173,0,163,187,139,127,165,152,182,163,151,172,127,122],
[169,87,0,125,128,108,140,154,142,180,169,165,116,110],
[138,63,125,0,110,81,152,125,141,149,101,112,108,96],
[181,111,122,140,0,143,152,149,161,151,148,138,131,128],
[188,123,142,169,107,0,148,125,178,154,112,143,148,131],
[97,85,110,98,98,102,0,57,113,138,122,103,91,91],
[129,98,96,125,101,125,193,0,128,191,155,157,97,132],
[144,68,108,109,89,72,137,122,0,157,95,91,92,100],
[128,87,70,101,99,96,112,59,93,0,100,75,97,59],
[138,99,81,149,102,138,128,95,155,150,0,105,119,125],
[143,78,85,138,112,107,147,93,159,175,145,0,87,110],
[174,123,134,142,119,102,159,153,158,153,131,163,0,134],
[154,128,140,154,122,119,159,118,150,191,125,140,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 173, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,134,120,126,124,119,136,119,120,112,124,114,124],
[116,0,122,104,122,115,120,111,115,124,117,116,113,112],
[116,128,0,110,116,105,103,108,106,116,106,105,103,96],
[130,146,140,0,143,129,136,138,129,124,127,124,128,125],
[124,128,134,107,0,120,118,125,123,118,113,111,108,116],
[126,135,145,121,130,0,120,128,119,126,120,127,134,119],
[131,130,147,114,132,130,0,135,127,123,124,125,122,117],
[114,139,142,112,125,122,115,0,120,130,126,130,110,119],
[131,135,144,121,127,131,123,130,0,129,135,133,133,126],
[130,126,134,126,132,124,127,120,121,0,133,116,110,118],
[138,133,144,123,137,130,126,124,115,117,0,128,120,128],
[126,134,145,126,139,123,125,120,117,134,122,0,127,119],
[136,137,147,122,142,116,128,140,117,140,130,123,0,119],
[126,138,154,125,134,131,133,131,124,132,122,131,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 174, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,127,142,139,111,140,143,127,124,124,129,127,127],
[128,0,119,148,127,125,130,153,123,138,123,131,139,134],
[123,131,0,139,129,122,143,154,127,138,122,138,133,134],
[108,102,111,0,121,118,127,133,117,129,124,116,111,128],
[111,123,121,129,0,109,125,138,117,117,116,125,129,121],
[139,125,128,132,141,0,134,149,121,143,121,138,126,135],
[110,120,107,123,125,116,0,127,110,119,107,111,124,126],
[107,97,96,117,112,101,123,0,112,125,101,119,99,102],
[123,127,123,133,133,129,140,138,0,139,122,122,122,116],
[126,112,112,121,133,107,131,125,111,0,125,124,121,125],
[126,127,128,126,134,129,143,149,128,125,0,135,140,138],
[121,119,112,134,125,112,139,131,128,126,115,0,121,133],
[123,111,117,139,121,124,126,151,128,129,110,129,0,129],
[123,116,116,122,129,115,124,148,134,125,112,117,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 175, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,127,132,110,126,123,111,127,118,120,101,119,141],
[151,0,138,134,139,124,124,133,168,133,127,129,137,157],
[123,112,0,120,112,100,102,109,129,122,108,117,119,128],
[118,116,130,0,115,115,116,109,124,117,123,133,125,132],
[140,111,138,135,0,128,127,129,128,141,136,137,143,133],
[124,126,150,135,122,0,110,118,146,113,123,134,143,160],
[127,126,148,134,123,140,0,118,131,138,126,126,154,159],
[139,117,141,141,121,132,132,0,146,133,127,111,139,133],
[123,82,121,126,122,104,119,104,0,122,119,117,141,143],
[132,117,128,133,109,137,112,117,128,0,100,111,126,147],
[130,123,142,127,114,127,124,123,131,150,0,146,142,139],
[149,121,133,117,113,116,124,139,133,139,104,0,121,127],
[131,113,131,125,107,107,96,111,109,124,108,129,0,120],
[109,93,122,118,117,90,91,117,107,103,111,123,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 176, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,115,119,123,116,116,99,124,123,128,125,119,119],
[125,0,129,119,125,125,134,118,116,120,128,124,110,115],
[135,121,0,104,121,119,134,109,117,98,110,109,112,102],
[131,131,146,0,137,131,129,117,134,124,136,122,120,119],
[127,125,129,113,0,133,122,114,126,120,122,121,118,111],
[134,125,131,119,117,0,134,110,123,121,130,137,110,107],
[134,116,116,121,128,116,0,120,124,107,129,111,109,120],
[151,132,141,133,136,140,130,0,147,131,137,125,124,118],
[126,134,133,116,124,127,126,103,0,127,130,123,116,122],
[127,130,152,126,130,129,143,119,123,0,129,123,120,127],
[122,122,140,114,128,120,121,113,120,121,0,111,114,110],
[125,126,141,128,129,113,139,125,127,127,139,0,107,118],
[131,140,138,130,132,140,141,126,134,130,136,143,0,125],
[131,135,148,131,139,143,130,132,128,123,140,132,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 177, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,123,99,131,104,138,128,118,120,132,133,125],
[140,0,143,137,113,165,117,154,137,142,147,150,142,138],
[142,107,0,144,127,138,111,130,125,128,127,151,117,121],
[127,113,106,0,108,137,106,123,126,128,120,131,122,106],
[151,137,123,142,0,164,136,127,135,135,141,148,139,151],
[119,85,112,113,86,0,108,124,120,119,116,124,106,122],
[146,133,139,144,114,142,0,152,131,137,143,159,152,142],
[112,96,120,127,123,126,98,0,115,117,127,131,113,126],
[122,113,125,124,115,130,119,135,0,135,109,134,128,122],
[132,108,122,122,115,131,113,133,115,0,128,135,118,118],
[130,103,123,130,109,134,107,123,141,122,0,141,112,120],
[118,100,99,119,102,126,91,119,116,115,109,0,108,107],
[117,108,133,128,111,144,98,137,122,132,138,142,0,121],
[125,112,129,144,99,128,108,124,128,132,130,143,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 178, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,126,140,124,127,128,126,122,141,131,138,127,115],
[125,0,132,128,121,127,142,127,121,141,136,148,136,127],
[124,118,0,113,122,115,128,118,111,144,133,129,113,108],
[110,122,137,0,137,117,128,123,121,146,134,134,128,117],
[126,129,128,113,0,120,137,124,113,132,123,129,114,124],
[123,123,135,133,130,0,134,139,132,143,125,131,114,129],
[122,108,122,122,113,116,0,127,114,141,131,132,113,122],
[124,123,132,127,126,111,123,0,122,132,124,132,117,112],
[128,129,139,129,137,118,136,128,0,150,135,136,132,118],
[109,109,106,104,118,107,109,118,100,0,115,131,104,99],
[119,114,117,116,127,125,119,126,115,135,0,116,115,131],
[112,102,121,116,121,119,118,118,114,119,134,0,120,107],
[123,114,137,122,136,136,137,133,118,146,135,130,0,125],
[135,123,142,133,126,121,128,138,132,151,119,143,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 179, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,120,101,113,117,110,106,116,112,120,118,118,107],
[136,0,128,119,122,114,125,128,122,122,138,122,123,114],
[130,122,0,109,119,123,122,121,134,115,130,123,129,111],
[149,131,141,0,117,137,141,141,137,124,139,142,132,133],
[137,128,131,133,0,127,129,128,131,122,152,126,119,115],
[133,136,127,113,123,0,126,131,133,125,134,131,116,123],
[140,125,128,109,121,124,0,127,131,125,133,131,126,112],
[144,122,129,109,122,119,123,0,126,110,132,123,129,120],
[134,128,116,113,119,117,119,124,0,120,133,120,123,117],
[138,128,135,126,128,125,125,140,130,0,149,129,141,127],
[130,112,120,111,98,116,117,118,117,101,0,121,121,113],
[132,128,127,108,124,119,119,127,130,121,129,0,122,107],
[132,127,121,118,131,134,124,121,127,109,129,128,0,108],
[143,136,139,117,135,127,138,130,133,123,137,143,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 180, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,134,145,122,103,155,120,119,130,135,139,105,138],
[119,0,144,139,130,114,165,146,131,122,123,155,134,146],
[116,106,0,138,122,135,157,149,164,129,102,148,128,124],
[105,111,112,0,114,107,162,137,107,127,112,143,119,142],
[128,120,128,136,0,103,161,141,151,134,133,140,139,127],
[147,136,115,143,147,0,158,134,133,140,133,153,130,122],
[95,85,93,88,89,92,0,97,112,107,76,128,99,99],
[130,104,101,113,109,116,153,0,124,128,101,137,114,116],
[131,119,86,143,99,117,138,126,0,130,108,140,106,128],
[120,128,121,123,116,110,143,122,120,0,98,151,116,147],
[115,127,148,138,117,117,174,149,142,152,0,149,134,143],
[111,95,102,107,110,97,122,113,110,99,101,0,104,111],
[145,116,122,131,111,120,151,136,144,134,116,146,0,139],
[112,104,126,108,123,128,151,134,122,103,107,139,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 181, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,126,135,133,124,122,105,117,118,124,134,123,116],
[132,0,125,105,124,126,120,108,124,118,127,121,114,116],
[124,125,0,118,122,110,118,109,123,122,117,133,111,97],
[115,145,132,0,132,119,119,118,132,123,127,132,125,110],
[117,126,128,118,0,116,118,106,114,115,129,126,118,99],
[126,124,140,131,134,0,139,119,135,121,133,141,123,110],
[128,130,132,131,132,111,0,130,136,119,141,126,119,122],
[145,142,141,132,144,131,120,0,134,135,139,133,133,131],
[133,126,127,118,136,115,114,116,0,110,116,128,110,109],
[132,132,128,127,135,129,131,115,140,0,132,130,119,124],
[126,123,133,123,121,117,109,111,134,118,0,128,97,126],
[116,129,117,118,124,109,124,117,122,120,122,0,113,113],
[127,136,139,125,132,127,131,117,140,131,153,137,0,130],
[134,134,153,140,151,140,128,119,141,126,124,137,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 182, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,115,111,107,112,142,94,134,143,112,140,117,146],
[104,0,98,112,129,107,141,95,126,132,122,131,99,143],
[135,152,0,134,151,119,161,139,137,155,145,124,143,152],
[139,138,116,0,131,128,131,130,136,153,155,139,125,147],
[143,121,99,119,0,116,132,114,118,142,138,111,110,140],
[138,143,131,122,134,0,143,126,133,145,135,138,125,159],
[108,109,89,119,118,107,0,98,113,135,131,113,110,129],
[156,155,111,120,136,124,152,0,152,143,146,123,141,133],
[116,124,113,114,132,117,137,98,0,145,146,136,116,119],
[107,118,95,97,108,105,115,107,105,0,121,114,119,130],
[138,128,105,95,112,115,119,104,104,129,0,123,146,144],
[110,119,126,111,139,112,137,127,114,136,127,0,108,135],
[133,151,107,125,140,125,140,109,134,131,104,142,0,143],
[104,107,98,103,110,91,121,117,131,120,106,115,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 183, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,103,115,115,135,93,120,112,123,100,105,118,112],
[116,0,117,122,97,137,89,125,136,121,111,135,117,112],
[147,133,0,136,108,139,110,133,131,119,108,144,124,139],
[135,128,114,0,110,139,108,118,116,129,125,128,105,131],
[135,153,142,140,0,158,132,134,136,153,120,156,123,117],
[115,113,111,111,92,0,98,117,122,102,102,104,90,100],
[157,161,140,142,118,152,0,132,150,151,104,143,130,136],
[130,125,117,132,116,133,118,0,135,127,121,123,113,148],
[138,114,119,134,114,128,100,115,0,115,110,140,105,114],
[127,129,131,121,97,148,99,123,135,0,102,147,100,127],
[150,139,142,125,130,148,146,129,140,148,0,139,134,117],
[145,115,106,122,94,146,107,127,110,103,111,0,112,123],
[132,133,126,145,127,160,120,137,145,150,116,138,0,139],
[138,138,111,119,133,150,114,102,136,123,133,127,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 184, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,134,137,110,145,117,118,108,84,121,120,135,131],
[108,0,130,125,126,120,128,89,107,111,86,134,116,120],
[116,120,0,118,92,127,111,93,105,95,122,137,80,121],
[113,125,132,0,100,124,115,108,118,109,118,128,116,149],
[140,124,158,150,0,146,137,138,133,114,129,121,141,138],
[105,130,123,126,104,0,106,141,133,116,131,120,105,123],
[133,122,139,135,113,144,0,123,108,118,135,122,104,137],
[132,161,157,142,112,109,127,0,135,108,124,126,108,128],
[142,143,145,132,117,117,142,115,0,116,135,141,116,137],
[166,139,155,141,136,134,132,142,134,0,113,138,145,145],
[129,164,128,132,121,119,115,126,115,137,0,150,108,124],
[130,116,113,122,129,130,128,124,109,112,100,0,108,118],
[115,134,170,134,109,145,146,142,134,105,142,142,0,141],
[119,130,129,101,112,127,113,122,113,105,126,132,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 185, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,139,137,131,148,127,125,129,119,132,135,125,139],
[128,0,138,132,127,138,127,125,128,123,133,143,126,131],
[111,112,0,111,122,126,138,122,128,121,125,137,121,115],
[113,118,139,0,128,132,125,115,129,99,128,137,126,124],
[119,123,128,122,0,114,123,125,133,113,123,127,119,119],
[102,112,124,118,136,0,110,105,119,115,119,130,120,114],
[123,123,112,125,127,140,0,115,124,112,128,140,124,124],
[125,125,128,135,125,145,135,0,137,127,141,138,118,127],
[121,122,122,121,117,131,126,113,0,108,113,137,124,117],
[131,127,129,151,137,135,138,123,142,0,131,142,141,132],
[118,117,125,122,127,131,122,109,137,119,0,136,135,121],
[115,107,113,113,123,120,110,112,113,108,114,0,116,115],
[125,124,129,124,131,130,126,132,126,109,115,134,0,115],
[111,119,135,126,131,136,126,123,133,118,129,135,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 186, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,129,117,110,123,113,123,125,123,122,131,128,130],
[129,0,128,118,128,128,122,122,144,131,131,139,148,139],
[121,122,0,106,113,130,110,98,118,110,130,129,116,112],
[133,132,144,0,133,154,127,120,129,127,143,143,136,143],
[140,122,137,117,0,113,133,105,138,125,121,127,129,148],
[127,122,120,96,137,0,116,120,118,130,122,139,143,143],
[137,128,140,123,117,134,0,100,152,144,131,129,141,130],
[127,128,152,130,145,130,150,0,131,139,123,143,147,144],
[125,106,132,121,112,132,98,119,0,119,124,117,147,128],
[127,119,140,123,125,120,106,111,131,0,117,133,141,120],
[128,119,120,107,129,128,119,127,126,133,0,146,131,123],
[119,111,121,107,123,111,121,107,133,117,104,0,120,110],
[122,102,134,114,121,107,109,103,103,109,119,130,0,128],
[120,111,138,107,102,107,120,106,122,130,127,140,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 187, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,105,140,104,136,125,135,117,115,117,142,132,106],
[109,0,106,120,104,138,120,119,109,102,103,122,102,90],
[145,144,0,146,109,161,121,123,133,114,124,139,125,124],
[110,130,104,0,116,130,92,129,125,91,118,145,118,104],
[146,146,141,134,0,166,146,154,133,127,140,161,139,111],
[114,112,89,120,84,0,103,113,108,108,90,130,98,96],
[125,130,129,158,104,147,0,142,122,143,127,157,125,125],
[115,131,127,121,96,137,108,0,119,125,107,118,111,101],
[133,141,117,125,117,142,128,131,0,123,130,134,107,110],
[135,148,136,159,123,142,107,125,127,0,124,137,140,114],
[133,147,126,132,110,160,123,143,120,126,0,141,122,106],
[108,128,111,105,89,120,93,132,116,113,109,0,102,102],
[118,148,125,132,111,152,125,139,143,110,128,148,0,123],
[144,160,126,146,139,154,125,149,140,136,144,148,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 188, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,136,127,127,122,121,120,141,148,125,127,118,132],
[124,0,130,108,130,122,119,119,129,135,124,132,129,128],
[114,120,0,98,125,118,107,112,132,124,114,110,112,119],
[123,142,152,0,134,125,131,119,136,141,130,123,127,140],
[123,120,125,116,0,124,115,116,127,145,125,139,110,128],
[128,128,132,125,126,0,123,110,126,135,128,118,123,122],
[129,131,143,119,135,127,0,114,137,142,134,132,124,133],
[130,131,138,131,134,140,136,0,147,146,128,129,125,128],
[109,121,118,114,123,124,113,103,0,130,113,119,116,125],
[102,115,126,109,105,115,108,104,120,0,114,116,109,115],
[125,126,136,120,125,122,116,122,137,136,0,133,117,117],
[123,118,140,127,111,132,118,121,131,134,117,0,118,135],
[132,121,138,123,140,127,126,125,134,141,133,132,0,133],
[118,122,131,110,122,128,117,122,125,135,133,115,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 189, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,126,134,130,136,130,141,125,120,122,132,117,120],
[128,0,123,133,134,129,121,129,135,135,137,128,123,113],
[124,127,0,129,126,131,119,130,135,137,128,124,124,121],
[116,117,121,0,116,129,114,120,126,127,129,125,117,124],
[120,116,124,134,0,130,119,134,120,122,121,126,119,114],
[114,121,119,121,120,0,114,116,119,129,121,123,121,110],
[120,129,131,136,131,136,0,133,132,135,128,135,129,121],
[109,121,120,130,116,134,117,0,132,124,128,120,121,119],
[125,115,115,124,130,131,118,118,0,133,121,125,119,116],
[130,115,113,123,128,121,115,126,117,0,128,127,117,110],
[128,113,122,121,129,129,122,122,129,122,0,123,120,113],
[118,122,126,125,124,127,115,130,125,123,127,0,122,125],
[133,127,126,133,131,129,121,129,131,133,130,128,0,117],
[130,137,129,126,136,140,129,131,134,140,137,125,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 190, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,113,125,124,121,120,121,131,139,126,124,137,123],
[126,0,133,127,125,140,131,121,133,148,125,135,124,141],
[137,117,0,119,121,118,121,135,129,126,124,116,135,129],
[125,123,131,0,125,128,122,117,133,134,124,118,126,135],
[126,125,129,125,0,127,110,126,125,133,123,130,112,137],
[129,110,132,122,123,0,97,127,121,138,134,139,128,150],
[130,119,129,128,140,153,0,141,133,150,129,135,141,154],
[129,129,115,133,124,123,109,0,124,136,135,137,124,137],
[119,117,121,117,125,129,117,126,0,127,125,120,120,133],
[111,102,124,116,117,112,100,114,123,0,114,105,127,119],
[124,125,126,126,127,116,121,115,125,136,0,131,114,130],
[126,115,134,132,120,111,115,113,130,145,119,0,126,112],
[113,126,115,124,138,122,109,126,130,123,136,124,0,141],
[127,109,121,115,113,100,96,113,117,131,120,138,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 191, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,106,140,127,123,124,106,130,144,139,103,128,117],
[122,0,115,147,128,132,134,110,133,133,128,126,116,132],
[144,135,0,167,139,134,142,143,143,141,159,119,152,127],
[110,103,83,0,101,109,112,111,117,105,104,91,118,124],
[123,122,111,149,0,139,124,119,130,137,129,115,139,130],
[127,118,116,141,111,0,115,117,125,126,127,109,134,123],
[126,116,108,138,126,135,0,135,132,130,142,107,136,132],
[144,140,107,139,131,133,115,0,143,144,129,118,130,122],
[120,117,107,133,120,125,118,107,0,129,121,101,112,127],
[106,117,109,145,113,124,120,106,121,0,107,108,131,129],
[111,122,91,146,121,123,108,121,129,143,0,114,127,131],
[147,124,131,159,135,141,143,132,149,142,136,0,129,156],
[122,134,98,132,111,116,114,120,138,119,123,121,0,109],
[133,118,123,126,120,127,118,128,123,121,119,94,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 192, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,148,121,136,131,132,127,141,138,135,119,117,126],
[130,0,125,126,137,135,147,131,133,126,139,131,130,136],
[102,125,0,113,130,131,127,127,127,128,136,127,116,124],
[129,124,137,0,121,124,123,131,133,126,115,120,128,120],
[114,113,120,129,0,120,118,122,129,133,128,111,120,101],
[119,115,119,126,130,0,126,126,120,116,123,120,122,133],
[118,103,123,127,132,124,0,127,118,133,117,116,120,131],
[123,119,123,119,128,124,123,0,113,124,125,123,121,128],
[109,117,123,117,121,130,132,137,0,135,114,107,106,125],
[112,124,122,124,117,134,117,126,115,0,116,115,116,125],
[115,111,114,135,122,127,133,125,136,134,0,112,124,123],
[131,119,123,130,139,130,134,127,143,135,138,0,122,130],
[133,120,134,122,130,128,130,129,144,134,126,128,0,129],
[124,114,126,130,149,117,119,122,125,125,127,120,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 193, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,121,109,131,125,144,116,148,113,123,124,153],
[138,0,163,134,130,143,115,157,143,148,131,142,152,158],
[146,87,0,105,108,117,100,145,101,125,110,138,106,140],
[129,116,145,0,124,136,124,167,105,145,97,127,142,145],
[141,120,142,126,0,158,125,177,105,159,110,147,154,162],
[119,107,133,114,92,0,115,152,114,121,98,137,152,163],
[125,135,150,126,125,135,0,144,116,165,106,135,136,160],
[106,93,105,83,73,98,106,0,106,122,76,124,142,133],
[134,107,149,145,145,136,134,144,0,158,103,132,154,162],
[102,102,125,105,91,129,85,128,92,0,110,113,117,140],
[137,119,140,153,140,152,144,174,147,140,0,145,149,183],
[127,108,112,123,103,113,115,126,118,137,105,0,128,148],
[126,98,144,108,96,98,114,108,96,133,101,122,0,142],
[97,92,110,105,88,87,90,117,88,110,67,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 194, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,140,127,138,128,146,127,124,138,132,137,137,135],
[126,0,133,122,128,123,148,135,127,126,130,132,131,125],
[110,117,0,132,128,116,125,119,123,124,129,127,127,118],
[123,128,118,0,121,118,132,126,123,120,127,132,133,125],
[112,122,122,129,0,119,131,125,123,125,126,119,122,125],
[122,127,134,132,131,0,141,124,132,123,133,134,127,126],
[104,102,125,118,119,109,0,112,104,111,109,115,117,120],
[123,115,131,124,125,126,138,0,119,114,121,131,126,129],
[126,123,127,127,127,118,146,131,0,124,124,121,137,134],
[112,124,126,130,125,127,139,136,126,0,131,141,130,128],
[118,120,121,123,124,117,141,129,126,119,0,129,125,121],
[113,118,123,118,131,116,135,119,129,109,121,0,122,118],
[113,119,123,117,128,123,133,124,113,120,125,128,0,119],
[115,125,132,125,125,124,130,121,116,122,129,132,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 195, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,131,132,121,123,131,128,126,120,120,127,124,126],
[128,0,130,135,128,129,131,125,117,132,123,133,126,126],
[119,120,0,132,126,115,124,117,115,126,113,121,117,119],
[118,115,118,0,119,121,122,124,116,119,130,124,115,113],
[129,122,124,131,0,117,126,122,128,124,117,128,125,120],
[127,121,135,129,133,0,137,124,127,136,124,135,126,118],
[119,119,126,128,124,113,0,114,121,117,120,119,124,121],
[122,125,133,126,128,126,136,0,130,133,124,126,123,122],
[124,133,135,134,122,123,129,120,0,119,118,136,129,129],
[130,118,124,131,126,114,133,117,131,0,119,122,127,120],
[130,127,137,120,133,126,130,126,132,131,0,138,131,133],
[123,117,129,126,122,115,131,124,114,128,112,0,123,117],
[126,124,133,135,125,124,126,127,121,123,119,127,0,123],
[124,124,131,137,130,132,129,128,121,130,117,133,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 196, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,137,128,143,132,149,120,135,128,162,133,135,135],
[125,0,124,117,149,122,134,104,123,119,145,116,129,125],
[113,126,0,124,158,104,121,101,100,109,141,116,101,125],
[122,133,126,0,133,108,124,102,125,138,151,138,112,126],
[107,101,92,117,0,110,116,87,105,116,118,112,115,102],
[118,128,146,142,140,0,160,134,140,131,147,123,143,117],
[101,116,129,126,134,90,0,102,114,122,140,108,110,117],
[130,146,149,148,163,116,148,0,132,133,154,143,129,151],
[115,127,150,125,145,110,136,118,0,111,141,133,116,133],
[122,131,141,112,134,119,128,117,139,0,158,121,117,127],
[88,105,109,99,132,103,110,96,109,92,0,115,109,129],
[117,134,134,112,138,127,142,107,117,129,135,0,106,108],
[115,121,149,138,135,107,140,121,134,133,141,144,0,115],
[115,125,125,124,148,133,133,99,117,123,121,142,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 197, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,135,128,147,107,116,108,111,139,111,111,122,135],
[123,0,128,103,132,114,116,118,105,130,111,113,112,118],
[115,122,0,109,132,117,124,129,125,121,103,102,119,119],
[122,147,141,0,155,116,132,139,124,148,129,133,125,141],
[103,118,118,95,0,104,107,116,99,118,92,96,101,108],
[143,136,133,134,146,0,141,135,125,135,125,123,129,127],
[134,134,126,118,143,109,0,141,126,137,106,115,127,116],
[142,132,121,111,134,115,109,0,128,135,99,114,125,131],
[139,145,125,126,151,125,124,122,0,130,112,128,118,133],
[111,120,129,102,132,115,113,115,120,0,106,117,111,108],
[139,139,147,121,158,125,144,151,138,144,0,138,136,126],
[139,137,148,117,154,127,135,136,122,133,112,0,139,122],
[128,138,131,125,149,121,123,125,132,139,114,111,0,129],
[115,132,131,109,142,123,134,119,117,142,124,128,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 198, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,116,124,130,118,116,127,139,117,114,129,133,129],
[121,0,113,110,106,112,117,102,127,109,115,119,132,128],
[134,137,0,125,134,118,124,125,139,106,123,128,130,133],
[126,140,125,0,138,118,129,119,139,123,132,133,136,133],
[120,144,116,112,0,120,116,122,126,110,124,132,128,130],
[132,138,132,132,130,0,133,130,136,125,128,131,132,136],
[134,133,126,121,134,117,0,120,136,112,125,129,142,139],
[123,148,125,131,128,120,130,0,138,133,136,126,136,131],
[111,123,111,111,124,114,114,112,0,111,115,121,131,121],
[133,141,144,127,140,125,138,117,139,0,128,142,142,143],
[136,135,127,118,126,122,125,114,135,122,0,133,130,137],
[121,131,122,117,118,119,121,124,129,108,117,0,128,129],
[117,118,120,114,122,118,108,114,119,108,120,122,0,128],
[121,122,117,117,120,114,111,119,129,107,113,121,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 199, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,147,108,88,77,81,72,126,127,107,83,125,94],
[140,0,185,143,118,138,103,133,152,129,141,181,121,143],
[103,65,0,92,85,74,47,141,96,135,33,96,94,105],
[142,107,158,0,132,120,120,171,88,200,99,160,133,162],
[162,132,165,118,0,96,143,216,110,177,117,159,140,193],
[173,112,176,130,154,0,165,152,159,208,134,162,179,201],
[169,147,203,130,107,85,0,156,99,179,147,153,138,167],
[178,117,109,79,34,98,94,0,98,101,92,130,135,102],
[124,98,154,162,140,91,151,152,0,182,140,161,151,154],
[123,121,115,50,73,42,71,149,68,0,83,84,102,90],
[143,109,217,151,133,116,103,158,110,167,0,187,157,124],
[167,69,154,90,91,88,97,120,89,166,63,0,114,127],
[125,129,156,117,110,71,112,115,99,148,93,136,0,145],
[156,107,145,88,57,49,83,148,96,160,126,123,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 250, 200, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbd/mebbd_14_250.csv", index=False, header=False)

import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg
from kemeny import sc

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,50,48,52,47,49,45,47,47,40,52,49,43,51,47],
[51,0,49,50,52,49,51,50,44,46,55,48,43,42,41],
[53,52,0,54,48,60,50,53,43,47,59,57,50,55,50],
[49,51,47,0,52,45,45,53,48,43,55,51,47,41,47],
[54,49,53,49,0,49,48,51,53,44,58,52,48,58,45],
[52,52,41,56,52,0,44,53,43,43,59,54,53,47,45],
[56,50,51,56,53,57,0,54,45,60,52,47,50,47,46],
[54,51,48,48,50,48,47,0,47,42,55,46,43,49,39],
[54,57,58,53,48,58,56,54,0,54,67,51,55,51,50],
[61,55,54,58,57,58,41,59,47,0,52,57,51,45,52],
[49,46,42,46,43,42,49,46,34,49,0,46,54,50,46],
[52,53,44,50,49,47,54,55,50,44,55,0,47,54,44],
[58,58,51,54,53,48,51,58,46,50,47,54,0,54,55],
[50,59,46,60,43,54,54,52,50,56,51,47,47,0,43],
[54,60,51,54,56,56,55,62,51,49,55,57,46,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 1, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,95,63,87,72,87,47,50,64,55,41,96,72,95],
[29,0,86,46,79,72,71,47,71,71,54,55,80,72,79],
[6,15,0,23,44,40,48,20,34,23,5,18,48,15,31],
[38,55,78,0,68,72,85,61,71,57,63,32,86,53,85],
[14,22,57,33,0,34,56,6,42,33,24,8,57,15,49],
[29,29,61,29,67,0,75,19,49,22,12,22,54,22,71],
[14,30,53,16,45,26,0,29,18,22,13,14,62,31,46],
[54,54,81,40,95,82,72,0,66,41,32,50,96,47,88],
[51,30,67,30,59,52,83,35,0,36,34,23,62,28,62],
[37,30,78,44,68,79,79,60,65,0,61,26,88,23,80],
[46,47,96,38,77,89,88,69,67,40,0,27,96,40,89],
[60,46,83,69,93,79,87,51,78,75,74,0,79,54,71],
[5,21,53,15,44,47,39,5,39,13,5,22,0,19,48],
[29,29,86,48,86,79,70,54,73,78,61,47,82,0,73],
[6,22,70,16,52,30,55,13,39,21,12,30,53,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 2, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,53,32,63,54,62,46,65,39,52,61,84,58,77],
[37,0,42,42,41,40,43,26,50,36,37,37,53,28,59],
[48,59,0,49,47,39,51,45,53,41,60,55,57,52,64],
[69,59,52,0,56,47,61,51,72,42,56,57,68,58,80],
[38,60,54,45,0,51,49,52,63,37,38,42,60,36,64],
[47,61,62,54,50,0,60,40,72,43,54,50,77,45,78],
[39,58,50,40,52,41,0,42,66,30,37,39,59,32,63],
[55,75,56,50,49,61,59,0,53,50,59,52,70,57,65],
[36,51,48,29,38,29,35,48,0,30,41,57,49,45,53],
[62,65,60,59,64,58,71,51,71,0,65,49,81,62,66],
[49,64,41,45,63,47,64,42,60,36,0,39,71,43,77],
[40,64,46,44,59,51,62,49,44,52,62,0,70,45,63],
[17,48,44,33,41,24,42,31,52,20,30,31,0,32,54],
[43,73,49,43,65,56,69,44,56,39,58,56,69,0,74],
[24,42,37,21,37,23,38,36,48,35,24,38,47,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 3, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,48,44,52,52,48,50,49,48,49,44,51,50,51],
[56,0,61,51,58,49,50,55,49,48,54,47,55,52,50],
[53,40,0,47,52,46,42,60,47,54,55,46,58,47,47],
[57,50,54,0,54,53,57,62,57,56,55,55,59,64,55],
[49,43,49,47,0,42,48,47,52,43,50,48,54,52,46],
[49,52,55,48,59,0,55,61,49,48,58,52,55,56,51],
[53,51,59,44,53,46,0,49,50,46,49,50,57,50,47],
[51,46,41,39,54,40,52,0,50,48,44,40,54,51,48],
[52,52,54,44,49,52,51,51,0,50,52,47,59,49,49],
[53,53,47,45,58,53,55,53,51,0,53,48,55,51,45],
[52,47,46,46,51,43,52,57,49,48,0,51,54,50,50],
[57,54,55,46,53,49,51,61,54,53,50,0,60,47,51],
[50,46,43,42,47,46,44,47,42,46,47,41,0,43,44],
[51,49,54,37,49,45,51,50,52,50,51,54,58,0,45],
[50,51,54,46,55,50,54,53,52,56,51,50,57,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 4, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,49,46,63,63,43,57,40,68,44,54,64,51,70],
[41,0,55,47,63,70,53,58,41,62,43,48,63,59,59],
[52,46,0,47,68,58,38,50,29,60,43,59,71,44,70],
[55,54,54,0,61,59,55,49,38,61,37,50,46,39,68],
[38,38,33,40,0,53,41,44,20,58,29,45,64,43,66],
[38,31,43,42,48,0,37,54,41,28,32,50,42,41,44],
[58,48,63,46,60,64,0,46,43,51,45,55,56,35,66],
[44,43,51,52,57,47,55,0,53,56,39,62,59,50,57],
[61,60,72,63,81,60,58,48,0,68,65,71,77,57,64],
[33,39,41,40,43,73,50,45,33,0,43,46,51,44,66],
[57,58,58,64,72,69,56,62,36,58,0,67,64,57,73],
[47,53,42,51,56,51,46,39,30,55,34,0,54,42,57],
[37,38,30,55,37,59,45,42,24,50,37,47,0,46,58],
[50,42,57,62,58,60,66,51,44,57,44,59,55,0,66],
[31,42,31,33,35,57,35,44,37,35,28,44,43,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 5, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,46,41,54,45,46,50,52,50,34,58,53,45,48],
[56,0,51,56,50,53,55,56,61,54,46,58,58,48,51],
[55,50,0,50,57,48,49,60,54,55,50,69,58,46,55],
[60,45,51,0,54,55,50,63,57,54,45,64,59,58,65],
[47,51,44,47,0,44,45,53,59,48,44,56,52,48,58],
[56,48,53,46,57,0,53,57,54,57,46,65,57,54,52],
[55,46,52,51,56,48,0,58,58,58,45,70,53,50,48],
[51,45,41,38,48,44,43,0,43,46,39,55,55,44,51],
[49,40,47,44,42,47,43,58,0,48,38,56,51,41,46],
[51,47,46,47,53,44,43,55,53,0,40,56,57,36,48],
[67,55,51,56,57,55,56,62,63,61,0,74,61,49,59],
[43,43,32,37,45,36,31,46,45,45,27,0,42,35,40],
[48,43,43,42,49,44,48,46,50,44,40,59,0,48,47],
[56,53,55,43,53,47,51,57,60,65,52,66,53,0,49],
[53,50,46,36,43,49,53,50,55,53,42,61,54,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 6, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,49,50,51,40,61,41,39,46,45,55,52,51,56],
[48,0,49,47,46,48,51,57,43,52,43,53,47,47,63],
[52,52,0,45,46,49,53,45,47,38,49,56,54,45,62],
[51,54,56,0,45,46,57,55,47,43,55,61,54,43,60],
[50,55,55,56,0,52,60,54,44,56,50,53,61,50,60],
[61,53,52,55,49,0,63,54,46,53,46,58,58,51,72],
[40,50,48,44,41,38,0,52,45,47,46,58,51,46,69],
[60,44,56,46,47,47,49,0,36,46,51,50,51,48,56],
[62,58,54,54,57,55,56,65,0,57,51,63,60,50,63],
[55,49,63,58,45,48,54,55,44,0,45,55,53,41,64],
[56,58,52,46,51,55,55,50,50,56,0,57,65,50,63],
[46,48,45,40,48,43,43,51,38,46,44,0,51,44,56],
[49,54,47,47,40,43,50,50,41,48,36,50,0,48,47],
[50,54,56,58,51,50,55,53,51,60,51,57,53,0,59],
[45,38,39,41,41,29,32,45,38,37,38,45,54,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 7, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,63,56,59,53,53,47,61,52,57,53,64,51,51],
[49,0,51,43,51,51,39,46,52,59,53,39,48,45,60],
[38,50,0,54,57,45,43,46,44,54,45,45,46,41,58],
[45,58,47,0,58,57,47,54,52,69,59,42,54,47,55],
[42,50,44,43,0,46,29,37,43,49,44,37,49,46,46],
[48,50,56,44,55,0,37,50,41,58,56,41,54,39,49],
[48,62,58,54,72,64,0,58,60,63,53,52,69,60,63],
[54,55,55,47,64,51,43,0,40,48,53,38,52,46,48],
[40,49,57,49,58,60,41,61,0,55,61,44,54,49,56],
[49,42,47,32,52,43,38,53,46,0,48,41,55,28,48],
[44,48,56,42,57,45,48,48,40,53,0,40,50,46,49],
[48,62,56,59,64,60,49,63,57,60,61,0,62,52,58],
[37,53,55,47,52,47,32,49,47,46,51,39,0,47,55],
[50,56,60,54,55,62,41,55,52,73,55,49,54,0,63],
[50,41,43,46,55,52,38,53,45,53,52,43,46,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 8, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,37,36,45,47,38,45,49,43,55,46,47,42,38],
[57,0,48,50,53,46,51,59,51,52,64,49,54,49,42],
[64,53,0,45,53,54,50,47,51,52,61,49,60,43,46],
[65,51,56,0,53,56,50,60,61,56,60,55,48,52,52],
[56,48,48,48,0,53,52,58,55,50,64,57,53,44,49],
[54,55,47,45,48,0,47,56,55,53,57,50,47,44,47],
[63,50,51,51,49,54,0,58,52,49,56,58,52,49,45],
[56,42,54,41,43,45,43,0,51,47,51,46,47,41,46],
[52,50,50,40,46,46,49,50,0,50,53,48,44,42,45],
[58,49,49,45,51,48,52,54,51,0,62,52,41,52,50],
[46,37,40,41,37,44,45,50,48,39,0,39,40,39,36],
[55,52,52,46,44,51,43,55,53,49,62,0,49,48,48],
[54,47,41,53,48,54,49,54,57,60,61,52,0,50,45],
[59,52,58,49,57,57,52,60,59,49,62,53,51,0,48],
[63,59,55,49,52,54,56,55,56,51,65,53,56,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 9, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,46,55,47,49,43,57,54,57,38,51,53,42,49],
[63,0,61,65,63,66,51,71,58,57,57,59,64,46,60],
[55,40,0,60,51,52,50,58,55,39,41,54,63,53,46],
[46,36,41,0,54,47,40,43,28,34,31,43,51,50,41],
[54,38,50,47,0,59,58,73,40,43,49,44,56,47,48],
[52,35,49,54,42,0,37,56,45,25,38,40,41,49,40],
[58,50,51,61,43,64,0,72,62,50,58,53,65,55,38],
[44,30,43,58,28,45,29,0,38,36,46,44,51,46,33],
[47,43,46,73,61,56,39,63,0,57,46,43,49,47,36],
[44,44,62,67,58,76,51,65,44,0,60,60,69,54,45],
[63,44,60,70,52,63,43,55,55,41,0,57,71,65,45],
[50,42,47,58,57,61,48,57,58,41,44,0,52,47,44],
[48,37,38,50,45,60,36,50,52,32,30,49,0,39,37],
[59,55,48,51,54,52,46,55,54,47,36,54,62,0,33],
[52,41,55,60,53,61,63,68,65,56,56,57,64,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 10, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,56,56,71,47,57,44,61,52,62,63,44,59,75],
[48,0,31,58,55,50,26,40,43,41,61,46,43,40,69],
[45,70,0,53,68,64,60,59,66,62,57,56,61,56,62],
[45,43,48,0,48,63,34,47,49,38,64,48,44,32,76],
[30,46,33,53,0,58,42,35,51,50,64,45,49,37,49],
[54,51,37,38,43,0,38,55,51,52,69,55,51,55,75],
[44,75,41,67,59,63,0,50,65,59,62,59,58,60,77],
[57,61,42,54,66,46,51,0,53,54,68,43,51,48,78],
[40,58,35,52,50,50,36,48,0,36,51,33,60,41,65],
[49,60,39,63,51,49,42,47,65,0,53,48,65,42,66],
[39,40,44,37,37,32,39,33,50,48,0,46,41,40,55],
[38,55,45,53,56,46,42,58,68,53,55,0,53,50,69],
[57,58,40,57,52,50,43,50,41,36,60,48,0,53,64],
[42,61,45,69,64,46,41,53,60,59,61,51,48,0,60],
[26,32,39,25,52,26,24,23,36,35,46,32,37,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 11, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,44,50,50,40,41,38,56,49,47,44,58,53,43],
[52,0,48,48,55,65,47,42,56,48,43,47,54,45,42],
[57,53,0,60,54,68,45,37,57,50,42,47,55,53,52],
[51,53,41,0,43,52,51,40,62,54,43,43,48,43,51],
[51,46,47,58,0,56,47,42,67,51,43,44,53,56,46],
[61,36,33,49,45,0,36,42,49,48,48,41,50,50,38],
[60,54,56,50,54,65,0,49,64,54,49,56,59,47,53],
[63,59,64,61,59,59,52,0,68,63,53,50,59,56,50],
[45,45,44,39,34,52,37,33,0,33,35,35,51,49,37],
[52,53,51,47,50,53,47,38,68,0,53,51,58,53,50],
[54,58,59,58,58,53,52,48,66,48,0,56,62,64,58],
[57,54,54,58,57,60,45,51,66,50,45,0,51,54,47],
[43,47,46,53,48,51,42,42,50,43,39,50,0,51,54],
[48,56,48,58,45,51,54,45,52,48,37,47,50,0,53],
[58,59,49,50,55,63,48,51,64,51,43,54,47,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 12, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,44,54,49,44,50,58,51,50,57,43,39,55,50],
[55,0,43,52,43,51,66,59,48,50,55,45,51,45,63],
[57,58,0,56,42,51,46,50,57,43,49,49,50,49,52],
[47,49,45,0,50,55,54,51,58,50,51,47,51,47,60],
[52,58,59,51,0,55,54,69,59,41,53,50,53,63,61],
[57,50,50,46,46,0,57,62,60,53,56,39,55,47,48],
[51,35,55,47,47,44,0,49,57,44,45,49,34,56,50],
[43,42,51,50,32,39,52,0,41,38,45,42,48,44,50],
[50,53,44,43,42,41,44,60,0,49,45,45,40,51,57],
[51,51,58,51,60,48,57,63,52,0,54,54,61,55,60],
[44,46,52,50,48,45,56,56,56,47,0,54,51,55,57],
[58,56,52,54,51,62,52,59,56,47,47,0,50,55,61],
[62,50,51,50,48,46,67,53,61,40,50,51,0,57,50],
[46,56,52,54,38,54,45,57,50,46,46,46,44,0,53],
[51,38,49,41,40,53,51,51,44,41,44,40,51,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 13, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,46,53,63,47,53,48,45,61,46,55,60,44,57],
[41,0,42,47,44,44,48,46,42,47,48,45,52,45,52],
[55,59,0,60,58,53,57,57,54,58,55,59,60,50,60],
[48,54,41,0,51,53,47,46,41,48,45,45,49,45,47],
[38,57,43,50,0,42,49,45,33,50,49,43,56,52,48],
[54,57,48,48,59,0,54,50,48,50,52,50,53,49,62],
[48,53,44,54,52,47,0,49,44,50,49,44,48,47,48],
[53,55,44,55,56,51,52,0,46,43,51,49,55,53,57],
[56,59,47,60,68,53,57,55,0,58,49,54,64,56,61],
[40,54,43,53,51,51,51,58,43,0,50,48,55,47,56],
[55,53,46,56,52,49,52,50,52,51,0,56,56,46,62],
[46,56,42,56,58,51,57,52,47,53,45,0,52,44,60],
[41,49,41,52,45,48,53,46,37,46,45,49,0,48,52],
[57,56,51,56,49,52,54,48,45,54,55,57,53,0,58],
[44,49,41,54,53,39,53,44,40,45,39,41,49,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 14, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,54,47,50,44,48,51,50,54,52,46,53,61,52],
[46,0,55,45,50,41,40,53,50,42,36,43,52,48,56],
[47,46,0,48,54,34,43,55,46,52,52,40,43,43,52],
[54,56,53,0,50,49,42,60,55,50,46,47,49,64,66],
[51,51,47,51,0,37,43,52,44,51,46,46,48,56,51],
[57,60,67,52,64,0,53,57,55,57,50,47,55,64,62],
[53,61,58,59,58,48,0,51,47,60,50,56,51,59,61],
[50,48,46,41,49,44,50,0,47,58,56,51,48,50,60],
[51,51,55,46,57,46,54,54,0,49,51,50,51,58,54],
[47,59,49,51,50,44,41,43,52,0,47,47,45,58,48],
[49,65,49,55,55,51,51,45,50,54,0,49,54,64,66],
[55,58,61,54,55,54,45,50,51,54,52,0,50,59,60],
[48,49,58,52,53,46,50,53,50,56,47,51,0,53,55],
[40,53,58,37,45,37,42,51,43,43,37,42,48,0,47],
[49,45,49,35,50,39,40,41,47,53,35,41,46,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 15, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,49,53,48,43,44,59,55,44,48,56,43,51,52],
[54,0,47,45,52,36,47,59,52,46,55,43,45,50,53],
[52,54,0,52,57,48,53,56,62,48,52,58,50,56,59],
[48,56,49,0,53,51,52,61,52,46,53,58,53,54,54],
[53,49,44,48,0,48,48,58,57,47,55,53,45,49,55],
[58,65,53,50,53,0,52,66,57,51,61,57,48,59,54],
[57,54,48,49,53,49,0,57,60,47,54,54,51,55,58],
[42,42,45,40,43,35,44,0,44,37,46,44,40,43,48],
[46,49,39,49,44,44,41,57,0,42,45,54,43,54,53],
[57,55,53,55,54,50,54,64,59,0,45,59,53,56,54],
[53,46,49,48,46,40,47,55,56,56,0,51,52,55,56],
[45,58,43,43,48,44,47,57,47,42,50,0,47,53,52],
[58,56,51,48,56,53,50,61,58,48,49,54,0,56,60],
[50,51,45,47,52,42,46,58,47,45,46,48,45,0,50],
[49,48,42,47,46,47,43,53,48,47,45,49,41,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 16, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,48,44,47,57,50,54,45,54,48,50,50,47,40],
[61,0,49,53,54,56,54,59,46,55,54,58,54,53,59],
[53,52,0,50,48,54,49,63,49,50,58,58,57,57,49],
[57,48,51,0,51,58,51,57,46,49,55,53,58,50,49],
[54,47,53,50,0,51,53,54,43,55,50,57,53,50,45],
[44,45,47,43,50,0,47,46,43,49,50,45,50,45,45],
[51,47,52,50,48,54,0,57,48,52,54,51,53,47,46],
[47,42,38,44,47,55,44,0,48,48,48,46,48,48,43],
[56,55,52,55,58,58,53,53,0,49,57,60,50,57,53],
[47,46,51,52,46,52,49,53,52,0,51,54,50,52,48],
[53,47,43,46,51,51,47,53,44,50,0,50,50,48,47],
[51,43,43,48,44,56,50,55,41,47,51,0,49,53,45],
[51,47,44,43,48,51,48,53,51,51,51,52,0,53,50],
[54,48,44,51,51,56,54,53,44,49,53,48,48,0,49],
[61,42,52,52,56,56,55,58,48,53,54,56,51,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 17, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,55,54,50,43,54,58,52,55,60,51,47,51,50],
[50,0,47,51,47,43,56,61,46,46,58,50,54,41,43],
[46,54,0,56,46,52,54,53,45,48,54,50,58,49,51],
[47,50,45,0,54,49,50,54,48,50,57,54,51,40,44],
[51,54,55,47,0,50,58,55,55,55,67,49,54,50,40],
[58,58,49,52,51,0,52,59,48,59,57,54,55,50,47],
[47,45,47,51,43,49,0,56,49,45,50,51,51,52,44],
[43,40,48,47,46,42,45,0,45,41,47,49,45,39,45],
[49,55,56,53,46,53,52,56,0,55,56,49,56,48,43],
[46,55,53,51,46,42,56,60,46,0,56,62,55,43,48],
[41,43,47,44,34,44,51,54,45,45,0,47,46,40,39],
[50,51,51,47,52,47,50,52,52,39,54,0,48,46,48],
[54,47,43,50,47,46,50,56,45,46,55,53,0,49,46],
[50,60,52,61,51,51,49,62,53,58,61,55,52,0,57],
[51,58,50,57,61,54,57,56,58,53,62,53,55,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 18, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,42,48,47,39,54,43,51,52,60,44,52,46,48],
[50,0,45,52,39,48,52,47,46,56,50,46,48,46,49],
[59,56,0,48,50,54,59,56,53,61,60,49,51,52,52],
[53,49,53,0,50,50,61,57,57,60,59,50,50,51,45],
[54,62,51,51,0,48,60,57,50,54,56,55,51,50,51],
[62,53,47,51,53,0,65,50,47,59,59,51,50,58,52],
[47,49,42,40,41,36,0,39,44,44,50,39,41,44,40],
[58,54,45,44,44,51,62,0,55,52,57,48,45,49,47],
[50,55,48,44,51,54,57,46,0,60,60,52,49,48,49],
[49,45,40,41,47,42,57,49,41,0,51,47,44,42,43],
[41,51,41,42,45,42,51,44,41,50,0,43,43,34,39],
[57,55,52,51,46,50,62,53,49,54,58,0,51,48,52],
[49,53,50,51,50,51,60,56,52,57,58,50,0,48,51],
[55,55,49,50,51,43,57,52,53,59,67,53,53,0,58],
[53,52,49,56,50,49,61,54,52,58,62,49,50,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 19, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,52,60,51,41,56,59,54,54,50,47,51,55,42],
[30,0,43,48,45,35,39,50,47,46,38,46,43,53,47],
[49,58,0,50,53,45,49,49,60,53,54,59,55,57,45],
[41,53,51,0,43,36,47,54,53,47,46,49,47,53,48],
[50,56,48,58,0,59,37,51,61,51,48,51,62,53,49],
[60,66,56,65,42,0,51,57,65,61,54,46,53,54,49],
[45,62,52,54,64,50,0,56,51,51,49,44,42,49,49],
[42,51,52,47,50,44,45,0,49,53,44,37,46,50,48],
[47,54,41,48,40,36,50,52,0,48,43,48,48,56,36],
[47,55,48,54,50,40,50,48,53,0,37,36,50,59,45],
[51,63,47,55,53,47,52,57,58,64,0,50,59,61,48],
[54,55,42,52,50,55,57,64,53,65,51,0,60,60,53],
[50,58,46,54,39,48,59,55,53,51,42,41,0,48,47],
[46,48,44,48,48,47,52,51,45,42,40,41,53,0,50],
[59,54,56,53,52,52,52,53,65,56,53,48,54,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 20, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,49,51,63,56,57,54,51,50,50,60,49,60,71],
[44,0,57,55,45,46,46,51,48,52,41,55,48,53,63],
[52,44,0,46,49,39,53,50,48,54,41,53,47,52,51],
[50,46,55,0,68,50,54,55,50,57,51,57,51,54,62],
[38,56,52,33,0,51,44,38,43,42,45,51,40,50,60],
[45,55,62,51,50,0,48,52,54,49,50,58,47,57,57],
[44,55,48,47,57,53,0,45,46,48,41,50,41,56,58],
[47,50,51,46,63,49,56,0,52,57,45,52,55,54,63],
[50,53,53,51,58,47,55,49,0,52,54,53,48,56,58],
[51,49,47,44,59,52,53,44,49,0,52,52,47,59,69],
[51,60,60,50,56,51,60,56,47,49,0,54,42,55,66],
[41,46,48,44,50,43,51,49,48,49,47,0,45,56,57],
[52,53,54,50,61,54,60,46,53,54,59,56,0,57,59],
[41,48,49,47,51,44,45,47,45,42,46,45,44,0,56],
[30,38,50,39,41,44,43,38,43,32,35,44,42,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 21, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,51,63,63,68,74,57,69,57,51,34,45,76,44],
[35,0,34,57,46,53,57,52,60,57,40,44,40,57,61],
[50,67,0,68,57,64,73,61,68,65,57,58,46,61,65],
[38,44,33,0,39,52,55,60,56,26,31,40,45,56,53],
[38,55,44,62,0,67,62,61,62,39,35,50,49,68,63],
[33,48,37,49,34,0,53,52,48,46,28,40,29,69,50],
[27,44,28,46,39,48,0,36,45,26,19,35,34,60,48],
[44,49,40,41,40,49,65,0,62,30,18,29,44,52,46],
[32,41,33,45,39,53,56,39,0,22,36,42,20,52,51],
[44,44,36,75,62,55,75,71,79,0,42,45,48,72,56],
[50,61,44,70,66,73,82,83,65,59,0,55,36,76,57],
[67,57,43,61,51,61,66,72,59,56,46,0,51,74,69],
[56,61,55,56,52,72,67,57,81,53,65,50,0,71,61],
[25,44,40,45,33,32,41,49,49,29,25,27,30,0,43],
[57,40,36,48,38,51,53,55,50,45,44,32,40,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 22, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,53,48,55,51,49,54,43,50,47,47,47,51,49],
[49,0,45,55,53,54,47,54,43,49,50,51,48,55,45],
[48,56,0,60,64,61,56,54,51,55,49,59,55,56,51],
[53,46,41,0,47,53,48,45,43,45,46,50,48,44,41],
[46,48,37,54,0,49,47,44,42,46,41,44,46,45,42],
[50,47,40,48,52,0,39,34,40,46,46,40,34,46,44],
[52,54,45,53,54,62,0,43,45,56,49,47,46,51,42],
[47,47,47,56,57,67,58,0,53,54,50,48,52,55,49],
[58,58,50,58,59,61,56,48,0,50,52,54,49,46,50],
[51,52,46,56,55,55,45,47,51,0,52,48,47,48,48],
[54,51,52,55,60,55,52,51,49,49,0,45,49,50,43],
[54,50,42,51,57,61,54,53,47,53,56,0,48,55,49],
[54,53,46,53,55,67,55,49,52,54,52,53,0,53,52],
[50,46,45,57,56,55,50,46,55,53,51,46,48,0,45],
[52,56,50,60,59,57,59,52,51,53,58,52,49,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 23, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,49,50,55,55,51,48,48,53,53,56,41,57,52],
[58,0,46,58,48,58,53,43,47,50,47,54,47,53,58],
[52,55,0,55,58,57,46,53,53,57,51,58,45,58,54],
[51,43,46,0,52,51,42,39,45,50,52,52,48,55,45],
[46,53,43,49,0,50,53,50,45,54,51,56,46,53,58],
[46,43,44,50,51,0,49,41,40,47,47,45,44,54,49],
[50,48,55,59,48,52,0,49,47,47,52,54,50,62,50],
[53,58,48,62,51,60,52,0,55,57,50,54,49,63,54],
[53,54,48,56,56,61,54,46,0,60,54,50,52,65,51],
[48,51,44,51,47,54,54,44,41,0,46,47,49,63,43],
[48,54,50,49,50,54,49,51,47,55,0,53,48,58,52],
[45,47,43,49,45,56,47,47,51,54,48,0,47,57,45],
[60,54,56,53,55,57,51,52,49,52,53,54,0,56,51],
[44,48,43,46,48,47,39,38,36,38,43,44,45,0,39],
[49,43,47,56,43,52,51,47,50,58,49,56,50,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 24, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,41,49,45,45,54,51,46,40,47,43,41,45,43],
[49,0,55,55,45,53,57,56,51,50,56,54,47,52,52],
[60,46,0,51,48,55,59,55,49,49,61,56,45,54,47],
[52,46,50,0,46,50,58,49,46,43,54,59,45,55,47],
[56,56,53,55,0,58,60,53,54,50,64,57,50,51,47],
[56,48,46,51,43,0,55,51,52,47,54,56,48,51,52],
[47,44,42,43,41,46,0,50,45,36,48,48,42,46,47],
[50,45,46,52,48,50,51,0,48,40,52,59,41,47,46],
[55,50,52,55,47,49,56,53,0,47,55,52,43,47,44],
[61,51,52,58,51,54,65,61,54,0,52,61,45,53,54],
[54,45,40,47,37,47,53,49,46,49,0,55,46,51,49],
[58,47,45,42,44,45,53,42,49,40,46,0,42,51,44],
[60,54,56,56,51,53,59,60,58,56,55,59,0,54,50],
[56,49,47,46,50,50,55,54,54,48,50,50,47,0,54],
[58,49,54,54,54,49,54,55,57,47,52,57,51,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 25, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,42,46,44,45,40,38,54,49,54,42,41,57,39],
[53,0,39,50,50,41,48,42,49,51,51,46,44,52,42],
[59,62,0,64,55,56,60,52,61,62,58,50,56,60,52],
[55,51,37,0,39,54,47,46,59,48,51,44,43,56,45],
[57,51,46,62,0,49,50,45,58,67,56,50,54,55,54],
[56,60,45,47,52,0,59,46,50,60,60,53,46,62,52],
[61,53,41,54,51,42,0,42,57,56,54,53,53,58,42],
[63,59,49,55,56,55,59,0,60,60,58,52,47,60,53],
[47,52,40,42,43,51,44,41,0,44,50,38,37,46,36],
[52,50,39,53,34,41,45,41,57,0,51,46,39,56,37],
[47,50,43,50,45,41,47,43,51,50,0,40,44,53,44],
[59,55,51,57,51,48,48,49,63,55,61,0,50,58,49],
[60,57,45,58,47,55,48,54,64,62,57,51,0,56,47],
[44,49,41,45,46,39,43,41,55,45,48,43,45,0,35],
[62,59,49,56,47,49,59,48,65,64,57,52,54,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 26, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,54,44,53,50,54,43,50,58,46,50,47,55,54],
[44,0,53,46,46,43,52,47,43,50,49,40,51,50,39],
[47,48,0,41,49,42,52,38,38,53,51,38,51,48,51],
[57,55,60,0,55,46,61,55,56,61,56,45,62,65,56],
[48,55,52,46,0,43,56,41,48,54,45,42,56,48,52],
[51,58,59,55,58,0,60,49,51,64,47,46,55,55,59],
[47,49,49,40,45,41,0,48,47,55,43,43,52,49,53],
[58,54,63,46,60,52,53,0,47,65,53,50,54,56,57],
[51,58,63,45,53,50,54,54,0,61,55,54,54,47,54],
[43,51,48,40,47,37,46,36,40,0,48,35,50,47,51],
[55,52,50,45,56,54,58,48,46,53,0,46,62,57,55],
[51,61,63,56,59,55,58,51,47,66,55,0,58,56,66],
[54,50,50,39,45,46,49,47,47,51,39,43,0,51,46],
[46,51,53,36,53,46,52,45,54,54,44,45,50,0,48],
[47,62,50,45,49,42,48,44,47,50,46,35,55,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 27, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,50,48,38,46,25,38,45,46,44,52,50,37,50],
[60,0,48,45,42,37,33,52,43,42,58,61,55,40,56],
[51,53,0,44,39,44,36,54,34,49,60,59,51,50,52],
[53,56,57,0,45,52,45,61,49,48,48,59,56,46,66],
[63,59,62,56,0,59,51,55,42,45,61,57,68,45,54],
[55,64,57,49,42,0,44,50,50,53,60,61,62,53,48],
[76,68,65,56,50,57,0,59,58,46,67,61,73,61,59],
[63,49,47,40,46,51,42,0,51,49,58,50,63,42,47],
[56,58,67,52,59,51,43,50,0,56,72,64,52,44,63],
[55,59,52,53,56,48,55,52,45,0,59,66,62,50,53],
[57,43,41,53,40,41,34,43,29,42,0,54,48,39,40],
[49,40,42,42,44,40,40,51,37,35,47,0,55,31,49],
[51,46,50,45,33,39,28,38,49,39,53,46,0,35,49],
[64,61,51,55,56,48,40,59,57,51,62,70,66,0,53],
[51,45,49,35,47,53,42,54,38,48,61,52,52,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 28, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,52,56,53,48,46,49,57,44,51,51,47,51,46],
[51,0,45,52,52,54,57,46,58,42,57,50,50,56,57],
[49,56,0,49,52,53,56,46,51,43,49,51,49,55,55],
[45,49,52,0,44,41,49,45,55,40,48,47,54,49,51],
[48,49,49,57,0,49,48,50,54,44,51,46,53,48,56],
[53,47,48,60,52,0,55,51,49,41,59,51,50,59,56],
[55,44,45,52,53,46,0,49,48,49,43,52,52,53,52],
[52,55,55,56,51,50,52,0,51,42,49,56,58,58,54],
[44,43,50,46,47,52,53,50,0,44,43,46,41,48,49],
[57,59,58,61,57,60,52,59,57,0,52,50,60,59,56],
[50,44,52,53,50,42,58,52,58,49,0,53,51,50,54],
[50,51,50,54,55,50,49,45,55,51,48,0,52,61,52],
[54,51,52,47,48,51,49,43,60,41,50,49,0,56,51],
[50,45,46,52,53,42,48,43,53,42,51,40,45,0,49],
[55,44,46,50,45,45,49,47,52,45,47,49,50,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 29, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,54,54,57,54,53,50,56,54,48,56,60,52,46],
[48,0,48,49,51,53,53,47,48,52,46,65,47,56,44],
[47,53,0,50,47,51,50,42,49,53,45,58,47,48,46],
[47,52,51,0,50,50,55,51,49,60,50,61,52,57,45],
[44,50,54,51,0,43,55,50,55,60,50,53,53,53,42],
[47,48,50,51,58,0,53,47,53,50,45,55,53,45,49],
[48,48,51,46,46,48,0,45,52,52,47,55,45,51,43],
[51,54,59,50,51,54,56,0,56,51,49,60,56,58,45],
[45,53,52,52,46,48,49,45,0,50,38,56,54,57,42],
[47,49,48,41,41,51,49,50,51,0,46,57,48,47,41],
[53,55,56,51,51,56,54,52,63,55,0,59,48,54,51],
[45,36,43,40,48,46,46,41,45,44,42,0,42,51,34],
[41,54,54,49,48,48,56,45,47,53,53,59,0,53,41],
[49,45,53,44,48,56,50,43,44,54,47,50,48,0,46],
[55,57,55,56,59,52,58,56,59,60,50,67,60,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 30, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,41,58,52,45,48,54,58,49,54,50,55,53,49],
[50,0,44,56,54,49,45,50,53,53,49,51,55,44,49],
[60,57,0,58,59,44,55,62,63,53,58,56,51,46,54],
[43,45,43,0,51,45,42,51,54,46,48,50,53,50,47],
[49,47,42,50,0,51,46,50,49,46,50,46,53,47,46],
[56,52,57,56,50,0,45,56,59,53,55,57,60,55,57],
[53,56,46,59,55,56,0,56,57,49,51,53,55,56,46],
[47,51,39,50,51,45,45,0,54,46,44,45,61,45,45],
[43,48,38,47,52,42,44,47,0,40,45,47,47,45,44],
[52,48,48,55,55,48,52,55,61,0,58,59,52,47,44],
[47,52,43,53,51,46,50,57,56,43,0,53,51,50,45],
[51,50,45,51,55,44,48,56,54,42,48,0,57,40,45],
[46,46,50,48,48,41,46,40,54,49,50,44,0,47,43],
[48,57,55,51,54,46,45,56,56,54,51,61,54,0,52],
[52,52,47,54,55,44,55,56,57,57,56,56,58,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 31, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,49,49,53,55,60,50,51,52,53,47,47,52,48],
[48,0,48,53,49,56,46,58,50,43,48,47,50,46,53],
[52,53,0,59,59,56,51,56,53,43,50,43,54,45,44],
[52,48,42,0,54,56,55,51,49,54,50,54,45,41,49],
[48,52,42,47,0,55,48,51,43,46,48,50,49,43,44],
[46,45,45,45,46,0,46,46,41,44,48,44,44,42,44],
[41,55,50,46,53,55,0,58,48,45,47,51,48,45,45],
[51,43,45,50,50,55,43,0,43,41,46,42,48,46,43],
[50,51,48,52,58,60,53,58,0,54,54,51,53,49,54],
[49,58,58,47,55,57,56,60,47,0,60,56,50,49,54],
[48,53,51,51,53,53,54,55,47,41,0,44,49,47,43],
[54,54,58,47,51,57,50,59,50,45,57,0,58,52,49],
[54,51,47,56,52,57,53,53,48,51,52,43,0,52,48],
[49,55,56,60,58,59,56,55,52,52,54,49,49,0,51],
[53,48,57,52,57,57,56,58,47,47,58,52,53,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 32, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,62,65,53,46,58,54,52,72,65,77,60,66,58],
[37,0,65,63,56,37,57,54,57,76,61,67,57,49,59],
[39,36,0,57,39,26,28,47,53,44,70,49,48,45,54],
[36,38,44,0,33,41,42,42,34,47,51,44,48,36,45],
[48,45,62,68,0,56,49,54,63,62,63,71,66,67,59],
[55,64,75,60,45,0,59,62,68,73,69,67,71,61,74],
[43,44,73,59,52,42,0,56,47,58,71,54,64,47,68],
[47,47,54,59,47,39,45,0,62,61,58,48,53,58,63],
[49,44,48,67,38,33,54,39,0,67,62,62,55,45,53],
[29,25,57,54,39,28,43,40,34,0,56,51,53,48,56],
[36,40,31,50,38,32,30,43,39,45,0,42,48,45,55],
[24,34,52,57,30,34,47,53,39,50,59,0,49,37,41],
[41,44,53,53,35,30,37,48,46,48,53,52,0,47,50],
[35,52,56,65,34,40,54,43,56,53,56,64,54,0,53],
[43,42,47,56,42,27,33,38,48,45,46,60,51,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 33, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,48,48,53,55,47,50,52,49,44,41,61,49,55],
[39,0,37,41,48,46,46,46,54,39,37,40,49,46,47],
[53,64,0,51,54,52,55,58,58,43,51,45,62,52,62],
[53,60,50,0,57,56,60,61,58,49,51,55,62,52,64],
[48,53,47,44,0,47,47,47,47,42,50,43,52,50,56],
[46,55,49,45,54,0,47,46,57,44,56,47,58,49,57],
[54,55,46,41,54,54,0,52,56,44,55,48,63,55,60],
[51,55,43,40,54,55,49,0,50,42,55,39,59,53,59],
[49,47,43,43,54,44,45,51,0,42,50,36,55,56,52],
[52,62,58,52,59,57,57,59,59,0,50,54,69,50,65],
[57,64,50,50,51,45,46,46,51,51,0,40,56,51,58],
[60,61,56,46,58,54,53,62,65,47,61,0,64,57,69],
[40,52,39,39,49,43,38,42,46,32,45,37,0,45,45],
[52,55,49,49,51,52,46,48,45,51,50,44,56,0,60],
[46,54,39,37,45,44,41,42,49,36,43,32,56,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 34, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,47,52,47,50,45,56,50,44,55,45,48,44,54],
[58,0,48,60,46,56,51,52,51,43,47,56,56,36,54],
[54,53,0,58,46,56,53,56,44,47,57,55,55,54,53],
[49,41,43,0,36,57,49,49,44,36,51,53,46,31,50],
[54,55,55,65,0,66,57,58,49,55,49,61,51,46,62],
[51,45,45,44,35,0,42,50,37,43,50,44,48,35,48],
[56,50,48,52,44,59,0,51,45,41,50,61,48,47,52],
[45,49,45,52,43,51,50,0,40,35,46,54,53,47,57],
[51,50,57,57,52,64,56,61,0,55,60,57,60,51,64],
[57,58,54,65,46,58,60,66,46,0,67,62,58,54,59],
[46,54,44,50,52,51,51,55,41,34,0,49,50,42,53],
[56,45,46,48,40,57,40,47,44,39,52,0,50,44,58],
[53,45,46,55,50,53,53,48,41,43,51,51,0,47,55],
[57,65,47,70,55,66,54,54,50,47,59,57,54,0,64],
[47,47,48,51,39,53,49,44,37,42,48,43,46,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 35, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,39,46,42,25,40,51,44,44,54,30,54,49,48],
[67,0,41,66,58,55,55,71,53,44,78,43,72,64,69],
[62,60,0,76,67,70,59,79,49,70,71,51,68,64,64],
[55,35,25,0,38,21,50,48,33,33,60,34,54,37,49],
[59,43,34,63,0,54,61,68,49,55,74,41,69,59,67],
[76,46,31,80,47,0,58,62,55,56,69,50,76,49,63],
[61,46,42,51,40,43,0,48,45,42,58,51,43,35,49],
[50,30,22,53,33,39,53,0,44,37,49,38,54,47,48],
[57,48,52,68,52,46,56,57,0,41,57,48,53,48,54],
[57,57,31,68,46,45,59,64,60,0,64,41,61,62,66],
[47,23,30,41,27,32,43,52,44,37,0,40,35,39,45],
[71,58,50,67,60,51,50,63,53,60,61,0,68,65,73],
[47,29,33,47,32,25,58,47,48,40,66,33,0,41,42],
[52,37,37,64,42,52,66,54,53,39,62,36,60,0,57],
[53,32,37,52,34,38,52,53,47,35,56,28,59,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 36, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,65,49,40,49,55,47,55,44,65,56,65,50],
[60,0,59,65,51,53,46,54,59,65,54,57,56,66,60],
[60,42,0,62,46,52,56,48,48,49,54,58,42,62,64],
[36,36,39,0,29,41,45,37,50,50,35,38,40,50,36],
[52,50,55,72,0,50,70,47,55,56,55,57,55,70,55],
[61,48,49,60,51,0,58,54,38,55,51,56,47,60,56],
[52,55,45,56,31,43,0,43,50,56,50,41,41,58,50],
[46,47,53,64,54,47,58,0,51,57,59,57,45,67,58],
[54,42,53,51,46,63,51,50,0,60,50,53,45,60,49],
[46,36,52,51,45,46,45,44,41,0,43,53,38,62,49],
[57,47,47,66,46,50,51,42,51,58,0,56,51,69,49],
[36,44,43,63,44,45,60,44,48,48,45,0,44,52,58],
[45,45,59,61,46,54,60,56,56,63,50,57,0,64,63],
[36,35,39,51,31,41,43,34,41,39,32,49,37,0,40],
[51,41,37,65,46,45,51,43,52,52,52,43,38,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 37, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,54,60,62,57,61,63,61,69,62,62,48,57,61],
[43,0,48,52,56,54,48,60,58,61,58,52,42,45,52],
[47,53,0,54,58,55,55,61,53,64,56,56,48,47,55],
[41,49,47,0,54,48,53,55,51,54,48,52,42,46,54],
[39,45,43,47,0,40,43,50,51,53,49,44,37,38,53],
[44,47,46,53,61,0,43,54,49,59,48,48,39,41,48],
[40,53,46,48,58,58,0,55,54,64,61,50,49,44,57],
[38,41,40,46,51,47,46,0,49,58,52,50,36,40,46],
[40,43,48,50,50,52,47,52,0,56,55,55,45,41,49],
[32,40,37,47,48,42,37,43,45,0,45,46,35,35,42],
[39,43,45,53,52,53,40,49,46,56,0,49,42,43,46],
[39,49,45,49,57,53,51,51,46,55,52,0,42,39,50],
[53,59,53,59,64,62,52,65,56,66,59,59,0,50,63],
[44,56,54,55,63,60,57,61,60,66,58,62,51,0,56],
[40,49,46,47,48,53,44,55,52,59,55,51,38,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 38, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,57,59,46,47,40,34,59,46,47,47,42,46],
[59,0,49,49,46,50,59,60,50,68,54,54,61,61,46],
[59,52,0,57,54,60,48,60,46,58,50,52,54,52,58],
[44,52,44,0,48,48,43,46,34,59,40,42,53,57,50],
[42,55,47,53,0,43,44,52,33,58,44,55,54,50,41],
[55,51,41,53,58,0,51,49,44,71,56,58,56,47,45],
[54,42,53,58,57,50,0,54,40,59,47,62,63,59,52],
[61,41,41,55,49,52,47,0,38,42,55,55,50,52,40],
[67,51,55,67,68,57,61,63,0,67,65,67,70,52,49],
[42,33,43,42,43,30,42,59,34,0,45,44,39,48,35],
[55,47,51,61,57,45,54,46,36,56,0,54,52,49,40],
[54,47,49,59,46,43,39,46,34,57,47,0,56,40,43],
[54,40,47,48,47,45,38,51,31,62,49,45,0,41,41],
[59,40,49,44,51,54,42,49,49,53,52,61,60,0,40],
[55,55,43,51,60,56,49,61,52,66,61,58,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 39, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,25,23,40,37,16,19,30,52,29,43,52,15,54],
[66,0,51,74,57,55,57,66,49,69,46,49,42,67,81],
[76,50,0,50,72,53,27,47,54,48,60,69,79,59,63],
[78,27,51,0,41,55,41,41,38,66,25,56,42,43,66],
[61,44,29,60,0,54,36,29,39,54,36,44,53,39,54],
[64,46,48,46,47,0,29,40,60,57,54,64,61,50,75],
[85,44,74,60,65,72,0,67,45,92,54,70,70,77,78],
[82,35,54,60,72,61,34,0,46,80,33,64,52,39,74],
[71,52,47,63,62,41,56,55,0,62,21,39,62,62,70],
[49,32,53,35,47,44,9,21,39,0,36,53,55,27,60],
[72,55,41,76,65,47,47,68,80,65,0,68,67,65,75],
[58,52,32,45,57,37,31,37,62,48,33,0,40,44,67],
[49,59,22,59,48,40,31,49,39,46,34,61,0,46,67],
[86,34,42,58,62,51,24,62,39,74,36,57,55,0,75],
[47,20,38,35,47,26,23,27,31,41,26,34,34,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 40, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,48,52,50,56,52,58,49,54,49,54,54,53,48],
[49,0,49,50,48,54,51,60,48,53,51,59,60,56,53],
[53,52,0,50,54,52,49,57,52,54,54,59,59,57,51],
[49,51,51,0,60,58,47,56,52,53,49,55,61,57,46],
[51,53,47,41,0,49,51,53,48,49,52,56,57,52,51],
[45,47,49,43,52,0,50,55,43,43,45,50,54,48,45],
[49,50,52,54,50,51,0,52,42,49,52,56,58,55,52],
[43,41,44,45,48,46,49,0,44,50,44,51,60,51,42],
[52,53,49,49,53,58,59,57,0,59,53,52,58,53,49],
[47,48,47,48,52,58,52,51,42,0,45,54,55,47,49],
[52,50,47,52,49,56,49,57,48,56,0,53,52,56,47],
[47,42,42,46,45,51,45,50,49,47,48,0,54,50,40],
[47,41,42,40,44,47,43,41,43,46,49,47,0,47,44],
[48,45,44,44,49,53,46,50,48,54,45,51,54,0,45],
[53,48,50,55,50,56,49,59,52,52,54,61,57,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 41, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,41,62,45,43,52,68,66,74,52,60,50,62,69],
[33,0,50,46,60,35,67,60,50,50,66,69,36,44,71],
[60,51,0,39,54,43,53,79,36,74,72,72,50,54,75],
[39,55,62,0,47,35,66,56,43,47,59,48,39,49,57],
[56,41,47,54,0,35,38,68,35,64,69,62,34,45,65],
[58,66,58,66,66,0,65,66,42,83,62,83,54,56,75],
[49,34,48,35,63,36,0,72,25,49,54,60,23,41,60],
[33,41,22,45,33,35,29,0,29,64,45,37,23,37,32],
[35,51,65,58,66,59,76,72,0,74,53,68,56,51,75],
[27,51,27,54,37,18,52,37,27,0,35,60,50,37,61],
[49,35,29,42,32,39,47,56,48,66,0,63,38,49,49],
[41,32,29,53,39,18,41,64,33,41,38,0,30,24,32],
[51,65,51,62,67,47,78,78,45,51,63,71,0,53,74],
[39,57,47,52,56,45,60,64,50,64,52,77,48,0,57],
[32,30,26,44,36,26,41,69,26,40,52,69,27,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 42, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,44,39,35,52,38,39,40,37,48,46,44,43,44],
[72,0,59,53,63,64,57,49,59,55,61,65,67,49,63],
[57,42,0,45,55,56,53,45,46,29,61,56,49,45,44],
[62,48,56,0,63,54,58,62,61,51,67,66,45,50,59],
[66,38,46,38,0,54,54,57,52,48,56,55,51,61,36],
[49,37,45,47,47,0,39,41,34,52,55,44,40,45,46],
[63,44,48,43,47,62,0,54,53,47,56,48,43,50,53],
[62,52,56,39,44,60,47,0,52,46,73,54,56,55,52],
[61,42,55,40,49,67,48,49,0,52,66,52,43,56,53],
[64,46,72,50,53,49,54,55,49,0,60,57,53,57,55],
[53,40,40,34,45,46,45,28,35,41,0,42,32,39,34],
[55,36,45,35,46,57,53,47,49,44,59,0,53,53,47],
[57,34,52,56,50,61,58,45,58,48,69,48,0,41,47],
[58,52,56,51,40,56,51,46,45,44,62,48,60,0,39],
[57,38,57,42,65,55,48,49,48,46,67,54,54,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 43, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,58,48,53,56,61,54,59,43,48,49,52,62,59],
[46,0,48,47,54,54,51,52,54,47,46,50,49,53,50],
[43,53,0,46,45,46,44,49,48,46,36,40,46,49,42],
[53,54,55,0,53,61,59,54,55,50,48,54,54,53,57],
[48,47,56,48,0,51,50,54,52,40,46,49,50,49,51],
[45,47,55,40,50,0,46,52,56,46,47,41,48,47,48],
[40,50,57,42,51,55,0,56,55,45,46,38,51,53,55],
[47,49,52,47,47,49,45,0,52,44,45,43,50,50,44],
[42,47,53,46,49,45,46,49,0,45,45,40,47,48,46],
[58,54,55,51,61,55,56,57,56,0,53,48,55,61,54],
[53,55,65,53,55,54,55,56,56,48,0,46,57,61,57],
[52,51,61,47,52,60,63,58,61,53,55,0,61,58,62],
[49,52,55,47,51,53,50,51,54,46,44,40,0,51,52],
[39,48,52,48,52,54,48,51,53,40,40,43,50,0,46],
[42,51,59,44,50,53,46,57,55,47,44,39,49,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 44, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,55,45,41,47,40,42,50,45,60,46,34,51,48],
[58,0,48,50,54,51,55,35,57,50,48,37,48,45,58],
[46,53,0,50,48,57,40,44,44,38,38,47,40,52,50],
[56,51,51,0,53,48,41,50,51,49,50,39,41,47,61],
[60,47,53,48,0,50,45,41,55,55,53,41,47,45,50],
[54,50,44,53,51,0,43,49,67,45,50,49,53,49,49],
[61,46,61,60,56,58,0,56,59,49,61,50,46,61,65],
[59,66,57,51,60,52,45,0,44,59,48,50,53,43,55],
[51,44,57,50,46,34,42,57,0,45,39,39,38,51,45],
[56,51,63,52,46,56,52,42,56,0,53,50,54,52,46],
[41,53,63,51,48,51,40,53,62,48,0,57,46,52,53],
[55,64,54,62,60,52,51,51,62,51,44,0,52,64,55],
[67,53,61,60,54,48,55,48,63,47,55,49,0,50,64],
[50,56,49,54,56,52,40,58,50,49,49,37,51,0,51],
[53,43,51,40,51,52,36,46,56,55,48,46,37,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 45, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,63,56,45,55,50,53,53,58,50,48,42,47,56],
[56,0,66,58,55,61,66,59,57,66,56,51,48,52,57],
[38,35,0,45,43,44,41,42,40,54,36,39,33,38,43],
[45,43,56,0,46,61,53,54,53,62,48,48,48,47,57],
[56,46,58,55,0,54,53,48,45,59,45,47,41,45,48],
[46,40,57,40,47,0,45,50,47,55,47,41,45,44,54],
[51,35,60,48,48,56,0,43,42,57,44,38,31,36,47],
[48,42,59,47,53,51,58,0,52,61,56,45,47,40,49],
[48,44,61,48,56,54,59,49,0,61,51,37,46,49,57],
[43,35,47,39,42,46,44,40,40,0,38,36,35,27,48],
[51,45,65,53,56,54,57,45,50,63,0,44,51,50,53],
[53,50,62,53,54,60,63,56,64,65,57,0,49,50,53],
[59,53,68,53,60,56,70,54,55,66,50,52,0,50,58],
[54,49,63,54,56,57,65,61,52,74,51,51,51,0,60],
[45,44,58,44,53,47,54,52,44,53,48,48,43,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 46, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,47,43,54,55,48,47,55,55,60,56,44,50,53],
[42,0,41,40,51,53,42,41,49,48,52,44,40,48,41],
[54,60,0,50,54,54,53,48,49,59,59,50,42,57,56],
[58,61,51,0,61,53,49,54,49,52,53,52,50,58,55],
[47,50,47,40,0,50,42,46,53,49,55,46,37,50,50],
[46,48,47,48,51,0,47,47,48,55,52,42,41,53,49],
[53,59,48,52,59,54,0,58,53,57,57,49,51,51,59],
[54,60,53,47,55,54,43,0,47,49,54,50,44,50,51],
[46,52,52,52,48,53,48,54,0,53,53,46,45,54,48],
[46,53,42,49,52,46,44,52,48,0,50,50,47,48,49],
[41,49,42,48,46,49,44,47,48,51,0,43,46,46,50],
[45,57,51,49,55,59,52,51,55,51,58,0,50,43,46],
[57,61,59,51,64,60,50,57,56,54,55,51,0,51,53],
[51,53,44,43,51,48,50,51,47,53,55,58,50,0,49],
[48,60,45,46,51,52,42,50,53,52,51,55,48,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 47, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,47,43,40,49,44,60,60,57,42,59,49,67,67],
[56,0,52,63,52,58,50,45,64,73,54,69,46,55,45],
[54,49,0,49,37,55,56,62,52,61,31,61,42,73,64],
[58,38,52,0,40,65,50,55,56,65,42,69,41,67,41],
[61,49,64,61,0,56,61,49,66,70,44,65,61,64,70],
[52,43,46,36,45,0,30,60,61,53,33,66,46,53,61],
[57,51,45,51,40,71,0,52,50,55,40,69,36,49,49],
[41,56,39,46,52,41,49,0,55,59,51,65,44,59,54],
[41,37,49,45,35,40,51,46,0,71,45,55,47,41,49],
[44,28,40,36,31,48,46,42,30,0,26,34,30,47,38],
[59,47,70,59,57,68,61,50,56,75,0,64,42,61,55],
[42,32,40,32,36,35,32,36,46,67,37,0,33,55,37],
[52,55,59,60,40,55,65,57,54,71,59,68,0,57,41],
[34,46,28,34,37,48,52,42,60,54,40,46,44,0,49],
[34,56,37,60,31,40,52,47,52,63,46,64,60,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 48, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,50,51,53,53,52,47,59,43,49,54,53,44,46],
[46,0,42,48,47,49,50,39,61,33,38,47,46,55,45],
[51,59,0,63,54,61,55,58,67,50,59,61,55,45,54],
[50,53,38,0,56,53,62,40,60,44,52,47,48,50,48],
[48,54,47,45,0,51,57,49,63,44,50,51,49,47,57],
[48,52,40,48,50,0,50,49,54,46,47,45,41,54,57],
[49,51,46,39,44,51,0,35,55,42,56,53,46,43,51],
[54,62,43,61,52,52,66,0,58,39,48,48,46,53,54],
[42,40,34,41,38,47,46,43,0,32,40,40,35,48,44],
[58,68,51,57,57,55,59,62,69,0,67,60,49,56,53],
[52,63,42,49,51,54,45,53,61,34,0,49,48,51,53],
[47,54,40,54,50,56,48,53,61,41,52,0,48,45,57],
[48,55,46,53,52,60,55,55,66,52,53,53,0,49,54],
[57,46,56,51,54,47,58,48,53,45,50,56,52,0,55],
[55,56,47,53,44,44,50,47,57,48,48,44,47,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 49, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,47,45,56,45,44,54,41,46,47,33,49,37,51],
[46,0,40,42,49,44,48,48,42,35,44,34,49,41,41],
[54,61,0,48,62,44,47,45,45,52,50,54,42,44,53],
[56,59,53,0,58,50,46,58,50,45,50,56,58,48,56],
[45,52,39,43,0,50,45,57,44,43,42,46,43,40,43],
[56,57,57,51,51,0,44,54,51,51,61,56,52,50,51],
[57,53,54,55,56,57,0,64,48,51,61,49,64,50,58],
[47,53,56,43,44,47,37,0,48,47,53,51,47,39,51],
[60,59,56,51,57,50,53,53,0,47,56,53,49,49,57],
[55,66,49,56,58,50,50,54,54,0,63,51,50,51,57],
[54,57,51,51,59,40,40,48,45,38,0,35,51,42,39],
[68,67,47,45,55,45,52,50,48,50,66,0,53,46,63],
[52,52,59,43,58,49,37,54,52,51,50,48,0,49,59],
[64,60,57,53,61,51,51,62,52,50,59,55,52,0,55],
[50,60,48,45,58,50,43,50,44,44,62,38,42,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 50, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,41,47,52,61,70,85,60,57,56,64,70,52,73],
[33,0,64,21,68,66,75,85,47,53,50,53,47,58,68],
[60,37,0,33,42,60,59,70,59,47,21,39,54,43,58],
[54,80,68,0,64,71,76,64,59,58,68,62,77,37,78],
[49,33,59,37,0,66,76,70,63,47,31,62,48,29,58],
[40,35,41,30,35,0,31,64,31,42,39,35,35,35,50],
[31,26,42,25,25,70,0,39,41,57,40,33,37,38,41],
[16,16,31,37,31,37,62,0,51,45,31,37,15,42,37],
[41,54,42,42,38,70,60,50,0,72,42,38,51,38,54],
[44,48,54,43,54,59,44,56,29,0,58,54,69,42,54],
[45,51,80,33,70,62,61,70,59,43,0,47,54,53,70],
[37,48,62,39,39,66,68,64,63,47,54,0,36,50,64],
[31,54,47,24,53,66,64,86,50,32,47,65,0,53,74],
[49,43,58,64,72,66,63,59,63,59,48,51,48,0,59],
[28,33,43,23,43,51,60,64,47,47,31,37,27,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 51, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,35,47,38,48,35,25,33,39,44,47,47,38,50],
[61,0,63,57,47,71,59,41,56,54,50,51,69,66,53],
[66,38,0,49,52,67,67,46,59,60,45,50,79,70,57],
[54,44,52,0,35,52,49,27,51,53,58,56,61,62,55],
[63,54,49,66,0,60,54,55,52,57,55,67,67,63,62],
[53,30,34,49,41,0,41,33,50,41,38,46,60,60,50],
[66,42,34,52,47,60,0,34,45,48,43,41,51,37,50],
[76,60,55,74,46,68,67,0,62,61,64,57,67,67,62],
[68,45,42,50,49,51,56,39,0,48,42,53,59,49,46],
[62,47,41,48,44,60,53,40,53,0,38,43,68,63,44],
[57,51,56,43,46,63,58,37,59,63,0,60,70,59,51],
[54,50,51,45,34,55,60,44,48,58,41,0,62,60,55],
[54,32,22,40,34,41,50,34,42,33,31,39,0,47,46],
[63,35,31,39,38,41,64,34,52,38,42,41,54,0,47],
[51,48,44,46,39,51,51,39,55,57,50,46,55,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 52, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,58,55,49,51,55,53,47,53,51,43,55,65,53],
[43,0,47,46,54,53,44,43,43,46,49,44,52,54,47],
[43,54,0,40,49,53,42,42,45,43,53,39,41,59,42],
[46,55,61,0,59,54,45,46,52,54,56,47,58,54,49],
[52,47,52,42,0,55,37,44,37,45,51,41,52,54,46],
[50,48,48,47,46,0,41,41,43,44,50,48,54,58,41],
[46,57,59,56,64,60,0,51,50,47,54,50,53,61,54],
[48,58,59,55,57,60,50,0,49,43,56,44,56,60,46],
[54,58,56,49,64,58,51,52,0,53,57,50,64,64,50],
[48,55,58,47,56,57,54,58,48,0,59,53,58,59,64],
[50,52,48,45,50,51,47,45,44,42,0,40,49,47,45],
[58,57,62,54,60,53,51,57,51,48,61,0,55,57,56],
[46,49,60,43,49,47,48,45,37,43,52,46,0,57,45],
[36,47,42,47,47,43,40,41,37,42,54,44,44,0,43],
[48,54,59,52,55,60,47,55,51,37,56,45,56,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 53, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,44,49,48,48,42,44,48,49,52,52,44,40,46],
[58,0,57,64,49,50,44,48,57,62,39,43,42,48,50],
[57,44,0,51,54,52,52,54,58,53,38,59,50,50,40],
[52,37,50,0,55,40,40,54,47,57,34,49,50,49,42],
[53,52,47,46,0,35,45,45,53,48,46,57,45,52,40],
[53,51,49,61,66,0,41,60,57,63,54,52,52,43,48],
[59,57,49,61,56,60,0,62,62,69,56,59,47,55,55],
[57,53,47,47,56,41,39,0,42,50,44,50,41,39,36],
[53,44,43,54,48,44,39,59,0,55,46,53,34,47,48],
[52,39,48,44,53,38,32,51,46,0,36,46,38,33,35],
[49,62,63,67,55,47,45,57,55,65,0,54,46,56,52],
[49,58,42,52,44,49,42,51,48,55,47,0,45,48,41],
[57,59,51,51,56,49,54,60,67,63,55,56,0,60,49],
[61,53,51,52,49,58,46,62,54,68,45,53,41,0,52],
[55,51,61,59,61,53,46,65,53,66,49,60,52,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 54, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,44,49,61,47,55,54,49,52,53,40,47,58,54],
[50,0,43,47,54,44,51,44,43,53,43,42,47,53,53],
[57,58,0,52,54,42,56,55,55,54,52,51,51,56,59],
[52,54,49,0,60,53,58,58,61,53,51,47,55,58,54],
[40,47,47,41,0,36,48,49,46,46,47,40,43,46,50],
[54,57,59,48,65,0,56,54,54,59,53,47,46,61,62],
[46,50,45,43,53,45,0,56,57,54,50,48,48,44,59],
[47,57,46,43,52,47,45,0,53,47,44,45,49,43,56],
[52,58,46,40,55,47,44,48,0,57,45,40,45,48,49],
[49,48,47,48,55,42,47,54,44,0,41,46,44,55,55],
[48,58,49,50,54,48,51,57,56,60,0,46,56,53,55],
[61,59,50,54,61,54,53,56,61,55,55,0,57,60,57],
[54,54,50,46,58,55,53,52,56,57,45,44,0,53,55],
[43,48,45,43,55,40,57,58,53,46,48,41,48,0,56],
[47,48,42,47,51,39,42,45,52,46,46,44,46,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 55, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,44,50,58,50,56,62,53,58,52,46,43,45,68],
[46,0,34,39,70,41,34,39,44,49,45,39,40,43,58],
[57,67,0,47,63,49,61,56,60,61,61,52,40,60,68],
[51,62,54,0,66,39,46,51,52,54,56,47,33,57,55],
[43,31,38,35,0,33,23,24,37,35,42,18,33,41,42],
[51,60,52,62,68,0,50,59,65,57,63,48,50,54,70],
[45,67,40,55,78,51,0,54,53,67,63,46,43,45,73],
[39,62,45,50,77,42,47,0,48,52,57,43,36,49,55],
[48,57,41,49,64,36,48,53,0,55,49,42,39,47,66],
[43,52,40,47,66,44,34,49,46,0,49,39,48,56,60],
[49,56,40,45,59,38,38,44,52,52,0,32,34,38,51],
[55,62,49,54,83,53,55,58,59,62,69,0,57,61,69],
[58,61,61,68,68,51,58,65,62,53,67,44,0,53,65],
[56,58,41,44,60,47,56,52,54,45,63,40,48,0,62],
[33,43,33,46,59,31,28,46,35,41,50,32,36,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 56, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,44,18,53,25,32,40,10,33,61,55,32,64,52],
[73,0,64,41,71,62,62,44,56,47,81,60,59,83,59],
[57,37,0,48,64,57,63,24,35,57,64,48,59,48,49],
[83,60,53,0,79,48,59,53,37,68,74,74,45,81,60],
[48,30,37,22,0,27,32,29,38,45,48,27,38,58,44],
[76,39,44,53,74,0,42,47,41,63,61,36,47,59,50],
[69,39,38,42,69,59,0,35,33,43,68,49,51,60,49],
[61,57,77,48,72,54,66,0,49,50,76,80,61,82,70],
[91,45,66,64,63,60,68,52,0,60,69,66,50,72,69],
[68,54,44,33,56,38,58,51,41,0,67,67,43,78,57],
[40,20,37,27,53,40,33,25,32,34,0,34,39,61,40],
[46,41,53,27,74,65,52,21,35,34,67,0,57,80,51],
[69,42,42,56,63,54,50,40,51,58,62,44,0,64,66],
[37,18,53,20,43,42,41,19,29,23,40,21,37,0,23],
[49,42,52,41,57,51,52,31,32,44,61,50,35,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 57, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,50,55,46,41,47,43,45,54,48,44,42,45,51],
[44,0,55,53,50,50,38,43,51,54,49,43,44,50,48],
[51,46,0,43,49,43,43,41,48,58,52,52,39,39,47],
[46,48,58,0,50,47,49,42,66,58,54,60,58,59,53],
[55,51,52,51,0,52,44,52,48,46,54,59,49,59,37],
[60,51,58,54,49,0,49,50,54,55,60,59,51,57,53],
[54,63,58,52,57,52,0,50,55,52,47,52,57,52,61],
[58,58,60,59,49,51,51,0,55,54,57,49,58,54,51],
[56,50,53,35,53,47,46,46,0,49,51,45,46,51,44],
[47,47,43,43,55,46,49,47,52,0,51,51,47,51,43],
[53,52,49,47,47,41,54,44,50,50,0,55,35,41,51],
[57,58,49,41,42,42,49,52,56,50,46,0,51,51,36],
[59,57,62,43,52,50,44,43,55,54,66,50,0,57,52],
[56,51,62,42,42,44,49,47,50,50,60,50,44,0,46],
[50,53,54,48,64,48,40,50,57,58,50,65,49,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 58, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,54,53,58,53,45,56,57,57,57,49,50,54,60],
[58,0,57,50,63,66,52,55,69,58,52,51,59,60,67],
[47,44,0,48,40,54,41,49,51,47,51,47,51,46,51],
[48,51,53,0,52,55,45,51,53,46,54,52,50,55,57],
[43,38,61,49,0,60,52,53,56,53,51,51,50,53,53],
[48,35,47,46,41,0,43,46,61,47,36,40,46,45,45],
[56,49,60,56,49,58,0,59,59,56,63,57,57,62,53],
[45,46,52,50,48,55,42,0,57,53,49,40,40,52,42],
[44,32,50,48,45,40,42,44,0,44,41,49,43,38,53],
[44,43,54,55,48,54,45,48,57,0,53,47,49,51,54],
[44,49,50,47,50,65,38,52,60,48,0,46,44,55,49],
[52,50,54,49,50,61,44,61,52,54,55,0,56,58,53],
[51,42,50,51,51,55,44,61,58,52,57,45,0,50,50],
[47,41,55,46,48,56,39,49,63,50,46,43,51,0,52],
[41,34,50,44,48,56,48,59,48,47,52,48,51,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 59, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,68,76,58,56,55,66,40,55,52,69,48,52,60],
[49,0,56,65,50,59,60,57,37,50,49,59,44,48,59],
[33,45,0,49,40,46,52,47,37,37,47,63,38,36,45],
[25,36,52,0,41,42,49,38,41,38,37,62,43,38,36],
[43,51,61,60,0,63,59,57,40,41,48,53,41,49,60],
[45,42,55,59,38,0,46,45,42,42,52,60,48,44,49],
[46,41,49,52,42,55,0,49,42,53,46,63,47,43,45],
[35,44,54,63,44,56,52,0,42,44,46,59,45,42,43],
[61,64,64,60,61,59,59,59,0,64,67,72,48,51,63],
[46,51,64,63,60,59,48,57,37,0,47,58,46,47,54],
[49,52,54,64,53,49,55,55,34,54,0,68,53,51,48],
[32,42,38,39,48,41,38,42,29,43,33,0,35,37,38],
[53,57,63,58,60,53,54,56,53,55,48,66,0,49,53],
[49,53,65,63,52,57,58,59,50,54,50,64,52,0,47],
[41,42,56,65,41,52,56,58,38,47,53,63,48,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 60, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,55,58,54,49,52,57,53,48,57,52,54,51,44],
[47,0,63,55,45,49,45,55,52,55,59,57,60,47,45],
[46,38,0,49,43,46,41,52,50,49,47,43,46,46,48],
[43,46,52,0,44,44,34,57,46,47,50,41,47,42,41],
[47,56,58,57,0,55,42,59,55,51,54,47,58,44,46],
[52,52,55,57,46,0,49,62,45,53,50,51,60,45,49],
[49,56,60,67,59,52,0,62,58,59,56,52,52,54,48],
[44,46,49,44,42,39,39,0,44,46,42,42,40,35,43],
[48,49,51,55,46,56,43,57,0,53,48,45,48,44,43],
[53,46,52,54,50,48,42,55,48,0,57,54,50,45,45],
[44,42,54,51,47,51,45,59,53,44,0,44,53,43,47],
[49,44,58,60,54,50,49,59,56,47,57,0,55,49,57],
[47,41,55,54,43,41,49,61,53,51,48,46,0,48,49],
[50,54,55,59,57,56,47,66,57,56,58,52,53,0,53],
[57,56,53,60,55,52,53,58,58,56,54,44,52,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 61, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,55,49,51,57,54,59,59,69,71,65,62,52,60],
[31,0,49,49,42,57,45,49,48,58,43,55,41,42,42],
[46,52,0,47,51,51,43,56,47,58,57,58,51,43,50],
[52,52,54,0,49,55,52,58,57,61,57,59,62,51,55],
[50,59,50,52,0,57,52,64,56,59,59,57,39,50,46],
[44,44,50,46,44,0,45,49,46,53,41,40,39,37,38],
[47,56,58,49,49,56,0,61,53,56,55,58,45,37,48],
[42,52,45,43,37,52,40,0,54,57,47,48,43,38,50],
[42,53,54,44,45,55,48,47,0,56,56,47,51,46,55],
[32,43,43,40,42,48,45,44,45,0,43,48,41,34,50],
[30,58,44,44,42,60,46,54,45,58,0,51,40,47,48],
[36,46,43,42,44,61,43,53,54,53,50,0,43,40,42],
[39,60,50,39,62,62,56,58,50,60,61,58,0,57,52],
[49,59,58,50,51,64,64,63,55,67,54,61,44,0,53],
[41,59,51,46,55,63,53,51,46,51,53,59,49,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 62, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,45,64,63,58,42,70,53,53,40,51,64,76,64],
[13,0,0,24,28,26,27,29,23,20,26,28,27,35,36],
[56,101,0,67,80,78,59,59,74,44,45,76,68,88,77],
[37,77,34,0,52,48,43,59,62,62,29,64,65,59,61],
[38,73,21,49,0,59,52,49,56,53,54,67,55,59,76],
[43,75,23,53,42,0,58,52,64,19,32,70,67,54,52],
[59,74,42,58,49,43,0,44,74,62,49,72,63,55,64],
[31,72,42,42,52,49,57,0,49,41,53,64,42,52,63],
[48,78,27,39,45,37,27,52,0,42,19,30,45,70,69],
[48,81,57,39,48,82,39,60,59,0,23,70,60,57,49],
[61,75,56,72,47,69,52,48,82,78,0,81,54,82,65],
[50,73,25,37,34,31,29,37,71,31,20,0,63,59,64],
[37,74,33,36,46,34,38,59,56,41,47,38,0,59,64],
[25,66,13,42,42,47,46,49,31,44,19,42,42,0,55],
[37,65,24,40,25,49,37,38,32,52,36,37,37,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 63, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,48,67,62,60,61,53,60,48,51,54,64,57,72],
[36,0,30,52,49,45,47,34,45,36,43,36,39,30,52],
[53,71,0,62,65,57,61,45,65,55,47,59,57,54,66],
[34,49,39,0,54,51,42,33,45,34,42,49,45,45,41],
[39,52,36,47,0,36,54,39,47,41,44,39,44,44,50],
[41,56,44,50,65,0,44,39,47,42,35,44,48,54,44],
[40,54,40,59,47,57,0,34,51,36,42,46,40,48,63],
[48,67,56,68,62,62,67,0,61,55,57,53,59,57,72],
[41,56,36,56,54,54,50,40,0,50,41,48,43,52,55],
[53,65,46,67,60,59,65,46,51,0,53,55,58,61,58],
[50,58,54,59,57,66,59,44,60,48,0,58,60,47,60],
[47,65,42,52,62,57,55,48,53,46,43,0,52,55,59],
[37,62,44,56,57,53,61,42,58,43,41,49,0,57,50],
[44,71,47,56,57,47,53,44,49,40,54,46,44,0,50],
[29,49,35,60,51,57,38,29,46,43,41,42,51,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 64, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,57,52,51,46,50,54,43,50,49,53,54,53,60],
[43,0,57,39,52,40,47,48,42,40,44,60,51,51,58],
[44,44,0,38,51,37,36,49,46,45,35,54,61,56,49],
[49,62,63,0,58,50,44,58,57,55,46,59,65,52,65],
[50,49,50,43,0,35,41,46,48,49,41,61,52,52,52],
[55,61,64,51,66,0,49,55,58,61,58,73,60,61,63],
[51,54,65,57,60,52,0,59,49,48,58,61,61,61,61],
[47,53,52,43,55,46,42,0,50,49,43,59,48,50,53],
[58,59,55,44,53,43,52,51,0,55,45,67,53,55,49],
[51,61,56,46,52,40,53,52,46,0,50,60,60,53,56],
[52,57,66,55,60,43,43,58,56,51,0,56,62,52,59],
[48,41,47,42,40,28,40,42,34,41,45,0,53,42,44],
[47,50,40,36,49,41,40,53,48,41,39,48,0,50,52],
[48,50,45,49,49,40,40,51,46,48,49,59,51,0,55],
[41,43,52,36,49,38,40,48,52,45,42,57,49,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 65, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,53,54,59,57,66,69,54,64,55,47,74,63,59],
[36,0,35,45,39,42,55,47,45,55,48,34,54,40,42],
[48,66,0,55,54,56,49,57,47,54,58,51,55,50,55],
[47,56,46,0,55,47,57,50,54,60,52,42,54,50,46],
[42,62,47,46,0,43,57,53,41,57,50,44,56,51,48],
[44,59,45,54,58,0,53,54,45,50,62,43,63,46,65],
[35,46,52,44,44,48,0,50,40,57,49,33,61,52,59],
[32,54,44,51,48,47,51,0,48,47,47,43,53,55,43],
[47,56,54,47,60,56,61,53,0,59,49,42,68,53,58],
[37,46,47,41,44,51,44,54,42,0,49,33,56,41,50],
[46,53,43,49,51,39,52,54,52,52,0,40,63,50,60],
[54,67,50,59,57,58,68,58,59,68,61,0,60,50,55],
[27,47,46,47,45,38,40,48,33,45,38,41,0,44,46],
[38,61,51,51,50,55,49,46,48,60,51,51,57,0,54],
[42,59,46,55,53,36,42,58,43,51,41,46,55,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 66, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,55,36,28,54,37,39,39,45,47,64,49,42,39],
[72,0,61,61,55,75,52,51,50,68,71,70,53,60,47],
[46,40,0,63,43,33,26,32,43,58,65,57,43,44,21],
[65,40,38,0,46,48,35,47,49,62,66,61,62,52,50],
[73,46,58,55,0,59,44,50,50,71,66,58,61,56,42],
[47,26,68,53,42,0,33,51,49,45,44,58,50,43,27],
[64,49,75,66,57,68,0,54,57,62,60,59,54,42,35],
[62,50,69,54,51,50,47,0,49,55,59,74,62,59,36],
[62,51,58,52,51,52,44,52,0,65,61,50,45,46,53],
[56,33,43,39,30,56,39,46,36,0,51,44,59,42,40],
[54,30,36,35,35,57,41,42,40,50,0,48,45,35,36],
[37,31,44,40,43,43,42,27,51,57,53,0,38,34,24],
[52,48,58,39,40,51,47,39,56,42,56,63,0,39,36],
[59,41,57,49,45,58,59,42,55,59,66,67,62,0,36],
[62,54,80,51,59,74,66,65,48,61,65,77,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 67, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,52,52,56,56,51,57,47,55,43,48,54,48,53],
[52,0,47,48,50,51,47,50,46,49,49,38,52,50,50],
[49,54,0,52,57,55,45,54,43,47,55,42,54,51,52],
[49,53,49,0,55,51,48,51,48,49,50,50,54,48,55],
[45,51,44,46,0,52,49,42,46,55,46,42,47,49,53],
[45,50,46,50,49,0,42,51,43,51,43,40,47,45,52],
[50,54,56,53,52,59,0,54,48,55,51,50,56,52,55],
[44,51,47,50,59,50,47,0,45,53,49,44,54,49,52],
[54,55,58,53,55,58,53,56,0,60,48,47,55,57,53],
[46,52,54,52,46,50,46,48,41,0,42,39,52,45,53],
[58,52,46,51,55,58,50,52,53,59,0,51,53,53,58],
[53,63,59,51,59,61,51,57,54,62,50,0,59,56,60],
[47,49,47,47,54,54,45,47,46,49,48,42,0,49,45],
[53,51,50,53,52,56,49,52,44,56,48,45,52,0,56],
[48,51,49,46,48,49,46,49,48,48,43,41,56,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 68, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,58,48,61,53,51,62,49,57,47,60,61,46,55],
[43,0,40,29,48,32,39,52,32,43,35,38,34,41,33],
[43,61,0,51,57,40,48,58,41,57,50,60,57,44,47],
[53,72,50,0,64,53,57,67,45,47,54,48,55,47,45],
[40,53,44,37,0,47,56,69,47,58,53,48,47,40,48],
[48,69,61,48,54,0,47,72,51,55,49,58,52,50,43],
[50,62,53,44,45,54,0,64,40,46,42,51,56,40,51],
[39,49,43,34,32,29,37,0,33,46,29,37,42,28,40],
[52,69,60,56,54,50,61,68,0,64,42,59,56,45,57],
[44,58,44,54,43,46,55,55,37,0,48,57,53,44,48],
[54,66,51,47,48,52,59,72,59,53,0,53,62,54,53],
[41,63,41,53,53,43,50,64,42,44,48,0,45,41,57],
[40,67,44,46,54,49,45,59,45,48,39,56,0,39,43],
[55,60,57,54,61,51,61,73,56,57,47,60,62,0,52],
[46,68,54,56,53,58,50,61,44,53,48,44,58,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 69, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,46,46,62,41,49,40,49,48,61,58,54,55,42],
[61,0,54,44,52,50,60,48,44,58,57,51,50,50,57],
[55,47,0,46,47,58,59,41,49,47,56,63,50,60,60],
[55,57,55,0,52,60,68,59,41,55,61,50,60,59,62],
[39,49,54,49,0,44,66,45,49,57,52,47,64,62,50],
[60,51,43,41,57,0,72,46,46,44,60,58,51,53,65],
[52,41,42,33,35,29,0,44,43,42,43,45,40,43,47],
[61,53,60,42,56,55,57,0,46,51,64,57,55,59,64],
[52,57,52,60,52,55,58,55,0,56,61,65,50,61,54],
[53,43,54,46,44,57,59,50,45,0,50,49,60,63,53],
[40,44,45,40,49,41,58,37,40,51,0,43,56,56,43],
[43,50,38,51,54,43,56,44,36,52,58,0,55,49,55],
[47,51,51,41,37,50,61,46,51,41,45,46,0,43,57],
[46,51,41,42,39,48,58,42,40,38,45,52,58,0,51],
[59,44,41,39,51,36,54,37,47,48,58,46,44,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 70, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,52,57,40,53,46,44,47,45,51,48,51,51,47],
[39,0,35,32,33,37,39,34,35,29,35,44,38,40,30],
[49,66,0,48,39,51,43,40,51,40,56,42,45,47,34],
[44,69,53,0,45,59,39,47,43,46,51,37,44,52,43],
[61,68,62,56,0,59,55,61,49,64,62,57,59,59,51],
[48,64,50,42,42,0,47,40,49,48,47,49,46,42,42],
[55,62,58,62,46,54,0,45,50,47,52,56,48,50,49],
[57,67,61,54,40,61,56,0,53,52,60,57,48,47,47],
[54,66,50,58,52,52,51,48,0,46,53,51,55,60,45],
[56,72,61,55,37,53,54,49,55,0,63,58,57,56,45],
[50,66,45,50,39,54,49,41,48,38,0,42,49,46,32],
[53,57,59,64,44,52,45,44,50,43,59,0,50,49,41],
[50,63,56,57,42,55,53,53,46,44,52,51,0,54,43],
[50,61,54,49,42,59,51,54,41,45,55,52,47,0,43],
[54,71,67,58,50,59,52,54,56,56,69,60,58,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 71, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,72,62,47,58,63,65,53,60,66,63,66,51,65],
[51,0,62,57,48,57,54,61,48,56,53,49,56,48,55],
[29,39,0,50,41,51,44,47,46,48,53,46,54,43,53],
[39,44,51,0,28,40,46,57,41,46,47,47,43,39,51],
[54,53,60,73,0,51,60,62,49,61,66,61,61,57,60],
[43,44,50,61,50,0,55,56,54,48,48,58,47,44,62],
[38,47,57,55,41,46,0,51,42,49,44,52,55,50,53],
[36,40,54,44,39,45,50,0,45,54,46,46,51,42,42],
[48,53,55,60,52,47,59,56,0,50,52,51,53,40,52],
[41,45,53,55,40,53,52,47,51,0,51,52,52,41,50],
[35,48,48,54,35,53,57,55,49,50,0,51,45,44,51],
[38,52,55,54,40,43,49,55,50,49,50,0,48,48,51],
[35,45,47,58,40,54,46,50,48,49,56,53,0,34,59],
[50,53,58,62,44,57,51,59,61,60,57,53,67,0,59],
[36,46,48,50,41,39,48,59,49,51,50,50,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 72, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,47,48,45,45,52,55,50,49,54,46,58,56,45],
[43,0,51,51,49,41,54,47,49,39,53,45,60,46,44],
[54,50,0,50,56,48,58,52,49,46,57,55,64,48,46],
[53,50,51,0,53,42,55,52,48,49,54,48,54,56,44],
[56,52,45,48,0,46,54,44,45,43,51,45,58,47,50],
[56,60,53,59,55,0,56,53,51,49,54,46,59,52,48],
[49,47,43,46,47,45,0,46,36,47,44,37,53,48,44],
[46,54,49,49,57,48,55,0,48,41,54,47,53,51,42],
[51,52,52,53,56,50,65,53,0,51,59,55,64,60,54],
[52,62,55,52,58,52,54,60,50,0,61,50,62,53,48],
[47,48,44,47,50,47,57,47,42,40,0,46,59,50,49],
[55,56,46,53,56,55,64,54,46,51,55,0,63,57,60],
[43,41,37,47,43,42,48,48,37,39,42,38,0,46,38],
[45,55,53,45,54,49,53,50,41,48,51,44,55,0,47],
[56,57,55,57,51,53,57,59,47,53,52,41,63,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 73, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,50,51,60,55,52,47,49,57,53,64,50,59,59],
[38,0,46,42,48,53,43,30,45,44,43,59,40,53,46],
[51,55,0,48,55,48,28,38,50,55,54,48,46,57,48],
[50,59,53,0,52,57,47,43,59,68,58,72,57,55,52],
[41,53,46,49,0,53,42,43,49,46,49,62,47,49,49],
[46,48,53,44,48,0,43,42,50,47,62,52,53,49,49],
[49,58,73,54,59,58,0,57,59,60,51,67,57,56,50],
[54,71,63,58,58,59,44,0,59,57,69,63,52,59,56],
[52,56,51,42,52,51,42,42,0,59,61,61,46,56,53],
[44,57,46,33,55,54,41,44,42,0,51,60,47,49,43],
[48,58,47,43,52,39,50,32,40,50,0,50,44,45,39],
[37,42,53,29,39,49,34,38,40,41,51,0,44,53,44],
[51,61,55,44,54,48,44,49,55,54,57,57,0,57,44],
[42,48,44,46,52,52,45,42,45,52,56,48,44,0,46],
[42,55,53,49,52,52,51,45,48,58,62,57,57,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 74, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,52,41,59,36,34,55,64,60,56,55,52,52,47],
[56,0,48,48,50,54,38,55,51,47,48,58,46,50,43],
[49,53,0,53,57,50,35,56,53,62,64,52,56,60,43],
[60,53,48,0,56,45,37,51,52,57,53,64,45,48,56],
[42,51,44,45,0,40,35,51,62,49,50,53,60,59,42],
[65,47,51,56,61,0,50,50,67,59,58,61,64,64,52],
[67,63,66,64,66,51,0,58,67,47,51,48,65,68,58],
[46,46,45,50,50,51,43,0,51,49,43,46,43,46,41],
[37,50,48,49,39,34,34,50,0,42,49,50,41,47,33],
[41,54,39,44,52,42,54,52,59,0,47,51,66,51,45],
[45,53,37,48,51,43,50,58,52,54,0,41,53,46,28],
[46,43,49,37,48,40,53,55,51,50,60,0,52,56,49],
[49,55,45,56,41,37,36,58,60,35,48,49,0,46,41],
[49,51,41,53,42,37,33,55,54,50,55,45,55,0,44],
[54,58,58,45,59,49,43,60,68,56,73,52,60,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 75, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,63,60,54,52,53,56,62,53,44,59,59,64,60],
[48,0,58,60,54,51,54,55,59,59,41,62,54,65,53],
[38,43,0,49,45,49,55,56,57,50,35,47,52,64,60],
[41,41,52,0,27,42,46,45,60,48,38,46,54,59,55],
[47,47,56,74,0,57,63,60,62,64,51,55,57,69,66],
[49,50,52,59,44,0,58,46,58,52,36,50,61,60,60],
[48,47,46,55,38,43,0,45,60,49,39,51,53,62,56],
[45,46,45,56,41,55,56,0,55,52,39,47,52,64,57],
[39,42,44,41,39,43,41,46,0,41,37,47,45,51,47],
[48,42,51,53,37,49,52,49,60,0,44,45,56,60,53],
[57,60,66,63,50,65,62,62,64,57,0,66,57,71,63],
[42,39,54,55,46,51,50,54,54,56,35,0,53,58,58],
[42,47,49,47,44,40,48,49,56,45,44,48,0,58,57],
[37,36,37,42,32,41,39,37,50,41,30,43,43,0,47],
[41,48,41,46,35,41,45,44,54,48,38,43,44,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 76, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,46,46,54,48,50,52,46,42,42,42,46,46,49],
[47,0,54,55,47,51,49,51,51,55,48,46,52,48,52],
[55,47,0,43,45,45,49,47,45,51,43,38,45,49,55],
[55,46,58,0,52,49,42,52,52,52,48,46,45,40,49],
[47,54,56,49,0,40,51,56,55,48,49,40,45,43,47],
[53,50,56,52,61,0,47,49,55,47,48,52,43,52,52],
[51,52,52,59,50,54,0,58,57,56,56,45,55,52,52],
[49,50,54,49,45,52,43,0,48,50,48,43,52,50,52],
[55,50,56,49,46,46,44,53,0,53,51,42,44,46,52],
[59,46,50,49,53,54,45,51,48,0,53,48,49,46,47],
[59,53,58,53,52,53,45,53,50,48,0,49,51,45,54],
[59,55,63,55,61,49,56,58,59,53,52,0,51,52,55],
[55,49,56,56,56,58,46,49,57,52,50,50,0,48,55],
[55,53,52,61,58,49,49,51,55,55,56,49,53,0,59],
[52,49,46,52,54,49,49,49,49,54,47,46,46,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 77, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,41,20,50,36,39,43,63,50,37,44,33,51,37],
[78,0,70,58,50,59,65,48,64,74,64,65,65,69,72],
[60,31,0,47,55,59,51,57,67,62,68,49,46,77,69],
[81,43,54,0,53,60,58,56,64,56,57,56,52,62,64],
[51,51,46,48,0,62,63,53,62,54,66,57,50,57,63],
[65,42,42,41,39,0,50,39,52,59,54,24,55,40,53],
[62,36,50,43,38,51,0,38,59,71,61,54,50,60,44],
[58,53,44,45,48,62,63,0,64,58,53,50,52,63,76],
[38,37,34,37,39,49,42,37,0,57,41,34,41,59,42],
[51,27,39,45,47,42,30,43,44,0,53,45,45,58,59],
[64,37,33,44,35,47,40,48,60,48,0,47,51,64,60],
[57,36,52,45,44,77,47,51,67,56,54,0,46,74,50],
[68,36,55,49,51,46,51,49,60,56,50,55,0,59,58],
[50,32,24,39,44,61,41,38,42,43,37,27,42,0,48],
[64,29,32,37,38,48,57,25,59,42,41,51,43,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 78, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,53,51,49,53,52,46,51,44,49,43,47,41,46],
[48,0,55,49,51,53,49,52,48,48,47,45,48,50,47],
[48,46,0,48,48,48,49,38,49,43,41,38,47,44,42],
[50,52,53,0,51,57,56,57,52,50,47,49,48,48,51],
[52,50,53,50,0,52,54,56,53,49,54,45,49,45,49],
[48,48,53,44,49,0,54,48,50,41,46,49,50,39,49],
[49,52,52,45,47,47,0,47,46,44,48,51,51,46,45],
[55,49,63,44,45,53,54,0,48,46,50,51,47,46,45],
[50,53,52,49,48,51,55,53,0,46,44,50,49,41,47],
[57,53,58,51,52,60,57,55,55,0,52,48,53,51,52],
[52,54,60,54,47,55,53,51,57,49,0,51,45,46,49],
[58,56,63,52,56,52,50,50,51,53,50,0,52,49,48],
[54,53,54,53,52,51,50,54,52,48,56,49,0,45,52],
[60,51,57,53,56,62,55,55,60,50,55,52,56,0,53],
[55,54,59,50,52,52,56,56,54,49,52,53,49,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 79, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,44,50,53,53,48,47,55,54,47,43,47,52,51],
[44,0,44,40,51,54,46,46,55,50,46,40,44,49,52],
[57,57,0,43,56,61,51,57,52,60,56,60,52,57,58],
[51,61,58,0,58,56,54,51,54,56,48,51,49,58,56],
[48,50,45,43,0,54,44,52,49,51,48,48,44,50,52],
[48,47,40,45,47,0,46,52,48,50,44,43,42,49,47],
[53,55,50,47,57,55,0,50,53,50,54,43,45,52,49],
[54,55,44,50,49,49,51,0,54,48,51,46,46,57,47],
[46,46,49,47,52,53,48,47,0,52,44,47,48,46,47],
[47,51,41,45,50,51,51,53,49,0,53,43,49,54,48],
[54,55,45,53,53,57,47,50,57,48,0,40,45,47,54],
[58,61,41,50,53,58,58,55,54,58,61,0,49,54,54],
[54,57,49,52,57,59,56,55,53,52,56,52,0,55,49],
[49,52,44,43,51,52,49,44,55,47,54,47,46,0,48],
[50,49,43,45,49,54,52,54,54,53,47,47,52,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 80, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,44,41,43,44,43,50,24,42,48,47,44,40,45],
[51,0,51,44,46,47,38,46,37,46,47,58,39,50,46],
[57,50,0,55,43,49,45,55,44,50,54,56,52,53,47],
[60,57,46,0,50,49,47,50,48,52,48,56,53,61,53],
[58,55,58,51,0,54,54,60,43,52,62,61,52,58,57],
[57,54,52,52,47,0,50,52,39,45,59,58,53,51,50],
[58,63,56,54,47,51,0,57,47,47,50,58,44,62,56],
[51,55,46,51,41,49,44,0,41,46,49,52,41,51,46],
[77,64,57,53,58,62,54,60,0,57,53,69,56,54,48],
[59,55,51,49,49,56,54,55,44,0,56,53,42,53,53],
[53,54,47,53,39,42,51,52,48,45,0,50,47,43,57],
[54,43,45,45,40,43,43,49,32,48,51,0,44,45,43],
[57,62,49,48,49,48,57,60,45,59,54,57,0,52,48],
[61,51,48,40,43,50,39,50,47,48,58,56,49,0,48],
[56,55,54,48,44,51,45,55,53,48,44,58,53,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 81, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,57,37,42,38,37,50,49,40,49,39,37,26,52],
[45,0,40,34,40,40,44,50,36,17,31,37,37,47,46],
[44,61,0,42,43,36,40,50,46,31,38,45,47,50,52],
[64,67,59,0,37,51,24,52,33,31,63,45,36,35,43],
[59,61,58,64,0,49,41,54,37,35,64,41,31,47,68],
[63,61,65,50,52,0,37,61,37,43,67,44,37,41,60],
[64,57,61,77,60,64,0,69,51,52,71,64,70,35,56],
[51,51,51,49,47,40,32,0,33,29,57,48,55,49,42],
[52,65,55,68,64,64,50,68,0,53,56,60,58,47,50],
[61,84,70,70,66,58,49,72,48,0,71,58,60,51,66],
[52,70,63,38,37,34,30,44,45,30,0,25,45,30,43],
[62,64,56,56,60,57,37,53,41,43,76,0,37,42,60],
[64,64,54,65,70,64,31,46,43,41,56,64,0,46,53],
[75,54,51,66,54,60,66,52,54,50,71,59,55,0,67],
[49,55,49,58,33,41,45,59,51,35,58,41,48,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 82, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,55,79,22,80,24,37,30,16,30,39,62,1,60],
[38,0,54,45,31,60,38,21,44,40,38,54,45,38,60],
[46,47,0,32,28,56,27,20,29,0,14,39,43,22,32],
[22,56,69,0,23,88,22,21,38,1,22,54,37,22,66],
[79,70,73,78,0,79,50,56,37,72,37,72,88,57,79],
[21,41,45,13,22,0,7,20,29,0,8,46,23,22,36],
[77,63,74,79,51,94,0,20,30,23,14,39,46,38,79],
[64,80,81,80,45,81,81,0,39,39,39,80,65,46,86],
[71,57,72,63,64,72,71,62,0,42,27,73,72,72,63],
[85,61,101,100,29,101,78,62,59,0,59,95,85,56,101],
[71,63,87,79,64,93,87,62,74,42,0,87,71,72,93],
[62,47,62,47,29,55,62,21,28,6,14,0,62,43,62],
[39,56,58,64,13,78,55,36,29,16,30,39,0,15,64],
[100,63,79,79,44,79,63,55,29,45,29,58,86,0,79],
[41,41,69,35,22,65,22,15,38,0,8,39,37,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 83, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,50,41,39,43,48,45,46,51,58,49,49,40,50],
[48,0,34,51,36,45,54,65,44,45,46,50,47,49,45],
[51,67,0,60,50,42,54,61,50,56,64,56,49,41,54],
[60,50,41,0,41,43,53,57,39,56,63,46,44,48,51],
[62,65,51,60,0,43,50,68,48,57,65,55,54,50,52],
[58,56,59,58,58,0,54,53,37,63,61,48,57,51,51],
[53,47,47,48,51,47,0,47,46,49,61,55,64,53,44],
[56,36,40,44,33,48,54,0,48,55,60,46,50,43,47],
[55,57,51,62,53,64,55,53,0,61,63,53,64,59,48],
[50,56,45,45,44,38,52,46,40,0,63,43,51,49,43],
[43,55,37,38,36,40,40,41,38,38,0,36,43,44,49],
[52,51,45,55,46,53,46,55,48,58,65,0,57,46,43],
[52,54,52,57,47,44,37,51,37,50,58,44,0,49,48],
[61,52,60,53,51,50,48,58,42,52,57,55,52,0,45],
[51,56,47,50,49,50,57,54,53,58,52,58,53,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 84, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,49,57,36,47,55,57,48,44,59,49,52,48,62],
[58,0,43,56,51,49,57,53,46,48,49,46,51,37,55],
[52,58,0,62,53,56,60,55,57,46,68,49,53,58,61],
[44,45,39,0,44,46,50,48,43,46,52,44,44,51,47],
[65,50,48,57,0,57,54,63,55,40,67,53,51,55,55],
[54,52,45,55,44,0,56,61,55,44,64,43,48,47,56],
[46,44,41,51,47,45,0,57,48,39,54,50,37,38,44],
[44,48,46,53,38,40,44,0,49,45,56,49,44,44,52],
[53,55,44,58,46,46,53,52,0,45,60,45,57,54,54],
[57,53,55,55,61,57,62,56,56,0,66,50,49,55,56],
[42,52,33,49,34,37,47,45,41,35,0,46,47,47,45],
[52,55,52,57,48,58,51,52,56,51,55,0,44,45,52],
[49,50,48,57,50,53,64,57,44,52,54,57,0,44,54],
[53,64,43,50,46,54,63,57,47,46,54,56,57,0,57],
[39,46,40,54,46,45,57,49,47,45,56,49,47,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 85, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,52,55,52,58,59,55,60,57,52,47,58,53,48],
[46,0,52,47,52,51,58,49,54,55,52,48,48,54,46],
[49,49,0,55,56,61,63,55,55,61,60,56,54,58,57],
[46,54,46,0,49,55,57,47,50,52,50,53,52,53,49],
[49,49,45,52,0,54,60,46,49,54,52,47,46,55,41],
[43,50,40,46,47,0,56,45,51,51,46,51,46,49,49],
[42,43,38,44,41,45,0,37,46,45,41,41,49,42,45],
[46,52,46,54,55,56,64,0,58,61,60,55,51,51,50],
[41,47,46,51,52,50,55,43,0,50,47,50,45,52,45],
[44,46,40,49,47,50,56,40,51,0,45,49,44,50,52],
[49,49,41,51,49,55,60,41,54,56,0,47,45,51,48],
[54,53,45,48,54,50,60,46,51,52,54,0,50,51,54],
[43,53,47,49,55,55,52,50,56,57,56,51,0,49,50],
[48,47,43,48,46,52,59,50,49,51,50,50,52,0,50],
[53,55,44,52,60,52,56,51,56,49,53,47,51,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 86, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,39,45,38,43,45,40,46,43,33,49,34,46,38],
[56,0,62,55,50,53,63,55,66,54,52,53,47,59,49],
[62,39,0,49,41,44,48,36,51,55,51,57,40,50,36],
[56,46,52,0,43,49,46,43,46,52,45,52,35,54,39],
[63,51,60,58,0,51,64,46,70,64,43,67,46,56,47],
[58,48,57,52,50,0,47,54,55,50,54,60,36,57,45],
[56,38,53,55,37,54,0,41,55,53,50,58,44,50,47],
[61,46,65,58,55,47,60,0,56,68,56,62,50,50,50],
[55,35,50,55,31,46,46,45,0,49,41,58,38,55,28],
[58,47,46,49,37,51,48,33,52,0,43,48,36,45,51],
[68,49,50,56,58,47,51,45,60,58,0,60,50,56,48],
[52,48,44,49,34,41,43,39,43,53,41,0,38,45,41],
[67,54,61,66,55,65,57,51,63,65,51,63,0,56,48],
[55,42,51,47,45,44,51,51,46,56,45,56,45,0,42],
[63,52,65,62,54,56,54,51,73,50,53,60,53,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 87, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,53,56,50,51,56,52,48,55,50,48,52,51,56],
[55,0,56,49,50,52,55,50,49,56,44,45,58,50,50],
[48,45,0,46,54,46,49,45,42,45,47,50,52,52,47],
[45,52,55,0,55,55,51,50,47,50,47,55,48,56,57],
[51,51,47,46,0,52,53,47,49,46,56,52,51,49,49],
[50,49,55,46,49,0,53,44,49,50,52,44,52,47,48],
[45,46,52,50,48,48,0,46,41,48,44,48,47,41,44],
[49,51,56,51,54,57,55,0,51,53,49,50,53,54,56],
[53,52,59,54,52,52,60,50,0,55,57,58,58,54,56],
[46,45,56,51,55,51,53,48,46,0,51,54,48,42,57],
[51,57,54,54,45,49,57,52,44,50,0,50,48,47,48],
[53,56,51,46,49,57,53,51,43,47,51,0,48,50,53],
[49,43,49,53,50,49,54,48,43,53,53,53,0,52,53],
[50,51,49,45,52,54,60,47,47,59,54,51,49,0,49],
[45,51,54,44,52,53,57,45,45,44,53,48,48,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 88, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,41,38,48,42,32,42,41,44,40,34,36,45,34],
[57,0,53,48,51,50,45,64,61,54,56,39,44,52,43],
[60,48,0,44,49,54,42,55,59,51,44,40,47,48,45],
[63,53,57,0,48,45,51,51,46,53,40,50,54,47,47],
[53,50,52,53,0,53,51,53,53,53,51,43,46,48,43],
[59,51,47,56,48,0,52,53,50,54,52,49,42,55,32],
[69,56,59,50,50,49,0,58,41,50,44,42,43,55,53],
[59,37,46,50,48,48,43,0,51,51,43,31,41,43,44],
[60,40,42,55,48,51,60,50,0,49,45,41,48,48,50],
[57,47,50,48,48,47,51,50,52,0,45,42,36,45,40],
[61,45,57,61,50,49,57,58,56,56,0,44,46,55,48],
[67,62,61,51,58,52,59,70,60,59,57,0,47,59,49],
[65,57,54,47,55,59,58,60,53,65,55,54,0,51,53],
[56,49,53,54,53,46,46,58,53,56,46,42,50,0,47],
[67,58,56,54,58,69,48,57,51,61,53,52,48,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 89, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,55,48,59,59,52,46,56,58,53,54,59,51,58],
[46,0,52,57,56,52,51,44,50,54,50,45,58,46,44],
[46,49,0,41,51,53,48,44,46,45,44,51,50,44,47],
[53,44,60,0,57,51,57,52,56,58,57,56,63,50,55],
[42,45,50,44,0,45,45,42,44,48,41,52,53,44,49],
[42,49,48,50,56,0,48,38,49,47,47,53,48,43,49],
[49,50,53,44,56,53,0,46,52,56,50,49,52,48,50],
[55,57,57,49,59,63,55,0,57,58,56,54,52,54,53],
[45,51,55,45,57,52,49,44,0,50,52,49,54,41,50],
[43,47,56,43,53,54,45,43,51,0,49,54,53,47,47],
[48,51,57,44,60,54,51,45,49,52,0,52,52,51,54],
[47,56,50,45,49,48,52,47,52,47,49,0,53,44,48],
[42,43,51,38,48,53,49,49,47,48,49,48,0,47,42],
[50,55,57,51,57,58,53,47,60,54,50,57,54,0,57],
[43,57,54,46,52,52,51,48,51,54,47,53,59,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 90, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,56,57,64,69,67,52,38,73,70,58,55,61,68],
[35,0,51,50,55,42,33,25,29,60,42,41,40,40,38],
[45,50,0,56,48,46,44,27,31,49,56,61,49,29,34],
[44,51,45,0,53,62,33,30,59,49,54,50,27,36,38],
[37,46,53,48,0,40,51,18,35,35,49,48,34,26,32],
[32,59,55,39,61,0,49,32,32,64,61,52,35,47,42],
[34,68,57,68,50,52,0,41,40,63,68,57,50,46,47],
[49,76,74,71,83,69,60,0,66,75,68,60,60,44,54],
[63,72,70,42,66,69,61,35,0,63,68,72,51,40,46],
[28,41,52,52,66,37,38,26,38,0,53,53,46,33,35],
[31,59,45,47,52,40,33,33,33,48,0,60,29,23,40],
[43,60,40,51,53,49,44,41,29,48,41,0,31,39,31],
[46,61,52,74,67,66,51,41,50,55,72,70,0,47,44],
[40,61,72,65,75,54,55,57,61,68,78,62,54,0,44],
[33,63,67,63,69,59,54,47,55,66,61,70,57,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 91, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,49,48,45,30,38,45,43,40,50,57,47,54,60],
[50,0,52,57,50,46,50,58,61,51,53,71,48,53,65],
[52,49,0,47,58,36,39,49,46,38,55,63,46,49,71],
[53,44,54,0,44,42,43,49,59,49,51,60,53,55,63],
[56,51,43,57,0,40,44,52,48,40,62,60,50,47,59],
[71,55,65,59,61,0,54,54,54,40,57,58,57,65,76],
[63,51,62,58,57,47,0,53,50,45,65,64,62,66,63],
[56,43,52,52,49,47,48,0,62,42,50,60,56,50,72],
[58,40,55,42,53,47,51,39,0,32,50,52,50,53,65],
[61,50,63,52,61,61,56,59,69,0,67,65,56,57,75],
[51,48,46,50,39,44,36,51,51,34,0,65,45,61,65],
[44,30,38,41,41,43,37,41,49,36,36,0,34,54,59],
[54,53,55,48,51,44,39,45,51,45,56,67,0,54,66],
[47,48,52,46,54,36,35,51,48,44,40,47,47,0,64],
[41,36,30,38,42,25,38,29,36,26,36,42,35,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 92, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,50,42,51,46,43,48,49,44,44,40,47,55,52],
[53,0,54,50,50,54,53,59,51,48,56,52,47,64,61],
[51,47,0,45,46,49,51,52,44,43,49,46,46,49,49],
[59,51,56,0,50,59,51,59,50,46,58,52,52,56,63],
[50,51,55,51,0,51,50,57,54,44,50,47,50,61,55],
[55,47,52,42,50,0,49,57,50,48,57,49,50,51,55],
[58,48,50,50,51,52,0,58,46,54,57,50,55,54,55],
[53,42,49,42,44,44,43,0,46,45,48,46,40,50,54],
[52,50,57,51,47,51,55,55,0,45,52,52,57,60,59],
[57,53,58,55,57,53,47,56,56,0,56,57,54,62,58],
[57,45,52,43,51,44,44,53,49,45,0,44,46,52,46],
[61,49,55,49,54,52,51,55,49,44,57,0,55,57,57],
[54,54,55,49,51,51,46,61,44,47,55,46,0,60,58],
[46,37,52,45,40,50,47,51,41,39,49,44,41,0,51],
[49,40,52,38,46,46,46,47,42,43,55,44,43,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 93, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,42,36,43,48,35,43,57,66,47,47,39,58,40],
[46,0,35,43,41,52,39,47,52,54,46,47,46,48,42],
[59,66,0,55,50,66,52,62,75,74,63,59,50,59,48],
[65,58,46,0,53,63,65,64,64,71,58,61,43,66,46],
[58,60,51,48,0,61,52,60,62,67,58,48,59,61,52],
[53,49,35,38,40,0,38,42,50,52,47,41,38,63,40],
[66,62,49,36,49,63,0,67,66,75,61,55,50,68,44],
[58,54,39,37,41,59,34,0,52,75,51,47,48,56,48],
[44,49,26,37,39,51,35,49,0,67,40,49,44,62,36],
[35,47,27,30,34,49,26,26,34,0,31,33,31,50,40],
[54,55,38,43,43,54,40,50,61,70,0,54,46,57,50],
[54,54,42,40,53,60,46,54,52,68,47,0,50,67,44],
[62,55,51,58,42,63,51,53,57,70,55,51,0,65,57],
[43,53,42,35,40,38,33,45,39,51,44,34,36,0,40],
[61,59,53,55,49,61,57,53,65,61,51,57,44,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 94, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,56,43,52,59,44,52,63,66,66,60,59,59,55],
[43,0,64,50,51,54,49,51,62,56,61,63,66,57,49],
[45,37,0,38,48,48,40,42,49,48,46,53,48,51,52],
[58,51,63,0,58,62,49,58,58,64,67,63,61,66,63],
[49,50,53,43,0,56,52,51,59,52,61,48,62,52,53],
[42,47,53,39,45,0,39,52,55,50,59,41,49,49,41],
[57,52,61,52,49,62,0,46,52,56,57,54,60,57,60],
[49,50,59,43,50,49,55,0,57,53,62,52,57,56,58],
[38,39,52,43,42,46,49,44,0,44,45,41,43,45,44],
[35,45,53,37,49,51,45,48,57,0,50,46,46,44,45],
[35,40,55,34,40,42,44,39,56,51,0,53,53,50,47],
[41,38,48,38,53,60,47,49,60,55,48,0,50,46,47],
[42,35,53,40,39,52,41,44,58,55,48,51,0,46,42],
[42,44,50,35,49,52,44,45,56,57,51,55,55,0,48],
[46,52,49,38,48,60,41,43,57,56,54,54,59,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 95, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,56,49,51,48,58,55,58,48,51,48,66,57,51],
[54,0,55,59,52,45,56,48,66,60,48,56,57,53,68],
[45,46,0,48,35,48,52,46,51,50,47,51,55,47,54],
[52,42,53,0,47,52,54,52,53,49,49,52,60,48,54],
[50,49,66,54,0,53,62,50,61,59,46,49,59,52,62],
[53,56,53,49,48,0,51,49,56,53,50,46,60,55,58],
[43,45,49,47,39,50,0,41,49,45,38,46,48,48,51],
[46,53,55,49,51,52,60,0,60,59,47,48,58,56,64],
[43,35,50,48,40,45,52,41,0,49,32,39,51,47,57],
[53,41,51,52,42,48,56,42,52,0,49,49,49,44,47],
[50,53,54,52,55,51,63,54,69,52,0,53,58,53,60],
[53,45,50,49,52,55,55,53,62,52,48,0,61,59,58],
[35,44,46,41,42,41,53,43,50,52,43,40,0,39,51],
[44,48,54,53,49,46,53,45,54,57,48,42,62,0,56],
[50,33,47,47,39,43,50,37,44,54,41,43,50,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 96, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,49,40,49,37,42,52,39,44,47,58,39,39,41],
[47,0,61,40,46,40,33,53,40,52,49,56,37,44,32],
[52,40,0,54,50,48,40,42,40,52,46,55,41,35,41],
[61,61,47,0,48,38,44,56,36,45,51,56,37,42,39],
[52,55,51,53,0,46,43,56,38,50,45,57,43,51,43],
[64,61,53,63,55,0,51,47,41,55,53,66,49,46,42],
[59,68,61,57,58,50,0,58,48,61,64,66,51,47,54],
[49,48,59,45,45,54,43,0,37,53,54,65,41,41,31],
[62,61,61,65,63,60,53,64,0,70,57,60,52,49,53],
[57,49,49,56,51,46,40,48,31,0,45,54,37,44,36],
[54,52,55,50,56,48,37,47,44,56,0,58,41,47,40],
[43,45,46,45,44,35,35,36,41,47,43,0,33,43,39],
[62,64,60,64,58,52,50,60,49,64,60,68,0,56,52],
[62,57,66,59,50,55,54,60,52,57,54,58,45,0,62],
[60,69,60,62,58,59,47,70,48,65,61,62,49,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 97, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,55,58,48,54,53,51,47,52,54,48,53,50,54],
[46,0,50,50,47,53,49,48,48,49,52,42,51,47,52],
[46,51,0,53,44,50,49,53,55,47,53,54,50,49,55],
[43,51,48,0,48,48,54,54,50,50,51,52,52,50,57],
[53,54,57,53,0,56,61,56,60,51,54,50,52,54,63],
[47,48,51,53,45,0,49,45,54,46,53,50,47,48,59],
[48,52,52,47,40,52,0,46,52,50,52,48,46,50,49],
[50,53,48,47,45,56,55,0,55,53,56,54,54,47,58],
[54,53,46,51,41,47,49,46,0,49,50,52,46,41,52],
[49,52,54,51,50,55,51,48,52,0,54,53,53,54,57],
[47,49,48,50,47,48,49,45,51,47,0,39,43,44,50],
[53,59,47,49,51,51,53,47,49,48,62,0,46,41,57],
[48,50,51,49,49,54,55,47,55,48,58,55,0,43,64],
[51,54,52,51,47,53,51,54,60,47,57,60,58,0,57],
[47,49,46,44,38,42,52,43,49,44,51,44,37,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 98, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,49,46,44,47,47,46,46,42,46,40,52,42,48],
[68,0,64,53,59,53,59,50,55,50,62,52,59,51,52],
[52,37,0,48,52,57,57,43,46,57,52,44,56,51,49],
[55,48,53,0,50,54,57,49,57,51,52,44,60,47,52],
[57,42,49,51,0,52,50,57,54,53,51,43,57,41,53],
[54,48,44,47,49,0,47,50,50,44,48,54,48,44,47],
[54,42,44,44,51,54,0,46,56,50,51,46,48,54,49],
[55,51,58,52,44,51,55,0,52,59,56,47,65,49,65],
[55,46,55,44,47,51,45,49,0,49,47,45,58,39,45],
[59,51,44,50,48,57,51,42,52,0,52,58,58,47,52],
[55,39,49,49,50,53,50,45,54,49,0,46,53,45,54],
[61,49,57,57,58,47,55,54,56,43,55,0,56,43,49],
[49,42,45,41,44,53,53,36,43,43,48,45,0,37,49],
[59,50,50,54,60,57,47,52,62,54,56,58,64,0,52],
[53,49,52,49,48,54,52,36,56,49,47,52,52,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 99, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,43,28,53,33,40,24,41,33,44,48,37,49,26],
[50,0,53,47,72,29,31,34,51,25,43,64,36,50,36],
[58,48,0,39,64,46,51,34,49,40,44,67,40,73,40],
[73,54,62,0,73,40,60,47,53,38,46,57,51,70,61],
[48,29,37,28,0,25,29,28,35,24,34,46,31,54,41],
[68,72,55,61,76,0,61,53,59,54,63,72,55,77,42],
[61,70,50,41,72,40,0,48,51,41,44,64,49,58,50],
[77,67,67,54,73,48,53,0,60,39,65,59,54,62,44],
[60,50,52,48,66,42,50,41,0,35,52,59,41,68,39],
[68,76,61,63,77,47,60,62,66,0,64,56,60,81,54],
[57,58,57,55,67,38,57,36,49,37,0,64,40,52,48],
[53,37,34,44,55,29,37,42,42,45,37,0,34,57,31],
[64,65,61,50,70,46,52,47,60,41,61,67,0,77,49],
[52,51,28,31,47,24,43,39,33,20,49,44,24,0,24],
[75,65,61,40,60,59,51,57,62,47,53,70,52,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 100, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,65,55,43,59,75,60,51,64,62,56,47,61,46],
[35,0,62,42,58,59,73,76,54,57,50,64,52,53,64],
[36,39,0,36,33,58,80,70,47,41,46,61,50,53,24],
[46,59,65,0,60,58,61,65,46,55,61,64,48,55,59],
[58,43,68,41,0,54,62,65,51,49,68,49,51,67,38],
[42,42,43,43,47,0,59,80,49,43,46,44,47,63,40],
[26,28,21,40,39,42,0,37,25,23,33,48,27,28,18],
[41,25,31,36,36,21,64,0,26,35,34,50,47,33,25],
[50,47,54,55,50,52,76,75,0,56,39,69,58,52,53],
[37,44,60,46,52,58,78,66,45,0,44,70,49,53,44],
[39,51,55,40,33,55,68,67,62,57,0,54,57,62,51],
[45,37,40,37,52,57,53,51,32,31,47,0,35,43,32],
[54,49,51,53,50,54,74,54,43,52,44,66,0,54,45],
[40,48,48,46,34,38,73,68,49,48,39,58,47,0,47],
[55,37,77,42,63,61,83,76,48,57,50,69,56,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 101, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,54,65,59,53,50,62,57,51,58,50,59,50,64],
[46,0,51,52,48,46,44,56,56,45,57,50,47,53,50],
[47,50,0,53,46,45,46,53,46,44,50,46,50,48,55],
[36,49,48,0,54,45,43,57,55,44,50,51,49,46,53],
[42,53,55,47,0,48,46,48,46,51,49,52,47,46,49],
[48,55,56,56,53,0,50,58,50,43,58,51,50,48,58],
[51,57,55,58,55,51,0,61,50,53,54,55,51,57,59],
[39,45,48,44,53,43,40,0,50,41,53,48,48,47,57],
[44,45,55,46,55,51,51,51,0,51,49,48,49,50,47],
[50,56,57,57,50,58,48,60,50,0,58,47,55,48,56],
[43,44,51,51,52,43,47,48,52,43,0,46,46,44,46],
[51,51,55,50,49,50,46,53,53,54,55,0,46,46,54],
[42,54,51,52,54,51,50,53,52,46,55,55,0,56,54],
[51,48,53,55,55,53,44,54,51,53,57,55,45,0,54],
[37,51,46,48,52,43,42,44,54,45,55,47,47,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 102, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,44,53,43,54,49,39,60,48,38,47,44,48,42],
[60,0,54,50,50,56,59,56,57,47,48,62,54,47,53],
[57,47,0,49,44,49,55,52,61,47,49,56,44,52,52],
[48,51,52,0,48,48,53,49,53,49,46,54,39,47,56],
[58,51,57,53,0,65,55,53,66,51,49,59,54,51,61],
[47,45,52,53,36,0,58,45,55,59,44,54,45,48,57],
[52,42,46,48,46,43,0,54,63,52,39,53,44,50,54],
[62,45,49,52,48,56,47,0,63,49,53,57,50,49,51],
[41,44,40,48,35,46,38,38,0,43,37,45,45,43,43],
[53,54,54,52,50,42,49,52,58,0,40,52,43,45,52],
[63,53,52,55,52,57,62,48,64,61,0,63,61,60,57],
[54,39,45,47,42,47,48,44,56,49,38,0,53,52,54],
[57,47,57,62,47,56,57,51,56,58,40,48,0,55,57],
[53,54,49,54,50,53,51,52,58,56,41,49,46,0,62],
[59,48,49,45,40,44,47,50,58,49,44,47,44,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 103, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,47,60,40,51,43,36,45,41,50,73,47,43,43],
[47,0,45,56,36,44,46,46,36,44,35,61,41,57,43],
[54,56,0,46,49,68,50,46,48,48,48,65,53,51,43],
[41,45,55,0,29,48,46,24,43,30,39,51,29,46,44],
[61,65,52,72,0,53,56,51,38,37,46,65,71,58,56],
[50,57,33,53,48,0,56,49,45,38,37,59,45,46,54],
[58,55,51,55,45,45,0,40,41,46,44,74,54,55,55],
[65,55,55,77,50,52,61,0,52,56,48,62,59,59,59],
[56,65,53,58,63,56,60,49,0,48,53,70,48,50,46],
[60,57,53,71,64,63,55,45,53,0,41,71,57,49,51],
[51,66,53,62,55,64,57,53,48,60,0,57,39,66,45],
[28,40,36,50,36,42,27,39,31,30,44,0,38,33,36],
[54,60,48,72,30,56,47,42,53,44,62,63,0,56,48],
[58,44,50,55,43,55,46,42,51,52,35,68,45,0,56],
[58,58,58,57,45,47,46,42,55,50,56,65,53,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 104, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,46,56,50,40,42,49,42,44,54,52,53,60,54],
[51,0,49,59,51,48,50,46,53,48,56,50,58,51,58],
[55,52,0,54,55,49,45,45,48,46,56,48,56,56,47],
[45,42,47,0,45,39,37,44,37,42,49,38,53,51,48],
[51,50,46,56,0,46,46,47,43,49,56,48,56,59,47],
[61,53,52,62,55,0,50,46,43,53,61,47,61,56,51],
[59,51,56,64,55,51,0,57,51,54,49,57,59,59,48],
[52,55,56,57,54,55,44,0,54,56,51,41,55,51,50],
[59,48,53,64,58,58,50,47,0,52,58,52,52,57,50],
[57,53,55,59,52,48,47,45,49,0,57,41,49,58,45],
[47,45,45,52,45,40,52,50,43,44,0,42,50,49,50],
[49,51,53,63,53,54,44,60,49,60,59,0,50,55,48],
[48,43,45,48,45,40,42,46,49,52,51,51,0,50,54],
[41,50,45,50,42,45,42,50,44,43,52,46,51,0,50],
[47,43,54,53,54,50,53,51,51,56,51,53,47,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 105, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,30,21,42,31,26,31,71,27,32,64,53,40,27],
[73,0,51,34,50,64,34,86,67,28,32,63,33,24,55],
[71,50,0,50,51,64,46,47,80,27,31,76,61,39,36],
[80,67,51,0,58,52,33,86,73,53,44,63,36,27,62],
[59,51,50,43,0,56,42,43,76,44,44,68,50,50,50],
[70,37,37,49,45,0,37,58,60,39,48,62,48,56,48],
[75,67,55,68,59,64,0,86,78,70,45,88,74,40,67],
[70,15,54,15,58,43,15,0,58,18,39,65,48,35,27],
[30,34,21,28,25,41,23,43,0,29,42,33,28,54,49],
[74,73,74,48,57,62,31,83,72,0,42,73,59,56,69],
[69,69,70,57,57,53,56,62,59,59,0,63,34,56,56],
[37,38,25,38,33,39,13,36,68,28,38,0,24,24,37],
[48,68,40,65,51,53,27,53,73,42,67,77,0,54,67],
[61,77,62,74,51,45,61,66,47,45,45,77,47,0,72],
[74,46,65,39,51,53,34,74,52,32,45,64,34,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 106, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,48,49,44,53,46,49,54,60,41,42,45,44,51],
[53,0,42,44,41,58,51,60,44,62,54,50,52,46,43],
[53,59,0,47,40,60,53,56,43,54,52,49,50,38,48],
[52,57,54,0,34,48,43,54,44,53,49,51,51,41,53],
[57,60,61,67,0,55,54,58,62,66,57,48,57,51,53],
[48,43,41,53,46,0,40,41,37,47,37,46,35,31,41],
[55,50,48,58,47,61,0,57,50,58,53,50,56,48,51],
[52,41,45,47,43,60,44,0,53,54,51,42,52,43,46],
[47,57,58,57,39,64,51,48,0,66,54,44,46,41,50],
[41,39,47,48,35,54,43,47,35,0,48,49,39,31,44],
[60,47,49,52,44,64,48,50,47,53,0,47,48,48,49],
[59,51,52,50,53,55,51,59,57,52,54,0,50,44,48],
[56,49,51,50,44,66,45,49,55,62,53,51,0,41,45],
[57,55,63,60,50,70,53,58,60,70,53,57,60,0,57],
[50,58,53,48,48,60,50,55,51,57,52,53,56,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 107, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,52,57,47,56,47,50,48,53,54,49,43,46,55],
[50,0,50,53,40,52,43,56,48,46,47,50,50,43,56],
[49,51,0,53,55,57,46,48,46,58,60,51,50,55,48],
[44,48,48,0,42,48,41,48,42,53,48,44,45,46,52],
[54,61,46,59,0,55,51,59,49,49,57,50,52,54,56],
[45,49,44,53,46,0,45,50,44,42,44,41,51,57,55],
[54,58,55,60,50,56,0,53,55,53,57,53,52,56,57],
[51,45,53,53,42,51,48,0,42,52,51,42,42,47,46],
[53,53,55,59,52,57,46,59,0,57,53,46,54,51,63],
[48,55,43,48,52,59,48,49,44,0,50,49,51,52,50],
[47,54,41,53,44,57,44,50,48,51,0,50,48,50,48],
[52,51,50,57,51,60,48,59,55,52,51,0,56,49,53],
[58,51,51,56,49,50,49,59,47,50,53,45,0,46,63],
[55,58,46,55,47,44,45,54,50,49,51,52,55,0,51],
[46,45,53,49,45,46,44,55,38,51,53,48,38,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 108, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,43,42,29,44,34,30,34,34,40,40,45,45,40],
[63,0,58,45,31,47,41,44,49,45,55,50,47,42,42],
[58,43,0,56,32,53,37,42,42,43,46,53,48,42,50],
[59,56,45,0,42,33,42,37,36,39,48,53,51,50,42],
[72,70,69,59,0,54,50,43,51,50,58,57,55,58,59],
[57,54,48,68,47,0,42,53,39,57,45,56,55,64,44],
[67,60,64,59,51,59,0,48,47,43,52,57,50,60,54],
[71,57,59,64,58,48,53,0,50,37,38,52,54,72,48],
[67,52,59,65,50,62,54,51,0,41,62,55,61,64,48],
[67,56,58,62,51,44,58,64,60,0,55,60,60,69,61],
[61,46,55,53,43,56,49,63,39,46,0,54,54,63,50],
[61,51,48,48,44,45,44,49,46,41,47,0,49,63,47],
[56,54,53,50,46,46,51,47,40,41,47,52,0,48,45],
[56,59,59,51,43,37,41,29,37,32,38,38,53,0,54],
[61,59,51,59,42,57,47,53,53,40,51,54,56,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 109, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,24,35,33,0,35,22,35,22,0,46,55,57],
[77,0,33,22,55,33,20,35,22,55,46,35,22,53,53],
[77,68,0,24,55,53,20,35,46,79,66,35,46,55,77],
[77,79,77,0,55,53,31,55,66,79,66,35,77,77,53],
[66,46,46,46,0,22,20,57,22,55,22,0,22,42,77],
[68,68,48,48,79,0,20,35,24,79,66,48,70,68,77],
[101,81,81,70,81,81,0,81,70,59,46,59,81,101,57],
[66,66,66,46,44,66,20,0,22,55,42,24,66,66,77],
[79,79,55,35,79,77,31,79,0,55,77,59,101,55,77],
[66,46,22,22,46,22,42,46,46,0,46,46,46,66,42],
[79,55,35,35,79,35,55,59,24,55,0,35,57,55,55],
[101,66,66,66,101,53,42,77,42,55,66,0,66,77,77],
[55,79,55,24,79,31,20,35,0,55,44,35,0,31,55],
[46,48,46,24,59,33,0,35,46,35,46,24,70,0,57],
[44,48,24,48,24,24,44,24,24,59,46,24,46,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 110, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,46,54,51,41,47,51,53,37,45,50,52,45,42],
[47,0,52,59,57,44,59,53,50,47,58,55,55,44,49],
[55,49,0,68,60,51,52,52,51,35,53,52,51,56,61],
[47,42,33,0,49,40,48,38,48,48,53,50,50,40,61],
[50,44,41,52,0,51,51,45,50,43,50,59,48,43,52],
[60,57,50,61,50,0,53,46,56,56,66,56,56,45,70],
[54,42,49,53,50,48,0,57,55,52,54,51,60,56,54],
[50,48,49,63,56,55,44,0,48,36,67,58,62,43,61],
[48,51,50,53,51,45,46,53,0,48,56,58,58,38,54],
[64,54,66,53,58,45,49,65,53,0,66,53,60,52,50],
[56,43,48,48,51,35,47,34,45,35,0,56,46,46,58],
[51,46,49,51,42,45,50,43,43,48,45,0,65,51,43],
[49,46,50,51,53,45,41,39,43,41,55,36,0,48,58],
[56,57,45,61,58,56,45,58,63,49,55,50,53,0,54],
[59,52,40,40,49,31,47,40,47,51,43,58,43,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 111, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,33,17,20,20,17,20,52,14,76,32,76,57,79],
[59,0,50,48,40,63,38,16,95,37,59,59,60,59,63],
[68,51,0,38,28,42,39,28,58,22,84,50,72,74,75],
[84,53,63,0,40,66,41,20,98,41,84,87,85,88,88],
[81,61,73,61,0,64,38,39,71,49,95,73,95,98,98],
[81,38,59,35,37,0,51,13,36,13,94,57,60,59,85],
[84,63,62,60,63,50,0,63,61,57,94,63,82,87,84],
[81,85,73,81,62,88,38,0,95,59,94,84,95,81,98],
[49,6,43,3,30,65,40,6,0,27,62,28,40,30,65],
[87,64,79,60,52,88,44,42,74,0,87,63,85,87,88],
[25,42,17,17,6,7,7,7,39,14,0,6,47,44,53],
[69,42,51,14,28,44,38,17,73,38,95,0,73,41,76],
[25,41,29,16,6,41,19,6,61,16,54,28,0,41,63],
[44,42,27,13,3,42,14,20,71,14,57,60,60,0,85],
[22,38,26,13,3,16,17,3,36,13,48,25,38,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 112, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,26,41,41,32,24,41,41,35,35,34,17,41,51],
[60,0,56,47,66,40,40,45,40,43,31,34,38,49,79],
[75,45,0,60,60,51,58,59,80,61,66,44,46,65,76],
[60,54,41,0,57,57,72,37,57,60,25,59,41,56,56],
[60,35,41,44,0,40,59,37,52,40,40,59,35,68,56],
[69,61,50,44,61,0,74,46,62,56,34,49,30,55,82],
[77,61,43,29,42,27,0,51,49,30,42,56,30,31,68],
[60,56,42,64,64,55,50,0,38,55,67,29,55,69,68],
[60,61,21,44,49,39,52,63,0,63,32,49,17,53,73],
[66,58,40,41,61,45,71,46,38,0,24,41,36,48,82],
[66,70,35,76,61,67,59,34,69,77,0,41,46,48,77],
[67,67,57,42,42,52,45,72,52,60,60,0,52,47,91],
[84,63,55,60,66,71,71,46,84,65,55,49,0,55,65],
[60,52,36,45,33,46,70,32,48,53,53,54,46,0,68],
[50,22,25,45,45,19,33,33,28,19,24,10,36,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 113, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,52,38,55,46,60,54,39,48,46,45,51,56,56],
[51,0,60,45,52,56,52,52,45,53,46,47,62,53,64],
[49,41,0,35,49,49,43,46,34,49,40,37,43,52,58],
[63,56,66,0,63,52,58,57,49,66,41,61,70,57,72],
[46,49,52,38,0,48,43,40,52,51,40,49,47,48,63],
[55,45,52,49,53,0,45,56,42,55,47,46,56,52,60],
[41,49,58,43,58,56,0,55,45,51,44,47,60,53,59],
[47,49,55,44,61,45,46,0,54,51,39,52,51,51,65],
[62,56,67,52,49,59,56,47,0,56,54,55,58,62,65],
[53,48,52,35,50,46,50,50,45,0,40,45,52,54,61],
[55,55,61,60,61,54,57,62,47,61,0,52,57,57,72],
[56,54,64,40,52,55,54,49,46,56,49,0,51,53,58],
[50,39,58,31,54,45,41,50,43,49,44,50,0,50,57],
[45,48,49,44,53,49,48,50,39,47,44,48,51,0,55],
[45,37,43,29,38,41,42,36,36,40,29,43,44,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 114, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,55,48,57,48,54,44,54,51,51,47,62,54,52],
[54,0,53,55,58,60,52,45,61,58,58,55,55,62,63],
[46,48,0,50,50,56,46,46,53,48,48,42,57,53,53],
[53,46,51,0,53,56,42,43,48,45,49,42,49,49,48],
[44,43,51,48,0,49,41,38,47,46,45,43,40,48,43],
[53,41,45,45,52,0,38,39,53,50,48,43,44,48,50],
[47,49,55,59,60,63,0,48,56,56,46,51,56,55,58],
[57,56,55,58,63,62,53,0,51,57,56,48,55,63,60],
[47,40,48,53,54,48,45,50,0,56,50,56,47,54,46],
[50,43,53,56,55,51,45,44,45,0,49,42,53,63,55],
[50,43,53,52,56,53,55,45,51,52,0,47,59,54,53],
[54,46,59,59,58,58,50,53,45,59,54,0,56,60,55],
[39,46,44,52,61,57,45,46,54,48,42,45,0,52,54],
[47,39,48,52,53,53,46,38,47,38,47,41,49,0,53],
[49,38,48,53,58,51,43,41,55,46,48,46,47,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 115, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,45,56,45,47,61,45,53,55,49,55,46,48,53],
[54,0,55,53,46,46,56,43,53,52,45,51,42,36,50],
[56,46,0,56,46,50,63,54,56,57,50,47,44,44,49],
[45,48,45,0,44,41,60,41,56,47,45,53,46,39,54],
[56,55,55,57,0,53,62,48,61,62,53,55,50,51,55],
[54,55,51,60,48,0,63,45,57,53,55,54,48,45,56],
[40,45,38,41,39,38,0,39,50,47,43,50,41,36,49],
[56,58,47,60,53,56,62,0,54,59,46,58,59,49,55],
[48,48,45,45,40,44,51,47,0,48,45,48,48,38,48],
[46,49,44,54,39,48,54,42,53,0,46,51,43,42,55],
[52,56,51,56,48,46,58,55,56,55,0,55,46,47,53],
[46,50,54,48,46,47,51,43,53,50,46,0,45,43,57],
[55,59,57,55,51,53,60,42,53,58,55,56,0,48,53],
[53,65,57,62,50,56,65,52,63,59,54,58,53,0,61],
[48,51,52,47,46,45,52,46,53,46,48,44,48,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 116, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,48,55,63,43,54,49,57,54,56,73,52,56,55],
[49,0,47,53,61,52,54,52,51,52,49,67,61,64,50],
[53,54,0,59,66,62,62,47,70,63,53,72,53,62,58],
[46,48,42,0,51,50,52,46,63,52,46,71,50,50,50],
[38,40,35,50,0,41,40,43,56,43,34,57,46,47,36],
[58,49,39,51,60,0,52,45,66,63,54,66,56,55,50],
[47,47,39,49,61,49,0,37,58,53,46,63,51,46,42],
[52,49,54,55,58,56,64,0,64,58,52,70,54,57,65],
[44,50,31,38,45,35,43,37,0,41,46,62,37,46,39],
[47,49,38,49,58,38,48,43,60,0,52,66,48,53,46],
[45,52,48,55,67,47,55,49,55,49,0,69,50,57,42],
[28,34,29,30,44,35,38,31,39,35,32,0,33,42,34],
[49,40,48,51,55,45,50,47,64,53,51,68,0,55,48],
[45,37,39,51,54,46,55,44,55,48,44,59,46,0,45],
[46,51,43,51,65,51,59,36,62,55,59,67,53,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 117, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,58,50,58,54,61,58,50,55,63,52,58,48,61],
[49,0,55,51,50,52,54,51,51,47,58,43,53,47,56],
[43,46,0,43,51,46,48,47,45,42,48,47,44,36,46],
[51,50,58,0,56,46,51,51,46,47,52,47,43,39,48],
[43,51,50,45,0,46,54,49,46,35,52,46,50,44,48],
[47,49,55,55,55,0,59,57,46,43,52,43,53,44,49],
[40,47,53,50,47,42,0,49,50,48,51,47,39,41,48],
[43,50,54,50,52,44,52,0,47,47,56,39,54,45,55],
[51,50,56,55,55,55,51,54,0,48,50,49,52,46,47],
[46,54,59,54,66,58,53,54,53,0,64,54,55,52,64],
[38,43,53,49,49,49,50,45,51,37,0,51,47,46,52],
[49,58,54,54,55,58,54,62,52,47,50,0,53,45,53],
[43,48,57,58,51,48,62,47,49,46,54,48,0,48,58],
[53,54,65,62,57,57,60,56,55,49,55,56,53,0,62],
[40,45,55,53,53,52,53,46,54,37,49,48,43,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 118, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,45,40,52,46,52,47,53,58,43,49,47,47,51],
[52,0,51,42,57,43,53,53,56,58,44,49,53,53,53],
[56,50,0,42,58,53,55,45,54,53,52,58,55,55,53],
[61,59,59,0,62,46,55,58,57,57,59,51,62,59,57],
[49,44,43,39,0,42,44,43,49,56,47,50,52,49,44],
[55,58,48,55,59,0,59,55,61,66,50,56,58,52,50],
[49,48,46,46,57,42,0,53,53,56,53,45,59,51,45],
[54,48,56,43,58,46,48,0,54,55,51,51,56,50,52],
[48,45,47,44,52,40,48,47,0,57,50,44,52,49,44],
[43,43,48,44,45,35,45,46,44,0,50,39,46,45,46],
[58,57,49,42,54,51,48,50,51,51,0,50,51,52,47],
[52,52,43,50,51,45,56,50,57,62,51,0,53,53,49],
[54,48,46,39,49,43,42,45,49,55,50,48,0,47,49],
[54,48,46,42,52,49,50,51,52,56,49,48,54,0,43],
[50,48,48,44,57,51,56,49,57,55,54,52,52,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 119, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,50,42,49,45,50,45,53,53,49,49,48,41,39],
[59,0,56,52,56,49,53,45,53,59,49,50,56,40,46],
[51,45,0,47,48,51,48,47,52,53,43,48,52,41,41],
[59,49,54,0,55,49,50,45,52,53,49,53,57,41,42],
[52,45,53,46,0,46,56,41,48,50,47,54,58,40,43],
[56,52,50,52,55,0,55,45,59,61,52,53,59,42,51],
[51,48,53,51,45,46,0,48,53,54,49,46,55,41,50],
[56,56,54,56,60,56,53,0,55,56,49,56,59,50,53],
[48,48,49,49,53,42,48,46,0,57,52,50,60,31,43],
[48,42,48,48,51,40,47,45,44,0,42,38,52,39,41],
[52,52,58,52,54,49,52,52,49,59,0,57,54,46,51],
[52,51,53,48,47,48,55,45,51,63,44,0,52,45,43],
[53,45,49,44,43,42,46,42,41,49,47,49,0,39,44],
[60,61,60,60,61,59,60,51,70,62,55,56,62,0,46],
[62,55,60,59,58,50,51,48,58,60,50,58,57,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 120, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,25,27,30,28,26,32,28,20,6,24,6,59,22],
[79,0,66,53,48,63,77,84,77,53,66,51,53,93,55],
[76,35,0,61,48,46,65,50,39,48,63,55,46,80,44],
[74,48,40,0,54,50,59,58,54,44,34,69,40,61,44],
[71,53,53,47,0,55,69,74,66,58,71,54,58,58,60],
[73,38,55,51,46,0,60,57,68,36,62,44,49,75,49],
[75,24,36,42,32,41,0,71,25,34,32,37,19,70,37],
[69,17,51,43,27,44,30,0,40,32,17,39,32,56,19],
[73,24,62,47,35,33,76,61,0,47,30,42,32,93,42],
[81,48,53,57,43,65,67,69,54,0,53,82,47,74,56],
[95,35,38,67,30,39,69,84,71,48,0,50,61,78,37],
[77,50,46,32,47,57,64,62,59,19,51,0,45,78,46],
[95,48,55,61,43,52,82,69,69,54,40,56,0,87,50],
[42,8,21,40,43,26,31,45,8,27,23,23,14,0,25],
[79,46,57,57,41,52,64,82,59,45,64,55,51,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 121, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,66,0,7,0,39,4,4,11,7,7,39,11,4],
[94,0,66,63,38,0,70,67,31,36,7,7,63,94,67],
[35,35,0,35,42,31,67,35,35,35,38,35,67,35,35],
[101,38,66,0,34,27,39,31,38,70,34,34,66,70,63],
[94,63,59,67,0,32,63,63,31,63,32,0,67,94,67],
[101,101,70,74,69,0,74,94,38,101,43,42,74,101,74],
[62,31,34,62,38,27,0,31,31,31,34,38,31,31,31],
[97,34,66,70,38,7,70,0,34,66,7,7,70,97,70],
[97,70,66,63,70,63,70,67,0,70,70,38,70,101,67],
[90,65,66,31,38,0,70,35,31,0,7,7,70,101,67],
[94,94,63,67,69,58,67,94,31,94,0,62,94,94,94],
[94,94,66,67,101,59,63,94,63,94,39,0,67,94,94],
[62,38,34,35,34,27,70,31,31,31,7,34,0,62,62],
[90,7,66,31,7,0,70,4,0,0,7,7,39,0,35],
[97,34,66,38,34,27,70,31,34,34,7,7,39,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 122, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,52,46,57,52,47,47,53,51,43,51,55,57,48],
[51,0,52,46,42,52,40,48,47,46,49,46,53,59,47],
[49,49,0,48,53,43,42,52,46,49,49,45,52,56,49],
[55,55,53,0,56,55,46,54,57,59,57,48,59,65,54],
[44,59,48,45,0,47,44,49,47,49,49,42,51,57,43],
[49,49,58,46,54,0,48,52,51,47,51,48,51,59,49],
[54,61,59,55,57,53,0,54,51,57,57,48,55,63,60],
[54,53,49,47,52,49,47,0,52,47,51,46,52,54,53],
[48,54,55,44,54,50,50,49,0,49,58,48,50,57,49],
[50,55,52,42,52,54,44,54,52,0,58,47,59,52,52],
[58,52,52,44,52,50,44,50,43,43,0,37,56,57,48],
[50,55,56,53,59,53,53,55,53,54,64,0,58,63,49],
[46,48,49,42,50,50,46,49,51,42,45,43,0,52,45],
[44,42,45,36,44,42,38,47,44,49,44,38,49,0,40],
[53,54,52,47,58,52,41,48,52,49,53,52,56,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 123, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,54,57,67,58,57,56,48,61,66,67,63,55,66],
[51,0,47,52,55,51,38,53,49,61,41,61,51,46,53],
[47,54,0,45,61,40,37,44,51,54,47,66,40,48,57],
[44,49,56,0,51,47,47,45,52,63,40,65,51,45,58],
[34,46,40,50,0,41,35,44,43,48,37,65,51,38,63],
[43,50,61,54,60,0,45,51,53,55,54,67,54,61,65],
[44,63,64,54,66,56,0,50,63,61,58,71,67,51,64],
[45,48,57,56,57,50,51,0,50,57,55,66,58,52,65],
[53,52,50,49,58,48,38,51,0,56,52,76,52,46,64],
[40,40,47,38,53,46,40,44,45,0,41,61,45,45,57],
[35,60,54,61,64,47,43,46,49,60,0,64,53,49,60],
[34,40,35,36,36,34,30,35,25,40,37,0,45,44,59],
[38,50,61,50,50,47,34,43,49,56,48,56,0,41,51],
[46,55,53,56,63,40,50,49,55,56,52,57,60,0,58],
[35,48,44,43,38,36,37,36,37,44,41,42,50,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 124, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,58,53,61,63,45,53,49,48,55,60,52,47,49],
[47,0,46,45,57,45,35,38,39,39,47,43,46,45,49],
[43,55,0,56,56,56,48,49,49,47,51,46,54,39,46],
[48,56,45,0,51,58,38,47,46,39,50,49,56,48,45],
[40,44,45,50,0,51,39,45,39,35,45,48,53,48,43],
[38,56,45,43,50,0,47,44,51,36,57,46,53,43,40],
[56,66,53,63,62,54,0,46,52,51,54,52,58,50,50],
[48,63,52,54,56,57,55,0,51,48,51,51,56,41,57],
[52,62,52,55,62,50,49,50,0,51,60,51,56,46,50],
[53,62,54,62,66,65,50,53,50,0,56,58,55,57,54],
[46,54,50,51,56,44,47,50,41,45,0,40,53,41,39],
[41,58,55,52,53,55,49,50,50,43,61,0,58,47,56],
[49,55,47,45,48,48,43,45,45,46,48,43,0,47,46],
[54,56,62,53,53,58,51,60,55,44,60,54,54,0,52],
[52,52,55,56,58,61,51,44,51,47,62,45,55,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 125, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,50,48,46,41,49,41,55,53,54,46,46,45,47],
[54,0,50,45,51,50,50,51,50,54,57,44,51,45,46],
[51,51,0,47,52,45,45,42,46,42,52,46,48,44,45],
[53,56,54,0,52,57,52,46,52,49,57,59,56,45,51],
[55,50,49,49,0,48,48,42,52,49,60,57,53,46,44],
[60,51,56,44,53,0,49,47,51,45,57,54,48,49,45],
[52,51,56,49,53,52,0,44,57,58,62,53,45,52,43],
[60,50,59,55,59,54,57,0,55,59,60,63,54,57,46],
[46,51,55,49,49,50,44,46,0,47,53,52,49,49,51],
[48,47,59,52,52,56,43,42,54,0,55,50,51,54,47],
[47,44,49,44,41,44,39,41,48,46,0,47,46,38,39],
[55,57,55,42,44,47,48,38,49,51,54,0,46,53,48],
[55,50,53,45,48,53,56,47,52,50,55,55,0,45,55],
[56,56,57,56,55,52,49,44,52,47,63,48,56,0,45],
[54,55,56,50,57,56,58,55,50,54,62,53,46,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 126, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,44,31,31,20,33,37,30,43,36,31,49,17,46],
[53,0,46,33,28,51,44,42,42,29,45,39,47,28,55],
[57,55,0,54,58,50,61,50,53,57,54,41,62,60,74],
[70,68,47,0,43,63,51,56,53,42,32,29,62,62,64],
[70,73,43,58,0,69,43,50,63,39,36,44,63,63,92],
[81,50,51,38,32,0,49,59,36,47,33,23,66,40,36],
[68,57,40,50,58,52,0,44,33,60,60,37,53,42,76],
[64,59,51,45,51,42,57,0,28,49,45,29,62,61,49],
[71,59,48,48,38,65,68,73,0,44,46,51,63,55,67],
[58,72,44,59,62,54,41,52,57,0,53,39,47,52,66],
[65,56,47,69,65,68,41,56,55,48,0,36,62,74,66],
[70,62,60,72,57,78,64,72,50,62,65,0,63,71,72],
[52,54,39,39,38,35,48,39,38,54,39,38,0,33,59],
[84,73,41,39,38,61,59,40,46,49,27,30,68,0,46],
[55,46,27,37,9,65,25,52,34,35,35,29,42,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 127, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,49,48,56,47,48,54,56,55,56,53,61,45,42],
[46,0,52,52,54,52,52,54,55,55,54,49,54,52,40],
[52,49,0,43,56,49,48,54,55,52,56,52,57,47,43],
[53,49,58,0,58,56,48,54,54,53,61,53,58,49,45],
[45,47,45,43,0,41,48,50,50,54,58,49,56,40,37],
[54,49,52,45,60,0,48,55,54,51,60,54,56,45,47],
[53,49,53,53,53,53,0,54,51,53,54,50,59,44,40],
[47,47,47,47,51,46,47,0,52,49,55,47,52,44,37],
[45,46,46,47,51,47,50,49,0,48,51,49,50,44,39],
[46,46,49,48,47,50,48,52,53,0,55,45,57,44,35],
[45,47,45,40,43,41,47,46,50,46,0,49,52,41,47],
[48,52,49,48,52,47,51,54,52,56,52,0,59,46,46],
[40,47,44,43,45,45,42,49,51,44,49,42,0,41,36],
[56,49,54,52,61,56,57,57,57,57,60,55,60,0,51],
[59,61,58,56,64,54,61,64,62,66,54,55,65,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 128, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,50,45,45,48,45,49,53,43,54,46,51,43,53],
[56,0,53,51,55,55,50,56,51,47,64,49,59,53,54],
[51,48,0,55,50,54,55,57,54,42,59,54,64,57,56],
[56,50,46,0,51,51,54,55,57,53,50,52,57,47,59],
[56,46,51,50,0,52,44,48,49,49,58,50,56,54,52],
[53,46,47,50,49,0,45,49,52,48,58,52,56,60,56],
[56,51,46,47,57,56,0,52,55,47,60,50,51,58,55],
[52,45,44,46,53,52,49,0,54,43,59,50,55,54,59],
[48,50,47,44,52,49,46,47,0,44,57,49,54,48,57],
[58,54,59,48,52,53,54,58,57,0,61,56,55,59,67],
[47,37,42,51,43,43,41,42,44,40,0,42,45,48,54],
[55,52,47,49,51,49,51,51,52,45,59,0,57,57,58],
[50,42,37,44,45,45,50,46,47,46,56,44,0,56,54],
[58,48,44,54,47,41,43,47,53,42,53,44,45,0,56],
[48,47,45,42,49,45,46,42,44,34,47,43,47,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 129, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,47,56,56,56,49,50,50,45,50,55,55,48,54],
[45,0,47,40,50,52,45,54,49,44,48,47,46,47,47],
[54,54,0,55,65,50,44,53,58,51,52,61,51,48,55],
[45,61,46,0,61,53,45,50,55,50,50,56,50,50,50],
[45,51,36,40,0,48,39,42,39,42,42,47,43,39,42],
[45,49,51,48,53,0,40,47,42,39,51,47,44,42,42],
[52,56,57,56,62,61,0,56,54,49,54,58,60,59,52],
[51,47,48,51,59,54,45,0,48,44,44,47,55,43,39],
[51,52,43,46,62,59,47,53,0,45,51,48,47,51,46],
[56,57,50,51,59,62,52,57,56,0,55,57,50,55,53],
[51,53,49,51,59,50,47,57,50,46,0,56,51,52,52],
[46,54,40,45,54,54,43,54,53,44,45,0,44,45,41],
[46,55,50,51,58,57,41,46,54,51,50,57,0,48,48],
[53,54,53,51,62,59,42,58,50,46,49,56,53,0,51],
[47,54,46,51,59,59,49,62,55,48,49,60,53,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 130, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,52,49,52,54,52,49,54,57,55,51,50,58,60],
[44,0,51,50,53,53,43,42,53,50,59,41,50,54,53],
[49,50,0,48,54,51,51,41,54,50,49,56,49,55,57],
[52,51,53,0,55,57,46,46,59,54,57,53,54,59,56],
[49,48,47,46,0,48,49,44,49,53,47,49,45,57,50],
[47,48,50,44,53,0,40,45,50,48,52,49,48,57,53],
[49,58,50,55,52,61,0,51,61,53,53,50,57,61,57],
[52,59,60,55,57,56,50,0,58,58,58,52,51,62,57],
[47,48,47,42,52,51,40,43,0,45,52,43,41,58,49],
[44,51,51,47,48,53,48,43,56,0,48,42,44,53,51],
[46,42,52,44,54,49,48,43,49,53,0,48,40,58,45],
[50,60,45,48,52,52,51,49,58,59,53,0,44,62,51],
[51,51,52,47,56,53,44,50,60,57,61,57,0,59,63],
[43,47,46,42,44,44,40,39,43,48,43,39,42,0,39],
[41,48,44,45,51,48,44,44,52,50,56,50,38,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 131, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,44,55,51,37,57,53,50,46,47,56,54,45,44],
[48,0,37,50,45,33,56,42,40,44,42,53,44,39,33],
[57,64,0,61,59,58,65,61,57,50,57,59,49,51,57],
[46,51,40,0,48,41,43,54,40,45,50,65,49,48,41],
[50,56,42,53,0,45,58,52,49,44,53,51,52,48,43],
[64,68,43,60,56,0,63,62,59,50,52,64,51,53,54],
[44,45,36,58,43,38,0,56,47,44,43,56,43,43,44],
[48,59,40,47,49,39,45,0,44,45,42,52,43,49,42],
[51,61,44,61,52,42,54,57,0,45,54,57,53,56,39],
[55,57,51,56,57,51,57,56,56,0,52,59,48,48,47],
[54,59,44,51,48,49,58,59,47,49,0,55,48,50,43],
[45,48,42,36,50,37,45,49,44,42,46,0,35,34,38],
[47,57,52,52,49,50,58,58,48,53,53,66,0,51,49],
[56,62,50,53,53,48,58,52,45,53,51,67,50,0,42],
[57,68,44,60,58,47,57,59,62,54,58,63,52,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 132, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,67,44,54,46,54,47,48,46,45,41,45,58,55],
[50,0,54,44,47,43,48,43,42,47,50,47,48,47,45],
[34,47,0,44,44,43,48,41,40,47,39,51,47,45,42],
[57,57,57,0,58,51,59,56,44,47,52,54,53,55,52],
[47,54,57,43,0,44,56,50,47,47,45,52,51,51,44],
[55,58,58,50,57,0,56,55,47,52,45,48,55,54,57],
[47,53,53,42,45,45,0,47,45,50,41,62,45,52,53],
[54,58,60,45,51,46,54,0,51,48,49,56,50,58,50],
[53,59,61,57,54,54,56,50,0,56,53,65,46,58,58],
[55,54,54,54,54,49,51,53,45,0,59,54,55,55,57],
[56,51,62,49,56,56,60,52,48,42,0,58,57,66,55],
[60,54,50,47,49,53,39,45,36,47,43,0,42,49,49],
[56,53,54,48,50,46,56,51,55,46,44,59,0,53,52],
[43,54,56,46,50,47,49,43,43,46,35,52,48,0,48],
[46,56,59,49,57,44,48,51,43,44,46,52,49,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 133, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,53,48,53,66,51,60,52,53,50,52,55,54,57],
[41,0,53,49,57,58,50,53,47,50,49,57,41,54,60],
[48,48,0,44,56,58,46,64,47,44,44,52,53,54,54],
[53,52,57,0,63,61,49,71,48,57,49,58,54,57,53],
[48,44,45,38,0,56,49,59,46,44,37,51,53,54,47],
[35,43,43,40,45,0,50,60,42,41,44,48,42,52,40],
[50,51,55,52,52,51,0,68,53,52,47,47,43,40,49],
[41,48,37,30,42,41,33,0,44,33,43,42,43,31,50],
[49,54,54,53,55,59,48,57,0,44,35,48,39,52,56],
[48,51,57,44,57,60,49,68,57,0,41,57,52,55,55],
[51,52,57,52,64,57,54,58,66,60,0,54,48,48,60],
[49,44,49,43,50,53,54,59,53,44,47,0,50,52,56],
[46,60,48,47,48,59,58,58,62,49,53,51,0,46,57],
[47,47,47,44,47,49,61,70,49,46,53,49,55,0,58],
[44,41,47,48,54,61,52,51,45,46,41,45,44,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 134, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,59,52,55,64,52,56,57,49,53,58,58,50,57],
[47,0,51,50,43,53,47,41,44,45,52,50,57,46,51],
[42,50,0,46,46,42,43,41,38,40,45,41,51,40,46],
[49,51,55,0,53,56,50,52,52,58,53,47,60,57,54],
[46,58,55,48,0,58,51,45,51,51,50,47,60,54,57],
[37,48,59,45,43,0,44,47,43,50,46,47,54,47,50],
[49,54,58,51,50,57,0,50,48,53,55,53,54,49,64],
[45,60,60,49,56,54,51,0,57,50,53,53,69,48,55],
[44,57,63,49,50,58,53,44,0,50,55,56,50,52,61],
[52,56,61,43,50,51,48,51,51,0,55,47,65,53,63],
[48,49,56,48,51,55,46,48,46,46,0,53,53,53,55],
[43,51,60,54,54,54,48,48,45,54,48,0,58,50,54],
[43,44,50,41,41,47,47,32,51,36,48,43,0,42,50],
[51,55,61,44,47,54,52,53,49,48,48,51,59,0,56],
[44,50,55,47,44,51,37,46,40,38,46,47,51,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 135, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,61,62,59,26,44,53,50,36,77,49,54,56,43],
[48,0,34,48,33,38,50,43,48,36,60,34,52,35,26],
[40,67,0,69,57,47,67,48,48,42,82,44,63,54,53],
[39,53,32,0,42,19,66,36,35,24,67,19,31,41,21],
[42,68,44,59,0,31,40,49,49,58,57,39,48,50,52],
[75,63,54,82,70,0,69,73,66,61,63,61,68,59,42],
[57,51,34,35,61,32,0,52,47,37,46,31,35,48,42],
[48,58,53,65,52,28,49,0,56,57,48,40,61,66,52],
[51,53,53,66,52,35,54,45,0,47,50,35,69,64,49],
[65,65,59,77,43,40,64,44,54,0,65,45,71,70,53],
[24,41,19,34,44,38,55,53,51,36,0,36,30,27,38],
[52,67,57,82,62,40,70,61,66,56,65,0,58,55,64],
[47,49,38,70,53,33,66,40,32,30,71,43,0,50,35],
[45,66,47,60,51,42,53,35,37,31,74,46,51,0,37],
[58,75,48,80,49,59,59,49,52,48,63,37,66,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 136, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,59,51,49,46,43,58,60,57,51,52,58,50,48],
[51,0,54,55,55,48,48,60,50,55,49,51,49,48,43],
[42,47,0,46,49,45,47,52,48,50,49,47,54,43,43],
[50,46,55,0,47,49,45,62,48,48,51,49,52,47,41],
[52,46,52,54,0,42,50,56,50,52,52,50,50,53,44],
[55,53,56,52,59,0,53,60,51,51,53,54,53,47,48],
[58,53,54,56,51,48,0,63,56,55,59,57,56,50,48],
[43,41,49,39,45,41,38,0,45,52,49,41,44,46,39],
[41,51,53,53,51,50,45,56,0,52,49,42,49,48,41],
[44,46,51,53,49,50,46,49,49,0,54,44,47,37,49],
[50,52,52,50,49,48,42,52,52,47,0,50,48,41,42],
[49,50,54,52,51,47,44,60,59,57,51,0,52,51,48],
[43,52,47,49,51,48,45,57,52,54,53,49,0,49,45],
[51,53,58,54,48,54,51,55,53,64,60,50,52,0,53],
[53,58,58,60,57,53,53,62,60,52,59,53,56,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 137, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,53,58,60,61,47,48,58,55,50,56,51,54,51],
[53,0,50,54,60,52,50,48,57,52,51,56,52,59,49],
[48,51,0,53,50,54,52,54,58,50,51,58,53,59,56],
[43,47,48,0,43,48,44,52,56,51,47,57,53,57,52],
[41,41,51,58,0,48,42,45,39,43,46,53,51,47,54],
[40,49,47,53,53,0,45,53,50,52,53,56,58,49,51],
[54,51,49,57,59,56,0,58,59,58,55,60,56,55,61],
[53,53,47,49,56,48,43,0,48,56,52,56,59,54,55],
[43,44,43,45,62,51,42,53,0,46,49,49,53,50,49],
[46,49,51,50,58,49,43,45,55,0,46,57,52,54,52],
[51,50,50,54,55,48,46,49,52,55,0,61,50,49,51],
[45,45,43,44,48,45,41,45,52,44,40,0,54,53,47],
[50,49,48,48,50,43,45,42,48,49,51,47,0,51,49],
[47,42,42,44,54,52,46,47,51,47,52,48,50,0,55],
[50,52,45,49,47,50,40,46,52,49,50,54,52,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 138, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,54,46,57,55,62,53,57,59,71,57,55,56,56],
[38,0,48,49,51,50,47,46,49,63,48,61,58,68,36],
[47,53,0,52,59,59,44,58,51,72,58,63,63,61,40],
[55,52,49,0,51,49,44,42,39,61,50,57,59,48,44],
[44,50,42,50,0,46,40,40,50,71,41,59,51,59,44],
[46,51,42,52,55,0,50,51,54,63,61,46,62,57,50],
[39,54,57,57,61,51,0,55,56,59,53,55,53,50,48],
[48,55,43,59,61,50,46,0,55,61,57,62,60,68,51],
[44,52,50,62,51,47,45,46,0,60,59,50,52,58,39],
[42,38,29,40,30,38,42,40,41,0,44,44,51,53,38],
[30,53,43,51,60,40,48,44,42,57,0,61,51,52,46],
[44,40,38,44,42,55,46,39,51,57,40,0,44,47,42],
[46,43,38,42,50,39,48,41,49,50,50,57,0,55,42],
[45,33,40,53,42,44,51,33,43,48,49,54,46,0,40],
[45,65,61,57,57,51,53,50,62,63,55,59,59,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 139, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,14,69,19,22,47,63,41,19,48,48,25,44,71],
[61,0,22,77,68,30,68,66,44,46,75,37,51,44,53],
[87,79,0,62,87,29,79,56,73,72,87,41,33,56,100],
[32,24,39,0,39,32,39,47,39,46,68,32,24,46,46],
[82,33,14,62,0,29,79,55,62,35,86,40,40,58,64],
[79,71,72,69,72,0,72,94,94,43,94,72,49,55,71],
[54,33,22,62,22,29,0,52,44,22,75,37,14,44,74],
[38,35,45,54,46,7,49,0,45,46,78,14,28,21,52],
[60,57,28,62,39,7,57,56,0,50,101,37,7,29,74],
[82,55,29,55,66,58,79,55,51,0,79,58,51,58,89],
[53,26,14,33,15,7,26,23,0,22,0,15,0,7,67],
[53,64,60,69,61,29,64,87,64,43,86,0,40,43,71],
[76,50,68,77,61,52,87,73,94,50,101,61,0,66,79],
[57,57,45,55,43,46,57,80,72,43,94,58,35,0,71],
[30,48,1,55,37,30,27,49,27,12,34,30,22,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 140, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,68,69,48,63,53,56,60,61,62,64,63,54,51],
[49,0,52,62,51,54,51,49,54,43,60,54,54,57,49],
[33,49,0,55,39,51,43,49,46,52,39,46,52,48,46],
[32,39,46,0,44,46,42,44,49,50,48,49,47,46,47],
[53,50,62,57,0,54,47,50,53,53,55,53,56,54,49],
[38,47,50,55,47,0,49,50,50,48,40,43,36,46,46],
[48,50,58,59,54,52,0,47,57,55,50,54,55,48,54],
[45,52,52,57,51,51,54,0,55,53,42,53,54,55,51],
[41,47,55,52,48,51,44,46,0,53,45,54,50,54,50],
[40,58,49,51,48,53,46,48,48,0,47,52,54,50,44],
[39,41,62,53,46,61,51,59,56,54,0,57,54,53,54],
[37,47,55,52,48,58,47,48,47,49,44,0,49,43,51],
[38,47,49,54,45,65,46,47,51,47,47,52,0,51,52],
[47,44,53,55,47,55,53,46,47,51,48,58,50,0,52],
[50,52,55,54,52,55,47,50,51,57,47,50,49,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 141, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,50,55,51,58,51,57,40,50,41,56,47,43,47],
[55,0,61,56,56,56,64,56,49,52,46,57,55,52,53],
[51,40,0,59,52,50,59,53,39,47,46,58,52,56,64],
[46,45,42,0,53,49,50,58,38,45,42,57,43,50,54],
[50,45,49,48,0,58,59,60,31,46,45,55,57,46,47],
[43,45,51,52,43,0,49,49,32,51,51,50,54,43,49],
[50,37,42,51,42,52,0,45,41,43,41,52,42,44,46],
[44,45,48,43,41,52,56,0,37,52,41,50,48,47,50],
[61,52,62,63,70,69,60,64,0,56,49,61,53,50,61],
[51,49,54,56,55,50,58,49,45,0,48,56,54,48,49],
[60,55,55,59,56,50,60,60,52,53,0,57,51,61,64],
[45,44,43,44,46,51,49,51,40,45,44,0,44,40,44],
[54,46,49,58,44,47,59,53,48,47,50,57,0,56,48],
[58,49,45,51,55,58,57,54,51,53,40,61,45,0,58],
[54,48,37,47,54,52,55,51,40,52,37,57,53,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 142, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,56,60,51,64,60,71,51,51,58,70,58,44,48],
[36,0,57,48,47,69,82,82,44,67,57,60,78,49,57],
[45,44,0,62,46,51,63,66,38,44,53,52,66,39,53],
[41,53,39,0,36,38,58,57,36,38,41,47,57,37,45],
[50,54,55,65,0,58,58,68,46,57,58,57,74,43,63],
[37,32,50,63,43,0,55,63,41,46,52,64,43,38,49],
[41,19,38,43,43,46,0,59,35,47,33,42,41,30,44],
[30,19,35,44,33,38,42,0,18,48,37,33,45,19,41],
[50,57,63,65,55,60,66,83,0,71,61,57,59,58,61],
[50,34,57,63,44,55,54,53,30,0,55,48,49,44,46],
[43,44,48,60,43,49,68,64,40,46,0,63,39,41,50],
[31,41,49,54,44,37,59,68,44,53,38,0,48,26,41],
[43,23,35,44,27,58,60,56,42,52,62,53,0,39,50],
[57,52,62,64,58,63,71,82,43,57,60,75,62,0,62],
[53,44,48,56,38,52,57,60,40,55,51,60,51,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 143, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,50,50,52,48,45,35,55,51,51,40,44,45,48],
[57,0,47,55,47,49,52,51,61,49,45,45,49,56,52],
[51,54,0,55,46,49,51,48,55,45,53,44,54,49,49],
[51,46,46,0,47,38,50,39,45,44,43,39,47,50,51],
[49,54,55,54,0,52,55,39,51,51,50,44,51,45,47],
[53,52,52,63,49,0,65,52,55,60,49,50,51,56,47],
[56,49,50,51,46,36,0,43,56,53,57,51,50,50,52],
[66,50,53,62,62,49,58,0,60,63,62,53,56,60,58],
[46,40,46,56,50,46,45,41,0,52,46,43,49,52,48],
[50,52,56,57,50,41,48,38,49,0,50,43,49,54,43],
[50,56,48,58,51,52,44,39,55,51,0,44,50,45,45],
[61,56,57,62,57,51,50,48,58,58,57,0,51,55,53],
[57,52,47,54,50,50,51,45,52,52,51,50,0,46,53],
[56,45,52,51,56,45,51,41,49,47,56,46,55,0,47],
[53,49,52,50,54,54,49,43,53,58,56,48,48,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 144, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,49,46,53,43,55,55,55,49,45,41,42,50,51],
[51,0,55,45,57,58,58,51,56,47,50,50,49,54,55],
[52,46,0,45,53,41,45,53,58,51,53,47,48,54,51],
[55,56,56,0,51,59,52,60,64,55,62,54,47,59,58],
[48,44,48,50,0,45,51,53,49,42,59,41,41,46,55],
[58,43,60,42,56,0,53,58,63,54,63,43,42,51,57],
[46,43,56,49,50,48,0,50,64,54,51,41,45,49,49],
[46,50,48,41,48,43,51,0,45,44,47,35,44,46,46],
[46,45,43,37,52,38,37,56,0,49,42,40,42,50,46],
[52,54,50,46,59,47,47,57,52,0,56,45,49,54,52],
[56,51,48,39,42,38,50,54,59,45,0,35,45,48,55],
[60,51,54,47,60,58,60,66,61,56,66,0,59,53,59],
[59,52,53,54,60,59,56,57,59,52,56,42,0,49,61],
[51,47,47,42,55,50,52,55,51,47,53,48,52,0,53],
[50,46,50,43,46,44,52,55,55,49,46,42,40,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 145, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,60,47,48,46,44,44,57,46,49,53,58,48,60],
[59,0,54,41,51,45,34,56,55,56,29,47,48,47,59],
[41,47,0,36,40,37,36,40,45,33,45,43,28,29,46],
[54,60,65,0,56,58,48,56,59,42,46,60,49,51,56],
[53,50,61,45,0,48,51,58,49,50,53,59,55,51,50],
[55,56,64,43,53,0,47,45,63,50,43,52,62,53,56],
[57,67,65,53,50,54,0,57,54,57,55,69,50,54,61],
[57,45,61,45,43,56,44,0,51,41,52,61,52,34,57],
[44,46,56,42,52,38,47,50,0,62,40,53,45,43,54],
[55,45,68,59,51,51,44,60,39,0,42,52,49,47,56],
[52,72,56,55,48,58,46,49,61,59,0,75,50,58,54],
[48,54,58,41,42,49,32,40,48,49,26,0,46,40,51],
[43,53,73,52,46,39,51,49,56,52,51,55,0,42,47],
[53,54,72,50,50,48,47,67,58,54,43,61,59,0,53],
[41,42,55,45,51,45,40,44,47,45,47,50,54,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 146, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,51,61,58,50,47,61,52,49,65,60,60,66,58],
[49,0,53,56,43,46,50,54,48,48,56,54,55,56,49],
[50,48,0,62,49,46,46,49,46,51,49,57,49,58,52],
[40,45,39,0,36,43,46,40,44,44,52,51,41,54,46],
[43,58,52,65,0,50,59,55,51,51,59,53,58,62,57],
[51,55,55,58,51,0,52,59,46,53,61,52,51,72,59],
[54,51,55,55,42,49,0,60,50,45,59,59,50,62,54],
[40,47,52,61,46,42,41,0,49,39,54,47,47,57,54],
[49,53,55,57,50,55,51,52,0,51,64,53,53,58,64],
[52,53,50,57,50,48,56,62,50,0,67,55,58,73,55],
[36,45,52,49,42,40,42,47,37,34,0,42,45,56,40],
[41,47,44,50,48,49,42,54,48,46,59,0,50,59,46],
[41,46,52,60,43,50,51,54,48,43,56,51,0,60,46],
[35,45,43,47,39,29,39,44,43,28,45,42,41,0,45],
[43,52,49,55,44,42,47,47,37,46,61,55,55,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 147, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,46,40,50,40,50,38,47,52,52,37,40,40,42],
[45,0,42,43,44,43,49,46,59,54,57,41,42,40,50],
[55,59,0,51,59,55,58,50,56,59,54,44,45,51,55],
[61,58,50,0,55,55,52,55,58,60,65,49,51,52,55],
[51,57,42,46,0,48,60,46,59,56,64,51,46,47,53],
[61,58,46,46,53,0,50,39,59,45,63,49,39,53,55],
[51,52,43,49,41,51,0,53,57,57,59,52,49,50,56],
[63,55,51,46,55,62,48,0,62,59,64,51,49,50,55],
[54,42,45,43,42,42,44,39,0,51,57,50,43,42,52],
[49,47,42,41,45,56,44,42,50,0,60,37,37,46,49],
[49,44,47,36,37,38,42,37,44,41,0,33,34,32,46],
[64,60,57,52,50,52,49,50,51,64,68,0,62,51,66],
[61,59,56,50,55,62,52,52,58,64,67,39,0,51,54],
[61,61,50,49,54,48,51,51,59,55,69,50,50,0,56],
[59,51,46,46,48,46,45,46,49,52,55,35,47,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 148, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,51,31,40,41,44,43,46,52,42,32,54,30,50],
[61,0,63,47,48,49,50,46,49,55,52,52,58,48,49],
[50,38,0,39,49,46,50,46,44,54,46,47,57,37,44],
[70,54,62,0,54,57,55,54,47,58,49,50,65,39,59],
[61,53,52,47,0,51,45,52,44,55,55,45,50,45,51],
[60,52,55,44,50,0,46,49,51,60,56,48,47,43,44],
[57,51,51,46,56,55,0,44,46,53,47,51,54,39,48],
[58,55,55,47,49,52,57,0,60,56,51,47,56,49,54],
[55,52,57,54,57,50,55,41,0,58,45,46,60,39,50],
[49,46,47,43,46,41,48,45,43,0,39,44,51,35,36],
[59,49,55,52,46,45,54,50,56,62,0,58,56,52,47],
[69,49,54,51,56,53,50,54,55,57,43,0,54,42,55],
[47,43,44,36,51,54,47,45,41,50,45,47,0,33,56],
[71,53,64,62,56,58,62,52,62,66,49,59,68,0,62],
[51,52,57,42,50,57,53,47,51,65,54,46,45,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 149, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,53,51,52,52,51,45,52,41,47,47,45,47,49],
[52,0,53,56,55,48,51,56,59,50,52,52,57,51,50],
[48,48,0,48,53,48,50,46,56,43,49,50,51,45,45],
[50,45,53,0,50,46,47,45,50,41,44,48,48,48,47],
[49,46,48,51,0,42,52,42,56,42,48,45,49,41,49],
[49,53,53,55,59,0,53,55,56,53,43,48,43,46,47],
[50,50,51,54,49,48,0,46,58,47,44,48,52,43,50],
[56,45,55,56,59,46,55,0,55,49,53,50,52,48,52],
[49,42,45,51,45,45,43,46,0,44,40,46,43,45,47],
[60,51,58,60,59,48,54,52,57,0,51,53,54,48,52],
[54,49,52,57,53,58,57,48,61,50,0,49,51,47,50],
[54,49,51,53,56,53,53,51,55,48,52,0,54,46,52],
[56,44,50,53,52,58,49,49,58,47,50,47,0,48,52],
[54,50,56,53,60,55,58,53,56,53,54,55,53,0,56],
[52,51,56,54,52,54,51,49,54,49,51,49,49,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 150, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,58,42,34,35,28,30,43,33,54,41,68,35,66],
[60,0,43,66,65,56,50,50,65,65,69,60,82,37,77],
[43,58,0,44,35,48,51,30,52,44,44,57,77,57,76],
[59,35,57,0,29,24,58,42,58,28,65,36,56,20,69],
[67,36,66,72,0,30,60,27,52,68,55,52,64,46,47],
[66,45,53,77,71,0,45,52,78,57,74,69,77,52,69],
[73,51,50,43,41,56,0,36,58,51,52,58,83,43,82],
[71,51,71,59,74,49,65,0,67,73,73,52,81,58,71],
[58,36,49,43,49,23,43,34,0,36,58,53,52,24,43],
[68,36,57,73,33,44,50,28,65,0,56,52,77,60,74],
[47,32,57,36,46,27,49,28,43,45,0,48,68,26,60],
[60,41,44,65,49,32,43,49,48,49,53,0,60,30,60],
[33,19,24,45,37,24,18,20,49,24,33,41,0,25,54],
[66,64,44,81,55,49,58,43,77,41,75,71,76,0,89],
[35,24,25,32,54,32,19,30,58,27,41,41,47,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 151, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,57,41,49,41,50,39,49,52,65,51,57,53,34],
[49,0,51,48,52,37,38,39,36,52,47,59,61,51,40],
[44,50,0,47,44,40,48,40,46,56,58,54,52,58,32],
[60,53,54,0,51,49,55,51,52,52,63,58,63,58,40],
[52,49,57,50,0,50,47,46,44,49,56,53,46,52,43],
[60,64,61,52,51,0,41,48,49,55,63,56,59,71,52],
[51,63,53,46,54,60,0,49,47,56,56,68,57,56,43],
[62,62,61,50,55,53,52,0,55,67,67,55,68,58,37],
[52,65,55,49,57,52,54,46,0,56,69,56,56,56,50],
[49,49,45,49,52,46,45,34,45,0,57,59,55,60,45],
[36,54,43,38,45,38,45,34,32,44,0,57,58,46,40],
[50,42,47,43,48,45,33,46,45,42,44,0,59,59,44],
[44,40,49,38,55,42,44,33,45,46,43,42,0,46,44],
[48,50,43,43,49,30,45,43,45,41,55,42,55,0,47],
[67,61,69,61,58,49,58,64,51,56,61,57,57,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 152, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,59,42,46,53,44,43,46,47,42,44,49,53,60],
[56,0,60,47,51,53,54,45,57,66,54,61,63,64,61],
[42,41,0,49,60,49,51,45,50,53,46,50,57,53,63],
[59,54,52,0,58,53,57,44,52,66,55,61,52,60,69],
[55,50,41,43,0,52,48,40,44,48,45,47,48,49,59],
[48,48,52,48,49,0,48,46,46,57,45,46,57,52,57],
[57,47,50,44,53,53,0,38,48,52,51,51,56,51,63],
[58,56,56,57,61,55,63,0,54,69,46,55,59,58,61],
[55,44,51,49,57,55,53,47,0,53,50,54,57,50,57],
[54,35,48,35,53,44,49,32,48,0,45,44,45,49,60],
[59,47,55,46,56,56,50,55,51,56,0,64,64,58,62],
[57,40,51,40,54,55,50,46,47,57,37,0,51,49,60],
[52,38,44,49,53,44,45,42,44,56,37,50,0,44,59],
[48,37,48,41,52,49,50,43,51,52,43,52,57,0,65],
[41,40,38,32,42,44,38,40,44,41,39,41,42,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 153, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,31,46,50,52,41,42,50,43,38,42,43,52,46],
[47,0,45,49,59,48,53,52,43,51,47,46,47,44,53],
[70,56,0,54,59,57,53,57,58,50,57,59,58,60,52],
[55,52,47,0,53,46,47,48,58,52,51,45,49,53,48],
[51,42,42,48,0,46,43,44,42,39,39,46,49,44,41],
[49,53,44,55,55,0,48,53,48,45,47,44,49,54,48],
[60,48,48,54,58,53,0,52,49,53,51,51,49,53,51],
[59,49,44,53,57,48,49,0,49,50,45,56,53,52,51],
[51,58,43,43,59,53,52,52,0,51,49,43,46,53,51],
[58,50,51,49,62,56,48,51,50,0,52,45,47,50,54],
[63,54,44,50,62,54,50,56,52,49,0,55,51,55,55],
[59,55,42,56,55,57,50,45,58,56,46,0,51,46,51],
[58,54,43,52,52,52,52,48,55,54,50,50,0,49,49],
[49,57,41,48,57,47,48,49,48,51,46,55,52,0,51],
[55,48,49,53,60,53,50,50,50,47,46,50,52,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 154, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,43,49,52,47,40,45,64,31,47,47,39,45,33],
[62,0,43,55,55,65,47,56,70,44,54,70,53,52,53],
[58,58,0,56,60,60,60,55,71,48,55,55,53,56,54],
[52,46,45,0,51,55,48,55,62,40,47,62,51,48,43],
[49,46,41,50,0,54,42,50,62,39,51,59,40,51,51],
[54,36,41,46,47,0,40,39,53,40,37,55,49,44,48],
[61,54,41,53,59,61,0,56,67,49,60,55,43,56,49],
[56,45,46,46,51,62,45,0,63,47,49,56,43,49,44],
[37,31,30,39,39,48,34,38,0,36,45,36,35,40,34],
[70,57,53,61,62,61,52,54,65,0,62,65,55,55,47],
[54,47,46,54,50,64,41,52,56,39,0,57,42,49,43],
[54,31,46,39,42,46,46,45,65,36,44,0,42,50,33],
[62,48,48,50,61,52,58,58,66,46,59,59,0,58,49],
[56,49,45,53,50,57,45,52,61,46,52,51,43,0,49],
[68,48,47,58,50,53,52,57,67,54,58,68,52,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 155, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,57,78,56,50,46,53,59,56,57,58,68,55,58],
[30,0,47,50,30,43,39,43,50,40,46,48,45,37,44],
[44,54,0,55,42,47,47,52,55,54,40,68,52,54,48],
[23,51,46,0,40,49,38,40,48,42,45,49,51,45,49],
[45,71,59,61,0,55,70,53,52,49,61,70,56,61,59],
[51,58,54,52,46,0,43,48,56,52,58,62,53,58,50],
[55,62,54,63,31,58,0,46,54,52,51,59,60,67,44],
[48,58,49,61,48,53,55,0,55,48,49,51,59,55,49],
[42,51,46,53,49,45,47,46,0,55,51,54,53,48,47],
[45,61,47,59,52,49,49,53,46,0,56,67,57,47,59],
[44,55,61,56,40,43,50,52,50,45,0,62,48,49,46],
[43,53,33,52,31,39,42,50,47,34,39,0,48,45,46],
[33,56,49,50,45,48,41,42,48,44,53,53,0,45,52],
[46,64,47,56,40,43,34,46,53,54,52,56,56,0,56],
[43,57,53,52,42,51,57,52,54,42,55,55,49,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 156, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,27,33,24,26,37,29,16,3,24,25,10,19,38],
[67,0,33,32,31,46,65,68,56,47,36,48,48,32,59],
[74,68,0,73,62,59,58,90,49,58,56,53,59,48,77],
[68,69,28,0,38,58,57,74,33,34,55,47,39,30,31],
[77,70,39,63,0,81,86,59,48,64,70,37,46,55,76],
[75,55,42,43,20,0,51,58,34,33,45,39,44,31,37],
[64,36,43,44,15,50,0,45,34,22,45,34,45,16,24],
[72,33,11,27,42,43,56,0,26,19,32,43,41,27,48],
[85,45,52,68,53,67,67,75,0,73,73,44,81,68,66],
[98,54,43,67,37,68,79,82,28,0,53,61,63,37,38],
[77,65,45,46,31,56,56,69,28,48,0,50,47,37,46],
[76,53,48,54,64,62,67,58,57,40,51,0,40,47,57],
[91,53,42,62,55,57,56,60,20,38,54,61,0,23,67],
[82,69,53,71,46,70,85,74,33,64,64,54,78,0,63],
[63,42,24,70,25,64,77,53,35,63,55,44,34,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 157, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,45,43,46,55,49,50,47,46,56,51,54,48,44],
[49,0,51,56,51,49,48,36,47,48,49,50,53,53,51],
[56,50,0,64,59,55,52,61,54,57,58,49,60,61,62],
[58,45,37,0,39,55,49,37,47,51,52,49,44,39,53],
[55,50,42,62,0,52,57,45,56,56,50,65,57,57,59],
[46,52,46,46,49,0,53,49,49,50,52,49,55,53,57],
[52,53,49,52,44,48,0,47,43,44,45,51,54,60,55],
[51,65,40,64,56,52,54,0,61,56,55,59,62,63,55],
[54,54,47,54,45,52,58,40,0,47,37,49,53,55,49],
[55,53,44,50,45,51,57,45,54,0,47,61,62,55,58],
[45,52,43,49,51,49,56,46,64,54,0,50,61,61,57],
[50,51,52,52,36,52,50,42,52,40,51,0,63,55,55],
[47,48,41,57,44,46,47,39,48,39,40,38,0,52,49],
[53,48,40,62,44,48,41,38,46,46,40,46,49,0,50],
[57,50,39,48,42,44,46,46,52,43,44,46,52,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 158, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,59,71,57,65,62,52,61,60,60,60,42,71,53],
[42,0,52,56,43,54,48,50,48,48,51,57,40,50,40],
[42,49,0,64,49,65,59,51,62,55,66,68,46,68,53],
[30,45,37,0,54,50,49,45,51,59,60,65,45,60,40],
[44,58,52,47,0,58,53,50,48,51,59,58,49,51,40],
[36,47,36,51,43,0,45,47,44,39,48,53,31,42,35],
[39,53,42,52,48,56,0,49,49,46,53,54,29,53,46],
[49,51,50,56,51,54,52,0,44,42,58,48,35,64,40],
[40,53,39,50,53,57,52,57,0,52,60,49,43,49,45],
[41,53,46,42,50,62,55,59,49,0,52,53,52,59,55],
[41,50,35,41,42,53,48,43,41,49,0,41,37,58,35],
[41,44,33,36,43,48,47,53,52,48,60,0,38,49,37],
[59,61,55,56,52,70,72,66,58,49,64,63,0,59,51],
[30,51,33,41,50,59,48,37,52,42,43,52,42,0,34],
[48,61,48,61,61,66,55,61,56,46,66,64,50,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 159, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,70,59,51,70,46,51,63,52,55,38,35,63,48],
[36,0,60,46,24,78,51,53,59,45,42,61,47,46,48],
[31,41,0,52,25,45,29,24,54,45,43,39,25,42,35],
[42,55,49,0,51,77,41,50,56,64,43,41,42,39,35],
[50,77,76,50,0,81,63,63,52,45,43,73,54,52,50],
[31,23,56,24,20,0,41,42,47,36,34,42,21,25,37],
[55,50,72,60,38,60,0,61,64,57,49,64,48,56,21],
[50,48,77,51,38,59,40,0,59,61,56,55,19,49,40],
[38,42,47,45,49,54,37,42,0,40,31,34,45,32,33],
[49,56,56,37,56,65,44,40,61,0,36,62,55,42,31],
[46,59,58,58,58,67,52,45,70,65,0,50,61,43,39],
[63,40,62,60,28,59,37,46,67,39,51,0,26,53,53],
[66,54,76,59,47,80,53,82,56,46,40,75,0,41,52],
[38,55,59,62,49,76,45,52,69,59,58,48,60,0,34],
[53,53,66,66,51,64,80,61,68,70,62,48,49,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 160, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,51,57,58,64,52,60,60,55,52,53,49,32,53],
[62,0,61,62,69,61,43,68,56,63,54,59,44,45,49],
[50,40,0,58,51,49,51,62,50,71,70,49,54,45,50],
[44,39,43,0,52,48,40,59,36,52,47,42,28,34,34],
[43,32,50,49,0,67,45,50,49,55,48,52,47,45,44],
[37,40,52,53,34,0,36,40,42,52,53,37,52,39,42],
[49,58,50,61,56,65,0,64,56,62,66,52,45,53,55],
[41,33,39,42,51,61,37,0,48,42,46,41,49,33,40],
[41,45,51,65,52,59,45,53,0,59,54,43,52,40,47],
[46,38,30,49,46,49,39,59,42,0,61,30,32,41,41],
[49,47,31,54,53,48,35,55,47,40,0,38,40,43,50],
[48,42,52,59,49,64,49,60,58,71,63,0,57,47,54],
[52,57,47,73,54,49,56,52,49,69,61,44,0,50,68],
[69,56,56,67,56,62,48,68,61,60,58,54,51,0,60],
[48,52,51,67,57,59,46,61,54,60,51,47,33,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 161, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,64,66,47,45,46,56,32,46,71,54,49,61,53],
[29,0,51,57,37,24,30,39,40,34,54,30,44,64,53],
[37,50,0,62,31,50,30,48,22,56,58,41,43,64,68],
[35,44,39,0,28,24,11,31,13,34,51,41,44,52,49],
[54,64,70,73,0,60,55,48,45,69,63,46,56,75,76],
[56,77,51,77,41,0,48,50,53,63,70,59,54,75,73],
[55,71,71,90,46,53,0,49,33,64,72,56,56,65,75],
[45,62,53,70,53,51,52,0,37,53,79,55,52,75,71],
[69,61,79,88,56,48,68,64,0,75,71,54,59,76,69],
[55,67,45,67,32,38,37,48,26,0,72,51,49,62,61],
[30,47,43,50,38,31,29,22,30,29,0,35,33,56,41],
[47,71,60,60,55,42,45,46,47,50,66,0,47,60,53],
[52,57,58,57,45,47,45,49,42,52,68,54,0,67,70],
[40,37,37,49,26,26,36,26,25,39,45,41,34,0,64],
[48,48,33,52,25,28,26,30,32,40,60,48,31,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 162, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,47,56,52,46,48,56,55,45,46,49,47,44,55],
[49,0,45,56,40,42,41,54,57,53,42,52,49,49,56],
[54,56,0,50,55,45,49,47,60,51,50,47,49,49,62],
[45,45,51,0,48,48,46,50,51,57,49,42,54,51,56],
[49,61,46,53,0,50,43,50,51,46,43,52,44,48,58],
[55,59,56,53,51,0,52,50,56,55,43,53,54,47,64],
[53,60,52,55,58,49,0,55,55,50,52,48,56,53,63],
[45,47,54,51,51,51,46,0,53,53,41,46,52,44,58],
[46,44,41,50,50,45,46,48,0,47,47,46,56,49,59],
[56,48,50,44,55,46,51,48,54,0,51,51,50,53,53],
[55,59,51,52,58,58,49,60,54,50,0,52,56,51,65],
[52,49,54,59,49,48,53,55,55,50,49,0,50,53,48],
[54,52,52,47,57,47,45,49,45,51,45,51,0,52,60],
[57,52,52,50,53,54,48,57,52,48,50,48,49,0,64],
[46,45,39,45,43,37,38,43,42,48,36,53,41,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 163, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,50,57,52,48,57,58,59,55,62,53,54,55,41],
[47,0,45,56,49,47,52,53,51,54,56,51,56,54,48],
[51,56,0,63,49,56,58,58,56,60,64,53,65,55,43],
[44,45,38,0,36,46,42,45,39,45,55,46,57,43,43],
[49,52,52,65,0,60,56,62,56,53,70,53,66,56,52],
[53,54,45,55,41,0,51,52,49,56,62,47,59,53,41],
[44,49,43,59,45,50,0,50,48,46,58,49,59,43,41],
[43,48,43,56,39,49,51,0,48,53,64,53,60,44,41],
[42,50,45,62,45,52,53,53,0,50,54,50,54,50,50],
[46,47,41,56,48,45,55,48,51,0,57,46,55,47,47],
[39,45,37,46,31,39,43,37,47,44,0,42,45,41,36],
[48,50,48,55,48,54,52,48,51,55,59,0,52,55,50],
[47,45,36,44,35,42,42,41,47,46,56,49,0,49,37],
[46,47,46,58,45,48,58,57,51,54,60,46,52,0,39],
[60,53,58,58,49,60,60,60,51,54,65,51,64,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 164, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,57,47,45,50,54,59,51,65,57,40,39,57,47],
[56,0,57,49,42,52,47,54,46,61,52,45,44,50,45],
[44,44,0,47,46,43,47,52,41,53,46,50,40,43,45],
[54,52,54,0,50,42,44,54,55,56,50,43,42,49,43],
[56,59,55,51,0,52,61,64,51,66,54,42,58,55,50],
[51,49,58,59,49,0,49,57,52,60,49,46,43,50,43],
[47,54,54,57,40,52,0,56,53,56,47,48,50,47,49],
[42,47,49,47,37,44,45,0,47,53,47,43,42,49,38],
[50,55,60,46,50,49,48,54,0,59,58,47,49,45,50],
[36,40,48,45,35,41,45,48,42,0,39,34,40,39,35],
[44,49,55,51,47,52,54,54,43,62,0,41,41,53,50],
[61,56,51,58,59,55,53,58,54,67,60,0,58,50,54],
[62,57,61,59,43,58,51,59,52,61,60,43,0,57,51],
[44,51,58,52,46,51,54,52,56,62,48,51,44,0,38],
[54,56,56,58,51,58,52,63,51,66,51,47,50,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 165, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,43,59,48,55,47,44,56,68,55,53,61,52,57],
[40,0,35,59,38,57,48,48,44,49,39,55,57,48,39],
[58,66,0,56,54,59,62,58,52,67,50,55,55,58,45],
[42,42,45,0,41,48,52,40,47,37,37,40,49,37,35],
[53,63,47,60,0,65,54,62,56,64,46,41,64,54,40],
[46,44,42,53,36,0,44,59,57,52,49,42,45,40,37],
[54,53,39,49,47,57,0,57,42,61,42,52,54,45,57],
[57,53,43,61,39,42,44,0,41,60,42,50,47,45,42],
[45,57,49,54,45,44,59,60,0,50,43,48,53,42,45],
[33,52,34,64,37,49,40,41,51,0,34,38,43,51,34],
[46,62,51,64,55,52,59,59,58,67,0,53,52,57,47],
[48,46,46,61,60,59,49,51,53,63,48,0,62,50,42],
[40,44,46,52,37,56,47,54,48,58,49,39,0,52,25],
[49,53,43,64,47,61,56,56,59,50,44,51,49,0,42],
[44,62,56,66,61,64,44,59,56,67,54,59,76,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 166, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,45,62,64,51,40,45,46,66,46,49,59,51,52],
[47,0,49,61,60,51,39,35,58,61,48,55,51,49,57],
[56,52,0,63,69,46,41,36,47,58,52,52,57,52,52],
[39,40,38,0,43,47,35,34,40,54,36,49,45,31,43],
[37,41,32,58,0,37,34,44,41,50,46,50,39,38,47],
[50,50,55,54,64,0,43,36,53,60,39,54,45,53,47],
[61,62,60,66,67,58,0,48,62,61,57,60,49,57,59],
[56,66,65,67,57,65,53,0,62,67,43,63,63,47,52],
[55,43,54,61,60,48,39,39,0,64,40,61,48,56,50],
[35,40,43,47,51,41,40,34,37,0,40,44,47,36,33],
[55,53,49,65,55,62,44,58,61,61,0,57,44,49,50],
[52,46,49,52,51,47,41,38,40,57,44,0,53,41,42],
[42,50,44,56,62,56,52,38,53,54,57,48,0,43,58],
[50,52,49,70,63,48,44,54,45,65,52,60,58,0,52],
[49,44,49,58,54,54,42,49,51,68,51,59,43,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 167, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,59,61,49,57,63,56,58,59,58,64,47,60,63],
[52,0,50,56,36,53,61,52,55,58,50,55,52,53,51],
[42,51,0,43,38,46,60,42,48,54,37,61,49,50,46],
[40,45,58,0,43,63,63,45,52,59,46,60,44,52,57],
[52,65,63,58,0,53,56,63,48,63,56,68,49,55,54],
[44,48,55,38,48,0,54,49,52,60,35,51,45,37,39],
[38,40,41,38,45,47,0,53,41,55,31,62,38,49,40],
[45,49,59,56,38,52,48,0,51,73,51,54,54,52,49],
[43,46,53,49,53,49,60,50,0,59,39,48,46,53,46],
[42,43,47,42,38,41,46,28,42,0,26,45,38,50,49],
[43,51,64,55,45,66,70,50,62,75,0,66,58,53,57],
[37,46,40,41,33,50,39,47,53,56,35,0,33,37,35],
[54,49,52,57,52,56,63,47,55,63,43,68,0,58,56],
[41,48,51,49,46,64,52,49,48,51,48,64,43,0,49],
[38,50,55,44,47,62,61,52,55,52,44,66,45,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 168, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,44,53,42,45,39,48,42,47,37,41,50,43,41],
[58,0,54,66,55,59,54,64,64,50,52,61,54,59,47],
[57,47,0,57,52,50,47,55,57,45,50,57,45,58,46],
[48,35,44,0,44,44,28,47,49,40,34,44,48,36,41],
[59,46,49,57,0,51,57,59,55,55,51,58,50,52,35],
[56,42,51,57,50,0,38,56,54,42,43,45,51,46,50],
[62,47,54,73,44,63,0,65,59,54,55,63,62,63,54],
[53,37,46,54,42,45,36,0,47,37,40,46,39,42,40],
[59,37,44,52,46,47,42,54,0,49,42,59,50,53,48],
[54,51,56,61,46,59,47,64,52,0,55,54,55,58,52],
[64,49,51,67,50,58,46,61,59,46,0,56,50,59,45],
[60,40,44,57,43,56,38,55,42,47,45,0,53,50,50],
[51,47,56,53,51,50,39,62,51,46,51,48,0,49,54],
[58,42,43,65,49,55,38,59,48,43,42,51,52,0,45],
[60,54,55,60,66,51,47,61,53,49,56,51,47,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 169, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,55,39,37,36,35,45,55,46,40,48,45,35,55],
[67,0,61,61,61,51,55,55,73,47,53,75,74,69,64],
[46,40,0,50,36,41,49,46,49,44,50,59,62,45,65],
[62,40,51,0,38,41,50,46,48,50,45,47,61,47,49],
[64,40,65,63,0,57,63,64,54,47,60,57,64,62,62],
[65,50,60,60,44,0,58,53,69,51,63,58,52,58,62],
[66,46,52,51,38,43,0,52,67,44,52,56,64,47,58],
[56,46,55,55,37,48,49,0,61,58,55,48,56,45,65],
[46,28,52,53,47,32,34,40,0,41,53,47,55,44,57],
[55,54,57,51,54,50,57,43,60,0,63,56,63,60,58],
[61,48,51,56,41,38,49,46,48,38,0,56,50,42,53],
[53,26,42,54,44,43,45,53,54,45,45,0,55,45,59],
[56,27,39,40,37,49,37,45,46,38,51,46,0,41,52],
[66,32,56,54,39,43,54,56,57,41,59,56,60,0,52],
[46,37,36,52,39,39,43,36,44,43,48,42,49,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 170, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,47,50,55,51,53,48,62,52,44,55,59,53,54],
[51,0,43,52,47,49,55,46,44,56,49,48,50,54,57],
[54,58,0,49,50,56,55,51,52,50,53,51,56,58,49],
[51,49,52,0,46,50,48,51,49,50,48,50,58,57,52],
[46,54,51,55,0,53,54,47,48,47,49,55,53,47,49],
[50,52,45,51,48,0,49,48,49,51,52,55,57,51,55],
[48,46,46,53,47,52,0,49,49,52,46,55,48,52,54],
[53,55,50,50,54,53,52,0,52,60,50,59,59,49,52],
[39,57,49,52,53,52,52,49,0,53,51,55,61,55,49],
[49,45,51,51,54,50,49,41,48,0,46,58,50,44,50],
[57,52,48,53,52,49,55,51,50,55,0,57,49,58,58],
[46,53,50,51,46,46,46,42,46,43,44,0,53,44,52],
[42,51,45,43,48,44,53,42,40,51,52,48,0,46,49],
[48,47,43,44,54,50,49,52,46,57,43,57,55,0,49],
[47,44,52,49,52,46,47,49,52,51,43,49,52,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 171, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,101,44,73,52,93,73,80,30,80,52,101,73,73],
[0,0,43,44,22,22,14,29,22,0,36,22,22,52,43],
[0,58,0,30,52,38,30,59,58,30,66,22,36,38,22],
[57,57,71,0,43,43,57,57,57,29,57,22,57,73,43],
[28,79,49,58,0,36,28,49,28,0,36,42,28,66,43],
[49,79,63,58,65,0,79,79,58,30,66,14,49,51,35],
[8,87,71,44,73,22,0,29,66,38,66,22,36,52,43],
[28,72,42,44,52,22,72,0,72,30,80,22,42,52,22],
[21,79,43,44,73,43,35,29,0,51,87,22,43,73,43],
[71,101,71,72,101,71,63,71,50,0,80,50,71,101,43],
[21,65,35,44,65,35,35,21,14,21,0,14,35,65,35],
[49,79,79,79,59,87,79,79,79,51,87,0,49,87,59],
[0,79,65,44,73,52,65,59,58,30,66,52,0,52,73],
[28,49,63,28,35,50,49,49,28,0,36,14,49,0,43],
[28,58,79,58,58,66,58,79,58,58,66,42,28,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 172, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,49,50,49,42,53,30,47,34,53,37,45,34,52],
[59,0,56,52,64,59,59,42,59,57,52,60,60,51,50],
[52,45,0,40,43,45,51,35,39,46,44,40,43,45,53],
[51,49,61,0,46,63,43,37,51,54,47,38,41,53,60],
[52,37,58,55,0,58,70,44,56,45,52,52,44,45,45],
[59,42,56,38,43,0,65,44,54,42,55,47,50,46,51],
[48,42,50,58,31,36,0,26,49,41,47,47,37,42,45],
[71,59,66,64,57,57,75,0,68,57,60,69,63,49,59],
[54,42,62,50,45,47,52,33,0,56,41,47,46,45,52],
[67,44,55,47,56,59,60,44,45,0,58,49,43,55,47],
[48,49,57,54,49,46,54,41,60,43,0,56,44,47,45],
[64,41,61,63,49,54,54,32,54,52,45,0,50,51,48],
[56,41,58,60,57,51,64,38,55,58,57,51,0,45,54],
[67,50,56,48,56,55,59,52,56,46,54,50,56,0,55],
[49,51,48,41,56,50,56,42,49,54,56,53,47,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 173, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,55,57,46,56,49,58,56,54,59,57,52,54,52],
[47,0,58,57,51,61,52,58,55,55,58,64,55,51,56],
[46,43,0,50,38,48,49,49,49,51,54,48,53,46,48],
[44,44,51,0,37,50,39,44,46,54,55,54,52,46,48],
[55,50,63,64,0,61,56,53,53,56,61,52,60,57,56],
[45,40,53,51,40,0,48,52,40,48,47,46,55,48,48],
[52,49,52,62,45,53,0,52,52,55,60,58,60,54,47],
[43,43,52,57,48,49,49,0,45,46,53,49,53,53,50],
[45,46,52,55,48,61,49,56,0,54,55,55,57,55,57],
[47,46,50,47,45,53,46,55,47,0,51,52,55,48,53],
[42,43,47,46,40,54,41,48,46,50,0,48,50,51,44],
[44,37,53,47,49,55,43,52,46,49,53,0,48,47,41],
[49,46,48,49,41,46,41,48,44,46,51,53,0,45,43],
[47,50,55,55,44,53,47,48,46,53,50,54,56,0,54],
[49,45,53,53,45,53,54,51,44,48,57,60,58,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 174, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,57,49,42,43,55,43,65,55,37,50,60,50,50],
[42,0,55,44,35,59,54,55,69,43,64,47,36,23,60],
[44,46,0,58,23,62,63,67,84,51,56,60,47,48,48],
[52,57,43,0,45,75,70,68,62,54,56,64,37,46,50],
[59,66,78,56,0,55,79,78,81,72,62,78,63,43,75],
[58,42,39,26,46,0,52,55,62,55,41,44,34,33,45],
[46,47,38,31,22,49,0,41,58,44,41,42,32,30,42],
[58,46,34,33,23,46,60,0,62,66,39,48,40,28,44],
[36,32,17,39,20,39,43,39,0,43,35,42,22,31,25],
[46,58,50,47,29,46,57,35,58,0,39,40,51,54,51],
[64,37,45,45,39,60,60,62,66,62,0,51,39,37,40],
[51,54,41,37,23,57,59,53,59,61,50,0,48,36,46],
[41,65,54,64,38,67,69,61,79,50,62,53,0,42,66],
[51,78,53,55,58,68,71,73,70,47,64,65,59,0,62],
[51,41,53,51,26,56,59,57,76,50,61,55,35,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 175, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,52,37,39,33,41,47,49,45,50,38,35,38,41],
[51,0,50,41,40,41,37,42,55,41,56,44,38,42,39],
[49,51,0,42,50,40,47,42,53,51,54,46,47,37,51],
[64,60,59,0,52,42,49,46,53,49,56,55,52,44,50],
[62,61,51,49,0,53,53,54,54,51,58,54,46,46,56],
[68,60,61,59,48,0,46,59,55,51,59,44,64,43,51],
[60,64,54,52,48,55,0,60,50,52,57,53,56,51,53],
[54,59,59,55,47,42,41,0,51,55,55,48,43,42,40],
[52,46,48,48,47,46,51,50,0,43,53,47,43,36,41],
[56,60,50,52,50,50,49,46,58,0,49,49,55,46,42],
[51,45,47,45,43,42,44,46,48,52,0,39,39,36,42],
[63,57,55,46,47,57,48,53,54,52,62,0,41,44,61],
[66,63,54,49,55,37,45,58,58,46,62,60,0,46,61],
[63,59,64,57,55,58,50,59,65,55,65,57,55,0,54],
[60,62,50,51,45,50,48,61,60,59,59,40,40,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 176, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,59,51,53,49,62,57,54,56,53,54,58,59,51],
[42,0,46,53,39,40,49,42,43,47,45,43,46,45,41],
[42,55,0,53,40,49,50,46,49,58,50,54,58,55,53],
[50,48,48,0,46,50,52,48,42,53,54,59,52,58,49],
[48,62,61,55,0,53,56,47,54,57,54,62,56,62,54],
[52,61,52,51,48,0,52,47,57,60,44,66,64,56,55],
[39,52,51,49,45,49,0,54,42,54,51,57,57,54,48],
[44,59,55,53,54,54,47,0,51,55,48,61,61,59,55],
[47,58,52,59,47,44,59,50,0,54,53,59,60,61,51],
[45,54,43,48,44,41,47,46,47,0,48,59,48,48,46],
[48,56,51,47,47,57,50,53,48,53,0,54,54,58,48],
[47,58,47,42,39,35,44,40,42,42,47,0,49,49,49],
[43,55,43,49,45,37,44,40,41,53,47,52,0,53,48],
[42,56,46,43,39,45,47,42,40,53,43,52,48,0,44],
[50,60,48,52,47,46,53,46,50,55,53,52,53,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 177, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,53,50,55,59,56,59,54,54,49,52,49,64,55],
[48,0,51,43,55,65,53,51,48,43,47,52,47,60,43],
[48,50,0,46,55,60,55,50,49,50,49,46,48,59,47],
[51,58,55,0,52,61,55,56,50,52,50,54,51,53,50],
[46,46,46,49,0,53,49,48,49,40,48,46,47,56,48],
[42,36,41,40,48,0,48,39,40,39,44,46,45,46,43],
[45,48,46,46,52,53,0,42,54,47,50,46,48,51,50],
[42,50,51,45,53,62,59,0,53,49,51,50,52,65,48],
[47,53,52,51,52,61,47,48,0,45,49,50,55,58,50],
[47,58,51,49,61,62,54,52,56,0,52,50,53,59,54],
[52,54,52,51,53,57,51,50,52,49,0,55,51,56,51],
[49,49,55,47,55,55,55,51,51,51,46,0,53,52,50],
[52,54,53,50,54,56,53,49,46,48,50,48,0,62,54],
[37,41,42,48,45,55,50,36,43,42,45,49,39,0,43],
[46,58,54,51,53,58,51,53,51,47,50,51,47,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 178, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,56,50,52,55,57,42,49,56,46,57,56,40,47],
[50,0,60,47,54,50,56,35,52,58,52,56,52,47,43],
[45,41,0,41,48,56,44,39,52,41,44,56,47,39,41],
[51,54,60,0,66,59,51,49,59,58,44,51,54,54,62],
[49,47,53,35,0,53,54,42,52,42,43,59,45,49,46],
[46,51,45,42,48,0,48,30,48,46,31,47,47,41,41],
[44,45,57,50,47,53,0,44,51,46,44,50,46,37,42],
[59,66,62,52,59,71,57,0,60,50,50,58,57,46,63],
[52,49,49,42,49,53,50,41,0,48,50,51,57,46,49],
[45,43,60,43,59,55,55,51,53,0,52,52,60,38,50],
[55,49,57,57,58,70,57,51,51,49,0,56,54,50,59],
[44,45,45,50,42,54,51,43,50,49,45,0,47,50,54],
[45,49,54,47,56,54,55,44,44,41,47,54,0,43,45],
[61,54,62,47,52,60,64,55,55,63,51,51,58,0,55],
[54,58,60,39,55,60,59,38,52,51,42,47,56,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 179, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,57,53,49,51,60,51,50,60,64,56,45,64,44],
[35,0,49,33,16,36,28,25,58,41,33,29,31,37,32],
[44,52,0,47,40,39,53,37,54,43,41,35,44,44,34],
[48,68,54,0,40,59,57,51,58,55,53,53,35,68,35],
[52,85,61,61,0,46,65,49,64,57,64,67,40,58,50],
[50,65,62,42,55,0,44,39,47,47,48,39,36,63,42],
[41,73,48,44,36,57,0,40,60,46,51,38,34,48,49],
[50,76,64,50,52,62,61,0,66,66,56,55,39,65,52],
[51,43,47,43,37,54,41,35,0,43,39,43,39,49,32],
[41,60,58,46,44,54,55,35,58,0,50,51,39,41,56],
[37,68,60,48,37,53,50,45,62,51,0,46,41,66,47],
[45,72,66,48,34,62,63,46,58,50,55,0,42,55,51],
[56,70,57,66,61,65,67,62,62,62,60,59,0,67,45],
[37,64,57,33,43,38,53,36,52,60,35,46,34,0,42],
[57,69,67,66,51,59,52,49,69,45,54,50,56,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 180, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,47,51,55,49,51,57,45,62,52,43,39,51,51],
[56,0,45,48,53,50,49,53,41,56,47,43,43,50,45],
[54,56,0,56,58,56,58,48,53,58,58,42,46,57,43],
[50,53,45,0,51,52,50,51,44,56,54,42,43,54,54],
[46,48,43,50,0,49,46,47,44,51,50,45,34,49,47],
[52,51,45,49,52,0,46,48,40,51,47,46,35,51,52],
[50,52,43,51,55,55,0,53,48,54,51,40,44,50,52],
[44,48,53,50,54,53,48,0,38,55,55,49,38,53,51],
[56,60,48,57,57,61,53,63,0,61,55,48,60,56,59],
[39,45,43,45,50,50,47,46,40,0,51,42,44,48,54],
[49,54,43,47,51,54,50,46,46,50,0,47,41,47,45],
[58,58,59,59,56,55,61,52,53,59,54,0,46,52,56],
[62,58,55,58,67,66,57,63,41,57,60,55,0,61,56],
[50,51,44,47,52,50,51,48,45,53,54,49,40,0,46],
[50,56,58,47,54,49,49,50,42,47,56,45,45,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 181, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,54,52,48,49,49,52,56,47,48,58,55,50,49],
[47,0,49,40,47,42,51,40,45,38,47,49,46,41,39],
[47,52,0,51,50,53,55,54,52,51,57,57,53,49,54],
[49,61,50,0,56,53,61,55,59,49,56,53,55,56,53],
[53,54,51,45,0,48,52,52,61,54,51,54,53,51,49],
[52,59,48,48,53,0,57,54,54,50,51,53,54,47,42],
[52,50,46,40,49,44,0,46,50,46,49,44,55,42,42],
[49,61,47,46,49,47,55,0,60,53,50,54,55,49,41],
[45,56,49,42,40,47,51,41,0,45,45,50,48,46,37],
[54,63,50,52,47,51,55,48,56,0,51,52,55,51,49],
[53,54,44,45,50,50,52,51,56,50,0,55,51,53,40],
[43,52,44,48,47,48,57,47,51,49,46,0,53,43,45],
[46,55,48,46,48,47,46,46,53,46,50,48,0,46,48],
[51,60,52,45,50,54,59,52,55,50,48,58,55,0,48],
[52,62,47,48,52,59,59,60,64,52,61,56,53,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 182, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,49,52,51,55,50,54,53,65,48,50,43,54,47],
[55,0,59,54,55,58,55,47,66,57,58,55,55,54,48],
[52,42,0,44,49,49,43,49,50,56,40,47,38,57,58],
[49,47,57,0,57,58,54,45,57,52,52,48,45,58,59],
[50,46,52,44,0,49,49,48,51,52,43,45,45,51,59],
[46,43,52,43,52,0,43,52,57,56,50,46,45,52,50],
[51,46,58,47,52,58,0,49,57,56,61,45,38,53,56],
[47,54,52,56,53,49,52,0,60,51,59,56,42,52,59],
[48,35,51,44,50,44,44,41,0,52,48,43,38,46,42],
[36,44,45,49,49,45,45,50,49,0,50,47,44,50,55],
[53,43,61,49,58,51,40,42,53,51,0,47,37,50,59],
[51,46,54,53,56,55,56,45,58,54,54,0,43,56,59],
[58,46,63,56,56,56,63,59,63,57,64,58,0,57,57],
[47,47,44,43,50,49,48,49,55,51,51,45,44,0,57],
[54,53,43,42,42,51,45,42,59,46,42,42,44,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 183, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,39,33,42,20,53,34,39,28,17,31,46,61,54],
[74,0,73,33,49,35,67,36,53,35,35,63,53,64,53],
[62,28,0,34,52,36,44,32,46,40,40,39,54,60,39],
[68,68,67,0,66,56,78,56,64,71,55,71,72,66,44],
[59,52,49,35,0,38,70,39,70,36,36,54,54,71,52],
[81,66,65,45,63,0,71,55,78,63,57,72,71,84,66],
[48,34,57,23,31,30,0,24,41,42,30,32,41,54,47],
[67,65,69,45,62,46,77,0,69,62,39,70,72,69,64],
[62,48,55,37,31,23,60,32,0,36,36,51,65,64,50],
[73,66,61,30,65,38,59,39,65,0,39,54,47,73,54],
[84,66,61,46,65,44,71,62,65,62,0,64,65,80,57],
[70,38,62,30,47,29,69,31,50,47,37,0,41,60,55],
[55,48,47,29,47,30,60,29,36,54,36,60,0,69,57],
[40,37,41,35,30,17,47,32,37,28,21,41,32,0,51],
[47,48,62,57,49,35,54,37,51,47,44,46,44,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 184, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,57,49,59,44,51,57,54,41,52,50,54,48,55],
[50,0,58,43,56,47,50,55,58,42,53,44,54,58,48],
[44,43,0,38,51,42,45,47,45,43,39,47,47,47,39],
[52,58,63,0,53,49,58,55,61,49,57,42,59,61,55],
[42,45,50,48,0,42,45,43,51,34,50,40,45,46,44],
[57,54,59,52,59,0,59,53,56,56,53,50,56,60,57],
[50,51,56,43,56,42,0,58,55,49,53,46,52,54,49],
[44,46,54,46,58,48,43,0,50,45,40,45,48,46,39],
[47,43,56,40,50,45,46,51,0,40,43,39,44,46,44],
[60,59,58,52,67,45,52,56,61,0,47,58,60,61,54],
[49,48,62,44,51,48,48,61,58,54,0,50,45,55,48],
[51,57,54,59,61,51,55,56,62,43,51,0,52,55,51],
[47,47,54,42,56,45,49,53,57,41,56,49,0,56,47],
[53,43,54,40,55,41,47,55,55,40,46,46,45,0,51],
[46,53,62,46,57,44,52,62,57,47,53,50,54,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 185, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,54,45,52,56,52,48,60,54,57,50,51,49,50],
[53,0,54,45,51,57,53,48,48,54,53,47,50,44,49],
[47,47,0,41,47,54,44,42,47,46,48,41,51,43,43],
[56,56,60,0,56,62,55,54,58,55,56,50,59,51,51],
[49,50,54,45,0,61,49,49,51,55,51,51,54,47,47],
[45,44,47,39,40,0,44,44,45,46,47,36,50,41,39],
[49,48,57,46,52,57,0,54,48,49,52,53,50,48,48],
[53,53,59,47,52,57,47,0,53,55,57,51,57,45,54],
[41,53,54,43,50,56,53,48,0,51,44,47,47,44,45],
[47,47,55,46,46,55,52,46,50,0,49,46,50,46,48],
[44,48,53,45,50,54,49,44,57,52,0,46,48,49,43],
[51,54,60,51,50,65,48,50,54,55,55,0,55,50,49],
[50,51,50,42,47,51,51,44,54,51,53,46,0,53,50],
[52,57,58,50,54,60,53,56,57,55,52,51,48,0,54],
[51,52,58,50,54,62,53,47,56,53,58,52,51,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 186, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,33,74,33,42,40,42,56,73,42,33,87,47,26],
[36,0,49,63,0,19,20,20,23,54,41,14,67,23,20],
[68,52,0,46,3,42,28,29,23,62,27,34,76,28,9],
[27,38,55,0,0,33,20,20,0,45,35,25,67,18,0],
[68,101,98,101,0,79,66,79,41,68,81,66,81,59,61],
[59,82,59,68,22,0,43,28,35,59,45,57,59,46,38],
[61,81,73,81,35,58,0,42,34,61,61,59,70,27,9],
[59,81,72,81,22,73,59,0,35,59,58,57,72,53,32],
[45,78,78,101,60,66,67,66,0,78,84,56,92,44,53],
[28,47,39,56,33,42,40,42,23,0,42,26,33,41,26],
[59,60,74,66,20,56,40,43,17,59,0,39,54,28,40],
[68,87,67,76,35,44,42,44,45,75,62,0,67,41,28],
[14,34,25,34,20,42,31,29,9,68,47,34,0,14,26],
[54,78,73,83,42,55,74,48,57,60,73,60,87,0,42],
[75,81,92,101,40,63,92,69,48,75,61,73,75,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 187, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,43,41,38,43,45,42,47,39,45,51,39,45,39],
[56,0,46,46,42,44,50,46,51,47,50,48,48,50,44],
[58,55,0,50,55,43,59,55,52,51,56,46,53,53,43],
[60,55,51,0,42,49,58,49,48,43,49,53,46,50,53],
[63,59,46,59,0,49,56,54,48,67,55,55,55,54,47],
[58,57,58,52,52,0,53,57,60,57,56,50,55,53,47],
[56,51,42,43,45,48,0,42,45,47,45,46,45,40,45],
[59,55,46,52,47,44,59,0,52,52,52,45,52,50,49],
[54,50,49,53,53,41,56,49,0,57,52,51,55,48,42],
[62,54,50,58,34,44,54,49,44,0,52,49,50,46,45],
[56,51,45,52,46,45,56,49,49,49,0,48,52,45,40],
[50,53,55,48,46,51,55,56,50,52,53,0,49,53,43],
[62,53,48,55,46,46,56,49,46,51,49,52,0,50,46],
[56,51,48,51,47,48,61,51,53,55,56,48,51,0,52],
[62,57,58,48,54,54,56,52,59,56,61,58,55,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 188, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,52,52,55,48,54,60,56,48,52,55,54,53,57],
[42,0,44,48,51,45,43,48,47,48,45,44,44,47,48],
[49,57,0,54,53,51,52,53,53,55,47,57,50,51,52],
[49,53,47,0,51,46,51,49,50,50,53,50,48,53,49],
[46,50,48,50,0,49,48,56,48,51,50,55,47,49,48],
[53,56,50,55,52,0,54,55,45,45,54,53,46,49,52],
[47,58,49,50,53,47,0,52,44,40,54,48,45,48,52],
[41,53,48,52,45,46,49,0,46,45,51,46,48,52,42],
[45,54,48,51,53,56,57,55,0,49,61,53,46,54,59],
[53,53,46,51,50,56,61,56,52,0,52,48,45,56,51],
[49,56,54,48,51,47,47,50,40,49,0,50,47,50,47],
[46,57,44,51,46,48,53,55,48,53,51,0,42,56,49],
[47,57,51,53,54,55,56,53,55,56,54,59,0,52,57],
[48,54,50,48,52,52,53,49,47,45,51,45,49,0,50],
[44,53,49,52,53,49,49,59,42,50,54,52,44,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 189, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,54,51,50,44,50,48,51,49,43,46,47,49,53],
[50,0,54,53,56,50,51,46,57,52,48,45,51,52,46],
[47,47,0,40,45,39,45,46,49,42,41,38,50,45,43],
[50,48,61,0,60,52,52,55,46,52,41,51,46,55,46],
[51,45,56,41,0,48,53,51,53,52,44,44,46,47,42],
[57,51,62,49,53,0,51,53,56,56,47,48,44,55,44],
[51,50,56,49,48,50,0,49,43,41,45,47,48,55,48],
[53,55,55,46,50,48,52,0,51,52,46,49,48,54,44],
[50,44,52,55,48,45,58,50,0,44,43,37,50,54,42],
[52,49,59,49,49,45,60,49,57,0,46,45,46,59,51],
[58,53,60,60,57,54,56,55,58,55,0,47,54,53,48],
[55,56,63,50,57,53,54,52,64,56,54,0,57,57,48],
[54,50,51,55,55,57,53,53,51,55,47,44,0,58,56],
[52,49,56,46,54,46,46,47,47,42,48,44,43,0,40],
[48,55,58,55,59,57,53,57,59,50,53,53,45,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 190, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,45,49,44,50,58,55,50,38,57,49,59,58,68],
[37,0,36,46,39,41,57,50,46,42,47,41,59,53,54],
[56,65,0,49,47,57,57,56,52,57,46,53,70,70,64],
[52,55,52,0,51,50,62,61,57,50,48,51,64,55,69],
[57,62,54,50,0,62,70,58,59,44,52,48,70,68,68],
[51,60,44,51,39,0,64,57,48,47,43,49,60,61,52],
[43,44,44,39,31,37,0,55,43,36,37,43,59,53,54],
[46,51,45,40,43,44,46,0,39,46,40,52,59,56,54],
[51,55,49,44,42,53,58,62,0,52,44,47,72,71,66],
[63,59,44,51,57,54,65,55,49,0,49,51,70,61,67],
[44,54,55,53,49,58,64,61,57,52,0,58,70,58,61],
[52,60,48,50,53,52,58,49,54,50,43,0,69,59,55],
[42,42,31,37,31,41,42,42,29,31,31,32,0,49,49],
[43,48,31,46,33,40,48,45,30,40,43,42,52,0,55],
[33,47,37,32,33,49,47,47,35,34,40,46,52,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 191, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,55,50,52,51,45,43,51,60,56,40,55,42,46],
[59,0,51,66,54,50,51,51,60,57,58,51,55,57,57],
[46,50,0,51,50,52,51,48,53,48,52,52,51,52,45],
[51,35,50,0,43,44,46,40,55,47,46,45,52,43,45],
[49,47,51,58,0,48,50,44,59,52,61,45,59,49,50],
[50,51,49,57,53,0,49,53,48,44,55,51,49,48,46],
[56,50,50,55,51,52,0,46,52,56,49,46,62,52,44],
[58,50,53,61,57,48,55,0,49,55,54,46,56,48,51],
[50,41,48,46,42,53,49,52,0,49,51,40,61,43,49],
[41,44,53,54,49,57,45,46,52,0,59,52,53,40,46],
[45,43,49,55,40,46,52,47,50,42,0,50,52,40,43],
[61,50,49,56,56,50,55,55,61,49,51,0,57,55,46],
[46,46,50,49,42,52,39,45,40,48,49,44,0,49,42],
[59,44,49,58,52,53,49,53,58,61,61,46,52,0,52],
[55,44,56,56,51,55,57,50,52,55,58,55,59,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 192, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,52,53,55,52,60,48,54,56,57,62,47,41,50],
[43,0,46,47,53,52,50,53,52,53,52,56,47,52,48],
[49,55,0,54,54,44,48,49,59,56,59,49,49,46,46],
[48,54,47,0,55,53,54,53,58,53,56,59,44,52,53],
[46,48,47,46,0,50,47,53,50,49,61,56,51,43,46],
[49,49,57,48,51,0,53,55,55,61,51,59,50,49,46],
[41,51,53,47,54,48,0,50,56,54,53,58,48,48,50],
[53,48,52,48,48,46,51,0,54,47,57,53,47,45,48],
[47,49,42,43,51,46,45,47,0,46,45,56,47,42,42],
[45,48,45,48,52,40,47,54,55,0,47,62,46,44,47],
[44,49,42,45,40,50,48,44,56,54,0,54,46,44,50],
[39,45,52,42,45,42,43,48,45,39,47,0,30,41,35],
[54,54,52,57,50,51,53,54,54,55,55,71,0,47,53],
[60,49,55,49,58,52,53,56,59,57,57,60,54,0,53],
[51,53,55,48,55,55,51,53,59,54,51,66,48,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 193, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,61,51,55,63,47,63,47,58,47,48,51,58,60],
[45,0,54,45,50,53,53,70,52,43,46,50,46,54,48],
[40,47,0,41,48,55,45,56,41,47,45,41,48,45,45],
[50,56,60,0,54,44,52,66,57,50,55,51,58,57,56],
[46,51,53,47,0,58,46,67,47,50,48,56,49,56,60],
[38,48,46,57,43,0,53,62,46,46,47,50,56,51,43],
[54,48,56,49,55,48,0,68,56,43,51,51,56,56,56],
[38,31,45,35,34,39,33,0,36,33,28,38,35,35,40],
[54,49,60,44,54,55,45,65,0,55,53,47,44,45,58],
[43,58,54,51,51,55,58,68,46,0,53,49,52,51,57],
[54,55,56,46,53,54,50,73,48,48,0,56,55,57,59],
[53,51,60,50,45,51,50,63,54,52,45,0,37,47,51],
[50,55,53,43,52,45,45,66,57,49,46,64,0,56,52],
[43,47,56,44,45,50,45,66,56,50,44,54,45,0,54],
[41,53,56,45,41,58,45,61,43,44,42,50,49,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 194, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,34,56,54,51,51,61,32,53,62,34,30,53,54],
[63,0,66,59,66,55,58,47,25,50,67,66,53,47,51],
[67,35,0,75,63,67,75,60,51,72,66,50,54,55,62],
[45,42,26,0,63,47,52,47,31,44,54,35,31,45,62],
[47,35,38,38,0,40,47,65,44,60,59,47,50,65,51],
[50,46,34,54,61,0,70,59,4,69,66,30,42,42,47],
[50,43,26,49,54,31,0,46,4,49,51,37,33,42,36],
[40,54,41,54,36,42,55,0,24,58,70,33,34,55,51],
[69,76,50,70,57,97,97,77,0,81,97,58,49,61,72],
[48,51,29,57,41,32,52,43,20,0,54,35,31,34,36],
[39,34,35,47,42,35,50,31,4,47,0,35,33,28,39],
[67,35,51,66,54,71,64,68,43,66,66,0,73,58,67],
[71,48,47,70,51,59,68,67,52,70,68,28,0,74,64],
[48,54,46,56,36,59,59,46,40,67,73,43,27,0,59],
[47,50,39,39,50,54,65,50,29,65,62,34,37,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 195, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,66,58,56,83,83,81,62,92,77,67,83,82,42],
[10,0,16,16,23,38,43,43,16,42,49,28,18,69,17],
[35,85,0,47,61,54,62,60,55,62,56,51,62,61,52],
[43,85,54,0,30,73,82,69,61,83,67,41,63,60,49],
[45,78,40,71,0,56,62,53,55,79,52,28,64,54,49],
[18,63,47,28,45,0,61,38,40,70,63,49,30,63,31],
[18,58,39,19,39,40,0,44,27,61,67,36,36,69,33],
[20,58,41,32,48,63,57,0,42,85,50,43,44,57,42],
[39,85,46,40,46,61,74,59,0,93,76,50,51,76,57],
[9,59,39,18,22,31,40,16,8,0,27,26,2,41,41],
[24,52,45,34,49,38,34,51,25,74,0,49,19,28,42],
[34,73,50,60,73,52,65,58,51,75,52,0,38,58,56],
[18,83,39,38,37,71,65,57,50,99,82,63,0,81,49],
[19,32,40,41,47,38,32,44,25,60,73,43,20,0,42],
[59,84,49,52,52,70,68,59,44,60,59,45,52,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 196, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,38,37,30,30,62,36,57,46,49,41,48,51,28],
[79,0,64,58,47,57,73,53,68,62,57,66,61,66,65],
[63,37,0,44,29,31,70,58,71,49,56,34,57,49,45],
[64,43,57,0,51,55,58,71,60,57,58,61,60,56,55],
[71,54,72,50,0,62,73,69,74,83,75,77,83,72,61],
[71,44,70,46,39,0,74,60,69,60,66,43,52,58,60],
[39,28,31,43,28,27,0,39,20,25,35,28,29,34,23],
[65,48,43,30,32,41,62,0,51,41,43,50,48,44,47],
[44,33,30,41,27,32,81,50,0,26,56,37,44,44,38],
[55,39,52,44,18,41,76,60,75,0,56,48,59,51,40],
[52,44,45,43,26,35,66,58,45,45,0,53,49,56,46],
[60,35,67,40,24,58,73,51,64,53,48,0,50,60,62],
[53,40,44,41,18,49,72,53,57,42,52,51,0,57,41],
[50,35,52,45,29,43,67,57,57,50,45,41,44,0,37],
[73,36,56,46,40,41,78,54,63,61,55,39,60,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 197, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,27,24,53,29,8,77,32,38,41,59,59,34,48],
[45,0,44,65,51,53,53,67,46,81,53,46,51,47,53],
[74,57,0,48,71,45,27,86,47,40,23,76,77,51,82],
[77,36,53,0,80,56,57,79,44,34,37,71,70,79,61],
[48,50,30,21,0,21,7,64,34,32,16,32,77,34,77],
[72,48,56,45,80,0,55,72,54,54,40,48,75,58,73],
[93,48,74,44,94,46,0,91,40,60,61,67,72,95,75],
[24,34,15,22,37,29,10,0,26,38,19,17,61,12,45],
[69,55,54,57,67,47,61,75,0,73,61,68,59,55,50],
[63,20,61,67,69,47,41,63,28,0,45,53,59,63,45],
[60,48,78,64,85,61,40,82,40,56,0,83,75,60,80],
[42,55,25,30,69,53,34,84,33,48,18,0,77,28,68],
[42,50,24,31,24,26,29,40,42,42,26,24,0,24,44],
[67,54,50,22,67,43,6,89,46,38,41,73,77,0,80],
[53,48,19,40,24,28,26,56,51,56,21,33,57,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 198, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,43,60,48,39,51,44,51,42,44,57,62,51,43],
[75,0,75,62,48,67,77,56,68,66,64,74,73,64,38],
[58,26,0,46,42,47,53,50,52,57,43,54,37,57,35],
[41,39,55,0,51,46,58,57,38,46,53,57,38,64,39],
[53,53,59,50,0,64,69,40,67,47,52,61,57,69,56],
[62,34,54,55,37,0,61,37,47,55,40,62,68,64,44],
[50,24,48,43,32,40,0,53,51,37,51,43,37,53,42],
[57,45,51,44,61,64,48,0,64,54,58,48,60,66,44],
[50,33,49,63,34,54,50,37,0,33,46,51,59,57,50],
[59,35,44,55,54,46,64,47,68,0,55,59,61,53,57],
[57,37,58,48,49,61,50,43,55,46,0,51,59,74,46],
[44,27,47,44,40,39,58,53,50,42,50,0,50,47,31],
[39,28,64,63,44,33,64,41,42,40,42,51,0,57,47],
[50,37,44,37,32,37,48,35,44,48,27,54,44,0,40],
[58,63,66,62,45,57,59,57,51,44,55,70,54,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 199, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,55,54,40,46,61,67,37,55,55,52,44,70,57],
[58,0,64,57,54,63,49,58,58,55,45,51,44,56,58],
[46,37,0,45,42,49,40,57,34,47,37,49,37,52,50],
[47,44,56,0,47,53,53,57,42,39,42,47,44,59,58],
[61,47,59,54,0,60,53,54,49,58,44,49,36,58,55],
[55,38,52,48,41,0,33,56,45,39,47,48,39,56,47],
[40,52,61,48,48,68,0,49,42,56,51,59,53,61,48],
[34,43,44,44,47,45,52,0,39,42,42,38,45,55,42],
[64,43,67,59,52,56,59,62,0,55,52,54,51,51,53],
[46,46,54,62,43,62,45,59,46,0,56,39,51,51,51],
[46,56,64,59,57,54,50,59,49,45,0,50,52,63,63],
[49,50,52,54,52,53,42,63,47,62,51,0,45,54,50],
[57,57,64,57,65,62,48,56,50,50,49,56,0,61,58],
[31,45,49,42,43,45,40,46,50,50,38,47,40,0,35],
[44,43,51,43,46,54,53,59,48,50,38,51,43,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 101, 200, "ME-BBd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbd/mebbd_15_101.csv", index=False, header=False)

import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,498,515,504,529,498,540,504,522,534,581,565,534,493],
[502,0,501,499,502,504,514,499,519,530,526,565,541,505],
[485,499,0,517,502,485,499,515,496,526,525,523,482,506],
[496,501,483,0,546,481,501,520,500,513,545,539,538,479],
[471,498,498,454,0,446,498,517,482,513,528,504,533,481],
[502,496,515,519,554,0,511,492,498,511,538,549,537,502],
[460,486,501,499,502,489,0,512,507,525,525,538,514,477],
[496,501,485,480,483,508,488,0,502,505,538,515,537,451],
[478,481,504,500,518,502,493,498,0,488,540,547,529,477],
[466,470,474,487,487,489,475,495,512,0,500,523,529,481],
[419,474,475,455,472,462,475,462,460,500,0,507,497,459],
[435,435,477,461,496,451,462,485,453,477,493,0,490,460],
[466,459,518,462,467,463,486,463,471,471,503,510,0,490],
[507,495,494,521,519,498,523,549,523,519,541,540,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 1, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,510,527,489,507,492,504,485,513,533,535,461,522],
[483,0,471,500,470,481,472,467,485,488,473,487,479,523],
[490,529,0,529,487,487,481,479,512,483,490,515,474,509],
[473,500,471,0,469,472,469,464,486,493,478,508,476,493],
[511,530,513,531,0,551,512,508,495,532,510,512,506,547],
[493,519,513,528,449,0,471,485,502,478,471,505,486,499],
[508,528,519,531,488,529,0,492,509,512,511,502,479,506],
[496,533,521,536,492,515,508,0,518,509,490,506,491,509],
[515,515,488,514,505,498,491,482,0,520,510,506,517,520],
[487,512,517,507,468,522,488,491,480,0,494,509,483,492],
[467,527,510,522,490,529,489,510,490,506,0,534,509,511],
[465,513,485,492,488,495,498,494,494,491,466,0,496,524],
[539,521,526,524,494,514,521,509,483,517,491,504,0,519],
[478,477,491,507,453,501,494,491,480,508,489,476,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 2, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,470,500,502,495,461,493,517,503,449,513,464,459],
[523,0,513,485,487,492,491,485,513,530,488,517,484,485],
[530,487,0,494,503,469,476,501,499,558,480,504,471,465],
[500,515,506,0,506,496,491,504,527,548,490,516,477,499],
[498,513,497,494,0,508,520,483,491,532,465,531,453,512],
[505,508,531,504,492,0,513,483,528,544,484,521,463,479],
[539,509,524,509,480,487,0,504,546,557,515,531,518,500],
[507,515,499,496,517,517,496,0,537,540,516,510,469,482],
[483,487,501,473,509,472,454,463,0,521,439,481,463,478],
[497,470,442,452,468,456,443,460,479,0,433,470,461,474],
[551,512,520,510,535,516,485,484,561,567,0,529,501,528],
[487,483,496,484,469,479,469,490,519,530,471,0,450,491],
[536,516,529,523,547,537,482,531,537,539,499,550,0,512],
[541,515,535,501,488,521,500,518,522,526,472,509,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 3, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,520,465,494,532,509,486,479,499,486,503,490,501],
[503,0,481,481,502,516,530,509,496,514,514,510,497,526],
[480,519,0,507,521,540,507,509,512,527,530,512,520,542],
[535,519,493,0,527,514,507,504,503,521,504,512,511,516],
[506,498,479,473,0,516,497,478,476,495,497,469,500,489],
[468,484,460,486,484,0,500,468,480,466,489,479,486,500],
[491,470,493,493,503,500,0,486,465,492,474,481,501,488],
[514,491,491,496,522,532,514,0,463,515,500,483,497,504],
[521,504,488,497,524,520,535,537,0,521,515,479,494,531],
[501,486,473,479,505,534,508,485,479,0,494,462,499,505],
[514,486,470,496,503,511,526,500,485,506,0,474,490,497],
[497,490,488,488,531,521,519,517,521,538,526,0,516,523],
[510,503,480,489,500,514,499,503,506,501,510,484,0,512],
[499,474,458,484,511,500,512,496,469,495,503,477,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 4, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,499,486,484,492,500,492,497,478,511,491,491,491],
[513,0,504,489,499,505,520,506,515,527,531,498,497,518],
[501,496,0,474,497,507,498,482,494,495,514,501,481,506],
[514,511,526,0,509,511,514,504,505,508,502,506,499,526],
[516,501,503,491,0,511,504,496,494,505,521,498,508,509],
[508,495,493,489,489,0,505,495,504,504,504,498,492,513],
[500,480,502,486,496,495,0,493,509,509,497,518,502,513],
[508,494,518,496,504,505,507,0,514,494,506,509,503,538],
[503,485,506,495,506,496,491,486,0,497,510,492,487,507],
[522,473,505,492,495,496,491,506,503,0,498,491,503,522],
[489,469,486,498,479,496,503,494,490,502,0,493,496,519],
[509,502,499,494,502,502,482,491,508,509,507,0,492,493],
[509,503,519,501,492,508,498,497,513,497,504,508,0,527],
[509,482,494,474,491,487,487,462,493,478,481,507,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 5, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,498,519,532,484,517,502,501,511,512,540,504,527],
[492,0,499,492,506,487,489,505,484,490,477,510,493,507],
[502,501,0,497,521,486,506,500,481,490,480,520,491,506],
[481,508,503,0,525,494,516,492,516,511,488,525,511,500],
[468,494,479,475,0,481,490,481,474,481,484,509,481,499],
[516,513,514,506,519,0,520,518,491,522,514,545,511,523],
[483,511,494,484,510,480,0,485,502,493,472,512,495,508],
[498,495,500,508,519,482,515,0,492,501,491,526,506,516],
[499,516,519,484,526,509,498,508,0,533,496,523,516,540],
[489,510,510,489,519,478,507,499,467,0,509,523,512,513],
[488,523,520,512,516,486,528,509,504,491,0,506,486,513],
[460,490,480,475,491,455,488,474,477,477,494,0,483,494],
[496,507,509,489,519,489,505,494,484,488,514,517,0,501],
[473,493,494,500,501,477,492,484,460,487,487,506,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 6, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,521,528,499,521,538,521,512,498,521,502,519,510],
[530,0,527,525,501,531,539,549,492,520,523,517,542,502],
[479,473,0,496,494,505,517,479,487,479,478,489,514,494],
[472,475,504,0,493,533,501,488,506,483,526,486,505,470],
[501,499,506,507,0,521,490,504,488,493,514,504,496,472],
[479,469,495,467,479,0,467,493,469,473,483,476,488,462],
[462,461,483,499,510,533,0,493,462,490,530,484,460,461],
[479,451,521,512,496,507,507,0,479,511,505,502,521,488],
[488,508,513,494,512,531,538,521,0,498,507,511,519,490],
[502,480,521,517,507,527,510,489,502,0,521,493,499,498],
[479,477,522,474,486,517,470,495,493,479,0,469,489,489],
[498,483,511,514,496,524,516,498,489,507,531,0,519,491],
[481,458,486,495,504,512,540,479,481,501,511,481,0,474],
[490,498,506,530,528,538,539,512,510,502,511,509,526,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 7, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,519,490,510,508,518,508,504,510,520,520,544,521,521],
[481,0,476,493,489,484,503,496,459,471,467,509,496,479],
[510,524,0,502,515,541,537,496,511,498,539,564,532,533],
[490,507,498,0,492,509,500,503,490,491,493,530,513,505],
[492,511,485,508,0,500,507,502,466,489,503,525,506,496],
[482,516,459,491,500,0,509,505,490,493,502,518,499,494],
[492,497,463,500,493,491,0,495,479,470,476,528,480,499],
[496,504,504,497,498,495,505,0,491,486,509,520,509,498],
[490,541,489,510,534,510,521,509,0,488,530,558,515,523],
[480,529,502,509,511,507,530,514,512,0,517,566,525,501],
[480,533,461,507,497,498,524,491,470,483,0,502,517,479],
[456,491,436,470,475,482,472,480,442,434,498,0,486,469],
[479,504,468,487,494,501,520,491,485,475,483,514,0,483],
[479,521,467,495,504,506,501,502,477,499,521,531,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 8, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,479,527,546,524,515,525,517,510,530,520,535,519],
[515,0,503,535,516,513,573,532,511,533,511,502,480,546],
[521,497,0,532,519,545,528,510,526,559,514,524,504,506],
[473,465,468,0,488,481,471,524,449,451,477,453,463,464],
[454,484,481,512,0,546,577,494,490,467,547,505,522,533],
[476,487,455,519,454,0,534,465,483,476,502,457,449,493],
[485,427,472,529,423,466,0,471,446,440,421,448,502,445],
[475,468,490,476,506,535,529,0,486,498,525,458,456,531],
[483,489,474,551,510,517,554,514,0,515,486,482,442,471],
[490,467,441,549,533,524,560,502,485,0,545,493,494,519],
[470,489,486,523,453,498,579,475,514,455,0,464,455,528],
[480,498,476,547,495,543,552,542,518,507,536,0,494,543],
[465,520,496,537,478,551,498,544,558,506,545,506,0,509],
[481,454,494,536,467,507,555,469,529,481,472,457,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 9, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,532,485,531,506,538,541,528,524,501,528,527,519,515],
[468,0,481,486,455,523,513,493,484,509,520,472,492,500],
[515,519,0,507,486,560,546,527,497,528,543,502,520,540],
[469,514,493,0,482,497,518,523,480,475,526,507,518,512],
[494,545,514,518,0,541,541,521,497,516,526,482,493,520],
[462,477,440,503,459,0,527,481,453,485,513,510,467,501],
[459,487,454,482,459,473,0,503,467,463,501,474,473,500],
[472,507,473,477,479,519,497,0,461,468,479,482,470,546],
[476,516,503,520,503,547,533,539,0,504,531,512,529,540],
[499,491,472,525,484,515,537,532,496,0,525,495,503,560],
[472,480,457,474,474,487,499,521,469,475,0,496,467,504],
[473,528,498,493,518,490,526,518,488,505,504,0,462,526],
[481,508,480,482,507,533,527,530,471,497,533,538,0,510],
[485,500,460,488,480,499,500,454,460,440,496,474,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 10, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,471,476,487,483,492,494,525,491,498,484,494,492],
[531,0,480,504,508,515,519,546,522,517,500,503,521,520],
[529,520,0,506,500,536,537,529,533,538,524,517,554,527],
[524,496,494,0,486,514,518,497,504,495,516,503,531,533],
[513,492,500,514,0,503,510,496,502,507,527,523,517,487],
[517,485,464,486,497,0,509,504,502,474,509,507,502,465],
[508,481,463,482,490,491,0,479,499,497,498,464,496,496],
[506,454,471,503,504,496,521,0,520,497,505,514,509,502],
[475,478,467,496,498,498,501,480,0,482,497,469,498,496],
[509,483,462,505,493,526,503,503,518,0,520,497,499,510],
[502,500,476,484,473,491,502,495,503,480,0,486,494,492],
[516,497,483,497,477,493,536,486,531,503,514,0,519,475],
[506,479,446,469,483,498,504,491,502,501,506,481,0,490],
[508,480,473,467,513,535,504,498,504,490,508,525,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 11, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,490,514,479,500,489,502,481,491,505,493,479,473],
[527,0,494,518,513,515,507,506,518,521,522,506,501,518],
[510,506,0,525,513,514,520,513,525,511,544,500,487,517],
[486,482,475,0,477,485,495,495,466,482,495,479,468,486],
[521,487,487,523,0,517,514,497,498,511,523,497,484,519],
[500,485,486,515,483,0,504,499,500,494,511,495,489,513],
[511,493,480,505,486,496,0,501,496,512,498,478,483,514],
[498,494,487,505,503,501,499,0,499,512,492,506,464,493],
[519,482,475,534,502,500,504,501,0,511,521,494,477,509],
[509,479,489,518,489,506,488,488,489,0,505,482,471,491],
[495,478,456,505,477,489,502,508,479,495,0,491,474,514],
[507,494,500,521,503,505,522,494,506,518,509,0,461,490],
[521,499,513,532,516,511,517,536,523,529,526,539,0,543],
[527,482,483,514,481,487,486,507,491,509,486,510,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 12, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,616,647,562,629,572,560,541,523,490,407,522,569,555],
[384,0,471,343,493,417,376,422,521,429,414,378,440,448],
[353,529,0,525,466,422,537,560,541,459,433,563,474,584],
[438,657,475,0,590,565,466,477,581,370,520,505,507,571],
[371,507,534,410,0,482,465,498,446,490,395,522,463,458],
[428,583,578,435,518,0,504,500,542,516,443,481,533,604],
[440,624,463,534,535,496,0,535,511,481,524,570,522,584],
[459,578,440,523,502,500,465,0,522,485,442,622,545,546],
[477,479,459,419,554,458,489,478,0,402,427,626,631,638],
[510,571,541,630,510,484,519,515,598,0,531,497,452,595],
[593,586,567,480,605,557,476,558,573,469,0,526,613,607],
[478,622,437,495,478,519,430,378,374,503,474,0,516,618],
[431,560,526,493,537,467,478,455,369,548,387,484,0,557],
[445,552,416,429,542,396,416,454,362,405,393,382,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 13, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,533,500,483,523,496,568,584,487,513,527,458,544,591],
[467,0,489,388,462,478,498,476,489,458,525,393,479,544],
[500,511,0,446,429,467,511,473,461,486,533,419,479,528],
[517,612,554,0,550,523,550,519,560,533,633,433,501,618],
[477,538,571,450,0,499,476,559,457,474,548,435,464,561],
[504,522,533,477,501,0,497,555,498,484,544,509,563,643],
[432,502,489,450,524,503,0,504,450,449,592,475,531,589],
[416,524,527,481,441,445,496,0,489,476,553,444,507,597],
[513,511,539,440,543,502,550,511,0,462,469,377,495,550],
[487,542,514,467,526,516,551,524,538,0,546,529,555,605],
[473,475,467,367,452,456,408,447,531,454,0,451,422,515],
[542,607,581,567,565,491,525,556,623,471,549,0,527,627],
[456,521,521,499,536,437,469,493,505,445,578,473,0,565],
[409,456,472,382,439,357,411,403,450,395,485,373,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 14, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,501,505,500,504,502,495,467,460,468,505,517,475],
[512,0,484,483,519,529,506,511,500,482,494,522,517,506],
[499,516,0,490,485,513,492,502,488,489,501,503,530,487],
[495,517,510,0,503,512,513,502,509,471,486,516,530,469],
[500,481,515,497,0,507,513,490,477,502,474,489,506,493],
[496,471,487,488,493,0,506,476,482,468,474,504,510,481],
[498,494,508,487,487,494,0,498,480,471,470,482,523,458],
[505,489,498,498,510,524,502,0,492,487,479,512,512,486],
[533,500,512,491,523,518,520,508,0,491,488,518,536,491],
[540,518,511,529,498,532,529,513,509,0,514,532,536,501],
[532,506,499,514,526,526,530,521,512,486,0,517,519,502],
[495,478,497,484,511,496,518,488,482,468,483,0,504,478],
[483,483,470,470,494,490,477,488,464,464,481,496,0,474],
[525,494,513,531,507,519,542,514,509,499,498,522,526,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 15, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,522,455,475,476,537,529,522,491,514,486,480,478,522],
[478,0,467,489,497,524,528,509,496,493,477,491,474,519],
[545,533,0,509,506,547,553,518,528,487,528,494,514,528],
[525,511,491,0,480,527,524,527,502,503,493,496,499,536],
[524,503,494,520,0,545,588,571,512,531,510,511,525,515],
[463,476,453,473,455,0,532,464,488,439,464,458,448,503],
[471,472,447,476,412,468,0,515,472,439,486,439,506,481],
[478,491,482,473,429,536,485,0,459,469,487,476,473,486],
[509,504,472,498,488,512,528,541,0,487,502,475,464,537],
[486,507,513,497,469,561,561,531,513,0,490,453,525,534],
[514,523,472,507,490,536,514,513,498,510,0,472,487,518],
[520,509,506,504,489,542,561,524,525,547,528,0,519,532],
[522,526,486,501,475,552,494,527,536,475,513,481,0,523],
[478,481,472,464,485,497,519,514,463,466,482,468,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 16, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,507,515,475,482,508,513,509,490,489,508,523,506],
[493,0,513,502,470,485,501,538,491,510,487,523,527,508],
[493,487,0,510,500,514,499,522,484,509,451,515,492,488],
[485,498,490,0,472,493,507,519,478,504,495,489,490,500],
[525,530,500,528,0,515,498,504,510,524,474,513,508,516],
[518,515,486,507,485,0,495,485,494,473,469,490,480,469],
[492,499,501,493,502,505,0,504,504,500,466,513,507,524],
[487,462,478,481,496,515,496,0,474,465,495,490,517,486],
[491,509,516,522,490,506,496,526,0,497,508,499,508,497],
[510,490,491,496,476,527,500,535,503,0,464,518,511,516],
[511,513,549,505,526,531,534,505,492,536,0,542,542,535],
[492,477,485,511,487,510,487,510,501,482,458,0,497,487],
[477,473,508,510,492,520,493,483,492,489,458,503,0,492],
[494,492,512,500,484,531,476,514,503,484,465,513,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 17, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,521,548,458,467,546,594,414,500,528,487,523,502,499],
[479,0,449,432,432,489,437,536,470,572,487,516,486,460],
[452,551,0,534,510,495,489,511,508,574,510,525,528,502],
[542,568,466,0,445,511,598,546,595,543,454,563,481,475],
[533,568,490,555,0,552,579,520,537,484,536,523,539,491],
[454,511,505,489,448,0,521,556,524,530,503,444,472,502],
[406,563,511,402,421,479,0,466,526,487,444,461,456,472],
[586,464,489,454,480,444,534,0,499,520,499,522,574,519],
[500,530,492,405,463,476,474,501,0,484,460,446,478,470],
[472,428,426,457,516,470,513,480,516,0,457,513,464,436],
[513,513,490,546,464,497,556,501,540,543,0,492,489,465],
[477,484,475,437,477,556,539,478,554,487,508,0,525,478],
[498,514,472,519,461,528,544,426,522,536,511,475,0,490],
[501,540,498,525,509,498,528,481,530,564,535,522,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 18, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,525,451,476,480,521,505,491,491,458,502,498,480,529],
[475,0,465,471,484,490,470,463,498,465,493,502,468,493],
[549,535,0,473,503,514,525,506,489,512,505,503,493,528],
[524,529,527,0,510,533,532,498,484,512,512,504,495,518],
[520,516,497,490,0,518,520,531,500,482,536,519,495,515],
[479,510,486,467,482,0,482,473,470,468,509,475,453,476],
[495,530,475,468,480,518,0,504,472,472,493,498,486,488],
[509,537,494,502,469,527,496,0,470,486,503,483,518,509],
[509,502,511,516,500,530,528,530,0,518,510,495,482,506],
[542,535,488,488,518,532,528,514,482,0,500,522,491,514],
[498,507,495,488,464,491,507,497,490,500,0,481,475,502],
[502,498,497,496,481,525,502,517,505,478,519,0,494,513],
[520,532,507,505,505,547,514,482,518,509,525,506,0,506],
[471,507,472,482,485,524,512,491,494,486,498,487,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 19, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,483,490,508,511,485,482,484,478,488,494,504,508],
[499,0,494,532,516,517,485,490,491,474,467,489,517,497],
[517,506,0,551,503,527,499,519,514,502,504,485,520,523],
[510,468,449,0,483,505,478,473,480,465,454,465,495,483],
[492,484,497,517,0,522,471,494,477,495,492,478,480,492],
[489,483,473,495,478,0,472,482,502,474,491,472,504,452],
[515,515,501,522,529,528,0,488,501,486,494,518,534,503],
[518,510,481,527,506,518,512,0,486,472,496,520,517,501],
[516,509,486,520,523,498,499,514,0,505,510,496,505,506],
[522,526,498,535,505,526,514,528,495,0,510,528,487,506],
[512,533,496,546,508,509,506,504,490,490,0,504,515,504],
[506,511,515,535,522,528,482,480,504,472,496,0,490,485],
[496,483,480,505,520,496,466,483,495,513,485,510,0,493],
[492,503,477,517,508,548,497,499,494,494,496,515,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 20, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,496,504,494,484,486,519,533,474,496,499,508,504],
[507,0,487,537,541,487,508,545,515,512,567,552,523,490],
[504,513,0,562,497,509,486,513,529,510,495,555,565,529],
[496,463,438,0,484,472,498,486,463,473,497,483,478,464],
[506,459,503,516,0,521,489,543,485,523,542,486,528,517],
[516,513,491,528,479,0,503,515,502,491,546,529,505,495],
[514,492,514,502,511,497,0,519,562,500,508,537,529,518],
[481,455,487,514,457,485,481,0,482,472,524,497,489,488],
[467,485,471,537,515,498,438,518,0,448,521,461,480,484],
[526,488,490,527,477,509,500,528,552,0,532,539,512,465],
[504,433,505,503,458,454,492,476,479,468,0,487,498,442],
[501,448,445,517,514,471,463,503,539,461,513,0,499,455],
[492,477,435,522,472,495,471,511,520,488,502,501,0,488],
[496,510,471,536,483,505,482,512,516,535,558,545,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 21, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,528,521,519,552,516,548,497,503,524,509,541,530],
[490,0,520,490,514,529,531,517,511,478,505,500,517,517],
[472,480,0,486,488,547,478,516,487,461,481,467,485,498],
[479,510,514,0,472,551,502,490,485,477,494,462,543,517],
[481,486,512,528,0,520,522,519,511,469,527,470,557,522],
[448,471,453,449,480,0,481,485,435,464,486,445,476,453],
[484,469,522,498,478,519,0,502,499,468,514,493,495,501],
[452,483,484,510,481,515,498,0,493,469,456,491,523,523],
[503,489,513,515,489,565,501,507,0,508,490,501,542,509],
[497,522,539,523,531,536,532,531,492,0,540,505,557,529],
[476,495,519,506,473,514,486,544,510,460,0,482,508,526],
[491,500,533,538,530,555,507,509,499,495,518,0,514,520],
[459,483,515,457,443,524,505,477,458,443,492,486,0,525],
[470,483,502,483,478,547,499,477,491,471,474,480,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 22, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,514,480,481,487,474,485,519,486,504,505,466,462],
[510,0,527,491,501,506,512,505,530,506,503,529,492,507],
[486,473,0,453,480,469,476,469,510,493,481,509,479,468],
[520,509,547,0,517,508,500,529,543,523,539,556,497,505],
[519,499,520,483,0,515,508,493,534,506,522,542,490,508],
[513,494,531,492,485,0,505,498,511,525,530,540,492,484],
[526,488,524,500,492,495,0,499,551,502,540,521,521,478],
[515,495,531,471,507,502,501,0,555,499,516,526,487,517],
[481,470,490,457,466,489,449,445,0,485,459,474,464,445],
[514,494,507,477,494,475,498,501,515,0,504,512,491,482],
[496,497,519,461,478,470,460,484,541,496,0,528,470,454],
[495,471,491,444,458,460,479,474,526,488,472,0,477,457],
[534,508,521,503,510,508,479,513,536,509,530,523,0,492],
[538,493,532,495,492,516,522,483,555,518,546,543,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 23, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,501,505,505,535,500,491,511,507,535,520,512,503],
[500,0,458,503,510,499,487,482,503,488,496,510,485,495],
[499,542,0,542,558,522,496,490,512,513,507,525,517,519],
[495,497,458,0,491,485,491,469,504,493,494,481,491,492],
[495,490,442,509,0,495,481,476,487,480,503,506,495,482],
[465,501,478,515,505,0,476,486,505,502,512,498,471,490],
[500,513,504,509,519,524,0,490,524,498,504,515,503,492],
[509,518,510,531,524,514,510,0,516,522,520,526,497,500],
[489,497,488,496,513,495,476,484,0,483,478,498,500,497],
[493,512,487,507,520,498,502,478,517,0,500,524,515,498],
[465,504,493,506,497,488,496,480,522,500,0,490,503,485],
[480,490,475,519,494,502,485,474,502,476,510,0,504,502],
[488,515,483,509,505,529,497,503,500,485,497,496,0,489],
[497,505,481,508,518,510,508,500,503,502,515,498,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 24, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,485,527,554,537,524,485,505,541,518,522,516,524],
[495,0,505,541,505,537,490,492,465,513,492,494,492,484],
[515,495,0,521,523,520,495,491,498,511,542,470,528,535],
[473,459,479,0,471,529,475,470,465,454,507,482,486,493],
[446,495,477,529,0,488,493,459,463,487,506,470,490,479],
[463,463,480,471,512,0,460,437,490,469,489,491,490,510],
[476,510,505,525,507,540,0,491,484,532,492,492,503,501],
[515,508,509,530,541,563,509,0,514,513,522,501,492,527],
[495,535,502,535,537,510,516,486,0,517,488,507,515,525],
[459,487,489,546,513,531,468,487,483,0,490,482,485,493],
[482,508,458,493,494,511,508,478,512,510,0,487,530,522],
[478,506,530,518,530,509,508,499,493,518,513,0,499,510],
[484,508,472,514,510,510,497,508,485,515,470,501,0,515],
[476,516,465,507,521,490,499,473,475,507,478,490,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 25, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,495,478,537,497,487,453,450,460,483,495,481,504],
[489,0,512,537,485,504,521,485,468,458,494,522,474,505],
[505,488,0,490,491,469,510,477,453,450,467,533,493,504],
[522,463,510,0,538,493,487,431,469,448,475,555,419,505],
[463,515,509,462,0,501,519,433,447,466,512,543,481,491],
[503,496,531,507,499,0,491,440,500,451,490,548,426,524],
[513,479,490,513,481,509,0,481,460,467,469,522,530,500],
[547,515,523,569,567,560,519,0,489,501,490,619,528,541],
[550,532,547,531,553,500,540,511,0,537,509,519,539,509],
[540,542,550,552,534,549,533,499,463,0,475,542,489,554],
[517,506,533,525,488,510,531,510,491,525,0,516,483,540],
[505,478,467,445,457,452,478,381,481,458,484,0,476,469],
[519,526,507,581,519,574,470,472,461,511,517,524,0,577],
[496,495,496,495,509,476,500,459,491,446,460,531,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 26, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,529,486,423,449,449,486,449,530,453,507,497,555,456],
[471,0,505,473,499,489,485,513,507,474,466,463,547,473],
[514,495,0,472,500,478,443,513,484,482,478,473,535,421],
[577,527,528,0,527,523,480,448,551,536,484,480,542,500],
[551,501,500,473,0,522,437,449,505,490,464,477,531,474],
[551,511,522,477,478,0,502,487,519,483,473,500,499,486],
[514,515,557,520,563,498,0,450,570,505,446,467,522,509],
[551,487,487,552,551,513,550,0,561,512,530,575,562,502],
[470,493,516,449,495,481,430,439,0,431,449,456,478,437],
[547,526,518,464,510,517,495,488,569,0,484,511,577,492],
[493,534,522,516,536,527,554,470,551,516,0,521,573,485],
[503,537,527,520,523,500,533,425,544,489,479,0,511,485],
[445,453,465,458,469,501,478,438,522,423,427,489,0,419],
[544,527,579,500,526,514,491,498,563,508,515,515,581,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 27, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,520,463,598,485,607,484,504,553,545,534,465,586,537],
[480,0,404,526,478,551,521,538,472,434,422,458,528,496],
[537,596,0,457,472,578,514,492,499,507,405,510,529,531],
[402,474,543,0,522,584,469,520,405,560,475,462,551,511],
[515,522,528,478,0,533,532,506,475,534,482,547,564,588],
[393,449,422,416,467,0,447,501,493,456,398,389,497,504],
[516,479,486,531,468,553,0,530,517,477,448,475,606,577],
[496,462,508,480,494,499,470,0,432,464,440,501,526,506],
[447,528,501,595,525,507,483,568,0,518,454,547,581,549],
[455,566,493,440,466,544,523,536,482,0,532,437,623,531],
[466,578,595,525,518,602,552,560,546,468,0,517,619,499],
[535,542,490,538,453,611,525,499,453,563,483,0,541,514],
[414,472,471,449,436,503,394,474,419,377,381,459,0,457],
[463,504,469,489,412,496,423,494,451,469,501,486,543,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 28, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,484,500,505,481,510,510,499,517,516,511,521,510],
[506,0,467,494,495,451,494,498,493,515,512,532,487,508],
[516,533,0,530,492,511,528,505,493,529,497,537,523,525],
[500,506,470,0,509,492,531,523,509,526,509,499,522,511],
[495,505,508,491,0,499,518,522,498,519,510,518,493,500],
[519,549,489,508,501,0,522,517,495,522,513,530,545,510],
[490,506,472,469,482,478,0,523,476,517,491,508,492,505],
[490,502,495,477,478,483,477,0,492,497,488,494,494,488],
[501,507,507,491,502,505,524,508,0,535,506,510,518,530],
[483,485,471,474,481,478,483,503,465,0,484,504,494,487],
[484,488,503,491,490,487,509,512,494,516,0,514,485,515],
[489,468,463,501,482,470,492,506,490,496,486,0,489,503],
[479,513,477,478,507,455,508,506,482,506,515,511,0,501],
[490,492,475,489,500,490,495,512,470,513,485,497,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 29, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,491,527,544,518,528,445,493,519,513,469,473,497],
[514,0,526,506,522,521,512,503,509,486,521,491,499,565],
[509,474,0,486,519,491,488,480,479,509,471,482,492,481],
[473,494,514,0,509,497,475,430,500,477,467,477,504,506],
[456,478,481,491,0,493,480,476,460,468,498,437,470,495],
[482,479,509,503,507,0,517,466,480,459,441,487,470,519],
[472,488,512,525,520,483,0,483,537,517,470,496,477,490],
[555,497,520,570,524,534,517,0,512,531,484,545,501,590],
[507,491,521,500,540,520,463,488,0,503,492,494,493,500],
[481,514,491,523,532,541,483,469,497,0,489,479,504,532],
[487,479,529,533,502,559,530,516,508,511,0,473,479,509],
[531,509,518,523,563,513,504,455,506,521,527,0,491,540],
[527,501,508,496,530,530,523,499,507,496,521,509,0,566],
[503,435,519,494,505,481,510,410,500,468,491,460,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 30, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,418,515,432,513,441,467,411,442,507,442,436,483],
[517,0,494,498,460,430,480,463,484,484,502,438,512,513],
[582,506,0,477,434,442,537,515,505,511,514,497,527,551],
[485,502,523,0,470,478,500,506,512,509,509,529,478,572],
[568,540,566,530,0,522,516,578,510,513,663,552,492,487],
[487,570,558,522,478,0,550,504,504,506,564,461,444,490],
[559,520,463,500,484,450,0,495,508,519,586,456,467,545],
[533,537,485,494,422,496,505,0,491,491,485,392,453,447],
[589,516,495,488,490,496,492,509,0,504,543,510,524,506],
[558,516,489,491,487,494,481,509,496,0,548,500,467,514],
[493,498,486,491,337,436,414,515,457,452,0,475,444,490],
[558,562,503,471,448,539,544,608,490,500,525,0,563,554],
[564,488,473,522,508,556,533,547,476,533,556,437,0,558],
[517,487,449,428,513,510,455,553,494,486,510,446,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 31, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,488,565,526,512,508,508,475,490,539,503,492,501],
[495,0,529,499,562,503,499,529,483,514,536,508,520,498],
[512,471,0,521,518,530,488,485,499,485,520,490,490,470],
[435,501,479,0,499,492,475,514,468,479,469,454,443,442],
[474,438,482,501,0,469,515,496,463,446,486,469,486,470],
[488,497,470,508,531,0,522,527,465,486,511,464,467,490],
[492,501,512,525,485,478,0,528,494,516,557,466,467,517],
[492,471,515,486,504,473,472,0,490,487,493,454,470,483],
[525,517,501,532,537,535,506,510,0,500,543,479,523,472],
[510,486,515,521,554,514,484,513,500,0,534,476,504,493],
[461,464,480,531,514,489,443,507,457,466,0,460,463,505],
[497,492,510,546,531,536,534,546,521,524,540,0,520,492],
[508,480,510,557,514,533,533,530,477,496,537,480,0,533],
[499,502,530,558,530,510,483,517,528,507,495,508,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 32, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,574,521,534,528,533,493,537,529,510,504,557,500],
[502,0,530,537,499,533,490,496,562,501,496,512,550,501],
[426,470,0,485,519,471,464,444,514,486,457,458,491,435],
[479,463,515,0,511,479,486,469,502,485,471,463,506,466],
[466,501,481,489,0,509,499,436,515,520,470,458,541,494],
[472,467,529,521,491,0,482,490,501,464,471,454,524,473],
[467,510,536,514,501,518,0,490,529,515,507,478,563,461],
[507,504,556,531,564,510,510,0,569,507,485,473,521,532],
[463,438,486,498,485,499,471,431,0,497,469,475,524,467],
[471,499,514,515,480,536,485,493,503,0,487,472,532,439],
[490,504,543,529,530,529,493,515,531,513,0,505,539,462],
[496,488,542,537,542,546,522,527,525,528,495,0,536,499],
[443,450,509,494,459,476,437,479,476,468,461,464,0,432],
[500,499,565,534,506,527,539,468,533,561,538,501,568,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 33, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,507,507,549,517,506,479,526,558,535,472,531,524],
[500,0,501,504,508,492,478,477,539,514,535,505,503,551],
[493,499,0,518,540,519,469,478,517,533,521,503,472,558],
[493,496,482,0,493,465,441,484,519,509,532,500,467,528],
[451,492,460,507,0,495,459,433,486,519,510,466,474,514],
[483,508,481,535,505,0,497,482,517,496,527,514,493,536],
[494,522,531,559,541,503,0,505,544,515,550,524,515,549],
[521,523,522,516,567,518,495,0,525,550,563,519,515,568],
[474,461,483,481,514,483,456,475,0,515,493,476,473,489],
[442,486,467,491,481,504,485,450,485,0,524,472,464,507],
[465,465,479,468,490,473,450,437,507,476,0,485,475,500],
[528,495,497,500,534,486,476,481,524,528,515,0,474,503],
[469,497,528,533,526,507,485,485,527,536,525,526,0,502],
[476,449,442,472,486,464,451,432,511,493,500,497,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 34, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,532,512,547,530,502,546,509,529,558,576,543,538],
[509,0,513,519,507,523,523,558,488,509,563,537,548,538],
[468,487,0,479,512,489,505,500,437,497,511,519,534,477],
[488,481,521,0,534,513,508,535,520,488,535,538,555,505],
[453,493,488,466,0,506,485,526,469,490,504,497,526,497],
[470,477,511,487,494,0,502,538,490,469,513,506,540,485],
[498,477,495,492,515,498,0,536,466,438,520,500,532,496],
[454,442,500,465,474,462,464,0,425,458,508,477,481,452],
[491,512,563,480,531,510,534,575,0,506,540,572,552,522],
[471,491,503,512,510,531,562,542,494,0,513,506,556,512],
[442,437,489,465,496,487,480,492,460,487,0,503,519,490],
[424,463,481,462,503,494,500,523,428,494,497,0,520,496],
[457,452,466,445,474,460,468,519,448,444,481,480,0,494],
[462,462,523,495,503,515,504,548,478,488,510,504,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 35, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,537,499,527,526,540,520,530,566,503,513,524,515],
[497,0,506,483,514,501,499,516,517,525,501,513,484,511],
[463,494,0,481,479,506,498,493,466,516,481,491,507,467],
[501,517,519,0,490,495,554,535,519,521,511,523,528,498],
[473,486,521,510,0,519,526,509,524,517,516,516,524,549],
[474,499,494,505,481,0,526,505,518,509,479,501,499,494],
[460,501,502,446,474,474,0,496,498,483,471,479,489,480],
[480,484,507,465,491,495,504,0,506,513,488,493,507,493],
[470,483,534,481,476,482,502,494,0,497,498,501,521,479],
[434,475,484,479,483,491,517,487,503,0,492,487,489,478],
[497,499,519,489,484,521,529,512,502,508,0,488,496,530],
[487,487,509,477,484,499,521,507,499,513,512,0,512,476],
[476,516,493,472,476,501,511,493,479,511,504,488,0,512],
[485,489,533,502,451,506,520,507,521,522,470,524,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 36, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,479,506,398,412,537,458,454,479,462,462,456,523],
[566,0,514,584,460,473,567,542,488,535,548,465,495,560],
[521,486,0,536,471,474,496,563,506,505,471,470,529,502],
[494,416,464,0,438,499,519,478,445,437,411,463,410,496],
[602,540,529,562,0,494,514,556,494,533,501,452,513,622],
[588,527,526,501,506,0,575,565,549,507,484,545,499,561],
[463,433,504,481,486,425,0,446,484,480,392,400,417,523],
[542,458,437,522,444,435,554,0,473,472,427,465,465,472],
[546,512,494,555,506,451,516,527,0,511,525,496,504,519],
[521,465,495,563,467,493,520,528,489,0,490,478,478,547],
[538,452,529,589,499,516,608,573,475,510,0,496,500,575],
[538,535,530,537,548,455,600,535,504,522,504,0,595,551],
[544,505,471,590,487,501,583,535,496,522,500,405,0,541],
[477,440,498,504,378,439,477,528,481,453,425,449,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 37, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,415,543,412,582,434,608,428,428,607,499,395,323],
[571,0,562,539,581,641,523,558,557,482,572,485,421,413],
[585,438,0,568,499,574,468,541,396,491,502,472,515,365],
[457,461,432,0,376,364,332,432,329,487,625,541,380,314],
[588,419,501,624,0,714,485,521,302,535,638,442,371,323],
[418,359,426,636,286,0,462,472,318,444,345,487,437,425],
[566,477,532,668,515,538,0,540,473,597,643,528,463,550],
[392,442,459,568,479,528,460,0,403,548,473,394,421,462],
[572,443,604,671,698,682,527,597,0,531,601,419,441,350],
[572,518,509,513,465,556,403,452,469,0,442,418,498,340],
[393,428,498,375,362,655,357,527,399,558,0,362,383,352],
[501,515,528,459,558,513,472,606,581,582,638,0,515,484],
[605,579,485,620,629,563,537,579,559,502,617,485,0,573],
[677,587,635,686,677,575,450,538,650,660,648,516,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 38, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,501,531,488,501,496,521,504,484,490,488,490,523],
[489,0,471,517,465,491,486,499,480,492,479,476,478,493],
[499,529,0,531,502,506,487,485,507,495,480,498,484,503],
[469,483,469,0,480,483,479,495,463,475,459,465,448,499],
[512,535,498,520,0,518,514,535,498,515,523,514,500,515],
[499,509,494,517,482,0,465,497,486,482,481,492,480,488],
[504,514,513,521,486,535,0,497,506,510,510,520,515,526],
[479,501,515,505,465,503,503,0,487,478,496,495,485,518],
[496,520,493,537,502,514,494,513,0,520,487,511,492,513],
[516,508,505,525,485,518,490,522,480,0,517,489,508,500],
[510,521,520,541,477,519,490,504,513,483,0,507,497,517],
[512,524,502,535,486,508,480,505,489,511,493,0,500,506],
[510,522,516,552,500,520,485,515,508,492,503,500,0,508],
[477,507,497,501,485,512,474,482,487,500,483,494,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 39, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,495,499,504,482,496,501,473,507,488,495,471,495],
[541,0,507,484,531,507,505,499,493,521,504,503,505,488],
[505,493,0,476,526,533,542,507,497,495,505,506,532,549],
[501,516,524,0,560,517,559,497,490,534,507,516,512,515],
[496,469,474,440,0,489,496,455,464,494,465,491,462,490],
[518,493,467,483,511,0,536,516,496,510,514,510,487,497],
[504,495,458,441,504,464,0,497,477,517,483,461,489,480],
[499,501,493,503,545,484,503,0,459,509,495,497,481,554],
[527,507,503,510,536,504,523,541,0,529,523,482,505,496],
[493,479,505,466,506,490,483,491,471,0,475,482,471,481],
[512,496,495,493,535,486,517,505,477,525,0,493,481,501],
[505,497,494,484,509,490,539,503,518,518,507,0,494,495],
[529,495,468,488,538,513,511,519,495,529,519,506,0,506],
[505,512,451,485,510,503,520,446,504,519,499,505,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 40, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,530,381,469,477,552,444,429,489,583,492,472,504,467],
[470,0,372,505,492,480,466,405,510,563,401,516,487,449],
[619,628,0,602,562,664,621,462,547,587,501,563,538,539],
[531,495,398,0,409,575,452,405,483,517,511,467,444,440],
[523,508,438,591,0,598,577,452,574,605,543,573,511,488],
[448,520,336,425,402,0,392,332,393,492,324,406,488,400],
[556,534,379,548,423,608,0,462,461,568,483,502,550,478],
[571,595,538,595,548,668,538,0,502,565,526,521,596,439],
[511,490,453,517,426,607,539,498,0,584,549,499,466,431],
[417,437,413,483,395,508,432,435,416,0,465,397,457,396],
[508,599,499,489,457,676,517,474,451,535,0,426,558,483],
[528,484,437,533,427,594,498,479,501,603,574,0,549,410],
[496,513,462,556,489,512,450,404,534,543,442,451,0,473],
[533,551,461,560,512,600,522,561,569,604,517,590,527,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 41, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,506,473,487,516,487,473,481,510,505,488,454,509],
[518,0,512,495,500,515,510,484,477,519,500,476,501,503],
[494,488,0,498,491,494,524,480,508,494,496,515,468,496],
[527,505,502,0,495,501,511,495,503,527,497,517,496,501],
[513,500,509,505,0,504,503,497,487,505,516,515,486,500],
[484,485,506,499,496,0,479,461,485,486,483,492,470,490],
[513,490,476,489,497,521,0,476,508,491,483,491,468,520],
[527,516,520,505,503,539,524,0,502,500,499,523,480,512],
[519,523,492,497,513,515,492,498,0,515,495,503,475,504],
[490,481,506,473,495,514,509,500,485,0,484,484,466,500],
[495,500,504,503,484,517,517,501,505,516,0,491,472,492],
[512,524,485,483,485,508,509,477,497,516,509,0,463,496],
[546,499,532,504,514,530,532,520,525,534,528,537,0,520],
[491,497,504,499,500,510,480,488,496,500,508,504,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 42, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,469,485,488,500,502,481,523,445,538,523,480,522],
[506,0,423,413,436,481,475,430,457,442,457,518,456,457],
[531,577,0,486,490,552,513,503,494,491,516,513,510,521],
[515,587,514,0,522,534,544,541,504,488,516,584,517,480],
[512,564,510,478,0,521,521,542,537,514,517,505,486,512],
[500,519,448,466,479,0,458,535,503,440,459,477,455,507],
[498,525,487,456,479,542,0,568,490,503,517,467,484,517],
[519,570,497,459,458,465,432,0,488,466,449,505,468,509],
[477,543,506,496,463,497,510,512,0,472,508,496,488,490],
[555,558,509,512,486,560,497,534,528,0,507,554,514,537],
[462,543,484,484,483,541,483,551,492,493,0,536,475,540],
[477,482,487,416,495,523,533,495,504,446,464,0,465,443],
[520,544,490,483,514,545,516,532,512,486,525,535,0,510],
[478,543,479,520,488,493,483,491,510,463,460,557,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 43, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,491,543,497,466,497,495,497,494,506,520,497,487],
[500,0,497,496,504,444,509,498,505,500,526,527,495,479],
[509,503,0,508,500,479,486,532,478,458,491,467,469,468],
[457,504,492,0,502,480,523,502,477,496,479,496,495,477],
[503,496,500,498,0,463,518,484,502,498,469,497,481,464],
[534,556,521,520,537,0,526,536,540,525,502,543,508,500],
[503,491,514,477,482,474,0,494,481,499,494,510,503,486],
[505,502,468,498,516,464,506,0,475,470,483,499,492,472],
[503,495,522,523,498,460,519,525,0,503,499,546,507,483],
[506,500,542,504,502,475,501,530,497,0,496,523,490,487],
[494,474,509,521,531,498,506,517,501,504,0,514,500,482],
[480,473,533,504,503,457,490,501,454,477,486,0,493,452],
[503,505,531,505,519,492,497,508,493,510,500,507,0,464],
[513,521,532,523,536,500,514,528,517,513,518,548,536,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 44, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,460,508,491,480,495,517,530,417,560,522,498,446],
[551,0,520,535,562,469,485,538,555,541,559,581,552,573],
[540,480,0,512,539,478,510,571,555,471,572,528,456,442],
[492,465,488,0,537,478,434,526,544,496,523,595,473,451],
[509,438,461,463,0,506,490,496,509,483,549,560,506,501],
[520,531,522,522,494,0,474,503,538,487,537,552,463,475],
[505,515,490,566,510,526,0,538,571,549,568,552,500,529],
[483,462,429,474,504,497,462,0,539,487,529,545,467,477],
[470,445,445,456,491,462,429,461,0,443,488,523,470,459],
[583,459,529,504,517,513,451,513,557,0,542,577,474,468],
[440,441,428,477,451,463,432,471,512,458,0,539,457,452],
[478,419,472,405,440,448,448,455,477,423,461,0,464,439],
[502,448,544,527,494,537,500,533,530,526,543,536,0,478],
[554,427,558,549,499,525,471,523,541,532,548,561,522,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 45, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,527,503,510,497,497,526,518,559,565,528,517,496,574],
[473,0,540,522,507,502,536,519,518,550,556,512,485,525],
[497,460,0,481,527,497,503,481,554,506,562,500,483,508],
[490,478,519,0,528,462,527,507,537,528,530,495,495,508],
[503,493,473,472,0,482,486,474,542,513,510,505,444,481],
[503,498,503,538,518,0,534,511,566,567,539,484,512,544],
[474,464,497,473,514,466,0,452,538,505,529,462,461,477],
[482,481,519,493,526,489,548,0,545,538,507,484,479,507],
[441,482,446,463,458,434,462,455,0,503,468,445,419,435],
[435,450,494,472,487,433,495,462,497,0,500,466,450,508],
[472,444,438,470,490,461,471,493,532,500,0,469,444,475],
[483,488,500,505,495,516,538,516,555,534,531,0,515,504],
[504,515,517,505,556,488,539,521,581,550,556,485,0,522],
[426,475,492,492,519,456,523,493,565,492,525,496,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 46, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,482,557,557,602,523,537,530,433,524,575,484,614],
[521,0,458,559,505,567,396,592,570,424,429,525,517,498],
[518,542,0,539,585,654,517,574,472,480,524,519,557,509],
[443,441,461,0,510,584,510,480,489,438,452,509,529,472],
[443,495,415,490,0,551,470,475,459,457,461,458,482,528],
[398,433,346,416,449,0,448,439,450,316,383,442,490,464],
[477,604,483,490,530,552,0,566,504,454,536,512,548,568],
[463,408,426,520,525,561,434,0,507,416,485,499,482,514],
[470,430,528,511,541,550,496,493,0,510,448,510,516,515],
[567,576,520,562,543,684,546,584,490,0,553,583,618,575],
[476,571,476,548,539,617,464,515,552,447,0,483,517,491],
[425,475,481,491,542,558,488,501,490,417,517,0,476,624],
[516,483,443,471,518,510,452,518,484,382,483,524,0,557],
[386,502,491,528,472,536,432,486,485,425,509,376,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 47, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,510,482,501,505,506,508,526,520,531,511,532,515],
[489,0,520,489,514,474,540,510,539,494,535,537,551,540],
[490,480,0,495,508,490,506,524,504,501,528,510,515,518],
[518,511,505,0,531,474,519,483,533,532,513,512,530,525],
[499,486,492,469,0,506,493,499,514,497,511,505,507,530],
[495,526,510,526,494,0,517,517,557,525,542,547,531,547],
[494,460,494,481,507,483,0,499,517,465,506,498,503,514],
[492,490,476,517,501,483,501,0,525,497,532,525,504,526],
[474,461,496,467,486,443,483,475,0,467,518,492,480,498],
[480,506,499,468,503,475,535,503,533,0,503,487,507,512],
[469,465,472,487,489,458,494,468,482,497,0,493,521,491],
[489,463,490,488,495,453,502,475,508,513,507,0,492,509],
[468,449,485,470,493,469,497,496,520,493,479,508,0,523],
[485,460,482,475,470,453,486,474,502,488,509,491,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 48, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,505,501,488,482,446,412,510,466,479,500,452,480],
[523,0,517,445,500,500,506,464,547,497,502,502,475,527],
[495,483,0,488,474,454,468,481,527,476,450,525,440,447],
[499,555,512,0,496,481,491,491,541,454,510,538,496,508],
[512,500,526,504,0,468,473,463,523,484,510,553,460,489],
[518,500,546,519,532,0,503,465,549,518,517,564,493,482],
[554,494,532,509,527,497,0,534,595,522,536,522,500,533],
[588,536,519,509,537,535,466,0,587,518,519,520,517,513],
[490,453,473,459,477,451,405,413,0,415,411,471,425,447],
[534,503,524,546,516,482,478,482,585,0,489,517,470,532],
[521,498,550,490,490,483,464,481,589,511,0,511,423,539],
[500,498,475,462,447,436,478,480,529,483,489,0,469,504],
[548,525,560,504,540,507,500,483,575,530,577,531,0,545],
[520,473,553,492,511,518,467,487,553,468,461,496,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 49, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,521,514,483,493,519,474,486,447,473,503,455,530,500],
[479,0,540,483,481,510,469,496,477,511,490,503,514,495],
[486,460,0,485,460,483,450,486,421,475,476,474,491,512],
[517,517,515,0,482,546,467,499,469,520,545,513,517,550],
[507,519,540,518,0,524,490,495,500,536,500,511,539,513],
[481,490,517,454,476,0,457,491,465,495,510,472,501,512],
[526,531,550,533,510,543,0,500,510,541,538,515,570,547],
[514,504,514,501,505,509,500,0,502,519,532,490,499,553],
[553,523,579,531,500,535,490,498,0,517,539,551,537,551],
[527,489,525,480,464,505,459,481,483,0,483,520,477,520],
[497,510,524,455,500,490,462,468,461,517,0,465,526,499],
[545,497,526,487,489,528,485,510,449,480,535,0,505,534],
[470,486,509,483,461,499,430,501,463,523,474,495,0,526],
[500,505,488,450,487,488,453,447,449,480,501,466,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 50, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,512,489,470,512,492,468,504,487,497,566,498,561],
[571,0,538,516,506,506,521,509,512,503,499,582,554,540],
[488,462,0,425,443,485,498,451,473,452,469,549,491,448],
[511,484,575,0,486,511,528,438,511,441,493,569,495,496],
[530,494,557,514,0,526,528,477,557,511,487,560,528,552],
[488,494,515,489,474,0,506,446,487,480,516,545,538,478],
[508,479,502,472,472,494,0,431,498,487,486,532,466,505],
[532,491,549,562,523,554,569,0,576,553,560,603,500,504],
[496,488,527,489,443,513,502,424,0,486,466,559,514,470],
[513,497,548,559,489,520,513,447,514,0,470,581,535,519],
[503,501,531,507,513,484,514,440,534,530,0,591,523,532],
[434,418,451,431,440,455,468,397,441,419,409,0,452,451],
[502,446,509,505,472,462,534,500,486,465,477,548,0,452],
[439,460,552,504,448,522,495,496,530,481,468,549,548,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 51, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,521,448,496,487,462,489,539,530,469,526,455,467],
[547,0,509,462,553,486,494,458,545,519,491,517,519,476],
[479,491,0,419,490,476,439,433,530,496,457,460,446,421],
[552,538,581,0,538,489,520,483,571,552,515,523,496,507],
[504,447,510,462,0,475,458,450,500,533,447,536,422,430],
[513,514,524,511,525,0,490,471,510,566,506,506,469,476],
[538,506,561,480,542,510,0,475,549,563,489,548,500,502],
[511,542,567,517,550,529,525,0,589,552,505,525,458,497],
[461,455,470,429,500,490,451,411,0,499,444,468,446,448],
[470,481,504,448,467,434,437,448,501,0,468,487,452,442],
[531,509,543,485,553,494,511,495,556,532,0,530,466,442],
[474,483,540,477,464,494,452,475,532,513,470,0,453,492],
[545,481,554,504,578,531,500,542,554,548,534,547,0,501],
[533,524,579,493,570,524,498,503,552,558,558,508,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 52, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,495,559,526,531,507,523,530,547,514,519,490,506],
[489,0,504,548,509,529,525,534,546,565,527,518,486,520],
[505,496,0,556,501,510,500,530,519,527,515,523,508,493],
[441,452,444,0,474,482,444,477,503,499,495,477,455,484],
[474,491,499,526,0,509,481,517,532,527,488,515,496,487],
[469,471,490,518,491,0,468,480,494,551,497,492,485,494],
[493,475,500,556,519,532,0,514,547,566,494,497,499,502],
[477,466,470,523,483,520,486,0,525,520,478,499,493,496],
[470,454,481,497,468,506,453,475,0,534,482,479,451,485],
[453,435,473,501,473,449,434,480,466,0,461,441,449,428],
[486,473,485,505,512,503,506,522,518,539,0,500,482,514],
[481,482,477,523,485,508,503,501,521,559,500,0,472,484],
[510,514,492,545,504,515,501,507,549,551,518,528,0,502],
[494,480,507,516,513,506,498,504,515,572,486,516,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 53, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,587,617,529,613,597,535,520,667,567,531,599,415,448],
[413,0,529,366,459,482,430,488,516,368,494,483,398,468],
[383,471,0,367,434,446,406,527,496,405,461,480,390,424],
[471,634,633,0,576,486,530,617,578,452,538,488,456,571],
[387,541,566,424,0,515,451,534,575,456,475,501,395,392],
[403,518,554,514,485,0,521,539,591,410,485,497,440,495],
[465,570,594,470,549,479,0,513,582,536,581,479,448,519],
[480,512,473,383,466,461,487,0,523,474,468,538,457,446],
[333,484,504,422,425,409,418,477,0,429,399,390,362,402],
[433,632,595,548,544,590,464,526,571,0,531,541,472,515],
[469,506,539,462,525,515,419,532,601,469,0,500,431,448],
[401,517,520,512,499,503,521,462,610,459,500,0,428,440],
[585,602,610,544,605,560,552,543,638,528,569,572,0,492],
[552,532,576,429,608,505,481,554,598,485,552,560,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 54, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,534,514,495,487,547,496,490,492,499,488,505,523],
[517,0,521,494,497,513,540,485,466,521,499,515,489,517],
[466,479,0,457,461,443,480,431,439,467,438,423,430,481],
[486,506,543,0,503,496,533,510,501,530,549,512,485,515],
[505,503,539,497,0,487,517,478,500,496,480,476,493,500],
[513,487,557,504,513,0,551,497,527,525,514,508,502,503],
[453,460,520,467,483,449,0,456,476,455,477,456,476,480],
[504,515,569,490,522,503,544,0,529,526,501,504,501,545],
[510,534,561,499,500,473,524,471,0,486,482,495,496,523],
[508,479,533,470,504,475,545,474,514,0,485,467,490,492],
[501,501,562,451,520,486,523,499,518,515,0,524,501,539],
[512,485,577,488,524,492,544,496,505,533,476,0,499,515],
[495,511,570,515,507,498,524,499,504,510,499,501,0,518],
[477,483,519,485,500,497,520,455,477,508,461,485,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 55, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,530,519,471,551,523,497,560,499,500,590,495,559],
[559,0,520,477,523,576,551,523,636,494,557,570,525,543],
[470,480,0,429,440,506,511,519,597,581,473,565,471,535],
[481,523,571,0,445,625,467,540,646,592,522,549,500,515],
[529,477,560,555,0,684,574,508,623,608,519,631,543,553],
[449,424,494,375,316,0,474,415,494,490,476,527,413,489],
[477,449,489,533,426,526,0,586,592,527,561,558,508,527],
[503,477,481,460,492,585,414,0,568,580,495,558,459,574],
[440,364,403,354,377,506,408,432,0,439,470,498,382,490],
[501,506,419,408,392,510,473,420,561,0,408,470,447,458],
[500,443,527,478,481,524,439,505,530,592,0,544,417,553],
[410,430,435,451,369,473,442,442,502,530,456,0,458,486],
[505,475,529,500,457,587,492,541,618,553,583,542,0,529],
[441,457,465,485,447,511,473,426,510,542,447,514,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 56, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,422,484,501,475,462,480,472,472,490,490,477,527],
[505,0,477,486,461,518,492,450,508,465,498,513,510,555],
[578,523,0,513,533,493,516,504,526,465,505,540,500,566],
[516,514,487,0,534,517,520,510,509,489,536,526,524,556],
[499,539,467,466,0,482,485,508,491,453,524,515,484,579],
[525,482,507,483,518,0,518,531,510,498,511,519,505,559],
[538,508,484,480,515,482,0,482,503,477,512,513,515,569],
[520,550,496,490,492,469,518,0,489,525,534,514,502,538],
[528,492,474,491,509,490,497,511,0,488,519,525,535,537],
[528,535,535,511,547,502,523,475,512,0,512,517,524,582],
[510,502,495,464,476,489,488,466,481,488,0,480,499,540],
[510,487,460,474,485,481,487,486,475,483,520,0,497,552],
[523,490,500,476,516,495,485,498,465,476,501,503,0,556],
[473,445,434,444,421,441,431,462,463,418,460,448,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 57, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,440,581,598,507,507,583,592,614,524,459,547,609],
[564,0,517,570,615,490,627,634,591,585,480,504,616,536],
[560,483,0,521,563,502,538,495,552,598,525,530,549,526],
[419,430,479,0,577,425,547,468,517,646,529,543,554,522],
[402,385,437,423,0,382,442,453,509,562,464,458,544,435],
[493,510,498,575,618,0,587,595,661,613,551,545,537,564],
[493,373,462,453,558,413,0,548,533,531,384,529,593,574],
[417,366,505,532,547,405,452,0,557,582,451,503,544,508],
[408,409,448,483,491,339,467,443,0,544,464,467,445,510],
[386,415,402,354,438,387,469,418,456,0,437,523,465,457],
[476,520,475,471,536,449,616,549,536,563,0,490,528,500],
[541,496,470,457,542,455,471,497,533,477,510,0,501,553],
[453,384,451,446,456,463,407,456,555,535,472,499,0,542],
[391,464,474,478,565,436,426,492,490,543,500,447,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 58, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,462,512,463,435,518,466,476,470,431,419,437,463],
[528,0,509,534,498,493,539,478,463,451,478,468,470,509],
[538,491,0,540,481,471,528,493,517,500,484,475,481,550],
[488,466,460,0,462,428,525,453,450,498,453,428,435,460],
[537,502,519,538,0,500,554,519,498,524,487,502,503,532],
[565,507,529,572,500,0,555,509,496,511,481,481,511,516],
[482,461,472,475,446,445,0,455,413,484,420,428,477,475],
[534,522,507,547,481,491,545,0,488,501,500,486,507,540],
[524,537,483,550,502,504,587,512,0,523,495,468,507,520],
[530,549,500,502,476,489,516,499,477,0,495,488,475,543],
[569,522,516,547,513,519,580,500,505,505,0,495,471,549],
[581,532,525,572,498,519,572,514,532,512,505,0,518,530],
[563,530,519,565,497,489,523,493,493,525,529,482,0,513],
[537,491,450,540,468,484,525,460,480,457,451,470,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 59, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,503,522,501,527,509,535,542,521,512,540,552,532],
[502,0,483,478,491,503,494,539,555,498,499,474,551,491],
[497,517,0,525,484,527,528,491,528,527,503,500,531,522],
[478,522,475,0,482,500,494,509,523,504,491,529,500,496],
[499,509,516,518,0,507,532,537,509,517,537,465,526,524],
[473,497,473,500,493,0,491,535,492,486,487,481,487,524],
[491,506,472,506,468,509,0,525,521,515,517,465,525,500],
[465,461,509,491,463,465,475,0,466,469,489,453,484,506],
[458,445,472,477,491,508,479,534,0,484,532,438,564,487],
[479,502,473,496,483,514,485,531,516,0,522,476,551,521],
[488,501,497,509,463,513,483,511,468,478,0,480,547,533],
[460,526,500,471,535,519,535,547,562,524,520,0,581,548],
[448,449,469,500,474,513,475,516,436,449,453,419,0,446],
[468,509,478,504,476,476,500,494,513,479,467,452,554,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 60, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,440,399,511,399,460,384,418,518,489,406,437,425],
[583,0,538,480,575,459,561,527,542,541,534,492,473,507],
[560,462,0,433,554,470,533,496,554,513,508,498,505,473],
[601,520,567,0,572,473,526,526,557,516,542,510,439,540],
[489,425,446,428,0,434,488,454,479,526,385,467,452,487],
[601,541,530,527,566,0,542,536,546,521,542,508,472,533],
[540,439,467,474,512,458,0,462,498,436,481,424,429,515],
[616,473,504,474,546,464,538,0,482,511,508,479,507,545],
[582,458,446,443,521,454,502,518,0,481,460,458,455,516],
[482,459,487,484,474,479,564,489,519,0,449,495,430,458],
[511,466,492,458,615,458,519,492,540,551,0,502,485,511],
[594,508,502,490,533,492,576,521,542,505,498,0,474,490],
[563,527,495,561,548,528,571,493,545,570,515,526,0,478],
[575,493,527,460,513,467,485,455,484,542,489,510,522,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 61, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,445,532,459,436,499,458,449,487,486,564,463,482],
[499,0,550,554,519,482,494,528,503,488,581,525,495,502],
[555,450,0,570,545,504,554,501,548,494,467,516,473,527],
[468,446,430,0,445,415,476,476,409,438,465,474,423,407],
[541,481,455,555,0,487,580,492,509,480,517,537,482,525],
[564,518,496,585,513,0,580,548,541,555,533,558,531,583],
[501,506,446,524,420,420,0,471,549,461,455,547,466,550],
[542,472,499,524,508,452,529,0,538,498,490,509,514,449],
[551,497,452,591,491,459,451,462,0,489,513,547,455,486],
[513,512,506,562,520,445,539,502,511,0,478,582,475,436],
[514,419,533,535,483,467,545,510,487,522,0,545,466,494],
[436,475,484,526,463,442,453,491,453,418,455,0,376,476],
[537,505,527,577,518,469,534,486,545,525,534,624,0,568],
[518,498,473,593,475,417,450,551,514,564,506,524,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 62, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,493,509,506,513,515,507,486,521,503,509,522,488],
[492,0,494,507,488,479,473,490,477,486,480,482,495,489],
[507,506,0,499,505,486,468,495,469,488,494,510,493,486],
[491,493,501,0,494,491,475,479,471,495,482,503,491,479],
[494,512,495,506,0,508,495,511,485,481,488,500,478,473],
[487,521,514,509,492,0,486,486,483,495,486,511,484,488],
[485,527,532,525,505,514,0,534,503,509,516,531,502,504],
[493,510,505,521,489,514,466,0,498,489,493,513,493,497],
[514,523,531,529,515,517,497,502,0,513,509,519,507,498],
[479,514,512,505,519,505,491,511,487,0,495,520,494,499],
[497,520,506,518,512,514,484,507,491,505,0,501,499,509],
[491,518,490,497,500,489,469,487,481,480,499,0,500,490],
[478,505,507,509,522,516,498,507,493,506,501,500,0,487],
[512,511,514,521,527,512,496,503,502,501,491,510,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 63, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,461,442,440,472,449,479,464,501,467,457,517,508],
[486,0,485,470,472,500,490,456,498,503,484,473,496,516],
[539,515,0,512,504,546,528,509,516,527,520,478,532,512],
[558,530,488,0,524,520,517,482,512,549,499,497,554,548],
[560,528,496,476,0,529,466,507,515,567,500,488,542,538],
[528,500,454,480,471,0,482,471,483,493,483,476,477,506],
[551,510,472,483,534,518,0,502,514,535,516,494,552,533],
[521,544,491,518,493,529,498,0,526,506,487,528,543,509],
[536,502,484,488,485,517,486,474,0,496,472,476,502,535],
[499,497,473,451,433,507,465,494,504,0,466,475,481,497],
[533,516,480,501,500,517,484,513,528,534,0,519,523,500],
[543,527,522,503,512,524,506,472,524,525,481,0,510,487],
[483,504,468,446,458,523,448,457,498,519,477,490,0,510],
[492,484,488,452,462,494,467,491,465,503,500,513,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 64, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,477,524,486,488,487,510,515,483,497,476,522,447],
[522,0,496,474,489,483,498,496,468,498,476,502,517,502],
[523,504,0,511,524,495,512,483,519,503,506,488,554,497],
[476,526,489,0,502,498,472,489,512,484,501,470,556,526],
[514,511,476,498,0,506,494,505,518,485,494,463,526,492],
[512,517,505,502,494,0,522,523,526,489,492,502,543,500],
[513,502,488,528,506,478,0,485,489,477,473,474,536,486],
[490,504,517,511,495,477,515,0,521,507,494,501,533,525],
[485,532,481,488,482,474,511,479,0,475,485,482,553,461],
[517,502,497,516,515,511,523,493,525,0,508,491,550,500],
[503,524,494,499,506,508,527,506,515,492,0,495,546,512],
[524,498,512,530,537,498,526,499,518,509,505,0,546,502],
[478,483,446,444,474,457,464,467,447,450,454,454,0,451],
[553,498,503,474,508,500,514,475,539,500,488,498,549,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 65, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,497,515,509,501,509,504,493,498,533,499,499,511],
[521,0,495,500,480,495,489,491,479,502,540,464,501,496],
[503,505,0,527,507,529,500,515,518,490,533,517,526,508],
[485,500,473,0,475,478,510,475,495,498,514,500,485,493],
[491,520,493,525,0,506,498,497,509,479,491,470,513,503],
[499,505,471,522,494,0,504,497,489,516,527,504,515,500],
[491,511,500,490,502,496,0,483,492,476,531,512,500,513],
[496,509,485,525,503,503,517,0,491,508,520,495,497,516],
[507,521,482,505,491,511,508,509,0,502,524,490,515,494],
[502,498,510,502,521,484,524,492,498,0,520,490,513,490],
[467,460,467,486,509,473,469,480,476,480,0,477,495,469],
[501,536,483,500,530,496,488,505,510,510,523,0,508,504],
[501,499,474,515,487,485,500,503,485,487,505,492,0,493],
[489,504,492,507,497,500,487,484,506,510,531,496,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 66, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,452,481,491,512,493,476,491,527,478,480,456,476],
[537,0,510,544,508,507,539,527,536,572,553,533,490,503],
[548,490,0,527,486,497,517,493,519,539,502,483,505,491],
[519,456,473,0,445,476,507,480,508,537,462,442,472,449],
[509,492,514,555,0,501,529,506,503,567,498,493,481,500],
[488,493,503,524,499,0,523,509,525,549,507,501,460,502],
[507,461,483,493,471,477,0,508,496,552,513,496,454,467],
[524,473,507,520,494,491,492,0,528,554,514,475,481,485],
[509,464,481,492,497,475,504,472,0,503,505,480,475,490],
[473,428,461,463,433,451,448,446,497,0,489,446,436,464],
[522,447,498,538,502,493,487,486,495,511,0,483,488,479],
[520,467,517,558,507,499,504,525,520,554,517,0,471,509],
[544,510,495,528,519,540,546,519,525,564,512,529,0,532],
[524,497,509,551,500,498,533,515,510,536,521,491,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 67, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,549,502,550,506,570,499,511,505,514,508,507,498,485],
[451,0,475,497,479,505,465,454,473,511,467,534,543,508],
[498,525,0,485,525,543,488,469,439,483,511,521,495,481],
[450,503,515,0,518,505,481,493,499,504,528,567,482,472],
[494,521,475,482,0,493,505,501,496,453,504,516,505,531],
[430,495,457,495,507,0,491,468,463,471,487,527,521,500],
[501,535,512,519,495,509,0,494,538,480,562,594,533,516],
[489,546,531,507,499,532,506,0,522,525,536,512,529,526],
[495,527,561,501,504,537,462,478,0,502,552,541,497,505],
[486,489,517,496,547,529,520,475,498,0,536,574,520,501],
[492,533,489,472,496,513,438,464,448,464,0,537,462,428],
[493,466,479,433,484,473,406,488,459,426,463,0,486,471],
[502,457,505,518,495,479,467,471,503,480,538,514,0,492],
[515,492,519,528,469,500,484,474,495,499,572,529,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 68, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,480,544,475,539,486,581,595,543,533,505,462,520],
[508,0,485,531,523,545,570,545,506,545,599,518,494,597],
[520,515,0,475,430,544,499,534,486,458,478,504,452,513],
[456,469,525,0,488,581,515,546,475,469,493,519,502,538],
[525,477,570,512,0,524,479,539,466,490,464,519,516,561],
[461,455,456,419,476,0,456,533,548,446,458,501,471,503],
[514,430,501,485,521,544,0,545,468,494,510,515,563,536],
[419,455,466,454,461,467,455,0,466,429,448,459,413,473],
[405,494,514,525,534,452,532,534,0,474,483,496,478,531],
[457,455,542,531,510,554,506,571,526,0,527,501,441,528],
[467,401,522,507,536,542,490,552,517,473,0,516,475,529],
[495,482,496,481,481,499,485,541,504,499,484,0,511,557],
[538,506,548,498,484,529,437,587,522,559,525,489,0,564],
[480,403,487,462,439,497,464,527,469,472,471,443,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 69, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,442,473,402,473,518,486,460,436,538,496,493,532],
[592,0,583,542,477,507,539,537,526,534,533,517,493,524],
[558,417,0,504,458,463,480,473,509,432,449,427,394,535],
[527,458,496,0,445,499,487,518,404,439,480,491,514,524],
[598,523,542,555,0,465,544,640,519,492,585,557,496,516],
[527,493,537,501,535,0,572,520,533,520,544,544,435,469],
[482,461,520,513,456,428,0,573,492,506,465,508,491,468],
[514,463,527,482,360,480,427,0,360,437,445,459,457,524],
[540,474,491,596,481,467,508,640,0,505,475,556,465,460],
[564,466,568,561,508,480,494,563,495,0,461,531,516,520],
[462,467,551,520,415,456,535,555,525,539,0,551,416,496],
[504,483,573,509,443,456,492,541,444,469,449,0,469,508],
[507,507,606,486,504,565,509,543,535,484,584,531,0,576],
[468,476,465,476,484,531,532,476,540,480,504,492,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 70, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,536,530,514,496,508,541,533,520,530,552,541,498,505],
[464,0,516,499,529,501,500,541,483,497,528,502,502,472],
[470,484,0,488,469,467,488,494,457,455,515,523,500,464],
[486,501,512,0,456,465,490,527,473,499,515,508,515,489],
[504,471,531,544,0,519,511,556,501,522,546,505,497,507],
[492,499,533,535,481,0,532,543,507,498,512,514,502,508],
[459,500,512,510,489,468,0,493,495,468,523,529,486,459],
[467,459,506,473,444,457,507,0,485,488,501,471,488,464],
[480,517,543,527,499,493,505,515,0,494,537,491,511,482],
[470,503,545,501,478,502,532,512,506,0,520,519,506,497],
[448,472,485,485,454,488,477,499,463,480,0,489,438,458],
[459,498,477,492,495,486,471,529,509,481,511,0,504,506],
[502,498,500,485,503,498,514,512,489,494,562,496,0,494],
[495,528,536,511,493,492,541,536,518,503,542,494,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 71, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,464,493,553,530,514,486,516,492,485,504,474,465],
[545,0,480,536,566,524,518,591,541,552,505,496,524,502],
[536,520,0,499,574,491,520,550,543,501,495,549,495,516],
[507,464,501,0,508,479,517,466,474,446,508,442,496,484],
[447,434,426,492,0,453,432,483,458,458,469,465,443,436],
[470,476,509,521,547,0,467,526,447,452,529,490,496,453],
[486,482,480,483,568,533,0,543,534,494,494,528,531,491],
[514,409,450,534,517,474,457,0,484,459,485,456,475,496],
[484,459,457,526,542,553,466,516,0,514,494,501,482,491],
[508,448,499,554,542,548,506,541,486,0,527,492,494,487],
[515,495,505,492,531,471,506,515,506,473,0,481,457,509],
[496,504,451,558,535,510,472,544,499,508,519,0,478,505],
[526,476,505,504,557,504,469,525,518,506,543,522,0,481],
[535,498,484,516,564,547,509,504,509,513,491,495,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 72, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,422,491,416,540,512,521,551,501,540,547,441,527],
[483,0,400,491,413,504,429,486,471,530,451,442,426,479],
[578,600,0,593,480,561,491,537,544,582,498,589,504,520],
[509,509,407,0,370,529,450,513,525,534,467,504,412,459],
[584,587,520,630,0,621,487,554,602,539,494,524,393,562],
[460,496,439,471,379,0,398,459,481,506,400,445,424,434],
[488,571,509,550,513,602,0,487,581,567,524,535,532,569],
[479,514,463,487,446,541,513,0,559,531,503,492,496,503],
[449,529,456,475,398,519,419,441,0,457,519,473,343,451],
[499,470,418,466,461,494,433,469,543,0,486,459,399,456],
[460,549,502,533,506,600,476,497,481,514,0,513,464,509],
[453,558,411,496,476,555,465,508,527,541,487,0,462,567],
[559,574,496,588,607,576,468,504,657,601,536,538,0,565],
[473,521,480,541,438,566,431,497,549,544,491,433,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 73, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,521,491,534,562,522,495,502,511,524,504,523,495,514],
[479,0,457,468,482,467,492,477,498,490,446,469,491,452],
[509,543,0,527,516,528,494,505,524,527,493,510,505,496],
[466,532,473,0,517,501,482,483,486,482,496,506,513,470],
[438,518,484,483,0,491,477,491,492,483,490,489,483,435],
[478,533,472,499,509,0,490,474,484,510,460,492,471,470],
[505,508,506,518,523,510,0,513,503,472,493,508,486,488],
[498,523,495,517,509,526,487,0,503,495,510,505,498,456],
[489,502,476,514,508,516,497,497,0,515,489,481,476,455],
[476,510,473,518,517,490,528,505,485,0,481,500,508,525],
[496,554,507,504,510,540,507,490,511,519,0,502,513,479],
[477,531,490,494,511,508,492,495,519,500,498,0,505,463],
[505,509,495,487,517,529,514,502,524,492,487,495,0,502],
[486,548,504,530,565,530,512,544,545,475,521,537,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 74, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,543,470,471,468,486,462,491,466,490,527,475,483,477],
[457,0,464,471,480,462,495,499,454,506,472,478,470,446],
[530,536,0,507,464,527,524,524,520,521,518,508,529,542],
[529,529,493,0,500,501,512,513,515,512,509,503,510,516],
[532,520,536,500,0,520,506,525,521,515,554,517,509,545],
[514,538,473,499,480,0,484,510,492,499,531,473,492,499],
[538,505,476,488,494,516,0,511,490,534,499,469,518,556],
[509,501,476,487,475,490,489,0,482,488,495,475,469,502],
[534,546,480,485,479,508,510,518,0,497,483,475,503,491],
[510,494,479,488,485,501,466,512,503,0,508,468,509,492],
[473,528,482,491,446,469,501,505,517,492,0,494,489,516],
[525,522,492,497,483,527,531,525,525,532,506,0,496,537],
[517,530,471,490,491,508,482,531,497,491,511,504,0,499],
[523,554,458,484,455,501,444,498,509,508,484,463,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 75, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,510,462,497,504,495,506,511,503,524,501,517,472],
[505,0,510,482,513,527,481,522,493,497,495,516,526,483],
[490,490,0,460,505,504,490,517,493,452,503,511,499,492],
[538,518,540,0,528,520,513,544,523,502,522,528,531,497],
[503,487,495,472,0,500,498,499,498,493,492,504,496,497],
[496,473,496,480,500,0,486,526,514,493,505,506,509,514],
[505,519,510,487,502,514,0,512,515,521,512,520,526,484],
[494,478,483,456,501,474,488,0,496,488,511,492,491,461],
[489,507,507,477,502,486,485,504,0,481,513,495,492,451],
[497,503,548,498,507,507,479,512,519,0,512,505,530,489],
[476,505,497,478,508,495,488,489,487,488,0,505,505,476],
[499,484,489,472,496,494,480,508,505,495,495,0,485,491],
[483,474,501,469,504,491,474,509,508,470,495,515,0,482],
[528,517,508,503,503,486,516,539,549,511,524,509,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 76, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,472,483,504,481,486,519,508,476,483,504,478,499],
[520,0,472,479,524,481,505,493,495,500,511,507,473,516],
[528,528,0,508,525,499,524,508,529,526,534,520,499,533],
[517,521,492,0,495,500,497,526,527,498,490,506,510,503],
[496,476,475,505,0,487,524,503,526,500,487,496,475,511],
[519,519,501,500,513,0,520,537,504,514,512,515,491,515],
[514,495,476,503,476,480,0,513,487,499,501,493,468,511],
[481,507,492,474,497,463,487,0,496,460,498,491,483,490],
[492,505,471,473,474,496,513,504,0,490,501,502,463,498],
[524,500,474,502,500,486,501,540,510,0,506,487,497,498],
[517,489,466,510,513,488,499,502,499,494,0,500,507,509],
[496,493,480,494,504,485,507,509,498,513,500,0,496,508],
[522,527,501,490,525,509,532,517,537,503,493,504,0,521],
[501,484,467,497,489,485,489,510,502,502,491,492,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 77, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,458,469,499,492,455,503,409,516,490,457,437,529],
[542,0,516,421,509,453,454,419,439,482,481,511,505,539],
[542,484,0,481,559,536,485,438,413,494,513,493,424,549],
[531,579,519,0,572,556,509,530,467,550,491,554,561,548],
[501,491,441,428,0,497,402,418,441,523,491,513,465,509],
[508,547,464,444,503,0,486,530,433,486,477,456,513,580],
[545,546,515,491,598,514,0,467,543,493,501,533,548,528],
[497,581,562,470,582,470,533,0,503,542,473,530,470,580],
[591,561,587,533,559,567,457,497,0,553,543,551,497,584],
[484,518,506,450,477,514,507,458,447,0,483,473,487,512],
[510,519,487,509,509,523,499,527,457,517,0,542,508,578],
[543,489,507,446,487,544,467,470,449,527,458,0,501,530],
[563,495,576,439,535,487,452,530,503,513,492,499,0,536],
[471,461,451,452,491,420,472,420,416,488,422,470,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 78, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,331,416,285,458,364,370,412,528,436,506,456,317,416],
[669,0,613,436,595,488,462,531,618,546,639,607,482,433],
[584,387,0,399,556,480,407,453,560,500,648,522,508,421],
[715,564,601,0,614,521,428,555,620,583,637,607,493,443],
[542,405,444,386,0,408,347,532,622,428,530,479,434,426],
[636,512,520,479,592,0,476,576,586,591,626,615,523,463],
[630,538,593,572,653,524,0,573,599,633,706,599,475,491],
[588,469,547,445,468,424,427,0,610,505,600,580,490,465],
[472,382,440,380,378,414,401,390,0,457,489,421,295,447],
[564,454,500,417,572,409,367,495,543,0,543,543,429,330],
[494,361,352,363,470,374,294,400,511,457,0,461,339,415],
[544,393,478,393,521,385,401,420,579,457,539,0,422,425],
[683,518,492,507,566,477,525,510,705,571,661,578,0,528],
[584,567,579,557,574,537,509,535,553,670,585,575,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 79, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,448,483,520,462,505,530,544,443,502,524,460,544],
[516,0,530,546,515,453,539,533,532,468,550,499,520,516],
[552,470,0,545,524,457,549,556,538,569,523,552,488,535],
[517,454,455,0,437,453,502,468,484,482,508,500,465,522],
[480,485,476,563,0,472,497,499,531,506,493,480,459,501],
[538,547,543,547,528,0,550,588,533,499,550,547,549,561],
[495,461,451,498,503,450,0,439,473,442,418,500,453,487],
[470,467,444,532,501,412,561,0,552,480,531,519,469,539],
[456,468,462,516,469,467,527,448,0,470,475,532,441,484],
[557,532,431,518,494,501,558,520,530,0,508,523,522,574],
[498,450,477,492,507,450,582,469,525,492,0,515,476,537],
[476,501,448,500,520,453,500,481,468,477,485,0,464,583],
[540,480,512,535,541,451,547,531,559,478,524,536,0,541],
[456,484,465,478,499,439,513,461,516,426,463,417,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 80, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,559,605,527,466,511,549,545,549,636,587,555,590],
[520,0,554,529,529,545,477,525,474,565,639,540,603,583],
[441,446,0,535,469,477,504,517,479,531,590,580,535,557],
[395,471,465,0,517,499,501,474,459,496,630,573,549,550],
[473,471,531,483,0,531,514,536,456,590,608,523,522,495],
[534,455,523,501,469,0,498,531,510,597,635,577,545,558],
[489,523,496,499,486,502,0,470,498,501,568,557,550,549],
[451,475,483,526,464,469,530,0,494,571,610,570,536,543],
[455,526,521,541,544,490,502,506,0,547,595,549,546,593],
[451,435,469,504,410,403,499,429,453,0,519,503,452,466],
[364,361,410,370,392,365,432,390,405,481,0,426,429,484],
[413,460,420,427,477,423,443,430,451,497,574,0,509,487],
[445,397,465,451,478,455,450,464,454,548,571,491,0,507],
[410,417,443,450,505,442,451,457,407,534,516,513,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 81, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,506,512,514,499,478,482,478,500,482,521,526,504],
[535,0,500,514,510,506,509,494,502,507,491,530,530,531],
[494,500,0,500,505,503,499,475,479,505,468,511,505,523],
[488,486,500,0,492,480,472,463,481,478,484,499,502,493],
[486,490,495,508,0,489,485,459,474,498,484,502,505,524],
[501,494,497,520,511,0,472,484,492,515,492,500,518,508],
[522,491,501,528,515,528,0,498,493,505,508,523,513,530],
[518,506,525,537,541,516,502,0,498,497,509,539,504,521],
[522,498,521,519,526,508,507,502,0,517,486,531,526,541],
[500,493,495,522,502,485,495,503,483,0,497,500,523,518],
[518,509,532,516,516,508,492,491,514,503,0,518,531,541],
[479,470,489,501,498,500,477,461,469,500,482,0,513,523],
[474,470,495,498,495,482,487,496,474,477,469,487,0,525],
[496,469,477,507,476,492,470,479,459,482,459,477,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 82, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,522,508,492,505,512,535,518,521,511,492,502,503],
[501,0,555,512,495,517,525,545,547,512,529,518,501,514],
[478,445,0,468,462,490,493,484,519,494,477,490,508,499],
[492,488,532,0,507,506,502,535,530,541,523,516,505,519],
[508,505,538,493,0,493,518,513,533,528,527,503,512,506],
[495,483,510,494,507,0,499,523,514,503,502,498,501,491],
[488,475,507,498,482,501,0,518,521,511,518,476,502,507],
[465,455,516,465,487,477,482,0,490,487,496,494,485,485],
[482,453,481,470,467,486,479,510,0,475,471,470,464,490],
[479,488,506,459,472,497,489,513,525,0,502,476,496,486],
[489,471,523,477,473,498,482,504,529,498,0,484,482,481],
[508,482,510,484,497,502,524,506,530,524,516,0,508,514],
[498,499,492,495,488,499,498,515,536,504,518,492,0,507],
[497,486,501,481,494,509,493,515,510,514,519,486,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 83, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,483,487,488,470,493,459,475,472,481,493,470,494],
[525,0,508,517,503,493,506,457,508,526,517,481,460,485],
[517,492,0,492,507,500,534,503,460,446,483,482,516,488],
[513,483,508,0,504,485,511,515,526,495,495,481,500,504],
[512,497,493,496,0,470,501,480,480,451,477,465,467,475],
[530,507,500,515,530,0,520,521,538,467,488,464,486,506],
[507,494,466,489,499,480,0,489,481,456,477,480,473,447],
[541,543,497,485,520,479,511,0,508,477,465,473,509,528],
[525,492,540,474,520,462,519,492,0,446,516,495,498,500],
[528,474,554,505,549,533,544,523,554,0,518,508,539,531],
[519,483,517,505,523,512,523,535,484,482,0,524,488,520],
[507,519,518,519,535,536,520,527,505,492,476,0,494,506],
[530,540,484,500,533,514,527,491,502,461,512,506,0,492],
[506,515,512,496,525,494,553,472,500,469,480,494,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 84, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,501,503,476,526,498,547,554,548,511,520,513,517],
[504,0,487,519,492,505,497,532,544,521,502,509,461,517],
[499,513,0,498,453,486,459,499,504,468,479,498,487,478],
[497,481,502,0,482,488,496,494,521,502,492,468,472,507],
[524,508,547,518,0,526,530,564,595,528,487,526,512,530],
[474,495,514,512,474,0,504,547,581,518,493,507,507,501],
[502,503,541,504,470,496,0,528,548,520,486,512,479,507],
[453,468,501,506,436,453,472,0,521,472,458,473,470,492],
[446,456,496,479,405,419,452,479,0,502,435,483,435,472],
[452,479,532,498,472,482,480,528,498,0,460,474,479,521],
[489,498,521,508,513,507,514,542,565,540,0,532,504,547],
[480,491,502,532,474,493,488,527,517,526,468,0,488,495],
[487,539,513,528,488,493,521,530,565,521,496,512,0,502],
[483,483,522,493,470,499,493,508,528,479,453,505,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 85, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,638,544,565,380,507,581,448,529,609,414,610,579,610],
[362,0,397,435,321,286,451,498,447,569,454,594,478,446],
[456,603,0,465,497,479,465,467,462,602,501,565,606,572],
[435,565,535,0,422,448,593,394,572,626,408,611,573,582],
[620,679,503,578,0,469,588,565,688,612,450,615,632,699],
[493,714,521,552,531,0,563,577,647,683,493,556,663,639],
[419,549,535,407,412,437,0,492,458,594,434,527,517,593],
[552,502,533,606,435,423,508,0,486,610,334,466,568,670],
[471,553,538,428,312,353,542,514,0,624,372,371,531,515],
[391,431,398,374,388,317,406,390,376,0,403,370,601,466],
[586,546,499,592,550,507,566,666,628,597,0,628,541,562],
[390,406,435,389,385,444,473,534,629,630,372,0,575,561],
[421,522,394,427,368,337,483,432,469,399,459,425,0,430],
[390,554,428,418,301,361,407,330,485,534,438,439,570,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 86, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,505,500,493,508,504,498,525,507,477,513,491,467],
[498,0,497,493,521,522,501,502,528,509,498,518,528,484],
[495,503,0,508,531,502,498,499,523,491,483,509,508,509],
[500,507,492,0,517,522,513,491,551,529,467,508,534,504],
[507,479,469,483,0,490,505,477,532,498,463,470,502,493],
[492,478,498,478,510,0,490,481,501,497,474,501,484,488],
[496,499,502,487,495,510,0,500,532,521,513,497,489,498],
[502,498,501,509,523,519,500,0,522,501,487,479,533,469],
[475,472,477,449,468,499,468,478,0,493,456,490,499,477],
[493,491,509,471,502,503,479,499,507,0,506,485,514,489],
[523,502,517,533,537,526,487,513,544,494,0,514,522,506],
[487,482,491,492,530,499,503,521,510,515,486,0,502,494],
[509,472,492,466,498,516,511,467,501,486,478,498,0,464],
[533,516,491,496,507,512,502,531,523,511,494,506,536,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 87, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,495,488,528,486,513,472,482,497,476,504,518,479],
[500,0,467,488,508,474,523,448,517,491,503,485,518,478],
[505,533,0,504,532,496,516,457,515,498,513,509,525,503],
[512,512,496,0,538,504,535,514,543,527,539,493,556,526],
[472,492,468,462,0,475,492,455,492,475,491,502,509,472],
[514,526,504,496,525,0,523,474,531,495,521,505,522,487],
[487,477,484,465,508,477,0,486,511,484,497,496,492,489],
[528,552,543,486,545,526,514,0,508,525,510,506,535,504],
[518,483,485,457,508,469,489,492,0,505,513,494,518,499],
[503,509,502,473,525,505,516,475,495,0,501,514,539,494],
[524,497,487,461,509,479,503,490,487,499,0,507,508,501],
[496,515,491,507,498,495,504,494,506,486,493,0,532,469],
[482,482,475,444,491,478,508,465,482,461,492,468,0,474],
[521,522,497,474,528,513,511,496,501,506,499,531,526,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 88, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,463,510,466,463,525,497,504,480,462,503,447,492],
[506,0,471,502,477,479,493,496,522,477,487,526,496,478],
[537,529,0,510,494,498,523,526,536,505,494,529,540,505],
[490,498,490,0,464,481,524,513,482,502,484,496,506,476],
[534,523,506,536,0,498,521,536,519,495,514,525,513,492],
[537,521,502,519,502,0,539,551,543,524,511,512,533,494],
[475,507,477,476,479,461,0,499,486,480,480,478,464,480],
[503,504,474,487,464,449,501,0,488,474,459,466,486,477],
[496,478,464,518,481,457,514,512,0,474,507,485,492,465],
[520,523,495,498,505,476,520,526,526,0,520,501,553,484],
[538,513,506,516,486,489,520,541,493,480,0,524,517,513],
[497,474,471,504,475,488,522,534,515,499,476,0,522,450],
[553,504,460,494,487,467,536,514,508,447,483,478,0,490],
[508,522,495,524,508,506,520,523,535,516,487,550,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 89, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,501,483,480,486,484,496,481,519,502,516,500,526],
[495,0,503,467,481,472,467,499,486,498,506,495,501,526],
[499,497,0,475,467,461,457,484,488,496,493,493,493,517],
[517,533,525,0,513,503,501,512,485,524,515,501,526,528],
[520,519,533,487,0,509,487,498,525,511,533,526,516,527],
[514,528,539,497,491,0,487,516,510,533,523,519,529,554],
[516,533,543,499,513,513,0,539,526,532,538,539,519,542],
[504,501,516,488,502,484,461,0,484,494,499,480,496,519],
[519,514,512,515,475,490,474,516,0,505,494,504,508,536],
[481,502,504,476,489,467,468,506,495,0,506,490,489,517],
[498,494,507,485,467,477,462,501,506,494,0,505,511,509],
[484,505,507,499,474,481,461,520,496,510,495,0,497,513],
[500,499,507,474,484,471,481,504,492,511,489,503,0,514],
[474,474,483,472,473,446,458,481,464,483,491,487,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 90, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,521,498,497,501,501,499,505,519,489,499,503,498,454],
[479,0,493,479,490,504,460,487,468,489,495,505,487,463],
[502,507,0,496,495,519,529,515,516,494,504,508,519,486],
[503,521,504,0,508,528,508,511,508,491,501,528,519,481],
[499,510,505,492,0,517,504,503,497,507,511,503,519,500],
[499,496,481,472,483,0,497,493,499,497,512,485,474,487],
[501,540,471,492,496,503,0,493,511,478,500,495,491,483],
[495,513,485,489,497,507,507,0,524,489,504,510,493,483],
[481,532,484,492,503,501,489,476,0,502,506,519,493,463],
[511,511,506,509,493,503,522,511,498,0,499,513,508,501],
[501,505,496,499,489,488,500,496,494,501,0,496,505,497],
[497,495,492,472,497,515,505,490,481,487,504,0,501,478],
[502,513,481,481,481,526,509,507,507,492,495,499,0,485],
[546,537,514,519,500,513,517,517,537,499,503,522,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 91, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,569,445,732,682,377,251,602,413,641,487,580,514,484],
[431,0,487,601,597,395,299,463,402,579,614,417,432,429],
[555,513,0,589,602,555,426,531,638,496,734,355,528,588],
[268,399,411,0,593,392,301,535,485,406,402,352,330,340],
[318,403,398,407,0,402,436,515,315,497,404,403,374,407],
[623,605,445,608,598,0,445,514,478,511,504,515,536,425],
[749,701,574,699,564,555,0,506,528,570,672,336,659,722],
[398,537,469,465,485,486,494,0,443,565,483,297,458,534],
[587,598,362,515,685,522,472,557,0,619,457,442,446,580],
[359,421,504,594,503,489,430,435,381,0,509,231,427,499],
[513,386,266,598,596,496,328,517,543,491,0,250,377,311],
[420,583,645,648,597,485,664,703,558,769,750,0,518,643],
[486,568,472,670,626,464,341,542,554,573,623,482,0,377],
[516,571,412,660,593,575,278,466,420,501,689,357,623,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 92, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,514,497,557,472,547,474,523,463,466,539,496,529],
[521,0,529,545,566,553,418,530,487,461,476,490,530,522],
[486,471,0,468,554,484,423,554,558,495,541,527,562,513],
[503,455,532,0,542,479,477,514,474,482,493,563,531,503],
[443,434,446,458,0,441,383,443,475,466,434,457,460,487],
[528,447,516,521,559,0,520,477,460,464,536,548,508,587],
[453,582,577,523,617,480,0,526,604,567,520,538,595,641],
[526,470,446,486,557,523,474,0,528,476,458,508,485,535],
[477,513,442,526,525,540,396,472,0,432,505,542,507,537],
[537,539,505,518,534,536,433,524,568,0,523,515,532,493],
[534,524,459,507,566,464,480,542,495,477,0,522,558,575],
[461,510,473,437,543,452,462,492,458,485,478,0,474,498],
[504,470,438,469,540,492,405,515,493,468,442,526,0,455],
[471,478,487,497,513,413,359,465,463,507,425,502,545,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 93, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,487,572,450,516,529,516,514,494,470,526,465,525],
[502,0,446,548,487,542,504,458,405,466,437,476,480,509],
[513,554,0,583,528,554,517,580,436,548,561,542,537,591],
[428,452,417,0,440,505,477,499,385,451,422,464,468,478],
[550,513,472,560,0,550,551,540,457,505,483,560,514,522],
[484,458,446,495,450,0,499,492,470,466,474,448,452,480],
[471,496,483,523,449,501,0,503,379,453,446,507,446,453],
[484,542,420,501,460,508,497,0,457,491,455,475,488,486],
[486,595,564,615,543,530,621,543,0,504,562,508,529,570],
[506,534,452,549,495,534,547,509,496,0,517,499,496,561],
[530,563,439,578,517,526,554,545,438,483,0,517,512,545],
[474,524,458,536,440,552,493,525,492,501,483,0,473,490],
[535,520,463,532,486,548,554,512,471,504,488,527,0,539],
[475,491,409,522,478,520,547,514,430,439,455,510,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 94, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,480,493,482,505,497,456,487,491,488,473,456,501],
[538,0,485,522,463,489,495,498,508,490,503,500,480,508],
[520,515,0,512,494,515,517,496,499,496,504,493,480,536],
[507,478,488,0,479,498,498,479,509,479,471,495,454,506],
[518,537,506,521,0,530,533,517,514,520,513,506,494,534],
[495,511,485,502,470,0,505,493,490,484,459,463,465,488],
[503,505,483,502,467,495,0,489,479,490,494,463,471,506],
[544,502,504,521,483,507,511,0,521,500,495,505,497,522],
[513,492,501,491,486,510,521,479,0,492,480,483,471,496],
[509,510,504,521,480,516,510,500,508,0,513,485,477,529],
[512,497,496,529,487,541,506,505,520,487,0,488,503,516],
[527,500,507,505,494,537,537,495,517,515,512,0,496,539],
[544,520,520,546,506,535,529,503,529,523,497,504,0,552],
[499,492,464,494,466,512,494,478,504,471,484,461,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 95, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,530,464,549,484,480,520,550,538,516,476,535,526,505],
[470,0,465,492,515,467,536,511,528,511,484,486,496,522],
[536,535,0,500,558,530,545,570,579,549,555,572,515,510],
[451,508,500,0,535,506,564,529,514,486,480,539,528,547],
[516,485,442,465,0,452,476,505,495,478,482,476,493,453],
[520,533,470,494,548,0,552,551,551,570,546,552,522,521],
[480,464,455,436,524,448,0,529,500,463,478,473,441,467],
[450,489,430,471,495,449,471,0,505,492,481,482,480,452],
[462,472,421,486,505,449,500,495,0,506,480,491,477,495],
[484,489,451,514,522,430,537,508,494,0,503,525,538,532],
[524,516,445,520,518,454,522,519,520,497,0,524,510,513],
[465,514,428,461,524,448,527,518,509,475,476,0,481,480],
[474,504,485,472,507,478,559,520,523,462,490,519,0,495],
[495,478,490,453,547,479,533,548,505,468,487,520,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 96, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,520,536,494,513,492,514,519,528,519,534,531,523,494],
[480,0,538,503,530,518,504,509,510,508,499,520,529,495],
[464,462,0,485,493,490,496,473,472,472,497,492,495,508],
[506,497,515,0,500,525,512,514,500,495,495,512,477,494],
[487,470,507,500,0,522,485,500,482,486,490,524,484,513],
[508,482,510,475,478,0,472,509,498,479,484,513,503,504],
[486,496,504,488,515,528,0,513,519,499,495,501,511,521],
[481,491,527,486,500,491,487,0,470,479,472,524,488,503],
[472,490,528,500,518,502,481,530,0,490,503,537,497,513],
[481,492,528,505,514,521,501,521,510,0,501,520,499,512],
[466,501,503,505,510,516,505,528,497,499,0,521,508,492],
[469,480,508,488,476,487,499,476,463,480,479,0,501,497],
[477,471,505,523,516,497,489,512,503,501,492,499,0,496],
[506,505,492,506,487,496,479,497,487,488,508,503,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 97, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,506,540,544,542,531,527,487,510,527,513,517,513],
[506,0,494,552,527,501,505,513,511,535,473,471,510,494],
[494,506,0,510,514,529,535,509,510,515,474,471,513,478],
[460,448,490,0,495,503,499,483,459,516,479,511,490,487],
[456,473,486,505,0,486,483,486,484,463,467,447,485,467],
[458,499,471,497,514,0,523,481,478,496,470,462,512,485],
[469,495,465,501,517,477,0,504,511,498,475,469,480,531],
[473,487,491,517,514,519,496,0,495,510,458,497,516,486],
[513,489,490,541,516,522,489,505,0,519,451,507,487,509],
[490,465,485,484,537,504,502,490,481,0,492,493,502,487],
[473,527,526,521,533,530,525,542,549,508,0,510,533,531],
[487,529,529,489,553,538,531,503,493,507,490,0,506,515],
[483,490,487,510,515,488,520,484,513,498,467,494,0,479],
[487,506,522,513,533,515,469,514,491,513,469,485,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 98, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,464,515,498,503,472,513,537,532,523,515,517,548],
[493,0,465,463,504,495,474,500,517,518,499,488,498,510],
[536,535,0,500,518,493,522,518,553,558,540,525,526,556],
[485,537,500,0,505,490,477,500,524,536,524,518,507,527],
[502,496,482,495,0,495,462,458,532,533,505,496,507,524],
[497,505,507,510,505,0,509,508,538,548,525,492,521,563],
[528,526,478,523,538,491,0,506,527,550,538,500,506,530],
[487,500,482,500,542,492,494,0,545,529,507,477,502,514],
[463,483,447,476,468,462,473,455,0,511,495,485,451,511],
[468,482,442,464,467,452,450,471,489,0,485,457,473,501],
[477,501,460,476,495,475,462,493,505,515,0,473,480,509],
[485,512,475,482,504,508,500,523,515,543,527,0,506,538],
[483,502,474,493,493,479,494,498,549,527,520,494,0,535],
[452,490,444,473,476,437,470,486,489,499,491,462,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 99, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,520,475,512,489,486,516,471,510,523,514,483,532],
[482,0,482,472,494,473,458,472,464,494,521,496,451,481],
[480,518,0,469,493,467,500,483,485,499,520,478,469,502],
[525,528,531,0,522,506,514,518,499,516,533,522,489,523],
[488,506,507,478,0,459,496,499,509,497,545,507,466,507],
[511,527,533,494,541,0,518,516,509,522,545,520,509,560],
[514,542,500,486,504,482,0,499,480,515,536,516,461,522],
[484,528,517,482,501,484,501,0,502,502,509,513,473,528],
[529,536,515,501,491,491,520,498,0,516,545,518,470,545],
[490,506,501,484,503,478,485,498,484,0,551,506,476,518],
[477,479,480,467,455,455,464,491,455,449,0,489,445,506],
[486,504,522,478,493,480,484,487,482,494,511,0,469,511],
[517,549,531,511,534,491,539,527,530,524,555,531,0,535],
[468,519,498,477,493,440,478,472,455,482,494,489,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 100, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,551,518,501,455,522,498,531,490,504,511,482,512],
[494,0,509,472,480,480,505,452,550,486,447,489,511,484],
[449,491,0,476,485,500,506,455,514,487,444,467,507,491],
[482,528,524,0,493,479,524,490,532,476,461,453,518,514],
[499,520,515,507,0,484,520,502,510,483,500,484,543,531],
[545,520,500,521,516,0,555,528,518,521,502,502,527,547],
[478,495,494,476,480,445,0,449,469,468,460,465,485,501],
[502,548,545,510,498,472,551,0,485,517,487,493,499,494],
[469,450,486,468,490,482,531,515,0,477,440,473,486,499],
[510,514,513,524,517,479,532,483,523,0,485,540,495,555],
[496,553,556,539,500,498,540,513,560,515,0,529,525,513],
[489,511,533,547,516,498,535,507,527,460,471,0,531,532],
[518,489,493,482,457,473,515,501,514,505,475,469,0,496],
[488,516,509,486,469,453,499,506,501,445,487,468,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 101, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,490,437,459,483,467,475,461,462,464,457,494,495],
[584,0,512,467,503,514,499,507,486,513,526,520,521,552],
[510,488,0,486,481,479,487,519,474,486,484,514,512,503],
[563,533,514,0,490,499,477,534,476,503,479,510,503,501],
[541,497,519,510,0,507,463,522,508,519,538,537,472,507],
[517,486,521,501,493,0,492,544,512,522,502,495,479,509],
[533,501,513,523,537,508,0,515,497,511,544,568,501,532],
[525,493,481,466,478,456,485,0,481,499,507,508,495,492],
[539,514,526,524,492,488,503,519,0,488,495,501,485,542],
[538,487,514,497,481,478,489,501,512,0,513,547,499,480],
[536,474,516,521,462,498,456,493,505,487,0,524,479,489],
[543,480,486,490,463,505,432,492,499,453,476,0,466,486],
[506,479,488,497,528,521,499,505,515,501,521,534,0,508],
[505,448,497,499,493,491,468,508,458,520,511,514,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 102, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,447,516,491,457,487,521,497,472,463,515,457,510],
[534,0,496,521,515,517,516,533,515,505,514,513,495,505],
[553,504,0,525,512,517,543,536,537,498,497,526,501,505],
[484,479,475,0,476,463,515,506,480,480,473,505,472,477],
[509,485,488,524,0,514,498,498,476,497,471,484,452,493],
[543,483,483,537,486,0,510,529,494,474,485,524,489,483],
[513,484,457,485,502,490,0,518,491,477,460,509,468,496],
[479,467,464,494,502,471,482,0,496,495,475,481,460,481],
[503,485,463,520,524,506,509,504,0,506,483,509,475,494],
[528,495,502,520,503,526,523,505,494,0,496,509,484,517],
[537,486,503,527,529,515,540,525,517,504,0,514,509,554],
[485,487,474,495,516,476,491,519,491,491,486,0,480,480],
[543,505,499,528,548,511,532,540,525,516,491,520,0,530],
[490,495,495,523,507,517,504,519,506,483,446,520,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 103, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,487,518,513,499,512,506,528,514,488,493,525,546],
[498,0,527,535,516,512,523,490,558,537,506,513,534,541],
[513,473,0,513,517,497,513,506,524,511,499,485,513,532],
[482,465,487,0,491,476,482,490,514,496,477,480,494,504],
[487,484,483,509,0,475,490,498,499,501,475,479,500,521],
[501,488,503,524,525,0,500,497,530,523,508,500,528,558],
[488,477,487,518,510,500,0,474,505,503,507,476,516,526],
[494,510,494,510,502,503,526,0,521,502,502,486,521,532],
[472,442,476,486,501,470,495,479,0,504,482,473,499,513],
[486,463,489,504,499,477,497,498,496,0,486,485,510,507],
[512,494,501,523,525,492,493,498,518,514,0,501,502,529],
[507,487,515,520,521,500,524,514,527,515,499,0,539,539],
[475,466,487,506,500,472,484,479,501,490,498,461,0,535],
[454,459,468,496,479,442,474,468,487,493,471,461,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 104, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,518,490,511,541,480,455,545,526,495,505,478,503],
[527,0,496,511,487,539,496,529,519,538,498,523,482,487],
[482,504,0,482,518,511,486,489,513,497,476,497,485,468],
[510,489,518,0,497,554,518,512,519,530,521,530,499,504],
[489,513,482,503,0,526,498,501,533,509,484,504,511,495],
[459,461,489,446,474,0,463,463,489,498,463,482,490,505],
[520,504,514,482,502,537,0,524,513,529,496,497,504,489],
[545,471,511,488,499,537,476,0,512,509,471,522,494,501],
[455,481,487,481,467,511,487,488,0,506,478,479,491,488],
[474,462,503,470,491,502,471,491,494,0,463,492,476,491],
[505,502,524,479,516,537,504,529,522,537,0,516,487,499],
[495,477,503,470,496,518,503,478,521,508,484,0,461,474],
[522,518,515,501,489,510,496,506,509,524,513,539,0,520],
[497,513,532,496,505,495,511,499,512,509,501,526,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 105, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,485,496,493,471,505,483,475,491,489,517,488,473],
[526,0,489,508,519,490,537,490,515,491,492,502,500,509],
[515,511,0,482,490,461,516,489,514,501,485,497,487,497],
[504,492,518,0,540,501,527,496,501,527,508,521,515,490],
[507,481,510,460,0,493,514,492,502,499,498,515,471,469],
[529,510,539,499,507,0,517,506,524,526,514,537,528,508],
[495,463,484,473,486,483,0,485,486,482,500,510,478,498],
[517,510,511,504,508,494,515,0,495,521,500,508,497,490],
[525,485,486,499,498,476,514,505,0,495,477,498,496,498],
[509,509,499,473,501,474,518,479,505,0,481,484,485,467],
[511,508,515,492,502,486,500,500,523,519,0,516,516,509],
[483,498,503,479,485,463,490,492,502,516,484,0,473,497],
[512,500,513,485,529,472,522,503,504,515,484,527,0,477],
[527,491,503,510,531,492,502,510,502,533,491,503,523,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 106, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,525,492,503,548,507,500,537,533,520,525,504,524,527],
[475,0,482,478,547,485,454,524,488,517,515,479,487,521],
[508,518,0,491,520,494,464,524,503,503,496,498,494,522],
[497,522,509,0,531,535,480,523,559,495,550,506,532,572],
[452,453,480,469,0,480,419,471,485,481,502,454,452,505],
[493,515,506,465,520,0,470,462,502,500,504,489,499,524],
[500,546,536,520,581,530,0,564,555,519,552,509,522,554],
[463,476,476,477,529,538,436,0,501,495,509,466,495,505],
[467,512,497,441,515,498,445,499,0,483,521,465,457,545],
[480,483,497,505,519,500,481,505,517,0,543,500,508,554],
[475,485,504,450,498,496,448,491,479,457,0,449,451,514],
[496,521,502,494,546,511,491,534,535,500,551,0,520,555],
[476,513,506,468,548,501,478,505,543,492,549,480,0,547],
[473,479,478,428,495,476,446,495,455,446,486,445,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 107, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,570,403,502,501,523,387,425,457,464,551,353,586,386],
[430,0,399,444,428,403,345,334,313,336,391,285,515,413],
[597,601,0,523,447,588,351,518,515,410,547,326,528,514],
[498,556,477,0,347,443,332,420,434,424,396,278,721,522],
[499,572,553,653,0,573,483,585,511,504,592,392,630,568],
[477,597,412,557,427,0,450,402,508,473,556,548,570,526],
[613,655,649,668,517,550,0,548,597,722,687,474,772,611],
[575,666,482,580,415,598,452,0,505,626,524,426,653,613],
[543,687,485,566,489,492,403,495,0,432,455,337,683,491],
[536,664,590,576,496,527,278,374,568,0,641,459,616,602],
[449,609,453,604,408,444,313,476,545,359,0,360,532,515],
[647,715,674,722,608,452,526,574,663,541,640,0,730,568],
[414,485,472,279,370,430,228,347,317,384,468,270,0,389],
[614,587,486,478,432,474,389,387,509,398,485,432,611,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 108, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,472,394,488,577,509,455,434,407,491,488,412,515],
[555,0,321,524,513,598,439,465,535,481,500,485,513,510],
[528,679,0,534,538,587,488,600,533,502,554,466,557,661],
[606,476,466,0,519,415,449,532,422,445,415,524,558,550],
[512,487,462,481,0,510,468,517,507,509,419,485,507,563],
[423,402,413,585,490,0,455,514,438,422,417,485,492,623],
[491,561,512,551,532,545,0,527,504,502,482,543,607,616],
[545,535,400,468,483,486,473,0,432,473,485,370,578,459],
[566,465,467,578,493,562,496,568,0,408,458,434,488,529],
[593,519,498,555,491,578,498,527,592,0,463,494,531,599],
[509,500,446,585,581,583,518,515,542,537,0,532,566,550],
[512,515,534,476,515,515,457,630,566,506,468,0,613,473],
[588,487,443,442,493,508,393,422,512,469,434,387,0,492],
[485,490,339,450,437,377,384,541,471,401,450,527,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 109, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,391,652,472,604,530,717,263,517,534,293,666,569,121],
[609,0,678,563,871,794,508,596,776,616,539,590,645,463],
[348,322,0,616,836,619,374,450,621,461,396,811,470,385],
[528,437,384,0,557,557,523,446,490,493,351,419,426,221],
[396,129,164,443,0,516,346,376,420,472,246,507,270,291],
[470,206,381,443,484,0,322,401,518,474,105,545,149,410],
[283,492,626,477,654,678,0,257,490,584,300,656,345,356],
[737,404,550,554,624,599,743,0,353,617,458,710,517,529],
[483,224,379,510,580,482,510,647,0,490,358,477,390,346],
[466,384,539,507,528,526,416,383,510,0,339,583,592,472],
[707,461,604,649,754,895,700,542,642,661,0,584,710,454],
[334,410,189,581,493,455,344,290,523,417,416,0,332,140],
[431,355,530,574,730,851,655,483,610,408,290,668,0,409],
[879,537,615,779,709,590,644,471,654,528,546,860,591,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 110, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,519,486,529,511,502,479,440,490,510,453,490,469,553],
[481,0,481,513,512,507,512,493,469,487,434,491,455,503],
[514,519,0,542,562,521,519,500,516,489,492,480,487,514],
[471,487,458,0,515,507,458,445,479,475,438,463,449,494],
[489,488,438,485,0,514,473,420,451,490,416,504,447,470],
[498,493,479,493,486,0,476,474,507,460,453,467,433,494],
[521,488,481,542,527,524,0,472,471,488,443,489,469,510],
[560,507,500,555,580,526,528,0,501,515,510,515,503,516],
[510,531,484,521,549,493,529,499,0,513,461,501,474,515],
[490,513,511,525,510,540,512,485,487,0,477,492,463,526],
[547,566,508,562,584,547,557,490,539,523,0,540,497,524],
[510,509,520,537,496,533,511,485,499,508,460,0,492,543],
[531,545,513,551,553,567,531,497,526,537,503,508,0,545],
[447,497,486,506,530,506,490,484,485,474,476,457,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 111, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,456,508,491,477,506,515,490,488,483,499,473,498],
[517,0,490,498,495,506,515,518,518,526,510,502,482,511],
[544,510,0,504,482,493,492,520,523,504,525,527,497,488],
[492,502,496,0,505,522,515,528,504,519,519,513,496,502],
[509,505,518,495,0,488,503,509,500,492,493,516,489,499],
[523,494,507,478,512,0,499,515,487,533,487,510,507,501],
[494,485,508,485,497,501,0,498,497,511,491,501,488,503],
[485,482,480,472,491,485,502,0,496,481,495,479,502,488],
[510,482,477,496,500,513,503,504,0,488,489,505,508,496],
[512,474,496,481,508,467,489,519,512,0,486,501,486,478],
[517,490,475,481,507,513,509,505,511,514,0,525,498,504],
[501,498,473,487,484,490,499,521,495,499,475,0,473,492],
[527,518,503,504,511,493,512,498,492,514,502,527,0,505],
[502,489,512,498,501,499,497,512,504,522,496,508,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 112, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,514,476,474,501,524,512,536,495,538,467,505,509],
[508,0,576,500,480,480,523,521,502,519,509,510,540,526],
[486,424,0,481,447,449,473,496,499,476,497,470,455,506],
[524,500,519,0,470,475,526,509,548,528,542,519,518,503],
[526,520,553,530,0,493,508,529,529,535,524,521,529,531],
[499,520,551,525,507,0,551,509,534,526,510,529,525,541],
[476,477,527,474,492,449,0,496,486,491,477,480,506,496],
[488,479,504,491,471,491,504,0,505,514,487,483,507,508],
[464,498,501,452,471,466,514,495,0,497,469,461,491,511],
[505,481,524,472,465,474,509,486,503,0,494,487,492,490],
[462,491,503,458,476,490,523,513,531,506,0,497,493,510],
[533,490,530,481,479,471,520,517,539,513,503,0,514,523],
[495,460,545,482,471,475,494,493,509,508,507,486,0,516],
[491,474,494,497,469,459,504,492,489,510,490,477,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 113, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,502,483,487,456,476,450,459,486,461,453,491,484],
[544,0,549,529,515,539,544,519,516,539,507,485,535,539],
[498,451,0,501,495,483,512,470,482,485,472,484,497,540],
[517,471,499,0,507,492,501,500,498,510,486,464,507,520],
[513,485,505,493,0,479,507,499,482,513,469,476,489,539],
[544,461,517,508,521,0,520,474,471,495,452,466,522,512],
[524,456,488,499,493,480,0,482,510,486,449,482,506,509],
[550,481,530,500,501,526,518,0,517,539,504,481,515,567],
[541,484,518,502,518,529,490,483,0,510,481,489,525,540],
[514,461,515,490,487,505,514,461,490,0,457,462,482,508],
[539,493,528,514,531,548,551,496,519,543,0,522,546,541],
[547,515,516,536,524,534,518,519,511,538,478,0,538,537],
[509,465,503,493,511,478,494,485,475,518,454,462,0,514],
[516,461,460,480,461,488,491,433,460,492,459,463,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 114, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,493,506,501,466,464,474,484,463,492,483,482,485],
[505,0,497,478,500,482,459,467,471,478,484,471,462,452],
[507,503,0,520,524,485,492,481,496,500,501,483,492,469],
[494,522,480,0,521,474,473,497,488,484,498,472,470,474],
[499,500,476,479,0,484,457,464,472,475,466,459,479,481],
[534,518,515,526,516,0,489,482,515,496,506,488,480,491],
[536,541,508,527,543,511,0,480,520,496,484,503,500,497],
[526,533,519,503,536,518,520,0,525,489,487,506,515,489],
[516,529,504,512,528,485,480,475,0,487,494,481,475,487],
[537,522,500,516,525,504,504,511,513,0,495,512,505,474],
[508,516,499,502,534,494,516,513,506,505,0,519,497,507],
[517,529,517,528,541,512,497,494,519,488,481,0,499,505],
[518,538,508,530,521,520,500,485,525,495,503,501,0,521],
[515,548,531,526,519,509,503,511,513,526,493,495,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 115, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,504,519,488,504,513,499,478,473,472,492,496,508],
[501,0,499,493,500,518,503,509,504,514,499,507,507,537],
[496,501,0,499,490,516,510,514,500,509,470,493,498,497],
[481,507,501,0,500,507,521,524,506,500,464,511,511,528],
[512,500,510,500,0,509,507,525,497,498,492,492,498,529],
[496,482,484,493,491,0,518,496,479,487,464,482,477,501],
[487,497,490,479,493,482,0,499,487,481,475,480,505,501],
[501,491,486,476,475,504,501,0,470,487,486,497,475,508],
[522,496,500,494,503,521,513,530,0,505,504,511,508,534],
[527,486,491,500,502,513,519,513,495,0,489,497,490,522],
[528,501,530,536,508,536,525,514,496,511,0,510,522,528],
[508,493,507,489,508,518,520,503,489,503,490,0,507,514],
[504,493,502,489,502,523,495,525,492,510,478,493,0,509],
[492,463,503,472,471,499,499,492,466,478,472,486,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 116, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,506,485,479,516,469,475,493,507,492,492,483,476],
[528,0,512,497,490,531,520,503,503,514,507,495,508,500],
[494,488,0,471,491,508,502,473,484,492,498,495,461,477],
[515,503,529,0,501,522,503,501,513,516,516,491,510,498],
[521,510,509,499,0,542,516,484,520,494,509,498,489,491],
[484,469,492,478,458,0,473,467,479,482,469,470,466,477],
[531,480,498,497,484,527,0,491,499,494,503,509,493,483],
[525,497,527,499,516,533,509,0,515,517,500,517,499,499],
[507,497,516,487,480,521,501,485,0,510,492,499,474,490],
[493,486,508,484,506,518,506,483,490,0,504,501,483,477],
[508,493,502,484,491,531,497,500,508,496,0,500,475,491],
[508,505,505,509,502,530,491,483,501,499,500,0,502,489],
[517,492,539,490,511,534,507,501,526,517,525,498,0,495],
[524,500,523,502,509,523,517,501,510,523,509,511,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 117, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,493,492,482,445,473,479,462,461,471,500,497,459],
[494,0,502,499,494,461,506,491,468,459,502,505,495,457],
[507,498,0,505,488,485,488,541,490,491,504,519,515,512],
[508,501,495,0,489,471,502,492,487,501,502,536,510,486],
[518,506,512,511,0,483,521,520,485,466,502,555,512,491],
[555,539,515,529,517,0,498,524,506,518,501,506,524,490],
[527,494,512,498,479,502,0,493,486,483,506,507,484,495],
[521,509,459,508,480,476,507,0,475,480,494,492,504,507],
[538,532,510,513,515,494,514,525,0,487,515,548,521,481],
[539,541,509,499,534,482,517,520,513,0,500,525,539,525],
[529,498,496,498,498,499,494,506,485,500,0,542,527,487],
[500,495,481,464,445,494,493,508,452,475,458,0,506,457],
[503,505,485,490,488,476,516,496,479,461,473,494,0,465],
[541,543,488,514,509,510,505,493,519,475,513,543,535,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 118, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,527,514,548,564,521,511,495,487,495,519,533,548,498],
[473,0,520,534,558,512,524,500,554,513,557,517,507,536],
[486,480,0,495,531,509,505,498,515,491,514,521,502,467],
[452,466,505,0,518,472,469,477,500,498,471,513,486,498],
[436,442,469,482,0,461,446,475,472,433,487,459,475,472],
[479,488,491,528,539,0,495,494,500,451,515,511,508,481],
[489,476,495,531,554,505,0,492,533,498,501,509,504,503],
[505,500,502,523,525,506,508,0,517,502,478,500,500,485],
[513,446,485,500,528,500,467,483,0,474,492,481,544,512],
[505,487,509,502,567,549,502,498,526,0,512,482,533,510],
[481,443,486,529,513,485,499,522,508,488,0,495,493,495],
[467,483,479,487,541,489,491,500,519,518,505,0,499,512],
[452,493,498,514,525,492,496,500,456,467,507,501,0,481],
[502,464,533,502,528,519,497,515,488,490,505,488,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 119, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,461,459,470,500,475,477,482,485,497,499,507,493],
[524,0,478,523,476,520,507,518,512,481,510,516,514,509],
[539,522,0,492,497,518,522,495,518,504,510,526,528,510],
[541,477,508,0,480,526,491,492,528,502,505,508,520,492],
[530,524,503,520,0,510,500,510,487,525,517,515,520,505],
[500,480,482,474,490,0,480,485,500,482,490,501,493,473],
[525,493,478,509,500,520,0,489,498,492,502,497,507,493],
[523,482,505,508,490,515,511,0,500,506,504,502,509,503],
[518,488,482,472,513,500,502,500,0,486,493,491,503,504],
[515,519,496,498,475,518,508,494,514,0,501,499,503,494],
[503,490,490,495,483,510,498,496,507,499,0,494,514,507],
[501,484,474,492,485,499,503,498,509,501,506,0,496,478],
[493,486,472,480,480,507,493,491,497,497,486,504,0,504],
[507,491,490,508,495,527,507,497,496,506,493,522,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 120, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,467,508,484,472,500,478,480,477,474,489,478,502],
[529,0,508,501,478,501,508,491,494,477,477,492,479,514],
[533,492,0,526,506,520,500,503,487,495,497,500,488,516],
[492,499,474,0,470,474,495,470,469,471,464,479,477,481],
[516,522,494,530,0,483,484,478,485,483,491,486,486,512],
[528,499,480,526,517,0,490,504,523,499,490,499,490,501],
[500,492,500,505,516,510,0,511,481,495,501,500,487,505],
[522,509,497,530,522,496,489,0,499,503,495,513,517,523],
[520,506,513,531,515,477,519,501,0,495,500,522,476,496],
[523,523,505,529,517,501,505,497,505,0,522,533,491,518],
[526,523,503,536,509,510,499,505,500,478,0,506,508,513],
[511,508,500,521,514,501,500,487,478,467,494,0,495,523],
[522,521,512,523,514,510,513,483,524,509,492,505,0,507],
[498,486,484,519,488,499,495,477,504,482,487,477,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 121, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,554,503,503,459,501,487,489,480,533,498,504,517],
[536,0,519,529,525,502,468,486,481,479,520,501,520,509],
[446,481,0,492,473,504,449,463,431,459,511,480,465,489],
[497,471,508,0,471,472,480,477,435,493,489,473,490,513],
[497,475,527,529,0,472,469,449,489,481,519,513,501,498],
[541,498,496,528,528,0,494,528,511,484,548,536,520,515],
[499,532,551,520,531,506,0,507,518,499,542,500,543,561],
[513,514,537,523,551,472,493,0,521,485,544,507,523,530],
[511,519,569,565,511,489,482,479,0,501,512,524,539,534],
[520,521,541,507,519,516,501,515,499,0,518,490,534,549],
[467,480,489,511,481,452,458,456,488,482,0,488,506,485],
[502,499,520,527,487,464,500,493,476,510,512,0,504,515],
[496,480,535,510,499,480,457,477,461,466,494,496,0,506],
[483,491,511,487,502,485,439,470,466,451,515,485,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 122, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,474,493,499,523,488,485,496,508,483,517,537,473],
[483,0,482,482,514,509,472,463,479,485,495,485,490,487],
[526,518,0,510,511,523,484,500,498,514,502,501,523,500],
[507,518,490,0,494,500,473,487,507,485,466,488,489,511],
[501,486,489,506,0,492,488,484,490,531,471,466,498,494],
[477,491,477,500,508,0,491,466,504,493,492,483,501,492],
[512,528,516,527,512,509,0,501,506,511,498,501,502,505],
[515,537,500,513,516,534,499,0,511,539,525,503,521,507],
[504,521,502,493,510,496,494,489,0,517,491,506,494,511],
[492,515,486,515,469,507,489,461,483,0,489,508,500,487],
[517,505,498,534,529,508,502,475,509,511,0,527,513,508],
[483,515,499,512,534,517,499,497,494,492,473,0,513,499],
[463,510,477,511,502,499,498,479,506,500,487,487,0,498],
[527,513,500,489,506,508,495,493,489,513,492,501,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 123, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,484,534,524,491,488,505,521,502,526,494,542,513],
[489,0,495,525,495,445,482,448,505,495,502,494,481,475],
[516,505,0,523,546,478,494,475,489,515,515,512,528,474],
[466,475,477,0,510,443,463,464,497,486,493,466,499,470],
[476,505,454,490,0,470,466,465,468,474,496,490,489,477],
[509,555,522,557,530,0,481,521,518,504,521,499,524,523],
[512,518,506,537,534,519,0,493,508,531,534,513,522,493],
[495,552,525,536,535,479,507,0,508,536,546,510,516,514],
[479,495,511,503,532,482,492,492,0,486,511,478,508,482],
[498,505,485,514,526,496,469,464,514,0,533,477,506,496],
[474,498,485,507,504,479,466,454,489,467,0,454,504,500],
[506,506,488,534,510,501,487,490,522,523,546,0,533,488],
[458,519,472,501,511,476,478,484,492,494,496,467,0,483],
[487,525,526,530,523,477,507,486,518,504,500,512,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 124, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,495,533,490,539,534,526,505,483,523,513,504,547],
[483,0,542,519,487,507,489,502,515,480,534,531,508,517],
[505,458,0,487,469,457,462,452,477,441,487,478,455,516],
[467,481,513,0,488,479,457,475,482,508,510,514,497,497],
[510,513,531,512,0,489,467,490,501,513,558,532,502,510],
[461,493,543,521,511,0,530,462,502,492,514,501,534,513],
[466,511,538,543,533,470,0,496,534,467,535,525,517,511],
[474,498,548,525,510,538,504,0,525,501,554,555,517,520],
[495,485,523,518,499,498,466,475,0,454,502,515,481,519],
[517,520,559,492,487,508,533,499,546,0,543,528,497,559],
[477,466,513,490,442,486,465,446,498,457,0,509,452,464],
[487,469,522,486,468,499,475,445,485,472,491,0,495,493],
[496,492,545,503,498,466,483,483,519,503,548,505,0,499],
[453,483,484,503,490,487,489,480,481,441,536,507,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 125, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,542,530,468,485,542,506,470,504,502,516,481,541],
[498,0,537,470,492,503,539,547,504,495,528,514,492,557],
[458,463,0,431,419,447,484,470,422,435,428,430,458,465],
[470,530,569,0,529,509,571,550,490,492,533,523,493,535],
[532,508,581,471,0,497,541,542,455,519,517,532,461,548],
[515,497,553,491,503,0,579,498,472,515,510,504,467,519],
[458,461,516,429,459,421,0,467,443,472,462,462,465,476],
[494,453,530,450,458,502,533,0,475,484,456,465,483,489],
[530,496,578,510,545,528,557,525,0,528,519,527,513,565],
[496,505,565,508,481,485,528,516,472,0,515,493,496,540],
[498,472,572,467,483,490,538,544,481,485,0,536,483,521],
[484,486,570,477,468,496,538,535,473,507,464,0,521,512],
[519,508,542,507,539,533,535,517,487,504,517,479,0,525],
[459,443,535,465,452,481,524,511,435,460,479,488,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 126, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,519,427,458,464,455,469,487,545,409,562,447,595,435],
[481,0,457,498,488,525,462,534,635,497,477,445,457,333],
[573,543,0,569,529,457,471,506,530,442,576,413,620,475],
[542,502,431,0,476,526,502,442,549,445,503,424,502,416],
[536,512,471,524,0,527,511,574,592,455,616,500,543,411],
[545,475,543,474,473,0,456,555,564,457,612,453,542,448],
[531,538,529,498,489,544,0,610,636,515,653,494,570,456],
[513,466,494,558,426,445,390,0,562,392,537,442,514,411],
[455,365,470,451,408,436,364,438,0,400,516,454,483,422],
[591,503,558,555,545,543,485,608,600,0,588,485,561,523],
[438,523,424,497,384,388,347,463,484,412,0,410,389,358],
[553,555,587,576,500,547,506,558,546,515,590,0,560,454],
[405,543,380,498,457,458,430,486,517,439,611,440,0,373],
[565,667,525,584,589,552,544,589,578,477,642,546,627,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 127, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,530,494,494,503,492,505,527,501,540,502,525,489],
[482,0,510,499,492,537,477,504,518,478,516,474,525,489],
[470,490,0,483,462,500,464,494,490,484,516,493,512,472],
[506,501,517,0,501,518,495,514,519,509,529,501,534,497],
[506,508,538,499,0,512,490,534,532,504,567,515,533,501],
[497,463,500,482,488,0,484,481,518,455,520,466,498,490],
[508,523,536,505,510,516,0,517,515,492,540,487,517,491],
[495,496,506,486,466,519,483,0,517,490,506,487,525,520],
[473,482,510,481,468,482,485,483,0,486,494,479,509,471],
[499,522,516,491,496,545,508,510,514,0,525,509,531,505],
[460,484,484,471,433,480,460,494,506,475,0,445,490,480],
[498,526,507,499,485,534,513,513,521,491,555,0,515,507],
[475,475,488,466,467,502,483,475,491,469,510,485,0,480],
[511,511,528,503,499,510,509,480,529,495,520,493,520,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 128, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,525,489,487,507,485,539,526,498,479,497,478,523,495],
[475,0,468,502,461,452,519,503,453,454,462,437,480,452],
[511,532,0,522,467,485,507,522,492,476,484,473,505,491],
[513,498,478,0,450,490,509,494,465,503,503,480,481,490],
[493,539,533,550,0,491,533,550,518,513,514,517,535,496],
[515,548,515,510,509,0,525,548,523,496,498,504,532,509],
[461,481,493,491,467,475,0,506,472,461,497,475,487,470],
[474,497,478,506,450,452,494,0,494,465,476,481,456,476],
[502,547,508,535,482,477,528,506,0,476,511,476,523,498],
[521,546,524,497,487,504,539,535,524,0,517,473,535,478],
[503,538,516,497,486,502,503,524,489,483,0,495,500,510],
[522,563,527,520,483,496,525,519,524,527,505,0,529,522],
[477,520,495,519,465,468,513,544,477,465,500,471,0,486],
[505,548,509,510,504,491,530,524,502,522,490,478,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 129, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,493,487,460,454,491,543,468,463,510,510,491,518],
[498,0,529,499,504,525,485,487,479,480,487,480,456,513],
[507,471,0,464,423,468,483,578,432,441,485,506,498,508],
[513,501,536,0,480,567,534,561,516,464,500,547,497,549],
[540,496,577,520,0,550,527,527,500,516,505,540,506,541],
[546,475,532,433,450,0,505,586,466,461,485,532,477,494],
[509,515,517,466,473,495,0,517,451,490,511,557,503,557],
[457,513,422,439,473,414,483,0,427,431,494,498,462,483],
[532,521,568,484,500,534,549,573,0,529,557,554,510,484],
[537,520,559,536,484,539,510,569,471,0,536,557,511,544],
[490,513,515,500,495,515,489,506,443,464,0,524,491,532],
[490,520,494,453,460,468,443,502,446,443,476,0,491,506],
[509,544,502,503,494,523,497,538,490,489,509,509,0,497],
[482,487,492,451,459,506,443,517,516,456,468,494,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 130, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,502,472,450,477,488,491,520,496,482,490,467,464],
[500,0,521,475,464,492,499,508,519,506,502,502,476,485],
[498,479,0,473,468,495,508,492,505,485,485,513,479,469],
[528,525,527,0,509,531,521,516,516,530,504,516,505,489],
[550,536,532,491,0,497,534,543,529,537,540,540,538,517],
[523,508,505,469,503,0,516,503,496,514,501,515,496,492],
[512,501,492,479,466,484,0,491,507,485,500,494,498,475],
[509,492,508,484,457,497,509,0,494,501,507,508,501,465],
[480,481,495,484,471,504,493,506,0,493,484,488,487,465],
[504,494,515,470,463,486,515,499,507,0,495,494,474,474],
[518,498,515,496,460,499,500,493,516,505,0,515,492,480],
[510,498,487,484,460,485,506,492,512,506,485,0,476,473],
[533,524,521,495,462,504,502,499,513,526,508,524,0,475],
[536,515,531,511,483,508,525,535,535,526,520,527,525,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 131, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,482,508,513,526,462,483,511,500,514,491,478,474],
[508,0,498,510,516,526,510,506,523,518,560,516,519,506],
[518,502,0,500,505,487,499,503,505,510,497,505,492,484],
[492,490,500,0,505,501,465,519,527,493,518,494,511,500],
[487,484,495,495,0,495,461,485,497,501,478,448,496,469],
[474,474,513,499,505,0,466,471,505,487,521,474,495,501],
[538,490,501,535,539,534,0,520,548,545,532,500,567,513],
[517,494,497,481,515,529,480,0,522,533,520,491,508,494],
[489,477,495,473,503,495,452,478,0,512,510,494,490,497],
[500,482,490,507,499,513,455,467,488,0,516,480,493,496],
[486,440,503,482,522,479,468,480,490,484,0,459,470,490],
[509,484,495,506,552,526,500,509,506,520,541,0,506,514],
[522,481,508,489,504,505,433,492,510,507,530,494,0,500],
[526,494,516,500,531,499,487,506,503,504,510,486,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 132, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,519,537,482,539,518,537,530,473,570,471,573,474,522],
[481,0,498,477,511,495,491,434,480,485,458,550,485,511],
[463,502,0,448,499,529,502,518,439,437,394,507,449,397],
[518,523,552,0,520,600,586,537,505,556,459,524,468,502],
[461,489,501,480,0,534,474,509,436,529,466,540,452,494],
[482,505,471,400,466,0,492,462,418,494,467,479,417,443],
[463,509,498,414,526,508,0,480,426,492,472,584,452,464],
[470,566,482,463,491,538,520,0,480,569,523,494,516,473],
[527,520,561,495,564,582,574,520,0,542,520,523,480,499],
[430,515,563,444,471,506,508,431,458,0,454,507,471,506],
[529,542,606,541,534,533,528,477,480,546,0,611,475,528],
[427,450,493,476,460,521,416,506,477,493,389,0,505,452],
[526,515,551,532,548,583,548,484,520,529,525,495,0,519],
[478,489,603,498,506,557,536,527,501,494,472,548,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 133, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,618,574,401,677,636,466,557,536,625,532,505,541,483],
[382,0,467,489,521,544,456,544,484,519,359,578,443,367],
[426,533,0,491,544,546,340,388,537,608,430,438,521,419],
[599,511,509,0,559,496,496,517,521,649,434,593,289,417],
[323,479,456,441,0,488,461,477,448,445,519,442,494,413],
[364,456,454,504,512,0,305,541,526,407,421,442,421,448],
[534,544,660,504,539,695,0,666,552,577,423,567,494,480],
[443,456,612,483,523,459,334,0,445,454,371,486,362,400],
[464,516,463,479,552,474,448,555,0,557,363,497,529,439],
[375,481,392,351,555,593,423,546,443,0,384,517,331,314],
[468,641,570,566,481,579,577,629,637,616,0,551,454,536],
[495,422,562,407,558,558,433,514,503,483,449,0,403,397],
[459,557,479,711,506,579,506,638,471,669,546,597,0,533],
[517,633,581,583,587,552,520,600,561,686,464,603,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 134, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,539,496,487,511,546,455,538,470,535,473,480,485],
[516,0,509,524,497,448,554,502,575,487,553,535,551,512],
[461,491,0,474,527,450,510,464,487,424,523,562,504,517],
[504,476,526,0,510,457,528,548,594,479,551,559,542,499],
[513,503,473,490,0,514,525,529,524,442,489,514,547,490],
[489,552,550,543,486,0,505,516,544,525,558,544,564,481],
[454,446,490,472,475,495,0,448,497,420,484,497,452,479],
[545,498,536,452,471,484,552,0,522,463,510,516,513,478],
[462,425,513,406,476,456,503,478,0,420,505,472,511,481],
[530,513,576,521,558,475,580,537,580,0,527,580,527,530],
[465,447,477,449,511,442,516,490,495,473,0,490,526,460],
[527,465,438,441,486,456,503,484,528,420,510,0,500,445],
[520,449,496,458,453,436,548,487,489,473,474,500,0,469],
[515,488,483,501,510,519,521,522,519,470,540,555,531,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 135, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,523,513,500,514,500,501,504,506,492,497,510,511],
[483,0,520,490,494,505,501,472,466,493,481,508,486,507],
[477,480,0,506,507,489,499,488,476,477,474,488,476,511],
[487,510,494,0,502,508,520,495,471,508,494,512,482,505],
[500,506,493,498,0,512,501,499,514,493,499,499,513,498],
[486,495,511,492,488,0,509,485,492,476,472,495,480,499],
[500,499,501,480,499,491,0,469,493,489,495,499,481,483],
[499,528,512,505,501,515,531,0,508,518,483,500,516,517],
[496,534,524,529,486,508,507,492,0,517,490,511,510,503],
[494,507,523,492,507,524,511,482,483,0,494,509,493,498],
[508,519,526,506,501,528,505,517,510,506,0,506,499,510],
[503,492,512,488,501,505,501,500,489,491,494,0,486,504],
[490,514,524,518,487,520,519,484,490,507,501,514,0,513],
[489,493,489,495,502,501,517,483,497,502,490,496,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 136, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,499,522,502,508,458,474,489,498,496,500,505,464],
[505,0,497,511,505,483,484,482,498,509,501,479,523,497],
[501,503,0,528,497,495,497,499,487,498,471,506,528,504],
[478,489,472,0,506,490,473,482,501,492,478,477,489,497],
[498,495,503,494,0,505,492,477,486,504,495,502,499,489],
[492,517,505,510,495,0,479,510,486,492,502,514,530,509],
[542,516,503,527,508,521,0,501,536,503,535,528,518,497],
[526,518,501,518,523,490,499,0,487,500,496,500,524,476],
[511,502,513,499,514,514,464,513,0,494,493,506,506,503],
[502,491,502,508,496,508,497,500,506,0,505,498,527,506],
[504,499,529,522,505,498,465,504,507,495,0,506,515,523],
[500,521,494,523,498,486,472,500,494,502,494,0,512,507],
[495,477,472,511,501,470,482,476,494,473,485,488,0,475],
[536,503,496,503,511,491,503,524,497,494,477,493,525,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 137, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,481,495,489,458,473,508,443,468,482,441,481,474],
[495,0,507,494,491,490,487,495,463,492,495,437,502,495],
[519,493,0,495,504,477,490,506,472,498,497,451,507,494],
[505,506,505,0,488,485,490,510,504,496,512,470,502,484],
[511,509,496,512,0,491,485,489,480,492,522,463,479,494],
[542,510,523,515,509,0,511,510,500,520,508,477,510,509],
[527,513,510,510,515,489,0,522,509,501,509,460,516,514],
[492,505,494,490,511,490,478,0,470,471,479,438,491,491],
[557,537,528,496,520,500,491,530,0,517,521,505,526,518],
[532,508,502,504,508,480,499,529,483,0,504,451,517,482],
[518,505,503,488,478,492,491,521,479,496,0,482,510,487],
[559,563,549,530,537,523,540,562,495,549,518,0,540,536],
[519,498,493,498,521,490,484,509,474,483,490,460,0,499],
[526,505,506,516,506,491,486,509,482,518,513,464,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 138, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,475,499,486,467,472,470,464,497,448,484,458,503],
[516,0,537,516,506,541,486,492,487,472,534,470,567,521],
[525,463,0,541,489,461,461,471,477,476,499,483,499,491],
[501,484,459,0,517,496,460,476,471,485,491,507,505,472],
[514,494,511,483,0,473,446,456,478,507,505,466,466,529],
[533,459,539,504,527,0,492,493,483,518,519,493,561,520],
[528,514,539,540,554,508,0,501,491,528,542,493,535,563],
[530,508,529,524,544,507,499,0,477,545,544,524,526,530],
[536,513,523,529,522,517,509,523,0,491,525,468,509,514],
[503,528,524,515,493,482,472,455,509,0,543,486,526,558],
[552,466,501,509,495,481,458,456,475,457,0,462,483,465],
[516,530,517,493,534,507,507,476,532,514,538,0,471,504],
[542,433,501,495,534,439,465,474,491,474,517,529,0,521],
[497,479,509,528,471,480,437,470,486,442,535,496,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 139, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,450,524,473,469,514,461,465,499,480,472,523,485],
[521,0,508,492,508,516,529,481,458,485,500,486,486,507],
[550,492,0,549,501,513,513,522,513,536,509,495,499,533],
[476,508,451,0,479,478,433,470,467,517,490,457,479,481],
[527,492,499,521,0,518,512,479,469,517,508,485,481,484],
[531,484,487,522,482,0,506,494,512,511,499,507,494,510],
[486,471,487,567,488,494,0,465,446,510,515,483,506,448],
[539,519,478,530,521,506,535,0,513,512,505,466,496,499],
[535,542,487,533,531,488,554,487,0,540,488,491,510,493],
[501,515,464,483,483,489,490,488,460,0,499,481,514,474],
[520,500,491,510,492,501,485,495,512,501,0,520,527,500],
[528,514,505,543,515,493,517,534,509,519,480,0,493,508],
[477,514,501,521,519,506,494,504,490,486,473,507,0,507],
[515,493,467,519,516,490,552,501,507,526,500,492,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 140, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,554,531,471,480,504,523,518,521,522,546,529,509,493],
[446,0,485,457,454,426,460,431,441,490,460,458,477,487],
[469,515,0,490,455,479,484,491,461,487,495,499,477,517],
[529,543,510,0,513,498,527,530,510,527,506,491,517,518],
[520,546,545,487,0,491,503,507,486,526,546,492,489,522],
[496,574,521,502,509,0,512,503,518,509,509,497,489,540],
[477,540,516,473,497,488,0,494,514,528,482,529,481,526],
[482,569,509,470,493,497,506,0,487,497,506,518,506,545],
[479,559,539,490,514,482,486,513,0,516,494,499,504,516],
[478,510,513,473,474,491,472,503,484,0,493,491,481,491],
[454,540,505,494,454,491,518,494,506,507,0,519,487,510],
[471,542,501,509,508,503,471,482,501,509,481,0,458,538],
[491,523,523,483,511,511,519,494,496,519,513,542,0,524],
[507,513,483,482,478,460,474,455,484,509,490,462,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 141, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,471,535,513,534,536,479,504,517,515,483,507,509],
[486,0,475,506,498,543,482,501,516,512,539,461,484,503],
[529,525,0,527,514,522,508,508,519,522,527,522,508,495],
[465,494,473,0,484,509,505,486,513,496,502,487,502,463],
[487,502,486,516,0,512,530,505,495,503,521,494,521,478],
[466,457,478,491,488,0,483,458,492,483,482,453,499,479],
[464,518,492,495,470,517,0,476,495,474,516,471,484,506],
[521,499,492,514,495,542,524,0,527,494,523,472,490,474],
[496,484,481,487,505,508,505,473,0,505,479,484,472,487],
[483,488,478,504,497,517,526,506,495,0,502,489,513,473],
[485,461,473,498,479,518,484,477,521,498,0,477,475,494],
[517,539,478,513,506,547,529,528,516,511,523,0,504,492],
[493,516,492,498,479,501,516,510,528,487,525,496,0,508],
[491,497,505,537,522,521,494,526,513,527,506,508,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 142, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,519,489,486,497,491,496,488,500,512,510,491,475],
[503,0,532,517,533,522,501,512,501,500,535,517,510,490],
[481,468,0,479,516,508,496,474,476,478,486,490,486,465],
[511,483,521,0,529,509,511,495,509,516,520,506,512,486],
[514,467,484,471,0,500,477,498,487,478,511,513,492,479],
[503,478,492,491,500,0,485,492,488,482,486,497,499,488],
[509,499,504,489,523,515,0,501,499,501,518,531,520,507],
[504,488,526,505,502,508,499,0,498,505,514,504,495,486],
[512,499,524,491,513,512,501,502,0,507,509,521,490,481],
[500,500,522,484,522,518,499,495,493,0,520,503,491,499],
[488,465,514,480,489,514,482,486,491,480,0,505,487,474],
[490,483,510,494,487,503,469,496,479,497,495,0,493,485],
[509,490,514,488,508,501,480,505,510,509,513,507,0,481],
[525,510,535,514,521,512,493,514,519,501,526,515,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 143, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,505,486,524,508,467,491,498,522,502,507,488,504],
[529,0,520,512,548,531,514,521,518,529,530,520,516,489],
[495,480,0,488,529,496,513,513,491,497,506,505,528,481],
[514,488,512,0,537,519,520,503,517,521,521,505,544,495],
[476,452,471,463,0,479,473,494,478,496,500,487,505,485],
[492,469,504,481,521,0,487,511,491,506,518,510,512,484],
[533,486,487,480,527,513,0,492,511,511,477,525,494,489],
[509,479,487,497,506,489,508,0,490,491,492,496,515,470],
[502,482,509,483,522,509,489,510,0,507,498,486,495,498],
[478,471,503,479,504,494,489,509,493,0,505,498,503,490],
[498,470,494,479,500,482,523,508,502,495,0,480,501,490],
[493,480,495,495,513,490,475,504,514,502,520,0,518,495],
[512,484,472,456,495,488,506,485,505,497,499,482,0,488],
[496,511,519,505,515,516,511,530,502,510,510,505,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 144, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,473,467,438,487,496,429,530,500,486,457,521,472],
[522,0,547,508,533,569,515,535,551,535,498,546,560,540],
[527,453,0,474,478,517,530,512,548,511,446,484,509,489],
[533,492,526,0,490,518,499,482,530,499,509,449,521,515],
[562,467,522,510,0,556,554,541,590,506,521,516,555,514],
[513,431,483,482,444,0,500,454,512,514,416,481,468,442],
[504,485,470,501,446,500,0,477,492,523,491,477,480,445],
[571,465,488,518,459,546,523,0,530,515,506,490,529,506],
[470,449,452,470,410,488,508,470,0,474,444,428,491,447],
[500,465,489,501,494,486,477,485,526,0,513,484,479,504],
[514,502,554,491,479,584,509,494,556,487,0,501,505,482],
[543,454,516,551,484,519,523,510,572,516,499,0,547,480],
[479,440,491,479,445,532,520,471,509,521,495,453,0,451],
[528,460,511,485,486,558,555,494,553,496,518,520,549,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 145, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,480,462,475,460,496,486,489,479,477,492,466,499],
[517,0,513,504,511,473,510,517,498,500,505,515,508,520],
[520,487,0,501,500,475,527,518,476,483,506,504,503,508],
[538,496,499,0,512,489,515,500,477,491,508,499,502,504],
[525,489,500,488,0,485,519,521,486,496,513,515,495,510],
[540,527,525,511,515,0,527,545,495,519,512,514,514,531],
[504,490,473,485,481,473,0,502,485,483,500,508,498,486],
[514,483,482,500,479,455,498,0,477,473,484,488,480,486],
[511,502,524,523,514,505,515,523,0,494,525,513,497,521],
[521,500,517,509,504,481,517,527,506,0,525,507,511,489],
[523,495,494,492,487,488,500,516,475,475,0,497,479,495],
[508,485,496,501,485,486,492,512,487,493,503,0,507,497],
[534,492,497,498,505,486,502,520,503,489,521,493,0,511],
[501,480,492,496,490,469,514,514,479,511,505,503,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 146, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,506,503,523,521,510,505,490,494,514,505,501,519],
[509,0,504,495,514,503,528,506,510,518,529,521,491,515],
[494,496,0,501,521,503,495,486,514,500,520,504,496,508],
[497,505,499,0,507,504,513,489,497,504,504,492,478,507],
[477,486,479,493,0,508,494,490,498,497,498,513,471,490],
[479,497,497,496,492,0,515,490,485,496,514,502,480,488],
[490,472,505,487,506,485,0,469,478,472,502,496,482,486],
[495,494,514,511,510,510,531,0,487,502,523,505,490,511],
[510,490,486,503,502,515,522,513,0,524,515,503,481,498],
[506,482,500,496,503,504,528,498,476,0,492,524,465,494],
[486,471,480,496,502,486,498,477,485,508,0,505,454,496],
[495,479,496,508,487,498,504,495,497,476,495,0,488,490],
[499,509,504,522,529,520,518,510,519,535,546,512,0,523],
[481,485,492,493,510,512,514,489,502,506,504,510,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 147, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,501,491,531,554,463,492,535,511,509,523,519,523],
[490,0,493,493,534,496,419,438,482,500,460,513,544,501],
[499,507,0,475,472,498,452,474,475,458,445,516,478,476],
[509,507,525,0,520,513,508,505,519,554,478,528,534,552],
[469,466,528,480,0,516,434,458,517,514,461,509,479,496],
[446,504,502,487,484,0,528,466,522,531,485,494,532,457],
[537,581,548,492,566,472,0,512,535,491,503,565,558,523],
[508,562,526,495,542,534,488,0,539,512,524,575,540,504],
[465,518,525,481,483,478,465,461,0,520,433,506,510,510],
[489,500,542,446,486,469,509,488,480,0,489,514,500,533],
[491,540,555,522,539,515,497,476,567,511,0,533,503,512],
[477,487,484,472,491,506,435,425,494,486,467,0,497,528],
[481,456,522,466,521,468,442,460,490,500,497,503,0,483],
[477,499,524,448,504,543,477,496,490,467,488,472,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 148, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,576,526,534,515,539,561,522,535,574,524,497,540,558],
[424,0,460,480,462,462,455,457,480,504,460,437,468,504],
[474,540,0,517,534,494,502,559,509,547,536,504,517,555],
[466,520,483,0,483,434,439,473,477,495,480,467,473,498],
[485,538,466,517,0,544,525,533,482,563,537,497,548,549],
[461,538,506,566,456,0,463,552,514,565,521,474,518,529],
[439,545,498,561,475,537,0,515,552,554,498,512,519,503],
[478,543,441,527,467,448,485,0,520,542,474,460,505,505],
[465,520,491,523,518,486,448,480,0,532,496,462,515,527],
[426,496,453,505,437,435,446,458,468,0,471,408,446,478],
[476,540,464,520,463,479,502,526,504,529,0,461,505,490],
[503,563,496,533,503,526,488,540,538,592,539,0,540,557],
[460,532,483,527,452,482,481,495,485,554,495,460,0,507],
[442,496,445,502,451,471,497,495,473,522,510,443,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 149, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,494,514,509,520,503,528,493,507,500,511,539,497],
[494,0,481,518,507,505,536,511,522,520,484,533,499,527],
[506,519,0,508,505,489,504,471,521,536,498,514,514,525],
[486,482,492,0,524,492,519,493,494,516,479,508,508,495],
[491,493,495,476,0,504,491,495,480,531,468,511,501,508],
[480,495,511,508,496,0,498,505,519,497,492,507,497,501],
[497,464,496,481,509,502,0,472,487,499,479,511,502,509],
[472,489,529,507,505,495,528,0,520,544,490,495,513,499],
[507,478,479,506,520,481,513,480,0,505,493,486,489,513],
[493,480,464,484,469,503,501,456,495,0,462,483,478,468],
[500,516,502,521,532,508,521,510,507,538,0,485,495,516],
[489,467,486,492,489,493,489,505,514,517,515,0,495,506],
[461,501,486,492,499,503,498,487,511,522,505,505,0,495],
[503,473,475,505,492,499,491,501,487,532,484,494,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 150, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,465,511,540,511,472,491,483,507,481,517,540,525],
[510,0,492,512,534,466,479,518,492,472,471,512,518,506],
[535,508,0,526,563,495,536,511,508,516,506,528,555,522],
[489,488,474,0,507,499,464,453,481,469,470,486,503,500],
[460,466,437,493,0,466,473,475,467,462,453,474,479,479],
[489,534,505,501,534,0,491,518,503,501,506,512,509,531],
[528,521,464,536,527,509,0,525,509,512,523,552,533,527],
[509,482,489,547,525,482,475,0,510,497,491,513,524,501],
[517,508,492,519,533,497,491,490,0,500,495,509,503,512],
[493,528,484,531,538,499,488,503,500,0,511,513,522,528],
[519,529,494,530,547,494,477,509,505,489,0,501,530,541],
[483,488,472,514,526,488,448,487,491,487,499,0,524,520],
[460,482,445,497,521,491,467,476,497,478,470,476,0,497],
[475,494,478,500,521,469,473,499,488,472,459,480,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 151, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,512,471,449,496,497,495,484,492,456,470,518,515],
[548,0,488,571,557,545,525,500,556,500,519,503,557,568],
[488,512,0,491,513,491,517,502,488,510,485,433,524,525],
[529,429,509,0,504,477,512,528,507,451,499,460,503,540],
[551,443,487,496,0,457,516,469,509,509,470,521,486,536],
[504,455,509,523,543,0,528,548,501,468,530,452,510,548],
[503,475,483,488,484,472,0,487,517,464,457,456,453,495],
[505,500,498,472,531,452,513,0,520,485,473,499,526,558],
[516,444,512,493,491,499,483,480,0,494,498,488,476,556],
[508,500,490,549,491,532,536,515,506,0,539,462,511,557],
[544,481,515,501,530,470,543,527,502,461,0,470,524,523],
[530,497,567,540,479,548,544,501,512,538,530,0,541,570],
[482,443,476,497,514,490,547,474,524,489,476,459,0,555],
[485,432,475,460,464,452,505,442,444,443,477,430,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 152, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,532,475,526,510,496,516,461,545,503,462,520,492],
[505,0,490,561,532,526,531,503,481,568,493,501,509,493],
[468,510,0,500,507,490,478,485,494,568,527,455,538,473],
[525,439,500,0,511,506,497,535,470,535,583,490,543,451],
[474,468,493,489,0,521,447,509,509,542,464,465,480,461],
[490,474,510,494,479,0,517,512,500,539,536,480,542,513],
[504,469,522,503,553,483,0,493,485,556,570,477,562,464],
[484,497,515,465,491,488,507,0,504,515,492,461,516,493],
[539,519,506,530,491,500,515,496,0,566,541,492,566,482],
[455,432,432,465,458,461,444,485,434,0,496,409,458,420],
[497,507,473,417,536,464,430,508,459,504,0,428,521,462],
[538,499,545,510,535,520,523,539,508,591,572,0,572,502],
[480,491,462,457,520,458,438,484,434,542,479,428,0,436],
[508,507,527,549,539,487,536,507,518,580,538,498,564,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 153, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,528,477,481,540,472,504,472,495,558,470,477,519],
[517,0,499,480,512,510,479,465,484,502,533,475,510,474],
[472,501,0,488,484,472,472,451,485,451,527,467,505,461],
[523,520,512,0,473,495,482,494,454,514,516,460,530,531],
[519,488,516,527,0,515,465,498,453,505,525,507,538,543],
[460,490,528,505,485,0,488,466,468,478,513,506,506,495],
[528,521,528,518,535,512,0,491,510,560,584,521,546,568],
[496,535,549,506,502,534,509,0,498,556,553,554,546,536],
[528,516,515,546,547,532,490,502,0,543,578,493,536,516],
[505,498,549,486,495,522,440,444,457,0,544,477,487,519],
[442,467,473,484,475,487,416,447,422,456,0,470,464,512],
[530,525,533,540,493,494,479,446,507,523,530,0,527,492],
[523,490,495,470,462,494,454,454,464,513,536,473,0,461],
[481,526,539,469,457,505,432,464,484,481,488,508,539,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 154, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,509,490,498,480,522,527,486,513,518,493,516,480],
[497,0,526,510,500,514,519,527,497,519,515,534,508,531],
[491,474,0,482,492,467,501,493,477,502,475,523,490,466],
[510,490,518,0,495,491,529,508,511,532,525,527,522,513],
[502,500,508,505,0,498,526,500,505,505,501,512,528,523],
[520,486,533,509,502,0,534,525,502,508,497,519,531,471],
[478,481,499,471,474,466,0,503,484,502,500,501,476,466],
[473,473,507,492,500,475,497,0,497,505,485,491,501,487],
[514,503,523,489,495,498,516,503,0,506,511,501,511,489],
[487,481,498,468,495,492,498,495,494,0,488,514,497,482],
[482,485,525,475,499,503,500,515,489,512,0,507,525,510],
[507,466,477,473,488,481,499,509,499,486,493,0,489,494],
[484,492,510,478,472,469,524,499,489,503,475,511,0,483],
[520,469,534,487,477,529,534,513,511,518,490,506,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 155, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,540,548,538,522,549,522,505,499,498,532,496,519],
[485,0,502,491,509,536,520,474,540,512,511,509,538,485],
[460,498,0,491,529,519,517,483,516,495,477,507,496,509],
[452,509,509,0,532,517,509,470,478,519,480,484,481,461],
[462,491,471,468,0,515,501,485,461,459,447,508,498,509],
[478,464,481,483,485,0,508,518,466,482,458,454,432,473],
[451,480,483,491,499,492,0,482,481,490,470,452,470,503],
[478,526,517,530,515,482,518,0,495,534,515,480,469,526],
[495,460,484,522,539,534,519,505,0,500,470,526,519,512],
[501,488,505,481,541,518,510,466,500,0,456,501,480,493],
[502,489,523,520,553,542,530,485,530,544,0,510,516,535],
[468,491,493,516,492,546,548,520,474,499,490,0,482,481],
[504,462,504,519,502,568,530,531,481,520,484,518,0,466],
[481,515,491,539,491,527,497,474,488,507,465,519,534,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 156, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,477,483,417,505,438,485,426,430,472,493,471,436],
[537,0,556,551,476,538,491,574,581,547,530,550,509,524],
[523,444,0,518,465,491,446,464,501,453,462,530,447,489],
[517,449,482,0,461,475,401,487,504,494,430,472,450,460],
[583,524,535,539,0,515,469,521,531,527,500,509,499,512],
[495,462,509,525,485,0,461,487,549,460,510,485,465,463],
[562,509,554,599,531,539,0,556,610,522,571,514,500,511],
[515,426,536,513,479,513,444,0,513,515,485,490,441,436],
[574,419,499,496,469,451,390,487,0,524,497,510,465,483],
[570,453,547,506,473,540,478,485,476,0,476,529,503,473],
[528,470,538,570,500,490,429,515,503,524,0,503,491,492],
[507,450,470,528,491,515,486,510,490,471,497,0,499,481],
[529,491,553,550,501,535,500,559,535,497,509,501,0,522],
[564,476,511,540,488,537,489,564,517,527,508,519,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 157, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,503,498,516,457,501,489,502,493,493,492,508,481],
[499,0,488,496,511,480,488,470,509,496,496,491,485,515],
[497,512,0,506,504,467,497,509,513,514,491,485,503,481],
[502,504,494,0,513,486,486,497,510,487,484,502,503,478],
[484,489,496,487,0,469,497,477,522,501,498,484,497,496],
[543,520,533,514,531,0,489,512,534,538,524,529,500,518],
[499,512,503,514,503,511,0,490,515,526,514,507,508,521],
[511,530,491,503,523,488,510,0,516,534,483,511,500,506],
[498,491,487,490,478,466,485,484,0,497,488,487,490,479],
[507,504,486,513,499,462,474,466,503,0,475,506,491,496],
[507,504,509,516,502,476,486,517,512,525,0,519,539,497],
[508,509,515,498,516,471,493,489,513,494,481,0,529,507],
[492,515,497,497,503,500,492,500,510,509,461,471,0,495],
[519,485,519,522,504,482,479,494,521,504,503,493,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 158, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,483,515,492,487,517,525,512,478,479,503,485,500],
[533,0,523,504,518,491,516,535,514,497,488,509,494,502],
[517,477,0,462,504,506,498,495,512,483,478,511,498,483],
[485,496,538,0,510,507,522,503,511,494,479,520,483,489],
[508,482,496,490,0,489,513,493,508,484,485,510,480,501],
[513,509,494,493,511,0,514,525,500,496,495,515,487,490],
[483,484,502,478,487,486,0,495,512,490,479,514,485,482],
[475,465,505,497,507,475,505,0,493,482,461,510,467,498],
[488,486,488,489,492,500,488,507,0,478,477,514,490,465],
[522,503,517,506,516,504,510,518,522,0,507,534,502,499],
[521,512,522,521,515,505,521,539,523,493,0,541,498,518],
[497,491,489,480,490,485,486,490,486,466,459,0,472,476],
[515,506,502,517,520,513,515,533,510,498,502,528,0,513],
[500,498,517,511,499,510,518,502,535,501,482,524,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 159, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,621,386,567,599,436,661,583,589,528,552,780,543,572],
[379,0,536,482,452,502,476,603,513,501,465,523,524,455],
[614,464,0,688,562,618,406,582,532,625,651,690,572,584],
[433,518,312,0,583,433,484,614,482,515,445,500,273,459],
[401,548,438,417,0,396,381,583,517,485,551,646,395,308],
[564,498,382,567,604,0,468,582,606,619,504,553,542,575],
[339,524,594,516,619,532,0,643,624,425,615,496,506,437],
[417,397,418,386,417,418,357,0,401,403,484,494,459,357],
[411,487,468,518,483,394,376,599,0,516,378,450,493,471],
[472,499,375,485,515,381,575,597,484,0,335,624,474,508],
[448,535,349,555,449,496,385,516,622,665,0,563,623,392],
[220,477,310,500,354,447,504,506,550,376,437,0,446,341],
[457,476,428,727,605,458,494,541,507,526,377,554,0,431],
[428,545,416,541,692,425,563,643,529,492,608,659,569,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 160, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,505,498,510,491,511,509,492,508,486,509,481,476],
[485,0,491,487,485,483,503,487,477,474,494,484,472,485],
[495,509,0,512,502,488,519,482,491,530,509,519,489,500],
[502,513,488,0,502,472,493,488,498,506,501,502,473,507],
[490,515,498,498,0,479,487,511,493,497,506,499,489,501],
[509,517,512,528,521,0,525,503,502,528,509,498,515,502],
[489,497,481,507,513,475,0,491,487,508,497,514,463,499],
[491,513,518,512,489,497,509,0,489,509,494,521,487,502],
[508,523,509,502,507,498,513,511,0,507,490,512,474,492],
[492,526,470,494,503,472,492,491,493,0,491,493,483,487],
[514,506,491,499,494,491,503,506,510,509,0,524,494,494],
[491,516,481,498,501,502,486,479,488,507,476,0,477,481],
[519,528,511,527,511,485,537,513,526,517,506,523,0,509],
[524,515,500,493,499,498,501,498,508,513,506,519,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 161, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,441,477,466,457,473,487,423,406,425,472,489,454],
[559,0,491,536,482,545,507,484,487,449,506,482,566,484],
[559,509,0,545,521,515,506,572,493,503,549,488,574,534],
[523,464,455,0,438,472,473,460,478,376,417,412,520,486],
[534,518,479,562,0,489,588,494,479,451,464,493,554,478],
[543,455,485,528,511,0,517,507,487,441,519,458,548,499],
[527,493,494,527,412,483,0,513,449,458,541,445,506,504],
[513,516,428,540,506,493,487,0,477,435,507,501,516,484],
[577,513,507,522,521,513,551,523,0,471,525,570,578,509],
[594,551,497,624,549,559,542,565,529,0,564,514,558,513],
[575,494,451,583,536,481,459,493,475,436,0,527,538,504],
[528,518,512,588,507,542,555,499,430,486,473,0,524,488],
[511,434,426,480,446,452,494,484,422,442,462,476,0,454],
[546,516,466,514,522,501,496,516,491,487,496,512,546,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 162, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,624,561,583,588,572,571,495,550,544,439,546,518,460],
[376,0,497,502,537,450,490,472,481,557,441,466,462,463],
[439,503,0,548,598,471,449,482,490,569,501,437,505,439],
[417,498,452,0,493,453,457,356,434,417,361,447,334,347],
[412,463,402,507,0,395,437,427,512,466,433,422,396,435],
[428,550,529,547,605,0,562,378,513,523,485,462,589,448],
[429,510,551,543,563,438,0,478,440,504,421,500,489,449],
[505,528,518,644,573,622,522,0,515,484,441,490,456,551],
[450,519,510,566,488,487,560,485,0,538,463,424,455,466],
[456,443,431,583,534,477,496,516,462,0,441,447,496,479],
[561,559,499,639,567,515,579,559,537,559,0,521,518,486],
[454,534,563,553,578,538,500,510,576,553,479,0,543,383],
[482,538,495,666,604,411,511,544,545,504,482,457,0,465],
[540,537,561,653,565,552,551,449,534,521,514,617,535,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 163, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,474,419,540,479,448,485,445,448,545,488,512,407],
[560,0,487,475,496,528,428,509,503,534,562,463,527,435],
[526,513,0,569,470,493,444,507,525,497,527,501,447,513],
[581,525,431,0,496,568,432,509,449,522,529,498,500,423],
[460,504,530,504,0,549,400,495,458,509,522,506,489,420],
[521,472,507,432,451,0,454,484,420,440,453,440,447,419],
[552,572,556,568,600,546,0,571,492,616,599,568,582,552],
[515,491,493,491,505,516,429,0,438,500,520,488,456,467],
[555,497,475,551,542,580,508,562,0,587,530,565,505,515],
[552,466,503,478,491,560,384,500,413,0,532,511,461,503],
[455,438,473,471,478,547,401,480,470,468,0,462,454,394],
[512,537,499,502,494,560,432,512,435,489,538,0,502,482],
[488,473,553,500,511,553,418,544,495,539,546,498,0,502],
[593,565,487,577,580,581,448,533,485,497,606,518,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 164, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,489,509,502,517,503,525,499,503,521,512,484,516],
[521,0,497,508,534,520,519,532,520,512,562,505,513,511],
[511,503,0,492,541,524,525,514,514,503,507,508,503,516],
[491,492,508,0,500,513,514,516,505,496,525,506,504,512],
[498,466,459,500,0,499,477,486,474,485,493,475,484,484],
[483,480,476,487,501,0,458,481,481,486,500,472,458,495],
[497,481,475,486,523,542,0,525,500,499,532,509,495,518],
[475,468,486,484,514,519,475,0,494,495,527,491,496,510],
[501,480,486,495,526,519,500,506,0,488,501,496,492,480],
[497,488,497,504,515,514,501,505,512,0,518,515,491,502],
[479,438,493,475,507,500,468,473,499,482,0,486,471,497],
[488,495,492,494,525,528,491,509,504,485,514,0,495,508],
[516,487,497,496,516,542,505,504,508,509,529,505,0,513],
[484,489,484,488,516,505,482,490,520,498,503,492,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 165, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,504,489,500,483,510,500,500,466,499,457,488,488],
[500,0,528,541,510,537,545,555,541,506,513,510,536,522],
[496,472,0,521,513,513,506,533,503,491,475,485,504,471],
[511,459,479,0,457,505,492,473,489,469,449,445,495,490],
[500,490,487,543,0,522,524,513,511,479,487,471,500,474],
[517,463,487,495,478,0,503,494,503,480,464,506,527,497],
[490,455,494,508,476,497,0,485,488,449,491,471,508,464],
[500,445,467,527,487,506,515,0,466,448,451,471,489,482],
[500,459,497,511,489,497,512,534,0,472,487,479,524,479],
[534,494,509,531,521,520,551,552,528,0,507,512,546,516],
[501,487,525,551,513,536,509,549,513,493,0,519,539,503],
[543,490,515,555,529,494,529,529,521,488,481,0,526,538],
[512,464,496,505,500,473,492,511,476,454,461,474,0,493],
[512,478,529,510,526,503,536,518,521,484,497,462,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 166, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,554,530,505,546,536,491,512,531,532,536,483,508,517],
[446,0,503,477,504,514,447,500,489,498,464,493,478,491],
[470,497,0,487,495,512,478,502,498,487,523,466,425,500],
[495,523,513,0,506,523,486,508,518,522,495,479,504,493],
[454,496,505,494,0,508,463,483,506,484,502,467,475,471],
[464,486,488,477,492,0,473,490,484,498,475,452,491,478],
[509,553,522,514,537,527,0,517,499,541,520,509,502,522],
[488,500,498,492,517,510,483,0,500,514,494,461,468,494],
[469,511,502,482,494,516,501,500,0,502,500,521,492,511],
[468,502,513,478,516,502,459,486,498,0,494,480,461,502],
[464,536,477,505,498,525,480,506,500,506,0,480,486,485],
[517,507,534,521,533,548,491,539,479,520,520,0,519,503],
[492,522,575,496,525,509,498,532,508,539,514,481,0,518],
[483,509,500,507,529,522,478,506,489,498,515,497,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 167, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,504,474,511,514,500,490,529,495,508,486,497,490],
[496,0,490,487,492,529,515,485,512,505,512,501,507,515],
[496,510,0,496,489,505,508,499,549,530,503,515,511,523],
[526,513,504,0,512,535,517,497,539,532,513,485,506,536],
[489,508,511,488,0,523,508,506,528,499,519,507,509,527],
[486,471,495,465,477,0,477,466,518,498,493,456,522,505],
[500,485,492,483,492,523,0,495,507,518,511,474,510,512],
[510,515,501,503,494,534,505,0,548,530,527,488,513,524],
[471,488,451,461,472,482,493,452,0,475,491,468,494,472],
[505,495,470,468,501,502,482,470,525,0,516,481,511,507],
[492,488,497,487,481,507,489,473,509,484,0,488,491,525],
[514,499,485,515,493,544,526,512,532,519,512,0,526,510],
[503,493,489,494,491,478,490,487,506,489,509,474,0,504],
[510,485,477,464,473,495,488,476,528,493,475,490,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 168, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,555,593,499,545,635,548,511,545,482,602,483,583,520],
[445,0,410,427,354,469,392,404,437,387,459,344,467,428],
[407,590,0,448,420,475,443,441,419,376,531,373,573,455],
[501,573,552,0,368,478,469,452,463,407,505,453,471,484],
[455,646,580,632,0,561,559,593,626,530,602,525,630,648],
[365,531,525,522,439,0,470,412,494,459,474,483,572,487],
[452,608,557,531,441,530,0,550,531,455,569,388,547,533],
[489,596,559,548,407,588,450,0,497,491,531,452,515,462],
[455,563,581,537,374,506,469,503,0,423,463,441,556,513],
[518,613,624,593,470,541,545,509,577,0,561,486,581,533],
[398,541,469,495,398,526,431,469,537,439,0,433,483,499],
[517,656,627,547,475,517,612,548,559,514,567,0,559,575],
[417,533,427,529,370,428,453,485,444,419,517,441,0,548],
[480,572,545,516,352,513,467,538,487,467,501,425,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 169, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,475,456,461,544,554,496,460,501,569,548,464,476],
[529,0,486,480,511,474,532,539,486,483,556,564,517,513],
[525,514,0,501,475,500,559,523,516,501,548,524,490,448],
[544,520,499,0,506,493,549,514,490,486,540,570,480,468],
[539,489,525,494,0,453,507,554,483,505,522,532,505,496],
[456,526,500,507,547,0,572,528,514,517,508,538,500,488],
[446,468,441,451,493,428,0,458,478,465,469,542,473,433],
[504,461,477,486,446,472,542,0,468,482,507,541,535,481],
[540,514,484,510,517,486,522,532,0,542,541,555,519,519],
[499,517,499,514,495,483,535,518,458,0,490,560,523,464],
[431,444,452,460,478,492,531,493,459,510,0,547,483,487],
[452,436,476,430,468,462,458,459,445,440,453,0,458,451],
[536,483,510,520,495,500,527,465,481,477,517,542,0,464],
[524,487,552,532,504,512,567,519,481,536,513,549,536,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 170, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,503,482,511,497,489,492,490,523,525,472,480,514],
[498,0,489,513,481,502,511,505,499,505,529,490,504,504],
[497,511,0,493,492,489,509,504,502,499,525,509,508,496],
[518,487,507,0,491,500,508,517,492,497,517,496,494,504],
[489,519,508,509,0,527,519,492,521,528,508,505,523,529],
[503,498,511,500,473,0,471,483,498,512,513,473,505,509],
[511,489,491,492,481,529,0,495,516,506,529,485,490,501],
[508,495,496,483,508,517,505,0,500,492,526,518,489,499],
[510,501,498,508,479,502,484,500,0,522,527,475,496,535],
[477,495,501,503,472,488,494,508,478,0,490,483,485,512],
[475,471,475,483,492,487,471,474,473,510,0,480,493,485],
[528,510,491,504,495,527,515,482,525,517,520,0,487,509],
[520,496,492,506,477,495,510,511,504,515,507,513,0,512],
[486,496,504,496,471,491,499,501,465,488,515,491,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 171, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,521,489,523,513,509,513,506,523,517,558,483,555,518],
[479,0,505,476,483,474,512,471,478,476,502,480,505,491],
[511,495,0,501,478,471,481,486,491,503,505,487,504,488],
[477,524,499,0,516,513,503,516,510,498,534,497,518,508],
[487,517,522,484,0,492,489,536,489,520,526,504,530,501],
[491,526,529,487,508,0,507,520,491,522,556,486,531,537],
[487,488,519,497,511,493,0,515,495,498,504,481,498,513],
[494,529,514,484,464,480,485,0,480,497,542,471,500,510],
[477,522,509,490,511,509,505,520,0,493,527,492,504,484],
[483,524,497,502,480,478,502,503,507,0,534,481,491,520],
[442,498,495,466,474,444,496,458,473,466,0,449,493,489],
[517,520,513,503,496,514,519,529,508,519,551,0,497,505],
[445,495,496,482,470,469,502,500,496,509,507,503,0,498],
[482,509,512,492,499,463,487,490,516,480,511,495,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 172, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,464,455,527,483,483,474,453,390,505,450,469,401],
[502,0,384,468,424,466,504,525,418,462,393,321,523,513],
[536,616,0,522,526,573,647,507,446,546,489,468,570,492],
[545,532,478,0,575,525,568,495,549,468,462,458,464,394],
[473,576,474,425,0,454,565,416,436,434,400,282,519,367],
[517,534,427,475,546,0,537,499,459,487,370,360,549,474],
[517,496,353,432,435,463,0,479,374,502,482,352,544,428],
[526,475,493,505,584,501,521,0,510,517,344,470,491,455],
[547,582,554,451,564,541,626,490,0,521,449,462,536,398],
[610,538,454,532,566,513,498,483,479,0,477,475,485,480],
[495,607,511,538,600,630,518,656,551,523,0,519,628,506],
[550,679,532,542,718,640,648,530,538,525,481,0,616,563],
[531,477,430,536,481,451,456,509,464,515,372,384,0,493],
[599,487,508,606,633,526,572,545,602,520,494,437,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 173, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,509,522,526,498,526,503,496,516,503,504,499,501],
[491,0,515,502,513,508,509,498,490,509,483,491,500,488],
[491,485,0,499,521,506,470,491,486,496,465,478,479,478],
[478,498,501,0,512,498,492,496,480,486,475,479,481,475],
[474,487,479,488,0,490,490,472,468,481,468,490,479,479],
[502,492,494,502,510,0,516,489,487,499,489,482,477,471],
[474,491,530,508,510,484,0,507,490,477,487,484,497,494],
[497,502,509,504,528,511,493,0,497,493,505,499,500,490],
[504,510,514,520,532,513,510,503,0,518,511,506,488,492],
[484,491,504,514,519,501,523,507,482,0,495,500,493,510],
[497,517,535,525,532,511,513,495,489,505,0,491,509,487],
[496,509,522,521,510,518,516,501,494,500,509,0,492,506],
[501,500,521,519,521,523,503,500,512,507,491,508,0,473],
[499,512,522,525,521,529,506,510,508,490,513,494,527,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 174, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,526,521,487,506,546,518,541,534,521,454,517,482,517],
[474,0,491,492,481,482,492,534,499,470,449,512,501,500],
[479,509,0,487,466,472,475,516,491,510,449,493,462,493],
[513,508,513,0,459,520,490,518,482,508,439,522,492,483],
[494,519,534,541,0,478,521,541,454,508,421,533,499,478],
[454,518,528,480,522,0,492,551,500,519,493,479,484,516],
[482,508,525,510,479,508,0,536,485,551,482,524,518,510],
[459,466,484,482,459,449,464,0,453,504,423,465,443,480],
[466,501,509,518,546,500,515,547,0,512,500,506,523,526],
[479,530,490,492,492,481,449,496,488,0,458,478,497,458],
[546,551,551,561,579,507,518,577,500,542,0,532,517,539],
[483,488,507,478,467,521,476,535,494,522,468,0,486,490],
[518,499,538,508,501,516,482,557,477,503,483,514,0,541],
[483,500,507,517,522,484,490,520,474,542,461,510,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 175, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,494,523,503,499,513,507,511,493,539,537,497,519],
[502,0,492,501,503,511,491,506,484,502,534,535,519,517],
[506,508,0,543,510,492,506,531,523,526,541,518,517,523],
[477,499,457,0,492,475,488,500,470,502,523,524,488,499],
[497,497,490,508,0,495,489,517,492,517,522,508,493,527],
[501,489,508,525,505,0,513,521,514,509,522,524,517,519],
[487,509,494,512,511,487,0,501,506,489,522,521,505,540],
[493,494,469,500,483,479,499,0,482,474,510,513,481,507],
[489,516,477,530,508,486,494,518,0,493,536,515,500,517],
[507,498,474,498,483,491,511,526,507,0,508,523,496,541],
[461,466,459,477,478,478,478,490,464,492,0,511,486,493],
[463,465,482,476,492,476,479,487,485,477,489,0,477,495],
[503,481,483,512,507,483,495,519,500,504,514,523,0,498],
[481,483,477,501,473,481,460,493,483,459,507,505,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 176, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,471,449,460,475,474,493,470,517,488,505,479,494],
[485,0,466,435,475,494,443,490,480,488,478,442,454,454],
[529,534,0,486,460,471,497,489,490,493,507,496,470,469],
[551,565,514,0,508,499,488,517,480,542,516,511,505,512],
[540,525,540,492,0,524,483,528,509,526,505,503,477,478],
[525,506,529,501,476,0,469,524,486,527,484,491,475,496],
[526,557,503,512,517,531,0,537,534,542,514,504,507,480],
[507,510,511,483,472,476,463,0,488,516,510,471,461,466],
[530,520,510,520,491,514,466,512,0,512,503,486,504,480],
[483,512,507,458,474,473,458,484,488,0,441,453,442,437],
[512,522,493,484,495,516,486,490,497,559,0,491,483,465],
[495,558,504,489,497,509,496,529,514,547,509,0,493,479],
[521,546,530,495,523,525,493,539,496,558,517,507,0,499],
[506,546,531,488,522,504,520,534,520,563,535,521,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 177, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,496,508,537,523,507,509,537,523,519,508,515,525],
[488,0,511,498,509,492,468,520,551,509,511,507,507,529],
[504,489,0,486,496,530,465,512,542,485,524,509,489,486],
[492,502,514,0,532,499,484,510,501,514,485,499,478,543],
[463,491,504,468,0,498,469,480,473,469,527,509,442,551],
[477,508,470,501,502,0,479,518,506,481,493,496,468,506],
[493,532,535,516,531,521,0,537,538,519,549,546,538,528],
[491,480,488,490,520,482,463,0,521,492,516,518,485,512],
[463,449,458,499,527,494,462,479,0,460,491,498,486,506],
[477,491,515,486,531,519,481,508,540,0,512,501,490,500],
[481,489,476,515,473,507,451,484,509,488,0,480,488,521],
[492,493,491,501,491,504,454,482,502,499,520,0,467,511],
[485,493,511,522,558,532,462,515,514,510,512,533,0,529],
[475,471,514,457,449,494,472,488,494,500,479,489,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 178, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,532,498,509,487,502,502,508,498,522,496,519,500],
[533,0,542,533,527,550,521,531,481,507,510,511,551,525],
[468,458,0,506,475,481,483,496,471,471,525,477,501,471],
[502,467,494,0,509,509,490,510,497,516,505,498,496,512],
[491,473,525,491,0,519,535,529,478,515,498,496,524,474],
[513,450,519,491,481,0,481,498,467,474,494,517,523,473],
[498,479,517,510,465,519,0,510,485,509,487,474,489,511],
[498,469,504,490,471,502,490,0,468,484,494,496,502,480],
[492,519,529,503,522,533,515,532,0,491,487,508,531,507],
[502,493,529,484,485,526,491,516,509,0,518,510,539,525],
[478,490,475,495,502,506,513,506,513,482,0,505,508,503],
[504,489,523,502,504,483,526,504,492,490,495,0,509,486],
[481,449,499,504,476,477,511,498,469,461,492,491,0,484],
[500,475,529,488,526,527,489,520,493,475,497,514,516,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 179, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,527,575,474,561,630,528,561,512,564,538,543,539,571],
[473,0,535,486,497,601,568,480,538,567,503,462,520,512],
[425,465,0,374,427,505,513,461,479,508,464,422,458,431],
[526,514,626,0,517,552,559,540,444,551,519,522,521,510],
[439,503,573,483,0,503,498,507,479,529,509,469,478,472],
[370,399,495,448,497,0,492,465,438,491,466,463,435,435],
[472,432,487,441,502,508,0,498,488,570,491,475,496,453],
[439,520,539,460,493,535,502,0,468,568,489,450,489,461],
[488,462,521,556,521,562,512,532,0,549,494,503,474,455],
[436,433,492,449,471,509,430,432,451,0,454,467,437,434],
[462,497,536,481,491,534,509,511,506,546,0,457,515,475],
[457,538,578,478,531,537,525,550,497,533,543,0,545,496],
[461,480,542,479,522,565,504,511,526,563,485,455,0,494],
[429,488,569,490,528,565,547,539,545,566,525,504,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 180, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,439,450,566,431,509,478,423,437,555,535,398,463],
[531,0,401,471,562,410,486,577,592,569,633,517,560,622],
[561,599,0,549,586,460,530,674,670,556,546,532,493,577],
[550,529,451,0,512,507,534,483,464,457,573,434,536,570],
[434,438,414,488,0,412,382,513,420,490,646,449,536,534],
[569,590,540,493,588,0,612,589,517,548,666,512,695,653],
[491,514,470,466,618,388,0,624,550,601,655,502,617,504],
[522,423,326,517,487,411,376,0,408,400,467,390,452,473],
[577,408,330,536,580,483,450,592,0,581,621,396,561,509],
[563,431,444,543,510,452,399,600,419,0,652,458,546,597],
[445,367,454,427,354,334,345,533,379,348,0,395,408,370],
[465,483,468,566,551,488,498,610,604,542,605,0,585,487],
[602,440,507,464,464,305,383,548,439,454,592,415,0,465],
[537,378,423,430,466,347,496,527,491,403,630,513,535,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 181, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,484,488,472,496,472,416,558,474,539,488,486,527],
[507,0,518,466,482,529,496,456,508,439,534,510,468,467],
[516,482,0,487,497,525,457,514,495,479,494,565,525,525],
[512,534,513,0,492,583,501,482,551,482,494,532,480,523],
[528,518,503,508,0,519,391,447,575,476,479,524,475,530],
[504,471,475,417,481,0,462,484,454,388,403,421,497,490],
[528,504,543,499,609,538,0,529,557,493,571,480,517,513],
[584,544,486,518,553,516,471,0,524,509,530,507,497,524],
[442,492,505,449,425,546,443,476,0,501,432,554,479,488],
[526,561,521,518,524,612,507,491,499,0,566,603,556,584],
[461,466,506,506,521,597,429,470,568,434,0,478,498,523],
[512,490,435,468,476,579,520,493,446,397,522,0,509,548],
[514,532,475,520,525,503,483,503,521,444,502,491,0,470],
[473,533,475,477,470,510,487,476,512,416,477,452,530,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 182, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,487,508,514,522,491,520,467,570,526,499,534,487],
[511,0,512,519,499,486,512,520,505,521,568,522,549,543],
[513,488,0,509,498,501,502,527,490,534,553,523,520,548],
[492,481,491,0,518,522,508,507,502,536,533,537,547,530],
[486,501,502,482,0,509,502,500,458,540,513,496,545,541],
[478,514,499,478,491,0,497,528,481,541,549,504,512,529],
[509,488,498,492,498,503,0,510,483,539,544,516,535,522],
[480,480,473,493,500,472,490,0,481,539,504,500,521,524],
[533,495,510,498,542,519,517,519,0,587,565,507,524,523],
[430,479,466,464,460,459,461,461,413,0,486,457,485,461],
[474,432,447,467,487,451,456,496,435,514,0,473,492,515],
[501,478,477,463,504,496,484,500,493,543,527,0,526,510],
[466,451,480,453,455,488,465,479,476,515,508,474,0,483],
[513,457,452,470,459,471,478,476,477,539,485,490,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 183, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,496,481,489,508,502,498,497,473,495,495,483,506],
[510,0,507,508,519,505,528,513,495,514,496,517,517,504],
[504,493,0,477,504,499,497,498,499,492,513,496,520,507],
[519,492,523,0,541,511,512,506,499,508,509,523,555,532],
[511,481,496,459,0,504,515,480,492,483,502,481,484,514],
[492,495,501,489,496,0,525,483,509,468,499,509,504,508],
[498,472,503,488,485,475,0,483,490,461,486,461,515,494],
[502,487,502,494,520,517,517,0,512,486,497,501,531,533],
[503,505,501,501,508,491,510,488,0,494,514,493,511,524],
[527,486,508,492,517,532,539,514,506,0,517,493,514,523],
[505,504,487,491,498,501,514,503,486,483,0,490,517,516],
[505,483,504,477,519,491,539,499,507,507,510,0,509,533],
[517,483,480,445,516,496,485,469,489,486,483,491,0,515],
[494,496,493,468,486,492,506,467,476,477,484,467,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 184, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,496,512,506,520,502,509,517,487,503,505,514,479],
[512,0,500,530,533,506,513,503,528,508,533,508,512,484],
[504,500,0,492,541,524,520,521,526,515,541,518,536,481],
[488,470,508,0,515,513,510,515,496,480,513,493,494,503],
[494,467,459,485,0,510,483,498,505,463,481,461,493,474],
[480,494,476,487,490,0,488,488,492,492,510,471,477,456],
[498,487,480,490,517,512,0,494,512,496,514,477,502,485],
[491,497,479,485,502,512,506,0,493,469,511,479,502,477],
[483,472,474,504,495,508,488,507,0,479,502,492,479,430],
[513,492,485,520,537,508,504,531,521,0,526,516,504,485],
[497,467,459,487,519,490,486,489,498,474,0,466,490,463],
[495,492,482,507,539,529,523,521,508,484,534,0,508,495],
[486,488,464,506,507,523,498,498,521,496,510,492,0,464],
[521,516,519,497,526,544,515,523,570,515,537,505,536,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 185, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,502,615,498,673,476,365,678,540,559,520,633,520],
[484,0,599,595,639,576,612,546,606,563,563,597,632,553],
[498,401,0,527,498,595,449,326,552,474,436,510,526,408],
[385,405,473,0,531,507,498,518,623,560,512,558,575,469],
[502,361,502,469,0,546,606,422,682,507,512,473,609,524],
[327,424,405,493,454,0,481,322,566,361,476,556,453,385],
[524,388,551,502,394,519,0,438,556,452,467,455,553,444],
[635,454,674,482,578,678,562,0,655,552,528,662,586,501],
[322,394,448,377,318,434,444,345,0,411,420,409,409,411],
[460,437,526,440,493,639,548,448,589,0,424,598,538,466],
[441,437,564,488,488,524,533,472,580,576,0,595,533,461],
[480,403,490,442,527,444,545,338,591,402,405,0,482,429],
[367,368,474,425,391,547,447,414,591,462,467,518,0,395],
[480,447,592,531,476,615,556,499,589,534,539,571,605,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 186, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,505,503,468,492,478,489,498,491,521,476,489,503],
[509,0,512,502,512,509,496,504,522,521,532,470,516,520],
[495,488,0,485,477,495,482,505,494,488,507,487,498,513],
[497,498,515,0,470,510,476,513,506,500,530,500,483,524],
[532,488,523,530,0,544,503,504,518,500,535,529,538,504],
[508,491,505,490,456,0,476,509,480,491,543,476,493,499],
[522,504,518,524,497,524,0,521,534,527,533,536,511,525],
[511,496,495,487,496,491,479,0,483,494,521,477,495,487],
[502,478,506,494,482,520,466,517,0,495,494,486,478,510],
[509,479,512,500,500,509,473,506,505,0,529,505,543,507],
[479,468,493,470,465,457,467,479,506,471,0,476,485,485],
[524,530,513,500,471,524,464,523,514,495,524,0,515,509],
[511,484,502,517,462,507,489,505,522,457,515,485,0,513],
[497,480,487,476,496,501,475,513,490,493,515,491,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 187, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,501,472,480,493,486,487,490,499,497,505,512,471],
[514,0,513,487,467,494,507,516,504,499,494,485,521,508],
[499,487,0,491,504,497,491,512,508,524,494,492,520,487],
[528,513,509,0,478,508,500,512,522,531,497,533,541,490],
[520,533,496,522,0,510,502,523,521,515,536,522,532,497],
[507,506,503,492,490,0,479,509,516,517,506,506,512,488],
[514,493,509,500,498,521,0,521,504,507,512,516,517,487],
[513,484,488,488,477,491,479,0,506,508,482,498,526,475],
[510,496,492,478,479,484,496,494,0,507,494,507,510,496],
[501,501,476,469,485,483,493,492,493,0,490,488,510,452],
[503,506,506,503,464,494,488,518,506,510,0,511,520,479],
[495,515,508,467,478,494,484,502,493,512,489,0,511,490],
[488,479,480,459,468,488,483,474,490,490,480,489,0,456],
[529,492,513,510,503,512,513,525,504,548,521,510,544,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 188, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,530,495,518,525,523,500,534,482,537,505,521,526,494],
[470,0,461,471,493,474,457,490,501,480,495,498,502,507],
[505,539,0,510,506,496,473,546,503,523,507,496,540,524],
[482,529,490,0,519,526,498,542,497,505,516,501,524,521],
[475,507,494,481,0,469,471,483,474,468,477,464,478,487],
[477,526,504,474,531,0,477,481,487,475,490,486,515,525],
[500,543,527,502,529,523,0,522,527,518,468,526,556,519],
[466,510,454,458,517,519,478,0,499,490,499,489,509,517],
[518,499,497,503,526,513,473,501,0,497,478,512,539,534],
[463,520,477,495,532,525,482,510,503,0,505,469,517,505],
[495,505,493,484,523,510,532,501,522,495,0,499,529,499],
[479,502,504,499,536,514,474,511,488,531,501,0,555,505],
[474,498,460,476,522,485,444,491,461,483,471,445,0,523],
[506,493,476,479,513,475,481,483,466,495,501,495,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 189, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,528,491,493,544,484,537,484,509,504,542,516,501],
[495,0,511,500,490,523,487,529,471,528,495,537,529,518],
[472,489,0,508,503,514,487,493,462,503,524,501,519,528],
[509,500,492,0,488,546,501,510,497,520,492,514,538,521],
[507,510,497,512,0,538,483,535,476,514,495,524,543,517],
[456,477,486,454,462,0,465,506,470,460,466,503,473,450],
[516,513,513,499,517,535,0,549,489,518,497,507,530,530],
[463,471,507,490,465,494,451,0,506,488,488,516,503,500],
[516,529,538,503,524,530,511,494,0,526,489,558,587,525],
[491,472,497,480,486,540,482,512,474,0,491,506,514,510],
[496,505,476,508,505,534,503,512,511,509,0,521,510,513],
[458,463,499,486,476,497,493,484,442,494,479,0,485,501],
[484,471,481,462,457,527,470,497,413,486,490,515,0,484],
[499,482,472,479,483,550,470,500,475,490,487,499,516,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 190, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,576,508,492,616,476,517,552,542,545,554,493,567,545],
[424,0,473,478,550,406,422,462,470,439,461,474,498,439],
[492,527,0,455,556,468,457,450,482,503,494,540,490,478],
[508,522,545,0,633,470,464,475,475,487,513,502,536,499],
[384,450,444,367,0,325,286,407,395,390,441,407,434,351],
[524,594,532,530,675,0,447,561,542,522,621,508,532,500],
[483,578,543,536,714,553,0,497,524,489,549,552,489,469],
[448,538,550,525,593,439,503,0,497,454,551,455,505,483],
[458,530,518,525,605,458,476,503,0,439,548,459,544,558],
[455,561,497,513,610,478,511,546,561,0,578,532,539,467],
[446,539,506,487,559,379,451,449,452,422,0,458,472,407],
[507,526,460,498,593,492,448,545,541,468,542,0,515,449],
[433,502,510,464,566,468,511,495,456,461,528,485,0,479],
[455,561,522,501,649,500,531,517,442,533,593,551,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 191, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,483,485,474,491,490,475,466,451,499,510,541,526],
[491,0,498,495,434,471,482,488,490,464,502,464,546,546],
[517,502,0,517,469,489,467,455,491,484,482,492,554,544],
[515,505,483,0,459,496,485,465,487,475,479,480,514,543],
[526,566,531,541,0,514,499,520,521,515,557,462,583,581],
[509,529,511,504,486,0,508,489,492,477,529,493,569,513],
[510,518,533,515,501,492,0,518,478,498,529,491,539,537],
[525,512,545,535,480,511,482,0,520,525,511,486,567,527],
[534,510,509,513,479,508,522,480,0,521,502,499,551,552],
[549,536,516,525,485,523,502,475,479,0,535,476,542,513],
[501,498,518,521,443,471,471,489,498,465,0,479,528,515],
[490,536,508,520,538,507,509,514,501,524,521,0,584,557],
[459,454,446,486,417,431,461,433,449,458,472,416,0,476],
[474,454,456,457,419,487,463,473,448,487,485,443,524,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 192, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,548,489,496,480,481,475,500,460,480,485,506,489],
[491,0,501,500,452,452,471,519,491,460,475,471,513,501],
[452,499,0,480,430,476,444,503,471,460,448,431,474,499],
[511,500,520,0,530,479,439,499,507,463,507,505,502,507],
[504,548,570,470,0,494,475,519,507,465,496,489,516,508],
[520,548,524,521,506,0,464,515,507,524,492,517,522,483],
[519,529,556,561,525,536,0,564,520,479,512,527,525,557],
[525,481,497,501,481,485,436,0,456,447,494,479,511,485],
[500,509,529,493,493,493,480,544,0,462,485,491,555,522],
[540,540,540,537,535,476,521,553,538,0,520,519,538,541],
[520,525,552,493,504,508,488,506,515,480,0,479,527,548],
[515,529,569,495,511,483,473,521,509,481,521,0,533,523],
[494,487,526,498,484,478,475,489,445,462,473,467,0,517],
[511,499,501,493,492,517,443,515,478,459,452,477,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 193, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,510,505,498,503,506,541,502,506,516,494,505,504],
[492,0,502,482,488,484,495,507,476,503,499,460,502,495],
[490,498,0,483,505,499,491,492,483,491,504,484,490,501],
[495,518,517,0,515,482,504,532,468,514,512,501,515,525],
[502,512,495,485,0,500,501,522,483,509,510,502,511,508],
[497,516,501,518,500,0,495,505,478,499,487,488,512,508],
[494,505,509,496,499,505,0,527,484,506,502,489,520,516],
[459,493,508,468,478,495,473,0,458,482,489,482,495,495],
[498,524,517,532,517,522,516,542,0,519,518,518,536,543],
[494,497,509,486,491,501,494,518,481,0,521,499,501,510],
[484,501,496,488,490,513,498,511,482,479,0,500,519,524],
[506,540,516,499,498,512,511,518,482,501,500,0,495,515],
[495,498,510,485,489,488,480,505,464,499,481,505,0,509],
[496,505,499,475,492,492,484,505,457,490,476,485,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 194, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,490,508,524,520,515,503,528,503,497,498,508,510],
[517,0,505,503,524,517,493,500,489,497,510,493,508,504],
[510,495,0,501,496,506,514,501,507,507,511,509,503,498],
[492,497,499,0,531,498,507,511,504,494,507,510,499,488],
[476,476,504,469,0,473,498,480,474,487,500,476,466,488],
[480,483,494,502,527,0,503,478,507,487,491,500,501,508],
[485,507,486,493,502,497,0,479,498,498,490,517,506,479],
[497,500,499,489,520,522,521,0,517,506,501,520,506,502],
[472,511,493,496,526,493,502,483,0,489,484,499,514,497],
[497,503,493,506,513,513,502,494,511,0,499,502,504,519],
[503,490,489,493,500,509,510,499,516,501,0,500,510,499],
[502,507,491,490,524,500,483,480,501,498,500,0,503,493],
[492,492,497,501,534,499,494,494,486,496,490,497,0,495],
[490,496,502,512,512,492,521,498,503,481,501,507,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 195, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,490,483,474,506,472,520,468,497,475,508,482,486],
[539,0,525,518,487,515,544,519,516,501,475,520,540,536],
[510,475,0,493,485,490,525,512,470,516,460,525,559,506],
[517,482,507,0,476,501,486,509,499,487,480,522,505,472],
[526,513,515,524,0,511,547,528,475,512,509,552,547,522],
[494,485,510,499,489,0,515,514,461,496,510,555,549,495],
[528,456,475,514,453,485,0,506,517,470,457,504,524,510],
[480,481,488,491,472,486,494,0,464,469,423,508,518,489],
[532,484,530,501,525,539,483,536,0,480,464,532,531,513],
[503,499,484,513,488,504,530,531,520,0,501,542,574,529],
[525,525,540,520,491,490,543,577,536,499,0,538,566,492],
[492,480,475,478,448,445,496,492,468,458,462,0,484,489],
[518,460,441,495,453,451,476,482,469,426,434,516,0,485],
[514,464,494,528,478,505,490,511,487,471,508,511,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 196, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,502,466,495,479,504,511,480,477,488,477,499,469],
[519,0,501,504,495,503,508,530,517,498,509,528,535,489],
[498,499,0,484,494,486,489,496,488,500,505,521,516,492],
[534,496,516,0,504,500,521,519,530,521,528,533,534,503],
[505,505,506,496,0,509,502,528,503,492,478,523,523,477],
[521,497,514,500,491,0,509,529,517,507,531,544,515,504],
[496,492,511,479,498,491,0,516,494,494,509,489,523,486],
[489,470,504,481,472,471,484,0,474,488,509,491,488,473],
[520,483,512,470,497,483,506,526,0,507,522,510,533,478],
[523,502,500,479,508,493,506,512,493,0,508,506,515,488],
[512,491,495,472,522,469,491,491,478,492,0,521,507,473],
[523,472,479,467,477,456,511,509,490,494,479,0,524,474],
[501,465,484,466,477,485,477,512,467,485,493,476,0,488],
[531,511,508,497,523,496,514,527,522,512,527,526,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 197, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,554,522,529,519,527,498,532,527,516,540,518,501],
[497,0,537,538,535,516,536,498,504,550,535,529,529,493],
[446,463,0,495,480,470,497,472,474,514,495,475,484,482],
[478,462,505,0,488,481,481,461,498,501,493,498,498,458],
[471,465,520,512,0,481,492,477,506,514,498,509,495,489],
[481,484,530,519,519,0,519,497,503,549,502,504,512,502],
[473,464,503,519,508,481,0,473,484,506,472,522,480,487],
[502,502,528,539,523,503,527,0,517,551,517,507,516,493],
[468,496,526,502,494,497,516,483,0,553,519,534,504,498],
[473,450,486,499,486,451,494,449,447,0,469,465,465,462],
[484,465,505,507,502,498,528,483,481,531,0,516,480,486],
[460,471,525,502,491,496,478,493,466,535,484,0,502,480],
[482,471,516,502,505,488,520,484,496,535,520,498,0,479],
[499,507,518,542,511,498,513,507,502,538,514,520,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 198, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,520,484,533,484,479,523,480,495,520,522,509,507,502],
[480,0,515,512,481,502,531,485,465,495,493,502,526,479],
[516,485,0,521,531,518,535,497,479,512,494,534,495,493],
[467,488,479,0,520,512,521,497,473,514,485,514,493,478],
[516,519,469,480,0,477,531,500,523,537,493,535,521,500],
[521,498,482,488,523,0,541,483,483,525,508,513,519,487],
[477,469,465,479,469,459,0,472,464,468,488,485,465,456],
[520,515,503,503,500,517,528,0,532,509,519,541,536,514],
[505,535,521,527,477,517,536,468,0,502,495,530,513,502],
[480,505,488,486,463,475,532,491,498,0,477,496,485,504],
[478,507,506,515,507,492,512,481,505,523,0,512,508,490],
[491,498,466,486,465,487,515,459,470,504,488,0,480,461],
[493,474,505,507,479,481,535,464,487,515,492,520,0,491],
[498,521,507,522,500,513,544,486,498,496,510,539,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 199, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,526,515,504,507,517,519,530,479,498,517,508,499],
[512,0,514,509,498,524,524,503,525,508,528,514,500,516],
[474,486,0,512,478,484,504,491,492,477,494,521,483,494],
[485,491,488,0,474,497,511,505,490,479,490,492,485,499],
[496,502,522,526,0,501,520,501,505,505,506,539,517,505],
[493,476,516,503,499,0,518,511,491,495,510,517,497,501],
[483,476,496,489,480,482,0,515,489,478,489,510,491,480],
[481,497,509,495,499,489,485,0,492,506,483,513,513,488],
[470,475,508,510,495,509,511,508,0,492,487,504,518,486],
[521,492,523,521,495,505,522,494,508,0,520,529,502,512],
[502,472,506,510,494,490,511,517,513,480,0,515,507,523],
[483,486,479,508,461,483,490,487,496,471,485,0,465,467],
[492,500,517,515,483,503,509,487,482,498,493,535,0,487],
[501,484,506,501,495,499,520,512,514,488,477,533,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1000, 200, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/me/me_14_1000.csv", index=False, header=False)
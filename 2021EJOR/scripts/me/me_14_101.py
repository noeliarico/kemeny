
import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,63,49,58,47,53,55,50,42,55,63,63,54,62],
[38,0,53,55,42,51,42,43,40,53,45,61,47,50],
[52,48,0,52,34,56,49,42,38,49,45,61,35,52],
[43,46,49,0,51,52,50,59,36,45,49,50,58,47],
[54,59,67,50,0,53,52,54,58,55,61,66,57,62],
[48,50,45,49,48,0,38,39,45,43,58,54,43,68],
[46,59,52,51,49,63,0,55,40,52,43,74,45,59],
[51,58,59,42,47,62,46,0,44,48,56,60,56,53],
[59,61,63,65,43,56,61,57,0,49,63,77,58,69],
[46,48,52,56,46,58,49,53,52,0,60,64,57,56],
[38,56,56,52,40,43,58,45,38,41,0,56,45,50],
[38,40,40,51,35,47,27,41,24,37,45,0,42,46],
[47,54,66,43,44,58,56,45,43,44,56,59,0,66],
[39,51,49,54,39,33,42,48,32,45,51,55,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 1, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,46,48,42,51,34,41,57,56,48,48,51,43],
[69,0,56,52,48,55,62,51,58,68,59,52,63,50],
[55,45,0,54,50,52,47,47,56,64,56,49,57,52],
[53,49,47,0,56,38,43,44,47,57,51,46,47,42],
[59,53,51,45,0,53,50,49,54,70,52,50,65,57],
[50,46,49,63,48,0,49,46,57,69,58,58,55,44],
[67,39,54,58,51,52,0,50,52,77,61,60,62,58],
[60,50,54,57,52,55,51,0,53,63,55,54,59,52],
[44,43,45,54,47,44,49,48,0,60,53,51,61,45],
[45,33,37,44,31,32,24,38,41,0,39,35,41,37],
[53,42,45,50,49,43,40,46,48,62,0,39,45,51],
[53,49,52,55,51,43,41,47,50,66,62,0,72,56],
[50,38,44,54,36,46,39,42,40,60,56,29,0,49],
[58,51,49,59,44,57,43,49,56,64,50,45,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 2, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,46,49,55,47,63,45,41,46,56,59,50,55],
[50,0,44,51,44,47,51,53,43,47,54,58,48,46],
[55,57,0,60,56,50,62,57,49,53,56,62,50,61],
[52,50,41,0,51,50,55,37,42,47,53,61,44,40],
[46,57,45,50,0,49,55,51,48,48,55,54,47,57],
[54,54,51,51,52,0,56,44,39,44,49,56,50,43],
[38,50,39,46,46,45,0,51,43,49,46,56,41,41],
[56,48,44,64,50,57,50,0,49,57,57,65,57,48],
[60,58,52,59,53,62,58,52,0,52,56,70,56,49],
[55,54,48,54,53,57,52,44,49,0,51,58,54,54],
[45,47,45,48,46,52,55,44,45,50,0,55,47,46],
[42,43,39,40,47,45,45,36,31,43,46,0,43,41],
[51,53,51,57,54,51,60,44,45,47,54,58,0,54],
[46,55,40,61,44,58,60,53,52,47,55,60,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 3, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,41,49,48,52,41,51,50,50,57,46,48,55],
[52,0,51,55,57,61,51,62,65,57,48,60,53,54],
[60,50,0,55,55,65,58,58,60,56,60,71,57,59],
[52,46,46,0,46,66,67,69,53,56,50,55,50,59],
[53,44,46,55,0,55,51,58,44,59,56,50,56,51],
[49,40,36,35,46,0,46,58,49,49,44,50,46,46],
[60,50,43,34,50,55,0,46,50,52,51,58,57,45],
[50,39,43,32,43,43,55,0,49,44,42,58,41,40],
[51,36,41,48,57,52,51,52,0,52,54,54,45,65],
[51,44,45,45,42,52,49,57,49,0,51,51,40,46],
[44,53,41,51,45,57,50,59,47,50,0,54,35,54],
[55,41,30,46,51,51,43,43,47,50,47,0,36,44],
[53,48,44,51,45,55,44,60,56,61,66,65,0,46],
[46,47,42,42,50,55,56,61,36,55,47,57,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 4, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,38,44,46,61,49,61,51,61,53,47,52,39],
[57,0,36,46,44,60,39,45,47,53,45,48,44,39],
[63,65,0,49,58,66,46,57,40,66,65,46,55,40],
[57,55,52,0,63,71,42,66,54,64,59,55,58,42],
[55,57,43,38,0,49,43,58,34,56,52,49,56,30],
[40,41,35,30,52,0,35,45,37,44,38,37,42,42],
[52,62,55,59,58,66,0,57,50,55,59,61,55,48],
[40,56,44,35,43,56,44,0,45,53,52,43,50,38],
[50,54,61,47,67,64,51,56,0,56,53,60,57,52],
[40,48,35,37,45,57,46,48,45,0,41,42,42,33],
[48,56,36,42,49,63,42,49,48,60,0,49,54,44],
[54,53,55,46,52,64,40,58,41,59,52,0,52,42],
[49,57,46,43,45,59,46,51,44,59,47,49,0,35],
[62,62,61,59,71,59,53,63,49,68,57,59,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 5, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,55,49,51,50,52,60,56,57,56,57,52,52],
[43,0,52,52,42,46,51,48,40,49,49,50,50,44],
[46,49,0,42,46,51,49,47,46,47,57,50,50,59],
[52,49,59,0,49,56,59,51,40,52,54,53,61,52],
[50,59,55,52,0,55,59,54,56,58,70,55,54,60],
[51,55,50,45,46,0,57,51,45,50,54,44,59,49],
[49,50,52,42,42,44,0,44,37,55,48,48,52,49],
[41,53,54,50,47,50,57,0,39,53,52,57,55,52],
[45,61,55,61,45,56,64,62,0,55,60,61,55,56],
[44,52,54,49,43,51,46,48,46,0,58,56,50,51],
[45,52,44,47,31,47,53,49,41,43,0,49,52,49],
[44,51,51,48,46,57,53,44,40,45,52,0,56,49],
[49,51,51,40,47,42,49,46,46,51,49,45,0,44],
[49,57,42,49,41,52,52,49,45,50,52,52,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 6, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,44,54,42,56,50,48,42,55,56,70,62,49],
[46,0,41,48,36,60,51,47,43,60,51,62,62,49],
[57,60,0,65,51,62,55,50,60,58,62,65,63,60],
[47,53,36,0,37,52,45,44,48,48,59,64,55,57],
[59,65,50,64,0,68,62,52,61,57,64,69,65,67],
[45,41,39,49,33,0,44,32,46,51,55,55,52,42],
[51,50,46,56,39,57,0,45,46,53,44,60,59,54],
[53,54,51,57,49,69,56,0,59,64,61,70,65,51],
[59,58,41,53,40,55,55,42,0,59,59,62,66,52],
[46,41,43,53,44,50,48,37,42,0,48,61,52,45],
[45,50,39,42,37,46,57,40,42,53,0,53,61,38],
[31,39,36,37,32,46,41,31,39,40,48,0,53,35],
[39,39,38,46,36,49,42,36,35,49,40,48,0,48],
[52,52,41,44,34,59,47,50,49,56,63,66,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 7, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,54,54,43,48,46,42,55,55,48,51,54,52],
[48,0,48,41,40,44,40,46,55,54,53,43,48,47],
[47,53,0,66,49,51,44,51,63,50,55,52,55,47],
[47,60,35,0,50,47,45,42,61,53,51,49,51,50],
[58,61,52,51,0,48,53,53,62,56,67,56,59,61],
[53,57,50,54,53,0,48,47,53,56,53,49,56,53],
[55,61,57,56,48,53,0,53,69,55,58,54,57,58],
[59,55,50,59,48,54,48,0,63,57,55,55,56,48],
[46,46,38,40,39,48,32,38,0,46,45,44,52,48],
[46,47,51,48,45,45,46,44,55,0,55,47,51,48],
[53,48,46,50,34,48,43,46,56,46,0,46,51,49],
[50,58,49,52,45,52,47,46,57,54,55,0,61,53],
[47,53,46,50,42,45,44,45,49,50,50,40,0,49],
[49,54,54,51,40,48,43,53,53,53,52,48,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 8, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,44,42,50,34,52,51,49,57,48,36,49,44],
[61,0,44,48,51,35,48,46,54,49,49,51,46,48],
[57,57,0,48,48,48,61,49,54,42,59,55,54,49],
[59,53,53,0,55,52,47,58,57,46,64,54,58,49],
[51,50,53,46,0,47,42,54,48,48,45,52,54,50],
[67,66,53,49,54,0,62,56,64,57,65,50,62,51],
[49,53,40,54,59,39,0,35,50,35,53,46,54,49],
[50,55,52,43,47,45,66,0,51,49,46,48,53,50],
[52,47,47,44,53,37,51,50,0,41,49,52,55,43],
[44,52,59,55,53,44,66,52,60,0,45,48,58,49],
[53,52,42,37,56,36,48,55,52,56,0,42,50,46],
[65,50,46,47,49,51,55,53,49,53,59,0,57,45],
[52,55,47,43,47,39,47,48,46,43,51,44,0,40],
[57,53,52,52,51,50,52,51,58,52,55,56,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 9, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,56,59,51,52,52,48,46,59,51,52,46,48],
[47,0,44,54,50,61,51,51,49,54,48,54,53,44],
[45,57,0,53,48,47,45,38,49,48,46,47,53,51],
[42,47,48,0,47,52,46,41,43,47,45,44,44,50],
[50,51,53,54,0,58,50,50,46,54,51,47,44,50],
[49,40,54,49,43,0,42,40,42,49,45,39,43,46],
[49,50,56,55,51,59,0,46,53,56,48,47,51,48],
[53,50,63,60,51,61,55,0,52,52,47,48,58,51],
[55,52,52,58,55,59,48,49,0,61,54,50,56,53],
[42,47,53,54,47,52,45,49,40,0,54,43,49,46],
[50,53,55,56,50,56,53,54,47,47,0,51,54,48],
[49,47,54,57,54,62,54,53,51,58,50,0,55,55],
[55,48,48,57,57,58,50,43,45,52,47,46,0,47],
[53,57,50,51,51,55,53,50,48,55,53,46,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 10, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,51,29,60,45,59,48,65,48,56,41,45,59],
[56,0,55,41,52,56,60,35,73,51,64,39,58,78],
[50,46,0,45,44,41,51,37,72,58,50,47,65,63],
[72,60,56,0,69,56,67,54,74,78,60,42,78,76],
[41,49,57,32,0,46,54,45,70,45,50,39,56,65],
[56,45,60,45,55,0,55,46,53,57,66,35,68,67],
[42,41,50,34,47,46,0,37,68,45,45,46,49,47],
[53,66,64,47,56,55,64,0,70,53,61,54,58,78],
[36,28,29,27,31,48,33,31,0,36,32,21,40,41],
[53,50,43,23,56,44,56,48,65,0,48,36,58,66],
[45,37,51,41,51,35,56,40,69,53,0,36,67,66],
[60,62,54,59,62,66,55,47,80,65,65,0,78,81],
[56,43,36,23,45,33,52,43,61,43,34,23,0,52],
[42,23,38,25,36,34,54,23,60,35,35,20,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 11, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,42,41,39,44,52,45,52,37,51,52,41,47],
[59,0,46,46,47,44,56,49,54,49,58,46,51,55],
[59,55,0,48,47,47,42,56,45,47,52,51,49,54],
[60,55,53,0,47,43,52,55,51,51,60,57,51,49],
[62,54,54,54,0,54,55,56,52,51,53,45,54,55],
[57,57,54,58,47,0,51,51,53,43,52,50,59,62],
[49,45,59,49,46,50,0,58,47,50,50,48,48,50],
[56,52,45,46,45,50,43,0,44,47,47,48,48,45],
[49,47,56,50,49,48,54,57,0,50,48,40,51,44],
[64,52,54,50,50,58,51,54,51,0,52,47,57,54],
[50,43,49,41,48,49,51,54,53,49,0,51,45,48],
[49,55,50,44,56,51,53,53,61,54,50,0,50,50],
[60,50,52,50,47,42,53,53,50,44,56,51,0,49],
[54,46,47,52,46,39,51,56,57,47,53,51,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 12, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,37,64,29,50,88,55,55,47,66,50,65,55],
[54,0,50,58,51,40,82,41,52,69,54,47,60,52],
[64,51,0,34,19,36,69,41,51,64,62,72,59,42],
[37,43,67,0,32,47,80,29,59,54,46,45,33,47],
[72,50,82,69,0,51,86,55,68,66,70,71,55,66],
[51,61,65,54,50,0,82,42,64,72,57,63,54,42],
[13,19,32,21,15,19,0,33,13,24,25,32,18,11],
[46,60,60,72,46,59,68,0,41,56,54,51,47,33],
[46,49,50,42,33,37,88,60,0,48,30,46,36,32],
[54,32,37,47,35,29,77,45,53,0,63,53,59,60],
[35,47,39,55,31,44,76,47,71,38,0,45,52,60],
[51,54,29,56,30,38,69,50,55,48,56,0,44,50],
[36,41,42,68,46,47,83,54,65,42,49,57,0,55],
[46,49,59,54,35,59,90,68,69,41,41,51,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 13, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,101,38,101,65,101,101,74,74,38,65,101,101],
[0,0,101,38,74,38,74,101,74,38,38,65,38,38],
[0,0,0,38,36,0,36,63,0,0,0,38,38,0],
[63,63,63,0,63,27,63,63,63,63,0,65,101,63],
[0,27,65,38,0,65,65,101,38,38,38,65,65,38],
[36,63,101,74,36,0,101,101,74,74,74,101,101,74],
[0,27,65,38,36,0,0,101,38,0,38,65,65,38],
[0,0,38,38,0,0,0,0,0,0,38,38,38,0],
[27,27,101,38,63,27,63,101,0,0,38,65,65,65],
[27,63,101,38,63,27,101,101,101,0,38,65,101,101],
[63,63,101,101,63,27,63,63,63,63,0,101,101,63],
[36,36,63,36,36,0,36,63,36,36,0,0,36,36],
[0,63,63,0,36,0,36,63,36,0,0,65,0,36],
[0,63,101,38,63,27,63,101,36,0,38,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 14, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,54,69,54,60,71,58,55,47,52,60,61,65],
[36,0,41,47,38,36,64,31,41,45,39,48,41,41],
[47,60,0,47,51,48,66,50,56,58,44,54,53,51],
[32,54,54,0,39,52,53,51,38,46,43,54,41,48],
[47,63,50,62,0,53,68,56,48,51,45,58,49,51],
[41,65,53,49,48,0,64,62,47,48,35,47,50,44],
[30,37,35,48,33,37,0,26,33,35,29,42,40,37],
[43,70,51,50,45,39,75,0,48,63,43,53,50,46],
[46,60,45,63,53,54,68,53,0,55,51,58,59,52],
[54,56,43,55,50,53,66,38,46,0,57,61,50,56],
[49,62,57,58,56,66,72,58,50,44,0,56,55,63],
[41,53,47,47,43,54,59,48,43,40,45,0,39,48],
[40,60,48,60,52,51,61,51,42,51,46,62,0,57],
[36,60,50,53,50,57,64,55,49,45,38,53,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 15, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,45,53,46,61,36,49,41,38,54,76,50,56],
[30,0,31,33,42,34,25,37,33,31,26,43,58,59],
[56,70,0,68,66,63,50,76,57,61,66,73,79,63],
[48,68,33,0,51,47,39,42,54,28,46,61,61,57],
[55,59,35,50,0,56,22,53,28,28,57,57,61,53],
[40,67,38,54,45,0,25,57,40,38,39,45,58,55],
[65,76,51,62,79,76,0,67,70,46,74,67,73,66],
[52,64,25,59,48,44,34,0,41,35,44,53,36,49],
[60,68,44,47,73,61,31,60,0,36,53,46,67,65],
[63,70,40,73,73,63,55,66,65,0,58,59,61,63],
[47,75,35,55,44,62,27,57,48,43,0,78,54,68],
[25,58,28,40,44,56,34,48,55,42,23,0,56,45],
[51,43,22,40,40,43,28,65,34,40,47,45,0,47],
[45,42,38,44,48,46,35,52,36,38,33,56,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 16, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,51,54,36,50,47,52,47,47,63,44,36,49],
[50,0,63,46,54,68,56,48,54,46,54,44,54,57],
[50,38,0,52,43,53,43,33,54,34,47,46,28,48],
[47,55,49,0,34,41,51,50,47,43,50,35,54,54],
[65,47,58,67,0,75,56,58,60,44,59,58,55,57],
[51,33,48,60,26,0,51,39,46,39,50,52,46,47],
[54,45,58,50,45,50,0,64,57,41,52,48,46,54],
[49,53,68,51,43,62,37,0,65,46,45,48,48,49],
[54,47,47,54,41,55,44,36,0,42,55,47,44,44],
[54,55,67,58,57,62,60,55,59,0,67,50,67,62],
[38,47,54,51,42,51,49,56,46,34,0,31,42,39],
[57,57,55,66,43,49,53,53,54,51,70,0,47,61],
[65,47,73,47,46,55,55,53,57,34,59,54,0,62],
[52,44,53,47,44,54,47,52,57,39,62,40,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 17, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,48,51,51,56,50,56,47,55,50,48,52,54],
[50,0,54,51,55,53,47,52,51,54,52,45,50,59],
[53,47,0,46,48,49,45,48,43,49,39,45,43,50],
[50,50,55,0,50,53,53,57,53,52,49,51,50,54],
[50,46,53,51,0,53,54,48,50,51,47,43,51,51],
[45,48,52,48,48,0,46,50,49,46,47,48,47,41],
[51,54,56,48,47,55,0,57,46,50,47,49,45,42],
[45,49,53,44,53,51,44,0,51,46,44,38,49,52],
[54,50,58,48,51,52,55,50,0,51,52,48,49,54],
[46,47,52,49,50,55,51,55,50,0,51,50,48,48],
[51,49,62,52,54,54,54,57,49,50,0,57,54,51],
[53,56,56,50,58,53,52,63,53,51,44,0,55,60],
[49,51,58,51,50,54,56,52,52,53,47,46,0,51],
[47,42,51,47,50,60,59,49,47,53,50,41,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 18, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,43,65,53,54,45,51,45,45,48,57,48,54],
[43,0,35,52,45,41,40,41,38,43,43,47,38,47],
[58,66,0,55,63,47,43,50,45,52,59,54,49,59],
[36,49,46,0,49,53,37,41,40,39,36,45,48,39],
[48,56,38,52,0,47,37,37,47,37,42,55,47,40],
[47,60,54,48,54,0,44,38,41,49,46,47,51,54],
[56,61,58,64,64,57,0,47,56,63,72,59,55,68],
[50,60,51,60,64,63,54,0,56,62,66,59,54,59],
[56,63,56,61,54,60,45,45,0,54,49,57,57,59],
[56,58,49,62,64,52,38,39,47,0,48,51,49,53],
[53,58,42,65,59,55,29,35,52,53,0,60,61,50],
[44,54,47,56,46,54,42,42,44,50,41,0,45,45],
[53,63,52,53,54,50,46,47,44,52,40,56,0,62],
[47,54,42,62,61,47,33,42,42,48,51,56,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 19, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,50,43,53,52,47,48,44,55,47,50,53,43],
[42,0,52,42,51,47,47,47,50,55,48,45,54,43],
[51,49,0,48,53,48,48,47,52,57,51,44,40,45],
[58,59,53,0,61,57,53,53,54,68,52,52,55,50],
[48,50,48,40,0,46,49,46,47,58,36,49,44,42],
[49,54,53,44,55,0,55,49,52,58,46,52,46,45],
[54,54,53,48,52,46,0,48,44,53,51,50,51,50],
[53,54,54,48,55,52,53,0,55,61,53,57,51,51],
[57,51,49,47,54,49,57,46,0,59,48,46,54,48],
[46,46,44,33,43,43,48,40,42,0,41,38,53,40],
[54,53,50,49,65,55,50,48,53,60,0,50,53,50],
[51,56,57,49,52,49,51,44,55,63,51,0,55,54],
[48,47,61,46,57,55,50,50,47,48,48,46,0,40],
[58,58,56,51,59,56,51,50,53,61,51,47,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 20, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,34,52,47,52,49,44,45,49,39,38,46,39],
[52,0,36,45,50,50,52,46,44,56,41,40,50,45],
[67,65,0,57,64,56,59,64,57,64,52,52,59,45],
[49,56,44,0,58,54,56,49,52,60,53,37,52,53],
[54,51,37,43,0,51,53,45,40,48,46,46,45,48],
[49,51,45,47,50,0,53,41,54,44,45,41,56,37],
[52,49,42,45,48,48,0,56,50,55,42,38,52,44],
[57,55,37,52,56,60,45,0,52,53,54,41,54,40],
[56,57,44,49,61,47,51,49,0,55,42,47,47,47],
[52,45,37,41,53,57,46,48,46,0,34,39,43,40],
[62,60,49,48,55,56,59,47,59,67,0,55,51,44],
[63,61,49,64,55,60,63,60,54,62,46,0,50,52],
[55,51,42,49,56,45,49,47,54,58,50,51,0,51],
[62,56,56,48,53,64,57,61,54,61,57,49,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 21, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,78,43,36,78,100,43,35,100,93,101,43,8],
[66,0,101,43,31,101,65,31,65,65,58,66,66,31],
[23,0,0,7,0,100,65,7,23,30,23,30,36,7],
[58,58,94,0,24,101,65,23,58,65,58,66,59,24],
[65,70,101,77,0,101,65,30,65,65,93,66,43,66],
[23,0,1,0,0,0,30,0,23,23,23,30,1,0],
[1,36,36,36,36,71,0,1,0,58,35,36,36,1],
[58,70,94,78,71,101,100,0,58,100,93,101,36,43],
[66,36,78,43,36,78,101,43,0,101,59,66,43,43],
[1,36,71,36,36,78,43,1,0,0,35,8,36,1],
[8,43,78,43,8,78,66,8,42,66,0,31,43,8],
[0,35,71,35,35,71,65,0,35,93,70,0,36,1],
[58,35,65,42,58,100,65,65,58,65,58,65,0,65],
[93,70,94,77,35,101,100,58,58,100,93,100,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 22, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,45,59,49,39,42,60,55,37,42,55,44,47],
[56,0,53,52,58,38,60,67,62,56,55,51,50,51],
[56,48,0,51,56,44,51,66,59,52,50,67,46,54],
[42,49,50,0,52,49,47,65,42,48,44,61,54,57],
[52,43,45,49,0,44,45,53,47,52,50,58,34,55],
[62,63,57,52,57,0,58,65,56,59,45,55,62,62],
[59,41,50,54,56,43,0,62,52,48,55,56,53,48],
[41,34,35,36,48,36,39,0,42,46,43,44,29,39],
[46,39,42,59,54,45,49,59,0,46,47,51,55,52],
[64,45,49,53,49,42,53,55,55,0,47,56,46,57],
[59,46,51,57,51,56,46,58,54,54,0,60,48,61],
[46,50,34,40,43,46,45,57,50,45,41,0,31,48],
[57,51,55,47,67,39,48,72,46,55,53,70,0,51],
[54,50,47,44,46,39,53,62,49,44,40,53,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 23, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,47,48,50,52,34,42,52,52,51,52,47,52],
[58,0,61,48,54,59,55,54,58,45,59,49,47,60],
[54,40,0,49,51,41,35,44,49,48,46,50,43,54],
[53,53,52,0,54,43,40,52,64,43,49,53,49,53],
[51,47,50,47,0,49,46,45,52,48,53,52,42,56],
[49,42,60,58,52,0,44,52,62,48,53,49,52,55],
[67,46,66,61,55,57,0,52,75,56,58,65,57,60],
[59,47,57,49,56,49,49,0,52,46,50,48,48,56],
[49,43,52,37,49,39,26,49,0,39,36,39,44,51],
[49,56,53,58,53,53,45,55,62,0,58,47,52,62],
[50,42,55,52,48,48,43,51,65,43,0,57,46,54],
[49,52,51,48,49,52,36,53,62,54,44,0,55,52],
[54,54,58,52,59,49,44,53,57,49,55,46,0,58],
[49,41,47,48,45,46,41,45,50,39,47,49,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 24, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,60,81,66,68,48,46,77,67,42,64,34,55],
[29,0,61,52,44,47,37,45,49,48,37,65,35,57],
[41,40,0,41,56,35,31,37,39,39,28,51,25,46],
[20,49,60,0,67,45,42,34,53,37,33,26,22,51],
[35,57,45,34,0,53,58,50,46,45,35,34,28,33],
[33,54,66,56,48,0,45,35,54,45,34,66,22,55],
[53,64,70,59,43,56,0,46,67,76,57,77,35,57],
[55,56,64,67,51,66,55,0,61,67,64,74,35,65],
[24,52,62,48,55,47,34,40,0,32,32,51,23,55],
[34,53,62,64,56,56,25,34,69,0,34,60,36,58],
[59,64,73,68,66,67,44,37,69,67,0,63,51,45],
[37,36,50,75,67,35,24,27,50,41,38,0,29,52],
[67,66,76,79,73,79,66,66,78,65,50,72,0,63],
[46,44,55,50,68,46,44,36,46,43,56,49,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 25, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,55,51,54,47,58,58,52,50,62,64,60,49],
[46,0,59,50,61,41,56,52,59,51,55,62,59,52],
[46,42,0,42,57,52,46,52,57,49,43,57,53,51],
[50,51,59,0,63,55,53,60,52,57,58,62,59,51],
[47,40,44,38,0,50,44,40,52,40,44,40,56,41],
[54,60,49,46,51,0,48,45,53,40,54,50,56,46],
[43,45,55,48,57,53,0,48,45,39,51,60,55,44],
[43,49,49,41,61,56,53,0,46,40,57,52,57,46],
[49,42,44,49,49,48,56,55,0,48,46,60,50,42],
[51,50,52,44,61,61,62,61,53,0,56,56,65,52],
[39,46,58,43,57,47,50,44,55,45,0,54,58,56],
[37,39,44,39,61,51,41,49,41,45,47,0,47,47],
[41,42,48,42,45,45,46,44,51,36,43,54,0,43],
[52,49,50,50,60,55,57,55,59,49,45,54,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 26, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,44,59,52,51,52,53,52,49,56,65,60,52],
[53,0,48,53,40,47,46,45,42,42,47,51,56,48],
[57,53,0,58,61,59,47,62,67,62,57,64,64,69],
[42,48,43,0,41,43,47,46,50,49,44,56,51,49],
[49,61,40,60,0,53,54,42,58,63,47,61,60,54],
[50,54,42,58,48,0,50,54,42,53,43,48,59,56],
[49,55,54,54,47,51,0,52,55,63,48,59,48,52],
[48,56,39,55,59,47,49,0,48,45,52,58,50,45],
[49,59,34,51,43,59,46,53,0,49,49,58,56,54],
[52,59,39,52,38,48,38,56,52,0,40,47,48,61],
[45,54,44,57,54,58,53,49,52,61,0,63,53,52],
[36,50,37,45,40,53,42,43,43,54,38,0,44,43],
[41,45,37,50,41,42,53,51,45,53,48,57,0,56],
[49,53,32,52,47,45,49,56,47,40,49,58,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 27, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,58,43,57,50,58,44,51,40,43,51,51,50],
[58,0,40,44,62,50,56,42,57,44,46,48,54,64],
[43,61,0,42,50,41,62,46,54,51,41,57,52,57],
[58,57,59,0,53,47,55,50,56,53,45,58,64,59],
[44,39,51,48,0,44,55,42,59,53,41,50,51,55],
[51,51,60,54,57,0,67,48,58,44,55,45,67,68],
[43,45,39,46,46,34,0,40,49,45,34,44,56,53],
[57,59,55,51,59,53,61,0,55,46,49,57,58,51],
[50,44,47,45,42,43,52,46,0,42,40,48,63,59],
[61,57,50,48,48,57,56,55,59,0,41,48,68,65],
[58,55,60,56,60,46,67,52,61,60,0,51,68,58],
[50,53,44,43,51,56,57,44,53,53,50,0,56,50],
[50,47,49,37,50,34,45,43,38,33,33,45,0,48],
[51,37,44,42,46,33,48,50,42,36,43,51,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 28, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,53,45,46,53,50,48,55,55,54,61,54,53],
[58,0,51,53,53,56,51,61,54,65,50,59,54,60],
[48,50,0,54,51,56,50,51,56,56,51,57,52,58],
[56,48,47,0,49,49,48,48,57,58,45,52,49,50],
[55,48,50,52,0,58,45,55,55,58,54,57,48,51],
[48,45,45,52,43,0,53,50,56,51,42,53,51,48],
[51,50,51,53,56,48,0,50,49,57,51,50,58,55],
[53,40,50,53,46,51,51,0,52,56,53,51,46,51],
[46,47,45,44,46,45,52,49,0,60,52,53,49,45],
[46,36,45,43,43,50,44,45,41,0,42,50,45,44],
[47,51,50,56,47,59,50,48,49,59,0,54,53,56],
[40,42,44,49,44,48,51,50,48,51,47,0,53,47],
[47,47,49,52,53,50,43,55,52,56,48,48,0,57],
[48,41,43,51,50,53,46,50,56,57,45,54,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 29, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,55,50,53,56,37,51,71,34,51,57,57,54],
[43,0,46,68,59,56,51,39,48,40,45,51,53,36],
[46,55,0,67,58,51,41,42,53,60,53,53,47,43],
[51,33,34,0,48,49,30,30,49,52,38,60,40,51],
[48,42,43,53,0,35,46,42,60,25,48,57,40,42],
[45,45,50,52,66,0,38,59,68,50,70,64,58,48],
[64,50,60,71,55,63,0,58,77,50,65,67,66,60],
[50,62,59,71,59,42,43,0,77,41,64,57,49,62],
[30,53,48,52,41,33,24,24,0,43,34,43,29,29],
[67,61,41,49,76,51,51,60,58,0,56,61,59,62],
[50,56,48,63,53,31,36,37,67,45,0,44,38,39],
[44,50,48,41,44,37,34,44,58,40,57,0,42,44],
[44,48,54,61,61,43,35,52,72,42,63,59,0,43],
[47,65,58,50,59,53,41,39,72,39,62,57,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 30, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,33,39,75,53,53,60,53,46,52,45,32,52],
[57,0,59,44,74,66,44,73,66,60,51,37,57,58],
[68,42,0,41,96,76,51,90,81,70,50,61,69,73],
[62,57,60,0,62,71,25,82,69,51,16,41,48,46],
[26,27,5,39,0,30,55,37,58,49,19,12,5,9],
[48,35,25,30,71,0,47,88,70,47,25,50,49,55],
[48,57,50,76,46,54,0,65,54,51,45,50,42,54],
[41,28,11,19,64,13,36,0,58,29,18,43,10,18],
[48,35,20,32,43,31,47,43,0,24,25,25,3,32],
[55,41,31,50,52,54,50,72,77,0,29,31,48,54],
[49,50,51,85,82,76,56,83,76,72,0,66,51,51],
[56,64,40,60,89,51,51,58,76,70,35,0,26,64],
[69,44,32,53,96,52,59,91,98,53,50,75,0,75],
[49,43,28,55,92,46,47,83,69,47,50,37,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 31, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,48,43,47,40,44,48,48,40,56,47,54,54],
[51,0,54,54,57,52,51,53,50,38,56,59,54,34],
[53,47,0,42,45,64,47,67,53,48,56,68,54,40],
[58,47,59,0,50,46,43,62,51,41,54,50,54,44],
[54,44,56,51,0,52,49,57,48,35,55,44,65,36],
[61,49,37,55,49,0,42,50,40,35,59,46,51,35],
[57,50,54,58,52,59,0,52,53,52,61,53,59,46],
[53,48,34,39,44,51,49,0,41,21,47,44,50,33],
[53,51,48,50,53,61,48,60,0,50,74,58,58,54],
[61,63,53,60,66,66,49,80,51,0,78,60,67,51],
[45,45,45,47,46,42,40,54,27,23,0,50,51,32],
[54,42,33,51,57,55,48,57,43,41,51,0,51,45],
[47,47,47,47,36,50,42,51,43,34,50,50,0,40],
[47,67,61,57,65,66,55,68,47,50,69,56,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 32, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,52,43,42,45,49,50,39,51,40,49,48,43],
[46,0,47,40,42,43,47,47,45,47,42,38,46,38],
[49,54,0,47,51,52,48,53,44,52,56,46,55,52],
[58,61,54,0,52,55,59,54,50,56,52,55,60,49],
[59,59,50,49,0,51,50,45,48,46,44,52,59,44],
[56,58,49,46,50,0,54,54,49,47,53,54,52,44],
[52,54,53,42,51,47,0,47,44,42,38,47,47,42],
[51,54,48,47,56,47,54,0,43,52,55,51,55,52],
[62,56,57,51,53,52,57,58,0,53,53,51,49,53],
[50,54,49,45,55,54,59,49,48,0,54,46,46,42],
[61,59,45,49,57,48,63,46,48,47,0,44,50,48],
[52,63,55,46,49,47,54,50,50,55,57,0,61,46],
[53,55,46,41,42,49,54,46,52,55,51,40,0,40],
[58,63,49,52,57,57,59,49,48,59,53,55,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 33, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,47,42,50,53,51,44,46,51,45,42,47,49],
[53,0,49,48,49,47,61,53,50,58,57,44,49,45],
[54,52,0,43,58,51,58,54,49,55,57,43,54,50],
[59,53,58,0,51,50,53,48,41,51,62,47,47,53],
[51,52,43,50,0,48,59,46,47,48,52,44,50,48],
[48,54,50,51,53,0,58,50,48,47,49,46,50,48],
[50,40,43,48,42,43,0,41,45,42,45,40,41,37],
[57,48,47,53,55,51,60,0,45,55,58,46,55,57],
[55,51,52,60,54,53,56,56,0,53,53,52,48,46],
[50,43,46,50,53,54,59,46,48,0,50,42,56,51],
[56,44,44,39,49,52,56,43,48,51,0,46,48,47],
[59,57,58,54,57,55,61,55,49,59,55,0,49,53],
[54,52,47,54,51,51,60,46,53,45,53,52,0,56],
[52,56,51,48,53,53,64,44,55,50,54,48,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 34, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,48,45,51,60,48,53,50,59,53,46,50,61],
[41,0,44,41,52,48,38,45,39,53,53,40,51,61],
[53,57,0,55,54,62,46,56,53,56,60,50,60,66],
[56,60,46,0,62,48,55,58,57,59,61,52,57,59],
[50,49,47,39,0,47,40,46,46,56,52,32,49,51],
[41,53,39,53,54,0,43,51,44,55,55,41,51,56],
[53,63,55,46,61,58,0,55,54,59,62,46,51,66],
[48,56,45,43,55,50,46,0,49,51,50,34,49,52],
[51,62,48,44,55,57,47,52,0,52,62,39,52,60],
[42,48,45,42,45,46,42,50,49,0,50,38,51,48],
[48,48,41,40,49,46,39,51,39,51,0,38,49,54],
[55,61,51,49,69,60,55,67,62,63,63,0,62,60],
[51,50,41,44,52,50,50,52,49,50,52,39,0,55],
[40,40,35,42,50,45,35,49,41,53,47,41,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 35, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,48,68,61,63,79,64,61,68,68,41,63,63],
[22,0,27,49,42,42,58,40,44,40,38,26,29,43],
[53,74,0,65,66,56,81,57,68,68,54,40,57,54],
[33,52,36,0,35,44,51,35,41,43,40,36,41,34],
[40,59,35,66,0,57,73,55,57,40,49,36,51,33],
[38,59,45,57,44,0,66,45,39,33,50,42,39,30],
[22,43,20,50,28,35,0,32,49,30,18,19,26,22],
[37,61,44,66,46,56,69,0,57,55,37,42,51,43],
[40,57,33,60,44,62,52,44,0,45,39,29,39,36],
[33,61,33,58,61,68,71,46,56,0,34,41,46,33],
[33,63,47,61,52,51,83,64,62,67,0,46,52,36],
[60,75,61,65,65,59,82,59,72,60,55,0,46,54],
[38,72,44,60,50,62,75,50,62,55,49,55,0,25],
[38,58,47,67,68,71,79,58,65,68,65,47,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 36, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,58,35,74,80,59,47,47,75,81,64,72,47],
[42,0,36,23,59,53,48,34,37,69,57,44,53,44],
[43,65,0,61,71,73,61,63,70,72,64,49,65,56],
[66,78,40,0,68,67,44,64,48,73,64,62,75,56],
[27,42,30,33,0,45,24,34,28,45,53,43,48,37],
[21,48,28,34,56,0,31,51,31,50,55,49,36,24],
[42,53,40,57,77,70,0,56,35,77,55,50,57,53],
[54,67,38,37,67,50,45,0,37,65,46,53,55,55],
[54,64,31,53,73,70,66,64,0,75,59,57,57,56],
[26,32,29,28,56,51,24,36,26,0,53,25,46,23],
[20,44,37,37,48,46,46,55,42,48,0,40,55,39],
[37,57,52,39,58,52,51,48,44,76,61,0,57,46],
[29,48,36,26,53,65,44,46,44,55,46,44,0,27],
[54,57,45,45,64,77,48,46,45,78,62,55,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 37, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,42,49,61,67,69,65,66,71,66,76,75,36],
[63,0,36,70,32,73,51,60,49,67,67,47,40,26],
[59,65,0,45,43,67,62,78,65,66,52,65,65,45],
[52,31,56,0,50,77,57,47,60,37,66,51,41,46],
[40,69,58,51,0,71,75,59,84,75,56,49,69,59],
[34,28,34,24,30,0,44,45,35,27,37,38,50,23],
[32,50,39,44,26,57,0,51,55,64,39,52,59,28],
[36,41,23,54,42,56,50,0,59,55,69,33,40,55],
[35,52,36,41,17,66,46,42,0,62,43,45,69,13],
[30,34,35,64,26,74,37,46,39,0,61,41,52,24],
[35,34,49,35,45,64,62,32,58,40,0,49,66,12],
[25,54,36,50,52,63,49,68,56,60,52,0,83,48],
[26,61,36,60,32,51,42,61,32,49,35,18,0,15],
[65,75,56,55,42,78,73,46,88,77,89,53,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 38, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,17,44,24,62,25,38,29,23,76,41,60,49],
[58,0,57,39,72,81,57,65,51,50,91,57,74,57],
[84,44,0,40,36,72,35,68,53,62,78,78,82,61],
[57,62,61,0,46,62,32,56,35,46,62,52,60,55],
[77,29,65,55,0,59,46,60,59,70,85,52,81,76],
[39,20,29,39,42,0,31,21,33,46,70,33,64,50],
[76,44,66,69,55,70,0,81,43,71,87,52,84,77],
[63,36,33,45,41,80,20,0,14,67,66,66,69,51],
[72,50,48,66,42,68,58,87,0,81,85,66,71,67],
[78,51,39,55,31,55,30,34,20,0,80,37,62,42],
[25,10,23,39,16,31,14,35,16,21,0,31,56,44],
[60,44,23,49,49,68,49,35,35,64,70,0,79,39],
[41,27,19,41,20,37,17,32,30,39,45,22,0,38],
[52,44,40,46,25,51,24,50,34,59,57,62,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 39, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,59,54,52,54,42,41,46,51,45,54,50,45],
[52,0,53,54,55,55,52,49,53,52,57,65,54,56],
[42,48,0,51,48,49,35,40,53,50,48,57,50,50],
[47,47,50,0,48,47,44,46,45,41,42,57,54,45],
[49,46,53,53,0,51,42,49,46,45,45,53,54,48],
[47,46,52,54,50,0,42,42,46,47,43,58,52,51],
[59,49,66,57,59,59,0,52,47,50,51,61,65,51],
[60,52,61,55,52,59,49,0,43,58,46,58,56,52],
[55,48,48,56,55,55,54,58,0,53,47,62,53,54],
[50,49,51,60,56,54,51,43,48,0,41,58,43,54],
[56,44,53,59,56,58,50,55,54,60,0,52,48,56],
[47,36,44,44,48,43,40,43,39,43,49,0,50,49],
[51,47,51,47,47,49,36,45,48,58,53,51,0,47],
[56,45,51,56,53,50,50,49,47,47,45,52,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 40, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,58,49,61,51,56,57,53,64,62,55,51,58],
[38,0,44,43,49,44,44,44,48,52,57,42,37,50],
[43,57,0,48,56,43,50,52,55,57,57,53,39,49],
[52,58,53,0,59,50,53,51,48,64,64,57,53,55],
[40,52,45,42,0,41,47,46,44,56,54,46,39,50],
[50,57,58,51,60,0,50,53,54,61,62,58,54,52],
[45,57,51,48,54,51,0,57,52,56,57,49,52,56],
[44,57,49,50,55,48,44,0,53,61,63,56,56,55],
[48,53,46,53,57,47,49,48,0,57,55,52,43,54],
[37,49,44,37,45,40,45,40,44,0,54,48,44,43],
[39,44,44,37,47,39,44,38,46,47,0,51,40,45],
[46,59,48,44,55,43,52,45,49,53,50,0,45,49],
[50,64,62,48,62,47,49,45,58,57,61,56,0,56],
[43,51,52,46,51,49,45,46,47,58,56,52,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 41, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,44,45,47,52,50,49,58,47,49,57,44,42],
[51,0,48,47,50,53,53,55,64,51,62,58,46,44],
[57,53,0,52,49,63,59,49,57,51,59,56,55,55],
[56,54,49,0,49,59,58,50,56,53,54,54,48,50],
[54,51,52,52,0,59,58,51,59,50,60,59,49,50],
[49,48,38,42,42,0,45,46,50,42,49,53,42,35],
[51,48,42,43,43,56,0,40,51,47,46,50,45,43],
[52,46,52,51,50,55,61,0,53,52,51,54,45,48],
[43,37,44,45,42,51,50,48,0,45,46,43,46,45],
[54,50,50,48,51,59,54,49,56,0,51,52,47,42],
[52,39,42,47,41,52,55,50,55,50,0,50,49,51],
[44,43,45,47,42,48,51,47,58,49,51,0,44,37],
[57,55,46,53,52,59,56,56,55,54,52,57,0,47],
[59,57,46,51,51,66,58,53,56,59,50,64,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 42, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,49,51,63,41,50,43,64,67,56,51,57,64],
[54,0,58,64,52,50,57,52,59,68,60,47,58,65],
[52,43,0,48,59,37,45,44,50,65,56,45,54,63],
[50,37,53,0,52,50,49,44,47,54,64,60,60,61],
[38,49,42,49,0,44,42,45,46,61,54,50,65,63],
[60,51,64,51,57,0,56,52,65,74,65,49,55,58],
[51,44,56,52,59,45,0,44,57,69,58,64,61,56],
[58,49,57,57,56,49,57,0,58,66,65,66,57,71],
[37,42,51,54,55,36,44,43,0,57,47,55,55,62],
[34,33,36,47,40,27,32,35,44,0,46,36,45,50],
[45,41,45,37,47,36,43,36,54,55,0,45,61,52],
[50,54,56,41,51,52,37,35,46,65,56,0,52,49],
[44,43,47,41,36,46,40,44,46,56,40,49,0,51],
[37,36,38,40,38,43,45,30,39,51,49,52,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 43, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,38,40,34,38,46,33,45,32,46,32,50,36],
[63,0,48,51,52,47,58,46,55,48,49,43,58,49],
[63,53,0,49,56,58,58,48,52,51,51,42,61,62],
[61,50,52,0,53,49,56,44,56,41,47,47,61,50],
[67,49,45,48,0,50,47,49,53,48,48,39,52,47],
[63,54,43,52,51,0,62,38,51,50,51,44,59,59],
[55,43,43,45,54,39,0,50,59,41,53,47,53,56],
[68,55,53,57,52,63,51,0,56,47,47,46,62,54],
[56,46,49,45,48,50,42,45,0,42,48,36,45,46],
[69,53,50,60,53,51,60,54,59,0,49,46,62,56],
[55,52,50,54,53,50,48,54,53,52,0,51,57,59],
[69,58,59,54,62,57,54,55,65,55,50,0,63,56],
[51,43,40,40,49,42,48,39,56,39,44,38,0,47],
[65,52,39,51,54,42,45,47,55,45,42,45,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 44, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,44,72,63,86,55,71,70,73,70,64,55,92],
[42,0,26,42,42,51,39,48,29,62,26,45,34,83],
[57,75,0,55,47,63,66,71,51,58,52,49,64,81],
[29,59,46,0,36,64,64,53,48,52,53,46,47,71],
[38,59,54,65,0,74,63,57,80,58,52,64,35,79],
[15,50,38,37,27,0,37,38,39,31,39,59,29,94],
[46,62,35,37,38,64,0,27,51,54,42,49,46,77],
[30,53,30,48,44,63,74,0,33,66,35,61,57,82],
[31,72,50,53,21,62,50,68,0,68,57,33,31,67],
[28,39,43,49,43,70,47,35,33,0,28,47,39,93],
[31,75,49,48,49,62,59,66,44,73,0,62,40,79],
[37,56,52,55,37,42,52,40,68,54,39,0,49,73],
[46,67,37,54,66,72,55,44,70,62,61,52,0,79],
[9,18,20,30,22,7,24,19,34,8,22,28,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 45, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,54,42,48,49,46,55,45,49,49,43,48,51],
[44,0,46,45,44,50,43,52,46,55,49,39,44,55],
[47,55,0,47,50,51,45,57,51,52,47,49,40,51],
[59,56,54,0,55,60,48,58,44,56,49,52,48,65],
[53,57,51,46,0,53,44,48,44,57,56,42,44,50],
[52,51,50,41,48,0,40,48,45,52,47,42,40,56],
[55,58,56,53,57,61,0,61,49,57,54,57,52,65],
[46,49,44,43,53,53,40,0,44,51,44,46,47,59],
[56,55,50,57,57,56,52,57,0,56,56,50,48,56],
[52,46,49,45,44,49,44,50,45,0,41,52,49,59],
[52,52,54,52,45,54,47,57,45,60,0,53,50,59],
[58,62,52,49,59,59,44,55,51,49,48,0,48,57],
[53,57,61,53,57,61,49,54,53,52,51,53,0,58],
[50,46,50,36,51,45,36,42,45,42,42,44,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 46, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,50,49,40,36,53,45,37,44,49,46,45,41],
[54,0,53,51,40,41,52,45,39,41,48,35,46,47],
[51,48,0,50,37,45,56,43,39,45,44,43,37,37],
[52,50,51,0,45,38,50,44,44,50,40,44,48,41],
[61,61,64,56,0,52,64,57,46,51,54,52,47,49],
[65,60,56,63,49,0,54,45,52,64,47,54,47,48],
[48,49,45,51,37,47,0,38,42,44,46,42,45,43],
[56,56,58,57,44,56,63,0,56,59,50,56,48,56],
[64,62,62,57,55,49,59,45,0,49,52,55,56,41],
[57,60,56,51,50,37,57,42,52,0,49,50,51,47],
[52,53,57,61,47,54,55,51,49,52,0,50,56,54],
[55,66,58,57,49,47,59,45,46,51,51,0,48,50],
[56,55,64,53,54,54,56,53,45,50,45,53,0,49],
[60,54,64,60,52,53,58,45,60,54,47,51,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 47, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,44,39,40,24,33,36,22,51,33,34,44,16],
[77,0,57,52,65,56,58,48,47,59,57,49,50,56],
[57,44,0,51,58,37,38,46,47,57,53,46,42,47],
[62,49,50,0,49,36,42,53,53,52,48,42,56,54],
[61,36,43,52,0,36,36,32,33,45,47,40,44,41],
[77,45,64,65,65,0,59,60,50,68,64,61,51,56],
[68,43,63,59,65,42,0,49,36,69,52,62,51,35],
[65,53,55,48,69,41,52,0,52,57,46,48,49,50],
[79,54,54,48,68,51,65,49,0,61,62,68,43,50],
[50,42,44,49,56,33,32,44,40,0,50,47,34,45],
[68,44,48,53,54,37,49,55,39,51,0,58,51,53],
[67,52,55,59,61,40,39,53,33,54,43,0,50,50],
[57,51,59,45,57,50,50,52,58,67,50,51,0,52],
[85,45,54,47,60,45,66,51,51,56,48,51,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 48, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,57,53,44,59,57,45,44,54,51,44,49,61],
[52,0,50,48,49,47,50,48,43,55,57,54,56,59],
[44,51,0,48,58,46,55,41,48,43,38,47,44,57],
[48,53,53,0,54,58,47,45,54,42,54,64,48,60],
[57,52,43,47,0,47,45,39,39,44,45,60,59,48],
[42,54,55,43,54,0,50,42,49,49,45,57,51,65],
[44,51,46,54,56,51,0,49,48,45,41,54,46,52],
[56,53,60,56,62,59,52,0,47,43,48,62,60,59],
[57,58,53,47,62,52,53,54,0,52,51,68,56,60],
[47,46,58,59,57,52,56,58,49,0,57,55,49,66],
[50,44,63,47,56,56,60,53,50,44,0,60,60,62],
[57,47,54,37,41,44,47,39,33,46,41,0,50,49],
[52,45,57,53,42,50,55,41,45,52,41,51,0,59],
[40,42,44,41,53,36,49,42,41,35,39,52,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 49, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,59,51,50,54,62,47,49,50,63,50,53,50],
[49,0,58,46,57,52,57,45,56,57,57,38,41,49],
[42,43,0,48,46,50,54,41,57,43,59,47,41,51],
[50,55,53,0,52,58,49,54,48,48,66,42,41,64],
[51,44,55,49,0,48,54,44,51,49,51,44,47,48],
[47,49,51,43,53,0,51,33,51,47,63,41,43,54],
[39,44,47,52,47,50,0,36,47,47,59,39,36,51],
[54,56,60,47,57,68,65,0,63,54,66,59,55,60],
[52,45,44,53,50,50,54,38,0,54,61,40,35,50],
[51,44,58,53,52,54,54,47,47,0,60,47,42,52],
[38,44,42,35,50,38,42,35,40,41,0,31,45,45],
[51,63,54,59,57,60,62,42,61,54,70,0,47,63],
[48,60,60,60,54,58,65,46,66,59,56,54,0,57],
[51,52,50,37,53,47,50,41,51,49,56,38,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 50, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,41,60,55,57,48,54,55,53,56,40,54,37],
[50,0,53,68,47,48,44,54,44,38,52,52,41,46],
[60,48,0,60,47,50,43,53,48,47,50,66,43,39],
[41,33,41,0,29,47,41,30,30,31,37,36,34,26],
[46,54,54,72,0,56,55,51,38,51,36,50,46,28],
[44,53,51,54,45,0,53,45,36,42,47,39,46,37],
[53,57,58,60,46,48,0,52,45,47,47,55,41,54],
[47,47,48,71,50,56,49,0,33,54,59,48,46,46],
[46,57,53,71,63,65,56,68,0,62,58,58,65,46],
[48,63,54,70,50,59,54,47,39,0,56,49,42,54],
[45,49,51,64,65,54,54,42,43,45,0,54,34,43],
[61,49,35,65,51,62,46,53,43,52,47,0,40,46],
[47,60,58,67,55,55,60,55,36,59,67,61,0,49],
[64,55,62,75,73,64,47,55,55,47,58,55,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 51, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,57,68,45,63,49,62,61,64,61,60,58,69],
[47,0,48,38,52,48,49,55,52,60,58,42,57,51],
[44,53,0,41,49,60,57,59,59,59,65,52,60,73],
[33,63,60,0,44,57,40,64,56,62,58,57,58,65],
[56,49,52,57,0,48,50,53,51,66,75,42,58,56],
[38,53,41,44,53,0,40,52,46,68,64,46,58,46],
[52,52,44,61,51,61,0,65,56,61,64,48,52,70],
[39,46,42,37,48,49,36,0,40,66,51,36,54,59],
[40,49,42,45,50,55,45,61,0,62,68,63,44,44],
[37,41,42,39,35,33,40,35,39,0,45,27,47,53],
[40,43,36,43,26,37,37,50,33,56,0,32,40,52],
[41,59,49,44,59,55,53,65,38,74,69,0,54,59],
[43,44,41,43,43,43,49,47,57,54,61,47,0,65],
[32,50,28,36,45,55,31,42,57,48,49,42,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 52, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,56,60,53,52,44,47,57,61,58,51,54,61],
[50,0,45,51,48,38,45,44,58,53,54,45,51,56],
[45,56,0,52,55,47,45,46,60,59,60,46,49,56],
[41,50,49,0,37,48,46,50,54,49,48,45,43,52],
[48,53,46,64,0,48,46,50,57,67,41,46,54,51],
[49,63,54,53,53,0,56,52,63,49,52,53,54,52],
[57,56,56,55,55,45,0,53,69,57,59,54,51,62],
[54,57,55,51,51,49,48,0,62,58,56,45,61,49],
[44,43,41,47,44,38,32,39,0,50,42,36,45,42],
[40,48,42,52,34,52,44,43,51,0,50,43,41,46],
[43,47,41,53,60,49,42,45,59,51,0,45,44,45],
[50,56,55,56,55,48,47,56,65,58,56,0,56,64],
[47,50,52,58,47,47,50,40,56,60,57,45,0,52],
[40,45,45,49,50,49,39,52,59,55,56,37,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 53, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,41,52,81,58,60,72,55,61,66,61,72,80],
[47,0,57,39,59,26,48,63,53,52,45,59,50,69],
[60,44,0,49,71,50,72,60,61,83,67,62,60,64],
[49,62,52,0,65,70,57,71,62,75,52,82,65,80],
[20,42,30,36,0,48,42,49,33,68,43,55,49,65],
[43,75,51,31,53,0,63,72,54,53,37,77,55,63],
[41,53,29,44,59,38,0,43,41,46,34,53,59,59],
[29,38,41,30,52,29,58,0,40,56,27,41,29,50],
[46,48,40,39,68,47,60,61,0,79,64,55,57,67],
[40,49,18,26,33,48,55,45,22,0,43,46,35,46],
[35,56,34,49,58,64,67,74,37,58,0,58,58,69],
[40,42,39,19,46,24,48,60,46,55,43,0,49,69],
[29,51,41,36,52,46,42,72,44,66,43,52,0,74],
[21,32,37,21,36,38,42,51,34,55,32,32,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 54, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,57,53,56,45,54,50,53,53,54,53,53,59],
[52,0,55,56,61,51,54,60,53,57,49,57,60,60],
[44,46,0,44,51,46,46,49,49,43,46,50,50,49],
[48,45,57,0,61,48,48,50,52,49,47,54,52,54],
[45,40,50,40,0,42,42,45,43,46,49,58,56,49],
[56,50,55,53,59,0,54,56,52,48,55,61,55,60],
[47,47,55,53,59,47,0,49,47,46,54,60,54,57],
[51,41,52,51,56,45,52,0,46,55,50,57,53,52],
[48,48,52,49,58,49,54,55,0,51,50,52,56,55],
[48,44,58,52,55,53,55,46,50,0,49,54,61,57],
[47,52,55,54,52,46,47,51,51,52,0,49,51,51],
[48,44,51,47,43,40,41,44,49,47,52,0,50,44],
[48,41,51,49,45,46,47,48,45,40,50,51,0,49],
[42,41,52,47,52,41,44,49,46,44,50,57,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 55, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,52,70,39,65,65,65,80,47,73,58,53,77],
[45,0,42,42,58,59,36,49,59,38,45,47,45,69],
[49,59,0,63,58,74,52,66,64,53,51,56,50,75],
[31,59,38,0,55,39,39,46,55,57,41,46,57,63],
[62,43,43,46,0,50,47,51,65,45,58,47,43,58],
[36,42,27,62,51,0,62,40,68,50,52,31,59,76],
[36,65,49,62,54,39,0,45,68,50,39,40,41,68],
[36,52,35,55,50,61,56,0,77,41,59,43,50,75],
[21,42,37,46,36,33,33,24,0,32,46,33,42,57],
[54,63,48,44,56,51,51,60,69,0,54,44,54,63],
[28,56,50,60,43,49,62,42,55,47,0,44,41,54],
[43,54,45,55,54,70,61,58,68,57,57,0,54,73],
[48,56,51,44,58,42,60,51,59,47,60,47,0,67],
[24,32,26,38,43,25,33,26,44,38,47,28,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 56, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,61,46,51,55,56,53,58,44,42,64,54,43],
[51,0,46,42,48,45,42,54,50,38,45,55,50,47],
[40,55,0,39,57,46,43,43,44,44,43,51,45,43],
[55,59,62,0,61,54,57,61,64,56,48,64,54,49],
[50,53,44,40,0,51,47,46,46,37,40,53,42,39],
[46,56,55,47,50,0,51,56,43,46,40,58,48,53],
[45,59,58,44,54,50,0,43,48,40,42,55,51,48],
[48,47,58,40,55,45,58,0,44,47,47,62,48,54],
[43,51,57,37,55,58,53,57,0,45,48,61,44,48],
[57,63,57,45,64,55,61,54,56,0,51,68,58,56],
[59,56,58,53,61,61,59,54,53,50,0,64,55,59],
[37,46,50,37,48,43,46,39,40,33,37,0,49,46],
[47,51,56,47,59,53,50,53,57,43,46,52,0,52],
[58,54,58,52,62,48,53,47,53,45,42,55,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 57, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,58,56,49,45,55,64,47,51,49,72,50,61],
[52,0,54,62,55,58,54,73,51,55,55,61,42,61],
[43,47,0,45,62,50,54,65,36,51,47,61,41,56],
[45,39,56,0,55,49,56,60,53,47,47,60,43,46],
[52,46,39,46,0,42,54,50,43,52,50,55,44,46],
[56,43,51,52,59,0,52,63,50,49,49,63,45,56],
[46,47,47,45,47,49,0,60,43,48,42,63,45,49],
[37,28,36,41,51,38,41,0,31,33,34,49,26,37],
[54,50,65,48,58,51,58,70,0,55,45,72,39,61],
[50,46,50,54,49,52,53,68,46,0,55,66,51,45],
[52,46,54,54,51,52,59,67,56,46,0,68,38,55],
[29,40,40,41,46,38,38,52,29,35,33,0,32,46],
[51,59,60,58,57,56,56,75,62,50,63,69,0,59],
[40,40,45,55,55,45,52,64,40,56,46,55,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 58, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,47,45,55,55,49,31,48,58,46,47,38,39],
[53,0,43,48,51,50,46,37,45,51,48,45,48,32],
[54,58,0,42,56,56,58,44,46,55,58,47,55,37],
[56,53,59,0,61,52,52,40,57,53,48,61,61,42],
[46,50,45,40,0,41,53,38,46,35,48,40,42,40],
[46,51,45,49,60,0,50,39,45,52,50,44,45,41],
[52,55,43,49,48,51,0,40,50,54,52,47,45,40],
[70,64,57,61,63,62,61,0,54,61,62,52,53,46],
[53,56,55,44,55,56,51,47,0,53,57,55,52,41],
[43,50,46,48,66,49,47,40,48,0,60,48,54,38],
[55,53,43,53,53,51,49,39,44,41,0,44,46,42],
[54,56,54,40,61,57,54,49,46,53,57,0,47,51],
[63,53,46,40,59,56,56,48,49,47,55,54,0,43],
[62,69,64,59,61,60,61,55,60,63,59,50,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 59, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,43,50,64,42,44,50,49,48,53,45,36,50],
[42,0,47,42,52,44,46,36,50,41,49,42,37,46],
[58,54,0,57,59,52,46,46,52,50,59,52,51,51],
[51,59,44,0,60,54,51,48,59,45,58,44,47,57],
[37,49,42,41,0,41,40,36,43,43,39,34,38,40],
[59,57,49,47,60,0,51,52,54,52,66,48,49,55],
[57,55,55,50,61,50,0,51,64,53,58,49,45,51],
[51,65,55,53,65,49,50,0,57,52,56,52,48,57],
[52,51,49,42,58,47,37,44,0,49,50,43,42,53],
[53,60,51,56,58,49,48,49,52,0,54,49,41,55],
[48,52,42,43,62,35,43,45,51,47,0,41,38,48],
[56,59,49,57,67,53,52,49,58,52,60,0,51,57],
[65,64,50,54,63,52,56,53,59,60,63,50,0,58],
[51,55,50,44,61,46,50,44,48,46,53,44,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 60, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,59,50,67,70,75,59,85,50,55,47,73,68],
[48,0,48,39,80,36,31,48,74,68,62,60,48,54],
[42,53,0,28,67,65,48,27,58,57,42,54,60,48],
[51,62,73,0,67,74,54,55,49,51,49,51,42,60],
[34,21,34,34,0,39,34,52,57,57,34,34,34,57],
[31,65,36,27,62,0,57,30,71,42,62,54,69,57],
[26,70,53,47,67,44,0,47,52,67,52,29,47,56],
[42,53,74,46,49,71,54,0,67,51,69,54,66,66],
[16,27,43,52,44,30,49,34,0,34,34,31,49,49],
[51,33,44,50,44,59,34,50,67,0,44,46,69,57],
[46,39,59,52,67,39,49,32,67,57,0,49,61,72],
[54,41,47,50,67,47,72,47,70,55,52,0,77,65],
[28,53,41,59,67,32,54,35,52,32,40,24,0,41],
[33,47,53,41,44,44,45,35,52,44,29,36,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 61, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,55,55,55,55,31,55,55,55,24,31,31,55],
[46,0,0,77,24,46,0,55,77,0,24,31,0,55],
[46,101,0,101,55,101,31,55,101,55,24,31,31,55],
[46,24,0,0,24,46,0,24,24,0,24,31,0,55],
[46,77,46,77,0,77,77,31,77,31,0,77,31,31],
[46,55,0,55,24,0,0,55,55,31,24,31,31,55],
[70,101,70,101,24,101,0,55,101,55,24,77,55,55],
[46,46,46,77,70,46,46,0,46,0,24,77,0,55],
[46,24,0,77,24,46,0,55,0,0,24,31,0,55],
[46,101,46,101,70,70,46,101,101,0,70,77,0,101],
[77,77,77,77,101,77,77,77,77,31,0,77,31,77],
[70,70,70,70,24,70,24,24,70,24,24,0,24,24],
[70,101,70,101,70,70,46,101,101,101,70,77,0,101],
[46,46,46,46,70,46,46,46,46,0,24,77,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 62, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,35,83,58,76,59,41,60,83,66,70,59,49],
[34,0,32,31,56,49,32,32,32,29,47,49,32,59],
[66,69,0,66,60,48,65,66,60,69,68,79,66,85],
[18,70,35,0,51,70,53,35,53,37,61,70,53,59],
[43,45,41,50,0,58,41,41,35,43,50,54,41,49],
[25,52,53,31,43,0,71,35,44,68,84,70,55,50],
[42,69,36,48,60,30,0,65,59,69,85,61,77,51],
[60,69,35,66,60,66,36,0,62,85,101,88,53,51],
[41,69,41,48,66,57,42,39,0,66,85,72,59,51],
[18,72,32,64,58,33,32,16,35,0,84,70,34,59],
[35,54,33,40,51,17,16,0,16,17,0,17,35,43],
[31,52,22,31,47,31,40,13,29,31,84,0,31,32],
[42,69,35,48,60,46,24,48,42,67,66,70,0,51],
[52,42,16,42,52,51,50,50,50,42,58,69,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 63, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,61,84,65,61,63,47,52,61,83,52,57,57],
[22,0,68,87,50,36,30,31,41,53,84,41,63,13],
[40,33,0,69,67,21,21,41,62,57,69,65,49,26],
[17,14,32,0,64,21,21,26,45,57,74,46,58,8],
[36,51,34,37,0,39,26,42,43,44,78,42,26,8],
[40,65,80,80,62,0,59,61,53,50,93,65,73,45],
[38,71,80,80,75,42,0,47,62,56,98,66,81,29],
[54,70,60,75,59,40,54,0,72,72,74,56,68,36],
[49,60,39,56,58,48,39,29,0,25,97,51,26,35],
[40,48,44,44,57,51,45,29,76,0,99,70,37,31],
[18,17,32,27,23,8,3,27,4,2,0,28,21,4],
[49,60,36,55,59,36,35,45,50,31,73,0,35,36],
[44,38,52,43,75,28,20,33,75,64,80,66,0,35],
[44,88,75,93,93,56,72,65,66,70,97,65,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 64, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,56,60,53,40,47,62,56,54,55,61,62,65],
[43,0,50,35,48,37,43,52,46,37,50,50,60,48],
[45,51,0,42,43,39,51,44,42,47,44,44,44,39],
[41,66,59,0,49,42,48,59,48,57,59,50,53,57],
[48,53,58,52,0,45,51,45,51,52,62,55,56,47],
[61,64,62,59,56,0,61,63,48,57,65,65,56,64],
[54,58,50,53,50,40,0,49,53,47,64,58,61,56],
[39,49,57,42,56,38,52,0,40,44,55,47,56,44],
[45,55,59,53,50,53,48,61,0,49,65,53,67,55],
[47,64,54,44,49,44,54,57,52,0,57,58,59,37],
[46,51,57,42,39,36,37,46,36,44,0,52,42,46],
[40,51,57,51,46,36,43,54,48,43,49,0,57,54],
[39,41,57,48,45,45,40,45,34,42,59,44,0,46],
[36,53,62,44,54,37,45,57,46,64,55,47,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 65, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,54,61,48,63,57,53,56,67,64,60,53,61],
[50,0,56,45,53,54,57,54,49,49,52,54,56,52],
[47,45,0,56,54,51,51,49,54,50,50,54,45,55],
[40,56,45,0,56,48,51,46,58,55,52,50,45,52],
[53,48,47,45,0,54,53,51,53,56,53,52,44,56],
[38,47,50,53,47,0,55,50,48,57,51,47,43,51],
[44,44,50,50,48,46,0,56,50,53,53,49,45,53],
[48,47,52,55,50,51,45,0,48,59,51,56,46,52],
[45,52,47,43,48,53,51,53,0,54,52,51,46,59],
[34,52,51,46,45,44,48,42,47,0,59,43,41,52],
[37,49,51,49,48,50,48,50,49,42,0,48,44,49],
[41,47,47,51,49,54,52,45,50,58,53,0,48,49],
[48,45,56,56,57,58,56,55,55,60,57,53,0,50],
[40,49,46,49,45,50,48,49,42,49,52,52,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 66, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,52,55,37,60,80,46,52,45,65,61,55,48],
[43,0,64,61,34,56,60,40,41,49,63,47,52,54],
[49,37,0,47,50,54,71,25,40,42,56,64,52,48],
[46,40,54,0,44,54,82,39,46,40,48,54,53,51],
[64,67,51,57,0,65,72,44,72,46,68,69,48,73],
[41,45,47,47,36,0,75,40,52,30,46,49,45,43],
[21,41,30,19,29,26,0,25,44,12,29,57,47,33],
[55,61,76,62,57,61,76,0,50,63,71,80,57,67],
[49,60,61,55,29,49,57,51,0,44,44,50,64,50],
[56,52,59,61,55,71,89,38,57,0,54,65,63,46],
[36,38,45,53,33,55,72,30,57,47,0,44,55,42],
[40,54,37,47,32,52,44,21,51,36,57,0,46,62],
[46,49,49,48,53,56,54,44,37,38,46,55,0,57],
[53,47,53,50,28,58,68,34,51,55,59,39,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 67, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,40,51,49,51,52,50,45,50,48,52,49,47],
[53,0,49,64,56,57,60,59,45,60,58,56,52,49],
[61,52,0,62,60,48,64,59,48,53,53,57,57,52],
[50,37,39,0,45,47,52,52,47,57,49,53,50,36],
[52,45,41,56,0,49,49,55,45,55,44,56,47,46],
[50,44,53,54,52,0,44,54,46,57,46,51,48,44],
[49,41,37,49,52,57,0,51,49,57,43,43,47,45],
[51,42,42,49,46,47,50,0,47,48,45,46,48,37],
[56,56,53,54,56,55,52,54,0,58,50,50,57,46],
[51,41,48,44,46,44,44,53,43,0,43,50,54,41],
[53,43,48,52,57,55,58,56,51,58,0,57,50,49],
[49,45,44,48,45,50,58,55,51,51,44,0,53,41],
[52,49,44,51,54,53,54,53,44,47,51,48,0,39],
[54,52,49,65,55,57,56,64,55,60,52,60,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 68, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,46,56,48,51,50,51,45,73,53,52,40,61],
[42,0,41,47,54,58,39,47,33,63,46,41,42,55],
[55,60,0,63,51,57,52,55,54,64,63,61,49,59],
[45,54,38,0,52,43,47,41,44,62,53,46,48,50],
[53,47,50,49,0,40,57,51,45,63,53,46,51,36],
[50,43,44,58,61,0,54,50,53,65,52,51,51,60],
[51,62,49,54,44,47,0,58,51,64,63,50,44,53],
[50,54,46,60,50,51,43,0,53,62,58,48,49,64],
[56,68,47,57,56,48,50,48,0,62,53,48,53,58],
[28,38,37,39,38,36,37,39,39,0,46,42,34,36],
[48,55,38,48,48,49,38,43,48,55,0,49,34,49],
[49,60,40,55,55,50,51,53,53,59,52,0,45,58],
[61,59,52,53,50,50,57,52,48,67,67,56,0,63],
[40,46,42,51,65,41,48,37,43,65,52,43,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 69, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,52,55,49,56,59,60,51,60,63,53,56,56],
[50,0,52,55,49,57,60,61,58,49,53,55,54,54],
[49,49,0,42,55,56,64,57,58,52,59,49,55,57],
[46,46,59,0,50,59,54,62,58,53,55,52,60,53],
[52,52,46,51,0,54,55,55,49,47,55,55,51,56],
[45,44,45,42,47,0,46,51,45,41,55,46,50,49],
[42,41,37,47,46,55,0,50,40,40,48,44,52,43],
[41,40,44,39,46,50,51,0,43,47,49,45,45,46],
[50,43,43,43,52,56,61,58,0,43,52,45,52,49],
[41,52,49,48,54,60,61,54,58,0,60,57,49,60],
[38,48,42,46,46,46,53,52,49,41,0,49,49,46],
[48,46,52,49,46,55,57,56,56,44,52,0,57,50],
[45,47,46,41,50,51,49,56,49,52,52,44,0,54],
[45,47,44,48,45,52,58,55,52,41,55,51,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 70, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,65,55,51,53,53,54,48,43,42,49,51,58],
[53,0,52,46,47,53,50,54,44,45,46,46,50,53],
[36,49,0,47,42,51,45,38,49,44,36,48,48,54],
[46,55,54,0,48,55,53,44,51,47,50,42,54,54],
[50,54,59,53,0,59,48,52,52,51,49,51,52,52],
[48,48,50,46,42,0,49,49,49,49,44,43,53,45],
[48,51,56,48,53,52,0,46,54,50,50,44,47,47],
[47,47,63,57,49,52,55,0,54,56,52,54,59,55],
[53,57,52,50,49,52,47,47,0,54,40,44,53,53],
[58,56,57,54,50,52,51,45,47,0,47,45,53,53],
[59,55,65,51,52,57,51,49,61,54,0,53,58,56],
[52,55,53,59,50,58,57,47,57,56,48,0,59,53],
[50,51,53,47,49,48,54,42,48,48,43,42,0,44],
[43,48,47,47,49,56,54,46,48,48,45,48,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 71, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,45,50,48,60,50,39,50,51,51,48,57,43],
[60,0,54,49,54,57,52,52,55,52,55,51,53,58],
[56,47,0,50,45,59,43,35,50,47,46,45,44,52],
[51,52,51,0,51,55,47,49,43,42,58,40,56,47],
[53,47,56,50,0,60,42,47,52,38,58,51,49,44],
[41,44,42,46,41,0,41,41,43,43,47,46,44,34],
[51,49,58,54,59,60,0,43,54,46,57,51,57,44],
[62,49,66,52,54,60,58,0,57,57,54,51,56,60],
[51,46,51,58,49,58,47,44,0,49,52,53,57,47],
[50,49,54,59,63,58,55,44,52,0,58,52,52,44],
[50,46,55,43,43,54,44,47,49,43,0,45,54,50],
[53,50,56,61,50,55,50,50,48,49,56,0,60,49],
[44,48,57,45,52,57,44,45,44,49,47,41,0,42],
[58,43,49,54,57,67,57,41,54,57,51,52,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 72, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,53,48,48,50,52,51,49,47,42,39,51,51],
[42,0,53,53,42,49,51,51,44,47,42,46,45,44],
[48,48,0,49,50,48,54,52,44,44,45,44,50,48],
[53,48,52,0,59,52,53,58,53,45,47,52,55,48],
[53,59,51,42,0,52,52,51,53,48,55,46,48,45],
[51,52,53,49,49,0,53,54,46,41,52,40,51,52],
[49,50,47,48,49,48,0,50,41,40,49,41,42,52],
[50,50,49,43,50,47,51,0,45,39,49,46,50,46],
[52,57,57,48,48,55,60,56,0,46,45,50,53,51],
[54,54,57,56,53,60,61,62,55,0,57,46,53,51],
[59,59,56,54,46,49,52,52,56,44,0,45,56,50],
[62,55,57,49,55,61,60,55,51,55,56,0,55,55],
[50,56,51,46,53,50,59,51,48,48,45,46,0,48],
[50,57,53,53,56,49,49,55,50,50,51,46,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 73, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,57,59,52,51,55,50,54,43,52,55,56,62],
[40,0,55,51,48,46,48,45,43,36,57,44,47,57],
[44,46,0,53,46,43,61,49,52,38,52,41,57,57],
[42,50,48,0,51,46,52,53,53,49,55,42,57,55],
[49,53,55,50,0,41,46,56,55,55,62,43,53,54],
[50,55,58,55,60,0,48,53,46,56,69,45,49,55],
[46,53,40,49,55,53,0,47,40,47,48,36,36,58],
[51,56,52,48,45,48,54,0,51,51,58,38,49,55],
[47,58,49,48,46,55,61,50,0,45,60,35,53,54],
[58,65,63,52,46,45,54,50,56,0,64,51,58,62],
[49,44,49,46,39,32,53,43,41,37,0,46,56,46],
[46,57,60,59,58,56,65,63,66,50,55,0,60,65],
[45,54,44,44,48,52,65,52,48,43,45,41,0,54],
[39,44,44,46,47,46,43,46,47,39,55,36,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 74, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,55,55,43,55,48,60,48,56,46,52,56,55],
[45,0,42,55,40,48,49,54,45,54,41,47,48,50],
[46,59,0,52,55,56,55,60,51,58,54,54,52,57],
[46,46,49,0,43,53,50,52,45,55,43,45,48,49],
[58,61,46,58,0,60,57,60,49,56,43,56,52,54],
[46,53,45,48,41,0,47,60,54,56,41,55,48,48],
[53,52,46,51,44,54,0,59,48,55,48,53,49,56],
[41,47,41,49,41,41,42,0,42,55,44,44,48,48],
[53,56,50,56,52,47,53,59,0,60,50,62,61,59],
[45,47,43,46,45,45,46,46,41,0,43,55,50,47],
[55,60,47,58,58,60,53,57,51,58,0,52,51,55],
[49,54,47,56,45,46,48,57,39,46,49,0,54,52],
[45,53,49,53,49,53,52,53,40,51,50,47,0,52],
[46,51,44,52,47,53,45,53,42,54,46,49,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 75, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,44,45,45,72,57,65,68,48,71,67,57,45],
[48,0,35,48,51,62,45,48,51,49,47,74,55,50],
[57,66,0,59,50,66,50,76,50,41,58,75,44,42],
[56,53,42,0,46,55,53,55,62,47,72,58,48,51],
[56,50,51,55,0,54,41,56,74,48,65,49,52,46],
[29,39,35,46,47,0,38,58,31,24,31,59,14,22],
[44,56,51,48,60,63,0,72,73,56,67,65,51,44],
[36,53,25,46,45,43,29,0,59,38,47,58,40,41],
[33,50,51,39,27,70,28,42,0,32,44,46,47,21],
[53,52,60,54,53,77,45,63,69,0,57,80,69,38],
[30,54,43,29,36,70,34,54,57,44,0,64,53,38],
[34,27,26,43,52,42,36,43,55,21,37,0,28,20],
[44,46,57,53,49,87,50,61,54,32,48,73,0,37],
[56,51,59,50,55,79,57,60,80,63,63,81,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 76, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,47,48,46,49,48,47,50,51,50,50,55,47],
[51,0,49,49,46,51,52,54,48,43,48,49,54,48],
[54,52,0,50,51,50,55,47,47,52,49,50,55,51],
[53,52,51,0,47,48,56,52,45,49,56,50,52,45],
[55,55,50,54,0,49,54,52,53,50,48,50,52,54],
[52,50,51,53,52,0,53,56,52,55,57,49,52,47],
[53,49,46,45,47,48,0,51,46,46,45,45,48,42],
[54,47,54,49,49,45,50,0,51,53,54,52,50,51],
[51,53,54,56,48,49,55,50,0,54,52,52,53,50],
[50,58,49,52,51,46,55,48,47,0,53,52,55,46],
[51,53,52,45,53,44,56,47,49,48,0,46,53,41],
[51,52,51,51,51,52,56,49,49,49,55,0,54,53],
[46,47,46,49,49,49,53,51,48,46,48,47,0,46],
[54,53,50,56,47,54,59,50,51,55,60,48,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 77, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,53,53,64,60,50,55,52,65,59,65,60,55],
[42,0,31,23,38,29,30,22,30,49,35,34,42,42],
[48,70,0,42,44,48,48,47,58,43,48,57,47,43],
[48,78,59,0,64,49,56,60,49,57,57,54,56,62],
[37,63,57,37,0,37,39,35,47,49,46,58,59,41],
[41,72,53,52,64,0,50,59,43,59,60,76,73,57],
[51,71,53,45,62,51,0,45,50,63,58,57,58,52],
[46,79,54,41,66,42,56,0,44,49,66,55,67,47],
[49,71,43,52,54,58,51,57,0,47,46,54,54,50],
[36,52,58,44,52,42,38,52,54,0,46,66,44,43],
[42,66,53,44,55,41,43,35,55,55,0,48,73,39],
[36,67,44,47,43,25,44,46,47,35,53,0,51,44],
[41,59,54,45,42,28,43,34,47,57,28,50,0,46],
[46,59,58,39,60,44,49,54,51,58,62,57,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 78, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,49,30,42,45,45,47,48,41,57,44,57,47],
[58,0,61,51,49,47,50,52,48,41,54,45,56,45],
[52,40,0,35,48,56,54,54,50,44,59,51,54,50],
[71,50,66,0,55,55,52,63,62,51,62,51,55,50],
[59,52,53,46,0,49,43,56,47,51,55,51,54,48],
[56,54,45,46,52,0,56,61,51,45,57,55,52,53],
[56,51,47,49,58,45,0,51,53,40,45,47,50,52],
[54,49,47,38,45,40,50,0,50,41,49,44,44,50],
[53,53,51,39,54,50,48,51,0,41,58,47,51,48],
[60,60,57,50,50,56,61,60,60,0,62,59,55,55],
[44,47,42,39,46,44,56,52,43,39,0,53,49,50],
[57,56,50,50,50,46,54,57,54,42,48,0,50,53],
[44,45,47,46,47,49,51,57,50,46,52,51,0,55],
[54,56,51,51,53,48,49,51,53,46,51,48,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 79, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,24,40,44,28,39,36,30,26,34,61,32,42],
[48,0,31,51,45,36,42,49,57,36,32,57,31,40],
[77,70,0,52,57,54,57,61,83,50,61,76,49,62],
[61,50,49,0,33,57,51,39,65,34,26,72,36,44],
[57,56,44,68,0,46,49,43,60,43,33,76,45,49],
[73,65,47,44,55,0,48,57,69,52,47,80,57,63],
[62,59,44,50,52,53,0,54,68,53,44,72,58,53],
[65,52,40,62,58,44,47,0,57,38,33,77,58,60],
[71,44,18,36,41,32,33,44,0,43,28,71,38,32],
[75,65,51,67,58,49,48,63,58,0,53,90,64,59],
[67,69,40,75,68,54,57,68,73,48,0,78,62,58],
[40,44,25,29,25,21,29,24,30,11,23,0,23,24],
[69,70,52,65,56,44,43,43,63,37,39,78,0,44],
[59,61,39,57,52,38,48,41,69,42,43,77,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 80, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,54,43,44,50,44,44,47,48,48,49,48,49],
[47,0,46,49,43,51,44,47,45,41,47,52,47,44],
[47,55,0,39,43,56,45,42,42,50,46,49,44,48],
[58,52,62,0,56,61,52,54,48,49,55,61,51,53],
[57,58,58,45,0,53,51,56,47,52,58,54,43,47],
[51,50,45,40,48,0,45,44,44,43,51,46,48,50],
[57,57,56,49,50,56,0,52,47,44,53,57,52,55],
[57,54,59,47,45,57,49,0,41,45,53,54,42,53],
[54,56,59,53,54,57,54,60,0,47,55,53,49,57],
[53,60,51,52,49,58,57,56,54,0,50,59,54,51],
[53,54,55,46,43,50,48,48,46,51,0,45,42,50],
[52,49,52,40,47,55,44,47,48,42,56,0,45,43],
[53,54,57,50,58,53,49,59,52,47,59,56,0,52],
[52,57,53,48,54,51,46,48,44,50,51,58,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 81, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,51,45,71,41,34,44,33,53,52,52,67,44],
[39,0,43,57,69,52,50,51,43,42,43,31,64,54],
[50,58,0,42,56,56,15,51,47,53,57,45,68,38],
[56,44,59,0,79,54,58,64,54,51,72,56,76,64],
[30,32,45,22,0,36,38,32,24,30,36,20,30,32],
[60,49,45,47,65,0,47,49,42,40,49,47,74,56],
[67,51,86,43,63,54,0,78,60,59,63,56,77,49],
[57,50,50,37,69,52,23,0,43,46,44,43,76,25],
[68,58,54,47,77,59,41,58,0,47,68,36,77,51],
[48,59,48,50,71,61,42,55,54,0,66,45,66,56],
[49,58,44,29,65,52,38,57,33,35,0,32,45,36],
[49,70,56,45,81,54,45,58,65,56,69,0,66,47],
[34,37,33,25,71,27,24,25,24,35,56,35,0,34],
[57,47,63,37,69,45,52,76,50,45,65,54,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 82, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,43,54,45,50,53,51,36,44,41,50,47,45],
[44,0,37,41,42,46,51,48,30,46,35,43,40,38],
[58,64,0,61,56,54,53,59,45,52,53,66,52,60],
[47,60,40,0,45,47,50,54,42,49,45,57,47,46],
[56,59,45,56,0,51,55,63,40,49,54,59,52,46],
[51,55,47,54,50,0,57,48,33,47,45,50,46,38],
[48,50,48,51,46,44,0,51,32,45,40,49,43,39],
[50,53,42,47,38,53,50,0,40,46,46,42,43,42],
[65,71,56,59,61,68,69,61,0,48,59,64,58,55],
[57,55,49,52,52,54,56,55,53,0,53,59,50,49],
[60,66,48,56,47,56,61,55,42,48,0,55,47,47],
[51,58,35,44,42,51,52,59,37,42,46,0,40,44],
[54,61,49,54,49,55,58,58,43,51,54,61,0,57],
[56,63,41,55,55,63,62,59,46,52,54,57,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 83, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,51,42,71,78,56,54,35,44,25,51,48,74],
[48,0,29,44,22,43,29,31,25,30,26,28,39,41],
[50,72,0,73,47,56,44,47,61,62,53,57,63,58],
[59,57,28,0,48,73,62,53,72,39,51,40,38,60],
[30,79,54,53,0,45,37,50,50,52,38,53,60,50],
[23,58,45,28,56,0,29,27,29,27,29,45,25,50],
[45,72,57,39,64,72,0,67,50,56,66,67,53,64],
[47,70,54,48,51,74,34,0,58,42,52,55,47,43],
[66,76,40,29,51,72,51,43,0,36,46,40,33,62],
[57,71,39,62,49,74,45,59,65,0,53,61,58,59],
[76,75,48,50,63,72,35,49,55,48,0,50,47,62],
[50,73,44,61,48,56,34,46,61,40,51,0,47,47],
[53,62,38,63,41,76,48,54,68,43,54,54,0,54],
[27,60,43,41,51,51,37,58,39,42,39,54,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 84, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,52,68,44,46,64,56,55,73,79,60,67,46],
[11,0,25,35,42,29,35,41,31,46,51,22,41,35],
[49,76,0,63,49,46,43,60,57,47,58,33,56,53],
[33,66,38,0,53,30,70,58,56,63,59,60,52,57],
[57,59,52,48,0,62,59,82,32,62,59,46,59,42],
[55,72,55,71,39,0,62,53,44,50,62,50,74,61],
[37,66,58,31,42,39,0,58,30,63,64,32,48,33],
[45,60,41,43,19,48,43,0,31,62,45,30,61,39],
[46,70,44,45,69,57,71,70,0,50,51,61,65,46],
[28,55,54,38,39,51,38,39,51,0,49,40,37,55],
[22,50,43,42,42,39,37,56,50,52,0,32,55,39],
[41,79,68,41,55,51,69,71,40,61,69,0,58,42],
[34,60,45,49,42,27,53,40,36,64,46,43,0,45],
[55,66,48,44,59,40,68,62,55,46,62,59,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 85, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,47,57,52,48,56,44,49,56,47,44,57,58],
[43,0,46,48,53,44,51,52,55,54,44,45,37,53],
[54,55,0,57,52,52,54,56,54,60,61,51,51,48],
[44,53,44,0,46,48,50,48,34,53,53,41,52,50],
[49,48,49,55,0,50,59,42,54,56,52,51,59,56],
[53,57,49,53,51,0,61,52,52,60,54,55,47,52],
[45,50,47,51,42,40,0,49,38,49,36,50,46,41],
[57,49,45,53,59,49,52,0,55,54,50,49,46,59],
[52,46,47,67,47,49,63,46,0,58,38,44,43,36],
[45,47,41,48,45,41,52,47,43,0,46,59,38,55],
[54,57,40,48,49,47,65,51,63,55,0,52,50,56],
[57,56,50,60,50,46,51,52,57,42,49,0,45,54],
[44,64,50,49,42,54,55,55,58,63,51,56,0,52],
[43,48,53,51,45,49,60,42,65,46,45,47,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 86, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,64,62,59,46,49,67,61,67,72,55,42,56],
[47,0,50,47,44,50,54,62,57,48,70,48,49,69],
[37,51,0,36,43,48,36,58,50,46,63,47,49,49],
[39,54,65,0,65,40,54,73,54,48,70,59,51,67],
[42,57,58,36,0,43,47,51,44,53,70,64,40,64],
[55,51,53,61,58,0,58,74,68,67,80,47,33,57],
[52,47,65,47,54,43,0,60,70,61,68,50,40,52],
[34,39,43,28,50,27,41,0,49,51,54,42,25,58],
[40,44,51,47,57,33,31,52,0,59,51,55,26,63],
[34,53,55,53,48,34,40,50,42,0,60,45,35,50],
[29,31,38,31,31,21,33,47,50,41,0,31,33,42],
[46,53,54,42,37,54,51,59,46,56,70,0,36,64],
[59,52,52,50,61,68,61,76,75,66,68,65,0,80],
[45,32,52,34,37,44,49,43,38,51,59,37,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 87, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,52,34,40,48,40,53,45,48,48,51,43,37],
[53,0,54,56,43,56,51,63,55,50,47,56,47,45],
[49,47,0,43,41,53,55,52,55,49,45,53,50,41],
[67,45,58,0,51,59,45,64,59,44,47,51,47,44],
[61,58,60,50,0,59,62,59,58,48,58,56,51,51],
[53,45,48,42,42,0,56,50,52,41,47,49,42,30],
[61,50,46,56,39,45,0,56,54,44,45,46,47,38],
[48,38,49,37,42,51,45,0,45,37,48,35,37,38],
[56,46,46,42,43,49,47,56,0,54,45,43,37,32],
[53,51,52,57,53,60,57,64,47,0,55,53,52,41],
[53,54,56,54,43,54,56,53,56,46,0,54,45,48],
[50,45,48,50,45,52,55,66,58,48,47,0,48,42],
[58,54,51,54,50,59,54,64,64,49,56,53,0,46],
[64,56,60,57,50,71,63,63,69,60,53,59,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 88, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,62,59,45,47,59,45,45,40,33,49,49,63],
[43,0,55,45,38,40,38,41,40,39,34,49,46,46],
[39,46,0,53,41,56,61,44,56,43,27,38,35,41],
[42,56,48,0,48,53,53,57,50,41,39,41,49,60],
[56,63,60,53,0,56,80,50,65,54,37,45,55,51],
[54,61,45,48,45,0,68,49,61,41,21,56,41,46],
[42,63,40,48,21,33,0,36,47,46,27,35,33,40],
[56,60,57,44,51,52,65,0,54,54,31,53,55,49],
[56,61,45,51,36,40,54,47,0,36,37,45,32,42],
[61,62,58,60,47,60,55,47,65,0,55,60,60,71],
[68,67,74,62,64,80,74,70,64,46,0,62,67,59],
[52,52,63,60,56,45,66,48,56,41,39,0,47,51],
[52,55,66,52,46,60,68,46,69,41,34,54,0,49],
[38,55,60,41,50,55,61,52,59,30,42,50,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 89, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,55,61,52,50,55,51,68,65,71,53,62,59],
[37,0,57,52,43,52,46,45,53,51,52,44,54,55],
[46,44,0,44,43,34,56,40,59,49,62,44,59,43],
[40,49,57,0,37,38,49,47,54,52,51,47,56,40],
[49,58,58,64,0,42,52,63,57,62,69,54,62,60],
[51,49,67,63,59,0,64,59,68,61,60,67,65,64],
[46,55,45,52,49,37,0,47,56,54,56,47,56,48],
[50,56,61,54,38,42,54,0,64,53,60,58,60,51],
[33,48,42,47,44,33,45,37,0,45,51,40,44,49],
[36,50,52,49,39,40,47,48,56,0,63,46,54,44],
[30,49,39,50,32,41,45,41,50,38,0,42,54,40],
[48,57,57,54,47,34,54,43,61,55,59,0,54,57],
[39,47,42,45,39,36,45,41,57,47,47,47,0,40],
[42,46,58,61,41,37,53,50,52,57,61,44,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 90, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,58,51,52,53,52,53,65,51,54,54,62,47],
[50,0,48,47,50,58,53,57,55,54,51,44,60,54],
[43,53,0,50,50,47,54,56,54,52,50,38,50,47],
[50,54,51,0,56,50,50,47,58,51,55,45,59,55],
[49,51,51,45,0,52,46,52,55,54,58,39,59,51],
[48,43,54,51,49,0,44,48,55,53,51,44,56,46],
[49,48,47,51,55,57,0,55,58,51,49,49,61,46],
[48,44,45,54,49,53,46,0,56,46,53,42,51,45],
[36,46,47,43,46,46,43,45,0,40,45,36,48,40],
[50,47,49,50,47,48,50,55,61,0,59,47,59,48],
[47,50,51,46,43,50,52,48,56,42,0,45,51,47],
[47,57,63,56,62,57,52,59,65,54,56,0,57,52],
[39,41,51,42,42,45,40,50,53,42,50,44,0,50],
[54,47,54,46,50,55,55,56,61,53,54,49,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 91, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,34,37,57,28,26,29,35,43,40,38,52,26],
[65,0,54,49,54,49,35,58,59,53,33,72,59,50],
[67,47,0,46,57,39,56,47,51,54,37,66,55,48],
[64,52,55,0,62,41,42,32,53,65,62,60,59,45],
[44,47,44,39,0,38,32,27,57,49,43,54,55,42],
[73,52,62,60,63,0,35,69,59,56,52,64,57,41],
[75,66,45,59,69,66,0,61,58,59,49,73,57,43],
[72,43,54,69,74,32,40,0,45,54,52,71,69,48],
[66,42,50,48,44,42,43,56,0,55,42,72,48,54],
[58,48,47,36,52,45,42,47,46,0,51,53,49,27],
[61,68,64,39,58,49,52,49,59,50,0,55,60,57],
[63,29,35,41,47,37,28,30,29,48,46,0,51,46],
[49,42,46,42,46,44,44,32,53,52,41,50,0,48],
[75,51,53,56,59,60,58,53,47,74,44,55,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 92, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,47,60,64,61,76,63,49,40,42,43,85,78],
[47,0,43,70,47,52,80,49,61,38,46,44,63,48],
[54,58,0,46,62,63,77,63,60,50,35,28,72,79],
[41,31,55,0,44,62,70,45,66,51,58,38,53,53],
[37,54,39,57,0,63,58,53,51,50,60,53,69,85],
[40,49,38,39,38,0,49,55,51,52,41,27,64,50],
[25,21,24,31,43,52,0,46,41,32,16,29,43,68],
[38,52,38,56,48,46,55,0,50,54,40,43,51,56],
[52,40,41,35,50,50,60,51,0,32,26,19,54,70],
[61,63,51,50,51,49,69,47,69,0,54,46,46,70],
[59,55,66,43,41,60,85,61,75,47,0,34,63,74],
[58,57,73,63,48,74,72,58,82,55,67,0,73,70],
[16,38,29,48,32,37,58,50,47,55,38,28,0,42],
[23,53,22,48,16,51,33,45,31,31,27,31,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 93, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,50,64,63,59,25,46,53,46,25,48,38,21],
[38,0,58,56,54,56,15,54,26,45,41,42,38,39],
[51,43,0,60,61,75,43,61,48,46,58,75,58,48],
[37,45,41,0,47,75,34,47,35,55,34,35,36,20],
[38,47,40,54,0,63,37,46,26,55,25,55,36,38],
[42,45,26,26,38,0,35,36,51,70,40,35,24,36],
[76,86,58,67,64,66,0,76,79,71,57,64,39,63],
[55,47,40,54,55,65,25,0,52,36,40,54,37,42],
[48,75,53,66,75,50,22,49,0,45,63,62,33,48],
[55,56,55,46,46,31,30,65,56,0,60,55,31,56],
[76,60,43,67,76,61,44,61,38,41,0,85,34,49],
[53,59,26,66,46,66,37,47,39,46,16,0,38,55],
[63,63,43,65,65,77,62,64,68,70,67,63,0,53],
[80,62,53,81,63,65,38,59,53,45,52,46,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 94, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,50,47,49,56,49,48,48,48,46,52,52,49],
[61,0,51,55,61,52,46,58,51,59,60,55,51,56],
[51,50,0,49,51,53,48,52,47,60,54,51,50,54],
[54,46,52,0,48,54,48,50,52,57,54,55,59,52],
[52,40,50,53,0,50,46,47,49,54,51,46,53,54],
[45,49,48,47,51,0,49,52,48,55,51,54,54,48],
[52,55,53,53,55,52,0,53,53,48,51,56,52,54],
[53,43,49,51,54,49,48,0,54,52,50,51,46,46],
[53,50,54,49,52,53,48,47,0,52,50,56,48,47],
[53,42,41,44,47,46,53,49,49,0,48,53,49,46],
[55,41,47,47,50,50,50,51,51,53,0,53,49,50],
[49,46,50,46,55,47,45,50,45,48,48,0,54,49],
[49,50,51,42,48,47,49,55,53,52,52,47,0,44],
[52,45,47,49,47,53,47,55,54,55,51,52,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 95, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,53,57,59,65,45,54,54,46,57,61,65,45],
[38,0,37,50,62,59,49,48,38,52,52,51,58,40],
[48,64,0,51,61,54,53,56,42,50,57,45,57,53],
[44,51,50,0,47,45,57,38,36,40,52,48,54,45],
[42,39,40,54,0,56,54,41,40,41,54,46,48,41],
[36,42,47,56,45,0,50,39,38,39,49,35,56,40],
[56,52,48,44,47,51,0,45,42,41,55,47,43,50],
[47,53,45,63,60,62,56,0,52,53,57,46,70,51],
[47,63,59,65,61,63,59,49,0,53,53,49,68,51],
[55,49,51,61,60,62,60,48,48,0,56,41,57,41],
[44,49,44,49,47,52,46,44,48,45,0,47,61,42],
[40,50,56,53,55,66,54,55,52,60,54,0,68,43],
[36,43,44,47,53,45,58,31,33,44,40,33,0,39],
[56,61,48,56,60,61,51,50,50,60,59,58,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 96, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,55,46,49,29,47,43,68,59,53,46,54,41],
[33,0,53,36,44,25,32,45,48,49,32,35,32,56],
[46,48,0,54,49,47,50,63,58,52,51,55,42,63],
[55,65,47,0,55,41,57,58,67,64,60,57,50,58],
[52,57,52,46,0,46,27,50,72,43,25,36,56,52],
[72,76,54,60,55,0,54,51,83,55,52,49,61,46],
[54,69,51,44,74,47,0,59,73,57,46,43,60,60],
[58,56,38,43,51,50,42,0,54,56,42,45,43,43],
[33,53,43,34,29,18,28,47,0,39,36,27,40,29],
[42,52,49,37,58,46,44,45,62,0,24,48,50,48],
[48,69,50,41,76,49,55,59,65,77,0,58,58,52],
[55,66,46,44,65,52,58,56,74,53,43,0,57,55],
[47,69,59,51,45,40,41,58,61,51,43,44,0,51],
[60,45,38,43,49,55,41,58,72,53,49,46,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 97, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,44,52,44,54,45,44,58,47,36,69,39,64],
[55,0,42,73,49,60,56,71,62,45,51,77,50,54],
[57,59,0,60,46,69,54,38,56,53,47,79,60,62],
[49,28,41,0,53,57,46,43,55,55,33,57,47,75],
[57,52,55,48,0,71,51,60,56,41,50,78,58,61],
[47,41,32,44,30,0,43,30,41,38,36,64,49,54],
[56,45,47,55,50,58,0,38,48,40,53,80,54,65],
[57,30,63,58,41,71,63,0,65,53,45,71,43,61],
[43,39,45,46,45,60,53,36,0,51,34,70,43,56],
[54,56,48,46,60,63,61,48,50,0,50,58,63,62],
[65,50,54,68,51,65,48,56,67,51,0,84,57,62],
[32,24,22,44,23,37,21,30,31,43,17,0,32,51],
[62,51,41,54,43,52,47,58,58,38,44,69,0,66],
[37,47,39,26,40,47,36,40,45,39,39,50,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 98, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,36,40,45,36,47,40,47,47,54,53,49,36],
[65,0,49,47,46,51,59,46,48,55,63,59,45,52],
[65,52,0,51,58,60,60,51,57,60,65,55,50,59],
[61,54,50,0,58,62,49,48,60,59,68,65,59,57],
[56,55,43,43,0,48,53,41,53,56,57,63,50,44],
[65,50,41,39,53,0,53,53,60,56,60,68,55,50],
[54,42,41,52,48,48,0,42,54,55,64,58,52,51],
[61,55,50,53,60,48,59,0,58,52,73,56,55,61],
[54,53,44,41,48,41,47,43,0,53,56,60,52,50],
[54,46,41,42,45,45,46,49,48,0,56,55,58,56],
[47,38,36,33,44,41,37,28,45,45,0,45,40,39],
[48,42,46,36,38,33,43,45,41,46,56,0,44,46],
[52,56,51,42,51,46,49,46,49,43,61,57,0,48],
[65,49,42,44,57,51,50,40,51,45,62,55,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 99, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,53,51,61,57,55,50,56,59,41,52,43,54],
[56,0,62,59,64,62,54,55,49,55,58,64,62,59],
[48,39,0,45,63,49,42,53,48,50,53,46,52,55],
[50,42,56,0,65,58,47,50,50,47,55,54,55,62],
[40,37,38,36,0,49,33,46,30,45,49,42,42,47],
[44,39,52,43,52,0,52,50,52,46,46,54,44,47],
[46,47,59,54,68,49,0,51,45,46,43,52,52,55],
[51,46,48,51,55,51,50,0,49,51,53,50,50,45],
[45,52,53,51,71,49,56,52,0,50,44,59,49,57],
[42,46,51,54,56,55,55,50,51,0,43,55,52,55],
[60,43,48,46,52,55,58,48,57,58,0,42,43,41],
[49,37,55,47,59,47,49,51,42,46,59,0,57,45],
[58,39,49,46,59,57,49,51,52,49,58,44,0,51],
[47,42,46,39,54,54,46,56,44,46,60,56,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 100, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,59,48,53,60,25,31,39,51,49,50,48,70],
[56,0,62,71,58,81,60,54,63,67,50,77,57,81],
[42,39,0,35,37,40,36,25,54,49,42,53,55,67],
[53,30,66,0,55,52,41,31,48,49,36,42,50,77],
[48,43,64,46,0,64,50,43,56,58,59,54,48,67],
[41,20,61,49,37,0,20,10,50,65,19,53,31,54],
[76,41,65,60,51,81,0,41,63,69,43,53,53,90],
[70,47,76,70,58,91,60,0,65,75,53,81,59,82],
[62,38,47,53,45,51,38,36,0,66,46,47,61,59],
[50,34,52,52,43,36,32,26,35,0,23,59,48,56],
[52,51,59,65,42,82,58,48,55,78,0,74,54,81],
[51,24,48,59,47,48,48,20,54,42,27,0,53,72],
[53,44,46,51,53,70,48,42,40,53,47,48,0,91],
[31,20,34,24,34,47,11,19,42,45,20,29,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 101, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,52,39,49,56,50,25,38,27,43,53,48,54],
[45,0,45,41,33,53,53,35,38,34,49,37,42,49],
[49,56,0,28,44,59,47,37,34,32,37,43,49,45],
[62,60,73,0,60,67,52,48,48,48,53,58,52,57],
[52,68,57,41,0,62,46,56,45,46,53,47,56,56],
[45,48,42,34,39,0,47,45,44,38,45,48,50,57],
[51,48,54,49,55,54,0,42,40,38,51,50,54,55],
[76,66,64,53,45,56,59,0,54,53,61,53,57,61],
[63,63,67,53,56,57,61,47,0,39,53,56,58,66],
[74,67,69,53,55,63,63,48,62,0,71,65,68,57],
[58,52,64,48,48,56,50,40,48,30,0,55,58,56],
[48,64,58,43,54,53,51,48,45,36,46,0,50,48],
[53,59,52,49,45,51,47,44,43,33,43,51,0,56],
[47,52,56,44,45,44,46,40,35,44,45,53,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 102, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,50,47,54,54,45,43,59,52,74,50,63,54],
[39,0,49,42,46,42,41,36,44,43,59,39,45,43],
[51,52,0,43,51,53,53,46,44,51,65,39,58,48],
[54,59,58,0,56,49,58,67,60,55,82,59,60,51],
[47,55,50,45,0,46,42,47,53,57,73,53,54,53],
[47,59,48,52,55,0,44,46,61,59,71,49,51,50],
[56,60,48,43,59,57,0,59,60,64,70,52,55,55],
[58,65,55,34,54,55,42,0,59,62,79,57,58,52],
[42,57,57,41,48,40,41,42,0,50,70,45,48,41],
[49,58,50,46,44,42,37,39,51,0,68,37,44,41],
[27,42,36,19,28,30,31,22,31,33,0,29,23,27],
[51,62,62,42,48,52,49,44,56,64,72,0,57,52],
[38,56,43,41,47,50,46,43,53,57,78,44,0,40],
[47,58,53,50,48,51,46,49,60,60,74,49,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 103, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,49,54,56,57,56,49,65,56,59,46,52,71],
[48,0,47,49,49,60,48,40,52,54,51,42,57,71],
[52,54,0,59,57,59,46,40,51,49,61,54,33,56],
[47,52,42,0,46,55,46,54,49,42,59,48,51,41],
[45,52,44,55,0,55,41,41,51,54,58,60,42,58],
[44,41,42,46,46,0,35,39,51,36,56,39,39,50],
[45,53,55,55,60,66,0,45,54,51,58,50,57,60],
[52,61,61,47,60,62,56,0,49,53,76,56,67,59],
[36,49,50,52,50,50,47,52,0,51,66,45,57,56],
[45,47,52,59,47,65,50,48,50,0,41,37,47,45],
[42,50,40,42,43,45,43,25,35,60,0,36,46,48],
[55,59,47,53,41,62,51,45,56,64,65,0,46,53],
[49,44,68,50,59,62,44,34,44,54,55,55,0,53],
[30,30,45,60,43,51,41,42,45,56,53,48,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 104, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,61,39,44,65,75,89,87,48,76,49,43,45],
[37,0,82,45,53,74,35,67,86,64,89,57,42,70],
[40,19,0,41,53,39,40,34,40,34,71,29,33,51],
[62,56,60,0,37,41,66,60,58,82,64,37,41,57],
[57,48,48,64,0,66,57,55,48,53,54,68,55,71],
[36,27,62,60,35,0,57,36,57,51,75,57,25,75],
[26,66,61,35,44,44,0,68,66,38,59,49,43,47],
[12,34,67,41,46,65,33,0,84,26,71,53,36,51],
[14,15,61,43,53,44,35,17,0,38,80,44,43,54],
[53,37,67,19,48,50,63,75,63,0,56,33,54,55],
[25,12,30,37,47,26,42,30,21,45,0,40,44,43],
[52,44,72,64,33,44,52,48,57,68,61,0,23,75],
[58,59,68,60,46,76,58,65,58,47,57,78,0,75],
[56,31,50,44,30,26,54,50,47,46,58,26,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 105, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,56,50,54,41,37,57,48,46,56,47,56,55],
[43,0,50,50,57,43,48,58,44,41,39,42,49,50],
[45,51,0,53,46,55,47,56,55,37,44,46,46,59],
[51,51,48,0,68,42,56,56,49,43,37,53,55,55],
[47,44,55,33,0,39,47,49,47,41,44,38,30,61],
[60,58,46,59,62,0,47,61,51,52,49,53,58,62],
[64,53,54,45,54,54,0,58,48,50,48,48,49,58],
[44,43,45,45,52,40,43,0,43,37,45,41,39,61],
[53,57,46,52,54,50,53,58,0,51,45,45,62,62],
[55,60,64,58,60,49,51,64,50,0,56,50,53,68],
[45,62,57,64,57,52,53,56,56,45,0,44,47,65],
[54,59,55,48,63,48,53,60,56,51,57,0,53,68],
[45,52,55,46,71,43,52,62,39,48,54,48,0,58],
[46,51,42,46,40,39,43,40,39,33,36,33,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 106, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,44,27,40,60,35,46,25,24,49,44,53,28],
[82,0,62,49,62,72,66,73,39,54,61,58,64,52],
[57,39,0,56,57,51,52,49,51,50,6,51,48,39],
[74,52,45,0,45,79,56,53,48,30,36,55,59,41],
[61,39,44,56,0,56,40,73,46,57,30,46,56,36],
[41,29,50,22,45,0,32,36,30,32,44,55,43,40],
[66,35,49,45,61,69,0,61,44,55,43,55,61,49],
[55,28,52,48,28,65,40,0,31,41,15,51,34,43],
[76,62,50,53,55,71,57,70,0,54,45,68,68,34],
[77,47,51,71,44,69,46,60,47,0,36,57,55,50],
[52,40,95,65,71,57,58,86,56,65,0,69,70,59],
[57,43,50,46,55,46,46,50,33,44,32,0,51,38],
[48,37,53,42,45,58,40,67,33,46,31,50,0,41],
[73,49,62,60,65,61,52,58,67,51,42,63,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 107, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,49,47,52,44,51,49,57,53,43,48,44,52],
[43,0,46,36,45,37,37,44,47,43,45,41,45,43],
[52,55,0,39,44,39,51,48,60,47,43,51,49,41],
[54,65,62,0,43,48,53,56,56,48,56,54,56,45],
[49,56,57,58,0,41,46,52,51,52,53,66,59,44],
[57,64,62,53,60,0,48,53,68,63,56,64,60,57],
[50,64,50,48,55,53,0,54,54,49,53,52,48,53],
[52,57,53,45,49,48,47,0,53,59,46,58,52,49],
[44,54,41,45,50,33,47,48,0,50,45,45,51,44],
[48,58,54,53,49,38,52,42,51,0,53,51,55,47],
[58,56,58,45,48,45,48,55,56,48,0,50,48,49],
[53,60,50,47,35,37,49,43,56,50,51,0,48,49],
[57,56,52,45,42,41,53,49,50,46,53,53,0,52],
[49,58,60,56,57,44,48,52,57,54,52,52,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 108, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,46,53,50,50,54,51,47,49,44,56,48,44],
[40,0,42,50,50,48,53,53,49,39,41,49,42,37],
[55,59,0,50,55,49,53,54,58,51,47,57,49,53],
[48,51,51,0,59,49,55,59,47,52,48,50,48,53],
[51,51,46,42,0,51,51,55,44,50,48,52,43,50],
[51,53,52,52,50,0,45,58,55,43,44,47,45,48],
[47,48,48,46,50,56,0,56,53,48,41,52,44,46],
[50,48,47,42,46,43,45,0,48,46,40,46,47,47],
[54,52,43,54,57,46,48,53,0,51,51,54,50,46],
[52,62,50,49,51,58,53,55,50,0,47,55,49,47],
[57,60,54,53,53,57,60,61,50,54,0,55,48,62],
[45,52,44,51,49,54,49,55,47,46,46,0,47,42],
[53,59,52,53,58,56,57,54,51,52,53,54,0,46],
[57,64,48,48,51,53,55,54,55,54,39,59,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 109, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,43,44,54,54,50,40,59,57,53,39,44,46],
[58,0,55,50,65,53,58,51,58,60,60,53,52,53],
[58,46,0,58,58,52,57,49,59,59,58,56,52,47],
[57,51,43,0,60,49,54,50,62,54,45,42,50,43],
[47,36,43,41,0,43,42,37,49,48,45,35,34,40],
[47,48,49,52,58,0,53,45,52,53,47,45,50,41],
[51,43,44,47,59,48,0,41,52,52,50,39,44,45],
[61,50,52,51,64,56,60,0,60,58,59,52,53,50],
[42,43,42,39,52,49,49,41,0,51,47,42,42,41],
[44,41,42,47,53,48,49,43,50,0,48,43,47,41],
[48,41,43,56,56,54,51,42,54,53,0,41,47,45],
[62,48,45,59,66,56,62,49,59,58,60,0,55,48],
[57,49,49,51,67,51,57,48,59,54,54,46,0,50],
[55,48,54,58,61,60,56,51,60,60,56,53,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 110, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,39,45,50,56,40,44,39,43,49,54,38,32],
[54,0,44,53,56,55,57,55,57,52,56,67,50,43],
[62,57,0,59,61,49,59,52,49,52,58,57,57,42],
[56,48,42,0,65,50,49,42,50,48,58,49,52,55],
[51,45,40,36,0,39,48,40,46,34,59,54,46,51],
[45,46,52,51,62,0,52,46,41,43,55,50,43,50],
[61,44,42,52,53,49,0,55,47,51,62,56,48,45],
[57,46,49,59,61,55,46,0,54,51,50,45,49,44],
[62,44,52,51,55,60,54,47,0,40,51,56,51,37],
[58,49,49,53,67,58,50,50,61,0,66,65,47,55],
[52,45,43,43,42,46,39,51,50,35,0,52,36,41],
[47,34,44,52,47,51,45,56,45,36,49,0,51,51],
[63,51,44,49,55,58,53,52,50,54,65,50,0,52],
[69,58,59,46,50,51,56,57,64,46,60,50,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 111, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,54,49,51,49,54,49,53,46,57,44,65,55],
[53,0,44,51,49,47,52,44,49,41,55,49,57,48],
[47,57,0,46,50,51,57,48,44,54,57,45,57,53],
[52,50,55,0,57,55,57,56,49,52,58,47,60,52],
[50,52,51,44,0,46,50,46,52,51,52,50,55,52],
[52,54,50,46,55,0,52,51,51,52,56,44,61,50],
[47,49,44,44,51,49,0,51,51,50,50,45,57,46],
[52,57,53,45,55,50,50,0,48,47,60,39,62,46],
[48,52,57,52,49,50,50,53,0,50,60,38,65,51],
[55,60,47,49,50,49,51,54,51,0,57,47,51,46],
[44,46,44,43,49,45,51,41,41,44,0,35,61,42],
[57,52,56,54,51,57,56,62,63,54,66,0,67,49],
[36,44,44,41,46,40,44,39,36,50,40,34,0,43],
[46,53,48,49,49,51,55,55,50,55,59,52,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 112, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,52,47,43,38,45,48,33,44,39,44,42,36],
[63,0,67,57,52,57,61,63,53,52,49,63,61,50],
[49,34,0,42,42,39,35,45,39,39,32,36,44,39],
[54,44,59,0,43,48,47,55,54,46,51,48,46,51],
[58,49,59,58,0,51,62,54,52,43,54,60,55,45],
[63,44,62,53,50,0,59,61,50,52,50,63,51,47],
[56,40,66,54,39,42,0,48,49,46,41,55,49,44],
[53,38,56,46,47,40,53,0,41,39,47,49,44,41],
[68,48,62,47,49,51,52,60,0,47,49,58,59,49],
[57,49,62,55,58,49,55,62,54,0,37,66,49,47],
[62,52,69,50,47,51,60,54,52,64,0,64,48,51],
[57,38,65,53,41,38,46,52,43,35,37,0,40,37],
[59,40,57,55,46,50,52,57,42,52,53,61,0,39],
[65,51,62,50,56,54,57,60,52,54,50,64,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 113, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,46,49,38,53,53,53,53,42,47,52,45,41],
[56,0,54,53,42,68,66,57,49,51,51,54,57,49],
[55,47,0,48,35,60,55,53,39,44,47,51,53,46],
[52,48,53,0,51,53,54,54,39,44,45,47,52,49],
[63,59,66,50,0,64,64,64,53,54,62,54,49,48],
[48,33,41,48,37,0,52,47,37,35,47,44,47,39],
[48,35,46,47,37,49,0,48,42,37,46,51,53,45],
[48,44,48,47,37,54,53,0,41,43,49,41,40,47],
[48,52,62,62,48,64,59,60,0,48,55,62,60,46],
[59,50,57,57,47,66,64,58,53,0,52,64,50,53],
[54,50,54,56,39,54,55,52,46,49,0,47,44,42],
[49,47,50,54,47,57,50,60,39,37,54,0,44,44],
[56,44,48,49,52,54,48,61,41,51,57,57,0,51],
[60,52,55,52,53,62,56,54,55,48,59,57,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 114, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,35,43,50,57,62,56,63,55,67,50,51,47],
[47,0,49,49,52,49,68,68,41,66,51,51,61,47],
[66,52,0,44,63,54,69,66,57,67,58,54,60,61],
[58,52,57,0,64,64,57,68,62,63,49,59,51,63],
[51,49,38,37,0,51,53,59,52,57,44,51,53,48],
[44,52,47,37,50,0,54,68,57,54,44,43,48,44],
[39,33,32,44,48,47,0,55,42,47,36,35,39,48],
[45,33,35,33,42,33,46,0,35,54,37,31,35,39],
[38,60,44,39,49,44,59,66,0,53,54,49,51,46],
[46,35,34,38,44,47,54,47,48,0,50,64,53,43],
[34,50,43,52,57,57,65,64,47,51,0,58,51,42],
[51,50,47,42,50,58,66,70,52,37,43,0,47,63],
[50,40,41,50,48,53,62,66,50,48,50,54,0,51],
[54,54,40,38,53,57,53,62,55,58,59,38,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 115, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,61,56,49,63,57,60,45,56,48,64,59,52],
[47,0,51,46,52,60,50,57,54,45,46,57,51,50],
[40,50,0,51,52,64,59,65,57,58,51,54,46,44],
[45,55,50,0,44,43,49,61,54,41,49,59,46,51],
[52,49,49,57,0,62,44,51,54,47,43,51,47,40],
[38,41,37,58,39,0,53,50,40,41,44,53,43,40],
[44,51,42,52,57,48,0,58,53,51,33,45,47,46],
[41,44,36,40,50,51,43,0,47,40,37,40,44,43],
[56,47,44,47,47,61,48,54,0,56,43,50,48,48],
[45,56,43,60,54,60,50,61,45,0,53,49,56,48],
[53,55,50,52,58,57,68,64,58,48,0,62,48,54],
[37,44,47,42,50,48,56,61,51,52,39,0,44,55],
[42,50,55,55,54,58,54,57,53,45,53,57,0,33],
[49,51,57,50,61,61,55,58,53,53,47,46,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 116, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,60,59,57,47,53,58,48,56,69,50,57,61],
[37,0,66,68,48,57,52,57,62,55,67,44,46,53],
[41,35,0,56,53,48,43,54,50,62,55,36,46,59],
[42,33,45,0,39,34,37,44,49,32,45,43,32,34],
[44,53,48,62,0,49,52,51,59,51,61,48,37,63],
[54,44,53,67,52,0,58,63,50,63,59,53,41,53],
[48,49,58,64,49,43,0,55,59,48,48,43,38,39],
[43,44,47,57,50,38,46,0,56,40,51,45,32,59],
[53,39,51,52,42,51,42,45,0,44,54,52,49,45],
[45,46,39,69,50,38,53,61,57,0,53,46,36,50],
[32,34,46,56,40,42,53,50,47,48,0,41,37,44],
[51,57,65,58,53,48,58,56,49,55,60,0,44,49],
[44,55,55,69,64,60,63,69,52,65,64,57,0,60],
[40,48,42,67,38,48,62,42,56,51,57,52,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 117, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,53,50,42,45,50,50,45,40,50,41,50,53],
[47,0,42,48,42,48,50,48,48,46,47,50,54,53],
[48,59,0,60,55,59,54,57,50,53,58,48,54,69],
[51,53,41,0,51,51,53,46,40,48,53,53,50,52],
[59,59,46,50,0,49,58,52,51,50,50,49,50,59],
[56,53,42,50,52,0,48,50,53,47,50,57,61,56],
[51,51,47,48,43,53,0,45,44,46,52,49,48,51],
[51,53,44,55,49,51,56,0,54,49,54,50,56,63],
[56,53,51,61,50,48,57,47,0,52,47,53,56,65],
[61,55,48,53,51,54,55,52,49,0,51,53,55,63],
[51,54,43,48,51,51,49,47,54,50,0,48,52,56],
[60,51,53,48,52,44,52,51,48,48,53,0,49,60],
[51,47,47,51,51,40,53,45,45,46,49,52,0,62],
[48,48,32,49,42,45,50,38,36,38,45,41,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 118, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,44,51,52,51,51,57,54,54,59,60,54,57],
[53,0,45,44,49,52,50,56,50,50,49,58,58,57],
[57,56,0,49,55,64,55,68,57,64,53,68,66,61],
[50,57,52,0,51,56,60,50,54,56,59,62,64,61],
[49,52,46,50,0,51,50,47,51,54,53,54,53,49],
[50,49,37,45,50,0,51,53,48,49,46,48,54,49],
[50,51,46,41,51,50,0,59,59,58,50,64,56,57],
[44,45,33,51,54,48,42,0,44,47,49,54,53,44],
[47,51,44,47,50,53,42,57,0,40,48,55,56,49],
[47,51,37,45,47,52,43,54,61,0,58,54,48,50],
[42,52,48,42,48,55,51,52,53,43,0,51,49,47],
[41,43,33,39,47,53,37,47,46,47,50,0,48,43],
[47,43,35,37,48,47,45,48,45,53,52,53,0,48],
[44,44,40,40,52,52,44,57,52,51,54,58,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 119, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,46,40,51,45,54,54,63,52,55,48,50,44],
[55,0,38,37,58,44,59,48,55,56,41,60,55,32],
[55,63,0,45,71,55,54,57,65,55,71,70,60,57],
[61,64,56,0,59,60,50,61,52,49,56,57,59,53],
[50,43,30,42,0,40,38,46,34,38,51,39,47,38],
[56,57,46,41,61,0,45,47,52,58,56,57,63,57],
[47,42,47,51,63,56,0,62,58,60,53,50,60,46],
[47,53,44,40,55,54,39,0,49,46,40,41,50,34],
[38,46,36,49,67,49,43,52,0,51,52,63,61,43],
[49,45,46,52,63,43,41,55,50,0,49,48,52,39],
[46,60,30,45,50,45,48,61,49,52,0,59,41,42],
[53,41,31,44,62,44,51,60,38,53,42,0,45,27],
[51,46,41,42,54,38,41,51,40,49,60,56,0,36],
[57,69,44,48,63,44,55,67,58,62,59,74,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 120, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,48,44,48,46,61,62,61,53,42,49,51,46],
[49,0,46,44,46,45,58,55,48,52,55,46,37,40],
[53,55,0,43,41,69,60,69,54,62,50,37,52,40],
[57,57,58,0,52,60,64,73,56,58,53,58,53,46],
[53,55,60,49,0,66,61,62,49,66,53,45,54,52],
[55,56,32,41,35,0,61,66,63,58,45,41,49,37],
[40,43,41,37,40,40,0,63,53,47,34,37,40,43],
[39,46,32,28,39,35,38,0,45,41,37,35,42,39],
[40,53,47,45,52,38,48,56,0,58,50,44,55,33],
[48,49,39,43,35,43,54,60,43,0,44,33,40,30],
[59,46,51,48,48,56,67,64,51,57,0,43,38,42],
[52,55,64,43,56,60,64,66,57,68,58,0,45,50],
[50,64,49,48,47,52,61,59,46,61,63,56,0,48],
[55,61,61,55,49,64,58,62,68,71,59,51,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 121, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,51,47,55,54,52,50,47,54,56,49,53,58],
[53,0,54,49,50,60,55,53,52,59,58,55,62,64],
[50,47,0,47,53,51,63,43,53,58,61,50,59,65],
[54,52,54,0,47,56,49,46,45,57,56,52,60,58],
[46,51,48,54,0,52,50,51,49,60,60,49,56,55],
[47,41,50,45,49,0,49,42,41,52,48,45,56,57],
[49,46,38,52,51,52,0,43,49,48,54,50,50,57],
[51,48,58,55,50,59,58,0,58,64,59,60,66,63],
[54,49,48,56,52,60,52,43,0,57,59,56,58,61],
[47,42,43,44,41,49,53,37,44,0,46,44,49,53],
[45,43,40,45,41,53,47,42,42,55,0,40,51,54],
[52,46,51,49,52,56,51,41,45,57,61,0,63,57],
[48,39,42,41,45,45,51,35,43,52,50,38,0,53],
[43,37,36,43,46,44,44,38,40,48,47,44,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 122, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,8,32,50,30,66,32,63,53,27,74,30,44],
[71,0,34,26,63,13,50,13,44,48,58,57,48,40],
[93,67,0,80,75,57,80,57,88,78,80,101,57,44],
[69,75,21,0,50,38,80,32,55,78,58,55,46,38],
[51,38,26,51,0,38,74,24,69,59,27,68,51,51],
[71,88,44,63,63,0,88,40,44,67,71,68,78,57],
[35,51,21,21,27,13,0,8,31,40,35,55,32,38],
[69,88,44,69,77,61,93,0,69,65,58,69,65,57],
[38,57,13,46,32,57,70,32,0,67,27,51,57,57],
[48,53,23,23,42,34,61,36,34,0,50,47,34,48],
[74,43,21,43,74,30,66,43,74,51,0,74,43,57],
[27,44,0,46,33,33,46,32,50,54,27,0,33,33],
[71,53,44,55,50,23,69,36,44,67,58,68,0,56],
[57,61,57,63,50,44,63,44,44,53,44,68,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 123, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,54,41,47,49,70,56,53,55,58,63,50,47],
[44,0,58,50,47,69,69,43,62,43,49,57,69,72],
[47,43,0,47,38,50,71,32,39,52,46,51,52,53],
[60,51,54,0,46,66,71,65,63,60,63,79,48,62],
[54,54,63,55,0,68,71,60,66,55,73,79,44,56],
[52,32,51,35,33,0,57,42,35,38,49,56,43,57],
[31,32,30,30,30,44,0,18,29,35,30,42,39,27],
[45,58,69,36,41,59,83,0,50,54,52,81,65,50],
[48,39,62,38,35,66,72,51,0,57,60,79,45,71],
[46,58,49,41,46,63,66,47,44,0,48,55,58,58],
[43,52,55,38,28,52,71,49,41,53,0,54,40,55],
[38,44,50,22,22,45,59,20,22,46,47,0,41,39],
[51,32,49,53,57,58,62,36,56,43,61,60,0,57],
[54,29,48,39,45,44,74,51,30,43,46,62,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 124, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,53,51,61,57,56,49,55,56,48,60,47,50],
[48,0,50,52,53,53,46,43,49,60,43,57,47,56],
[48,51,0,53,60,53,45,48,47,55,48,49,44,54],
[50,49,48,0,55,50,46,50,49,60,45,53,47,52],
[40,48,41,46,0,50,49,41,42,48,41,51,47,44],
[44,48,48,51,51,0,51,44,49,53,49,46,46,51],
[45,55,56,55,52,50,0,51,55,51,56,53,52,53],
[52,58,53,51,60,57,50,0,54,59,49,54,51,53],
[46,52,54,52,59,52,46,47,0,53,45,54,50,51],
[45,41,46,41,53,48,50,42,48,0,49,49,48,47],
[53,58,53,56,60,52,45,52,56,52,0,60,56,56],
[41,44,52,48,50,55,48,47,47,52,41,0,50,54],
[54,54,57,54,54,55,49,50,51,53,45,51,0,51],
[51,45,47,49,57,50,48,48,50,54,45,47,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 125, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,41,39,44,45,41,45,39,41,41,42,41,44],
[53,0,52,48,53,48,54,47,50,51,53,57,49,46],
[60,49,0,47,56,53,53,43,53,56,51,55,44,49],
[62,53,54,0,49,46,51,52,47,54,55,54,54,45],
[57,48,45,52,0,49,49,40,47,53,45,52,44,51],
[56,53,48,55,52,0,65,44,51,54,56,57,48,57],
[60,47,48,50,52,36,0,39,48,47,49,49,51,45],
[56,54,58,49,61,57,62,0,36,58,61,56,54,57],
[62,51,48,54,54,50,53,65,0,52,58,68,56,60],
[60,50,45,47,48,47,54,43,49,0,52,52,51,53],
[60,48,50,46,56,45,52,40,43,49,0,46,48,48],
[59,44,46,47,49,44,52,45,33,49,55,0,47,47],
[60,52,57,47,57,53,50,47,45,50,53,54,0,48],
[57,55,52,56,50,44,56,44,41,48,53,54,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 126, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,47,47,56,56,55,50,59,50,50,55,51,50],
[54,0,58,54,53,54,52,48,58,50,53,53,51,53],
[54,43,0,55,49,52,50,53,61,53,48,56,54,50],
[54,47,46,0,47,50,51,41,47,44,52,51,46,49],
[45,48,52,54,0,48,55,48,55,44,48,52,49,48],
[45,47,49,51,53,0,50,44,53,48,52,52,51,48],
[46,49,51,50,46,51,0,46,53,48,53,50,50,50],
[51,53,48,60,53,57,55,0,54,57,53,54,56,61],
[42,43,40,54,46,48,48,47,0,46,41,50,42,41],
[51,51,48,57,57,53,53,44,55,0,50,50,48,52],
[51,48,53,49,53,49,48,48,60,51,0,56,48,49],
[46,48,45,50,49,49,51,47,51,51,45,0,46,49],
[50,50,47,55,52,50,51,45,59,53,53,55,0,52],
[51,48,51,52,53,53,51,40,60,49,52,52,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 127, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,59,38,53,55,43,52,65,49,52,65,59,58],
[39,0,61,33,42,53,40,40,50,43,44,55,49,43],
[42,40,0,18,52,53,36,46,42,34,42,41,46,40],
[63,68,83,0,66,72,50,61,64,47,48,64,61,65],
[48,59,49,35,0,50,50,51,53,40,49,59,55,54],
[46,48,48,29,51,0,43,46,45,39,44,60,43,50],
[58,61,65,51,51,58,0,50,66,41,51,71,67,55],
[49,61,55,40,50,55,51,0,55,51,44,54,52,49],
[36,51,59,37,48,56,35,46,0,46,47,52,59,55],
[52,58,67,54,61,62,60,50,55,0,57,57,58,54],
[49,57,59,53,52,57,50,57,54,44,0,63,62,46],
[36,46,60,37,42,41,30,47,49,44,38,0,49,50],
[42,52,55,40,46,58,34,49,42,43,39,52,0,51],
[43,58,61,36,47,51,46,52,46,47,55,51,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 128, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,42,56,46,57,45,51,51,56,60,49,50,54],
[56,0,49,60,49,60,56,53,57,60,60,55,55,56],
[59,52,0,55,47,62,54,49,45,59,58,48,55,51],
[45,41,46,0,54,55,47,51,51,48,60,51,46,53],
[55,52,54,47,0,54,57,45,59,54,59,56,51,52],
[44,41,39,46,47,0,47,46,45,48,58,50,46,47],
[56,45,47,54,44,54,0,45,56,52,55,50,49,45],
[50,48,52,50,56,55,56,0,49,55,59,49,45,57],
[50,44,56,50,42,56,45,52,0,53,57,49,45,57],
[45,41,42,53,47,53,49,46,48,0,57,45,44,56],
[41,41,43,41,42,43,46,42,44,44,0,45,37,42],
[52,46,53,50,45,51,51,52,52,56,56,0,54,56],
[51,46,46,55,50,55,52,56,56,57,64,47,0,52],
[47,45,50,48,49,54,56,44,44,45,59,45,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 129, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,36,43,39,43,39,39,39,46,43,54,47,48],
[53,0,48,39,49,52,43,35,46,47,42,55,46,54],
[65,53,0,46,50,52,60,58,50,61,52,52,53,59],
[58,62,55,0,49,56,56,56,63,54,51,61,55,63],
[62,52,51,52,0,55,54,44,53,52,55,55,55,53],
[58,49,49,45,46,0,50,30,48,45,49,54,51,48],
[62,58,41,45,47,51,0,41,45,52,54,61,53,59],
[62,66,43,45,57,71,60,0,62,61,54,62,61,62],
[62,55,51,38,48,53,56,39,0,55,54,55,52,48],
[55,54,40,47,49,56,49,40,46,0,44,65,49,49],
[58,59,49,50,46,52,47,47,47,57,0,50,52,49],
[47,46,49,40,46,47,40,39,46,36,51,0,52,51],
[54,55,48,46,46,50,48,40,49,52,49,49,0,48],
[53,47,42,38,48,53,42,39,53,52,52,50,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 130, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,47,46,54,50,45,49,49,52,59,54,54,47],
[57,0,54,57,54,58,59,54,53,48,66,50,52,49],
[54,47,0,59,57,61,55,57,54,49,62,58,57,46],
[55,44,42,0,49,53,42,48,51,45,54,49,48,51],
[47,47,44,52,0,46,42,46,46,48,58,47,52,40],
[51,43,40,48,55,0,57,41,57,44,60,51,46,50],
[56,42,46,59,59,44,0,47,53,42,60,50,45,50],
[52,47,44,53,55,60,54,0,58,50,56,48,50,48],
[52,48,47,50,55,44,48,43,0,41,57,52,50,49],
[49,53,52,56,53,57,59,51,60,0,63,48,61,47],
[42,35,39,47,43,41,41,45,44,38,0,40,46,36],
[47,51,43,52,54,50,51,53,49,53,61,0,53,47],
[47,49,44,53,49,55,56,51,51,40,55,48,0,46],
[54,52,55,50,61,51,51,53,52,54,65,54,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 131, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,56,59,44,60,68,58,65,63,84,59,45,47],
[36,0,48,64,48,54,61,43,58,53,66,58,39,34],
[45,53,0,46,40,51,58,52,58,49,62,52,38,46],
[42,37,55,0,40,46,50,39,55,58,51,52,35,39],
[57,53,61,61,0,51,68,54,62,77,74,50,56,51],
[41,47,50,55,50,0,60,46,54,57,60,59,47,45],
[33,40,43,51,33,41,0,36,37,50,63,41,19,41],
[43,58,49,62,47,55,65,0,64,62,74,62,56,52],
[36,43,43,46,39,47,64,37,0,52,64,51,49,41],
[38,48,52,43,24,44,51,39,49,0,70,51,26,39],
[17,35,39,50,27,41,38,27,37,31,0,42,28,23],
[42,43,49,49,51,42,60,39,50,50,59,0,42,41],
[56,62,63,66,45,54,82,45,52,75,73,59,0,55],
[54,67,55,62,50,56,60,49,60,62,78,60,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 132, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,67,38,36,62,63,49,44,44,48,49,15,51],
[63,0,29,39,36,63,35,50,63,48,38,40,29,37],
[34,72,0,10,44,34,44,34,34,34,23,21,23,51],
[63,62,91,0,49,62,86,76,48,34,23,77,38,51],
[65,65,57,52,0,76,86,53,61,61,51,42,65,65],
[39,38,67,39,25,0,63,52,58,33,25,52,15,51],
[38,66,57,15,15,38,0,28,49,23,38,30,15,51],
[52,51,67,25,48,49,73,0,48,34,23,38,53,51],
[57,38,67,53,40,43,52,53,0,46,25,53,30,51],
[57,53,67,67,40,68,78,67,55,0,30,67,44,65],
[53,63,78,78,50,76,63,78,76,71,0,78,55,65],
[52,61,80,24,59,49,71,63,48,34,23,0,38,51],
[86,72,78,63,36,86,86,48,71,57,46,63,0,61],
[50,64,50,50,36,50,50,50,50,36,36,50,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 133, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,70,34,24,57,23,55,35,53,57,35,49,42],
[46,0,32,24,35,47,22,44,21,23,65,35,34,31],
[31,69,0,37,37,44,48,62,56,54,53,63,45,44],
[67,77,64,0,58,81,48,75,72,56,82,75,68,74],
[77,66,64,43,0,66,41,77,43,44,81,69,68,63],
[44,54,57,20,35,0,25,61,49,27,63,49,48,37],
[78,79,53,53,60,76,0,85,42,53,81,75,61,70],
[46,57,39,26,24,40,16,0,39,43,43,30,63,48],
[66,80,45,29,58,52,59,62,0,58,67,72,56,58],
[48,78,47,45,57,74,48,58,43,0,57,64,45,48],
[44,36,48,19,20,38,20,58,34,44,0,46,45,47],
[66,66,38,26,32,52,26,71,29,37,55,0,56,33],
[52,67,56,33,33,53,40,38,45,56,56,45,0,33],
[59,70,57,27,38,64,31,53,43,53,54,68,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 134, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,47,41,53,51,51,51,48,41,54,57,57,42],
[62,0,54,55,61,54,56,53,53,54,55,53,55,43],
[54,47,0,61,63,59,44,50,56,43,50,67,52,46],
[60,46,40,0,55,62,41,54,50,54,53,57,45,43],
[48,40,38,46,0,48,36,42,38,48,49,45,29,37],
[50,47,42,39,53,0,43,46,49,46,49,44,41,41],
[50,45,57,60,65,58,0,54,63,60,54,64,44,42],
[50,48,51,47,59,55,47,0,49,50,42,61,51,37],
[53,48,45,51,63,52,38,52,0,45,45,51,47,48],
[60,47,58,47,53,55,41,51,56,0,53,50,50,43],
[47,46,51,48,52,52,47,59,56,48,0,56,42,52],
[44,48,34,44,56,57,37,40,50,51,45,0,27,38],
[44,46,49,56,72,60,57,50,54,51,59,74,0,43],
[59,58,55,58,64,60,59,64,53,58,49,63,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 135, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,40,59,51,50,46,61,51,56,50,52,58,56],
[56,0,51,63,47,59,62,62,57,61,46,47,56,59],
[61,50,0,66,55,59,50,65,61,63,59,51,61,65],
[42,38,35,0,39,44,41,46,41,47,44,37,45,50],
[50,54,46,62,0,55,54,60,56,60,53,47,49,63],
[51,42,42,57,46,0,46,52,50,54,41,45,48,52],
[55,39,51,60,47,55,0,54,55,55,46,38,60,70],
[40,39,36,55,41,49,47,0,53,53,43,47,43,51],
[50,44,40,60,45,51,46,48,0,56,53,39,49,57],
[45,40,38,54,41,47,46,48,45,0,43,33,44,47],
[51,55,42,57,48,60,55,58,48,58,0,47,59,59],
[49,54,50,64,54,56,63,54,62,68,54,0,57,55],
[43,45,40,56,52,53,41,58,52,57,42,44,0,56],
[45,42,36,51,38,49,31,50,44,54,42,46,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 136, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,36,47,49,41,36,48,42,38,48,48,35,51],
[57,0,40,49,54,54,45,58,46,47,57,51,44,49],
[65,61,0,49,52,64,55,61,57,52,64,64,56,62],
[54,52,52,0,62,59,43,56,50,54,66,60,35,51],
[52,47,49,39,0,50,39,48,49,50,56,54,39,54],
[60,47,37,42,51,0,46,48,52,50,57,53,49,57],
[65,56,46,58,62,55,0,50,49,55,67,54,48,68],
[53,43,40,45,53,53,51,0,50,50,59,63,46,49],
[59,55,44,51,52,49,52,51,0,43,61,49,42,52],
[63,54,49,47,51,51,46,51,58,0,57,49,43,58],
[53,44,37,35,45,44,34,42,40,44,0,44,32,45],
[53,50,37,41,47,48,47,38,52,52,57,0,39,53],
[66,57,45,66,62,52,53,55,59,58,69,62,0,59],
[50,52,39,50,47,44,33,52,49,43,56,48,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 137, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,45,52,47,50,45,58,55,49,54,55,47,51],
[45,0,45,49,53,46,46,51,56,48,51,49,44,52],
[56,56,0,57,55,57,62,55,61,61,53,55,50,60],
[49,52,44,0,43,48,49,53,49,49,50,55,52,54],
[54,48,46,58,0,56,62,56,54,57,58,50,52,58],
[51,55,44,53,45,0,59,55,54,47,49,56,43,64],
[56,55,39,52,39,42,0,46,49,58,45,50,41,59],
[43,50,46,48,45,46,55,0,50,46,49,51,45,55],
[46,45,40,52,47,47,52,51,0,50,44,46,50,50],
[52,53,40,52,44,54,43,55,51,0,55,56,50,55],
[47,50,48,51,43,52,56,52,57,46,0,51,49,52],
[46,52,46,46,51,45,51,50,55,45,50,0,43,53],
[54,57,51,49,49,58,60,56,51,51,52,58,0,59],
[50,49,41,47,43,37,42,46,51,46,49,48,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 138, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,48,55,58,38,43,47,50,55,57,47,46,56],
[57,0,58,55,60,47,56,42,56,60,59,57,51,65],
[53,43,0,52,56,42,49,54,56,40,61,50,55,52],
[46,46,49,0,54,43,48,54,55,46,55,50,49,58],
[43,41,45,47,0,44,52,44,42,37,54,42,50,55],
[63,54,59,58,57,0,50,56,54,53,58,61,60,62],
[58,45,52,53,49,51,0,50,50,41,53,56,54,62],
[54,59,47,47,57,45,51,0,59,50,59,53,52,58],
[51,45,45,46,59,47,51,42,0,42,59,51,57,59],
[46,41,61,55,64,48,60,51,59,0,65,48,58,59],
[44,42,40,46,47,43,48,42,42,36,0,38,41,51],
[54,44,51,51,59,40,45,48,50,53,63,0,51,59],
[55,50,46,52,51,41,47,49,44,43,60,50,0,59],
[45,36,49,43,46,39,39,43,42,42,50,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 139, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,55,50,51,44,49,48,52,43,52,56,46,42],
[55,0,57,54,63,56,52,50,57,55,62,60,59,53],
[46,44,0,49,58,51,48,49,45,40,51,52,41,39],
[51,47,52,0,52,50,52,48,45,41,49,49,42,45],
[50,38,43,49,0,50,50,45,44,41,49,51,42,45],
[57,45,50,51,51,0,56,50,49,42,51,54,49,42],
[52,49,53,49,51,45,0,56,51,49,51,56,53,46],
[53,51,52,53,56,51,45,0,50,52,49,56,51,51],
[49,44,56,56,57,52,50,51,0,49,52,61,47,45],
[58,46,61,60,60,59,52,49,52,0,57,62,56,52],
[49,39,50,52,52,50,50,52,49,44,0,56,44,49],
[45,41,49,52,50,47,45,45,40,39,45,0,36,38],
[55,42,60,59,59,52,48,50,54,45,57,65,0,49],
[59,48,62,56,56,59,55,50,56,49,52,63,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 140, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,61,48,51,56,52,52,51,48,51,52,49,52],
[50,0,60,53,56,56,53,55,57,50,54,56,55,59],
[40,41,0,45,52,44,50,46,47,47,47,43,42,55],
[53,48,56,0,48,51,51,46,45,47,45,47,52,51],
[50,45,49,53,0,53,55,45,46,51,49,49,48,56],
[45,45,57,50,48,0,52,53,47,51,50,48,57,61],
[49,48,51,50,46,49,0,53,46,46,47,44,55,52],
[49,46,55,55,56,48,48,0,55,49,48,49,47,67],
[50,44,54,56,55,54,55,46,0,46,58,47,48,55],
[53,51,54,54,50,50,55,52,55,0,56,50,48,60],
[50,47,54,56,52,51,54,53,43,45,0,46,47,55],
[49,45,58,54,52,53,57,52,54,51,55,0,54,60],
[52,46,59,49,53,44,46,54,53,53,54,47,0,58],
[49,42,46,50,45,40,49,34,46,41,46,41,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 141, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,53,43,53,47,54,52,43,45,44,45,48,47],
[42,0,53,39,51,41,47,45,57,46,52,50,45,48],
[48,48,0,44,41,45,54,50,50,48,50,46,47,46],
[58,62,57,0,62,57,58,58,58,49,55,54,57,62],
[48,50,60,39,0,48,48,56,49,49,47,54,50,43],
[54,60,56,44,53,0,51,58,54,57,51,51,52,56],
[47,54,47,43,53,50,0,49,51,46,50,53,48,53],
[49,56,51,43,45,43,52,0,52,50,45,59,51,51],
[58,44,51,43,52,47,50,49,0,45,45,53,54,52],
[56,55,53,52,52,44,55,51,56,0,53,52,48,52],
[57,49,51,46,54,50,51,56,56,48,0,49,48,48],
[56,51,55,47,47,50,48,42,48,49,52,0,50,59],
[53,56,54,44,51,49,53,50,47,53,53,51,0,54],
[54,53,55,39,58,45,48,50,49,49,53,42,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 142, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,58,51,57,61,66,47,57,46,52,45,48,54],
[49,0,53,50,64,54,69,41,43,41,42,32,48,67],
[43,48,0,31,40,55,48,40,45,34,30,43,41,40],
[50,51,70,0,70,60,64,49,58,56,60,47,61,69],
[44,37,61,31,0,59,57,39,43,45,41,37,49,53],
[40,47,46,41,42,0,47,34,49,33,34,33,52,44],
[35,32,53,37,44,54,0,43,37,39,45,23,47,49],
[54,60,61,52,62,67,58,0,62,50,51,43,55,64],
[44,58,56,43,58,52,64,39,0,50,45,48,52,60],
[55,60,67,45,56,68,62,51,51,0,64,53,51,74],
[49,59,71,41,60,67,56,50,56,37,0,48,54,71],
[56,69,58,54,64,68,78,58,53,48,53,0,57,65],
[53,53,60,40,52,49,54,46,49,50,47,44,0,51],
[47,34,61,32,48,57,52,37,41,27,30,36,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 143, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,49,34,66,34,32,50,31,54,25,66,40,37],
[58,0,75,39,60,47,44,57,50,46,33,73,56,52],
[52,26,0,45,52,31,49,43,28,45,30,63,56,55],
[67,62,56,0,63,43,56,62,46,58,54,84,66,46],
[35,41,49,38,0,27,32,30,39,50,37,60,47,36],
[67,54,70,58,74,0,49,54,51,73,47,83,71,54],
[69,57,52,45,69,52,0,64,35,59,45,77,74,42],
[51,44,58,39,71,47,37,0,40,51,39,63,62,50],
[70,51,73,55,62,50,66,61,0,67,42,80,71,58],
[47,55,56,43,51,28,42,50,34,0,36,61,56,53],
[76,68,71,47,64,54,56,62,59,65,0,70,61,59],
[35,28,38,17,41,18,24,38,21,40,31,0,44,21],
[61,45,45,35,54,30,27,39,30,45,40,57,0,30],
[64,49,46,55,65,47,59,51,43,48,42,80,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 144, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,52,54,54,57,65,59,47,51,47,62,65,61],
[44,0,40,42,52,49,53,57,50,37,40,56,54,56],
[49,61,0,45,53,56,49,55,53,48,41,58,61,48],
[47,59,56,0,51,54,59,59,60,47,50,61,55,53],
[47,49,48,50,0,52,63,46,52,44,45,53,49,47],
[44,52,45,47,49,0,57,49,52,46,51,53,51,45],
[36,48,52,42,38,44,0,47,48,38,31,46,53,40],
[42,44,46,42,55,52,54,0,44,38,46,55,50,48],
[54,51,48,41,49,49,53,57,0,44,33,53,58,46],
[50,64,53,54,57,55,63,63,57,0,49,63,62,50],
[54,61,60,51,56,50,70,55,68,52,0,61,65,57],
[39,45,43,40,48,48,55,46,48,38,40,0,52,39],
[36,47,40,46,52,50,48,51,43,39,36,49,0,41],
[40,45,53,48,54,56,61,53,55,51,44,62,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 145, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,51,56,56,47,49,55,41,42,48,47,54,51],
[51,0,49,56,54,51,55,56,48,45,57,43,54,51],
[50,52,0,62,55,48,51,60,44,52,59,50,52,53],
[45,45,39,0,55,41,44,51,44,39,49,42,50,51],
[45,47,46,46,0,47,42,46,45,45,48,42,44,43],
[54,50,53,60,54,0,51,57,53,54,54,46,52,60],
[52,46,50,57,59,50,0,51,46,46,47,44,51,47],
[46,45,41,50,55,44,50,0,45,49,51,44,51,52],
[60,53,57,57,56,48,55,56,0,51,58,50,55,57],
[59,56,49,62,56,47,55,52,50,0,55,51,53,51],
[53,44,42,52,53,47,54,50,43,46,0,44,50,50],
[54,58,51,59,59,55,57,57,51,50,57,0,59,58],
[47,47,49,51,57,49,50,50,46,48,51,42,0,52],
[50,50,48,50,58,41,54,49,44,50,51,43,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 146, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,40,53,39,38,45,48,38,49,35,47,44,41],
[52,0,46,50,54,49,56,55,45,52,47,49,58,54],
[61,55,0,52,50,48,54,54,44,53,43,42,58,51],
[48,51,49,0,51,57,54,57,46,53,45,46,52,53],
[62,47,51,50,0,53,52,58,49,53,29,45,43,53],
[63,52,53,44,48,0,49,51,46,54,46,52,56,55],
[56,45,47,47,49,52,0,51,44,52,51,52,51,43],
[53,46,47,44,43,50,50,0,40,49,37,44,47,50],
[63,56,57,55,52,55,57,61,0,66,46,58,59,55],
[52,49,48,48,48,47,49,52,35,0,40,46,48,42],
[66,54,58,56,72,55,50,64,55,61,0,57,57,56],
[54,52,59,55,56,49,49,57,43,55,44,0,42,47],
[57,43,43,49,58,45,50,54,42,53,44,59,0,51],
[60,47,50,48,48,46,58,51,46,59,45,54,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 147, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,38,33,27,25,25,27,21,26,37,46,36,31],
[64,0,49,48,32,53,50,51,43,46,57,55,58,60],
[63,52,0,53,44,47,48,58,43,44,51,52,59,49],
[68,53,48,0,44,34,38,46,42,57,56,61,49,47],
[74,69,57,57,0,50,57,63,41,57,63,60,70,60],
[76,48,54,67,51,0,59,51,44,50,58,74,66,73],
[76,51,53,63,44,42,0,52,34,32,59,62,52,47],
[74,50,43,55,38,50,49,0,34,40,46,52,50,54],
[80,58,58,59,60,57,67,67,0,46,66,77,57,57],
[75,55,57,44,44,51,69,61,55,0,52,60,67,60],
[64,44,50,45,38,43,42,55,35,49,0,55,64,55],
[55,46,49,40,41,27,39,49,24,41,46,0,37,47],
[65,43,42,52,31,35,49,51,44,34,37,64,0,38],
[70,41,52,54,41,28,54,47,44,41,46,54,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 148, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,56,75,55,47,73,60,71,60,67,74,75,56],
[40,0,50,47,13,43,50,54,55,32,55,62,64,51],
[45,51,0,44,34,51,38,29,47,50,44,49,52,44],
[26,54,57,0,52,49,57,50,64,63,47,63,63,59],
[46,88,67,49,0,60,60,58,58,60,87,71,87,73],
[54,58,50,52,41,0,56,54,77,43,60,60,86,71],
[28,51,63,44,41,45,0,44,75,50,44,60,74,48],
[41,47,72,51,43,47,57,0,41,47,64,48,47,57],
[30,46,54,37,43,24,26,60,0,23,45,29,66,45],
[41,69,51,38,41,58,51,54,78,0,62,69,80,50],
[34,46,57,54,14,41,57,37,56,39,0,52,81,78],
[27,39,52,38,30,41,41,53,72,32,49,0,63,51],
[26,37,49,38,14,15,27,54,35,21,20,38,0,26],
[45,50,57,42,28,30,53,44,56,51,23,50,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 149, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,43,47,34,67,71,64,48,55,56,65,71,71],
[38,0,44,43,31,33,21,45,28,27,39,54,39,48],
[58,57,0,48,42,72,56,60,60,44,44,69,69,74],
[54,58,53,0,58,72,35,66,67,44,44,76,70,51],
[67,70,59,43,0,55,48,48,66,50,54,68,87,53],
[34,68,29,29,46,0,24,41,35,7,30,73,57,41],
[30,80,45,66,53,77,0,71,71,41,43,81,48,46],
[37,56,41,35,53,60,30,0,76,37,42,71,58,46],
[53,73,41,34,35,66,30,25,0,25,39,65,48,57],
[46,74,57,57,51,94,60,64,76,0,59,81,78,73],
[45,62,57,57,47,71,58,59,62,42,0,55,60,61],
[36,47,32,25,33,28,20,30,36,20,46,0,58,39],
[30,62,32,31,14,44,53,43,53,23,41,43,0,34],
[30,53,27,50,48,60,55,55,44,28,40,62,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 150, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,51,46,48,57,55,53,45,48,54,57,47,58],
[57,0,53,48,55,57,57,52,43,51,51,57,55,55],
[50,48,0,50,57,58,59,54,53,55,53,56,55,54],
[55,53,51,0,56,57,55,53,47,59,58,60,55,53],
[53,46,44,45,0,59,58,49,48,47,57,51,58,50],
[44,44,43,44,42,0,49,43,42,48,43,54,38,45],
[46,44,42,46,43,52,0,53,43,54,52,48,49,47],
[48,49,47,48,52,58,48,0,45,53,53,58,51,49],
[56,58,48,54,53,59,58,56,0,52,57,58,59,55],
[53,50,46,42,54,53,47,48,49,0,47,52,55,53],
[47,50,48,43,44,58,49,48,44,54,0,60,45,50],
[44,44,45,41,50,47,53,43,43,49,41,0,54,42],
[54,46,46,46,43,63,52,50,42,46,56,47,0,51],
[43,46,47,48,51,56,54,52,46,48,51,59,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 151, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,30,42,57,56,38,64,59,54,53,60,49,46],
[59,0,55,43,64,61,59,57,70,52,62,55,54,41],
[71,46,0,60,77,76,49,71,73,55,58,61,62,54],
[59,58,41,0,67,68,47,74,67,51,55,59,65,46],
[44,37,24,34,0,54,29,57,51,48,52,50,54,47],
[45,40,25,33,47,0,28,57,45,40,31,48,50,32],
[63,42,52,54,72,73,0,67,63,50,59,70,61,38],
[37,44,30,27,44,44,34,0,48,41,43,52,45,31],
[42,31,28,34,50,56,38,53,0,45,47,44,57,39],
[47,49,46,50,53,61,51,60,56,0,59,57,47,47],
[48,39,43,46,49,70,42,58,54,42,0,52,47,30],
[41,46,40,42,51,53,31,49,57,44,49,0,52,32],
[52,47,39,36,47,51,40,56,44,54,54,49,0,37],
[55,60,47,55,54,69,63,70,62,54,71,69,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 152, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,47,46,45,52,50,56,44,45,48,49,41,53],
[58,0,42,50,51,56,57,47,44,51,51,55,42,54],
[54,59,0,45,50,54,50,57,48,52,56,44,49,49],
[55,51,56,0,46,58,53,54,48,54,55,54,49,60],
[56,50,51,55,0,57,53,66,48,58,54,50,48,55],
[49,45,47,43,44,0,48,48,49,53,53,46,44,55],
[51,44,51,48,48,53,0,54,50,46,47,48,51,49],
[45,54,44,47,35,53,47,0,44,45,47,47,42,53],
[57,57,53,53,53,52,51,57,0,52,54,48,50,57],
[56,50,49,47,43,48,55,56,49,0,45,47,44,47],
[53,50,45,46,47,48,54,54,47,56,0,46,54,54],
[52,46,57,47,51,55,53,54,53,54,55,0,49,54],
[60,59,52,52,53,57,50,59,51,57,47,52,0,59],
[48,47,52,41,46,46,52,48,44,54,47,47,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 153, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,45,56,52,55,56,59,58,54,53,54,50,52],
[48,0,53,53,51,52,53,54,53,50,51,56,46,50],
[56,48,0,61,48,52,55,51,60,50,51,50,54,51],
[45,48,40,0,45,49,52,47,47,50,52,46,43,52],
[49,50,53,56,0,52,63,51,55,57,57,54,58,56],
[46,49,49,52,49,0,55,53,49,44,47,50,48,48],
[45,48,46,49,38,46,0,52,45,42,53,43,45,44],
[42,47,50,54,50,48,49,0,44,51,49,50,50,44],
[43,48,41,54,46,52,56,57,0,44,52,53,40,49],
[47,51,51,51,44,57,59,50,57,0,46,50,53,53],
[48,50,50,49,44,54,48,52,49,55,0,50,47,49],
[47,45,51,55,47,51,58,51,48,51,51,0,50,51],
[51,55,47,58,43,53,56,51,61,48,54,51,0,49],
[49,51,50,49,45,53,57,57,52,48,52,50,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 154, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,63,59,56,66,56,59,50,57,50,63,64,62],
[37,0,50,45,44,51,40,51,41,44,46,54,48,49],
[38,51,0,43,52,57,49,55,43,47,49,56,51,47],
[42,56,58,0,41,55,56,52,36,49,50,62,58,57],
[45,57,49,60,0,50,55,58,48,47,48,55,62,47],
[35,50,44,46,51,0,56,51,43,32,45,45,53,51],
[45,61,52,45,46,45,0,49,43,42,42,61,59,52],
[42,50,46,49,43,50,52,0,45,45,39,54,61,52],
[51,60,58,65,53,58,58,56,0,56,47,61,60,62],
[44,57,54,52,54,69,59,56,45,0,51,53,55,52],
[51,55,52,51,53,56,59,62,54,50,0,56,59,58],
[38,47,45,39,46,56,40,47,40,48,45,0,44,49],
[37,53,50,43,39,48,42,40,41,46,42,57,0,45],
[39,52,54,44,54,50,49,49,39,49,43,52,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 155, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,44,56,52,53,51,52,52,67,59,48,49,52],
[47,0,42,55,54,44,55,61,59,62,60,50,47,51],
[57,59,0,59,52,47,63,67,55,62,65,52,49,64],
[45,46,42,0,40,39,49,60,46,56,48,52,36,50],
[49,47,49,61,0,54,51,55,51,58,60,48,48,49],
[48,57,54,62,47,0,65,57,64,51,62,49,53,53],
[50,46,38,52,50,36,0,50,46,65,54,47,47,44],
[49,40,34,41,46,44,51,0,47,54,56,37,46,54],
[49,42,46,55,50,37,55,54,0,66,61,55,40,53],
[34,39,39,45,43,50,36,47,35,0,44,34,30,42],
[42,41,36,53,41,39,47,45,40,57,0,40,37,48],
[53,51,49,49,53,52,54,64,46,67,61,0,43,48],
[52,54,52,65,53,48,54,55,61,71,64,58,0,60],
[49,50,37,51,52,48,57,47,48,59,53,53,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 156, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,49,45,49,44,42,54,50,47,54,54,49,44],
[60,0,60,52,52,51,51,60,54,56,52,59,53,50],
[52,41,0,48,50,46,56,55,48,51,50,47,47,48],
[56,49,53,0,50,46,49,55,52,58,56,57,52,50],
[52,49,51,51,0,43,46,53,48,55,50,51,44,52],
[57,50,55,55,58,0,54,55,54,59,56,49,52,59],
[59,50,45,52,55,47,0,55,48,53,55,57,50,57],
[47,41,46,46,48,46,46,0,41,42,48,44,43,45],
[51,47,53,49,53,47,53,60,0,53,58,52,51,52],
[54,45,50,43,46,42,48,59,48,0,50,53,45,50],
[47,49,51,45,51,45,46,53,43,51,0,46,48,46],
[47,42,54,44,50,52,44,57,49,48,55,0,45,49],
[52,48,54,49,57,49,51,58,50,56,53,56,0,50],
[57,51,53,51,49,42,44,56,49,51,55,52,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 157, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,48,46,34,49,54,56,52,62,56,48,47,65],
[55,0,64,56,49,51,49,69,53,61,53,51,51,58],
[53,37,0,44,54,48,50,57,33,43,48,39,37,48],
[55,45,57,0,61,50,64,58,51,63,63,56,47,58],
[67,52,47,40,0,51,53,68,52,64,59,51,36,61],
[52,50,53,51,50,0,48,61,54,55,57,44,44,52],
[47,52,51,37,48,53,0,55,54,61,50,55,44,53],
[45,32,44,43,33,40,46,0,32,36,49,42,43,42],
[49,48,68,50,49,47,47,69,0,49,49,41,52,60],
[39,40,58,38,37,46,40,65,52,0,58,51,43,61],
[45,48,53,38,42,44,51,52,52,43,0,41,47,62],
[53,50,62,45,50,57,46,59,60,50,60,0,59,59],
[54,50,64,54,65,57,57,58,49,58,54,42,0,54],
[36,43,53,43,40,49,48,59,41,40,39,42,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 158, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,44,46,41,59,44,58,51,42,51,48,42,52],
[46,0,52,48,48,59,51,53,43,37,55,49,50,55],
[57,49,0,47,45,56,42,52,35,48,51,44,57,53],
[55,53,54,0,58,59,47,56,46,44,54,49,57,53],
[60,53,56,43,0,48,52,46,36,50,59,41,47,54],
[42,42,45,42,53,0,45,49,38,32,47,48,40,46],
[57,50,59,54,49,56,0,53,38,48,57,42,57,61],
[43,48,49,45,55,52,48,0,32,42,56,42,42,43],
[50,58,66,55,65,63,63,69,0,51,57,49,61,54],
[59,64,53,57,51,69,53,59,50,0,53,50,52,60],
[50,46,50,47,42,54,44,45,44,48,0,54,43,45],
[53,52,57,52,60,53,59,59,52,51,47,0,56,55],
[59,51,44,44,54,61,44,59,40,49,58,45,0,50],
[49,46,48,48,47,55,40,58,47,41,56,46,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 159, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,76,33,76,67,58,56,43,78,68,55,65,67],
[49,0,80,26,43,48,42,44,45,64,55,20,67,56],
[25,21,0,28,19,52,41,27,24,42,41,20,35,23],
[68,75,73,0,76,76,57,77,58,98,50,38,85,94],
[25,58,82,25,0,74,59,41,24,68,26,43,68,55],
[34,53,49,25,27,0,39,28,26,48,26,19,51,38],
[43,59,60,44,42,62,0,31,43,46,44,39,31,40],
[45,57,74,24,60,73,70,0,53,59,41,35,80,94],
[58,56,77,43,77,75,58,48,0,61,61,54,64,73],
[23,37,59,3,33,53,55,42,40,0,19,23,66,71],
[33,46,60,51,75,75,57,60,40,82,0,54,85,81],
[46,81,81,63,58,82,62,66,47,78,47,0,67,63],
[36,34,66,16,33,50,70,21,37,35,16,34,0,55],
[34,45,78,7,46,63,61,7,28,30,20,38,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 160, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,46,48,59,49,57,43,43,47,47,55,53,46],
[56,0,55,46,58,63,54,48,59,58,54,64,63,55],
[55,46,0,60,66,63,63,64,55,59,58,66,55,54],
[53,55,41,0,55,57,57,58,52,57,54,68,59,52],
[42,43,35,46,0,41,40,46,44,48,39,60,43,42],
[52,38,38,44,60,0,47,50,39,47,50,49,49,27],
[44,47,38,44,61,54,0,47,48,55,48,53,46,39],
[58,53,37,43,55,51,54,0,46,44,43,56,49,43],
[58,42,46,49,57,62,53,55,0,60,53,55,53,48],
[54,43,42,44,53,54,46,57,41,0,44,57,53,42],
[54,47,43,47,62,51,53,58,48,57,0,67,51,49],
[46,37,35,33,41,52,48,45,46,44,34,0,41,38],
[48,38,46,42,58,52,55,52,48,48,50,60,0,39],
[55,46,47,49,59,74,62,58,53,59,52,63,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 161, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,60,54,47,47,58,51,54,54,44,55,55,63],
[49,0,56,50,43,50,57,47,55,47,54,51,56,65],
[41,45,0,43,40,45,54,40,48,44,42,45,39,51],
[47,51,58,0,43,55,53,57,50,49,49,58,43,63],
[54,58,61,58,0,63,59,49,62,56,47,57,50,63],
[54,51,56,46,38,0,54,37,55,45,45,52,50,59],
[43,44,47,48,42,47,0,44,53,39,40,44,47,65],
[50,54,61,44,52,64,57,0,54,52,52,53,55,62],
[47,46,53,51,39,46,48,47,0,45,49,53,48,56],
[47,54,57,52,45,56,62,49,56,0,49,55,50,61],
[57,47,59,52,54,56,61,49,52,52,0,61,54,69],
[46,50,56,43,44,49,57,48,48,46,40,0,46,59],
[46,45,62,58,51,51,54,46,53,51,47,55,0,61],
[38,36,50,38,38,42,36,39,45,40,32,42,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 162, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,54,43,60,62,82,82,41,63,57,82,60,63],
[60,0,46,68,60,68,65,63,66,82,76,60,55,68],
[47,55,0,62,93,56,62,82,60,66,60,76,58,52],
[58,33,39,0,93,68,73,93,38,88,66,54,39,44],
[41,41,8,8,0,46,56,41,41,66,41,47,23,33],
[39,33,45,33,55,0,49,77,41,72,47,35,20,28],
[19,36,39,28,45,52,0,53,22,72,47,50,45,39],
[19,38,19,8,60,24,48,0,41,25,22,25,25,28],
[60,35,41,63,60,60,79,60,0,60,63,46,41,60],
[38,19,35,13,35,29,29,76,41,0,13,48,0,3],
[44,25,41,35,60,54,54,79,38,88,0,54,20,30],
[19,41,25,47,54,66,51,76,55,53,47,0,6,53],
[41,46,43,62,78,81,56,76,60,101,81,95,0,81],
[38,33,49,57,68,73,62,73,41,98,71,48,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 163, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,58,68,61,63,48,56,53,54,51,54,57,51],
[44,0,61,41,50,56,46,64,41,57,60,48,51,41],
[43,40,0,31,47,41,40,45,37,47,44,52,46,37],
[33,60,70,0,50,47,52,57,42,58,57,50,48,46],
[40,51,54,51,0,49,52,53,45,51,44,54,54,49],
[38,45,60,54,52,0,50,49,49,43,56,55,50,48],
[53,55,61,49,49,51,0,54,47,49,54,58,57,53],
[45,37,56,44,48,52,47,0,45,37,51,60,53,43],
[48,60,64,59,56,52,54,56,0,52,53,55,57,49],
[47,44,54,43,50,58,52,64,49,0,44,49,46,45],
[50,41,57,44,57,45,47,50,48,57,0,53,50,55],
[47,53,49,51,47,46,43,41,46,52,48,0,60,47],
[44,50,55,53,47,51,44,48,44,55,51,41,0,51],
[50,60,64,55,52,53,48,58,52,56,46,54,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 164, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,40,40,42,40,100,25,64,86,74,57,75,88],
[15,0,18,41,17,18,75,25,51,31,45,14,32,76],
[61,83,0,53,77,71,100,39,76,90,91,70,91,88],
[61,60,48,0,60,60,100,60,59,90,74,61,60,71],
[59,84,24,41,0,11,100,25,74,100,89,58,89,76],
[61,83,30,41,90,0,100,25,64,90,79,58,79,76],
[1,26,1,1,1,1,0,26,14,31,14,1,1,49],
[76,76,62,41,76,76,75,0,61,75,76,75,76,76],
[37,50,25,42,27,37,87,40,0,54,55,25,37,76],
[15,70,11,11,1,11,70,26,47,0,72,58,35,59],
[27,56,10,27,12,22,87,25,46,29,0,44,47,87],
[44,87,31,40,43,43,100,26,76,43,57,0,43,88],
[26,69,10,41,12,22,100,25,64,66,54,58,0,75],
[13,25,13,30,25,25,52,25,25,42,14,13,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 165, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,55,63,72,69,69,64,63,57,74,64,74,46],
[38,0,48,39,61,54,46,57,59,47,62,46,63,29],
[46,53,0,48,61,72,59,56,62,55,51,62,63,46],
[38,62,53,0,45,48,35,54,50,40,61,44,60,48],
[29,40,40,56,0,56,48,54,52,31,56,41,66,39],
[32,47,29,53,45,0,44,59,48,40,47,59,47,47],
[32,55,42,66,53,57,0,52,61,46,71,59,60,55],
[37,44,45,47,47,42,49,0,39,47,56,46,58,38],
[38,42,39,51,49,53,40,62,0,39,62,39,56,42],
[44,54,46,61,70,61,55,54,62,0,73,62,74,44],
[27,39,50,40,45,54,30,45,39,28,0,33,48,46],
[37,55,39,57,60,42,42,55,62,39,68,0,62,46],
[27,38,38,41,35,54,41,43,45,27,53,39,0,43],
[55,72,55,53,62,54,46,63,59,57,55,55,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 166, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,49,54,30,60,49,43,43,64,70,41,63,75],
[60,0,76,93,53,54,55,76,70,76,34,50,51,77],
[52,25,0,54,28,65,57,66,65,87,46,41,68,51],
[47,8,47,0,28,50,35,72,71,72,24,8,46,46],
[71,48,73,73,0,60,75,69,67,96,70,54,64,94],
[41,47,36,51,41,0,36,47,47,53,46,53,42,58],
[52,46,44,66,26,65,0,63,81,82,40,40,63,50],
[58,25,35,29,32,54,38,0,44,71,45,31,40,57],
[58,31,36,30,34,54,20,57,0,88,46,23,68,56],
[37,25,14,29,5,48,19,30,13,0,24,1,47,36],
[31,67,55,77,31,55,61,56,55,77,0,49,30,48],
[60,51,60,93,47,48,61,70,78,100,52,0,68,78],
[38,50,33,55,37,59,38,61,33,54,71,33,0,76],
[26,24,50,55,7,43,51,44,45,65,53,23,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 167, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,45,51,60,47,51,45,46,45,47,44,56,47],
[41,0,44,44,48,45,44,38,44,48,47,38,43,42],
[56,57,0,55,57,52,52,52,55,54,57,50,61,51],
[50,57,46,0,60,53,57,55,47,53,55,47,56,49],
[41,53,44,41,0,39,53,44,42,49,46,43,46,41],
[54,56,49,48,62,0,48,48,48,57,54,38,46,49],
[50,57,49,44,48,53,0,50,51,53,51,51,48,44],
[56,63,49,46,57,53,51,0,61,58,57,47,60,44],
[55,57,46,54,59,53,50,40,0,53,54,45,52,39],
[56,53,47,48,52,44,48,43,48,0,51,42,46,43],
[54,54,44,46,55,47,50,44,47,50,0,51,49,45],
[57,63,51,54,58,63,50,54,56,59,50,0,57,51],
[45,58,40,45,55,55,53,41,49,55,52,44,0,40],
[54,59,50,52,60,52,57,57,62,58,56,50,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 168, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,40,67,24,43,53,58,58,67,81,96,63,54],
[23,0,5,42,24,24,19,24,34,43,47,71,5,24],
[61,96,0,62,43,67,77,48,58,67,61,96,29,44],
[34,59,39,0,53,6,53,40,58,64,76,35,63,34],
[77,77,58,48,0,25,72,83,58,83,77,77,82,77],
[58,77,34,95,76,0,52,81,58,83,76,77,58,77],
[48,82,24,48,29,49,0,49,63,49,48,77,48,48],
[43,77,53,61,18,20,52,0,58,49,61,77,77,43],
[43,67,43,43,43,43,38,43,0,43,67,38,66,43],
[34,58,34,37,18,18,52,52,58,0,76,53,58,53],
[20,54,40,25,24,25,53,40,34,25,0,54,39,54],
[5,30,5,66,24,24,24,24,63,48,47,0,29,24],
[38,96,72,38,19,43,53,24,35,43,62,72,0,38],
[47,77,57,67,24,24,53,58,58,48,47,77,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 169, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,73,42,42,42,42,68,42,42,33,42,68,42],
[33,0,75,47,47,28,54,75,33,42,54,75,59,63],
[28,26,0,0,21,21,7,75,0,0,7,0,26,0],
[59,54,101,0,28,28,49,75,33,42,38,96,59,68],
[59,54,80,73,0,49,54,75,54,68,80,80,59,68],
[59,73,80,73,52,0,80,75,31,68,59,73,52,68],
[59,47,94,52,47,21,0,75,26,89,59,89,52,89],
[33,26,26,26,26,26,26,0,5,21,33,26,5,21],
[59,68,101,68,47,70,75,96,0,63,80,94,73,63],
[59,59,101,59,33,33,12,80,38,0,59,80,38,54],
[68,47,94,63,21,42,42,68,21,42,0,63,47,42],
[59,26,101,5,21,28,12,75,7,21,38,0,31,21],
[33,42,75,42,42,49,49,96,28,63,54,70,0,63],
[59,38,101,33,33,33,12,80,38,47,59,80,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 170, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,44,73,80,66,45,47,58,64,51,45,41,51],
[45,0,30,62,65,58,57,50,42,62,57,48,46,44],
[57,71,0,57,79,54,54,49,53,77,66,55,45,49],
[28,39,44,0,42,24,48,45,33,50,43,25,32,21],
[21,36,22,59,0,48,42,45,37,28,36,26,14,27],
[35,43,47,77,53,0,56,43,42,55,52,46,24,28],
[56,44,47,53,59,45,0,52,53,58,41,52,39,35],
[54,51,52,56,56,58,49,0,54,62,56,45,18,30],
[43,59,48,68,64,59,48,47,0,61,52,35,28,45],
[37,39,24,51,73,46,43,39,40,0,48,30,34,46],
[50,44,35,58,65,49,60,45,49,53,0,30,24,37],
[56,53,46,76,75,55,49,56,66,71,71,0,51,52],
[60,55,56,69,87,77,62,83,73,67,77,50,0,50],
[50,57,52,80,74,73,66,71,56,55,64,49,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 171, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,49,34,50,42,52,45,44,44,52,44,37,51],
[46,0,44,39,39,43,48,36,45,40,53,45,43,48],
[52,57,0,40,54,41,42,34,42,45,42,47,45,49],
[67,62,61,0,58,53,56,46,56,53,54,53,57,57],
[51,62,47,43,0,47,55,42,47,40,52,50,42,53],
[59,58,60,48,54,0,50,41,56,51,51,50,43,59],
[49,53,59,45,46,51,0,36,44,45,51,49,42,48],
[56,65,67,55,59,60,65,0,46,52,54,62,60,60],
[57,56,59,45,54,45,57,55,0,55,53,50,51,55],
[57,61,56,48,61,50,56,49,46,0,56,55,47,54],
[49,48,59,47,49,50,50,47,48,45,0,44,46,50],
[57,56,54,48,51,51,52,39,51,46,57,0,49,58],
[64,58,56,44,59,58,59,41,50,54,55,52,0,54],
[50,53,52,44,48,42,53,41,46,47,51,43,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 172, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,52,47,43,46,33,38,50,45,41,43,40,42],
[51,0,57,56,47,54,37,44,55,48,41,57,45,44],
[49,44,0,47,45,58,46,41,44,46,49,50,45,41],
[54,45,54,0,52,58,48,52,56,51,36,43,57,42],
[58,54,56,49,0,58,45,54,57,53,48,52,50,47],
[55,47,43,43,43,0,42,45,42,40,40,41,48,40],
[68,64,55,53,56,59,0,48,55,53,52,53,60,49],
[63,57,60,49,47,56,53,0,57,55,49,54,48,51],
[51,46,57,45,44,59,46,44,0,51,35,42,38,35],
[56,53,55,50,48,61,48,46,50,0,38,47,49,45],
[60,60,52,65,53,61,49,52,66,63,0,45,57,42],
[58,44,51,58,49,60,48,47,59,54,56,0,53,50],
[61,56,56,44,51,53,41,53,63,52,44,48,0,52],
[59,57,60,59,54,61,52,50,66,56,59,51,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 173, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,68,64,77,67,61,75,72,73,55,81,74,47],
[28,0,64,36,30,41,31,37,43,33,36,35,37,35],
[33,37,0,38,10,27,23,36,32,36,13,35,20,34],
[37,65,63,0,57,36,40,58,68,59,44,50,48,69],
[24,71,91,44,0,56,44,60,53,54,58,40,46,54],
[34,60,74,65,45,0,28,53,44,52,29,31,37,50],
[40,70,78,61,57,73,0,58,72,52,58,57,51,56],
[26,64,65,43,41,48,43,0,52,50,40,49,41,57],
[29,58,69,33,48,57,29,49,0,53,41,46,41,27],
[28,68,65,42,47,49,49,51,48,0,44,48,30,50],
[46,65,88,57,43,72,43,61,60,57,0,50,55,56],
[20,66,66,51,61,70,44,52,55,53,51,0,43,49],
[27,64,81,53,55,64,50,60,60,71,46,58,0,56],
[54,66,67,32,47,51,45,44,74,51,45,52,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 174, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,39,51,50,56,49,59,52,54,56,52,52,60],
[47,0,37,50,52,61,47,56,54,58,53,50,50,55],
[62,64,0,54,57,59,49,68,61,61,54,52,51,58],
[50,51,47,0,54,59,47,52,55,58,49,53,44,56],
[51,49,44,47,0,65,53,60,53,59,60,48,46,51],
[45,40,42,42,36,0,34,47,39,45,46,40,42,46],
[52,54,52,54,48,67,0,58,52,55,58,57,48,51],
[42,45,33,49,41,54,43,0,51,47,45,52,46,42],
[49,47,40,46,48,62,49,50,0,50,50,51,42,47],
[47,43,40,43,42,56,46,54,51,0,46,50,45,46],
[45,48,47,52,41,55,43,56,51,55,0,53,45,46],
[49,51,49,48,53,61,44,49,50,51,48,0,45,51],
[49,51,50,57,55,59,53,55,59,56,56,56,0,60],
[41,46,43,45,50,55,50,59,54,55,55,50,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 175, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,40,49,47,50,52,48,49,52,48,50,39,55],
[49,0,46,45,45,49,49,44,50,49,50,51,41,48],
[61,55,0,50,48,54,54,46,57,54,53,43,45,52],
[52,56,51,0,50,50,50,49,49,55,44,50,40,52],
[54,56,53,51,0,58,51,47,55,60,53,49,47,49],
[51,52,47,51,43,0,51,41,53,56,59,52,46,47],
[49,52,47,51,50,50,0,51,48,49,50,47,45,48],
[53,57,55,52,54,60,50,0,52,60,55,53,54,52],
[52,51,44,52,46,48,53,49,0,52,47,47,40,49],
[49,52,47,46,41,45,52,41,49,0,45,46,41,46],
[53,51,48,57,48,42,51,46,54,56,0,46,45,52],
[51,50,58,51,52,49,54,48,54,55,55,0,47,49],
[62,60,56,61,54,55,56,47,61,60,56,54,0,59],
[46,53,49,49,52,54,53,49,52,55,49,52,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 176, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,71,101,21,71,101,51,101,21,21,71,101,71],
[0,0,21,21,21,0,51,0,21,21,21,21,21,21],
[30,80,0,30,0,50,80,30,80,0,0,50,30,101],
[0,80,71,0,0,50,80,30,80,0,0,50,30,71],
[80,80,101,101,0,50,101,80,80,101,30,50,80,101],
[30,101,51,51,51,0,51,30,51,51,51,21,51,51],
[0,50,21,21,0,50,0,0,0,0,0,0,0,21],
[50,101,71,71,21,71,101,0,71,21,21,71,71,71],
[0,80,21,21,21,50,101,30,0,21,21,50,51,21],
[80,80,101,101,0,50,101,80,80,0,0,50,80,101],
[80,80,101,101,71,50,101,80,80,101,0,50,80,101],
[30,80,51,51,51,80,101,30,51,51,51,0,51,51],
[0,80,71,71,21,50,101,30,50,21,21,50,0,71],
[30,80,0,30,0,50,80,30,80,0,0,50,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 177, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,56,42,46,51,74,49,49,49,40,55,52,31],
[41,0,44,40,46,42,52,39,46,46,32,45,31,25],
[45,57,0,47,49,58,53,43,40,44,34,52,49,28],
[59,61,54,0,52,70,66,57,56,64,27,59,55,36],
[55,55,52,49,0,51,62,44,50,48,30,61,55,51],
[50,59,43,31,50,0,54,46,42,51,36,52,42,29],
[27,49,48,35,39,47,0,41,40,49,34,54,45,29],
[52,62,58,44,57,55,60,0,46,49,35,61,57,40],
[52,55,61,45,51,59,61,55,0,61,44,50,56,24],
[52,55,57,37,53,50,52,52,40,0,32,49,42,33],
[61,69,67,74,71,65,67,66,57,69,0,58,56,46],
[46,56,49,42,40,49,47,40,51,52,43,0,54,35],
[49,70,52,46,46,59,56,44,45,59,45,47,0,38],
[70,76,73,65,50,72,72,61,77,68,55,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 178, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,52,56,48,61,46,55,58,51,47,48,61,41],
[45,0,46,46,40,50,39,36,39,38,50,28,43,47],
[49,55,0,51,35,60,46,45,55,58,54,52,61,48],
[45,55,50,0,37,53,43,50,54,45,54,45,58,46],
[53,61,66,64,0,62,49,43,57,68,56,49,69,50],
[40,51,41,48,39,0,45,33,55,50,52,42,56,35],
[55,62,55,58,52,56,0,51,69,64,58,49,57,47],
[46,65,56,51,58,68,50,0,66,58,55,52,64,58],
[43,62,46,47,44,46,32,35,0,55,49,33,62,43],
[50,63,43,56,33,51,37,43,46,0,43,29,58,47],
[54,51,47,47,45,49,43,46,52,58,0,41,51,42],
[53,73,49,56,52,59,52,49,68,72,60,0,72,56],
[40,58,40,43,32,45,44,37,39,43,50,29,0,42],
[60,54,53,55,51,66,54,43,58,54,59,45,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 179, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,52,51,51,44,42,54,62,51,51,65,62,59],
[64,0,53,33,47,50,56,57,72,45,53,58,57,40],
[49,48,0,44,56,35,51,57,59,50,35,34,61,47],
[50,68,57,0,50,54,60,68,86,67,72,60,65,72],
[50,54,45,51,0,43,63,52,64,59,46,54,57,47],
[57,51,66,47,58,0,46,55,70,58,59,52,53,54],
[59,45,50,41,38,55,0,40,58,68,52,64,69,54],
[47,44,44,33,49,46,61,0,70,46,53,61,61,46],
[39,29,42,15,37,31,43,31,0,50,28,34,46,23],
[50,56,51,34,42,43,33,55,51,0,48,50,51,37],
[50,48,66,29,55,42,49,48,73,53,0,53,58,45],
[36,43,67,41,47,49,37,40,67,51,48,0,55,47],
[39,44,40,36,44,48,32,40,55,50,43,46,0,33],
[42,61,54,29,54,47,47,55,78,64,56,54,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 180, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,60,61,55,53,50,57,63,47,59,59,59,52],
[19,0,42,28,26,32,24,30,23,35,27,34,32,35],
[41,59,0,42,38,42,44,41,34,42,35,58,50,41],
[40,73,59,0,49,44,49,36,34,47,51,56,53,49],
[46,75,63,52,0,51,57,45,42,42,44,57,46,44],
[48,69,59,57,50,0,50,59,54,62,44,58,59,56],
[51,77,57,52,44,51,0,49,49,51,50,51,65,59],
[44,71,60,65,56,42,52,0,48,53,64,56,71,71],
[38,78,67,67,59,47,52,53,0,44,61,66,64,54],
[54,66,59,54,59,39,50,48,57,0,50,44,61,39],
[42,74,66,50,57,57,51,37,40,51,0,71,50,43],
[42,67,43,45,44,43,50,45,35,57,30,0,49,30],
[42,69,51,48,55,42,36,30,37,40,51,52,0,52],
[49,66,60,52,57,45,42,30,47,62,58,71,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 181, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,41,51,35,26,30,44,53,40,43,34,28,35],
[47,0,45,58,44,44,47,46,53,43,50,51,39,44],
[60,56,0,52,36,44,41,53,68,51,54,48,49,59],
[50,43,49,0,29,28,43,42,61,29,34,52,42,30],
[66,57,65,72,0,44,62,46,65,57,74,53,71,58],
[75,57,57,73,57,0,60,53,59,49,72,46,51,65],
[71,54,60,58,39,41,0,46,70,57,60,56,38,55],
[57,55,48,59,55,48,55,0,52,56,63,52,62,49],
[48,48,33,40,36,42,31,49,0,36,49,29,35,35],
[61,58,50,72,44,52,44,45,65,0,47,49,44,37],
[58,51,47,67,27,29,41,38,52,54,0,43,39,35],
[67,50,53,49,48,55,45,49,72,52,58,0,43,45],
[73,62,52,59,30,50,63,39,66,57,62,58,0,48],
[66,57,42,71,43,36,46,52,66,64,66,56,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 182, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,62,71,87,77,64,74,81,85,39,70,57,35],
[4,0,51,27,64,54,28,41,48,63,18,35,23,22],
[39,50,0,36,40,65,49,61,55,51,50,50,42,33],
[30,74,65,0,65,71,59,92,61,54,46,61,49,36],
[14,37,61,36,0,49,36,65,44,67,26,44,32,32],
[24,47,36,30,52,0,65,64,44,54,41,9,44,20],
[37,73,52,42,65,36,0,78,48,74,44,36,34,56],
[27,60,40,9,36,37,23,0,36,51,39,13,23,12],
[20,53,46,40,57,57,53,65,0,43,42,40,60,42],
[16,38,50,47,34,47,27,50,58,0,27,23,35,12],
[62,83,51,55,75,60,57,62,59,74,0,59,46,35],
[31,66,51,40,57,92,65,88,61,78,42,0,46,21],
[44,78,59,52,69,57,67,78,41,66,55,55,0,38],
[66,79,68,65,69,81,45,89,59,89,66,80,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 183, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,37,57,45,51,22,59,12,43,51,35,49,48],
[40,0,47,50,64,64,47,64,26,58,64,33,64,64],
[64,54,0,75,66,80,12,45,40,27,55,47,47,66],
[44,51,26,0,43,46,22,26,26,24,24,26,25,32],
[56,37,35,58,0,74,27,64,23,37,56,46,41,59],
[50,37,21,55,27,0,1,38,38,23,27,21,16,38],
[79,54,89,79,74,100,0,60,65,41,73,57,65,78],
[42,37,56,75,37,63,41,0,29,48,52,18,35,76],
[89,75,61,75,78,63,36,72,0,44,56,72,56,68],
[58,43,74,77,64,78,60,53,57,0,46,47,64,84],
[50,37,46,77,45,74,28,49,45,55,0,27,27,61],
[66,68,54,75,55,80,44,83,29,54,74,0,47,78],
[52,37,54,76,60,85,36,66,45,37,74,54,0,69],
[53,37,35,69,42,63,23,25,33,17,40,23,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 184, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,41,39,38,48,55,36,51,54,38,51,49,54],
[63,0,53,55,53,61,59,49,58,64,58,68,53,55],
[60,48,0,52,43,51,56,48,60,62,47,62,51,55],
[62,46,49,0,45,58,57,53,65,57,52,56,56,60],
[63,48,58,56,0,62,59,46,61,59,59,66,57,64],
[53,40,50,43,39,0,55,51,63,52,48,42,47,46],
[46,42,45,44,42,46,0,37,53,51,55,52,49,48],
[65,52,53,48,55,50,64,0,63,60,50,59,63,60],
[50,43,41,36,40,38,48,38,0,55,47,50,40,49],
[47,37,39,44,42,49,50,41,46,0,50,52,45,50],
[63,43,54,49,42,53,46,51,54,51,0,51,56,51],
[50,33,39,45,35,59,49,42,51,49,50,0,40,48],
[52,48,50,45,44,54,52,38,61,56,45,61,0,51],
[47,46,46,41,37,55,53,41,52,51,50,53,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 185, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,55,53,49,55,59,55,58,54,55,56,51,54],
[40,0,47,52,49,48,51,43,52,44,47,50,51,49],
[46,54,0,61,46,46,51,54,53,49,47,45,47,47],
[48,49,40,0,46,50,47,44,46,47,41,45,47,48],
[52,52,55,55,0,50,49,51,58,52,54,49,45,46],
[46,53,55,51,51,0,47,56,56,52,54,50,49,51],
[42,50,50,54,52,54,0,46,54,46,46,48,44,48],
[46,58,47,57,50,45,55,0,52,43,53,49,48,48],
[43,49,48,55,43,45,47,49,0,44,44,42,44,51],
[47,57,52,54,49,49,55,58,57,0,55,48,46,53],
[46,54,54,60,47,47,55,48,57,46,0,47,51,54],
[45,51,56,56,52,51,53,52,59,53,54,0,40,46],
[50,50,54,54,56,52,57,53,57,55,50,61,0,52],
[47,52,54,53,55,50,53,53,50,48,47,55,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 186, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,45,53,51,48,51,50,44,54,48,53,48,50],
[53,0,45,58,50,55,51,50,54,48,50,45,53,53],
[56,56,0,60,47,55,53,53,46,61,56,47,57,52],
[48,43,41,0,47,45,42,43,39,50,45,42,44,46],
[50,51,54,54,0,56,53,51,48,58,53,48,51,51],
[53,46,46,56,45,0,49,50,49,59,59,50,48,48],
[50,50,48,59,48,52,0,48,46,57,42,46,52,44],
[51,51,48,58,50,51,53,0,40,55,52,53,52,49],
[57,47,55,62,53,52,55,61,0,65,56,54,50,60],
[47,53,40,51,43,42,44,46,36,0,48,49,43,37],
[53,51,45,56,48,42,59,49,45,53,0,54,49,46],
[48,56,54,59,53,51,55,48,47,52,47,0,50,45],
[53,48,44,57,50,53,49,49,51,58,52,51,0,52],
[51,48,49,55,50,53,57,52,41,64,55,56,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 187, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,45,54,34,25,40,55,24,48,37,40,35,41],
[58,0,42,45,40,56,58,55,41,40,43,47,50,49],
[56,59,0,54,45,60,50,66,52,44,50,58,46,41],
[47,56,47,0,48,37,38,53,33,49,31,52,42,36],
[67,61,56,53,0,40,62,64,47,62,54,58,53,51],
[76,45,41,64,61,0,38,60,43,65,52,58,43,54],
[61,43,51,63,39,63,0,54,55,55,57,61,33,50],
[46,46,35,48,37,41,47,0,42,53,45,63,49,41],
[77,60,49,68,54,58,46,59,0,67,66,74,47,59],
[53,61,57,52,39,36,46,48,34,0,44,54,32,48],
[64,58,51,70,47,49,44,56,35,57,0,60,34,53],
[61,54,43,49,43,43,40,38,27,47,41,0,31,36],
[66,51,55,59,48,58,68,52,54,69,67,70,0,63],
[60,52,60,65,50,47,51,60,42,53,48,65,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 188, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,60,47,60,47,49,57,44,54,43,40,61,53],
[51,0,58,48,52,52,42,58,43,51,44,55,51,51],
[41,43,0,43,49,46,40,49,43,42,37,41,46,50],
[54,53,58,0,55,46,45,54,54,53,51,44,55,58],
[41,49,52,46,0,48,45,55,44,45,39,36,51,50],
[54,49,55,55,53,0,49,52,51,51,47,45,57,48],
[52,59,61,56,56,52,0,60,45,64,47,48,59,53],
[44,43,52,47,46,49,41,0,35,52,35,45,42,51],
[57,58,58,47,57,50,56,66,0,60,44,51,61,56],
[47,50,59,48,56,50,37,49,41,0,36,41,46,52],
[58,57,64,50,62,54,54,66,57,65,0,57,59,61],
[61,46,60,57,65,56,53,56,50,60,44,0,56,60],
[40,50,55,46,50,44,42,59,40,55,42,45,0,52],
[48,50,51,43,51,53,48,50,45,49,40,41,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 189, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,47,45,40,43,49,63,38,38,62,54,43,53],
[66,0,52,63,56,48,51,50,45,44,49,56,49,43],
[54,49,0,69,59,65,56,66,50,53,54,54,50,65],
[56,38,32,0,51,28,31,54,38,47,46,56,43,52],
[61,45,42,50,0,44,45,67,55,44,67,65,54,59],
[58,53,36,73,57,0,46,73,49,43,67,60,55,59],
[52,50,45,70,56,55,0,70,51,46,51,59,51,53],
[38,51,35,47,34,28,31,0,36,33,49,40,25,42],
[63,56,51,63,46,52,50,65,0,45,56,60,50,57],
[63,57,48,54,57,58,55,68,56,0,59,58,63,61],
[39,52,47,55,34,34,50,52,45,42,0,42,34,54],
[47,45,47,45,36,41,42,61,41,43,59,0,46,47],
[58,52,51,58,47,46,50,76,51,38,67,55,0,62],
[48,58,36,49,42,42,48,59,44,40,47,54,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 190, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,36,55,40,68,38,28,41,41,56,37,43,55],
[51,0,60,73,63,60,52,48,67,33,53,48,51,65],
[65,41,0,61,55,53,51,47,55,49,30,28,50,53],
[46,28,40,0,34,50,57,55,41,47,39,49,58,46],
[61,38,46,67,0,61,48,42,62,45,57,50,60,53],
[33,41,48,51,40,0,33,48,55,30,33,41,37,50],
[63,49,50,44,53,68,0,65,61,51,46,53,60,52],
[73,53,54,46,59,53,36,0,50,38,51,36,49,52],
[60,34,46,60,39,46,40,51,0,46,40,39,42,60],
[60,68,52,54,56,71,50,63,55,0,53,38,48,57],
[45,48,71,62,44,68,55,50,61,48,0,50,43,55],
[64,53,73,52,51,60,48,65,62,63,51,0,52,48],
[58,50,51,43,41,64,41,52,59,53,58,49,0,57],
[46,36,48,55,48,51,49,49,41,44,46,53,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 191, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,63,52,55,45,53,59,58,56,42,62,50,52],
[45,0,54,43,58,64,56,50,56,60,56,59,54,65],
[38,47,0,46,47,47,50,53,51,51,41,56,44,47],
[49,58,55,0,53,56,60,57,57,50,52,56,50,62],
[46,43,54,48,0,50,50,49,46,53,40,63,48,41],
[56,37,54,45,51,0,44,54,52,45,43,53,49,39],
[48,45,51,41,51,57,0,52,51,50,47,51,47,48],
[42,51,48,44,52,47,49,0,47,53,49,48,47,52],
[43,45,50,44,55,49,50,54,0,51,51,54,45,52],
[45,41,50,51,48,56,51,48,50,0,43,59,43,54],
[59,45,60,49,61,58,54,52,50,58,0,57,59,56],
[39,42,45,45,38,48,50,53,47,42,44,0,34,48],
[51,47,57,51,53,52,54,54,56,58,42,67,0,60],
[49,36,54,39,60,62,53,49,49,47,45,53,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 192, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,37,60,43,51,53,53,47,50,39,36,50,31],
[57,0,58,47,60,48,63,35,41,51,51,48,66,44],
[64,43,0,72,52,47,73,53,54,53,50,34,63,36],
[41,54,29,0,47,19,39,28,33,66,38,16,64,34],
[58,41,49,54,0,56,47,34,56,67,34,41,51,39],
[50,53,54,82,45,0,69,46,46,68,46,45,76,49],
[48,38,28,62,54,32,0,31,54,52,28,31,58,31],
[48,66,48,73,67,55,70,0,58,46,44,56,76,42],
[54,60,47,68,45,55,47,43,0,45,52,39,82,24],
[51,50,48,35,34,33,49,55,56,0,42,26,61,46],
[62,50,51,63,67,55,73,57,49,59,0,44,59,54],
[65,53,67,85,60,56,70,45,62,75,57,0,87,69],
[51,35,38,37,50,25,43,25,19,40,42,14,0,23],
[70,57,65,67,62,52,70,59,77,55,47,32,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 193, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,49,71,49,50,51,47,57,50,65,45,59,51],
[55,0,44,67,55,45,56,45,50,62,66,49,36,35],
[52,57,0,61,43,69,47,56,41,51,65,39,66,48],
[30,34,40,0,22,42,26,40,39,37,26,25,34,36],
[52,46,58,79,0,66,54,59,59,59,52,47,56,40],
[51,56,32,59,35,0,47,62,50,51,56,41,49,49],
[50,45,54,75,47,54,0,43,48,44,51,36,60,43],
[54,56,45,61,42,39,58,0,58,53,66,43,51,41],
[44,51,60,62,42,51,53,43,0,46,67,52,59,54],
[51,39,50,64,42,50,57,48,55,0,57,48,44,45],
[36,35,36,75,49,45,50,35,34,44,0,33,40,23],
[56,52,62,76,54,60,65,58,49,53,68,0,55,46],
[42,65,35,67,45,52,41,50,42,57,61,46,0,53],
[50,66,53,65,61,52,58,60,47,56,78,55,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 194, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,59,44,46,41,48,56,63,48,38,54,59,50],
[44,0,42,39,52,36,36,38,55,36,44,46,51,38],
[42,59,0,64,57,58,42,49,56,51,48,51,55,49],
[57,62,37,0,49,43,46,42,58,47,45,46,52,50],
[55,49,44,52,0,49,42,57,41,43,53,40,47,50],
[60,65,43,58,52,0,43,45,64,51,58,56,60,44],
[53,65,59,55,59,58,0,57,65,58,46,60,59,51],
[45,63,52,59,44,56,44,0,53,50,50,56,59,47],
[38,46,45,43,60,37,36,48,0,35,34,36,48,32],
[53,65,50,54,58,50,43,51,66,0,58,48,54,54],
[63,57,53,56,48,43,55,51,67,43,0,50,57,46],
[47,55,50,55,61,45,41,45,65,53,51,0,54,59],
[42,50,46,49,54,41,42,42,53,47,44,47,0,39],
[51,63,52,51,51,57,50,54,69,47,55,42,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 195, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,45,45,63,59,47,29,70,36,68,39,54,22],
[50,0,48,68,40,45,62,52,61,43,91,47,45,37],
[56,53,0,60,65,61,49,53,60,28,82,38,69,30],
[56,33,41,0,46,32,47,32,38,53,44,24,24,31],
[38,61,36,55,0,62,47,39,29,44,69,40,28,29],
[42,56,40,69,39,0,71,46,53,53,83,56,37,29],
[54,39,52,54,54,30,0,22,52,51,68,39,46,31],
[72,49,48,69,62,55,79,0,54,69,74,52,54,39],
[31,40,41,63,72,48,49,47,0,31,63,57,39,32],
[65,58,73,48,57,48,50,32,70,0,71,34,57,34],
[33,10,19,57,32,18,33,27,38,30,0,32,32,17],
[62,54,63,77,61,45,62,49,44,67,69,0,47,53],
[47,56,32,77,73,64,55,47,62,44,69,54,0,49],
[79,64,71,70,72,72,70,62,69,67,84,48,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 196, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,42,48,47,45,49,46,51,44,39,50,48,50],
[54,0,49,59,55,49,50,55,57,53,59,55,52,54],
[59,52,0,56,56,63,48,57,55,63,58,56,59,55],
[53,42,45,0,52,49,47,53,44,52,53,48,53,46],
[54,46,45,49,0,57,49,55,51,58,60,46,53,46],
[56,52,38,52,44,0,48,47,51,50,57,52,47,48],
[52,51,53,54,52,53,0,54,57,55,56,50,55,53],
[55,46,44,48,46,54,47,0,48,56,55,51,53,60],
[50,44,46,57,50,50,44,53,0,48,53,50,44,47],
[57,48,38,49,43,51,46,45,53,0,51,49,47,46],
[62,42,43,48,41,44,45,46,48,50,0,44,49,51],
[51,46,45,53,55,49,51,50,51,52,57,0,51,53],
[53,49,42,48,48,54,46,48,57,54,52,50,0,55],
[51,47,46,55,55,53,48,41,54,55,50,48,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 197, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,66,47,75,83,82,76,75,90,69,61,79,83],
[24,0,63,28,60,72,58,63,72,70,46,46,36,49],
[35,38,0,25,44,31,38,48,37,38,36,40,57,53],
[54,73,76,0,50,53,93,73,73,90,69,58,69,84],
[26,41,57,51,0,70,83,90,78,88,64,48,63,59],
[18,29,70,48,31,0,50,64,50,72,58,50,56,44],
[19,43,63,8,18,51,0,57,55,56,38,45,53,39],
[25,38,53,28,11,37,44,0,46,42,41,37,42,49],
[26,29,64,28,23,51,46,55,0,65,61,36,63,39],
[11,31,63,11,13,29,45,59,36,0,33,27,57,48],
[32,55,65,32,37,43,63,60,40,68,0,32,78,43],
[40,55,61,43,53,51,56,64,65,74,69,0,83,72],
[22,65,44,32,38,45,48,59,38,44,23,18,0,66],
[18,52,48,17,42,57,62,52,62,53,58,29,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 198, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,59,56,49,54,63,70,59,61,41,48,59],
[32,0,40,35,42,35,44,39,46,31,44,36,31,35],
[30,61,0,41,39,25,41,35,50,39,45,40,36,37],
[42,66,60,0,50,41,58,51,58,52,57,47,42,53],
[45,59,62,51,0,38,43,57,54,48,54,48,52,46],
[52,66,76,60,63,0,60,60,56,49,66,52,52,58],
[47,57,60,43,58,41,0,44,51,40,45,44,45,60],
[38,62,66,50,44,41,57,0,71,50,47,38,38,42],
[31,55,51,43,47,45,50,30,0,43,47,34,34,46],
[42,70,62,49,53,52,61,51,58,0,57,35,46,45],
[40,57,56,44,47,35,56,54,54,44,0,41,32,41],
[60,65,61,54,53,49,57,63,67,66,60,0,51,54],
[53,70,65,59,49,49,56,63,67,55,69,50,0,57],
[42,66,64,48,55,43,41,59,55,56,60,47,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 199, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,55,52,63,56,51,56,45,49,56,48,52,52],
[46,0,36,35,58,41,53,44,36,37,56,32,37,48],
[46,65,0,43,59,46,47,50,49,44,53,48,41,50],
[49,66,58,0,68,53,51,47,54,50,60,47,51,55],
[38,43,42,33,0,46,44,47,36,48,52,34,52,44],
[45,60,55,48,55,0,46,56,48,53,64,41,44,55],
[50,48,54,50,57,55,0,53,48,41,67,49,51,48],
[45,57,51,54,54,45,48,0,51,50,57,54,51,59],
[56,65,52,47,65,53,53,50,0,55,53,43,54,57],
[52,64,57,51,53,48,60,51,46,0,64,43,59,52],
[45,45,48,41,49,37,34,44,48,37,0,39,49,39],
[53,69,53,54,67,60,52,47,58,58,62,0,65,55],
[49,64,60,50,49,57,50,50,47,42,52,36,0,44],
[49,53,51,46,57,46,53,42,44,49,62,46,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 101, 200, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/me/me_14_101.csv", index=False, header=False)
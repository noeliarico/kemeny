
import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,530,537,493,524,476,512,530,501,514,496,510],
[470,0,523,481,478,489,486,511,500,457,483,489],
[463,477,0,454,459,463,477,482,449,464,450,479],
[507,519,546,0,520,498,549,497,491,500,490,510],
[476,522,541,480,0,457,507,524,476,480,479,513],
[524,511,537,502,543,0,521,511,483,522,508,534],
[488,514,523,451,493,479,0,496,491,494,451,470],
[470,489,518,503,476,489,504,0,471,505,467,494],
[499,500,551,509,524,517,509,529,0,524,489,513],
[486,543,536,500,520,478,506,495,476,0,451,481],
[504,517,550,510,521,492,549,533,511,549,0,524],
[490,511,521,490,487,466,530,506,487,519,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 1, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,459,480,451,450,467,468,437,478,457,466],
[517,0,475,529,527,489,508,527,489,525,501,489],
[541,525,0,534,506,514,518,545,496,540,492,487],
[520,471,466,0,469,494,465,507,461,484,475,455],
[549,473,494,531,0,488,481,491,509,489,484,490],
[550,511,486,506,512,0,522,499,503,490,495,490],
[533,492,482,535,519,478,0,513,470,508,481,495],
[532,473,455,493,509,501,487,0,475,503,477,493],
[563,511,504,539,491,497,530,525,0,522,501,503],
[522,475,460,516,511,510,492,497,478,0,481,480],
[543,499,508,525,516,505,519,523,499,519,0,491],
[534,511,513,545,510,510,505,507,497,520,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 2, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,517,497,503,498,533,474,535,471,493,529],
[512,0,515,475,514,514,520,482,514,490,516,514],
[483,485,0,501,500,470,549,497,522,523,482,544],
[503,525,499,0,480,500,506,459,495,490,480,503],
[497,486,500,520,0,513,536,504,537,506,506,490],
[502,486,530,500,487,0,526,480,525,471,504,515],
[467,480,451,494,464,474,0,448,483,455,471,508],
[526,518,503,541,496,520,552,0,548,511,501,534],
[465,486,478,505,463,475,517,452,0,455,462,459],
[529,510,477,510,494,529,545,489,545,0,540,516],
[507,484,518,520,494,496,529,499,538,460,0,513],
[471,486,456,497,510,485,492,466,541,484,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 3, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,500,474,467,468,515,502,503,487,533,491],
[512,0,515,508,482,515,512,499,514,490,537,541],
[500,485,0,495,491,468,510,496,509,489,494,497],
[526,492,505,0,506,518,496,505,503,530,529,519],
[533,518,509,494,0,513,525,516,501,541,546,528],
[532,485,532,482,487,0,520,527,509,509,532,533],
[485,488,490,504,475,480,0,495,500,502,523,510],
[498,501,504,495,484,473,505,0,525,497,491,509],
[497,486,491,497,499,491,500,475,0,502,489,492],
[513,510,511,470,459,491,498,503,498,0,487,521],
[467,463,506,471,454,468,477,509,511,513,0,491],
[509,459,503,481,472,467,490,491,508,479,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 4, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,472,510,473,507,492,526,481,505,487,536],
[536,0,501,503,494,527,523,508,526,545,503,543],
[528,499,0,538,532,540,514,546,518,542,523,557],
[490,497,462,0,496,499,505,488,457,514,482,510],
[527,506,468,504,0,528,513,524,502,517,517,522],
[493,473,460,501,472,0,497,513,486,499,479,511],
[508,477,486,495,487,503,0,513,485,507,512,527],
[474,492,454,512,476,487,487,0,467,504,460,497],
[519,474,482,543,498,514,515,533,0,543,513,570],
[495,455,458,486,483,501,493,496,457,0,459,508],
[513,497,477,518,483,521,488,540,487,541,0,533],
[464,457,443,490,478,489,473,503,430,492,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 5, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,530,495,472,439,466,503,406,481,520,433],
[537,0,587,608,561,469,496,542,528,604,556,515],
[470,413,0,585,386,343,401,515,439,469,442,477],
[505,392,415,0,367,373,399,434,408,525,384,330],
[528,439,614,633,0,466,528,513,488,591,519,455],
[561,531,657,627,534,0,506,560,522,579,602,490],
[534,504,599,601,472,494,0,521,379,535,438,476],
[497,458,485,566,487,440,479,0,459,580,473,518],
[594,472,561,592,512,478,621,541,0,618,533,550],
[519,396,531,475,409,421,465,420,382,0,410,447],
[480,444,558,616,481,398,562,527,467,590,0,499],
[567,485,523,670,545,510,524,482,450,553,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 6, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,478,541,524,480,498,470,507,575,452,490],
[553,0,476,550,580,546,496,534,490,614,490,555],
[522,524,0,549,610,523,496,567,478,576,508,554],
[459,450,451,0,528,502,478,482,471,512,487,483],
[476,420,390,472,0,449,438,493,412,493,463,461],
[520,454,477,498,551,0,478,534,454,545,487,504],
[502,504,504,522,562,522,0,485,478,523,514,512],
[530,466,433,518,507,466,515,0,471,502,476,475],
[493,510,522,529,588,546,522,529,0,550,493,537],
[425,386,424,488,507,455,477,498,450,0,455,470],
[548,510,492,513,537,513,486,524,507,545,0,490],
[510,445,446,517,539,496,488,525,463,530,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 7, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,513,505,505,486,521,501,508,505,500,498],
[494,0,494,477,476,483,492,485,497,471,479,509],
[487,506,0,468,467,476,485,492,498,467,501,461],
[495,523,532,0,501,523,521,489,511,505,507,516],
[495,524,533,499,0,506,503,469,497,475,501,511],
[514,517,524,477,494,0,502,504,497,465,525,508],
[479,508,515,479,497,498,0,530,508,467,493,520],
[499,515,508,511,531,496,470,0,495,471,480,499],
[492,503,502,489,503,503,492,505,0,481,498,482],
[495,529,533,495,525,535,533,529,519,0,526,497],
[500,521,499,493,499,475,507,520,502,474,0,513],
[502,491,539,484,489,492,480,501,518,503,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 8, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,477,451,476,467,467,526,455,476,475,511],
[501,0,442,504,521,476,504,522,451,472,487,517],
[523,558,0,514,522,531,531,542,483,487,489,532],
[549,496,486,0,518,498,519,509,519,500,515,550],
[524,479,478,482,0,519,454,500,470,481,478,505],
[533,524,469,502,481,0,499,516,479,458,498,488],
[533,496,469,481,546,501,0,504,495,486,488,502],
[474,478,458,491,500,484,496,0,447,472,459,509],
[545,549,517,481,530,521,505,553,0,495,496,551],
[524,528,513,500,519,542,514,528,505,0,482,521],
[525,513,511,485,522,502,512,541,504,518,0,528],
[489,483,468,450,495,512,498,491,449,479,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 9, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,508,499,497,488,507,505,509,487,501,514],
[516,0,513,485,504,492,500,501,518,500,498,519],
[492,487,0,493,494,492,482,468,517,499,478,479],
[501,515,507,0,503,514,504,501,511,490,497,499],
[503,496,506,497,0,497,515,493,503,498,499,508],
[512,508,508,486,503,0,509,468,501,497,492,494],
[493,500,518,496,485,491,0,486,511,504,483,518],
[495,499,532,499,507,532,514,0,512,491,496,493],
[491,482,483,489,497,499,489,488,0,502,493,486],
[513,500,501,510,502,503,496,509,498,0,498,496],
[499,502,522,503,501,508,517,504,507,502,0,490],
[486,481,521,501,492,506,482,507,514,504,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 10, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,550,506,528,537,548,558,535,540,526,512,481],
[450,0,491,486,478,479,490,496,520,515,497,452],
[494,509,0,536,477,491,536,498,533,562,514,456],
[472,514,464,0,483,487,529,546,454,506,556,462],
[463,522,523,517,0,534,533,500,546,539,529,469],
[452,521,509,513,466,0,522,490,496,537,495,524],
[442,510,464,471,467,478,0,492,492,538,502,449],
[465,504,502,454,500,510,508,0,475,468,491,437],
[460,480,467,546,454,504,508,525,0,513,504,432],
[474,485,438,494,461,463,462,532,487,0,494,452],
[488,503,486,444,471,505,498,509,496,506,0,427],
[519,548,544,538,531,476,551,563,568,548,573,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 11, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,474,500,470,451,437,495,483,459,467,486],
[541,0,481,517,480,487,475,501,480,476,515,479],
[526,519,0,515,492,500,503,524,490,479,505,520],
[500,483,485,0,488,502,492,507,496,463,478,473],
[530,520,508,512,0,481,519,528,517,497,488,516],
[549,513,500,498,519,0,491,518,490,490,516,490],
[563,525,497,508,481,509,0,517,510,507,512,515],
[505,499,476,493,472,482,483,0,487,474,481,503],
[517,520,510,504,483,510,490,513,0,478,504,513],
[541,524,521,537,503,510,493,526,522,0,505,527],
[533,485,495,522,512,484,488,519,496,495,0,526],
[514,521,480,527,484,510,485,497,487,473,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 12, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,518,515,547,522,526,502,539,503,533,487],
[519,0,534,515,574,546,507,516,499,528,509,506],
[482,466,0,450,544,478,517,500,467,484,494,445],
[485,485,550,0,559,542,511,510,473,500,536,489],
[453,426,456,441,0,475,448,450,429,457,483,411],
[478,454,522,458,525,0,498,493,508,519,513,482],
[474,493,483,489,552,502,0,499,488,475,509,475],
[498,484,500,490,550,507,501,0,497,476,519,498],
[461,501,533,527,571,492,512,503,0,496,526,500],
[497,472,516,500,543,481,525,524,504,0,517,492],
[467,491,506,464,517,487,491,481,474,483,0,477],
[513,494,555,511,589,518,525,502,500,508,523,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 13, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,508,450,511,497,523,489,488,472,488,500],
[499,0,496,474,473,493,510,497,494,507,502,504],
[492,504,0,475,473,501,524,500,469,473,493,490],
[550,526,525,0,492,533,524,519,486,517,518,511],
[489,527,527,508,0,487,509,498,469,468,496,467],
[503,507,499,467,513,0,501,468,462,467,470,505],
[477,490,476,476,491,499,0,464,465,442,458,484],
[511,503,500,481,502,532,536,0,503,507,481,517],
[512,506,531,514,531,538,535,497,0,479,475,511],
[528,493,527,483,532,533,558,493,521,0,511,508],
[512,498,507,482,504,530,542,519,525,489,0,484],
[500,496,510,489,533,495,516,483,489,492,516,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 14, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,486,490,516,495,512,488,503,510,525,520],
[523,0,494,508,510,523,508,495,498,509,511,502],
[514,506,0,507,511,509,527,500,495,503,520,511],
[510,492,493,0,522,498,512,511,497,503,510,517],
[484,490,489,478,0,488,483,492,491,484,503,509],
[505,477,491,502,512,0,487,494,510,504,486,497],
[488,492,473,488,517,513,0,485,515,504,526,480],
[512,505,500,489,508,506,515,0,488,492,518,504],
[497,502,505,503,509,490,485,512,0,518,520,504],
[490,491,497,497,516,496,496,508,482,0,506,500],
[475,489,480,490,497,514,474,482,480,494,0,479],
[480,498,489,483,491,503,520,496,496,500,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 15, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,517,533,551,541,489,492,554,453,528,493],
[500,0,518,556,518,518,523,507,546,500,498,514],
[483,482,0,482,504,496,474,467,522,468,499,478],
[467,444,518,0,496,485,483,460,501,487,480,476],
[449,482,496,504,0,455,464,467,529,478,495,461],
[459,482,504,515,545,0,497,493,523,476,502,504],
[511,477,526,517,536,503,0,471,541,467,504,504],
[508,493,533,540,533,507,529,0,520,489,560,540],
[446,454,478,499,471,477,459,480,0,466,471,453],
[547,500,532,513,522,524,533,511,534,0,516,520],
[472,502,501,520,505,498,496,440,529,484,0,490],
[507,486,522,524,539,496,496,460,547,480,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 16, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,482,502,467,478,482,483,506,481,473,508],
[523,0,501,517,516,522,508,508,533,515,498,548],
[518,499,0,539,474,476,487,463,479,498,492,493],
[498,483,461,0,486,478,490,482,494,491,483,514],
[533,484,526,514,0,505,509,500,509,517,523,530],
[522,478,524,522,495,0,510,498,482,509,501,505],
[518,492,513,510,491,490,0,488,508,502,483,496],
[517,492,537,518,500,502,512,0,505,526,501,522],
[494,467,521,506,491,518,492,495,0,488,488,509],
[519,485,502,509,483,491,498,474,512,0,494,517],
[527,502,508,517,477,499,517,499,512,506,0,535],
[492,452,507,486,470,495,504,478,491,483,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 17, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,547,623,443,480,533,543,525,592,482,581,572],
[453,0,408,386,637,384,544,426,505,505,474,507],
[377,592,0,425,519,366,483,570,409,404,677,538],
[557,614,575,0,510,357,555,597,528,566,517,601],
[520,363,481,490,0,380,509,482,494,506,480,526],
[467,616,634,643,620,0,532,602,520,483,615,624],
[457,456,517,445,491,468,0,502,534,484,571,508],
[475,574,430,403,518,398,498,0,482,450,513,491],
[408,495,591,472,506,480,466,518,0,481,533,494],
[518,495,596,434,494,517,516,550,519,0,519,573],
[419,526,323,483,520,385,429,487,467,481,0,521],
[428,493,462,399,474,376,492,509,506,427,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 18, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,531,471,480,497,496,518,507,507,518,540,481],
[469,0,472,475,471,505,511,485,470,478,496,472],
[529,528,0,509,480,520,546,498,523,517,538,483],
[520,525,491,0,493,529,529,515,514,539,556,489],
[503,529,520,507,0,529,514,490,492,517,501,475],
[504,495,480,471,471,0,480,495,501,502,510,452],
[482,489,454,471,486,520,0,474,485,514,512,478],
[493,515,502,485,510,505,526,0,494,509,549,502],
[493,530,477,486,508,499,515,506,0,507,521,484],
[482,522,483,461,483,498,486,491,493,0,509,466],
[460,504,462,444,499,490,488,451,479,491,0,464],
[519,528,517,511,525,548,522,498,516,534,536,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 19, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,513,485,447,488,508,509,511,473,517,477,518],
[487,0,478,495,461,518,464,459,473,496,424,532],
[515,522,0,492,522,543,510,525,529,540,504,510],
[553,505,508,0,477,555,527,496,532,513,490,539],
[512,539,478,523,0,536,489,515,511,556,519,545],
[492,482,457,445,464,0,492,481,503,512,471,508],
[491,536,490,473,511,508,0,532,519,544,467,514],
[489,541,475,504,485,519,468,0,508,532,437,483],
[527,527,471,468,489,497,481,492,0,519,471,515],
[483,504,460,487,444,488,456,468,481,0,451,524],
[523,576,496,510,481,529,533,563,529,549,0,570],
[482,468,490,461,455,492,486,517,485,476,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 20, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,535,536,522,482,524,548,511,512,533,508,514],
[465,0,533,494,481,516,499,495,490,483,512,487],
[464,467,0,451,448,490,519,484,467,478,484,494],
[478,506,549,0,505,546,522,524,550,513,497,490],
[518,519,552,495,0,565,518,524,524,524,498,501],
[476,484,510,454,435,0,474,467,472,479,459,480],
[452,501,481,478,482,526,0,491,506,495,484,495],
[489,505,516,476,476,533,509,0,490,507,501,463],
[488,510,533,450,476,528,494,510,0,480,505,503],
[467,517,522,487,476,521,505,493,520,0,510,471],
[492,488,516,503,502,541,516,499,495,490,0,515],
[486,513,506,510,499,520,505,537,497,529,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 21, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,503,490,485,491,487,502,518,506,499,496],
[502,0,461,480,497,488,494,486,526,498,492,486],
[497,539,0,506,508,516,518,502,522,495,494,490],
[510,520,494,0,487,520,506,508,539,491,515,503],
[515,503,492,513,0,524,505,516,536,497,505,508],
[509,512,484,480,476,0,522,528,534,516,498,509],
[513,506,482,494,495,478,0,491,526,501,500,484],
[498,514,498,492,484,472,509,0,519,502,479,496],
[482,474,478,461,464,466,474,481,0,490,464,466],
[494,502,505,509,503,484,499,498,510,0,514,495],
[501,508,506,485,495,502,500,521,536,486,0,495],
[504,514,510,497,492,491,516,504,534,505,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 22, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,496,498,510,494,499,492,492,504,508,512],
[495,0,497,483,508,488,492,497,498,514,498,514],
[504,503,0,516,520,506,501,494,494,535,506,494],
[502,517,484,0,499,496,506,508,490,506,474,487],
[490,492,480,501,0,480,476,492,506,515,479,488],
[506,512,494,504,520,0,498,498,473,523,486,488],
[501,508,499,494,524,502,0,498,511,533,505,483],
[508,503,506,492,508,502,502,0,505,534,502,484],
[508,502,506,510,494,527,489,495,0,508,508,501],
[496,486,465,494,485,477,467,466,492,0,488,459],
[492,502,494,526,521,514,495,498,492,512,0,484],
[488,486,506,513,512,512,517,516,499,541,516,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 23, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,515,463,519,512,500,534,520,485,519,498],
[514,0,502,502,521,504,510,504,511,501,486,515],
[485,498,0,485,527,499,502,521,502,490,506,514],
[537,498,515,0,534,538,524,542,537,511,497,541],
[481,479,473,466,0,504,502,498,479,492,506,502],
[488,496,501,462,496,0,520,500,493,473,500,495],
[500,490,498,476,498,480,0,502,497,461,497,482],
[466,496,479,458,502,500,498,0,500,472,498,509],
[480,489,498,463,521,507,503,500,0,485,504,512],
[515,499,510,489,508,527,539,528,515,0,524,513],
[481,514,494,503,494,500,503,502,496,476,0,515],
[502,485,486,459,498,505,518,491,488,487,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 24, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,509,526,500,518,521,512,506,545,518,528],
[500,0,507,472,475,502,501,498,501,528,505,490],
[491,493,0,467,468,502,502,494,492,504,488,509],
[474,528,533,0,514,519,522,505,511,541,514,519],
[500,525,532,486,0,508,509,514,507,525,513,519],
[482,498,498,481,492,0,522,477,500,520,493,498],
[479,499,498,478,491,478,0,487,496,513,502,507],
[488,502,506,495,486,523,513,0,510,529,488,495],
[494,499,508,489,493,500,504,490,0,518,500,507],
[455,472,496,459,475,480,487,471,482,0,487,493],
[482,495,512,486,487,507,498,512,500,513,0,510],
[472,510,491,481,481,502,493,505,493,507,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 25, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,487,509,501,509,513,505,496,468,511,504],
[488,0,481,525,495,492,522,484,489,490,517,511],
[513,519,0,539,527,502,513,540,531,491,534,527],
[491,475,461,0,484,494,500,501,493,482,492,488],
[499,505,473,516,0,505,521,511,476,502,526,523],
[491,508,498,506,495,0,528,520,511,495,506,553],
[487,478,487,500,479,472,0,483,500,463,498,481],
[495,516,460,499,489,480,517,0,498,470,467,482],
[504,511,469,507,524,489,500,502,0,502,504,485],
[532,510,509,518,498,505,537,530,498,0,532,516],
[489,483,466,508,474,494,502,533,496,468,0,521],
[496,489,473,512,477,447,519,518,515,484,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 26, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,487,535,487,506,489,514,484,502,507,548],
[519,0,512,521,497,514,500,512,506,485,502,527],
[513,488,0,515,479,504,518,438,473,451,484,525],
[465,479,485,0,465,481,497,481,454,482,484,522],
[513,503,521,535,0,505,541,508,549,490,562,607],
[494,486,496,519,495,0,515,491,489,486,464,562],
[511,500,482,503,459,485,0,441,460,481,512,545],
[486,488,562,519,492,509,559,0,498,514,529,581],
[516,494,527,546,451,511,540,502,0,497,526,561],
[498,515,549,518,510,514,519,486,503,0,508,548],
[493,498,516,516,438,536,488,471,474,492,0,544],
[452,473,475,478,393,438,455,419,439,452,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 27, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,497,518,480,507,509,498,489,503,503,491],
[489,0,493,484,479,486,493,479,489,490,500,477],
[503,507,0,491,487,496,519,484,496,509,496,504],
[482,516,509,0,480,484,502,469,505,512,488,483],
[520,521,513,520,0,522,511,487,499,504,513,500],
[493,514,504,516,478,0,512,506,505,502,511,463],
[491,507,481,498,489,488,0,475,492,493,507,500],
[502,521,516,531,513,494,525,0,523,535,525,507],
[511,511,504,495,501,495,508,477,0,509,498,470],
[497,510,491,488,496,498,507,465,491,0,502,488],
[497,500,504,512,487,489,493,475,502,498,0,486],
[509,523,496,517,500,537,500,493,530,512,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 28, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,553,517,575,539,522,626,542,473,578,582,492],
[447,0,463,511,400,504,519,464,494,529,488,451],
[483,537,0,528,468,493,612,567,503,576,549,499],
[425,489,472,0,436,506,557,476,488,557,476,454],
[461,600,532,564,0,516,581,559,532,585,517,519],
[478,496,507,494,484,0,519,503,454,555,419,528],
[374,481,388,443,419,481,0,451,462,467,442,382],
[458,536,433,524,441,497,549,0,512,510,490,454],
[527,506,497,512,468,546,538,488,0,515,518,488],
[422,471,424,443,415,445,533,490,485,0,476,444],
[418,512,451,524,483,581,558,510,482,524,0,506],
[508,549,501,546,481,472,618,546,512,556,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 29, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,518,522,482,523,525,539,535,500,485,516],
[496,0,528,476,491,486,495,509,543,513,468,497],
[482,472,0,480,490,496,514,481,509,472,457,492],
[478,524,520,0,503,487,496,516,522,522,470,500],
[518,509,510,497,0,482,503,513,524,523,471,504],
[477,514,504,513,518,0,504,484,531,498,471,498],
[475,505,486,504,497,496,0,491,503,482,465,479],
[461,491,519,484,487,516,509,0,512,495,491,488],
[465,457,491,478,476,469,497,488,0,477,464,469],
[500,487,528,478,477,502,518,505,523,0,498,489],
[515,532,543,530,529,529,535,509,536,502,0,483],
[484,503,508,500,496,502,521,512,531,511,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 30, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,555,538,514,519,526,490,497,520,517,505,524],
[445,0,496,504,481,507,462,477,482,467,488,490],
[462,504,0,483,517,517,445,502,499,477,513,503],
[486,496,517,0,479,509,458,511,513,478,507,509],
[481,519,483,521,0,520,502,506,524,477,507,508],
[474,493,483,491,480,0,487,475,495,464,513,482],
[510,538,555,542,498,513,0,534,501,506,528,515],
[503,523,498,489,494,525,466,0,511,474,506,479],
[480,518,501,487,476,505,499,489,0,477,505,528],
[483,533,523,522,523,536,494,526,523,0,503,513],
[495,512,487,493,493,487,472,494,495,497,0,496],
[476,510,497,491,492,518,485,521,472,487,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 31, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,515,518,513,510,480,503,505,497,514,509],
[496,0,504,497,494,490,484,516,489,490,499,476],
[485,496,0,499,488,476,471,492,505,486,474,488],
[482,503,501,0,498,477,494,513,506,477,486,481],
[487,506,512,502,0,484,510,503,506,478,494,473],
[490,510,524,523,516,0,502,528,524,501,510,503],
[520,516,529,506,490,498,0,523,512,499,510,486],
[497,484,508,487,497,472,477,0,525,502,486,487],
[495,511,495,494,494,476,488,475,0,477,484,468],
[503,510,514,523,522,499,501,498,523,0,501,489],
[486,501,526,514,506,490,490,514,516,499,0,499],
[491,524,512,519,527,497,514,513,532,511,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 32, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,435,535,549,528,506,498,516,483,522,474],
[488,0,465,521,488,508,466,553,477,455,487,500],
[565,535,0,609,531,596,532,561,560,489,467,549],
[465,479,391,0,502,505,432,487,513,456,451,479],
[451,512,469,498,0,507,477,501,549,457,445,472],
[472,492,404,495,493,0,474,507,494,457,444,469],
[494,534,468,568,523,526,0,579,548,481,503,507],
[502,447,439,513,499,493,421,0,535,479,426,403],
[484,523,440,487,451,506,452,465,0,455,442,459],
[517,545,511,544,543,543,519,521,545,0,481,474],
[478,513,533,549,555,556,497,574,558,519,0,503],
[526,500,451,521,528,531,493,597,541,526,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 33, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,527,460,475,489,542,459,537,568,482,473],
[522,0,519,492,516,505,625,529,489,567,505,510],
[473,481,0,501,508,527,546,506,548,436,472,525],
[540,508,499,0,569,514,528,489,578,563,499,516],
[525,484,492,431,0,495,550,478,528,532,461,530],
[511,495,473,486,505,0,605,480,587,496,443,492],
[458,375,454,472,450,395,0,432,498,514,382,445],
[541,471,494,511,522,520,568,0,558,560,456,493],
[463,511,452,422,472,413,502,442,0,506,416,507],
[432,433,564,437,468,504,486,440,494,0,480,491],
[518,495,528,501,539,557,618,544,584,520,0,481],
[527,490,475,484,470,508,555,507,493,509,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 34, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,515,498,511,516,521,507,501,483,502,539],
[498,0,518,538,530,528,517,526,512,495,530,532],
[485,482,0,475,486,467,487,471,464,479,492,500],
[502,462,525,0,505,531,537,515,501,480,530,523],
[489,470,514,495,0,492,490,494,473,471,507,491],
[484,472,533,469,508,0,511,503,476,462,488,520],
[479,483,513,463,510,489,0,494,480,479,501,498],
[493,474,529,485,506,497,506,0,479,490,512,525],
[499,488,536,499,527,524,520,521,0,504,518,514],
[517,505,521,520,529,538,521,510,496,0,540,540],
[498,470,508,470,493,512,499,488,482,460,0,505],
[461,468,500,477,509,480,502,475,486,460,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 35, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,522,518,501,511,526,482,545,502,514,541,504],
[478,0,490,498,506,512,506,536,487,524,516,481],
[482,510,0,526,471,513,489,512,472,505,487,490],
[499,502,474,0,483,519,504,498,451,503,503,486],
[489,494,529,517,0,522,504,529,506,504,486,495],
[474,488,487,481,478,0,465,476,445,491,472,472],
[518,494,511,496,496,535,0,501,488,554,527,513],
[455,464,488,502,471,524,499,0,488,524,484,514],
[498,513,528,549,494,555,512,512,0,532,539,506],
[486,476,495,497,496,509,446,476,468,0,478,500],
[459,484,513,497,514,528,473,516,461,522,0,483],
[496,519,510,514,505,528,487,486,494,500,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 36, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,523,531,515,540,506,558,512,548,488,508],
[498,0,492,517,498,537,516,523,489,536,495,506],
[477,508,0,518,486,512,486,513,507,520,507,463],
[469,483,482,0,480,503,479,516,502,512,474,459],
[485,502,514,520,0,536,506,535,522,545,512,506],
[460,463,488,497,464,0,456,510,497,506,473,463],
[494,484,514,521,494,544,0,533,496,523,497,505],
[442,477,487,484,465,490,467,0,495,503,469,461],
[488,511,493,498,478,503,504,505,0,524,489,469],
[452,464,480,488,455,494,477,497,476,0,476,454],
[512,505,493,526,488,527,503,531,511,524,0,475],
[492,494,537,541,494,537,495,539,531,546,525,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 37, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,461,563,492,511,476,491,540,539,523,557],
[541,0,499,540,539,552,536,539,572,577,582,544],
[539,501,0,565,513,529,493,524,589,571,580,561],
[437,460,435,0,478,517,475,485,511,497,526,497],
[508,461,487,522,0,523,496,485,552,540,531,556],
[489,448,471,483,477,0,512,512,540,531,508,528],
[524,464,507,525,504,488,0,508,546,493,558,575],
[509,461,476,515,515,488,492,0,564,543,539,534],
[460,428,411,489,448,460,454,436,0,467,494,491],
[461,423,429,503,460,469,507,457,533,0,506,499],
[477,418,420,474,469,492,442,461,506,494,0,509],
[443,456,439,503,444,472,425,466,509,501,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 38, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,515,498,486,494,491,512,510,487,493,515],
[506,0,496,508,484,476,497,481,489,465,498,498],
[485,504,0,504,511,502,515,488,506,482,505,494],
[502,492,496,0,512,488,499,484,511,500,519,508],
[514,516,489,488,0,488,514,480,533,493,515,494],
[506,524,498,512,512,0,492,498,498,507,503,521],
[509,503,485,501,486,508,0,466,515,494,495,512],
[488,519,512,516,520,502,534,0,511,498,516,526],
[490,511,494,489,467,502,485,489,0,501,517,497],
[513,535,518,500,507,493,506,502,499,0,522,522],
[507,502,495,481,485,497,505,484,483,478,0,486],
[485,502,506,492,506,479,488,474,503,478,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 39, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,485,462,502,453,477,483,476,472,480,500],
[524,0,506,486,518,486,508,512,492,526,519,507],
[515,494,0,485,500,488,504,513,504,516,509,528],
[538,514,515,0,497,496,496,519,498,507,503,512],
[498,482,500,503,0,478,495,474,489,498,534,518],
[547,514,512,504,522,0,531,522,498,527,530,535],
[523,492,496,504,505,469,0,486,506,525,495,506],
[517,488,487,481,526,478,514,0,494,511,521,522],
[524,508,496,502,511,502,494,506,0,503,549,534],
[528,474,484,493,502,473,475,489,497,0,504,495],
[520,481,491,497,466,470,505,479,451,496,0,496],
[500,493,472,488,482,465,494,478,466,505,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 40, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,505,480,513,468,489,544,484,466,479,487],
[506,0,509,450,510,445,473,523,460,441,455,485],
[495,491,0,428,500,443,484,470,467,457,413,451],
[520,550,572,0,567,496,537,512,505,475,499,505],
[487,490,500,433,0,459,488,471,476,443,421,453],
[532,555,557,504,541,0,542,519,538,525,530,497],
[511,527,516,463,512,458,0,512,464,508,495,509],
[456,477,530,488,529,481,488,0,437,481,472,458],
[516,540,533,495,524,462,536,563,0,496,516,477],
[534,559,543,525,557,475,492,519,504,0,488,502],
[521,545,587,501,579,470,505,528,484,512,0,512],
[513,515,549,495,547,503,491,542,523,498,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 41, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,533,538,501,492,519,488,519,513,497,531],
[490,0,483,491,464,460,473,469,500,493,484,495],
[467,517,0,495,477,469,510,494,487,496,481,514],
[462,509,505,0,479,470,467,472,464,475,463,491],
[499,536,523,521,0,488,504,502,497,496,503,506],
[508,540,531,530,512,0,505,484,494,501,505,517],
[481,527,490,533,496,495,0,498,495,497,500,521],
[512,531,506,528,498,516,502,0,513,512,523,521],
[481,500,513,536,503,506,505,487,0,501,495,509],
[487,507,504,525,504,499,503,488,499,0,500,510],
[503,516,519,537,497,495,500,477,505,500,0,506],
[469,505,486,509,494,483,479,479,491,490,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 42, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,507,517,519,486,501,477,514,518,500,506],
[486,0,517,522,494,500,506,481,525,496,517,511],
[493,483,0,492,501,524,477,495,500,498,490,508],
[483,478,508,0,475,507,509,485,485,500,496,514],
[481,506,499,525,0,505,498,515,522,491,500,508],
[514,500,476,493,495,0,509,492,512,525,518,508],
[499,494,523,491,502,491,0,525,536,523,506,519],
[523,519,505,515,485,508,475,0,500,516,497,519],
[486,475,500,515,478,488,464,500,0,482,506,495],
[482,504,502,500,509,475,477,484,518,0,482,501],
[500,483,510,504,500,482,494,503,494,518,0,505],
[494,489,492,486,492,492,481,481,505,499,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 43, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,519,508,524,518,531,498,493,511,526,496,487],
[481,0,455,443,457,494,464,462,457,506,460,451],
[492,545,0,504,527,533,510,502,493,525,500,501],
[476,557,496,0,521,555,514,485,495,551,476,477],
[482,543,473,479,0,530,489,500,471,532,465,468],
[469,506,467,445,470,0,446,465,482,488,442,465],
[502,536,490,486,511,554,0,480,501,535,478,500],
[507,538,498,515,500,535,520,0,510,524,489,507],
[489,543,507,505,529,518,499,490,0,533,502,526],
[474,494,475,449,468,512,465,476,467,0,457,445],
[504,540,500,524,535,558,522,511,498,543,0,490],
[513,549,499,523,532,535,500,493,474,555,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 44, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,485,460,469,480,484,493,453,498,466,498],
[506,0,500,488,466,527,453,510,490,497,469,523],
[515,500,0,478,472,516,492,519,485,508,477,524],
[540,512,522,0,488,528,529,539,506,520,519,541],
[531,534,528,512,0,509,505,549,503,545,495,544],
[520,473,484,472,491,0,490,517,455,489,485,524],
[516,547,508,471,495,510,0,526,465,500,488,504],
[507,490,481,461,451,483,474,0,475,506,442,519],
[547,510,515,494,497,545,535,525,0,525,505,540],
[502,503,492,480,455,511,500,494,475,0,477,533],
[534,531,523,481,505,515,512,558,495,523,0,548],
[502,477,476,459,456,476,496,481,460,467,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 45, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,499,467,475,499,440,452,494,472,460,474],
[505,0,486,469,479,497,441,470,510,466,463,478],
[501,514,0,504,489,500,478,470,506,488,471,479],
[533,531,496,0,511,512,477,495,501,469,496,475],
[525,521,511,489,0,530,502,504,503,507,500,504],
[501,503,500,488,470,0,462,482,490,466,468,463],
[560,559,522,523,498,538,0,521,540,483,535,517],
[548,530,530,505,496,518,479,0,527,536,478,516],
[506,490,494,499,497,510,460,473,0,488,487,488],
[528,534,512,531,493,534,517,464,512,0,519,514],
[540,537,529,504,500,532,465,522,513,481,0,515],
[526,522,521,525,496,537,483,484,512,486,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 46, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,561,589,512,569,508,561,461,502,513,569,478],
[439,0,504,375,476,481,511,436,491,423,480,486],
[411,496,0,430,467,500,528,400,455,416,503,449],
[488,625,570,0,595,519,606,548,519,567,587,548],
[431,524,533,405,0,468,492,438,475,502,529,453],
[492,519,500,481,532,0,576,468,472,453,483,523],
[439,489,472,394,508,424,0,452,433,412,499,470],
[539,564,600,452,562,532,548,0,542,584,592,537],
[498,509,545,481,525,528,567,458,0,507,498,488],
[487,577,584,433,498,547,588,416,493,0,558,560],
[431,520,497,413,471,517,501,408,502,442,0,471],
[522,514,551,452,547,477,530,463,512,440,529,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 47, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,445,507,470,475,507,489,452,491,480,456],
[483,0,463,506,478,507,493,493,463,487,506,468],
[555,537,0,548,487,522,521,534,481,513,524,510],
[493,494,452,0,474,469,478,444,460,464,492,474],
[530,522,513,526,0,527,525,534,509,499,525,492],
[525,493,478,531,473,0,511,485,488,478,483,487],
[493,507,479,522,475,489,0,508,451,507,503,462],
[511,507,466,556,466,515,492,0,478,486,492,490],
[548,537,519,540,491,512,549,522,0,496,532,518],
[509,513,487,536,501,522,493,514,504,0,524,515],
[520,494,476,508,475,517,497,508,468,476,0,492],
[544,532,490,526,508,513,538,510,482,485,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 48, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,583,507,504,596,517,471,549,568,547,586],
[499,0,539,443,480,539,478,518,496,469,541,572],
[417,461,0,519,469,517,454,402,483,503,583,530],
[493,557,481,0,534,570,479,470,534,588,580,568],
[496,520,531,466,0,468,430,431,482,483,564,469],
[404,461,483,430,532,0,454,358,436,440,483,509],
[483,522,546,521,570,546,0,423,529,570,635,602],
[529,482,598,530,569,642,577,0,555,556,601,604],
[451,504,517,466,518,564,471,445,0,500,670,543],
[432,531,497,412,517,560,430,444,500,0,615,555],
[453,459,417,420,436,517,365,399,330,385,0,435],
[414,428,470,432,531,491,398,396,457,445,565,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 49, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,524,501,491,512,512,513,518,496,485,531,497],
[476,0,507,483,510,501,520,519,498,509,487,509],
[499,493,0,477,504,511,482,507,496,467,512,496],
[509,517,523,0,512,518,515,520,490,495,530,515],
[488,490,496,488,0,472,478,482,490,462,504,477],
[488,499,489,482,528,0,502,513,464,458,504,480],
[487,480,518,485,522,498,0,471,501,481,522,482],
[482,481,493,480,518,487,529,0,488,464,486,494],
[504,502,504,510,510,536,499,512,0,499,531,506],
[515,491,533,505,538,542,519,536,501,0,537,524],
[469,513,488,470,496,496,478,514,469,463,0,485],
[503,491,504,485,523,520,518,506,494,476,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 50, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,490,512,475,514,480,519,538,491,518,488],
[503,0,482,460,494,493,453,524,495,468,470,474],
[510,518,0,462,493,489,462,522,518,474,501,477],
[488,540,538,0,501,492,482,508,514,472,492,492],
[525,506,507,499,0,500,471,532,540,502,504,502],
[486,507,511,508,500,0,473,514,504,480,505,458],
[520,547,538,518,529,527,0,542,551,504,500,503],
[481,476,478,492,468,486,458,0,502,468,467,454],
[462,505,482,486,460,496,449,498,0,453,475,474],
[509,532,526,528,498,520,496,532,547,0,511,516],
[482,530,499,508,496,495,500,533,525,489,0,500],
[512,526,523,508,498,542,497,546,526,484,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 51, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,513,524,522,510,521,497,531,501,509,499],
[486,0,526,485,504,504,504,472,487,511,504,496],
[487,474,0,485,473,479,482,474,494,487,488,481],
[476,515,515,0,489,505,513,475,501,485,506,492],
[478,496,527,511,0,502,492,486,506,494,492,508],
[490,496,521,495,498,0,487,501,505,501,487,490],
[479,496,518,487,508,513,0,467,477,481,502,503],
[503,528,526,525,514,499,533,0,521,500,505,513],
[469,513,506,499,494,495,523,479,0,510,499,483],
[499,489,513,515,506,499,519,500,490,0,489,520],
[491,496,512,494,508,513,498,495,501,511,0,495],
[501,504,519,508,492,510,497,487,517,480,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 52, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,483,420,238,212,404,391,176,366,514,247],
[678,0,686,465,544,414,668,559,399,629,719,347],
[517,314,0,364,407,166,507,517,287,580,543,338],
[580,535,636,0,616,603,628,652,451,570,621,422],
[762,456,593,384,0,474,608,579,364,529,752,547],
[788,586,834,397,526,0,666,605,561,476,733,605],
[596,332,493,372,392,334,0,351,321,588,649,290],
[609,441,483,348,421,395,649,0,378,431,598,353],
[824,601,713,549,636,439,679,622,0,575,786,410],
[634,371,420,430,471,524,412,569,425,0,598,480],
[486,281,457,379,248,267,351,402,214,402,0,279],
[753,653,662,578,453,395,710,647,590,520,721,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 53, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,483,488,492,502,500,498,525,513,521,501],
[490,0,497,503,492,506,495,511,525,503,529,539],
[517,503,0,540,461,495,500,489,513,518,532,507],
[512,497,460,0,474,500,503,504,509,519,521,506],
[508,508,539,526,0,514,531,500,513,510,527,522],
[498,494,505,500,486,0,499,522,519,517,533,507],
[500,505,500,497,469,501,0,506,508,510,521,512],
[502,489,511,496,500,478,494,0,513,512,529,522],
[475,475,487,491,487,481,492,487,0,496,515,493],
[487,497,482,481,490,483,490,488,504,0,506,474],
[479,471,468,479,473,467,479,471,485,494,0,499],
[499,461,493,494,478,493,488,478,507,526,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 54, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,507,489,437,470,485,503,495,502,423,472],
[511,0,532,521,445,453,480,513,494,499,448,492],
[493,468,0,533,485,427,474,540,542,467,482,470],
[511,479,467,0,467,464,499,526,498,477,433,472],
[563,555,515,533,0,476,525,555,579,501,511,566],
[530,547,573,536,524,0,478,532,567,511,496,579],
[515,520,526,501,475,522,0,516,540,490,500,516],
[497,487,460,474,445,468,484,0,526,487,415,481],
[505,506,458,502,421,433,460,474,0,475,424,472],
[498,501,533,523,499,489,510,513,525,0,472,540],
[577,552,518,567,489,504,500,585,576,528,0,566],
[528,508,530,528,434,421,484,519,528,460,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 55, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,499,482,528,465,451,539,431,494,471,458],
[555,0,508,483,547,560,515,519,497,515,513,471],
[501,492,0,477,529,505,515,579,493,478,511,489],
[518,517,523,0,523,518,508,547,500,539,469,481],
[472,453,471,477,0,498,454,557,448,434,485,435],
[535,440,495,482,502,0,467,477,504,452,405,439],
[549,485,485,492,546,533,0,553,525,479,522,492],
[461,481,421,453,443,523,447,0,438,449,504,476],
[569,503,507,500,552,496,475,562,0,511,482,503],
[506,485,522,461,566,548,521,551,489,0,462,473],
[529,487,489,531,515,595,478,496,518,538,0,459],
[542,529,511,519,565,561,508,524,497,527,541,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 56, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,473,510,520,525,493,518,511,535,510,529],
[494,0,491,496,512,509,478,528,505,495,497,530],
[527,509,0,514,538,538,496,524,514,535,506,539],
[490,504,486,0,523,500,491,520,494,503,491,518],
[480,488,462,477,0,505,488,517,466,508,479,488],
[475,491,462,500,495,0,473,504,480,489,464,499],
[507,522,504,509,512,527,0,542,508,509,496,544],
[482,472,476,480,483,496,458,0,484,473,472,499],
[489,495,486,506,534,520,492,516,0,504,480,510],
[465,505,465,497,492,511,491,527,496,0,461,510],
[490,503,494,509,521,536,504,528,520,539,0,527],
[471,470,461,482,512,501,456,501,490,490,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 57, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,439,427,518,471,483,466,437,496,453,569],
[571,0,443,461,450,547,465,550,526,470,511,547],
[561,557,0,468,542,590,459,502,490,540,654,518],
[573,539,532,0,517,571,490,586,526,531,550,548],
[482,550,458,483,0,479,420,577,427,504,528,591],
[529,453,410,429,521,0,385,390,320,426,463,488],
[517,535,541,510,580,615,0,554,478,551,521,582],
[534,450,498,414,423,610,446,0,409,519,486,448],
[563,474,510,474,573,680,522,591,0,448,609,612],
[504,530,460,469,496,574,449,481,552,0,525,494],
[547,489,346,450,472,537,479,514,391,475,0,506],
[431,453,482,452,409,512,418,552,388,506,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 58, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,545,479,554,514,539,542,537,554,484,530,484],
[455,0,476,522,482,469,467,494,459,475,478,459],
[521,524,0,518,479,513,492,517,472,482,503,467],
[446,478,482,0,498,464,475,493,485,490,485,437],
[486,518,521,502,0,519,524,559,511,510,516,485],
[461,531,487,536,481,0,457,529,489,477,519,509],
[458,533,508,525,476,543,0,513,542,479,521,470],
[463,506,483,507,441,471,487,0,509,474,485,445],
[446,541,528,515,489,511,458,491,0,463,498,452],
[516,525,518,510,490,523,521,526,537,0,501,457],
[470,522,497,515,484,481,479,515,502,499,0,481],
[516,541,533,563,515,491,530,555,548,543,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 59, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,502,489,580,550,462,490,522,487,496,526],
[488,0,502,510,591,552,535,527,534,512,550,539],
[498,498,0,529,548,477,477,477,494,518,527,498],
[511,490,471,0,520,497,518,495,507,531,514,546],
[420,409,452,480,0,438,423,496,444,426,478,458],
[450,448,523,503,562,0,476,494,491,488,494,515],
[538,465,523,482,577,524,0,569,525,528,517,511],
[510,473,523,505,504,506,431,0,487,533,502,499],
[478,466,506,493,556,509,475,513,0,512,515,499],
[513,488,482,469,574,512,472,467,488,0,501,518],
[504,450,473,486,522,506,483,498,485,499,0,513],
[474,461,502,454,542,485,489,501,501,482,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 60, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,487,475,501,461,492,546,507,497,505,472],
[572,0,493,517,543,514,572,572,537,476,555,516],
[513,507,0,498,547,472,498,545,537,483,490,479],
[525,483,502,0,546,514,471,588,545,496,487,439],
[499,457,453,454,0,480,459,525,512,441,499,429],
[539,486,528,486,520,0,498,539,505,521,520,458],
[508,428,502,529,541,502,0,578,551,486,524,494],
[454,428,455,412,475,461,422,0,463,462,462,439],
[493,463,463,455,488,495,449,537,0,482,446,497],
[503,524,517,504,559,479,514,538,518,0,484,505],
[495,445,510,513,501,480,476,538,554,516,0,450],
[528,484,521,561,571,542,506,561,503,495,550,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 61, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,547,509,555,512,520,514,506,553,515,516],
[504,0,512,535,519,513,538,514,516,555,518,496],
[453,488,0,489,485,488,488,479,497,511,496,498],
[491,465,511,0,509,499,512,494,496,527,502,509],
[445,481,515,491,0,511,518,490,502,515,496,495],
[488,487,512,501,489,0,498,484,497,532,499,478],
[480,462,512,488,482,502,0,498,477,507,500,486],
[486,486,521,506,510,516,502,0,498,508,502,509],
[494,484,503,504,498,503,523,502,0,516,509,521],
[447,445,489,473,485,468,493,492,484,0,475,459],
[485,482,504,498,504,501,500,498,491,525,0,489],
[484,504,502,491,505,522,514,491,479,541,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 62, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,467,474,520,521,489,501,509,501,518,513],
[489,0,466,521,491,489,525,480,486,506,539,499],
[533,534,0,538,546,493,548,512,539,544,571,547],
[526,479,462,0,510,489,505,479,502,505,544,538],
[480,509,454,490,0,484,490,478,473,467,529,501],
[479,511,507,511,516,0,540,503,511,517,551,520],
[511,475,452,495,510,460,0,511,471,496,572,516],
[499,520,488,521,522,497,489,0,478,489,530,539],
[491,514,461,498,527,489,529,522,0,525,538,491],
[499,494,456,495,533,483,504,511,475,0,536,440],
[482,461,429,456,471,449,428,470,462,464,0,502],
[487,501,453,462,499,480,484,461,509,560,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 63, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,541,508,506,526,498,484,472,525,533,523],
[526,0,504,523,496,512,519,519,490,503,540,512],
[459,496,0,468,516,512,518,472,466,512,521,492],
[492,477,532,0,528,531,535,484,523,508,526,504],
[494,504,484,472,0,486,491,484,470,511,506,464],
[474,488,488,469,514,0,490,471,479,498,521,495],
[502,481,482,465,509,510,0,490,456,485,500,488],
[516,481,528,516,516,529,510,0,502,507,531,520],
[528,510,534,477,530,521,544,498,0,520,521,506],
[475,497,488,492,489,502,515,493,480,0,527,505],
[467,460,479,474,494,479,500,469,479,473,0,462],
[477,488,508,496,536,505,512,480,494,495,538,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 64, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,492,498,493,495,500,485,496,509,495,509],
[486,0,486,473,491,483,473,464,473,496,493,478],
[508,514,0,475,467,490,494,484,488,484,475,481],
[502,527,525,0,500,530,500,501,501,519,504,506],
[507,509,533,500,0,515,519,493,506,534,498,515],
[505,517,510,470,485,0,496,492,496,492,486,483],
[500,527,506,500,481,504,0,466,505,523,517,491],
[515,536,516,499,507,508,534,0,493,523,518,518],
[504,527,512,499,494,504,495,507,0,518,507,490],
[491,504,516,481,466,508,477,477,482,0,498,488],
[505,507,525,496,502,514,483,482,493,502,0,499],
[491,522,519,494,485,517,509,482,510,512,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 65, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,454,481,453,572,299,442,431,640,454,410],
[594,0,566,484,561,608,483,589,566,544,515,490],
[546,434,0,490,633,613,418,442,560,571,442,593],
[519,516,510,0,457,588,405,557,592,628,515,524],
[547,439,367,543,0,616,400,430,521,566,436,467],
[428,392,387,412,384,0,423,447,446,474,469,334],
[701,517,582,595,600,577,0,718,381,582,550,497],
[558,411,558,443,570,553,282,0,423,544,549,512],
[569,434,440,408,479,554,619,577,0,506,541,665],
[360,456,429,372,434,526,418,456,494,0,418,540],
[546,485,558,485,564,531,450,451,459,582,0,563],
[590,510,407,476,533,666,503,488,335,460,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 66, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,544,450,525,413,524,482,549,467,510,481],
[563,0,527,507,491,482,491,555,571,553,531,492],
[456,473,0,499,565,498,532,539,579,493,526,536],
[550,493,501,0,474,445,509,530,572,549,529,585],
[475,509,435,526,0,386,470,559,459,399,506,498],
[587,518,502,555,614,0,485,518,549,534,569,581],
[476,509,468,491,530,515,0,503,547,492,487,516],
[518,445,461,470,441,482,497,0,494,508,433,541],
[451,429,421,428,541,451,453,506,0,530,532,495],
[533,447,507,451,601,466,508,492,470,0,436,418],
[490,469,474,471,494,431,513,567,468,564,0,476],
[519,508,464,415,502,419,484,459,505,582,524,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 67, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,496,487,546,530,562,489,530,578,563,481],
[490,0,473,468,522,456,494,485,517,507,513,454],
[504,527,0,496,531,558,536,513,518,596,541,474],
[513,532,504,0,557,488,540,533,526,577,543,485],
[454,478,469,443,0,480,506,463,498,536,509,415],
[470,544,442,512,520,0,554,548,503,584,590,509],
[438,506,464,460,494,446,0,465,497,492,525,471],
[511,515,487,467,537,452,535,0,512,583,539,535],
[470,483,482,474,502,497,503,488,0,541,526,432],
[422,493,404,423,464,416,508,417,459,0,503,422],
[437,487,459,457,491,410,475,461,474,497,0,437],
[519,546,526,515,585,491,529,465,568,578,563,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 68, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,529,597,552,476,529,504,384,559,668,525,595],
[471,0,398,450,484,544,605,505,440,440,579,495],
[403,602,0,508,423,551,640,382,454,501,493,493],
[448,550,492,0,573,509,556,423,477,503,522,463],
[524,516,577,427,0,512,601,497,534,504,592,529],
[471,456,449,491,488,0,565,428,422,356,578,542],
[496,395,360,444,399,435,0,348,451,511,429,531],
[616,495,618,577,503,572,652,0,550,553,589,579],
[441,560,546,523,466,578,549,450,0,488,565,613],
[332,560,499,497,496,644,489,447,512,0,508,511],
[475,421,507,478,408,422,571,411,435,492,0,518],
[405,505,507,537,471,458,469,421,387,489,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 69, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,521,480,524,507,500,484,516,525,517,489,468],
[479,0,468,471,475,469,477,476,476,467,466,454],
[520,532,0,534,528,500,530,528,526,548,518,507],
[476,529,466,0,483,477,503,492,482,505,473,467],
[493,525,472,517,0,478,509,517,492,496,499,475],
[500,531,500,523,522,0,524,506,510,503,512,483],
[516,523,470,497,491,476,0,495,489,508,487,465],
[484,524,472,508,483,494,505,0,504,527,520,462],
[475,524,474,518,508,490,511,496,0,526,491,499],
[483,533,452,495,504,497,492,473,474,0,488,482],
[511,534,482,527,501,488,513,480,509,512,0,487],
[532,546,493,533,525,517,535,538,501,518,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 70, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,467,522,524,483,467,481,511,521,517,506],
[499,0,470,473,484,472,473,485,492,517,478,502],
[533,530,0,512,497,499,478,473,508,520,475,488],
[478,527,488,0,485,498,476,480,495,522,477,492],
[476,516,503,515,0,502,514,476,512,512,488,499],
[517,528,501,502,498,0,477,507,527,531,502,482],
[533,527,522,524,486,523,0,499,511,524,486,493],
[519,515,527,520,524,493,501,0,531,538,535,535],
[489,508,492,505,488,473,489,469,0,513,498,491],
[479,483,480,478,488,469,476,462,487,0,487,489],
[483,522,525,523,512,498,514,465,502,513,0,508],
[494,498,512,508,501,518,507,465,509,511,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 71, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,501,496,505,521,504,508,507,516,507,528],
[486,0,499,488,492,507,482,501,494,499,499,485],
[499,501,0,486,495,499,472,503,509,499,494,482],
[504,512,514,0,523,516,487,498,502,510,491,485],
[495,508,505,477,0,523,502,504,492,506,490,494],
[479,493,501,484,477,0,471,479,478,508,498,499],
[496,518,528,513,498,529,0,520,488,509,498,509],
[492,499,497,502,496,521,480,0,496,489,502,516],
[493,506,491,498,508,522,512,504,0,520,487,493],
[484,501,501,490,494,492,491,511,480,0,489,489],
[493,501,506,509,510,502,502,498,513,511,0,495],
[472,515,518,515,506,501,491,484,507,511,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 72, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,493,486,480,504,491,511,484,476,460,482],
[512,0,511,517,513,522,511,524,499,501,505,483],
[507,489,0,500,506,527,496,519,513,503,497,492],
[514,483,500,0,482,496,510,522,495,503,486,493],
[520,487,494,518,0,511,496,516,497,494,507,491],
[496,478,473,504,489,0,488,504,482,478,477,485],
[509,489,504,490,504,512,0,514,485,480,493,484],
[489,476,481,478,484,496,486,0,479,471,469,475],
[516,501,487,505,503,518,515,521,0,483,497,482],
[524,499,497,497,506,522,520,529,517,0,494,493],
[540,495,503,514,493,523,507,531,503,506,0,517],
[518,517,508,507,509,515,516,525,518,507,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 73, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,480,490,542,466,507,446,470,494,447,515],
[551,0,536,510,573,537,546,506,506,501,496,550],
[520,464,0,488,517,509,472,464,470,500,478,457],
[510,490,512,0,589,525,439,500,513,515,506,497],
[458,427,483,411,0,453,413,416,464,451,454,474],
[534,463,491,475,547,0,523,468,514,467,504,519],
[493,454,528,561,587,477,0,464,455,501,483,514],
[554,494,536,500,584,532,536,0,518,536,485,511],
[530,494,530,487,536,486,545,482,0,508,500,471],
[506,499,500,485,549,533,499,464,492,0,517,502],
[553,504,522,494,546,496,517,515,500,483,0,501],
[485,450,543,503,526,481,486,489,529,498,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 74, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,399,475,487,476,468,536,532,509,512,540,498],
[601,0,536,466,439,494,546,565,573,505,512,505],
[525,464,0,491,494,502,503,548,540,509,514,523],
[513,534,509,0,558,489,484,532,537,526,557,513],
[524,561,506,442,0,546,503,573,538,528,555,467],
[532,506,498,511,454,0,442,537,534,513,538,498],
[464,454,497,516,497,558,0,563,532,501,521,484],
[468,435,452,468,427,463,437,0,470,485,500,425],
[491,427,460,463,462,466,468,530,0,510,488,487],
[488,495,491,474,472,487,499,515,490,0,513,441],
[460,488,486,443,445,462,479,500,512,487,0,483],
[502,495,477,487,533,502,516,575,513,559,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 75, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,543,478,497,478,524,476,482,459,518,470,467],
[457,0,439,463,466,455,484,430,433,488,471,441],
[522,561,0,495,521,507,478,493,490,547,478,484],
[503,537,505,0,492,563,503,501,517,558,523,494],
[522,534,479,508,0,511,510,477,503,554,511,522],
[476,545,493,437,489,0,469,485,458,520,485,470],
[524,516,522,497,490,531,0,500,483,546,530,527],
[518,570,507,499,523,515,500,0,492,541,535,520],
[541,567,510,483,497,542,517,508,0,542,525,495],
[482,512,453,442,446,480,454,459,458,0,482,442],
[530,529,522,477,489,515,470,465,475,518,0,511],
[533,559,516,506,478,530,473,480,505,558,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 76, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,496,512,524,508,489,523,509,502,499,534],
[530,0,509,523,522,519,503,525,516,500,524,501],
[504,491,0,507,512,520,496,517,532,503,502,521],
[488,477,493,0,533,503,482,508,521,486,485,514],
[476,478,488,467,0,515,483,485,522,504,510,509],
[492,481,480,497,485,0,494,490,499,500,488,507],
[511,497,504,518,517,506,0,506,519,511,500,522],
[477,475,483,492,515,510,494,0,513,511,491,513],
[491,484,468,479,478,501,481,487,0,487,473,481],
[498,500,497,514,496,500,489,489,513,0,468,490],
[501,476,498,515,490,512,500,509,527,532,0,529],
[466,499,479,486,491,493,478,487,519,510,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 77, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,455,489,511,468,512,520,477,492,505,475],
[529,0,476,526,506,497,494,510,479,487,488,495],
[545,524,0,524,542,498,528,557,500,492,489,505],
[511,474,476,0,491,472,484,511,480,504,499,483],
[489,494,458,509,0,475,511,488,458,490,485,463],
[532,503,502,528,525,0,515,530,479,498,513,517],
[488,506,472,516,489,485,0,552,459,499,486,464],
[480,490,443,489,512,470,448,0,468,487,466,475],
[523,521,500,520,542,521,541,532,0,523,504,503],
[508,513,508,496,510,502,501,513,477,0,515,540],
[495,512,511,501,515,487,514,534,496,485,0,492],
[525,505,495,517,537,483,536,525,497,460,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 78, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,489,508,503,512,504,496,499,505,500,515],
[513,0,497,521,506,490,502,510,477,505,497,509],
[511,503,0,496,532,521,503,514,486,509,491,506],
[492,479,504,0,493,526,494,484,478,493,493,505],
[497,494,468,507,0,505,517,517,507,507,479,515],
[488,510,479,474,495,0,475,495,476,471,479,483],
[496,498,497,506,483,525,0,491,509,500,474,507],
[504,490,486,516,483,505,509,0,505,530,501,518],
[501,523,514,522,493,524,491,495,0,512,497,509],
[495,495,491,507,493,529,500,470,488,0,481,512],
[500,503,509,507,521,521,526,499,503,519,0,523],
[485,491,494,495,485,517,493,482,491,488,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 79, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,319,256,428,332,473,375,505,323,339,451],
[549,0,449,446,470,430,538,489,491,523,408,490],
[681,551,0,397,702,462,665,570,596,508,542,638],
[744,554,603,0,646,608,724,575,612,499,517,692],
[572,530,298,354,0,289,581,487,529,406,421,463],
[668,570,538,392,711,0,742,509,628,549,367,628],
[527,462,335,276,419,258,0,406,520,416,437,444],
[625,511,430,425,513,491,594,0,521,448,459,601],
[495,509,404,388,471,372,480,479,0,380,376,503],
[677,477,492,501,594,451,584,552,620,0,414,641],
[661,592,458,483,579,633,563,541,624,586,0,617],
[549,510,362,308,537,372,556,399,497,359,383,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 80, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,557,499,490,513,527,490,504,478,515,508,504],
[443,0,463,421,436,500,461,513,476,452,492,453],
[501,537,0,478,495,579,519,533,503,502,509,511],
[510,579,522,0,551,565,537,545,496,532,540,559],
[487,564,505,449,0,519,476,550,495,517,545,523],
[473,500,421,435,481,0,466,509,444,488,469,505],
[510,539,481,463,524,534,0,518,507,474,499,495],
[496,487,467,455,450,491,482,0,457,477,490,494],
[522,524,497,504,505,556,493,543,0,500,529,532],
[485,548,498,468,483,512,526,523,500,0,514,529],
[492,508,491,460,455,531,501,510,471,486,0,500],
[496,547,489,441,477,495,505,506,468,471,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 81, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,542,513,482,540,516,478,474,507,491,479,508],
[458,0,503,480,522,518,471,484,513,483,472,491],
[487,497,0,484,485,485,467,468,490,468,463,455],
[518,520,516,0,515,497,508,518,540,535,518,533],
[460,478,515,485,0,481,450,507,483,469,456,486],
[484,482,515,503,519,0,488,537,497,498,491,500],
[522,529,533,492,550,512,0,547,538,523,516,517],
[526,516,532,482,493,463,453,0,483,502,456,468],
[493,487,510,460,517,503,462,517,0,502,481,480],
[509,517,532,465,531,502,477,498,498,0,470,490],
[521,528,537,482,544,509,484,544,519,530,0,497],
[492,509,545,467,514,500,483,532,520,510,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 82, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,509,540,512,487,507,496,490,502,476,463],
[488,0,459,505,479,469,514,487,480,483,500,503],
[491,541,0,558,500,498,511,532,505,530,516,508],
[460,495,442,0,462,479,457,505,442,460,477,449],
[488,521,500,538,0,498,518,523,508,504,500,506],
[513,531,502,521,502,0,511,512,488,506,525,498],
[493,486,489,543,482,489,0,506,498,476,523,488],
[504,513,468,495,477,488,494,0,459,472,492,482],
[510,520,495,558,492,512,502,541,0,524,549,512],
[498,517,470,540,496,494,524,528,476,0,497,500],
[524,500,484,523,500,475,477,508,451,503,0,483],
[537,497,492,551,494,502,512,518,488,500,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 83, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,512,507,505,494,512,513,507,513,511,483],
[497,0,502,496,500,487,499,507,510,518,500,499],
[488,498,0,507,515,490,504,508,491,516,522,488],
[493,504,493,0,510,517,510,520,508,526,525,503],
[495,500,485,490,0,498,490,504,487,508,509,491],
[506,513,510,483,502,0,478,489,486,518,506,494],
[488,501,496,490,510,522,0,507,491,501,514,480],
[487,493,492,480,496,511,493,0,490,517,511,467],
[493,490,509,492,513,514,509,510,0,510,538,508],
[487,482,484,474,492,482,499,483,490,0,499,483],
[489,500,478,475,491,494,486,489,462,501,0,466],
[517,501,512,497,509,506,520,533,492,517,534,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 84, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,503,507,514,505,515,500,488,514,461,518],
[517,0,537,537,542,547,492,479,508,552,560,540],
[497,463,0,492,515,529,497,467,454,507,500,490],
[493,463,508,0,492,495,479,489,446,489,466,467],
[486,458,485,508,0,522,505,475,469,499,512,513],
[495,453,471,505,478,0,446,487,454,486,434,484],
[485,508,503,521,495,554,0,487,493,516,477,502],
[500,521,533,511,525,513,513,0,518,543,483,528],
[512,492,546,554,531,546,507,482,0,501,524,539],
[486,448,493,511,501,514,484,457,499,0,462,499],
[539,440,500,534,488,566,523,517,476,538,0,524],
[482,460,510,533,487,516,498,472,461,501,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 85, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,529,491,459,490,471,477,485,513,525,499],
[562,0,571,487,499,465,487,573,533,531,547,518],
[471,429,0,488,461,425,453,485,498,469,468,467],
[509,513,512,0,495,502,479,577,530,534,557,548],
[541,501,539,505,0,490,523,535,472,528,524,544],
[510,535,575,498,510,0,503,560,533,519,517,526],
[529,513,547,521,477,497,0,572,507,552,516,516],
[523,427,515,423,465,440,428,0,457,479,497,476],
[515,467,502,470,528,467,493,543,0,508,539,531],
[487,469,531,466,472,481,448,521,492,0,466,455],
[475,453,532,443,476,483,484,503,461,534,0,496],
[501,482,533,452,456,474,484,524,469,545,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 86, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,511,490,508,494,514,498,533,536,512,533],
[517,0,519,511,495,513,533,515,559,537,526,518],
[489,481,0,494,502,511,500,516,508,501,489,479],
[510,489,506,0,484,504,540,488,541,509,537,499],
[492,505,498,516,0,518,517,507,543,525,495,517],
[506,487,489,496,482,0,551,497,513,477,515,498],
[486,467,500,460,483,449,0,490,475,487,494,482],
[502,485,484,512,493,503,510,0,504,528,522,508],
[467,441,492,459,457,487,525,496,0,513,512,507],
[464,463,499,491,475,523,513,472,487,0,517,491],
[488,474,511,463,505,485,506,478,488,483,0,496],
[467,482,521,501,483,502,518,492,493,509,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 87, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,397,569,495,438,456,443,461,496,505,449],
[556,0,443,494,515,454,509,484,509,478,518,473],
[603,557,0,535,515,509,552,484,518,543,608,552],
[431,506,465,0,443,443,503,408,440,441,481,444],
[505,485,485,557,0,495,485,488,478,487,511,425],
[562,546,491,557,505,0,525,481,500,471,575,465],
[544,491,448,497,515,475,0,455,413,457,445,438],
[557,516,516,592,512,519,545,0,420,526,516,480],
[539,491,482,560,522,500,587,580,0,549,519,488],
[504,522,457,559,513,529,543,474,451,0,475,459],
[495,482,392,519,489,425,555,484,481,525,0,464],
[551,527,448,556,575,535,562,520,512,541,536,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 88, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,617,604,495,626,543,584,601,589,558,547],
[498,0,490,491,434,461,493,520,481,490,510,508],
[383,510,0,495,525,529,608,523,499,500,494,615],
[396,509,505,0,410,513,529,501,450,490,448,592],
[505,566,475,590,0,576,520,564,549,561,554,562],
[374,539,471,487,424,0,533,449,511,478,509,576],
[457,507,392,471,480,467,0,470,420,457,477,551],
[416,480,477,499,436,551,530,0,450,501,437,545],
[399,519,501,550,451,489,580,550,0,513,500,517],
[411,510,500,510,439,522,543,499,487,0,529,521],
[442,490,506,552,446,491,523,563,500,471,0,514],
[453,492,385,408,438,424,449,455,483,479,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 89, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,494,491,500,499,463,490,487,513,506,498],
[505,0,478,473,503,497,503,494,487,496,485,510],
[506,522,0,510,527,500,476,490,501,527,503,508],
[509,527,490,0,540,512,476,510,490,507,503,508],
[500,497,473,460,0,473,457,497,466,505,478,487],
[501,503,500,488,527,0,485,510,501,490,503,486],
[537,497,524,524,543,515,0,516,513,514,515,506],
[510,506,510,490,503,490,484,0,498,509,505,508],
[513,513,499,510,534,499,487,502,0,516,513,520],
[487,504,473,493,495,510,486,491,484,0,496,497],
[494,515,497,497,522,497,485,495,487,504,0,485],
[502,490,492,492,513,514,494,492,480,503,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 90, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,484,515,476,499,465,479,473,484,497,472],
[516,0,507,504,525,490,490,510,498,489,516,488],
[516,493,0,516,503,509,501,501,502,469,508,507],
[485,496,484,0,490,484,489,483,498,453,459,463],
[524,475,497,510,0,479,498,490,476,472,468,498],
[501,510,491,516,521,0,482,493,506,483,495,495],
[535,510,499,511,502,518,0,487,477,489,500,495],
[521,490,499,517,510,507,513,0,500,498,524,477],
[527,502,498,502,524,494,523,500,0,499,517,506],
[516,511,531,547,528,517,511,502,501,0,539,493],
[503,484,492,541,532,505,500,476,483,461,0,459],
[528,512,493,537,502,505,505,523,494,507,541,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 91, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,522,480,509,491,510,500,570,461,533,523],
[499,0,515,494,514,482,514,499,569,462,527,513],
[478,485,0,460,503,475,498,468,507,436,480,465],
[520,506,540,0,506,483,516,496,528,501,550,536],
[491,486,497,494,0,472,517,470,536,481,519,514],
[509,518,525,517,528,0,529,506,536,478,515,497],
[490,486,502,484,483,471,0,493,511,447,532,499],
[500,501,532,504,530,494,507,0,512,448,565,517],
[430,431,493,472,464,464,489,488,0,483,487,507],
[539,538,564,499,519,522,553,552,517,0,557,525],
[467,473,520,450,481,485,468,435,513,443,0,498],
[477,487,535,464,486,503,501,483,493,475,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 92, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,427,466,449,430,483,506,446,430,421,446],
[523,0,565,601,602,498,533,565,585,560,535,521],
[573,435,0,472,571,478,479,522,467,500,480,534],
[534,399,528,0,576,452,477,597,534,578,540,575],
[551,398,429,424,0,440,472,517,415,444,419,502],
[570,502,522,548,560,0,460,623,504,550,489,617],
[517,467,521,523,528,540,0,516,561,551,509,559],
[494,435,478,403,483,377,484,0,406,453,422,504],
[554,415,533,466,585,496,439,594,0,493,508,505],
[570,440,500,422,556,450,449,547,507,0,415,504],
[579,465,520,460,581,511,491,578,492,585,0,510],
[554,479,466,425,498,383,441,496,495,496,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 93, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,516,497,512,489,513,514,500,490,507,507],
[512,0,499,492,525,508,514,496,521,516,514,507],
[484,501,0,496,515,483,490,476,495,494,478,493],
[503,508,504,0,515,488,512,482,519,505,510,498],
[488,475,485,485,0,489,499,484,496,500,491,487],
[511,492,517,512,511,0,517,493,524,510,497,501],
[487,486,510,488,501,483,0,507,502,510,523,481],
[486,504,524,518,516,507,493,0,497,498,507,494],
[500,479,505,481,504,476,498,503,0,503,485,491],
[510,484,506,495,500,490,490,502,497,0,502,493],
[493,486,522,490,509,503,477,493,515,498,0,510],
[493,493,507,502,513,499,519,506,509,507,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 94, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,517,478,497,492,560,490,482,502,489,495],
[489,0,468,466,487,465,521,483,498,481,481,471],
[483,532,0,492,506,517,531,504,491,506,497,507],
[522,534,508,0,486,479,543,483,503,500,460,494],
[503,513,494,514,0,469,508,494,510,467,501,485],
[508,535,483,521,531,0,520,517,506,486,515,513],
[440,479,469,457,492,480,0,474,464,469,456,477],
[510,517,496,517,506,483,526,0,501,494,508,521],
[518,502,509,497,490,494,536,499,0,494,492,487],
[498,519,494,500,533,514,531,506,506,0,506,516],
[511,519,503,540,499,485,544,492,508,494,0,518],
[505,529,493,506,515,487,523,479,513,484,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 95, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,504,506,536,512,498,511,501,524,516,468],
[530,0,513,502,551,549,505,503,497,551,542,506],
[496,487,0,510,520,508,529,530,473,522,514,472],
[494,498,490,0,504,501,506,488,516,529,511,499],
[464,449,480,496,0,510,481,504,493,504,496,466],
[488,451,492,499,490,0,490,481,483,528,501,476],
[502,495,471,494,519,510,0,502,478,520,522,482],
[489,497,470,512,496,519,498,0,495,537,507,517],
[499,503,527,484,507,517,522,505,0,532,514,507],
[476,449,478,471,496,472,480,463,468,0,501,445],
[484,458,486,489,504,499,478,493,486,499,0,474],
[532,494,528,501,534,524,518,483,493,555,526,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 96, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,513,486,480,480,469,464,483,457,505,496],
[526,0,521,574,521,548,526,507,451,517,546,560],
[487,479,0,492,489,441,477,452,440,479,487,483],
[514,426,508,0,476,445,470,502,457,499,513,526],
[520,479,511,524,0,478,494,498,465,485,518,547],
[520,452,559,555,522,0,524,492,482,467,532,535],
[531,474,523,530,506,476,0,479,460,481,542,548],
[536,493,548,498,502,508,521,0,509,518,519,582],
[517,549,560,543,535,518,540,491,0,535,527,593],
[543,483,521,501,515,533,519,482,465,0,533,538],
[495,454,513,487,482,468,458,481,473,467,0,511],
[504,440,517,474,453,465,452,418,407,462,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 97, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,461,523,521,522,463,520,520,495,515,455],
[491,0,523,547,497,538,485,521,507,496,520,457],
[539,477,0,539,532,537,489,528,507,517,531,480],
[477,453,461,0,499,488,458,475,472,481,468,492],
[479,503,468,501,0,491,509,508,470,474,494,482],
[478,462,463,512,509,0,453,509,511,492,505,488],
[537,515,511,542,491,547,0,547,512,505,525,487],
[480,479,472,525,492,491,453,0,500,521,514,456],
[480,493,493,528,530,489,488,500,0,480,494,514],
[505,504,483,519,526,508,495,479,520,0,524,490],
[485,480,469,532,506,495,475,486,506,476,0,476],
[545,543,520,508,518,512,513,544,486,510,524,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 98, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,550,584,504,517,524,547,568,550,523,545,493],
[450,0,568,497,451,505,490,495,534,471,496,434],
[416,432,0,444,434,461,482,435,465,485,408,449],
[496,503,556,0,433,539,499,522,521,482,503,507],
[483,549,566,567,0,554,523,515,569,575,513,465],
[476,495,539,461,446,0,522,512,507,479,475,437],
[453,510,518,501,477,478,0,436,495,507,508,436],
[432,505,565,478,485,488,564,0,543,494,506,459],
[450,466,535,479,431,493,505,457,0,481,470,436],
[477,529,515,518,425,521,493,506,519,0,491,456],
[455,504,592,497,487,525,492,494,530,509,0,428],
[507,566,551,493,535,563,564,541,564,544,572,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 99, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,485,520,528,505,461,504,471,469,479,499],
[511,0,530,521,521,527,498,502,515,526,503,551],
[515,470,0,513,513,510,492,483,495,516,478,495],
[480,479,487,0,490,499,455,490,463,472,477,495],
[472,479,487,510,0,493,482,478,467,510,482,509],
[495,473,490,501,507,0,468,488,484,496,475,503],
[539,502,508,545,518,532,0,505,533,500,513,527],
[496,498,517,510,522,512,495,0,525,494,489,514],
[529,485,505,537,533,516,467,475,0,507,497,524],
[531,474,484,528,490,504,500,506,493,0,462,496],
[521,497,522,523,518,525,487,511,503,538,0,526],
[501,449,505,505,491,497,473,486,476,504,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 100, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,502,473,471,504,459,501,480,470,486,475],
[529,0,508,498,518,516,488,507,488,512,492,502],
[498,492,0,503,466,501,479,498,482,488,489,475],
[527,502,497,0,496,504,475,517,476,479,489,483],
[529,482,534,504,0,531,507,527,498,510,489,511],
[496,484,499,496,469,0,474,492,473,472,476,481],
[541,512,521,525,493,526,0,513,496,508,499,516],
[499,493,502,483,473,508,487,0,476,490,480,499],
[520,512,518,524,502,527,504,524,0,500,507,519],
[530,488,512,521,490,528,492,510,500,0,505,502],
[514,508,511,511,511,524,501,520,493,495,0,545],
[525,498,525,517,489,519,484,501,481,498,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 101, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,549,577,627,495,638,532,533,590,562,623,616],
[451,0,561,546,458,588,531,474,641,497,517,462],
[423,439,0,537,526,527,505,471,463,552,581,440],
[373,454,463,0,470,485,565,470,494,492,563,483],
[505,542,474,530,0,631,438,458,429,440,544,476],
[362,412,473,515,369,0,527,513,437,492,495,418],
[468,469,495,435,562,473,0,531,414,457,522,479],
[467,526,529,530,542,487,469,0,586,517,548,482],
[410,359,537,506,571,563,586,414,0,531,538,476],
[438,503,448,508,560,508,543,483,469,0,511,540],
[377,483,419,437,456,505,478,452,462,489,0,346],
[384,538,560,517,524,582,521,518,524,460,654,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 102, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,485,486,522,485,491,503,485,489,504,509],
[509,0,495,500,526,493,496,491,514,492,507,490],
[515,505,0,506,518,487,505,487,520,497,509,504],
[514,500,494,0,522,509,501,492,509,501,511,515],
[478,474,482,478,0,472,473,472,474,476,475,476],
[515,507,513,491,528,0,512,515,511,505,495,514],
[509,504,495,499,527,488,0,491,506,502,501,490],
[497,509,513,508,528,485,509,0,502,496,496,530],
[515,486,480,491,526,489,494,498,0,482,474,513],
[511,508,503,499,524,495,498,504,518,0,498,489],
[496,493,491,489,525,505,499,504,526,502,0,508],
[491,510,496,485,524,486,510,470,487,511,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 103, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,514,487,490,494,448,485,554,515,477,552],
[489,0,533,502,471,512,470,528,521,515,506,547],
[486,467,0,493,509,488,453,466,504,480,463,520],
[513,498,507,0,505,459,473,503,554,507,507,577],
[510,529,491,495,0,464,512,493,526,506,492,548],
[506,488,512,541,536,0,532,533,530,505,514,525],
[552,530,547,527,488,468,0,474,558,482,503,557],
[515,472,534,497,507,467,526,0,539,492,483,551],
[446,479,496,446,474,470,442,461,0,444,475,501],
[485,485,520,493,494,495,518,508,556,0,495,526],
[523,494,537,493,508,486,497,517,525,505,0,532],
[448,453,480,423,452,475,443,449,499,474,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 104, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,467,495,471,515,517,496,487,523,509,501],
[484,0,457,496,505,515,491,512,489,476,500,512],
[533,543,0,524,499,546,517,537,494,505,549,520],
[505,504,476,0,487,494,477,504,474,501,527,479],
[529,495,501,513,0,557,530,520,521,538,518,511],
[485,485,454,506,443,0,455,491,467,503,492,511],
[483,509,483,523,470,545,0,512,477,501,479,502],
[504,488,463,496,480,509,488,0,467,505,495,502],
[513,511,506,526,479,533,523,533,0,547,523,513],
[477,524,495,499,462,497,499,495,453,0,478,496],
[491,500,451,473,482,508,521,505,477,522,0,514],
[499,488,480,521,489,489,498,498,487,504,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 105, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,501,511,535,499,560,490,552,505,531,515],
[503,0,513,498,538,467,542,495,546,508,508,505],
[499,487,0,469,512,463,528,462,504,483,499,502],
[489,502,531,0,538,481,543,464,529,501,518,501],
[465,462,488,462,0,459,515,477,505,484,478,484],
[501,533,537,519,541,0,553,531,538,500,514,509],
[440,458,472,457,485,447,0,433,496,496,479,472],
[510,505,538,536,523,469,567,0,541,511,527,520],
[448,454,496,471,495,462,504,459,0,470,479,489],
[495,492,517,499,516,500,504,489,530,0,521,503],
[469,492,501,482,522,486,521,473,521,479,0,495],
[485,495,498,499,516,491,528,480,511,497,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 106, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,504,469,502,501,498,475,502,502,498,505],
[521,0,518,507,528,531,535,506,494,522,538,536],
[496,482,0,503,512,538,485,504,526,507,489,522],
[531,493,497,0,510,498,512,494,504,500,532,533],
[498,472,488,490,0,509,494,478,504,491,480,515],
[499,469,462,502,491,0,478,500,494,504,528,516],
[502,465,515,488,506,522,0,501,495,475,519,513],
[525,494,496,506,522,500,499,0,511,505,541,534],
[498,506,474,496,496,506,505,489,0,486,502,528],
[498,478,493,500,509,496,525,495,514,0,534,539],
[502,462,511,468,520,472,481,459,498,466,0,539],
[495,464,478,467,485,484,487,466,472,461,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 107, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,527,495,531,538,522,565,474,527,515,473],
[505,0,540,510,546,499,555,561,531,550,491,516],
[473,460,0,482,507,456,496,549,473,501,472,448],
[505,490,518,0,489,485,543,520,505,515,473,480],
[469,454,493,511,0,446,525,531,499,522,508,491],
[462,501,544,515,554,0,557,542,524,515,525,529],
[478,445,504,457,475,443,0,513,409,493,455,440],
[435,439,451,480,469,458,487,0,437,501,460,462],
[526,469,527,495,501,476,591,563,0,503,508,496],
[473,450,499,485,478,485,507,499,497,0,473,468],
[485,509,528,527,492,475,545,540,492,527,0,522],
[527,484,552,520,509,471,560,538,504,532,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 108, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,489,514,485,523,524,491,495,543,560,512],
[508,0,503,530,513,499,506,528,522,545,530,498],
[511,497,0,519,475,491,529,487,504,559,546,495],
[486,470,481,0,461,476,487,495,463,511,533,477],
[515,487,525,539,0,543,538,537,510,544,565,519],
[477,501,509,524,457,0,531,500,483,554,538,499],
[476,494,471,513,462,469,0,506,508,508,529,509],
[509,472,513,505,463,500,494,0,480,529,549,484],
[505,478,496,537,490,517,492,520,0,521,531,480],
[457,455,441,489,456,446,492,471,479,0,493,487],
[440,470,454,467,435,462,471,451,469,507,0,477],
[488,502,505,523,481,501,491,516,520,513,523,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 109, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,476,474,459,527,499,478,514,467,515,497],
[483,0,487,496,474,514,520,510,504,485,486,494],
[524,513,0,499,513,529,516,506,557,503,505,520],
[526,504,501,0,507,522,514,522,523,480,516,512],
[541,526,487,493,0,507,522,526,525,490,515,505],
[473,486,471,478,493,0,484,470,510,498,493,493],
[501,480,484,486,478,516,0,506,515,501,492,495],
[522,490,494,478,474,530,494,0,510,496,517,491],
[486,496,443,477,475,490,485,490,0,479,503,488],
[533,515,497,520,510,502,499,504,521,0,521,513],
[485,514,495,484,485,507,508,483,497,479,0,507],
[503,506,480,488,495,507,505,509,512,487,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 110, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,454,506,518,518,504,501,436,519,484,462],
[514,0,484,492,509,544,511,484,476,514,485,502],
[546,516,0,517,568,557,544,500,515,547,532,501],
[494,508,483,0,531,507,530,545,499,543,513,521],
[482,491,432,469,0,487,534,493,440,497,471,486],
[482,456,443,493,513,0,467,479,488,510,466,485],
[496,489,456,470,466,533,0,457,472,521,473,487],
[499,516,500,455,507,521,543,0,440,514,504,483],
[564,524,485,501,560,512,528,560,0,509,518,513],
[481,486,453,457,503,490,479,486,491,0,505,468],
[516,515,468,487,529,534,527,496,482,495,0,502],
[538,498,499,479,514,515,513,517,487,532,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 111, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,526,585,510,480,510,507,527,502,474,454,479],
[474,0,496,503,420,444,453,574,538,475,531,421],
[415,504,0,470,439,422,439,505,456,440,455,457],
[490,497,530,0,542,525,480,536,525,461,494,506],
[520,580,561,458,0,469,559,565,541,492,528,472],
[490,556,578,475,531,0,499,535,522,414,491,516],
[493,547,561,520,441,501,0,554,511,442,525,432],
[473,426,495,464,435,465,446,0,528,396,494,424],
[498,462,544,475,459,478,489,472,0,419,513,433],
[526,525,560,539,508,586,558,604,581,0,514,488],
[546,469,545,506,472,509,475,506,487,486,0,444],
[521,579,543,494,528,484,568,576,567,512,556,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 112, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,473,494,469,503,481,506,519,507,522,508],
[484,0,507,493,465,472,470,512,464,485,503,465],
[527,493,0,525,500,513,484,527,521,512,522,514],
[506,507,475,0,489,510,497,557,507,502,512,527],
[531,535,500,511,0,508,495,519,507,490,528,517],
[497,528,487,490,492,0,470,508,486,497,538,474],
[519,530,516,503,505,530,0,480,515,513,497,493],
[494,488,473,443,481,492,520,0,466,484,489,504],
[481,536,479,493,493,514,485,534,0,509,527,461],
[493,515,488,498,510,503,487,516,491,0,539,507],
[478,497,478,488,472,462,503,511,473,461,0,480],
[492,535,486,473,483,526,507,496,539,493,520,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 113, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,512,499,502,479,516,507,504,496,526,526],
[502,0,511,475,510,488,502,485,505,495,513,517],
[488,489,0,482,476,518,493,489,500,482,506,507],
[501,525,518,0,523,524,509,491,509,513,527,525],
[498,490,524,477,0,497,526,483,497,478,487,516],
[521,512,482,476,503,0,504,484,500,465,519,538],
[484,498,507,491,474,496,0,495,495,495,497,519],
[493,515,511,509,517,516,505,0,507,470,505,532],
[496,495,500,491,503,500,505,493,0,487,497,506],
[504,505,518,487,522,535,505,530,513,0,519,522],
[474,487,494,473,513,481,503,495,503,481,0,491],
[474,483,493,475,484,462,481,468,494,478,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 114, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,515,458,537,545,531,538,522,460,436,437],
[514,0,482,522,527,544,526,511,527,528,435,439],
[485,518,0,442,486,524,510,491,545,503,458,500],
[542,478,558,0,537,543,533,493,532,514,489,465],
[463,473,514,463,0,493,510,500,540,497,416,512],
[455,456,476,457,507,0,487,468,460,478,415,441],
[469,474,490,467,490,513,0,434,471,462,486,459],
[462,489,509,507,500,532,566,0,561,501,442,446],
[478,473,455,468,460,540,529,439,0,515,465,480],
[540,472,497,486,503,522,538,499,485,0,519,487],
[564,565,542,511,584,585,514,558,535,481,0,571],
[563,561,500,535,488,559,541,554,520,513,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 115, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,492,485,497,459,518,512,469,489,486,482],
[503,0,494,493,513,486,507,506,492,507,496,487],
[508,506,0,494,508,489,502,516,492,499,503,484],
[515,507,506,0,506,493,501,517,485,511,519,487],
[503,487,492,494,0,474,528,517,482,534,511,502],
[541,514,511,507,526,0,547,520,505,515,524,498],
[482,493,498,499,472,453,0,489,467,498,480,484],
[488,494,484,483,483,480,511,0,495,484,489,467],
[531,508,508,515,518,495,533,505,0,498,477,474],
[511,493,501,489,466,485,502,516,502,0,506,479],
[514,504,497,481,489,476,520,511,523,494,0,509],
[518,513,516,513,498,502,516,533,526,521,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 116, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,490,505,467,458,462,474,489,496,463,452],
[530,0,512,540,542,511,493,493,540,524,508,493],
[510,488,0,509,530,488,501,514,557,489,510,466],
[495,460,491,0,518,451,487,484,519,480,468,457],
[533,458,470,482,0,448,458,463,518,475,457,455],
[542,489,512,549,552,0,503,500,532,528,491,500],
[538,507,499,513,542,497,0,493,536,516,505,505],
[526,507,486,516,537,500,507,0,523,489,485,498],
[511,460,443,481,482,468,464,477,0,461,444,450],
[504,476,511,520,525,472,484,511,539,0,491,468],
[537,492,490,532,543,509,495,515,556,509,0,497],
[548,507,534,543,545,500,495,502,550,532,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 117, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,533,468,484,485,528,481,459,485,519,477],
[504,0,502,500,472,466,516,464,464,456,489,478],
[467,498,0,480,464,452,493,470,474,489,508,461],
[532,500,520,0,488,470,517,499,502,481,535,480],
[516,528,536,512,0,487,529,487,496,506,515,524],
[515,534,548,530,513,0,547,478,497,494,538,497],
[472,484,507,483,471,453,0,449,456,461,494,464],
[519,536,530,501,513,522,551,0,498,482,523,502],
[541,536,526,498,504,503,544,502,0,489,515,500],
[515,544,511,519,494,506,539,518,511,0,538,516],
[481,511,492,465,485,462,506,477,485,462,0,464],
[523,522,539,520,476,503,536,498,500,484,536,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 118, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,522,520,518,502,531,500,531,523,512,516],
[486,0,528,524,520,506,522,503,539,527,510,561],
[478,472,0,503,511,497,484,489,513,487,500,531],
[480,476,497,0,493,473,500,494,520,486,493,488],
[482,480,489,507,0,478,502,492,517,492,501,503],
[498,494,503,527,522,0,521,521,547,505,512,525],
[469,478,516,500,498,479,0,492,508,512,480,481],
[500,497,511,506,508,479,508,0,531,510,522,534],
[469,461,487,480,483,453,492,469,0,472,458,503],
[477,473,513,514,508,495,488,490,528,0,508,490],
[488,490,500,507,499,488,520,478,542,492,0,519],
[484,439,469,512,497,475,519,466,497,510,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 119, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,403,364,475,497,612,455,415,367,557,482,404],
[597,0,443,659,589,678,531,555,573,512,612,576],
[636,557,0,511,629,648,716,479,557,575,561,443],
[525,341,489,0,551,672,463,524,389,574,382,396],
[503,411,371,449,0,564,479,415,461,587,469,453],
[388,322,352,328,436,0,473,312,388,437,466,392],
[545,469,284,537,521,527,0,464,513,432,514,463],
[585,445,521,476,585,688,536,0,546,598,579,518],
[633,427,443,611,539,612,487,454,0,474,535,472],
[443,488,425,426,413,563,568,402,526,0,500,491],
[518,388,439,618,531,534,486,421,465,500,0,532],
[596,424,557,604,547,608,537,482,528,509,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 120, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,537,641,491,508,491,568,510,505,474,498],
[532,0,553,558,524,486,477,589,470,535,492,497],
[463,447,0,532,498,463,497,545,532,506,500,456],
[359,442,468,0,420,424,392,484,461,488,392,454],
[509,476,502,580,0,466,497,540,486,510,466,482],
[492,514,537,576,534,0,483,623,540,555,537,564],
[509,523,503,608,503,517,0,553,521,498,539,558],
[432,411,455,516,460,377,447,0,445,451,401,457],
[490,530,468,539,514,460,479,555,0,498,529,544],
[495,465,494,512,490,445,502,549,502,0,509,548],
[526,508,500,608,534,463,461,599,471,491,0,571],
[502,503,544,546,518,436,442,543,456,452,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 121, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,510,518,493,538,511,480,484,477,508,524],
[513,0,540,558,534,535,521,523,474,507,535,543],
[490,460,0,521,513,517,550,499,486,502,501,532],
[482,442,479,0,485,487,478,475,474,500,484,485],
[507,466,487,515,0,506,505,472,485,475,497,511],
[462,465,483,513,494,0,522,495,464,491,472,520],
[489,479,450,522,495,478,0,483,484,465,504,519],
[520,477,501,525,528,505,517,0,510,493,490,530],
[516,526,514,526,515,536,516,490,0,507,503,547],
[523,493,498,500,525,509,535,507,493,0,479,549],
[492,465,499,516,503,528,496,510,497,521,0,515],
[476,457,468,515,489,480,481,470,453,451,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 122, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,525,526,489,526,512,487,513,514,537,523],
[483,0,491,511,489,513,480,482,509,506,514,483],
[475,509,0,544,479,512,476,509,490,507,537,521],
[474,489,456,0,489,493,494,458,495,488,536,500],
[511,511,521,511,0,523,498,485,492,508,529,525],
[474,487,488,507,477,0,487,472,460,475,508,504],
[488,520,524,506,502,513,0,456,502,511,515,515],
[513,518,491,542,515,528,544,0,525,523,549,538],
[487,491,510,505,508,540,498,475,0,473,527,515],
[486,494,493,512,492,525,489,477,527,0,522,516],
[463,486,463,464,471,492,485,451,473,478,0,497],
[477,517,479,500,475,496,485,462,485,484,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 123, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,497,472,473,525,485,452,489,486,496,488],
[521,0,537,507,500,532,502,493,549,534,511,519],
[503,463,0,494,481,495,485,482,498,490,483,418],
[528,493,506,0,496,521,517,482,511,502,512,489],
[527,500,519,504,0,534,524,495,560,513,510,532],
[475,468,505,479,466,0,479,470,496,448,447,494],
[515,498,515,483,476,521,0,467,498,483,475,523],
[548,507,518,518,505,530,533,0,522,518,516,499],
[511,451,502,489,440,504,502,478,0,485,470,464],
[514,466,510,498,487,552,517,482,515,0,479,502],
[504,489,517,488,490,553,525,484,530,521,0,527],
[512,481,582,511,468,506,477,501,536,498,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 124, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,518,532,488,509,483,507,539,490,488,503],
[489,0,497,502,509,469,497,490,524,503,516,474],
[482,503,0,520,458,477,462,495,498,484,465,512],
[468,498,480,0,494,459,456,468,498,457,488,505],
[512,491,542,506,0,477,495,521,484,485,492,502],
[491,531,523,541,523,0,491,485,522,530,519,537],
[517,503,538,544,505,509,0,536,539,495,538,516],
[493,510,505,532,479,515,464,0,506,491,499,503],
[461,476,502,502,516,478,461,494,0,477,489,474],
[510,497,516,543,515,470,505,509,523,0,483,508],
[512,484,535,512,508,481,462,501,511,517,0,487],
[497,526,488,495,498,463,484,497,526,492,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 125, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,477,467,469,486,458,480,505,500,505,515],
[524,0,549,468,481,532,479,485,533,536,518,519],
[523,451,0,487,477,477,485,491,506,473,505,506],
[533,532,513,0,477,533,484,522,551,557,513,567],
[531,519,523,523,0,526,500,490,532,516,534,543],
[514,468,523,467,474,0,456,462,521,477,523,562],
[542,521,515,516,500,544,0,525,544,515,542,583],
[520,515,509,478,510,538,475,0,558,531,540,533],
[495,467,494,449,468,479,456,442,0,490,485,503],
[500,464,527,443,484,523,485,469,510,0,476,544],
[495,482,495,487,466,477,458,460,515,524,0,518],
[485,481,494,433,457,438,417,467,497,456,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 126, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,455,436,488,383,593,458,518,492,581,350],
[582,0,268,601,434,571,650,407,560,568,413,581],
[545,732,0,644,411,414,634,574,597,461,518,653],
[564,399,356,0,345,485,474,256,511,220,298,346],
[512,566,589,655,0,482,447,512,576,477,483,501],
[617,429,586,515,518,0,517,593,665,418,507,584],
[407,350,366,526,553,483,0,365,502,532,394,489],
[542,593,426,744,488,407,635,0,709,499,586,709],
[482,440,403,489,424,335,498,291,0,466,345,368],
[508,432,539,780,523,582,468,501,534,0,434,600],
[419,587,482,702,517,493,606,414,655,566,0,534],
[650,419,347,654,499,416,511,291,632,400,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 127, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,513,513,489,543,459,535,567,535,540,465],
[485,0,471,503,477,512,438,510,513,460,541,453],
[487,529,0,533,497,520,473,538,537,525,543,518],
[487,497,467,0,499,523,439,481,515,469,530,455],
[511,523,503,501,0,560,469,497,526,528,612,495],
[457,488,480,477,440,0,445,512,461,452,503,486],
[541,562,527,561,531,555,0,538,540,534,564,497],
[465,490,462,519,503,488,462,0,517,461,524,510],
[433,487,463,485,474,539,460,483,0,495,528,494],
[465,540,475,531,472,548,466,539,505,0,570,487],
[460,459,457,470,388,497,436,476,472,430,0,421],
[535,547,482,545,505,514,503,490,506,513,579,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 128, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,534,523,475,550,518,484,489,458,516,498,526],
[466,0,547,512,503,497,503,528,473,517,494,490],
[477,453,0,470,475,472,454,503,480,482,493,448],
[525,488,530,0,539,506,505,548,500,517,539,510],
[450,497,525,461,0,493,506,453,474,525,513,479],
[482,503,528,494,507,0,520,481,485,518,505,491],
[516,497,546,495,494,480,0,482,486,547,550,522],
[511,472,497,452,547,519,518,0,492,498,488,499],
[542,527,520,500,526,515,514,508,0,521,521,485],
[484,483,518,483,475,482,453,502,479,0,494,527],
[502,506,507,461,487,495,450,512,479,506,0,457],
[474,510,552,490,521,509,478,501,515,473,543,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 129, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,530,501,513,521,540,480,512,508,509,536,500],
[470,0,489,492,477,499,472,501,478,501,487,471],
[499,511,0,506,502,505,491,517,507,489,514,498],
[487,508,494,0,489,504,481,500,504,504,483,481],
[479,523,498,511,0,514,495,486,494,505,514,484],
[460,501,495,496,486,0,473,489,482,503,485,479],
[520,528,509,519,505,527,0,496,522,522,514,480],
[488,499,483,500,514,511,504,0,500,502,501,491],
[492,522,493,496,506,518,478,500,0,503,481,489],
[491,499,511,496,495,497,478,498,497,0,505,497],
[464,513,486,517,486,515,486,499,519,495,0,493],
[500,529,502,519,516,521,520,509,511,503,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 130, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,529,526,513,517,501,497,519,511,496,490,524],
[471,0,517,502,512,496,506,502,512,493,497,543],
[474,483,0,489,504,477,486,491,498,474,472,493],
[487,498,511,0,511,487,482,512,513,491,469,531],
[483,488,496,489,0,486,501,469,496,494,473,494],
[499,504,523,513,514,0,495,504,520,493,482,544],
[503,494,514,518,499,505,0,510,498,510,504,540],
[481,498,509,488,531,496,490,0,514,500,496,516],
[489,488,502,487,504,480,502,486,0,493,465,523],
[504,507,526,509,506,507,490,500,507,0,490,502],
[510,503,528,531,527,518,496,504,535,510,0,552],
[476,457,507,469,506,456,460,484,477,498,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 131, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,477,474,490,500,518,491,507,464,463,515],
[490,0,476,510,511,491,501,486,502,476,478,515],
[523,524,0,535,525,536,532,492,496,475,532,526],
[526,490,465,0,506,529,484,459,501,441,470,488],
[510,489,475,494,0,522,483,467,510,464,487,517],
[500,509,464,471,478,0,480,455,496,446,487,508],
[482,499,468,516,517,520,0,494,538,453,506,525],
[509,514,508,541,533,545,506,0,534,481,480,486],
[493,498,504,499,490,504,462,466,0,477,469,514],
[536,524,525,559,536,554,547,519,523,0,499,525],
[537,522,468,530,513,513,494,520,531,501,0,530],
[485,485,474,512,483,492,475,514,486,475,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 132, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,523,542,506,528,528,534,519,522,493,553,534],
[477,0,508,473,514,482,482,518,497,495,493,471],
[458,492,0,479,474,470,498,509,490,478,501,468],
[494,527,521,0,549,479,521,510,525,523,520,506],
[472,486,526,451,0,470,457,507,528,479,516,477],
[472,518,530,521,530,0,517,501,510,500,528,479],
[466,518,502,479,543,483,0,508,492,477,523,486],
[481,482,491,490,493,499,492,0,484,483,503,488],
[478,503,510,475,472,490,508,516,0,481,503,458],
[507,505,522,477,521,500,523,517,519,0,526,487],
[447,507,499,480,484,472,477,497,497,474,0,461],
[466,529,532,494,523,521,514,512,542,513,539,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 133, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,497,495,543,549,553,501,488,545,488,471],
[515,0,513,549,555,527,556,549,480,601,511,472],
[503,487,0,527,520,518,555,550,494,594,470,517],
[505,451,473,0,541,539,539,540,495,568,485,517],
[457,445,480,459,0,517,506,538,413,553,427,454],
[451,473,482,461,483,0,535,493,489,545,457,441],
[447,444,445,461,494,465,0,505,430,494,441,444],
[499,451,450,460,462,507,495,0,474,526,466,463],
[512,520,506,505,587,511,570,526,0,615,432,493],
[455,399,406,432,447,455,506,474,385,0,410,417],
[512,489,530,515,573,543,559,534,568,590,0,502],
[529,528,483,483,546,559,556,537,507,583,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 134, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,471,492,482,458,448,449,479,473,471,427],
[488,0,445,463,475,450,441,434,468,463,459,413],
[529,555,0,528,504,488,476,511,553,508,549,465],
[508,537,472,0,500,502,525,472,512,492,480,480],
[518,525,496,500,0,482,513,464,504,467,483,455],
[542,550,512,498,518,0,515,503,497,501,512,462],
[552,559,524,475,487,485,0,508,549,464,480,494],
[551,566,489,528,536,497,492,0,553,532,498,507],
[521,532,447,488,496,503,451,447,0,464,468,480],
[527,537,492,508,533,499,536,468,536,0,492,455],
[529,541,451,520,517,488,520,502,532,508,0,461],
[573,587,535,520,545,538,506,493,520,545,539,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 135, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,531,544,537,639,580,382,604,498,580,525,585],
[469,0,577,409,545,580,443,547,421,453,329,452],
[456,423,0,456,570,540,443,545,489,464,411,472],
[463,591,544,0,631,550,449,494,429,550,555,476],
[361,455,430,369,0,536,318,398,374,451,319,306],
[420,420,460,450,464,0,407,462,439,516,417,434],
[618,557,557,551,682,593,0,683,618,540,474,472],
[396,453,455,506,602,538,317,0,412,523,423,485],
[502,579,511,571,626,561,382,588,0,596,529,519],
[420,547,536,450,549,484,460,477,404,0,549,500],
[475,671,589,445,681,583,526,577,471,451,0,523],
[415,548,528,524,694,566,528,515,481,500,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 136, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,520,533,532,514,541,520,538,521,535,516],
[507,0,486,513,507,499,494,478,541,492,505,514],
[480,514,0,537,503,475,514,507,514,505,518,526],
[467,487,463,0,496,460,462,453,481,479,498,488],
[468,493,497,504,0,488,505,460,505,489,477,509],
[486,501,525,540,512,0,530,511,518,511,509,518],
[459,506,486,538,495,470,0,466,505,490,474,488],
[480,522,493,547,540,489,534,0,533,524,518,513],
[462,459,486,519,495,482,495,467,0,513,516,494],
[479,508,495,521,511,489,510,476,487,0,510,490],
[465,495,482,502,523,491,526,482,484,490,0,499],
[484,486,474,512,491,482,512,487,506,510,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 137, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,528,512,517,494,532,518,504,522,507,530],
[489,0,509,488,510,508,501,498,508,491,494,520],
[472,491,0,503,487,502,490,493,495,487,487,504],
[488,512,497,0,513,495,509,486,493,496,483,514],
[483,490,513,487,0,523,491,492,509,498,489,488],
[506,492,498,505,477,0,477,476,485,481,483,509],
[468,499,510,491,509,523,0,493,490,480,502,505],
[482,502,507,514,508,524,507,0,527,509,505,517],
[496,492,505,507,491,515,510,473,0,478,500,507],
[478,509,513,504,502,519,520,491,522,0,489,515],
[493,506,513,517,511,517,498,495,500,511,0,513],
[470,480,496,486,512,491,495,483,493,485,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 138, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,482,513,465,482,528,498,490,489,518,482],
[483,0,449,455,452,433,504,456,442,446,478,465],
[518,551,0,496,520,508,518,522,477,485,487,502],
[487,545,504,0,485,478,543,497,468,463,499,479],
[535,548,480,515,0,493,500,542,485,517,522,504],
[518,567,492,522,507,0,540,532,471,494,519,520],
[472,496,482,457,500,460,0,506,445,487,504,481],
[502,544,478,503,458,468,494,0,481,476,509,515],
[510,558,523,532,515,529,555,519,0,497,529,512],
[511,554,515,537,483,506,513,524,503,0,529,498],
[482,522,513,501,478,481,496,491,471,471,0,459],
[518,535,498,521,496,480,519,485,488,502,541,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 139, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,571,515,533,523,541,507,483,476,504,545],
[491,0,485,473,495,434,469,449,458,491,453,477],
[429,515,0,476,480,480,506,469,500,461,469,499],
[485,527,524,0,464,436,494,443,447,507,547,536],
[467,505,520,536,0,518,516,493,488,433,484,522],
[477,566,520,564,482,0,518,470,539,495,511,517],
[459,531,494,506,484,482,0,452,499,447,517,528],
[493,551,531,557,507,530,548,0,461,529,522,537],
[517,542,500,553,512,461,501,539,0,544,522,524],
[524,509,539,493,567,505,553,471,456,0,486,520],
[496,547,531,453,516,489,483,478,478,514,0,509],
[455,523,501,464,478,483,472,463,476,480,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 140, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,586,572,524,461,518,450,577,431,558,581],
[522,0,645,532,463,545,506,497,469,479,454,667],
[414,355,0,525,369,368,454,400,391,325,440,515],
[428,468,475,0,375,398,380,450,379,296,359,551],
[476,537,631,625,0,536,573,507,547,527,459,680],
[539,455,632,602,464,0,420,498,480,429,559,604],
[482,494,546,620,427,580,0,456,537,533,582,641],
[550,503,600,550,493,502,544,0,485,472,503,595],
[423,531,609,621,453,520,463,515,0,463,492,594],
[569,521,675,704,473,571,467,528,537,0,514,632],
[442,546,560,641,541,441,418,497,508,486,0,671],
[419,333,485,449,320,396,359,405,406,368,329,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 141, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,529,506,494,464,504,469,505,473,503,494,496],
[471,0,494,480,464,510,474,477,485,488,507,482],
[494,506,0,486,500,500,494,494,503,505,504,496],
[506,520,514,0,478,505,488,507,493,493,509,486],
[536,536,500,522,0,509,504,512,484,506,519,494],
[496,490,500,495,491,0,504,492,505,483,492,510],
[531,526,506,512,496,496,0,516,478,516,491,496],
[495,523,506,493,488,508,484,0,509,524,502,497],
[527,515,497,507,516,495,522,491,0,506,513,506],
[497,512,495,507,494,517,484,476,494,0,510,496],
[506,493,496,491,481,508,509,498,487,490,0,506],
[504,518,504,514,506,490,504,503,494,504,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 142, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,470,485,491,461,463,498,498,478,462,456],
[511,0,495,474,480,476,469,482,520,497,503,463],
[530,505,0,494,525,501,500,481,515,482,497,495],
[515,526,506,0,505,502,471,504,523,514,518,499],
[509,520,475,495,0,489,498,500,513,488,484,479],
[539,524,499,498,511,0,484,492,502,506,526,505],
[537,531,500,529,502,516,0,506,520,500,509,479],
[502,518,519,496,500,508,494,0,524,507,497,494],
[502,480,485,477,487,498,480,476,0,471,498,496],
[522,503,518,486,512,494,500,493,529,0,520,496],
[538,497,503,482,516,474,491,503,502,480,0,502],
[544,537,505,501,521,495,521,506,504,504,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 143, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,539,532,486,553,502,467,466,536,521,473],
[496,0,536,588,515,563,542,466,512,522,557,518],
[461,464,0,514,506,496,514,458,475,469,506,492],
[468,412,486,0,491,504,490,461,428,489,564,479],
[514,485,494,509,0,458,479,415,444,501,573,417],
[447,437,504,496,542,0,462,446,457,456,529,441],
[498,458,486,510,521,538,0,477,462,526,535,471],
[533,534,542,539,585,554,523,0,513,491,546,507],
[534,488,525,572,556,543,538,487,0,544,599,538],
[464,478,531,511,499,544,474,509,456,0,527,468],
[479,443,494,436,427,471,465,454,401,473,0,413],
[527,482,508,521,583,559,529,493,462,532,587,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 144, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,504,501,506,512,489,496,491,509,484,503],
[483,0,493,485,505,489,500,510,504,480,484,506],
[496,507,0,501,514,508,512,498,502,499,497,487],
[499,515,499,0,497,518,501,514,504,484,480,494],
[494,495,486,503,0,502,511,491,511,487,484,480],
[488,511,492,482,498,0,490,497,506,500,467,500],
[511,500,488,499,489,510,0,500,503,499,476,495],
[504,490,502,486,509,503,500,0,517,505,507,508],
[509,496,498,496,489,494,497,483,0,494,480,479],
[491,520,501,516,513,500,501,495,506,0,506,518],
[516,516,503,520,516,533,524,493,520,494,0,509],
[497,494,513,506,520,500,505,492,521,482,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 145, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,480,507,508,458,484,529,497,529,486,498],
[489,0,507,463,512,510,503,491,511,510,520,519],
[520,493,0,517,430,563,509,489,478,523,524,499],
[493,537,483,0,489,513,424,459,547,490,502,443],
[492,488,570,511,0,540,501,544,566,550,511,507],
[542,490,437,487,460,0,440,451,511,506,447,469],
[516,497,491,576,499,560,0,494,540,549,533,545],
[471,509,511,541,456,549,506,0,520,542,496,480],
[503,489,522,453,434,489,460,480,0,517,483,495],
[471,490,477,510,450,494,451,458,483,0,480,491],
[514,480,476,498,489,553,467,504,517,520,0,482],
[502,481,501,557,493,531,455,520,505,509,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 146, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,463,495,511,483,511,503,503,480,509,520],
[517,0,506,514,514,498,523,508,494,503,503,536],
[537,494,0,494,509,522,529,507,502,495,501,526],
[505,486,506,0,496,477,534,483,499,494,488,514],
[489,486,491,504,0,479,498,493,485,481,493,505],
[517,502,478,523,521,0,512,488,509,487,485,544],
[489,477,471,466,502,488,0,492,500,485,488,496],
[497,492,493,517,507,512,508,0,510,499,492,499],
[497,506,498,501,515,491,500,490,0,487,488,496],
[520,497,505,506,519,513,515,501,513,0,497,546],
[491,497,499,512,507,515,512,508,512,503,0,522],
[480,464,474,486,495,456,504,501,504,454,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 147, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,504,504,514,475,501,511,511,519,522,530],
[513,0,530,469,499,511,525,523,511,498,534,525],
[496,470,0,472,490,473,503,504,503,495,494,498],
[496,531,528,0,508,506,516,527,513,509,515,523],
[486,501,510,492,0,489,527,528,513,509,508,492],
[525,489,527,494,511,0,522,532,521,513,508,519],
[499,475,497,484,473,478,0,500,502,478,489,509],
[489,477,496,473,472,468,500,0,491,483,476,476],
[489,489,497,487,487,479,498,509,0,492,503,519],
[481,502,505,491,491,487,522,517,508,0,499,522],
[478,466,506,485,492,492,511,524,497,501,0,478],
[470,475,502,477,508,481,491,524,481,478,522,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 148, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,467,471,477,519,480,481,502,482,495,506],
[486,0,471,435,497,469,444,468,479,480,488,494],
[533,529,0,480,528,503,493,492,518,497,519,514],
[529,565,520,0,499,520,498,503,515,522,517,528],
[523,503,472,501,0,500,462,516,510,519,505,517],
[481,531,497,480,500,0,501,490,492,492,489,504],
[520,556,507,502,538,499,0,532,542,512,520,510],
[519,532,508,497,484,510,468,0,506,528,493,521],
[498,521,482,485,490,508,458,494,0,490,499,500],
[518,520,503,478,481,508,488,472,510,0,483,506],
[505,512,481,483,495,511,480,507,501,517,0,504],
[494,506,486,472,483,496,490,479,500,494,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 149, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,548,532,521,529,540,505,533,542,521,498],
[482,0,498,519,506,518,527,504,534,515,499,486],
[452,502,0,505,482,474,493,477,492,482,498,452],
[468,481,495,0,484,505,503,487,497,491,496,473],
[479,494,518,516,0,501,509,486,520,503,482,455],
[471,482,526,495,499,0,521,480,510,485,490,491],
[460,473,507,497,491,479,0,475,500,487,463,456],
[495,496,523,513,514,520,525,0,531,522,502,500],
[467,466,508,503,480,490,500,469,0,495,486,476],
[458,485,518,509,497,515,513,478,505,0,480,469],
[479,501,502,504,518,510,537,498,514,520,0,488],
[502,514,548,527,545,509,544,500,524,531,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 150, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,489,508,531,503,506,503,508,473,511,535],
[502,0,491,486,476,520,506,508,490,497,489,508],
[511,509,0,515,496,504,523,528,509,528,539,517],
[492,514,485,0,458,514,502,506,465,497,478,515],
[469,524,504,542,0,515,505,537,496,493,513,555],
[497,480,496,486,485,0,508,488,463,507,481,511],
[494,494,477,498,495,492,0,480,503,484,484,517],
[497,492,472,494,463,512,520,0,471,513,477,503],
[492,510,491,535,504,537,497,529,0,504,479,513],
[527,503,472,503,507,493,516,487,496,0,479,523],
[489,511,461,522,487,519,516,523,521,521,0,533],
[465,492,483,485,445,489,483,497,487,477,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 151, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,481,514,500,519,503,523,514,509,526,486],
[508,0,484,501,534,496,515,502,514,505,520,500],
[519,516,0,546,515,503,517,535,537,514,535,489],
[486,499,454,0,500,494,491,516,497,483,509,482],
[500,466,485,500,0,499,515,509,513,526,520,479],
[481,504,497,506,501,0,530,505,486,496,510,481],
[497,485,483,509,485,470,0,503,494,493,505,484],
[477,498,465,484,491,495,497,0,487,481,507,492],
[486,486,463,503,487,514,506,513,0,473,509,474],
[491,495,486,517,474,504,507,519,527,0,518,489],
[474,480,465,491,480,490,495,493,491,482,0,462],
[514,500,511,518,521,519,516,508,526,511,538,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 152, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,507,535,501,485,491,518,493,498,518,530],
[490,0,492,493,486,482,474,478,467,480,517,494],
[493,508,0,494,512,485,476,496,478,479,494,502],
[465,507,506,0,498,481,488,488,487,478,509,503],
[499,514,488,502,0,511,479,490,490,483,520,501],
[515,518,515,519,489,0,495,512,509,487,510,528],
[509,526,524,512,521,505,0,520,495,498,533,516],
[482,522,504,512,510,488,480,0,503,513,512,502],
[507,533,522,513,510,491,505,497,0,493,525,535],
[502,520,521,522,517,513,502,487,507,0,541,505],
[482,483,506,491,480,490,467,488,475,459,0,481],
[470,506,498,497,499,472,484,498,465,495,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 153, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,508,513,485,544,468,519,515,506,485,512],
[483,0,491,501,494,516,489,511,512,498,479,511],
[492,509,0,520,494,535,506,493,513,519,528,503],
[487,499,480,0,483,514,487,497,514,510,478,489],
[515,506,506,517,0,533,489,513,525,530,506,505],
[456,484,465,486,467,0,478,467,507,494,456,497],
[532,511,494,513,511,522,0,513,525,516,512,523],
[481,489,507,503,487,533,487,0,531,496,511,485],
[485,488,487,486,475,493,475,469,0,518,500,486],
[494,502,481,490,470,506,484,504,482,0,478,491],
[515,521,472,522,494,544,488,489,500,522,0,511],
[488,489,497,511,495,503,477,515,514,509,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 154, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,518,502,563,564,498,511,535,525,542,518],
[497,0,497,489,522,509,487,495,489,499,489,467],
[482,503,0,473,492,502,480,492,471,494,501,466],
[498,511,527,0,499,548,517,524,539,540,535,526],
[437,478,508,501,0,521,503,530,497,481,499,448],
[436,491,498,452,479,0,465,500,481,490,480,458],
[502,513,520,483,497,535,0,570,496,536,505,508],
[489,505,508,476,470,500,430,0,495,501,491,484],
[465,511,529,461,503,519,504,505,0,548,513,506],
[475,501,506,460,519,510,464,499,452,0,526,516],
[458,511,499,465,501,520,495,509,487,474,0,494],
[482,533,534,474,552,542,492,516,494,484,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 155, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,668,504,458,608,437,403,561,576,525,611,477],
[332,0,347,338,511,338,340,491,495,373,445,462],
[496,653,0,511,634,444,508,545,540,475,619,527],
[542,662,489,0,626,455,430,600,627,627,576,622],
[392,489,366,374,0,321,224,458,559,435,404,522],
[563,662,556,545,679,0,405,628,550,546,620,633],
[597,660,492,570,776,595,0,605,672,453,631,646],
[439,509,455,400,542,372,395,0,502,352,481,506],
[424,505,460,373,441,450,328,498,0,537,480,499],
[475,627,525,373,565,454,547,648,463,0,530,595],
[389,555,381,424,596,380,369,519,520,470,0,558],
[523,538,473,378,478,367,354,494,501,405,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 156, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,513,502,525,501,492,518,504,505,501,498,517],
[487,0,515,468,491,522,517,490,509,517,475,512],
[498,485,0,495,493,521,511,494,505,506,492,512],
[475,532,505,0,501,483,495,507,503,494,486,512],
[499,509,507,499,0,507,507,490,493,498,480,505],
[508,478,479,517,493,0,534,472,491,477,480,493],
[482,483,489,505,493,466,0,490,476,498,508,498],
[496,510,506,493,510,528,510,0,509,517,502,500],
[495,491,495,497,507,509,524,491,0,534,480,502],
[499,483,494,506,502,523,502,483,466,0,495,492],
[502,525,508,514,520,520,492,498,520,505,0,508],
[483,488,488,488,495,507,502,500,498,508,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 157, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,483,494,487,471,506,470,498,495,480,480],
[494,0,497,504,489,487,496,484,492,509,485,478],
[517,503,0,523,506,477,520,486,493,525,492,491],
[506,496,477,0,458,471,494,495,484,494,485,478],
[513,511,494,542,0,472,528,491,491,513,490,495],
[529,513,523,529,528,0,556,495,519,513,532,518],
[494,504,480,506,472,444,0,465,466,496,471,458],
[530,516,514,505,509,505,535,0,490,519,504,491],
[502,508,507,516,509,481,534,510,0,524,513,518],
[505,491,475,506,487,487,504,481,476,0,484,476],
[520,515,508,515,510,468,529,496,487,516,0,500],
[520,522,509,522,505,482,542,509,482,524,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 158, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,559,591,497,474,524,570,516,561,506,560,505],
[441,0,532,513,469,543,504,538,523,476,578,446],
[409,468,0,540,491,513,510,515,480,511,550,430],
[503,487,460,0,448,462,464,551,488,475,554,464],
[526,531,509,552,0,568,577,590,564,472,549,505],
[476,457,487,538,432,0,530,484,475,493,514,443],
[430,496,490,536,423,470,0,474,451,470,535,439],
[484,462,485,449,410,516,526,0,474,487,502,443],
[439,477,520,512,436,525,549,526,0,488,512,430],
[494,524,489,525,528,507,530,513,512,0,566,493],
[440,422,450,446,451,486,465,498,488,434,0,490],
[495,554,570,536,495,557,561,557,570,507,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 159, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,527,516,474,551,502,485,498,504,520,534],
[508,0,495,489,529,517,529,483,500,519,522,563],
[473,505,0,434,496,498,496,476,505,481,508,516],
[484,511,566,0,481,527,531,534,486,504,524,549],
[526,471,504,519,0,520,507,509,510,500,507,528],
[449,483,502,473,480,0,488,490,471,465,461,542],
[498,471,504,469,493,512,0,513,537,460,491,516],
[515,517,524,466,491,510,487,0,502,483,527,553],
[502,500,495,514,490,529,463,498,0,479,492,494],
[496,481,519,496,500,535,540,517,521,0,500,531],
[480,478,492,476,493,539,509,473,508,500,0,545],
[466,437,484,451,472,458,484,447,506,469,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 160, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,487,535,518,513,534,533,534,517,542,517],
[519,0,498,512,522,514,515,527,547,514,508,515],
[513,502,0,502,493,465,544,552,489,483,497,470],
[465,488,498,0,474,482,515,493,506,476,489,498],
[482,478,507,526,0,519,519,516,554,489,545,498],
[487,486,535,518,481,0,527,523,544,522,491,505],
[466,485,456,485,481,473,0,494,476,468,487,471],
[467,473,448,507,484,477,506,0,490,489,481,491],
[466,453,511,494,446,456,524,510,0,438,468,462],
[483,486,517,524,511,478,532,511,562,0,513,519],
[458,492,503,511,455,509,513,519,532,487,0,475],
[483,485,530,502,502,495,529,509,538,481,525,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 161, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,444,472,463,496,461,502,470,481,448,462],
[512,0,456,471,476,476,470,514,501,485,470,472],
[556,544,0,508,501,535,545,554,524,556,499,515],
[528,529,492,0,492,513,469,523,487,542,501,509],
[537,524,499,508,0,513,547,528,519,543,482,520],
[504,524,465,487,487,0,495,503,488,525,472,488],
[539,530,455,531,453,505,0,503,523,515,473,497],
[498,486,446,477,472,497,497,0,487,504,484,464],
[530,499,476,513,481,512,477,513,0,504,481,491],
[519,515,444,458,457,475,485,496,496,0,499,486],
[552,530,501,499,518,528,527,516,519,501,0,517],
[538,528,485,491,480,512,503,536,509,514,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 162, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,573,504,684,556,591,542,555,622,496,609,581],
[427,0,423,588,518,498,489,450,514,465,562,565],
[496,577,0,630,604,529,576,573,598,598,635,553],
[316,412,370,0,398,386,474,464,506,429,492,418],
[444,482,396,602,0,482,514,513,533,515,534,549],
[409,502,471,614,518,0,471,484,500,455,559,562],
[458,511,424,526,486,529,0,464,579,477,574,475],
[445,550,427,536,487,516,536,0,593,531,598,591],
[378,486,402,494,467,500,421,407,0,479,489,481],
[504,535,402,571,485,545,523,469,521,0,526,573],
[391,438,365,508,466,441,426,402,511,474,0,444],
[419,435,447,582,451,438,525,409,519,427,556,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 163, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,535,507,503,430,529,508,493,537,527,553,487],
[465,0,404,473,446,427,421,402,492,492,419,474],
[493,596,0,591,498,454,570,537,564,553,502,575],
[497,527,409,0,464,470,446,423,492,488,490,461],
[570,554,502,536,0,542,561,468,534,643,564,553],
[471,573,546,530,458,0,502,460,538,512,493,529],
[492,579,430,554,439,498,0,442,526,466,461,506],
[507,598,463,577,532,540,558,0,536,556,530,540],
[463,508,436,508,466,462,474,464,0,481,471,468],
[473,508,447,512,357,488,534,444,519,0,446,472],
[447,581,498,510,436,507,539,470,529,554,0,463],
[513,526,425,539,447,471,494,460,532,528,537,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 164, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,465,451,461,483,442,434,408,442,484,505],
[544,0,501,535,549,544,473,498,511,486,526,553],
[535,499,0,513,504,509,482,489,506,558,524,562],
[549,465,487,0,491,533,509,495,440,528,498,554],
[539,451,496,509,0,516,464,478,491,474,513,495],
[517,456,491,467,484,0,458,470,441,504,498,500],
[558,527,518,491,536,542,0,480,487,543,542,575],
[566,502,511,505,522,530,520,0,499,516,487,518],
[592,489,494,560,509,559,513,501,0,560,541,538],
[558,514,442,472,526,496,457,484,440,0,479,507],
[516,474,476,502,487,502,458,513,459,521,0,515],
[495,447,438,446,505,500,425,482,462,493,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 165, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,476,499,484,504,476,482,475,519,517,516],
[488,0,477,489,500,489,469,481,472,486,467,471],
[524,523,0,521,517,494,510,506,509,513,520,524],
[501,511,479,0,504,487,467,497,465,512,513,481],
[516,500,483,496,0,479,471,487,471,524,497,510],
[496,511,506,513,521,0,489,503,481,527,536,495],
[524,531,490,533,529,511,0,511,524,522,529,516],
[518,519,494,503,513,497,489,0,520,511,504,498],
[525,528,491,535,529,519,476,480,0,517,499,512],
[481,514,487,488,476,473,478,489,483,0,490,485],
[483,533,480,487,503,464,471,496,501,510,0,486],
[484,529,476,519,490,505,484,502,488,515,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 166, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,462,473,495,501,470,489,508,498,481,489],
[518,0,506,524,504,516,526,530,513,515,497,512],
[538,494,0,524,518,510,520,526,530,509,510,532],
[527,476,476,0,498,492,506,503,522,499,498,514],
[505,496,482,502,0,519,501,507,516,507,506,497],
[499,484,490,508,481,0,508,512,537,485,492,518],
[530,474,480,494,499,492,0,493,512,492,495,511],
[511,470,474,497,493,488,507,0,492,491,501,515],
[492,487,470,478,484,463,488,508,0,487,475,495],
[502,485,491,501,493,515,508,509,513,0,505,525],
[519,503,490,502,494,508,505,499,525,495,0,507],
[511,488,468,486,503,482,489,485,505,475,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 167, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,529,536,481,509,515,480,513,498,503,503,513],
[471,0,495,479,475,486,475,501,483,488,492,506],
[464,505,0,484,464,486,478,496,515,476,506,502],
[519,521,516,0,511,525,498,505,506,527,511,536],
[491,525,536,489,0,517,505,504,525,484,504,531],
[485,514,514,475,483,0,491,523,479,520,496,502],
[520,525,522,502,495,509,0,512,504,513,509,526],
[487,499,504,495,496,477,488,0,499,486,489,518],
[502,517,485,494,475,521,496,501,0,492,481,515],
[497,512,524,473,516,480,487,514,508,0,478,499],
[497,508,494,489,496,504,491,511,519,522,0,519],
[487,494,498,464,469,498,474,482,485,501,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 168, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,517,470,515,535,488,461,523,496,508,472],
[515,0,525,512,514,541,505,497,530,514,551,547],
[483,475,0,461,514,521,488,511,493,502,531,492],
[530,488,539,0,514,531,483,509,510,496,513,510],
[485,486,486,486,0,529,509,496,501,497,527,498],
[465,459,479,469,471,0,506,475,471,483,513,511],
[512,495,512,517,491,494,0,501,544,525,553,511],
[539,503,489,491,504,525,499,0,507,499,516,529],
[477,470,507,490,499,529,456,493,0,458,497,513],
[504,486,498,504,503,517,475,501,542,0,511,521],
[492,449,469,487,473,487,447,484,503,489,0,497],
[528,453,508,490,502,489,489,471,487,479,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 169, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,544,511,508,516,543,490,510,545,506,518,538],
[456,0,507,473,483,485,473,482,521,479,514,480],
[489,493,0,494,467,518,481,510,505,531,491,528],
[492,527,506,0,504,519,509,530,538,527,515,501],
[484,517,533,496,0,528,470,552,522,495,518,507],
[457,515,482,481,472,0,496,520,520,484,490,490],
[510,527,519,491,530,504,0,524,505,492,500,528],
[490,518,490,470,448,480,476,0,487,491,499,518],
[455,479,495,462,478,480,495,513,0,494,539,475],
[494,521,469,473,505,516,508,509,506,0,495,520],
[482,486,509,485,482,510,500,501,461,505,0,493],
[462,520,472,499,493,510,472,482,525,480,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 170, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,542,494,513,511,540,518,552,510,544,525,501],
[458,0,509,490,493,510,492,520,448,496,499,476],
[506,491,0,518,502,529,511,536,469,531,521,474],
[487,510,482,0,477,523,472,500,470,486,493,463],
[489,507,498,523,0,519,501,528,493,543,496,489],
[460,490,471,477,481,0,470,477,452,495,479,487],
[482,508,489,528,499,530,0,536,501,543,521,496],
[448,480,464,500,472,523,464,0,474,508,493,449],
[490,552,531,530,507,548,499,526,0,513,519,508],
[456,504,469,514,457,505,457,492,487,0,501,470],
[475,501,479,507,504,521,479,507,481,499,0,489],
[499,524,526,537,511,513,504,551,492,530,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 171, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,523,528,518,484,488,529,487,509,526,514,531],
[477,0,523,523,482,506,505,482,469,514,493,511],
[472,477,0,488,471,485,482,475,487,492,490,493],
[482,477,512,0,490,490,491,475,489,482,501,486],
[516,518,529,510,0,503,528,504,500,535,523,527],
[512,494,515,510,497,0,529,494,510,528,512,529],
[471,495,518,509,472,471,0,484,511,496,507,494],
[513,518,525,525,496,506,516,0,506,521,505,513],
[491,531,513,511,500,490,489,494,0,501,505,508],
[474,486,508,518,465,472,504,479,499,0,508,495],
[486,507,510,499,477,488,493,495,495,492,0,517],
[469,489,507,514,473,471,506,487,492,505,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 172, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,536,509,510,531,497,524,500,528,497,503,529],
[464,0,522,486,518,479,504,468,507,483,515,490],
[491,478,0,506,516,460,495,472,507,486,506,488],
[490,514,494,0,507,482,510,463,516,501,507,523],
[469,482,484,493,0,462,449,440,477,455,498,497],
[503,521,540,518,538,0,551,513,538,498,542,517],
[476,496,505,490,551,449,0,452,521,483,494,483],
[500,532,528,537,560,487,548,0,559,522,525,546],
[472,493,493,484,523,462,479,441,0,469,479,480],
[503,517,514,499,545,502,517,478,531,0,515,512],
[497,485,494,493,502,458,506,475,521,485,0,492],
[471,510,512,477,503,483,517,454,520,488,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 173, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,543,526,523,507,537,502,476,521,524,483],
[486,0,477,546,511,506,470,454,485,530,497,469],
[457,523,0,524,513,492,501,492,500,515,513,495],
[474,454,476,0,505,542,459,496,446,476,535,469],
[477,489,487,495,0,487,490,477,446,514,479,420],
[493,494,508,458,513,0,459,467,452,492,468,456],
[463,530,499,541,510,541,0,475,451,537,535,523],
[498,546,508,504,523,533,525,0,465,555,520,520],
[524,515,500,554,554,548,549,535,0,536,539,519],
[479,470,485,524,486,508,463,445,464,0,494,475],
[476,503,487,465,521,532,465,480,461,506,0,446],
[517,531,505,531,580,544,477,480,481,525,554,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 174, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,434,466,454,481,446,486,447,458,503,499],
[575,0,466,517,542,532,502,539,504,538,515,492],
[566,534,0,550,557,558,496,566,577,568,571,549],
[534,483,450,0,525,524,506,487,493,511,519,475],
[546,458,443,475,0,457,448,494,489,477,535,497],
[519,468,442,476,543,0,456,449,522,498,506,464],
[554,498,504,494,552,544,0,539,554,552,524,513],
[514,461,434,513,506,551,461,0,517,567,499,485],
[553,496,423,507,511,478,446,483,0,507,498,446],
[542,462,432,489,523,502,448,433,493,0,494,452],
[497,485,429,481,465,494,476,501,502,506,0,450],
[501,508,451,525,503,536,487,515,554,548,550,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 175, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,540,540,474,533,503,477,534,510,521,551,496],
[460,0,496,457,478,469,516,465,471,492,544,495],
[460,504,0,435,449,477,476,479,464,453,513,489],
[526,543,565,0,523,504,529,550,543,497,532,524],
[467,522,551,477,0,493,486,531,492,527,560,522],
[497,531,523,496,507,0,537,542,530,475,530,534],
[523,484,524,471,514,463,0,507,518,498,497,506],
[466,535,521,450,469,458,493,0,496,498,500,465],
[490,529,536,457,508,470,482,504,0,465,541,513],
[479,508,547,503,473,525,502,502,535,0,524,487],
[449,456,487,468,440,470,503,500,459,476,0,469],
[504,505,511,476,478,466,494,535,487,513,531,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 176, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,496,504,491,505,504,518,491,483,505,518],
[495,0,486,521,468,502,496,516,503,493,499,499],
[504,514,0,508,525,529,501,525,512,499,545,501],
[496,479,492,0,476,497,494,490,501,482,512,468],
[509,532,475,524,0,525,497,508,525,499,501,494],
[495,498,471,503,475,0,471,511,510,503,498,467],
[496,504,499,506,503,529,0,518,514,483,496,485],
[482,484,475,510,492,489,482,0,505,470,494,492],
[509,497,488,499,475,490,486,495,0,482,497,482],
[517,507,501,518,501,497,517,530,518,0,508,510],
[495,501,455,488,499,502,504,506,503,492,0,481],
[482,501,499,532,506,533,515,508,518,490,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 177, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,491,533,502,497,479,496,503,512,487,483],
[508,0,482,510,482,502,488,501,496,514,476,494],
[509,518,0,539,520,499,501,517,506,515,499,495],
[467,490,461,0,474,494,501,493,486,489,489,489],
[498,518,480,526,0,507,494,505,518,491,469,481],
[503,498,501,506,493,0,475,491,513,492,502,492],
[521,512,499,499,506,525,0,512,500,501,515,513],
[504,499,483,507,495,509,488,0,503,497,509,494],
[497,504,494,514,482,487,500,497,0,492,486,481],
[488,486,485,511,509,508,499,503,508,0,481,475],
[513,524,501,511,531,498,485,491,514,519,0,496],
[517,506,505,511,519,508,487,506,519,525,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 178, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,508,494,496,483,494,502,505,469,500,476],
[489,0,510,497,513,476,500,492,529,473,501,500],
[492,490,0,516,503,488,506,480,497,470,514,507],
[506,503,484,0,516,502,515,502,506,465,522,513],
[504,487,497,484,0,461,476,487,465,456,491,472],
[517,524,512,498,539,0,523,529,547,495,532,497],
[506,500,494,485,524,477,0,510,508,505,526,487],
[498,508,520,498,513,471,490,0,505,480,531,479],
[495,471,503,494,535,453,492,495,0,450,498,494],
[531,527,530,535,544,505,495,520,550,0,555,511],
[500,499,486,478,509,468,474,469,502,445,0,482],
[524,500,493,487,528,503,513,521,506,489,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 179, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,532,552,554,495,521,554,551,511,496,505,499],
[468,0,545,502,453,488,518,560,480,522,529,477],
[448,455,0,491,447,466,487,547,481,498,482,468],
[446,498,509,0,445,479,460,499,429,502,468,491],
[505,547,553,555,0,531,500,591,486,529,519,505],
[479,512,534,521,469,0,487,516,511,506,464,490],
[446,482,513,540,500,513,0,507,500,536,483,512],
[449,440,453,501,409,484,493,0,458,492,446,493],
[489,520,519,571,514,489,500,542,0,524,485,498],
[504,478,502,498,471,494,464,508,476,0,494,461],
[495,471,518,532,481,536,517,554,515,506,0,531],
[501,523,532,509,495,510,488,507,502,539,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 180, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,516,489,499,505,517,521,504,485,504,492],
[505,0,504,508,525,505,492,501,511,496,498,493],
[484,496,0,481,490,494,505,480,490,483,474,479],
[511,492,519,0,510,490,496,506,498,485,493,514],
[501,475,510,490,0,484,487,488,492,493,505,473],
[495,495,506,510,516,0,502,509,496,513,497,476],
[483,508,495,504,513,498,0,498,510,501,489,504],
[479,499,520,494,512,491,502,0,505,502,472,481],
[496,489,510,502,508,504,490,495,0,513,494,480],
[515,504,517,515,507,487,499,498,487,0,498,477],
[496,502,526,507,495,503,511,528,506,502,0,492],
[508,507,521,486,527,524,496,519,520,523,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 181, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,456,495,508,479,525,467,492,501,467,474],
[522,0,458,474,497,521,552,462,490,508,462,502],
[544,542,0,541,520,561,559,533,527,526,489,529],
[505,526,459,0,521,517,536,484,506,511,487,505],
[492,503,480,479,0,500,529,493,471,513,515,485],
[521,479,439,483,500,0,529,481,491,503,484,475],
[475,448,441,464,471,471,0,473,452,475,464,460],
[533,538,467,516,507,519,527,0,460,530,495,531],
[508,510,473,494,529,509,548,540,0,523,503,522],
[499,492,474,489,487,497,525,470,477,0,469,500],
[533,538,511,513,485,516,536,505,497,531,0,517],
[526,498,471,495,515,525,540,469,478,500,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 182, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,506,498,508,493,505,504,494,509,523,504],
[518,0,515,479,491,508,526,487,494,490,519,505],
[494,485,0,489,514,518,493,459,500,510,524,504],
[502,521,511,0,500,506,513,487,511,506,531,504],
[492,509,486,500,0,507,482,495,488,491,511,510],
[507,492,482,494,493,0,517,505,519,498,511,500],
[495,474,507,487,518,483,0,486,490,468,511,499],
[496,513,541,513,505,495,514,0,521,493,540,534],
[506,506,500,489,512,481,510,479,0,499,512,522],
[491,510,490,494,509,502,532,507,501,0,505,514],
[477,481,476,469,489,489,489,460,488,495,0,490],
[496,495,496,496,490,500,501,466,478,486,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 183, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,528,490,478,491,451,469,463,471,466,492,450],
[472,0,474,450,499,436,430,473,478,427,482,437],
[510,526,0,516,513,485,499,496,493,466,493,508],
[522,550,484,0,472,452,482,492,480,470,516,493],
[509,501,487,528,0,470,481,479,501,500,517,486],
[549,564,515,548,530,0,512,534,531,486,550,504],
[531,570,501,518,519,488,0,494,518,505,524,477],
[537,527,504,508,521,466,506,0,517,468,550,485],
[529,522,507,520,499,469,482,483,0,488,540,491],
[534,573,534,530,500,514,495,532,512,0,564,510],
[508,518,507,484,483,450,476,450,460,436,0,460],
[550,563,492,507,514,496,523,515,509,490,540,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 184, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,454,453,473,499,521,554,502,543,420,482],
[538,0,483,512,471,578,511,568,479,453,537,519],
[546,517,0,442,475,543,555,602,544,516,415,586],
[547,488,558,0,515,583,570,574,538,533,531,537],
[527,529,525,485,0,536,512,543,513,578,469,538],
[501,422,457,417,464,0,483,465,447,461,442,463],
[479,489,445,430,488,517,0,545,440,521,473,512],
[446,432,398,426,457,535,455,0,413,468,416,493],
[498,521,456,462,487,553,560,587,0,514,493,524],
[457,547,484,467,422,539,479,532,486,0,477,504],
[580,463,585,469,531,558,527,584,507,523,0,542],
[518,481,414,463,462,537,488,507,476,496,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 185, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,509,494,471,505,505,465,505,517,512,492],
[507,0,506,476,466,483,512,458,502,511,494,500],
[491,494,0,503,470,478,500,475,472,512,529,486],
[506,524,497,0,471,473,501,487,510,500,518,512],
[529,534,530,529,0,507,526,498,525,525,509,519],
[495,517,522,527,493,0,520,508,505,526,535,504],
[495,488,500,499,474,480,0,464,491,500,512,490],
[535,542,525,513,502,492,536,0,512,542,548,511],
[495,498,528,490,475,495,509,488,0,526,491,510],
[483,489,488,500,475,474,500,458,474,0,485,503],
[488,506,471,482,491,465,488,452,509,515,0,459],
[508,500,514,488,481,496,510,489,490,497,541,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 186, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,536,536,515,489,513,507,516,514,538,500,508],
[464,0,485,488,480,500,510,499,478,506,466,466],
[464,515,0,508,472,499,532,509,503,521,481,476],
[485,512,492,0,487,507,510,509,481,497,505,446],
[511,520,528,513,0,504,516,488,505,520,521,492],
[487,500,501,493,496,0,509,504,481,505,480,475],
[493,490,468,490,484,491,0,482,479,510,489,449],
[484,501,491,491,512,496,518,0,505,498,503,461],
[486,522,497,519,495,519,521,495,0,512,487,496],
[462,494,479,503,480,495,490,502,488,0,486,465],
[500,534,519,495,479,520,511,497,513,514,0,474],
[492,534,524,554,508,525,551,539,504,535,526,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 187, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,538,408,443,504,494,386,492,493,504,480,442],
[462,0,448,470,490,431,405,505,510,502,515,460],
[592,552,0,513,548,547,435,501,529,512,552,542],
[557,530,487,0,492,490,433,566,503,472,474,452],
[496,510,452,508,0,533,394,503,523,530,503,452],
[506,569,453,510,467,0,389,533,515,547,441,453],
[614,595,565,567,606,611,0,563,521,585,594,480],
[508,495,499,434,497,467,437,0,491,566,504,449],
[507,490,471,497,477,485,479,509,0,545,513,490],
[496,498,488,528,470,453,415,434,455,0,511,485],
[520,485,448,526,497,559,406,496,487,489,0,497],
[558,540,458,548,548,547,520,551,510,515,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 188, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,494,511,487,513,478,499,493,479,507,462],
[501,0,484,479,491,528,467,503,517,472,494,497],
[506,516,0,507,479,514,481,481,479,453,461,464],
[489,521,493,0,493,520,500,515,486,483,494,469],
[513,509,521,507,0,526,471,532,486,510,507,478],
[487,472,486,480,474,0,465,467,477,474,474,465],
[522,533,519,500,529,535,0,506,473,510,521,467],
[501,497,519,485,468,533,494,0,507,474,486,500],
[507,483,521,514,514,523,527,493,0,483,511,472],
[521,528,547,517,490,526,490,526,517,0,488,486],
[493,506,539,506,493,526,479,514,489,512,0,447],
[538,503,536,531,522,535,533,500,528,514,553,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 189, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,538,527,489,559,524,497,586,550,557,538],
[517,0,550,514,522,529,481,482,564,524,509,520],
[462,450,0,381,470,492,430,452,534,438,502,488],
[473,486,619,0,540,566,480,557,579,564,549,548],
[511,478,530,460,0,560,495,473,556,468,514,498],
[441,471,508,434,440,0,462,476,512,425,514,450],
[476,519,570,520,505,538,0,537,533,578,500,480],
[503,518,548,443,527,524,463,0,483,506,545,518],
[414,436,466,421,444,488,467,517,0,421,470,420],
[450,476,562,436,532,575,422,494,579,0,469,456],
[443,491,498,451,486,486,500,455,530,531,0,452],
[462,480,512,452,502,550,520,482,580,544,548,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 190, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,533,506,486,470,466,532,487,467,498,481,524],
[467,0,476,469,449,471,464,492,506,470,494,534],
[494,524,0,465,470,475,511,503,480,473,477,525],
[514,531,535,0,496,500,500,503,498,472,496,516],
[530,551,530,504,0,486,528,521,508,525,513,537],
[534,529,525,500,514,0,545,526,497,529,508,537],
[468,536,489,500,472,455,0,502,479,487,495,481],
[513,508,497,497,479,474,498,0,505,507,493,523],
[533,494,520,502,492,503,521,495,0,501,516,508],
[502,530,527,528,475,471,513,493,499,0,489,564],
[519,506,523,504,487,492,505,507,484,511,0,527],
[476,466,475,484,463,463,519,477,492,436,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 191, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,497,508,486,476,474,486,489,503,500,512],
[529,0,521,499,503,505,493,495,531,517,518,518],
[503,479,0,507,520,476,480,491,502,496,508,503],
[492,501,493,0,498,504,494,489,513,506,485,499],
[514,497,480,502,0,481,486,506,516,517,505,510],
[524,495,524,496,519,0,511,507,517,516,516,518],
[526,507,520,506,514,489,0,505,486,520,498,518],
[514,505,509,511,494,493,495,0,508,516,515,502],
[511,469,498,487,484,483,514,492,0,509,504,497],
[497,483,504,494,483,484,480,484,491,0,499,503],
[500,482,492,515,495,484,502,485,496,501,0,502],
[488,482,497,501,490,482,482,498,503,497,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 192, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,535,527,536,517,512,512,517,523,484,533,531],
[465,0,447,466,483,449,495,483,461,445,473,485],
[473,553,0,533,525,500,518,523,493,472,514,531],
[464,534,467,0,491,474,451,481,454,484,467,457],
[483,517,475,509,0,467,461,493,476,493,476,499],
[488,551,500,526,533,0,496,537,512,505,529,501],
[488,505,482,549,539,504,0,487,490,494,516,475],
[483,517,477,519,507,463,513,0,512,486,496,486],
[477,539,507,546,524,488,510,488,0,494,493,510],
[516,555,528,516,507,495,506,514,506,0,507,513],
[467,527,486,533,524,471,484,504,507,493,0,486],
[469,515,469,543,501,499,525,514,490,487,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 193, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,490,436,462,421,429,457,438,411,416,483],
[505,0,470,472,499,464,457,482,465,454,431,523],
[510,530,0,536,540,487,478,508,500,465,482,556],
[564,528,464,0,500,488,456,496,494,489,437,539],
[538,501,460,500,0,510,489,456,448,458,451,499],
[579,536,513,512,490,0,509,499,509,504,502,564],
[571,543,522,544,511,491,0,501,520,511,506,551],
[543,518,492,504,544,501,499,0,519,483,486,539],
[562,535,500,506,552,491,480,481,0,467,482,590],
[589,546,535,511,542,496,489,517,533,0,471,552],
[584,569,518,563,549,498,494,514,518,529,0,550],
[517,477,444,461,501,436,449,461,410,448,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 194, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,462,422,447,461,504,439,415,480,515,494],
[528,0,530,418,560,453,430,553,578,574,532,497],
[538,470,0,502,458,463,438,519,475,542,498,457],
[578,582,498,0,518,497,490,566,569,601,590,511],
[553,440,542,482,0,464,483,565,594,516,437,476],
[539,547,537,503,536,0,596,569,495,607,543,586],
[496,570,562,510,517,404,0,573,566,557,510,485],
[561,447,481,434,435,431,427,0,390,485,482,513],
[585,422,525,431,406,505,434,610,0,525,511,494],
[520,426,458,399,484,393,443,515,475,0,434,482],
[485,468,502,410,563,457,490,518,489,566,0,446],
[506,503,543,489,524,414,515,487,506,518,554,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 195, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,562,549,499,512,527,532,538,560,537,551,550],
[438,0,468,489,480,502,500,493,502,507,526,512],
[451,532,0,498,501,505,516,512,524,533,509,532],
[501,511,502,0,502,512,512,490,521,530,502,506],
[488,520,499,498,0,512,540,510,526,526,517,528],
[473,498,495,488,488,0,518,496,529,509,504,512],
[468,500,484,488,460,482,0,491,498,502,482,507],
[462,507,488,510,490,504,509,0,511,511,504,511],
[440,498,476,479,474,471,502,489,0,495,501,492],
[463,493,467,470,474,491,498,489,505,0,474,494],
[449,474,491,498,483,496,518,496,499,526,0,497],
[450,488,468,494,472,488,493,489,508,506,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 196, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,597,536,686,597,525,610,516,441,513,566,441],
[403,0,453,594,434,412,434,451,405,484,493,431],
[464,547,0,601,460,479,471,472,480,512,428,396],
[314,406,399,0,376,459,427,347,359,412,326,409],
[403,566,540,624,0,503,594,446,466,481,539,451],
[475,588,521,541,497,0,521,493,493,562,462,400],
[390,566,529,573,406,479,0,329,421,425,433,269],
[484,549,528,653,554,507,671,0,511,594,558,547],
[559,595,520,641,534,507,579,489,0,607,473,439],
[487,516,488,588,519,438,575,406,393,0,428,405],
[434,507,572,674,461,538,567,442,527,572,0,533],
[559,569,604,591,549,600,731,453,561,595,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 197, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,467,469,479,551,473,487,509,492,484,534],
[491,0,498,476,449,496,476,469,486,456,487,490],
[533,502,0,469,496,534,490,468,498,511,507,505],
[531,524,531,0,516,576,501,500,489,542,503,533],
[521,551,504,484,0,552,517,477,542,491,492,540],
[449,504,466,424,448,0,466,435,468,502,444,495],
[527,524,510,499,483,534,0,494,520,502,516,515],
[513,531,532,500,523,565,506,0,530,532,508,509],
[491,514,502,511,458,532,480,470,0,505,495,482],
[508,544,489,458,509,498,498,468,495,0,514,497],
[516,513,493,497,508,556,484,492,505,486,0,505],
[466,510,495,467,460,505,485,491,518,503,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 198, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,500,500,499,457,486,492,469,481,460,467],
[517,0,514,494,532,511,537,519,497,502,500,503],
[500,486,0,489,511,491,501,527,468,486,499,483],
[500,506,511,0,502,482,507,506,478,491,487,494],
[501,468,489,498,0,495,484,495,506,473,507,508],
[543,489,509,518,505,0,525,502,498,489,510,489],
[514,463,499,493,516,475,0,518,472,477,477,484],
[508,481,473,494,505,498,482,0,499,492,481,489],
[531,503,532,522,494,502,528,501,0,499,500,503],
[519,498,514,509,527,511,523,508,501,0,503,497],
[540,500,501,513,493,490,523,519,500,497,0,500],
[533,497,517,506,492,511,516,511,497,503,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 199, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,499,471,521,486,503,496,495,486,468,505],
[532,0,503,499,546,502,502,526,517,500,515,546],
[501,497,0,486,521,487,495,507,484,498,491,532],
[529,501,514,0,521,503,518,530,525,499,493,552],
[479,454,479,479,0,471,497,470,481,448,473,500],
[514,498,513,497,529,0,517,518,500,506,506,536],
[497,498,505,482,503,483,0,502,511,485,490,526],
[504,474,493,470,530,482,498,0,495,508,480,517],
[505,483,516,475,519,500,489,505,0,503,497,556],
[514,500,502,501,552,494,515,492,497,0,490,534],
[532,485,509,507,527,494,510,520,503,510,0,515],
[495,454,468,448,500,464,474,483,444,466,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 1000, 200, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/me/me_12_1000.csv", index=False, header=False)
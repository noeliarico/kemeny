
import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,264,251,241,244,247,243,270,235,256,265,240,230],
[236,0,230,241,242,243,239,256,226,229,251,240,224],
[249,270,0,244,255,259,246,261,236,248,258,249,249],
[259,259,256,0,273,248,267,271,259,250,265,249,248],
[256,258,245,227,0,242,250,266,239,229,273,231,247],
[253,257,241,252,258,0,240,271,252,238,265,251,243],
[257,261,254,233,250,260,0,263,225,254,267,253,253],
[230,244,239,229,234,229,237,0,228,224,251,226,234],
[265,274,264,241,261,248,275,272,0,255,279,252,250],
[244,271,252,250,271,262,246,276,245,0,275,257,259],
[235,249,242,235,227,235,233,249,221,225,0,217,218],
[260,260,251,251,269,249,247,274,248,243,283,0,257],
[270,276,251,252,253,257,247,266,250,241,282,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 1, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,258,276,275,263,251,241,274,272,274,275,295],
[237,0,238,239,243,232,239,236,239,245,256,260,253],
[242,262,0,244,249,260,248,237,254,276,257,249,271],
[224,261,256,0,244,244,231,229,245,266,230,265,266],
[225,257,251,256,0,251,237,247,255,280,256,260,249],
[237,268,240,256,249,0,254,254,252,269,244,267,254],
[249,261,252,269,263,246,0,253,276,266,254,274,274],
[259,264,263,271,253,246,247,0,269,276,255,264,272],
[226,261,246,255,245,248,224,231,0,266,246,260,268],
[228,255,224,234,220,231,234,224,234,0,254,248,248],
[226,244,243,270,244,256,246,245,254,246,0,270,279],
[225,240,251,235,240,233,226,236,240,252,230,0,252],
[205,247,229,234,251,246,226,228,232,252,221,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 2, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,198,25,75,50,55,25,25,25,30,25,0],
[470,0,450,174,75,193,357,277,277,174,204,174,224],
[302,50,0,25,50,50,50,50,103,0,50,0,50],
[475,326,475,0,50,223,332,153,103,445,229,149,229],
[425,425,450,450,0,326,282,252,252,395,322,252,179],
[450,307,450,277,174,0,307,277,277,277,204,277,174],
[445,143,450,168,218,193,0,271,103,292,173,149,0],
[475,223,450,347,248,223,229,0,252,292,372,149,229],
[475,223,397,397,248,223,397,248,0,367,372,149,229],
[475,326,500,55,105,223,208,208,133,0,80,149,80],
[470,296,450,271,178,296,327,128,128,420,0,277,302],
[475,326,500,351,248,223,351,351,351,351,223,0,223],
[500,276,450,271,321,326,500,271,271,420,198,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 3, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,241,260,260,263,267,258,260,260,263,272,257],
[230,0,225,245,251,236,232,262,235,227,231,246,231],
[259,275,0,259,275,271,259,271,249,258,262,258,270],
[240,255,241,0,263,238,255,250,245,248,258,246,250],
[240,249,225,237,0,250,251,262,222,232,250,245,241],
[237,264,229,262,250,0,236,259,243,242,247,261,259],
[233,268,241,245,249,264,0,261,246,245,248,243,250],
[242,238,229,250,238,241,239,0,234,231,264,252,244],
[240,265,251,255,278,257,254,266,0,233,241,261,256],
[240,273,242,252,268,258,255,269,267,0,258,260,258],
[237,269,238,242,250,253,252,236,259,242,0,266,235],
[228,254,242,254,255,239,257,248,239,240,234,0,254],
[243,269,230,250,259,241,250,256,244,242,265,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 4, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,261,255,240,236,243,234,248,240,267,236,219],
[241,0,263,258,228,256,241,265,254,246,266,251,230],
[239,237,0,249,212,238,249,227,241,236,264,242,197],
[245,242,251,0,224,255,233,209,240,226,260,239,214],
[260,272,288,276,0,271,272,245,252,244,268,251,247],
[264,244,262,245,229,0,245,245,251,232,266,246,239],
[257,259,251,267,228,255,0,236,245,248,273,255,249],
[266,235,273,291,255,255,264,0,280,277,268,250,252],
[252,246,259,260,248,249,255,220,0,237,249,243,236],
[260,254,264,274,256,268,252,223,263,0,265,248,237],
[233,234,236,240,232,234,227,232,251,235,0,241,224],
[264,249,258,261,249,254,245,250,257,252,259,0,235],
[281,270,303,286,253,261,251,248,264,263,276,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 5, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,247,263,258,245,264,244,262,233,269,247,224],
[257,0,263,256,253,270,261,263,268,235,261,244,262],
[253,237,0,233,256,265,253,248,256,236,233,236,243],
[237,244,267,0,263,266,241,264,255,240,259,271,256],
[242,247,244,237,0,270,253,240,229,234,241,249,227],
[255,230,235,234,230,0,243,216,238,223,236,232,202],
[236,239,247,259,247,257,0,245,251,247,256,249,238],
[256,237,252,236,260,284,255,0,260,235,246,242,239],
[238,232,244,245,271,262,249,240,0,227,244,241,230],
[267,265,264,260,266,277,253,265,273,0,265,273,246],
[231,239,267,241,259,264,244,254,256,235,0,230,220],
[253,256,264,229,251,268,251,258,259,227,270,0,245],
[276,238,257,244,273,298,262,261,270,254,280,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 6, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,228,250,235,235,245,286,264,252,237,232,272],
[278,0,225,250,240,253,280,297,279,256,228,253,271],
[272,275,0,248,270,257,279,293,289,259,256,259,290],
[250,250,252,0,243,224,255,263,255,236,235,236,280],
[265,260,230,257,0,253,248,277,267,253,256,277,273],
[265,247,243,276,247,0,270,284,292,254,246,273,278],
[255,220,221,245,252,230,0,276,225,235,229,227,252],
[214,203,207,237,223,216,224,0,225,218,208,221,241],
[236,221,211,245,233,208,275,275,0,225,236,245,249],
[248,244,241,264,247,246,265,282,275,0,231,282,259],
[263,272,244,265,244,254,271,292,264,269,0,249,273],
[268,247,241,264,223,227,273,279,255,218,251,0,263],
[228,229,210,220,227,222,248,259,251,241,227,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 7, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,256,256,283,265,241,260,257,258,246,248,253],
[268,0,260,262,281,269,242,273,265,264,256,252,266],
[244,240,0,265,252,244,226,262,254,242,236,242,256],
[244,238,235,0,263,252,231,278,263,248,237,237,247],
[217,219,248,237,0,236,227,245,241,261,228,221,232],
[235,231,256,248,264,0,224,243,257,241,234,255,245],
[259,258,274,269,273,276,0,264,286,272,248,246,253],
[240,227,238,222,255,257,236,0,249,238,225,220,241],
[243,235,246,237,259,243,214,251,0,256,219,227,245],
[242,236,258,252,239,259,228,262,244,0,240,232,249],
[254,244,264,263,272,266,252,275,281,260,0,259,266],
[252,248,258,263,279,245,254,280,273,268,241,0,257],
[247,234,244,253,268,255,247,259,255,251,234,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 8, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,227,238,215,224,238,238,249,230,255,234,239],
[273,0,255,251,244,260,260,251,273,256,261,253,267],
[273,245,0,249,253,253,264,253,252,251,262,251,265],
[262,249,251,0,244,247,255,238,248,242,248,240,268],
[285,256,247,256,0,267,250,266,267,249,270,263,279],
[276,240,247,253,233,0,258,238,267,243,268,251,268],
[262,240,236,245,250,242,0,246,253,253,254,241,263],
[262,249,247,262,234,262,254,0,260,237,268,254,260],
[251,227,248,252,233,233,247,240,0,235,251,241,263],
[270,244,249,258,251,257,247,263,265,0,267,254,276],
[245,239,238,252,230,232,246,232,249,233,0,240,244],
[266,247,249,260,237,249,259,246,259,246,260,0,271],
[261,233,235,232,221,232,237,240,237,224,256,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 9, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,265,231,258,264,262,236,245,244,227,255,262],
[264,0,258,241,265,276,263,240,260,247,258,255,264],
[235,242,0,213,248,256,238,233,242,240,238,263,270],
[269,259,287,0,257,295,243,254,269,279,260,271,265],
[242,235,252,243,0,254,261,231,258,237,251,254,248],
[236,224,244,205,246,0,220,215,237,225,241,240,248],
[238,237,262,257,239,280,0,238,260,250,257,267,258],
[264,260,267,246,269,285,262,0,281,262,271,268,274],
[255,240,258,231,242,263,240,219,0,230,223,243,241],
[256,253,260,221,263,275,250,238,270,0,241,280,253],
[273,242,262,240,249,259,243,229,277,259,0,259,261],
[245,245,237,229,246,260,233,232,257,220,241,0,249],
[238,236,230,235,252,252,242,226,259,247,239,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 10, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,287,273,277,278,298,273,309,338,277,235,323],
[233,0,232,265,262,236,239,202,287,242,217,228,292],
[213,268,0,264,312,226,302,300,277,284,255,266,319],
[227,235,236,0,241,291,308,256,296,267,237,208,266],
[223,238,188,259,0,190,231,233,230,232,268,209,271],
[222,264,274,209,310,0,342,271,317,264,208,217,318],
[202,261,198,192,269,158,0,249,192,244,215,202,278],
[227,298,200,244,267,229,251,0,300,207,197,205,287],
[191,213,223,204,270,183,308,200,0,206,230,141,261],
[162,258,216,233,268,236,256,293,294,0,184,201,233],
[223,283,245,263,232,292,285,303,270,316,0,270,288],
[265,272,234,292,291,283,298,295,359,299,230,0,304],
[177,208,181,234,229,182,222,213,239,267,212,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 11, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,239,258,215,246,253,251,246,249,251,252,238],
[254,0,254,252,226,241,269,274,239,253,257,250,244],
[261,246,0,251,224,260,267,251,238,235,270,238,249],
[242,248,249,0,232,256,268,248,242,233,246,243,242],
[285,274,276,268,0,296,276,289,239,275,282,280,275],
[254,259,240,244,204,0,260,262,232,269,288,260,267],
[247,231,233,232,224,240,0,228,243,248,239,229,248],
[249,226,249,252,211,238,272,0,251,252,261,230,244],
[254,261,262,258,261,268,257,249,0,254,268,259,252],
[251,247,265,267,225,231,252,248,246,0,267,243,256],
[249,243,230,254,218,212,261,239,232,233,0,245,262],
[248,250,262,257,220,240,271,270,241,257,255,0,262],
[262,256,251,258,225,233,252,256,248,244,238,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 12, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,227,236,222,264,237,219,231,230,249,246,212],
[259,0,256,265,245,250,240,229,244,233,269,238,252],
[273,244,0,255,241,273,257,239,235,237,269,261,247],
[264,235,245,0,250,266,244,238,239,258,270,242,233],
[278,255,259,250,0,262,263,252,268,262,281,245,257],
[236,250,227,234,238,0,246,236,234,250,270,246,239],
[263,260,243,256,237,254,0,257,264,269,280,229,255],
[281,271,261,262,248,264,243,0,241,299,265,264,252],
[269,256,265,261,232,266,236,259,0,252,257,252,243],
[270,267,263,242,238,250,231,201,248,0,274,233,250],
[251,231,231,230,219,230,220,235,243,226,0,231,227],
[254,262,239,258,255,254,271,236,248,267,269,0,243],
[288,248,253,267,243,261,245,248,257,250,273,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 13, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,278,249,253,256,266,235,252,251,269,236,222],
[245,0,270,266,264,248,273,242,254,284,257,240,261],
[222,230,0,245,262,211,270,220,241,259,255,249,224],
[251,234,255,0,239,247,251,258,238,250,262,249,229],
[247,236,238,261,0,238,252,285,250,254,270,205,260],
[244,252,289,253,262,0,277,273,254,286,274,236,245],
[234,227,230,249,248,223,0,250,220,244,274,214,228],
[265,258,280,242,215,227,250,0,253,266,275,230,256],
[248,246,259,262,250,246,280,247,0,283,260,239,260],
[249,216,241,250,246,214,256,234,217,0,247,214,237],
[231,243,245,238,230,226,226,225,240,253,0,220,228],
[264,260,251,251,295,264,286,270,261,286,280,0,249],
[278,239,276,271,240,255,272,244,240,263,272,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 14, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,219,242,250,271,267,237,249,229,270,226,274],
[262,0,258,237,263,299,279,218,251,255,292,256,266],
[281,242,0,262,248,277,284,256,254,243,271,241,292],
[258,263,238,0,246,282,247,247,264,232,287,246,282],
[250,237,252,254,0,267,233,225,249,240,287,248,255],
[229,201,223,218,233,0,243,224,241,231,249,234,250],
[233,221,216,253,267,257,0,235,204,242,259,231,264],
[263,282,244,253,275,276,265,0,282,260,300,283,291],
[251,249,246,236,251,259,296,218,0,247,265,245,259],
[271,245,257,268,260,269,258,240,253,0,285,240,282],
[230,208,229,213,213,251,241,200,235,215,0,233,246],
[274,244,259,254,252,266,269,217,255,260,267,0,269],
[226,234,208,218,245,250,236,209,241,218,254,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 15, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,251,206,301,227,155,186,257,234,269,274,217],
[251,0,246,213,267,211,202,193,287,224,220,230,243],
[249,254,0,202,298,265,184,211,222,210,227,271,190],
[294,287,298,0,251,277,204,264,288,290,316,269,270],
[199,233,202,249,0,275,163,246,266,279,239,273,245],
[273,289,235,223,225,0,196,240,283,230,300,261,219],
[345,298,316,296,337,304,0,291,347,331,301,369,241],
[314,307,289,236,254,260,209,0,315,218,323,324,189],
[243,213,278,212,234,217,153,185,0,205,223,248,186],
[266,276,290,210,221,270,169,282,295,0,261,316,214],
[231,280,273,184,261,200,199,177,277,239,0,298,219],
[226,270,229,231,227,239,131,176,252,184,202,0,181],
[283,257,310,230,255,281,259,311,314,286,281,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 16, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,252,242,244,236,249,239,253,246,249,246,244],
[251,0,253,246,244,246,246,234,243,266,241,237,237],
[248,247,0,253,259,253,250,263,250,271,241,240,256],
[258,254,247,0,255,249,247,246,249,263,249,244,259],
[256,256,241,245,0,236,228,249,235,254,242,242,238],
[264,254,247,251,264,0,250,256,247,253,246,248,268],
[251,254,250,253,272,250,0,266,239,261,249,250,244],
[261,266,237,254,251,244,234,0,238,258,235,245,245],
[247,257,250,251,265,253,261,262,0,259,250,242,250],
[254,234,229,237,246,247,239,242,241,0,226,243,239],
[251,259,259,251,258,254,251,265,250,274,0,246,248],
[254,263,260,256,258,252,250,255,258,257,254,0,263],
[256,263,244,241,262,232,256,255,250,261,252,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 17, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,247,244,248,290,275,241,251,240,258,250,229],
[259,0,268,288,270,305,268,257,246,251,264,270,249],
[253,232,0,268,266,275,270,227,242,262,246,248,257],
[256,212,232,0,253,271,238,249,230,240,228,228,240],
[252,230,234,247,0,286,288,270,231,239,259,242,226],
[210,195,225,229,214,0,249,213,219,207,233,214,208],
[225,232,230,262,212,251,0,229,192,217,235,247,218],
[259,243,273,251,230,287,271,0,240,257,246,278,225],
[249,254,258,270,269,281,308,260,0,257,270,272,253],
[260,249,238,260,261,293,283,243,243,0,254,241,234],
[242,236,254,272,241,267,265,254,230,246,0,234,222],
[250,230,252,272,258,286,253,222,228,259,266,0,225],
[271,251,243,260,274,292,282,275,247,266,278,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 18, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,376,256,248,287,237,370,299,254,301,268,275,300],
[124,0,179,102,197,238,266,195,218,123,271,228,263],
[244,321,0,237,308,273,297,246,277,238,347,251,285],
[252,398,263,0,360,315,377,291,274,231,352,312,359],
[213,303,192,140,0,180,247,215,342,205,217,260,217],
[263,262,227,185,320,0,335,359,271,286,207,338,251],
[130,234,203,123,253,165,0,223,203,129,223,265,173],
[201,305,254,209,285,141,277,0,302,253,295,171,203],
[246,282,223,226,158,229,297,198,0,275,265,199,190],
[199,377,262,269,295,214,371,247,225,0,310,144,260],
[232,229,153,148,283,293,277,205,235,190,0,328,247],
[225,272,249,188,240,162,235,329,301,356,172,0,250],
[200,237,215,141,283,249,327,297,310,240,253,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 19, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,259,243,264,285,256,238,237,255,269,260,250],
[250,0,244,227,253,255,263,220,264,237,261,240,240],
[241,256,0,240,252,282,249,220,237,247,249,254,230],
[257,273,260,0,262,280,274,248,240,246,276,254,257],
[236,247,248,238,0,272,254,223,224,219,259,241,244],
[215,245,218,220,228,0,252,208,209,221,236,236,231],
[244,237,251,226,246,248,0,235,243,222,248,232,243],
[262,280,280,252,277,292,265,0,261,240,254,270,264],
[263,236,263,260,276,291,257,239,0,241,255,266,262],
[245,263,253,254,281,279,278,260,259,0,272,237,247],
[231,239,251,224,241,264,252,246,245,228,0,244,247],
[240,260,246,246,259,264,268,230,234,263,256,0,246],
[250,260,270,243,256,269,257,236,238,253,253,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 20, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,253,279,262,223,248,262,253,257,214,303,298],
[206,0,252,240,234,162,274,236,202,245,241,274,266],
[247,248,0,255,251,195,268,215,233,259,228,251,278],
[221,260,245,0,270,228,267,249,217,224,205,255,278],
[238,266,249,230,0,244,248,246,207,271,193,246,296],
[277,338,305,272,256,0,321,258,294,259,216,304,333],
[252,226,232,233,252,179,0,228,236,189,216,244,266],
[238,264,285,251,254,242,272,0,268,283,253,267,298],
[247,298,267,283,293,206,264,232,0,283,236,288,293],
[243,255,241,276,229,241,311,217,217,0,219,293,307],
[286,259,272,295,307,284,284,247,264,281,0,301,294],
[197,226,249,245,254,196,256,233,212,207,199,0,257],
[202,234,222,222,204,167,234,202,207,193,206,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 21, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,229,225,255,236,217,248,238,218,227,213,228],
[307,0,232,257,264,278,286,275,271,268,243,260,243],
[271,268,0,238,282,256,244,294,251,232,251,247,231],
[275,243,262,0,271,269,252,279,231,235,264,242,258],
[245,236,218,229,0,225,231,244,242,229,213,215,233],
[264,222,244,231,275,0,245,241,232,232,251,214,251],
[283,214,256,248,269,255,0,287,250,228,228,254,256],
[252,225,206,221,256,259,213,0,218,242,214,250,250],
[262,229,249,269,258,268,250,282,0,239,239,256,260],
[282,232,268,265,271,268,272,258,261,0,257,246,253],
[273,257,249,236,287,249,272,286,261,243,0,250,257],
[287,240,253,258,285,286,246,250,244,254,250,0,246],
[272,257,269,242,267,249,244,250,240,247,243,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 22, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,255,264,269,257,233,247,256,255,257,259,260],
[243,0,267,256,253,261,249,246,257,248,277,259,258],
[245,233,0,251,263,257,221,245,260,242,246,229,249],
[236,244,249,0,256,262,243,258,265,238,254,251,255],
[231,247,237,244,0,252,228,248,248,245,243,247,259],
[243,239,243,238,248,0,233,252,238,240,240,252,251],
[267,251,279,257,272,267,0,269,264,245,255,266,267],
[253,254,255,242,252,248,231,0,246,248,255,248,251],
[244,243,240,235,252,262,236,254,0,228,241,242,254],
[245,252,258,262,255,260,255,252,272,0,249,255,264],
[243,223,254,246,257,260,245,245,259,251,0,241,259],
[241,241,271,249,253,248,234,252,258,245,259,0,262],
[240,242,251,245,241,249,233,249,246,236,241,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 23, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,280,237,246,258,268,276,254,266,262,262,257],
[234,0,257,243,251,233,238,242,250,257,255,253,257],
[220,243,0,233,222,229,235,226,239,253,246,244,251],
[263,257,267,0,249,260,264,276,256,272,247,269,269],
[254,249,278,251,0,227,251,249,284,270,255,243,259],
[242,267,271,240,273,0,276,273,258,265,277,262,277],
[232,262,265,236,249,224,0,248,255,261,248,230,269],
[224,258,274,224,251,227,252,0,236,262,241,228,243],
[246,250,261,244,216,242,245,264,0,255,253,232,245],
[234,243,247,228,230,235,239,238,245,0,216,233,244],
[238,245,254,253,245,223,252,259,247,284,0,249,258],
[238,247,256,231,257,238,270,272,268,267,251,0,270],
[243,243,249,231,241,223,231,257,255,256,242,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 24, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,242,262,237,251,242,267,237,258,246,222,260],
[230,0,232,241,220,238,258,255,236,255,234,226,239],
[258,268,0,278,224,251,259,261,221,270,267,254,243],
[238,259,222,0,216,238,238,251,211,242,229,224,256],
[263,280,276,284,0,283,287,292,243,266,247,262,268],
[249,262,249,262,217,0,235,254,236,268,244,250,239],
[258,242,241,262,213,265,0,258,227,246,227,240,249],
[233,245,239,249,208,246,242,0,224,248,224,237,240],
[263,264,279,289,257,264,273,276,0,282,237,259,263],
[242,245,230,258,234,232,254,252,218,0,228,237,237],
[254,266,233,271,253,256,273,276,263,272,0,243,257],
[278,274,246,276,238,250,260,263,241,263,257,0,265],
[240,261,257,244,232,261,251,260,237,263,243,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 25, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,218,229,252,246,244,244,226,248,263,276,247],
[261,0,230,260,247,248,261,234,237,257,257,243,249],
[282,270,0,250,270,261,279,241,255,261,270,302,269],
[271,240,250,0,258,249,258,243,248,266,268,288,271],
[248,253,230,242,0,242,272,232,249,253,278,273,272],
[254,252,239,251,258,0,255,253,236,255,272,272,266],
[256,239,221,242,228,245,0,246,242,249,262,254,254],
[256,266,259,257,268,247,254,0,251,282,263,280,274],
[274,263,245,252,251,264,258,249,0,250,253,285,272],
[252,243,239,234,247,245,251,218,250,0,251,267,245],
[237,243,230,232,222,228,238,237,247,249,0,259,243],
[224,257,198,212,227,228,246,220,215,233,241,0,246],
[253,251,231,229,228,234,246,226,228,255,257,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 26, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,223,256,261,254,249,234,239,248,240,248,248],
[254,0,223,256,253,243,233,240,240,233,245,238,268],
[277,277,0,275,272,281,279,242,258,260,262,267,258],
[244,244,225,0,245,241,245,225,240,251,243,248,239],
[239,247,228,255,0,255,237,249,243,240,244,234,241],
[246,257,219,259,245,0,236,230,236,257,251,254,245],
[251,267,221,255,263,264,0,243,255,238,242,235,262],
[266,260,258,275,251,270,257,0,262,247,258,263,268],
[261,260,242,260,257,264,245,238,0,256,249,260,252],
[252,267,240,249,260,243,262,253,244,0,240,254,261],
[260,255,238,257,256,249,258,242,251,260,0,259,257],
[252,262,233,252,266,246,265,237,240,246,241,0,234],
[252,232,242,261,259,255,238,232,248,239,243,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 27, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,209,244,234,237,252,230,216,253,227,233,265],
[256,0,220,249,235,239,229,232,227,238,245,250,246],
[291,280,0,252,275,259,228,278,266,275,273,265,260],
[256,251,248,0,232,245,242,252,237,267,222,224,234],
[266,265,225,268,0,222,256,207,226,244,255,235,234],
[263,261,241,255,278,0,252,261,259,241,272,244,290],
[248,271,272,258,244,248,0,241,255,260,227,274,277],
[270,268,222,248,293,239,259,0,234,248,250,233,258],
[284,273,234,263,274,241,245,266,0,269,248,244,252],
[247,262,225,233,256,259,240,252,231,0,267,226,267],
[273,255,227,278,245,228,273,250,252,233,0,266,241],
[267,250,235,276,265,256,226,267,256,274,234,0,271],
[235,254,240,266,266,210,223,242,248,233,259,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 28, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,260,246,245,254,255,256,251,264,244,251,257],
[242,0,257,252,239,244,251,261,239,259,244,248,242],
[240,243,0,242,246,261,264,245,241,245,237,235,247],
[254,248,258,0,234,248,254,241,243,241,249,242,254],
[255,261,254,266,0,257,266,256,251,265,250,250,258],
[246,256,239,252,243,0,238,247,247,239,257,228,247],
[245,249,236,246,234,262,0,240,230,235,253,234,234],
[244,239,255,259,244,253,260,0,222,243,252,244,239],
[249,261,259,257,249,253,270,278,0,253,258,260,269],
[236,241,255,259,235,261,265,257,247,0,250,239,246],
[256,256,263,251,250,243,247,248,242,250,0,240,245],
[249,252,265,258,250,272,266,256,240,261,260,0,238],
[243,258,253,246,242,253,266,261,231,254,255,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 29, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,272,238,242,289,235,308,266,267,297,263,242],
[305,0,296,290,248,299,253,325,285,262,298,294,290],
[228,204,0,234,200,248,206,241,214,253,248,212,189],
[262,210,266,0,247,256,236,286,262,252,269,219,248],
[258,252,300,253,0,281,262,314,241,273,296,249,230],
[211,201,252,244,219,0,232,277,220,249,271,206,228],
[265,247,294,264,238,268,0,283,276,248,260,244,281],
[192,175,259,214,186,223,217,0,246,190,275,217,207],
[234,215,286,238,259,280,224,254,0,247,284,227,246],
[233,238,247,248,227,251,252,310,253,0,289,250,245],
[203,202,252,231,204,229,240,225,216,211,0,236,223],
[237,206,288,281,251,294,256,283,273,250,264,0,278],
[258,210,311,252,270,272,219,293,254,255,277,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 30, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,253,249,263,248,252,241,251,261,241,255,260],
[269,0,242,273,267,269,289,267,248,266,273,257,261],
[247,258,0,248,258,258,256,251,242,255,258,256,274],
[251,227,252,0,250,258,251,253,226,253,255,228,261],
[237,233,242,250,0,248,254,252,250,247,254,230,258],
[252,231,242,242,252,0,249,241,231,251,248,231,243],
[248,211,244,249,246,251,0,248,214,247,238,239,243],
[259,233,249,247,248,259,252,0,248,253,248,250,263],
[249,252,258,274,250,269,286,252,0,254,260,264,273],
[239,234,245,247,253,249,253,247,246,0,245,248,242],
[259,227,242,245,246,252,262,252,240,255,0,243,270],
[245,243,244,272,270,269,261,250,236,252,257,0,260],
[240,239,226,239,242,257,257,237,227,258,230,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 31, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,266,274,258,247,237,256,245,263,227,263,257],
[242,0,254,248,237,246,233,238,233,247,211,240,252],
[234,246,0,282,242,256,226,244,254,252,248,234,237],
[226,252,218,0,240,241,231,236,233,231,230,254,229],
[242,263,258,260,0,259,255,259,252,257,227,258,257],
[253,254,244,259,241,0,248,241,256,227,227,258,244],
[263,267,274,269,245,252,0,263,263,269,251,255,257],
[244,262,256,264,241,259,237,0,245,259,230,265,272],
[255,267,246,267,248,244,237,255,0,240,235,260,243],
[237,253,248,269,243,273,231,241,260,0,228,236,254],
[273,289,252,270,273,273,249,270,265,272,0,270,269],
[237,260,266,246,242,242,245,235,240,264,230,0,266],
[243,248,263,271,243,256,243,228,257,246,231,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 32, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,230,198,228,253,228,258,253,225,249,229,243],
[260,0,239,206,247,272,222,246,254,214,241,235,251],
[270,261,0,237,245,285,274,250,284,258,270,266,265],
[302,294,263,0,237,289,284,279,269,254,266,268,258],
[272,253,255,263,0,261,248,245,267,228,277,253,269],
[247,228,215,211,239,0,217,235,256,224,234,212,264],
[272,278,226,216,252,283,0,265,276,250,254,250,259],
[242,254,250,221,255,265,235,0,236,234,225,220,254],
[247,246,216,231,233,244,224,264,0,230,246,229,233],
[275,286,242,246,272,276,250,266,270,0,287,278,267],
[251,259,230,234,223,266,246,275,254,213,0,217,260],
[271,265,234,232,247,288,250,280,271,222,283,0,254],
[257,249,235,242,231,236,241,246,267,233,240,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 33, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,248,266,253,230,238,251,219,255,227,260,255],
[237,0,271,269,264,272,270,255,257,257,221,261,264],
[252,229,0,270,264,265,262,280,243,235,247,269,247],
[234,231,230,0,254,227,229,218,226,235,214,235,239],
[247,236,236,246,0,244,246,247,245,246,253,271,238],
[270,228,235,273,256,0,247,249,231,247,234,267,258],
[262,230,238,271,254,253,0,255,230,238,238,266,245],
[249,245,220,282,253,251,245,0,256,264,217,281,237],
[281,243,257,274,255,269,270,244,0,264,231,271,256],
[245,243,265,265,254,253,262,236,236,0,247,271,250],
[273,279,253,286,247,266,262,283,269,253,0,284,269],
[240,239,231,265,229,233,234,219,229,229,216,0,235],
[245,236,253,261,262,242,255,263,244,250,231,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 34, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,240,261,230,200,252,229,205,283,231,225,250],
[251,0,242,279,243,262,253,255,239,266,248,230,262],
[260,258,0,289,270,233,271,269,257,304,273,244,284],
[239,221,211,0,242,209,240,236,216,280,224,218,223],
[270,257,230,258,0,253,268,237,232,272,257,235,244],
[300,238,267,291,247,0,266,269,241,293,261,266,264],
[248,247,229,260,232,234,0,244,218,270,267,239,267],
[271,245,231,264,263,231,256,0,241,288,255,237,265],
[295,261,243,284,268,259,282,259,0,291,276,256,268],
[217,234,196,220,228,207,230,212,209,0,202,225,207],
[269,252,227,276,243,239,233,245,224,298,0,232,242],
[275,270,256,282,265,234,261,263,244,275,268,0,252],
[250,238,216,277,256,236,233,235,232,293,258,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 35, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,218,235,244,253,220,234,242,245,228,238,214],
[282,0,220,274,257,236,231,272,262,296,238,268,231],
[282,280,0,276,286,257,255,267,255,283,239,269,257],
[265,226,224,0,250,224,246,248,248,265,233,238,213],
[256,243,214,250,0,244,258,264,258,270,228,260,227],
[247,264,243,276,256,0,234,255,237,278,252,246,232],
[280,269,245,254,242,266,0,274,264,277,259,264,245],
[266,228,233,252,236,245,226,0,255,250,227,246,223],
[258,238,245,252,242,263,236,245,0,271,251,268,228],
[255,204,217,235,230,222,223,250,229,0,223,248,238],
[272,262,261,267,272,248,241,273,249,277,0,267,242],
[262,232,231,262,240,254,236,254,232,252,233,0,218],
[286,269,243,287,273,268,255,277,272,262,258,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 36, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,277,256,249,249,284,218,214,242,253,243,259],
[315,0,322,299,293,284,297,261,265,305,304,250,264],
[223,178,0,241,229,242,229,212,211,245,268,200,255],
[244,201,259,0,234,219,228,207,203,247,265,236,241],
[251,207,271,266,0,250,271,203,220,259,264,246,232],
[251,216,258,281,250,0,245,205,201,236,281,253,247],
[216,203,271,272,229,255,0,224,209,220,285,244,249],
[282,239,288,293,297,295,276,0,263,276,295,253,293],
[286,235,289,297,280,299,291,237,0,243,305,271,287],
[258,195,255,253,241,264,280,224,257,0,264,262,264],
[247,196,232,235,236,219,215,205,195,236,0,227,239],
[257,250,300,264,254,247,256,247,229,238,273,0,272],
[241,236,245,259,268,253,251,207,213,236,261,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 37, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,275,263,221,242,238,242,274,274,279,318,292],
[229,0,215,238,261,206,267,250,224,246,256,263,198],
[225,285,0,236,269,274,233,269,257,274,302,272,234],
[237,262,264,0,279,251,291,270,276,249,303,251,263],
[279,239,231,221,0,280,254,245,217,212,280,324,277],
[258,294,226,249,220,0,258,226,286,255,287,271,260],
[262,233,267,209,246,242,0,229,230,233,276,263,264],
[258,250,231,230,255,274,271,0,257,228,292,255,261],
[226,276,243,224,283,214,270,243,0,251,269,274,263],
[226,254,226,251,288,245,267,272,249,0,257,248,281],
[221,244,198,197,220,213,224,208,231,243,0,255,223],
[182,237,228,249,176,229,237,245,226,252,245,0,217],
[208,302,266,237,223,240,236,239,237,219,277,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 38, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,247,212,238,236,251,239,233,232,249,237,269],
[242,0,263,238,253,256,262,250,254,247,255,243,281],
[253,237,0,218,241,262,239,238,239,231,242,235,246],
[288,262,282,0,258,272,269,266,272,249,275,266,276],
[262,247,259,242,0,257,270,249,248,235,269,240,256],
[264,244,238,228,243,0,234,213,230,236,251,233,258],
[249,238,261,231,230,266,0,222,239,238,241,232,256],
[261,250,262,234,251,287,278,0,249,258,259,253,273],
[267,246,261,228,252,270,261,251,0,226,248,251,257],
[268,253,269,251,265,264,262,242,274,0,257,241,279],
[251,245,258,225,231,249,259,241,252,243,0,244,257],
[263,257,265,234,260,267,268,247,249,259,256,0,274],
[231,219,254,224,244,242,244,227,243,221,243,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 39, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,267,260,272,266,268,287,270,282,251,264,249],
[230,0,254,242,265,253,250,254,271,259,235,243,234],
[233,246,0,244,250,248,272,277,270,270,234,241,246],
[240,258,256,0,272,276,273,279,296,282,250,239,253],
[228,235,250,228,0,238,242,256,260,279,233,231,226],
[234,247,252,224,262,0,259,268,273,271,243,241,247],
[232,250,228,227,258,241,0,240,250,271,227,245,245],
[213,246,223,221,244,232,260,0,247,260,225,210,213],
[230,229,230,204,240,227,250,253,0,265,231,239,230],
[218,241,230,218,221,229,229,240,235,0,212,226,221],
[249,265,266,250,267,257,273,275,269,288,0,249,247],
[236,257,259,261,269,259,255,290,261,274,251,0,255],
[251,266,254,247,274,253,255,287,270,279,253,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 40, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,248,241,237,228,222,217,226,259,238,239,215],
[263,0,265,253,244,228,245,235,233,257,237,254,208],
[252,235,0,234,252,247,242,235,239,262,224,247,224],
[259,247,266,0,278,201,228,227,234,242,219,256,196],
[263,256,248,222,0,229,239,241,218,231,227,245,182],
[272,272,253,299,271,0,252,251,248,278,289,260,257],
[278,255,258,272,261,248,0,253,247,250,215,259,229],
[283,265,265,273,259,249,247,0,266,272,237,269,244],
[274,267,261,266,282,252,253,234,0,266,275,286,233],
[241,243,238,258,269,222,250,228,234,0,215,240,194],
[262,263,276,281,273,211,285,263,225,285,0,265,240],
[261,246,253,244,255,240,241,231,214,260,235,0,203],
[285,292,276,304,318,243,271,256,267,306,260,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 41, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,237,255,297,279,256,248,290,277,239,241,209],
[271,0,254,291,292,256,263,275,290,275,291,245,260],
[263,246,0,262,299,280,275,267,296,297,264,285,206],
[245,209,238,0,281,244,252,266,284,273,258,268,208],
[203,208,201,219,0,201,223,234,240,224,229,209,171],
[221,244,220,256,299,0,234,309,314,281,249,267,244],
[244,237,225,248,277,266,0,238,299,257,214,265,209],
[252,225,233,234,266,191,262,0,279,229,241,232,188],
[210,210,204,216,260,186,201,221,0,220,208,243,172],
[223,225,203,227,276,219,243,271,280,0,233,252,201],
[261,209,236,242,271,251,286,259,292,267,0,259,224],
[259,255,215,232,291,233,235,268,257,248,241,0,202],
[291,240,294,292,329,256,291,312,328,299,276,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 42, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,255,233,255,245,250,230,243,239,240,222,253],
[268,0,272,267,245,243,257,252,255,255,259,239,269],
[245,228,0,248,243,235,246,245,236,237,237,211,241],
[267,233,252,0,252,264,265,246,243,242,242,245,241],
[245,255,257,248,0,228,254,240,237,235,247,224,257],
[255,257,265,236,272,0,247,237,239,216,266,243,252],
[250,243,254,235,246,253,0,250,228,242,263,232,245],
[270,248,255,254,260,263,250,0,239,236,243,219,249],
[257,245,264,257,263,261,272,261,0,249,242,251,244],
[261,245,263,258,265,284,258,264,251,0,257,233,251],
[260,241,263,258,253,234,237,257,258,243,0,233,250],
[278,261,289,255,276,257,268,281,249,267,267,0,253],
[247,231,259,259,243,248,255,251,256,249,250,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 43, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,260,256,253,270,283,261,287,240,265,253,277],
[257,0,259,255,243,267,271,249,276,271,264,256,270],
[240,241,0,245,241,265,263,240,265,240,256,248,255],
[244,245,255,0,257,277,269,241,265,265,270,260,261],
[247,257,259,243,0,250,259,244,267,241,246,239,263],
[230,233,235,223,250,0,243,230,253,244,237,232,249],
[217,229,237,231,241,257,0,222,259,230,242,237,248],
[239,251,260,259,256,270,278,0,280,258,261,262,267],
[213,224,235,235,233,247,241,220,0,220,237,234,230],
[260,229,260,235,259,256,270,242,280,0,255,249,262],
[235,236,244,230,254,263,258,239,263,245,0,234,257],
[247,244,252,240,261,268,263,238,266,251,266,0,275],
[223,230,245,239,237,251,252,233,270,238,243,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 44, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,237,243,258,229,234,228,243,229,272,280,238],
[236,0,246,255,264,227,260,252,252,236,243,267,258],
[263,254,0,250,237,248,234,251,248,266,245,269,288],
[257,245,250,0,254,246,244,240,261,284,266,297,266],
[242,236,263,246,0,264,244,249,277,258,260,276,267],
[271,273,252,254,236,0,250,241,260,267,244,278,262],
[266,240,266,256,256,250,0,226,264,270,265,261,287],
[272,248,249,260,251,259,274,0,279,263,243,269,245],
[257,248,252,239,223,240,236,221,0,221,253,257,255],
[271,264,234,216,242,233,230,237,279,0,240,260,250],
[228,257,255,234,240,256,235,257,247,260,0,241,257],
[220,233,231,203,224,222,239,231,243,240,259,0,259],
[262,242,212,234,233,238,213,255,245,250,243,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 45, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,277,257,278,228,265,273,248,251,270,236,271],
[273,0,266,277,276,246,281,269,261,244,298,253,258],
[223,234,0,257,250,237,258,208,255,249,236,237,254],
[243,223,243,0,246,232,238,251,254,236,265,244,244],
[222,224,250,254,0,247,253,237,231,216,234,238,236],
[272,254,263,268,253,0,253,245,241,261,254,282,262],
[235,219,242,262,247,247,0,239,244,225,218,234,227],
[227,231,292,249,263,255,261,0,240,250,278,257,273],
[252,239,245,246,269,259,256,260,0,253,283,266,284],
[249,256,251,264,284,239,275,250,247,0,249,233,257],
[230,202,264,235,266,246,282,222,217,251,0,245,247],
[264,247,263,256,262,218,266,243,234,267,255,0,227],
[229,242,246,256,264,238,273,227,216,243,253,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 46, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,273,250,243,285,257,282,243,278,294,261,277],
[217,0,230,236,222,265,230,258,228,253,238,285,274],
[227,270,0,228,221,261,236,268,254,230,255,275,251],
[250,264,272,0,266,273,253,278,270,250,285,271,285],
[257,278,279,234,0,256,257,257,268,255,270,272,295],
[215,235,239,227,244,0,243,259,229,241,256,262,263],
[243,270,264,247,243,257,0,254,256,267,259,271,284],
[218,242,232,222,243,241,246,0,238,256,258,284,261],
[257,272,246,230,232,271,244,262,0,248,285,281,284],
[222,247,270,250,245,259,233,244,252,0,251,270,263],
[206,262,245,215,230,244,241,242,215,249,0,267,265],
[239,215,225,229,228,238,229,216,219,230,233,0,263],
[223,226,249,215,205,237,216,239,216,237,235,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 47, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,261,264,250,260,242,257,239,251,256,266,258],
[241,0,264,248,228,249,242,269,242,261,251,256,242],
[239,236,0,236,222,233,221,242,233,229,253,248,232],
[236,252,264,0,240,235,249,253,249,252,253,258,242],
[250,272,278,260,0,256,250,262,253,270,263,274,252],
[240,251,267,265,244,0,248,279,256,251,267,267,254],
[258,258,279,251,250,252,0,269,256,254,260,259,260],
[243,231,258,247,238,221,231,0,239,246,246,261,244],
[261,258,267,251,247,244,244,261,0,251,263,268,254],
[249,239,271,248,230,249,246,254,249,0,261,253,245],
[244,249,247,247,237,233,240,254,237,239,0,253,247],
[234,244,252,242,226,233,241,239,232,247,247,0,243],
[242,258,268,258,248,246,240,256,246,255,253,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 48, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,239,265,281,226,225,278,249,210,245,222,253],
[278,0,240,311,300,234,277,295,280,287,273,305,248],
[261,260,0,269,269,242,220,259,282,260,257,260,236],
[235,189,231,0,256,239,192,237,219,241,244,189,237],
[219,200,231,244,0,234,238,265,230,226,257,249,239],
[274,266,258,261,266,0,255,269,282,239,272,245,252],
[275,223,280,308,262,245,0,292,273,245,264,276,272],
[222,205,241,263,235,231,208,0,242,234,221,209,228],
[251,220,218,281,270,218,227,258,0,222,233,243,233],
[290,213,240,259,274,261,255,266,278,0,277,281,230],
[255,227,243,256,243,228,236,279,267,223,0,261,250],
[278,195,240,311,251,255,224,291,257,219,239,0,244],
[247,252,264,263,261,248,228,272,267,270,250,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 49, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,251,258,272,272,250,272,238,267,247,249,249],
[255,0,247,275,250,265,243,274,240,255,262,266,262],
[249,253,0,249,278,266,246,270,236,240,248,249,264],
[242,225,251,0,233,221,241,268,220,225,242,225,239],
[228,250,222,267,0,258,235,262,242,250,252,252,248],
[228,235,234,279,242,0,236,244,237,252,252,243,259],
[250,257,254,259,265,264,0,268,261,264,267,250,245],
[228,226,230,232,238,256,232,0,227,236,237,243,238],
[262,260,264,280,258,263,239,273,0,277,264,244,275],
[233,245,260,275,250,248,236,264,223,0,266,257,242],
[253,238,252,258,248,248,233,263,236,234,0,248,252],
[251,234,251,275,248,257,250,257,256,243,252,0,254],
[251,238,236,261,252,241,255,262,225,258,248,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 50, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,255,254,251,238,250,251,240,249,254,249,257],
[236,0,247,231,258,225,258,236,241,234,242,239,261],
[245,253,0,230,252,243,243,255,234,247,243,248,260],
[246,269,270,0,257,239,258,265,254,237,267,244,262],
[249,242,248,243,0,235,262,244,234,261,246,235,258],
[262,275,257,261,265,0,260,265,266,254,257,250,270],
[250,242,257,242,238,240,0,249,237,238,246,240,238],
[249,264,245,235,256,235,251,0,239,252,244,242,253],
[260,259,266,246,266,234,263,261,0,272,266,256,275],
[251,266,253,263,239,246,262,248,228,0,251,243,250],
[246,258,257,233,254,243,254,256,234,249,0,239,250],
[251,261,252,256,265,250,260,258,244,257,261,0,265],
[243,239,240,238,242,230,262,247,225,250,250,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 51, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,248,282,227,231,254,267,237,240,262,254,229],
[266,0,257,267,263,257,263,264,261,272,291,243,266],
[252,243,0,257,244,259,257,256,248,248,247,245,230],
[218,233,243,0,224,266,222,245,246,264,250,249,204],
[273,237,256,276,0,256,276,290,243,268,299,268,245],
[269,243,241,234,244,0,236,250,227,246,266,259,216],
[246,237,243,278,224,264,0,240,235,266,265,250,204],
[233,236,244,255,210,250,260,0,226,269,269,233,221],
[263,239,252,254,257,273,265,274,0,275,267,262,245],
[260,228,252,236,232,254,234,231,225,0,270,237,221],
[238,209,253,250,201,234,235,231,233,230,0,220,210],
[246,257,255,251,232,241,250,267,238,263,280,0,205],
[271,234,270,296,255,284,296,279,255,279,290,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 52, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,263,247,277,265,251,249,258,260,266,267,279],
[230,0,252,245,254,254,221,230,238,238,231,257,241],
[237,248,0,241,254,242,236,248,237,241,242,241,252],
[253,255,259,0,261,268,237,256,254,258,266,272,265],
[223,246,246,239,0,249,227,230,241,243,251,237,238],
[235,246,258,232,251,0,246,240,230,230,253,257,249],
[249,279,264,263,273,254,0,250,252,245,256,257,259],
[251,270,252,244,270,260,250,0,243,237,255,265,265],
[242,262,263,246,259,270,248,257,0,239,265,254,257],
[240,262,259,242,257,270,255,263,261,0,253,252,255],
[234,269,258,234,249,247,244,245,235,247,0,247,242],
[233,243,259,228,263,243,243,235,246,248,253,0,244],
[221,259,248,235,262,251,241,235,243,245,258,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 53, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,271,185,177,254,281,193,227,278,200,140,219],
[249,0,210,201,209,195,186,185,157,270,155,187,212],
[229,290,0,201,221,243,242,235,157,291,243,217,251],
[315,299,299,0,258,276,272,248,250,315,267,282,372],
[323,291,279,242,0,282,311,265,250,301,318,246,282],
[246,305,257,224,218,0,296,294,269,264,181,253,337],
[219,314,258,228,189,204,0,174,192,253,211,218,275],
[307,315,265,252,235,206,326,0,296,311,262,225,373],
[273,343,343,250,250,231,308,204,0,335,258,245,323],
[222,230,209,185,199,236,247,189,165,0,192,148,277],
[300,345,257,233,182,319,289,238,242,308,0,237,313],
[360,313,283,218,254,247,282,275,255,352,263,0,350],
[281,288,249,128,218,163,225,127,177,223,187,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 54, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,267,251,261,266,243,266,267,260,251,244,252],
[281,0,272,264,301,290,276,317,277,260,233,254,268],
[233,228,0,236,248,238,214,261,226,244,248,217,238],
[249,236,264,0,290,260,251,275,246,265,236,261,268],
[239,199,252,210,0,253,241,259,217,249,219,219,247],
[234,210,262,240,247,0,246,266,241,250,248,235,242],
[257,224,286,249,259,254,0,264,243,246,251,232,247],
[234,183,239,225,241,234,236,0,246,217,212,229,224],
[233,223,274,254,283,259,257,254,0,248,243,255,263],
[240,240,256,235,251,250,254,283,252,0,230,227,251],
[249,267,252,264,281,252,249,288,257,270,0,253,267],
[256,246,283,239,281,265,268,271,245,273,247,0,235],
[248,232,262,232,253,258,253,276,237,249,233,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 55, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,236,245,262,242,251,252,254,262,243,249,253],
[251,0,252,236,240,248,251,271,245,255,233,250,251],
[264,248,0,255,264,275,255,276,250,267,253,272,267],
[255,264,245,0,255,255,265,266,258,269,249,271,261],
[238,260,236,245,0,239,266,264,240,259,240,248,260],
[258,252,225,245,261,0,259,273,256,264,239,265,264],
[249,249,245,235,234,241,0,255,237,248,233,246,250],
[248,229,224,234,236,227,245,0,231,254,244,253,234],
[246,255,250,242,260,244,263,269,0,256,240,254,270],
[238,245,233,231,241,236,252,246,244,0,232,250,256],
[257,267,247,251,260,261,267,256,260,268,0,273,273],
[251,250,228,229,252,235,254,247,246,250,227,0,242],
[247,249,233,239,240,236,250,266,230,244,227,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 56, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,252,232,223,228,241,282,224,233,244,211,250],
[277,0,271,214,246,237,244,277,256,242,248,230,263],
[248,229,0,210,209,240,216,258,225,222,236,205,200],
[268,286,290,0,238,275,246,266,246,278,261,260,240],
[277,254,291,262,0,264,249,284,255,290,290,251,279],
[272,263,260,225,236,0,229,265,240,238,247,246,235],
[259,256,284,254,251,271,0,295,276,263,261,244,243],
[218,223,242,234,216,235,205,0,232,245,229,230,214],
[276,244,275,254,245,260,224,268,0,252,224,230,209],
[267,258,278,222,210,262,237,255,248,0,248,242,239],
[256,252,264,239,210,253,239,271,276,252,0,183,234],
[289,270,295,240,249,254,256,270,270,258,317,0,266],
[250,237,300,260,221,265,257,286,291,261,266,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 57, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,237,259,249,258,243,259,259,279,269,255,251],
[240,0,242,250,258,232,241,255,262,255,270,248,238],
[263,258,0,258,251,261,247,263,251,263,273,241,243],
[241,250,242,0,259,253,249,265,260,260,249,251,253],
[251,242,249,241,0,239,236,236,241,255,253,243,227],
[242,268,239,247,261,0,239,263,242,267,265,252,242],
[257,259,253,251,264,261,0,266,249,257,265,247,246],
[241,245,237,235,264,237,234,0,241,249,246,239,237],
[241,238,249,240,259,258,251,259,0,260,250,241,250],
[221,245,237,240,245,233,243,251,240,0,254,233,231],
[231,230,227,251,247,235,235,254,250,246,0,240,237],
[245,252,259,249,257,248,253,261,259,267,260,0,249],
[249,262,257,247,273,258,254,263,250,269,263,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 58, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,245,253,255,233,255,244,246,260,262,251,239],
[258,0,256,248,257,240,256,228,264,273,240,268,242],
[255,244,0,244,246,241,257,230,253,256,252,259,244],
[247,252,256,0,261,242,245,217,254,258,253,259,247],
[245,243,254,239,0,238,257,231,264,262,250,247,248],
[267,260,259,258,262,0,265,250,268,261,270,258,258],
[245,244,243,255,243,235,0,237,252,263,250,260,248],
[256,272,270,283,269,250,263,0,270,269,266,277,266],
[254,236,247,246,236,232,248,230,0,253,236,261,241],
[240,227,244,242,238,239,237,231,247,0,254,257,246],
[238,260,248,247,250,230,250,234,264,246,0,270,255],
[249,232,241,241,253,242,240,223,239,243,230,0,253],
[261,258,256,253,252,242,252,234,259,254,245,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 59, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,227,218,238,224,224,251,229,234,240,233,234],
[291,0,266,250,254,258,246,254,258,286,238,267,259],
[273,234,0,235,259,244,245,264,243,275,244,250,237],
[282,250,265,0,272,266,256,260,266,288,259,268,268],
[262,246,241,228,0,241,251,244,236,262,246,243,243],
[276,242,256,234,259,0,246,255,252,265,226,269,254],
[276,254,255,244,249,254,0,245,240,276,264,260,255],
[249,246,236,240,256,245,255,0,240,255,242,245,249],
[271,242,257,234,264,248,260,260,0,292,254,267,260],
[266,214,225,212,238,235,224,245,208,0,221,233,213],
[260,262,256,241,254,274,236,258,246,279,0,265,257],
[267,233,250,232,257,231,240,255,233,267,235,0,267],
[266,241,263,232,257,246,245,251,240,287,243,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 60, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,237,272,243,246,256,233,265,236,246,267,248],
[271,0,256,287,265,260,270,267,261,250,252,290,266],
[263,244,0,270,276,268,254,252,276,249,243,266,260],
[228,213,230,0,249,250,226,231,238,232,232,219,232],
[257,235,224,251,0,250,242,249,260,237,250,264,244],
[254,240,232,250,250,0,242,249,230,248,247,259,254],
[244,230,246,274,258,258,0,238,243,222,233,256,255],
[267,233,248,269,251,251,262,0,248,227,240,244,248],
[235,239,224,262,240,270,257,252,0,235,252,241,252],
[264,250,251,268,263,252,278,273,265,0,267,267,248],
[254,248,257,268,250,253,267,260,248,233,0,246,251],
[233,210,234,281,236,241,244,256,259,233,254,0,242],
[252,234,240,268,256,246,245,252,248,252,249,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 61, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,222,202,234,269,235,238,222,199,241,227,222],
[239,0,269,249,250,273,225,251,230,227,252,219,232],
[278,231,0,218,255,260,227,249,235,228,277,220,237],
[298,251,282,0,240,290,244,271,247,211,269,240,240],
[266,250,245,260,0,279,236,253,247,226,276,245,257],
[231,227,240,210,221,0,224,239,199,209,240,181,241],
[265,275,273,256,264,276,0,279,240,241,257,225,230],
[262,249,251,229,247,261,221,0,211,220,248,233,251],
[278,270,265,253,253,301,260,289,0,279,279,231,246],
[301,273,272,289,274,291,259,280,221,0,312,260,268],
[259,248,223,231,224,260,243,252,221,188,0,230,228],
[273,281,280,260,255,319,275,267,269,240,270,0,259],
[278,268,263,260,243,259,270,249,254,232,272,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 62, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,238,243,243,223,264,254,241,248,264,264,227],
[245,0,249,246,235,226,254,247,241,235,249,261,239],
[262,251,0,240,252,232,257,263,242,229,250,271,224],
[257,254,260,0,242,249,244,257,245,235,244,270,232],
[257,265,248,258,0,237,268,258,246,238,248,271,239],
[277,274,268,251,263,0,274,284,257,250,267,277,261],
[236,246,243,256,232,226,0,247,230,237,227,263,218],
[246,253,237,243,242,216,253,0,227,226,241,242,221],
[259,259,258,255,254,243,270,273,0,240,260,262,242],
[252,265,271,265,262,250,263,274,260,0,264,280,241],
[236,251,250,256,252,233,273,259,240,236,0,272,233],
[236,239,229,230,229,223,237,258,238,220,228,0,222],
[273,261,276,268,261,239,282,279,258,259,267,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 63, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,244,251,247,275,257,275,274,273,266,273,275],
[219,0,226,240,228,232,244,260,240,235,228,250,245],
[256,274,0,224,255,261,243,287,232,258,230,272,259],
[249,260,276,0,241,263,257,283,248,253,254,264,272],
[253,272,245,259,0,254,270,294,243,262,256,257,269],
[225,268,239,237,246,0,252,240,235,249,249,244,263],
[243,256,257,243,230,248,0,271,254,271,250,258,258],
[225,240,213,217,206,260,229,0,227,233,216,242,239],
[226,260,268,252,257,265,246,273,0,260,248,282,265],
[227,265,242,247,238,251,229,267,240,0,248,252,271],
[234,272,270,246,244,251,250,284,252,252,0,272,277],
[227,250,228,236,243,256,242,258,218,248,228,0,241],
[225,255,241,228,231,237,242,261,235,229,223,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 64, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,263,255,280,261,246,236,242,298,257,230,256],
[229,0,234,221,220,262,219,210,230,232,249,213,221],
[237,266,0,228,238,261,254,226,243,246,244,244,241],
[245,279,272,0,277,282,250,271,260,276,287,258,261],
[220,280,262,223,0,273,226,228,233,242,278,250,256],
[239,238,239,218,227,0,224,210,229,237,269,235,250],
[254,281,246,250,274,276,0,243,225,283,285,248,254],
[264,290,274,229,272,290,257,0,280,278,273,246,269],
[258,270,257,240,267,271,275,220,0,249,264,263,259],
[202,268,254,224,258,263,217,222,251,0,251,238,231],
[243,251,256,213,222,231,215,227,236,249,0,238,254],
[270,287,256,242,250,265,252,254,237,262,262,0,240],
[244,279,259,239,244,250,246,231,241,269,246,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 65, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,251,264,244,244,255,256,248,262,244,274,261],
[258,0,234,257,274,243,240,249,250,230,243,270,263],
[249,266,0,271,288,235,249,249,254,236,247,285,280],
[236,243,229,0,268,230,244,263,267,238,244,278,263],
[256,226,212,232,0,206,232,222,222,210,220,235,247],
[256,257,265,270,294,0,251,261,267,251,237,297,250],
[245,260,251,256,268,249,0,266,257,240,253,271,271],
[244,251,251,237,278,239,234,0,241,255,240,276,263],
[252,250,246,233,278,233,243,259,0,242,238,261,240],
[238,270,264,262,290,249,260,245,258,0,254,299,280],
[256,257,253,256,280,263,247,260,262,246,0,277,279],
[226,230,215,222,265,203,229,224,239,201,223,0,256],
[239,237,220,237,253,250,229,237,260,220,221,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 66, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,241,268,268,262,293,260,248,279,244,272,265],
[243,0,240,259,266,261,283,255,251,251,248,266,235],
[259,260,0,260,290,254,276,267,273,253,248,274,257],
[232,241,240,0,265,213,281,241,246,253,234,262,236],
[232,234,210,235,0,228,249,237,229,233,229,266,226],
[238,239,246,287,272,0,278,271,250,265,247,257,255],
[207,217,224,219,251,222,0,247,221,241,238,244,247],
[240,245,233,259,263,229,253,0,239,249,245,265,240],
[252,249,227,254,271,250,279,261,0,272,248,266,253],
[221,249,247,247,267,235,259,251,228,0,254,262,226],
[256,252,252,266,271,253,262,255,252,246,0,276,247],
[228,234,226,238,234,243,256,235,234,238,224,0,245],
[235,265,243,264,274,245,253,260,247,274,253,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 67, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,245,266,265,249,243,249,253,255,279,232,264],
[264,0,240,253,266,204,239,236,268,266,242,185,238],
[255,260,0,271,271,239,270,262,248,277,291,227,255],
[234,247,229,0,247,229,261,232,250,259,224,205,237],
[235,234,229,253,0,227,226,222,224,261,256,197,244],
[251,296,261,271,273,0,265,290,255,304,300,228,273],
[257,261,230,239,274,235,0,264,264,262,276,210,256],
[251,264,238,268,278,210,236,0,288,274,274,255,263],
[247,232,252,250,276,245,236,212,0,266,261,216,249],
[245,234,223,241,239,196,238,226,234,0,232,210,207],
[221,258,209,276,244,200,224,226,239,268,0,221,227],
[268,315,273,295,303,272,290,245,284,290,279,0,276],
[236,262,245,263,256,227,244,237,251,293,273,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 68, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,249,260,259,230,253,249,256,260,235,245,266],
[247,0,248,259,260,250,252,264,272,267,244,241,266],
[251,252,0,250,263,243,250,250,254,253,229,235,252],
[240,241,250,0,250,232,227,254,247,239,225,238,261],
[241,240,237,250,0,236,243,249,249,254,248,232,244],
[270,250,257,268,264,0,265,265,269,276,249,250,268],
[247,248,250,273,257,235,0,249,248,256,225,230,252],
[251,236,250,246,251,235,251,0,259,248,237,234,260],
[244,228,246,253,251,231,252,241,0,258,231,233,251],
[240,233,247,261,246,224,244,252,242,0,242,235,246],
[265,256,271,275,252,251,275,263,269,258,0,243,255],
[255,259,265,262,268,250,270,266,267,265,257,0,268],
[234,234,248,239,256,232,248,240,249,254,245,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 69, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,236,252,238,261,239,265,259,276,266,261,236],
[241,0,241,256,247,267,235,260,249,268,266,282,243],
[264,259,0,243,264,273,247,259,264,264,248,282,258],
[248,244,257,0,253,257,245,262,260,261,253,265,247],
[262,253,236,247,0,249,241,245,247,259,233,260,248],
[239,233,227,243,251,0,223,239,240,256,240,253,221],
[261,265,253,255,259,277,0,261,250,274,244,281,253],
[235,240,241,238,255,261,239,0,265,270,240,267,250],
[241,251,236,240,253,260,250,235,0,262,248,262,234],
[224,232,236,239,241,244,226,230,238,0,232,261,242],
[234,234,252,247,267,260,256,260,252,268,0,285,255],
[239,218,218,235,240,247,219,233,238,239,215,0,218],
[264,257,242,253,252,279,247,250,266,258,245,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 70, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,262,277,280,246,277,254,260,252,270,263,253],
[226,0,259,241,247,250,250,246,252,257,234,242,234],
[238,241,0,264,246,268,264,260,237,249,236,265,242],
[223,259,236,0,237,231,243,242,244,271,240,236,248],
[220,253,254,263,0,264,248,245,224,243,247,231,240],
[254,250,232,269,236,0,270,255,261,268,253,231,260],
[223,250,236,257,252,230,0,239,242,262,235,236,228],
[246,254,240,258,255,245,261,0,236,256,251,238,255],
[240,248,263,256,276,239,258,264,0,272,264,232,255],
[248,243,251,229,257,232,238,244,228,0,260,252,242],
[230,266,264,260,253,247,265,249,236,240,0,247,261],
[237,258,235,264,269,269,264,262,268,248,253,0,271],
[247,266,258,252,260,240,272,245,245,258,239,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 71, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,256,262,256,230,255,259,265,238,274,195,266],
[209,0,281,241,242,235,307,231,265,208,283,199,264],
[244,219,0,228,219,261,219,188,242,258,253,181,250],
[238,259,272,0,230,163,284,227,246,232,238,246,217],
[244,258,281,270,0,237,344,233,269,242,284,210,293],
[270,265,239,337,263,0,285,262,308,303,291,325,283],
[245,193,281,216,156,215,0,199,225,187,202,162,251],
[241,269,312,273,267,238,301,0,314,269,251,218,266],
[235,235,258,254,231,192,275,186,0,199,205,184,274],
[262,292,242,268,258,197,313,231,301,0,305,249,332],
[226,217,247,262,216,209,298,249,295,195,0,221,228],
[305,301,319,254,290,175,338,282,316,251,279,0,316],
[234,236,250,283,207,217,249,234,226,168,272,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 72, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,235,257,274,261,255,223,276,250,256,239,269],
[225,0,202,213,252,252,223,213,249,231,215,242,220],
[265,298,0,250,287,286,255,254,293,264,271,259,254],
[243,287,250,0,299,283,268,228,285,263,283,252,269],
[226,248,213,201,0,241,256,204,250,245,240,216,215],
[239,248,214,217,259,0,261,226,274,244,233,243,248],
[245,277,245,232,244,239,0,199,250,256,230,233,245],
[277,287,246,272,296,274,301,0,291,267,272,270,277],
[224,251,207,215,250,226,250,209,0,245,234,242,228],
[250,269,236,237,255,256,244,233,255,0,250,273,216],
[244,285,229,217,260,267,270,228,266,250,0,253,249],
[261,258,241,248,284,257,267,230,258,227,247,0,243],
[231,280,246,231,285,252,255,223,272,284,251,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 73, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,246,242,257,237,235,273,222,254,251,251,257],
[213,0,212,258,205,229,223,250,198,244,241,241,213],
[254,288,0,279,250,260,254,261,255,282,280,284,255],
[258,242,221,0,243,257,240,221,240,249,257,255,264],
[243,295,250,257,0,281,233,247,242,255,269,262,264],
[263,271,240,243,219,0,225,239,241,271,240,248,257],
[265,277,246,260,267,275,0,261,273,274,279,277,247],
[227,250,239,279,253,261,239,0,229,290,268,260,265],
[278,302,245,260,258,259,227,271,0,261,251,260,263],
[246,256,218,251,245,229,226,210,239,0,251,273,277],
[249,259,220,243,231,260,221,232,249,249,0,252,236],
[249,259,216,245,238,252,223,240,240,227,248,0,234],
[243,287,245,236,236,243,253,235,237,223,264,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 74, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,289,232,249,216,285,277,271,304,293,240,268],
[203,0,182,172,199,199,231,298,210,188,209,235,220],
[211,318,0,253,210,199,245,286,260,228,234,257,236],
[268,328,247,0,270,254,320,330,299,248,297,293,239],
[251,301,290,230,0,258,276,276,275,268,325,293,279],
[284,301,301,246,242,0,303,309,289,253,227,265,258],
[215,269,255,180,224,197,0,243,269,226,221,242,218],
[223,202,214,170,224,191,257,0,225,198,199,259,186],
[229,290,240,201,225,211,231,275,0,217,194,248,213],
[196,312,272,252,232,247,274,302,283,0,278,293,228],
[207,291,266,203,175,273,279,301,306,222,0,273,233],
[260,265,243,207,207,235,258,241,252,207,227,0,189],
[232,280,264,261,221,242,282,314,287,272,267,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 75, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,276,209,251,264,269,288,255,241,222,229,224],
[211,0,288,206,244,239,239,288,235,276,235,229,221],
[224,212,0,203,223,228,204,250,187,208,180,227,206],
[291,294,297,0,285,296,278,264,291,300,282,236,258],
[249,256,277,215,0,255,275,298,233,252,222,255,248],
[236,261,272,204,245,0,237,259,237,262,189,230,224],
[231,261,296,222,225,263,0,274,226,249,223,251,213],
[212,212,250,236,202,241,226,0,215,239,224,206,210],
[245,265,313,209,267,263,274,285,0,271,224,255,251],
[259,224,292,200,248,238,251,261,229,0,209,254,239],
[278,265,320,218,278,311,277,276,276,291,0,275,258],
[271,271,273,264,245,270,249,294,245,246,225,0,250],
[276,279,294,242,252,276,287,290,249,261,242,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 76, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,246,244,264,260,245,263,235,264,259,268,252],
[240,0,241,249,245,260,261,251,247,236,257,258,241],
[254,259,0,266,269,274,250,258,244,254,256,266,245],
[256,251,234,0,250,260,252,263,244,248,253,253,230],
[236,255,231,250,0,266,244,241,238,235,244,252,237],
[240,240,226,240,234,0,237,246,224,222,233,243,221],
[255,239,250,248,256,263,0,256,248,248,257,269,240],
[237,249,242,237,259,254,244,0,237,248,253,258,245],
[265,253,256,256,262,276,252,263,0,245,261,256,251],
[236,264,246,252,265,278,252,252,255,0,257,264,252],
[241,243,244,247,256,267,243,247,239,243,0,255,233],
[232,242,234,247,248,257,231,242,244,236,245,0,221],
[248,259,255,270,263,279,260,255,249,248,267,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 77, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,310,253,302,243,275,260,310,291,301,264,242],
[233,0,265,188,248,222,284,232,283,263,277,239,211],
[190,235,0,205,215,243,257,236,209,239,235,194,177],
[247,312,295,0,300,277,281,243,331,273,289,262,241],
[198,252,285,200,0,217,235,238,242,237,236,264,212],
[257,278,257,223,283,0,273,256,227,254,259,223,211],
[225,216,243,219,265,227,0,186,273,227,257,244,209],
[240,268,264,257,262,244,314,0,270,285,289,228,241],
[190,217,291,169,258,273,227,230,0,197,250,222,222],
[209,237,261,227,263,246,273,215,303,0,265,265,258],
[199,223,265,211,264,241,243,211,250,235,0,192,248],
[236,261,306,238,236,277,256,272,278,235,308,0,231],
[258,289,323,259,288,289,291,259,278,242,252,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 78, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,259,284,266,264,286,268,269,268,250,252,281],
[224,0,256,263,256,243,250,243,248,250,229,253,261],
[241,244,0,253,247,245,243,244,226,252,243,254,269],
[216,237,247,0,238,241,246,232,229,247,244,257,251],
[234,244,253,262,0,257,255,250,259,256,239,252,263],
[236,257,255,259,243,0,252,254,243,250,249,267,272],
[214,250,257,254,245,248,0,214,246,245,245,240,261],
[232,257,256,268,250,246,286,0,243,265,250,265,269],
[231,252,274,271,241,257,254,257,0,274,246,274,278],
[232,250,248,253,244,250,255,235,226,0,235,258,257],
[250,271,257,256,261,251,255,250,254,265,0,270,277],
[248,247,246,243,248,233,260,235,226,242,230,0,252],
[219,239,231,249,237,228,239,231,222,243,223,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 79, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,304,281,273,147,281,191,315,160,249,339,257],
[364,0,355,379,276,273,410,329,338,236,371,324,344],
[196,145,0,173,266,90,209,180,317,118,284,282,321],
[219,121,327,0,246,233,231,198,269,128,206,295,242],
[227,224,234,254,0,242,365,169,273,218,289,259,230],
[353,227,410,267,258,0,330,368,297,275,353,267,386],
[219,90,291,269,135,170,0,210,205,128,217,237,225],
[309,171,320,302,331,132,290,0,370,183,375,282,278],
[185,162,183,231,227,203,295,130,0,63,211,231,271],
[340,264,382,372,282,225,372,317,437,0,393,390,383],
[251,129,216,294,211,147,283,125,289,107,0,239,259],
[161,176,218,205,241,233,263,218,269,110,261,0,320],
[243,156,179,258,270,114,275,222,229,117,241,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 80, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,249,238,233,247,238,274,245,250,240,228,259],
[246,0,257,259,243,255,250,268,254,256,242,258,259],
[251,243,0,242,250,248,262,270,245,240,244,246,260],
[262,241,258,0,251,251,257,272,250,247,247,255,263],
[267,257,250,249,0,257,263,289,263,270,263,266,261],
[253,245,252,249,243,0,244,254,231,250,253,243,242],
[262,250,238,243,237,256,0,264,232,254,248,238,286],
[226,232,230,228,211,246,236,0,229,221,234,234,237],
[255,246,255,250,237,269,268,271,0,257,244,259,257],
[250,244,260,253,230,250,246,279,243,0,248,262,264],
[260,258,256,253,237,247,252,266,256,252,0,253,261],
[272,242,254,245,234,257,262,266,241,238,247,0,256],
[241,241,240,237,239,258,214,263,243,236,239,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 81, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,250,245,222,254,253,240,240,240,256,234,248],
[248,0,229,245,218,243,234,225,231,218,246,221,223],
[250,271,0,247,241,258,237,251,257,239,259,234,249],
[255,255,253,0,236,243,235,244,242,237,255,245,237],
[278,282,259,264,0,264,263,250,275,266,266,251,259],
[246,257,242,257,236,0,239,221,241,243,249,232,241],
[247,266,263,265,237,261,0,244,240,256,256,246,227],
[260,275,249,256,250,279,256,0,252,259,277,249,261],
[260,269,243,258,225,259,260,248,0,245,256,243,238],
[260,282,261,263,234,257,244,241,255,0,260,254,250],
[244,254,241,245,234,251,244,223,244,240,0,247,238],
[266,279,266,255,249,268,254,251,257,246,253,0,245],
[252,277,251,263,241,259,273,239,262,250,262,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 82, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,255,249,242,244,260,283,225,242,236,257,249],
[230,0,229,228,234,215,242,250,228,227,239,231,227],
[245,271,0,253,224,237,269,262,235,236,250,233,261],
[251,272,247,0,257,250,250,278,240,242,239,256,243],
[258,266,276,243,0,256,277,272,245,254,259,259,253],
[256,285,263,250,244,0,254,270,242,255,257,257,259],
[240,258,231,250,223,246,0,260,228,240,232,240,244],
[217,250,238,222,228,230,240,0,233,234,242,237,221],
[275,272,265,260,255,258,272,267,0,250,261,264,260],
[258,273,264,258,246,245,260,266,250,0,245,253,251],
[264,261,250,261,241,243,268,258,239,255,0,248,246],
[243,269,267,244,241,243,260,263,236,247,252,0,251],
[251,273,239,257,247,241,256,279,240,249,254,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 83, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,233,255,231,248,246,218,249,243,252,243,255],
[265,0,262,278,245,255,248,245,259,259,273,267,250],
[267,238,0,247,245,253,256,254,247,248,251,249,240],
[245,222,253,0,214,245,221,227,238,231,241,235,239],
[269,255,255,286,0,270,246,252,263,242,279,273,247],
[252,245,247,255,230,0,236,227,251,240,239,250,226],
[254,252,244,279,254,264,0,241,253,246,245,258,256],
[282,255,246,273,248,273,259,0,283,262,269,270,256],
[251,241,253,262,237,249,247,217,0,229,255,246,244],
[257,241,252,269,258,260,254,238,271,0,255,245,256],
[248,227,249,259,221,261,255,231,245,245,0,249,243],
[257,233,251,265,227,250,242,230,254,255,251,0,235],
[245,250,260,261,253,274,244,244,256,244,257,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 84, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,262,263,231,253,249,276,278,253,244,222,254],
[225,0,224,251,202,217,231,258,244,229,220,216,219],
[238,276,0,268,242,237,255,258,268,257,246,239,269],
[237,249,232,0,216,215,225,260,256,222,237,215,213],
[269,298,258,284,0,259,257,292,278,261,259,250,269],
[247,283,263,285,241,0,255,261,259,242,251,236,249],
[251,269,245,275,243,245,0,286,277,264,275,251,242],
[224,242,242,240,208,239,214,0,259,229,232,232,230],
[222,256,232,244,222,241,223,241,0,241,223,235,232],
[247,271,243,278,239,258,236,271,259,0,248,251,252],
[256,280,254,263,241,249,225,268,277,252,0,239,265],
[278,284,261,285,250,264,249,268,265,249,261,0,255],
[246,281,231,287,231,251,258,270,268,248,235,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 85, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,256,271,212,223,267,243,255,259,272,240,216],
[243,0,235,214,201,206,245,231,244,225,236,210,207],
[244,265,0,251,234,200,239,231,221,211,248,239,206],
[229,286,249,0,234,238,236,245,241,244,250,251,209],
[288,299,266,266,0,227,276,284,288,260,281,264,229],
[277,294,300,262,273,0,275,252,241,292,304,259,257],
[233,255,261,264,224,225,0,249,246,244,244,225,230],
[257,269,269,255,216,248,251,0,229,245,259,237,235],
[245,256,279,259,212,259,254,271,0,270,248,260,226],
[241,275,289,256,240,208,256,255,230,0,292,232,245],
[228,264,252,250,219,196,256,241,252,208,0,229,214],
[260,290,261,249,236,241,275,263,240,268,271,0,208],
[284,293,294,291,271,243,270,265,274,255,286,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 86, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,206,212,274,223,266,225,226,272,221,259,301],
[267,0,273,248,284,243,283,265,264,291,249,269,318],
[294,227,0,204,272,266,278,235,250,217,189,210,254],
[288,252,296,0,297,274,288,245,286,285,271,253,281],
[226,216,228,203,0,238,272,235,210,232,213,208,268],
[277,257,234,226,262,0,263,228,249,257,224,215,270],
[234,217,222,212,228,237,0,187,194,211,204,257,274],
[275,235,265,255,265,272,313,0,236,272,227,254,309],
[274,236,250,214,290,251,306,264,0,281,235,229,297],
[228,209,283,215,268,243,289,228,219,0,184,229,239],
[279,251,311,229,287,276,296,273,265,316,0,284,319],
[241,231,290,247,292,285,243,246,271,271,216,0,315],
[199,182,246,219,232,230,226,191,203,261,181,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 87, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,270,255,276,256,251,269,232,267,253,254,264],
[225,0,257,254,264,252,249,251,226,249,273,249,247],
[230,243,0,251,246,239,246,253,223,245,252,217,236],
[245,246,249,0,247,255,261,253,243,262,252,232,254],
[224,236,254,253,0,246,252,260,221,247,251,247,236],
[244,248,261,245,254,0,257,259,228,244,265,237,233],
[249,251,254,239,248,243,0,248,224,253,264,243,240],
[231,249,247,247,240,241,252,0,227,242,239,245,235],
[268,274,277,257,279,272,276,273,0,276,280,249,264],
[233,251,255,238,253,256,247,258,224,0,267,226,251],
[247,227,248,248,249,235,236,261,220,233,0,216,238],
[246,251,283,268,253,263,257,255,251,274,284,0,260],
[236,253,264,246,264,267,260,265,236,249,262,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 88, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,275,233,252,248,256,238,237,266,270,258,256],
[263,0,285,255,258,234,261,257,247,275,276,273,265],
[225,215,0,241,242,225,228,224,216,245,242,247,243],
[267,245,259,0,245,246,250,239,248,255,277,269,276],
[248,242,258,255,0,242,259,251,255,248,263,260,261],
[252,266,275,254,258,0,280,248,264,257,272,270,261],
[244,239,272,250,241,220,0,230,237,248,249,258,258],
[262,243,276,261,249,252,270,0,254,267,267,282,272],
[263,253,284,252,245,236,263,246,0,253,267,259,266],
[234,225,255,245,252,243,252,233,247,0,256,260,251],
[230,224,258,223,237,228,251,233,233,244,0,256,228],
[242,227,253,231,240,230,242,218,241,240,244,0,254],
[244,235,257,224,239,239,242,228,234,249,272,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 89, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,273,240,235,247,257,247,250,292,263,266,246],
[253,0,250,267,233,265,258,234,253,280,260,277,271],
[227,250,0,236,235,234,258,244,253,273,249,245,256],
[260,233,264,0,255,270,261,230,244,284,275,275,271],
[265,267,265,245,0,263,276,269,247,295,267,265,271],
[253,235,266,230,237,0,256,236,244,270,254,260,244],
[243,242,242,239,224,244,0,242,234,271,252,251,254],
[253,266,256,270,231,264,258,0,263,299,276,269,263],
[250,247,247,256,253,256,266,237,0,285,271,259,271],
[208,220,227,216,205,230,229,201,215,0,223,222,210],
[237,240,251,225,233,246,248,224,229,277,0,256,236],
[234,223,255,225,235,240,249,231,241,278,244,0,247],
[254,229,244,229,229,256,246,237,229,290,264,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 90, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,245,212,193,234,221,213,219,271,193,250,228],
[282,0,268,258,233,245,256,256,237,282,229,280,246],
[255,232,0,243,240,250,243,244,236,253,219,267,239],
[288,242,257,0,253,259,257,235,249,262,245,263,232],
[307,267,260,247,0,244,256,245,270,276,251,271,263],
[266,255,250,241,256,0,258,257,236,250,254,271,245],
[279,244,257,243,244,242,0,277,275,272,267,268,252],
[287,244,256,265,255,243,223,0,238,259,242,275,256],
[281,263,264,251,230,264,225,262,0,262,210,293,266],
[229,218,247,238,224,250,228,241,238,0,218,245,240],
[307,271,281,255,249,246,233,258,290,282,0,281,241],
[250,220,233,237,229,229,232,225,207,255,219,0,222],
[272,254,261,268,237,255,248,244,234,260,259,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 91, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,265,239,229,241,235,260,238,230,246,248,241],
[255,0,272,223,264,256,260,261,244,229,260,275,250],
[235,228,0,245,254,242,238,232,251,231,235,242,219],
[261,277,255,0,260,257,273,265,275,239,254,286,264],
[271,236,246,240,0,251,236,250,236,216,255,258,259],
[259,244,258,243,249,0,230,252,260,236,254,263,249],
[265,240,262,227,264,270,0,257,247,236,267,237,236],
[240,239,268,235,250,248,243,0,235,254,257,258,252],
[262,256,249,225,264,240,253,265,0,239,252,250,251],
[270,271,269,261,284,264,264,246,261,0,250,290,258],
[254,240,265,246,245,246,233,243,248,250,0,249,228],
[252,225,258,214,242,237,263,242,250,210,251,0,232],
[259,250,281,236,241,251,264,248,249,242,272,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 92, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,242,262,241,234,239,266,255,266,250,261,257],
[241,0,252,263,228,254,227,235,247,260,253,255,234],
[258,248,0,261,242,254,254,244,258,251,244,241,227],
[238,237,239,0,236,232,238,246,246,256,261,244,219],
[259,272,258,264,0,261,266,238,266,250,266,254,248],
[266,246,246,268,239,0,232,245,251,236,244,260,245],
[261,273,246,262,234,268,0,249,246,245,253,259,238],
[234,265,256,254,262,255,251,0,239,240,244,253,245],
[245,253,242,254,234,249,254,261,0,245,251,237,253],
[234,240,249,244,250,264,255,260,255,0,251,235,228],
[250,247,256,239,234,256,247,256,249,249,0,223,221],
[239,245,259,256,246,240,241,247,263,265,277,0,239],
[243,266,273,281,252,255,262,255,247,272,279,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 93, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,225,233,233,230,250,260,251,247,263,230,240],
[272,0,250,237,276,239,270,278,262,267,266,259,266],
[275,250,0,287,251,260,253,303,291,274,273,275,266],
[267,263,213,0,243,228,221,262,242,264,262,244,236],
[267,224,249,257,0,236,245,263,238,262,267,241,263],
[270,261,240,272,264,0,257,264,268,292,266,262,254],
[250,230,247,279,255,243,0,293,268,284,263,283,272],
[240,222,197,238,237,236,207,0,237,257,230,233,236],
[249,238,209,258,262,232,232,263,0,270,245,246,250],
[253,233,226,236,238,208,216,243,230,0,240,232,236],
[237,234,227,238,233,234,237,270,255,260,0,236,237],
[270,241,225,256,259,238,217,267,254,268,264,0,247],
[260,234,234,264,237,246,228,264,250,264,263,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 94, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,260,244,247,266,248,246,245,279,253,262,259],
[242,0,249,225,240,240,259,228,228,264,254,249,260],
[240,251,0,246,238,244,245,230,243,256,250,245,237],
[256,275,254,0,264,255,256,249,245,278,261,268,258],
[253,260,262,236,0,258,263,242,248,263,256,256,258],
[234,260,256,245,242,0,253,241,246,254,250,251,238],
[252,241,255,244,237,247,0,250,241,263,249,270,257],
[254,272,270,251,258,259,250,0,258,267,265,258,262],
[255,272,257,255,252,254,259,242,0,269,268,266,260],
[221,236,244,222,237,246,237,233,231,0,241,247,239],
[247,246,250,239,244,250,251,235,232,259,0,254,256],
[238,251,255,232,244,249,230,242,234,253,246,0,248],
[241,240,263,242,242,262,243,238,240,261,244,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 95, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,252,256,248,283,273,258,255,264,231,251,233],
[253,0,237,265,261,249,287,277,244,246,237,257,233],
[248,263,0,254,267,269,280,282,261,260,250,253,268],
[244,235,246,0,239,269,251,271,249,256,264,254,228],
[252,239,233,261,0,238,267,282,255,260,248,243,224],
[217,251,231,231,262,0,258,250,250,243,233,217,234],
[227,213,220,249,233,242,0,255,205,246,231,230,217],
[242,223,218,229,218,250,245,0,222,225,224,201,209],
[245,256,239,251,245,250,295,278,0,272,274,270,238],
[236,254,240,244,240,257,254,275,228,0,226,239,239],
[269,263,250,236,252,267,269,276,226,274,0,241,226],
[249,243,247,246,257,283,270,299,230,261,259,0,246],
[267,267,232,272,276,266,283,291,262,261,274,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 96, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,245,250,233,260,253,254,240,239,244,245,258],
[232,0,252,243,242,240,232,230,233,223,237,239,253],
[255,248,0,244,248,235,233,238,232,235,252,246,250],
[250,257,256,0,261,239,243,233,229,244,248,250,246],
[267,258,252,239,0,251,254,245,225,242,259,254,246],
[240,260,265,261,249,0,241,251,236,242,253,257,258],
[247,268,267,257,246,259,0,251,235,231,247,249,256],
[246,270,262,267,255,249,249,0,253,248,276,252,244],
[260,267,268,271,275,264,265,247,0,250,273,266,247],
[261,277,265,256,258,258,269,252,250,0,262,272,260],
[256,263,248,252,241,247,253,224,227,238,0,243,249],
[255,261,254,250,246,243,251,248,234,228,257,0,259],
[242,247,250,254,254,242,244,256,253,240,251,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 97, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,248,222,245,233,254,208,239,211,230,260,246],
[265,0,254,239,270,259,261,225,258,244,260,245,257],
[252,246,0,198,258,259,274,223,262,240,257,269,260],
[278,261,302,0,257,251,285,246,285,250,287,264,275],
[255,230,242,243,0,245,248,228,245,250,253,255,231],
[267,241,241,249,255,0,243,232,241,236,274,249,253],
[246,239,226,215,252,257,0,214,258,248,259,264,240],
[292,275,277,254,272,268,286,0,266,250,306,288,258],
[261,242,238,215,255,259,242,234,0,248,254,265,229],
[289,256,260,250,250,264,252,250,252,0,270,272,264],
[270,240,243,213,247,226,241,194,246,230,0,245,239],
[240,255,231,236,245,251,236,212,235,228,255,0,231],
[254,243,240,225,269,247,260,242,271,236,261,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 98, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,267,255,262,253,253,275,260,252,250,244,262],
[221,0,250,256,229,244,243,234,257,251,246,253,240],
[233,250,0,244,230,217,244,250,249,241,249,256,249],
[245,244,256,0,228,231,255,260,240,246,254,236,256],
[238,271,270,272,0,243,250,266,248,256,244,260,262],
[247,256,283,269,257,0,260,264,268,266,245,272,270],
[247,257,256,245,250,240,0,245,260,235,246,243,249],
[225,266,250,240,234,236,255,0,234,229,243,247,242],
[240,243,251,260,252,232,240,266,0,240,252,239,260],
[248,249,259,254,244,234,265,271,260,0,273,256,258],
[250,254,251,246,256,255,254,257,248,227,0,256,253],
[256,247,244,264,240,228,257,253,261,244,244,0,248],
[238,260,251,244,238,230,251,258,240,242,247,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 99, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,218,265,251,191,274,222,257,236,241,219,290],
[277,0,209,257,274,222,276,262,284,235,250,229,273],
[282,291,0,294,299,249,238,252,271,239,282,228,233],
[235,243,206,0,273,208,219,227,252,189,240,171,260],
[249,226,201,227,0,236,278,267,271,248,283,271,266],
[309,278,251,292,264,0,279,241,287,232,297,270,314],
[226,224,262,281,222,221,0,211,251,191,262,247,276],
[278,238,248,273,233,259,289,0,279,272,285,219,283],
[243,216,229,248,229,213,249,221,0,240,242,208,224],
[264,265,261,311,252,268,309,228,260,0,267,223,289],
[259,250,218,260,217,203,238,215,258,233,0,216,278],
[281,271,272,329,229,230,253,281,292,277,284,0,254],
[210,227,267,240,234,186,224,217,276,211,222,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 100, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,196,240,310,261,294,248,303,227,248,294,327],
[236,0,223,274,298,229,274,244,264,264,301,306,319],
[304,277,0,235,306,298,337,272,294,213,285,316,327],
[260,226,265,0,322,329,301,284,328,255,297,267,258],
[190,202,194,178,0,215,233,192,237,209,237,249,247],
[239,271,202,171,285,0,300,234,290,202,258,273,293],
[206,226,163,199,267,200,0,212,285,200,250,228,294],
[252,256,228,216,308,266,288,0,337,258,255,303,264],
[197,236,206,172,263,210,215,163,0,226,249,257,254],
[273,236,287,245,291,298,300,242,274,0,318,278,304],
[252,199,215,203,263,242,250,245,251,182,0,282,232],
[206,194,184,233,251,227,272,197,243,222,218,0,277],
[173,181,173,242,253,207,206,236,246,196,268,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 101, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,245,262,297,286,255,294,254,236,272,264,230],
[248,0,215,266,275,278,253,261,250,243,250,215,234],
[255,285,0,262,282,288,276,294,308,269,271,274,247],
[238,234,238,0,257,278,252,264,261,225,240,246,222],
[203,225,218,243,0,246,219,225,219,205,227,222,200],
[214,222,212,222,254,0,217,263,237,218,202,194,221],
[245,247,224,248,281,283,0,291,248,262,243,237,233],
[206,239,206,236,275,237,209,0,230,228,248,199,184],
[246,250,192,239,281,263,252,270,0,249,267,228,226],
[264,257,231,275,295,282,238,272,251,0,268,241,253],
[228,250,229,260,273,298,257,252,233,232,0,234,231],
[236,285,226,254,278,306,263,301,272,259,266,0,226],
[270,266,253,278,300,279,267,316,274,247,269,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 102, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,259,255,259,255,236,258,258,273,241,270,247],
[242,0,241,247,272,241,239,267,236,246,230,255,256],
[241,259,0,235,254,255,244,243,223,249,232,259,254],
[245,253,265,0,273,264,239,283,254,252,235,270,226],
[241,228,246,227,0,225,235,237,238,237,232,222,217],
[245,259,245,236,275,0,234,263,249,223,207,235,240],
[264,261,256,261,265,266,0,277,260,265,246,275,253],
[242,233,257,217,263,237,223,0,259,244,239,247,232],
[242,264,277,246,262,251,240,241,0,268,244,275,246],
[227,254,251,248,263,277,235,256,232,0,218,250,266],
[259,270,268,265,268,293,254,261,256,282,0,276,250],
[230,245,241,230,278,265,225,253,225,250,224,0,247],
[253,244,246,274,283,260,247,268,254,234,250,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 103, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,278,251,250,266,255,244,256,261,257,255,272],
[239,0,262,258,244,265,258,249,232,246,259,257,271],
[222,238,0,238,234,254,229,232,236,230,234,237,234],
[249,242,262,0,257,264,245,246,250,246,249,256,249],
[250,256,266,243,0,263,232,254,247,240,258,248,273],
[234,235,246,236,237,0,235,223,240,237,249,244,233],
[245,242,271,255,268,265,0,242,240,229,261,248,256],
[256,251,268,254,246,277,258,0,244,245,252,267,272],
[244,268,264,250,253,260,260,256,0,256,254,259,268],
[239,254,270,254,260,263,271,255,244,0,260,263,275],
[243,241,266,251,242,251,239,248,246,240,0,250,261],
[245,243,263,244,252,256,252,233,241,237,250,0,261],
[228,229,266,251,227,267,244,228,232,225,239,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 104, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,244,260,259,260,268,243,245,236,248,257,245],
[261,0,239,272,287,256,263,259,264,257,262,269,253],
[256,261,0,260,276,239,257,260,264,254,261,265,243],
[240,228,240,0,260,255,248,233,256,239,262,257,237],
[241,213,224,240,0,255,247,222,251,228,236,225,224],
[240,244,261,245,245,0,244,238,225,238,253,242,225],
[232,237,243,252,253,256,0,238,252,243,237,252,231],
[257,241,240,267,278,262,262,0,277,239,259,257,247],
[255,236,236,244,249,275,248,223,0,252,258,257,242],
[264,243,246,261,272,262,257,261,248,0,254,263,238],
[252,238,239,238,264,247,263,241,242,246,0,256,242],
[243,231,235,243,275,258,248,243,243,237,244,0,238],
[255,247,257,263,276,275,269,253,258,262,258,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 105, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,266,255,234,252,249,250,252,264,261,255,255],
[250,0,263,245,254,264,243,246,242,250,255,254,257],
[234,237,0,244,228,255,246,234,246,227,247,248,243],
[245,255,256,0,247,259,252,258,245,251,250,245,256],
[266,246,272,253,0,272,240,250,270,241,272,265,265],
[248,236,245,241,228,0,247,232,244,241,238,255,248],
[251,257,254,248,260,253,0,265,260,254,263,253,256],
[250,254,266,242,250,268,235,0,252,252,248,238,259],
[248,258,254,255,230,256,240,248,0,239,252,255,268],
[236,250,273,249,259,259,246,248,261,0,274,259,275],
[239,245,253,250,228,262,237,252,248,226,0,241,254],
[245,246,252,255,235,245,247,262,245,241,259,0,243],
[245,243,257,244,235,252,244,241,232,225,246,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 106, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,239,250,251,240,236,239,251,233,251,249,254],
[271,0,271,261,270,263,249,252,271,252,257,271,262],
[261,229,0,253,268,247,256,239,253,233,254,264,249],
[250,239,247,0,260,256,237,240,254,247,259,257,238],
[249,230,232,240,0,243,239,234,248,231,255,267,256],
[260,237,253,244,257,0,245,235,246,235,258,242,244],
[264,251,244,263,261,255,0,239,259,243,252,264,258],
[261,248,261,260,266,265,261,0,247,247,266,264,269],
[249,229,247,246,252,254,241,253,0,242,266,249,248],
[267,248,267,253,269,265,257,253,258,0,273,266,276],
[249,243,246,241,245,242,248,234,234,227,0,252,263],
[251,229,236,243,233,258,236,236,251,234,248,0,254],
[246,238,251,262,244,256,242,231,252,224,237,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 107, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,250,230,235,243,269,224,281,214,263,260,242],
[234,0,232,236,236,218,239,215,257,224,238,230,247],
[250,268,0,242,255,247,269,269,286,259,258,238,257],
[270,264,258,0,254,261,272,259,285,248,262,268,254],
[265,264,245,246,0,248,282,249,282,246,247,265,267],
[257,282,253,239,252,0,291,236,292,252,264,265,253],
[231,261,231,228,218,209,0,240,282,229,242,232,246],
[276,285,231,241,251,264,260,0,273,240,260,253,261],
[219,243,214,215,218,208,218,227,0,224,220,221,202],
[286,276,241,252,254,248,271,260,276,0,267,233,283],
[237,262,242,238,253,236,258,240,280,233,0,229,250],
[240,270,262,232,235,235,268,247,279,267,271,0,252],
[258,253,243,246,233,247,254,239,298,217,250,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 108, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,216,227,210,210,218,244,212,207,228,184,229],
[254,0,245,261,226,228,250,274,220,251,247,221,246],
[284,255,0,254,245,225,253,248,242,248,278,234,239],
[273,239,246,0,232,245,227,254,226,252,261,232,245],
[290,274,255,268,0,252,246,268,240,256,281,244,279],
[290,272,275,255,248,0,266,238,224,254,252,223,250],
[282,250,247,273,254,234,0,296,240,257,253,234,234],
[256,226,252,246,232,262,204,0,228,216,268,209,232],
[288,280,258,274,260,276,260,272,0,273,277,239,266],
[293,249,252,248,244,246,243,284,227,0,265,255,269],
[272,253,222,239,219,248,247,232,223,235,0,244,229],
[316,279,266,268,256,277,266,291,261,245,256,0,238],
[271,254,261,255,221,250,266,268,234,231,271,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 109, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,244,270,251,257,278,233,235,225,243,248,257],
[271,0,249,281,260,287,299,261,271,271,247,255,271],
[256,251,0,255,251,274,289,230,254,257,236,245,257],
[230,219,245,0,223,237,244,218,214,221,206,214,244],
[249,240,249,277,0,266,278,238,257,252,261,264,246],
[243,213,226,263,234,0,259,227,229,234,220,227,245],
[222,201,211,256,222,241,0,213,228,202,216,200,213],
[267,239,270,282,262,273,287,0,259,261,262,243,261],
[265,229,246,286,243,271,272,241,0,230,240,240,252],
[275,229,243,279,248,266,298,239,270,0,237,242,270],
[257,253,264,294,239,280,284,238,260,263,0,271,272],
[252,245,255,286,236,273,300,257,260,258,229,0,257],
[243,229,243,256,254,255,287,239,248,230,228,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 110, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,235,248,252,248,244,246,257,265,250,248,232],
[241,0,219,212,250,234,229,225,244,256,235,255,238],
[265,281,0,243,256,250,255,251,263,265,251,266,248],
[252,288,257,0,272,262,257,228,262,260,234,254,247],
[248,250,244,228,0,230,236,239,255,257,223,259,246],
[252,266,250,238,270,0,251,257,249,256,251,256,256],
[256,271,245,243,264,249,0,246,277,265,250,284,241],
[254,275,249,272,261,243,254,0,268,249,248,264,251],
[243,256,237,238,245,251,223,232,0,257,227,264,241],
[235,244,235,240,243,244,235,251,243,0,245,245,241],
[250,265,249,266,277,249,250,252,273,255,0,261,255],
[252,245,234,246,241,244,216,236,236,255,239,0,250],
[268,262,252,253,254,244,259,249,259,259,245,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 111, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,251,252,253,248,252,238,246,247,241,246,245],
[258,0,270,271,259,247,246,254,249,248,262,266,253],
[249,230,0,245,238,238,241,238,237,240,239,248,230],
[248,229,255,0,246,244,229,240,248,241,250,260,248],
[247,241,262,254,0,248,240,243,247,244,244,258,241],
[252,253,262,256,252,0,253,254,246,242,253,258,248],
[248,254,259,271,260,247,0,242,259,255,240,251,241],
[262,246,262,260,257,246,258,0,253,249,252,260,243],
[254,251,263,252,253,254,241,247,0,246,245,267,263],
[253,252,260,259,256,258,245,251,254,0,252,265,253],
[259,238,261,250,256,247,260,248,255,248,0,252,254],
[254,234,252,240,242,242,249,240,233,235,248,0,249],
[255,247,270,252,259,252,259,257,237,247,246,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 112, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,256,281,277,252,237,252,230,268,238,243,223],
[225,0,228,233,252,211,212,247,225,252,210,224,194],
[244,272,0,251,272,247,224,232,227,272,233,245,246],
[219,267,249,0,254,241,190,241,223,247,246,223,217],
[223,248,228,246,0,209,205,230,190,244,224,229,181],
[248,289,253,259,291,0,223,261,241,277,240,248,232],
[263,288,276,310,295,277,0,269,268,289,267,290,239],
[248,253,268,259,270,239,231,0,242,263,248,246,255],
[270,275,273,277,310,259,232,258,0,260,277,267,245],
[232,248,228,253,256,223,211,237,240,0,230,228,228],
[262,290,267,254,276,260,233,252,223,270,0,245,225],
[257,276,255,277,271,252,210,254,233,272,255,0,239],
[277,306,254,283,319,268,261,245,255,272,275,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 113, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,265,256,252,243,256,257,237,286,257,251,253],
[246,0,272,277,257,240,237,244,250,281,248,249,251],
[235,228,0,258,260,234,236,231,229,269,241,241,232],
[244,223,242,0,243,226,242,225,226,257,248,238,232],
[248,243,240,257,0,236,229,232,236,275,251,266,246],
[257,260,266,274,264,0,262,245,261,280,248,261,273],
[244,263,264,258,271,238,0,243,271,299,260,274,259],
[243,256,269,275,268,255,257,0,278,288,280,267,252],
[263,250,271,274,264,239,229,222,0,270,260,247,266],
[214,219,231,243,225,220,201,212,230,0,239,231,214],
[243,252,259,252,249,252,240,220,240,261,0,253,256],
[249,251,259,262,234,239,226,233,253,269,247,0,239],
[247,249,268,268,254,227,241,248,234,286,244,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 114, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,247,255,237,237,231,255,253,231,240,223,252],
[247,0,272,263,271,259,255,262,255,249,251,256,266],
[253,228,0,249,258,246,228,252,249,226,237,246,251],
[245,237,251,0,234,230,237,243,244,234,242,240,239],
[263,229,242,266,0,242,256,246,258,244,232,248,260],
[263,241,254,270,258,0,251,265,254,243,247,242,266],
[269,245,272,263,244,249,0,255,254,244,245,254,261],
[245,238,248,257,254,235,245,0,257,236,245,247,248],
[247,245,251,256,242,246,246,243,0,218,237,256,265],
[269,251,274,266,256,257,256,264,282,0,243,264,269],
[260,249,263,258,268,253,255,255,263,257,0,266,270],
[277,244,254,260,252,258,246,253,244,236,234,0,273],
[248,234,249,261,240,234,239,252,235,231,230,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 115, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,275,297,287,271,259,279,263,250,300,271,274],
[236,0,235,248,249,233,241,239,234,227,249,234,244],
[225,265,0,264,244,250,256,266,259,234,257,241,252],
[203,252,236,0,235,237,247,244,246,253,253,242,259],
[213,251,256,265,0,270,235,261,236,206,260,238,243],
[229,267,250,263,230,0,242,226,244,252,270,218,249],
[241,259,244,253,265,258,0,268,259,237,267,245,225],
[221,261,234,256,239,274,232,0,238,235,251,240,225],
[237,266,241,254,264,256,241,262,0,241,277,234,219],
[250,273,266,247,294,248,263,265,259,0,287,258,263],
[200,251,243,247,240,230,233,249,223,213,0,219,223],
[229,266,259,258,262,282,255,260,266,242,281,0,259],
[226,256,248,241,257,251,275,275,281,237,277,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 116, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,244,253,283,270,236,253,269,248,251,236,261],
[259,0,232,252,264,243,231,249,268,255,215,240,275],
[256,268,0,259,253,261,241,259,255,266,251,251,269],
[247,248,241,0,265,259,237,242,283,239,254,247,247],
[217,236,247,235,0,229,226,240,256,250,231,222,258],
[230,257,239,241,271,0,226,255,278,234,241,249,249],
[264,269,259,263,274,274,0,274,283,266,236,251,277],
[247,251,241,258,260,245,226,0,281,241,229,234,247],
[231,232,245,217,244,222,217,219,0,222,224,225,232],
[252,245,234,261,250,266,234,259,278,0,243,252,260],
[249,285,249,246,269,259,264,271,276,257,0,243,268],
[264,260,249,253,278,251,249,266,275,248,257,0,255],
[239,225,231,253,242,251,223,253,268,240,232,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 117, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,291,238,274,261,250,253,249,261,269,254,260],
[264,0,233,247,254,248,236,225,241,243,247,236,249],
[209,267,0,253,270,236,255,240,238,249,292,237,240],
[262,253,247,0,256,260,265,242,266,249,264,252,238],
[226,246,230,244,0,240,256,260,237,230,248,241,220],
[239,252,264,240,260,0,260,243,228,244,260,233,230],
[250,264,245,235,244,240,0,244,265,251,242,239,241],
[247,275,260,258,240,257,256,0,258,239,263,250,256],
[251,259,262,234,263,272,235,242,0,251,264,254,259],
[239,257,251,251,270,256,249,261,249,0,256,249,227],
[231,253,208,236,252,240,258,237,236,244,0,241,234],
[246,264,263,248,259,267,261,250,246,251,259,0,261],
[240,251,260,262,280,270,259,244,241,273,266,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 118, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,197,171,253,247,235,238,284,233,226,186,232],
[259,0,238,201,261,267,258,257,297,245,246,200,231],
[303,262,0,252,307,270,282,273,276,257,301,228,261],
[329,299,248,0,271,286,318,266,276,281,289,273,258],
[247,239,193,229,0,243,250,242,249,208,265,142,233],
[253,233,230,214,257,0,251,249,253,228,230,168,227],
[265,242,218,182,250,249,0,216,246,241,241,200,268],
[262,243,227,234,258,251,284,0,273,271,273,236,256],
[216,203,224,224,251,247,254,227,0,264,259,229,207],
[267,255,243,219,292,272,259,229,236,0,236,195,238],
[274,254,199,211,235,270,259,227,241,264,0,228,226],
[314,300,272,227,358,332,300,264,271,305,272,0,287],
[268,269,239,242,267,273,232,244,293,262,274,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 119, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,195,190,214,162,169,174,184,195,217,215,257],
[269,0,201,237,295,233,235,275,246,283,270,266,292],
[305,299,0,264,289,248,247,247,294,285,274,278,287],
[310,263,236,0,252,241,313,235,274,273,261,280,311],
[286,205,211,248,0,211,271,236,261,275,255,290,294],
[338,267,252,259,289,0,247,267,234,276,258,293,308],
[331,265,253,187,229,253,0,259,242,318,274,333,262],
[326,225,253,265,264,233,241,0,239,268,252,281,314],
[316,254,206,226,239,266,258,261,0,257,257,271,311],
[305,217,215,227,225,224,182,232,243,0,212,261,245],
[283,230,226,239,245,242,226,248,243,288,0,296,279],
[285,234,222,220,210,207,167,219,229,239,204,0,266],
[243,208,213,189,206,192,238,186,189,255,221,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 120, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,230,197,219,216,194,208,184,232,173,238,244],
[203,0,253,168,207,161,174,138,181,153,147,225,204],
[270,247,0,199,205,175,122,154,203,149,216,201,225],
[303,332,301,0,247,263,181,305,282,264,217,243,292],
[281,293,295,253,0,199,163,227,226,210,236,264,264],
[284,339,325,237,301,0,209,307,261,239,232,255,268],
[306,326,378,319,337,291,0,284,332,187,305,350,350],
[292,362,346,195,273,193,216,0,286,272,269,283,330],
[316,319,297,218,274,239,168,214,0,194,229,251,258],
[268,347,351,236,290,261,313,228,306,0,199,322,364],
[327,353,284,283,264,268,195,231,271,301,0,281,293],
[262,275,299,257,236,245,150,217,249,178,219,0,197],
[256,296,275,208,236,232,150,170,242,136,207,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 121, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,267,264,283,257,253,259,293,269,253,270,249],
[230,0,266,238,263,250,247,255,263,237,259,270,255],
[233,234,0,224,271,252,211,236,246,239,235,269,240],
[236,262,276,0,276,267,247,259,279,278,268,286,261],
[217,237,229,224,0,239,218,236,244,221,239,254,241],
[243,250,248,233,261,0,250,277,281,244,246,280,238],
[247,253,289,253,282,250,0,267,268,242,235,273,270],
[241,245,264,241,264,223,233,0,248,245,237,253,272],
[207,237,254,221,256,219,232,252,0,255,235,268,250],
[231,263,261,222,279,256,258,255,245,0,228,242,264],
[247,241,265,232,261,254,265,263,265,272,0,280,237],
[230,230,231,214,246,220,227,247,232,258,220,0,250],
[251,245,260,239,259,262,230,228,250,236,263,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 122, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,244,224,253,234,238,261,243,221,226,247,239],
[284,0,276,252,267,292,270,261,271,249,261,271,271],
[256,224,0,233,267,274,247,235,241,233,240,270,246],
[276,248,267,0,244,266,270,283,271,250,246,269,272],
[247,233,233,256,0,250,257,271,270,229,242,264,265],
[266,208,226,234,250,0,218,267,270,229,260,248,248],
[262,230,253,230,243,282,0,261,258,240,232,263,250],
[239,239,265,217,229,233,239,0,235,237,235,254,228],
[257,229,259,229,230,230,242,265,0,229,236,243,251],
[279,251,267,250,271,271,260,263,271,0,250,290,250],
[274,239,260,254,258,240,268,265,264,250,0,275,234],
[253,229,230,231,236,252,237,246,257,210,225,0,240],
[261,229,254,228,235,252,250,272,249,250,266,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 123, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,298,268,270,266,246,261,257,287,272,281,274],
[254,0,273,250,253,278,242,266,262,277,273,265,260],
[202,227,0,228,219,219,218,232,231,251,253,268,246],
[232,250,272,0,245,245,256,239,233,269,256,282,241],
[230,247,281,255,0,241,227,240,258,253,252,275,243],
[234,222,281,255,259,0,238,264,249,284,252,265,245],
[254,258,282,244,273,262,0,271,276,267,271,279,273],
[239,234,268,261,260,236,229,0,251,273,273,267,254],
[243,238,269,267,242,251,224,249,0,269,257,267,261],
[213,223,249,231,247,216,233,227,231,0,258,266,234],
[228,227,247,244,248,248,229,227,243,242,0,247,238],
[219,235,232,218,225,235,221,233,233,234,253,0,249],
[226,240,254,259,257,255,227,246,239,266,262,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 124, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,286,278,287,267,261,250,251,289,290,271,265],
[252,0,275,226,267,220,255,245,263,258,283,232,267],
[214,225,0,234,211,242,256,233,236,228,297,233,254],
[222,274,266,0,241,274,289,284,272,283,327,301,288],
[213,233,289,259,0,228,272,239,248,241,277,249,266],
[233,280,258,226,272,0,265,258,244,261,311,269,262],
[239,245,244,211,228,235,0,244,223,248,292,227,264],
[250,255,267,216,261,242,256,0,243,276,277,288,266],
[249,237,264,228,252,256,277,257,0,272,289,257,251],
[211,242,272,217,259,239,252,224,228,0,270,205,250],
[210,217,203,173,223,189,208,223,211,230,0,238,233],
[229,268,267,199,251,231,273,212,243,295,262,0,231],
[235,233,246,212,234,238,236,234,249,250,267,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 125, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,203,244,196,180,213,192,272,238,248,271,205],
[308,0,212,264,237,238,244,258,241,278,320,240,233],
[297,288,0,310,248,248,246,289,302,261,309,272,264],
[256,236,190,0,156,221,222,230,239,200,280,230,231],
[304,263,252,344,0,237,273,286,267,236,309,268,280],
[320,262,252,279,263,0,274,267,293,229,309,281,256],
[287,256,254,278,227,226,0,266,245,234,328,283,259],
[308,242,211,270,214,233,234,0,243,283,325,263,250],
[228,259,198,261,233,207,255,257,0,210,257,254,269],
[262,222,239,300,264,271,266,217,290,0,256,243,270],
[252,180,191,220,191,191,172,175,243,244,0,224,209],
[229,260,228,270,232,219,217,237,246,257,276,0,243],
[295,267,236,269,220,244,241,250,231,230,291,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 126, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,262,246,263,262,268,250,255,249,281,242,251],
[239,0,273,259,257,263,263,254,247,252,269,252,242],
[238,227,0,241,245,244,236,243,241,233,238,221,224],
[254,241,259,0,270,257,260,247,262,235,256,253,241],
[237,243,255,230,0,237,248,233,237,237,238,228,230],
[238,237,256,243,263,0,268,245,251,254,251,251,256],
[232,237,264,240,252,232,0,253,257,229,260,240,243],
[250,246,257,253,267,255,247,0,241,246,259,247,228],
[245,253,259,238,263,249,243,259,0,240,264,253,242],
[251,248,267,265,263,246,271,254,260,0,271,252,257],
[219,231,262,244,262,249,240,241,236,229,0,231,242],
[258,248,279,247,272,249,260,253,247,248,269,0,240],
[249,258,276,259,270,244,257,272,258,243,258,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 127, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,254,242,249,245,243,245,269,263,240,274,280],
[240,0,224,259,250,266,247,229,260,258,236,267,260],
[246,276,0,265,249,262,260,260,282,277,250,260,268],
[258,241,235,0,246,256,253,217,262,269,236,260,249],
[251,250,251,254,0,259,272,249,263,259,237,258,264],
[255,234,238,244,241,0,253,244,267,256,238,266,271],
[257,253,240,247,228,247,0,231,253,265,240,256,244],
[255,271,240,283,251,256,269,0,273,267,249,270,277],
[231,240,218,238,237,233,247,227,0,232,233,245,235],
[237,242,223,231,241,244,235,233,268,0,234,246,237],
[260,264,250,264,263,262,260,251,267,266,0,264,269],
[226,233,240,240,242,234,244,230,255,254,236,0,236],
[220,240,232,251,236,229,256,223,265,263,231,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 128, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,262,266,244,263,256,272,259,276,264,270,266],
[250,0,249,267,254,262,229,260,248,269,265,266,257],
[238,251,0,265,257,269,234,244,245,232,265,270,241],
[234,233,235,0,234,242,237,251,227,226,256,263,241],
[256,246,243,266,0,247,242,246,236,256,234,265,222],
[237,238,231,258,253,0,225,247,234,242,252,239,236],
[244,271,266,263,258,275,0,276,265,278,277,294,267],
[228,240,256,249,254,253,224,0,246,240,253,250,236],
[241,252,255,273,264,266,235,254,0,271,265,265,245],
[224,231,268,274,244,258,222,260,229,0,261,263,238],
[236,235,235,244,266,248,223,247,235,239,0,250,250],
[230,234,230,237,235,261,206,250,235,237,250,0,242],
[234,243,259,259,278,264,233,264,255,262,250,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 129, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,238,249,250,253,261,247,256,266,238,255,242],
[235,0,245,225,240,232,252,224,253,253,222,246,257],
[262,255,0,250,257,249,255,250,266,254,239,254,253],
[251,275,250,0,251,273,256,256,256,246,251,253,244],
[250,260,243,249,0,252,264,254,241,264,231,263,250],
[247,268,251,227,248,0,243,247,239,261,238,251,262],
[239,248,245,244,236,257,0,234,240,253,225,242,236],
[253,276,250,244,246,253,266,0,246,260,248,249,254],
[244,247,234,244,259,261,260,254,0,254,243,248,241],
[234,247,246,254,236,239,247,240,246,0,243,236,239],
[262,278,261,249,269,262,275,252,257,257,0,257,261],
[245,254,246,247,237,249,258,251,252,264,243,0,249],
[258,243,247,256,250,238,264,246,259,261,239,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 130, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,237,230,248,250,222,251,244,228,257,242,244],
[236,0,263,226,261,265,232,248,231,236,267,248,258],
[263,237,0,222,266,235,244,268,261,253,256,252,255],
[270,274,278,0,289,279,219,243,287,254,275,254,260],
[252,239,234,211,0,225,218,219,237,238,246,257,243],
[250,235,265,221,275,0,242,237,249,250,251,259,268],
[278,268,256,281,282,258,0,243,279,276,274,257,274],
[249,252,232,257,281,263,257,0,279,242,271,263,259],
[256,269,239,213,263,251,221,221,0,238,255,239,249],
[272,264,247,246,262,250,224,258,262,0,271,263,260],
[243,233,244,225,254,249,226,229,245,229,0,238,252],
[258,252,248,246,243,241,243,237,261,237,262,0,247],
[256,242,245,240,257,232,226,241,251,240,248,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 131, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,241,250,251,249,239,264,258,262,269,239,254],
[250,0,248,259,238,255,240,243,251,235,270,238,247],
[259,252,0,246,245,248,259,258,256,252,260,246,246],
[250,241,254,0,231,239,238,244,245,247,266,240,234],
[249,262,255,269,0,252,269,267,266,262,268,247,256],
[251,245,252,261,248,0,233,244,242,236,256,238,256],
[261,260,241,262,231,267,0,254,251,245,253,245,247],
[236,257,242,256,233,256,246,0,236,241,247,228,253],
[242,249,244,255,234,258,249,264,0,250,261,253,261],
[238,265,248,253,238,264,255,259,250,0,258,239,255],
[231,230,240,234,232,244,247,253,239,242,0,226,246],
[261,262,254,260,253,262,255,272,247,261,274,0,270],
[246,253,254,266,244,244,253,247,239,245,254,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 132, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,246,236,234,246,242,228,241,238,242,251,253],
[262,0,263,252,244,262,262,249,244,254,272,254,266],
[254,237,0,242,231,252,253,240,244,245,257,254,250],
[264,248,258,0,246,261,251,253,246,248,260,261,263],
[266,256,269,254,0,273,275,260,250,271,259,277,274],
[254,238,248,239,227,0,236,249,240,238,247,258,239],
[258,238,247,249,225,264,0,245,240,244,255,256,245],
[272,251,260,247,240,251,255,0,244,265,250,257,264],
[259,256,256,254,250,260,260,256,0,253,255,252,261],
[262,246,255,252,229,262,256,235,247,0,261,253,247],
[258,228,243,240,241,253,245,250,245,239,0,256,256],
[249,246,246,239,223,242,244,243,248,247,244,0,248],
[247,234,250,237,226,261,255,236,239,253,244,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 133, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,289,253,240,288,278,232,280,238,245,283,234],
[259,0,280,261,272,274,261,237,264,236,246,264,257],
[211,220,0,233,224,255,265,230,237,224,215,249,194],
[247,239,267,0,260,274,269,214,243,235,215,275,216],
[260,228,276,240,0,293,265,248,254,253,236,269,212],
[212,226,245,226,207,0,236,209,220,222,218,226,177],
[222,239,235,231,235,264,0,210,222,249,185,255,200],
[268,263,270,286,252,291,290,0,268,269,251,279,238],
[220,236,263,257,246,280,278,232,0,213,255,259,235],
[262,264,276,265,247,278,251,231,287,0,247,249,240],
[255,254,285,285,264,282,315,249,245,253,0,282,230],
[217,236,251,225,231,274,245,221,241,251,218,0,231],
[266,243,306,284,288,323,300,262,265,260,270,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 134, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,249,231,238,240,241,245,221,250,233,230,242],
[261,0,245,228,266,255,257,242,247,272,237,239,239],
[251,255,0,229,247,249,244,251,249,257,228,232,226],
[269,272,271,0,261,263,265,266,255,276,243,247,270],
[262,234,253,239,0,239,261,258,244,252,242,233,244],
[260,245,251,237,261,0,263,258,232,262,234,245,248],
[259,243,256,235,239,237,0,255,242,262,239,256,232],
[255,258,249,234,242,242,245,0,227,270,229,237,239],
[279,253,251,245,256,268,258,273,0,267,254,263,263],
[250,228,243,224,248,238,238,230,233,0,217,233,238],
[267,263,272,257,258,266,261,271,246,283,0,261,256],
[270,261,268,253,267,255,244,263,237,267,239,0,261],
[258,261,274,230,256,252,268,261,237,262,244,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 135, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,194,272,249,210,251,165,337,294,263,244,239],
[268,0,170,209,240,206,153,251,285,285,224,197,285],
[306,330,0,265,188,257,285,306,344,222,363,378,352],
[228,291,235,0,305,281,228,228,317,178,178,262,295],
[251,260,312,195,0,309,230,356,394,279,316,270,457],
[290,294,243,219,191,0,227,325,437,306,305,277,325],
[249,347,215,272,270,273,0,263,434,277,253,384,406],
[335,249,194,272,144,175,237,0,329,263,305,286,241],
[163,215,156,183,106,63,66,171,0,168,97,105,250],
[206,215,278,322,221,194,223,237,332,0,174,273,350],
[237,276,137,322,184,195,247,195,403,326,0,281,324],
[256,303,122,238,230,223,116,214,395,227,219,0,300],
[261,215,148,205,43,175,94,259,250,150,176,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 136, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,245,216,248,230,254,237,220,275,273,231,251],
[236,0,222,219,232,227,252,249,243,278,259,247,219],
[255,278,0,244,247,254,272,271,250,285,259,305,227],
[284,281,256,0,241,231,265,251,253,274,250,248,214],
[252,268,253,259,0,277,265,254,222,261,249,257,240],
[270,273,246,269,223,0,261,242,221,299,273,273,237],
[246,248,228,235,235,239,0,232,215,284,252,241,207],
[263,251,229,249,246,258,268,0,261,294,278,259,237],
[280,257,250,247,278,279,285,239,0,282,289,260,250],
[225,222,215,226,239,201,216,206,218,0,251,222,208],
[227,241,241,250,251,227,248,222,211,249,0,206,212],
[269,253,195,252,243,227,259,241,240,278,294,0,231],
[249,281,273,286,260,263,293,263,250,292,288,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 137, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,260,259,259,237,259,247,233,248,245,241,276],
[266,0,272,268,263,246,273,265,252,252,276,256,266],
[240,228,0,250,230,232,266,253,228,234,242,241,255],
[241,232,250,0,255,238,262,253,218,236,251,225,245],
[241,237,270,245,0,252,274,259,234,246,248,238,248],
[263,254,268,262,248,0,265,258,234,249,253,232,260],
[241,227,234,238,226,235,0,233,208,240,230,224,242],
[253,235,247,247,241,242,267,0,231,239,235,228,241],
[267,248,272,282,266,266,292,269,0,255,261,257,278],
[252,248,266,264,254,251,260,261,245,0,255,229,262],
[255,224,258,249,252,247,270,265,239,245,0,235,247],
[259,244,259,275,262,268,276,272,243,271,265,0,265],
[224,234,245,255,252,240,258,259,222,238,253,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 138, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,260,231,230,231,250,233,218,249,228,229,261],
[271,0,287,254,243,243,260,273,267,251,276,254,280],
[240,213,0,226,216,224,195,213,240,213,198,233,225],
[269,246,274,0,269,226,246,258,235,235,242,253,237],
[270,257,284,231,0,223,257,264,247,231,242,236,240],
[269,257,276,274,277,0,261,261,250,236,258,262,280],
[250,240,305,254,243,239,0,250,249,260,232,270,257],
[267,227,287,242,236,239,250,0,241,240,230,242,275],
[282,233,260,265,253,250,251,259,0,248,256,273,256],
[251,249,287,265,269,264,240,260,252,0,259,271,240],
[272,224,302,258,258,242,268,270,244,241,0,272,243],
[271,246,267,247,264,238,230,258,227,229,228,0,247],
[239,220,275,263,260,220,243,225,244,260,257,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 139, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,283,234,185,259,229,237,235,241,229,258,282],
[286,0,288,264,243,236,242,267,256,228,254,202,310],
[217,212,0,218,205,226,192,184,213,223,212,200,217],
[266,236,282,0,224,241,241,238,248,209,258,264,259],
[315,257,295,276,0,281,264,315,262,250,302,275,297],
[241,264,274,259,219,0,232,254,234,249,272,229,297],
[271,258,308,259,236,268,0,246,274,251,254,278,321],
[263,233,316,262,185,246,254,0,228,223,244,244,287],
[265,244,287,252,238,266,226,272,0,243,262,245,284],
[259,272,277,291,250,251,249,277,257,0,286,276,291],
[271,246,288,242,198,228,246,256,238,214,0,234,294],
[242,298,300,236,225,271,222,256,255,224,266,0,272],
[218,190,283,241,203,203,179,213,216,209,206,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 140, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,227,258,240,232,268,248,240,262,243,220,229],
[210,0,235,231,217,189,276,214,235,246,249,234,224],
[273,265,0,237,255,248,255,240,249,263,280,226,278],
[242,269,263,0,252,235,284,263,287,213,282,211,270],
[260,283,245,248,0,267,237,245,258,250,268,234,251],
[268,311,252,265,233,0,263,294,271,275,274,254,252],
[232,224,245,216,263,237,0,275,233,243,259,216,277],
[252,286,260,237,255,206,225,0,213,216,270,232,242],
[260,265,251,213,242,229,267,287,0,276,256,225,209],
[238,254,237,287,250,225,257,284,224,0,241,249,219],
[257,251,220,218,232,226,241,230,244,259,0,227,254],
[280,266,274,289,266,246,284,268,275,251,273,0,264],
[271,276,222,230,249,248,223,258,291,281,246,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 141, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,270,255,259,262,255,268,263,245,258,269,275],
[243,0,258,254,242,264,249,247,278,257,247,253,250],
[230,242,0,255,237,258,250,250,266,256,255,241,255],
[245,246,245,0,239,233,268,245,240,232,246,252,250],
[241,258,263,261,0,234,283,252,259,239,268,252,258],
[238,236,242,267,266,0,276,255,274,253,250,260,282],
[245,251,250,232,217,224,0,240,269,226,255,241,240],
[232,253,250,255,248,245,260,0,258,235,248,231,247],
[237,222,234,260,241,226,231,242,0,224,221,240,236],
[255,243,244,268,261,247,274,265,276,0,262,254,282],
[242,253,245,254,232,250,245,252,279,238,0,251,266],
[231,247,259,248,248,240,259,269,260,246,249,0,267],
[225,250,245,250,242,218,260,253,264,218,234,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 142, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,254,264,248,244,277,269,256,255,282,252,270],
[242,0,250,254,249,230,255,245,249,269,253,252,271],
[246,250,0,252,260,252,248,257,262,269,254,252,257],
[236,246,248,0,243,245,243,239,233,263,245,242,245],
[252,251,240,257,0,242,247,242,250,279,260,238,255],
[256,270,248,255,258,0,266,252,240,267,256,254,267],
[223,245,252,257,253,234,0,242,249,246,237,261,253],
[231,255,243,261,258,248,258,0,246,255,248,249,262],
[244,251,238,267,250,260,251,254,0,271,277,247,268],
[245,231,231,237,221,233,254,245,229,0,240,223,255],
[218,247,246,255,240,244,263,252,223,260,0,239,259],
[248,248,248,258,262,246,239,251,253,277,261,0,261],
[230,229,243,255,245,233,247,238,232,245,241,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 143, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,238,234,244,247,243,246,247,250,240,271,251],
[259,0,251,247,237,254,255,267,250,255,250,270,251],
[262,249,0,245,253,256,251,271,259,241,245,268,265],
[266,253,255,0,237,254,266,273,277,255,273,268,257],
[256,263,247,263,0,261,270,271,252,253,279,278,258],
[253,246,244,246,239,0,268,231,250,243,247,254,253],
[257,245,249,234,230,232,0,247,242,230,260,263,254],
[254,233,229,227,229,269,253,0,250,235,249,271,254],
[253,250,241,223,248,250,258,250,0,229,263,269,264],
[250,245,259,245,247,257,270,265,271,0,252,270,244],
[260,250,255,227,221,253,240,251,237,248,0,260,236],
[229,230,232,232,222,246,237,229,231,230,240,0,250],
[249,249,235,243,242,247,246,246,236,256,264,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 144, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,268,256,272,256,239,241,267,267,261,273,254],
[245,0,246,235,252,239,246,234,255,229,235,236,251],
[232,254,0,249,241,232,230,232,261,246,239,244,209],
[244,265,251,0,251,243,249,253,275,289,241,258,253],
[228,248,259,249,0,253,245,228,248,253,260,268,238],
[244,261,268,257,247,0,246,240,266,272,250,259,244],
[261,254,270,251,255,254,0,259,272,274,248,267,244],
[259,266,268,247,272,260,241,0,279,263,271,263,251],
[233,245,239,225,252,234,228,221,0,244,217,233,250],
[233,271,254,211,247,228,226,237,256,0,233,259,236],
[239,265,261,259,240,250,252,229,283,267,0,258,244],
[227,264,256,242,232,241,233,237,267,241,242,0,232],
[246,249,291,247,262,256,256,249,250,264,256,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 145, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,240,263,242,250,260,256,247,252,243,253,249],
[253,0,242,240,242,241,252,244,244,239,244,240,242],
[260,258,0,249,250,256,252,242,253,230,240,243,243],
[237,260,251,0,257,248,254,251,237,258,249,246,249],
[258,258,250,243,0,237,247,256,235,240,247,242,242],
[250,259,244,252,263,0,258,278,262,258,250,254,240],
[240,248,248,246,253,242,0,247,243,242,238,250,253],
[244,256,258,249,244,222,253,0,252,244,241,257,236],
[253,256,247,263,265,238,257,248,0,247,247,252,260],
[248,261,270,242,260,242,258,256,253,0,242,244,245],
[257,256,260,251,253,250,262,259,253,258,0,258,244],
[247,260,257,254,258,246,250,243,248,256,242,0,273],
[251,258,257,251,258,260,247,264,240,255,256,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 146, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,228,240,226,251,250,230,245,249,254,215,232],
[239,0,232,240,250,221,239,243,246,231,255,214,213],
[272,268,0,239,241,230,265,239,247,240,275,231,232],
[260,260,261,0,245,219,258,228,245,239,263,232,245],
[274,250,259,255,0,241,249,235,239,238,252,246,264],
[249,279,270,281,259,0,275,258,249,282,269,264,263],
[250,261,235,242,251,225,0,220,228,248,250,247,267],
[270,257,261,272,265,242,280,0,267,260,266,247,274],
[255,254,253,255,261,251,272,233,0,254,273,233,247],
[251,269,260,261,262,218,252,240,246,0,273,256,261],
[246,245,225,237,248,231,250,234,227,227,0,236,236],
[285,286,269,268,254,236,253,253,267,244,264,0,250],
[268,287,268,255,236,237,233,226,253,239,264,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 147, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,248,257,267,258,252,274,264,300,253,250,258],
[240,0,239,247,235,251,265,237,244,302,209,212,245],
[252,261,0,231,229,261,248,249,222,295,249,215,228],
[243,253,269,0,277,268,282,249,265,289,242,245,270],
[233,265,271,223,0,241,252,255,254,277,235,239,274],
[242,249,239,232,259,0,269,252,238,305,254,248,247],
[248,235,252,218,248,231,0,284,250,322,246,213,256],
[226,263,251,251,245,248,216,0,199,278,226,212,231],
[236,256,278,235,246,262,250,301,0,308,270,227,250],
[200,198,205,211,223,195,178,222,192,0,189,176,227],
[247,291,251,258,265,246,254,274,230,311,0,213,241],
[250,288,285,255,261,252,287,288,273,324,287,0,283],
[242,255,272,230,226,253,244,269,250,273,259,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 148, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,246,260,245,244,275,241,231,223,240,240,256],
[271,0,236,243,254,209,239,256,245,240,239,235,248],
[254,264,0,240,234,206,262,248,251,254,248,247,238],
[240,257,260,0,285,232,283,292,265,259,240,245,283],
[255,246,266,215,0,234,261,259,224,241,252,252,262],
[256,291,294,268,266,0,258,281,261,252,266,249,278],
[225,261,238,217,239,242,0,256,234,221,231,233,240],
[259,244,252,208,241,219,244,0,241,214,228,249,248],
[269,255,249,235,276,239,266,259,0,248,250,254,256],
[277,260,246,241,259,248,279,286,252,0,255,241,263],
[260,261,252,260,248,234,269,272,250,245,0,229,250],
[260,265,253,255,248,251,267,251,246,259,271,0,254],
[244,252,262,217,238,222,260,252,244,237,250,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 149, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,315,354,315,287,183,213,376,309,209,343,199],
[291,0,178,259,178,213,270,165,259,240,104,295,160],
[185,322,0,197,168,232,218,239,346,178,140,281,26],
[146,241,303,0,215,201,215,167,307,183,161,127,153],
[185,322,332,285,0,320,325,239,346,247,266,325,152],
[213,287,268,299,180,0,236,184,203,284,130,226,108],
[317,230,282,285,175,264,0,191,346,310,178,295,64],
[287,335,261,333,261,316,309,0,211,196,222,257,156],
[124,241,154,193,154,297,154,289,0,228,92,223,82],
[191,260,322,317,253,216,190,304,272,0,114,337,147],
[291,396,360,339,234,370,322,278,408,386,0,408,317],
[157,205,219,373,175,274,205,243,277,163,92,0,147],
[301,340,474,347,348,392,436,344,418,353,183,353,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 150, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,221,221,267,226,270,233,231,230,207,233,233,226],
[279,0,229,279,238,267,247,273,258,226,276,242,270],
[279,271,0,270,241,277,273,274,262,238,270,266,263],
[233,221,230,0,233,261,249,255,255,216,257,254,254],
[274,262,259,267,0,277,286,264,275,250,268,258,272],
[230,233,223,239,223,0,243,244,231,207,243,248,255],
[267,253,227,251,214,257,0,264,271,236,262,257,254],
[269,227,226,245,236,256,236,0,252,204,271,258,257],
[270,242,238,245,225,269,229,248,0,236,267,262,240],
[293,274,262,284,250,293,264,296,264,0,286,272,259],
[267,224,230,243,232,257,238,229,233,214,0,241,253],
[267,258,234,246,242,252,243,242,238,228,259,0,256],
[274,230,237,246,228,245,246,243,260,241,247,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 151, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,272,289,212,266,295,289,289,247,283,285,311],
[277,0,266,239,273,292,273,245,265,310,197,327,253],
[228,234,0,349,209,248,187,226,235,274,276,278,223],
[211,261,151,0,171,197,203,185,212,237,218,205,223],
[288,227,291,329,0,256,242,289,193,261,265,232,277],
[234,208,252,303,244,0,234,261,233,274,253,259,280],
[205,227,313,297,258,266,0,232,287,279,292,323,293],
[211,255,274,315,211,239,268,0,237,334,239,303,325],
[211,235,265,288,307,267,213,263,0,285,238,220,302],
[253,190,226,263,239,226,221,166,215,0,239,229,216],
[217,303,224,282,235,247,208,261,262,261,0,284,246],
[215,173,222,295,268,241,177,197,280,271,216,0,218],
[189,247,277,277,223,220,207,175,198,284,254,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 152, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,240,267,241,244,246,257,257,233,249,246,261],
[249,0,278,258,263,234,266,272,274,256,261,279,268],
[260,222,0,243,244,227,254,276,252,226,227,268,244],
[233,242,257,0,223,244,261,269,250,232,240,255,234],
[259,237,256,277,0,256,255,276,244,239,250,264,254],
[256,266,273,256,244,0,276,268,266,238,261,253,280],
[254,234,246,239,245,224,0,270,247,238,245,263,247],
[243,228,224,231,224,232,230,0,226,222,229,241,230],
[243,226,248,250,256,234,253,274,0,237,251,260,246],
[267,244,274,268,261,262,262,278,263,0,280,276,282],
[251,239,273,260,250,239,255,271,249,220,0,257,256],
[254,221,232,245,236,247,237,259,240,224,243,0,257],
[239,232,256,266,246,220,253,270,254,218,244,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 153, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,221,221,202,213,243,247,279,243,243,222,220],
[248,0,231,243,237,253,241,275,282,245,238,232,244],
[279,269,0,256,243,252,279,282,286,257,241,265,259],
[279,257,244,0,233,255,262,282,291,257,262,246,256],
[298,263,257,267,0,276,251,302,288,274,244,231,241],
[287,247,248,245,224,0,251,297,277,253,236,238,223],
[257,259,221,238,249,249,0,273,264,239,233,236,225],
[253,225,218,218,198,203,227,0,224,230,217,211,212],
[221,218,214,209,212,223,236,276,0,239,218,205,233],
[257,255,243,243,226,247,261,270,261,0,238,237,228],
[257,262,259,238,256,264,267,283,282,262,0,249,241],
[278,268,235,254,269,262,264,289,295,263,251,0,262],
[280,256,241,244,259,277,275,288,267,272,259,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 154, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,250,268,289,292,279,303,252,269,304,322,264],
[179,0,174,191,211,248,199,213,166,254,293,223,179],
[250,326,0,262,246,255,249,242,200,291,257,205,275],
[232,309,238,0,188,250,231,196,198,286,243,237,206],
[211,289,254,312,0,225,289,244,175,235,262,201,278],
[208,252,245,250,275,0,288,178,201,249,308,232,227],
[221,301,251,269,211,212,0,169,164,222,252,194,234],
[197,287,258,304,256,322,331,0,208,343,354,306,337],
[248,334,300,302,325,299,336,292,0,326,342,295,264],
[231,246,209,214,265,251,278,157,174,0,224,244,239],
[196,207,243,257,238,192,248,146,158,276,0,165,263],
[178,277,295,263,299,268,306,194,205,256,335,0,262],
[236,321,225,294,222,273,266,163,236,261,237,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 155, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,209,232,241,217,238,227,237,228,246,212,253],
[263,0,228,232,262,211,221,244,236,225,228,216,260],
[291,272,0,238,274,235,287,267,256,255,250,275,276],
[268,268,262,0,254,256,268,291,263,277,255,249,277],
[259,238,226,246,0,226,262,223,249,217,233,224,253],
[283,289,265,244,274,0,242,250,283,269,254,261,266],
[262,279,213,232,238,258,0,232,267,237,219,259,255],
[273,256,233,209,277,250,268,0,249,253,252,254,285],
[263,264,244,237,251,217,233,251,0,248,233,232,258],
[272,275,245,223,283,231,263,247,252,0,253,240,267],
[254,272,250,245,267,246,281,248,267,247,0,250,250],
[288,284,225,251,276,239,241,246,268,260,250,0,266],
[247,240,224,223,247,234,245,215,242,233,250,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 156, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,207,283,216,208,179,183,228,174,170,201,275],
[326,0,265,333,273,227,252,228,313,206,191,237,289],
[293,235,0,348,246,300,266,270,336,240,227,276,320],
[217,167,152,0,183,172,128,192,209,114,162,195,256],
[284,227,254,317,0,230,276,238,319,212,238,258,314],
[292,273,200,328,270,0,187,204,310,209,238,216,293],
[321,248,234,372,224,313,0,245,332,223,288,301,293],
[317,272,230,308,262,296,255,0,342,248,241,209,261],
[272,187,164,291,181,190,168,158,0,171,240,212,268],
[326,294,260,386,288,291,277,252,329,0,249,208,282],
[330,309,273,338,262,262,212,259,260,251,0,232,233],
[299,263,224,305,242,284,199,291,288,292,268,0,329],
[225,211,180,244,186,207,207,239,232,218,267,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 157, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,246,272,269,249,245,279,269,268,275,278,249],
[227,0,245,242,258,221,257,249,257,258,243,235,222],
[254,255,0,231,236,253,258,271,263,277,267,251,228],
[228,258,269,0,247,267,274,256,267,253,273,248,251],
[231,242,264,253,0,248,280,271,289,256,261,241,249],
[251,279,247,233,252,0,275,271,285,261,263,261,236],
[255,243,242,226,220,225,0,246,224,231,248,241,228],
[221,251,229,244,229,229,254,0,229,257,232,239,230],
[231,243,237,233,211,215,276,271,0,257,243,275,229],
[232,242,223,247,244,239,269,243,243,0,260,231,230],
[225,257,233,227,239,237,252,268,257,240,0,235,227],
[222,265,249,252,259,239,259,261,225,269,265,0,243],
[251,278,272,249,251,264,272,270,271,270,273,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 158, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,326,240,262,234,232,251,216,247,234,233,283],
[229,0,312,232,284,262,271,267,233,250,267,255,253],
[174,188,0,199,234,212,209,235,191,235,205,223,233],
[260,268,301,0,271,278,248,262,256,296,285,254,281],
[238,216,266,229,0,260,258,263,228,287,229,276,268],
[266,238,288,222,240,0,198,261,176,235,224,220,250],
[268,229,291,252,242,302,0,294,238,242,272,256,263],
[249,233,265,238,237,239,206,0,204,191,188,234,256],
[284,267,309,244,272,324,262,296,0,314,275,279,292],
[253,250,265,204,213,265,258,309,186,0,229,264,253],
[266,233,295,215,271,276,228,312,225,271,0,251,254],
[267,245,277,246,224,280,244,266,221,236,249,0,274],
[217,247,267,219,232,250,237,244,208,247,246,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 159, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,267,289,248,280,241,259,265,265,273,278,305],
[211,0,278,264,219,261,254,265,246,258,266,253,279],
[233,222,0,242,218,204,222,208,246,240,257,219,247],
[211,236,258,0,234,253,234,238,276,262,263,256,295],
[252,281,282,266,0,266,245,254,266,278,285,273,286],
[220,239,296,247,234,0,198,270,270,261,284,256,276],
[259,246,278,266,255,302,0,247,270,279,277,261,266],
[241,235,292,262,246,230,253,0,255,253,254,270,292],
[235,254,254,224,234,230,230,245,0,245,241,213,251],
[235,242,260,238,222,239,221,247,255,0,290,248,296],
[227,234,243,237,215,216,223,246,259,210,0,219,280],
[222,247,281,244,227,244,239,230,287,252,281,0,251],
[195,221,253,205,214,224,234,208,249,204,220,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 160, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,247,235,272,245,229,220,256,230,242,246,239],
[238,0,225,226,261,219,208,218,253,248,217,231,249],
[253,275,0,257,268,280,246,239,261,280,256,266,289],
[265,274,243,0,239,258,230,225,281,243,242,238,249],
[228,239,232,261,0,254,237,216,280,254,226,247,267],
[255,281,220,242,246,0,239,234,264,260,227,245,267],
[271,292,254,270,263,261,0,238,268,253,259,266,263],
[280,282,261,275,284,266,262,0,253,282,233,282,287],
[244,247,239,219,220,236,232,247,0,250,221,251,253],
[270,252,220,257,246,240,247,218,250,0,223,244,276],
[258,283,244,258,274,273,241,267,279,277,0,264,288],
[254,269,234,262,253,255,234,218,249,256,236,0,262],
[261,251,211,251,233,233,237,213,247,224,212,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 161, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,272,242,259,247,239,219,237,214,240,224,232],
[260,0,266,248,264,260,241,253,250,228,255,242,238],
[228,234,0,234,262,251,239,240,238,238,245,223,246],
[258,252,266,0,275,240,259,241,256,246,273,244,249],
[241,236,238,225,0,215,242,206,243,214,232,219,225],
[253,240,249,260,285,0,243,232,243,243,267,243,254],
[261,259,261,241,258,257,0,236,267,243,261,244,245],
[281,247,260,259,294,268,264,0,283,255,283,252,256],
[263,250,262,244,257,257,233,217,0,239,272,247,244],
[286,272,262,254,286,257,257,245,261,0,266,243,265],
[260,245,255,227,268,233,239,217,228,234,0,235,234],
[276,258,277,256,281,257,256,248,253,257,265,0,254],
[268,262,254,251,275,246,255,244,256,235,266,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 162, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,260,259,231,221,214,247,238,217,222,216,223],
[273,0,265,242,269,238,257,259,268,263,258,232,249],
[240,235,0,247,258,211,253,240,242,248,244,235,244],
[241,258,253,0,274,224,245,267,226,265,248,253,252],
[269,231,242,226,0,231,257,251,254,249,248,212,243],
[279,262,289,276,269,0,273,294,298,285,251,238,250],
[286,243,247,255,243,227,0,248,258,239,257,248,239],
[253,241,260,233,249,206,252,0,274,258,242,245,244],
[262,232,258,274,246,202,242,226,0,257,243,229,225],
[283,237,252,235,251,215,261,242,243,0,261,235,241],
[278,242,256,252,252,249,243,258,257,239,0,239,253],
[284,268,265,247,288,262,252,255,271,265,261,0,260],
[277,251,256,248,257,250,261,256,275,259,247,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 163, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,258,252,280,238,256,265,247,269,246,269,235],
[256,0,257,254,270,241,248,265,258,257,261,262,251],
[242,243,0,255,266,234,237,244,243,260,245,262,254],
[248,246,245,0,271,237,233,247,255,264,243,251,260],
[220,230,234,229,0,224,228,235,231,246,230,245,233],
[262,259,266,263,276,0,249,260,261,269,254,273,258],
[244,252,263,267,272,251,0,256,261,274,249,259,250],
[235,235,256,253,265,240,244,0,240,249,246,266,240],
[253,242,257,245,269,239,239,260,0,275,251,250,248],
[231,243,240,236,254,231,226,251,225,0,224,244,237],
[254,239,255,257,270,246,251,254,249,276,0,264,246],
[231,238,238,249,255,227,241,234,250,256,236,0,227],
[265,249,246,240,267,242,250,260,252,263,254,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 164, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,243,240,244,248,237,246,237,236,254,247,259],
[241,0,251,265,261,253,243,246,252,251,257,266,255],
[257,249,0,266,274,260,268,249,256,247,258,270,267],
[260,235,234,0,259,249,245,240,241,238,241,247,252],
[256,239,226,241,0,243,251,233,239,244,245,264,244],
[252,247,240,251,257,0,261,243,263,240,254,266,256],
[263,257,232,255,249,239,0,231,249,239,247,266,247],
[254,254,251,260,267,257,269,0,265,235,255,278,255],
[263,248,244,259,261,237,251,235,0,244,258,257,249],
[264,249,253,262,256,260,261,265,256,0,264,272,254],
[246,243,242,259,255,246,253,245,242,236,0,255,238],
[253,234,230,253,236,234,234,222,243,228,245,0,232],
[241,245,233,248,256,244,253,245,251,246,262,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 165, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,220,255,235,228,256,263,223,248,191,215,247],
[268,0,240,247,243,235,265,248,227,272,242,251,253],
[280,260,0,264,259,240,245,258,255,287,229,269,289],
[245,253,236,0,254,227,248,247,229,242,237,256,272],
[265,257,241,246,0,243,252,271,251,284,236,264,242],
[272,265,260,273,257,0,275,290,238,265,262,270,266],
[244,235,255,252,248,225,0,264,255,247,219,254,239],
[237,252,242,253,229,210,236,0,218,279,216,261,250],
[277,273,245,271,249,262,245,282,0,302,244,297,263],
[252,228,213,258,216,235,253,221,198,0,208,250,260],
[309,258,271,263,264,238,281,284,256,292,0,282,283],
[285,249,231,244,236,230,246,239,203,250,218,0,251],
[253,247,211,228,258,234,261,250,237,240,217,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 166, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,265,343,344,247,360,307,302,329,190,302,280],
[229,0,233,348,307,179,339,170,223,308,214,249,221],
[235,267,0,257,271,270,313,281,284,343,222,306,269],
[157,152,243,0,255,195,225,184,186,312,159,255,215],
[156,193,229,245,0,123,222,204,163,236,170,225,170],
[253,321,230,305,377,0,352,201,267,282,234,311,283],
[140,161,187,275,278,148,0,228,181,260,162,226,222],
[193,330,219,316,296,299,272,0,293,352,286,244,315],
[198,277,216,314,337,233,319,207,0,279,205,260,212],
[171,192,157,188,264,218,240,148,221,0,218,227,245],
[310,286,278,341,330,266,338,214,295,282,0,281,295],
[198,251,194,245,275,189,274,256,240,273,219,0,206],
[220,279,231,285,330,217,278,185,288,255,205,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 167, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,216,230,264,220,268,215,220,207,250,215,240],
[255,0,224,256,232,239,250,207,256,213,241,239,248],
[284,276,0,226,253,266,253,232,257,259,264,237,277],
[270,244,274,0,282,254,271,240,258,252,255,241,222],
[236,268,247,218,0,234,279,255,239,247,254,253,236],
[280,261,234,246,266,0,267,243,260,279,248,284,242],
[232,250,247,229,221,233,0,229,234,240,238,262,255],
[285,293,268,260,245,257,271,0,282,251,265,293,287],
[280,244,243,242,261,240,266,218,0,233,237,225,269],
[293,287,241,248,253,221,260,249,267,0,239,245,250],
[250,259,236,245,246,252,262,235,263,261,0,256,253],
[285,261,263,259,247,216,238,207,275,255,244,0,285],
[260,252,223,278,264,258,245,213,231,250,247,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 168, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,300,244,273,263,283,275,267,264,256,319,292],
[226,0,266,174,227,230,221,250,210,241,219,260,228],
[200,234,0,227,244,202,237,246,231,268,238,220,247],
[256,326,273,0,304,246,263,270,246,259,248,280,261],
[227,273,256,196,0,246,244,233,223,242,236,274,244],
[237,270,298,254,254,0,266,298,234,274,254,257,267],
[217,279,263,237,256,234,0,252,255,239,223,262,237],
[225,250,254,230,267,202,248,0,251,241,225,268,216],
[233,290,269,254,277,266,245,249,0,285,237,259,257],
[236,259,232,241,258,226,261,259,215,0,236,272,238],
[244,281,262,252,264,246,277,275,263,264,0,260,269],
[181,240,280,220,226,243,238,232,241,228,240,0,247],
[208,272,253,239,256,233,263,284,243,262,231,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 169, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,254,240,248,237,242,232,250,256,262,260,254],
[251,0,272,241,259,230,256,223,268,254,245,272,264],
[246,228,0,262,255,235,248,218,264,241,281,253,257],
[260,259,238,0,255,238,264,251,279,236,246,252,265],
[252,241,245,245,0,230,244,235,264,238,270,253,250],
[263,270,265,262,270,0,255,254,267,242,280,275,264],
[258,244,252,236,256,245,0,217,258,235,234,263,270],
[268,277,282,249,265,246,283,0,273,258,260,281,275],
[250,232,236,221,236,233,242,227,0,219,220,253,260],
[244,246,259,264,262,258,265,242,281,0,262,259,289],
[238,255,219,254,230,220,266,240,280,238,0,235,243],
[240,228,247,248,247,225,237,219,247,241,265,0,273],
[246,236,243,235,250,236,230,225,240,211,257,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 170, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,254,246,254,259,240,287,267,274,232,265,265],
[226,0,254,250,234,276,251,258,260,263,249,261,264],
[246,246,0,233,234,255,232,254,229,268,218,245,252],
[254,250,267,0,236,264,259,253,243,241,231,254,246],
[246,266,266,264,0,256,255,267,252,273,239,270,253],
[241,224,245,236,244,0,262,257,259,261,245,245,252],
[260,249,268,241,245,238,0,268,252,262,241,247,248],
[213,242,246,247,233,243,232,0,221,252,215,234,208],
[233,240,271,257,248,241,248,279,0,269,256,265,279],
[226,237,232,259,227,239,238,248,231,0,225,247,221],
[268,251,282,269,261,255,259,285,244,275,0,276,263],
[235,239,255,246,230,255,253,266,235,253,224,0,232],
[235,236,248,254,247,248,252,292,221,279,237,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 171, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,243,220,244,250,242,270,289,239,249,231,257],
[256,0,257,262,270,256,259,268,251,231,275,244,259],
[257,243,0,241,239,256,248,260,267,230,246,229,253],
[280,238,259,0,263,275,252,250,288,224,257,234,248],
[256,230,261,237,0,266,252,243,253,227,261,250,263],
[250,244,244,225,234,0,236,223,267,218,234,231,222],
[258,241,252,248,248,264,0,239,256,256,281,242,247],
[230,232,240,250,257,277,261,0,256,250,267,240,254],
[211,249,233,212,247,233,244,244,0,239,229,242,210],
[261,269,270,276,273,282,244,250,261,0,278,263,261],
[251,225,254,243,239,266,219,233,271,222,0,239,239],
[269,256,271,266,250,269,258,260,258,237,261,0,268],
[243,241,247,252,237,278,253,246,290,239,261,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 172, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,269,260,256,259,310,231,284,277,213,277,262],
[259,0,274,243,200,260,235,240,273,238,204,290,240],
[231,226,0,233,214,250,246,195,248,206,201,238,253],
[240,257,267,0,230,252,243,210,247,260,220,280,220],
[244,300,286,270,0,271,285,270,267,250,255,316,252],
[241,240,250,248,229,0,245,223,267,242,244,288,222],
[190,265,254,257,215,255,0,252,258,244,218,300,242],
[269,260,305,290,230,277,248,0,311,231,228,298,275],
[216,227,252,253,233,233,242,189,0,225,194,267,207],
[223,262,294,240,250,258,256,269,275,0,240,292,247],
[287,296,299,280,245,256,282,272,306,260,0,308,287],
[223,210,262,220,184,212,200,202,233,208,192,0,213],
[238,260,247,280,248,278,258,225,293,253,213,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 173, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,259,248,245,253,260,258,250,275,237,236,252],
[238,0,217,229,253,257,270,221,243,215,238,224,252],
[241,283,0,254,261,281,259,266,240,251,243,239,252],
[252,271,246,0,248,260,259,256,246,252,236,238,225],
[255,247,239,252,0,265,257,227,234,240,241,229,223],
[247,243,219,240,235,0,248,230,231,230,206,229,238],
[240,230,241,241,243,252,0,227,235,252,226,228,248],
[242,279,234,244,273,270,273,0,245,265,257,255,260],
[250,257,260,254,266,269,265,255,0,244,245,251,240],
[225,285,249,248,260,270,248,235,256,0,231,236,256],
[263,262,257,264,259,294,274,243,255,269,0,252,251],
[264,276,261,262,271,271,272,245,249,264,248,0,237],
[248,248,248,275,277,262,252,240,260,244,249,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 174, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,238,251,249,262,255,239,257,242,230,255,230],
[271,0,265,257,266,259,270,258,256,239,245,247,260],
[262,235,0,259,264,251,246,243,246,246,236,234,253],
[249,243,241,0,251,255,243,247,249,246,241,241,246],
[251,234,236,249,0,256,247,239,248,237,242,234,244],
[238,241,249,245,244,0,245,241,249,232,256,244,247],
[245,230,254,257,253,255,0,239,257,237,248,247,253],
[261,242,257,253,261,259,261,0,264,243,260,255,261],
[243,244,254,251,252,251,243,236,0,237,250,247,245],
[258,261,254,254,263,268,263,257,263,0,249,253,271],
[270,255,264,259,258,244,252,240,250,251,0,254,262],
[245,253,266,259,266,256,253,245,253,247,246,0,237],
[270,240,247,254,256,253,247,239,255,229,238,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 175, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,250,261,262,229,252,263,269,264,283,261,254],
[245,0,251,269,251,255,250,241,274,248,250,233,233],
[250,249,0,270,249,247,265,279,268,246,267,257,244],
[239,231,230,0,232,229,249,268,274,230,246,236,267],
[238,249,251,268,0,227,241,244,261,240,262,254,233],
[271,245,253,271,273,0,267,286,287,251,267,270,248],
[248,250,235,251,259,233,0,264,275,234,248,249,252],
[237,259,221,232,256,214,236,0,265,223,263,237,219],
[231,226,232,226,239,213,225,235,0,220,238,209,229],
[236,252,254,270,260,249,266,277,280,0,267,273,284],
[217,250,233,254,238,233,252,237,262,233,0,244,217],
[239,267,243,264,246,230,251,263,291,227,256,0,239],
[246,267,256,233,267,252,248,281,271,216,283,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 176, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,259,255,256,253,251,249,246,252,265,246,257],
[263,0,266,262,266,265,256,262,260,250,271,262,268],
[241,234,0,236,257,246,239,245,242,235,261,246,255],
[245,238,264,0,253,242,251,248,248,238,269,238,266],
[244,234,243,247,0,261,248,238,247,241,254,244,247],
[247,235,254,258,239,0,247,239,256,248,248,248,258],
[249,244,261,249,252,253,0,241,245,240,262,252,249],
[251,238,255,252,262,261,259,0,256,237,269,250,268],
[254,240,258,252,253,244,255,244,0,244,242,243,252],
[248,250,265,262,259,252,260,263,256,0,280,248,257],
[235,229,239,231,246,252,238,231,258,220,0,240,238],
[254,238,254,262,256,252,248,250,257,252,260,0,257],
[243,232,245,234,253,242,251,232,248,243,262,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 177, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,254,254,266,276,254,268,250,239,264,244,245],
[231,0,252,251,236,257,251,236,249,234,235,233,222],
[246,248,0,235,224,251,254,239,237,252,256,252,260],
[246,249,265,0,230,255,270,239,238,230,246,239,240],
[234,264,276,270,0,255,254,254,252,249,255,261,231],
[224,243,249,245,245,0,239,223,211,220,243,244,239],
[246,249,246,230,246,261,0,236,248,231,246,240,259],
[232,264,261,261,246,277,264,0,270,243,269,259,247],
[250,251,263,262,248,289,252,230,0,233,254,248,254],
[261,266,248,270,251,280,269,257,267,0,241,269,257],
[236,265,244,254,245,257,254,231,246,259,0,247,234],
[256,267,248,261,239,256,260,241,252,231,253,0,251],
[255,278,240,260,269,261,241,253,246,243,266,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 178, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,256,255,262,245,244,236,243,246,265,251,267],
[260,0,261,256,257,251,252,259,258,247,259,272,253],
[244,239,0,252,246,248,242,235,255,251,241,236,252],
[245,244,248,0,254,230,231,238,254,249,244,239,254],
[238,243,254,246,0,234,224,235,237,251,257,248,253],
[255,249,252,270,266,0,256,253,260,254,266,266,267],
[256,248,258,269,276,244,0,262,258,256,248,245,267],
[264,241,265,262,265,247,238,0,243,255,261,263,263],
[257,242,245,246,263,240,242,257,0,254,270,257,264],
[254,253,249,251,249,246,244,245,246,0,246,260,254],
[235,241,259,256,243,234,252,239,230,254,0,240,264],
[249,228,264,261,252,234,255,237,243,240,260,0,255],
[233,247,248,246,247,233,233,237,236,246,236,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 179, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,286,261,242,236,235,219,217,255,281,212,243],
[253,0,271,253,258,251,259,214,226,266,257,226,233],
[214,229,0,215,204,238,233,226,217,242,254,209,211],
[239,247,285,0,239,246,251,230,236,253,257,229,261],
[258,242,296,261,0,235,251,224,249,259,271,212,257],
[264,249,262,254,265,0,257,237,215,237,260,244,229],
[265,241,267,249,249,243,0,217,217,246,268,217,226],
[281,286,274,270,276,263,283,0,244,300,277,259,261],
[283,274,283,264,251,285,283,256,0,268,282,258,248],
[245,234,258,247,241,263,254,200,232,0,241,205,229],
[219,243,246,243,229,240,232,223,218,259,0,220,228],
[288,274,291,271,288,256,283,241,242,295,280,0,277],
[257,267,289,239,243,271,274,239,252,271,272,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 180, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,249,238,242,229,242,240,246,233,252,247,238],
[256,0,238,243,252,234,251,242,245,245,246,254,252],
[251,262,0,252,240,221,240,250,251,241,249,256,247],
[262,257,248,0,263,247,252,240,266,248,258,251,262],
[258,248,260,237,0,257,246,254,256,246,266,262,273],
[271,266,279,253,243,0,249,246,272,258,256,261,258],
[258,249,260,248,254,251,0,243,252,241,255,263,259],
[260,258,250,260,246,254,257,0,255,250,259,248,257],
[254,255,249,234,244,228,248,245,0,234,242,235,230],
[267,255,259,252,254,242,259,250,266,0,255,256,247],
[248,254,251,242,234,244,245,241,258,245,0,249,247],
[253,246,244,249,238,239,237,252,265,244,251,0,258],
[262,248,253,238,227,242,241,243,270,253,253,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 181, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,203,260,174,219,95,206,216,146,184,147,158],
[255,0,197,304,172,219,188,188,173,166,199,237,233],
[297,303,0,337,238,222,198,271,225,201,277,220,246],
[240,196,163,0,208,156,152,183,172,190,189,137,149],
[326,328,262,292,0,246,191,231,149,263,255,223,227],
[281,281,278,344,254,0,154,269,208,194,238,282,224],
[405,312,302,348,309,346,0,299,260,241,307,299,321],
[294,312,229,317,269,231,201,0,216,221,287,255,231],
[284,327,275,328,351,292,240,284,0,283,282,287,251],
[354,334,299,310,237,306,259,279,217,0,273,303,256],
[316,301,223,311,245,262,193,213,218,227,0,221,247],
[353,263,280,363,277,218,201,245,213,197,279,0,276],
[342,267,254,351,273,276,179,269,249,244,253,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 182, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,245,242,255,244,239,257,264,257,242,225,257],
[267,0,278,277,270,263,246,265,269,269,262,250,276],
[255,222,0,226,261,236,232,252,251,245,247,230,244],
[258,223,274,0,263,244,234,269,264,256,236,232,261],
[245,230,239,237,0,259,245,258,245,256,240,239,253],
[256,237,264,256,241,0,245,263,268,261,255,231,260],
[261,254,268,266,255,255,0,276,272,257,253,244,248],
[243,235,248,231,242,237,224,0,264,260,235,241,240],
[236,231,249,236,255,232,228,236,0,243,239,213,254],
[243,231,255,244,244,239,243,240,257,0,243,234,245],
[258,238,253,264,260,245,247,265,261,257,0,242,252],
[275,250,270,268,261,269,256,259,287,266,258,0,266],
[243,224,256,239,247,240,252,260,246,255,248,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 183, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,260,250,255,279,259,264,263,275,264,254,280],
[245,0,256,250,247,266,258,251,242,275,236,263,267],
[240,244,0,231,254,263,254,254,252,268,258,262,268],
[250,250,269,0,251,260,264,248,256,266,245,261,269],
[245,253,246,249,0,262,251,247,256,268,242,263,258],
[221,234,237,240,238,0,252,241,241,248,224,242,259],
[241,242,246,236,249,248,0,251,237,257,237,248,251],
[236,249,246,252,253,259,249,0,255,273,251,248,263],
[237,258,248,244,244,259,263,245,0,269,244,263,264],
[225,225,232,234,232,252,243,227,231,0,242,238,244],
[236,264,242,255,258,276,263,249,256,258,0,257,264],
[246,237,238,239,237,258,252,252,237,262,243,0,261],
[220,233,232,231,242,241,249,237,236,256,236,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 184, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,262,258,261,268,255,242,248,245,243,240,236],
[267,0,270,270,266,260,258,256,259,263,269,241,256],
[238,230,0,254,255,259,238,238,242,257,239,231,242],
[242,230,246,0,252,236,233,234,237,250,250,241,242],
[239,234,245,248,0,257,240,226,239,247,250,245,246],
[232,240,241,264,243,0,239,237,243,247,246,246,253],
[245,242,262,267,260,261,0,241,245,253,243,251,254],
[258,244,262,266,274,263,259,0,243,280,267,259,255],
[252,241,258,263,261,257,255,257,0,251,247,239,249],
[255,237,243,250,253,253,247,220,249,0,244,249,242],
[257,231,261,250,250,254,257,233,253,256,0,234,241],
[260,259,269,259,255,254,249,241,261,251,266,0,246],
[264,244,258,258,254,247,246,245,251,258,259,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 185, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,242,229,243,228,229,224,232,226,229,249,224],
[278,0,267,270,267,264,266,255,260,250,286,280,265],
[258,233,0,241,245,240,233,245,234,237,245,245,238],
[271,230,259,0,256,252,234,244,247,240,257,268,237],
[257,233,255,244,0,229,223,227,227,241,241,252,241],
[272,236,260,248,271,0,242,235,241,235,250,274,249],
[271,234,267,266,277,258,0,254,256,267,262,272,252],
[276,245,255,256,273,265,246,0,253,256,254,256,247],
[268,240,266,253,273,259,244,247,0,249,265,268,270],
[274,250,263,260,259,265,233,244,251,0,249,279,246],
[271,214,255,243,259,250,238,246,235,251,0,270,242],
[251,220,255,232,248,226,228,244,232,221,230,0,226],
[276,235,262,263,259,251,248,253,230,254,258,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 186, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,262,234,254,254,236,272,250,241,262,264,262],
[234,0,226,229,236,222,231,250,232,242,236,222,242],
[238,274,0,231,244,238,243,256,247,250,264,230,255],
[266,271,269,0,250,247,251,267,243,246,261,235,258],
[246,264,256,250,0,241,252,255,268,233,245,247,268],
[246,278,262,253,259,0,255,273,243,248,265,243,260],
[264,269,257,249,248,245,0,281,262,233,273,251,260],
[228,250,244,233,245,227,219,0,234,230,227,228,222],
[250,268,253,257,232,257,238,266,0,247,259,246,267],
[259,258,250,254,267,252,267,270,253,0,276,263,254],
[238,264,236,239,255,235,227,273,241,224,0,236,255],
[236,278,270,265,253,257,249,272,254,237,264,0,277],
[238,258,245,242,232,240,240,278,233,246,245,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 187, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,256,239,248,287,238,276,259,252,265,249,239],
[292,0,273,255,246,283,269,288,266,253,287,264,268],
[244,227,0,222,248,248,270,259,254,233,281,273,245],
[261,245,278,0,265,260,264,277,263,227,272,274,262],
[252,254,252,235,0,247,243,270,238,227,278,245,259],
[213,217,252,240,253,0,256,250,244,218,262,251,245],
[262,231,230,236,257,244,0,275,261,245,265,274,248],
[224,212,241,223,230,250,225,0,228,219,253,259,235],
[241,234,246,237,262,256,239,272,0,223,278,238,251],
[248,247,267,273,273,282,255,281,277,0,267,272,284],
[235,213,219,228,222,238,235,247,222,233,0,250,240],
[251,236,227,226,255,249,226,241,262,228,250,0,237],
[261,232,255,238,241,255,252,265,249,216,260,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 188, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,259,246,257,255,242,253,261,255,247,252,247],
[255,0,265,252,272,257,256,246,264,268,254,268,256],
[241,235,0,245,249,245,229,236,251,245,239,247,224],
[254,248,255,0,244,246,248,246,252,244,252,252,251],
[243,228,251,256,0,257,244,250,255,252,244,258,244],
[245,243,255,254,243,0,240,237,259,257,252,252,239],
[258,244,271,252,256,260,0,259,251,257,239,267,255],
[247,254,264,254,250,263,241,0,278,264,263,267,247],
[239,236,249,248,245,241,249,222,0,252,238,249,241],
[245,232,255,256,248,243,243,236,248,0,251,257,244],
[253,246,261,248,256,248,261,237,262,249,0,255,250],
[248,232,253,248,242,248,233,233,251,243,245,0,237],
[253,244,276,249,256,261,245,253,259,256,250,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 189, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,313,237,251,279,274,298,231,230,253,231,238],
[265,0,287,250,227,266,276,299,260,224,234,244,269],
[187,213,0,257,183,209,241,243,194,221,232,194,238],
[263,250,243,0,213,262,276,299,244,239,278,212,193],
[249,273,317,287,0,323,282,278,273,276,239,224,252],
[221,234,291,238,177,0,261,291,233,262,222,261,238],
[226,224,259,224,218,239,0,272,217,177,220,206,197],
[202,201,257,201,222,209,228,0,186,214,174,187,245],
[269,240,306,256,227,267,283,314,0,276,259,273,272],
[270,276,279,261,224,238,323,286,224,0,262,226,264],
[247,266,268,222,261,278,280,326,241,238,0,229,274],
[269,256,306,288,276,239,294,313,227,274,271,0,337],
[262,231,262,307,248,262,303,255,228,236,226,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 190, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,247,240,217,213,242,204,278,230,216,220,237],
[247,0,230,219,208,213,234,217,245,224,240,220,209],
[253,270,0,276,266,246,267,240,279,216,215,226,262],
[260,281,224,0,225,227,232,252,273,225,234,207,277],
[283,292,234,275,0,239,268,254,302,238,240,261,258],
[287,287,254,273,261,0,269,226,296,242,248,245,279],
[258,266,233,268,232,231,0,241,269,219,237,240,253],
[296,283,260,248,246,274,259,0,304,258,255,253,277],
[222,255,221,227,198,204,231,196,0,235,231,183,258],
[270,276,284,275,262,258,281,242,265,0,258,228,291],
[284,260,285,266,260,252,263,245,269,242,0,253,271],
[280,280,274,293,239,255,260,247,317,272,247,0,271],
[263,291,238,223,242,221,247,223,242,209,229,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 191, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,271,275,245,288,249,311,247,293,245,284,260],
[226,0,254,232,252,270,226,274,241,231,213,256,250],
[229,246,0,242,219,276,240,286,242,268,245,278,245],
[225,268,258,0,240,264,255,272,252,274,218,256,252],
[255,248,281,260,0,259,256,284,289,326,267,284,250],
[212,230,224,236,241,0,245,272,267,287,246,274,262],
[251,274,260,245,244,255,0,277,277,256,248,278,239],
[189,226,214,228,216,228,223,0,243,258,229,244,222],
[253,259,258,248,211,233,223,257,0,296,268,261,238],
[207,269,232,226,174,213,244,242,204,0,231,249,234],
[255,287,255,282,233,254,252,271,232,269,0,276,232],
[216,244,222,244,216,226,222,256,239,251,224,0,222],
[240,250,255,248,250,238,261,278,262,266,268,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 192, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,245,235,253,233,252,249,237,238,250,235,259],
[257,0,261,252,268,253,244,250,246,253,273,243,274],
[255,239,0,240,262,243,255,248,248,241,262,237,257],
[265,248,260,0,264,248,256,251,254,241,261,251,264],
[247,232,238,236,0,237,249,252,247,245,262,224,259],
[267,247,257,252,263,0,255,253,268,239,260,250,261],
[248,256,245,244,251,245,0,217,245,230,253,231,240],
[251,250,252,249,248,247,283,0,257,247,266,242,248],
[263,254,252,246,253,232,255,243,0,261,249,231,257],
[262,247,259,259,255,261,270,253,239,0,270,237,263],
[250,227,238,239,238,240,247,234,251,230,0,239,241],
[265,257,263,249,276,250,269,258,269,263,261,0,270],
[241,226,243,236,241,239,260,252,243,237,259,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 193, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,247,253,242,249,252,235,247,238,238,231,226],
[257,0,276,252,243,246,249,233,238,237,240,231,209],
[253,224,0,240,239,241,247,230,243,212,221,226,223],
[247,248,260,0,252,266,259,237,244,236,232,229,234],
[258,257,261,248,0,256,254,231,257,239,248,246,249],
[251,254,259,234,244,0,266,241,253,249,223,231,231],
[248,251,253,241,246,234,0,225,248,235,213,229,228],
[265,267,270,263,269,259,275,0,260,258,254,236,237],
[253,262,257,256,243,247,252,240,0,242,247,223,230],
[262,263,288,264,261,251,265,242,258,0,251,245,250],
[262,260,279,268,252,277,287,246,253,249,0,255,248],
[269,269,274,271,254,269,271,264,277,255,245,0,251],
[274,291,277,266,251,269,272,263,270,250,252,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 194, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,263,269,268,278,274,276,279,268,270,247,265],
[221,0,245,246,261,262,253,254,259,241,256,231,250],
[237,255,0,261,265,262,259,248,269,241,267,252,238],
[231,254,239,0,251,261,269,246,269,248,256,235,240],
[232,239,235,249,0,267,265,237,245,226,247,219,242],
[222,238,238,239,233,0,249,240,249,235,244,228,234],
[226,247,241,231,235,251,0,251,255,225,257,226,221],
[224,246,252,254,263,260,249,0,262,247,252,232,251],
[221,241,231,231,255,251,245,238,0,227,254,233,240],
[232,259,259,252,274,265,275,253,273,0,261,234,260],
[230,244,233,244,253,256,243,248,246,239,0,224,251],
[253,269,248,265,281,272,274,268,267,266,276,0,280],
[235,250,262,260,258,266,279,249,260,240,249,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 195, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,261,261,262,249,265,249,259,248,273,276,245],
[242,0,258,255,258,255,258,257,274,260,273,256,246],
[239,242,0,238,258,236,245,230,253,237,262,250,233],
[239,245,262,0,249,228,254,257,260,245,261,271,247],
[238,242,242,251,0,244,258,251,251,247,261,265,260],
[251,245,264,272,256,0,260,247,259,248,247,292,246],
[235,242,255,246,242,240,0,249,239,222,254,257,251],
[251,243,270,243,249,253,251,0,249,232,258,253,247],
[241,226,247,240,249,241,261,251,0,233,251,245,240],
[252,240,263,255,253,252,278,268,267,0,263,270,258],
[227,227,238,239,239,253,246,242,249,237,0,256,235],
[224,244,250,229,235,208,243,247,255,230,244,0,251],
[255,254,267,253,240,254,249,253,260,242,265,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 196, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,248,229,239,236,238,223,233,237,229,247,248],
[268,0,260,244,254,250,246,250,259,262,238,252,262],
[252,240,0,240,232,253,252,242,252,262,237,253,252],
[271,256,260,0,246,253,253,231,266,257,236,254,268],
[261,246,268,254,0,249,261,233,250,249,234,238,265],
[264,250,247,247,251,0,257,240,256,249,233,271,260],
[262,254,248,247,239,243,0,229,251,253,227,255,261],
[277,250,258,269,267,260,271,0,263,263,250,280,270],
[267,241,248,234,250,244,249,237,0,247,243,248,248],
[263,238,238,243,251,251,247,237,253,0,219,247,262],
[271,262,263,264,266,267,273,250,257,281,0,282,264],
[253,248,247,246,262,229,245,220,252,253,218,0,271],
[252,238,248,232,235,240,239,230,252,238,236,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 197, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,260,235,255,245,265,256,281,257,235,249,237],
[253,0,233,242,253,266,294,265,278,235,252,255,250],
[240,267,0,230,244,245,283,239,266,244,233,259,246],
[265,258,270,0,274,249,288,275,262,262,251,256,273],
[245,247,256,226,0,255,270,256,254,250,235,258,240],
[255,234,255,251,245,0,286,254,256,234,208,242,239],
[235,206,217,212,230,214,0,229,235,218,233,227,225],
[244,235,261,225,244,246,271,0,260,253,232,268,255],
[219,222,234,238,246,244,265,240,0,229,228,223,231],
[243,265,256,238,250,266,282,247,271,0,264,276,255],
[265,248,267,249,265,292,267,268,272,236,0,267,242],
[251,245,241,244,242,258,273,232,277,224,233,0,246],
[263,250,254,227,260,261,275,245,269,245,258,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 198, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,263,254,261,266,300,258,314,256,245,282,307],
[214,0,228,257,257,238,259,242,267,224,253,238,262],
[237,272,0,251,279,257,268,240,283,255,238,227,258],
[246,243,249,0,252,265,267,251,286,242,244,234,276],
[239,243,221,248,0,236,260,246,258,239,249,247,258],
[234,262,243,235,264,0,283,236,248,237,240,248,272],
[200,241,232,233,240,217,0,216,264,230,225,240,258],
[242,258,260,249,254,264,284,0,269,256,236,256,255],
[186,233,217,214,242,252,236,231,0,205,236,234,256],
[244,276,245,258,261,263,270,244,295,0,269,266,287],
[255,247,262,256,251,260,275,264,264,231,0,244,265],
[218,262,273,266,253,252,260,244,266,234,256,0,275],
[193,238,242,224,242,228,242,245,244,213,235,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 199, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,259,227,260,251,248,240,242,248,245,245,260],
[258,0,238,229,247,243,235,240,231,238,241,237,255],
[241,262,0,237,253,247,238,244,247,249,263,260,269],
[273,271,263,0,260,267,250,245,264,254,264,259,265],
[240,253,247,240,0,254,227,230,230,259,247,246,254],
[249,257,253,233,246,0,233,249,253,243,225,248,267],
[252,265,262,250,273,267,0,246,254,260,267,250,259],
[260,260,256,255,270,251,254,0,249,255,255,237,262],
[258,269,253,236,270,247,246,251,0,260,263,238,268],
[252,262,251,246,241,257,240,245,240,0,261,222,254],
[255,259,237,236,253,275,233,245,237,239,0,251,255],
[255,263,240,241,254,252,250,263,262,278,249,0,275],
[240,245,231,235,246,233,241,238,232,246,245,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 500, 200, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/me/me_13_500.csv", index=False, header=False)
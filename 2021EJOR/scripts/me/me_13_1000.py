
import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,507,498,465,475,475,471,527,461,508,518,479,435],
[493,0,478,480,472,499,488,520,469,460,511,494,456],
[502,522,0,488,486,497,489,526,475,490,503,501,482],
[535,520,512,0,528,497,547,541,522,495,537,499,494],
[525,528,514,472,0,490,500,542,498,464,550,480,503],
[525,501,503,503,510,0,491,551,521,484,544,521,488],
[529,512,511,453,500,509,0,517,459,513,542,504,498],
[473,480,474,459,458,449,483,0,464,447,515,468,465],
[539,531,525,478,502,479,541,536,0,486,564,505,501],
[492,540,510,505,536,516,487,553,514,0,556,523,514],
[482,489,497,463,450,456,458,485,436,444,0,446,431],
[521,506,499,501,520,479,496,532,495,477,554,0,510],
[565,544,518,506,497,512,502,535,499,486,569,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 1, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,499,516,520,588,533,507,518,578,544,524,600],
[500,0,502,464,493,521,518,506,520,548,519,557,535],
[501,498,0,479,510,543,526,492,502,573,534,518,567],
[484,536,521,0,509,554,508,500,498,573,518,545,575],
[480,507,490,491,0,555,530,510,520,588,513,546,531],
[412,479,457,446,445,0,483,509,456,525,475,494,488],
[467,482,474,492,470,517,0,482,490,523,510,521,568],
[493,494,508,500,490,491,518,0,501,561,515,533,548],
[482,480,498,502,480,544,510,499,0,600,546,511,554],
[422,452,427,427,412,475,477,439,400,0,501,489,483],
[456,481,466,482,487,525,490,485,454,499,0,510,580],
[476,443,482,455,454,506,479,467,489,511,490,0,508],
[400,465,433,425,469,512,432,452,446,517,420,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 2, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,653,538,584,528,482,701,543,451,512,584,527,484],
[347,0,452,493,344,361,456,426,336,360,345,417,403],
[462,548,0,466,450,469,574,550,449,500,436,453,551],
[416,507,534,0,469,411,482,538,492,471,474,445,512],
[472,656,550,531,0,457,622,580,462,478,459,438,492],
[518,639,531,589,543,0,598,521,543,521,540,490,616],
[299,544,426,518,378,402,0,485,444,423,428,451,431],
[457,574,450,462,420,479,515,0,479,415,488,518,481],
[549,664,551,508,538,457,556,521,0,407,580,576,576],
[488,640,500,529,522,479,577,585,593,0,521,476,539],
[416,655,564,526,541,460,572,512,420,479,0,539,563],
[473,583,547,555,562,510,549,482,424,524,461,0,556],
[516,597,449,488,508,384,569,519,424,461,437,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 3, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,498,492,495,509,503,483,518,493,543,479,465],
[509,0,512,508,496,529,483,530,519,507,524,495,504],
[502,488,0,499,486,522,525,491,526,495,514,503,467],
[508,492,501,0,492,509,478,493,508,481,499,488,492],
[505,504,514,508,0,523,498,509,501,493,508,498,490],
[491,471,478,491,477,0,463,498,515,480,503,508,459],
[497,517,475,522,502,537,0,478,531,515,544,513,497],
[517,470,509,507,491,502,522,0,541,493,520,493,490],
[482,481,474,492,499,485,469,459,0,467,484,482,469],
[507,493,505,519,507,520,485,507,533,0,526,514,469],
[457,476,486,501,492,497,456,480,516,474,0,498,456],
[521,505,497,512,502,492,487,507,518,486,502,0,483],
[535,496,533,508,510,541,503,510,531,531,544,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 4, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,469,500,528,498,498,504,498,519,484,496,502],
[528,0,515,503,531,570,556,517,527,544,498,530,526],
[531,485,0,506,526,520,505,515,512,514,502,517,515],
[500,497,494,0,527,501,503,516,503,501,498,519,521],
[472,469,474,473,0,494,475,467,494,476,472,499,490],
[502,430,480,499,506,0,513,497,485,479,499,509,494],
[502,444,495,497,525,487,0,487,516,510,471,494,493],
[496,483,485,484,533,503,513,0,511,506,479,506,500],
[502,473,488,497,506,515,484,489,0,517,470,494,499],
[481,456,486,499,524,521,490,494,483,0,460,535,503],
[516,502,498,502,528,501,529,521,530,540,0,508,527],
[504,470,483,481,501,491,506,494,506,465,492,0,505],
[498,474,485,479,510,506,507,500,501,497,473,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 5, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,477,458,451,482,490,475,491,468,497,481,500],
[546,0,512,500,498,547,528,493,524,514,524,524,546],
[523,488,0,471,499,520,518,492,497,508,499,530,539],
[542,500,529,0,503,532,511,486,523,512,508,537,543],
[549,502,501,497,0,509,515,495,525,490,510,532,539],
[518,453,480,468,491,0,488,447,512,479,514,498,522],
[510,472,482,489,485,512,0,497,513,493,499,502,522],
[525,507,508,514,505,553,503,0,513,482,537,523,528],
[509,476,503,477,475,488,487,487,0,476,497,496,517],
[532,486,492,488,510,521,507,518,524,0,500,534,527],
[503,476,501,492,490,486,501,463,503,500,0,501,509],
[519,476,470,463,468,502,498,477,504,466,499,0,528],
[500,454,461,457,461,478,478,472,483,473,491,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 6, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,500,546,499,520,498,518,508,525,521,501,490],
[493,0,515,525,489,487,515,552,487,529,496,513,494],
[500,485,0,529,510,507,518,496,500,504,535,485,527],
[454,475,471,0,487,502,489,461,452,461,486,478,477],
[501,511,490,513,0,539,500,517,466,537,521,525,503],
[480,513,493,498,461,0,495,521,473,551,574,485,537],
[502,485,482,511,500,505,0,529,471,545,496,498,515],
[482,448,504,539,483,479,471,0,470,494,495,463,498],
[492,513,500,548,534,527,529,530,0,527,532,516,506],
[475,471,496,539,463,449,455,506,473,0,489,468,493],
[479,504,465,514,479,426,504,505,468,511,0,489,519],
[499,487,515,522,475,515,502,537,484,532,511,0,512],
[510,506,473,523,497,463,485,502,494,507,481,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 7, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,483,495,480,495,482,475,491,464,505,468,474],
[517,0,495,494,504,505,512,472,505,532,528,485,518],
[517,505,0,484,495,503,504,507,486,528,527,489,512],
[505,506,516,0,480,510,465,520,507,494,515,496,503],
[520,496,505,520,0,506,477,518,495,516,545,492,510],
[505,495,497,490,494,0,490,500,488,519,521,467,513],
[518,488,496,535,523,510,0,514,489,520,563,487,531],
[525,528,493,480,482,500,486,0,533,499,536,516,508],
[509,495,514,493,505,512,511,467,0,506,502,486,491],
[536,468,472,506,484,481,480,501,494,0,511,478,495],
[495,472,473,485,455,479,437,464,498,489,0,461,482],
[532,515,511,504,508,533,513,484,514,522,539,0,508],
[526,482,488,497,490,487,469,492,509,505,518,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 8, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,504,492,541,539,513,493,499,514,541,533,528],
[482,0,497,455,497,502,504,455,501,473,517,516,471],
[496,503,0,489,529,548,500,464,487,491,515,529,489],
[508,545,511,0,528,533,527,519,464,493,516,506,526],
[459,503,471,472,0,503,483,471,460,450,486,488,471],
[461,498,452,467,497,0,503,469,463,477,485,492,480],
[487,496,500,473,517,497,0,483,489,454,519,517,513],
[507,545,536,481,529,531,517,0,526,470,501,528,509],
[501,499,513,536,540,537,511,474,0,483,505,551,512],
[486,527,509,507,550,523,546,530,517,0,528,478,488],
[459,483,485,484,514,515,481,499,495,472,0,508,498],
[467,484,471,494,512,508,483,472,449,522,492,0,477],
[472,529,511,474,529,520,487,491,488,512,502,523,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 9, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,521,487,515,460,461,474,501,499,464,497,518],
[505,0,537,533,507,504,470,516,532,510,499,512,523],
[479,463,0,466,480,475,414,461,492,450,442,450,457],
[513,467,534,0,489,475,440,490,493,469,465,442,511],
[485,493,520,511,0,469,445,524,498,480,442,455,514],
[540,496,525,525,531,0,470,493,451,514,481,497,506],
[539,530,586,560,555,530,0,550,527,497,517,539,544],
[526,484,539,510,476,507,450,0,476,504,506,502,520],
[499,468,508,507,502,549,473,524,0,472,486,499,513],
[501,490,550,531,520,486,503,496,528,0,488,483,525],
[536,501,558,535,558,519,483,494,514,512,0,500,548],
[503,488,550,558,545,503,461,498,501,517,500,0,514],
[482,477,543,489,486,494,456,480,487,475,452,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 10, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,468,556,522,478,484,459,492,512,495,496,490],
[517,0,432,482,477,479,521,449,492,475,537,482,505],
[532,568,0,518,531,497,508,498,527,508,553,524,511],
[444,518,482,0,508,516,533,514,528,472,468,511,510],
[478,523,469,492,0,483,481,476,482,483,502,527,529],
[522,521,503,484,517,0,482,528,561,484,516,543,555],
[516,479,492,467,519,518,0,520,534,484,477,520,515],
[541,551,502,486,524,472,480,0,514,484,533,534,492],
[508,508,473,472,518,439,466,486,0,464,481,458,517],
[488,525,492,528,517,516,516,516,536,0,513,534,533],
[505,463,447,532,498,484,523,467,519,487,0,491,493],
[504,518,476,489,473,457,480,466,542,466,509,0,526],
[510,495,489,490,471,445,485,508,483,467,507,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 11, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,543,514,491,554,525,589,502,489,479,526,530],
[482,0,549,501,532,480,516,522,521,527,501,509,493],
[457,451,0,512,476,469,504,501,463,485,470,491,491],
[486,499,488,0,471,482,520,526,451,497,443,536,527],
[509,468,524,529,0,489,495,534,496,501,475,462,505],
[446,520,531,518,511,0,501,540,471,467,489,520,531],
[475,484,496,480,505,499,0,521,511,484,457,483,509],
[411,478,499,474,466,460,479,0,438,481,393,480,446],
[498,479,537,549,504,529,489,562,0,498,477,485,520],
[511,473,515,503,499,533,516,519,502,0,428,507,526],
[521,499,530,557,525,511,543,607,523,572,0,552,535],
[474,491,509,464,538,480,517,520,515,493,448,0,496],
[470,507,509,473,495,469,491,554,480,474,465,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 12, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,534,452,576,438,523,532,458,497,490,527,502,445],
[466,0,458,567,489,509,454,538,551,471,483,509,417],
[548,542,0,552,453,509,533,471,526,475,553,493,514],
[424,433,448,0,396,439,448,442,509,426,429,433,412],
[562,511,547,604,0,482,575,635,597,588,601,582,521],
[477,491,491,561,518,0,459,488,502,478,527,492,473],
[468,546,467,552,425,541,0,434,561,468,530,502,433],
[542,462,529,558,365,512,566,0,517,479,540,510,455],
[503,449,474,491,403,498,439,483,0,435,481,498,408],
[510,529,525,574,412,522,532,521,565,0,569,531,444],
[473,517,447,571,399,473,470,460,519,431,0,479,432],
[498,491,507,567,418,508,498,490,502,469,521,0,479],
[555,583,486,588,479,527,567,545,592,556,568,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 13, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,509,594,519,516,520,505,511,507,526,499,500],
[484,0,503,526,509,534,528,497,533,487,548,509,495],
[491,497,0,542,481,512,528,523,457,470,524,492,537],
[406,474,458,0,529,537,507,526,491,471,505,517,510],
[481,491,519,471,0,540,525,524,443,473,499,505,498],
[484,466,488,463,460,0,509,495,448,450,547,525,474],
[480,472,472,493,475,491,0,522,462,465,513,468,498],
[495,503,477,474,476,505,478,0,459,484,491,519,488],
[489,467,543,509,557,552,538,541,0,488,528,541,524],
[493,513,530,529,527,550,535,516,512,0,501,580,510],
[474,452,476,495,501,453,487,509,472,499,0,509,455],
[501,491,508,483,495,475,532,481,459,420,491,0,472],
[500,505,463,490,502,526,502,512,476,490,545,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 14, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,473,473,458,476,501,497,482,466,499,474,479],
[496,0,469,474,464,474,507,504,497,495,520,493,471],
[527,531,0,498,489,492,506,529,502,527,522,514,520],
[527,526,502,0,483,472,523,516,480,489,522,503,490],
[542,536,511,517,0,480,541,513,512,517,525,507,489],
[524,526,508,528,520,0,535,518,510,510,534,496,515],
[499,493,494,477,459,465,0,500,478,464,486,481,485],
[503,496,471,484,487,482,500,0,478,476,485,466,463],
[518,503,498,520,488,490,522,522,0,486,526,496,493],
[534,505,473,511,483,490,536,524,514,0,507,476,499],
[501,480,478,478,475,466,514,515,474,493,0,476,485],
[526,507,486,497,493,504,519,534,504,524,524,0,495],
[521,529,480,510,511,485,515,537,507,501,515,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 15, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,490,474,504,489,502,487,480,513,460,470,501],
[532,0,503,540,522,532,536,535,493,523,515,527,509],
[510,497,0,484,508,522,506,522,465,515,464,489,509],
[526,460,516,0,495,527,509,511,458,518,497,481,510],
[496,478,492,505,0,509,509,523,480,501,499,485,509],
[511,468,478,473,491,0,492,511,464,505,492,478,484],
[498,464,494,491,491,508,0,504,453,501,480,477,473],
[513,465,478,489,477,489,496,0,462,489,496,496,480],
[520,507,535,542,520,536,547,538,0,542,499,530,536],
[487,477,485,482,499,495,499,511,458,0,489,484,478],
[540,485,536,503,501,508,520,504,501,511,0,502,517],
[530,473,511,519,515,522,523,504,470,516,498,0,494],
[499,491,491,490,491,516,527,520,464,522,483,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 16, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,464,494,506,516,441,446,503,469,461,491,458],
[555,0,494,520,548,528,476,515,545,538,504,538,513],
[536,506,0,548,564,537,490,492,519,512,484,523,494],
[506,480,452,0,525,495,466,482,489,488,457,502,477],
[494,452,436,475,0,497,445,472,490,480,457,494,460],
[484,472,463,505,503,0,437,467,467,476,501,473,482],
[559,524,510,534,555,563,0,528,548,517,496,537,522],
[554,485,508,518,528,533,472,0,524,491,494,501,527],
[497,455,481,511,510,533,452,476,0,483,472,523,461],
[531,462,488,512,520,524,483,509,517,0,479,528,506],
[539,496,516,543,543,499,504,506,528,521,0,524,494],
[509,462,477,498,506,527,463,499,477,472,476,0,485],
[542,487,506,523,540,518,478,473,539,494,506,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 17, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,498,467,427,486,485,476,548,516,480,507,529],
[530,0,564,463,469,469,526,501,526,529,564,493,538],
[502,436,0,435,432,515,481,450,484,514,498,492,493],
[533,537,565,0,477,513,486,501,557,595,555,600,505],
[573,531,568,523,0,519,516,457,531,573,562,543,535],
[514,531,485,487,481,0,478,460,536,543,524,584,594],
[515,474,519,514,484,522,0,476,566,580,500,525,509],
[524,499,550,499,543,540,524,0,566,585,524,582,587],
[452,474,516,443,469,464,434,434,0,493,521,437,459],
[484,471,486,405,427,457,420,415,507,0,445,504,493],
[520,436,502,445,438,476,500,476,479,555,0,541,524],
[493,507,508,400,457,416,475,418,563,496,459,0,534],
[471,462,507,495,465,406,491,413,541,507,476,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 18, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,540,546,523,513,533,520,496,511,541,527,546,544],
[460,0,498,487,486,507,483,505,484,537,488,523,491],
[454,502,0,469,469,473,469,474,463,487,489,509,473],
[477,513,531,0,502,518,518,507,523,525,507,534,521],
[487,514,531,498,0,517,497,501,492,526,502,538,509],
[467,493,527,482,483,0,496,516,490,526,502,535,510],
[480,517,531,482,503,504,0,496,501,523,501,522,532],
[504,495,526,493,499,484,504,0,515,545,497,541,513],
[489,516,537,477,508,510,499,485,0,506,518,544,510],
[459,463,513,475,474,474,477,455,494,0,470,504,473],
[473,512,511,493,498,498,499,503,482,530,0,532,515],
[454,477,491,466,462,465,478,459,456,496,468,0,486],
[456,509,527,479,491,490,468,487,490,527,485,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 19, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,500,513,499,482,491,513,476,491,499,494,496],
[499,0,501,504,518,468,512,512,490,506,494,504,505],
[500,499,0,475,498,487,493,518,479,488,481,494,514],
[487,496,525,0,505,478,508,534,483,472,501,491,491],
[501,482,502,495,0,487,509,506,478,502,515,494,509],
[518,532,513,522,513,0,507,535,508,509,509,499,519],
[509,488,507,492,491,493,0,511,490,489,501,495,483],
[487,488,482,466,494,465,489,0,453,477,465,469,473],
[524,510,521,517,522,492,510,547,0,533,525,520,539],
[509,494,512,528,498,491,511,523,467,0,514,507,498],
[501,506,519,499,485,491,499,535,475,486,0,498,504],
[506,496,506,509,506,501,505,531,480,493,502,0,514],
[504,495,486,509,491,481,517,527,461,502,496,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 20, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,534,515,487,541,530,496,490,500,509,514,544,508],
[466,0,507,501,515,502,483,478,503,497,464,512,441],
[485,493,0,512,571,492,510,515,481,495,489,514,518],
[513,499,488,0,541,524,467,501,496,487,486,515,480],
[459,485,429,459,0,508,456,484,469,490,471,473,434],
[470,498,508,476,492,0,522,493,486,474,479,523,473],
[504,517,490,533,544,478,0,506,509,475,470,505,486],
[510,522,485,499,516,507,494,0,476,450,483,511,486],
[500,497,519,504,531,514,491,524,0,464,523,491,496],
[491,503,505,513,510,526,525,550,536,0,545,513,467],
[486,536,511,514,529,521,530,517,477,455,0,509,480],
[456,488,486,485,527,477,495,489,509,487,491,0,474],
[492,559,482,520,566,527,514,514,504,533,520,526,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 21, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,509,517,506,491,516,534,504,521,520,471,518],
[500,0,465,504,450,468,509,557,475,468,471,457,500],
[491,535,0,476,475,493,494,545,466,511,498,461,491],
[483,496,524,0,506,513,509,544,481,510,509,499,530],
[494,550,525,494,0,506,550,561,484,513,539,479,514],
[509,532,507,487,494,0,534,566,516,525,513,464,523],
[484,491,506,491,450,466,0,506,467,486,476,439,469],
[466,443,455,456,439,434,494,0,474,494,467,444,461],
[496,525,534,519,516,484,533,526,0,524,508,523,515],
[479,532,489,490,487,475,514,506,476,0,514,440,520],
[480,529,502,491,461,487,524,533,492,486,0,446,525],
[529,543,539,501,521,536,561,556,477,560,554,0,500],
[482,500,509,470,486,477,531,539,485,480,475,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 22, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,519,482,514,520,481,512,525,502,506,483,536,519],
[481,0,533,460,463,501,502,532,478,537,463,537,483],
[518,467,0,492,495,549,519,543,499,548,502,558,527],
[486,540,508,0,467,521,558,538,550,543,498,573,490],
[480,537,505,533,0,498,571,519,520,561,497,502,528],
[519,499,451,479,502,0,535,565,521,533,456,570,541],
[488,498,481,442,429,465,0,473,476,481,434,477,471],
[475,468,457,462,481,435,527,0,479,526,498,526,467],
[498,522,501,450,480,479,524,521,0,494,459,479,509],
[494,463,452,457,439,467,519,474,506,0,454,511,507],
[517,537,498,502,503,544,566,502,541,546,0,561,545],
[464,463,442,427,498,430,523,474,521,489,439,0,469],
[481,517,473,510,472,459,529,533,491,493,455,531,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 23, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,495,501,471,497,483,530,513,501,518,489,512],
[506,0,497,477,472,474,473,521,507,491,490,487,480],
[505,503,0,457,459,491,471,522,507,487,504,492,480],
[499,523,543,0,493,510,518,547,516,524,514,533,515],
[529,528,541,507,0,527,484,541,536,509,548,523,507],
[503,526,509,490,473,0,495,540,509,509,513,535,496],
[517,527,529,482,516,505,0,553,535,512,521,522,509],
[470,479,478,453,459,460,447,0,461,469,485,485,477],
[487,493,493,484,464,491,465,539,0,485,495,506,492],
[499,509,513,476,491,491,488,531,515,0,508,525,514],
[482,510,496,486,452,487,479,515,505,492,0,476,509],
[511,513,508,467,477,465,478,515,494,475,524,0,500],
[488,520,520,485,493,504,491,523,508,486,491,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 24, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,459,468,505,493,485,491,494,524,489,527,555],
[483,0,473,458,437,475,492,500,489,477,517,453,526],
[541,527,0,536,476,492,508,516,508,506,539,513,527],
[532,542,464,0,462,505,477,515,498,455,497,504,539],
[495,563,524,538,0,493,501,501,527,499,528,517,572],
[507,525,508,495,507,0,486,490,479,472,493,483,521],
[515,508,492,523,499,514,0,509,513,478,511,493,547],
[509,500,484,485,499,510,491,0,504,489,519,474,534],
[506,511,492,502,473,521,487,496,0,491,515,471,537],
[476,523,494,545,501,528,522,511,509,0,526,481,510],
[511,483,461,503,472,507,489,481,485,474,0,493,506],
[473,547,487,496,483,517,507,526,529,519,507,0,535],
[445,474,473,461,428,479,453,466,463,490,494,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 25, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,503,491,522,493,504,495,493,530,500,506,479],
[501,0,511,498,516,502,503,479,501,534,478,538,487],
[497,489,0,496,502,513,496,486,491,506,495,507,487],
[509,502,504,0,531,533,507,477,521,542,520,540,495],
[478,484,498,469,0,490,488,477,496,503,493,498,482],
[507,498,487,467,510,0,515,490,493,496,497,513,486],
[496,497,504,493,512,485,0,481,495,515,509,513,517],
[505,521,514,523,523,510,519,0,491,535,512,533,504],
[507,499,509,479,504,507,505,509,0,534,506,532,512],
[470,466,494,458,497,504,485,465,466,0,497,517,482],
[500,522,505,480,507,503,491,488,494,503,0,528,514],
[494,462,493,460,502,487,487,467,468,483,472,0,489],
[521,513,513,505,518,514,483,496,488,518,486,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 26, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,492,505,497,475,481,510,527,467,482,516,485],
[532,0,545,512,492,524,490,532,544,500,480,530,507],
[508,455,0,473,512,490,496,513,504,488,492,509,489],
[495,488,527,0,524,535,505,533,537,525,523,490,504],
[503,508,488,476,0,509,502,516,491,495,489,489,505],
[525,476,510,465,491,0,486,517,503,490,477,514,480],
[519,510,504,495,498,514,0,498,519,495,519,511,502],
[490,468,487,467,484,483,502,0,495,462,475,502,493],
[473,456,496,463,509,497,481,505,0,485,490,503,487],
[533,500,512,475,505,510,505,538,515,0,501,511,492],
[518,520,508,477,511,523,481,525,510,499,0,512,506],
[484,470,491,510,511,486,489,498,497,489,488,0,527],
[515,493,511,496,495,520,498,507,513,508,494,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 27, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,560,469,572,438,538,517,570,532,486,499,578,584],
[440,0,482,470,453,456,437,467,469,493,428,471,518],
[531,518,0,504,502,508,503,485,505,468,463,512,565],
[428,530,496,0,437,472,500,499,474,486,435,538,474],
[562,547,498,563,0,489,591,522,495,527,459,628,542],
[462,544,492,528,511,0,513,468,586,516,492,532,546],
[483,563,497,500,409,487,0,495,531,476,458,490,566],
[430,533,515,501,478,532,505,0,473,436,478,533,583],
[468,531,495,526,505,414,469,527,0,427,430,448,526],
[514,507,532,514,473,484,524,564,573,0,528,586,576],
[501,572,537,565,541,508,542,522,570,472,0,463,562],
[422,529,488,462,372,468,510,467,552,414,537,0,489],
[416,482,435,526,458,454,434,417,474,424,438,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 28, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,494,505,504,511,522,521,499,516,522,525,505],
[501,0,493,499,508,506,502,518,523,496,493,528,514],
[506,507,0,491,503,505,478,524,491,490,500,521,504],
[495,501,509,0,527,522,519,529,519,502,529,525,520],
[496,492,497,473,0,503,513,523,472,483,494,503,496],
[489,494,495,478,497,0,508,495,490,488,489,508,514],
[478,498,522,481,487,492,0,500,511,493,495,524,507],
[479,482,476,471,477,505,500,0,485,477,478,510,477],
[501,477,509,481,528,510,489,515,0,496,492,527,509],
[484,504,510,498,517,512,507,523,504,0,500,518,513],
[478,507,500,471,506,511,505,522,508,500,0,511,514],
[475,472,479,475,497,492,476,490,473,482,489,0,483],
[495,486,496,480,504,486,493,523,491,487,486,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 29, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,514,649,593,600,644,554,553,664,650,554,509],
[539,0,560,623,583,569,607,603,530,510,571,655,428],
[486,440,0,445,577,427,519,557,407,526,438,538,431],
[351,377,555,0,419,454,633,483,434,400,465,452,361],
[407,417,423,581,0,388,577,488,400,390,410,496,513],
[400,431,573,546,612,0,584,537,621,538,527,590,411],
[356,393,481,367,423,416,0,529,426,423,477,444,349],
[446,397,443,517,512,463,471,0,427,404,356,555,354],
[447,470,593,566,600,379,574,573,0,505,564,534,501],
[336,490,474,600,610,462,577,596,495,0,557,522,542],
[350,429,562,535,590,473,523,644,436,443,0,587,436],
[446,345,462,548,504,410,556,445,466,478,413,0,440],
[491,572,569,639,487,589,651,646,499,458,564,560,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 30, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,485,546,542,505,528,506,499,549,492,534,528],
[497,0,486,538,504,480,492,478,505,526,494,482,499],
[515,514,0,531,534,498,503,492,491,525,501,501,512],
[454,462,469,0,489,443,470,454,461,505,449,468,483],
[458,496,466,511,0,458,450,478,476,487,476,488,492],
[495,520,502,557,542,0,513,526,509,549,511,503,540],
[472,508,497,530,550,487,0,496,488,514,502,492,527],
[494,522,508,546,522,474,504,0,522,518,510,519,539],
[501,495,509,539,524,491,512,478,0,549,495,498,527],
[451,474,475,495,513,451,486,482,451,0,476,496,459],
[508,506,499,551,524,489,498,490,505,524,0,539,521],
[466,518,499,532,512,497,508,481,502,504,461,0,510],
[472,501,488,517,508,460,473,461,473,541,479,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 31, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,523,504,513,525,504,514,515,513,498,506,482,514],
[477,0,484,479,486,498,464,501,514,496,499,481,492],
[496,516,0,522,505,534,491,524,503,508,503,516,513],
[487,521,478,0,489,495,476,515,495,517,491,506,504],
[475,514,495,511,0,505,491,512,482,494,505,480,499],
[496,502,466,505,495,0,480,525,508,512,494,483,506],
[486,536,509,524,509,520,0,521,504,518,517,501,512],
[485,499,476,485,488,475,479,0,483,515,494,462,499],
[487,486,497,505,518,492,496,517,0,526,495,466,500],
[502,504,492,483,506,488,482,485,474,0,527,504,503],
[494,501,497,509,495,506,483,506,505,473,0,478,493],
[518,519,484,494,520,517,499,538,534,496,522,0,530],
[486,508,487,496,501,494,488,501,500,497,507,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 32, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,489,519,527,500,484,489,517,504,525,495,483],
[482,0,437,492,489,464,476,461,479,485,454,480,465],
[511,563,0,494,544,499,511,481,508,516,506,492,503],
[481,508,506,0,542,498,528,482,528,503,498,467,515],
[473,511,456,458,0,485,492,470,471,494,483,480,474],
[500,536,501,502,515,0,495,503,518,547,502,490,509],
[516,524,489,472,508,505,0,446,495,525,501,480,505],
[511,539,519,518,530,497,554,0,531,534,524,512,527],
[483,521,492,472,529,482,505,469,0,501,493,482,475],
[496,515,484,497,506,453,475,466,499,0,472,474,459],
[475,546,494,502,517,498,499,476,507,528,0,472,497],
[505,520,508,533,520,510,520,488,518,526,528,0,510],
[517,535,497,485,526,491,495,473,525,541,503,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 33, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,545,535,524,479,470,431,469,502,431,469,579,378],
[455,0,425,339,478,374,400,400,499,453,434,558,446],
[465,575,0,380,563,347,541,497,490,418,551,477,430],
[476,661,620,0,548,513,551,423,697,479,523,609,530],
[521,522,437,452,0,437,515,530,427,480,518,587,535],
[530,626,653,487,563,0,565,546,642,518,538,571,484],
[569,600,459,449,485,435,0,436,552,448,411,444,548],
[531,600,503,577,470,454,564,0,605,614,510,599,468],
[498,501,510,303,573,358,448,395,0,394,548,586,518],
[569,547,582,521,520,482,552,386,606,0,502,546,571],
[531,566,449,477,482,462,589,490,452,498,0,614,444],
[421,442,523,391,413,429,556,401,414,454,386,0,321],
[622,554,570,470,465,516,452,532,482,429,556,679,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 34, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,531,503,480,495,501,486,504,498,499,495,500,510],
[469,0,501,483,495,502,483,491,500,473,507,476,507],
[497,499,0,463,499,487,509,508,496,472,497,490,505],
[520,517,537,0,508,532,525,528,511,513,532,497,528],
[505,505,501,492,0,516,496,480,491,488,510,491,495],
[499,498,513,468,484,0,484,502,489,472,487,480,494],
[514,517,491,475,504,516,0,504,493,478,519,481,508],
[496,509,492,472,520,498,496,0,508,484,524,501,516],
[502,500,504,489,509,511,507,492,0,482,484,481,502],
[501,527,528,487,512,528,522,516,518,0,531,508,504],
[505,493,503,468,490,513,481,476,516,469,0,504,512],
[500,524,510,503,509,520,519,499,519,492,496,0,507],
[490,493,495,472,505,506,492,484,498,496,488,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 35, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,531,515,531,533,547,521,520,544,522,542,502],
[501,0,527,501,521,512,560,498,513,513,509,521,499],
[469,473,0,509,495,497,498,488,458,481,467,510,468],
[485,499,491,0,484,513,526,490,503,536,514,524,482],
[469,479,505,516,0,515,544,478,473,500,475,508,475],
[467,488,503,487,485,0,504,486,498,486,469,513,461],
[453,440,502,474,456,496,0,463,509,490,472,503,458],
[479,502,512,510,522,514,537,0,502,538,480,522,482],
[480,487,542,497,527,502,491,498,0,494,499,524,477],
[456,487,519,464,500,514,510,462,506,0,489,520,475],
[478,491,533,486,525,531,528,520,501,511,0,502,483],
[458,479,490,476,492,487,497,478,476,480,498,0,456],
[498,501,532,518,525,539,542,518,523,525,517,544,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 36, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,521,501,535,537,529,477,535,547,551,500,487],
[489,0,483,509,470,508,506,483,495,533,535,511,478],
[479,517,0,512,482,495,489,481,502,513,551,513,473],
[499,491,488,0,506,507,482,472,550,538,517,526,477],
[465,530,518,494,0,516,520,492,513,510,527,510,489],
[463,492,505,493,484,0,495,472,508,507,520,479,468],
[471,494,511,518,480,505,0,481,536,525,558,470,477],
[523,517,519,528,508,528,519,0,511,540,535,493,511],
[465,505,498,450,487,492,464,489,0,484,508,495,474],
[453,467,487,462,490,493,475,460,516,0,516,496,492],
[449,465,449,483,473,480,442,465,492,484,0,444,465],
[500,489,487,474,490,521,530,507,505,504,556,0,482],
[513,522,527,523,511,532,523,489,526,508,535,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 37, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,520,576,557,520,562,573,517,522,535,497,522,594],
[480,0,550,558,537,529,543,490,516,530,504,525,544],
[424,450,0,506,482,503,507,505,458,524,480,487,516],
[443,442,494,0,477,504,514,432,440,505,491,532,487],
[480,463,518,523,0,533,507,507,465,571,477,466,530],
[438,471,497,496,467,0,553,467,440,495,468,469,496],
[427,457,493,486,493,447,0,367,481,493,478,465,487],
[483,510,495,568,493,533,633,0,473,560,499,565,548],
[478,484,542,560,535,560,519,527,0,557,503,537,550],
[465,470,476,495,429,505,507,440,443,0,447,505,541],
[503,496,520,509,523,532,522,501,497,553,0,556,537],
[478,475,513,468,534,531,535,435,463,495,444,0,517],
[406,456,484,513,470,504,513,452,450,459,463,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 38, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,486,503,506,497,516,524,504,502,517,493,499],
[511,0,496,523,502,510,530,516,526,505,527,519,512],
[514,504,0,518,500,506,538,529,503,491,523,507,520],
[497,477,482,0,474,478,498,483,481,463,508,500,482],
[494,498,500,526,0,507,519,524,525,501,542,512,497],
[503,490,494,522,493,0,530,512,510,505,523,526,508],
[484,470,462,502,481,470,0,504,488,483,517,466,507],
[476,484,471,517,476,488,496,0,518,476,516,496,484],
[496,474,497,519,475,490,512,482,0,487,495,508,498],
[498,495,509,537,499,495,517,524,513,0,521,520,509],
[483,473,477,492,458,477,483,484,505,479,0,488,484],
[507,481,493,500,488,474,534,504,492,480,512,0,495],
[501,488,480,518,503,492,493,516,502,491,516,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 39, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,549,464,516,460,498,490,472,495,501,511,487,491],
[451,0,433,470,450,449,471,427,427,396,457,426,430],
[536,567,0,512,534,565,475,513,551,551,514,497,515],
[484,530,488,0,480,475,466,469,484,484,512,501,465],
[540,550,466,520,0,528,505,456,525,535,540,511,495],
[502,551,435,525,472,0,463,422,499,514,504,488,467],
[510,529,525,534,495,537,0,498,517,510,529,517,446],
[528,573,487,531,544,578,502,0,547,548,564,565,503],
[505,573,449,516,475,501,483,453,0,507,512,471,467],
[499,604,449,516,465,486,490,452,493,0,486,497,449],
[489,543,486,488,460,496,471,436,488,514,0,493,488],
[513,574,503,499,489,512,483,435,529,503,507,0,490],
[509,570,485,535,505,533,554,497,533,551,512,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 40, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,513,506,475,480,483,526,549,453,485,464,479,490],
[487,0,497,456,470,441,507,500,484,498,462,475,463],
[494,503,0,489,459,454,530,521,481,460,473,473,497],
[525,544,511,0,516,513,520,555,514,506,486,517,505],
[520,530,541,484,0,509,539,530,502,522,512,510,504],
[517,559,546,487,491,0,502,535,493,513,508,515,513],
[474,493,470,480,461,498,0,517,476,494,456,484,487],
[451,500,479,445,470,465,483,0,469,485,483,476,459],
[547,516,519,486,498,507,524,531,0,518,488,505,497],
[515,502,540,494,478,487,506,515,482,0,476,481,505],
[536,538,527,514,488,492,544,517,512,524,0,516,499],
[521,525,527,483,490,485,516,524,495,519,484,0,489],
[510,537,503,495,496,487,513,541,503,495,501,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 41, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,509,514,497,498,514,554,517,528,535,467,538],
[499,0,509,522,524,470,511,509,501,561,534,488,508],
[491,491,0,551,486,494,476,517,541,546,506,469,487],
[486,478,449,0,495,454,435,478,472,526,510,455,448],
[503,476,514,505,0,468,489,496,514,545,519,479,496],
[502,530,506,546,532,0,505,517,538,555,534,495,508],
[486,489,524,565,511,495,0,560,503,559,534,520,520],
[446,491,483,522,504,483,440,0,483,518,491,445,478],
[483,499,459,528,486,462,497,517,0,533,507,498,507],
[472,439,454,474,455,445,441,482,467,0,486,420,441],
[465,466,494,490,481,466,466,509,493,514,0,443,440],
[533,512,531,545,521,505,480,555,502,580,557,0,520],
[462,492,513,552,504,492,480,522,493,559,560,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 42, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,517,489,505,528,486,465,496,516,474,489,476],
[494,0,495,481,478,482,517,468,473,510,487,478,498],
[483,505,0,499,492,514,490,472,498,517,480,479,505],
[511,519,501,0,495,511,468,495,508,544,506,505,508],
[495,522,508,505,0,516,511,501,508,532,502,491,495],
[472,518,486,489,484,0,491,461,490,494,474,461,474],
[514,483,510,532,489,509,0,491,489,530,503,508,508],
[535,532,528,505,499,539,509,0,502,514,516,470,500],
[504,527,502,492,492,510,511,498,0,523,520,493,487],
[484,490,483,456,468,506,470,486,477,0,474,500,477],
[526,513,520,494,498,526,497,484,480,526,0,513,513],
[511,522,521,495,509,539,492,530,507,500,487,0,498],
[524,502,495,492,505,526,492,500,513,523,487,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 43, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,499,484,462,493,521,484,477,481,501,509,517],
[494,0,513,492,474,481,503,468,488,464,483,506,506],
[501,487,0,464,481,480,490,487,474,463,494,500,488],
[516,508,536,0,505,503,521,482,485,496,515,505,514],
[538,526,519,495,0,481,511,486,477,494,525,518,512],
[507,519,520,497,519,0,503,510,478,495,519,527,518],
[479,497,510,479,489,497,0,480,473,477,483,495,485],
[516,532,513,518,514,490,520,0,491,498,563,529,491],
[523,512,526,515,523,522,527,509,0,527,537,532,493],
[519,536,537,504,506,505,523,502,473,0,523,543,506],
[499,517,506,485,475,481,517,437,463,477,0,498,490],
[491,494,500,495,482,473,505,471,468,457,502,0,491],
[483,494,512,486,488,482,515,509,507,494,510,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 44, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,503,506,527,546,495,505,529,512,543,509,526],
[507,0,496,523,504,530,487,508,504,500,503,493,526],
[497,504,0,516,504,556,502,509,526,512,523,517,523],
[494,477,484,0,490,542,478,508,510,481,494,516,477],
[473,496,496,510,0,502,456,508,512,494,529,487,508],
[454,470,444,458,498,0,466,488,492,456,467,453,456],
[505,513,498,522,544,534,0,537,525,513,521,530,502],
[495,492,491,492,492,512,463,0,517,484,511,504,500],
[471,496,474,490,488,508,475,483,0,484,524,499,486],
[488,500,488,519,506,544,487,516,516,0,522,511,541],
[457,497,477,506,471,533,479,489,476,478,0,480,472],
[491,507,483,484,513,547,470,496,501,489,520,0,500],
[474,474,477,523,492,544,498,500,514,459,528,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 45, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,513,497,500,501,526,478,483,477,471,485,482],
[508,0,487,511,533,500,509,501,504,502,520,507,498],
[487,513,0,486,511,479,486,481,496,477,480,475,454],
[503,489,514,0,504,512,493,478,511,490,517,502,484],
[500,467,489,496,0,503,492,455,512,473,473,442,461],
[499,500,521,488,497,0,471,472,468,484,491,462,460],
[474,491,514,507,508,529,0,479,508,479,486,471,474],
[522,499,519,522,545,528,521,0,536,479,505,501,517],
[517,496,504,489,488,532,492,464,0,512,498,480,502],
[523,498,523,510,527,516,521,521,488,0,489,501,481],
[529,480,520,483,527,509,514,495,502,511,0,495,505],
[515,493,525,498,558,538,529,499,520,499,505,0,511],
[518,502,546,516,539,540,526,483,498,519,495,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 46, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,495,502,490,473,491,491,506,509,502,522,498],
[515,0,517,497,501,493,493,491,501,480,501,521,514],
[505,483,0,489,490,488,493,485,506,468,503,510,490],
[498,503,511,0,506,504,502,498,491,504,502,505,494],
[510,499,510,494,0,522,475,496,530,488,504,529,513],
[527,507,512,496,478,0,511,489,501,497,488,525,497],
[509,507,507,498,525,489,0,511,517,503,512,522,504],
[509,509,515,502,504,511,489,0,499,492,501,512,512],
[494,499,494,509,470,499,483,501,0,467,506,507,510],
[491,520,532,496,512,503,497,508,533,0,546,529,546],
[498,499,497,498,496,512,488,499,494,454,0,499,506],
[478,479,490,495,471,475,478,488,493,471,501,0,486],
[502,486,510,506,487,503,496,488,490,454,494,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 47, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,489,524,524,516,532,500,514,506,530,526,524],
[492,0,477,515,499,518,528,507,513,503,497,512,515],
[511,523,0,498,511,525,552,489,527,530,493,535,506],
[476,485,502,0,492,491,504,475,493,477,475,491,491],
[476,501,489,508,0,509,536,507,495,499,514,514,502],
[484,482,475,509,491,0,538,492,499,491,496,481,497],
[468,472,448,496,464,462,0,458,462,465,483,480,457],
[500,493,511,525,493,508,542,0,496,518,499,494,500],
[486,487,473,507,505,501,538,504,0,464,496,496,477],
[494,497,470,523,501,509,535,482,536,0,497,486,516],
[470,503,507,525,486,504,517,501,504,503,0,508,514],
[474,488,465,509,486,519,520,506,504,514,492,0,466],
[476,485,494,509,498,503,543,500,523,484,486,534,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 48, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,465,495,495,451,503,470,506,515,496,486,455],
[503,0,464,459,488,480,491,486,491,508,496,503,476],
[535,536,0,491,493,506,523,512,523,541,491,512,473],
[505,541,509,0,501,506,521,476,523,533,513,517,505],
[505,512,507,499,0,488,511,499,523,525,477,529,485],
[549,520,494,494,512,0,535,520,531,522,509,524,511],
[497,509,477,479,489,465,0,469,536,497,481,485,447],
[530,514,488,524,501,480,531,0,518,514,508,515,500],
[494,509,477,477,477,469,464,482,0,514,464,510,488],
[485,492,459,467,475,478,503,486,486,0,478,494,478],
[504,504,509,487,523,491,519,492,536,522,0,490,490],
[514,497,488,483,471,476,515,485,490,506,510,0,482],
[545,524,527,495,515,489,553,500,512,522,510,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 49, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,539,518,532,498,459,510,497,518,490,484,521],
[491,0,553,509,533,456,463,511,460,483,524,487,498],
[461,447,0,473,500,461,440,467,444,491,472,465,475],
[482,491,527,0,515,487,453,497,471,486,493,483,487],
[468,467,500,485,0,443,441,483,442,464,483,479,465],
[502,544,539,513,557,0,497,525,482,509,523,510,518],
[541,537,560,547,559,503,0,494,512,540,493,509,505],
[490,489,533,503,517,475,506,0,498,491,512,488,511],
[503,540,556,529,558,518,488,502,0,513,535,522,541],
[482,517,509,514,536,491,460,509,487,0,462,513,506],
[510,476,528,507,517,477,507,488,465,538,0,491,535],
[516,513,535,517,521,490,491,512,478,487,509,0,514],
[479,502,525,513,535,482,495,489,459,494,465,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 50, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,531,524,496,521,508,507,505,497,531,512,502,476],
[469,0,492,502,512,513,496,488,488,502,474,498,476],
[476,508,0,489,524,512,475,492,475,476,483,502,477],
[504,498,511,0,503,512,489,483,501,505,519,502,483],
[479,488,476,497,0,490,493,478,478,508,497,510,473],
[492,487,488,488,510,0,490,492,496,488,477,474,484],
[493,504,525,511,507,510,0,501,510,540,509,532,496],
[495,512,508,517,522,508,499,0,522,521,523,513,476],
[503,512,525,499,522,504,490,478,0,489,508,497,487],
[469,498,524,495,492,512,460,479,511,0,506,499,462],
[488,526,517,481,503,523,491,477,492,494,0,515,507],
[498,502,498,498,490,526,468,487,503,501,485,0,499],
[524,524,523,517,527,516,504,524,513,538,493,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 51, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,423,460,486,423,538,496,484,540,424,425,441],
[528,0,463,419,411,406,475,450,468,517,427,497,396],
[577,537,0,527,483,451,546,531,533,512,564,522,536],
[540,581,473,0,508,465,462,515,512,511,528,484,484],
[514,589,517,492,0,463,512,546,490,530,515,492,421],
[577,594,549,535,537,0,577,528,548,581,521,498,478],
[462,525,454,538,488,423,0,503,545,511,492,454,453],
[504,550,469,485,454,472,497,0,516,595,491,536,441],
[516,532,467,488,510,452,455,484,0,431,453,441,470],
[460,483,488,489,470,419,489,405,569,0,466,441,442],
[576,573,436,472,485,479,508,509,547,534,0,523,557],
[575,503,478,516,508,502,546,464,559,559,477,0,450],
[559,604,464,516,579,522,547,559,530,558,443,550,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 52, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,498,439,492,474,471,449,469,480,529,454,476],
[526,0,536,491,514,514,533,492,507,538,567,481,547],
[502,464,0,453,466,449,487,435,439,489,492,448,463],
[561,509,547,0,514,556,580,498,490,511,519,486,549],
[508,486,534,486,0,466,499,455,510,502,535,451,517],
[526,486,551,444,534,0,497,449,504,461,523,516,471],
[529,467,513,420,501,503,0,474,508,498,522,478,502],
[551,508,565,502,545,551,526,0,511,506,567,500,554],
[531,493,561,510,490,496,492,489,0,531,500,491,454],
[520,462,511,489,498,539,502,494,469,0,531,481,528],
[471,433,508,481,465,477,478,433,500,469,0,399,496],
[546,519,552,514,549,484,522,500,509,519,601,0,567],
[524,453,537,451,483,529,498,446,546,472,504,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 53, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,504,485,522,511,502,493,526,503,513,519,517],
[485,0,474,476,493,482,463,480,507,479,468,490,496],
[496,526,0,501,516,501,504,497,497,523,535,518,516],
[515,524,499,0,521,492,505,492,528,497,520,515,493],
[478,507,484,479,0,480,491,486,493,493,507,490,501],
[489,518,499,508,520,0,495,510,509,507,512,508,501],
[498,537,496,495,509,505,0,509,520,490,502,508,512],
[507,520,503,508,514,490,491,0,534,498,508,512,510],
[474,493,503,472,507,491,480,466,0,495,503,505,498],
[497,521,477,503,507,493,510,502,505,0,509,525,508],
[487,532,465,480,493,488,498,492,497,491,0,504,484],
[481,510,482,485,510,492,492,488,495,475,496,0,489],
[483,504,484,507,499,499,488,490,502,492,516,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 54, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,519,501,546,526,529,538,517,502,537,497,511],
[505,0,549,516,523,530,537,518,489,521,561,501,504],
[481,451,0,477,486,507,477,498,485,459,479,446,450],
[499,484,523,0,520,508,523,525,516,476,507,496,519],
[454,477,514,480,0,478,505,510,449,470,480,476,469],
[474,470,493,492,522,0,524,517,488,500,510,496,494],
[471,463,523,477,495,476,0,511,484,443,502,463,491],
[462,482,502,475,490,483,489,0,468,463,493,482,459],
[483,511,515,484,551,512,516,532,0,486,541,504,492],
[498,479,541,524,530,500,557,537,514,0,527,479,500],
[463,439,521,493,520,490,498,507,459,473,0,461,490],
[503,499,554,504,524,504,537,518,496,521,539,0,475],
[489,496,550,481,531,506,509,541,508,500,510,525,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 55, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,522,489,502,501,468,502,492,537,527,517,513,527],
[478,0,468,555,485,504,503,438,522,505,463,528,490],
[511,532,0,524,476,503,508,533,525,514,471,481,507],
[498,445,476,0,448,438,495,422,491,489,475,518,512],
[499,515,524,552,0,515,560,513,522,525,493,523,500],
[532,496,497,562,485,0,524,519,543,529,496,519,541],
[498,497,492,505,440,476,0,434,492,521,469,498,468],
[508,562,467,578,487,481,566,0,539,557,504,533,516],
[463,478,475,509,478,457,508,461,0,505,484,513,490],
[473,495,486,511,475,471,479,443,495,0,491,511,464],
[483,537,529,525,507,504,531,496,516,509,0,540,520],
[487,472,519,482,477,481,502,467,487,489,460,0,463],
[473,510,493,488,500,459,532,484,510,536,480,537,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 56, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,558,471,522,509,442,541,459,413,441,500,477,440],
[442,0,401,552,526,484,536,426,451,392,533,468,450],
[529,599,0,549,522,542,579,461,417,518,575,516,534],
[478,448,451,0,417,423,476,422,416,423,581,446,452],
[491,474,478,583,0,508,455,436,337,407,523,394,486],
[558,516,458,577,492,0,609,503,436,488,588,581,425],
[459,464,421,524,545,391,0,399,383,338,463,460,330],
[541,574,539,578,564,497,601,0,491,446,580,496,386],
[587,549,583,584,663,564,617,509,0,515,578,614,471],
[559,608,482,577,593,512,662,554,485,0,627,488,454],
[500,467,425,419,477,412,537,420,422,373,0,448,457],
[523,532,484,554,606,419,540,504,386,512,552,0,433],
[560,550,466,548,514,575,670,614,529,546,543,567,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 57, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,498,515,486,642,504,670,537,517,460,495,486],
[570,0,539,548,474,540,546,612,515,520,537,474,611],
[502,461,0,600,545,678,565,699,560,492,456,475,510],
[485,452,400,0,505,515,484,547,493,433,561,426,476],
[514,526,455,495,0,521,502,623,477,551,472,473,450],
[358,460,322,485,479,0,422,536,408,506,473,403,381],
[496,454,435,516,498,578,0,676,482,579,512,542,518],
[330,388,301,453,377,464,324,0,425,343,356,244,384],
[463,485,440,507,523,592,518,575,0,502,548,451,486],
[483,480,508,567,449,494,421,657,498,0,502,408,494],
[540,463,544,439,528,527,488,644,452,498,0,459,503],
[505,526,525,574,527,597,458,756,549,592,541,0,486],
[514,389,490,524,550,619,482,616,514,506,497,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 58, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,531,475,522,498,484,501,510,505,520,500,494,502],
[469,0,467,463,467,455,493,451,497,473,461,478,526],
[525,533,0,509,478,503,500,518,524,482,506,502,517],
[478,537,491,0,491,522,503,522,487,467,493,487,507],
[502,533,522,509,0,522,523,512,480,518,484,520,523],
[516,545,497,478,478,0,487,499,470,503,489,501,539],
[499,507,500,497,477,513,0,482,491,489,480,500,499],
[490,549,482,478,488,501,518,0,481,509,503,492,538],
[495,503,476,513,520,530,509,519,0,503,498,490,515],
[480,527,518,533,482,497,511,491,497,0,514,508,540],
[500,539,494,507,516,511,520,497,502,486,0,489,532],
[506,522,498,513,480,499,500,508,510,492,511,0,547],
[498,474,483,493,477,461,501,462,485,460,468,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 59, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,534,476,459,472,444,451,463,429,512,472,479],
[596,0,600,472,522,495,500,495,504,468,514,492,452],
[466,400,0,469,435,385,467,479,434,441,486,388,491],
[524,528,531,0,467,502,492,532,506,466,569,468,561],
[541,478,565,533,0,519,525,505,539,442,603,435,466],
[528,505,615,498,481,0,498,515,460,469,546,444,512],
[556,500,533,508,475,502,0,503,478,447,586,437,519],
[549,505,521,468,495,485,497,0,502,434,515,522,511],
[537,496,566,494,461,540,522,498,0,437,620,494,486],
[571,532,559,534,558,531,553,566,563,0,573,500,476],
[488,486,514,431,397,454,414,485,380,427,0,422,417],
[528,508,612,532,565,556,563,478,506,500,578,0,597],
[521,548,509,439,534,488,481,489,514,524,583,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 60, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,472,484,439,454,524,539,544,472,428,447,489],
[561,0,548,486,463,535,544,545,516,554,481,478,498],
[528,452,0,449,454,463,447,507,482,441,424,487,435],
[516,514,551,0,486,509,511,505,560,492,455,424,499],
[561,537,546,514,0,525,521,564,555,523,497,496,550],
[546,465,537,491,475,0,523,560,563,558,452,492,510],
[476,456,553,489,479,477,0,536,512,527,518,469,531],
[461,455,493,495,436,440,464,0,506,492,448,458,501],
[456,484,518,440,445,437,488,494,0,467,438,435,458],
[528,446,559,508,477,442,473,508,533,0,493,423,481],
[572,519,576,545,503,548,482,552,562,507,0,509,551],
[553,522,513,576,504,508,531,542,565,577,491,0,549],
[511,502,565,501,450,490,469,499,542,519,449,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 61, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,596,492,547,595,612,523,497,480,577,584,494,517],
[404,0,360,471,534,428,474,422,421,436,512,445,377],
[508,640,0,547,565,507,521,468,500,515,627,575,415],
[453,529,453,0,550,506,523,444,510,491,549,505,430],
[405,466,435,450,0,410,508,438,434,478,474,460,411],
[388,572,493,494,590,0,491,523,470,487,463,522,453],
[477,526,479,477,492,509,0,480,500,502,595,500,482],
[503,578,532,556,562,477,520,0,572,496,598,562,520],
[520,579,500,490,566,530,500,428,0,504,566,554,486],
[423,564,485,509,522,513,498,504,496,0,591,471,424],
[416,488,373,451,526,537,405,402,434,409,0,416,482],
[506,555,425,495,540,478,500,438,446,529,584,0,423],
[483,623,585,570,589,547,518,480,514,576,518,577,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 62, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,510,475,479,484,503,515,489,515,470,486,524],
[483,0,504,507,488,485,481,458,496,492,503,506,475],
[490,496,0,463,474,471,492,464,514,476,465,502,499],
[525,493,537,0,490,484,520,505,538,483,516,544,517],
[521,512,526,510,0,493,531,516,532,505,501,513,529],
[516,515,529,516,507,0,522,511,531,484,495,523,550],
[497,519,508,480,469,478,0,510,526,492,513,498,487],
[485,542,536,495,484,489,490,0,494,478,513,497,493],
[511,504,486,462,468,469,474,506,0,503,491,522,513],
[485,508,524,517,495,516,508,522,497,0,490,512,512],
[530,497,535,484,499,505,487,487,509,510,0,508,542],
[514,494,498,456,487,477,502,503,478,488,492,0,514],
[476,525,501,483,471,450,513,507,487,488,458,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 63, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,483,509,499,482,496,535,507,474,507,510,488],
[503,0,494,509,490,467,487,489,498,462,497,472,489],
[517,506,0,510,512,488,542,533,529,489,504,496,517],
[491,491,490,0,483,479,485,504,511,481,485,474,462],
[501,510,488,517,0,492,539,510,531,515,501,502,475],
[518,533,512,521,508,0,513,523,509,502,495,495,493],
[504,513,458,515,461,487,0,492,486,474,483,483,485],
[465,511,467,496,490,477,508,0,491,479,464,477,501],
[493,502,471,489,469,491,514,509,0,486,488,496,485],
[526,538,511,519,485,498,526,521,514,0,510,496,509],
[493,503,496,515,499,505,517,536,512,490,0,500,493],
[490,528,504,526,498,505,517,523,504,504,500,0,517],
[512,511,483,538,525,507,515,499,515,491,507,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 64, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,558,552,509,536,524,550,522,491,501,483,508,557],
[442,0,459,448,515,459,491,482,464,436,457,484,488],
[448,541,0,474,507,498,523,507,500,501,506,503,542],
[491,552,526,0,502,528,531,523,509,519,493,492,516],
[464,485,493,498,0,475,532,505,472,468,482,504,512],
[476,541,502,472,525,0,545,526,506,503,496,494,520],
[450,509,477,469,468,455,0,469,468,486,418,487,533],
[478,518,493,477,495,474,531,0,505,516,489,447,494],
[509,536,500,491,528,494,532,495,0,530,501,503,550],
[499,564,499,481,532,497,514,484,470,0,480,475,534],
[517,543,494,507,518,504,582,511,499,520,0,543,570],
[492,516,497,508,496,506,513,553,497,525,457,0,584],
[443,512,458,484,488,480,467,506,450,466,430,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 65, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,504,491,507,471,528,500,483,493,517,480,497],
[520,0,510,510,513,480,554,515,519,548,545,499,504],
[496,490,0,492,481,470,543,512,503,492,503,510,500],
[509,490,508,0,492,466,536,503,470,504,503,465,489],
[493,487,519,508,0,515,561,522,505,533,520,498,491],
[529,520,530,534,485,0,551,512,507,524,549,515,514],
[472,446,457,464,439,449,0,462,431,480,476,438,461],
[500,485,488,497,478,488,538,0,502,528,531,469,480],
[517,481,497,530,495,493,569,498,0,518,513,480,487],
[507,452,508,496,467,476,520,472,482,0,489,445,492],
[483,455,497,497,480,451,524,469,487,511,0,455,457],
[520,501,490,535,502,485,562,531,520,555,545,0,498],
[503,496,500,511,509,486,539,520,513,508,543,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 66, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,498,484,509,495,491,506,490,500,488,500,532],
[508,0,516,492,487,497,485,507,517,495,490,490,529],
[502,484,0,480,497,500,480,476,502,485,480,484,514],
[516,508,520,0,513,498,513,517,495,485,500,508,523],
[491,513,503,487,0,475,515,499,499,482,498,483,514],
[505,503,500,502,525,0,510,505,504,509,495,487,538],
[509,515,520,487,485,490,0,500,513,481,493,493,531],
[494,493,524,483,501,495,500,0,490,477,480,482,528],
[510,483,498,505,501,496,487,510,0,486,484,495,513],
[500,505,515,515,518,491,519,523,514,0,515,496,536],
[512,510,520,500,502,505,507,520,516,485,0,493,533],
[500,510,516,492,517,513,507,518,505,504,507,0,536],
[468,471,486,477,486,462,469,472,487,464,467,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 67, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,482,493,507,529,529,523,474,519,552,568,536],
[526,0,516,530,497,523,512,522,490,559,548,547,573],
[518,484,0,509,537,531,517,542,517,556,547,577,546],
[507,470,491,0,494,509,527,526,476,529,542,551,528],
[493,503,463,506,0,495,484,488,462,523,548,507,497],
[471,477,469,491,505,0,507,461,450,533,484,531,523],
[471,488,483,473,516,493,0,485,474,481,483,524,495],
[477,478,458,474,512,539,515,0,466,509,483,534,533],
[526,510,483,524,538,550,526,534,0,526,573,557,554],
[481,441,444,471,477,467,519,491,474,0,486,491,542],
[448,452,453,458,452,516,517,517,427,514,0,505,527],
[432,453,423,449,493,469,476,466,443,509,495,0,501],
[464,427,454,472,503,477,505,467,446,458,473,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 68, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,495,492,493,500,511,484,508,492,478,514,502],
[517,0,516,493,487,476,519,477,517,480,498,491,492],
[505,484,0,492,476,491,487,473,502,461,475,493,470],
[508,507,508,0,492,481,506,491,512,528,513,502,493],
[507,513,524,508,0,508,524,487,504,510,523,522,489],
[500,524,509,519,492,0,511,497,522,514,504,517,481],
[489,481,513,494,476,489,0,476,504,490,487,505,503],
[516,523,527,509,513,503,524,0,525,506,514,540,492],
[492,483,498,488,496,478,496,475,0,486,487,497,518],
[508,520,539,472,490,486,510,494,514,0,493,504,493],
[522,502,525,487,477,496,513,486,513,507,0,526,488],
[486,509,507,498,478,483,495,460,503,496,474,0,508],
[498,508,530,507,511,519,497,508,482,507,512,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 69, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,480,487,505,510,480,492,515,495,510,490,515],
[505,0,497,505,519,497,512,485,508,482,520,482,519],
[520,503,0,486,496,510,510,482,522,499,511,487,498],
[513,495,514,0,512,497,503,480,491,474,502,472,532],
[495,481,504,488,0,507,472,481,486,465,477,468,524],
[490,503,490,503,493,0,503,490,494,508,500,484,516],
[520,488,490,497,528,497,0,512,514,501,489,477,540],
[508,515,518,520,519,510,488,0,507,481,518,478,530],
[485,492,478,509,514,506,486,493,0,474,499,469,497],
[505,518,501,526,535,492,499,519,526,0,506,502,548],
[490,480,489,498,523,500,511,482,501,494,0,462,490],
[510,518,513,528,532,516,523,522,531,498,538,0,522],
[485,481,502,468,476,484,460,470,503,452,510,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 70, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,517,492,487,482,512,472,491,481,458,493,496],
[504,0,510,505,521,482,520,479,499,508,446,487,505],
[483,490,0,483,505,477,491,443,515,478,509,486,494],
[508,495,517,0,508,500,531,501,540,551,474,488,556],
[513,479,495,492,0,513,535,506,542,524,475,491,494],
[518,518,523,500,487,0,474,450,497,485,439,470,493],
[488,480,509,469,465,526,0,439,539,518,401,491,494],
[528,521,557,499,494,550,561,0,537,520,463,518,515],
[509,501,485,460,458,503,461,463,0,485,422,481,491],
[519,492,522,449,476,515,482,480,515,0,466,462,480],
[542,554,491,526,525,561,599,537,578,534,0,507,542],
[507,513,514,512,509,530,509,482,519,538,493,0,495],
[504,495,506,444,506,507,506,485,509,520,458,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 71, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,475,493,478,485,497,506,480,488,494,506,473],
[519,0,502,517,491,514,488,517,512,527,507,533,501],
[525,498,0,527,512,494,507,514,511,516,524,550,506],
[507,483,473,0,478,515,506,490,493,508,513,504,501],
[522,509,488,522,0,508,507,503,514,512,512,506,517],
[515,486,506,485,492,0,493,515,506,511,526,515,520],
[503,512,493,494,493,507,0,531,528,536,547,527,507],
[494,483,486,510,497,485,469,0,500,485,503,523,506],
[520,488,489,507,486,494,472,500,0,510,509,516,511],
[512,473,484,492,488,489,464,515,490,0,497,498,487],
[506,493,476,487,488,474,453,497,491,503,0,522,518],
[494,467,450,496,494,485,473,477,484,502,478,0,483],
[527,499,494,499,483,480,493,494,489,513,482,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 72, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,525,499,435,569,563,532,559,458,485,496,513],
[545,0,619,476,531,484,583,530,579,516,564,546,467],
[475,381,0,450,398,328,474,492,505,434,445,446,411],
[501,524,550,0,497,563,584,588,508,516,501,544,522],
[565,469,602,503,0,493,522,589,527,438,521,509,449],
[431,516,672,437,507,0,506,578,492,393,470,458,409],
[437,417,526,416,478,494,0,558,472,446,444,413,481],
[468,470,508,412,411,422,442,0,457,422,423,443,368],
[441,421,495,492,473,508,528,543,0,528,436,448,467],
[542,484,566,484,562,607,554,578,472,0,523,557,639],
[515,436,555,499,479,530,556,577,564,477,0,507,474],
[504,454,554,456,491,542,587,557,552,443,493,0,548],
[487,533,589,478,551,591,519,632,533,361,526,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 73, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,635,514,606,489,512,473,512,598,502,561,525,439],
[365,0,507,519,480,380,416,450,560,428,506,427,437],
[486,493,0,561,425,453,462,482,590,431,424,539,402],
[394,481,439,0,459,413,505,466,545,337,434,414,357],
[511,520,575,541,0,457,533,552,592,504,505,533,486],
[488,620,547,587,543,0,612,502,624,540,589,518,557],
[527,584,538,495,467,388,0,494,531,483,525,525,448],
[488,550,518,534,448,498,506,0,609,431,473,434,499],
[402,440,410,455,408,376,469,391,0,376,426,458,414],
[498,572,569,663,496,460,517,569,624,0,541,464,505],
[439,494,576,566,495,411,475,527,574,459,0,534,477],
[475,573,461,586,467,482,475,566,542,536,466,0,487],
[561,563,598,643,514,443,552,501,586,495,523,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 74, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,524,495,483,500,473,422,506,590,446,411,468,557],
[476,0,389,428,460,448,394,460,519,444,336,446,491],
[505,611,0,467,568,426,519,574,541,503,368,472,523],
[517,572,533,0,564,520,494,509,548,581,443,446,581],
[500,540,432,436,0,443,439,546,531,542,430,486,520],
[527,552,574,480,557,0,458,527,542,573,410,549,562],
[578,606,481,506,561,542,0,592,570,569,442,516,626],
[494,540,426,491,454,473,408,0,511,420,378,441,451],
[410,481,459,452,469,458,430,489,0,523,367,447,556],
[554,556,497,419,458,427,431,580,477,0,426,436,517],
[589,664,632,557,570,590,558,622,633,574,0,484,647],
[532,554,528,554,514,451,484,559,553,564,516,0,605],
[443,509,477,419,480,438,374,549,444,483,353,395,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 75, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,496,488,440,542,476,484,487,460,519,498,513],
[482,0,507,499,460,514,475,475,493,443,523,484,486],
[504,493,0,509,528,522,503,505,498,457,517,490,529],
[512,501,491,0,474,526,499,484,497,498,520,499,507],
[560,540,472,526,0,554,510,561,516,509,499,524,552],
[458,486,478,474,446,0,434,478,444,411,484,443,475],
[524,525,497,501,490,566,0,500,559,480,505,473,506],
[516,525,495,516,439,522,500,0,522,494,531,504,518],
[513,507,502,503,484,556,441,478,0,476,517,529,487],
[540,557,543,502,491,589,520,506,524,0,507,518,553],
[481,477,483,480,501,516,495,469,483,493,0,479,506],
[502,516,510,501,476,557,527,496,471,482,521,0,524],
[487,514,471,493,448,525,494,482,513,447,494,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 76, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,377,543,625,418,479,357,442,477,545,665,603,577],
[623,0,625,469,672,671,506,570,655,683,654,519,523],
[457,375,0,596,631,565,581,615,608,658,584,560,557],
[375,531,404,0,511,494,254,403,645,414,549,472,613],
[582,328,369,489,0,486,422,443,614,554,531,425,520],
[521,329,435,506,514,0,465,555,633,649,552,523,570],
[643,494,419,746,578,535,0,588,783,771,717,643,639],
[558,430,385,597,557,445,412,0,737,591,648,512,566],
[523,345,392,355,386,367,217,263,0,545,477,419,441],
[455,317,342,586,446,351,229,409,455,0,610,337,401],
[335,346,416,451,469,448,283,352,523,390,0,443,474],
[397,481,440,528,575,477,357,488,581,663,557,0,357],
[423,477,443,387,480,430,361,434,559,599,526,643,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 77, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,514,499,521,530,488,508,518,505,515,504,518],
[492,0,481,491,487,513,487,492,510,468,484,491,488],
[486,519,0,512,506,530,487,514,519,486,504,509,509],
[501,509,488,0,516,508,509,508,513,502,504,488,494],
[479,513,494,484,0,519,503,504,514,500,479,490,504],
[470,487,470,492,481,0,503,491,499,467,481,468,476],
[512,513,513,491,497,497,0,508,536,488,507,494,505],
[492,508,486,492,496,509,492,0,520,477,484,477,494],
[482,490,481,487,486,501,464,480,0,452,481,472,478],
[495,532,514,498,500,533,512,523,548,0,528,501,516],
[485,516,496,496,521,519,493,516,519,472,0,509,513],
[496,509,491,512,510,532,506,523,528,499,491,0,516],
[482,512,491,506,496,524,495,506,522,484,487,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 78, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,534,494,529,496,458,463,520,468,484,493,501],
[489,0,504,488,494,479,432,490,504,489,461,466,530],
[466,496,0,477,516,491,462,464,502,481,465,480,534],
[506,512,523,0,510,480,465,475,547,475,490,507,529],
[471,506,484,490,0,457,464,438,528,455,461,476,525],
[504,521,509,520,543,0,461,500,537,510,492,496,549],
[542,568,538,535,536,539,0,495,557,503,514,513,559],
[537,510,536,525,562,500,505,0,550,529,498,549,562],
[480,496,498,453,472,463,443,450,0,473,473,480,499],
[532,511,519,525,545,490,497,471,527,0,497,502,587],
[516,539,535,510,539,508,486,502,527,503,0,513,567],
[507,534,520,493,524,504,487,451,520,498,487,0,523],
[499,470,466,471,475,451,441,438,501,413,433,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 79, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,523,512,586,532,509,533,530,507,482,436,542],
[508,0,490,420,560,508,473,508,489,505,535,471,481],
[477,510,0,485,601,462,521,477,486,548,505,446,535],
[488,580,515,0,638,529,604,613,490,560,576,545,581],
[414,440,399,362,0,459,478,470,423,489,424,404,487],
[468,492,538,471,541,0,529,529,562,563,497,494,555],
[491,527,479,396,522,471,0,479,505,513,487,436,527],
[467,492,523,387,530,471,521,0,530,586,482,458,534],
[470,511,514,510,577,438,495,470,0,554,470,456,503],
[493,495,452,440,511,437,487,414,446,0,494,462,464],
[518,465,495,424,576,503,513,518,530,506,0,481,569],
[564,529,554,455,596,506,564,542,544,538,519,0,547],
[458,519,465,419,513,445,473,466,497,536,431,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 80, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,503,488,481,531,524,499,494,506,488,489,468],
[541,0,529,512,490,511,516,507,507,527,526,510,494],
[497,471,0,455,473,503,490,495,478,526,480,476,504],
[512,488,545,0,532,517,513,520,505,526,517,525,504],
[519,510,527,468,0,521,507,492,495,539,498,516,450],
[469,489,497,483,479,0,485,493,465,497,505,507,434],
[476,484,510,487,493,515,0,496,504,508,499,514,467],
[501,493,505,480,508,507,504,0,527,514,518,508,490],
[506,493,522,495,505,535,496,473,0,506,466,506,500],
[494,473,474,474,461,503,492,486,494,0,492,501,492],
[512,474,520,483,502,495,501,482,534,508,0,510,450],
[511,490,524,475,484,493,486,492,494,499,490,0,482],
[532,506,496,496,550,566,533,510,500,508,550,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 81, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,519,508,510,503,513,510,464,514,521,508,544,514],
[481,0,513,489,496,476,461,426,514,500,478,566,503],
[492,487,0,535,520,520,516,450,503,515,501,542,522],
[490,511,465,0,460,490,459,451,514,479,492,517,476],
[497,504,480,540,0,508,519,465,531,505,505,573,517],
[487,524,480,510,492,0,482,428,511,485,481,550,528],
[490,539,484,541,481,518,0,433,503,504,459,544,528],
[536,574,550,549,535,572,567,0,537,547,493,572,567],
[486,486,497,486,469,489,497,463,0,476,434,534,519],
[479,500,485,521,495,515,496,453,524,0,481,515,558],
[492,522,499,508,495,519,541,507,566,519,0,532,520],
[456,434,458,483,427,450,456,428,466,485,468,0,482],
[486,497,478,524,483,472,472,433,481,442,480,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 82, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,559,583,516,559,485,529,585,576,554,519,568,550],
[441,0,590,492,495,520,560,542,534,522,549,519,523],
[417,410,0,424,458,463,471,502,448,495,446,470,484],
[484,508,576,0,525,503,563,553,560,513,495,537,528],
[441,505,542,475,0,486,479,516,506,516,518,515,510],
[515,480,537,497,514,0,560,605,563,556,546,510,514],
[471,440,529,437,521,440,0,559,513,487,513,512,531],
[415,458,498,447,484,395,441,0,428,486,465,469,460],
[424,466,552,440,494,437,487,572,0,488,508,547,553],
[446,478,505,487,484,444,513,514,512,0,517,525,464],
[481,451,554,505,482,454,487,535,492,483,0,538,500],
[432,481,530,463,485,490,488,531,453,475,462,0,479],
[450,477,516,472,490,486,469,540,447,536,500,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 83, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,510,466,493,515,476,501,540,489,500,488,540],
[496,0,483,464,484,505,480,507,510,467,522,510,519],
[490,517,0,480,484,515,506,515,525,477,523,487,535],
[534,536,520,0,506,527,483,513,549,478,521,507,527],
[507,516,516,494,0,526,502,506,518,496,558,504,529],
[485,495,485,473,474,0,466,480,544,480,506,489,502],
[524,520,494,517,498,534,0,531,524,515,538,529,550],
[499,493,485,487,494,520,469,0,518,490,523,509,525],
[460,490,475,451,482,456,476,482,0,485,485,497,487],
[511,533,523,522,504,520,485,510,515,0,528,508,526],
[500,478,477,479,442,494,462,477,515,472,0,494,493],
[512,490,513,493,496,511,471,491,503,492,506,0,538],
[460,481,465,473,471,498,450,475,513,474,507,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 84, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,475,497,471,522,504,515,486,467,522,511,491],
[545,0,510,545,508,547,515,547,558,510,514,537,492],
[525,490,0,469,504,515,503,532,477,456,539,501,500],
[503,455,531,0,508,503,515,497,468,489,510,505,506],
[529,492,496,492,0,520,486,536,501,486,489,495,513],
[478,453,485,497,480,0,483,490,499,436,460,473,505],
[496,485,497,485,514,517,0,498,487,483,505,496,472],
[485,453,468,503,464,510,502,0,488,458,495,491,483],
[514,442,523,532,499,501,513,512,0,455,487,491,499],
[533,490,544,511,514,564,517,542,545,0,535,514,553],
[478,486,461,490,511,540,495,505,513,465,0,517,527],
[489,463,499,495,505,527,504,509,509,486,483,0,481],
[509,508,500,494,487,495,528,517,501,447,473,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 85, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,465,496,518,527,512,495,475,470,480,519,477],
[518,0,493,469,516,522,502,503,508,464,487,474,497],
[535,507,0,517,538,514,495,504,490,528,490,475,514],
[504,531,483,0,512,520,477,496,478,500,498,474,487],
[482,484,462,488,0,507,494,482,492,489,463,451,496],
[473,478,486,480,493,0,464,454,477,442,478,458,486],
[488,498,505,523,506,536,0,486,520,516,484,516,521],
[505,497,496,504,518,546,514,0,507,498,512,491,514],
[525,492,510,522,508,523,480,493,0,477,517,487,502],
[530,536,472,500,511,558,484,502,523,0,494,512,506],
[520,513,510,502,537,522,516,488,483,506,0,495,522],
[481,526,525,526,549,542,484,509,513,488,505,0,482],
[523,503,486,513,504,514,479,486,498,494,478,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 86, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,526,543,496,494,530,507,507,508,491,512,528,507],
[474,0,476,525,506,498,493,479,484,435,504,529,524],
[457,524,0,507,500,510,525,499,480,490,520,501,483],
[504,475,493,0,501,520,462,496,493,505,524,557,483],
[506,494,500,499,0,505,494,530,478,507,564,528,490],
[470,502,490,480,495,0,489,544,461,461,548,498,487],
[493,507,475,538,506,511,0,537,510,520,519,515,508],
[493,521,501,504,470,456,463,0,479,450,492,504,493],
[492,516,520,507,522,539,490,521,0,505,554,538,529],
[509,565,510,495,493,539,480,550,495,0,500,513,497],
[488,496,480,476,436,452,481,508,446,500,0,496,480],
[472,471,499,443,472,502,485,496,462,487,504,0,475],
[493,476,517,517,510,513,492,507,471,503,520,525,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 87, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,521,480,558,551,536,516,545,514,509,559,470,553],
[479,0,439,479,450,559,516,502,506,483,518,481,453],
[520,561,0,471,557,547,511,566,560,541,576,506,558],
[442,521,529,0,532,487,496,556,526,504,600,456,549],
[449,550,443,468,0,512,485,536,517,479,544,397,492],
[464,441,453,513,488,0,466,526,532,506,506,483,545],
[484,484,489,504,515,534,0,503,496,495,516,484,468],
[455,498,434,444,464,474,497,0,454,429,498,455,541],
[486,494,440,474,483,468,504,546,0,440,496,438,531],
[491,517,459,496,521,494,505,571,560,0,597,445,510],
[441,482,424,400,456,494,484,502,504,403,0,423,411],
[530,519,494,544,603,517,516,545,562,555,577,0,561],
[447,547,442,451,508,455,532,459,469,490,589,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 88, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,499,472,541,505,503,498,494,524,461,462,473],
[519,0,451,486,521,478,525,488,450,433,508,481,455],
[501,549,0,427,540,456,506,460,478,473,488,485,509],
[528,514,573,0,577,549,553,468,549,479,553,492,525],
[459,479,460,423,0,503,509,461,429,429,481,526,421],
[495,522,544,451,497,0,532,407,518,497,500,491,497],
[497,475,494,447,491,468,0,429,431,446,535,499,443],
[502,512,540,532,539,593,571,0,551,500,561,520,532],
[506,550,522,451,571,482,569,449,0,505,445,503,492],
[476,567,527,521,571,503,554,500,495,0,545,515,515],
[539,492,512,447,519,500,465,439,555,455,0,503,458],
[538,519,515,508,474,509,501,480,497,485,497,0,428],
[527,545,491,475,579,503,557,468,508,485,542,572,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 89, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,497,496,491,507,508,529,494,500,501,492,512],
[508,0,508,506,466,482,516,517,498,496,486,499,505],
[503,492,0,493,480,501,515,525,483,512,495,479,530],
[504,494,507,0,462,478,509,510,492,503,490,481,519],
[509,534,520,538,0,494,510,530,499,520,505,504,507],
[493,518,499,522,506,0,498,514,482,491,488,490,515],
[492,484,485,491,490,502,0,506,481,495,485,473,528],
[471,483,475,490,470,486,494,0,496,485,482,481,489],
[506,502,517,508,501,518,519,504,0,499,514,499,522],
[500,504,488,497,480,509,505,515,501,0,494,499,514],
[499,514,505,510,495,512,515,518,486,506,0,484,520],
[508,501,521,519,496,510,527,519,501,501,516,0,542],
[488,495,470,481,493,485,472,511,478,486,480,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 90, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,480,504,496,490,521,513,499,513,495,494,471],
[486,0,492,521,482,486,507,500,478,500,473,505,463],
[520,508,0,537,529,495,533,519,491,512,517,521,492],
[496,479,463,0,497,465,487,491,477,490,479,496,471],
[504,518,471,503,0,491,512,504,488,502,501,508,477],
[510,514,505,535,509,0,510,505,478,469,497,514,480],
[479,493,467,513,488,490,0,494,481,487,493,504,468],
[487,500,481,509,496,495,506,0,479,474,489,500,464],
[501,522,509,523,512,522,519,521,0,509,488,518,501],
[487,500,488,510,498,531,513,526,491,0,505,523,485],
[505,527,483,521,499,503,507,511,512,495,0,541,492],
[506,495,479,504,492,486,496,500,482,477,459,0,483],
[529,537,508,529,523,520,532,536,499,515,508,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 91, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,503,487,493,523,495,518,520,517,516,485,521],
[507,0,528,509,498,528,501,504,507,533,514,512,525],
[497,472,0,463,512,514,498,511,516,513,517,497,515],
[513,491,537,0,508,520,511,516,528,513,513,518,538],
[507,502,488,492,0,529,503,509,515,522,509,524,533],
[477,472,486,480,471,0,492,497,500,496,482,480,515],
[505,499,502,489,497,508,0,525,504,508,507,505,508],
[482,496,489,484,491,503,475,0,514,520,503,484,507],
[480,493,484,472,485,500,496,486,0,512,490,482,511],
[483,467,487,487,478,504,492,480,488,0,498,495,497],
[484,486,483,487,491,518,493,497,510,502,0,494,507],
[515,488,503,482,476,520,495,516,518,505,506,0,521],
[479,475,485,462,467,485,492,493,489,503,493,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 92, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,514,489,504,493,489,510,509,489,509,507,507],
[489,0,504,504,495,490,503,507,507,486,505,492,506],
[486,496,0,492,492,499,484,501,515,495,514,480,495],
[511,496,508,0,514,494,495,509,525,486,511,512,500],
[496,505,508,486,0,480,486,489,516,492,489,501,503],
[507,510,501,506,520,0,505,499,495,480,520,511,493],
[511,497,516,505,514,495,0,506,515,489,529,506,502],
[490,493,499,491,511,501,494,0,509,474,506,495,473],
[491,493,485,475,484,505,485,491,0,486,508,487,509],
[511,514,505,514,508,520,511,526,514,0,537,522,496],
[491,495,486,489,511,480,471,494,492,463,0,495,499],
[493,508,520,488,499,489,494,505,513,478,505,0,496],
[493,494,505,500,497,507,498,527,491,504,501,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 93, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,514,539,491,555,518,504,543,542,571,545,502],
[509,0,507,541,529,545,526,499,512,499,528,506,496],
[486,493,0,494,464,539,499,493,508,478,541,530,452],
[461,459,506,0,509,501,525,491,514,454,534,518,489],
[509,471,536,491,0,544,544,507,532,510,553,558,521],
[445,455,461,499,456,0,508,485,493,474,510,517,486],
[482,474,501,475,456,492,0,481,500,491,507,471,502],
[496,501,507,509,493,515,519,0,491,505,517,518,469],
[457,488,492,486,468,507,500,509,0,469,513,508,455],
[458,501,522,546,490,526,509,495,531,0,534,503,523],
[429,472,459,466,447,490,493,483,487,466,0,513,477],
[455,494,470,482,442,483,529,482,492,497,487,0,467],
[498,504,548,511,479,514,498,531,545,477,523,533,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 94, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,529,498,506,505,528,497,536,512,507,520,533],
[494,0,477,493,488,468,478,504,498,484,492,487,519],
[471,523,0,486,491,485,486,490,523,497,518,514,526],
[502,507,514,0,484,518,486,484,537,488,508,501,524],
[494,512,509,516,0,496,490,490,492,516,493,512,517],
[495,532,515,482,504,0,495,527,508,481,494,503,539],
[472,522,514,514,510,505,0,486,520,504,504,517,522],
[503,496,510,516,510,473,514,0,507,502,501,485,510],
[464,502,477,463,508,492,480,493,0,469,509,483,529],
[488,516,503,512,484,519,496,498,531,0,532,483,535],
[493,508,482,492,507,506,496,499,491,468,0,511,504],
[480,513,486,499,488,497,483,515,517,517,489,0,531],
[467,481,474,476,483,461,478,490,471,465,496,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 95, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,475,488,488,460,507,482,497,476,448,491,477],
[506,0,505,483,504,475,534,506,459,524,468,449,486],
[525,495,0,503,477,474,507,547,495,519,517,490,523],
[512,517,497,0,529,528,524,534,454,507,497,464,515],
[512,496,523,471,0,463,524,513,470,512,487,493,480],
[540,525,526,472,537,0,530,548,527,555,495,496,533],
[493,466,493,476,476,470,0,501,462,507,477,477,440],
[518,494,453,466,487,452,499,0,499,546,469,490,447],
[503,541,505,546,530,473,538,501,0,554,513,511,479],
[524,476,481,493,488,445,493,454,446,0,473,483,452],
[552,532,483,503,513,505,523,531,487,527,0,475,481],
[509,551,510,536,507,504,523,510,489,517,525,0,479],
[523,514,477,485,520,467,560,553,521,548,519,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 96, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,499,490,496,485,500,493,510,472,487,511,457],
[533,0,516,511,521,536,523,477,521,520,524,538,526],
[501,484,0,480,513,485,476,476,503,473,495,499,479],
[510,489,520,0,516,480,513,514,540,502,510,528,503],
[504,479,487,484,0,483,501,508,499,471,517,531,492],
[515,464,515,520,517,0,530,509,538,501,510,529,503],
[500,477,524,487,499,470,0,509,516,492,503,529,490],
[507,523,524,486,492,491,491,0,529,478,492,514,506],
[490,479,497,460,501,462,484,471,0,464,483,499,480],
[528,480,527,498,529,499,508,522,536,0,519,525,497],
[513,476,505,490,483,490,497,508,517,481,0,504,483],
[489,462,501,472,469,471,471,486,501,475,496,0,469],
[543,474,521,497,508,497,510,494,520,503,517,531,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 97, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,542,489,464,508,497,514,464,471,528,484,505],
[495,0,522,501,482,529,521,516,484,457,518,515,505],
[458,478,0,473,484,479,514,502,453,465,482,478,475],
[511,499,527,0,486,507,515,505,488,476,531,499,498],
[536,518,516,514,0,537,501,513,480,482,524,479,515],
[492,471,521,493,463,0,475,506,471,459,499,477,473],
[503,479,486,485,499,525,0,477,464,479,517,474,477],
[486,484,498,495,487,494,523,0,485,461,493,492,493],
[536,516,547,512,520,529,536,515,0,473,577,529,522],
[529,543,535,524,518,541,521,539,527,0,530,538,496],
[472,482,518,469,476,501,483,507,423,470,0,492,488],
[516,485,522,501,521,523,526,508,471,462,508,0,485],
[495,495,525,502,485,527,523,507,478,504,512,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 98, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,457,485,457,496,490,488,500,447,464,478,496],
[516,0,473,486,475,505,541,476,502,466,477,473,478],
[543,527,0,521,499,503,538,512,542,512,497,536,491],
[515,514,479,0,501,514,531,519,562,471,518,524,516],
[543,525,501,499,0,522,546,505,526,490,509,520,508],
[504,495,497,486,478,0,500,471,512,448,468,501,504],
[510,459,462,469,454,500,0,472,495,464,459,492,493],
[512,524,488,481,495,529,528,0,510,460,500,522,508],
[500,498,458,438,474,488,505,490,0,454,452,500,452],
[553,534,488,529,510,552,536,540,546,0,479,538,501],
[536,523,503,482,491,532,541,500,548,521,0,545,547],
[522,527,464,476,480,499,508,478,500,462,455,0,497],
[504,522,509,484,492,496,507,492,548,499,453,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 99, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,523,476,469,458,485,504,432,481,472,418,485],
[508,0,485,447,481,490,467,480,421,537,499,409,530],
[477,515,0,486,476,441,472,493,475,556,467,441,445],
[524,553,514,0,474,511,494,495,517,595,536,481,558],
[531,519,524,526,0,483,494,552,483,559,556,484,517],
[542,510,559,489,517,0,484,521,495,573,546,468,521],
[515,533,528,506,506,516,0,531,490,592,517,483,520],
[496,520,507,505,448,479,469,0,481,508,479,439,514],
[568,579,525,483,517,505,510,519,0,566,532,519,550],
[519,463,444,405,441,427,408,492,434,0,438,422,483],
[528,501,533,464,444,454,483,521,468,562,0,475,519],
[582,591,559,519,516,532,517,561,481,578,525,0,570],
[515,470,555,442,483,479,480,486,450,517,481,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 100, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,520,475,507,500,496,523,503,493,530,488,487,525],
[480,0,452,539,548,476,545,504,466,521,471,511,512],
[525,548,0,513,502,521,510,495,515,551,497,521,510],
[493,461,487,0,516,504,511,477,507,506,493,505,509],
[500,452,498,484,0,484,504,454,510,513,510,501,481],
[504,524,479,496,516,0,499,492,484,514,491,516,528],
[477,455,490,489,496,501,0,457,456,498,445,504,484],
[497,496,505,523,546,508,543,0,501,526,473,542,492],
[507,534,485,493,490,516,544,499,0,548,496,513,521],
[470,479,449,494,487,486,502,474,452,0,453,454,451],
[512,529,503,507,490,509,555,527,504,547,0,494,512],
[513,489,479,495,499,484,496,458,487,546,506,0,507],
[475,488,490,491,519,472,516,508,479,549,488,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 101, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,509,502,520,525,521,508,489,502,483,493,511],
[493,0,498,489,512,471,494,490,495,489,488,494,500],
[491,502,0,494,495,484,496,489,495,494,471,494,517],
[498,511,506,0,501,507,507,497,504,504,482,513,520],
[480,488,505,499,0,490,497,497,494,490,482,504,503],
[475,529,516,493,510,0,509,504,480,504,486,520,504],
[479,506,504,493,503,491,0,495,490,488,490,493,499],
[492,510,511,503,503,496,505,0,492,500,496,506,509],
[511,505,505,496,506,520,510,508,0,502,502,521,528],
[498,511,506,496,510,496,512,500,498,0,501,510,514],
[517,512,529,518,518,514,510,504,498,499,0,506,519],
[507,506,506,487,496,480,507,494,479,490,494,0,503],
[489,500,483,480,497,496,501,491,472,486,481,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 102, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,498,521,502,516,524,527,501,490,514,500,505],
[504,0,465,479,490,490,477,519,489,498,507,481,508],
[502,535,0,535,502,517,490,538,483,525,531,510,526],
[479,521,465,0,488,504,483,490,453,523,478,481,494],
[498,510,498,512,0,501,482,510,483,511,518,474,492],
[484,510,483,496,499,0,475,487,459,501,489,482,506],
[476,523,510,517,518,525,0,503,491,504,503,521,510],
[473,481,462,510,490,513,497,0,485,460,500,485,490],
[499,511,517,547,517,541,509,515,0,494,511,517,507],
[510,502,475,477,489,499,496,540,506,0,497,510,502],
[486,493,469,522,482,511,497,500,489,503,0,501,540],
[500,519,490,519,526,518,479,515,483,490,499,0,503],
[495,492,474,506,508,494,490,510,493,498,460,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 103, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,539,529,528,481,527,515,529,526,501,519,505,562],
[461,0,509,454,477,502,465,536,516,510,498,462,534],
[471,491,0,508,497,509,486,515,520,513,521,475,510],
[472,546,492,0,502,523,518,546,559,476,513,494,546],
[519,523,503,498,0,504,532,513,567,498,506,510,530],
[473,498,491,477,496,0,489,546,529,461,494,466,506],
[485,535,514,482,468,511,0,525,516,488,508,467,529],
[471,464,485,454,487,454,475,0,516,468,481,451,518],
[474,484,480,441,433,471,484,484,0,467,470,458,482],
[499,490,487,524,502,539,512,532,533,0,514,491,531],
[481,502,479,487,494,506,492,519,530,486,0,459,542],
[495,538,525,506,490,534,533,549,542,509,541,0,540],
[438,466,490,454,470,494,471,482,518,469,458,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 104, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,479,447,468,484,483,486,443,464,468,510,442],
[555,0,525,486,501,528,535,503,488,497,486,507,507],
[521,475,0,485,468,509,499,509,485,491,454,495,472],
[553,514,515,0,482,537,516,552,499,504,512,490,488],
[532,499,532,518,0,547,506,535,499,513,489,500,468],
[516,472,491,463,453,0,482,509,484,482,467,481,468],
[517,465,501,484,494,518,0,520,491,503,504,527,476],
[514,497,491,448,465,491,480,0,452,456,489,463,477],
[557,512,515,501,501,516,509,548,0,520,500,482,500],
[536,503,509,496,487,518,497,544,480,0,430,481,453],
[532,514,546,488,511,533,496,511,500,570,0,514,512],
[490,493,505,510,500,519,473,537,518,519,486,0,483],
[558,493,528,512,532,532,524,523,500,547,488,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 105, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,513,522,513,505,508,481,510,516,508,506,522,508],
[487,0,498,532,486,495,497,495,499,494,501,534,467],
[478,502,0,531,517,525,506,480,508,490,505,509,464],
[487,468,469,0,500,521,475,488,496,474,475,472,494],
[495,514,483,500,0,508,484,486,507,451,503,507,452],
[492,505,475,479,492,0,468,479,476,487,461,482,482],
[519,503,494,525,516,532,0,502,496,482,498,536,457],
[490,505,520,512,514,521,498,0,488,493,511,492,462],
[484,501,492,504,493,524,504,512,0,488,499,504,504],
[492,506,510,526,549,513,518,507,512,0,509,499,493],
[494,499,495,525,497,539,502,489,501,491,0,485,475],
[478,466,491,528,493,518,464,508,496,501,515,0,530],
[492,533,536,506,548,518,543,538,496,507,525,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 106, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,502,502,482,489,485,489,465,472,501,505,492],
[498,0,493,501,512,482,507,490,474,473,511,503,477],
[498,507,0,490,504,507,497,512,488,479,517,515,495],
[498,499,510,0,507,497,493,497,489,485,503,514,501],
[518,488,496,493,0,503,495,499,485,473,496,505,484],
[511,518,493,503,497,0,506,512,487,493,509,505,506],
[515,493,503,507,505,494,0,481,494,485,505,497,504],
[511,510,488,503,501,488,519,0,473,473,486,493,492],
[535,526,512,511,515,513,506,527,0,507,495,526,515],
[528,527,521,515,527,507,515,527,493,0,528,520,487],
[499,489,483,497,504,491,495,514,505,472,0,499,505],
[495,497,485,486,495,495,503,507,474,480,501,0,486],
[508,523,505,499,516,494,496,508,485,513,495,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 107, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,486,440,466,511,488,477,489,552,466,477,475],
[505,0,522,486,497,522,509,508,508,542,507,521,473],
[514,478,0,476,480,503,481,501,501,548,455,529,511],
[560,514,524,0,500,526,495,495,518,542,499,524,482],
[534,503,520,500,0,504,489,514,524,549,493,526,523],
[489,478,497,474,496,0,495,475,494,549,468,497,455],
[512,491,519,505,511,505,0,491,501,536,516,539,491],
[523,492,499,505,486,525,509,0,506,534,485,514,486],
[511,492,499,482,476,506,499,494,0,522,486,510,494],
[448,458,452,458,451,451,464,466,478,0,463,464,453],
[534,493,545,501,507,532,484,515,514,537,0,504,502],
[523,479,471,476,474,503,461,486,490,536,496,0,492],
[525,527,489,518,477,545,509,514,506,547,498,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 108, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,498,520,500,516,497,515,490,500,485,519,497],
[508,0,521,529,501,502,478,499,513,463,459,507,502],
[502,479,0,507,502,493,487,480,501,499,500,501,457],
[480,471,493,0,488,465,489,466,465,480,468,487,475],
[500,499,498,512,0,492,483,511,503,478,467,507,484],
[484,498,507,535,508,0,473,457,498,477,476,488,488],
[503,522,513,511,517,527,0,541,502,492,511,527,493],
[485,501,520,534,489,543,459,0,490,515,486,512,500],
[510,487,499,535,497,502,498,510,0,512,485,501,496],
[500,537,501,520,522,523,508,485,488,0,476,533,489],
[515,541,500,532,533,524,489,514,515,524,0,522,518],
[481,493,499,513,493,512,473,488,499,467,478,0,496],
[503,498,543,525,516,512,507,500,504,511,482,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 109, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,409,520,454,562,486,442,578,445,607,599,510],
[592,0,497,543,580,583,624,543,619,497,535,754,707],
[591,503,0,632,450,572,500,521,705,541,652,625,684],
[480,457,368,0,442,459,404,406,488,400,415,653,498],
[546,420,550,558,0,513,551,507,695,546,585,626,617],
[438,417,428,541,487,0,453,461,507,576,537,598,590],
[514,376,500,596,449,547,0,443,618,529,466,687,625],
[558,457,479,594,493,539,557,0,602,577,544,679,624],
[422,381,295,512,305,493,382,398,0,469,445,619,532],
[555,503,459,600,454,424,471,423,531,0,523,696,670],
[393,465,348,585,415,463,534,456,555,477,0,661,603],
[401,246,375,347,374,402,313,321,381,304,339,0,328],
[490,293,316,502,383,410,375,376,468,330,397,672,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 110, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,562,534,490,521,539,478,494,475,481,497,489,511],
[438,0,528,478,475,467,461,474,463,475,438,505,453],
[466,472,0,448,474,470,481,445,458,412,479,424,456],
[510,522,552,0,544,553,524,539,535,466,501,460,481],
[479,525,526,456,0,528,464,461,517,474,501,462,476],
[461,533,530,447,472,0,438,475,479,519,523,427,509],
[522,539,519,476,536,562,0,498,517,487,526,497,558],
[506,526,555,461,539,525,502,0,497,509,538,498,479],
[525,537,542,465,483,521,483,503,0,485,493,460,489],
[519,525,588,534,526,481,513,491,515,0,525,475,509],
[503,562,521,499,499,477,474,462,507,475,0,462,494],
[511,495,576,540,538,573,503,502,540,525,538,0,502],
[489,547,544,519,524,491,442,521,511,491,506,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 111, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,452,483,496,495,452,447,452,543,446,509,526],
[500,0,426,481,521,499,443,462,481,539,466,475,494],
[548,574,0,499,501,516,522,504,522,582,496,555,532],
[517,519,501,0,520,467,468,517,512,518,500,524,527],
[504,479,499,480,0,520,495,477,461,526,518,515,522],
[505,501,484,533,480,0,478,463,495,552,501,525,516],
[548,557,478,532,505,522,0,475,515,537,473,531,554],
[553,538,496,483,523,537,525,0,498,542,548,522,579],
[548,519,478,488,539,505,485,502,0,570,500,536,513],
[457,461,418,482,474,448,463,458,430,0,465,499,487],
[554,534,504,500,482,499,527,452,500,535,0,505,520],
[491,525,445,476,485,475,469,478,464,501,495,0,495],
[474,506,468,473,478,484,446,421,487,513,480,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 112, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,515,519,494,552,524,548,549,556,517,527,572],
[492,0,534,522,524,551,554,498,520,529,478,530,563],
[485,466,0,497,473,558,518,502,506,511,455,518,556],
[481,478,503,0,484,563,534,493,553,549,474,527,553],
[506,476,527,516,0,526,536,529,523,537,532,528,568],
[448,449,442,437,474,0,488,459,458,466,445,427,507],
[476,446,482,466,464,512,0,458,481,478,452,467,503],
[452,502,498,507,471,541,542,0,483,542,444,498,529],
[451,480,494,447,477,542,519,517,0,547,458,501,500],
[444,471,489,451,463,534,522,458,453,0,438,476,540],
[483,522,545,526,468,555,548,556,542,562,0,542,584],
[473,470,482,473,472,573,533,502,499,524,458,0,551],
[428,437,444,447,432,493,497,471,500,460,416,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 113, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,495,521,476,522,497,479,511,460,476,429,469],
[497,0,483,517,451,492,455,450,474,418,455,420,474],
[505,517,0,550,505,505,464,504,538,523,511,466,471],
[479,483,450,0,445,456,457,425,484,470,432,440,465],
[524,549,495,555,0,485,471,528,527,516,468,567,502],
[478,508,495,544,515,0,505,487,512,499,491,423,471],
[503,545,536,543,529,495,0,444,485,516,522,497,472],
[521,550,496,575,472,513,556,0,524,560,517,533,516],
[489,526,462,516,473,488,515,476,0,533,532,503,526],
[540,582,477,530,484,501,484,440,467,0,506,473,475],
[524,545,489,568,532,509,478,483,468,494,0,477,485],
[571,580,534,560,433,577,503,467,497,527,523,0,507],
[531,526,529,535,498,529,528,484,474,525,515,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 114, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,513,551,459,468,450,518,430,401,452,530,484,512],
[487,0,574,485,553,482,505,413,427,559,482,514,531],
[449,426,0,359,395,411,252,384,429,473,402,432,472],
[541,515,641,0,548,550,465,555,528,607,544,542,577],
[532,447,605,452,0,464,398,429,490,540,507,476,492],
[550,518,589,450,536,0,380,446,456,517,468,460,514],
[482,495,748,535,602,620,0,485,535,611,453,583,530],
[570,587,616,445,571,554,515,0,521,573,569,569,643],
[599,573,571,472,510,544,465,479,0,649,470,533,538],
[548,441,527,393,460,483,389,427,351,0,445,452,577],
[470,518,598,456,493,532,547,431,530,555,0,512,582],
[516,486,568,458,524,540,417,431,467,548,488,0,482],
[488,469,528,423,508,486,470,357,462,423,418,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 115, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,436,450,415,450,477,468,429,474,419,500,432],
[530,0,471,436,422,502,482,508,490,523,507,518,461],
[564,529,0,467,493,552,526,535,528,584,532,550,492],
[550,564,533,0,500,542,572,556,545,561,545,559,528],
[585,578,507,500,0,568,533,570,549,629,533,581,550],
[550,498,448,458,432,0,468,554,493,509,471,518,432],
[523,518,474,428,467,532,0,505,489,510,512,518,480],
[532,492,465,444,430,446,495,0,490,487,460,513,458],
[571,510,472,455,451,507,511,510,0,547,506,518,492],
[526,477,416,439,371,491,490,513,453,0,460,479,413],
[581,493,468,455,467,529,488,540,494,540,0,531,466],
[500,482,450,441,419,482,482,487,482,521,469,0,439],
[568,539,508,472,450,568,520,542,508,587,534,561,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 116, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,510,481,527,500,510,539,469,451,493,453,499],
[507,0,575,489,535,481,533,498,487,481,508,462,523],
[490,425,0,460,426,460,507,488,436,448,488,465,486],
[519,511,540,0,497,480,540,491,462,505,496,470,523],
[473,465,574,503,0,502,546,514,486,454,472,471,521],
[500,519,540,520,498,0,527,495,480,471,507,510,457],
[490,467,493,460,454,473,0,503,483,432,504,415,530],
[461,502,512,509,486,505,497,0,492,494,476,494,522],
[531,513,564,538,514,520,517,508,0,462,533,468,532],
[549,519,552,495,546,529,568,506,538,0,518,504,562],
[507,492,512,504,528,493,496,524,467,482,0,463,527],
[547,538,535,530,529,490,585,506,532,496,537,0,515],
[501,477,514,477,479,543,470,478,468,438,473,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 117, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,472,529,533,504,486,549,552,501,517,511,495],
[532,0,500,468,481,508,468,502,573,523,511,497,490],
[528,500,0,567,504,529,495,528,611,500,556,543,513],
[471,532,433,0,482,495,506,524,556,504,520,518,519],
[467,519,496,518,0,502,463,500,529,477,542,539,541],
[496,492,471,505,498,0,479,491,539,423,544,506,477],
[514,532,505,494,537,521,0,518,551,521,532,542,521],
[451,498,472,476,500,509,482,0,537,490,485,541,474],
[448,427,389,444,471,461,449,463,0,437,457,487,424],
[499,477,500,496,523,577,479,510,563,0,541,511,528],
[483,489,444,480,458,456,468,515,543,459,0,520,459],
[489,503,457,482,461,494,458,459,513,489,480,0,488],
[505,510,487,481,459,523,479,526,576,472,541,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 118, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,485,503,501,521,498,494,473,493,521,523,500],
[502,0,507,489,481,508,500,519,499,520,555,502,516],
[515,493,0,471,457,517,495,528,476,498,529,469,488],
[497,511,529,0,498,532,514,540,502,515,559,486,507],
[499,519,543,502,0,494,532,515,501,519,578,502,537],
[479,492,483,468,506,0,512,501,487,506,521,508,454],
[502,500,505,486,468,488,0,498,519,547,549,524,482],
[506,481,472,460,485,499,502,0,481,512,524,469,478],
[527,501,524,498,499,513,481,519,0,516,506,504,495],
[507,480,502,485,481,494,453,488,484,0,524,497,483],
[479,445,471,441,422,479,451,476,494,476,0,418,447],
[477,498,531,514,498,492,476,531,496,503,582,0,516],
[500,484,512,493,463,546,518,522,505,517,553,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 119, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,540,508,488,553,591,594,634,545,567,547,522],
[483,0,525,548,494,503,528,508,484,515,536,524,542],
[460,475,0,499,493,501,528,470,522,499,448,524,475],
[492,452,501,0,483,481,539,535,524,563,533,526,505],
[512,506,507,517,0,487,588,534,572,522,475,575,500],
[447,497,499,519,513,0,567,492,455,491,467,540,492],
[409,472,472,461,412,433,0,437,403,500,463,467,493],
[406,492,530,465,466,508,563,0,548,474,480,536,500],
[366,516,478,476,428,545,597,452,0,491,480,491,515],
[455,485,501,437,478,509,500,526,509,0,511,516,496],
[433,464,552,467,525,533,537,520,520,489,0,519,491],
[453,476,476,474,425,460,533,464,509,484,481,0,498],
[478,458,525,495,500,508,507,500,485,504,509,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 120, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,464,512,507,492,500,511,572,504,510,506,577],
[499,0,458,528,461,494,496,504,549,492,475,458,493],
[536,542,0,549,539,510,527,541,573,509,472,479,525],
[488,472,451,0,454,455,517,520,509,477,509,423,510],
[493,539,461,546,0,504,490,533,537,507,450,462,526],
[508,506,490,545,496,0,514,541,516,508,475,439,559],
[500,504,473,483,510,486,0,498,541,538,518,452,528],
[489,496,459,480,467,459,502,0,490,487,436,433,521],
[428,451,427,491,463,484,459,510,0,486,457,442,515],
[496,508,491,523,493,492,462,513,514,0,456,441,520],
[490,525,528,491,550,525,482,564,543,544,0,496,509],
[494,542,521,577,538,561,548,567,558,559,504,0,538],
[423,507,475,490,474,441,472,479,485,480,491,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 121, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,488,483,487,454,477,474,452,494,489,440,483],
[482,0,508,487,484,481,523,473,457,503,484,461,534],
[512,492,0,484,498,491,529,470,480,518,485,464,518],
[517,513,516,0,498,486,520,491,473,525,493,463,478],
[513,516,502,502,0,509,562,503,492,514,488,502,533],
[546,519,509,514,491,0,505,509,507,530,483,489,510],
[523,477,471,480,438,495,0,462,483,486,474,463,498],
[526,527,530,509,497,491,538,0,496,550,523,512,540],
[548,543,520,527,508,493,517,504,0,539,534,511,551],
[506,497,482,475,486,470,514,450,461,0,507,472,507],
[511,516,515,507,512,517,526,477,466,493,0,484,510],
[560,539,536,537,498,511,537,488,489,528,516,0,538],
[517,466,482,522,467,490,502,460,449,493,490,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 122, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,615,532,566,555,496,584,529,582,580,554,564],
[499,0,635,496,595,501,508,563,571,554,538,549,489],
[385,365,0,401,454,448,421,431,432,480,394,429,455],
[468,504,599,0,583,563,482,531,582,575,511,552,544],
[434,405,546,417,0,487,462,550,486,519,428,486,458],
[445,499,552,437,513,0,530,540,452,549,493,495,479],
[504,492,579,518,538,470,0,460,502,567,507,493,494],
[416,437,569,469,450,460,540,0,447,515,475,502,470],
[471,429,568,418,514,548,498,553,0,558,478,507,475],
[418,446,520,425,481,451,433,485,442,0,436,447,445],
[420,462,606,489,572,507,493,525,522,564,0,513,496],
[446,451,571,448,514,505,507,498,493,553,487,0,509],
[436,511,545,456,542,521,506,530,525,555,504,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 123, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,484,477,537,501,499,486,480,508,469,504,532],
[505,0,494,456,512,482,565,483,476,463,496,477,549],
[516,506,0,480,542,519,530,482,506,511,482,504,552],
[523,544,520,0,527,524,545,528,527,488,490,533,536],
[463,488,458,473,0,482,540,473,459,493,486,477,531],
[499,518,481,476,518,0,542,487,480,474,520,548,543],
[501,435,470,455,460,458,0,457,469,469,463,510,504],
[514,517,518,472,527,513,543,0,497,508,497,519,539],
[520,524,494,473,541,520,531,503,0,519,485,504,542],
[492,537,489,512,507,526,531,492,481,0,511,497,526],
[531,504,518,510,514,480,537,503,515,489,0,510,505],
[496,523,496,467,523,452,490,481,496,503,490,0,554],
[468,451,448,464,469,457,496,461,458,474,495,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 124, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,483,492,497,512,504,494,498,491,488,501,495],
[498,0,491,489,462,515,493,520,494,490,509,501,466],
[517,509,0,513,497,513,485,521,497,511,518,521,498],
[508,511,487,0,491,520,524,513,490,500,508,501,490],
[503,538,503,509,0,527,527,514,488,502,521,521,499],
[488,485,487,480,473,0,490,492,456,473,495,483,484],
[496,507,515,476,473,510,0,494,493,496,515,493,501],
[506,480,479,487,486,508,506,0,481,518,497,474,485],
[502,506,503,510,512,544,507,519,0,519,515,510,495],
[509,510,489,500,498,527,504,482,481,0,508,490,506],
[512,491,482,492,479,505,485,503,485,492,0,504,510],
[499,499,479,499,479,517,507,526,490,510,496,0,504],
[505,534,502,510,501,516,499,515,505,494,490,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 125, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,505,520,492,529,504,496,515,533,495,509,511],
[486,0,502,517,464,523,526,494,498,520,470,511,507],
[495,498,0,520,463,499,515,480,508,519,481,532,516],
[480,483,480,0,480,516,486,488,509,518,472,512,508],
[508,536,537,520,0,519,512,522,516,537,466,516,535],
[471,477,501,484,481,0,490,490,479,516,470,498,499],
[496,474,485,514,488,510,0,495,500,496,491,513,525],
[504,506,520,512,478,510,505,0,495,517,501,486,522],
[485,502,492,491,484,521,500,505,0,510,506,486,524],
[467,480,481,482,463,484,504,483,490,0,476,496,501],
[505,530,519,528,534,530,509,499,494,524,0,487,534],
[491,489,468,488,484,502,487,514,514,504,513,0,514],
[489,493,484,492,465,501,475,478,476,499,466,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 126, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,643,592,439,553,483,520,564,568,541,623,451,421],
[357,0,573,540,463,603,514,538,545,559,642,501,554],
[408,427,0,485,479,395,443,487,509,500,585,452,392],
[561,460,515,0,566,514,495,545,535,558,500,509,494],
[447,537,521,434,0,449,306,414,390,567,532,452,513],
[517,397,605,486,551,0,446,592,430,589,505,397,460],
[480,486,557,505,694,554,0,539,633,522,560,431,518],
[436,462,513,455,586,408,461,0,513,593,571,366,405],
[432,455,491,465,610,570,367,487,0,529,400,486,505],
[459,441,500,442,433,411,478,407,471,0,456,474,444],
[377,358,415,500,468,495,440,429,600,544,0,512,420],
[549,499,548,491,548,603,569,634,514,526,488,0,552],
[579,446,608,506,487,540,482,595,495,556,580,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 127, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,510,480,521,496,485,518,505,513,471,480,501],
[499,0,483,503,534,473,496,509,488,513,467,469,497],
[490,517,0,524,535,525,507,530,513,504,507,509,493],
[520,497,476,0,534,511,517,514,509,515,502,495,498],
[479,466,465,466,0,500,469,466,489,491,472,479,483],
[504,527,475,489,500,0,484,498,487,515,486,492,489],
[515,504,493,483,531,516,0,519,507,547,490,495,487],
[482,491,470,486,534,502,481,0,493,520,490,497,484],
[495,512,487,491,511,513,493,507,0,536,473,482,490],
[487,487,496,485,509,485,453,480,464,0,478,459,485],
[529,533,493,498,528,514,510,510,527,522,0,488,500],
[520,531,491,505,521,508,505,503,518,541,512,0,524],
[499,503,507,502,517,511,513,516,510,515,500,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 128, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,558,527,509,545,511,509,483,535,491,526,490,477],
[442,0,485,513,496,482,486,489,501,471,491,496,473],
[473,515,0,510,512,482,497,478,501,481,506,502,469],
[491,487,490,0,488,470,444,446,492,475,470,498,450],
[455,504,488,512,0,455,470,457,479,489,482,460,444],
[489,518,518,530,545,0,495,497,505,507,505,510,480],
[491,514,503,556,530,505,0,485,504,497,506,510,447],
[517,511,522,554,543,503,515,0,518,501,524,519,492],
[465,499,499,508,521,495,496,482,0,491,502,503,493],
[509,529,519,525,511,493,503,499,509,0,494,500,501],
[474,509,494,530,518,495,494,476,498,506,0,509,498],
[510,504,498,502,540,490,490,481,497,500,491,0,486],
[523,527,531,550,556,520,553,508,507,499,502,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 129, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,537,504,536,531,511,514,513,540,513,499,526],
[484,0,522,522,513,522,497,502,495,529,502,481,498],
[463,478,0,505,476,480,457,469,469,510,494,465,488],
[496,478,495,0,494,505,490,483,485,507,504,465,507],
[464,487,524,506,0,503,486,496,481,512,516,471,505],
[469,478,520,495,497,0,478,480,489,498,502,466,484],
[489,503,543,510,514,522,0,500,502,521,515,500,515],
[486,498,531,517,504,520,500,0,494,496,502,492,494],
[487,505,531,515,519,511,498,506,0,510,501,484,514],
[460,471,490,493,488,502,479,504,490,0,504,468,494],
[487,498,506,496,484,498,485,498,499,496,0,486,497],
[501,519,535,535,529,534,500,508,516,532,514,0,521],
[474,502,512,493,495,516,485,506,486,506,503,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 130, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,503,502,495,494,503,505,484,515,500,490,508],
[499,0,497,503,484,502,465,483,488,502,494,478,482],
[497,503,0,498,509,505,487,511,477,478,502,476,478],
[498,497,502,0,484,505,490,495,498,511,502,492,490],
[505,516,491,516,0,494,478,496,466,495,497,483,499],
[506,498,495,495,506,0,503,489,468,506,497,475,479],
[497,535,513,510,522,497,0,515,480,494,506,511,509],
[495,517,489,505,504,511,485,0,479,514,490,496,485],
[516,512,523,502,534,532,520,521,0,527,532,499,505],
[485,498,522,489,505,494,506,486,473,0,493,486,497],
[500,506,498,498,503,503,494,510,468,507,0,478,504],
[510,522,524,508,517,525,489,504,501,514,522,0,532],
[492,518,522,510,501,521,491,515,495,503,496,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 131, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,502,513,529,512,474,528,498,494,500,516,503],
[501,0,490,492,552,522,471,506,485,459,456,466,508],
[498,510,0,514,521,508,482,536,502,473,468,504,477],
[487,508,486,0,518,477,468,486,474,471,484,506,464],
[471,448,479,482,0,488,493,479,466,471,455,477,473],
[488,478,492,523,512,0,466,537,449,490,454,468,519],
[526,529,518,532,507,534,0,537,476,496,485,497,468],
[472,494,464,514,521,463,463,0,456,484,463,487,510],
[502,515,498,526,534,551,524,544,0,508,500,529,527],
[506,541,527,529,529,510,504,516,492,0,479,499,496],
[500,544,532,516,545,546,515,537,500,521,0,543,501],
[484,534,496,494,523,532,503,513,471,501,457,0,493],
[497,492,523,536,527,481,532,490,473,504,499,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 132, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,495,495,486,492,488,508,506,487,535,503,522],
[493,0,530,488,498,504,499,464,493,480,525,494,531],
[505,470,0,470,474,485,503,514,461,501,505,490,491],
[505,512,530,0,518,525,513,480,539,506,547,514,550],
[514,502,526,482,0,539,493,489,516,489,549,516,540],
[508,496,515,475,461,0,492,490,494,503,500,495,520],
[512,501,497,487,507,508,0,491,507,532,520,501,531],
[492,536,486,520,511,510,509,0,504,497,508,487,532],
[494,507,539,461,484,506,493,496,0,497,515,474,526],
[513,520,499,494,511,497,468,503,503,0,509,520,535],
[465,475,495,453,451,500,480,492,485,491,0,464,530],
[497,506,510,486,484,505,499,513,526,480,536,0,555],
[478,469,509,450,460,480,469,468,474,465,470,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 133, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,500,500,511,486,474,507,506,483,488,506,492],
[519,0,520,536,536,492,507,522,532,512,522,524,501],
[500,480,0,505,509,484,500,490,490,501,486,520,473],
[500,464,495,0,517,477,477,498,492,496,491,491,472],
[489,464,491,483,0,470,487,502,495,492,485,497,467],
[514,508,516,523,530,0,502,523,516,511,497,525,519],
[526,493,500,523,513,498,0,526,524,508,506,508,489],
[493,478,510,502,498,477,474,0,484,503,488,493,465],
[494,468,510,508,505,484,476,516,0,518,503,497,499],
[517,488,499,504,508,489,492,497,482,0,479,522,481],
[512,478,514,509,515,503,494,512,497,521,0,504,494],
[494,476,480,509,503,475,492,507,503,478,496,0,489],
[508,499,527,528,533,481,511,535,501,519,506,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 134, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,605,536,513,454,509,521,520,539,493,522,559],
[492,0,543,485,475,466,493,509,490,516,460,520,540],
[395,457,0,473,463,422,429,487,445,473,459,478,485],
[464,515,527,0,511,498,495,544,498,548,480,509,526],
[487,525,537,489,0,516,482,506,499,526,465,497,499],
[546,534,578,502,484,0,500,549,515,546,455,581,551],
[491,507,571,505,518,500,0,532,470,534,478,535,555],
[479,491,513,456,494,451,468,0,475,501,476,535,508],
[480,510,555,502,501,485,530,525,0,534,511,497,533],
[461,484,527,452,474,454,466,499,466,0,459,483,506],
[507,540,541,520,535,545,522,524,489,541,0,546,563],
[478,480,522,491,503,419,465,465,503,517,454,0,518],
[441,460,515,474,501,449,445,492,467,494,437,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 135, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,390,298,621,492,530,438,583,602,516,569,542,636],
[610,0,514,655,651,492,431,578,498,443,546,732,490],
[702,486,0,756,664,519,505,595,546,676,586,667,639],
[379,345,244,0,635,410,405,460,499,380,450,534,512],
[508,349,336,365,0,362,463,529,342,386,422,539,328],
[470,508,481,590,638,0,513,644,468,684,677,745,608],
[562,569,495,595,537,487,0,521,464,558,503,500,438],
[417,422,405,540,471,356,479,0,482,368,404,431,341],
[398,502,454,501,658,532,536,518,0,382,511,591,612],
[484,557,324,620,614,316,442,632,618,0,556,592,517],
[431,454,414,550,578,323,497,596,489,444,0,496,446],
[458,268,333,466,461,255,500,569,409,408,504,0,379],
[364,510,361,488,672,392,562,659,388,483,554,621,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 136, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,585,431,517,607,484,566,585,559,483,470,529],
[528,0,593,535,580,590,576,459,653,452,617,518,541],
[415,407,0,409,570,595,564,516,572,526,474,490,513],
[569,465,591,0,478,583,513,529,561,598,458,428,493],
[483,420,430,522,0,570,589,555,433,516,483,410,515],
[393,410,405,417,430,0,400,455,446,395,452,546,371],
[516,424,436,487,411,600,0,471,557,444,464,519,403],
[434,541,484,471,445,545,529,0,702,514,435,490,618],
[415,347,428,439,567,554,443,298,0,497,382,517,365],
[441,548,474,402,484,605,556,486,503,0,429,492,392],
[517,383,526,542,517,548,536,565,618,571,0,554,539],
[530,482,510,572,590,454,481,510,483,508,446,0,435],
[471,459,487,507,485,629,597,382,635,608,461,565,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 137, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,442,465,433,476,491,551,468,468,497,471,498],
[514,0,498,514,477,480,517,534,459,451,502,494,492],
[558,502,0,535,493,541,552,568,499,510,502,449,479],
[535,486,465,0,499,515,492,545,460,496,494,495,466],
[567,523,507,501,0,534,510,558,469,511,530,519,526],
[524,520,459,485,466,0,513,537,451,495,488,464,453],
[509,483,448,508,490,487,0,526,467,463,510,418,471],
[449,466,432,455,442,463,474,0,410,425,428,424,472],
[532,541,501,540,531,549,533,590,0,529,475,476,509],
[532,549,490,504,489,505,537,575,471,0,539,472,531],
[503,498,498,506,470,512,490,572,525,461,0,465,506],
[529,506,551,505,481,536,582,576,524,528,535,0,516],
[502,508,521,534,474,547,529,528,491,469,494,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 138, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,479,476,460,511,499,500,448,511,413,478,483],
[536,0,516,475,477,491,503,430,432,505,420,495,503],
[521,484,0,493,495,535,497,442,477,506,450,508,488],
[524,525,507,0,430,485,518,485,457,529,446,502,495],
[540,523,505,570,0,542,518,488,469,529,478,577,508],
[489,509,465,515,458,0,496,426,441,509,434,485,489],
[501,497,503,482,482,504,0,477,418,519,465,498,486],
[500,570,558,515,512,574,523,0,500,520,474,566,513],
[552,568,523,543,531,559,582,500,0,535,503,566,499],
[489,495,494,471,471,491,481,480,465,0,463,494,442],
[587,580,550,554,522,566,535,526,497,537,0,552,530],
[522,505,492,498,423,515,502,434,434,506,448,0,486],
[517,497,512,505,492,511,514,487,501,558,470,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 139, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,511,497,486,463,484,509,499,484,464,498,489],
[519,0,527,525,518,481,502,512,522,499,488,509,506],
[489,473,0,488,492,456,473,485,498,471,441,478,467],
[503,475,512,0,487,468,476,485,494,481,456,478,455],
[514,482,508,513,0,480,502,495,499,483,483,475,470],
[537,519,544,532,520,0,497,513,513,492,493,495,497],
[516,498,527,524,498,503,0,523,523,491,501,508,500],
[491,488,515,515,505,487,477,0,514,479,462,488,496],
[501,478,502,506,501,487,477,486,0,471,459,483,474],
[516,501,529,519,517,508,509,521,529,0,487,504,494],
[536,512,559,544,517,507,499,538,541,513,0,506,492],
[502,491,522,522,525,505,492,512,517,496,494,0,484],
[511,494,533,545,530,503,500,504,526,506,508,516,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 140, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,490,484,508,511,515,510,527,505,501,477,491],
[493,0,472,484,488,492,506,509,488,504,496,485,480],
[510,528,0,523,527,534,520,515,547,549,498,511,549],
[516,516,477,0,499,520,521,503,501,513,496,501,513],
[492,512,473,501,0,524,515,509,520,530,492,502,500],
[489,508,466,480,476,0,498,508,521,503,519,525,529],
[485,494,480,479,485,502,0,498,488,505,501,484,487],
[490,491,485,497,491,492,502,0,485,531,486,493,470],
[473,512,453,499,480,479,512,515,0,510,493,474,501],
[495,496,451,487,470,497,495,469,490,0,479,462,490],
[499,504,502,504,508,481,499,514,507,521,0,507,500],
[523,515,489,499,498,475,516,507,526,538,493,0,504],
[509,520,451,487,500,471,513,530,499,510,500,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 141, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,532,500,534,517,546,550,493,543,505,524,520,510],
[468,0,467,517,472,499,542,490,502,490,525,502,468],
[500,533,0,529,531,514,539,528,545,508,524,537,536],
[466,483,471,0,494,481,521,467,511,480,497,464,502],
[483,528,469,506,0,501,502,485,536,496,504,491,482],
[454,501,486,519,499,0,529,470,502,472,475,474,502],
[450,458,461,479,498,471,0,462,475,444,475,473,474],
[507,510,472,533,515,530,538,0,534,499,507,516,508],
[457,498,455,489,464,498,525,466,0,498,497,481,503],
[495,510,492,520,504,528,556,501,502,0,520,505,499],
[476,475,476,503,496,525,525,493,503,480,0,504,520],
[480,498,463,536,509,526,527,484,519,495,496,0,486],
[490,532,464,498,518,498,526,492,497,501,480,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 142, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,508,513,595,530,488,501,542,507,539,545,505],
[520,0,447,506,543,538,487,510,480,498,568,495,550],
[492,553,0,537,593,481,495,515,503,473,570,512,512],
[487,494,463,0,515,486,489,459,463,483,564,486,499],
[405,457,407,485,0,435,477,503,462,449,489,459,424],
[470,462,519,514,565,0,523,453,501,466,513,519,463],
[512,513,505,511,523,477,0,512,507,446,591,561,491],
[499,490,485,541,497,547,488,0,493,447,554,502,450],
[458,520,497,537,538,499,493,507,0,510,556,520,492],
[493,502,527,517,551,534,554,553,490,0,612,510,504],
[461,432,430,436,511,487,409,446,444,388,0,439,453],
[455,505,488,514,541,481,439,498,480,490,561,0,530],
[495,450,488,501,576,537,509,550,508,496,547,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 143, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,503,508,516,483,503,470,501,478,501,491,494],
[526,0,526,512,522,491,490,481,500,483,513,490,522],
[497,474,0,521,504,472,515,476,487,476,512,491,480],
[492,488,479,0,488,477,494,474,499,465,508,480,500],
[484,478,496,512,0,461,490,471,488,478,487,475,486],
[517,509,528,523,539,0,503,501,508,493,526,497,518],
[497,510,485,506,510,497,0,480,476,482,513,476,504],
[530,519,524,526,529,499,520,0,517,502,527,504,513],
[499,500,513,501,512,492,524,483,0,477,509,500,507],
[522,517,524,535,522,507,518,498,523,0,524,511,518],
[499,487,488,492,513,474,487,473,491,476,0,472,497],
[509,510,509,520,525,503,524,496,500,489,528,0,491],
[506,478,520,500,514,482,496,487,493,482,503,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 144, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,501,482,505,524,549,520,475,506,487,505,534],
[499,0,504,496,516,516,554,540,510,479,507,533,535],
[499,496,0,476,493,506,536,522,483,495,490,503,496],
[518,504,524,0,494,500,516,535,492,488,516,539,523],
[495,484,507,506,0,530,524,552,492,501,488,510,521],
[476,484,494,500,470,0,526,505,485,450,478,480,491],
[451,446,464,484,476,474,0,507,462,468,479,493,508],
[480,460,478,465,448,495,493,0,446,452,466,462,488],
[525,490,517,508,508,515,538,554,0,516,527,522,554],
[494,521,505,512,499,550,532,548,484,0,481,515,545],
[513,493,510,484,512,522,521,534,473,519,0,515,531],
[495,467,497,461,490,520,507,538,478,485,485,0,481],
[466,465,504,477,479,509,492,512,446,455,469,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 145, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,530,513,548,518,509,516,516,526,489,502,507,500],
[470,0,484,492,470,443,456,473,474,477,464,459,454],
[487,516,0,500,471,468,485,503,488,464,499,480,477],
[452,508,500,0,483,492,495,512,486,474,484,462,489],
[482,530,529,517,0,490,502,495,481,492,462,503,499],
[491,557,532,508,510,0,526,509,489,497,499,486,498],
[484,544,515,505,498,474,0,503,499,486,495,496,494],
[484,527,497,488,505,491,497,0,508,501,489,503,464],
[474,526,512,514,519,511,501,492,0,476,507,491,504],
[511,523,536,526,508,503,514,499,524,0,509,494,505],
[498,536,501,516,538,501,505,511,493,491,0,490,487],
[493,541,520,538,497,514,504,497,509,506,510,0,502],
[500,546,523,511,501,502,506,536,496,495,513,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 146, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,533,484,518,488,495,490,521,476,492,480,536],
[504,0,542,517,529,486,499,508,527,504,486,501,489],
[467,458,0,486,509,445,501,499,508,482,525,518,514],
[516,483,514,0,556,492,478,534,494,501,486,506,534],
[482,471,491,444,0,440,478,490,467,508,430,497,503],
[512,514,555,508,560,0,504,549,538,542,491,542,555],
[505,501,499,522,522,496,0,537,558,506,538,495,523],
[510,492,501,466,510,451,463,0,518,482,491,515,520],
[479,473,492,506,533,462,442,482,0,499,483,470,513],
[524,496,518,499,492,458,494,518,501,0,490,481,486],
[508,514,475,514,570,509,462,509,517,510,0,521,523],
[520,499,482,494,503,458,505,485,530,519,479,0,510],
[464,511,486,466,497,445,477,480,487,514,477,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 147, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,517,509,679,828,421,705,605,448,472,510,450],
[573,0,599,540,693,643,589,647,390,483,680,476,454],
[483,401,0,637,592,551,529,586,593,513,592,513,500],
[491,460,363,0,519,474,494,480,498,458,561,376,406],
[321,307,408,481,0,526,356,585,387,352,369,412,404],
[172,357,449,526,474,0,350,612,453,306,494,545,416],
[579,411,471,506,644,650,0,652,519,495,536,570,395],
[295,353,414,520,415,388,348,0,448,273,442,311,257],
[395,610,407,502,613,547,481,552,0,568,584,434,541],
[552,517,487,542,648,694,505,727,432,0,570,531,330],
[528,320,408,439,631,506,464,558,416,430,0,386,498],
[490,524,487,624,588,455,430,689,566,469,614,0,454],
[550,546,500,594,596,584,605,743,459,670,502,546,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 148, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,498,515,514,521,493,521,520,536,497,483,494],
[510,0,485,495,495,496,475,527,486,535,512,465,452],
[502,515,0,493,485,505,505,503,485,524,483,454,465],
[485,505,507,0,510,522,488,502,514,520,498,475,488],
[486,505,515,490,0,496,477,507,502,517,489,482,467],
[479,504,495,478,504,0,470,490,502,508,505,475,477],
[507,525,495,512,523,530,0,525,526,516,498,489,501],
[479,473,497,498,493,510,475,0,483,503,514,469,498],
[480,514,515,486,498,498,474,517,0,537,516,503,464],
[464,465,476,480,483,492,484,497,463,0,491,461,471],
[503,488,517,502,511,495,502,486,484,509,0,485,498],
[517,535,546,525,518,525,511,531,497,539,515,0,503],
[506,548,535,512,533,523,499,502,536,529,502,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 149, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,523,437,486,460,641,601,611,457,381,569,604,504],
[477,0,443,634,462,574,602,465,509,391,657,559,564],
[563,557,0,580,570,642,693,559,517,488,629,512,465],
[514,366,420,0,518,752,497,452,506,449,624,582,497],
[540,538,430,482,0,610,624,590,390,402,594,609,607],
[359,426,358,248,390,0,611,362,172,419,437,385,462],
[399,398,307,503,376,389,0,460,502,362,447,594,371],
[389,535,441,548,410,638,540,0,488,390,644,629,547],
[543,491,483,494,610,828,498,512,0,464,626,552,631],
[619,609,512,551,598,581,638,610,536,0,604,739,490],
[431,343,371,376,406,563,553,356,374,396,0,355,399],
[396,441,488,418,391,615,406,371,448,261,645,0,484],
[496,436,535,503,393,538,629,453,369,510,601,516,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 150, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,496,507,469,485,511,545,466,504,482,505,525],
[523,0,506,514,517,513,530,544,513,531,491,515,545],
[504,494,0,486,490,475,542,532,491,496,485,527,537],
[493,486,514,0,487,504,476,510,487,479,479,504,519],
[531,483,510,513,0,506,491,506,491,532,492,493,514],
[515,487,525,496,494,0,512,513,519,504,502,498,520],
[489,470,458,524,509,488,0,503,482,501,467,501,496],
[455,456,468,490,494,487,497,0,468,478,491,491,488],
[534,487,509,513,509,481,518,532,0,512,505,539,536],
[496,469,504,521,468,496,499,522,488,0,487,477,493],
[518,509,515,521,508,498,533,509,495,513,0,526,524],
[495,485,473,496,507,502,499,509,461,523,474,0,493],
[475,455,463,481,486,480,504,512,464,507,476,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 151, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,509,524,522,494,511,501,484,502,491,466,496],
[530,0,511,525,541,495,535,515,518,524,494,505,496],
[491,489,0,507,502,479,518,508,497,507,488,481,487],
[476,475,493,0,493,461,485,484,493,479,475,461,466],
[478,459,498,507,0,470,500,483,489,467,489,454,469],
[506,505,521,539,530,0,523,516,485,508,510,480,501],
[489,465,482,515,500,477,0,508,503,483,500,475,475],
[499,485,492,516,517,484,492,0,508,500,488,473,476],
[516,482,503,507,511,515,497,492,0,506,499,483,493],
[498,476,493,521,533,492,517,500,494,0,514,493,510],
[509,506,512,525,511,490,500,512,501,486,0,494,476],
[534,495,519,539,546,520,525,527,517,507,506,0,524],
[504,504,513,534,531,499,525,524,507,490,524,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 152, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,503,508,476,481,515,493,515,485,491,497,498],
[500,0,496,504,488,494,489,476,497,493,483,506,506],
[497,504,0,492,502,496,501,473,506,504,520,512,506],
[492,496,508,0,481,478,501,477,488,507,493,486,520],
[524,512,498,519,0,507,496,493,498,524,517,491,513],
[519,506,504,522,493,0,505,486,507,494,496,488,503],
[485,511,499,499,504,495,0,463,494,481,490,507,483],
[507,524,527,523,507,514,537,0,507,513,503,495,518],
[485,503,494,512,502,493,506,493,0,498,503,500,508],
[515,507,496,493,476,506,519,487,502,0,532,494,486],
[509,517,480,507,483,504,510,497,497,468,0,511,499],
[503,494,488,514,509,512,493,505,500,506,489,0,491],
[502,494,494,480,487,497,517,482,492,514,501,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 153, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,539,462,525,531,513,484,478,492,501,464,440],
[507,0,461,474,550,554,458,520,518,489,507,484,434],
[461,539,0,516,512,557,470,531,548,487,552,553,540],
[538,526,484,0,524,556,475,461,488,480,508,448,455],
[475,450,488,476,0,489,458,546,533,479,478,520,455],
[469,446,443,444,511,0,484,465,501,483,500,458,439],
[487,542,530,525,542,516,0,528,506,504,515,517,474],
[516,480,469,539,454,535,472,0,513,472,505,476,463],
[522,482,452,512,467,499,494,487,0,482,429,550,462],
[508,511,513,520,521,517,496,528,518,0,497,512,432],
[499,493,448,492,522,500,485,495,571,503,0,510,477],
[536,516,447,552,480,542,483,524,450,488,490,0,448],
[560,566,460,545,545,561,526,537,538,568,523,552,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 154, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,488,460,509,481,493,497,468,478,503,491,470],
[529,0,497,474,542,493,511,522,526,517,516,500,517],
[512,503,0,483,545,504,520,547,525,515,520,520,515],
[540,526,517,0,522,495,546,535,502,523,550,512,525],
[491,458,455,478,0,473,499,491,497,493,519,482,484],
[519,507,496,505,527,0,515,552,515,516,553,532,527],
[507,489,480,454,501,485,0,506,477,493,507,499,492],
[503,478,453,465,509,448,494,0,480,478,491,486,481],
[532,474,475,498,503,485,523,520,0,492,517,530,508],
[522,483,485,477,507,484,507,522,508,0,510,483,507],
[497,484,480,450,481,447,493,509,483,490,0,494,465],
[509,500,480,488,518,468,501,514,470,517,506,0,518],
[530,483,485,475,516,473,508,519,492,493,535,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 155, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,490,500,507,435,478,480,481,497,486,480,492],
[520,0,531,522,524,488,535,555,530,512,510,497,517],
[510,469,0,561,532,489,493,507,471,538,469,503,503],
[500,478,439,0,480,466,491,469,464,489,457,469,479],
[493,476,468,520,0,444,485,506,493,486,464,495,482],
[565,512,511,534,556,0,506,582,496,499,525,521,521],
[522,465,507,509,515,494,0,520,496,520,532,512,534],
[520,445,493,531,494,418,480,0,467,512,467,473,461],
[519,470,529,536,507,504,504,533,0,528,510,541,528],
[503,488,462,511,514,501,480,488,472,0,456,483,501],
[514,490,531,543,536,475,468,533,490,544,0,502,525],
[520,503,497,531,505,479,488,527,459,517,498,0,515],
[508,483,497,521,518,479,466,539,472,499,475,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 156, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,511,518,516,480,501,481,471,464,503,471,520],
[506,0,534,541,502,509,503,542,520,475,505,481,492],
[489,466,0,493,494,502,466,467,460,465,474,502,466],
[482,459,507,0,484,480,496,486,460,447,444,457,463],
[484,498,506,516,0,487,474,470,471,446,478,511,448],
[520,491,498,520,513,0,481,488,472,465,510,489,485],
[499,497,534,504,526,519,0,527,501,519,527,514,527],
[519,458,533,514,530,512,473,0,482,497,510,519,488],
[529,480,540,540,529,528,499,518,0,474,510,494,513],
[536,525,535,553,554,535,481,503,526,0,535,497,529],
[497,495,526,556,522,490,473,490,490,465,0,498,494],
[529,519,498,543,489,511,486,481,506,503,502,0,496],
[480,508,534,537,552,515,473,512,487,471,506,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 157, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,493,430,483,512,474,477,490,485,506,519,545],
[493,0,493,460,495,484,498,442,499,462,529,538,540],
[507,507,0,461,471,485,464,498,484,477,507,513,566],
[570,540,539,0,522,528,515,486,548,519,538,537,558],
[517,505,529,478,0,539,495,489,555,509,538,548,603],
[488,516,515,472,461,0,476,457,501,479,485,509,557],
[526,502,536,485,505,524,0,485,541,493,567,515,581],
[523,558,502,514,511,543,515,0,542,498,547,536,578],
[510,501,516,452,445,499,459,458,0,474,525,506,532],
[515,538,523,481,491,521,507,502,526,0,550,534,566],
[494,471,493,462,462,515,433,453,475,450,0,478,494],
[481,462,487,463,452,491,485,464,494,466,522,0,517],
[455,460,434,442,397,443,419,422,468,434,506,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 158, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,439,439,400,434,425,464,436,449,495,446,438],
[531,0,532,437,453,523,480,521,490,447,532,510,466],
[561,468,0,480,464,453,394,441,510,446,501,484,436],
[561,563,520,0,481,481,459,519,471,482,584,504,505],
[600,547,536,519,0,477,501,557,483,478,611,507,492],
[566,477,547,519,523,0,498,531,457,461,540,462,474],
[575,520,606,541,499,502,0,521,518,451,563,466,479],
[536,479,559,481,443,469,479,0,494,446,552,493,472],
[564,510,490,529,517,543,482,506,0,436,533,497,529],
[551,553,554,518,522,539,549,554,564,0,550,496,495],
[505,468,499,416,389,460,437,448,467,450,0,403,467],
[554,490,516,496,493,538,534,507,503,504,597,0,520],
[562,534,564,495,508,526,521,528,471,505,533,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 159, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,556,494,524,467,521,455,558,502,489,477,544],
[489,0,486,522,444,439,528,446,523,514,507,483,540],
[444,514,0,500,470,458,545,458,442,497,469,427,500],
[506,478,500,0,503,486,545,467,523,512,478,431,549],
[476,556,530,497,0,482,546,505,518,510,505,507,519],
[533,561,542,514,518,0,562,510,524,550,549,470,569],
[479,472,455,455,454,438,0,468,490,466,434,444,514],
[545,554,542,533,495,490,532,0,539,537,554,491,587],
[442,477,558,477,482,476,510,461,0,518,467,398,500],
[498,486,503,488,490,450,534,463,482,0,510,492,509],
[511,493,531,522,495,451,566,446,533,490,0,468,536],
[523,517,573,569,493,530,556,509,602,508,532,0,544],
[456,460,500,451,481,431,486,413,500,491,464,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 160, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,503,503,539,528,503,479,519,505,513,539,536],
[497,0,498,498,498,517,492,473,507,486,474,522,516],
[497,502,0,477,489,517,491,447,496,494,477,510,496],
[497,502,523,0,492,534,490,461,493,506,507,523,510],
[461,502,511,508,0,514,497,466,486,482,508,514,520],
[472,483,483,466,486,0,488,442,460,471,484,488,488],
[497,508,509,510,503,512,0,456,511,514,505,517,530],
[521,527,553,539,534,558,544,0,529,533,494,546,552],
[481,493,504,507,514,540,489,471,0,476,486,521,496],
[495,514,506,494,518,529,486,467,524,0,518,507,532],
[487,526,523,493,492,516,495,506,514,482,0,529,507],
[461,478,490,477,486,512,483,454,479,493,471,0,494],
[464,484,504,490,480,512,470,448,504,468,493,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 161, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,519,485,477,464,502,504,492,486,488,508,470,485],
[481,0,501,516,509,475,520,508,523,569,509,455,514],
[515,499,0,516,543,521,538,491,509,519,498,467,536],
[523,484,484,0,455,501,519,456,485,522,480,491,454],
[536,491,457,545,0,506,546,516,509,551,470,517,534],
[498,525,479,499,494,0,493,492,487,533,492,484,500],
[496,480,462,481,454,507,0,483,485,475,432,433,458],
[508,492,509,544,484,508,517,0,485,526,522,504,515],
[514,477,491,515,491,513,515,515,0,536,481,476,508],
[512,431,481,478,449,467,525,474,464,0,485,447,507],
[492,491,502,520,530,508,568,478,519,515,0,504,493],
[530,545,533,509,483,516,567,496,524,553,496,0,567],
[515,486,464,546,466,500,542,485,492,493,507,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 162, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,506,501,498,476,508,463,511,523,522,498,501],
[519,0,509,525,504,493,531,494,500,514,537,516,504],
[494,491,0,485,498,507,516,490,493,509,519,495,499],
[499,475,515,0,495,502,505,474,500,496,526,507,490],
[502,496,502,505,0,503,511,486,501,487,519,515,507],
[524,507,493,498,497,0,516,500,491,508,525,532,510],
[492,469,484,495,489,484,0,484,489,486,518,499,494],
[537,506,510,526,514,500,516,0,513,523,542,523,508],
[489,500,507,500,499,509,511,487,0,519,522,524,506],
[477,486,491,504,513,492,514,477,481,0,524,497,497],
[478,463,481,474,481,475,482,458,478,476,0,471,464],
[502,484,505,493,485,468,501,477,476,503,529,0,498],
[499,496,501,510,493,490,506,492,494,503,536,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 163, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,502,480,514,472,467,500,486,476,474,504,512],
[528,0,500,515,508,482,495,528,502,510,510,491,526],
[498,500,0,490,499,484,482,521,477,511,505,527,516],
[520,485,510,0,500,510,488,524,509,525,506,498,528],
[486,492,501,500,0,475,480,501,489,485,483,513,516],
[528,518,516,490,525,0,476,519,516,506,515,524,539],
[533,505,518,512,520,524,0,534,516,519,514,498,534],
[500,472,479,476,499,481,466,0,477,475,480,499,503],
[514,498,523,491,511,484,484,523,0,504,509,499,548],
[524,490,489,475,515,494,481,525,496,0,515,500,516],
[526,490,495,494,517,485,486,520,491,485,0,495,540],
[496,509,473,502,487,476,502,501,501,500,505,0,522],
[488,474,484,472,484,461,466,497,452,484,460,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 164, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,443,525,443,511,530,489,497,531,512,458,466],
[545,0,505,524,459,539,531,546,491,503,516,486,512],
[557,495,0,543,518,561,505,526,478,556,546,459,542],
[475,476,457,0,468,537,567,521,507,499,531,444,493],
[557,541,482,532,0,517,520,499,497,560,505,479,526],
[489,461,439,463,483,0,508,518,443,511,519,431,462],
[470,469,495,433,480,492,0,488,412,466,486,407,490],
[511,454,474,479,501,482,512,0,495,520,494,425,516],
[503,509,522,493,503,557,588,505,0,542,580,504,596],
[469,497,444,501,440,489,534,480,458,0,481,424,510],
[488,484,454,469,495,481,514,506,420,519,0,441,508],
[542,514,541,556,521,569,593,575,496,576,559,0,557],
[534,488,458,507,474,538,510,484,404,490,492,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 165, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,487,498,509,506,499,503,498,508,499,524,504],
[502,0,511,489,491,501,501,502,503,489,501,504,506],
[513,489,0,503,496,527,511,503,497,503,490,496,519],
[502,511,497,0,496,521,514,507,503,488,498,504,511],
[491,509,504,504,0,511,506,519,501,518,490,513,494],
[494,499,473,479,489,0,477,474,481,496,487,491,483],
[501,499,489,486,494,523,0,507,511,489,495,502,489],
[497,498,497,493,481,526,493,0,488,493,491,482,498],
[502,497,503,497,499,519,489,512,0,498,509,494,489],
[492,511,497,512,482,504,511,507,502,0,497,511,491],
[501,499,510,502,510,513,505,509,491,503,0,523,506],
[476,496,504,496,487,509,498,518,506,489,477,0,488],
[496,494,481,489,506,517,511,502,511,509,494,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 166, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,454,439,460,451,425,505,514,466,487,484,470],
[582,0,554,527,538,516,528,554,557,591,543,583,489],
[546,446,0,474,482,516,502,510,530,523,536,522,481],
[561,473,526,0,501,497,480,480,532,518,548,488,492],
[540,462,518,499,0,488,508,494,531,527,497,534,492],
[549,484,484,503,512,0,508,487,548,560,538,517,483],
[575,472,498,520,492,492,0,512,560,525,539,515,513],
[495,446,490,520,506,513,488,0,503,488,516,496,475],
[486,443,470,468,469,452,440,497,0,497,464,462,444],
[534,409,477,482,473,440,475,512,503,0,485,522,481],
[513,457,464,452,503,462,461,484,536,515,0,487,389],
[516,417,478,512,466,483,485,504,538,478,513,0,444],
[530,511,519,508,508,517,487,525,556,519,611,556,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 167, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,553,480,506,588,580,564,598,542,482,523,500,537],
[447,0,489,467,493,509,523,498,506,491,497,496,523],
[520,511,0,460,524,492,471,572,532,495,464,500,475],
[494,533,540,0,516,472,501,598,573,479,462,509,452],
[412,507,476,484,0,411,507,497,504,459,444,523,448],
[420,491,508,528,589,0,528,531,525,514,462,459,486],
[436,477,529,499,493,472,0,521,482,479,418,505,405],
[402,502,428,402,503,469,479,0,458,473,356,474,436],
[458,494,468,427,496,475,518,542,0,517,432,459,424],
[518,509,505,521,541,486,521,527,483,0,491,476,458],
[477,503,536,538,556,538,582,644,568,509,0,534,495],
[500,504,500,491,477,541,495,526,541,524,466,0,529],
[463,477,525,548,552,514,595,564,576,542,505,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 168, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,443,397,469,433,446,511,465,446,487,427,434],
[521,0,500,426,481,503,576,470,486,524,490,463,418],
[557,500,0,421,482,491,521,445,434,558,504,580,510],
[603,574,579,0,479,624,535,513,420,555,490,461,504],
[531,519,518,521,0,480,433,527,450,481,470,394,440],
[567,497,509,376,520,0,498,486,472,432,517,460,485],
[554,424,479,465,567,502,0,479,460,457,516,493,503],
[489,530,555,487,473,514,521,0,529,460,505,443,456],
[535,514,566,580,550,528,540,471,0,520,514,504,481],
[554,476,442,445,519,568,543,540,480,0,490,437,520],
[513,510,496,510,530,483,484,495,486,510,0,484,425],
[573,537,420,539,606,540,507,557,496,563,516,0,490],
[566,582,490,496,560,515,497,544,519,480,575,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 169, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,509,488,566,536,500,550,540,499,511,496,508],
[510,0,584,561,556,566,539,562,533,500,565,516,513],
[491,416,0,470,505,508,481,501,482,456,514,469,490],
[512,439,530,0,507,504,491,521,473,529,494,467,478],
[434,444,495,493,0,492,481,536,506,520,519,457,465],
[464,434,492,496,508,0,449,550,493,484,479,503,464],
[500,461,519,509,519,551,0,585,453,488,504,461,496],
[450,438,499,479,464,450,415,0,487,495,533,490,503],
[460,467,518,527,494,507,547,513,0,539,480,501,493],
[501,500,544,471,480,516,512,505,461,0,536,477,572],
[489,435,486,506,481,521,496,467,520,464,0,458,486],
[504,484,531,533,543,497,539,510,499,523,542,0,523],
[492,487,510,522,535,536,504,497,507,428,514,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 170, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,508,514,474,519,474,494,480,534,494,491,483],
[508,0,519,513,499,535,514,510,506,542,500,506,495],
[492,481,0,519,478,510,506,478,460,512,468,476,494],
[486,487,481,0,474,505,478,451,486,521,466,457,478],
[526,501,522,526,0,524,534,516,500,547,514,528,529],
[481,465,490,495,476,0,494,483,494,520,484,492,488],
[526,486,494,522,466,506,0,477,492,513,482,481,474],
[506,490,522,549,484,517,523,0,506,542,520,509,517],
[520,494,540,514,500,506,508,494,0,520,502,503,489],
[466,458,488,479,453,480,487,458,480,0,464,462,467],
[506,500,532,534,486,516,518,480,498,536,0,514,509],
[509,494,524,543,472,508,519,491,497,538,486,0,503],
[517,505,506,522,471,512,526,483,511,533,491,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 171, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,500,523,526,543,572,521,497,519,521,573,513],
[513,0,513,493,522,478,514,531,497,485,510,565,545],
[500,487,0,498,509,510,542,521,505,476,520,551,518],
[477,507,502,0,499,473,529,489,499,507,524,533,528],
[474,478,491,501,0,490,516,500,490,510,493,523,486],
[457,522,490,527,510,0,547,531,475,492,475,574,494],
[428,486,458,471,484,453,0,476,483,449,488,504,459],
[479,469,479,511,500,469,524,0,476,447,508,516,476],
[503,503,495,501,510,525,517,524,0,521,495,514,497],
[481,515,524,493,490,508,551,553,479,0,505,552,523],
[479,490,480,476,507,525,512,492,505,495,0,539,514],
[427,435,449,467,477,426,496,484,486,448,461,0,452],
[487,455,482,472,514,506,541,524,503,477,486,548,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 172, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,483,507,478,507,490,497,495,468,516,504,512],
[512,0,518,499,505,501,498,509,519,505,516,503,510],
[517,482,0,477,456,477,483,502,491,476,501,511,496],
[493,501,523,0,500,519,523,517,515,520,528,517,509],
[522,495,544,500,0,521,505,506,502,479,522,518,527],
[493,499,523,481,479,0,500,534,511,470,503,503,514],
[510,502,517,477,495,500,0,497,487,471,501,489,511],
[503,491,498,483,494,466,503,0,496,492,490,476,494],
[505,481,509,485,498,489,513,504,0,499,492,494,515],
[532,495,524,480,521,530,529,508,501,0,510,514,533],
[484,484,499,472,478,497,499,510,508,490,0,473,475],
[496,497,489,483,482,497,511,524,506,486,527,0,507],
[488,490,504,491,473,486,489,506,485,467,525,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 173, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,459,568,500,415,463,493,441,460,462,459,470],
[592,0,548,560,525,500,441,447,468,497,489,482,515],
[541,452,0,504,562,498,448,561,542,469,501,496,500],
[432,440,496,0,518,424,442,444,467,410,462,429,445],
[500,475,438,482,0,408,435,453,438,436,463,481,446],
[585,500,502,576,592,0,485,509,562,518,532,518,555],
[537,559,552,558,565,515,0,580,546,521,484,580,497],
[507,553,439,556,547,491,420,0,505,486,524,549,531],
[559,532,458,533,562,438,454,495,0,476,489,554,475],
[540,503,531,590,564,482,479,514,524,0,545,550,513],
[538,511,499,538,537,468,516,476,511,455,0,488,536],
[541,518,504,571,519,482,420,451,446,450,512,0,485],
[530,485,500,555,554,445,503,469,525,487,464,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 174, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,463,461,458,477,465,475,452,470,493,469,447],
[538,0,474,488,494,495,490,504,495,495,490,493,476],
[537,526,0,500,504,521,524,518,498,504,500,524,479],
[539,512,500,0,525,527,528,525,531,513,512,523,505],
[542,506,496,475,0,519,529,487,495,499,524,508,483],
[523,505,479,473,481,0,499,495,492,504,513,482,477],
[535,510,476,472,471,501,0,490,467,468,489,496,470],
[525,496,482,475,513,505,510,0,473,491,501,511,458],
[548,505,502,469,505,508,533,527,0,495,520,514,490],
[530,505,496,487,501,496,532,509,505,0,511,512,471],
[507,510,500,488,476,487,511,499,480,489,0,505,487],
[531,507,476,477,492,518,504,489,486,488,495,0,470],
[553,524,521,495,517,523,530,542,510,529,513,530,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 175, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,520,507,549,508,529,524,535,551,538,527,482],
[503,0,532,491,503,484,517,506,502,549,533,516,504],
[480,468,0,482,503,504,493,485,492,509,535,465,487],
[493,509,518,0,552,483,520,543,545,517,512,489,510],
[451,497,497,448,0,463,490,480,483,478,483,480,478],
[492,516,496,517,537,0,523,492,512,535,500,497,506],
[471,483,507,480,510,477,0,486,509,487,482,488,485],
[476,494,515,457,520,508,514,0,503,504,503,478,484],
[465,498,508,455,517,488,491,497,0,509,528,489,486],
[449,451,491,483,522,465,513,496,491,0,495,467,470],
[462,467,465,488,517,500,518,497,472,505,0,493,480],
[473,484,535,511,520,503,512,522,511,533,507,0,479],
[518,496,513,490,522,494,515,516,514,530,520,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 176, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,478,474,495,497,497,505,509,521,513,500,495],
[485,0,498,513,479,552,528,505,514,498,522,503,512],
[522,502,0,522,517,502,524,498,525,517,516,532,532],
[526,487,478,0,507,511,517,484,525,512,530,525,526],
[505,521,483,493,0,505,521,487,501,514,529,518,529],
[503,448,498,489,495,0,514,447,517,524,504,482,521],
[503,472,476,483,479,486,0,502,499,513,480,499,505],
[495,495,502,516,513,553,498,0,529,524,510,487,532],
[491,486,475,475,499,483,501,471,0,480,486,481,504],
[479,502,483,488,486,476,487,476,520,0,501,499,502],
[487,478,484,470,471,496,520,490,514,499,0,488,498],
[500,497,468,475,482,518,501,513,519,501,512,0,508],
[505,488,468,474,471,479,495,468,496,498,502,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 177, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,482,492,523,503,511,503,514,516,520,495,504],
[489,0,473,498,524,498,515,501,505,510,494,534,511],
[518,527,0,516,504,498,515,515,526,516,492,522,514],
[508,502,484,0,526,509,494,523,500,511,496,506,518],
[477,476,496,474,0,468,501,475,492,478,494,502,492],
[497,502,502,491,532,0,490,512,529,502,488,523,485],
[489,485,485,506,499,510,0,505,504,517,482,511,504],
[497,499,485,477,525,488,495,0,517,475,474,519,495],
[486,495,474,500,508,471,496,483,0,494,458,511,511],
[484,490,484,489,522,498,483,525,506,0,484,529,504],
[480,506,508,504,506,512,518,526,542,516,0,509,524],
[505,466,478,494,498,477,489,481,489,471,491,0,493],
[496,489,486,482,508,515,496,505,489,496,476,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 178, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,503,498,508,456,497,500,522,504,504,501,465],
[497,0,527,522,522,494,501,498,484,529,484,526,474],
[497,473,0,480,470,450,514,474,468,491,477,453,456],
[502,478,520,0,508,510,505,494,482,486,509,484,468],
[492,478,530,492,0,504,483,490,475,496,477,471,455],
[544,506,550,490,496,0,523,502,511,496,520,511,492],
[503,499,486,495,517,477,0,498,509,506,481,474,464],
[500,502,526,506,510,498,502,0,502,520,519,510,452],
[478,516,532,518,525,489,491,498,0,508,503,488,508],
[496,471,509,514,504,504,494,480,492,0,487,488,466],
[496,516,523,491,523,480,519,481,497,513,0,508,475],
[499,474,547,516,529,489,526,490,512,512,492,0,462],
[535,526,544,532,545,508,536,548,492,534,525,538,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 179, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,542,496,511,496,508,519,499,534,519,505,514,523],
[458,0,481,463,479,477,472,468,476,487,496,497,491],
[504,519,0,514,536,499,511,511,507,522,483,499,490],
[489,537,486,0,513,506,503,481,500,491,498,483,506],
[504,521,464,487,0,469,469,482,480,498,522,480,478],
[492,523,501,494,531,0,506,499,506,504,511,517,520],
[481,528,489,497,531,494,0,474,515,501,483,500,484],
[501,532,489,519,518,501,526,0,529,527,498,511,502],
[466,524,493,500,520,494,485,471,0,499,496,480,487],
[481,513,478,509,502,496,499,473,501,0,494,498,512],
[495,504,517,502,478,489,517,502,504,506,0,491,490],
[486,503,501,517,520,483,500,489,520,502,509,0,491],
[477,509,510,494,522,480,516,498,513,488,510,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 180, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,494,505,507,517,488,512,525,506,503,484,485],
[498,0,515,510,483,517,499,484,496,509,519,478,502],
[506,485,0,504,493,512,488,495,495,508,500,475,486],
[495,490,496,0,487,518,488,493,525,497,487,485,495],
[493,517,507,513,0,515,491,492,522,507,501,458,488],
[483,483,488,482,485,0,485,466,482,480,493,459,482],
[512,501,512,512,509,515,0,515,530,509,503,495,515],
[488,516,505,507,508,534,485,0,508,515,488,500,508],
[475,504,505,475,478,518,470,492,0,484,489,465,492],
[494,491,492,503,493,520,491,485,516,0,501,479,496],
[497,481,500,513,499,507,497,512,511,499,0,477,488],
[516,522,525,515,542,541,505,500,535,521,523,0,528],
[515,498,514,505,512,518,485,492,508,504,512,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 181, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,498,476,494,495,479,480,477,492,496,488,507],
[497,0,496,498,495,494,480,451,488,485,494,504,483],
[502,504,0,505,512,483,490,477,486,489,507,481,486],
[524,502,495,0,512,494,477,496,495,491,503,486,486],
[506,505,488,488,0,518,485,476,504,477,481,473,495],
[505,506,517,506,482,0,494,481,504,502,484,490,493],
[521,520,510,523,515,506,0,514,507,500,514,498,491],
[520,549,523,504,524,519,486,0,517,504,509,495,509],
[523,512,514,505,496,496,493,483,0,495,510,486,485],
[508,515,511,509,523,498,500,496,505,0,514,495,518],
[504,506,493,497,519,516,486,491,490,486,0,485,487],
[512,496,519,514,527,510,502,505,514,505,515,0,499],
[493,517,514,514,505,507,509,491,515,482,513,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 182, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,502,494,523,504,494,534,524,488,521,502,517],
[488,0,496,495,493,511,505,511,518,480,525,512,504],
[498,504,0,525,511,514,504,499,529,497,531,478,493],
[506,505,475,0,494,521,505,480,506,488,512,487,544],
[477,507,489,506,0,507,507,477,506,480,488,457,518],
[496,489,486,479,493,0,498,495,489,486,512,469,481],
[506,495,496,495,493,502,0,506,496,486,504,505,504],
[466,489,501,520,523,505,494,0,517,492,521,492,511],
[476,482,471,494,494,511,504,483,0,490,507,473,501],
[512,520,503,512,520,514,514,508,510,0,534,499,526],
[479,475,469,488,512,488,496,479,493,466,0,447,496],
[498,488,522,513,543,531,495,508,527,501,553,0,526],
[483,496,507,456,482,519,496,489,499,474,504,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 183, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,488,525,499,497,500,498,515,479,499,496,515],
[496,0,503,520,525,503,516,507,510,491,513,516,488],
[512,497,0,533,523,498,534,500,535,515,507,499,512],
[475,480,467,0,495,479,498,505,502,477,505,474,514],
[501,475,477,505,0,492,497,495,502,483,491,515,489],
[503,497,502,521,508,0,553,529,530,503,517,477,501],
[500,484,466,502,503,447,0,477,515,491,505,501,492],
[502,493,500,495,505,471,523,0,512,495,496,494,501],
[485,490,465,498,498,470,485,488,0,487,485,482,485],
[521,509,485,523,517,497,509,505,513,0,508,501,503],
[501,487,493,495,509,483,495,504,515,492,0,506,488],
[504,484,501,526,485,523,499,506,518,499,494,0,503],
[485,512,488,486,511,499,508,499,515,497,512,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 184, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,486,459,495,487,480,502,477,492,499,485,511],
[522,0,508,492,514,497,500,499,480,508,518,500,496],
[514,492,0,494,505,506,502,492,479,506,492,481,502],
[541,508,506,0,520,524,494,527,503,509,529,509,524],
[505,486,495,480,0,503,469,494,492,503,483,478,500],
[513,503,494,476,497,0,492,507,502,488,500,481,501],
[520,500,498,506,531,508,0,496,491,509,516,505,506],
[498,501,508,473,506,493,504,0,478,484,497,499,512],
[523,520,521,497,508,498,509,522,0,526,503,487,536],
[508,492,494,491,497,512,491,516,474,0,487,476,499],
[501,482,508,471,517,500,484,503,497,513,0,502,523],
[515,500,519,491,522,519,495,501,513,524,498,0,524],
[489,504,498,476,500,499,494,488,464,501,477,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 185, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,518,461,524,510,457,608,613,561,584,471,604],
[486,0,474,438,502,535,485,574,530,645,567,562,504],
[482,526,0,535,514,528,555,590,481,545,557,511,585],
[539,562,465,0,520,478,466,492,535,633,466,494,569],
[476,498,486,480,0,553,535,607,602,598,524,415,529],
[490,465,472,522,447,0,487,505,523,455,468,444,456],
[543,515,445,534,465,513,0,572,553,618,547,482,491],
[392,426,410,508,393,495,428,0,494,517,505,412,501],
[387,470,519,465,398,477,447,506,0,517,528,457,488],
[439,355,455,367,402,545,382,483,483,0,530,434,423],
[416,433,443,534,476,532,453,495,472,470,0,363,422],
[529,438,489,506,585,556,518,588,543,566,637,0,536],
[396,496,415,431,471,544,509,499,512,577,578,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 186, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,519,506,527,547,531,522,495,502,482,480,465],
[482,0,539,519,539,576,553,544,544,549,502,515,520],
[481,461,0,532,514,547,502,495,524,537,514,515,489],
[494,481,468,0,492,478,497,519,502,494,476,499,466],
[473,461,486,508,0,515,501,487,506,480,477,480,466],
[453,424,453,522,485,0,494,522,501,499,447,469,467],
[469,447,498,503,499,506,0,511,516,519,480,464,472],
[478,456,505,481,513,478,489,0,491,522,499,474,467],
[505,456,476,498,494,499,484,509,0,506,485,516,470],
[498,451,463,506,520,501,481,478,494,0,494,484,462],
[518,498,486,524,523,553,520,501,515,506,0,490,486],
[520,485,485,501,520,531,536,526,484,516,510,0,482],
[535,480,511,534,534,533,528,533,530,538,514,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 187, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,501,493,527,495,486,503,507,465,495,466,488],
[506,0,496,526,509,515,507,502,517,474,512,480,515],
[499,504,0,497,513,535,497,501,479,476,515,468,498],
[507,474,503,0,528,508,504,484,505,488,503,481,525],
[473,491,487,472,0,505,471,493,495,476,488,474,472],
[505,485,465,492,495,0,491,474,493,456,492,438,489],
[514,493,503,496,529,509,0,511,504,505,502,487,518],
[497,498,499,516,507,526,489,0,501,456,497,493,508],
[493,483,521,495,505,507,496,499,0,472,514,455,501],
[535,526,524,512,524,544,495,544,528,0,551,509,521],
[505,488,485,497,512,508,498,503,486,449,0,480,493],
[534,520,532,519,526,562,513,507,545,491,520,0,502],
[512,485,502,475,528,511,482,492,499,479,507,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 188, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,561,502,468,520,576,446,414,576,529,618,547,456],
[439,0,448,584,460,615,557,612,519,587,615,494,413],
[498,552,0,632,568,494,420,384,520,411,586,557,404],
[532,416,368,0,342,498,398,430,576,484,620,469,399],
[480,540,432,658,0,612,504,476,589,530,603,577,391],
[424,385,506,502,388,0,340,356,428,512,574,531,393],
[554,443,580,602,496,660,0,542,647,430,653,700,501],
[586,388,616,570,524,644,458,0,595,519,642,615,385],
[424,481,480,424,411,572,353,405,0,459,563,419,457],
[471,413,589,516,470,488,570,481,541,0,617,564,461],
[382,385,414,380,397,426,347,358,437,383,0,444,384],
[453,506,443,531,423,469,300,385,581,436,556,0,254],
[544,587,596,601,609,607,499,615,543,539,616,746,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 189, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,497,499,484,502,503,495,502,506,503,492,488],
[514,0,548,530,493,543,526,506,515,504,499,522,512],
[503,452,0,502,468,495,495,486,498,458,460,474,473],
[501,470,498,0,493,505,481,491,503,485,491,510,463],
[516,507,532,507,0,492,504,500,508,478,515,521,503],
[498,457,505,495,508,0,490,483,477,489,470,506,492],
[497,474,505,519,496,510,0,502,512,507,500,496,491],
[505,494,514,509,500,517,498,0,523,471,491,498,495],
[498,485,502,497,492,523,488,477,0,477,496,480,466],
[494,496,542,515,522,511,493,529,523,0,512,504,504],
[497,501,540,509,485,530,500,509,504,488,0,499,488],
[508,478,526,490,479,494,504,502,520,496,501,0,490],
[512,488,527,537,497,508,509,505,534,496,512,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 190, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,483,535,543,471,485,491,515,533,487,510,554],
[484,0,435,460,508,472,431,489,493,482,478,478,496],
[517,565,0,540,529,515,524,500,536,519,492,488,556],
[465,540,460,0,543,512,475,463,478,495,476,462,478],
[457,492,471,457,0,428,390,454,441,423,465,445,424],
[529,528,485,488,572,0,509,532,525,482,489,503,493],
[515,569,476,525,610,491,0,534,540,499,489,496,557],
[509,511,500,537,546,468,466,0,522,509,498,525,479],
[485,507,464,522,559,475,460,478,0,460,482,484,497],
[467,518,481,505,577,518,501,491,540,0,519,477,535],
[513,522,508,524,535,511,511,502,518,481,0,517,530],
[490,522,512,538,555,497,504,475,516,523,483,0,492],
[446,504,444,522,576,507,443,521,503,465,470,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 191, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,571,568,465,514,430,408,461,480,546,453,530,467],
[429,0,500,438,418,503,364,375,437,454,451,447,391],
[432,500,0,496,550,472,417,474,505,586,487,548,406],
[535,562,504,0,484,496,383,379,455,560,421,496,454],
[486,582,450,516,0,434,484,416,483,556,381,511,398],
[570,497,528,504,566,0,432,508,535,529,512,482,524],
[592,636,583,617,516,568,0,523,539,553,489,627,541],
[539,625,526,621,584,492,477,0,561,611,458,511,498],
[520,563,495,545,517,465,461,439,0,544,453,516,463],
[454,546,414,440,444,471,447,389,456,0,368,423,305],
[547,549,513,579,619,488,511,542,547,632,0,567,491],
[470,553,452,504,489,518,373,489,484,577,433,0,424],
[533,609,594,546,602,476,459,502,537,695,509,576,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 192, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,492,515,458,493,529,505,519,524,519,511,479],
[535,0,507,521,485,535,526,507,531,525,534,511,491],
[508,493,0,509,462,531,518,495,527,515,492,517,481],
[485,479,491,0,460,502,525,473,493,498,502,487,479],
[542,515,538,540,0,506,542,493,534,544,536,516,503],
[507,465,469,498,494,0,518,489,509,520,504,484,474],
[471,474,482,475,458,482,0,450,493,487,486,486,460],
[495,493,505,527,507,511,550,0,524,508,496,512,487],
[481,469,473,507,466,491,507,476,0,503,509,483,475],
[476,475,485,502,456,480,513,492,497,0,488,493,459],
[481,466,508,498,464,496,514,504,491,512,0,490,479],
[489,489,483,513,484,516,514,488,517,507,510,0,487],
[521,509,519,521,497,526,540,513,525,541,521,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 193, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,514,555,527,588,577,561,461,500,531,595,512],
[491,0,541,563,515,590,541,545,490,490,499,555,586],
[486,459,0,596,494,571,582,561,520,439,482,554,526],
[445,437,404,0,473,512,504,439,416,445,363,461,481],
[473,485,506,527,0,553,541,548,432,501,431,497,484],
[412,410,429,488,447,0,483,473,387,453,405,503,459],
[423,459,418,496,459,517,0,469,412,414,370,473,430],
[439,455,439,561,452,527,531,0,484,454,438,480,487],
[539,510,480,584,568,613,588,516,0,509,486,553,539],
[500,510,561,555,499,547,586,546,491,0,513,549,508],
[469,501,518,637,569,595,630,562,514,487,0,559,582],
[405,445,446,539,503,497,527,520,447,451,441,0,484],
[488,414,474,519,516,541,570,513,461,492,418,516,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 194, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,501,505,513,495,507,511,493,493,515,491,488],
[503,0,478,509,501,513,505,509,490,504,521,491,492],
[499,522,0,531,523,510,545,527,482,504,521,490,484],
[495,491,469,0,493,483,505,507,491,501,521,482,477],
[487,499,477,507,0,508,503,508,492,515,503,497,497],
[505,487,490,517,492,0,501,508,484,492,528,502,510],
[493,495,455,495,497,499,0,523,475,465,503,475,490],
[489,491,473,493,492,492,477,0,504,459,517,515,495],
[507,510,518,509,508,516,525,496,0,497,516,508,506],
[507,496,496,499,485,508,535,541,503,0,523,496,506],
[485,479,479,479,497,472,497,483,484,477,0,488,499],
[509,509,510,518,503,498,525,485,492,504,512,0,500],
[512,508,516,523,503,490,510,505,494,494,501,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 195, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,528,500,548,518,547,523,534,500,506,541,507],
[483,0,494,460,479,435,460,482,437,475,465,494,496],
[472,506,0,465,482,480,483,502,492,469,503,521,494],
[500,540,535,0,507,474,513,534,481,499,506,535,527],
[452,521,518,493,0,456,489,526,488,484,471,485,516],
[482,565,520,526,544,0,515,502,511,523,552,493,514],
[453,540,517,487,511,485,0,488,484,491,522,512,495],
[477,518,498,466,474,498,512,0,491,488,476,505,507],
[466,563,508,519,512,489,516,509,0,487,502,534,521],
[500,525,531,501,516,477,509,512,513,0,515,518,508],
[494,535,497,494,529,448,478,524,498,485,0,524,474],
[459,506,479,465,515,507,488,495,466,482,476,0,494],
[493,504,506,473,484,486,505,493,479,492,526,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 196, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,542,516,470,506,467,519,490,507,483,488,481,503],
[458,0,490,444,462,450,517,484,459,441,487,467,514],
[484,510,0,434,495,505,551,496,504,469,457,487,543],
[530,556,566,0,512,543,564,527,534,500,518,489,551],
[494,538,505,488,0,449,533,482,506,469,509,512,540],
[533,550,495,457,551,0,509,504,490,460,484,477,483],
[481,483,449,436,467,491,0,436,490,483,456,424,458],
[510,516,504,473,518,496,564,0,495,511,494,471,515],
[493,541,496,466,494,510,510,505,0,500,489,468,514],
[517,559,531,500,531,540,517,489,500,0,475,498,541],
[512,513,543,482,491,516,544,506,511,525,0,527,526],
[519,533,513,511,488,523,576,529,532,502,473,0,531],
[497,486,457,449,460,517,542,485,486,459,474,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 197, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,534,485,543,526,523,563,486,490,555,495,539,496],
[466,0,468,516,544,474,492,511,513,475,476,484,445],
[515,532,0,544,522,514,505,491,542,551,485,534,484],
[457,484,456,0,457,456,503,425,494,467,454,465,472],
[474,456,478,543,0,518,544,480,528,495,498,488,462],
[477,526,486,544,482,0,565,539,526,505,531,538,532],
[437,508,495,497,456,435,0,495,499,475,481,484,458],
[514,489,509,575,520,461,505,0,515,525,509,465,488],
[510,487,458,506,472,474,501,485,0,485,488,490,452],
[445,525,449,533,505,495,525,475,515,0,458,486,498],
[505,524,515,546,502,469,519,491,512,542,0,468,526],
[461,516,466,535,512,462,516,535,510,514,532,0,480],
[504,555,516,528,538,468,542,512,548,502,474,520,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 198, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,472,458,373,530,603,442,483,334,532,359,356],
[516,0,386,505,411,529,523,444,374,365,568,348,397],
[528,614,0,576,419,570,668,655,494,469,713,557,524],
[542,495,424,0,404,481,582,546,312,433,650,293,494],
[627,589,581,596,0,605,597,676,493,504,780,517,475],
[470,471,430,519,395,0,628,540,376,315,595,474,488],
[397,477,332,418,403,372,0,446,299,369,544,363,492],
[558,556,345,454,324,460,554,0,345,337,568,336,387],
[517,626,506,688,507,624,701,655,0,373,817,484,552],
[666,635,531,567,496,685,631,663,627,0,709,564,643],
[468,432,287,350,220,405,456,432,183,291,0,279,445],
[641,652,443,707,483,526,637,664,516,436,721,0,545],
[644,603,476,506,525,512,508,613,448,357,555,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 199, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,462,445,488,484,488,484,505,513,472,481,481],
[539,0,514,508,575,541,532,490,486,535,535,519,530],
[538,486,0,504,499,519,494,521,502,550,520,495,512],
[555,492,496,0,521,537,471,512,503,555,541,522,524],
[512,425,501,479,0,498,479,467,477,513,501,468,510],
[516,459,481,463,502,0,501,507,491,522,480,456,500],
[512,468,506,529,521,499,0,515,507,533,525,519,538],
[516,510,479,488,533,493,485,0,492,527,544,480,508],
[495,514,498,497,523,509,493,508,0,543,517,516,531],
[487,465,450,445,487,478,467,473,457,0,476,475,486],
[528,465,480,459,499,520,475,456,483,524,0,459,517],
[519,481,505,478,532,544,481,520,484,525,541,0,514],
[519,470,488,476,490,500,462,492,469,514,483,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 1000, 200, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/me/me_13_1000.csv", index=False, header=False)

import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,246,248,244,259,241,263,249,251,266,285,267,259,246],
[254,0,242,245,245,255,254,243,250,264,257,272,264,249],
[252,258,0,255,256,248,252,260,251,269,258,265,249,259],
[256,255,245,0,268,244,256,263,248,262,270,271,262,244],
[241,255,244,232,0,226,250,257,241,262,261,251,260,246],
[259,245,252,256,274,0,259,249,248,263,268,269,266,250],
[237,246,248,244,250,241,0,255,251,264,258,269,258,236],
[251,257,240,237,243,251,245,0,249,259,262,257,266,229],
[249,250,249,252,259,252,249,251,0,253,263,277,259,242],
[234,236,231,238,238,237,236,241,247,0,242,253,256,238],
[215,243,242,230,239,232,242,238,237,258,0,259,254,236],
[233,228,235,229,249,231,231,243,223,247,241,0,244,232],
[241,236,251,238,240,234,242,234,241,244,246,256,0,250],
[254,251,241,256,254,250,264,271,258,262,264,268,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 1, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,246,275,267,265,232,277,249,261,259,290,242,263],
[237,0,234,248,249,244,232,241,244,256,237,238,258,282],
[254,266,0,270,259,257,234,275,250,265,244,279,245,272],
[225,252,230,0,234,238,221,242,240,243,231,252,235,237],
[233,251,241,266,0,276,240,237,231,257,246,268,248,268],
[235,256,243,262,224,0,211,252,243,246,223,266,250,257],
[268,268,266,279,260,289,0,277,251,271,267,272,244,262],
[223,259,225,258,263,248,223,0,239,249,227,245,243,248],
[251,256,250,260,269,257,249,261,0,270,258,262,262,280],
[239,244,235,257,243,254,229,251,230,0,236,250,239,248],
[241,263,256,269,254,277,233,273,242,264,0,285,262,274],
[210,262,221,248,232,234,228,255,238,250,215,0,238,255],
[258,242,255,265,252,250,256,257,238,261,238,262,0,255],
[237,218,228,263,232,243,238,252,220,252,226,245,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 2, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,254,220,219,249,232,249,240,251,243,273,244,265],
[275,0,222,242,256,261,258,277,246,264,229,271,252,285],
[246,278,0,282,269,288,257,289,279,282,280,282,274,306],
[280,258,218,0,237,237,226,254,281,264,248,262,233,252],
[281,244,231,263,0,260,238,256,269,277,252,271,250,279],
[251,239,212,263,240,0,257,247,247,229,245,247,259,266],
[268,242,243,274,262,243,0,270,237,278,246,253,276,258],
[251,223,211,246,244,253,230,0,240,253,252,236,228,222],
[260,254,221,219,231,253,263,260,0,275,252,259,249,258],
[249,236,218,236,223,271,222,247,225,0,228,232,243,273],
[257,271,220,252,248,255,254,248,248,272,0,254,257,260],
[227,229,218,238,229,253,247,264,241,268,246,0,254,253],
[256,248,226,267,250,241,224,272,251,257,243,246,0,293],
[235,215,194,248,221,234,242,278,242,227,240,247,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 3, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,226,238,294,282,325,225,245,250,239,218,241,260],
[211,0,197,205,187,243,232,274,269,222,220,213,216,271],
[274,303,0,254,228,292,322,269,219,278,281,252,261,294],
[262,295,246,0,210,257,298,210,221,238,267,201,240,276],
[206,313,272,290,0,272,251,235,263,249,245,216,245,229],
[218,257,208,243,228,0,315,222,216,258,291,170,281,273],
[175,268,178,202,249,185,0,213,184,229,185,167,221,258],
[275,226,231,290,265,278,287,0,256,241,268,232,278,281],
[255,231,281,279,237,284,316,244,0,237,266,229,270,295],
[250,278,222,262,251,242,271,259,263,0,251,162,251,266],
[261,280,219,233,255,209,315,232,234,249,0,187,262,267],
[282,287,248,299,284,330,333,268,271,338,313,0,304,270],
[259,284,239,260,255,219,279,222,230,249,238,196,0,247],
[240,229,206,224,271,227,242,219,205,234,233,230,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 4, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,282,254,267,280,238,238,254,264,253,263,252,268],
[236,0,260,224,274,254,274,240,237,256,270,266,246,284],
[218,240,0,253,239,247,214,244,275,259,262,262,243,261],
[246,276,247,0,248,261,234,258,242,240,271,239,300,260],
[233,226,261,252,0,238,233,248,217,241,247,245,256,266],
[220,246,253,239,262,0,209,212,237,235,230,250,227,270],
[262,226,286,266,267,291,0,263,218,226,247,252,277,273],
[262,260,256,242,252,288,237,0,231,284,250,252,258,279],
[246,263,225,258,283,263,282,269,0,265,256,259,252,288],
[236,244,241,260,259,265,274,216,235,0,249,255,249,274],
[247,230,238,229,253,270,253,250,244,251,0,230,230,262],
[237,234,238,261,255,250,248,248,241,245,270,0,256,299],
[248,254,257,200,244,273,223,242,248,251,270,244,0,268],
[232,216,239,240,234,230,227,221,212,226,238,201,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 5, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,298,225,268,211,297,251,217,303,261,304,227,253],
[212,0,184,209,187,268,188,171,226,238,252,226,211,218],
[202,316,0,254,282,251,293,202,254,283,279,286,192,220],
[275,291,246,0,283,271,334,269,248,350,307,301,221,249],
[232,313,218,217,0,208,285,193,184,324,217,266,232,164],
[289,232,249,229,292,0,281,197,198,335,255,304,241,261],
[203,312,207,166,215,219,0,226,258,320,235,266,265,270],
[249,329,298,231,307,303,274,0,287,285,271,333,288,295],
[283,274,246,252,316,302,242,213,0,267,237,256,137,278],
[197,262,217,150,176,165,180,215,233,0,253,263,180,156],
[239,248,221,193,283,245,265,229,263,247,0,310,189,239],
[196,274,214,199,234,196,234,167,244,237,190,0,183,218],
[273,289,308,279,268,259,235,212,363,320,311,317,0,270],
[247,282,280,251,336,239,230,205,222,344,261,282,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 6, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,244,257,250,257,251,261,283,222,282,290,236,218],
[271,0,247,259,244,265,236,268,292,231,284,272,219,220],
[256,253,0,267,232,285,278,229,273,244,301,292,249,253],
[243,241,233,0,228,263,235,229,278,220,264,248,227,245],
[250,256,268,272,0,276,260,232,280,235,303,269,250,243],
[243,235,215,237,224,0,223,250,250,236,274,236,231,189],
[249,264,222,265,240,277,0,243,266,241,257,263,237,204],
[239,232,271,271,268,250,257,0,270,245,265,271,246,238],
[217,208,227,222,220,250,234,230,0,206,264,230,201,219],
[278,269,256,280,265,264,259,255,294,0,285,276,264,238],
[218,216,199,236,197,226,243,235,236,215,0,214,209,233],
[210,228,208,252,231,264,237,229,270,224,286,0,228,198],
[264,281,251,273,250,269,263,254,299,236,291,272,0,219],
[282,280,247,255,257,311,296,262,281,262,267,302,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 7, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,247,252,251,255,252,244,266,250,257,249,240,255],
[235,0,242,249,257,251,251,247,257,267,245,247,244,269],
[253,258,0,241,258,259,234,246,253,262,250,260,242,273],
[248,251,259,0,265,277,262,250,257,256,242,269,250,287],
[249,243,242,235,0,256,236,241,244,268,257,240,236,267],
[245,249,241,223,244,0,255,241,251,256,245,251,236,281],
[248,249,266,238,264,245,0,250,270,266,245,281,247,280],
[256,253,254,250,259,259,250,0,255,261,255,266,253,294],
[234,243,247,243,256,249,230,245,0,264,243,248,242,271],
[250,233,238,244,232,244,234,239,236,0,233,246,247,277],
[243,255,250,258,243,255,255,245,257,267,0,272,259,286],
[251,253,240,231,260,249,219,234,252,254,228,0,224,246],
[260,256,258,250,264,264,253,247,258,253,241,276,0,288],
[245,231,227,213,233,219,220,206,229,223,214,254,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 8, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,266,288,178,329,143,187,159,220,235,177,229,319],
[271,0,267,249,165,354,243,190,248,185,222,234,308,293],
[234,233,0,268,222,387,160,172,189,230,321,166,239,272],
[212,251,232,0,317,371,259,200,343,279,195,229,302,276],
[322,335,278,183,0,359,343,294,282,214,165,199,208,275],
[171,146,113,129,141,0,77,143,122,71,163,141,149,130],
[357,257,340,241,157,423,0,223,204,255,241,196,263,314],
[313,310,328,300,206,357,277,0,208,231,277,232,294,310],
[341,252,311,157,218,378,296,292,0,268,268,200,262,299],
[280,315,270,221,286,429,245,269,232,0,263,183,315,292],
[265,278,179,305,335,337,259,223,232,237,0,203,269,272],
[323,266,334,271,301,359,304,268,300,317,297,0,240,217],
[271,192,261,198,292,351,237,206,238,185,231,260,0,280],
[181,207,228,224,225,370,186,190,201,208,228,283,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 9, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,253,270,255,272,247,263,267,268,280,258,275,277],
[245,0,235,241,253,258,246,251,263,270,264,244,250,266],
[247,265,0,256,251,256,256,257,260,278,295,249,258,276],
[230,259,244,0,241,247,230,250,245,265,263,241,258,256],
[245,247,249,259,0,255,250,254,250,269,262,251,263,253],
[228,242,244,253,245,0,243,242,242,254,275,249,247,252],
[253,254,244,270,250,257,0,263,270,275,278,257,255,281],
[237,249,243,250,246,258,237,0,257,248,255,246,254,259],
[233,237,240,255,250,258,230,243,0,256,265,243,248,252],
[232,230,222,235,231,246,225,252,244,0,252,232,232,234],
[220,236,205,237,238,225,222,245,235,248,0,216,219,235],
[242,256,251,259,249,251,243,254,257,268,284,0,260,266],
[225,250,242,242,237,253,245,246,252,268,281,240,0,248],
[223,234,224,244,247,248,219,241,248,266,265,234,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 10, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,267,270,262,237,267,253,268,255,260,278,260,252],
[250,0,256,252,255,238,233,252,278,232,228,247,246,250],
[233,244,0,226,254,233,235,244,241,236,232,246,237,231],
[230,248,274,0,257,220,254,249,257,239,214,252,236,226],
[238,245,246,243,0,226,245,223,247,219,229,247,218,216],
[263,262,267,280,274,0,258,271,260,250,246,264,263,252],
[233,267,265,246,255,242,0,243,251,234,234,260,239,248],
[247,248,256,251,277,229,257,0,260,239,227,259,257,250],
[232,222,259,243,253,240,249,240,0,234,221,248,247,251],
[245,268,264,261,281,250,266,261,266,0,265,281,264,262],
[240,272,268,286,271,254,266,273,279,235,0,258,238,235],
[222,253,254,248,253,236,240,241,252,219,242,0,231,242],
[240,254,263,264,282,237,261,243,253,236,262,269,0,247],
[248,250,269,274,284,248,252,250,249,238,265,258,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 11, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,230,279,286,245,255,230,239,260,270,268,264,279],
[220,0,228,230,268,243,235,231,250,207,249,242,244,255],
[270,272,0,282,282,253,247,242,255,263,251,279,266,264],
[221,270,218,0,281,242,245,236,261,238,242,258,260,276],
[214,232,218,219,0,230,231,222,224,241,212,246,207,227],
[255,257,247,258,270,0,264,252,246,266,265,272,263,267],
[245,265,253,255,269,236,0,241,267,248,240,267,265,245],
[270,269,258,264,278,248,259,0,248,269,253,267,272,260],
[261,250,245,239,276,254,233,252,0,253,260,257,251,283],
[240,293,237,262,259,234,252,231,247,0,267,277,238,270],
[230,251,249,258,288,235,260,247,240,233,0,256,247,255],
[232,258,221,242,254,228,233,233,243,223,244,0,238,245],
[236,256,234,240,293,237,235,228,249,262,253,262,0,255],
[221,245,236,224,273,233,255,240,217,230,245,255,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 12, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,244,264,245,234,281,237,242,257,259,259,243,277],
[265,0,270,246,237,272,276,263,250,271,266,255,245,280],
[256,230,0,243,236,258,279,257,271,267,253,266,262,262],
[236,254,257,0,233,248,285,239,256,260,256,273,269,247],
[255,263,264,267,0,256,299,242,252,259,250,267,254,268],
[266,228,242,252,244,0,267,239,259,261,243,272,221,257],
[219,224,221,215,201,233,0,221,209,226,224,220,197,222],
[263,237,243,261,258,261,279,0,248,260,246,247,234,260],
[258,250,229,244,248,241,291,252,0,246,245,258,253,262],
[243,229,233,240,241,239,274,240,254,0,244,269,237,262],
[241,234,247,244,250,257,276,254,255,256,0,273,243,272],
[241,245,234,227,233,228,280,253,242,231,227,0,248,254],
[257,255,238,231,246,279,303,266,247,263,257,252,0,289],
[223,220,238,253,232,243,278,240,238,238,228,246,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 13, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,276,257,254,235,230,259,241,247,243,244,231,272],
[272,0,265,254,264,262,255,249,251,266,255,257,275,281],
[224,235,0,231,245,231,229,221,244,236,242,241,248,263],
[243,246,269,0,272,261,247,237,262,243,275,251,246,277],
[246,236,255,228,0,246,216,234,240,255,243,240,231,255],
[265,238,269,239,254,0,240,223,258,250,249,255,251,256],
[270,245,271,253,284,260,0,247,270,258,282,253,237,265],
[241,251,279,263,266,277,253,0,253,274,270,285,255,287],
[259,249,256,238,260,242,230,247,0,284,262,243,229,254],
[253,234,264,257,245,250,242,226,216,0,247,231,242,260],
[257,245,258,225,257,251,218,230,238,253,0,231,243,258],
[256,243,259,249,260,245,247,215,257,269,269,0,274,265],
[269,225,252,254,269,249,263,245,271,258,257,226,0,241],
[228,219,237,223,245,244,235,213,246,240,242,235,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 14, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,241,247,254,261,244,239,247,250,247,227,244,232],
[258,0,256,267,260,264,267,280,240,254,265,252,249,223],
[259,244,0,257,259,249,256,240,245,234,253,234,234,245],
[253,233,243,0,257,257,248,260,228,235,257,244,252,232],
[246,240,241,243,0,263,256,263,237,243,258,241,231,237],
[239,236,251,243,237,0,243,263,228,234,252,208,231,213],
[256,233,244,252,244,257,0,250,215,233,267,219,220,235],
[261,220,260,240,237,237,250,0,233,217,257,218,239,230],
[253,260,255,272,263,272,285,267,0,237,255,247,254,245],
[250,246,266,265,257,266,267,283,263,0,270,233,244,248],
[253,235,247,243,242,248,233,243,245,230,0,207,236,229],
[273,248,266,256,259,292,281,282,253,267,293,0,249,250],
[256,251,266,248,269,269,280,261,246,256,264,251,0,254],
[268,277,255,268,263,287,265,270,255,252,271,250,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 15, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,231,269,246,224,264,233,258,280,237,243,269,216],
[246,0,223,251,223,236,255,246,208,193,204,225,267,199],
[269,277,0,270,272,247,284,252,249,267,237,251,300,256],
[231,249,230,0,196,222,243,229,191,210,228,205,227,167],
[254,277,228,304,0,226,287,249,282,263,226,255,309,272],
[276,264,253,278,274,0,233,285,298,263,271,228,319,220],
[236,245,216,257,213,267,0,257,248,224,200,217,247,185],
[267,254,248,271,251,215,243,0,278,272,264,231,279,250],
[242,292,251,309,218,202,252,222,0,279,250,248,272,227],
[220,307,233,290,237,237,276,228,221,0,294,237,268,214],
[263,296,263,272,274,229,300,236,250,206,0,251,303,184],
[257,275,249,295,245,272,283,269,252,263,249,0,292,266],
[231,233,200,273,191,181,253,221,228,232,197,208,0,218],
[284,301,244,333,228,280,315,250,273,286,316,234,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 16, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,253,286,305,276,235,256,283,239,303,243,286,241],
[206,0,229,248,267,241,232,256,223,213,267,212,250,227],
[247,271,0,273,290,269,237,279,258,227,287,282,288,241],
[214,252,227,0,216,233,175,233,224,243,240,216,240,265],
[195,233,210,284,0,204,224,229,213,222,238,192,227,195],
[224,259,231,267,296,0,233,225,241,242,241,236,265,234],
[265,268,263,325,276,267,0,254,249,243,249,257,275,233],
[244,244,221,267,271,275,246,0,262,238,237,216,264,219],
[217,277,242,276,287,259,251,238,0,242,262,264,260,247],
[261,287,273,257,278,258,257,262,258,0,254,252,268,249],
[197,233,213,260,262,259,251,263,238,246,0,206,250,199],
[257,288,218,284,308,264,243,284,236,248,294,0,246,259],
[214,250,212,260,273,235,225,236,240,232,250,254,0,234],
[259,273,259,235,305,266,267,281,253,251,301,241,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 17, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,233,223,261,238,240,222,241,259,264,257,244,250],
[250,0,243,248,272,258,245,241,249,244,250,256,250,233],
[267,257,0,231,256,269,262,243,260,262,264,276,255,257],
[277,252,269,0,284,268,248,268,266,261,265,273,264,261],
[239,228,244,216,0,229,224,222,228,224,243,246,229,225],
[262,242,231,232,271,0,244,236,236,237,250,252,246,256],
[260,255,238,252,276,256,0,237,253,246,257,266,272,263],
[278,259,257,232,278,264,263,0,239,251,266,264,254,262],
[259,251,240,234,272,264,247,261,0,247,268,243,248,261],
[241,256,238,239,276,263,254,249,253,0,245,266,256,254],
[236,250,236,235,257,250,243,234,232,255,0,243,237,255],
[243,244,224,227,254,248,234,236,257,234,257,0,242,233],
[256,250,245,236,271,254,228,246,252,244,263,258,0,249],
[250,267,243,239,275,244,237,238,239,246,245,267,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 18, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,256,265,272,281,274,271,250,263,244,264,269,275],
[227,0,238,245,240,259,258,224,219,237,219,238,248,255],
[244,262,0,254,251,266,255,241,225,265,236,252,251,249],
[235,255,246,0,254,264,253,254,227,240,230,252,247,249],
[228,260,249,246,0,261,269,245,234,261,237,238,253,239],
[219,241,234,236,239,0,253,220,209,239,221,220,244,235],
[226,242,245,247,231,247,0,231,208,242,223,232,261,228],
[229,276,259,246,255,280,269,0,255,271,241,258,260,266],
[250,281,275,273,266,291,292,245,0,263,253,263,261,268],
[237,263,235,260,239,261,258,229,237,0,224,239,248,251],
[256,281,264,270,263,279,277,259,247,276,0,264,272,278],
[236,262,248,248,262,280,268,242,237,261,236,0,256,252],
[231,252,249,253,247,256,239,240,239,252,228,244,0,259],
[225,245,251,251,261,265,272,234,232,249,222,248,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 19, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,169,262,243,220,255,256,265,300,261,403,264,378],
[237,0,251,207,235,260,237,318,306,354,323,345,349,265],
[331,249,0,225,284,223,266,342,268,231,288,295,292,294],
[238,293,275,0,311,302,284,258,322,347,352,282,322,402],
[257,265,216,189,0,322,316,360,325,351,365,328,320,312],
[280,240,277,198,178,0,363,313,230,208,322,328,323,280],
[245,263,234,216,184,137,0,271,229,220,322,280,184,268],
[244,182,158,242,140,187,229,0,263,187,140,242,286,296],
[235,194,232,178,175,270,271,237,0,203,286,328,235,293],
[200,146,269,153,149,292,280,313,297,0,286,319,311,243],
[239,177,212,148,135,178,178,360,214,214,0,215,271,303],
[97,155,205,218,172,172,220,258,172,181,285,0,229,281],
[236,151,208,178,180,177,316,214,265,189,229,271,0,262],
[122,235,206,98,188,220,232,204,207,257,197,219,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 20, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,277,256,219,270,227,266,230,243,251,253,258,227],
[247,0,263,270,225,287,218,278,253,255,229,242,252,256],
[223,237,0,287,240,256,241,281,215,254,265,268,279,267],
[244,230,213,0,203,241,249,254,228,255,225,238,273,240],
[281,275,260,297,0,297,249,286,252,272,277,266,309,266],
[230,213,244,259,203,0,199,228,219,220,192,239,221,242],
[273,282,259,251,251,301,0,304,273,262,241,278,285,276],
[234,222,219,246,214,272,196,0,210,199,222,232,259,223],
[270,247,285,272,248,281,227,290,0,239,236,270,293,246],
[257,245,246,245,228,280,238,301,261,0,226,256,278,236],
[249,271,235,275,223,308,259,278,264,274,0,285,291,282],
[247,258,232,262,234,261,222,268,230,244,215,0,276,230],
[242,248,221,227,191,279,215,241,207,222,209,224,0,230],
[273,244,233,260,234,258,224,277,254,264,218,270,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 21, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,264,275,286,254,228,276,255,275,237,241,242,254],
[234,0,240,215,233,218,227,250,228,232,242,237,235,233],
[236,260,0,248,254,227,222,243,267,242,205,248,218,223],
[225,285,252,0,238,269,252,251,260,225,252,256,253,231],
[214,267,246,262,0,214,217,256,228,249,243,281,268,218],
[246,282,273,231,286,0,228,253,275,262,261,296,256,263],
[272,273,278,248,283,272,0,267,262,268,250,262,238,291],
[224,250,257,249,244,247,233,0,262,261,237,262,253,249],
[245,272,233,240,272,225,238,238,0,241,232,257,280,225],
[225,268,258,275,251,238,232,239,259,0,230,250,245,220],
[263,258,295,248,257,239,250,263,268,270,0,251,237,256],
[259,263,252,244,219,204,238,238,243,250,249,0,238,243],
[258,265,282,247,232,244,262,247,220,255,263,262,0,247],
[246,267,277,269,282,237,209,251,275,280,244,257,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 22, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,249,259,243,242,248,240,267,239,245,259,264,261],
[195,0,216,230,225,228,235,223,230,204,205,228,221,230],
[251,284,0,247,261,238,251,251,262,236,225,237,272,280],
[241,270,253,0,238,223,237,237,247,220,235,244,258,266],
[257,275,239,262,0,254,276,247,250,247,250,262,271,277],
[258,272,262,277,246,0,234,248,262,226,241,262,262,275],
[252,265,249,263,224,266,0,261,254,232,235,282,244,258],
[260,277,249,263,253,252,239,0,261,247,238,254,249,263],
[233,270,238,253,250,238,246,239,0,253,256,243,266,254],
[261,296,264,280,253,274,268,253,247,0,236,280,270,242],
[255,295,275,265,250,259,265,262,244,264,0,261,264,293],
[241,272,263,256,238,238,218,246,257,220,239,0,249,250],
[236,279,228,242,229,238,256,251,234,230,236,251,0,233],
[239,270,220,234,223,225,242,237,246,258,207,250,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 23, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,164,258,94,258,307,334,219,219,283,334,158,334],
[281,0,187,47,135,220,207,185,72,139,64,205,111,158],
[336,313,0,301,229,408,268,279,192,227,228,260,92,366],
[242,453,199,0,135,408,371,299,162,367,210,166,168,178],
[406,365,271,365,0,340,312,343,271,271,236,268,72,416],
[242,280,92,92,160,0,262,363,92,92,72,174,92,143],
[193,293,232,129,188,238,0,220,99,129,99,201,193,168],
[166,315,221,201,157,137,280,0,221,221,201,233,221,157],
[281,428,308,338,229,408,401,279,0,436,437,393,273,244],
[281,361,273,133,229,408,371,279,64,0,134,205,197,244],
[217,436,272,290,264,428,401,299,63,366,0,213,336,272],
[166,295,240,334,232,326,299,267,107,295,287,0,240,240],
[342,389,408,332,428,408,307,279,227,303,164,260,0,408],
[166,342,134,322,84,357,332,343,256,256,228,260,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 24, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,190,167,256,250,178,177,230,184,218,167,191,158],
[345,0,224,257,296,315,223,246,355,268,233,248,202,167],
[310,276,0,298,350,312,285,294,336,284,233,289,288,195],
[333,243,202,0,235,297,276,282,314,299,254,258,226,226],
[244,204,150,265,0,269,223,198,310,171,213,201,198,227],
[250,185,188,203,231,0,203,236,235,223,150,194,159,128],
[322,277,215,224,277,297,0,291,261,254,214,299,229,224],
[323,254,206,218,302,264,209,0,230,272,271,280,207,188],
[270,145,164,186,190,265,239,270,0,186,161,175,135,187],
[316,232,216,201,329,277,246,228,314,0,183,243,163,211],
[282,267,267,246,287,350,286,229,339,317,0,208,255,237],
[333,252,211,242,299,306,201,220,325,257,292,0,221,184],
[309,298,212,274,302,341,271,293,365,337,245,279,0,257],
[342,333,305,274,273,372,276,312,313,289,263,316,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 25, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,267,246,257,264,265,229,263,230,281,247,285,253],
[255,0,236,258,244,246,265,216,246,235,265,265,274,232],
[233,264,0,228,246,251,270,235,220,237,254,238,278,238],
[254,242,272,0,276,266,279,239,235,241,266,258,287,255],
[243,256,254,224,0,226,244,214,245,237,259,255,277,247],
[236,254,249,234,274,0,269,231,249,252,269,253,271,230],
[235,235,230,221,256,231,0,246,240,242,253,248,278,236],
[271,284,265,261,286,269,254,0,263,241,282,248,320,237],
[237,254,280,265,255,251,260,237,0,240,285,247,303,253],
[270,265,263,259,263,248,258,259,260,0,287,271,264,252],
[219,235,246,234,241,231,247,218,215,213,0,220,258,219],
[253,235,262,242,245,247,252,252,253,229,280,0,298,245],
[215,226,222,213,223,229,222,180,197,236,242,202,0,236],
[247,268,262,245,253,270,264,263,247,248,281,255,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 26, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,261,249,251,244,239,254,253,246,286,261,242,281],
[255,0,236,228,251,228,221,256,249,228,261,278,250,256],
[239,264,0,265,277,270,230,270,263,280,298,275,252,291],
[251,272,235,0,263,259,226,239,253,240,298,279,268,282],
[249,249,223,237,0,227,228,217,238,240,269,275,251,247],
[256,272,230,241,273,0,235,248,267,252,284,273,273,244],
[261,279,270,274,272,265,0,244,277,252,284,301,262,273],
[246,244,230,261,283,252,256,0,247,232,284,275,267,267],
[247,251,237,247,262,233,223,253,0,229,263,291,253,253],
[254,272,220,260,260,248,248,268,271,0,301,289,248,290],
[214,239,202,202,231,216,216,216,237,199,0,249,205,210],
[239,222,225,221,225,227,199,225,209,211,251,0,223,235],
[258,250,248,232,249,227,238,233,247,252,295,277,0,276],
[219,244,209,218,253,256,227,233,247,210,290,265,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 27, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,233,228,235,249,253,242,259,241,239,234,251,243],
[270,0,257,257,249,261,270,274,259,265,261,244,255,261],
[267,243,0,237,238,254,269,247,250,249,249,242,271,245],
[272,243,263,0,251,265,263,244,248,252,247,240,262,267],
[265,251,262,249,0,257,267,248,248,262,258,257,267,243],
[251,239,246,235,243,0,269,244,249,248,254,243,263,232],
[247,230,231,237,233,231,0,238,231,235,244,222,243,242],
[258,226,253,256,252,256,262,0,254,256,257,247,253,257],
[241,241,250,252,252,251,269,246,0,258,251,229,253,262],
[259,235,251,248,238,252,265,244,242,0,248,231,247,248],
[261,239,251,253,242,246,256,243,249,252,0,229,253,243],
[266,256,258,260,243,257,278,253,271,269,271,0,278,257],
[249,245,229,238,233,237,257,247,247,253,247,222,0,239],
[257,239,255,233,257,268,258,243,238,252,257,243,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 28, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,246,237,258,252,255,253,259,254,252,254,246,242],
[255,0,266,258,250,262,256,244,255,271,266,264,245,257],
[254,234,0,236,247,245,244,247,234,256,249,245,235,245],
[263,242,264,0,260,248,252,260,244,252,278,262,236,254],
[242,250,253,240,0,253,267,242,256,248,260,262,243,241],
[248,238,255,252,247,0,252,247,244,248,275,255,242,254],
[245,244,256,248,233,248,0,232,252,237,270,252,242,234],
[247,256,253,240,258,253,268,0,244,257,261,258,255,254],
[241,245,266,256,244,256,248,256,0,259,245,267,249,239],
[246,229,244,248,252,252,263,243,241,0,262,244,241,263],
[248,234,251,222,240,225,230,239,255,238,0,258,231,237],
[246,236,255,238,238,245,248,242,233,256,242,0,235,259],
[254,255,265,264,257,258,258,245,251,259,269,265,0,251],
[258,243,255,246,259,246,266,246,261,237,263,241,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 29, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,224,228,243,257,186,255,278,224,263,275,286,209],
[287,0,206,214,254,249,170,198,293,219,307,256,296,233],
[276,294,0,287,295,309,249,263,377,300,330,246,366,275],
[272,286,213,0,203,286,247,214,310,217,280,210,322,215],
[257,246,205,297,0,261,251,245,364,246,268,217,327,247],
[243,251,191,214,239,0,226,201,254,236,194,231,245,217],
[314,330,251,253,249,274,0,263,361,310,268,286,295,304],
[245,302,237,286,255,299,237,0,396,252,294,263,328,246],
[222,207,123,190,136,246,139,104,0,192,186,138,232,110],
[276,281,200,283,254,264,190,248,308,0,252,314,319,177],
[237,193,170,220,232,306,232,206,314,248,0,176,314,229],
[225,244,254,290,283,269,214,237,362,186,324,0,344,223],
[214,204,134,178,173,255,205,172,268,181,186,156,0,169],
[291,267,225,285,253,283,196,254,390,323,271,277,331,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 30, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,262,262,264,256,253,259,237,226,267,236,231,241],
[245,0,265,254,259,259,249,248,233,233,276,236,241,243],
[238,235,0,248,262,252,251,254,236,228,266,232,233,237],
[238,246,252,0,254,236,267,235,245,234,245,241,233,245],
[236,241,238,246,0,252,246,242,243,233,236,221,230,233],
[244,241,248,264,248,0,249,242,252,234,257,225,248,242],
[247,251,249,233,254,251,0,246,244,225,248,235,233,232],
[241,252,246,265,258,258,254,0,245,234,253,237,244,243],
[263,267,264,255,257,248,256,255,0,235,273,244,234,253],
[274,267,272,266,267,266,275,266,265,0,262,257,241,247],
[233,224,234,255,264,243,252,247,227,238,0,237,235,244],
[264,264,268,259,279,275,265,263,256,243,263,0,254,248],
[269,259,267,267,270,252,267,256,266,259,265,246,0,255],
[259,257,263,255,267,258,268,257,247,253,256,252,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 31, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,245,246,263,225,237,232,228,186,265,213,236,188],
[278,0,291,236,289,267,234,233,273,254,244,246,230,236],
[255,209,0,233,260,247,255,202,238,194,233,207,196,191],
[254,264,267,0,252,250,248,241,255,205,247,248,261,229],
[237,211,240,248,0,249,248,213,239,237,290,223,220,231],
[275,233,253,250,251,0,256,271,270,211,297,235,230,267],
[263,266,245,252,252,244,0,224,249,237,237,259,230,252],
[268,267,298,259,287,229,276,0,288,221,296,246,242,244],
[272,227,262,245,261,230,251,212,0,246,248,223,245,211],
[314,246,306,295,263,289,263,279,254,0,327,290,261,242],
[235,256,267,253,210,203,263,204,252,173,0,233,207,234],
[287,254,293,252,277,265,241,254,277,210,267,0,235,230],
[264,270,304,239,280,270,270,258,255,239,293,265,0,270],
[312,264,309,271,269,233,248,256,289,258,266,270,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 32, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,255,246,261,248,247,234,232,257,255,260,227,240],
[262,0,274,264,282,262,264,241,273,259,269,286,269,290],
[245,226,0,262,274,227,240,246,228,230,270,254,221,256],
[254,236,238,0,245,225,246,228,229,228,234,230,240,237],
[239,218,226,255,0,247,251,233,224,237,255,251,224,269],
[252,238,273,275,253,0,258,246,240,244,251,270,272,274],
[253,236,260,254,249,242,0,255,242,257,255,262,284,263],
[266,259,254,272,267,254,245,0,264,269,245,267,246,281],
[268,227,272,271,276,260,258,236,0,252,272,278,265,263],
[243,241,270,272,263,256,243,231,248,0,249,261,248,270],
[245,231,230,266,245,249,245,255,228,251,0,262,231,253],
[240,214,246,270,249,230,238,233,222,239,238,0,225,245],
[273,231,279,260,276,228,216,254,235,252,269,275,0,269],
[260,210,244,263,231,226,237,219,237,230,247,255,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 33, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,277,283,278,279,290,288,257,239,259,284,325,283],
[228,0,238,243,280,267,277,257,260,237,243,264,274,280],
[223,262,0,251,238,242,250,267,230,243,257,258,285,263],
[217,257,249,0,252,238,257,267,272,212,238,265,281,239],
[222,220,262,248,0,248,266,239,244,241,239,253,268,239],
[221,233,258,262,252,0,281,260,262,233,241,261,284,257],
[210,223,250,243,234,219,0,243,225,214,229,237,276,218],
[212,243,233,233,261,240,257,0,240,221,233,242,254,243],
[243,240,270,228,256,238,275,260,0,230,233,245,277,250],
[261,263,257,288,259,267,286,279,270,0,243,268,276,242],
[241,257,243,262,261,259,271,267,267,257,0,273,282,260],
[216,236,242,235,247,239,263,258,255,232,227,0,274,241],
[175,226,215,219,232,216,224,246,223,224,218,226,0,226],
[217,220,237,261,261,243,282,257,250,258,240,259,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 34, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,236,218,231,262,221,239,203,266,198,289,278,237],
[278,0,201,190,239,274,226,274,198,264,238,267,267,267],
[264,299,0,250,236,269,276,261,211,271,265,317,265,289],
[282,310,250,0,208,259,292,253,210,277,230,271,266,283],
[269,261,264,292,0,284,262,253,228,315,289,261,265,289],
[238,226,231,241,216,0,243,206,201,294,228,230,225,235],
[279,274,224,208,238,257,0,228,217,234,233,246,270,304],
[261,226,239,247,247,294,272,0,215,310,208,286,317,294],
[297,302,289,290,272,299,283,285,0,294,245,300,286,346],
[234,236,229,223,185,206,266,190,206,0,202,264,228,196],
[302,262,235,270,211,272,267,292,255,298,0,288,276,310],
[211,233,183,229,239,270,254,214,200,236,212,0,224,301],
[222,233,235,234,235,275,230,183,214,272,224,276,0,310],
[263,233,211,217,211,265,196,206,154,304,190,199,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 35, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,231,238,233,247,288,245,262,243,235,246,235,255],
[240,0,257,239,246,260,258,262,254,241,240,274,243,242],
[269,243,0,253,245,248,274,230,259,244,265,248,257,246],
[262,261,247,0,260,249,283,246,264,261,266,269,255,267],
[267,254,255,240,0,250,311,264,265,270,270,270,277,279],
[253,240,252,251,250,0,300,260,264,237,252,271,243,273],
[212,242,226,217,189,200,0,237,227,198,213,226,237,208],
[255,238,270,254,236,240,263,0,237,267,266,276,265,247],
[238,246,241,236,235,236,273,263,0,211,235,263,230,261],
[257,259,256,239,230,263,302,233,289,0,226,246,290,264],
[265,260,235,234,230,248,287,234,265,274,0,260,257,248],
[254,226,252,231,230,229,274,224,237,254,240,0,254,235],
[265,257,243,245,223,257,263,235,270,210,243,246,0,253],
[245,258,254,233,221,227,292,253,239,236,252,265,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 36, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,240,260,285,249,214,243,210,245,195,228,191,250],
[212,0,208,347,337,341,210,320,267,283,297,276,275,308],
[260,292,0,318,379,383,233,292,324,223,273,304,253,329],
[240,153,182,0,246,256,230,222,194,231,203,259,265,247],
[215,163,121,254,0,260,252,151,214,169,172,225,315,219],
[251,159,117,244,240,0,198,133,180,129,205,139,216,214],
[286,290,267,270,248,302,0,212,271,275,314,346,361,352],
[257,180,208,278,349,367,288,0,278,180,229,242,282,242],
[290,233,176,306,286,320,229,222,0,243,195,297,251,245],
[255,217,277,269,331,371,225,320,257,0,179,312,219,276],
[305,203,227,297,328,295,186,271,305,321,0,248,280,248],
[272,224,196,241,275,361,154,258,203,188,252,0,151,237],
[309,225,247,235,185,284,139,218,249,281,220,349,0,288],
[250,192,171,253,281,286,148,258,255,224,252,263,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 37, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,245,269,233,251,253,235,268,244,257,262,252,254],
[263,0,255,271,267,258,242,258,258,281,253,271,254,260],
[255,245,0,267,257,276,269,273,266,261,239,277,216,218],
[231,229,233,0,223,262,244,241,282,236,254,226,267,222],
[267,233,243,277,0,270,264,242,290,263,237,272,248,247],
[249,242,224,238,230,0,256,205,252,248,246,214,226,201],
[247,258,231,256,236,244,0,231,271,254,255,223,253,258],
[265,242,227,259,258,295,269,0,291,251,260,249,286,220],
[232,242,234,218,210,248,229,209,0,251,237,208,198,228],
[256,219,239,264,237,252,246,249,249,0,221,265,261,258],
[243,247,261,246,263,254,245,240,263,279,0,265,241,230],
[238,229,223,274,228,286,277,251,292,235,235,0,237,215],
[248,246,284,233,252,274,247,214,302,239,259,263,0,243],
[246,240,282,278,253,299,242,280,272,242,270,285,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 38, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,332,297,335,258,255,249,371,251,316,238,318,234],
[298,0,326,257,232,295,226,313,303,227,277,241,290,261],
[168,174,0,203,253,222,263,165,194,147,219,155,226,238],
[203,243,297,0,271,244,270,334,272,218,352,215,300,228],
[165,268,247,229,0,190,306,235,359,167,231,167,229,225],
[242,205,278,256,310,0,280,288,334,269,348,270,298,222],
[245,274,237,230,194,220,0,253,309,230,271,232,198,235],
[251,187,335,166,265,212,247,0,318,227,310,291,318,247],
[129,197,306,228,141,166,191,182,0,188,199,157,159,189],
[249,273,353,282,333,231,270,273,312,0,402,305,281,221],
[184,223,281,148,269,152,229,190,301,98,0,276,288,146],
[262,259,345,285,333,230,268,209,343,195,224,0,314,261],
[182,210,274,200,271,202,302,182,341,219,212,186,0,243],
[266,239,262,272,275,278,265,253,311,279,354,239,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 39, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,226,215,216,240,242,227,227,215,237,237,221,234],
[251,0,237,247,251,235,243,219,243,218,243,256,234,247],
[274,263,0,232,233,242,252,234,231,244,232,247,232,250],
[285,253,268,0,239,257,274,226,228,254,265,248,251,240],
[284,249,267,261,0,253,283,240,239,245,273,254,249,258],
[260,265,258,243,247,0,270,221,245,244,245,251,226,241],
[258,257,248,226,217,230,0,221,220,238,216,241,231,239],
[273,281,266,274,260,279,279,0,232,251,252,247,283,256],
[273,257,269,272,261,255,280,268,0,288,249,246,252,252],
[285,282,256,246,255,256,262,249,212,0,255,252,236,242],
[263,257,268,235,227,255,284,248,251,245,0,238,243,265],
[263,244,253,252,246,249,259,253,254,248,262,0,232,267],
[279,266,268,249,251,274,269,217,248,264,257,268,0,234],
[266,253,250,260,242,259,261,244,248,258,235,233,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 40, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,181,99,219,143,143,175,185,128,168,224,125,162],
[367,0,231,201,256,254,278,251,376,226,355,376,305,199],
[319,269,0,183,328,168,200,252,269,323,225,276,268,244],
[401,299,317,0,385,175,306,326,358,350,412,339,357,355],
[281,244,172,115,0,163,162,154,286,149,244,258,289,187],
[357,246,332,325,337,0,288,278,249,351,305,384,356,332],
[357,222,300,194,338,212,0,273,230,293,308,317,179,325],
[325,249,248,174,346,222,227,0,341,264,347,281,196,296],
[315,124,231,142,214,251,270,159,0,226,275,326,223,199],
[372,274,177,150,351,149,207,236,274,0,333,268,266,333],
[332,145,275,88,256,195,192,153,225,167,0,261,162,199],
[276,124,224,161,242,116,183,219,174,232,239,0,242,159],
[375,195,232,143,211,144,321,304,277,234,338,258,0,252],
[338,301,256,145,313,168,175,204,301,167,301,341,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 41, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,243,248,245,237,243,256,266,249,257,268,266,215],
[241,0,205,199,233,211,218,209,234,215,246,231,220,210],
[257,295,0,249,257,249,260,237,253,282,268,250,288,261],
[252,301,251,0,244,260,253,242,257,258,259,260,282,268],
[255,267,243,256,0,241,261,220,242,263,268,274,288,251],
[263,289,251,240,259,0,275,244,263,266,259,253,259,242],
[257,282,240,247,239,225,0,230,262,274,269,273,264,256],
[244,291,263,258,280,256,270,0,259,300,256,268,294,255],
[234,266,247,243,258,237,238,241,0,259,243,240,272,244],
[251,285,218,242,237,234,226,200,241,0,251,230,266,240],
[243,254,232,241,232,241,231,244,257,249,0,234,251,233],
[232,269,250,240,226,247,227,232,260,270,266,0,253,247],
[234,280,212,218,212,241,236,206,228,234,249,247,0,247],
[285,290,239,232,249,258,244,245,256,260,267,253,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 42, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,239,245,259,275,194,233,227,281,225,257,238,259],
[256,0,234,260,256,245,224,227,230,242,223,230,243,269],
[261,266,0,267,266,255,235,236,235,268,243,241,251,263],
[255,240,233,0,244,262,214,227,246,235,233,228,240,237],
[241,244,234,256,0,274,195,228,240,230,247,238,230,238],
[225,255,245,238,226,0,222,248,249,257,239,212,238,248],
[306,276,265,286,305,278,0,258,265,254,266,243,257,271],
[267,273,264,273,272,252,242,0,248,267,252,251,258,285],
[273,270,265,254,260,251,235,252,0,247,237,260,223,257],
[219,258,232,265,270,243,246,233,253,0,252,243,240,249],
[275,277,257,267,253,261,234,248,263,248,0,237,245,267],
[243,270,259,272,262,288,257,249,240,257,263,0,238,237],
[262,257,249,260,270,262,243,242,277,260,255,262,0,261],
[241,231,237,263,262,252,229,215,243,251,233,263,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 43, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,215,293,238,212,295,256,246,232,269,246,263,258],
[235,0,247,258,256,265,263,221,265,265,261,232,259,255],
[285,253,0,300,232,235,254,270,242,256,234,245,296,245],
[207,242,200,0,231,211,214,197,200,205,191,213,232,248],
[262,244,268,269,0,235,252,239,247,255,267,252,259,255],
[288,235,265,289,265,0,290,282,286,304,284,274,291,271],
[205,237,246,286,248,210,0,224,247,258,202,232,257,221],
[244,279,230,303,261,218,276,0,203,214,234,248,273,233],
[254,235,258,300,253,214,253,297,0,276,281,229,278,295],
[268,235,244,295,245,196,242,286,224,0,268,264,244,255],
[231,239,266,309,233,216,298,266,219,232,0,270,291,262],
[254,268,255,287,248,226,268,252,271,236,230,0,243,230],
[237,241,204,268,241,209,243,227,222,256,209,257,0,240],
[242,245,255,252,245,229,279,267,205,245,238,270,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 44, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,247,255,264,253,252,241,241,243,243,245,267,257],
[254,0,256,261,275,256,263,262,247,255,236,249,262,254],
[253,244,0,265,271,277,258,286,263,258,263,233,279,278],
[245,239,235,0,249,249,238,242,239,237,232,250,254,256],
[236,225,229,251,0,242,240,249,223,248,250,242,245,249],
[247,244,223,251,258,0,233,244,246,239,250,242,261,224],
[248,237,242,262,260,267,0,260,228,240,238,259,262,236],
[259,238,214,258,251,256,240,0,220,229,235,248,257,244],
[259,253,237,261,277,254,272,280,0,258,259,259,272,262],
[257,245,242,263,252,261,260,271,242,0,246,255,250,270],
[257,264,237,268,250,250,262,265,241,254,0,238,273,266],
[255,251,267,250,258,258,241,252,241,245,262,0,254,245],
[233,238,221,246,255,239,238,243,228,250,227,246,0,247],
[243,246,222,244,251,276,264,256,238,230,234,255,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 45, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,283,284,264,252,258,273,295,257,272,242,273,273],
[219,0,258,262,268,265,257,287,289,257,253,239,266,247],
[217,242,0,281,251,245,255,271,286,233,260,234,266,279],
[216,238,219,0,222,239,240,245,280,237,224,205,251,246],
[236,232,249,278,0,252,245,265,274,258,231,246,257,251],
[248,235,255,261,248,0,277,300,290,237,257,237,273,244],
[242,243,245,260,255,223,0,251,287,241,249,257,283,251],
[227,213,229,255,235,200,249,0,273,236,228,201,232,235],
[205,211,214,220,226,210,213,227,0,192,242,221,243,223],
[243,243,267,263,242,263,259,264,308,0,266,240,244,285],
[228,247,240,276,269,243,251,272,258,234,0,241,262,258],
[258,261,266,295,254,263,243,299,279,260,259,0,256,266],
[227,234,234,249,243,227,217,268,257,256,238,244,0,251],
[227,253,221,254,249,256,249,265,277,215,242,234,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 46, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,253,250,247,239,257,262,262,240,239,243,251,259],
[253,0,250,262,268,256,259,271,258,253,274,260,267,260],
[247,250,0,259,255,241,249,257,256,238,244,256,257,263],
[250,238,241,0,247,246,266,253,247,244,248,237,247,254],
[253,232,245,253,0,246,246,266,248,256,258,240,258,265],
[261,244,259,254,254,0,261,263,248,244,267,257,252,256],
[243,241,251,234,254,239,0,247,264,240,246,252,252,251],
[238,229,243,247,234,237,253,0,244,245,247,251,253,250],
[238,242,244,253,252,252,236,256,0,228,249,226,239,242],
[260,247,262,256,244,256,260,255,272,0,265,252,263,247],
[261,226,256,252,242,233,254,253,251,235,0,241,248,244],
[257,240,244,263,260,243,248,249,274,248,259,0,255,256],
[249,233,243,253,242,248,248,247,261,237,252,245,0,257],
[241,240,237,246,235,244,249,250,258,253,256,244,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 47, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,377,278,470,99,254,162,255,210,99,363,371,99,207],
[123,0,137,210,99,156,162,275,210,119,300,210,99,207],
[222,363,0,265,202,255,255,255,192,212,363,273,192,207],
[30,290,235,0,99,254,162,275,210,119,207,210,99,207],
[401,401,298,401,0,254,255,490,308,373,363,371,310,227],
[246,344,245,246,246,0,246,329,339,246,344,147,246,227],
[338,338,245,338,245,254,0,490,328,235,437,328,334,128],
[245,225,245,225,10,171,10,0,318,30,207,225,108,108],
[290,290,308,290,192,161,172,182,0,182,270,308,192,290],
[401,381,288,381,127,254,265,470,318,0,480,381,417,207],
[137,200,137,293,137,156,63,293,230,20,0,230,20,20],
[129,290,227,290,129,353,172,275,192,119,270,0,119,227],
[401,401,308,401,190,254,166,392,308,83,480,381,0,128],
[293,293,293,293,273,273,372,392,210,293,480,273,372,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 48, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,222,259,245,244,270,232,252,241,223,242,243,247],
[262,0,262,280,287,246,264,272,265,260,268,254,275,300],
[278,238,0,271,257,264,266,288,268,297,241,249,282,299],
[241,220,229,0,248,251,259,263,231,237,242,240,253,276],
[255,213,243,252,0,245,262,256,257,286,245,273,261,266],
[256,254,236,249,255,0,276,258,262,263,237,257,281,270],
[230,236,234,241,238,224,0,239,242,242,250,213,254,246],
[268,228,212,237,244,242,261,0,259,240,240,250,248,277],
[248,235,232,269,243,238,258,241,0,284,253,280,269,278],
[259,240,203,263,214,237,258,260,216,0,245,252,270,270],
[277,232,259,258,255,263,250,260,247,255,0,259,291,269],
[258,246,251,260,227,243,287,250,220,248,241,0,286,279],
[257,225,218,247,239,219,246,252,231,230,209,214,0,293],
[253,200,201,224,234,230,254,223,222,230,231,221,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 49, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,258,245,256,260,255,273,315,256,286,256,284,270],
[231,0,265,217,245,257,243,245,288,250,256,260,254,251],
[242,235,0,211,214,238,267,242,262,238,257,251,255,244],
[255,283,289,0,269,265,281,281,301,250,279,268,289,257],
[244,255,286,231,0,264,253,245,291,261,273,267,265,272],
[240,243,262,235,236,0,252,255,279,236,268,265,264,272],
[245,257,233,219,247,248,0,265,280,238,274,260,280,253],
[227,255,258,219,255,245,235,0,276,223,280,245,280,251],
[185,212,238,199,209,221,220,224,0,197,242,241,245,203],
[244,250,262,250,239,264,262,277,303,0,281,280,278,260],
[214,244,243,221,227,232,226,220,258,219,0,252,255,234],
[244,240,249,232,233,235,240,255,259,220,248,0,261,242],
[216,246,245,211,235,236,220,220,255,222,245,239,0,219],
[230,249,256,243,228,228,247,249,297,240,266,258,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 50, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,263,252,250,247,238,259,248,246,262,245,242,241],
[243,0,278,245,249,254,249,259,264,272,249,252,243,262],
[237,222,0,229,254,239,220,239,238,227,237,245,238,209],
[248,255,271,0,267,252,249,258,262,265,255,270,249,249],
[250,251,246,233,0,249,252,242,256,230,258,249,247,225],
[253,246,261,248,251,0,259,265,247,253,266,276,243,236],
[262,251,280,251,248,241,0,248,252,234,270,264,262,230],
[241,241,261,242,258,235,252,0,249,245,243,245,237,238],
[252,236,262,238,244,253,248,251,0,250,258,251,255,215],
[254,228,273,235,270,247,266,255,250,0,259,246,251,254],
[238,251,263,245,242,234,230,257,242,241,0,244,234,206],
[255,248,255,230,251,224,236,255,249,254,256,0,249,226],
[258,257,262,251,253,257,238,263,245,249,266,251,0,230],
[259,238,291,251,275,264,270,262,285,246,294,274,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 51, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,251,260,266,270,240,262,253,244,281,255,263,247],
[250,0,242,269,275,252,249,263,257,261,275,256,240,253],
[249,258,0,261,265,255,273,266,263,245,277,260,276,263],
[240,231,239,0,253,233,249,248,248,242,269,255,271,239],
[234,225,235,247,0,250,229,248,231,238,258,239,237,232],
[230,248,245,267,250,0,239,247,250,229,262,249,258,248],
[260,251,227,251,271,261,0,249,253,248,277,261,263,241],
[238,237,234,252,252,253,251,0,253,234,276,249,269,238],
[247,243,237,252,269,250,247,247,0,245,260,248,265,256],
[256,239,255,258,262,271,252,266,255,0,288,252,265,248],
[219,225,223,231,242,238,223,224,240,212,0,236,241,235],
[245,244,240,245,261,251,239,251,252,248,264,0,277,232],
[237,260,224,229,263,242,237,231,235,235,259,223,0,240],
[253,247,237,261,268,252,259,262,244,252,265,268,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 52, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,254,253,254,260,235,253,244,242,261,248,259,239],
[264,0,262,248,270,243,258,232,267,240,257,258,261,232],
[246,238,0,270,277,240,266,229,235,240,242,262,274,243],
[247,252,230,0,260,249,239,236,256,255,245,263,263,229],
[246,230,223,240,0,249,260,226,254,228,252,251,236,210],
[240,257,260,251,251,0,244,244,247,268,258,243,247,215],
[265,242,234,261,240,256,0,239,241,230,237,237,233,226],
[247,268,271,264,274,256,261,0,251,220,261,269,261,231],
[256,233,265,244,246,253,259,249,0,230,242,257,258,248],
[258,260,260,245,272,232,270,280,270,0,261,270,272,251],
[239,243,258,255,248,242,263,239,258,239,0,254,252,221],
[252,242,238,237,249,257,263,231,243,230,246,0,262,236],
[241,239,226,237,264,253,267,239,242,228,248,238,0,256],
[261,268,257,271,290,285,274,269,252,249,279,264,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 53, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,249,257,253,274,259,240,260,255,265,271,252,264],
[256,0,225,250,251,265,249,242,264,248,261,256,246,244],
[251,275,0,271,272,268,249,245,260,265,261,263,262,263],
[243,250,229,0,238,234,252,228,253,247,253,235,240,245],
[247,249,228,262,0,246,239,238,245,255,250,263,248,249],
[226,235,232,266,254,0,241,247,253,254,259,247,228,252],
[241,251,251,248,261,259,0,238,253,254,252,260,251,242],
[260,258,255,272,262,253,262,0,266,281,263,270,243,260],
[240,236,240,247,255,247,247,234,0,247,237,250,246,242],
[245,252,235,253,245,246,246,219,253,0,237,253,247,244],
[235,239,239,247,250,241,248,237,263,263,0,244,244,246],
[229,244,237,265,237,253,240,230,250,247,256,0,240,252],
[248,254,238,260,252,272,249,257,254,253,256,260,0,256],
[236,256,237,255,251,248,258,240,258,256,254,248,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 54, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,184,250,194,237,236,268,219,284,190,204,228,227],
[305,0,240,306,284,277,306,285,298,333,267,240,258,293],
[316,260,0,299,291,265,269,315,235,335,260,227,267,352],
[250,194,201,0,236,181,245,203,207,278,170,133,192,227],
[306,216,209,264,0,237,276,285,243,313,192,203,200,261],
[263,223,235,319,263,0,288,286,274,314,251,239,251,268],
[264,194,231,255,224,212,0,229,186,280,221,179,227,292],
[232,215,185,297,215,214,271,0,214,319,215,252,237,282],
[281,202,265,293,257,226,314,286,0,324,207,249,264,243],
[216,167,165,222,187,186,220,181,176,0,191,151,170,241],
[310,233,240,330,308,249,279,285,293,309,0,218,213,278],
[296,260,273,367,297,261,321,248,251,349,282,0,271,322],
[272,242,233,308,300,249,273,263,236,330,287,229,0,288],
[273,207,148,273,239,232,208,218,257,259,222,178,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 55, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,221,234,243,242,236,230,246,241,236,259,252,271,251],
[279,0,269,253,272,261,229,242,256,267,276,281,303,263],
[266,231,0,263,257,262,253,248,247,244,268,274,284,286],
[257,247,237,0,243,246,246,226,254,236,244,221,253,273],
[258,228,243,257,0,240,232,225,263,245,248,265,285,280],
[264,239,238,254,260,0,256,249,257,230,253,245,245,272],
[270,271,247,254,268,244,0,256,246,254,253,258,264,261],
[254,258,252,274,275,251,244,0,263,259,279,273,276,261],
[259,244,253,246,237,243,254,237,0,235,266,260,265,272],
[264,233,256,264,255,270,246,241,265,0,254,261,281,282],
[241,224,232,256,252,247,247,221,234,246,0,241,257,267],
[248,219,226,279,235,255,242,227,240,239,259,0,291,262],
[229,197,216,247,215,255,236,224,235,219,243,209,0,234],
[249,237,214,227,220,228,239,239,228,218,233,238,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 56, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,188,167,256,229,181,223,211,200,219,205,177,192],
[332,0,255,220,266,287,218,267,275,282,260,263,220,267],
[312,245,0,230,181,221,195,242,203,237,211,218,235,219],
[333,280,270,0,242,281,241,210,283,287,272,296,254,234],
[244,234,319,258,0,280,222,280,264,215,266,257,191,243],
[271,213,279,219,220,0,227,285,230,217,258,220,195,269],
[319,282,305,259,278,273,0,286,260,247,276,287,247,280],
[277,233,258,290,220,215,214,0,258,243,211,226,218,214],
[289,225,297,217,236,270,240,242,0,256,255,237,197,262],
[300,218,263,213,285,283,253,257,244,0,260,244,250,273],
[281,240,289,228,234,242,224,289,245,240,0,235,268,279],
[295,237,282,204,243,280,213,274,263,256,265,0,194,207],
[323,280,265,246,309,305,253,282,303,250,232,306,0,241],
[308,233,281,266,257,231,220,286,238,227,221,293,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 57, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,264,269,269,251,269,253,263,259,249,271,255,252],
[263,0,255,259,253,263,256,249,234,262,249,263,265,254],
[236,245,0,263,253,253,253,248,256,259,270,256,271,247],
[231,241,237,0,240,254,240,237,235,231,257,254,245,241],
[231,247,247,260,0,251,254,241,243,261,259,259,248,237],
[249,237,247,246,249,0,244,235,253,255,246,270,263,249],
[231,244,247,260,246,256,0,243,234,259,240,260,262,233],
[247,251,252,263,259,265,257,0,248,271,264,255,260,254],
[237,266,244,265,257,247,266,252,0,259,259,268,277,257],
[241,238,241,269,239,245,241,229,241,0,231,249,259,243],
[251,251,230,243,241,254,260,236,241,269,0,247,272,241],
[229,237,244,246,241,230,240,245,232,251,253,0,247,231],
[245,235,229,255,252,237,238,240,223,241,228,253,0,229],
[248,246,253,259,263,251,267,246,243,257,259,269,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 58, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,272,275,322,218,208,232,272,218,301,335,199,246],
[227,0,237,254,256,203,252,253,259,229,284,248,259,227],
[228,263,0,295,292,231,230,258,287,290,274,263,239,253],
[225,246,205,0,270,180,215,204,288,208,269,216,183,196],
[178,244,208,230,0,219,220,190,259,184,256,247,210,235],
[282,297,269,320,281,0,242,229,303,261,289,238,247,248],
[292,248,270,285,280,258,0,277,318,308,241,272,242,266],
[268,247,242,296,310,271,223,0,313,281,271,269,288,187],
[228,241,213,212,241,197,182,187,0,230,211,240,160,221],
[282,271,210,292,316,239,192,219,270,0,284,255,280,196],
[199,216,226,231,244,211,259,229,289,216,0,218,232,216],
[165,252,237,284,253,262,228,231,260,245,282,0,219,270],
[301,241,261,317,290,253,258,212,340,220,268,281,0,198],
[254,273,247,304,265,252,234,313,279,304,284,230,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 59, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,264,234,254,253,253,239,256,253,256,251,242,253],
[242,0,280,260,247,264,262,259,260,267,260,268,249,249],
[236,220,0,231,236,224,243,229,239,231,230,227,234,216],
[266,240,269,0,252,253,253,243,264,239,251,275,237,249],
[246,253,264,248,0,256,264,249,250,250,264,269,238,240],
[247,236,276,247,244,0,243,238,253,247,252,255,222,244],
[247,238,257,247,236,257,0,241,233,247,244,256,253,236],
[261,241,271,257,251,262,259,0,257,249,256,287,249,243],
[244,240,261,236,250,247,267,243,0,252,254,240,241,246],
[247,233,269,261,250,253,253,251,248,0,248,257,230,253],
[244,240,270,249,236,248,256,244,246,252,0,244,235,235],
[249,232,273,225,231,245,244,213,260,243,256,0,245,239],
[258,251,266,263,262,278,247,251,259,270,265,255,0,264],
[247,251,284,251,260,256,264,257,254,247,265,261,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 60, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,266,253,270,253,259,267,266,248,265,256,259,262],
[243,0,256,231,255,248,249,247,257,236,243,250,253,257],
[234,244,0,237,242,237,250,250,235,233,245,241,231,249],
[247,269,263,0,263,257,256,261,247,251,251,249,252,259],
[230,245,258,237,0,245,242,249,255,241,255,243,241,262],
[247,252,263,243,255,0,244,252,243,248,251,253,251,239],
[241,251,250,244,258,256,0,256,248,236,271,255,256,251],
[233,253,250,239,251,248,244,0,251,249,255,254,255,232],
[234,243,265,253,245,257,252,249,0,246,244,245,261,234],
[252,264,267,249,259,252,264,251,254,0,262,258,245,262],
[235,257,255,249,245,249,229,245,256,238,0,234,248,245],
[244,250,259,251,257,247,245,246,255,242,266,0,244,252],
[241,247,269,248,259,249,244,245,239,255,252,256,0,237],
[238,243,251,241,238,261,249,268,266,238,255,248,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 61, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,220,240,222,236,239,245,258,241,260,242,283,238],
[241,0,224,236,232,249,260,248,255,247,232,244,258,233],
[280,276,0,258,251,262,260,258,272,270,247,285,283,240],
[260,264,242,0,248,261,259,261,268,268,247,248,274,247],
[278,268,249,252,0,262,261,259,271,264,249,277,284,248],
[264,251,238,239,238,0,236,246,247,253,238,252,255,247],
[261,240,240,241,239,264,0,245,268,258,238,251,265,253],
[255,252,242,239,241,254,255,0,272,253,229,260,258,246],
[242,245,228,232,229,253,232,228,0,237,230,228,257,235],
[259,253,230,232,236,247,242,247,263,0,229,262,281,239],
[240,268,253,253,251,262,262,271,270,271,0,256,267,238],
[258,256,215,252,223,248,249,240,272,238,244,0,268,242],
[217,242,217,226,216,245,235,242,243,219,233,232,0,223],
[262,267,260,253,252,253,247,254,265,261,262,258,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 62, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,275,264,271,250,272,269,263,274,269,258,269,270],
[232,0,240,248,241,237,237,247,239,273,287,267,238,251],
[225,260,0,266,249,251,252,256,244,254,250,247,262,257],
[236,252,234,0,248,247,259,264,253,261,257,246,243,246],
[229,259,251,252,0,263,260,266,237,246,251,257,254,256],
[250,263,249,253,237,0,243,244,248,231,259,254,265,256],
[228,263,248,241,240,257,0,268,239,272,258,245,257,250],
[231,253,244,236,234,256,232,0,226,246,242,240,246,244],
[237,261,256,247,263,252,261,274,0,262,259,261,247,272],
[226,227,246,239,254,269,228,254,238,0,258,234,233,264],
[231,213,250,243,249,241,242,258,241,242,0,242,234,247],
[242,233,253,254,243,246,255,260,239,266,258,0,236,267],
[231,262,238,257,246,235,243,254,253,267,266,264,0,248],
[230,249,243,254,244,244,250,256,228,236,253,233,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 63, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,230,246,231,238,247,257,213,242,237,245,250,236],
[253,0,243,259,249,228,226,237,247,240,232,248,245,239],
[270,257,0,268,249,256,250,253,237,253,249,257,246,253],
[254,241,232,0,227,234,243,255,243,252,244,232,248,247],
[269,251,251,273,0,242,248,257,251,273,259,259,238,247],
[262,272,244,266,258,0,256,268,262,259,250,244,273,242],
[253,274,250,257,252,244,0,264,231,260,254,255,237,250],
[243,263,247,245,243,232,236,0,238,253,234,231,244,241],
[287,253,263,257,249,238,269,262,0,268,250,250,267,260],
[258,260,247,248,227,241,240,247,232,0,251,253,247,227],
[263,268,251,256,241,250,246,266,250,249,0,253,253,249],
[255,252,243,268,241,256,245,269,250,247,247,0,264,250],
[250,255,254,252,262,227,263,256,233,253,247,236,0,238],
[264,261,247,253,253,258,250,259,240,273,251,250,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 64, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,231,271,245,253,253,254,232,246,265,245,246,254],
[249,0,261,251,255,256,253,249,249,251,259,260,268,250],
[269,239,0,253,239,252,257,251,249,249,258,248,263,253],
[229,249,247,0,243,237,257,257,246,248,241,240,248,247],
[255,245,261,257,0,250,269,264,246,238,264,260,256,250],
[247,244,248,263,250,0,257,255,243,242,257,239,238,250],
[247,247,243,243,231,243,0,253,243,253,254,239,240,252],
[246,251,249,243,236,245,247,0,250,255,250,231,243,246],
[268,251,251,254,254,257,257,250,0,247,268,244,272,243],
[254,249,251,252,262,258,247,245,253,0,255,243,251,255],
[235,241,242,259,236,243,246,250,232,245,0,241,241,247],
[255,240,252,260,240,261,261,269,256,257,259,0,273,253],
[254,232,237,252,244,262,260,257,228,249,259,227,0,258],
[246,250,247,253,250,250,248,254,257,245,253,247,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 65, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,261,268,261,268,266,235,255,277,259,258,257,252],
[253,0,247,267,254,266,251,241,263,269,263,268,255,263],
[239,253,0,270,272,264,247,240,256,273,244,255,249,245],
[232,233,230,0,242,236,228,230,230,250,240,238,224,231],
[239,246,228,258,0,263,238,218,241,267,239,243,252,257],
[232,234,236,264,237,0,239,237,235,245,236,237,240,241],
[234,249,253,272,262,261,0,251,262,255,253,252,271,244],
[265,259,260,270,282,263,249,0,265,259,259,250,258,274],
[245,237,244,270,259,265,238,235,0,259,246,243,247,238],
[223,231,227,250,233,255,245,241,241,0,250,250,242,230],
[241,237,256,260,261,264,247,241,254,250,0,257,247,238],
[242,232,245,262,257,263,248,250,257,250,243,0,240,245],
[243,245,251,276,248,260,229,242,253,258,253,260,0,241],
[248,237,255,269,243,259,256,226,262,270,262,255,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 66, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,284,233,221,271,201,220,208,277,278,279,266,318],
[282,0,350,234,299,263,229,285,289,288,336,287,287,353],
[216,150,0,182,171,218,217,112,161,161,253,261,210,266],
[267,266,318,0,240,268,201,299,228,244,258,302,253,280],
[279,201,329,260,0,249,256,245,167,327,273,257,283,305],
[229,237,282,232,251,0,283,209,208,324,307,263,255,290],
[299,271,283,299,244,217,0,240,250,236,325,316,218,306],
[280,215,388,201,255,291,260,0,213,319,326,263,307,340],
[292,211,339,272,333,292,250,287,0,340,322,347,308,289],
[223,212,339,256,173,176,264,181,160,0,286,308,302,263],
[222,164,247,242,227,193,175,174,178,214,0,225,216,274],
[221,213,239,198,243,237,184,237,153,192,275,0,210,223],
[234,213,290,247,217,245,282,193,192,198,284,290,0,316],
[182,147,234,220,195,210,194,160,211,237,226,277,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 67, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,258,247,293,255,279,269,266,276,293,232,280,252],
[224,0,210,243,246,232,239,245,256,228,282,239,241,248],
[242,290,0,273,277,273,268,241,280,269,298,254,264,261],
[253,257,227,0,243,229,253,243,274,244,274,265,239,253],
[207,254,223,257,0,257,261,231,258,232,284,232,255,230],
[245,268,227,271,243,0,263,253,261,256,288,250,253,269],
[221,261,232,247,239,237,0,218,241,248,263,224,240,278],
[231,255,259,257,269,247,282,0,267,252,287,250,252,257],
[234,244,220,226,242,239,259,233,0,264,245,252,236,251],
[224,272,231,256,268,244,252,248,236,0,269,236,234,259],
[207,218,202,226,216,212,237,213,255,231,0,228,244,204],
[268,261,246,235,268,250,276,250,248,264,272,0,282,241],
[220,259,236,261,245,247,260,248,264,266,256,218,0,225],
[248,252,239,247,270,231,222,243,249,241,296,259,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 68, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,305,260,294,305,232,267,266,244,274,291,267,298],
[254,0,291,271,301,306,270,274,285,242,314,269,253,282],
[195,209,0,245,265,286,206,208,207,233,228,235,232,232],
[240,229,255,0,271,289,233,227,267,216,269,239,237,239],
[206,199,235,229,0,251,205,215,222,217,253,239,216,240],
[195,194,214,211,249,0,226,215,256,198,232,210,224,204],
[268,230,294,267,295,274,0,249,264,235,257,233,283,227],
[233,226,292,273,285,285,251,0,254,262,315,260,255,253],
[234,215,293,233,278,244,236,246,0,224,265,254,242,272],
[256,258,267,284,283,302,265,238,276,0,267,248,300,289],
[226,186,272,231,247,268,243,185,235,233,0,246,239,238],
[209,231,265,261,261,290,267,240,246,252,254,0,265,245],
[233,247,268,263,284,276,217,245,258,200,261,235,0,272],
[202,218,268,261,260,296,273,247,228,211,262,255,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 69, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,253,240,233,235,227,261,246,255,251,239,247,236],
[254,0,257,263,247,260,252,273,252,261,262,247,273,250],
[247,243,0,231,241,254,237,249,233,244,243,243,261,241],
[260,237,269,0,256,254,254,266,264,244,257,259,286,249],
[267,253,259,244,0,265,258,266,252,245,254,252,275,240],
[265,240,246,246,235,0,237,252,248,241,252,242,260,233],
[273,248,263,246,242,263,0,259,243,245,241,259,276,246],
[239,227,251,234,234,248,241,0,235,220,230,214,254,232],
[254,248,267,236,248,252,257,265,0,236,241,251,273,252],
[245,239,256,256,255,259,255,280,264,0,245,251,271,233],
[249,238,257,243,246,248,259,270,259,255,0,237,264,247],
[261,253,257,241,248,258,241,286,249,249,263,0,266,243],
[253,227,239,214,225,240,224,246,227,229,236,234,0,221],
[264,250,259,251,260,267,254,268,248,267,253,257,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 70, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,271,250,272,276,266,263,271,274,270,256,253,256],
[255,0,254,239,257,260,241,270,261,275,256,260,240,258],
[229,246,0,248,241,259,256,249,241,255,247,252,246,242],
[250,261,252,0,239,261,262,263,265,270,261,256,241,250],
[228,243,259,261,0,255,254,258,264,267,258,239,250,269],
[224,240,241,239,245,0,239,245,250,248,241,249,232,241],
[234,259,244,238,246,261,0,257,261,262,254,240,240,243],
[237,230,251,237,242,255,243,0,252,250,248,244,228,243],
[229,239,259,235,236,250,239,248,0,260,247,244,247,236],
[226,225,245,230,233,252,238,250,240,0,238,231,232,235],
[230,244,253,239,242,259,246,252,253,262,0,240,233,257],
[244,240,248,244,261,251,260,256,256,269,260,0,261,250],
[247,260,254,259,250,268,260,272,253,268,267,239,0,264],
[244,242,258,250,231,259,257,257,264,265,243,250,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 71, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,309,282,227,218,296,225,275,295,223,229,296,226],
[233,0,280,246,231,238,230,232,262,263,211,173,276,268],
[191,220,0,226,220,241,291,229,255,241,237,177,308,201],
[218,254,274,0,265,256,270,252,266,258,207,196,282,222],
[273,269,280,235,0,231,301,237,246,297,273,247,286,263],
[282,262,259,244,269,0,307,270,292,307,309,212,324,275],
[204,270,209,230,199,193,0,210,229,219,215,183,228,188],
[275,268,271,248,263,230,290,0,303,282,267,192,309,235],
[225,238,245,234,254,208,271,197,0,245,231,201,251,220],
[205,237,259,242,203,193,281,218,255,0,220,169,258,215],
[277,289,263,293,227,191,285,233,269,280,0,237,307,241],
[271,327,323,304,253,288,317,308,299,331,263,0,329,228],
[204,224,192,218,214,176,272,191,249,242,193,171,0,239],
[274,232,299,278,237,225,312,265,280,285,259,272,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 72, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,294,264,236,258,259,237,256,267,252,250,271,255],
[241,0,296,255,252,273,293,244,261,246,245,252,236,241],
[206,204,0,217,223,228,211,202,198,191,213,211,215,203],
[236,245,283,0,256,265,265,216,226,243,241,238,257,247],
[264,248,277,244,0,250,261,250,249,228,253,268,240,248],
[242,227,272,235,250,0,262,232,215,228,228,244,224,207],
[241,207,289,235,239,238,0,252,253,220,239,233,239,226],
[263,256,298,284,250,268,248,0,247,255,254,257,251,279],
[244,239,302,274,251,285,247,253,0,236,249,256,263,248],
[233,254,309,257,272,272,280,245,264,0,253,283,261,219],
[248,255,287,259,247,272,261,246,251,247,0,236,245,239],
[250,248,289,262,232,256,267,243,244,217,264,0,243,214],
[229,264,285,243,260,276,261,249,237,239,255,257,0,243],
[245,259,297,253,252,293,274,221,252,281,261,286,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 73, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,240,251,224,225,247,243,224,231,227,241,244,237],
[258,0,248,260,238,258,244,262,239,255,241,226,256,228],
[260,252,0,267,227,237,214,246,239,231,216,227,246,221],
[249,240,233,0,228,252,224,225,213,223,237,239,231,240],
[276,262,273,272,0,275,253,266,236,262,259,239,262,248],
[275,242,263,248,225,0,230,238,246,229,220,252,255,241],
[253,256,286,276,247,270,0,247,252,268,234,240,250,267],
[257,238,254,275,234,262,253,0,245,248,232,245,268,250],
[276,261,261,287,264,254,248,255,0,260,257,275,264,234],
[269,245,269,277,238,271,232,252,240,0,231,260,281,240],
[273,259,284,263,241,280,266,268,243,269,0,260,250,252],
[259,274,273,261,261,248,260,255,225,240,240,0,281,233],
[256,244,254,269,238,245,250,232,236,219,250,219,0,232],
[263,272,279,260,252,259,233,250,266,260,248,267,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 74, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,243,271,250,263,241,256,250,242,237,239,239,256],
[252,0,233,267,223,243,248,252,237,253,229,239,236,242],
[257,267,0,270,246,280,254,245,258,259,239,258,244,256],
[229,233,230,0,237,240,236,242,235,228,219,228,214,252],
[250,277,254,263,0,272,253,262,237,264,253,258,256,266],
[237,257,220,260,228,0,231,246,229,237,231,240,228,239],
[259,252,246,264,247,269,0,250,251,262,243,256,258,259],
[244,248,255,258,238,254,250,0,233,245,241,246,230,259],
[250,263,242,265,263,271,249,267,0,259,226,248,237,262],
[258,247,241,272,236,263,238,255,241,0,242,246,245,252],
[263,271,261,281,247,269,257,259,274,258,0,268,254,275],
[261,261,242,272,242,260,244,254,252,254,232,0,238,257],
[261,264,256,286,244,272,242,270,263,255,246,262,0,262],
[244,258,244,248,234,261,241,241,238,248,225,243,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 75, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,265,250,241,241,234,257,264,244,267,225,221,272],
[236,0,212,221,231,234,216,223,231,223,255,234,234,251],
[235,288,0,253,237,247,228,219,240,244,274,240,216,265],
[250,279,247,0,258,264,245,271,244,271,273,222,232,267],
[259,269,263,242,0,242,275,256,282,285,300,258,232,274],
[259,266,253,236,258,0,222,236,240,243,248,238,226,242],
[266,284,272,255,225,278,0,230,250,257,285,268,252,292],
[243,277,281,229,244,264,270,0,266,245,270,252,231,261],
[236,269,260,256,218,260,250,234,0,272,279,257,241,254],
[256,277,256,229,215,257,243,255,228,0,275,230,228,243],
[233,245,226,227,200,252,215,230,221,225,0,241,207,233],
[275,266,260,278,242,262,232,248,243,270,259,0,254,274],
[279,266,284,268,268,274,248,269,259,272,293,246,0,277],
[228,249,235,233,226,258,208,239,246,257,267,226,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 76, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,268,234,257,260,254,250,244,280,246,248,261,246],
[242,0,243,224,241,234,242,222,232,257,228,234,254,237],
[232,257,0,224,244,239,243,246,245,247,235,244,273,238],
[266,276,276,0,270,245,282,241,252,276,249,257,279,244],
[243,259,256,230,0,245,278,238,243,265,253,249,280,228],
[240,266,261,255,255,0,286,259,239,265,265,245,261,240],
[246,258,257,218,222,214,0,228,236,263,227,249,260,235],
[250,278,254,259,262,241,272,0,235,282,271,259,268,263],
[256,268,255,248,257,261,264,265,0,282,265,244,266,248],
[220,243,253,224,235,235,237,218,218,0,224,226,253,233],
[254,272,265,251,247,235,273,229,235,276,0,255,274,253],
[252,266,256,243,251,255,251,241,256,274,245,0,261,232],
[239,246,227,221,220,239,240,232,234,247,226,239,0,237],
[254,263,262,256,272,260,265,237,252,267,247,268,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 77, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,246,303,250,220,256,299,254,269,289,271,237,222],
[256,0,244,272,292,272,289,278,284,263,289,275,244,251],
[254,256,0,261,243,258,268,278,251,242,285,273,242,260],
[197,228,239,0,217,216,239,271,254,255,264,274,203,221],
[250,208,257,283,0,240,261,278,257,241,268,278,230,235],
[280,228,242,284,260,0,273,312,294,269,310,281,254,243],
[244,211,232,261,239,227,0,279,282,235,269,260,221,223],
[201,222,222,229,222,188,221,0,228,248,226,238,206,187],
[246,216,249,246,243,206,218,272,0,236,259,272,190,225],
[231,237,258,245,259,231,265,252,264,0,284,258,206,210],
[211,211,215,236,232,190,231,274,241,216,0,245,198,200],
[229,225,227,226,222,219,240,262,228,242,255,0,228,205],
[263,256,258,297,270,246,279,294,310,294,302,272,0,246],
[278,249,240,279,265,257,277,313,275,290,300,295,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 78, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,253,227,240,220,264,242,245,235,224,235,234,230],
[271,0,269,247,239,240,258,249,241,242,261,255,246,229],
[247,231,0,231,231,257,268,238,235,226,255,237,251,261],
[273,253,269,0,259,249,295,238,247,238,253,262,255,262],
[260,261,269,241,0,262,261,236,252,245,243,247,261,263],
[280,260,243,251,238,0,266,263,245,243,235,250,237,236],
[236,242,232,205,239,234,0,237,230,243,238,219,239,236],
[258,251,262,262,264,237,263,0,250,228,254,246,246,274],
[255,259,265,253,248,255,270,250,0,251,247,244,243,236],
[265,258,274,262,255,257,257,272,249,0,260,265,264,257],
[276,239,245,247,257,265,262,246,253,240,0,250,248,256],
[265,245,263,238,253,250,281,254,256,235,250,0,251,245],
[266,254,249,245,239,263,261,254,257,236,252,249,0,241],
[270,271,239,238,237,264,264,226,264,243,244,255,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 79, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,252,234,212,279,280,259,269,273,257,285,286,290],
[209,0,232,198,181,194,203,203,186,209,253,232,226,208],
[248,268,0,212,211,250,225,213,210,250,265,260,271,245],
[266,302,288,0,238,292,226,299,249,270,254,274,269,294],
[288,319,289,262,0,306,262,294,246,291,273,272,287,283],
[221,306,250,208,194,0,235,258,212,265,256,266,270,239],
[220,297,275,274,238,265,0,263,257,255,249,276,300,290],
[241,297,287,201,206,242,237,0,232,286,258,270,292,246],
[231,314,290,251,254,288,243,268,0,272,228,272,284,275],
[227,291,250,230,209,235,245,214,228,0,251,241,254,296],
[243,247,235,246,227,244,251,242,272,249,0,276,286,241],
[215,268,240,226,228,234,224,230,228,259,224,0,258,259],
[214,274,229,231,213,230,200,208,216,246,214,242,0,252],
[210,292,255,206,217,261,210,254,225,204,259,241,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 80, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,243,250,265,258,256,242,260,270,267,266,244,254],
[246,0,243,260,251,248,251,232,259,272,250,266,246,249],
[257,257,0,264,258,270,268,245,263,262,252,258,246,254],
[250,240,236,0,256,255,249,238,252,252,251,259,252,232],
[235,249,242,244,0,239,233,212,250,263,242,244,235,243],
[242,252,230,245,261,0,242,225,247,263,240,256,243,231],
[244,249,232,251,267,258,0,238,252,258,239,252,239,248],
[258,268,255,262,288,275,262,0,275,278,254,264,246,269],
[240,241,237,248,250,253,248,225,0,251,256,235,224,235],
[230,228,238,248,237,237,242,222,249,0,235,240,228,237],
[233,250,248,249,258,260,261,246,244,265,0,256,253,247],
[234,234,242,241,256,244,248,236,265,260,244,0,242,232],
[256,254,254,248,265,257,261,254,276,272,247,258,0,238],
[246,251,246,268,257,269,252,231,265,263,253,268,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 81, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,215,263,249,246,234,257,254,215,257,238,251,273],
[268,0,227,270,273,227,239,241,269,217,255,247,276,259],
[285,273,0,281,296,232,285,247,255,272,295,265,307,289],
[237,230,219,0,231,208,226,219,212,232,229,232,266,239],
[251,227,204,269,0,219,226,233,236,204,242,250,245,248],
[254,273,268,292,281,0,273,241,274,257,286,256,257,277],
[266,261,215,274,274,227,0,248,291,254,292,272,293,286],
[243,259,253,281,267,259,252,0,282,238,287,244,278,285],
[246,231,245,288,264,226,209,218,0,246,274,263,267,263],
[285,283,228,268,296,243,246,262,254,0,285,282,276,280],
[243,245,205,271,258,214,208,213,226,215,0,226,260,236],
[262,253,235,268,250,244,228,256,237,218,274,0,261,253],
[249,224,193,234,255,243,207,222,233,224,240,239,0,264],
[227,241,211,261,252,223,214,215,237,220,264,247,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 82, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,238,252,249,276,252,259,244,265,259,261,239,259],
[244,0,256,253,258,259,253,249,230,258,254,254,247,242],
[262,244,0,276,256,257,259,251,259,261,260,263,245,258],
[248,247,224,0,251,257,251,251,257,270,251,249,248,246],
[251,242,244,249,0,243,250,248,236,248,256,246,249,249],
[224,241,243,243,257,0,222,247,247,258,247,240,243,259],
[248,247,241,249,250,278,0,249,247,268,255,250,264,262],
[241,251,249,249,252,253,251,0,243,252,247,242,240,246],
[256,270,241,243,264,253,253,257,0,276,238,257,252,258],
[235,242,239,230,252,242,232,248,224,0,231,231,238,260],
[241,246,240,249,244,253,245,253,262,269,0,247,244,253],
[239,246,237,251,254,260,250,258,243,269,253,0,249,253],
[261,253,255,252,251,257,236,260,248,262,256,251,0,256],
[241,258,242,254,251,241,238,254,242,240,247,247,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 83, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,242,246,252,270,264,245,269,260,247,252,257,244],
[263,0,271,250,233,271,281,254,268,255,251,254,288,262],
[258,229,0,238,237,272,266,234,248,230,233,283,254,223],
[254,250,262,0,245,252,271,245,267,256,231,281,271,232],
[248,267,263,255,0,249,251,259,256,255,247,280,253,250],
[230,229,228,248,251,0,255,214,243,229,228,259,240,231],
[236,219,234,229,249,245,0,228,251,242,257,238,239,256],
[255,246,266,255,241,286,272,0,271,232,229,283,250,234],
[231,232,252,233,244,257,249,229,0,245,238,248,244,216],
[240,245,270,244,245,271,258,268,255,0,237,268,250,237],
[253,249,267,269,253,272,243,271,262,263,0,243,262,240],
[248,246,217,219,220,241,262,217,252,232,257,0,228,214],
[243,212,246,229,247,260,261,250,256,250,238,272,0,216],
[256,238,277,268,250,269,244,266,284,263,260,286,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 84, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,241,223,224,238,233,234,229,219,254,242,228,235],
[270,0,252,231,236,260,244,237,264,262,253,244,247,233],
[259,248,0,228,215,238,249,262,242,241,262,243,227,235],
[277,269,272,0,249,258,256,266,254,266,278,267,246,238],
[276,264,285,251,0,264,266,279,263,273,275,262,246,249],
[262,240,262,242,236,0,233,249,256,257,246,242,234,227],
[267,256,251,244,234,267,0,283,243,234,277,255,249,252],
[266,263,238,234,221,251,217,0,226,239,244,251,231,248],
[271,236,258,246,237,244,257,274,0,242,253,259,231,248],
[281,238,259,234,227,243,266,261,258,0,278,252,237,237],
[246,247,238,222,225,254,223,256,247,222,0,249,222,225],
[258,256,257,233,238,258,245,249,241,248,251,0,249,243],
[272,253,273,254,254,266,251,269,269,263,278,251,0,238],
[265,267,265,262,251,273,248,252,252,263,275,257,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 85, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,261,253,271,248,255,269,253,261,265,271,254,260],
[252,0,247,250,261,261,246,275,248,262,266,257,249,256],
[239,253,0,250,250,252,238,261,247,249,252,257,249,266],
[247,250,250,0,251,264,244,267,253,255,262,267,234,260],
[229,239,250,249,0,253,227,255,240,253,263,246,254,248],
[252,239,248,236,247,0,250,258,236,244,256,240,249,253],
[245,254,262,256,273,250,0,261,262,257,279,276,265,271],
[231,225,239,233,245,242,239,0,235,254,252,238,227,237],
[247,252,253,247,260,264,238,265,0,264,261,261,251,263],
[239,238,251,245,247,256,243,246,236,0,252,240,247,245],
[235,234,248,238,237,244,221,248,239,248,0,241,234,240],
[229,243,243,233,254,260,224,262,239,260,259,0,250,254],
[246,251,251,266,246,251,235,273,249,253,266,250,0,263],
[240,244,234,240,252,247,229,263,237,255,260,246,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 86, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,255,248,262,255,260,253,272,265,253,257,247,272],
[260,0,257,254,246,248,277,245,257,272,257,259,249,267],
[245,243,0,256,263,265,253,241,275,260,246,255,236,274],
[252,246,244,0,235,245,263,239,262,245,235,252,249,256],
[238,254,237,265,0,262,260,239,249,252,256,251,241,260],
[245,252,235,255,238,0,250,250,254,250,243,248,253,259],
[240,223,247,237,240,250,0,244,259,255,231,242,232,252],
[247,255,259,261,261,250,256,0,275,262,246,248,243,272],
[228,243,225,238,251,246,241,225,0,248,241,243,233,247],
[235,228,240,255,248,250,245,238,252,0,232,227,223,245],
[247,243,254,265,244,257,269,254,259,268,0,254,249,278],
[243,241,245,248,249,252,258,252,257,273,246,0,238,257],
[253,251,264,251,259,247,268,257,267,277,251,262,0,265],
[228,233,226,244,240,241,248,228,253,255,222,243,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 87, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,283,245,267,257,253,261,274,284,245,262,278,252],
[250,0,270,246,264,247,273,241,251,259,254,248,265,241],
[217,230,0,227,254,232,237,236,245,238,223,237,277,243],
[255,254,273,0,260,284,254,258,262,259,253,238,286,243],
[233,236,246,240,0,239,224,256,241,276,216,247,269,240],
[243,253,268,216,261,0,266,231,244,254,222,231,284,226],
[247,227,263,246,276,234,0,268,265,267,259,250,279,250],
[239,259,264,242,244,269,232,0,262,270,248,256,283,244],
[226,249,255,238,259,256,235,238,0,253,237,231,264,223],
[216,241,262,241,224,246,233,230,247,0,229,227,272,214],
[255,246,277,247,284,278,241,252,263,271,0,273,278,250],
[238,252,263,262,253,269,250,244,269,273,227,0,266,233],
[222,235,223,214,231,216,221,217,236,228,222,234,0,219],
[248,259,257,257,260,274,250,256,277,286,250,267,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 88, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,264,264,250,245,267,269,258,237,234,270,245,258],
[248,0,248,233,245,238,256,252,257,261,241,240,256,260],
[236,252,0,245,223,219,252,264,259,220,229,244,228,225],
[236,267,255,0,238,245,252,271,271,254,235,268,259,246],
[250,255,277,262,0,267,280,281,273,271,255,270,272,265],
[255,262,281,255,233,0,260,266,264,260,248,269,244,240],
[233,244,248,248,220,240,0,260,228,229,223,242,240,233],
[231,248,236,229,219,234,240,0,237,219,239,255,229,238],
[242,243,241,229,227,236,272,263,0,242,222,243,248,249],
[263,239,280,246,229,240,271,281,258,0,246,259,269,256],
[266,259,271,265,245,252,277,261,278,254,0,268,239,255],
[230,260,256,232,230,231,258,245,257,241,232,0,245,240],
[255,244,272,241,228,256,260,271,252,231,261,255,0,241],
[242,240,275,254,235,260,267,262,251,244,245,260,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 89, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,224,238,233,260,228,234,241,237,252,243,226,238],
[264,0,228,232,264,240,246,236,225,241,253,234,252,242],
[276,272,0,261,248,240,237,261,247,235,249,227,247,258],
[262,268,239,0,266,273,273,245,238,245,249,255,272,252],
[267,236,252,234,0,234,247,238,239,246,227,234,238,244],
[240,260,260,227,266,0,255,251,249,253,240,248,240,258],
[272,254,263,227,253,245,0,237,234,242,250,239,245,246],
[266,264,239,255,262,249,263,0,239,224,256,245,262,247],
[259,275,253,262,261,251,266,261,0,245,242,270,274,257],
[263,259,265,255,254,247,258,276,255,0,245,267,257,278],
[248,247,251,251,273,260,250,244,258,255,0,255,237,246],
[257,266,273,245,266,252,261,255,230,233,245,0,257,260],
[274,248,253,228,262,260,255,238,226,243,263,243,0,250],
[262,258,242,248,256,242,254,253,243,222,254,240,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 90, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,242,256,241,244,252,251,269,258,256,254,258,274],
[238,0,253,264,247,247,256,251,262,268,266,255,245,250],
[258,247,0,239,256,247,259,249,275,248,266,253,251,256],
[244,236,261,0,258,237,259,245,260,246,257,253,254,256],
[259,253,244,242,0,241,258,245,254,253,259,253,249,248],
[256,253,253,263,259,0,263,263,276,263,264,245,262,269],
[248,244,241,241,242,237,0,240,265,250,258,241,249,241],
[249,249,251,255,255,237,260,0,267,251,268,252,252,252],
[231,238,225,240,246,224,235,233,0,245,242,238,244,231],
[242,232,252,254,247,237,250,249,255,0,254,240,249,251],
[244,234,234,243,241,236,242,232,258,246,0,244,245,240],
[246,245,247,247,247,255,259,248,262,260,256,0,275,252],
[242,255,249,246,251,238,251,248,256,251,255,225,0,244],
[226,250,244,244,252,231,259,248,269,249,260,248,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 91, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,157,147,208,278,261,154,199,251,221,251,199,231],
[218,0,214,192,243,234,222,218,241,306,228,230,217,252],
[343,286,0,249,230,291,374,285,345,334,250,285,279,335],
[353,308,251,0,296,317,324,209,259,332,167,258,228,292],
[292,257,270,204,0,240,281,203,263,275,285,222,226,255],
[222,266,209,183,260,0,270,202,273,310,178,141,171,183],
[239,278,126,176,219,230,0,148,226,251,184,208,208,214],
[346,282,215,291,297,298,352,0,246,289,201,309,210,304],
[301,259,155,241,237,227,274,254,0,264,244,259,190,264],
[249,194,166,168,225,190,249,211,236,0,208,210,154,229],
[279,272,250,333,215,322,316,299,256,292,0,212,234,264],
[249,270,215,242,278,359,292,191,241,290,288,0,295,316],
[301,283,221,272,274,329,292,290,310,346,266,205,0,241],
[269,248,165,208,245,317,286,196,236,271,236,184,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 92, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,257,254,273,289,276,258,280,274,273,265,258,293],
[254,0,244,243,258,263,205,248,273,239,232,243,249,237],
[243,256,0,241,280,296,234,278,265,259,242,247,237,258],
[246,257,259,0,270,275,249,250,279,276,251,259,238,251],
[227,242,220,230,0,273,230,218,237,243,237,234,228,241],
[211,237,204,225,227,0,241,233,264,230,219,247,238,232],
[224,295,266,251,270,259,0,246,263,272,261,237,250,266],
[242,252,222,250,282,267,254,0,256,247,247,271,240,268],
[220,227,235,221,263,236,237,244,0,249,237,259,234,267],
[226,261,241,224,257,270,228,253,251,0,246,261,260,259],
[227,268,258,249,263,281,239,253,263,254,0,266,253,235],
[235,257,253,241,266,253,263,229,241,239,234,0,233,269],
[242,251,263,262,272,262,250,260,266,240,247,267,0,253],
[207,263,242,249,259,268,234,232,233,241,265,231,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 93, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,248,234,292,221,225,261,153,284,325,256,220,237],
[220,0,228,220,231,176,312,245,268,274,214,331,211,285],
[252,272,0,217,197,204,301,241,157,220,208,229,217,241],
[266,280,283,0,264,236,247,266,197,319,328,310,246,251],
[208,269,303,236,0,271,259,245,248,373,317,348,332,294],
[279,324,296,264,229,0,271,290,245,316,294,365,340,310],
[275,188,199,253,241,229,0,194,205,249,209,199,204,198],
[239,255,259,234,255,210,306,0,234,234,308,255,194,243],
[347,232,343,303,252,255,295,266,0,315,307,329,291,290],
[216,226,280,181,127,184,251,266,185,0,299,254,198,243],
[175,286,292,172,183,206,291,192,193,201,0,260,183,224],
[244,169,271,190,152,135,301,245,171,246,240,0,184,248],
[280,289,283,254,168,160,296,306,209,302,317,316,0,256],
[263,215,259,249,206,190,302,257,210,257,276,252,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 94, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,240,240,227,252,233,243,247,242,240,246,264,230],
[259,0,257,263,264,252,266,269,260,244,272,271,281,272],
[260,243,0,238,253,253,236,256,245,245,251,260,275,238],
[260,237,262,0,252,238,247,232,260,254,260,241,288,246],
[273,236,247,248,0,252,237,282,258,233,253,258,261,255],
[248,248,247,262,248,0,246,257,268,239,253,245,260,259],
[267,234,264,253,263,254,0,256,272,224,261,257,253,276],
[257,231,244,268,218,243,244,0,246,228,243,255,241,242],
[253,240,255,240,242,232,228,254,0,227,238,244,260,242],
[258,256,255,246,267,261,276,272,273,0,255,255,285,250],
[260,228,249,240,247,247,239,257,262,245,0,253,274,256],
[254,229,240,259,242,255,243,245,256,245,247,0,256,257],
[236,219,225,212,239,240,247,259,240,215,226,244,0,255],
[270,228,262,254,245,241,224,258,258,250,244,243,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 95, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,248,240,236,241,251,239,225,243,249,258,236,255],
[245,0,251,249,249,236,254,239,244,239,257,258,241,257],
[252,249,0,258,248,236,257,233,232,243,259,250,249,258],
[260,251,242,0,260,248,260,245,238,258,245,250,259,257],
[264,251,252,240,0,247,250,240,242,246,257,254,257,257],
[259,264,264,252,253,0,263,243,252,246,257,257,246,269],
[249,246,243,240,250,237,0,251,241,247,254,261,240,244],
[261,261,267,255,260,257,249,0,251,247,272,267,257,257],
[275,256,268,262,258,248,259,249,0,249,264,257,241,252],
[257,261,257,242,254,254,253,253,251,0,257,263,253,263],
[251,243,241,255,243,243,246,228,236,243,0,253,246,240],
[242,242,250,250,246,243,239,233,243,237,247,0,247,259],
[264,259,251,241,243,254,260,243,259,247,254,253,0,255],
[245,243,242,243,243,231,256,243,248,237,260,241,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 96, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,245,266,271,232,268,266,224,264,288,266,224,261],
[186,0,181,232,229,234,248,228,211,252,222,283,183,233],
[255,319,0,303,311,249,295,268,292,323,308,278,259,301],
[234,268,197,0,256,190,234,250,214,281,268,268,220,205],
[229,271,189,244,0,226,282,277,253,241,238,311,206,268],
[268,266,251,310,274,0,240,238,277,271,328,288,269,213],
[232,252,205,266,218,260,0,277,248,256,272,310,217,282],
[234,272,232,250,223,262,223,0,244,262,268,302,209,249],
[276,289,208,286,247,223,252,256,0,296,305,284,251,256],
[236,248,177,219,259,229,244,238,204,0,262,284,206,242],
[212,278,192,232,262,172,228,232,195,238,0,280,195,216],
[234,217,222,232,189,212,190,198,216,216,220,0,192,214],
[276,317,241,280,294,231,283,291,249,294,305,308,0,257],
[239,267,199,295,232,287,218,251,244,258,284,286,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 97, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,245,250,251,235,239,236,257,269,247,258,260,264],
[254,0,272,259,254,237,268,257,253,277,255,275,273,264],
[255,228,0,254,245,245,246,237,249,270,268,260,276,263],
[250,241,246,0,245,235,241,248,231,262,274,260,263,262],
[249,246,255,255,0,231,242,255,247,267,258,258,267,257],
[265,263,255,265,269,0,261,263,250,275,269,264,284,280],
[261,232,254,259,258,239,0,245,252,287,270,270,278,278],
[264,243,263,252,245,237,255,0,243,264,284,276,266,245],
[243,247,251,269,253,250,248,257,0,272,273,271,290,274],
[231,223,230,238,233,225,213,236,228,0,247,247,238,236],
[253,245,232,226,242,231,230,216,227,253,0,261,257,233],
[242,225,240,240,242,236,230,224,229,253,239,0,250,240],
[240,227,224,237,233,216,222,234,210,262,243,250,0,242],
[236,236,237,238,243,220,222,255,226,264,267,260,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 98, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,268,258,250,251,255,270,247,262,242,260,247,262],
[235,0,246,238,238,261,239,237,237,259,246,247,237,248],
[232,254,0,234,246,240,244,235,234,250,235,237,245,244],
[242,262,266,0,251,248,251,260,256,256,247,253,252,241],
[250,262,254,249,0,258,244,259,243,265,253,242,256,252],
[249,239,260,252,242,0,242,255,245,262,258,264,261,258],
[245,261,256,249,256,258,0,252,251,268,249,254,245,248],
[230,263,265,240,241,245,248,0,231,262,257,261,233,252],
[253,263,266,244,257,255,249,269,0,268,260,264,265,270],
[238,241,250,244,235,238,232,238,232,0,261,226,226,246],
[258,254,265,253,247,242,251,243,240,239,0,243,257,251],
[240,253,263,247,258,236,246,239,236,274,257,0,256,251],
[253,263,255,248,244,239,255,267,235,274,243,244,0,255],
[238,252,256,259,248,242,252,248,230,254,249,249,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 99, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,257,259,258,225,264,239,243,244,240,243,243,253],
[268,0,255,278,265,251,261,245,274,264,260,257,263,268],
[243,245,0,255,263,225,254,238,253,262,249,255,238,240],
[241,222,245,0,241,236,257,228,237,243,254,253,242,260],
[242,235,237,259,0,208,243,236,218,227,235,239,253,252],
[275,249,275,264,292,0,255,256,269,260,259,274,269,285],
[236,239,246,243,257,245,0,221,233,245,240,225,241,264],
[261,255,262,272,264,244,279,0,256,268,249,251,240,236],
[257,226,247,263,282,231,267,244,0,256,250,237,265,253],
[256,236,238,257,273,240,255,232,244,0,239,258,250,275],
[260,240,251,246,265,241,260,251,250,261,0,260,268,264],
[257,243,245,247,261,226,275,249,263,242,240,0,245,266],
[257,237,262,258,247,231,259,260,235,250,232,255,0,249],
[247,232,260,240,248,215,236,264,247,225,236,234,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 100, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,241,233,236,248,235,213,252,242,268,247,244,240],
[267,0,257,253,256,264,257,250,240,252,268,247,238,245],
[259,243,0,223,241,241,254,212,244,240,245,250,226,221],
[267,247,277,0,268,267,270,236,261,246,257,270,251,242],
[264,244,259,232,0,282,260,224,270,260,274,258,236,243],
[252,236,259,233,218,0,258,218,241,242,257,249,222,233],
[265,243,246,230,240,242,0,228,244,227,255,243,234,262],
[287,250,288,264,276,282,272,0,276,260,290,280,248,257],
[248,260,256,239,230,259,256,224,0,250,252,265,247,242],
[258,248,260,254,240,258,273,240,250,0,269,251,231,245],
[232,232,255,243,226,243,245,210,248,231,0,238,233,233],
[253,253,250,230,242,251,257,220,235,249,262,0,231,226],
[256,262,274,249,264,278,266,252,253,269,267,269,0,260],
[260,255,279,258,257,267,238,243,258,255,267,274,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 101, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,278,261,226,214,243,233,287,246,267,225,252,223],
[262,0,273,231,216,251,239,236,283,263,257,247,230,234],
[222,227,0,235,208,254,234,216,221,233,237,211,249,219],
[239,269,265,0,248,251,261,254,264,270,248,253,212,258],
[274,284,292,252,0,311,274,264,315,297,279,231,276,249],
[286,249,246,249,189,0,248,286,260,266,213,251,257,250],
[257,261,266,239,226,252,0,258,275,250,237,212,258,236],
[267,264,284,246,236,214,242,0,276,223,261,256,261,234],
[213,217,279,236,185,240,225,224,0,244,221,203,224,169],
[254,237,267,230,203,234,250,277,256,0,251,239,254,212],
[233,243,263,252,221,287,263,239,279,249,0,255,226,264],
[275,253,289,247,269,249,288,244,297,261,245,0,261,240],
[248,270,251,288,224,243,242,239,276,246,274,239,0,203],
[277,266,281,242,251,250,264,266,331,288,236,260,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 102, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,241,260,247,243,238,226,245,239,228,254,233,245],
[250,0,235,228,239,249,229,227,259,236,236,255,233,245],
[259,265,0,261,238,231,240,250,262,252,225,271,239,243],
[240,272,239,0,245,241,245,251,254,242,257,256,240,252],
[253,261,262,255,0,235,244,231,256,246,257,278,232,234],
[257,251,269,259,265,0,256,239,274,247,252,268,248,246],
[262,271,260,255,256,244,0,256,281,262,246,269,248,262],
[274,273,250,249,269,261,244,0,274,257,252,256,250,253],
[255,241,238,246,244,226,219,226,0,239,213,247,223,233],
[261,264,248,258,254,253,238,243,261,0,237,268,232,264],
[272,264,275,243,243,248,254,248,287,263,0,262,242,265],
[246,245,229,244,222,232,231,244,253,232,238,0,229,248],
[267,267,261,260,268,252,252,250,277,268,258,271,0,277],
[255,255,257,248,266,254,238,247,267,236,235,252,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 103, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,254,235,242,264,236,239,229,229,270,249,267,261],
[260,0,273,246,243,246,252,242,251,242,264,246,269,255],
[246,227,0,234,238,240,238,254,220,245,253,249,256,271],
[265,254,266,0,248,260,249,265,233,251,280,274,286,295],
[258,257,262,252,0,243,258,246,239,251,256,259,280,277],
[236,254,260,240,257,0,235,245,241,261,264,244,266,285],
[264,248,262,251,242,265,0,265,258,249,263,258,285,279],
[261,258,246,235,254,255,235,0,236,242,257,237,265,282],
[271,249,280,267,261,259,242,264,0,265,285,272,292,289],
[271,258,255,249,249,239,251,258,235,0,246,264,280,270],
[230,236,247,220,244,236,237,243,215,254,0,234,255,272],
[251,254,251,226,241,256,242,263,228,236,266,0,256,274],
[233,231,244,214,220,234,215,235,208,220,245,244,0,258],
[239,245,229,205,223,215,221,218,211,230,228,226,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 104, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,250,246,258,236,228,241,254,295,240,238,233,253],
[254,0,242,217,250,255,220,235,254,257,248,266,240,245],
[250,258,0,231,284,242,224,234,265,255,251,229,221,255],
[254,283,269,0,264,240,259,251,272,274,279,263,252,271],
[242,250,216,236,0,237,230,232,270,270,254,253,214,232],
[264,245,258,260,263,0,251,239,252,288,281,246,245,238],
[272,280,276,241,270,249,0,235,283,298,294,275,234,281],
[259,265,266,249,268,261,265,0,296,285,272,262,240,261],
[246,246,235,228,230,248,217,204,0,256,241,246,224,236],
[205,243,245,226,230,212,202,215,244,0,239,226,224,235],
[260,252,249,221,246,219,206,228,259,261,0,257,206,226],
[262,234,271,237,247,254,225,238,254,274,243,0,217,257],
[267,260,279,248,286,255,266,260,276,276,294,283,0,264],
[247,255,245,229,268,262,219,239,264,265,274,243,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 105, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,284,254,231,248,263,239,263,283,232,249,267,272],
[238,0,275,204,263,244,257,235,255,261,231,230,229,238],
[216,225,0,173,186,225,229,174,225,197,174,148,212,240],
[246,296,327,0,254,274,251,183,268,228,204,196,246,250],
[269,237,314,246,0,255,235,208,217,280,276,251,258,227],
[252,256,275,226,245,0,234,195,215,263,248,183,227,248],
[237,243,271,249,265,266,0,209,240,297,230,177,240,231],
[261,265,326,317,292,305,291,0,301,260,309,247,262,281],
[237,245,275,232,283,285,260,199,0,245,225,186,210,268],
[217,239,303,272,220,237,203,240,255,0,250,230,237,197],
[268,269,326,296,224,252,270,191,275,250,0,240,246,237],
[251,270,352,304,249,317,323,253,314,270,260,0,282,285],
[233,271,288,254,242,273,260,238,290,263,254,218,0,252],
[228,262,260,250,273,252,269,219,232,303,263,215,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 106, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,274,276,259,267,268,268,244,259,268,270,263,252],
[239,0,247,242,244,250,255,254,219,255,248,245,233,242],
[226,253,0,248,221,234,236,226,225,248,232,230,231,225],
[224,258,252,0,243,250,239,253,226,255,269,243,238,232],
[241,256,279,257,0,243,257,249,239,260,253,251,245,254],
[233,250,266,250,257,0,261,252,240,266,254,258,232,242],
[232,245,264,261,243,239,0,249,232,238,258,247,240,245],
[232,246,274,247,251,248,251,0,234,266,251,242,229,242],
[256,281,275,274,261,260,268,266,0,265,255,264,249,265],
[241,245,252,245,240,234,262,234,235,0,235,240,228,229],
[232,252,268,231,247,246,242,249,245,265,0,256,243,255],
[230,255,270,257,249,242,253,258,236,260,244,0,236,234],
[237,267,269,262,255,268,260,271,251,272,257,264,0,257],
[248,258,275,268,246,258,255,258,235,271,245,266,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 107, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,245,243,276,254,250,272,261,252,268,239,225,299],
[258,0,262,243,263,255,246,234,259,256,279,257,252,301],
[255,238,0,237,276,226,255,245,265,250,263,258,226,288],
[257,257,263,0,291,252,252,258,257,250,275,264,256,289],
[224,237,224,209,0,216,203,245,225,228,264,235,217,271],
[246,245,274,248,284,0,257,271,267,253,275,269,244,282],
[250,254,245,248,297,243,0,256,277,239,281,264,245,293],
[228,266,255,242,255,229,244,0,232,249,263,231,221,260],
[239,241,235,243,275,233,223,268,0,246,278,255,257,265],
[248,244,250,250,272,247,261,251,254,0,275,269,244,293],
[232,221,237,225,236,225,219,237,222,225,0,231,225,252],
[261,243,242,236,265,231,236,269,245,231,269,0,224,286],
[275,248,274,244,283,256,255,279,243,256,275,276,0,287],
[201,199,212,211,229,218,207,240,235,207,248,214,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 108, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,210,295,270,253,252,258,297,222,235,289,306,257],
[203,0,224,249,236,231,266,221,269,198,229,252,289,242],
[290,276,0,292,314,273,289,255,283,206,238,291,329,273],
[205,251,208,0,222,226,253,213,259,219,240,264,274,211],
[230,264,186,278,0,232,266,248,271,197,227,277,282,278],
[247,269,227,274,268,0,274,243,272,200,237,233,270,249],
[248,234,211,247,234,226,0,218,251,182,210,249,276,230],
[242,279,245,287,252,257,282,0,309,278,267,260,292,269],
[203,231,217,241,229,228,249,191,0,170,221,247,252,224],
[278,302,294,281,303,300,318,222,330,0,262,281,325,289],
[265,271,262,260,273,263,290,233,279,238,0,257,301,251],
[211,248,209,236,223,267,251,240,253,219,243,0,273,227],
[194,211,171,226,218,230,224,208,248,175,199,227,0,218],
[243,258,227,289,222,251,270,231,276,211,249,273,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 109, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,205,239,229,230,236,218,210,229,213,218,215,224],
[267,0,251,265,250,272,268,240,235,270,228,233,234,265],
[295,249,0,251,263,273,268,257,252,265,236,263,249,277],
[261,235,249,0,253,266,239,251,204,248,239,245,245,248],
[271,250,237,247,0,278,268,254,209,252,226,243,250,275],
[270,228,227,234,222,0,247,227,223,250,238,247,249,261],
[264,232,232,261,232,253,0,223,224,280,213,255,244,264],
[282,260,243,249,246,273,277,0,222,251,239,243,237,254],
[290,265,248,296,291,277,276,278,0,258,261,266,271,277],
[271,230,235,252,248,250,220,249,242,0,218,232,240,241],
[287,272,264,261,274,262,287,261,239,282,0,258,252,278],
[282,267,237,255,257,253,245,257,234,268,242,0,253,288],
[285,266,251,255,250,251,256,263,229,260,248,247,0,264],
[276,235,223,252,225,239,236,246,223,259,222,212,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 110, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,201,187,295,189,203,261,293,228,275,343,244,233],
[317,0,259,168,286,335,229,314,290,334,338,348,299,292],
[299,241,0,226,270,313,232,236,259,310,310,344,276,247],
[313,332,274,0,314,280,247,298,308,362,311,328,335,282],
[205,214,230,186,0,256,277,165,240,181,240,310,195,211],
[311,165,187,220,244,0,228,237,267,332,259,372,247,214],
[297,271,268,253,223,272,0,274,319,275,257,330,255,224],
[239,186,264,202,335,263,226,0,233,307,288,334,270,234],
[207,210,241,192,260,233,181,267,0,224,273,318,256,280],
[272,166,190,138,319,168,225,193,276,0,271,340,263,196],
[225,162,190,189,260,241,243,212,227,229,0,290,228,183],
[157,152,156,172,190,128,170,166,182,160,210,0,146,174],
[256,201,224,165,305,253,245,230,244,237,272,354,0,140],
[267,208,253,218,289,286,276,266,220,304,317,326,360,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 111, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,216,231,246,224,215,220,224,245,207,229,205,221],
[284,0,246,214,260,228,249,248,229,213,232,241,247,241],
[284,254,0,257,265,262,260,250,223,280,270,247,277,259],
[269,286,243,0,266,211,246,225,238,266,241,255,246,240],
[254,240,235,234,0,221,250,242,246,281,224,253,231,248],
[276,272,238,289,279,0,270,243,249,286,237,251,267,220],
[285,251,240,254,250,230,0,236,197,264,233,249,253,239],
[280,252,250,275,258,257,264,0,254,288,276,281,268,229],
[276,271,277,262,254,251,303,246,0,308,268,259,275,260],
[255,287,220,234,219,214,236,212,192,0,252,246,250,247],
[293,268,230,259,276,263,267,224,232,248,0,261,231,262],
[271,259,253,245,247,249,251,219,241,254,239,0,243,234],
[295,253,223,254,269,233,247,232,225,250,269,257,0,243],
[279,259,241,260,252,280,261,271,240,253,238,266,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 112, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,272,254,267,265,276,246,251,252,263,243,255,251],
[247,0,272,250,267,270,269,245,268,267,263,238,255,253],
[228,228,0,252,248,254,259,249,247,229,250,234,244,254],
[246,250,248,0,253,253,249,236,261,257,263,223,261,233],
[233,233,252,247,0,239,254,220,239,243,238,231,242,236],
[235,230,246,247,261,0,265,233,269,246,239,231,247,253],
[224,231,241,251,246,235,0,226,261,243,250,225,261,232],
[254,255,251,264,280,267,274,0,260,257,275,262,250,266],
[249,232,253,239,261,231,239,240,0,243,263,237,248,257],
[248,233,271,243,257,254,257,243,257,0,264,236,240,238],
[237,237,250,237,262,261,250,225,237,236,0,226,242,241],
[257,262,266,277,269,269,275,238,263,264,274,0,256,267],
[245,245,256,239,258,253,239,250,252,260,258,244,0,251],
[249,247,246,267,264,247,268,234,243,262,259,233,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 113, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,234,229,217,257,233,224,245,217,236,217,218,250],
[277,0,265,257,246,259,239,236,265,252,261,254,248,267],
[266,235,0,259,218,261,246,227,227,202,250,211,229,256],
[271,243,241,0,223,242,225,231,235,221,257,237,238,242],
[283,254,282,277,0,264,280,258,256,244,269,269,275,264],
[243,241,239,258,236,0,259,230,258,220,241,231,243,258],
[267,261,254,275,220,241,0,224,256,232,254,248,260,254],
[276,264,273,269,242,270,276,0,276,234,268,248,272,280],
[255,235,273,265,244,242,244,224,0,240,254,250,256,234],
[283,248,298,279,256,280,268,266,260,0,276,260,271,266],
[264,239,250,243,231,259,246,232,246,224,0,233,237,250],
[283,246,289,263,231,269,252,252,250,240,267,0,252,269],
[282,252,271,262,225,257,240,228,244,229,263,248,0,264],
[250,233,244,258,236,242,246,220,266,234,250,231,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 114, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,146,163,179,156,178,130,189,171,278,253,260,166],
[298,0,226,244,267,252,267,211,266,208,341,324,318,272],
[354,274,0,213,196,229,198,245,261,240,366,316,292,273],
[337,256,287,0,253,251,252,240,283,334,400,313,400,372],
[321,233,304,247,0,259,205,237,309,281,351,321,287,296],
[344,248,271,249,241,0,217,229,243,199,316,325,286,303],
[322,233,302,248,295,283,0,240,290,329,341,339,345,296],
[370,289,255,260,263,271,260,0,200,230,307,365,339,366],
[311,234,239,217,191,257,210,300,0,195,297,313,367,265],
[329,292,260,166,219,301,171,270,305,0,271,303,347,278],
[222,159,134,100,149,184,159,193,203,229,0,324,251,236],
[247,176,184,187,179,175,161,135,187,197,176,0,237,199],
[240,182,208,100,213,214,155,161,133,153,249,263,0,218],
[334,228,227,128,204,197,204,134,235,222,264,301,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 115, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,218,262,262,234,229,254,248,239,247,256,254,225],
[268,0,241,254,246,245,249,260,255,257,266,247,266,255],
[282,259,0,280,242,257,248,263,278,294,276,264,282,273],
[238,246,220,0,231,220,233,233,240,248,238,227,246,215],
[238,254,258,269,0,231,236,262,241,253,248,236,291,239],
[266,255,243,280,269,0,246,266,260,257,273,258,287,272],
[271,251,252,267,264,254,0,257,261,269,260,247,276,251],
[246,240,237,267,238,234,243,0,252,244,263,228,258,236],
[252,245,222,260,259,240,239,248,0,253,270,249,280,236],
[261,243,206,252,247,243,231,256,247,0,259,239,248,223],
[253,234,224,262,252,227,240,237,230,241,0,234,271,234],
[244,253,236,273,264,242,253,272,251,261,266,0,269,243],
[246,234,218,254,209,213,224,242,220,252,229,231,0,196],
[275,245,227,285,261,228,249,264,264,277,266,257,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 116, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,324,276,201,285,225,265,268,215,238,290,173,307,256],
[176,0,241,191,202,163,201,180,163,234,191,169,206,163],
[224,259,0,188,273,267,227,202,230,260,216,253,258,273],
[299,309,312,0,409,308,250,272,293,285,373,312,402,338],
[215,298,227,91,0,218,179,169,168,185,268,200,210,222],
[275,337,233,192,282,0,228,227,299,285,270,254,286,308],
[235,299,273,250,321,272,0,246,225,263,323,221,319,306],
[232,320,298,228,331,273,254,0,262,344,399,307,304,333],
[285,337,270,207,332,201,275,238,0,240,310,281,346,337],
[262,266,240,215,315,215,237,156,260,0,261,185,263,301],
[210,309,284,127,232,230,177,101,190,239,0,140,313,298],
[327,331,247,188,300,246,279,193,219,315,360,0,264,288],
[193,294,242,98,290,214,181,196,154,237,187,236,0,206],
[244,337,227,162,278,192,194,167,163,199,202,212,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 117, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,245,219,253,220,251,234,251,249,232,213,236,242],
[250,0,248,252,281,237,271,254,274,242,239,227,241,256],
[255,252,0,230,266,244,269,239,283,240,228,234,246,237],
[281,248,270,0,272,254,255,253,289,248,249,250,234,266],
[247,219,234,228,0,229,261,241,264,235,214,211,228,252],
[280,263,256,246,271,0,271,270,282,261,259,238,240,270],
[249,229,231,245,239,229,0,247,267,233,235,224,251,258],
[266,246,261,247,259,230,253,0,260,231,219,230,252,265],
[249,226,217,211,236,218,233,240,0,224,208,208,218,240],
[251,258,260,252,265,239,267,269,276,0,239,236,261,254],
[268,261,272,251,286,241,265,281,292,261,0,248,263,278],
[287,273,266,250,289,262,276,270,292,264,252,0,275,262],
[264,259,254,266,272,260,249,248,282,239,237,225,0,242],
[258,244,263,234,248,230,242,235,260,246,222,238,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 118, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,245,213,279,272,228,255,244,202,241,227,224,191],
[254,0,225,239,278,234,235,274,248,243,229,222,229,219],
[255,275,0,223,259,247,242,246,241,264,230,226,232,247],
[287,261,277,0,286,282,265,295,267,275,309,241,264,283],
[221,222,241,214,0,260,192,250,204,200,241,237,224,198],
[228,266,253,218,240,0,225,276,233,229,228,187,219,241],
[272,265,258,235,308,275,0,266,227,262,220,228,227,208],
[245,226,254,205,250,224,234,0,211,216,223,205,216,202],
[256,252,259,233,296,267,273,289,0,225,210,200,259,249],
[298,257,236,225,300,271,238,284,275,0,286,240,232,220],
[259,271,270,191,259,272,280,277,290,214,0,252,288,244],
[273,278,274,259,263,313,272,295,300,260,248,0,252,256],
[276,271,268,236,276,281,273,284,241,268,212,248,0,273],
[309,281,253,217,302,259,292,298,251,280,256,244,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 119, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,239,236,234,189,232,261,199,215,196,279,276,240],
[256,0,298,265,300,229,221,266,267,232,269,315,265,284],
[261,202,0,230,249,190,187,192,194,227,195,225,233,226],
[264,235,270,0,257,183,173,259,293,252,241,331,305,323],
[266,200,251,243,0,136,250,185,185,227,190,192,232,260],
[311,271,310,317,364,0,250,348,280,301,279,277,383,321],
[268,279,313,327,250,250,0,279,230,256,251,252,358,299],
[239,234,308,241,315,152,221,0,189,206,162,203,354,257],
[301,233,306,207,315,220,270,311,0,283,238,282,293,210],
[285,268,273,248,273,199,244,294,217,0,189,225,249,283],
[304,231,305,259,310,221,249,338,262,311,0,274,352,262],
[221,185,275,169,308,223,248,297,218,275,226,0,259,214],
[224,235,267,195,268,117,142,146,207,251,148,241,0,209],
[260,216,274,177,240,179,201,243,290,217,238,286,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 120, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,270,265,256,281,254,265,256,244,246,253,251,256],
[221,0,235,257,240,239,230,221,235,224,223,239,233,242],
[230,265,0,258,254,258,239,238,226,232,227,241,240,230],
[235,243,242,0,244,245,238,240,245,220,224,230,232,246],
[244,260,246,256,0,240,239,248,247,242,235,251,245,236],
[219,261,242,255,260,0,237,250,247,242,233,251,243,242],
[246,270,261,262,261,263,0,247,254,233,249,262,249,238],
[235,279,262,260,252,250,253,0,249,258,245,247,253,254],
[244,265,274,255,253,253,246,251,0,244,236,242,243,236],
[256,276,268,280,258,258,267,242,256,0,244,274,260,257],
[254,277,273,276,265,267,251,255,264,256,0,248,250,260],
[247,261,259,270,249,249,238,253,258,226,252,0,249,258],
[249,267,260,268,255,257,251,247,257,240,250,251,0,253],
[244,258,270,254,264,258,262,246,264,243,240,242,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 121, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,246,261,253,270,275,269,242,277,258,254,279,262],
[246,0,252,248,232,239,255,241,233,243,239,239,250,252],
[254,248,0,241,236,237,233,239,243,236,249,257,260,241],
[239,252,259,0,254,248,250,239,239,262,255,254,258,249],
[247,268,264,246,0,259,266,251,252,253,252,266,250,247],
[230,261,263,252,241,0,260,237,247,248,241,259,245,247],
[225,245,267,250,234,240,0,256,236,228,244,251,245,238],
[231,259,261,261,249,263,244,0,259,244,271,256,258,253],
[258,267,257,261,248,253,264,241,0,254,257,255,249,240],
[223,257,264,238,247,252,272,256,246,0,247,256,246,246],
[242,261,251,245,248,259,256,229,243,253,0,240,254,251],
[246,261,243,246,234,241,249,244,245,244,260,0,245,248],
[221,250,240,242,250,255,255,242,251,254,246,255,0,231],
[238,248,259,251,253,253,262,247,260,254,249,252,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 122, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,243,231,243,219,236,233,243,245,212,219,231,213],
[243,0,216,254,245,232,232,247,248,232,228,233,242,214],
[257,284,0,239,254,215,231,250,254,252,230,217,259,246],
[269,246,261,0,265,275,249,228,262,212,231,258,251,242],
[257,255,246,235,0,258,251,262,263,244,202,213,217,219],
[281,268,285,225,242,0,245,242,250,266,263,233,241,231],
[264,268,269,251,249,255,0,279,299,262,268,252,249,217],
[267,253,250,272,238,258,221,0,268,222,189,236,229,260],
[257,252,246,238,237,250,201,232,0,251,227,214,213,228],
[255,268,248,288,256,234,238,278,249,0,245,216,247,257],
[288,272,270,269,298,237,232,311,273,255,0,231,229,276],
[281,267,283,242,287,267,248,264,286,284,269,0,260,264],
[269,258,241,249,283,259,251,271,287,253,271,240,0,244],
[287,286,254,258,281,269,283,240,272,243,224,236,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 123, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,240,245,221,245,222,245,229,243,263,234,260,241],
[244,0,255,243,228,254,251,236,235,236,264,259,264,240],
[260,245,0,265,242,279,250,254,254,256,265,255,270,243],
[255,257,235,0,249,242,236,229,226,245,268,233,253,241],
[279,272,258,251,0,253,233,258,247,256,251,255,260,237],
[255,246,221,258,247,0,253,241,233,234,268,239,255,229],
[278,249,250,264,267,247,0,250,262,256,269,266,267,232],
[255,264,246,271,242,259,250,0,252,240,249,271,275,233],
[271,265,246,274,253,267,238,248,0,246,258,255,268,260],
[257,264,244,255,244,266,244,260,254,0,264,250,251,233],
[237,236,235,232,249,232,231,251,242,236,0,242,237,218],
[266,241,245,267,245,261,234,229,245,250,258,0,249,221],
[240,236,230,247,240,245,233,225,232,249,263,251,0,234],
[259,260,257,259,263,271,268,267,240,267,282,279,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 124, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,244,247,214,251,234,231,221,230,222,207,286,228],
[274,0,277,283,282,287,261,246,260,305,249,235,287,282],
[256,223,0,259,219,239,243,225,241,248,229,182,249,227],
[253,217,241,0,226,267,240,228,257,265,211,232,282,246],
[286,218,281,274,0,269,266,260,269,291,235,240,289,251],
[249,213,261,233,231,0,239,214,239,256,204,195,246,224],
[266,239,257,260,234,261,0,235,253,299,226,235,311,252],
[269,254,275,272,240,286,265,0,302,308,260,271,302,258],
[279,240,259,243,231,261,247,198,0,275,227,242,265,251],
[270,195,252,235,209,244,201,192,225,0,192,215,231,238],
[278,251,271,289,265,296,274,240,273,308,0,283,285,271],
[293,265,318,268,260,305,265,229,258,285,217,0,265,266],
[214,213,251,218,211,254,189,198,235,269,215,235,0,252],
[272,218,273,254,249,276,248,242,249,262,229,234,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 125, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,257,255,264,236,240,260,240,242,235,239,250,277],
[248,0,240,256,236,245,248,247,276,255,259,232,244,261],
[243,260,0,271,259,236,275,251,269,250,249,261,264,269],
[245,244,229,0,237,244,247,214,253,250,227,233,248,247],
[236,264,241,263,0,231,243,244,254,266,237,237,241,253],
[264,255,264,256,269,0,271,256,284,253,272,238,241,280],
[260,252,225,253,257,229,0,231,253,233,234,247,229,269],
[240,253,249,286,256,244,269,0,257,255,273,232,238,260],
[260,224,231,247,246,216,247,243,0,231,250,216,225,246],
[258,245,250,250,234,247,267,245,269,0,238,259,245,255],
[265,241,251,273,263,228,266,227,250,262,0,231,244,264],
[261,268,239,267,263,262,253,268,284,241,269,0,273,261],
[250,256,236,252,259,259,271,262,275,255,256,227,0,263],
[223,239,231,253,247,220,231,240,254,245,236,239,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 126, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,211,329,344,337,219,267,219,275,219,133,267,211],
[241,0,374,436,451,444,382,374,382,382,382,277,374,277],
[289,126,0,159,252,337,234,290,245,301,219,118,175,78],
[171,64,341,0,341,326,382,382,275,382,275,207,382,193],
[156,49,248,159,0,141,248,304,219,105,141,49,197,156],
[163,56,163,174,359,0,212,204,183,290,275,0,282,107],
[281,118,266,118,252,288,0,134,293,301,178,118,293,78],
[233,126,210,118,196,296,366,0,337,245,219,118,385,0],
[281,118,255,225,281,317,207,163,0,330,100,107,255,107],
[225,118,199,118,395,210,199,255,170,0,92,0,148,107],
[281,118,281,225,359,225,322,281,400,408,0,225,322,225],
[367,223,382,293,451,500,382,382,393,500,275,0,374,234],
[233,126,325,118,303,218,207,115,245,352,178,126,0,115],
[289,223,422,307,344,393,422,500,393,393,275,266,385,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 127, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,255,241,242,229,234,247,248,257,250,255,247,244],
[232,0,240,223,231,248,225,238,239,239,253,233,248,232],
[245,260,0,247,234,235,240,247,248,264,243,250,251,249],
[259,277,253,0,249,243,252,242,240,260,271,245,251,267],
[258,269,266,251,0,255,242,252,264,253,251,235,246,249],
[271,252,265,257,245,0,238,258,232,262,270,261,258,274],
[266,275,260,248,258,262,0,256,246,271,257,262,247,253],
[253,262,253,258,248,242,244,0,250,256,248,253,253,249],
[252,261,252,260,236,268,254,250,0,252,271,253,267,243],
[243,261,236,240,247,238,229,244,248,0,259,247,244,236],
[250,247,257,229,249,230,243,252,229,241,0,247,236,257],
[245,267,250,255,265,239,238,247,247,253,253,0,239,251],
[253,252,249,249,254,242,253,247,233,256,264,261,0,260],
[256,268,251,233,251,226,247,251,257,264,243,249,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 128, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,258,238,252,270,259,275,254,267,261,255,291,263],
[229,0,250,250,253,266,247,232,258,264,240,252,268,250],
[242,250,0,244,253,244,262,240,255,263,240,258,255,258],
[262,250,256,0,246,258,255,243,271,256,239,253,274,247],
[248,247,247,254,0,243,254,249,255,241,236,261,280,263],
[230,234,256,242,257,0,256,226,249,268,257,237,272,243],
[241,253,238,245,246,244,0,245,235,248,230,243,265,232],
[225,268,260,257,251,274,255,0,258,274,235,250,257,267],
[246,242,245,229,245,251,265,242,0,257,243,253,264,254],
[233,236,237,244,259,232,252,226,243,0,234,246,261,244],
[239,260,260,261,264,243,270,265,257,266,0,264,264,258],
[245,248,242,247,239,263,257,250,247,254,236,0,267,255],
[209,232,245,226,220,228,235,243,236,239,236,233,0,241],
[237,250,242,253,237,257,268,233,246,256,242,245,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 129, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,251,232,261,238,248,248,245,258,257,250,264,264],
[270,0,244,256,235,249,252,254,227,266,239,265,248,256],
[249,256,0,250,241,252,247,259,252,256,259,251,251,259],
[268,244,250,0,249,256,262,256,240,260,254,257,272,255],
[239,265,259,251,0,256,259,264,247,263,245,241,258,246],
[262,251,248,244,244,0,254,240,242,263,243,270,267,253],
[252,248,253,238,241,246,0,248,230,268,253,254,268,251],
[252,246,241,244,236,260,252,0,241,257,237,251,263,239],
[255,273,248,260,253,258,270,259,0,271,249,266,265,268],
[242,234,244,240,237,237,232,243,229,0,234,230,249,242],
[243,261,241,246,255,257,247,263,251,266,0,254,260,263],
[250,235,249,243,259,230,246,249,234,270,246,0,261,245],
[236,252,249,228,242,233,232,237,235,251,240,239,0,243],
[236,244,241,245,254,247,249,261,232,258,237,255,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 130, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,236,252,250,264,261,264,259,247,253,255,255,241],
[255,0,253,234,256,260,257,245,249,252,248,255,253,255],
[264,247,0,251,261,265,255,255,265,249,254,259,265,251],
[248,266,249,0,260,274,244,246,254,257,256,251,276,264],
[250,244,239,240,0,259,248,244,256,241,236,228,252,243],
[236,240,235,226,241,0,251,249,253,238,245,241,253,226],
[239,243,245,256,252,249,0,245,245,242,240,242,264,247],
[236,255,245,254,256,251,255,0,262,251,253,249,259,267],
[241,251,235,246,244,247,255,238,0,229,242,244,270,236],
[253,248,251,243,259,262,258,249,271,0,247,243,265,246],
[247,252,246,244,264,255,260,247,258,253,0,249,264,246],
[245,245,241,249,272,259,258,251,256,257,251,0,263,260],
[245,247,235,224,248,247,236,241,230,235,236,237,0,239],
[259,245,249,236,257,274,253,233,264,254,254,240,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 131, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,255,226,250,241,255,240,243,233,236,237,248,223],
[269,0,249,219,247,267,245,250,246,259,257,227,273,218],
[245,251,0,240,242,253,239,239,248,241,239,239,260,242],
[274,281,260,0,255,247,269,239,251,275,266,267,266,240],
[250,253,258,245,0,266,251,243,244,231,245,250,272,244],
[259,233,247,253,234,0,246,245,219,254,254,245,247,226],
[245,255,261,231,249,254,0,234,258,234,256,253,268,224],
[260,250,261,261,257,255,266,0,258,296,259,259,254,254],
[257,254,252,249,256,281,242,242,0,261,255,257,274,231],
[267,241,259,225,269,246,266,204,239,0,252,246,260,213],
[264,243,261,234,255,246,244,241,245,248,0,271,256,223],
[263,273,261,233,250,255,247,241,243,254,229,0,254,239],
[252,227,240,234,228,253,232,246,226,240,244,246,0,230],
[277,282,258,260,256,274,276,246,269,287,277,261,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 132, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,278,279,254,255,264,242,265,261,274,259,256,269],
[255,0,241,260,236,210,239,218,238,238,248,213,235,230],
[222,259,0,258,232,235,237,231,245,251,259,251,215,245],
[221,240,242,0,218,222,248,219,253,233,258,237,229,242],
[246,264,268,282,0,241,251,239,274,258,248,245,246,259],
[245,290,265,278,259,0,266,256,276,277,286,265,266,273],
[236,261,263,252,249,234,0,242,260,227,259,244,233,270],
[258,282,269,281,261,244,258,0,248,252,284,250,241,280],
[235,262,255,247,226,224,240,252,0,236,272,235,225,241],
[239,262,249,267,242,223,273,248,264,0,256,238,238,260],
[226,252,241,242,252,214,241,216,228,244,0,223,232,251],
[241,287,249,263,255,235,256,250,265,262,277,0,240,248],
[244,265,285,271,254,234,267,259,275,262,268,260,0,258],
[231,270,255,258,241,227,230,220,259,240,249,252,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 133, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,229,287,276,251,229,237,252,274,270,248,262,226],
[254,0,195,261,250,176,233,183,263,266,216,223,224,264],
[271,305,0,289,323,245,265,263,288,310,274,243,361,261],
[213,239,211,0,272,239,263,233,248,262,224,213,224,212],
[224,250,177,228,0,216,228,219,222,263,224,212,281,229],
[249,324,255,261,284,0,251,265,294,310,235,266,231,268],
[271,267,235,237,272,249,0,265,306,274,284,270,297,243],
[263,317,237,267,281,235,235,0,300,290,268,238,225,234],
[248,237,212,252,278,206,194,200,0,254,243,213,263,227],
[226,234,190,238,237,190,226,210,246,0,264,251,229,251],
[230,284,226,276,276,265,216,232,257,236,0,235,263,209],
[252,277,257,287,288,234,230,262,287,249,265,0,231,264],
[238,276,139,276,219,269,203,275,237,271,237,269,0,255],
[274,236,239,288,271,232,257,266,273,249,291,236,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 134, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,246,263,246,263,259,265,257,271,251,270,251,248],
[222,0,226,221,223,221,244,217,230,239,242,236,215,228],
[254,274,0,260,241,240,246,244,263,238,263,248,233,236],
[237,279,240,0,232,237,243,246,247,283,248,248,233,230],
[254,277,259,268,0,243,249,262,255,258,270,238,231,234],
[237,279,260,263,257,0,267,267,257,265,273,252,256,248],
[241,256,254,257,251,233,0,244,260,281,282,250,241,226],
[235,283,256,254,238,233,256,0,261,273,253,261,245,239],
[243,270,237,253,245,243,240,239,0,250,264,255,245,246],
[229,261,262,217,242,235,219,227,250,0,240,248,211,239],
[249,258,237,252,230,227,218,247,236,260,0,259,242,233],
[230,264,252,252,262,248,250,239,245,252,241,0,235,266],
[249,285,267,267,269,244,259,255,255,289,258,265,0,239],
[252,272,264,270,266,252,274,261,254,261,267,234,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 135, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,234,277,224,273,237,218,199,199,232,212,228,253],
[275,0,264,262,284,299,256,234,269,248,251,247,272,276],
[266,236,0,237,253,278,277,205,248,254,289,234,248,256],
[223,238,263,0,249,232,246,230,236,231,255,212,257,211],
[276,216,247,251,0,272,264,235,251,214,266,251,244,275],
[227,201,222,268,228,0,262,211,192,192,240,249,259,261],
[263,244,223,254,236,238,0,206,245,225,270,237,245,226],
[282,266,295,270,265,289,294,0,246,247,298,260,278,270],
[301,231,252,264,249,308,255,254,0,266,300,243,258,254],
[301,252,246,269,286,308,275,253,234,0,283,264,277,248],
[268,249,211,245,234,260,230,202,200,217,0,217,216,206],
[288,253,266,288,249,251,263,240,257,236,283,0,281,293],
[272,228,252,243,256,241,255,222,242,223,284,219,0,266],
[247,224,244,289,225,239,274,230,246,252,294,207,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 136, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,254,269,232,277,270,270,263,285,275,249,246,265],
[264,0,249,272,263,264,281,276,254,290,291,259,249,273],
[246,251,0,255,219,265,255,264,253,266,268,250,251,259],
[231,228,245,0,233,257,259,249,245,272,259,251,249,250],
[268,237,281,267,0,253,261,272,242,290,253,269,259,270],
[223,236,235,243,247,0,260,261,246,260,251,240,242,243],
[230,219,245,241,239,240,0,260,218,257,252,251,265,267],
[230,224,236,251,228,239,240,0,230,257,244,234,236,247],
[237,246,247,255,258,254,282,270,0,265,261,264,251,268],
[215,210,234,228,210,240,243,243,235,0,247,230,217,235],
[225,209,232,241,247,249,248,256,239,253,0,233,232,241],
[251,241,250,249,231,260,249,266,236,270,267,0,278,269],
[254,251,249,251,241,258,235,264,249,283,268,222,0,265],
[235,227,241,250,230,257,233,253,232,265,259,231,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 137, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,223,229,198,237,240,229,207,212,232,188,226,223],
[273,0,233,245,243,255,253,226,260,231,228,232,257,238],
[277,267,0,247,245,249,270,256,256,242,242,234,261,226],
[271,255,253,0,240,273,290,247,264,245,260,249,259,274],
[302,257,255,260,0,249,267,248,261,249,269,254,253,248],
[263,245,251,227,251,0,267,239,238,217,264,226,235,239],
[260,247,230,210,233,233,0,226,225,211,273,219,229,229],
[271,274,244,253,252,261,274,0,260,243,239,243,238,268],
[293,240,244,236,239,262,275,240,0,248,271,250,251,241],
[288,269,258,255,251,283,289,257,252,0,260,246,265,248],
[268,272,258,240,231,236,227,261,229,240,0,249,272,251],
[312,268,266,251,246,274,281,257,250,254,251,0,271,241],
[274,243,239,241,247,265,271,262,249,235,228,229,0,240],
[277,262,274,226,252,261,271,232,259,252,249,259,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 138, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,249,262,239,230,238,243,241,222,255,253,247,241],
[256,0,258,265,270,242,261,268,247,256,264,242,267,259],
[251,242,0,270,264,252,233,249,226,231,250,233,234,246],
[238,235,230,0,235,231,235,236,214,220,249,250,224,237],
[261,230,236,265,0,240,241,244,239,246,255,257,240,247],
[270,258,248,269,260,0,255,254,251,258,284,262,261,260],
[262,239,267,265,259,245,0,256,243,250,259,241,252,265],
[257,232,251,264,256,246,244,0,235,245,261,254,252,253],
[259,253,274,286,261,249,257,265,0,245,274,255,268,267],
[278,244,269,280,254,242,250,255,255,0,259,256,281,265],
[245,236,250,251,245,216,241,239,226,241,0,237,235,248],
[247,258,267,250,243,238,259,246,245,244,263,0,246,261],
[253,233,266,276,260,239,248,248,232,219,265,254,0,257],
[259,241,254,263,253,240,235,247,233,235,252,239,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 139, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,242,239,219,254,272,225,214,230,271,273,228,222],
[273,0,242,246,244,256,271,244,223,244,263,315,222,236],
[258,258,0,250,256,230,280,238,207,221,257,322,233,210],
[261,254,250,0,232,235,294,242,230,232,228,294,243,207],
[281,256,244,268,0,288,262,235,206,263,244,274,238,235],
[246,244,270,265,212,0,269,217,239,257,264,314,239,220],
[228,229,220,206,238,231,0,231,214,256,234,307,210,246],
[275,256,262,258,265,283,269,0,222,239,261,297,287,233],
[286,277,293,270,294,261,286,278,0,295,290,328,271,240],
[270,256,279,268,237,243,244,261,205,0,262,290,214,237],
[229,237,243,272,256,236,266,239,210,238,0,287,246,222],
[227,185,178,206,226,186,193,203,172,210,213,0,180,190],
[272,278,267,257,262,261,290,213,229,286,254,320,0,252],
[278,264,290,293,265,280,254,267,260,263,278,310,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 140, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,323,189,366,323,323,500,323,366,323,500,252,323],
[0,0,2,2,179,118,2,179,252,295,207,136,136,118],
[177,498,0,118,248,323,187,366,323,293,207,500,136,189],
[311,498,382,0,382,321,205,382,498,427,205,382,311,323],
[134,321,252,118,0,323,250,429,252,250,207,252,136,323],
[177,382,177,179,177,0,177,177,427,293,382,311,313,366],
[177,498,313,295,250,323,0,384,500,295,384,500,313,189],
[0,321,134,118,71,323,116,0,323,116,207,252,136,189],
[177,248,177,2,248,73,0,177,0,177,205,313,313,73],
[134,205,207,73,250,207,205,384,323,0,207,207,136,207],
[177,293,293,295,293,118,116,293,295,293,0,429,295,118],
[0,364,0,118,248,189,0,248,187,293,71,0,2,189],
[248,364,364,189,364,187,187,364,187,364,205,498,0,189],
[177,382,311,177,177,134,311,311,427,293,382,311,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 141, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,246,225,164,183,213,167,270,156,260,237,205,274],
[227,0,321,333,190,286,202,209,233,128,266,172,197,300],
[254,179,0,278,189,306,259,173,284,185,255,222,210,295],
[275,167,222,0,166,175,152,92,197,122,146,131,123,212],
[336,310,311,334,0,292,232,281,322,231,296,254,205,294],
[317,214,194,325,208,0,222,235,248,184,265,247,193,330],
[287,298,241,348,268,278,0,252,174,223,261,247,197,344],
[333,291,327,408,219,265,248,0,335,245,358,291,270,283],
[230,267,216,303,178,252,326,165,0,217,205,228,211,376],
[344,372,315,378,269,316,277,255,283,0,290,278,208,322],
[240,234,245,354,204,235,239,142,295,210,0,240,138,293],
[263,328,278,369,246,253,253,209,272,222,260,0,264,378],
[295,303,290,377,295,307,303,230,289,292,362,236,0,357],
[226,200,205,288,206,170,156,217,124,178,207,122,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 142, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,246,237,263,253,240,249,265,245,239,260,246,220],
[266,0,240,264,263,259,247,292,260,263,246,247,258,246],
[254,260,0,257,264,238,249,274,267,244,246,267,259,252],
[263,236,243,0,253,232,236,247,252,231,254,237,254,234],
[237,237,236,247,0,241,226,260,257,237,240,250,257,220],
[247,241,262,268,259,0,241,266,253,242,264,259,269,227],
[260,253,251,264,274,259,0,278,289,259,262,288,287,250],
[251,208,226,253,240,234,222,0,247,228,234,240,235,235],
[235,240,233,248,243,247,211,253,0,245,238,243,240,224],
[255,237,256,269,263,258,241,272,255,0,256,268,260,231],
[261,254,254,246,260,236,238,266,262,244,0,247,242,231],
[240,253,233,263,250,241,212,260,257,232,253,0,227,238],
[254,242,241,246,243,231,213,265,260,240,258,273,0,226],
[280,254,248,266,280,273,250,265,276,269,269,262,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 143, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,248,224,231,227,233,238,236,244,199,236,229,228],
[295,0,256,268,242,246,279,279,264,273,245,264,277,261],
[252,244,0,247,233,219,254,251,246,255,237,241,254,237],
[276,232,253,0,241,239,260,250,262,272,244,249,251,243],
[269,258,267,259,0,252,250,251,265,253,238,239,274,243],
[273,254,281,261,248,0,269,270,273,268,249,284,261,269],
[267,221,246,240,250,231,0,213,272,238,232,254,257,261],
[262,221,249,250,249,230,287,0,251,260,263,259,269,244],
[264,236,254,238,235,227,228,249,0,242,240,244,243,239],
[256,227,245,228,247,232,262,240,258,0,242,243,258,248],
[301,255,263,256,262,251,268,237,260,258,0,250,286,243],
[264,236,259,251,261,216,246,241,256,257,250,0,264,231],
[271,223,246,249,226,239,243,231,257,242,214,236,0,224],
[272,239,263,257,257,231,239,256,261,252,257,269,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 144, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,256,271,283,260,245,247,257,262,255,258,245,258],
[247,0,241,241,240,246,256,241,255,257,233,233,253,230],
[244,259,0,258,247,257,247,242,255,255,242,247,244,241],
[229,259,242,0,262,247,246,232,241,255,244,256,263,241],
[217,260,253,238,0,240,233,240,247,245,246,250,245,212],
[240,254,243,253,260,0,251,244,247,262,233,254,240,241],
[255,244,253,254,267,249,0,252,246,241,240,250,240,240],
[253,259,258,268,260,256,248,0,254,249,251,249,249,232],
[243,245,245,259,253,253,254,246,0,258,243,244,250,223],
[238,243,245,245,255,238,259,251,242,0,226,244,240,253],
[245,267,258,256,254,267,260,249,257,274,0,250,260,247],
[242,267,253,244,250,246,250,251,256,256,250,0,254,236],
[255,247,256,237,255,260,260,251,250,260,240,246,0,242],
[242,270,259,259,288,259,260,268,277,247,253,264,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 145, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,224,238,262,243,240,250,227,241,254,248,245,233],
[252,0,233,235,267,253,243,258,249,252,242,242,241,240],
[276,267,0,255,261,254,270,247,258,265,281,253,246,255],
[262,265,245,0,265,257,245,270,247,263,257,259,256,247],
[238,233,239,235,0,231,235,242,234,251,241,225,226,234],
[257,247,246,243,269,0,259,257,260,260,255,249,244,255],
[260,257,230,255,265,241,0,263,240,261,262,254,251,259],
[250,242,253,230,258,243,237,0,229,248,264,244,247,241],
[273,251,242,253,266,240,260,271,0,254,262,254,254,234],
[259,248,235,237,249,240,239,252,246,0,243,238,243,256],
[246,258,219,243,259,245,238,236,238,257,0,240,245,240],
[252,258,247,241,275,251,246,256,246,262,260,0,242,246],
[255,259,254,244,274,256,249,253,246,257,255,258,0,244],
[267,260,245,253,266,245,241,259,266,244,260,254,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 146, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,232,247,267,242,250,253,261,240,241,240,240,250],
[268,0,231,230,277,233,247,244,260,250,253,248,241,266],
[268,269,0,246,282,253,255,262,276,263,262,257,261,275],
[253,270,254,0,266,253,255,262,266,249,253,244,262,264],
[233,223,218,234,0,222,241,241,251,234,223,231,231,253],
[258,267,247,247,278,0,247,276,258,269,263,257,249,268],
[250,253,245,245,259,253,0,271,256,256,257,246,251,264],
[247,256,238,238,259,224,229,0,241,233,241,228,247,251],
[239,240,224,234,249,242,244,259,0,240,248,240,243,247],
[260,250,237,251,266,231,244,267,260,0,250,246,251,259],
[259,247,238,247,277,237,243,259,252,250,0,250,257,271],
[260,252,243,256,269,243,254,272,260,254,250,0,265,275],
[260,259,239,238,269,251,249,253,257,249,243,235,0,264],
[250,234,225,236,247,232,236,249,253,241,229,225,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 147, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,263,251,254,231,257,286,242,278,246,283,251,265],
[233,0,261,236,240,249,251,261,221,261,247,244,221,248],
[237,239,0,259,237,236,265,254,228,252,270,254,246,282],
[249,264,241,0,234,266,263,269,256,247,265,267,255,274],
[246,260,263,266,0,239,282,277,250,280,262,274,256,267],
[269,251,264,234,261,0,263,280,259,270,250,267,262,263],
[243,249,235,237,218,237,0,249,184,252,234,250,222,252],
[214,239,246,231,223,220,251,0,236,239,235,256,229,231],
[258,279,272,244,250,241,316,264,0,270,263,274,246,270],
[222,239,248,253,220,230,248,261,230,0,254,234,245,246],
[254,253,230,235,238,250,266,265,237,246,0,250,254,244],
[217,256,246,233,226,233,250,244,226,266,250,0,235,256],
[249,279,254,245,244,238,278,271,254,255,246,265,0,267],
[235,252,218,226,233,237,248,269,230,254,256,244,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 148, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,197,240,226,253,209,240,217,239,237,222,189,261],
[270,0,252,219,248,248,245,233,229,227,238,262,245,276],
[303,248,0,274,266,293,259,254,237,256,277,290,205,313],
[260,281,226,0,242,271,243,254,240,264,241,250,264,245],
[274,252,234,258,0,276,242,236,260,262,269,283,240,259],
[247,252,207,229,224,0,255,256,212,213,215,203,232,267],
[291,255,241,257,258,245,0,230,266,218,238,261,244,247],
[260,267,246,246,264,244,270,0,249,251,242,260,231,296],
[283,271,263,260,240,288,234,251,0,253,260,261,227,281],
[261,273,244,236,238,287,282,249,247,0,238,242,227,257],
[263,262,223,259,231,285,262,258,240,262,0,273,222,277],
[278,238,210,250,217,297,239,240,239,258,227,0,228,271],
[311,255,295,236,260,268,256,269,273,273,278,272,0,289],
[239,224,187,255,241,233,253,204,219,243,223,229,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 149, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,232,220,202,223,220,221,240,241,227,224,213,248],
[278,0,265,223,241,262,254,244,263,251,267,236,246,285],
[268,235,0,217,236,243,224,237,257,249,247,235,244,255],
[280,277,283,0,257,256,249,266,287,264,284,261,266,273],
[298,259,264,243,0,256,247,252,271,262,278,230,262,274],
[277,238,257,244,244,0,242,238,258,272,244,238,235,268],
[280,246,276,251,253,258,0,248,287,286,259,250,261,268],
[279,256,263,234,248,262,252,0,270,248,259,245,240,265],
[260,237,243,213,229,242,213,230,0,247,242,229,236,252],
[259,249,251,236,238,228,214,252,253,0,244,234,248,254],
[273,233,253,216,222,256,241,241,258,256,0,241,247,253],
[276,264,265,239,270,262,250,255,271,266,259,0,259,281],
[287,254,256,234,238,265,239,260,264,252,253,241,0,268],
[252,215,245,227,226,232,232,235,248,246,247,219,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 150, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,242,210,266,257,312,275,278,253,251,209,245,271],
[245,0,248,210,281,187,316,259,286,242,287,228,267,265],
[258,252,0,207,242,230,257,212,255,223,262,167,193,214],
[290,290,293,0,320,241,313,284,289,262,285,259,245,268],
[234,219,258,180,0,241,237,208,225,156,270,154,199,188],
[243,313,270,259,259,0,289,266,241,211,267,207,248,257],
[188,184,243,187,263,211,0,258,233,199,306,218,239,256],
[225,241,288,216,292,234,242,0,290,211,267,165,229,262],
[222,214,245,211,275,259,267,210,0,218,275,220,218,215],
[247,258,277,238,344,289,301,289,282,0,314,222,238,240],
[249,213,238,215,230,233,194,233,225,186,0,199,211,215],
[291,272,333,241,346,293,282,335,280,278,301,0,259,279],
[255,233,307,255,301,252,261,271,282,262,289,241,0,287],
[229,235,286,232,312,243,244,238,285,260,285,221,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 151, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,272,217,337,227,265,263,287,228,271,276,297,236],
[206,0,223,226,247,263,222,167,224,245,288,265,282,173],
[228,277,0,209,279,240,254,273,240,235,288,271,286,230],
[283,274,291,0,246,254,279,341,276,230,355,308,281,209],
[163,253,221,254,0,252,192,244,265,179,244,269,270,172],
[273,237,260,246,248,0,225,235,234,197,243,337,312,167],
[235,278,246,221,308,275,0,295,293,226,278,284,308,258],
[237,333,227,159,256,265,205,0,315,216,309,270,284,189],
[213,276,260,224,235,266,207,185,0,195,225,264,266,201],
[272,255,265,270,321,303,274,284,305,0,320,365,339,212],
[229,212,212,145,256,257,222,191,275,180,0,284,287,193],
[224,235,229,192,231,163,216,230,236,135,216,0,236,208],
[203,218,214,219,230,188,192,216,234,161,213,264,0,156],
[264,327,270,291,328,333,242,311,299,288,307,292,344,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 152, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,220,239,242,225,235,232,227,215,225,259,211,248],
[263,0,250,241,248,224,254,260,243,231,251,245,235,234],
[280,250,0,265,264,234,255,264,254,268,228,269,228,266],
[261,259,235,0,241,228,248,226,228,238,248,269,219,249],
[258,252,236,259,0,223,230,234,240,238,227,244,226,242],
[275,276,266,272,277,0,269,276,246,249,265,283,272,275],
[265,246,245,252,270,231,0,236,248,230,234,252,232,244],
[268,240,236,274,266,224,264,0,259,241,240,273,239,261],
[273,257,246,272,260,254,252,241,0,235,248,273,226,238],
[285,269,232,262,262,251,270,259,265,0,257,271,252,291],
[275,249,272,252,273,235,266,260,252,243,0,257,237,256],
[241,255,231,231,256,217,248,227,227,229,243,0,218,254],
[289,265,272,281,274,228,268,261,274,248,263,282,0,256],
[252,266,234,251,258,225,256,239,262,209,244,246,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 153, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,265,267,241,253,249,256,254,256,252,254,255,255],
[251,0,270,274,250,264,231,242,241,256,276,249,265,244],
[235,230,0,234,201,225,229,238,214,228,234,241,236,239],
[233,226,266,0,233,236,243,255,230,226,266,235,239,259],
[259,250,299,267,0,272,258,257,243,266,271,252,256,260],
[247,236,275,264,228,0,228,245,247,251,267,243,259,248],
[251,269,271,257,242,272,0,253,234,245,266,258,243,274],
[244,258,262,245,243,255,247,0,240,251,281,259,264,254],
[246,259,286,270,257,253,266,260,0,253,276,252,259,264],
[244,244,272,274,234,249,255,249,247,0,263,261,233,263],
[248,224,266,234,229,233,234,219,224,237,0,225,227,244],
[246,251,259,265,248,257,242,241,248,239,275,0,255,267],
[245,235,264,261,244,241,257,236,241,267,273,245,0,260],
[245,256,261,241,240,252,226,246,236,237,256,233,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 154, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,217,208,214,206,219,198,217,203,233,210,202,229],
[289,0,253,242,240,229,229,255,251,231,248,230,247,252],
[283,247,0,224,262,243,235,235,248,236,250,233,235,264],
[292,258,276,0,241,236,249,280,255,265,266,259,222,240],
[286,260,238,259,0,243,237,252,262,255,257,264,250,263],
[294,271,257,264,257,0,254,251,277,263,279,266,249,265],
[281,271,265,251,263,246,0,248,255,244,231,256,259,246],
[302,245,265,220,248,249,252,0,235,250,253,245,248,260],
[283,249,252,245,238,223,245,265,0,256,257,225,230,241],
[297,269,264,235,245,237,256,250,244,0,243,251,267,278],
[267,252,250,234,243,221,269,247,243,257,0,256,241,261],
[290,270,267,241,236,234,244,255,275,249,244,0,241,251],
[298,253,265,278,250,251,241,252,270,233,259,259,0,244],
[271,248,236,260,237,235,254,240,259,222,239,249,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 155, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,181,215,176,214,251,179,257,185,216,207,201,235],
[309,0,285,250,245,267,331,258,277,247,334,251,264,257],
[319,215,0,266,197,290,294,274,275,243,285,249,256,257],
[285,250,234,0,239,279,292,238,266,251,272,261,251,257],
[324,255,303,261,0,296,316,289,317,232,304,259,288,260],
[286,233,210,221,204,0,275,240,275,224,259,249,218,259],
[249,169,206,208,184,225,0,233,235,205,223,188,226,221],
[321,242,226,262,211,260,267,0,277,256,224,236,265,245],
[243,223,225,234,183,225,265,223,0,203,274,245,205,231],
[315,253,257,249,268,276,295,244,297,0,263,263,273,278],
[284,166,215,228,196,241,277,276,226,237,0,199,233,258],
[293,249,251,239,241,251,312,264,255,237,301,0,252,237],
[299,236,244,249,212,282,274,235,295,227,267,248,0,260],
[265,243,243,243,240,241,279,255,269,222,242,263,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 156, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,243,262,256,241,230,253,247,248,239,234,240,253],
[247,0,235,273,251,259,287,277,268,252,244,267,240,272],
[257,265,0,260,241,268,249,268,242,263,247,229,241,248],
[238,227,240,0,229,255,226,268,236,231,208,210,236,233],
[244,249,259,271,0,262,243,249,260,262,247,266,249,285],
[259,241,232,245,238,0,256,280,242,229,222,225,233,257],
[270,213,251,274,257,244,0,270,256,265,228,252,272,232],
[247,223,232,232,251,220,230,0,225,238,247,228,215,239],
[253,232,258,264,240,258,244,275,0,262,262,246,271,257],
[252,248,237,269,238,271,235,262,238,0,237,242,238,268],
[261,256,253,292,253,278,272,253,238,263,0,243,264,266],
[266,233,271,290,234,275,248,272,254,258,257,0,264,257],
[260,260,259,264,251,267,228,285,229,262,236,236,0,264],
[247,228,252,267,215,243,268,261,243,232,234,243,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 157, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,238,236,232,243,260,243,225,247,226,247,240,237],
[278,0,252,258,231,243,272,250,238,241,238,242,239,241],
[262,248,0,257,230,243,256,232,216,247,245,259,249,232],
[264,242,243,0,220,253,249,226,228,227,237,228,237,219],
[268,269,270,280,0,261,266,245,254,249,261,265,254,246],
[257,257,257,247,239,0,258,242,241,247,234,258,228,230],
[240,228,244,251,234,242,0,234,227,240,237,228,239,226],
[257,250,268,274,255,258,266,0,268,256,259,258,255,259],
[275,262,284,272,246,259,273,232,0,261,252,270,256,254],
[253,259,253,273,251,253,260,244,239,0,258,248,254,256],
[274,262,255,263,239,266,263,241,248,242,0,255,250,250],
[253,258,241,272,235,242,272,242,230,252,245,0,262,242],
[260,261,251,263,246,272,261,245,244,246,250,238,0,246],
[263,259,268,281,254,270,274,241,246,244,250,258,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 158, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,237,266,250,255,259,258,263,242,253,265,264,251],
[249,0,245,258,245,264,261,256,255,241,258,265,267,257],
[263,255,0,259,232,250,246,248,275,248,251,262,265,261],
[234,242,241,0,267,250,247,244,244,244,240,252,261,257],
[250,255,268,233,0,255,254,261,281,246,268,281,269,264],
[245,236,250,250,245,0,251,253,265,227,261,265,279,255],
[241,239,254,253,246,249,0,263,270,227,242,262,260,244],
[242,244,252,256,239,247,237,0,252,240,233,253,258,245],
[237,245,225,256,219,235,230,248,0,246,237,254,251,237],
[258,259,252,256,254,273,273,260,254,0,266,264,272,245],
[247,242,249,260,232,239,258,267,263,234,0,253,266,252],
[235,235,238,248,219,235,238,247,246,236,247,0,240,239],
[236,233,235,239,231,221,240,242,249,228,234,260,0,228],
[249,243,239,243,236,245,256,255,263,255,248,261,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 159, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,249,243,316,311,291,271,291,249,269,298,252,274],
[246,0,236,255,286,274,272,252,298,228,258,312,228,245],
[251,264,0,226,291,272,267,256,269,226,281,325,241,212],
[257,245,274,0,295,260,281,240,263,289,246,274,250,189],
[184,214,209,205,0,229,227,218,211,239,227,213,182,205],
[189,226,228,240,271,0,244,186,238,216,243,256,204,198],
[209,228,233,219,273,256,0,221,225,231,249,224,231,217],
[229,248,244,260,282,314,279,0,268,262,240,275,222,237],
[209,202,231,237,289,262,275,232,0,209,249,266,244,224],
[251,272,274,211,261,284,269,238,291,0,264,274,225,210],
[231,242,219,254,273,257,251,260,251,236,0,253,245,209],
[202,188,175,226,287,244,276,225,234,226,247,0,218,207],
[248,272,259,250,318,296,269,278,256,275,255,282,0,249],
[226,255,288,311,295,302,283,263,276,290,291,293,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 160, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,270,256,255,284,237,273,211,242,266,223,247,271],
[251,0,305,289,280,296,248,284,246,255,270,239,252,300],
[230,195,0,223,209,270,215,276,212,242,234,233,231,250],
[244,211,277,0,243,265,241,252,239,270,253,222,245,272],
[245,220,291,257,0,257,228,253,248,243,254,223,246,260],
[216,204,230,235,243,0,211,269,211,234,235,229,217,243],
[263,252,285,259,272,289,0,333,282,277,260,243,240,274],
[227,216,224,248,247,231,167,0,208,239,226,230,233,230],
[289,254,288,261,252,289,218,292,0,259,238,224,233,296],
[258,245,258,230,257,266,223,261,241,0,256,255,250,270],
[234,230,266,247,246,265,240,274,262,244,0,247,232,307],
[277,261,267,278,277,271,257,270,276,245,253,0,268,273],
[253,248,269,255,254,283,260,267,267,250,268,232,0,273],
[229,200,250,228,240,257,226,270,204,230,193,227,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 161, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,247,240,229,212,236,233,264,234,257,238,255,250],
[270,0,273,270,260,254,262,268,266,251,266,245,243,246],
[253,227,0,250,227,226,231,241,277,228,245,233,251,233],
[260,230,250,0,249,234,222,245,265,240,244,238,243,230],
[271,240,273,251,0,251,237,230,296,259,272,261,251,254],
[288,246,274,266,249,0,235,250,271,234,275,255,257,252],
[264,238,269,278,263,265,0,237,276,268,263,248,278,263],
[267,232,259,255,270,250,263,0,258,252,281,255,250,269],
[236,234,223,235,204,229,224,242,0,216,227,226,230,211],
[266,249,272,260,241,266,232,248,284,0,266,247,251,252],
[243,234,255,256,228,225,237,219,273,234,0,231,251,247],
[262,255,267,262,239,245,252,245,274,253,269,0,257,265],
[245,257,249,257,249,243,222,250,270,249,249,243,0,253],
[250,254,267,270,246,248,237,231,289,248,253,235,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 162, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,242,235,215,234,209,255,274,242,220,233,229,257],
[255,0,249,247,224,243,227,259,269,252,241,242,231,271],
[258,251,0,239,220,238,220,236,242,235,235,236,243,252],
[265,253,261,0,235,258,237,249,279,267,231,243,257,281],
[285,276,280,265,0,271,256,293,312,268,250,278,268,286],
[266,257,262,242,229,0,251,282,286,256,255,264,251,266],
[291,273,280,263,244,249,0,270,284,281,249,264,242,268],
[245,241,264,251,207,218,230,0,273,233,237,253,227,256],
[226,231,258,221,188,214,216,227,0,221,194,235,222,251],
[258,248,265,233,232,244,219,267,279,0,217,240,235,269],
[280,259,265,269,250,245,251,263,306,283,0,274,255,291],
[267,258,264,257,222,236,236,247,265,260,226,0,241,260],
[271,269,257,243,232,249,258,273,278,265,245,259,0,266],
[243,229,248,219,214,234,232,244,249,231,209,240,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 163, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,182,337,353,189,186,293,276,276,253,186,280,284],
[287,0,274,337,272,287,200,240,253,339,317,208,292,326],
[318,226,0,283,308,308,258,299,308,289,372,263,273,231],
[163,163,217,0,289,203,200,267,136,153,277,210,227,150],
[147,228,192,211,0,164,177,194,113,94,194,177,228,177],
[311,213,192,297,336,0,74,200,236,226,273,74,252,286],
[314,300,242,300,323,426,0,273,333,313,441,357,441,387],
[207,260,201,233,306,300,227,0,199,239,280,227,288,150],
[224,247,192,364,387,264,167,301,0,212,304,254,355,177],
[224,161,211,347,406,274,187,261,288,0,338,187,288,211],
[247,183,128,223,306,227,59,220,196,162,0,64,269,212],
[314,292,237,290,323,426,143,273,246,313,436,0,414,323],
[220,208,227,273,272,248,59,212,145,212,231,86,0,195],
[216,174,269,350,323,214,113,350,323,289,288,177,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 164, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,257,251,226,229,235,253,228,241,250,265,223,262],
[236,0,258,249,233,256,245,248,245,225,259,250,235,247],
[243,242,0,240,232,246,252,240,249,231,265,244,259,238],
[249,251,260,0,236,260,268,270,262,228,260,246,253,275],
[274,267,268,264,0,269,246,266,232,252,268,280,239,266],
[271,244,254,240,231,0,262,255,285,258,279,258,257,260],
[265,255,248,232,254,238,0,225,243,214,260,250,235,236],
[247,252,260,230,234,245,275,0,275,223,254,257,230,283],
[272,255,251,238,268,215,257,225,0,235,246,250,238,255],
[259,275,269,272,248,242,286,277,265,0,280,251,251,286],
[250,241,235,240,232,221,240,246,254,220,0,222,243,249],
[235,250,256,254,220,242,250,243,250,249,278,0,245,266],
[277,265,241,247,261,243,265,270,262,249,257,255,0,267],
[238,253,262,225,234,240,264,217,245,214,251,234,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 165, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,250,95,190,130,49,137,100,98,261,259,208,155],
[393,0,433,283,296,235,249,273,258,313,354,493,292,290],
[250,67,0,121,118,120,121,169,115,241,300,324,201,308],
[405,217,379,0,310,183,216,338,246,241,411,373,349,380],
[310,204,382,190,0,225,193,183,154,290,248,449,248,264],
[370,265,380,317,275,0,273,280,204,308,428,435,405,348],
[451,251,379,284,307,227,0,312,269,308,421,402,398,380],
[363,227,331,162,317,220,188,0,195,236,339,378,243,330],
[400,242,385,254,346,296,231,305,0,257,411,408,328,386],
[402,187,259,259,210,192,192,264,243,0,395,409,236,330],
[239,146,200,89,252,72,79,161,89,105,0,378,176,82],
[241,7,176,127,51,65,98,122,92,91,122,0,153,97],
[292,208,299,151,252,95,102,257,172,264,324,347,0,299],
[345,210,192,120,236,152,120,170,114,170,418,403,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 166, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,244,248,249,261,253,238,257,244,259,255,243,258],
[247,0,242,233,219,242,242,238,232,249,231,243,234,249],
[256,258,0,248,239,242,252,245,238,253,239,247,252,254],
[252,267,252,0,242,247,274,251,242,248,251,265,239,253],
[251,281,261,258,0,264,276,261,279,265,254,274,247,263],
[239,258,258,253,236,0,263,249,252,253,259,254,256,258],
[247,258,248,226,224,237,0,239,228,244,227,245,228,262],
[262,262,255,249,239,251,261,0,243,247,242,264,245,260],
[243,268,262,258,221,248,272,257,0,249,254,260,239,245],
[256,251,247,252,235,247,256,253,251,0,249,262,242,249],
[241,269,261,249,246,241,273,258,246,251,0,267,249,257],
[245,257,253,235,226,246,255,236,240,238,233,0,255,259],
[257,266,248,261,253,244,272,255,261,258,251,245,0,269],
[242,251,246,247,237,242,238,240,255,251,243,241,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 167, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,349,348,239,188,241,262,228,324,352,254,290,262,224],
[151,0,179,171,135,126,154,170,222,169,145,207,202,119],
[152,321,0,131,155,207,257,264,275,256,166,257,216,215],
[261,329,369,0,259,255,302,284,343,335,308,311,214,267],
[312,365,345,241,0,206,302,325,300,337,249,286,235,295],
[259,374,293,245,294,0,309,306,329,394,271,357,286,298],
[238,346,243,198,198,191,0,223,257,305,156,296,248,211],
[272,330,236,216,175,194,277,0,214,298,173,235,163,186],
[176,278,225,157,200,171,243,286,0,316,217,263,173,174],
[148,331,244,165,163,106,195,202,184,0,153,225,152,166],
[246,355,334,192,251,229,344,327,283,347,0,288,219,238],
[210,293,243,189,214,143,204,265,237,275,212,0,193,140],
[238,298,284,286,265,214,252,337,327,348,281,307,0,226],
[276,381,285,233,205,202,289,314,326,334,262,360,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 168, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,242,247,242,252,250,250,242,247,263,243,246,249],
[256,0,245,255,268,251,264,245,252,233,279,249,238,255],
[258,255,0,261,257,252,259,241,250,249,272,255,260,268],
[253,245,239,0,246,233,239,237,240,227,251,238,247,247],
[258,232,243,254,0,236,250,239,243,240,251,219,245,236],
[248,249,248,267,264,0,264,245,236,255,254,257,256,268],
[250,236,241,261,250,236,0,244,240,241,257,246,249,255],
[250,255,259,263,261,255,256,0,239,233,273,249,237,260],
[258,248,250,260,257,264,260,261,0,252,260,256,259,274],
[253,267,251,273,260,245,259,267,248,0,267,266,270,270],
[237,221,228,249,249,246,243,227,240,233,0,233,246,247],
[257,251,245,262,281,243,254,251,244,234,267,0,263,262],
[254,262,240,253,255,244,251,263,241,230,254,237,0,266],
[251,245,232,253,264,232,245,240,226,230,253,238,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 169, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,243,240,257,247,252,250,250,251,242,250,238,238],
[255,0,247,237,271,250,252,257,257,271,260,268,262,258],
[257,253,0,248,275,245,257,249,252,262,239,242,250,270],
[260,263,252,0,264,265,268,262,264,276,241,261,266,261],
[243,229,225,236,0,233,242,232,251,253,231,231,245,247],
[253,250,255,235,267,0,258,244,244,260,248,256,243,260],
[248,248,243,232,258,242,0,240,258,259,254,240,239,254],
[250,243,251,238,268,256,260,0,250,249,247,229,254,237],
[250,243,248,236,249,256,242,250,0,260,235,253,256,254],
[249,229,238,224,247,240,241,251,240,0,251,246,244,241],
[258,240,261,259,269,252,246,253,265,249,0,260,258,265],
[250,232,258,239,269,244,260,271,247,254,240,0,258,259],
[262,238,250,234,255,257,261,246,244,256,242,242,0,240],
[262,242,230,239,253,240,246,263,246,259,235,241,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 170, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,256,260,253,248,261,253,250,245,248,248,239,250],
[255,0,238,257,263,257,254,252,257,247,238,246,262,243],
[244,262,0,268,269,261,261,256,248,247,255,261,241,258],
[240,243,232,0,258,244,256,241,246,253,233,233,233,235],
[247,237,231,242,0,246,269,239,248,258,246,234,244,244],
[252,243,239,256,254,0,256,243,242,248,249,245,248,243],
[239,246,239,244,231,244,0,242,249,254,244,231,248,267],
[247,248,244,259,261,257,258,0,256,264,252,263,251,245],
[250,243,252,254,252,258,251,244,0,259,242,258,251,251],
[255,253,253,247,242,252,246,236,241,0,253,245,229,233],
[252,262,245,267,254,251,256,248,258,247,0,245,232,259],
[252,254,239,267,266,255,269,237,242,255,255,0,252,255],
[261,238,259,267,256,252,252,249,249,271,268,248,0,248],
[250,257,242,265,256,257,233,255,249,267,241,245,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 171, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,206,241,265,218,206,242,302,189,244,236,262,235],
[234,0,228,278,272,215,162,243,317,239,221,273,283,211],
[294,272,0,303,276,268,222,276,288,263,317,270,292,284],
[259,222,197,0,202,178,170,207,244,190,176,266,212,217],
[235,228,224,298,0,259,210,272,250,246,272,230,218,290],
[282,285,232,322,241,0,230,283,252,204,255,259,263,273],
[294,338,278,330,290,270,0,289,266,232,286,303,289,260],
[258,257,224,293,228,217,211,0,303,236,230,245,238,284],
[198,183,212,256,250,248,234,197,0,228,238,261,223,285],
[311,261,237,310,254,296,268,264,272,0,258,253,234,286],
[256,279,183,324,228,245,214,270,262,242,0,260,219,252],
[264,227,230,234,270,241,197,255,239,247,240,0,240,223],
[238,217,208,288,282,237,211,262,277,266,281,260,0,247],
[265,289,216,283,210,227,240,216,215,214,248,277,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 172, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,250,240,277,254,251,224,223,236,225,248,247,244],
[250,0,230,225,267,244,242,219,234,244,233,232,257,229],
[250,270,0,246,284,250,260,223,251,254,248,245,267,244],
[260,275,254,0,285,262,267,267,264,276,269,247,275,264],
[223,233,216,215,0,233,231,229,229,237,224,239,244,225],
[246,256,250,238,267,0,245,241,249,251,241,258,272,235],
[249,258,240,233,269,255,0,253,249,249,251,257,263,241],
[276,281,277,233,271,259,247,0,240,272,243,255,275,245],
[277,266,249,236,271,251,251,260,0,259,255,265,272,254],
[264,256,246,224,263,249,251,228,241,0,233,242,267,224],
[275,267,252,231,276,259,249,257,245,267,0,262,270,255],
[252,268,255,253,261,242,243,245,235,258,238,0,270,231],
[253,243,233,225,256,228,237,225,228,233,230,230,0,228],
[256,271,256,236,275,265,259,255,246,276,245,269,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 173, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,244,240,263,253,254,250,270,255,248,265,243,241],
[266,0,251,231,254,240,258,246,264,254,263,260,243,244],
[256,249,0,238,255,249,240,246,260,263,262,269,240,244],
[260,269,262,0,268,261,253,246,265,264,270,278,255,248],
[237,246,245,232,0,241,243,227,264,248,253,250,242,245],
[247,260,251,239,259,0,256,252,270,261,271,264,241,244],
[246,242,260,247,257,244,0,241,255,259,250,264,240,243],
[250,254,254,254,273,248,259,0,287,262,260,265,253,240],
[230,236,240,235,236,230,245,213,0,249,257,246,232,225],
[245,246,237,236,252,239,241,238,251,0,256,269,241,240],
[252,237,238,230,247,229,250,240,243,244,0,242,226,232],
[235,240,231,222,250,236,236,235,254,231,258,0,239,236],
[257,257,260,245,258,259,260,247,268,259,274,261,0,260],
[259,256,256,252,255,256,257,260,275,260,268,264,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 174, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,242,242,228,237,225,251,238,229,213,242,204,243],
[262,0,243,250,233,253,244,249,263,241,241,269,226,252],
[258,257,0,263,242,275,252,264,262,256,222,266,244,254],
[258,250,237,0,240,247,239,252,233,245,238,248,236,250],
[272,267,258,260,0,252,253,272,256,245,246,265,240,262],
[263,247,225,253,248,0,236,271,259,253,236,258,243,231],
[275,256,248,261,247,264,0,266,249,262,246,243,224,260],
[249,251,236,248,228,229,234,0,237,240,213,238,208,223],
[262,237,238,267,244,241,251,263,0,253,260,243,242,243],
[271,259,244,255,255,247,238,260,247,0,257,252,250,251],
[287,259,278,262,254,264,254,287,240,243,0,270,248,269],
[258,231,234,252,235,242,257,262,257,248,230,0,241,244],
[296,274,256,264,260,257,276,292,258,250,252,259,0,249],
[257,248,246,250,238,269,240,277,257,249,231,256,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 175, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,215,235,235,215,275,244,236,234,210,243,233,222],
[269,0,249,249,243,220,256,269,255,245,234,273,273,217],
[285,251,0,237,236,237,263,268,264,231,252,265,289,229],
[265,251,263,0,226,238,283,282,252,268,246,251,264,233],
[265,257,264,274,0,254,276,273,251,241,274,260,272,241],
[285,280,263,262,246,0,308,291,271,273,260,258,282,257],
[225,244,237,217,224,192,0,244,239,240,230,242,237,212],
[256,231,232,218,227,209,256,0,231,224,240,229,261,222],
[264,245,236,248,249,229,261,269,0,243,237,238,261,224],
[266,255,269,232,259,227,260,276,257,0,253,265,291,227],
[290,266,248,254,226,240,270,260,263,247,0,267,267,237],
[257,227,235,249,240,242,258,271,262,235,233,0,267,217],
[267,227,211,236,228,218,263,239,239,209,233,233,0,225],
[278,283,271,267,259,243,288,278,276,273,263,283,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 176, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,253,249,243,254,242,256,235,257,256,271,259,256],
[237,0,253,239,244,240,232,255,238,246,244,242,246,261],
[247,247,0,233,235,239,214,235,237,242,238,245,244,247],
[251,261,267,0,263,261,248,253,233,248,250,245,264,248],
[257,256,265,237,0,260,235,237,254,250,256,263,252,244],
[246,260,261,239,240,0,236,247,251,256,244,250,255,258],
[258,268,286,252,265,264,0,270,254,269,263,285,250,269],
[244,245,265,247,263,253,230,0,231,241,249,244,244,262],
[265,262,263,267,246,249,246,269,0,257,248,259,258,263],
[243,254,258,252,250,244,231,259,243,0,251,257,246,253],
[244,256,262,250,244,256,237,251,252,249,0,255,247,270],
[229,258,255,255,237,250,215,256,241,243,245,0,237,248],
[241,254,256,236,248,245,250,256,242,254,253,263,0,257],
[244,239,253,252,256,242,231,238,237,247,230,252,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 177, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,271,246,249,330,301,286,288,245,237,235,262,259],
[252,0,244,227,243,280,249,243,243,260,239,226,251,203],
[229,256,0,240,226,242,264,249,253,253,246,236,240,236],
[254,273,260,0,258,291,226,246,232,283,248,254,248,268],
[251,257,274,242,0,292,270,265,279,259,254,266,249,256],
[170,220,258,209,208,0,228,231,223,225,215,213,219,245],
[199,251,236,274,230,272,0,235,267,234,268,230,236,221],
[214,257,251,254,235,269,265,0,247,230,257,231,239,250],
[212,257,247,268,221,277,233,253,0,229,263,267,263,278],
[255,240,247,217,241,275,266,270,271,0,245,252,238,265],
[263,261,254,252,246,285,232,243,237,255,0,243,236,266],
[265,274,264,246,234,287,270,269,233,248,257,0,258,261],
[238,249,260,252,251,281,264,261,237,262,264,242,0,284],
[241,297,264,232,244,255,279,250,222,235,234,239,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 178, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,267,250,248,256,263,256,246,237,234,235,252,242],
[273,0,273,270,249,272,269,279,277,264,261,276,271,272],
[233,227,0,225,245,249,264,249,228,220,239,237,240,235],
[250,230,275,0,248,255,248,270,248,236,234,253,251,254],
[252,251,255,252,0,261,266,261,245,239,254,254,241,272],
[244,228,251,245,239,0,244,236,248,230,228,248,231,228],
[237,231,236,252,234,256,0,250,240,225,241,252,243,236],
[244,221,251,230,239,264,250,0,264,233,241,245,239,241],
[254,223,272,252,255,252,260,236,0,248,242,242,248,236],
[263,236,280,264,261,270,275,267,252,0,245,261,257,263],
[266,239,261,266,246,272,259,259,258,255,0,256,249,259],
[265,224,263,247,246,252,248,255,258,239,244,0,247,254],
[248,229,260,249,259,269,257,261,252,243,251,253,0,248],
[258,228,265,246,228,272,264,259,264,237,241,246,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 179, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,234,273,233,251,231,246,261,256,257,268,270,239],
[227,0,243,249,231,261,211,230,232,226,260,254,251,194],
[266,257,0,272,243,278,239,249,285,266,253,285,289,233],
[227,251,228,0,242,271,250,266,284,279,243,263,288,203],
[267,269,257,258,0,261,250,250,275,279,259,272,276,256],
[249,239,222,229,239,0,239,241,264,267,260,251,260,202],
[269,289,261,250,250,261,0,269,271,271,243,288,269,240],
[254,270,251,234,250,259,231,0,268,280,244,250,248,211],
[239,268,215,216,225,236,229,232,0,243,232,273,230,203],
[244,274,234,221,221,233,229,220,257,0,252,244,235,211],
[243,240,247,257,241,240,257,256,268,248,0,254,269,212],
[232,246,215,237,228,249,212,250,227,256,246,0,260,221],
[230,249,211,212,224,240,231,252,270,265,231,240,0,197],
[261,306,267,297,244,298,260,289,297,289,288,279,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 180, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,269,236,270,234,256,247,253,249,253,254,256,230],
[257,0,265,264,265,268,273,260,234,280,279,263,254,276],
[231,235,0,228,267,236,274,219,195,259,260,251,271,234],
[264,236,272,0,253,233,266,249,224,282,277,268,284,268],
[230,235,233,247,0,241,283,228,208,257,279,274,277,243],
[266,232,264,267,259,0,268,236,242,258,283,251,256,266],
[244,227,226,234,217,232,0,234,238,205,253,261,259,252],
[253,240,281,251,272,264,266,0,239,274,275,262,251,285],
[247,266,305,276,292,258,262,261,0,274,270,232,270,274],
[251,220,241,218,243,242,295,226,226,0,239,263,270,255],
[247,221,240,223,221,217,247,225,230,261,0,253,252,240],
[246,237,249,232,226,249,239,238,268,237,247,0,267,247],
[244,246,229,216,223,244,241,249,230,230,248,233,0,250],
[270,224,266,232,257,234,248,215,226,245,260,253,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 181, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,203,244,202,148,264,236,266,238,275,185,227,210],
[206,0,230,302,201,181,184,289,225,314,237,195,220,177],
[297,270,0,283,266,236,245,295,279,354,338,261,315,254],
[256,198,217,0,168,184,148,232,222,173,216,218,194,205],
[298,299,234,332,0,242,322,290,339,347,311,267,252,210],
[352,319,264,316,258,0,212,309,296,292,349,214,281,326],
[236,316,255,352,178,288,0,304,337,301,337,180,223,236],
[264,211,205,268,210,191,196,0,217,284,253,183,210,197],
[234,275,221,278,161,204,163,283,0,234,265,259,218,217],
[262,186,146,327,153,208,199,216,266,0,254,221,203,169],
[225,263,162,284,189,151,163,247,235,246,0,138,173,173],
[315,305,239,282,233,286,320,317,241,279,362,0,262,270],
[273,280,185,306,248,219,277,290,282,297,327,238,0,221],
[290,323,246,295,290,174,264,303,283,331,327,230,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 182, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,250,247,248,238,258,248,242,233,250,242,242,223],
[244,0,246,241,260,230,236,237,223,226,245,252,232,241],
[250,254,0,247,248,252,271,276,251,240,236,253,246,251],
[253,259,253,0,238,248,266,259,246,230,240,263,248,248],
[252,240,252,262,0,258,257,257,254,243,245,256,248,252],
[262,270,248,252,242,0,258,267,240,250,258,256,241,261],
[242,264,229,234,243,242,0,236,251,224,242,229,241,251],
[252,263,224,241,243,233,264,0,267,225,245,250,234,228],
[258,277,249,254,246,260,249,233,0,247,258,263,245,233],
[267,274,260,270,257,250,276,275,253,0,250,261,262,262],
[250,255,264,260,255,242,258,255,242,250,0,262,246,259],
[258,248,247,237,244,244,271,250,237,239,238,0,247,253],
[258,268,254,252,252,259,259,266,255,238,254,253,0,248],
[277,259,249,252,248,239,249,272,267,238,241,247,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 183, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,220,246,266,248,254,276,253,258,241,245,248,256],
[248,0,236,254,244,246,234,260,209,262,258,238,257,252],
[280,264,0,242,276,251,252,262,250,268,265,263,273,248],
[254,246,258,0,259,254,273,273,239,248,254,237,277,258],
[234,256,224,241,0,227,239,246,220,232,238,230,243,240],
[252,254,249,246,273,0,254,249,233,244,248,226,243,239],
[246,266,248,227,261,246,0,267,225,241,265,248,253,223],
[224,240,238,227,254,251,233,0,224,233,233,229,257,229],
[247,291,250,261,280,267,275,276,0,255,245,261,274,254],
[242,238,232,252,268,256,259,267,245,0,242,226,249,240],
[259,242,235,246,262,252,235,267,255,258,0,250,254,237],
[255,262,237,263,270,274,252,271,239,274,250,0,277,255],
[252,243,227,223,257,257,247,243,226,251,246,223,0,243],
[244,248,252,242,260,261,277,271,246,260,263,245,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 184, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,254,232,264,264,248,242,250,263,258,237,262,244],
[258,0,250,246,255,272,256,248,261,286,275,251,276,240],
[246,250,0,259,264,272,248,260,261,289,263,240,274,252],
[268,254,241,0,260,258,242,243,247,275,257,247,280,247],
[236,245,236,240,0,245,250,247,232,250,262,244,283,232],
[236,228,228,242,255,0,230,221,233,256,231,249,245,221],
[252,244,252,258,250,270,0,262,260,262,272,273,274,241],
[258,252,240,257,253,279,238,0,239,272,262,240,285,244],
[250,239,239,253,268,267,240,261,0,256,254,255,292,247],
[237,214,211,225,250,244,238,228,244,0,252,241,251,241],
[242,225,237,243,238,269,228,238,246,248,0,230,250,221],
[263,249,260,253,256,251,227,260,245,259,270,0,279,247],
[238,224,226,220,217,255,226,215,208,249,250,221,0,223],
[256,260,248,253,268,279,259,256,253,259,279,253,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 185, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,187,208,248,213,273,258,186,306,192,327,211,249],
[217,0,250,233,269,270,260,300,239,216,271,286,245,266],
[313,250,0,279,243,233,279,283,247,283,249,321,228,295],
[292,267,221,0,216,235,245,279,209,268,265,274,185,209],
[252,231,257,284,0,260,298,275,214,324,279,386,218,252],
[287,230,267,265,240,0,310,302,172,276,176,305,190,150],
[227,240,221,255,202,190,0,237,237,201,244,262,237,219],
[242,200,217,221,225,198,263,0,213,312,198,218,168,205],
[314,261,253,291,286,328,263,287,0,337,250,307,210,255],
[194,284,217,232,176,224,299,188,163,0,152,300,200,218],
[308,229,251,235,221,324,256,302,250,348,0,340,248,261],
[173,214,179,226,114,195,238,282,193,200,160,0,266,193],
[289,255,272,315,282,310,263,332,290,300,252,234,0,283],
[251,234,205,291,248,350,281,295,245,282,239,307,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 186, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,257,258,252,267,262,269,255,260,264,245,252,252],
[227,0,232,240,242,241,255,232,241,233,249,234,235,261],
[243,268,0,246,265,253,253,244,250,265,276,235,274,270],
[242,260,254,0,254,269,266,261,259,267,277,250,263,269],
[248,258,235,246,0,250,258,225,259,244,272,246,256,268],
[233,259,247,231,250,0,237,260,245,258,244,225,252,259],
[238,245,247,234,242,263,0,248,258,266,275,231,262,261],
[231,268,256,239,275,240,252,0,263,250,244,247,260,253],
[245,259,250,241,241,255,242,237,0,239,276,236,263,256],
[240,267,235,233,256,242,234,250,261,0,267,249,274,253],
[236,251,224,223,228,256,225,256,224,233,0,213,248,254],
[255,266,265,250,254,275,269,253,264,251,287,0,263,276],
[248,265,226,237,244,248,238,240,237,226,252,237,0,259],
[248,239,230,231,232,241,239,247,244,247,246,224,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 187, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,242,248,225,236,240,222,242,234,231,223,227,233],
[282,0,240,267,228,240,263,248,250,246,256,247,246,245],
[258,260,0,264,245,263,270,244,255,247,249,251,249,256],
[252,233,236,0,225,239,253,239,251,240,225,231,227,230],
[275,272,255,275,0,260,274,273,269,265,251,247,247,262],
[264,260,237,261,240,0,264,254,247,238,229,228,235,241],
[260,237,230,247,226,236,0,244,236,230,234,221,233,246],
[278,252,256,261,227,246,256,0,254,244,238,244,251,252],
[258,250,245,249,231,253,264,246,0,246,236,234,240,245],
[266,254,253,260,235,262,270,256,254,0,257,235,246,265],
[269,244,251,275,249,271,266,262,264,243,0,248,255,265],
[277,253,249,269,253,272,279,256,266,265,252,0,258,266],
[273,254,251,273,253,265,267,249,260,254,245,242,0,268],
[267,255,244,270,238,259,254,248,255,235,235,234,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 188, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,239,244,274,263,262,247,247,265,256,252,256,274],
[232,0,233,236,248,247,231,252,248,257,239,247,238,244],
[261,267,0,236,236,257,264,264,250,257,247,257,231,276],
[256,264,264,0,262,252,263,248,258,237,249,265,244,258],
[226,252,264,238,0,256,261,235,245,247,250,249,246,250],
[237,253,243,248,244,0,260,243,254,260,234,232,246,238],
[238,269,236,237,239,240,0,247,239,251,234,244,242,242],
[253,248,236,252,265,257,253,0,275,261,248,251,255,269],
[253,252,250,242,255,246,261,225,0,243,243,246,247,233],
[235,243,243,263,253,240,249,239,257,0,244,252,246,232],
[244,261,253,251,250,266,266,252,257,256,0,247,264,247],
[248,253,243,235,251,268,256,249,254,248,253,0,239,259],
[244,262,269,256,254,254,258,245,253,254,236,261,0,264],
[226,256,224,242,250,262,258,231,267,268,253,241,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 189, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,248,230,238,247,243,267,238,237,224,252,259,259],
[220,0,284,228,216,248,239,251,248,200,245,225,235,213],
[252,216,0,274,251,265,247,247,274,278,278,244,265,230],
[270,272,226,0,230,262,274,232,256,229,222,243,251,233],
[262,284,249,270,0,252,261,288,262,224,255,249,228,273],
[253,252,235,238,248,0,278,253,257,212,247,229,259,251],
[257,261,253,226,239,222,0,231,220,231,251,237,243,232],
[233,249,253,268,212,247,269,0,250,215,231,236,268,205],
[262,252,226,244,238,243,280,250,0,217,291,249,254,254],
[263,300,222,271,276,288,269,285,283,0,248,252,283,297],
[276,255,222,278,245,253,249,269,209,252,0,252,236,263],
[248,275,256,257,251,271,263,264,251,248,248,0,250,242],
[241,265,235,249,272,241,257,232,246,217,264,250,0,257],
[241,287,270,267,227,249,268,295,246,203,237,258,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 190, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,281,234,248,232,255,236,266,241,259,258,242,254],
[241,0,244,222,237,212,242,234,251,221,238,236,243,235],
[219,256,0,245,234,227,237,231,249,223,238,239,235,244],
[266,278,255,0,267,236,245,271,276,255,267,262,258,255],
[252,263,266,233,0,237,252,245,267,237,251,231,258,261],
[268,288,273,264,263,0,272,269,267,250,276,272,274,276],
[245,258,263,255,248,228,0,264,271,246,249,256,258,264],
[264,266,269,229,255,231,236,0,253,233,254,256,238,264],
[234,249,251,224,233,233,229,247,0,196,225,240,229,240],
[259,279,277,245,263,250,254,267,304,0,260,266,254,255],
[241,262,262,233,249,224,251,246,275,240,0,241,269,263],
[242,264,261,238,269,228,244,244,260,234,259,0,246,263],
[258,257,265,242,242,226,242,262,271,246,231,254,0,254],
[246,265,256,245,239,224,236,236,260,245,237,237,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 191, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,49,116,147,49,342,353,128,126,206,351,49,126],
[302,0,351,108,305,274,498,343,351,302,431,343,266,351],
[451,149,0,136,307,168,293,425,325,146,392,412,227,366],
[384,392,364,0,305,246,459,433,325,317,323,343,158,366],
[353,195,193,195,0,51,262,353,286,128,353,353,116,286],
[451,226,332,254,449,0,293,492,392,293,451,412,144,433],
[158,2,207,41,238,207,0,278,284,77,284,343,158,207],
[147,157,75,67,147,8,222,0,75,67,155,266,67,49],
[372,149,175,175,214,108,216,425,0,144,291,333,134,49],
[374,198,354,183,372,207,423,433,356,0,431,341,274,287],
[294,69,108,177,147,49,216,345,209,69,0,333,67,209],
[149,157,88,157,147,88,157,234,167,159,167,0,8,131],
[451,234,273,342,384,356,342,433,366,226,433,492,0,366],
[374,149,134,134,214,67,293,451,451,213,291,369,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 192, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,217,245,182,233,243,237,215,223,297,243,220,252],
[247,0,228,223,190,290,208,227,195,223,264,271,163,225],
[283,272,0,206,240,287,228,252,208,249,304,268,272,249],
[255,277,294,0,262,357,232,263,247,259,310,294,266,283],
[318,310,260,238,0,340,310,268,260,301,312,285,278,279],
[267,210,213,143,160,0,239,198,178,220,242,183,182,216],
[257,292,272,268,190,261,0,234,249,227,263,265,261,261],
[263,273,248,237,232,302,266,0,198,258,291,272,231,269],
[285,305,292,253,240,322,251,302,0,278,266,276,280,309],
[277,277,251,241,199,280,273,242,222,0,260,263,201,259],
[203,236,196,190,188,258,237,209,234,240,0,223,232,196],
[257,229,232,206,215,317,235,228,224,237,277,0,213,207],
[280,337,228,234,222,318,239,269,220,299,268,287,0,248],
[248,275,251,217,221,284,239,231,191,241,304,293,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 193, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,239,235,248,243,248,245,255,220,235,238,245,230],
[257,0,243,239,234,244,244,256,250,223,255,222,238,239],
[261,257,0,250,225,265,243,268,252,237,239,249,253,230],
[265,261,250,0,258,271,257,250,257,233,262,254,246,248],
[252,266,275,242,0,286,275,268,268,240,246,247,257,249],
[257,256,235,229,214,0,230,249,250,233,234,232,249,239],
[252,256,257,243,225,270,0,254,249,233,235,222,243,233],
[255,244,232,250,232,251,246,0,252,236,240,216,247,239],
[245,250,248,243,232,250,251,248,0,236,231,238,254,230],
[280,277,263,267,260,267,267,264,264,0,242,243,276,250],
[265,245,261,238,254,266,265,260,269,258,0,219,248,235],
[262,278,251,246,253,268,278,284,262,257,281,0,259,248],
[255,262,247,254,243,251,257,253,246,224,252,241,0,232],
[270,261,270,252,251,261,267,261,270,250,265,252,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 194, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,274,263,245,251,255,268,246,252,254,258,280,246],
[246,0,250,247,240,241,233,232,247,240,247,249,243,246],
[226,250,0,241,248,236,214,232,227,228,240,234,258,236],
[237,253,259,0,239,242,231,238,249,249,239,261,259,229],
[255,260,252,261,0,249,239,241,246,243,249,255,258,251],
[249,259,264,258,251,0,249,251,252,245,265,265,265,243],
[245,267,286,269,261,251,0,247,255,252,271,269,259,265],
[232,268,268,262,259,249,253,0,253,264,239,275,271,248],
[254,253,273,251,254,248,245,247,0,270,245,251,273,249],
[248,260,272,251,257,255,248,236,230,0,251,258,248,243],
[246,253,260,261,251,235,229,261,255,249,0,266,261,241],
[242,251,266,239,245,235,231,225,249,242,234,0,251,258],
[220,257,242,241,242,235,241,229,227,252,239,249,0,236],
[254,254,264,271,249,257,235,252,251,257,259,242,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 195, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,232,183,207,228,239,232,216,259,234,235,228,217],
[250,0,195,213,194,232,255,227,210,246,193,258,220,241],
[268,305,0,241,246,276,275,277,273,282,243,310,288,271],
[317,287,259,0,263,277,288,259,251,267,254,271,272,239],
[293,306,254,237,0,279,237,255,258,267,232,262,251,259],
[272,268,224,223,221,0,233,259,263,262,232,278,243,239],
[261,245,225,212,263,267,0,244,256,260,198,210,249,213],
[268,273,223,241,245,241,256,0,222,264,222,263,258,255],
[284,290,227,249,242,237,244,278,0,252,238,269,249,209],
[241,254,218,233,233,238,240,236,248,0,197,266,240,237],
[266,307,257,246,268,268,302,278,262,303,0,305,278,265],
[265,242,190,229,238,222,290,237,231,234,195,0,224,192],
[272,280,212,228,249,257,251,242,251,260,222,276,0,251],
[283,259,229,261,241,261,287,245,291,263,235,308,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 196, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,246,252,250,251,241,233,224,267,255,254,265,254],
[254,0,253,264,244,258,234,254,229,267,258,249,272,259],
[254,247,0,261,262,242,253,245,240,245,275,249,256,258],
[248,236,239,0,255,246,246,218,215,241,231,245,245,233],
[250,256,238,245,0,242,241,228,224,253,251,251,252,251],
[249,242,258,254,258,0,246,239,235,247,247,265,271,252],
[259,266,247,254,259,254,0,232,243,265,267,257,268,260],
[267,246,255,282,272,261,268,0,251,278,253,283,282,269],
[276,271,260,285,276,265,257,249,0,271,282,269,273,269],
[233,233,255,259,247,253,235,222,229,0,248,249,260,259],
[245,242,225,269,249,253,233,247,218,252,0,245,261,257],
[246,251,251,255,249,235,243,217,231,251,255,0,267,248],
[235,228,244,255,248,229,232,218,227,240,239,233,0,231],
[246,241,242,267,249,248,240,231,231,241,243,252,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 197, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,259,270,260,253,251,275,274,250,279,270,259,270],
[231,0,260,274,227,242,248,237,260,250,258,256,236,243],
[241,240,0,264,222,237,239,237,261,244,253,267,234,229],
[230,226,236,0,218,243,242,221,240,230,250,243,241,226],
[240,273,278,282,0,258,255,269,269,248,267,265,256,247],
[247,258,263,257,242,0,244,257,260,253,274,265,250,257],
[249,252,261,258,245,256,0,271,264,245,265,267,266,243],
[225,263,263,279,231,243,229,0,250,241,254,256,243,234],
[226,240,239,260,231,240,236,250,0,228,261,252,252,226],
[250,250,256,270,252,247,255,259,272,0,252,260,255,227],
[221,242,247,250,233,226,235,246,239,248,0,268,238,240],
[230,244,233,257,235,235,233,244,248,240,232,0,252,230],
[241,264,266,259,244,250,234,257,248,245,262,248,0,235],
[230,257,271,274,253,243,257,266,274,273,260,270,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 198, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,250,248,246,247,259,275,254,257,253,256,280,265],
[244,0,247,229,260,249,262,257,256,265,251,246,253,265],
[250,253,0,252,275,254,276,266,274,255,277,258,265,265],
[252,271,248,0,269,250,274,268,264,256,267,263,272,273],
[254,240,225,231,0,231,251,258,253,239,258,243,261,257],
[253,251,246,250,269,0,280,272,277,279,282,267,262,281],
[241,238,224,226,249,220,0,261,255,233,253,234,245,252],
[225,243,234,232,242,228,239,0,249,252,247,245,246,243],
[246,244,226,236,247,223,245,251,0,243,251,240,255,252],
[243,235,245,244,261,221,267,248,257,0,264,244,280,255],
[247,249,223,233,242,218,247,253,249,236,0,252,248,261],
[244,254,242,237,257,233,266,255,260,256,248,0,248,257],
[220,247,235,228,239,238,255,254,245,220,252,252,0,239],
[235,235,235,227,243,219,248,257,248,245,239,243,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 199, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,256,257,271,268,245,229,267,247,296,282,261,254],
[241,0,250,269,230,243,220,208,247,236,262,235,230,261],
[244,250,0,244,250,256,227,206,245,234,254,266,254,254],
[243,231,256,0,240,268,258,226,259,252,255,287,257,244],
[229,270,250,260,0,251,230,241,250,224,287,261,237,250],
[232,257,244,232,249,0,254,237,260,216,268,276,243,249],
[255,280,273,242,270,246,0,254,246,265,276,268,254,269],
[271,292,294,274,259,263,246,0,292,278,292,295,292,282],
[233,253,255,241,250,240,254,208,0,225,242,255,243,252],
[253,264,266,248,276,284,235,222,275,0,288,276,265,264],
[204,238,246,245,213,232,224,208,258,212,0,253,227,213],
[218,265,234,213,239,224,232,205,245,224,247,0,248,226],
[239,270,246,243,263,257,246,208,257,235,273,252,0,243],
[246,239,246,256,250,251,231,218,248,236,287,274,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda1(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 500, 200, "ME", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/me/me_14_500.csv", index=False, header=False)

import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,30,23,28,23,27,27,23,21,24,31,29,26,30],
[20,0,26,27,21,26,21,21,20,26,23,27,24,24],
[27,24,0,24,17,29,24,21,20,23,23,29,17,26],
[22,23,26,0,27,27,26,29,19,21,25,24,28,24],
[27,29,33,23,0,27,26,26,29,26,29,31,27,31],
[23,24,21,23,23,0,19,18,21,20,29,25,21,32],
[23,29,26,24,24,31,0,27,21,24,22,35,23,29],
[27,29,29,21,24,32,23,0,23,23,29,29,27,26],
[29,30,30,31,21,29,29,27,0,22,32,37,28,33],
[26,24,27,29,24,30,26,27,28,0,31,31,28,29],
[19,27,27,25,21,21,28,21,18,19,0,26,21,24],
[21,23,21,26,19,25,15,21,13,19,24,0,23,23],
[24,26,33,22,23,29,27,23,22,22,29,27,0,33],
[20,26,24,26,19,18,21,24,17,21,26,27,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 1, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,24,26,25,26,19,22,29,28,26,24,26,21],
[32,0,27,27,26,27,29,24,28,32,32,27,31,24],
[26,23,0,29,28,27,25,25,28,31,30,26,28,24],
[24,23,21,0,30,19,21,21,22,28,26,23,25,19],
[25,24,22,20,0,24,23,23,23,32,26,23,30,26],
[24,23,23,31,26,0,26,24,27,32,31,29,29,20],
[31,21,25,29,27,24,0,23,25,35,32,29,31,27],
[28,26,25,29,27,26,27,0,25,31,29,26,27,25],
[21,22,22,28,27,23,25,25,0,29,27,26,30,21],
[22,18,19,22,18,18,15,19,21,0,21,17,21,20],
[24,18,20,24,24,19,18,21,23,29,0,18,22,22],
[26,23,24,27,27,21,21,24,24,33,32,0,36,25],
[24,19,22,25,20,21,19,23,20,29,28,14,0,23],
[29,26,26,31,24,30,23,25,29,30,28,25,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 2, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,24,30,29,19,31,23,20,23,28,28,27,27],
[23,0,24,25,21,17,19,20,18,24,30,27,23,21],
[26,26,0,27,28,22,28,27,25,27,29,25,25,27],
[20,25,23,0,29,22,26,17,19,22,28,26,19,22],
[21,29,22,21,0,22,25,23,17,27,26,23,19,26],
[31,33,28,28,28,0,32,25,22,30,28,26,27,27],
[19,31,22,24,25,18,0,27,23,22,28,28,19,22],
[27,30,23,33,27,25,23,0,21,26,34,28,32,23],
[30,32,25,31,33,28,27,29,0,25,31,30,27,27],
[27,26,23,28,23,20,28,24,25,0,28,26,27,25],
[22,20,21,22,24,22,22,16,19,22,0,24,24,19],
[22,23,25,24,27,24,22,22,20,24,26,0,23,24],
[23,27,25,31,31,23,31,18,23,23,26,27,0,26],
[23,29,23,28,24,23,28,27,23,25,31,26,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 3, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,24,22,24,22,24,37,18,25,23,26,26,26],
[23,0,29,21,27,20,18,32,31,28,26,29,26,21],
[26,21,0,24,21,15,17,36,23,19,28,39,16,20],
[28,29,26,0,21,25,27,32,29,19,21,21,15,27],
[26,23,29,29,0,14,23,38,27,28,26,24,24,25],
[28,30,35,25,36,0,29,40,29,36,36,40,31,35],
[26,32,33,23,27,21,0,31,27,33,37,32,29,28],
[13,18,14,18,12,10,19,0,19,10,17,24,8,12],
[32,19,27,21,23,21,23,31,0,23,21,37,14,26],
[25,22,31,31,22,14,17,40,27,0,28,29,11,26],
[27,24,22,29,24,14,13,33,29,22,0,31,15,30],
[24,21,11,29,26,10,18,26,13,21,19,0,10,20],
[24,24,34,35,26,19,21,42,36,39,35,40,0,31],
[24,29,30,23,25,15,22,38,24,24,20,30,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 4, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,22,26,25,20,23,22,26,22,25,22,24,29],
[33,0,24,25,34,24,27,23,30,31,29,30,29,30],
[28,26,0,23,27,29,17,23,33,29,25,28,27,31],
[24,25,27,0,24,21,22,20,28,26,26,30,28,30],
[25,16,23,26,0,18,22,22,29,31,34,28,30,26],
[30,26,21,29,32,0,29,25,31,28,29,32,27,27],
[27,23,33,28,28,21,0,25,31,23,30,26,30,31],
[28,27,27,30,28,25,25,0,29,30,28,33,33,28],
[24,20,17,22,21,19,19,21,0,24,20,23,20,24],
[28,19,21,24,19,22,27,20,26,0,20,31,24,25],
[25,21,25,24,16,21,20,22,30,30,0,27,26,29],
[28,20,22,20,22,18,24,17,27,19,23,0,19,26],
[26,21,23,22,20,23,20,17,30,26,24,31,0,21],
[21,20,19,20,24,23,19,22,26,25,21,24,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 5, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,27,22,28,22,21,28,23,30,31,23,26,26],
[24,0,16,21,23,28,26,22,27,24,29,31,29,25],
[23,34,0,27,26,24,25,32,28,27,36,25,30,23],
[28,29,23,0,27,26,25,36,28,26,35,31,32,27],
[22,27,24,23,0,18,24,28,21,31,29,23,32,19],
[28,22,26,24,32,0,28,33,31,24,35,26,31,28],
[29,24,25,25,26,22,0,27,24,27,32,25,23,24],
[22,28,18,14,22,17,23,0,19,23,26,26,28,22],
[27,23,22,22,29,19,26,31,0,22,32,31,28,28],
[20,26,23,24,19,26,23,27,28,0,30,25,25,25],
[19,21,14,15,21,15,18,24,18,20,0,21,22,22],
[27,19,25,19,27,24,25,24,19,25,29,0,25,19],
[24,21,20,18,18,19,27,22,22,25,28,25,0,22],
[24,25,27,23,31,22,26,28,22,25,28,31,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 6, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,21,30,23,24,30,28,29,17,27,24,25,23],
[28,0,23,29,28,29,29,32,27,24,29,29,28,27],
[29,27,0,34,24,27,32,23,25,23,28,25,28,28],
[20,21,16,0,21,20,22,17,15,16,21,19,19,15],
[27,22,26,29,0,25,28,25,28,24,29,32,25,29],
[26,21,23,30,25,0,26,23,24,19,22,29,28,22],
[20,21,18,28,22,24,0,21,23,21,26,23,24,19],
[22,18,27,33,25,27,29,0,30,28,28,26,22,29],
[21,23,25,35,22,26,27,20,0,19,23,26,23,26],
[33,26,27,34,26,31,29,22,31,0,26,28,30,23],
[23,21,22,29,21,28,24,22,27,24,0,25,25,26],
[26,21,25,31,18,21,27,24,24,22,25,0,20,23],
[25,22,22,31,25,22,26,28,27,20,25,30,0,25],
[27,23,22,35,21,28,31,21,24,27,24,27,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 7, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,23,27,23,25,26,27,23,30,23,26,29,30],
[17,0,22,22,16,14,23,20,14,22,24,21,22,20],
[27,28,0,18,21,25,21,30,15,23,27,23,29,26],
[23,28,32,0,20,23,27,30,21,28,21,22,24,27],
[27,34,29,30,0,25,30,36,23,25,27,35,31,33],
[25,36,25,27,25,0,30,32,28,22,23,24,27,34],
[24,27,29,23,20,20,0,32,26,25,32,28,30,27],
[23,30,20,20,14,18,18,0,18,27,23,22,21,20],
[27,36,35,29,27,22,24,32,0,29,24,31,33,31],
[20,28,27,22,25,28,25,23,21,0,27,18,22,33],
[27,26,23,29,23,27,18,27,26,23,0,24,27,29],
[24,29,27,28,15,26,22,28,19,32,26,0,24,25],
[21,28,21,26,19,23,20,29,17,28,23,26,0,23],
[20,30,24,23,17,16,23,30,19,17,21,25,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 8, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,39,38,29,32,34,25,35,35,34,32,30,33],
[17,0,27,21,17,21,22,15,22,23,21,15,26,20],
[11,23,0,24,19,21,23,17,26,16,25,23,19,28],
[12,29,26,0,19,24,25,23,23,23,19,21,19,26],
[21,33,31,31,0,33,25,32,32,24,32,25,23,31],
[18,29,29,26,17,0,26,21,25,29,31,20,21,28],
[16,28,27,25,25,24,0,21,25,22,23,19,23,25],
[25,35,33,27,18,29,29,0,32,28,30,27,27,28],
[15,28,24,27,18,25,25,18,0,23,22,26,22,32],
[15,27,34,27,26,21,28,22,27,0,31,27,24,27],
[16,29,25,31,18,19,27,20,28,19,0,21,18,32],
[18,35,27,29,25,30,31,23,24,23,29,0,25,35],
[20,24,31,31,27,29,27,23,28,26,32,25,0,30],
[17,30,22,24,19,22,25,22,18,23,18,15,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 9, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,25,21,24,23,26,25,32,22,29,24,31,25],
[23,0,21,24,20,24,26,23,21,17,23,24,29,20],
[25,29,0,24,28,30,33,27,29,23,34,31,29,35],
[29,26,26,0,27,26,36,34,23,27,30,31,31,32],
[26,30,22,23,0,30,30,26,30,22,37,28,27,30],
[27,26,20,24,20,0,28,26,17,16,26,23,27,25],
[24,24,17,14,20,22,0,20,18,20,26,22,26,25],
[25,27,23,16,24,24,30,0,19,19,26,28,30,22],
[18,29,21,27,20,33,32,31,0,18,29,27,25,33],
[28,33,27,23,28,34,30,31,32,0,35,34,35,34],
[21,27,16,20,13,24,24,24,21,15,0,24,24,18],
[26,26,19,19,22,27,28,22,23,16,26,0,31,22],
[19,21,21,19,23,23,24,20,25,15,26,19,0,25],
[25,30,15,18,20,25,25,28,17,16,32,28,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 10, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,21,26,19,27,27,36,23,35,30,28,22,22],
[20,0,19,28,16,18,27,26,15,33,27,27,26,22],
[29,31,0,29,23,25,25,28,16,27,33,26,27,32],
[24,22,21,0,15,27,25,26,16,27,26,22,27,17],
[31,34,27,35,0,26,36,37,25,36,37,34,33,33],
[23,32,25,23,24,0,28,27,17,33,30,23,31,27],
[23,23,25,25,14,22,0,26,16,35,27,19,25,22],
[14,24,22,24,13,23,24,0,16,27,25,23,25,25],
[27,35,34,34,25,33,34,34,0,38,34,36,33,23],
[15,17,23,23,14,17,15,23,12,0,25,17,18,15],
[20,23,17,24,13,20,23,25,16,25,0,25,29,22],
[22,23,24,28,16,27,31,27,14,33,25,0,27,25],
[28,24,23,23,17,19,25,25,17,32,21,23,0,16],
[28,28,18,33,17,23,28,25,27,35,28,25,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 11, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,27,20,20,26,31,24,19,26,22,28,24,31],
[22,0,22,16,18,25,25,20,16,29,19,25,25,29],
[23,28,0,25,18,25,26,25,24,23,29,29,26,30],
[30,34,25,0,23,27,30,26,26,31,32,30,27,36],
[30,32,32,27,0,33,38,24,25,27,34,30,24,33],
[24,25,25,23,17,0,34,23,24,24,27,26,19,32],
[19,25,24,20,12,16,0,23,16,21,20,19,17,28],
[26,30,25,24,26,27,27,0,28,27,24,22,20,28],
[31,34,26,24,25,26,34,22,0,28,25,30,23,31],
[24,21,27,19,23,26,29,23,22,0,24,25,25,28],
[28,31,21,18,16,23,30,26,25,26,0,29,22,22],
[22,25,21,20,20,24,31,28,20,25,21,0,22,31],
[26,25,24,23,26,31,33,30,27,25,28,28,0,34],
[19,21,20,14,17,18,22,22,19,22,28,19,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 12, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,25,28,23,20,24,23,32,30,24,26,26,26],
[23,0,22,24,19,23,25,25,33,30,31,29,28,24],
[25,28,0,32,26,19,25,25,31,26,30,25,28,19],
[22,26,18,0,16,23,24,21,28,19,24,23,21,20],
[27,31,24,34,0,28,30,32,36,33,36,30,33,29],
[30,27,31,27,22,0,27,25,28,28,30,27,24,33],
[26,25,25,26,20,23,0,25,38,29,25,29,27,28],
[27,25,25,29,18,25,25,0,31,26,25,28,28,23],
[18,17,19,22,14,22,12,19,0,16,16,20,20,19],
[20,20,24,31,17,22,21,24,34,0,25,26,25,22],
[26,19,20,26,14,20,25,25,34,25,0,27,23,24],
[24,21,25,27,20,23,21,22,30,24,23,0,24,26],
[24,22,22,29,17,26,23,22,30,25,27,26,0,21],
[24,26,31,30,21,17,22,27,31,28,26,24,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 13, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,25,31,26,21,20,21,28,27,26,26,26,26],
[24,0,18,20,24,18,18,18,21,26,19,23,20,19],
[25,32,0,35,32,31,27,22,36,31,27,25,30,24],
[19,30,15,0,26,19,18,22,28,27,23,27,23,23],
[24,26,18,24,0,18,18,19,26,25,27,28,26,29],
[29,32,19,31,32,0,19,21,32,28,27,23,26,21],
[30,32,23,32,32,31,0,24,35,28,30,33,31,28],
[29,32,28,28,31,29,26,0,36,35,29,33,25,26],
[22,29,14,22,24,18,15,14,0,26,23,24,17,21],
[23,24,19,23,25,22,22,15,24,0,24,29,22,22],
[24,31,23,27,23,23,20,21,27,26,0,29,26,23],
[24,27,25,23,22,27,17,17,26,21,21,0,22,26],
[24,30,20,27,24,24,19,25,33,28,24,28,0,29],
[24,31,26,27,21,29,22,24,29,28,27,24,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 14, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,26,23,20,19,29,25,24,28,25,21,24,24],
[37,0,27,30,29,23,33,31,31,29,34,27,33,30],
[24,23,0,27,25,26,33,23,27,24,32,28,26,25],
[27,20,23,0,25,25,27,30,29,24,33,23,32,27],
[30,21,25,25,0,25,24,27,26,25,24,26,26,29],
[31,27,24,25,25,0,34,27,30,31,32,23,34,27],
[21,17,17,23,26,16,0,18,19,17,25,20,31,23],
[25,19,27,20,23,23,32,0,26,24,24,19,26,25],
[26,19,23,21,24,20,31,24,0,20,27,23,30,22],
[22,21,26,26,25,19,33,26,30,0,26,23,30,29],
[25,16,18,17,26,18,25,26,23,24,0,16,25,21],
[29,23,22,27,24,27,30,31,27,27,34,0,28,25],
[26,17,24,18,24,16,19,24,20,20,25,22,0,22],
[26,20,25,23,21,23,27,25,28,21,29,25,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 15, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,27,27,32,32,19,30,23,29,15,30,29,24],
[25,0,21,26,27,32,24,32,21,19,11,35,33,18],
[23,29,0,24,23,18,10,25,29,14,23,26,29,29],
[23,24,26,0,28,29,16,22,11,24,19,32,17,25],
[18,23,27,22,0,17,16,22,16,30,25,25,17,25],
[18,18,32,21,33,0,15,12,19,17,20,28,17,25],
[31,26,40,34,34,35,0,21,27,25,28,40,26,33],
[20,18,25,28,28,38,29,0,28,23,27,31,27,18],
[27,29,21,39,34,31,23,22,0,19,29,27,28,26],
[21,31,36,26,20,33,25,27,31,0,36,34,29,32],
[35,39,27,31,25,30,22,23,21,14,0,37,32,20],
[20,15,24,18,25,22,10,19,23,16,13,0,29,25],
[21,17,21,33,33,33,24,23,22,21,18,21,0,25],
[26,32,21,25,25,25,17,32,24,18,30,25,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 16, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,34,26,33,17,26,24,25,32,25,24,21,31],
[24,0,28,20,32,26,18,25,30,35,27,28,22,27],
[16,22,0,16,33,13,13,12,25,22,16,28,24,25],
[24,30,34,0,39,22,27,22,30,35,28,31,24,32],
[17,18,17,11,0,15,20,16,22,24,17,23,22,29],
[33,24,37,28,35,0,27,29,28,36,24,26,21,27],
[24,32,37,23,30,23,0,20,34,42,29,27,30,29],
[26,25,38,28,34,21,30,0,30,31,19,27,26,33],
[25,20,25,20,28,22,16,20,0,38,26,31,19,28],
[18,15,28,15,26,14,8,19,12,0,20,18,16,26],
[25,23,34,22,33,26,21,31,24,30,0,29,29,33],
[26,22,22,19,27,24,23,23,19,32,21,0,19,27],
[29,28,26,26,28,29,20,24,31,34,21,31,0,29],
[19,23,25,18,21,23,21,17,22,24,17,23,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 17, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,28,28,21,29,28,25,23,30,25,29,18,20],
[20,0,22,29,19,31,27,23,21,22,21,25,20,22],
[22,28,0,30,20,26,26,19,23,23,24,23,19,22],
[22,21,20,0,20,23,20,18,19,19,22,20,17,22],
[29,31,30,30,0,35,28,27,25,26,28,25,19,21],
[21,19,24,27,15,0,22,19,21,20,20,18,16,19],
[22,23,24,30,22,28,0,21,24,25,21,24,17,23],
[25,27,31,32,23,31,29,0,26,26,23,26,26,25],
[27,29,27,31,25,29,26,24,0,30,24,26,26,27],
[20,28,27,31,24,30,25,24,20,0,25,23,23,24],
[25,29,26,28,22,30,29,27,26,25,0,28,21,22],
[21,25,27,30,25,32,26,24,24,27,22,0,20,25],
[32,30,31,33,31,34,33,24,24,27,29,30,0,28],
[30,28,28,28,29,31,27,25,23,26,28,25,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 18, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,30,18,25,26,20,17,20,17,30,24,23,24],
[28,0,30,24,29,35,28,22,25,23,30,29,33,31],
[20,20,0,26,23,28,18,18,21,20,22,25,22,17],
[32,26,24,0,24,28,21,17,24,24,33,23,30,21],
[25,21,27,26,0,38,26,22,22,28,28,25,28,29],
[24,15,22,22,12,0,12,13,15,13,24,22,18,22],
[30,22,32,29,24,38,0,19,26,21,29,28,27,25],
[33,28,32,33,28,37,31,0,27,23,34,33,25,27],
[30,25,29,26,28,35,24,23,0,29,33,30,31,29],
[33,27,30,26,22,37,29,27,21,0,26,32,26,29],
[20,20,28,17,22,26,21,16,17,24,0,29,22,21],
[26,21,25,27,25,28,22,17,20,18,21,0,26,22],
[27,17,28,20,22,32,23,25,19,24,28,24,0,23],
[26,19,33,29,21,28,25,23,21,21,29,28,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 19, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,23,16,24,21,17,30,17,25,19,35,23,20],
[30,0,19,18,14,19,27,39,30,30,25,29,24,26],
[27,31,0,16,21,21,29,37,30,27,18,29,29,26],
[34,32,34,0,27,24,25,37,31,27,21,31,33,29],
[26,36,29,23,0,18,29,34,32,28,31,34,41,36],
[29,31,29,26,32,0,18,35,23,26,31,26,38,32],
[33,23,21,25,21,32,0,44,34,23,28,33,25,29],
[20,11,13,13,16,15,6,0,16,16,14,22,17,21],
[33,20,20,19,18,27,16,34,0,23,22,25,30,33],
[25,20,23,23,22,24,27,34,27,0,16,30,28,27],
[31,25,32,29,19,19,22,36,28,34,0,39,34,37],
[15,21,21,19,16,24,17,28,25,20,11,0,27,22],
[27,26,21,17,9,12,25,33,20,22,16,23,0,16],
[30,24,24,21,14,18,21,29,17,23,13,28,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 20, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,33,27,25,27,33,31,32,27,20,27,26,20],
[27,0,30,28,38,27,34,29,27,16,21,23,21,31],
[17,20,0,26,29,27,23,27,22,18,18,25,24,19],
[23,22,24,0,29,21,33,28,25,22,20,24,22,13],
[25,12,21,21,0,15,27,22,18,14,15,12,15,21],
[23,23,23,29,35,0,26,28,26,24,12,21,23,23],
[17,16,27,17,23,24,0,21,19,19,16,14,14,13],
[19,21,23,22,28,22,29,0,23,12,15,23,18,24],
[18,23,28,25,32,24,31,27,0,21,19,18,25,23],
[23,34,32,28,36,26,31,38,29,0,19,26,32,26],
[30,29,32,30,35,38,34,35,31,31,0,24,34,28],
[23,27,25,26,38,29,36,27,32,24,26,0,23,30],
[24,29,26,28,35,27,36,32,25,18,16,27,0,26],
[30,19,31,37,29,27,37,26,27,24,22,20,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 21, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,19,26,20,22,25,28,32,23,26,22,22,28],
[31,0,26,32,26,29,30,28,28,35,31,22,33,31],
[31,24,0,27,22,24,17,34,30,34,27,31,21,30],
[24,18,23,0,15,17,18,26,24,28,17,23,26,20],
[30,24,28,35,0,27,29,32,31,37,31,34,28,29],
[28,21,26,33,23,0,20,27,24,26,30,23,17,30],
[25,20,33,32,21,30,0,29,33,34,33,34,24,33],
[22,22,16,24,18,23,21,0,25,25,20,15,23,25],
[18,22,20,26,19,26,17,25,0,24,23,21,22,22],
[27,15,16,22,13,24,16,25,26,0,28,15,16,17],
[24,19,23,33,19,20,17,30,27,22,0,27,23,20],
[28,28,19,27,16,27,16,35,29,35,23,0,20,25],
[28,17,29,24,22,33,26,27,28,34,27,30,0,24],
[22,19,20,30,21,20,17,25,28,33,30,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 22, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,20,25,26,24,25,27,21,21,21,27,22,19],
[22,0,21,19,25,25,23,25,20,23,21,26,20,23],
[30,29,0,26,25,32,27,27,24,26,24,30,27,29],
[25,31,24,0,26,28,23,27,24,25,21,30,26,21],
[24,25,25,24,0,32,24,24,23,27,20,28,24,24],
[26,25,18,22,18,0,22,21,21,18,19,24,22,18],
[25,27,23,27,26,28,0,21,23,29,25,27,24,28],
[23,25,23,23,26,29,29,0,24,25,20,30,23,23],
[29,30,26,26,27,29,27,26,0,24,25,30,27,28],
[29,27,24,25,23,32,21,25,26,0,19,31,27,24],
[29,29,26,29,30,31,25,30,25,31,0,33,29,29],
[23,24,20,20,22,26,23,20,20,19,17,0,21,20],
[28,30,23,24,26,28,26,27,23,23,21,29,0,24],
[31,27,21,29,26,32,22,27,22,26,21,30,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 23, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,31,28,29,21,25,24,33,27,30,31,30],
[22,0,21,23,25,22,22,22,18,23,21,24,28,22],
[24,29,0,31,33,31,25,27,27,32,27,33,27,34],
[19,27,19,0,29,33,20,29,17,20,20,24,18,20],
[22,25,17,21,0,33,24,31,24,29,19,23,23,29],
[21,28,19,17,17,0,20,26,17,22,19,22,19,20],
[29,28,25,30,26,30,0,22,21,28,24,32,29,26],
[25,28,23,21,19,24,28,0,23,25,21,24,23,20],
[26,32,23,33,26,33,29,27,0,33,28,33,33,32],
[17,27,18,30,21,28,22,25,17,0,28,24,22,24],
[23,29,23,30,31,31,26,29,22,22,0,24,27,32],
[20,26,17,26,27,28,18,26,17,26,26,0,18,26],
[19,22,23,32,27,31,21,27,17,28,23,32,0,26],
[20,28,16,30,21,30,24,30,18,26,18,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 24, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,30,29,32,28,31,30,21,29,28,36,30,31],
[17,0,22,25,25,19,25,25,21,23,24,27,27,29],
[20,28,0,37,32,27,31,33,19,29,29,32,33,23],
[21,25,13,0,28,21,23,18,15,20,22,21,30,21],
[18,25,18,22,0,19,14,19,8,20,20,21,25,21],
[22,31,23,29,31,0,29,31,27,31,26,31,38,29],
[19,25,19,27,36,21,0,23,16,24,27,19,23,27],
[20,25,17,32,31,19,27,0,13,26,24,28,22,24],
[29,29,31,35,42,23,34,37,0,33,36,35,34,32],
[21,27,21,30,30,19,26,24,17,0,21,15,24,18],
[22,26,21,28,30,24,23,26,14,29,0,32,26,26],
[14,23,18,29,29,19,31,22,15,35,18,0,23,21],
[20,23,17,20,25,12,27,28,16,26,24,27,0,19],
[19,21,27,29,29,21,23,26,18,32,24,29,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 25, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,28,23,26,26,21,29,25,32,34,18,21,35],
[26,0,27,22,29,29,23,28,24,29,31,12,25,31],
[22,23,0,24,25,25,19,29,28,25,30,19,25,31],
[27,28,26,0,20,21,25,23,23,25,28,17,25,34],
[24,21,25,30,0,33,23,26,23,33,33,22,25,28],
[24,21,25,29,17,0,25,27,20,24,25,23,23,28],
[29,27,31,25,27,25,0,34,29,27,33,27,24,30],
[21,22,21,27,24,23,16,0,29,24,28,17,24,27],
[25,26,22,27,27,30,21,21,0,31,34,25,31,29],
[18,21,25,25,17,26,23,26,19,0,28,10,21,28],
[16,19,20,22,17,25,17,22,16,22,0,14,18,22],
[32,38,31,33,28,27,23,33,25,40,36,0,32,37],
[29,25,25,25,25,27,26,26,19,29,32,18,0,36],
[15,19,19,16,22,22,20,23,21,22,28,13,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 26, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,18,26,21,32,23,32,19,23,21,21,21,21],
[29,0,28,26,24,27,18,27,23,26,25,25,24,28],
[32,22,0,23,27,29,26,32,21,27,19,26,20,26],
[24,24,27,0,23,30,26,34,25,28,25,25,20,23],
[29,26,23,27,0,31,32,26,27,24,26,26,27,27],
[18,23,21,20,19,0,20,27,23,18,20,22,15,17],
[27,32,24,24,18,30,0,32,23,22,26,25,22,22],
[18,23,18,16,24,23,18,0,19,17,15,16,20,23],
[31,27,29,25,23,27,27,31,0,20,27,24,26,22],
[27,24,23,22,26,32,28,33,30,0,29,27,28,31],
[29,25,31,25,24,30,24,35,23,21,0,31,27,24],
[29,25,24,25,24,28,25,34,26,23,19,0,28,26],
[29,26,30,30,23,35,28,30,24,22,23,22,0,23],
[29,22,24,27,23,33,28,27,28,19,26,24,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 27, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,21,32,20,25,19,23,21,27,26,31,20,24],
[26,0,31,29,25,26,27,27,28,28,30,24,25,24],
[29,19,0,26,19,21,20,18,19,26,20,24,23,21],
[18,21,24,0,17,16,23,20,16,18,19,27,24,22],
[30,25,31,33,0,27,28,25,29,30,19,25,28,29],
[25,24,29,34,23,0,26,23,22,21,27,27,29,23],
[31,23,30,27,22,24,0,28,21,30,27,26,29,22],
[27,23,32,30,25,27,22,0,27,24,24,21,24,22],
[29,22,31,34,21,28,29,23,0,29,28,25,25,24],
[23,22,24,32,20,29,20,26,21,0,27,25,23,22],
[24,20,30,31,31,23,23,26,22,23,0,25,26,25],
[19,26,26,23,25,23,24,29,25,25,25,0,25,29],
[30,25,27,26,22,21,21,26,25,27,24,25,0,23],
[26,26,29,28,21,27,28,28,26,28,25,21,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 28, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,24,21,26,22,17,27,20,18,13,29,17,31],
[30,0,25,26,26,20,24,26,25,21,18,29,22,29],
[26,25,0,29,30,22,22,29,24,29,26,25,18,26],
[29,24,21,0,31,21,22,29,17,25,14,30,20,29],
[24,24,20,19,0,11,25,30,24,28,16,27,15,28],
[28,30,28,29,39,0,24,39,30,30,21,33,23,26],
[33,26,28,28,25,26,0,26,19,16,23,30,26,34],
[23,24,21,21,20,11,24,0,20,20,13,25,19,28],
[30,25,26,33,26,20,31,30,0,27,27,31,25,30],
[32,29,21,25,22,20,34,30,23,0,16,32,23,28],
[37,32,24,36,34,29,27,37,23,34,0,34,26,31],
[21,21,25,20,23,17,20,25,19,18,16,0,20,30],
[33,28,32,30,35,27,24,31,25,27,24,30,0,33],
[19,21,24,21,22,24,16,22,20,22,19,20,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 29, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,22,24,26,23,24,23,29,20,20,23,21,26],
[29,0,30,28,27,24,24,27,24,26,31,24,24,29],
[28,20,0,28,25,23,27,26,25,32,25,22,23,29],
[26,22,22,0,29,24,21,26,24,25,21,20,24,25],
[24,23,25,21,0,24,24,23,24,24,23,18,20,27],
[27,26,27,26,26,0,25,27,24,26,32,28,25,28],
[26,26,23,29,26,25,0,30,28,28,27,22,26,29],
[27,23,24,24,27,23,20,0,20,26,27,17,20,30],
[21,26,25,26,26,26,22,30,0,28,25,24,25,31],
[30,24,18,25,26,24,22,24,22,0,23,21,23,31],
[30,19,25,29,27,18,23,23,25,27,0,22,21,31],
[27,26,28,30,32,22,28,33,26,29,28,0,25,27],
[29,26,27,26,30,25,24,30,25,27,29,25,0,27],
[24,21,21,25,23,22,21,20,19,19,19,23,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 30, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,28,32,32,28,43,18,36,28,22,31,37,36],
[13,0,20,18,17,19,22,15,21,24,21,25,22,18],
[22,30,0,19,21,28,32,16,31,37,22,26,26,30],
[18,32,31,0,31,21,38,13,28,32,28,28,26,13],
[18,33,29,19,0,17,34,13,25,28,13,22,22,23],
[22,31,22,29,33,0,36,11,35,31,13,25,29,33],
[7,28,18,12,16,14,0,6,26,28,4,22,22,13],
[32,35,34,37,37,39,44,0,40,29,19,39,38,31],
[14,29,19,22,25,15,24,10,0,23,14,19,17,13],
[22,26,13,18,22,19,22,21,27,0,5,16,25,18],
[28,29,28,22,37,37,46,31,36,45,0,40,40,30],
[19,25,24,22,28,25,28,11,31,34,10,0,18,18],
[13,28,24,24,28,21,28,12,33,25,10,32,0,21],
[14,32,20,37,27,17,37,19,37,32,20,32,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 31, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,27,31,25,25,26,26,31,22,18,25,26,21],
[29,0,28,24,27,31,24,24,30,30,23,34,22,23],
[23,22,0,24,21,22,21,24,26,25,22,29,26,28],
[19,26,26,0,26,20,22,27,27,25,27,35,25,25],
[25,23,29,24,0,31,30,27,23,25,29,30,28,28],
[25,19,28,30,19,0,27,28,22,18,17,33,21,17],
[24,26,29,28,20,23,0,27,27,23,21,31,25,26],
[24,26,26,23,23,22,23,0,25,27,23,30,16,28],
[19,20,24,23,27,28,23,25,0,29,23,35,24,22],
[28,20,25,25,25,32,27,23,21,0,27,28,30,27],
[32,27,28,23,21,33,29,27,27,23,0,31,32,25],
[25,16,21,15,20,17,19,20,15,22,19,0,16,15],
[24,28,24,25,22,29,25,34,26,20,18,34,0,31],
[29,27,22,25,22,33,24,22,28,23,25,35,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 32, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,33,27,26,21,29,21,24,28,34,27,22,22],
[31,0,38,36,25,34,28,28,24,34,30,29,29,27],
[17,12,0,19,18,30,25,14,19,20,17,18,20,12],
[23,14,31,0,16,23,25,24,24,24,29,20,23,21],
[24,25,32,34,0,33,34,24,27,32,27,24,29,19],
[29,16,20,27,17,0,28,20,18,27,25,29,26,19],
[21,22,25,25,16,22,0,26,21,24,27,28,26,15],
[29,22,36,26,26,30,24,0,28,30,34,24,23,20],
[26,26,31,26,23,32,29,22,0,24,33,28,23,28],
[22,16,30,26,18,23,26,20,26,0,23,19,23,19],
[16,20,33,21,23,25,23,16,17,27,0,21,20,19],
[23,21,32,30,26,21,22,26,22,31,29,0,21,22],
[28,21,30,27,21,24,24,27,27,27,30,29,0,25],
[28,23,38,29,31,31,35,30,22,31,31,28,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 33, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,17,29,19,22,28,27,42,33,24,32,23,13],
[22,0,20,23,16,16,16,31,33,32,24,22,26,22],
[33,30,0,25,24,19,31,27,36,39,30,30,31,24],
[21,27,25,0,27,15,32,32,36,36,29,22,28,25],
[31,34,26,23,0,22,30,37,38,41,38,32,31,14],
[28,34,31,35,28,0,28,37,38,34,37,34,40,22],
[22,34,19,18,20,22,0,26,27,34,25,25,32,19],
[23,19,23,18,13,13,24,0,33,32,26,22,25,6],
[8,17,14,14,12,12,23,17,0,20,18,20,16,10],
[17,18,11,14,9,16,16,18,30,0,13,16,29,14],
[26,26,20,21,12,13,25,24,32,37,0,27,24,15],
[18,28,20,28,18,16,25,28,30,34,23,0,28,17],
[27,24,19,22,19,10,18,25,34,21,26,22,0,17],
[37,28,26,25,36,28,31,44,40,36,35,33,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 34, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,22,26,27,28,26,27,17,25,24,25,27,16],
[24,0,15,20,22,22,16,18,22,22,28,27,24,18],
[28,35,0,21,27,24,26,25,18,31,31,26,27,18],
[24,30,29,0,27,24,26,32,26,30,33,31,23,26],
[23,28,23,23,0,23,24,22,23,23,22,22,23,17],
[22,28,26,26,27,0,27,26,28,30,32,28,25,24],
[24,34,24,24,26,23,0,25,21,32,28,26,24,16],
[23,32,25,18,28,24,25,0,26,28,34,19,26,31],
[33,28,32,24,27,22,29,24,0,27,27,31,23,23],
[25,28,19,20,27,20,18,22,23,0,30,20,22,25],
[26,22,19,17,28,18,22,16,23,20,0,19,20,19],
[25,23,24,19,28,22,24,31,19,30,31,0,28,26],
[23,26,23,27,27,25,26,24,27,28,30,22,0,25],
[34,32,32,24,33,26,34,19,27,25,31,24,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 35, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,29,23,32,36,25,29,25,31,32,30,27,26],
[24,0,23,34,32,36,28,40,27,25,34,21,31,30],
[21,27,0,35,40,28,15,31,27,23,29,25,32,32],
[27,16,15,0,32,23,15,26,24,21,24,27,23,26],
[18,18,10,18,0,15,15,19,13,16,23,10,15,13],
[14,14,22,27,35,0,14,28,23,18,21,18,26,19],
[25,22,35,35,35,36,0,30,28,32,32,28,34,30],
[21,10,19,24,31,22,20,0,12,16,22,17,29,25],
[25,23,23,26,37,27,22,38,0,20,30,21,27,25],
[19,25,27,29,34,32,18,34,30,0,30,24,33,26],
[18,16,21,26,27,29,18,28,20,20,0,22,27,27],
[20,29,25,23,40,32,22,33,29,26,28,0,31,23],
[23,19,18,27,35,24,16,21,23,17,23,19,0,22],
[24,20,18,24,37,31,20,25,25,24,23,27,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 36, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,27,23,26,27,19,21,24,27,24,26,28,30],
[26,0,28,20,24,30,27,22,26,23,29,26,20,27],
[23,22,0,22,21,20,15,22,25,25,22,25,17,26],
[27,30,28,0,23,23,19,29,30,26,24,25,18,28],
[24,26,29,27,0,29,24,24,27,29,28,27,27,34],
[23,20,30,27,21,0,25,26,25,25,27,23,23,29],
[31,23,35,31,26,25,0,27,34,29,35,35,31,34],
[29,28,28,21,26,24,23,0,29,26,25,22,26,31],
[26,24,25,20,23,25,16,21,0,25,20,22,24,25],
[23,27,25,24,21,25,21,24,25,0,31,25,25,28],
[26,21,28,26,22,23,15,25,30,19,0,26,21,28],
[24,24,25,25,23,27,15,28,28,25,24,0,26,26],
[22,30,33,32,23,27,19,24,26,25,29,24,0,32],
[20,23,24,22,16,21,16,19,25,22,22,24,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 37, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,26,37,33,25,21,39,31,30,24,32,23,36],
[14,0,19,29,26,15,21,30,27,19,18,16,15,17],
[24,31,0,29,31,15,22,35,27,28,21,31,26,30],
[13,21,21,0,30,17,25,32,29,21,19,19,24,17],
[17,24,19,20,0,17,15,31,23,19,15,20,13,21],
[25,35,35,33,33,0,27,41,32,28,29,34,27,35],
[29,29,28,25,35,23,0,37,29,25,27,33,27,34],
[11,20,15,18,19,9,13,0,13,7,14,13,13,10],
[19,23,23,21,27,18,21,37,0,18,26,28,33,29],
[20,31,22,29,31,22,25,43,32,0,21,21,29,30],
[26,32,29,31,35,21,23,36,24,29,0,38,30,41],
[18,34,19,31,30,16,17,37,22,29,12,0,23,28],
[27,35,24,26,37,23,23,37,17,21,20,27,0,31],
[14,33,20,33,29,15,16,40,21,20,9,22,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 38, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,28,25,27,24,32,25,25,29,33,27,26],
[25,0,19,23,21,17,23,24,21,23,28,28,31,26],
[25,31,0,24,29,29,24,29,24,29,28,27,29,28],
[22,27,26,0,27,24,22,25,24,25,24,28,26,24],
[25,29,21,23,0,30,26,25,27,23,25,27,31,28],
[23,33,21,26,20,0,23,21,19,18,25,25,22,22],
[26,27,26,28,24,27,0,28,19,25,27,30,26,23],
[18,26,21,25,25,29,22,0,20,20,25,25,27,25],
[25,29,26,26,23,31,31,30,0,26,24,33,26,21],
[25,27,21,25,27,32,25,30,24,0,29,31,34,29],
[21,22,22,26,25,25,23,25,26,21,0,22,28,29],
[17,22,23,22,23,25,20,25,17,19,28,0,24,25],
[23,19,21,24,19,28,24,23,24,16,22,26,0,22],
[24,24,22,26,22,28,27,25,29,21,21,25,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 39, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,17,19,21,19,24,12,23,22,18,20,22,21],
[33,0,28,21,27,23,25,18,24,28,22,28,22,30],
[33,22,0,24,26,25,26,18,22,27,22,27,29,25],
[31,29,26,0,25,30,28,19,25,27,27,26,30,25],
[29,23,24,25,0,23,27,12,29,31,18,25,24,21],
[31,27,25,20,27,0,28,30,27,30,21,26,25,23],
[26,25,24,22,23,22,0,19,26,27,16,28,26,24],
[38,32,32,31,38,20,31,0,30,30,28,31,28,28],
[27,26,28,25,21,23,24,20,0,28,24,26,29,25],
[28,22,23,23,19,20,23,20,22,0,19,21,24,25],
[32,28,28,23,32,29,34,22,26,31,0,31,29,27],
[30,22,23,24,25,24,22,19,24,29,19,0,23,20],
[28,28,21,20,26,25,24,22,21,26,21,27,0,30],
[29,20,25,25,29,27,26,22,25,25,23,30,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 40, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,22,27,38,33,43,37,32,30,33,38,23,36],
[15,0,33,11,23,25,12,25,21,19,30,17,15,22],
[28,17,0,27,34,35,21,33,28,29,38,24,28,38],
[23,39,23,0,39,21,36,35,33,23,24,33,30,21],
[12,27,16,11,0,15,13,23,16,16,28,16,28,20],
[17,25,15,29,35,0,30,25,25,22,41,31,25,31],
[7,38,29,14,37,20,0,34,36,28,24,34,23,25],
[13,25,17,15,27,25,16,0,15,14,31,24,10,21],
[18,29,22,17,34,25,14,35,0,10,21,31,19,21],
[20,31,21,27,34,28,22,36,40,0,37,27,22,34],
[17,20,12,26,22,9,26,19,29,13,0,23,22,26],
[12,33,26,17,34,19,16,26,19,23,27,0,21,31],
[27,35,22,20,22,25,27,40,31,28,28,29,0,31],
[14,28,12,29,30,19,25,29,29,16,24,19,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 41, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,31,21,25,30,23,26,23,25,23,29,22,25],
[24,0,23,25,29,30,27,24,26,25,22,27,26,30],
[19,27,0,21,21,29,24,25,21,23,20,32,24,26],
[29,25,29,0,29,27,22,28,28,34,28,34,28,25],
[25,21,29,21,0,25,22,24,25,31,24,32,23,25],
[20,20,21,23,25,0,20,23,21,19,27,25,21,26],
[27,23,26,28,28,30,0,29,25,31,25,29,30,26],
[24,26,25,22,26,27,21,0,28,26,24,30,27,19],
[27,24,29,22,25,29,25,22,0,28,23,27,30,27],
[25,25,27,16,19,31,19,24,22,0,22,19,26,29],
[27,28,30,22,26,23,25,26,27,28,0,28,28,26],
[21,23,18,16,18,25,21,20,23,31,22,0,20,23],
[28,24,26,22,27,29,20,23,20,24,22,30,0,27],
[25,20,24,25,25,24,24,31,23,21,24,27,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 42, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,14,24,21,28,30,27,31,29,31,28,17,22],
[29,0,17,21,22,31,29,21,30,29,28,24,16,20],
[36,33,0,23,26,34,32,25,35,31,24,28,18,23],
[26,29,27,0,26,27,37,23,28,35,23,22,27,27],
[29,28,24,24,0,19,33,20,33,31,25,20,20,24],
[22,19,16,23,31,0,24,17,26,31,22,22,17,23],
[20,21,18,13,17,26,0,29,29,28,25,27,23,17],
[23,29,25,27,30,33,21,0,31,35,30,25,25,28],
[19,20,15,22,17,24,21,19,0,23,25,13,23,13],
[21,21,19,15,19,19,22,15,27,0,17,18,10,13],
[19,22,26,27,25,28,25,20,25,33,0,12,21,24],
[22,26,22,28,30,28,23,25,37,32,38,0,20,21],
[33,34,32,23,30,33,27,25,27,40,29,30,0,33],
[28,30,27,23,26,27,33,22,37,37,26,29,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 43, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,32,22,25,26,31,22,32,31,25,33,28,28],
[25,0,30,23,26,22,29,25,29,36,23,31,23,24],
[18,20,0,23,22,22,24,18,29,26,22,25,24,31],
[28,27,27,0,27,23,28,21,31,32,23,24,27,26],
[25,24,28,23,0,27,24,25,32,31,25,29,25,26],
[24,28,28,27,23,0,35,27,35,31,25,35,33,27],
[19,21,26,22,26,15,0,20,24,28,18,24,25,25],
[28,25,32,29,25,23,30,0,29,32,29,26,24,30],
[18,21,21,19,18,15,26,21,0,30,24,22,24,20],
[19,14,24,18,19,19,22,18,20,0,17,20,20,20],
[25,27,28,27,25,25,32,21,26,33,0,25,27,29],
[17,19,25,26,21,15,26,24,28,30,25,0,27,23],
[22,27,26,23,25,17,25,26,26,30,23,23,0,25],
[22,26,19,24,24,23,25,20,30,30,21,27,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 44, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,23,24,29,20,25,26,26,25,25,22,26],
[27,0,26,26,27,27,26,30,27,29,26,22,20,27],
[24,24,0,27,29,32,22,27,24,30,26,23,20,26],
[27,24,23,0,27,24,23,30,26,29,23,21,19,22],
[26,23,21,23,0,29,23,27,25,29,26,19,18,22],
[21,23,18,26,21,0,20,20,21,27,21,13,17,19],
[30,24,28,27,27,30,0,28,26,31,27,21,24,24],
[25,20,23,20,23,30,22,0,23,32,27,21,20,20],
[24,23,26,24,25,29,24,27,0,28,21,18,16,24],
[24,21,20,21,21,23,19,18,22,0,23,17,17,22],
[25,24,24,27,24,29,23,23,29,27,0,24,24,23],
[25,28,27,29,31,37,29,29,32,33,26,0,30,29],
[28,30,30,31,32,33,26,30,34,33,26,20,0,28],
[24,23,24,28,28,31,26,30,26,28,27,21,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 45, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,23,20,28,25,23,26,18,21,26,25,20,22],
[30,0,27,28,33,26,32,33,28,25,31,30,28,28],
[27,23,0,27,30,28,26,29,25,25,29,29,24,24],
[30,22,23,0,29,30,25,28,26,27,23,27,25,29],
[22,17,20,21,0,24,26,25,18,21,23,23,18,21],
[25,24,22,20,26,0,28,28,26,27,23,31,26,27],
[27,18,24,25,24,22,0,22,19,19,18,26,21,23],
[24,17,21,22,25,22,28,0,19,20,19,29,19,25],
[32,22,25,24,32,24,31,31,0,23,26,26,23,25],
[29,25,25,23,29,23,31,30,27,0,23,25,22,29],
[24,19,21,27,27,27,32,31,24,27,0,28,26,26],
[25,20,21,23,27,19,24,21,24,25,22,0,19,26],
[30,22,26,25,32,24,29,31,27,28,24,31,0,31],
[28,22,26,21,29,23,27,25,25,21,24,24,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 46, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,25,28,36,30,32,27,28,29,27,26,28,28],
[21,0,22,26,26,28,27,32,30,28,24,27,24,30],
[25,28,0,29,28,28,29,31,25,27,31,27,24,27],
[22,24,21,0,23,25,25,23,22,26,30,20,24,23],
[14,24,22,27,0,23,19,27,20,21,21,21,17,17],
[20,22,22,25,27,0,25,27,24,28,28,20,25,27],
[18,23,21,25,31,25,0,27,21,25,23,16,24,23],
[23,18,19,27,23,23,23,0,23,23,23,23,24,26],
[22,20,25,28,30,26,29,27,0,27,27,25,25,28],
[21,22,23,24,29,22,25,27,23,0,24,19,22,22],
[23,26,19,20,29,22,27,27,23,26,0,22,24,23],
[24,23,23,30,29,30,34,27,25,31,28,0,23,27],
[22,26,26,26,33,25,26,26,25,28,26,27,0,25],
[22,20,23,27,33,23,27,24,22,28,27,23,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 47, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,28,23,26,26,31,18,23,25,22,24,25,21],
[22,0,19,17,25,30,27,20,21,22,29,18,22,20],
[22,31,0,19,29,29,26,20,20,22,25,20,27,27],
[27,33,31,0,28,25,34,23,24,28,28,25,36,24],
[24,25,21,22,0,23,26,20,17,20,31,26,29,16],
[24,20,21,25,27,0,29,22,14,20,32,22,30,21],
[19,23,24,16,24,21,0,19,19,18,25,14,27,23],
[32,30,30,27,30,28,31,0,21,25,34,23,35,25],
[27,29,30,26,33,36,31,29,0,24,33,33,33,28],
[25,28,28,22,30,30,32,25,26,0,30,22,29,26],
[28,21,25,22,19,18,25,16,17,20,0,16,21,23],
[26,32,30,25,24,28,36,27,17,28,34,0,29,18],
[25,28,23,14,21,20,23,15,17,21,29,21,0,22],
[29,30,23,26,34,29,27,25,22,24,27,32,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 48, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,30,25,2,25,2,21,11,28,10,2,15,2],
[37,0,30,28,9,21,11,28,27,35,17,9,18,9],
[20,20,0,32,16,21,7,17,16,26,17,7,20,9],
[25,22,18,0,16,23,9,25,25,35,17,16,29,18],
[48,41,34,34,0,32,22,23,38,44,30,30,48,31],
[25,29,29,27,18,0,9,18,18,16,17,7,16,9],
[48,39,43,41,28,41,0,26,25,35,17,17,30,23],
[29,22,33,25,27,32,24,0,31,35,21,20,29,31],
[39,23,34,25,12,32,25,19,0,35,23,14,32,16],
[22,15,24,15,6,34,15,15,15,0,25,6,24,6],
[40,33,33,33,20,33,33,29,27,25,0,15,40,24],
[48,41,43,34,20,43,33,30,36,44,35,0,38,40],
[35,32,30,21,2,34,20,21,18,26,10,12,0,11],
[48,41,41,32,19,41,27,19,34,44,26,10,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 49, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,31,26,27,23,27,31,23,23,24,27,21,26],
[28,0,28,23,31,21,26,26,28,30,29,25,22,23],
[19,22,0,22,21,22,23,24,27,23,27,24,22,25],
[24,27,28,0,33,25,24,30,30,29,28,25,28,28],
[23,19,29,17,0,23,20,24,29,23,26,22,24,23],
[27,29,28,25,27,0,24,32,32,23,29,25,27,25],
[23,24,27,26,30,26,0,28,30,21,27,30,21,26],
[19,24,26,20,26,18,22,0,25,21,24,24,26,22],
[27,22,23,20,21,18,20,25,0,17,27,23,17,23],
[27,20,27,21,27,27,29,29,33,0,28,26,24,27],
[26,21,23,22,24,21,23,26,23,22,0,21,20,22],
[23,25,26,25,28,25,20,26,27,24,29,0,26,22],
[29,28,28,22,26,23,29,24,33,26,30,24,0,22],
[24,27,25,22,27,25,24,28,27,23,28,28,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 50, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,13,18,27,26,28,25,14,25,13,31,25,13],
[33,0,24,20,29,38,33,34,21,36,30,25,30,27],
[37,26,0,23,36,37,35,43,19,38,32,21,26,26],
[32,30,27,0,25,30,33,36,23,31,25,22,28,27],
[23,21,14,25,0,27,32,30,22,25,14,27,27,18],
[24,12,13,20,23,0,21,33,12,35,13,22,16,15],
[22,17,15,17,18,29,0,25,17,25,20,23,19,23],
[25,16,7,14,20,17,25,0,9,30,9,23,24,10],
[36,29,31,27,28,38,33,41,0,34,29,26,21,25],
[25,14,12,19,25,15,25,20,16,0,17,22,12,14],
[37,20,18,25,36,37,30,41,21,33,0,27,25,15],
[19,25,29,28,23,28,27,27,24,28,23,0,21,28],
[25,20,24,22,23,34,31,26,29,38,25,29,0,25],
[37,23,24,23,32,35,27,40,25,36,35,22,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 51, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,28,26,30,31,27,22,34,26,26,25,32,31],
[24,0,24,25,23,29,31,28,32,28,28,21,30,29],
[22,26,0,26,30,27,30,22,29,28,29,24,33,27],
[24,25,24,0,28,29,26,14,21,30,28,25,26,27],
[20,27,20,22,0,27,26,15,29,23,28,21,30,27],
[19,21,23,21,23,0,24,19,20,19,22,20,24,20],
[23,19,20,24,24,26,0,22,23,21,26,21,22,24],
[28,22,28,36,35,31,28,0,27,33,29,26,34,35],
[16,18,21,29,21,30,27,23,0,23,22,18,19,21],
[24,22,22,20,27,31,29,17,27,0,29,22,28,26],
[24,22,21,22,22,28,24,21,28,21,0,15,25,29],
[25,29,26,25,29,30,29,24,32,28,35,0,34,30],
[18,20,17,24,20,26,28,16,31,22,25,16,0,25],
[19,21,23,23,23,30,26,15,29,24,21,20,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 52, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,25,18,22,25,25,26,18,31,24,18,28,32],
[24,0,26,23,27,28,25,25,21,31,27,21,30,40],
[25,24,0,25,23,31,24,22,27,29,27,24,28,35],
[32,27,25,0,31,26,28,28,31,35,25,27,31,34],
[28,23,27,19,0,22,25,24,22,30,19,19,28,30],
[25,22,19,24,28,0,27,23,25,30,26,25,24,35],
[25,25,26,22,25,23,0,20,25,36,26,20,22,34],
[24,25,28,22,26,27,30,0,26,33,23,17,29,33],
[32,29,23,19,28,25,25,24,0,29,25,16,29,34],
[19,19,21,15,20,20,14,17,21,0,20,16,20,26],
[26,23,23,25,31,24,24,27,25,30,0,20,26,32],
[32,29,26,23,31,25,30,33,34,34,30,0,32,34],
[22,20,22,19,22,26,28,21,21,30,24,18,0,34],
[18,10,15,16,20,15,16,17,16,24,18,16,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 53, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,38,19,29,31,30,20,28,20,23,31,25,17],
[18,0,25,24,16,24,32,13,23,17,19,23,19,31],
[12,25,0,19,21,25,22,10,25,20,10,26,19,22],
[31,26,31,0,18,20,32,20,29,17,24,19,20,20],
[21,34,29,32,0,27,39,30,33,30,26,30,31,35],
[19,26,25,30,23,0,34,21,28,21,22,18,23,32],
[20,18,28,18,11,16,0,9,23,17,21,19,16,24],
[30,37,40,30,20,29,41,0,34,14,23,30,25,31],
[22,27,25,21,17,22,27,16,0,25,20,23,14,33],
[30,33,30,33,20,29,33,36,25,0,22,25,25,29],
[27,31,40,26,24,28,29,27,30,28,0,31,19,32],
[19,27,24,31,20,32,31,20,27,25,19,0,25,32],
[25,31,31,30,19,27,34,25,36,25,31,25,0,33],
[33,19,28,30,15,18,26,19,17,21,18,18,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 54, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,28,34,24,36,32,31,30,30,31,20,30,31],
[17,0,21,27,16,24,30,21,24,24,21,24,18,28],
[22,29,0,24,23,22,36,24,33,30,20,21,23,23],
[16,23,26,0,14,19,25,18,22,21,16,22,18,18],
[26,34,27,36,0,34,37,32,33,27,24,24,31,27],
[14,26,28,31,16,0,31,25,22,15,27,24,16,15],
[18,20,14,25,13,19,0,12,27,13,7,15,17,16],
[19,29,26,32,18,25,38,0,31,27,22,26,26,19],
[20,26,17,28,17,28,23,19,0,20,14,18,19,19],
[20,26,20,29,23,35,37,23,30,0,20,16,27,16],
[19,29,30,34,26,23,43,28,36,30,0,26,32,22],
[30,26,29,28,26,26,35,24,32,34,24,0,26,29],
[20,32,27,32,19,34,33,24,31,23,18,24,0,18],
[19,22,27,32,23,35,34,31,31,34,28,21,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 55, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,33,22,31,32,35,32,25,29,25,33,27,21],
[25,0,25,27,31,39,32,29,23,35,26,24,31,23],
[17,25,0,27,29,33,25,25,23,28,25,24,26,28],
[28,23,23,0,23,28,32,25,21,33,16,27,30,24],
[19,19,21,27,0,24,23,22,19,24,18,21,25,17],
[18,11,17,22,26,0,20,20,17,24,19,12,14,16],
[15,18,25,18,27,30,0,25,15,22,20,18,21,16],
[18,21,25,25,28,30,25,0,21,29,19,24,23,24],
[25,27,27,29,31,33,35,29,0,32,26,24,29,28],
[21,15,22,17,26,26,28,21,18,0,18,18,22,15],
[25,24,25,34,32,31,30,31,24,32,0,27,27,20],
[17,26,26,23,29,38,32,26,26,32,23,0,34,27],
[23,19,24,20,25,36,29,27,21,28,23,16,0,15],
[29,27,22,26,33,34,34,26,22,35,30,23,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 56, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,18,36,17,31,26,24,27,31,34,17,19,26],
[23,0,15,30,20,29,22,20,18,23,38,22,18,33],
[32,35,0,36,23,39,26,36,34,38,36,32,32,37],
[14,20,14,0,20,28,19,20,19,20,28,15,15,24],
[33,30,27,30,0,28,31,24,29,30,30,20,32,33],
[19,21,11,22,22,0,17,16,20,18,25,12,15,25],
[24,28,24,31,19,33,0,25,28,26,33,19,30,27],
[26,30,14,30,26,34,25,0,19,27,28,23,20,34],
[23,32,16,31,21,30,22,31,0,30,36,22,22,32],
[19,27,12,30,20,32,24,23,20,0,28,20,17,30],
[16,12,14,22,20,25,17,22,14,22,0,9,21,22],
[33,28,18,35,30,38,31,27,28,30,41,0,29,37],
[31,32,18,35,18,35,20,30,28,33,29,21,0,29],
[24,17,13,26,17,25,23,16,18,20,28,13,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 57, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,32,31,27,27,17,18,25,23,22,28,26,17],
[24,0,28,24,28,29,23,22,29,22,26,32,24,24],
[18,22,0,26,28,22,16,21,28,20,22,27,24,18],
[19,26,24,0,24,21,20,23,25,19,20,31,30,20],
[23,22,22,26,0,26,17,23,22,18,22,26,24,19],
[23,21,28,29,24,0,18,21,25,21,21,32,23,20],
[33,27,34,30,33,32,0,28,28,24,24,33,33,27],
[32,28,29,27,27,29,22,0,22,27,23,29,25,21],
[25,21,22,25,28,25,22,28,0,21,23,32,23,23],
[27,28,30,31,32,29,26,23,29,0,20,33,26,25],
[28,24,28,30,28,29,26,27,27,30,0,24,22,26],
[22,18,23,19,24,18,17,21,18,17,26,0,21,22],
[24,26,26,20,26,27,17,25,27,24,28,29,0,19],
[33,26,32,30,31,30,23,29,27,25,24,28,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 58, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,24,30,31,24,23,29,26,26,23,28,23,25],
[25,0,20,29,31,20,28,25,25,25,27,35,27,27],
[26,30,0,27,25,26,26,28,30,29,25,32,25,26],
[20,21,23,0,26,21,24,20,23,23,23,26,23,27],
[19,19,25,24,0,18,19,22,22,25,19,23,21,23],
[26,30,24,29,32,0,27,25,23,29,27,32,27,32],
[27,22,24,26,31,23,0,26,23,24,21,21,27,23],
[21,25,22,30,28,25,24,0,23,27,21,28,28,24],
[24,25,20,27,28,27,27,27,0,29,21,26,23,27],
[24,25,21,27,25,21,26,23,21,0,20,26,20,30],
[27,23,25,27,31,23,29,29,29,30,0,30,24,25],
[22,15,18,24,27,18,29,22,24,24,20,0,22,24],
[27,23,25,27,29,23,23,22,27,30,26,28,0,25],
[25,23,24,23,27,18,27,26,23,20,25,26,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 59, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,39,25,32,36,22,27,32,28,39,27,32,32],
[18,0,35,27,38,37,28,32,36,28,33,25,45,31],
[11,15,0,17,21,31,18,20,25,25,35,21,23,15],
[25,23,33,0,33,38,27,30,40,35,35,30,36,35],
[18,12,29,17,0,39,20,21,25,26,36,19,29,19],
[14,13,19,12,11,0,19,6,26,15,28,11,19,18],
[28,22,32,23,30,31,0,24,26,25,33,17,35,29],
[23,18,30,20,29,44,26,0,37,28,41,24,33,22],
[18,14,25,10,25,24,24,13,0,14,27,21,29,22],
[22,22,25,15,24,35,25,22,36,0,31,27,29,27],
[11,17,15,15,14,22,17,9,23,19,0,10,22,10],
[23,25,29,20,31,39,33,26,29,23,40,0,34,23],
[18,5,27,14,21,31,15,17,21,21,28,16,0,16],
[18,19,35,15,31,32,21,28,28,23,40,27,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 60, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,26,21,22,22,16,28,24,21,28,25,31,30],
[23,0,36,19,27,21,28,32,22,22,27,14,24,23],
[24,14,0,13,14,18,12,29,30,24,33,20,29,24],
[29,31,37,0,23,21,27,25,20,26,31,16,38,31],
[28,23,36,27,0,23,23,28,21,23,32,21,22,31],
[28,29,32,29,27,0,22,33,32,26,37,27,40,31],
[34,22,38,23,27,28,0,32,21,15,33,18,31,32],
[22,18,21,25,22,17,18,0,26,17,30,15,33,21],
[26,28,20,30,29,18,29,24,0,24,26,23,34,30],
[29,28,26,24,27,24,35,33,26,0,35,27,47,31],
[22,23,17,19,18,13,17,20,24,15,0,18,27,28],
[25,36,30,34,29,23,32,35,27,23,32,0,35,29],
[19,26,21,12,28,10,19,17,16,3,23,15,0,20],
[20,27,26,19,19,19,18,29,20,19,22,21,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 61, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,28,23,31,23,26,27,22,25,26,30,30,28],
[21,0,23,20,22,26,16,21,22,20,22,22,24,21],
[22,27,0,27,29,28,33,26,21,29,25,28,27,22],
[27,30,23,0,26,24,30,26,22,27,25,28,30,25],
[19,28,21,24,0,23,26,19,21,27,24,24,30,22],
[27,24,22,26,27,0,29,27,24,30,30,26,34,25],
[24,34,17,20,24,21,0,26,22,27,24,27,32,25],
[23,29,24,24,31,23,24,0,26,26,25,28,35,26],
[28,28,29,28,29,26,28,24,0,24,29,28,28,25],
[25,30,21,23,23,20,23,24,26,0,27,24,29,25],
[24,28,25,25,26,20,26,25,21,23,0,25,32,22],
[20,28,22,22,26,24,23,22,22,26,25,0,28,19],
[20,26,23,20,20,16,18,15,22,21,18,22,0,19],
[22,29,28,25,28,25,25,24,25,25,28,31,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 62, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,15,2,15,13,13,15,13,13,2,15,26,13],
[15,0,15,15,15,26,13,15,15,15,2,15,39,15],
[35,35,0,0,26,11,13,26,0,24,2,11,24,24],
[48,35,50,0,39,35,37,50,13,48,2,24,24,37],
[35,35,24,11,0,11,24,48,24,24,11,24,35,35],
[37,24,39,15,39,0,37,39,13,13,2,13,24,37],
[37,37,37,13,26,13,0,37,2,13,2,13,26,26],
[35,35,24,0,2,11,13,0,0,24,0,24,24,24],
[37,35,50,37,26,37,48,50,0,48,37,50,26,24],
[37,35,26,2,26,37,37,26,2,0,2,2,26,26],
[48,48,48,48,39,48,48,50,13,48,0,24,37,37],
[35,35,39,26,26,37,37,26,0,48,26,0,26,24],
[24,11,26,26,15,26,24,26,24,24,13,24,0,24],
[37,35,26,13,15,13,24,26,26,24,13,26,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 63, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,23,24,26,30,25,25,28,25,29,27,27,22],
[21,0,22,19,27,23,24,25,28,27,30,27,20,18],
[27,28,0,22,25,34,27,21,25,26,30,28,29,25],
[26,31,28,0,28,29,31,26,26,28,29,30,29,22],
[24,23,25,22,0,27,24,21,23,22,32,27,21,20],
[20,27,16,21,23,0,25,23,23,23,27,25,19,15],
[25,26,23,19,26,25,0,20,24,25,26,25,24,21],
[25,25,29,24,29,27,30,0,24,25,24,29,28,21],
[22,22,25,24,27,27,26,26,0,26,26,24,30,18],
[25,23,24,22,28,27,25,25,24,0,27,27,23,17],
[21,20,20,21,18,23,24,26,24,23,0,23,24,20],
[23,23,22,20,23,25,25,21,26,23,27,0,24,14],
[23,30,21,21,29,31,26,22,20,27,26,26,0,18],
[28,32,25,28,30,35,29,29,32,33,30,36,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 64, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,31,27,25,22,31,29,31,27,29,28,25,24],
[25,0,30,27,29,22,33,30,30,30,28,28,29,26],
[19,20,0,23,18,21,23,24,25,24,24,20,23,18],
[23,23,27,0,21,25,22,31,25,21,27,23,25,22],
[25,21,32,29,0,25,30,35,32,31,33,27,31,27],
[28,28,29,25,25,0,29,33,30,25,31,27,32,23],
[19,17,27,28,20,21,0,28,23,22,24,24,24,20],
[21,20,26,19,15,17,22,0,28,22,20,25,21,17],
[19,20,25,25,18,20,27,22,0,24,27,24,18,21],
[23,20,26,29,19,25,28,28,26,0,25,28,26,24],
[21,22,26,23,17,19,26,30,23,25,0,19,25,28],
[22,22,30,27,23,23,26,25,26,22,31,0,26,24],
[25,21,27,25,19,18,26,29,32,24,25,24,0,22],
[26,24,32,28,23,27,30,33,29,26,22,26,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 65, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,29,26,31,30,23,25,17,24,15,17,20,18],
[26,0,36,25,39,32,36,26,30,31,20,31,23,23],
[21,14,0,21,26,29,12,18,21,19,19,20,11,15],
[24,25,29,0,37,34,26,29,26,23,24,23,27,28],
[19,11,24,13,0,27,23,14,17,23,16,19,19,21],
[20,18,21,16,23,0,24,23,23,18,16,25,16,19],
[27,14,38,24,27,26,0,23,24,20,20,22,15,17],
[25,24,32,21,36,27,27,0,33,20,17,15,23,18],
[33,20,29,24,33,27,26,17,0,25,27,29,20,27],
[26,19,31,27,27,32,30,30,25,0,25,23,26,21],
[35,30,31,26,34,34,30,33,23,25,0,31,24,25],
[33,19,30,27,31,25,28,35,21,27,19,0,20,24],
[30,27,39,23,31,34,35,27,30,24,26,30,0,29],
[32,27,35,22,29,31,33,32,23,29,25,26,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 66, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,26,7,23,23,7,32,41,30,34,14,29,15],
[34,0,33,12,34,40,18,41,35,34,35,22,29,26],
[24,17,0,8,34,30,21,35,35,30,18,22,29,10],
[43,38,42,0,43,49,29,50,44,43,45,24,43,29],
[27,16,16,7,0,23,7,15,21,24,29,14,22,16],
[27,10,20,1,27,0,7,19,25,35,29,8,17,15],
[43,32,29,21,43,43,0,44,43,43,43,30,43,29],
[18,9,15,0,35,31,6,0,31,31,20,11,18,11],
[9,15,15,6,29,25,7,19,0,19,22,13,16,21],
[20,16,20,7,26,15,7,19,31,0,29,14,22,25],
[16,15,32,5,21,21,7,30,28,21,0,14,27,14],
[36,28,28,26,36,42,20,39,37,36,36,0,36,25],
[21,21,21,7,28,33,7,32,34,28,23,14,0,21],
[35,24,40,21,34,35,21,39,29,25,36,25,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 67, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,16,33,16,21,4,16,16,4,33,33,33,33],
[29,0,29,46,29,17,29,29,29,29,29,46,46,46],
[34,21,0,21,4,21,4,38,33,4,50,50,38,21],
[17,4,29,0,17,17,17,29,29,17,29,50,34,34],
[34,21,46,33,0,38,21,50,46,17,46,50,38,21],
[29,33,29,33,12,0,12,29,29,12,29,50,46,29],
[46,21,46,33,29,38,0,50,29,17,46,50,50,50],
[34,21,12,21,0,21,0,0,29,0,46,33,38,21],
[34,21,17,21,4,21,21,21,0,21,38,33,38,21],
[46,21,46,33,33,38,33,50,29,0,46,50,50,50],
[17,21,0,21,4,21,4,4,12,4,0,33,21,21],
[17,4,0,0,0,0,0,17,17,0,17,0,34,17],
[17,4,12,16,12,4,0,12,12,0,29,16,0,33],
[17,4,29,16,29,21,0,29,29,0,29,33,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 68, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,29,26,32,30,32,25,30,21,31,28,24,23],
[19,0,22,20,30,20,31,18,25,23,25,28,16,28],
[21,28,0,21,29,26,29,25,31,20,30,27,19,26],
[24,30,29,0,35,27,31,26,35,26,30,31,22,28],
[18,20,21,15,0,20,26,21,22,18,23,26,18,22],
[20,30,24,23,30,0,32,30,28,21,27,33,22,28],
[18,19,21,19,24,18,0,19,21,20,25,23,21,21],
[25,32,25,24,29,20,31,0,31,21,27,26,23,28],
[20,25,19,15,28,22,29,19,0,21,22,22,15,22],
[29,27,30,24,32,29,30,29,29,0,31,28,29,27],
[19,25,20,20,27,23,25,23,28,19,0,25,15,26],
[22,22,23,19,24,17,27,24,28,22,25,0,23,26],
[26,34,31,28,32,28,29,27,35,21,35,27,0,36],
[27,22,24,22,28,22,29,22,28,23,24,24,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 69, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,38,38,44,30,43,39,40,41,46,29,30,21],
[10,0,20,27,38,12,43,11,37,28,28,20,20,13],
[12,30,0,31,43,24,29,22,38,40,41,24,42,22],
[12,23,19,0,36,11,19,22,39,40,42,21,21,20],
[6,12,7,14,0,16,30,6,16,7,24,16,7,17],
[20,38,26,39,34,0,44,12,47,29,39,20,31,30],
[7,7,21,31,20,6,0,6,22,24,23,16,24,17],
[11,39,28,28,44,38,44,0,38,39,47,30,29,22],
[10,13,12,11,34,3,28,12,0,32,37,13,21,14],
[9,22,10,10,43,21,26,11,18,0,37,13,27,21],
[4,22,9,8,26,11,27,3,13,13,0,11,1,12],
[21,30,26,29,34,30,34,20,37,37,39,0,31,12],
[20,30,8,29,43,19,26,21,29,23,49,19,0,27],
[29,37,28,30,33,20,33,28,36,29,38,38,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 70, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,24,23,29,23,29,22,32,31,26,28,28,27],
[24,0,25,26,24,29,26,23,30,33,30,24,31,26],
[26,25,0,20,26,28,21,21,25,32,28,28,28,31],
[27,24,30,0,28,30,24,26,26,29,31,34,32,31],
[21,26,24,22,0,29,21,25,24,31,28,27,32,26],
[27,21,22,20,21,0,23,20,29,33,28,19,27,23],
[21,24,29,26,29,27,0,26,30,29,23,33,35,27],
[28,27,29,24,25,30,24,0,25,32,31,29,32,28],
[18,20,25,24,26,21,20,25,0,29,22,26,30,27],
[19,17,18,21,19,17,21,18,21,0,20,21,26,22],
[24,20,22,19,22,22,27,19,28,30,0,25,31,23],
[22,26,22,16,23,31,17,21,24,29,25,0,23,21],
[22,19,22,18,18,23,15,18,20,24,19,27,0,22],
[23,24,19,19,24,27,23,22,23,28,27,29,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 71, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,20,27,23,22,26,20,21,18,27,25,20,21],
[25,0,25,27,24,21,27,20,24,22,24,25,22,20],
[30,25,0,26,27,22,25,23,22,23,29,25,23,23],
[23,23,24,0,25,23,26,20,23,17,22,27,19,23],
[27,26,23,25,0,23,20,25,23,21,30,25,20,24],
[28,29,28,27,27,0,29,24,24,25,30,30,21,23],
[24,23,25,24,30,21,0,25,29,23,32,31,22,22],
[30,30,27,30,25,26,25,0,26,23,28,29,24,26],
[29,26,28,27,27,26,21,24,0,19,25,26,20,25],
[32,28,27,33,29,25,27,27,31,0,27,29,25,26],
[23,26,21,28,20,20,18,22,25,23,0,24,20,21],
[25,25,25,23,25,20,19,21,24,21,26,0,18,17],
[30,28,27,31,30,29,28,26,30,25,30,32,0,27],
[29,30,27,27,26,27,28,24,25,24,29,33,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 72, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,48,48,48,40,40,48,42,50,25,25,40,48],
[2,0,16,47,22,2,41,22,16,24,17,24,41,24],
[2,34,0,48,9,27,40,34,17,25,17,10,41,25],
[2,3,2,0,10,2,2,2,2,24,17,10,41,16],
[2,28,41,40,0,27,42,27,17,24,17,24,41,16],
[10,48,23,48,23,0,40,48,17,25,25,25,42,25],
[10,9,10,48,8,10,0,8,11,24,25,10,49,24],
[2,28,16,48,23,2,42,0,17,24,17,24,41,25],
[8,34,33,48,33,33,39,33,0,49,25,10,47,47],
[0,26,25,26,26,25,26,26,1,0,3,2,39,15],
[25,33,33,33,33,25,25,33,25,47,0,35,39,47],
[25,26,40,40,26,25,40,26,40,48,15,0,39,40],
[10,9,9,9,9,8,1,9,3,11,11,11,0,9],
[2,26,25,34,34,25,26,25,3,35,3,10,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 73, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,28,15,30,27,27,30,29,38,29,18,23,33],
[8,0,18,14,17,8,14,26,17,20,13,12,17,18],
[22,32,0,17,23,27,17,31,26,23,22,13,16,29],
[35,36,33,0,39,29,32,41,29,38,29,26,22,36],
[20,33,27,11,0,14,17,23,21,23,18,12,18,18],
[23,42,23,21,36,0,16,34,29,38,22,20,21,30],
[23,36,33,18,33,34,0,38,28,32,24,28,23,38],
[20,24,19,9,27,16,12,0,23,34,20,12,4,25],
[21,33,24,21,29,21,22,27,0,24,19,16,12,28],
[12,30,27,12,27,12,18,16,26,0,12,19,15,24],
[21,37,28,21,32,28,26,30,31,38,0,22,15,36],
[32,38,37,24,38,30,22,38,34,31,28,0,29,34],
[27,33,34,28,32,29,27,46,38,35,35,21,0,35],
[17,32,21,14,32,20,12,25,22,26,14,16,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 74, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,26,28,29,35,25,24,25,20,28,37,29,21],
[25,0,30,31,32,29,28,30,26,26,26,36,30,25],
[24,20,0,29,28,29,19,22,23,22,24,37,34,25],
[22,19,21,0,24,24,19,23,19,21,18,29,26,18],
[21,18,22,26,0,25,23,25,25,24,25,30,31,24],
[15,21,21,26,25,0,19,23,24,22,23,34,24,22],
[25,22,31,31,27,31,0,33,27,28,28,37,32,24],
[26,20,28,27,25,27,17,0,23,23,32,36,27,23],
[25,24,27,31,25,26,23,27,0,26,28,35,34,25],
[30,24,28,29,26,28,22,27,24,0,32,34,33,25],
[22,24,26,32,25,27,22,18,22,18,0,37,29,25],
[13,14,13,21,20,16,13,14,15,16,13,0,17,14],
[21,20,16,24,19,26,18,23,16,17,21,33,0,21],
[29,25,25,32,26,28,26,27,25,25,25,36,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 75, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,22,31,20,18,28,21,25,23,21,24,22,29],
[31,0,30,28,27,31,31,27,28,23,28,25,26,31],
[28,20,0,28,25,25,27,25,18,23,22,29,26,26],
[19,22,22,0,17,23,23,23,22,17,14,20,18,27],
[30,23,25,33,0,28,32,28,28,26,31,21,27,29],
[32,19,25,27,22,0,25,30,27,22,22,27,22,28],
[22,19,23,27,18,25,0,21,24,16,23,21,26,22],
[29,23,25,27,22,20,29,0,25,19,31,28,23,29],
[25,22,32,28,22,23,26,25,0,23,24,23,24,29],
[27,27,27,33,24,28,34,31,27,0,26,24,29,26],
[29,22,28,36,19,28,27,19,26,24,0,27,26,22],
[26,25,21,30,29,23,29,22,27,26,23,0,25,28],
[28,24,24,32,23,28,24,27,26,21,24,25,0,30],
[21,19,24,23,21,22,28,21,21,24,28,22,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 76, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,23,18,22,18,29,21,16,20,21,25,20,17],
[28,0,27,24,16,23,24,21,20,19,24,19,28,20],
[27,23,0,24,21,28,26,24,24,21,21,20,18,16],
[32,26,26,0,22,21,29,24,25,25,18,27,24,22],
[28,34,29,28,0,28,34,28,22,26,24,23,26,24],
[32,27,22,29,22,0,29,25,25,29,21,25,26,19],
[21,26,24,21,16,21,0,20,23,18,22,19,22,18],
[29,29,26,26,22,25,30,0,26,30,20,24,20,25],
[34,30,26,25,28,25,27,24,0,22,28,30,27,19],
[30,31,29,25,24,21,32,20,28,0,22,24,25,25],
[29,26,29,32,26,29,28,30,22,28,0,29,25,22],
[25,31,30,23,27,25,31,26,20,26,21,0,21,23],
[30,22,32,26,24,24,28,30,23,25,25,29,0,21],
[33,30,34,28,26,31,32,25,31,25,28,27,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 77, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,9,9,14,15,9,9,20,20,20,15,20,5],
[41,0,35,34,21,32,14,25,33,25,32,22,38,28],
[41,15,0,15,21,29,0,11,36,11,26,21,25,22],
[41,16,35,0,25,21,21,21,30,21,21,11,17,22],
[36,29,29,25,0,29,16,29,24,12,16,22,25,29],
[35,18,21,29,21,0,1,13,27,11,19,22,33,36],
[41,36,50,29,34,49,0,36,50,45,43,22,39,36],
[41,25,39,29,21,37,14,0,37,33,31,22,39,36],
[30,17,14,20,26,23,0,13,0,13,7,14,24,24],
[30,25,39,29,38,39,5,17,37,0,20,26,39,25],
[30,18,24,29,34,31,7,19,43,30,0,15,39,25],
[35,28,29,39,28,28,28,28,36,24,35,0,24,35],
[30,12,25,33,25,17,11,11,26,11,11,26,0,11],
[45,22,28,28,21,14,14,14,26,25,25,15,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 78, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,29,15,32,14,32,28,19,24,25,18,16,24],
[34,0,30,25,26,31,26,22,24,23,27,30,20,28],
[21,20,0,16,21,20,35,23,17,26,19,21,17,25],
[35,25,34,0,32,14,28,33,27,35,36,29,22,29],
[18,24,29,18,0,15,29,29,19,19,32,19,20,24],
[36,19,30,36,35,0,24,32,29,31,36,29,28,34],
[18,24,15,22,21,26,0,18,19,27,24,27,11,22],
[22,28,27,17,21,18,32,0,19,28,24,17,19,25],
[31,26,33,23,31,21,31,31,0,27,34,31,14,19],
[26,27,24,15,31,19,23,22,23,0,32,27,20,30],
[25,23,31,14,18,14,26,26,16,18,0,21,11,21],
[32,20,29,21,31,21,23,33,19,23,29,0,15,29],
[34,30,33,28,30,22,39,31,36,30,39,35,0,36],
[26,22,25,21,26,16,28,25,31,20,29,21,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 79, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,21,31,21,29,26,20,24,23,23,21,20,27],
[33,0,24,28,31,27,28,21,27,30,33,29,29,34],
[29,26,0,29,28,23,24,24,27,20,21,31,17,23],
[19,22,21,0,24,19,16,20,21,20,20,25,19,24],
[29,19,22,26,0,23,22,22,20,20,25,29,26,23],
[21,23,27,31,27,0,22,24,24,27,21,29,23,31],
[24,22,26,34,28,28,0,28,23,24,26,34,25,28],
[30,29,26,30,28,26,22,0,29,23,25,32,26,32],
[26,23,23,29,30,26,27,21,0,27,24,32,26,27],
[27,20,30,30,30,23,26,27,23,0,26,30,21,31],
[27,17,29,30,25,29,24,25,26,24,0,32,28,29],
[29,21,19,25,21,21,16,18,18,20,18,0,17,23],
[30,21,33,31,24,27,25,24,24,29,22,33,0,34],
[23,16,27,26,27,19,22,18,23,19,21,27,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 80, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,27,27,23,17,20,23,23,18,18,13,21,19],
[30,0,25,30,35,26,36,33,21,35,38,24,29,30],
[23,25,0,20,28,21,16,31,20,26,27,18,23,23],
[23,20,30,0,18,29,20,34,23,22,28,19,27,24],
[27,15,22,32,0,21,20,31,25,28,28,25,26,22],
[33,24,29,21,29,0,25,32,28,25,30,27,24,26],
[30,14,34,30,30,25,0,36,27,27,26,15,29,27],
[27,17,19,16,19,18,14,0,19,10,24,17,12,27],
[27,29,30,27,25,22,23,31,0,30,25,20,24,25],
[32,15,24,28,22,25,23,40,20,0,26,16,20,28],
[32,12,23,22,22,20,24,26,25,24,0,12,19,26],
[37,26,32,31,25,23,35,33,30,34,38,0,29,29],
[29,21,27,23,24,26,21,38,26,30,31,21,0,32],
[31,20,27,26,28,24,23,23,25,22,24,21,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 81, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,6,29,22,23,12,25,23,16,31,20,12,13],
[34,0,24,30,21,20,40,29,25,11,31,23,29,21],
[44,26,0,34,27,31,42,27,35,25,36,24,35,35],
[21,20,16,0,21,25,32,21,27,16,36,26,26,28],
[28,29,23,29,0,19,30,26,31,16,31,29,24,30],
[27,30,19,25,31,0,27,22,21,25,28,15,16,28],
[38,10,8,18,20,23,0,29,26,10,26,22,25,16],
[25,21,23,29,24,28,21,0,21,11,31,29,23,26],
[27,25,15,23,19,29,24,29,0,20,29,34,25,24],
[34,39,25,34,34,25,40,39,30,0,30,31,29,36],
[19,19,14,14,19,22,24,19,21,20,0,24,24,14],
[30,27,26,24,21,35,28,21,16,19,26,0,25,26],
[38,21,15,24,26,34,25,27,25,21,26,25,0,21],
[37,29,15,22,20,22,34,24,26,14,36,24,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 82, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,22,25,23,25,32,30,21,22,30,18,29,30],
[27,0,14,32,20,19,22,28,22,25,27,15,25,28],
[28,36,0,32,26,20,31,29,27,30,33,26,27,33],
[25,18,18,0,18,18,23,21,16,19,28,10,23,23],
[27,30,24,32,0,26,28,31,23,21,29,20,31,28],
[25,31,30,32,24,0,31,35,24,27,32,21,28,31],
[18,28,19,27,22,19,0,31,18,25,26,16,27,29],
[20,22,21,29,19,15,19,0,23,23,22,19,24,25],
[29,28,23,34,27,26,32,27,0,26,35,23,30,32],
[28,25,20,31,29,23,25,27,24,0,25,17,32,22],
[20,23,17,22,21,18,24,28,15,25,0,19,22,25],
[32,35,24,40,30,29,34,31,27,33,31,0,31,30],
[21,25,23,27,19,22,23,26,20,18,28,19,0,20],
[20,22,17,27,22,19,21,25,18,28,25,20,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 83, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,29,34,30,34,23,25,30,25,38,37,22,29],
[25,0,31,25,33,30,25,25,31,27,33,29,27,36],
[21,19,0,18,25,20,25,19,24,17,29,27,19,24],
[16,25,32,0,23,25,27,21,28,23,31,34,23,34],
[20,17,25,27,0,26,18,21,27,27,34,22,20,24],
[16,20,30,25,24,0,27,23,29,21,26,19,17,24],
[27,25,25,23,32,23,0,16,24,23,30,27,23,30],
[25,25,31,29,29,27,34,0,31,27,31,33,23,31],
[20,19,26,22,23,21,26,19,0,21,30,22,16,23],
[25,23,33,27,23,29,27,23,29,0,28,27,22,33],
[12,17,21,19,16,24,20,19,20,22,0,22,14,19],
[13,21,23,16,28,31,23,17,28,23,28,0,19,23],
[28,23,31,27,30,33,27,27,34,28,36,31,0,29],
[21,14,26,16,26,26,20,19,27,17,31,27,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 84, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,16,18,23,21,20,20,26,25,18,26,21,22],
[33,0,28,30,27,27,30,27,30,28,24,27,30,25],
[34,22,0,30,24,32,24,31,28,29,26,28,25,29],
[32,20,20,0,21,21,19,20,26,20,22,23,25,16],
[27,23,26,29,0,22,22,27,24,19,23,25,31,23],
[29,23,18,29,28,0,25,21,21,27,29,24,26,26],
[30,20,26,31,28,25,0,23,30,27,28,26,27,23],
[30,23,19,30,23,29,27,0,29,25,27,27,29,19],
[24,20,22,24,26,29,20,21,0,22,23,21,23,27],
[25,22,21,30,31,23,23,25,28,0,30,25,25,30],
[32,26,24,28,27,21,22,23,27,20,0,22,28,22],
[24,23,22,27,25,26,24,23,29,25,28,0,29,24],
[29,20,25,25,19,24,23,21,27,25,22,21,0,22],
[28,25,21,34,27,24,27,31,23,20,28,26,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 85, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,34,26,21,4,16,7,23,34,26,13,31,21],
[44,0,41,35,34,38,13,37,31,31,36,17,37,36],
[16,9,0,35,25,15,6,7,28,28,32,13,24,26],
[24,15,15,0,14,20,3,19,13,21,18,7,17,16],
[29,16,25,36,0,22,23,15,15,24,21,32,22,19],
[46,12,35,30,28,0,22,20,31,38,45,27,37,18],
[34,37,44,47,27,28,0,37,23,42,34,20,43,28],
[43,13,43,31,35,30,13,0,22,31,38,20,30,35],
[27,19,22,37,35,19,27,28,0,30,25,24,24,19],
[16,19,22,29,26,12,8,19,20,0,24,25,28,19],
[24,14,18,32,29,5,16,12,25,26,0,12,30,20],
[37,33,37,43,18,23,30,30,26,25,38,0,37,21],
[19,13,26,33,28,13,7,20,26,22,20,13,0,18],
[29,14,24,34,31,32,22,15,31,31,30,29,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 86, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,28,17,26,22,25,18,22,21,32,28,25,28],
[26,0,27,20,26,28,27,19,24,29,27,24,19,25],
[22,23,0,20,22,26,25,20,27,25,30,28,23,31],
[33,30,30,0,31,34,28,27,28,31,30,27,20,33],
[24,24,28,19,0,23,25,21,25,29,25,24,23,28],
[28,22,24,16,27,0,25,19,23,24,31,26,19,30],
[25,23,25,22,25,25,0,20,27,29,27,22,15,29],
[32,31,30,23,29,31,30,0,32,28,31,35,25,34],
[28,26,23,22,25,27,23,18,0,28,29,24,20,26],
[29,21,25,19,21,26,21,22,22,0,26,25,20,26],
[18,23,20,20,25,19,23,19,21,24,0,23,21,22],
[22,26,22,23,26,24,28,15,26,25,27,0,22,29],
[25,31,27,30,27,31,35,25,30,30,29,28,0,31],
[22,25,19,17,22,20,21,16,24,24,28,21,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 87, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,19,50,33,14,31,33,33,33,33,33,33,14],
[19,0,19,50,33,0,14,33,33,33,33,33,33,14],
[31,31,0,50,33,31,31,33,33,33,50,33,33,14],
[0,0,0,0,19,0,14,19,33,19,33,19,14,0],
[17,17,17,31,0,17,31,31,14,14,31,14,14,14],
[36,50,19,50,33,0,50,33,33,33,50,33,33,33],
[19,36,19,36,19,0,0,19,33,19,19,19,33,0],
[17,17,17,31,19,17,31,0,14,0,31,14,14,0],
[17,17,17,17,36,17,17,36,0,19,17,19,0,0],
[17,17,17,31,36,17,31,50,31,0,31,33,14,0],
[17,17,0,17,19,0,31,19,33,19,0,19,14,0],
[17,17,17,31,36,17,31,36,31,17,31,0,31,17],
[17,17,17,36,36,17,17,36,50,36,36,19,0,0],
[36,36,36,50,36,17,50,50,50,50,50,33,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 88, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,28,29,31,21,28,30,34,25,27,27,29],
[25,0,21,24,27,27,24,22,25,29,24,29,25,28],
[25,29,0,28,31,33,25,29,27,35,31,28,25,26],
[22,26,22,0,30,29,21,23,29,30,27,25,27,21],
[21,23,19,20,0,25,22,24,23,29,22,23,21,23],
[19,23,17,21,25,0,21,24,23,24,25,24,21,21],
[29,26,25,29,28,29,0,24,32,30,30,29,28,33],
[22,28,21,27,26,26,26,0,30,28,26,24,24,29],
[20,25,23,21,27,27,18,20,0,28,23,20,28,24],
[16,21,15,20,21,26,20,22,22,0,23,25,22,15],
[25,26,19,23,28,25,20,24,27,27,0,23,20,25],
[23,21,22,25,27,26,21,26,30,25,27,0,24,25],
[23,25,25,23,29,29,22,26,22,28,30,26,0,24],
[21,22,24,29,27,29,17,21,26,35,25,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 89, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,22,24,19,21,21,21,25,21,26,21,24,20],
[29,0,26,31,23,33,21,23,22,25,30,25,19,37],
[28,24,0,33,20,25,24,25,20,20,26,32,22,37],
[26,19,17,0,19,21,19,19,25,20,31,23,26,27],
[31,27,30,31,0,30,28,28,26,24,31,33,21,29],
[29,17,25,29,20,0,21,19,16,20,32,22,21,31],
[29,29,26,31,22,29,0,30,23,28,29,31,21,34],
[29,27,25,31,22,31,20,0,21,21,28,21,21,32],
[25,28,30,25,24,34,27,29,0,18,31,27,24,30],
[29,25,30,30,26,30,22,29,32,0,29,33,14,32],
[24,20,24,19,19,18,21,22,19,21,0,21,21,23],
[29,25,18,27,17,28,19,29,23,17,29,0,21,34],
[26,31,28,24,29,29,29,29,26,36,29,29,0,32],
[30,13,13,23,21,19,16,18,20,18,27,16,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 90, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,16,24,24,22,22,19,18,26,22,26,17,30],
[23,0,22,28,21,26,19,20,21,24,18,27,13,17],
[34,28,0,32,25,23,33,28,22,32,29,34,21,27],
[26,22,18,0,26,21,24,27,17,25,23,32,21,25],
[26,29,25,24,0,20,23,25,23,21,24,23,26,30],
[28,24,27,29,30,0,20,23,21,25,23,29,19,31],
[28,31,17,26,27,30,0,29,26,23,27,37,22,22],
[31,30,22,23,25,27,21,0,20,28,26,35,18,27],
[32,29,28,33,27,29,24,30,0,36,29,25,22,24],
[24,26,18,25,29,25,27,22,14,0,28,25,16,22],
[28,32,21,27,26,27,23,24,21,22,0,26,23,23],
[24,23,16,18,27,21,13,15,25,25,24,0,12,23],
[33,37,29,29,24,31,28,32,28,34,27,38,0,28],
[20,33,23,25,20,19,28,23,26,28,27,27,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 91, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,22,31,24,25,19,26,22,31,24,20,29,28],
[24,0,29,26,24,23,17,27,32,28,23,25,27,26],
[28,21,0,24,19,20,25,22,23,27,30,23,28,33],
[19,24,26,0,18,29,22,27,25,26,23,19,34,29],
[26,26,31,32,0,20,22,26,29,27,26,26,29,29],
[25,27,30,21,30,0,23,29,30,29,25,29,29,26],
[31,33,25,28,28,27,0,34,33,30,30,29,27,34],
[24,23,28,23,24,21,16,0,22,28,24,27,28,30],
[28,18,27,25,21,20,17,28,0,27,24,30,27,20],
[19,22,23,24,23,21,20,22,23,0,28,21,24,26],
[26,27,20,27,24,25,20,26,26,22,0,25,21,25],
[30,25,27,31,24,21,21,23,20,29,25,0,27,27],
[21,23,22,16,21,21,23,22,23,26,29,23,0,25],
[22,24,17,21,21,24,16,20,30,24,25,23,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 92, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,25,21,19,38,28,36,35,30,38,30,31,32],
[18,0,20,10,16,22,21,24,23,26,21,20,18,21],
[25,30,0,5,8,36,21,29,30,30,25,16,24,18],
[29,40,45,0,27,31,23,31,43,38,43,36,32,20],
[31,34,42,23,0,36,25,31,43,35,40,33,34,22],
[12,28,14,19,14,0,26,27,14,20,19,21,26,29],
[22,29,29,27,25,24,0,20,32,35,27,29,27,23],
[14,26,21,19,19,23,30,0,17,23,22,22,17,27],
[15,27,20,7,7,36,18,33,0,27,33,20,14,22],
[20,24,20,12,15,30,15,27,23,0,30,12,26,23],
[12,29,25,7,10,31,23,28,17,20,0,13,14,20],
[20,30,34,14,17,29,21,28,30,38,37,0,22,25],
[19,32,26,18,16,24,23,33,36,24,36,28,0,26],
[18,29,32,30,28,21,27,23,28,27,30,25,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 93, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,47,37,37,33,32,48,48,42,32,24,32,37],
[13,0,33,22,25,15,26,28,34,22,36,36,18,12],
[3,17,0,16,13,11,32,22,36,11,30,8,2,12],
[13,28,34,0,39,29,26,34,42,23,42,36,18,31],
[13,25,37,11,0,11,25,19,27,13,27,33,25,22],
[17,35,39,21,39,0,37,32,40,22,42,22,21,31],
[18,24,18,24,25,13,0,34,40,13,42,20,3,17],
[2,22,28,16,31,18,16,0,29,14,26,24,16,26],
[2,16,14,8,23,10,10,21,0,12,16,8,2,12],
[8,28,39,27,37,28,37,36,38,0,30,22,21,31],
[18,14,20,8,23,8,8,24,34,20,0,15,8,17],
[26,14,42,14,17,28,30,26,42,28,35,0,32,25],
[18,32,48,32,25,29,47,34,48,29,42,18,0,25],
[13,38,38,19,28,19,33,24,38,19,33,25,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 94, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,28,29,23,25,19,21,30,30,27,24,27,32],
[20,0,21,26,19,21,19,21,29,26,22,19,21,28],
[22,29,0,25,21,23,16,23,27,29,27,21,22,28],
[21,24,25,0,17,22,18,26,28,26,23,24,17,27],
[27,31,29,33,0,25,25,25,29,33,19,25,27,28],
[25,29,27,28,25,0,22,26,30,25,25,24,24,25],
[31,31,34,32,25,28,0,27,35,32,27,32,25,31],
[29,29,27,24,25,24,23,0,32,28,26,25,30,28],
[20,21,23,22,21,20,15,18,0,22,18,17,23,23],
[20,24,21,24,17,25,18,22,28,0,21,23,20,28],
[23,28,23,27,31,25,23,24,32,29,0,22,24,25],
[26,31,29,26,25,26,18,25,33,27,28,0,29,33],
[23,29,28,33,23,26,25,20,27,30,26,21,0,26],
[18,22,22,23,22,25,19,22,27,22,25,17,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 95, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,29,29,22,28,33,22,32,33,26,25,26,27],
[24,0,28,30,29,31,32,27,31,35,27,28,26,31],
[21,22,0,24,23,28,25,19,24,25,24,25,20,28],
[21,20,26,0,29,28,32,22,28,28,23,30,23,30],
[28,21,27,21,0,29,29,23,25,30,32,28,25,30],
[22,19,22,22,21,0,27,18,22,29,26,25,18,29],
[17,18,25,18,21,23,0,14,20,26,20,26,20,23],
[28,23,31,28,27,32,36,0,33,32,32,32,28,33],
[18,19,26,22,25,28,30,17,0,30,27,24,24,25],
[17,15,25,22,20,21,24,18,20,0,24,27,20,24],
[24,23,26,27,18,24,30,18,23,26,0,27,20,27],
[25,22,25,20,22,25,24,18,26,23,23,0,25,24],
[24,24,30,27,25,32,30,22,26,30,30,25,0,30],
[23,19,22,20,20,21,27,17,25,26,23,26,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 96, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,21,18,27,33,16,30,21,19,26,27,25,18],
[23,0,26,30,26,22,18,33,25,23,20,26,26,22],
[29,24,0,28,30,30,26,27,28,26,28,34,33,26],
[32,20,22,0,32,33,20,24,22,23,22,19,32,21],
[23,24,20,18,0,24,10,25,19,15,20,21,21,21],
[17,28,20,17,26,0,23,23,24,25,18,20,27,15],
[34,32,24,30,40,27,0,30,28,33,29,30,30,29],
[20,17,23,26,25,27,20,0,32,18,22,22,30,29],
[29,25,22,28,31,26,22,18,0,23,27,26,34,26],
[31,27,24,27,35,25,17,32,27,0,25,25,25,23],
[24,30,22,28,30,32,21,28,23,25,0,28,31,27],
[23,24,16,31,29,30,20,28,24,25,22,0,27,23],
[25,24,17,18,29,23,20,20,16,25,19,23,0,16],
[32,28,24,29,29,35,21,21,24,27,23,27,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 97, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,33,34,34,28,34,24,41,33,27,37,33,33],
[16,0,36,35,33,25,28,24,31,24,35,31,22,29],
[17,14,0,31,25,26,33,23,28,34,24,32,21,27],
[16,15,19,0,20,21,20,18,18,24,17,27,16,24],
[16,17,25,30,0,15,23,16,29,28,29,32,23,26],
[22,25,24,29,35,0,34,21,32,29,31,35,25,37],
[16,22,17,30,27,16,0,15,23,25,25,28,22,35],
[26,26,27,32,34,29,35,0,30,33,32,31,25,30],
[9,19,22,32,21,18,27,20,0,24,26,22,19,31],
[17,26,16,26,22,21,25,17,26,0,27,27,26,33],
[23,15,26,33,21,19,25,18,24,23,0,27,16,19],
[13,19,18,23,18,15,22,19,28,23,23,0,22,29],
[17,28,29,34,27,25,28,25,31,24,34,28,0,29],
[17,21,23,26,24,13,15,20,19,17,31,21,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 98, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,21,30,28,16,27,24,21,23,19,28,23,28],
[31,0,27,29,28,25,25,33,22,25,26,31,23,30],
[29,23,0,32,28,23,31,29,26,27,31,37,31,30],
[20,21,18,0,24,18,20,20,24,23,17,27,21,24],
[22,22,22,26,0,18,24,22,24,24,29,29,27,23],
[34,25,27,32,32,0,25,37,29,30,33,34,32,33],
[23,25,19,30,26,25,0,27,28,24,31,32,27,30],
[26,17,21,30,28,13,23,0,27,24,25,28,28,26],
[29,28,24,26,26,21,22,23,0,30,25,36,27,33],
[27,25,23,27,26,20,26,26,20,0,25,32,19,30],
[31,24,19,33,21,17,19,25,25,25,0,31,27,33],
[22,19,13,23,21,16,18,22,14,18,19,0,21,27],
[27,27,19,29,23,18,23,22,23,31,23,29,0,33],
[22,20,20,26,27,17,20,24,17,20,17,23,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 99, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,22,26,35,25,23,27,24,24,31,28,25,34],
[22,0,26,19,20,22,18,19,21,21,18,24,21,22],
[28,24,0,25,30,22,24,28,25,25,28,29,22,27],
[24,31,25,0,25,27,28,30,31,31,31,27,26,32],
[15,30,20,25,0,22,21,25,21,27,29,23,26,25],
[25,28,28,23,28,0,24,30,25,23,27,27,24,25],
[27,32,26,22,29,26,0,26,30,27,23,25,27,34],
[23,31,22,20,25,20,24,0,24,18,22,21,21,25],
[26,29,25,19,29,25,20,26,0,28,28,23,26,31],
[26,29,25,19,23,27,23,32,22,0,29,27,24,30],
[19,32,22,19,21,23,27,28,22,21,0,22,24,35],
[22,26,21,23,27,23,25,29,27,23,28,0,24,29],
[25,29,28,24,24,26,23,29,24,26,26,26,0,28],
[16,28,23,18,25,25,16,25,19,20,15,21,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 100, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,26,20,27,28,27,20,26,20,25,32,19,21],
[19,0,19,19,23,26,23,20,19,18,14,21,21,22],
[24,31,0,14,25,28,22,18,23,18,20,29,22,18],
[30,31,36,0,32,33,33,32,27,23,26,32,28,31],
[23,27,25,18,0,32,23,21,22,22,23,31,23,20],
[22,24,22,17,18,0,25,23,21,18,20,24,18,21],
[23,27,28,17,27,25,0,20,21,17,22,27,24,21],
[30,30,32,18,29,27,30,0,18,25,29,35,23,23],
[24,31,27,23,28,29,29,32,0,22,28,28,23,25],
[30,32,32,27,28,32,33,25,28,0,27,33,30,28],
[25,36,30,24,27,30,28,21,22,23,0,29,24,22],
[18,29,21,18,19,26,23,15,22,17,21,0,18,19],
[31,29,28,22,27,32,26,27,27,20,26,32,0,22],
[29,28,32,19,30,29,29,27,25,22,28,31,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 101, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,32,26,25,19,26,21,27,23,29,21,26],
[23,0,21,25,25,23,18,28,23,23,23,21,17,25],
[23,29,0,28,25,26,21,29,16,22,21,28,20,24],
[18,25,22,0,22,21,21,30,22,22,23,20,19,24],
[24,25,25,28,0,26,28,24,20,18,26,22,24,25],
[25,27,24,29,24,0,23,23,19,22,23,21,27,25],
[31,32,29,29,22,27,0,29,24,21,27,25,23,26],
[24,22,21,20,26,27,21,0,29,15,18,26,25,22],
[29,27,34,28,30,31,26,21,0,28,20,29,29,27],
[23,27,28,28,32,28,29,35,22,0,29,26,21,26],
[27,27,29,27,24,27,23,32,30,21,0,28,24,27],
[21,29,22,30,28,29,25,24,21,24,22,0,25,27],
[29,33,30,31,26,23,27,25,21,29,26,25,0,25],
[24,25,26,26,25,25,24,28,23,24,23,23,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 102, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,50,43,25,25,25,25,25,25,25,43,0,25],
[7,0,32,25,7,7,32,7,32,25,7,32,7,32],
[0,18,0,25,0,0,0,0,0,0,0,0,0,0],
[7,25,25,0,7,7,7,7,7,7,7,25,7,7],
[25,43,50,43,0,7,43,18,43,25,50,43,25,50],
[25,43,50,43,43,0,43,43,43,43,50,43,18,50],
[25,18,50,43,7,7,0,18,18,25,25,18,25,50],
[25,43,50,43,32,7,32,0,25,25,32,43,7,32],
[25,18,50,43,7,7,32,25,0,25,25,25,7,50],
[25,25,50,43,25,7,25,25,25,0,25,25,25,25],
[25,43,50,43,0,0,25,18,25,25,0,43,0,50],
[7,18,50,25,7,7,32,7,25,25,7,0,7,32],
[50,43,50,43,25,32,25,43,43,25,50,43,0,50],
[25,18,50,43,0,0,0,18,0,25,0,18,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 103, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,22,19,22,16,13,18,17,14,33,24,14,32],
[38,0,26,27,31,27,29,32,28,27,29,30,19,27],
[28,24,0,27,27,24,29,32,25,15,36,27,26,20],
[31,23,23,0,28,19,17,27,20,26,29,29,7,26],
[28,19,23,22,0,28,27,20,24,23,33,28,18,29],
[34,23,26,31,22,0,26,25,23,30,35,25,22,29],
[37,21,21,33,23,24,0,22,25,30,32,32,21,33],
[32,18,18,23,30,25,28,0,22,15,34,26,22,28],
[33,22,25,30,26,27,25,28,0,34,29,28,25,32],
[36,23,35,24,27,20,20,35,16,0,30,27,19,34],
[17,21,14,21,17,15,18,16,21,20,0,17,20,29],
[26,20,23,21,22,25,18,24,22,23,33,0,22,24],
[36,31,24,43,32,28,29,28,25,31,30,28,0,36],
[18,23,30,24,21,21,17,22,18,16,21,26,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 104, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,31,29,30,34,27,29,40,22,21,41,32,31],
[23,0,31,22,25,17,25,36,32,18,24,38,29,26],
[19,19,0,17,25,19,20,27,24,8,15,26,25,18],
[21,28,33,0,32,23,23,35,39,20,25,40,33,30],
[20,25,25,18,0,21,22,30,36,16,20,33,27,27],
[16,33,31,27,29,0,25,35,32,25,19,41,36,38],
[23,25,30,27,28,25,0,27,43,19,22,33,29,28],
[21,14,23,15,20,15,23,0,29,12,15,32,23,21],
[10,18,26,11,14,18,7,21,0,15,13,33,20,24],
[28,32,42,30,34,25,31,38,35,0,27,39,40,28],
[29,26,35,25,30,31,28,35,37,23,0,38,34,27],
[9,12,24,10,17,9,17,18,17,11,12,0,19,15],
[18,21,25,17,23,14,21,27,30,10,16,31,0,18],
[19,24,32,20,23,12,22,29,26,22,23,35,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 105, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,34,41,33,35,28,29,43,29,26,37,35,32],
[25,0,27,34,30,31,25,19,38,20,15,22,40,22],
[16,23,0,35,23,18,15,17,35,23,24,24,33,24],
[9,16,15,0,24,12,16,17,27,22,12,18,29,19],
[17,20,27,26,0,18,19,16,24,23,11,20,28,15],
[15,19,32,38,32,0,29,27,41,27,20,28,35,30],
[22,25,35,34,31,21,0,22,36,28,22,25,40,31],
[21,31,33,33,34,23,28,0,37,26,27,29,36,36],
[7,12,15,23,26,9,14,13,0,18,9,15,24,16],
[21,30,27,28,27,23,22,24,32,0,24,20,33,25],
[24,35,26,38,39,30,28,23,41,26,0,26,38,27],
[13,28,26,32,30,22,25,21,35,30,24,0,39,23],
[15,10,17,21,22,15,10,14,26,17,12,11,0,16],
[18,28,26,31,35,20,19,14,34,25,23,27,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 106, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,23,25,24,26,24,22,18,25,25,23,28,23],
[28,0,23,32,28,29,25,24,27,26,31,26,28,28],
[27,27,0,32,31,32,26,27,24,27,23,29,31,30],
[25,18,18,0,26,23,27,24,22,20,20,26,24,27],
[26,22,19,24,0,25,21,18,21,23,20,25,28,22],
[24,21,18,27,25,0,16,24,20,18,25,24,26,21],
[26,25,24,23,29,34,0,23,25,24,21,29,29,25],
[28,26,23,26,32,26,27,0,25,27,25,26,31,28],
[32,23,26,28,29,30,25,25,0,27,23,29,35,30],
[25,24,23,30,27,32,26,23,23,0,27,31,32,29],
[25,19,27,30,30,25,29,25,27,23,0,27,27,24],
[27,24,21,24,25,26,21,24,21,19,23,0,28,27],
[22,22,19,26,22,24,21,19,15,18,23,22,0,21],
[27,22,20,23,28,29,25,22,20,21,26,23,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 107, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,30,30,26,21,31,23,19,20,31,24,17,22],
[28,0,23,27,28,26,31,26,25,26,33,28,13,27],
[20,27,0,21,28,23,31,32,17,20,29,24,22,26],
[20,23,29,0,30,28,28,25,18,18,30,29,24,28],
[24,22,22,20,0,18,24,30,18,17,27,21,20,18],
[29,24,27,22,32,0,30,30,19,23,28,23,20,25],
[19,19,19,22,26,20,0,22,14,23,32,26,19,17],
[27,24,18,25,20,20,28,0,22,16,25,19,16,18],
[31,25,33,32,32,31,36,28,0,23,27,33,27,29],
[30,24,30,32,33,27,27,34,27,0,35,36,23,25],
[19,17,21,20,23,22,18,25,23,15,0,19,20,23],
[26,22,26,21,29,27,24,31,17,14,31,0,20,20],
[33,37,28,26,30,30,31,34,23,27,30,30,0,36],
[28,23,24,22,32,25,33,32,21,25,27,30,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 108, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,25,29,30,25,30,32,32,28,25,28,24,27],
[19,0,23,20,24,21,18,29,21,16,19,24,21,21],
[25,27,0,26,29,30,37,36,27,25,24,24,25,29],
[21,30,24,0,25,22,22,26,29,21,20,22,19,20],
[20,26,21,25,0,22,25,26,26,25,24,24,22,17],
[25,29,20,28,28,0,23,29,24,20,23,22,21,29],
[20,32,13,28,25,27,0,32,26,21,19,24,23,22],
[18,21,14,24,24,21,18,0,24,21,19,15,17,22],
[18,29,23,21,24,26,24,26,0,18,22,24,24,22],
[22,34,25,29,25,30,29,29,32,0,28,25,25,22],
[25,31,26,30,26,27,31,31,28,22,0,30,25,27],
[22,26,26,28,26,28,26,35,26,25,20,0,27,24],
[26,29,25,31,28,29,27,33,26,25,25,23,0,26],
[23,29,21,30,33,21,28,28,28,28,23,26,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 109, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,27,31,36,26,31,27,25,32,31,24,30,31],
[18,0,27,25,23,21,23,26,16,24,21,20,21,21],
[23,23,0,22,22,23,26,22,19,29,28,26,22,25],
[19,25,28,0,28,19,24,19,15,25,22,27,25,22],
[14,27,28,22,0,19,22,22,22,26,25,19,23,29],
[24,29,27,31,31,0,27,26,28,29,25,32,27,26],
[19,27,24,26,28,23,0,27,20,29,26,20,27,27],
[23,24,28,31,28,24,23,0,25,28,26,23,25,29],
[25,34,31,35,28,22,30,25,0,36,24,27,29,34],
[18,26,21,25,24,21,21,22,14,0,21,25,23,21],
[19,29,22,28,25,25,24,24,26,29,0,23,19,24],
[26,30,24,23,31,18,30,27,23,25,27,0,24,23],
[20,29,28,25,27,23,23,25,21,27,31,26,0,27],
[19,29,25,28,21,24,23,21,16,29,26,27,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 110, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,29,32,32,24,32,26,36,18,27,35,32,27],
[20,0,30,28,27,16,27,15,21,15,15,20,12,24],
[21,20,0,24,28,21,26,23,23,19,16,20,12,25],
[18,22,26,0,27,10,22,21,19,21,7,14,15,18],
[18,23,22,23,0,26,17,17,23,18,11,19,12,24],
[26,34,29,40,24,0,30,18,34,26,15,32,24,23],
[18,23,24,28,33,20,0,26,33,22,24,29,22,31],
[24,35,27,29,33,32,24,0,36,21,30,29,25,33],
[14,29,27,31,27,16,17,14,0,18,23,18,9,14],
[32,35,31,29,32,24,28,29,32,0,30,31,29,32],
[23,35,34,43,39,35,26,20,27,20,0,26,15,21],
[15,30,30,36,31,18,21,21,32,19,24,0,19,19],
[18,38,38,35,38,26,28,25,41,21,35,31,0,34],
[23,26,25,32,26,27,19,17,36,18,29,31,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 111, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,21,20,25,25,25,19,29,31,26,22,27,23],
[24,0,28,26,23,24,24,28,25,24,24,26,29,12],
[29,22,0,18,20,21,18,19,18,23,21,27,31,13],
[30,24,32,0,25,23,24,28,34,31,26,32,33,17],
[25,27,30,25,0,32,28,24,29,24,26,25,26,26],
[25,26,29,27,18,0,16,22,22,30,23,29,30,13],
[25,26,32,26,22,34,0,23,38,31,29,28,32,28],
[31,22,31,22,26,28,27,0,24,28,28,29,25,18],
[21,25,32,16,21,28,12,26,0,26,18,25,29,18],
[19,26,27,19,26,20,19,22,24,0,29,24,28,12],
[24,26,29,24,24,27,21,22,32,21,0,29,29,17],
[28,24,23,18,25,21,22,21,25,26,21,0,29,17],
[23,21,19,17,24,20,18,25,21,22,21,21,0,14],
[27,38,37,33,24,37,22,32,32,38,33,33,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 112, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,26,20,24,28,25,23,27,28,24,22,15,21],
[28,0,29,26,30,27,28,22,27,32,27,24,26,21],
[24,21,0,23,24,28,28,24,24,28,23,19,22,21],
[30,24,27,0,25,27,32,19,26,29,25,27,24,24],
[26,20,26,25,0,23,32,17,22,24,22,22,17,21],
[22,23,22,23,27,0,26,14,22,25,21,21,20,17],
[25,22,22,18,18,24,0,21,25,27,22,19,20,21],
[27,28,26,31,33,36,29,0,24,32,28,29,26,24],
[23,23,26,24,28,28,25,26,0,26,21,28,22,22],
[22,18,22,21,26,25,23,18,24,0,23,20,21,20],
[26,23,27,25,28,29,28,22,29,27,0,27,24,26],
[28,26,31,23,28,29,31,21,22,30,23,0,22,26],
[35,24,28,26,33,30,30,24,28,29,26,28,0,28],
[29,29,29,26,29,33,29,26,28,30,24,24,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 113, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,33,23,38,27,22,27,39,37,20,29,48,34],
[15,0,28,15,31,30,26,26,38,28,13,21,40,35],
[17,22,0,25,30,36,26,23,28,22,21,19,35,29],
[27,35,25,0,33,28,28,26,37,26,14,27,46,36],
[12,19,20,17,0,15,20,27,16,23,18,18,29,30],
[23,20,14,22,35,0,30,26,25,35,26,26,33,36],
[28,24,24,22,30,20,0,19,29,29,20,19,31,32],
[23,24,27,24,23,24,31,0,32,30,27,25,41,48],
[11,12,22,13,34,25,21,18,0,22,14,16,26,34],
[13,22,28,24,27,15,21,20,28,0,26,22,33,34],
[30,37,29,36,32,24,30,23,36,24,0,32,42,42],
[21,29,31,23,32,24,31,25,34,28,18,0,39,31],
[2,10,15,4,21,17,19,9,24,17,8,11,0,16],
[16,15,21,14,20,14,18,2,16,16,8,19,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 114, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,25,32,16,14,17,22,25,21,14,38,25,18],
[28,0,33,43,30,25,32,28,21,27,32,41,40,16],
[25,17,0,32,23,11,20,19,23,16,15,41,22,11],
[18,7,18,0,13,7,13,12,15,11,8,29,19,5],
[34,20,27,37,0,18,25,27,28,29,21,48,35,18],
[36,25,39,43,32,0,28,35,31,41,33,48,36,26],
[33,18,30,37,25,22,0,28,21,28,27,41,32,23],
[28,22,31,38,23,15,22,0,33,35,27,42,37,18],
[25,29,27,35,22,19,29,17,0,25,27,42,22,20],
[29,23,34,39,21,9,22,15,25,0,22,43,34,13],
[36,18,35,42,29,17,23,23,23,28,0,38,27,14],
[12,9,9,21,2,2,9,8,8,7,12,0,11,8],
[25,10,28,31,15,14,18,13,28,16,23,39,0,8],
[32,34,39,45,32,24,27,32,30,37,36,42,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 115, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,25,30,34,24,36,26,26,31,28,28,24,33],
[20,0,20,24,22,24,28,22,23,28,23,26,18,25],
[25,30,0,30,30,27,31,29,24,35,29,28,22,29],
[20,26,20,0,27,24,31,25,27,26,31,26,23,29],
[16,28,20,23,0,26,27,26,24,27,22,26,21,28],
[26,26,23,26,24,0,32,23,21,28,26,31,23,29],
[14,22,19,19,23,18,0,19,23,26,19,25,18,23],
[24,28,21,25,24,27,31,0,27,29,28,29,19,27],
[24,27,26,23,26,29,27,23,0,29,27,24,17,26],
[19,22,15,24,23,22,24,21,21,0,23,23,20,22],
[22,27,21,19,28,24,31,22,23,27,0,23,19,25],
[22,24,22,24,24,19,25,21,26,27,27,0,27,22],
[26,32,28,27,29,27,32,31,33,30,31,23,0,29],
[17,25,21,21,22,21,27,23,24,28,25,28,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 116, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,22,28,24,23,25,20,19,27,23,26,24,26],
[24,0,22,25,21,26,22,26,23,24,28,25,22,26],
[28,28,0,30,31,22,28,26,25,24,25,26,27,31],
[22,25,20,0,26,26,27,21,20,23,23,26,24,28],
[26,29,19,24,0,24,19,24,19,26,27,28,20,24],
[27,24,28,24,26,0,28,21,24,29,26,31,26,27],
[25,28,22,23,31,22,0,23,20,27,26,28,24,22],
[30,24,24,29,26,29,27,0,26,32,28,30,31,29],
[31,27,25,30,31,26,30,24,0,28,30,30,30,29],
[23,26,26,27,24,21,23,18,22,0,24,27,23,25],
[27,22,25,27,23,24,24,22,20,26,0,21,24,26],
[24,25,24,24,22,19,22,20,20,23,29,0,20,26],
[26,28,23,26,30,24,26,19,20,27,26,30,0,30],
[24,24,19,22,26,23,28,21,21,25,24,24,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 117, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,29,32,27,27,20,23,22,23,28,27,24,30],
[25,0,34,27,29,25,23,33,22,22,26,27,29,28],
[21,16,0,23,20,20,14,22,13,17,15,17,18,21],
[18,23,27,0,26,20,17,20,26,17,21,19,19,19],
[23,21,30,24,0,23,23,25,22,19,24,19,20,28],
[23,25,30,30,27,0,21,24,21,25,20,21,25,25],
[30,27,36,33,27,29,0,34,33,33,30,25,31,34],
[27,17,28,30,25,26,16,0,22,26,21,19,17,21],
[28,28,37,24,28,29,17,28,0,27,25,27,24,36],
[27,28,33,33,31,25,17,24,23,0,31,25,30,29],
[22,24,35,29,26,30,20,29,25,19,0,22,26,24],
[23,23,33,31,31,29,25,31,23,25,28,0,29,25],
[26,21,32,31,30,25,19,33,26,20,24,21,0,19],
[20,22,29,31,22,25,16,29,14,21,26,25,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 118, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,34,25,29,18,25,32,25,32,24,30,26,21],
[29,0,32,22,30,19,31,34,25,26,28,23,25,22],
[16,18,0,19,18,17,27,29,24,22,22,28,26,15],
[25,28,31,0,32,22,29,22,22,33,29,26,24,20],
[21,20,32,18,0,21,29,26,23,29,21,24,24,17],
[32,31,33,28,29,0,31,32,27,30,26,30,24,22],
[25,19,23,21,21,19,0,26,18,27,13,25,23,17],
[18,16,21,28,24,18,24,0,18,19,22,25,23,22],
[25,25,26,28,27,23,32,32,0,25,31,32,28,27],
[18,24,28,17,21,20,23,31,25,0,23,29,16,18],
[26,22,28,21,29,24,37,28,19,27,0,30,27,23],
[20,27,22,24,26,20,25,25,18,21,20,0,20,19],
[24,25,24,26,26,26,27,27,22,34,23,30,0,21],
[29,28,35,30,33,28,33,28,23,32,27,31,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 119, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,24,28,24,28,24,26,25,28,26,28,26,25],
[22,0,30,32,25,26,27,25,24,26,30,24,22,23],
[26,20,0,27,29,16,28,21,21,26,25,25,21,24],
[22,18,23,0,20,22,25,26,23,24,22,21,25,20],
[26,25,21,30,0,24,28,24,24,29,20,28,25,22],
[22,24,34,28,26,0,24,27,26,26,27,24,26,26],
[26,23,22,25,22,26,0,23,27,28,25,25,23,25],
[24,25,29,24,26,23,27,0,22,22,23,24,20,23],
[25,26,29,27,26,24,23,28,0,27,25,25,27,21],
[22,24,24,26,21,24,22,28,23,0,26,24,26,24],
[24,20,25,28,30,23,25,27,25,24,0,31,25,27],
[22,26,25,29,22,26,25,26,25,26,19,0,23,24],
[24,28,29,25,25,24,27,30,23,24,25,27,0,22],
[25,27,26,30,28,24,25,27,29,26,23,26,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 120, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,21,24,18,28,20,27,25,23,21,29,18,12],
[27,0,30,27,11,21,18,32,28,32,22,28,31,12],
[29,20,0,19,19,15,18,32,19,30,17,28,21,6],
[26,23,31,0,20,19,31,36,22,35,26,22,32,16],
[32,39,31,30,0,36,28,34,24,32,28,39,33,27],
[22,29,35,31,14,0,22,31,28,35,26,26,32,15],
[30,32,32,19,22,28,0,27,21,37,9,22,33,15],
[23,18,18,14,16,19,23,0,19,24,12,19,13,6],
[25,22,31,28,26,22,29,31,0,31,22,32,27,14],
[27,18,20,15,18,15,13,26,19,0,9,28,24,7],
[29,28,33,24,22,24,41,38,28,41,0,34,28,17],
[21,22,22,28,11,24,28,31,18,22,16,0,23,5],
[32,19,29,18,17,18,17,37,23,26,22,27,0,10],
[38,38,44,34,23,35,35,44,36,43,33,45,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 121, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,14,20,21,25,24,22,18,21,25,19,23,17],
[34,0,17,28,24,33,34,31,25,29,32,25,26,27],
[36,33,0,33,25,29,37,28,26,28,30,23,31,30],
[30,22,17,0,24,25,28,24,24,29,22,21,25,22],
[29,26,25,26,0,27,34,32,26,30,28,21,28,28],
[25,17,21,25,23,0,24,26,17,27,25,22,19,21],
[26,16,13,22,16,26,0,23,23,27,22,11,22,19],
[28,19,22,26,18,24,27,0,21,27,25,16,25,24],
[32,25,24,26,24,33,27,29,0,34,28,29,29,25],
[29,21,22,21,20,23,23,23,16,0,27,17,27,21],
[25,18,20,28,22,25,28,25,22,23,0,15,24,19],
[31,25,27,29,29,28,39,34,21,33,35,0,35,29],
[27,24,19,25,22,31,28,25,21,23,26,15,0,21],
[33,23,20,28,22,29,31,26,25,29,31,21,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 122, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,30,29,21,31,31,21,35,21,42,26,30,15],
[21,0,27,22,20,26,24,21,29,17,30,26,26,17],
[20,23,0,22,23,25,20,16,24,23,35,27,24,19],
[21,28,28,0,24,31,29,24,39,30,37,30,31,23],
[29,30,27,26,0,32,28,24,31,20,36,28,30,21],
[19,24,25,19,18,0,27,24,30,22,33,26,21,19],
[19,26,30,21,22,23,0,21,27,28,37,27,24,17],
[29,29,34,26,26,26,29,0,36,27,39,30,22,28],
[15,21,26,11,19,20,23,14,0,19,29,18,22,15],
[29,33,27,20,30,28,22,23,31,0,33,23,29,22],
[8,20,15,13,14,17,13,11,21,17,0,18,14,9],
[24,24,23,20,22,24,23,20,32,27,32,0,27,21],
[20,24,26,19,20,29,26,28,28,21,36,23,0,18],
[35,33,31,27,29,31,33,22,35,28,41,29,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 123, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,21,21,25,24,23,22,30,23,26,28,20,23],
[30,0,29,21,27,29,25,25,32,28,29,30,25,28],
[29,21,0,21,23,26,21,26,29,27,28,28,26,19],
[29,29,29,0,26,29,27,31,31,29,33,30,28,24],
[25,23,27,24,0,24,24,22,30,26,31,24,23,27],
[26,21,24,21,26,0,24,27,28,29,28,27,26,27],
[27,25,29,23,26,26,0,27,27,28,27,29,26,25],
[28,25,24,19,28,23,23,0,31,27,22,31,22,23],
[20,18,21,19,20,22,23,19,0,21,21,23,21,19],
[27,22,23,21,24,21,22,23,29,0,23,25,23,21],
[24,21,22,17,19,22,23,28,29,27,0,24,22,19],
[22,20,22,20,26,23,21,19,27,25,26,0,22,22],
[30,25,24,22,27,24,24,28,29,27,28,28,0,26],
[27,22,31,26,23,23,25,27,31,29,31,28,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 124, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,22,24,18,19,34,27,26,24,24,27,25,19],
[27,0,32,21,18,23,38,29,30,31,35,27,20,17],
[28,18,0,20,17,21,35,23,28,25,24,19,22,16],
[26,29,30,0,28,34,41,36,33,32,35,42,30,25],
[32,32,33,22,0,29,40,35,28,35,38,35,29,28],
[31,27,29,16,21,0,36,28,27,27,25,34,22,15],
[16,12,15,9,10,14,0,16,17,16,18,22,15,3],
[23,21,27,14,15,22,34,0,30,25,25,27,18,17],
[24,20,22,17,22,23,33,20,0,30,20,25,25,16],
[26,19,25,18,15,23,34,25,20,0,24,26,22,13],
[26,15,26,15,12,25,32,25,30,26,0,29,21,14],
[23,23,31,8,15,16,28,23,25,24,21,0,17,10],
[25,30,28,20,21,28,35,32,25,28,29,33,0,24],
[31,33,34,25,22,35,47,33,34,37,36,40,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 125, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,16,26,19,24,22,17,25,25,17,21,19,21],
[29,0,28,28,26,25,17,20,26,30,21,22,28,28],
[34,22,0,34,26,25,21,23,32,33,28,26,29,30],
[24,22,16,0,20,26,20,11,24,25,13,20,30,24],
[31,24,24,30,0,33,29,17,29,27,21,21,26,35],
[26,25,25,24,17,0,26,13,28,26,18,24,20,25],
[28,33,29,30,21,24,0,20,27,29,22,17,27,28],
[33,30,27,39,33,37,30,0,37,35,22,29,35,39],
[25,24,18,26,21,22,23,13,0,25,20,24,26,23],
[25,20,17,25,23,24,21,15,25,0,19,18,22,28],
[33,29,22,37,29,32,28,28,30,31,0,27,35,33],
[29,28,24,30,29,26,33,21,26,32,23,0,31,28],
[31,22,21,20,24,30,23,15,24,28,15,19,0,28],
[29,22,20,26,15,25,22,11,27,22,17,22,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 126, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,30,39,49,39,27,26,39,49,17,23,39,39],
[11,0,17,26,20,26,18,35,26,28,16,1,31,27],
[20,33,0,21,33,34,21,20,21,34,27,21,34,34],
[11,24,29,0,24,25,12,10,25,25,27,24,25,25],
[1,30,17,26,0,17,18,17,17,27,16,1,31,17],
[11,24,16,25,33,0,27,19,35,40,26,10,24,39],
[23,32,29,38,32,23,0,19,32,33,26,32,23,48],
[24,15,30,40,33,31,31,0,31,41,30,15,15,41],
[11,24,29,25,33,15,18,19,0,25,16,11,24,40],
[1,22,16,25,23,10,17,9,25,0,16,0,14,29],
[33,34,23,23,34,24,24,20,34,34,0,33,34,33],
[27,49,29,26,49,40,18,35,39,50,17,0,40,41],
[11,19,16,25,19,26,27,35,26,36,16,10,0,36],
[11,23,16,25,33,11,2,9,10,21,17,9,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 127, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,29,30,25,27,32,27,30,30,33,33,34,34],
[22,0,19,26,22,23,30,27,23,22,20,26,26,27],
[21,31,0,22,25,22,32,25,27,24,30,21,30,29],
[20,24,28,0,20,27,29,25,31,30,28,26,31,29],
[25,28,25,30,0,23,31,32,25,26,25,30,30,33],
[23,27,28,23,27,0,28,22,25,24,29,29,29,31],
[18,20,18,21,19,22,0,18,19,17,22,24,22,22],
[23,23,25,25,18,28,32,0,28,25,24,26,31,29],
[20,27,23,19,25,25,31,22,0,18,25,25,30,26],
[20,28,26,20,24,26,33,25,32,0,28,31,31,31],
[17,30,20,22,25,21,28,26,25,22,0,26,27,33],
[17,24,29,24,20,21,26,24,25,19,24,0,28,25],
[16,24,20,19,20,21,28,19,20,19,23,22,0,20],
[16,23,21,21,17,19,28,21,24,19,17,25,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 128, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,28,28,24,22,21,30,21,22,24,20,18,29],
[22,0,32,29,21,26,23,28,23,24,25,27,24,24],
[22,18,0,19,21,15,20,26,19,21,21,18,26,24],
[22,21,31,0,19,28,22,29,24,24,24,24,19,21],
[26,29,29,31,0,31,25,29,22,29,26,24,30,29],
[28,24,35,22,19,0,23,24,25,23,25,27,24,22],
[29,27,30,28,25,27,0,31,23,28,31,25,28,24],
[20,22,24,21,21,26,19,0,21,23,25,21,23,22],
[29,27,31,26,28,25,27,29,0,29,35,29,28,32],
[28,26,29,26,21,27,22,27,21,0,28,23,23,22],
[26,25,29,26,24,25,19,25,15,22,0,18,18,25],
[30,23,32,26,26,23,25,29,21,27,32,0,30,23],
[32,26,24,31,20,26,22,27,22,27,32,20,0,25],
[21,26,26,29,21,28,26,28,18,28,25,27,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 129, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,37,26,38,28,35,35,17,34,16,35,29,16],
[30,0,30,29,24,25,32,32,24,31,29,24,29,32],
[13,20,0,22,25,23,27,24,22,32,14,22,32,19],
[24,21,28,0,32,29,30,23,28,39,25,30,40,27],
[12,26,25,18,0,23,24,27,17,38,21,38,28,24],
[22,25,27,21,27,0,34,28,20,38,17,32,19,28],
[15,18,23,20,26,16,0,16,22,32,21,22,28,18],
[15,18,26,27,23,22,34,0,20,35,27,32,28,27],
[33,26,28,22,33,30,28,30,0,36,18,33,32,21],
[16,19,18,11,12,12,18,15,14,0,11,14,21,21],
[34,21,36,25,29,33,29,23,32,39,0,25,35,40],
[15,26,28,20,12,18,28,18,17,36,25,0,25,27],
[21,21,18,10,22,31,22,22,18,29,15,25,0,16],
[34,18,31,23,26,22,32,23,29,29,10,23,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 130, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,33,27,23,27,29,30,24,21,22,26,26,28],
[26,0,28,20,22,28,27,30,23,20,23,25,25,23],
[17,22,0,22,20,26,24,18,23,21,17,28,23,26],
[23,30,28,0,26,30,30,26,26,22,25,25,26,26],
[27,28,30,24,0,31,25,28,27,24,24,26,27,20],
[23,22,24,20,19,0,26,26,24,20,20,23,24,18],
[21,23,26,20,25,24,0,24,25,22,22,22,22,21],
[20,20,32,24,22,24,26,0,28,26,26,30,28,25],
[26,27,27,24,23,26,25,22,0,24,24,21,26,23],
[29,30,29,28,26,30,28,24,26,0,24,24,26,23],
[28,27,33,25,26,30,28,24,26,26,0,26,28,22],
[24,25,22,25,24,27,28,20,29,26,24,0,30,20],
[24,25,27,24,23,26,28,22,24,24,22,20,0,18],
[22,27,24,24,30,32,29,25,27,27,28,30,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 131, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,24,23,28,21,18,29,26,23,28,28,21,23],
[22,0,15,19,28,20,18,23,20,22,27,25,26,17],
[26,35,0,28,34,21,26,30,27,25,32,26,28,28],
[27,31,22,0,30,25,25,21,32,22,32,24,21,28],
[22,22,16,20,0,19,22,21,25,24,25,22,21,20],
[29,30,29,25,31,0,27,26,31,25,32,27,28,28],
[32,32,24,25,28,23,0,32,26,23,32,27,24,27],
[21,27,20,29,29,24,18,0,24,22,28,26,22,18],
[24,30,23,18,25,19,24,26,0,27,29,25,22,19],
[27,28,25,28,26,25,27,28,23,0,26,25,28,24],
[22,23,18,18,25,18,18,22,21,24,0,19,21,18],
[22,25,24,26,28,23,23,24,25,25,31,0,25,20],
[29,24,22,29,29,22,26,28,28,22,29,25,0,22],
[27,33,22,22,30,22,23,32,31,26,32,30,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 132, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,20,22,27,23,28,26,29,27,32,32,19,29],
[26,0,14,26,33,17,26,24,22,26,22,31,24,31],
[30,36,0,30,26,25,29,29,30,28,34,34,28,34],
[28,24,20,0,30,18,25,21,22,24,30,31,20,29],
[23,17,24,20,0,20,17,24,20,26,20,22,23,26],
[27,33,25,32,30,0,26,27,30,28,36,33,33,29],
[22,24,21,25,33,24,0,29,24,27,25,32,18,28],
[24,26,21,29,26,23,21,0,23,26,31,30,23,27],
[21,28,20,28,30,20,26,27,0,29,33,27,21,25],
[23,24,22,26,24,22,23,24,21,0,30,26,24,34],
[18,28,16,20,30,14,25,19,17,20,0,25,19,28],
[18,19,16,19,28,17,18,20,23,24,25,0,22,30],
[31,26,22,30,27,17,32,27,29,26,31,28,0,31],
[21,19,16,21,24,21,22,23,25,16,22,20,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 133, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,20,32,24,22,26,22,26,25,29,21,41,24],
[28,0,18,22,22,23,23,18,19,30,22,27,29,19],
[30,32,0,27,22,27,26,27,28,32,26,25,34,26],
[18,28,23,0,26,26,24,26,15,27,35,19,22,21],
[26,28,28,24,0,36,26,21,28,22,31,29,26,26],
[28,27,23,24,14,0,20,21,26,29,31,25,32,20],
[24,27,24,26,24,30,0,14,28,28,31,24,35,18],
[28,32,23,24,29,29,36,0,21,43,36,27,34,34],
[24,31,22,35,22,24,22,29,0,30,31,28,27,17],
[25,20,18,23,28,21,22,7,20,0,27,25,27,15],
[21,28,24,15,19,19,19,14,19,23,0,21,28,18],
[29,23,25,31,21,25,26,23,22,25,29,0,39,21],
[9,21,16,28,24,18,15,16,23,23,22,11,0,12],
[26,31,24,29,24,30,32,16,33,35,32,29,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 134, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,20,21,22,31,25,20,24,22,25,18,22,22],
[35,0,27,27,30,31,32,29,31,28,32,25,31,33],
[30,23,0,29,27,36,27,19,30,20,23,22,25,25],
[29,23,21,0,26,28,25,24,23,16,27,16,27,24],
[28,20,23,24,0,31,22,22,26,19,30,22,22,21],
[19,19,14,22,19,0,22,21,20,18,17,17,20,15],
[25,18,23,25,28,28,0,22,25,19,27,22,24,24],
[30,21,31,26,28,29,28,0,28,21,24,27,25,26],
[26,19,20,27,24,30,25,22,0,21,21,20,24,26],
[28,22,30,34,31,32,31,29,29,0,28,26,28,26],
[25,18,27,23,20,33,23,26,29,22,0,21,26,25],
[32,25,28,34,28,33,28,23,30,24,29,0,26,26],
[28,19,25,23,28,30,26,25,26,22,24,24,0,22],
[28,17,25,26,29,35,26,24,24,24,25,24,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 135, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,33,24,26,36,23,27,30,27,26,33,35,21],
[21,0,31,33,37,27,23,31,30,22,17,36,26,19],
[17,19,0,10,17,22,20,25,27,15,22,21,26,9],
[26,17,40,0,33,29,18,30,30,20,27,40,38,18],
[24,13,33,17,0,28,18,27,25,18,16,33,21,15],
[14,23,28,21,22,0,15,29,23,23,22,31,18,22],
[27,27,30,32,32,35,0,35,32,24,26,39,28,28],
[23,19,25,20,23,21,15,0,24,19,13,36,28,16],
[20,20,23,20,25,27,18,26,0,21,18,36,27,15],
[23,28,35,30,32,27,26,31,29,0,33,39,29,30],
[24,33,28,23,34,28,24,37,32,17,0,36,26,29],
[17,14,29,10,17,19,11,14,14,11,14,0,18,15],
[15,24,24,12,29,32,22,22,23,21,24,32,0,17],
[29,31,41,32,35,28,22,34,35,20,21,35,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 136, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,11,17,17,14,21,13,18,11,10,9,26,17],
[33,0,22,23,22,25,26,25,23,19,19,20,26,23],
[39,28,0,40,24,24,24,24,41,20,24,30,31,23],
[33,27,10,0,20,18,23,20,23,9,12,20,23,23],
[33,28,26,30,0,18,28,28,33,31,20,24,26,21],
[36,25,26,32,32,0,23,33,36,29,31,30,26,24],
[29,24,26,27,22,27,0,22,30,23,21,22,21,21],
[37,25,26,30,22,17,28,0,26,20,18,24,28,15],
[32,27,9,27,17,14,20,24,0,13,18,13,23,21],
[39,31,30,41,19,21,27,30,37,0,22,35,29,29],
[40,31,26,38,30,19,29,32,32,28,0,30,31,25],
[41,30,20,30,26,20,28,26,37,15,20,0,26,26],
[24,24,19,27,24,24,29,22,27,21,19,24,0,26],
[33,27,27,27,29,26,29,35,29,21,25,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 137, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,22,27,22,26,31,25,30,30,33,26,25,23],
[33,0,27,34,28,27,34,32,28,27,32,28,24,20],
[28,23,0,25,25,26,33,26,32,30,31,18,30,23],
[23,16,25,0,24,22,30,27,19,26,23,22,20,16],
[28,22,25,26,0,25,33,26,29,26,30,25,27,25],
[24,23,24,28,25,0,29,25,24,30,26,20,26,24],
[19,16,17,20,17,21,0,19,20,30,27,16,17,11],
[25,18,24,23,24,25,31,0,30,27,21,18,27,17],
[20,22,18,31,21,26,30,20,0,23,24,18,21,21],
[20,23,20,24,24,20,20,23,27,0,25,17,23,20],
[17,18,19,27,20,24,23,29,26,25,0,18,22,18],
[24,22,32,28,25,30,34,32,32,33,32,0,28,21],
[25,26,20,30,23,24,33,23,29,27,28,22,0,20],
[27,30,27,34,25,26,39,33,29,30,32,29,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 138, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,29,30,24,30,27,29,30,28,27,27,24,24],
[27,0,26,27,27,32,27,28,30,26,29,28,25,20],
[21,24,0,25,19,24,26,20,21,25,18,24,20,22],
[20,23,25,0,23,26,26,22,26,27,28,25,25,22],
[26,23,31,27,0,34,28,29,29,26,22,24,24,25],
[20,18,26,24,16,0,22,26,22,22,20,20,23,21],
[23,23,24,24,22,28,0,22,23,29,27,26,22,26],
[21,22,30,28,21,24,28,0,24,28,27,25,26,26],
[20,20,29,24,21,28,27,26,0,26,25,24,25,24],
[22,24,25,23,24,28,21,22,24,0,24,20,24,24],
[23,21,32,22,28,30,23,23,25,26,0,17,26,25],
[23,22,26,25,26,30,24,25,26,30,33,0,24,24],
[26,25,30,25,26,27,28,24,25,26,24,26,0,26],
[26,30,28,28,25,29,24,24,26,26,25,26,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 139, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,23,24,26,28,18,27,24,27,19,27,23,25],
[19,0,23,25,23,22,16,28,17,21,22,26,21,23],
[27,27,0,25,28,27,19,31,25,25,27,26,25,24],
[26,25,25,0,24,27,23,30,17,21,25,24,27,25],
[24,27,22,26,0,21,18,33,17,24,20,26,23,24],
[22,28,23,23,29,0,20,31,20,21,22,24,28,23],
[32,34,31,27,32,30,0,34,23,24,25,33,27,31],
[23,22,19,20,17,19,16,0,14,17,23,19,19,17],
[26,33,25,33,33,30,27,36,0,26,24,27,30,22],
[23,29,25,29,26,29,26,33,24,0,26,28,26,29],
[31,28,23,25,30,28,25,27,26,24,0,32,26,23],
[23,24,24,26,24,26,17,31,23,22,18,0,24,21],
[27,29,25,23,27,22,23,31,20,24,24,26,0,24],
[25,27,26,25,26,27,19,33,28,21,27,29,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 140, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,29,31,27,28,29,27,20,29,25,23,30,23],
[28,0,27,24,23,29,28,24,20,27,22,23,28,25],
[21,23,0,25,21,26,29,25,21,22,22,24,32,27],
[19,26,25,0,20,25,23,27,20,25,20,27,30,28],
[23,27,29,30,0,28,30,26,20,24,27,24,30,29],
[22,21,24,25,22,0,26,25,21,23,25,23,25,19],
[21,22,21,27,20,24,0,21,17,22,20,24,26,26],
[23,26,25,23,24,25,29,0,24,19,20,24,28,24],
[30,30,29,30,30,29,33,26,0,25,28,30,30,32],
[21,23,28,25,26,27,28,31,25,0,23,25,31,22],
[25,28,28,30,23,25,30,30,22,27,0,25,28,28],
[27,27,26,23,26,27,26,26,20,25,25,0,31,29],
[20,22,18,20,20,25,24,22,20,19,22,19,0,24],
[27,25,23,22,21,31,24,26,18,28,22,21,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 141, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,20,14,13,16,8,32,16,25,13,15,19,17],
[37,0,35,25,31,31,32,36,29,43,31,29,30,31],
[30,15,0,11,18,27,23,27,18,30,21,20,33,32],
[36,25,39,0,23,33,27,27,21,26,26,29,29,22],
[37,19,32,27,0,31,19,33,27,38,26,19,24,28],
[34,19,23,17,19,0,26,31,28,23,22,25,23,28],
[42,18,27,23,31,24,0,27,15,30,21,23,16,21],
[18,14,23,23,17,19,23,0,22,18,13,17,18,21],
[34,21,32,29,23,22,35,28,0,23,21,22,31,31],
[25,7,20,24,12,27,20,32,27,0,23,28,26,28],
[37,19,29,24,24,28,29,37,29,27,0,22,33,21],
[35,21,30,21,31,25,27,33,28,22,28,0,23,21],
[31,20,17,21,26,27,34,32,19,24,17,27,0,23],
[33,19,18,28,22,22,29,29,19,22,29,29,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 142, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,26,28,25,27,27,25,26,21,26,28,25,30],
[21,0,28,27,25,25,28,24,22,20,28,26,22,29],
[24,22,0,27,23,24,31,27,26,21,24,24,24,29],
[22,23,23,0,23,23,26,27,26,24,26,24,26,27],
[25,25,27,27,0,23,25,28,28,27,28,23,24,30],
[23,25,26,27,27,0,26,26,22,25,31,22,19,26],
[23,22,19,24,25,24,0,23,18,23,22,19,14,25],
[25,26,23,23,22,24,27,0,25,23,27,22,21,25],
[24,28,24,24,22,28,32,25,0,21,30,21,25,26],
[29,30,29,26,23,25,27,27,29,0,31,29,27,31],
[24,22,26,24,22,19,28,23,20,19,0,23,25,24],
[22,24,26,26,27,28,31,28,29,21,27,0,24,30],
[25,28,26,24,26,31,36,29,25,23,25,26,0,28],
[20,21,21,23,20,24,25,25,24,19,26,20,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 143, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,27,26,23,30,20,29,23,28,23,28,30,25],
[24,0,24,25,21,28,23,32,22,30,24,26,27,23],
[23,26,0,23,27,28,25,31,25,31,25,28,31,28],
[24,25,27,0,26,28,24,35,25,27,23,31,30,28],
[27,29,23,24,0,32,19,28,20,24,24,29,30,25],
[20,22,22,22,18,0,15,29,20,26,18,28,24,21],
[30,27,25,26,31,35,0,37,24,33,29,31,28,32],
[21,18,19,15,22,21,13,0,16,20,19,24,22,19],
[27,28,25,25,30,30,26,34,0,34,28,31,31,29],
[22,20,19,23,26,24,17,30,16,0,19,29,25,23],
[27,26,25,27,26,32,21,31,22,31,0,28,29,30],
[22,24,22,19,21,22,19,26,19,21,22,0,24,20],
[20,23,19,20,20,26,22,28,19,25,21,26,0,23],
[25,27,22,22,25,29,18,31,21,27,20,30,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 144, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,24,27,22,29,24,25,25,26,26,22,26,29],
[30,0,27,33,29,33,33,24,30,35,27,35,30,37],
[26,23,0,26,25,26,25,24,24,27,24,23,27,29],
[23,17,24,0,19,26,23,22,20,26,23,27,21,24],
[28,21,25,31,0,29,27,21,27,32,26,28,32,27],
[21,17,24,24,21,0,20,29,22,27,24,24,27,24],
[26,17,25,27,23,30,0,24,18,28,22,26,26,30],
[25,26,26,28,29,21,26,0,24,32,24,28,29,31],
[25,20,26,30,23,28,32,26,0,29,28,25,28,30],
[24,15,23,24,18,23,22,18,21,0,19,21,25,26],
[24,23,26,27,24,26,28,26,22,31,0,23,27,28],
[28,15,27,23,22,26,24,22,25,29,27,0,24,30],
[24,20,23,29,18,23,24,21,22,25,23,26,0,28],
[21,13,21,26,23,26,20,19,20,24,22,20,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 145, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,25,30,30,30,32,30,33,35,30,32,33,34],
[20,0,24,25,33,31,23,27,25,25,30,35,31,34],
[25,26,0,28,28,28,30,24,25,28,31,33,31,33],
[20,25,22,0,26,31,26,29,26,25,25,33,29,31],
[20,17,22,24,0,22,25,20,20,20,27,27,26,25],
[20,19,22,19,28,0,24,21,24,26,27,29,27,25],
[18,27,20,24,25,26,0,20,28,19,24,28,24,29],
[20,23,26,21,30,29,30,0,30,27,31,34,30,32],
[17,25,25,24,30,26,22,20,0,27,26,32,32,32],
[15,25,22,25,30,24,31,23,23,0,27,27,24,24],
[20,20,19,25,23,23,26,19,24,23,0,30,28,27],
[18,15,17,17,23,21,22,16,18,23,20,0,19,20],
[17,19,19,21,24,23,26,20,18,26,22,31,0,25],
[16,16,17,19,25,25,21,18,18,26,23,30,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 146, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,27,25,26,28,33,27,30,27,25,31,26,32],
[25,0,26,31,19,32,26,30,28,30,17,36,34,34],
[23,24,0,23,25,29,27,23,21,22,26,31,26,32],
[25,19,27,0,22,23,25,24,20,23,20,26,18,26],
[24,31,25,28,0,32,25,27,30,27,25,36,24,32],
[22,18,21,27,18,0,25,21,24,18,16,25,13,27],
[17,24,23,25,25,25,0,28,21,27,24,32,24,30],
[23,20,27,26,23,29,22,0,28,30,25,25,19,27],
[20,22,29,30,20,26,29,22,0,25,27,32,23,32],
[23,20,28,27,23,32,23,20,25,0,19,34,29,27],
[25,33,24,30,25,34,26,25,23,31,0,30,24,29],
[19,14,19,24,14,25,18,25,18,16,20,0,16,26],
[24,16,24,32,26,37,26,31,27,21,26,34,0,34],
[18,16,18,24,18,23,20,23,18,23,21,24,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 147, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,25,26,26,28,27,28,18,22,41,32,29,20],
[39,0,32,30,37,32,39,30,27,23,50,37,33,35],
[25,18,0,23,30,27,28,32,28,19,36,26,26,11],
[24,20,27,0,27,30,28,29,27,16,34,38,26,18],
[24,13,20,23,0,18,22,33,15,21,36,21,12,12],
[22,18,23,20,32,0,33,26,26,22,34,29,22,21],
[23,11,22,22,28,17,0,21,21,23,30,26,24,12],
[22,20,18,21,17,24,29,0,24,16,36,35,22,18],
[32,23,22,23,35,24,29,26,0,15,37,35,19,14],
[28,27,31,34,29,28,27,34,35,0,33,34,29,20],
[9,0,14,16,14,16,20,14,13,17,0,15,19,7],
[18,13,24,12,29,21,24,15,15,16,35,0,22,14],
[21,17,24,24,38,28,26,28,31,21,31,28,0,19],
[30,15,39,32,38,29,38,32,36,30,43,36,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 148, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,24,28,23,25,29,21,24,16,23,21,22,28],
[29,0,25,28,22,26,24,25,22,25,26,22,26,24],
[26,25,0,27,22,24,33,25,22,18,27,21,21,28],
[22,22,23,0,20,29,33,24,23,20,21,17,25,20],
[27,28,28,30,0,25,35,23,27,25,26,26,20,29],
[25,24,26,21,25,0,26,29,21,14,18,21,18,23],
[21,26,17,17,15,24,0,23,22,18,17,14,12,21],
[29,25,25,26,27,21,27,0,27,17,26,19,15,30],
[26,28,28,27,23,29,28,23,0,22,27,19,25,27],
[34,25,32,30,25,36,32,33,28,0,34,26,30,29],
[27,24,23,29,24,32,33,24,23,16,0,17,21,27],
[29,28,29,33,24,29,36,31,31,24,33,0,29,31],
[28,24,29,25,30,32,38,35,25,20,29,21,0,26],
[22,26,22,30,21,27,29,20,23,21,23,19,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 149, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,27,22,13,20,20,10,22,15,16,15,26,24],
[32,0,39,33,29,34,39,24,26,24,26,29,37,27],
[23,11,0,23,18,27,18,12,21,8,16,17,27,21],
[28,17,27,0,24,26,23,25,23,25,22,21,23,16],
[37,21,32,26,0,20,29,19,23,18,28,26,35,31],
[30,16,23,24,30,0,18,24,26,23,27,17,31,24],
[30,11,32,27,21,32,0,26,25,21,16,17,26,22],
[40,26,38,25,31,26,24,0,37,32,22,18,33,32],
[28,24,29,27,27,24,25,13,0,23,22,19,32,18],
[35,26,42,25,32,27,29,18,27,0,34,21,37,28],
[34,24,34,28,22,23,34,28,28,16,0,27,36,25],
[35,21,33,29,24,33,33,32,31,29,23,0,32,36],
[24,13,23,27,15,19,24,17,18,13,14,18,0,16],
[26,23,29,34,19,26,28,18,32,22,25,14,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 150, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,1,22,24,13,15,18,16,20,15,18,29,27],
[34,0,26,20,25,25,26,40,35,43,21,44,25,39],
[49,24,0,29,40,24,49,40,30,34,29,40,35,43],
[28,30,21,0,25,19,34,34,19,24,23,24,25,33],
[26,25,10,25,0,11,21,35,26,29,15,28,27,33],
[37,25,26,31,39,0,37,41,22,41,21,34,17,45],
[35,24,1,16,29,13,0,28,24,28,15,18,25,27],
[32,10,10,16,15,9,22,0,11,19,15,18,25,33],
[34,15,20,31,24,28,26,39,0,35,15,33,19,33],
[30,7,16,26,21,9,22,31,15,0,21,15,15,24],
[35,29,21,27,35,29,35,35,35,29,0,29,24,29],
[32,6,10,26,22,16,32,32,17,35,21,0,17,39],
[21,25,15,25,23,33,25,25,31,35,26,33,0,33],
[23,11,7,17,17,5,23,17,17,26,21,11,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 151, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,27,28,26,36,41,30,25,27,25,32,26,25],
[32,0,24,28,46,40,44,41,40,34,38,38,38,35],
[23,26,0,32,34,32,43,30,27,25,31,42,17,25],
[22,22,18,0,22,27,33,31,18,27,18,30,24,28],
[24,4,16,28,0,40,35,30,23,29,27,29,26,20],
[14,10,18,23,10,0,35,29,22,25,17,29,13,26],
[9,6,7,17,15,15,0,24,14,6,12,17,11,10],
[20,9,20,19,20,21,26,0,16,18,22,27,10,11],
[25,10,23,32,27,28,36,34,0,31,25,40,31,24],
[23,16,25,23,21,25,44,32,19,0,17,29,13,31],
[25,12,19,32,23,33,38,28,25,33,0,33,27,29],
[18,12,8,20,21,21,33,23,10,21,17,0,4,16],
[24,12,33,26,24,37,39,40,19,37,23,46,0,27],
[25,15,25,22,30,24,40,39,26,19,21,34,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 152, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,27,23,21,21,22,22,27,24,24,25,25],
[24,0,23,22,21,18,22,19,19,28,20,24,24,19],
[24,27,0,24,21,24,23,21,26,23,21,27,23,22],
[23,28,26,0,28,20,24,23,27,27,24,25,28,28],
[27,29,29,22,0,20,20,22,26,25,25,26,26,23],
[29,32,26,30,30,0,25,27,25,31,27,34,33,28],
[29,28,27,26,30,25,0,22,29,29,29,28,28,26],
[28,31,29,27,28,23,28,0,25,26,31,28,31,26],
[28,31,24,23,24,25,21,25,0,25,23,27,22,24],
[23,22,27,23,25,19,21,24,25,0,24,24,22,24],
[26,30,29,26,25,23,21,19,27,26,0,24,30,22],
[26,26,23,25,24,16,22,22,23,26,26,0,26,23],
[25,26,27,22,24,17,22,19,28,28,20,24,0,24],
[25,31,28,22,27,22,24,24,26,26,28,27,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 153, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,27,22,23,23,20,21,28,23,35,36,23,22],
[19,0,21,24,20,23,20,19,24,14,23,15,17,16],
[23,29,0,23,26,30,28,24,24,27,37,32,27,22],
[28,26,27,0,24,23,17,22,22,28,30,25,17,18],
[27,30,24,26,0,32,23,23,25,31,29,28,24,27],
[27,27,20,27,18,0,26,14,26,26,28,28,18,22],
[30,30,22,33,27,24,0,14,32,23,31,31,25,26],
[29,31,26,28,27,36,36,0,25,28,31,28,31,25],
[22,26,26,28,25,24,18,25,0,20,34,20,15,12],
[27,36,23,22,19,24,27,22,30,0,30,38,25,25],
[15,27,13,20,21,22,19,19,16,20,0,24,17,17],
[14,35,18,25,22,22,19,22,30,12,26,0,13,17],
[27,33,23,33,26,32,25,19,35,25,33,37,0,27],
[28,34,28,32,23,28,24,25,38,25,33,33,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 154, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,17,26,26,18,23,28,23,32,17,19,29,19],
[33,0,30,31,29,31,26,34,28,34,24,29,31,30],
[33,20,0,32,25,34,33,35,25,32,28,25,27,29],
[24,19,18,0,24,26,28,30,20,25,22,16,22,16],
[24,21,25,26,0,29,32,28,30,36,27,22,26,25],
[32,19,16,24,21,0,21,27,18,30,17,18,28,19],
[27,24,17,22,18,29,0,27,22,30,24,22,20,25],
[22,16,15,20,22,23,23,0,19,23,22,16,25,20],
[27,22,25,30,20,32,28,31,0,28,22,24,32,26],
[18,16,18,25,14,20,20,27,22,0,17,12,19,18],
[33,26,22,28,23,33,26,28,28,33,0,25,32,21],
[31,21,25,34,28,32,28,34,26,38,25,0,33,21],
[21,19,23,28,24,22,30,25,18,31,18,17,0,20],
[31,20,21,34,25,31,25,30,24,32,29,29,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 155, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,20,27,18,17,24,28,24,21,25,21,25],
[24,0,28,27,30,22,21,24,33,21,22,25,21,22],
[24,22,0,19,21,22,16,21,30,18,21,25,21,18],
[30,23,31,0,25,23,18,24,31,16,22,24,22,26],
[23,20,29,25,0,18,17,23,32,17,23,22,20,18],
[32,28,28,27,32,0,23,25,35,22,24,26,25,27],
[33,29,34,32,33,27,0,28,36,23,31,28,31,30],
[26,26,29,26,27,25,22,0,27,23,20,29,27,27],
[22,17,20,19,18,15,14,23,0,18,14,18,16,19],
[26,29,32,34,33,28,27,27,32,0,34,33,34,25],
[29,28,29,28,27,26,19,30,36,16,0,25,26,28],
[25,25,25,26,28,24,22,21,32,17,25,0,23,20],
[29,29,29,28,30,25,19,23,34,16,24,27,0,21],
[25,28,32,24,32,23,20,23,31,25,22,30,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 156, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,22,18,25,23,20,18,20,26,25,27,28,22],
[22,0,22,24,22,21,34,24,16,31,24,29,27,23],
[28,28,0,18,30,30,32,24,27,34,29,29,27,28],
[32,26,32,0,29,34,34,28,25,33,29,35,33,31],
[25,28,20,21,0,24,29,20,21,33,27,34,26,25],
[27,29,20,16,26,0,32,23,20,28,28,31,32,28],
[30,16,18,16,21,18,0,18,15,20,19,27,26,24],
[32,26,26,22,30,27,32,0,20,32,32,33,32,28],
[30,34,23,25,29,30,35,30,0,31,34,33,32,31],
[24,19,16,17,17,22,30,18,19,0,21,27,23,22],
[25,26,21,21,23,22,31,18,16,29,0,28,23,23],
[23,21,21,15,16,19,23,17,17,23,22,0,23,17],
[22,23,23,17,24,18,24,18,18,27,27,27,0,24],
[28,27,22,19,25,22,26,22,19,28,27,33,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 157, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,31,25,29,29,35,29,25,27,33,30,18,29],
[26,0,27,26,27,25,23,27,24,19,27,28,23,21],
[19,23,0,22,23,24,23,16,13,22,21,28,19,20],
[25,24,28,0,26,28,31,27,24,24,27,34,19,24],
[21,23,27,24,0,23,28,29,19,27,29,25,15,20],
[21,25,26,22,27,0,27,23,20,24,26,24,24,23],
[15,27,27,19,22,23,0,20,15,18,20,27,19,22],
[21,23,34,23,21,27,30,0,21,22,26,24,19,25],
[25,26,37,26,31,30,35,29,0,27,29,29,22,28],
[23,31,28,26,23,26,32,28,23,0,25,33,29,28],
[17,23,29,23,21,24,30,24,21,25,0,20,18,27],
[20,22,22,16,25,26,23,26,21,17,30,0,21,17],
[32,27,31,31,35,26,31,31,28,21,32,29,0,25],
[21,29,30,26,30,27,28,25,22,22,23,33,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 158, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,21,18,29,26,25,25,25,30,26,26,27,14],
[29,0,19,23,27,32,23,31,21,36,29,28,26,27],
[29,31,0,19,30,26,38,31,34,38,33,29,35,29],
[32,27,31,0,36,35,25,39,37,41,33,39,35,27],
[21,23,20,14,0,17,27,11,20,21,20,13,26,16],
[24,18,24,15,33,0,21,20,17,17,21,22,27,19],
[25,27,12,25,23,29,0,25,27,34,31,30,34,16],
[25,19,19,11,39,30,25,0,18,38,25,14,32,12],
[25,29,16,13,30,33,23,32,0,35,36,26,31,32],
[20,14,12,9,29,33,16,12,15,0,17,10,26,11],
[24,21,17,17,30,29,19,25,14,33,0,22,20,19],
[24,22,21,11,37,28,20,36,24,40,28,0,34,25],
[23,24,15,15,24,23,16,18,19,24,30,16,0,21],
[36,23,21,23,34,31,34,38,18,39,31,25,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 159, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,19,25,10,21,18,27,24,20,11,17,23,19],
[23,0,16,29,15,25,24,29,30,21,15,18,19,18],
[31,34,0,17,24,21,23,24,33,9,13,20,11,27],
[25,21,33,0,23,30,20,27,31,17,15,25,25,22],
[40,35,26,27,0,29,31,29,37,21,22,22,22,29],
[29,25,29,20,21,0,21,28,27,21,19,22,17,27],
[32,26,27,30,19,29,0,37,44,27,17,30,30,29],
[23,21,26,23,21,22,13,0,26,29,14,22,29,22],
[26,20,17,19,13,23,6,24,0,21,11,19,24,24],
[30,29,41,33,29,29,23,21,29,0,26,31,28,31],
[39,35,37,35,28,31,33,36,39,24,0,34,27,33],
[33,32,30,25,28,28,20,28,31,19,16,0,29,26],
[27,31,39,25,28,33,20,21,26,22,23,21,0,34],
[31,32,23,28,21,23,21,28,26,19,17,24,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 160, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,29,31,33,23,33,29,25,32,26,31,27,30],
[23,0,27,28,32,27,24,26,26,27,23,25,27,24],
[21,23,0,29,24,21,27,24,21,29,21,19,21,26],
[19,22,21,0,29,18,21,23,23,26,17,23,22,23],
[17,18,26,21,0,18,22,19,23,25,15,23,20,23],
[27,23,29,32,32,0,28,27,26,31,26,29,21,29],
[17,26,23,29,28,22,0,30,21,30,18,18,25,29],
[21,24,26,27,31,23,20,0,20,27,17,24,21,31],
[25,24,29,27,27,24,29,30,0,30,23,22,28,28],
[18,23,21,24,25,19,20,23,20,0,12,22,23,24],
[24,27,29,33,35,24,32,33,27,38,0,28,27,33],
[19,25,31,27,27,21,32,26,28,28,22,0,22,28],
[23,23,29,28,30,29,25,29,22,27,23,28,0,22],
[20,26,24,27,27,21,21,19,22,26,17,22,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 161, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,21,17,31,29,21,32,22,39,29,25,24,27],
[20,0,17,21,24,22,22,23,20,23,18,26,21,20],
[29,33,0,26,27,29,19,30,28,33,23,26,29,26],
[33,29,24,0,34,27,34,37,32,38,31,34,36,30],
[19,26,23,16,0,23,23,22,26,27,23,24,23,24],
[21,28,21,23,27,0,19,30,26,31,25,30,31,33],
[29,28,31,16,27,31,0,31,29,41,30,32,31,27],
[18,27,20,13,28,20,19,0,23,33,21,20,23,18],
[28,30,22,18,24,24,21,27,0,32,29,23,25,23],
[11,27,17,12,23,19,9,17,18,0,17,19,17,15],
[21,32,27,19,27,25,20,29,21,33,0,21,23,23],
[25,24,24,16,26,20,18,30,27,31,29,0,22,24],
[26,29,21,14,27,19,19,27,25,33,27,28,0,27],
[23,30,24,20,26,17,23,32,27,35,27,26,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 162, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,30,28,18,20,23,22,16,16,20,17,21,16],
[27,0,25,22,23,25,27,26,20,24,19,27,15,13],
[20,25,0,25,15,24,19,15,21,18,27,20,6,11],
[22,28,25,0,24,24,29,22,18,27,28,21,24,23],
[32,27,35,26,0,25,23,30,19,20,27,25,23,11],
[30,25,26,26,25,0,28,25,25,22,27,19,22,15],
[27,23,31,21,27,22,0,32,21,15,28,23,15,12],
[28,24,35,28,20,25,18,0,20,21,22,10,17,15],
[34,30,29,32,31,25,29,30,0,22,29,36,21,18],
[34,26,32,23,30,28,35,29,28,0,27,23,17,18],
[30,31,23,22,23,23,22,28,21,23,0,28,18,15],
[33,23,30,29,25,31,27,40,14,27,22,0,25,13],
[29,35,44,26,27,28,35,33,29,33,32,25,0,25],
[34,37,39,27,39,35,38,35,32,32,35,37,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 163, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,22,28,23,28,25,26,21,27,22,25,27,21],
[20,0,22,24,22,24,23,23,18,22,16,19,20,20],
[28,28,0,31,29,25,25,31,21,25,22,32,28,31],
[22,26,19,0,24,22,22,28,17,26,20,28,25,24],
[27,28,21,26,0,23,26,30,20,25,25,29,28,23],
[22,26,25,28,27,0,28,24,17,25,23,24,25,19],
[25,27,25,28,24,22,0,28,19,24,22,26,25,20],
[24,27,19,22,20,26,22,0,18,25,20,20,21,22],
[29,32,29,33,30,33,31,32,0,25,28,30,30,26],
[23,28,25,24,25,25,26,25,25,0,25,28,24,23],
[28,34,28,30,25,27,28,30,22,25,0,30,24,24],
[25,31,18,22,21,26,24,30,20,22,20,0,20,25],
[23,30,22,25,22,25,25,29,20,26,26,30,0,28],
[29,30,19,26,27,31,30,28,24,27,26,25,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 164, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,26,20,26,31,32,28,24,23,22,27,24,32],
[23,0,22,22,30,31,29,21,26,24,28,28,26,28],
[24,28,0,22,29,28,30,23,29,28,27,26,25,28],
[30,28,28,0,27,29,32,25,26,20,24,30,28,31],
[24,20,21,23,0,29,26,17,24,22,19,21,22,26],
[19,19,22,21,21,0,25,14,20,18,18,20,26,25],
[18,21,20,18,24,25,0,15,19,16,19,22,23,24],
[22,29,27,25,33,36,35,0,28,23,27,32,28,27],
[26,24,21,24,26,30,31,22,0,23,25,23,24,27],
[27,26,22,30,28,32,34,27,27,0,27,29,25,28],
[28,22,23,26,31,32,31,23,25,23,0,27,26,34],
[23,22,24,20,29,30,28,18,27,21,23,0,26,28],
[26,24,25,22,28,24,27,22,26,25,24,24,0,28],
[18,22,22,19,24,25,26,23,23,22,16,22,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 165, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,29,20,33,23,27,25,27,23,19,25,24,31],
[20,0,26,21,25,18,24,24,19,18,18,20,21,28],
[21,24,0,26,26,22,22,21,14,26,27,18,18,28],
[30,29,24,0,30,25,25,25,23,27,24,24,26,30],
[17,25,24,20,0,15,20,22,17,17,21,18,20,24],
[27,32,28,25,35,0,28,26,24,26,27,23,24,33],
[23,26,28,25,30,22,0,23,18,26,30,22,26,29],
[25,26,29,25,28,24,27,0,26,25,27,22,20,27],
[23,31,36,27,33,26,32,24,0,28,28,24,24,34],
[27,32,24,23,33,24,24,25,22,0,23,26,24,25],
[31,32,23,26,29,23,20,23,22,27,0,23,25,30],
[25,30,32,26,32,27,28,28,26,24,27,0,22,32],
[26,29,32,24,30,26,24,30,26,26,25,28,0,34],
[19,22,22,20,26,17,21,23,16,25,20,18,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 166, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,30,27,25,28,33,26,27,33,31,36,32,33],
[22,0,25,25,20,28,23,25,20,28,27,28,28,31],
[20,25,0,25,21,25,30,26,24,33,22,29,33,25],
[23,25,25,0,23,23,27,22,24,34,29,28,29,24],
[25,30,29,27,0,29,32,25,25,36,27,36,32,26],
[22,22,25,27,21,0,28,25,25,35,29,32,30,26],
[17,27,20,23,18,22,0,16,16,29,26,28,27,25],
[24,25,24,28,25,25,34,0,25,29,28,30,34,28],
[23,30,26,26,25,25,34,25,0,31,24,34,25,30],
[17,22,17,16,14,15,21,21,19,0,15,25,25,19],
[19,23,28,21,23,21,24,22,26,35,0,28,28,22],
[14,22,21,22,14,18,22,20,16,25,22,0,24,24],
[18,22,17,21,18,20,23,16,25,25,22,26,0,23],
[17,19,25,26,24,24,25,22,20,31,28,26,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 167, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,35,35,32,34,23,33,21,25,27,34,33,20],
[16,0,26,16,21,25,16,29,21,17,19,24,32,19],
[15,24,0,15,17,17,18,27,18,16,15,23,33,18],
[15,34,35,0,23,33,22,33,28,35,16,33,32,24],
[18,29,33,27,0,22,20,24,19,24,20,30,31,15],
[16,25,33,17,28,0,19,26,23,25,16,26,35,26],
[27,34,32,28,30,31,0,28,24,29,18,30,38,23],
[17,21,23,17,26,24,22,0,22,23,20,25,31,23],
[29,29,32,22,31,27,26,28,0,32,28,26,37,29],
[25,33,34,15,26,25,21,27,18,0,22,23,32,21],
[23,31,35,34,30,34,32,30,22,28,0,31,33,21],
[16,26,27,17,20,24,20,25,24,27,19,0,35,24],
[17,18,17,18,19,15,12,19,13,18,17,15,0,10],
[30,31,32,26,35,24,27,27,21,29,29,26,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 168, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,22,32,33,24,31,42,38,36,43,35,32,26],
[15,0,19,18,35,33,31,37,20,35,34,15,28,26],
[28,31,0,28,28,16,25,33,28,25,37,20,23,36],
[18,32,22,0,38,26,40,47,33,35,32,31,34,36],
[17,15,22,12,0,25,18,43,14,25,15,12,21,25],
[26,17,34,24,25,0,25,31,21,24,25,25,35,32],
[19,19,25,10,32,25,0,34,19,36,21,20,28,18],
[8,13,17,3,7,19,16,0,3,24,12,7,19,17],
[12,30,22,17,36,29,31,47,0,33,14,29,35,33],
[14,15,25,15,25,26,14,26,17,0,22,13,19,23],
[7,16,13,18,35,25,29,38,36,28,0,23,29,25],
[15,35,30,19,38,25,30,43,21,37,27,0,33,25],
[18,22,27,16,29,15,22,31,15,31,21,17,0,24],
[24,24,14,14,25,18,32,33,17,27,25,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 169, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,29,26,26,20,31,29,25,31,22,26,25,27],
[24,0,24,24,20,24,21,28,20,25,20,20,19,26],
[21,26,0,21,19,20,20,27,15,26,22,15,20,19],
[24,26,29,0,20,29,22,27,28,25,24,19,17,25],
[24,30,31,30,0,29,26,35,23,35,19,29,25,32],
[30,26,30,21,21,0,26,29,20,30,28,16,22,24],
[19,29,30,28,24,24,0,31,25,25,24,23,24,22],
[21,22,23,23,15,21,19,0,21,22,14,20,18,18],
[25,30,35,22,27,30,25,29,0,27,27,22,20,25],
[19,25,24,25,15,20,25,28,23,0,11,16,17,26],
[28,30,28,26,31,22,26,36,23,39,0,28,21,31],
[24,30,35,31,21,34,27,30,28,34,22,0,22,25],
[25,31,30,33,25,28,26,32,30,33,29,28,0,27],
[23,24,31,25,18,26,28,32,25,24,19,25,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 170, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,23,33,35,31,29,30,36,41,30,32,36,33],
[18,0,21,22,19,27,23,26,29,34,27,19,25,25],
[27,29,0,27,24,21,22,27,25,35,25,24,21,30],
[17,28,23,0,33,28,18,27,33,24,29,25,31,29],
[15,31,26,17,0,27,24,27,28,31,27,26,31,29],
[19,23,29,22,23,0,18,31,27,25,22,15,21,26],
[21,27,28,32,26,32,0,34,31,35,28,29,35,29],
[20,24,23,23,23,19,16,0,29,33,23,25,26,27],
[14,21,25,17,22,23,19,21,0,22,16,13,19,22],
[9,16,15,26,19,25,15,17,28,0,29,16,26,21],
[20,23,25,21,23,28,22,27,34,21,0,20,20,24],
[18,31,26,25,24,35,21,25,37,34,30,0,33,34],
[14,25,29,19,19,29,15,24,31,24,30,17,0,33],
[17,25,20,21,21,24,21,23,28,29,26,16,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 171, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,22,31,29,28,29,29,31,30,29,35,27,35],
[24,0,24,25,28,30,31,25,24,30,23,31,31,29],
[28,26,0,24,28,35,24,26,30,32,25,34,32,30],
[19,25,26,0,24,29,26,27,21,22,23,24,27,28],
[21,22,22,26,0,29,30,28,20,26,20,22,25,25],
[22,20,15,21,21,0,23,21,19,28,24,20,22,25],
[21,19,26,24,20,27,0,19,23,28,16,28,25,23],
[21,25,24,23,22,29,31,0,26,30,23,26,30,30],
[19,26,20,29,30,31,27,24,0,27,24,28,21,27],
[20,20,18,28,24,22,22,20,23,0,20,24,25,30],
[21,27,25,27,30,26,34,27,26,30,0,33,30,37],
[15,19,16,26,28,30,22,24,22,26,17,0,21,31],
[23,19,18,23,25,28,25,20,29,25,20,29,0,30],
[15,21,20,22,25,25,27,20,23,20,13,19,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 172, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,22,27,32,23,21,27,28,24,33,24,24,24],
[20,0,16,28,27,28,26,23,22,28,27,20,22,29],
[28,34,0,30,33,30,30,25,29,31,33,27,28,36],
[23,22,20,0,28,25,26,25,20,31,34,19,19,26],
[18,23,17,22,0,23,23,19,24,19,26,17,23,21],
[27,22,20,25,27,0,22,23,25,23,29,21,28,26],
[29,24,20,24,27,28,0,25,27,25,25,27,23,25],
[23,27,25,25,31,27,25,0,27,27,32,22,24,23],
[22,28,21,30,26,25,23,23,0,27,28,24,22,24],
[26,22,19,19,31,27,25,23,23,0,29,20,25,26],
[17,23,17,16,24,21,25,18,22,21,0,19,25,24],
[26,30,23,31,33,29,23,28,26,30,31,0,27,33],
[26,28,22,31,27,22,27,26,28,25,25,23,0,21],
[26,21,14,24,29,24,25,27,26,24,26,17,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 173, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,31,29,31,29,25,22,26,26,25,24,25,30],
[23,0,29,19,28,24,28,27,27,25,21,22,19,33],
[19,21,0,18,26,27,23,26,18,24,24,23,20,19],
[21,31,32,0,30,31,28,28,28,30,30,25,29,34],
[19,22,24,20,0,21,24,22,26,25,23,27,24,25],
[21,26,23,19,29,0,28,22,26,24,23,24,18,26],
[25,22,27,22,26,22,0,27,22,23,20,25,20,26],
[28,23,24,22,28,28,23,0,25,28,22,23,19,28],
[24,23,32,22,24,24,28,25,0,27,22,22,16,25],
[24,25,26,20,25,26,27,22,23,0,24,29,17,30],
[25,29,26,20,27,27,30,28,28,26,0,26,18,26],
[26,28,27,25,23,26,25,27,28,21,24,0,24,28],
[25,31,30,21,26,32,30,31,34,33,32,26,0,31],
[20,17,31,16,25,24,24,22,25,20,24,22,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 174, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,15,30,18,21,21,21,21,22,26,22,29,22],
[18,0,17,25,22,16,21,20,20,21,29,16,23,18],
[35,33,0,30,30,25,28,29,30,32,37,27,33,29],
[20,25,20,0,19,20,22,21,21,24,26,21,23,22],
[32,28,20,31,0,27,27,25,23,27,30,24,27,23],
[29,34,25,30,23,0,26,26,28,25,30,22,29,26],
[29,29,22,28,23,24,0,20,25,27,24,20,34,25],
[29,30,21,29,25,24,30,0,26,29,29,24,32,21],
[29,30,20,29,27,22,25,24,0,26,26,23,28,24],
[28,29,18,26,23,25,23,21,24,0,31,22,27,23],
[24,21,13,24,20,20,26,21,24,19,0,19,24,22],
[28,34,23,29,26,28,30,26,27,28,31,0,28,27],
[21,27,17,27,23,21,16,18,22,23,26,22,0,21],
[28,32,21,28,27,24,25,29,26,27,28,23,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 175, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,24,26,32,24,33,28,32,26,30,30,31],
[23,0,26,30,25,31,25,32,31,24,21,29,29,30],
[23,24,0,25,24,31,25,33,32,24,18,27,26,27],
[26,20,25,0,21,29,21,33,31,20,16,24,29,29],
[24,25,26,29,0,34,33,33,32,19,26,27,27,32],
[18,19,19,21,16,0,26,22,27,19,19,25,21,22],
[26,25,25,29,17,24,0,26,30,18,18,23,29,27],
[17,18,17,17,17,28,24,0,24,15,17,16,19,24],
[22,19,18,19,18,23,20,26,0,22,18,21,23,22],
[18,26,26,30,31,31,32,35,28,0,27,25,26,30],
[24,29,32,34,24,31,32,33,32,23,0,30,31,36],
[20,21,23,26,23,25,27,34,29,25,20,0,25,26],
[20,21,24,21,23,29,21,31,27,24,19,25,0,26],
[19,20,23,21,18,28,23,26,28,20,14,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 176, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,0,17,25,42,25,42,42,17,25,42,42,42],
[33,0,0,8,33,33,25,42,25,25,25,25,25,25],
[50,50,0,50,50,50,25,42,42,50,42,42,42,50],
[33,42,0,0,50,42,25,42,25,42,25,42,42,42],
[25,17,0,0,0,42,25,42,25,25,25,25,25,42],
[8,17,0,8,8,0,0,42,25,0,25,25,25,25],
[25,25,25,25,25,50,0,42,42,25,42,42,42,50],
[8,8,8,8,8,8,8,0,8,8,8,8,0,8],
[8,25,8,25,25,25,8,42,0,25,0,42,42,50],
[33,25,0,8,25,50,25,42,25,0,25,25,42,50],
[25,25,8,25,25,25,8,42,50,25,0,50,42,50],
[8,25,8,8,25,25,8,42,8,25,0,0,42,25],
[8,25,8,8,25,25,8,50,8,8,8,8,0,25],
[8,25,0,8,8,25,0,42,0,0,0,25,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 177, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,24,31,24,24,21,26,25,23,17,23,31],
[26,0,10,14,17,18,16,20,23,25,26,17,21,25],
[26,40,0,14,15,35,24,22,30,26,31,18,25,26],
[26,36,36,0,24,48,30,22,37,36,26,25,30,45],
[19,33,35,26,0,31,24,26,18,25,19,16,31,37],
[26,32,15,2,19,0,23,17,24,23,22,20,12,25],
[26,34,26,20,26,27,0,26,25,32,38,21,26,26],
[29,30,28,28,24,33,24,0,31,34,34,24,29,24],
[24,27,20,13,32,26,25,19,0,14,29,27,13,27],
[25,25,24,14,25,27,18,16,36,0,32,24,24,20],
[27,24,19,24,31,28,12,16,21,18,0,19,31,30],
[33,33,32,25,34,30,29,26,23,26,31,0,21,32],
[27,29,25,20,19,38,24,21,37,26,19,29,0,34],
[19,25,24,5,13,25,24,26,23,30,20,18,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 178, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,23,17,35,32,44,26,20,12,20,43,38,26],
[22,0,29,22,29,29,30,24,21,27,21,35,24,18],
[27,21,0,8,33,22,40,29,26,27,16,44,21,36],
[33,28,42,0,41,28,40,34,28,31,22,45,44,45],
[15,21,17,9,0,17,17,17,15,20,5,28,26,11],
[18,21,28,22,33,0,29,24,24,27,25,33,28,22],
[6,20,10,10,33,21,0,28,9,15,15,32,24,10],
[24,26,21,16,33,26,22,0,20,27,19,39,16,16],
[30,29,24,22,35,26,41,30,0,24,21,35,35,24],
[38,23,23,19,30,23,35,23,26,0,17,34,33,34],
[30,29,34,28,45,25,35,31,29,33,0,40,24,35],
[7,15,6,5,22,17,18,11,15,16,10,0,21,11],
[12,26,29,6,24,22,26,34,15,17,26,29,0,23],
[24,32,14,5,39,28,40,34,26,16,15,39,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 179, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,30,26,18,17,25,36,17,33,20,34,42,26],
[16,0,26,10,0,6,16,16,10,2,0,10,10,10],
[20,24,0,26,18,9,17,20,19,14,18,20,20,12],
[24,40,24,0,9,14,22,25,22,19,25,25,28,17],
[32,50,32,41,0,20,32,50,30,41,25,44,44,41],
[33,44,41,36,30,0,33,50,16,35,25,36,36,33],
[25,34,33,28,18,17,0,36,16,25,12,36,36,26],
[14,34,30,25,0,0,14,0,14,19,17,26,34,15],
[33,40,31,28,20,34,34,36,0,27,20,30,34,28],
[17,48,36,31,9,15,25,31,23,0,17,40,31,17],
[30,50,32,25,25,25,38,33,30,33,0,50,36,27],
[16,40,30,25,6,14,14,24,20,10,0,0,25,8],
[8,40,30,22,6,14,14,16,16,19,14,25,0,0],
[24,40,38,33,9,17,24,35,22,33,23,42,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 180, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,21,31,30,36,28,43,32,33,26,27,29,32],
[21,0,17,22,19,30,23,31,24,32,16,23,14,22],
[29,33,0,32,22,40,32,43,28,33,23,26,24,28],
[19,28,18,0,21,33,27,32,22,31,21,30,18,27],
[20,31,28,29,0,33,30,34,23,35,20,29,23,22],
[14,20,10,17,17,0,12,19,19,23,11,16,10,22],
[22,27,18,23,20,38,0,32,24,27,23,23,18,24],
[7,19,7,18,16,31,18,0,22,16,10,13,12,22],
[18,26,22,28,27,31,26,28,0,32,19,26,23,21],
[17,18,17,19,15,27,23,34,18,0,19,17,19,19],
[24,34,27,29,30,39,27,40,31,31,0,28,17,31],
[23,27,24,20,21,34,27,37,24,33,22,0,24,21],
[21,36,26,32,27,40,32,38,27,31,33,26,0,32],
[18,28,22,23,28,28,26,28,29,31,19,29,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 181, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,26,23,31,18,17,26,17,22,30,25,29,20],
[27,0,25,23,30,16,24,22,20,21,30,23,28,22],
[24,25,0,29,23,20,24,21,19,25,26,20,29,24],
[27,27,21,0,27,15,21,23,16,22,30,24,26,21],
[19,20,27,23,0,18,18,28,25,23,27,21,28,21],
[32,34,30,35,32,0,27,26,29,27,37,23,36,27],
[33,26,26,29,32,23,0,28,25,27,33,29,34,25],
[24,28,29,27,22,24,22,0,20,25,26,12,25,24],
[33,30,31,34,25,21,25,30,0,28,27,24,35,28],
[28,29,25,28,27,23,23,25,22,0,30,20,39,31],
[20,20,24,20,23,13,17,24,23,20,0,13,30,22],
[25,27,30,26,29,27,21,38,26,30,37,0,36,29],
[21,22,21,24,22,14,16,25,15,11,20,14,0,21],
[30,28,26,29,29,23,25,26,22,19,28,21,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 182, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,19,25,24,25,22,30,29,31,37,25,22],
[25,0,24,23,26,31,27,22,29,28,30,29,28,21],
[25,26,0,23,20,19,19,16,30,26,29,26,20,18],
[31,27,27,0,30,28,29,24,31,35,30,35,24,25],
[25,24,30,20,0,28,26,23,32,27,33,30,29,16],
[26,19,31,22,22,0,21,15,33,24,27,30,21,11],
[25,23,31,21,24,29,0,23,27,24,28,30,26,16],
[28,28,34,26,27,35,27,0,29,30,29,31,24,21],
[20,21,20,19,18,17,23,21,0,21,21,21,18,16],
[21,22,24,15,23,26,26,20,29,0,28,28,19,15],
[19,20,21,20,17,23,22,21,29,22,0,27,18,19],
[13,21,24,15,20,20,20,19,29,22,23,0,17,16],
[25,22,30,26,21,29,24,26,32,31,32,33,0,18],
[28,29,32,25,34,39,34,29,34,35,31,34,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 183, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,30,31,34,30,28,25,28,27,31,25,33,19],
[23,0,24,21,33,22,28,20,25,24,29,19,36,20],
[20,26,0,25,32,25,27,20,20,19,22,15,24,17],
[19,29,25,0,41,34,29,21,32,22,35,20,28,22],
[16,17,18,9,0,12,15,8,9,14,26,6,30,5],
[20,28,25,16,38,0,20,25,18,16,28,13,30,25],
[22,22,23,21,35,30,0,21,27,30,22,19,30,20],
[25,30,30,29,42,25,29,0,35,22,32,11,36,22],
[22,25,30,18,41,32,23,15,0,20,26,14,33,9],
[23,26,31,28,36,34,20,28,30,0,36,20,39,22],
[19,21,28,15,24,22,28,18,24,14,0,12,23,8],
[25,31,35,30,44,37,31,39,36,30,38,0,35,29],
[17,14,26,22,20,20,20,14,17,11,27,15,0,20],
[31,30,33,28,45,25,30,28,41,28,42,21,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 184, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,24,29,21,22,28,29,25,18,26,27,27,24],
[25,0,18,26,24,26,28,32,20,16,23,27,28,22],
[26,32,0,25,28,23,28,36,20,24,25,22,33,27],
[21,24,25,0,24,18,20,23,17,22,22,18,26,22],
[29,26,22,26,0,22,31,32,23,25,30,25,34,26],
[28,24,27,32,28,0,27,30,23,26,24,25,31,26],
[22,22,22,30,19,23,0,28,20,20,21,23,28,24],
[21,18,14,27,18,20,22,0,19,17,21,23,25,21],
[25,30,30,33,27,27,30,31,0,28,29,28,34,27],
[32,34,26,28,25,24,30,33,22,0,27,27,28,27],
[24,27,25,28,20,26,29,29,21,23,0,22,30,24],
[23,23,28,32,25,25,27,27,22,23,28,0,30,24],
[23,22,17,24,16,19,22,25,16,22,20,20,0,27],
[26,28,23,28,24,24,26,29,23,23,26,26,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 185, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,41,26,31,26,28,30,19,22,27,44,35,37],
[12,0,27,26,41,15,28,33,28,23,18,38,31,17],
[9,23,0,20,24,17,29,18,19,22,31,32,28,14],
[24,24,30,0,29,17,28,22,26,20,27,35,31,21],
[19,9,26,21,0,19,35,28,24,21,21,26,19,12],
[24,35,33,33,31,0,23,33,17,34,18,30,28,25],
[22,22,21,22,15,27,0,27,10,31,29,32,31,15],
[20,17,32,28,22,17,23,0,26,21,22,33,31,21],
[31,22,31,24,26,33,40,24,0,30,27,35,28,23],
[28,27,28,30,29,16,19,29,20,0,18,29,31,20],
[23,32,19,23,29,32,21,28,23,32,0,30,37,25],
[6,12,18,15,24,20,18,17,15,21,20,0,32,19],
[15,19,22,19,31,22,19,19,22,19,13,18,0,22],
[13,33,36,29,38,25,35,29,27,30,25,31,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 186, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,22,25,21,32,25,24,23,26,29,26,25,25],
[21,0,23,28,21,30,26,26,21,21,25,29,20,28],
[28,27,0,29,29,31,31,25,27,30,28,33,25,29],
[25,22,21,0,20,30,31,22,27,26,26,29,21,28],
[29,29,21,30,0,30,33,25,27,26,27,31,28,26],
[18,20,19,20,20,0,20,18,20,19,21,24,18,20],
[25,24,19,19,17,30,0,23,16,24,22,30,23,22],
[26,24,25,28,25,32,27,0,23,21,26,24,25,29],
[27,29,23,23,23,30,34,27,0,29,24,28,28,26],
[24,29,20,24,24,31,26,29,21,0,25,32,24,22],
[21,25,22,24,23,29,28,24,26,25,0,28,28,26],
[24,21,17,21,19,26,20,26,22,18,22,0,20,21],
[25,30,25,29,22,32,27,25,22,26,22,30,0,28],
[25,22,21,22,24,30,28,21,24,28,24,29,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 187, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,24,21,13,21,12,18,16,24,16,19,18,15],
[33,0,18,31,14,26,16,31,25,25,13,18,22,17],
[26,32,0,34,28,29,27,25,32,36,36,28,34,35],
[29,19,16,0,14,19,10,16,18,22,18,15,21,14],
[37,36,22,36,0,40,20,31,31,34,35,27,30,32],
[29,24,21,31,10,0,12,28,26,26,26,25,15,25],
[38,34,23,40,30,38,0,39,39,38,38,31,32,32],
[32,19,25,34,19,22,11,0,25,25,20,24,23,23],
[34,25,18,32,19,24,11,25,0,27,20,16,16,12],
[26,25,14,28,16,24,12,25,23,0,23,16,18,16],
[34,37,14,32,15,24,12,30,30,27,0,26,20,29],
[31,32,22,35,23,25,19,26,34,34,24,0,27,26],
[32,28,16,29,20,35,18,27,34,32,30,23,0,33],
[35,33,15,36,18,25,18,27,38,34,21,24,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 188, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,28,22,21,23,27,19,22,26,26,28,28,19],
[26,0,30,27,27,28,28,22,25,28,26,24,27,28],
[22,20,0,23,25,16,27,24,19,26,21,19,24,25],
[28,23,27,0,21,20,25,33,21,28,27,19,22,23],
[29,23,25,29,0,25,26,23,23,31,24,23,27,25],
[27,22,34,30,25,0,30,27,25,28,26,22,23,25],
[23,22,23,25,24,20,0,24,24,27,23,25,22,23],
[31,28,26,17,27,23,26,0,24,24,23,24,26,22],
[28,25,31,29,27,25,26,26,0,25,25,27,31,27],
[24,22,24,22,19,22,23,26,25,0,22,21,25,21],
[24,24,29,23,26,24,27,27,25,28,0,26,26,25],
[22,26,31,31,27,28,25,26,23,29,24,0,27,21],
[22,23,26,28,23,27,28,24,19,25,24,23,0,25],
[31,22,25,27,25,25,27,28,23,29,25,29,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 189, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,40,15,46,32,27,40,34,24,17,21,40,25],
[12,0,19,18,30,18,5,13,23,19,13,12,13,16],
[10,31,0,7,29,14,3,12,29,5,19,16,32,10],
[35,32,43,0,35,41,33,35,45,35,25,37,34,33],
[4,20,21,15,0,19,2,30,24,13,17,18,22,13],
[18,32,36,9,31,0,18,27,36,18,5,23,25,18],
[23,45,47,17,48,32,0,43,39,26,27,23,34,32],
[10,37,38,15,20,23,7,0,28,16,18,9,28,18],
[16,27,21,5,26,14,11,22,0,11,19,18,29,11],
[26,31,45,15,37,32,24,34,39,0,24,18,37,30],
[33,37,31,25,33,45,23,32,31,26,0,30,23,28],
[29,38,34,13,32,27,27,41,32,32,20,0,38,24],
[10,37,18,16,28,25,16,22,21,13,27,12,0,8],
[25,34,40,17,37,32,18,32,39,20,22,26,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 190, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,24,25,23,26,20,26,18,19,20,19,28,25],
[23,0,27,32,21,24,22,26,18,20,22,19,27,31],
[26,23,0,24,21,25,23,21,17,21,18,16,28,24],
[25,18,26,0,23,25,20,22,19,16,20,19,23,23],
[27,29,29,27,0,24,20,31,20,23,25,22,27,29],
[24,26,25,25,26,0,22,27,24,17,20,21,27,22],
[30,28,27,30,30,28,0,27,23,26,25,28,29,29],
[24,24,29,28,19,23,23,0,14,21,23,24,23,26],
[32,32,33,31,30,26,27,36,0,25,28,26,34,33],
[31,30,29,34,27,33,24,29,25,0,26,27,36,34],
[30,28,32,30,25,30,25,27,22,24,0,24,33,27],
[31,31,34,31,28,29,22,26,24,23,26,0,30,27],
[22,23,22,27,23,23,21,27,16,14,17,20,0,23],
[25,19,26,27,21,28,21,24,17,16,23,23,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 191, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,8,32,33,11,28,20,17,27,24,24,21,29],
[34,0,22,33,34,29,33,38,32,33,13,40,27,35],
[42,28,0,36,34,26,41,31,24,26,31,36,22,33],
[18,17,14,0,13,9,14,9,9,20,16,26,17,17],
[17,16,16,37,0,21,18,18,16,23,20,25,18,24],
[39,21,24,41,29,0,28,38,25,33,26,34,28,37],
[22,17,9,36,32,22,0,32,21,26,18,27,21,29],
[30,12,19,41,32,12,18,0,11,20,18,36,24,38],
[33,18,26,41,34,25,29,39,0,23,25,39,18,36],
[23,17,24,30,27,17,24,30,27,0,29,27,23,37],
[26,37,19,34,30,24,32,32,25,21,0,32,32,36],
[26,10,14,24,25,16,23,14,11,23,18,0,16,33],
[29,23,28,33,32,22,29,26,32,27,18,34,0,37],
[21,15,17,33,26,13,21,12,14,13,14,17,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 192, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,0,16,2,18,18,18,16,2,2,23,18,16],
[16,0,0,16,0,16,16,16,16,16,0,16,16,16],
[50,50,0,25,50,27,50,18,27,18,27,41,18,27],
[34,34,25,0,34,18,50,18,27,25,34,25,18,27],
[48,50,0,16,0,16,50,18,25,18,16,39,18,25],
[32,34,23,32,34,0,34,41,32,25,32,23,2,9],
[32,34,0,0,0,16,0,16,0,0,0,23,0,25],
[32,34,32,32,32,9,34,0,9,25,32,23,9,9],
[34,34,23,23,25,18,50,41,0,25,25,23,18,27],
[48,34,32,25,32,25,50,25,25,0,32,39,25,25],
[48,50,23,16,34,18,50,18,25,18,0,39,18,25],
[27,34,9,25,11,27,27,27,27,11,11,0,27,27],
[32,34,32,32,32,48,50,41,32,25,32,23,0,25],
[34,34,23,23,25,41,25,41,23,25,25,23,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 193, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,25,22,23,17,21,21,22,19,23,23,22,18],
[22,0,18,21,20,19,18,24,23,22,26,25,22,18],
[25,32,0,21,27,20,24,24,30,24,23,30,32,20],
[28,29,29,0,24,23,23,25,24,25,25,27,24,16],
[27,30,23,26,0,24,23,26,30,26,29,38,25,20],
[33,31,30,27,26,0,26,24,31,30,30,28,28,25],
[29,32,26,27,27,24,0,25,28,23,24,29,29,28],
[29,26,26,25,24,26,25,0,26,25,28,24,23,21],
[28,27,20,26,20,19,22,24,0,22,25,23,25,18],
[31,28,26,25,24,20,27,25,28,0,23,23,30,22],
[27,24,27,25,21,20,26,22,25,27,0,27,26,22],
[27,25,20,23,12,22,21,26,27,27,23,0,24,19],
[28,28,18,26,25,22,21,27,25,20,24,26,0,24],
[32,32,30,34,30,25,22,29,32,28,28,31,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 194, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,25,39,11,9,34,34,2,11,11,2,34,25],
[0,0,25,0,2,0,25,34,0,0,0,2,23,2],
[25,25,0,23,25,23,25,25,2,2,25,2,25,25],
[11,50,27,0,11,9,34,34,11,11,11,11,34,2],
[39,48,25,39,0,9,48,48,0,9,32,0,48,25],
[41,50,27,41,41,0,50,50,18,18,41,18,50,41],
[16,25,25,16,2,0,0,34,0,0,0,2,16,2],
[16,16,25,16,2,0,16,0,0,0,0,0,16,2],
[48,50,48,39,50,32,50,50,0,11,34,11,50,41],
[39,50,48,39,41,32,50,50,39,0,23,25,48,41],
[39,50,25,39,18,9,50,50,16,27,0,18,48,41],
[48,48,48,39,50,32,48,50,39,25,32,0,48,41],
[16,27,25,16,2,0,34,34,0,2,2,2,0,2],
[25,48,25,48,25,9,48,48,9,9,9,9,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 195, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,22,27,33,18,24,24,27,11,18,16,7,0],
[23,0,21,39,21,17,13,23,11,17,23,15,24,17],
[28,29,0,24,28,28,35,41,29,11,22,44,18,17],
[23,11,26,0,26,28,24,28,11,17,17,20,7,0],
[17,29,22,24,0,24,24,24,18,11,11,27,18,17],
[32,33,22,22,26,0,33,33,33,26,26,22,13,15],
[26,37,15,26,26,17,0,32,26,20,26,15,18,26],
[26,27,9,22,26,17,18,0,27,11,20,22,7,15],
[23,39,21,39,32,17,24,23,0,17,34,39,24,23],
[39,33,39,33,39,24,30,39,33,0,39,33,24,33],
[32,27,28,33,39,24,24,30,16,11,0,33,18,17],
[34,35,6,30,23,28,35,28,11,17,17,0,24,23],
[43,26,32,43,32,37,32,43,26,26,32,26,0,15],
[50,33,33,50,33,35,24,35,27,17,33,27,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 196, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,18,25,15,24,28,25,22,23,19,24,26,21],
[24,0,20,22,25,24,21,27,24,28,23,27,22,22],
[32,30,0,31,22,25,27,36,25,28,22,25,25,29],
[25,28,19,0,17,24,24,23,25,22,26,27,31,23],
[35,25,28,33,0,25,24,35,26,25,24,28,31,31],
[26,26,25,26,25,0,28,34,27,26,27,25,27,26],
[22,29,23,26,26,22,0,26,21,22,25,28,28,21],
[25,23,14,27,15,16,24,0,21,20,20,27,24,20],
[28,26,25,25,24,23,29,29,0,23,26,28,21,25],
[27,22,22,28,25,24,28,30,27,0,21,27,29,21],
[31,27,28,24,26,23,25,30,24,29,0,30,27,25],
[26,23,25,23,22,25,22,23,22,23,20,0,29,21],
[24,28,25,19,19,23,22,26,29,21,23,21,0,25],
[29,28,21,27,19,24,29,30,25,29,25,29,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 197, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,32,19,26,21,17,20,29,27,26,18,26,20],
[25,0,36,22,23,25,22,26,30,19,23,24,26,24],
[18,14,0,22,18,23,17,23,26,19,26,25,21,17],
[31,28,28,0,21,26,24,25,31,26,29,21,25,25],
[24,27,32,29,0,23,17,25,32,23,21,22,27,26],
[29,25,27,24,27,0,21,22,30,20,22,23,28,23],
[33,28,33,26,33,29,0,25,36,29,29,28,29,26],
[30,24,27,25,25,28,25,0,31,20,28,25,24,18],
[21,20,24,19,18,20,14,19,0,17,23,15,20,14],
[23,31,31,24,27,30,21,30,33,0,27,25,29,23],
[24,27,24,21,29,28,21,22,27,23,0,21,25,19],
[32,26,25,29,28,27,22,25,35,25,29,0,27,26],
[24,24,29,25,23,22,21,26,30,21,25,23,0,19],
[30,26,33,25,24,27,24,32,36,27,31,24,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 198, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,14,20,18,15,12,13,16,20,19,19,19,25],
[32,0,20,27,22,21,11,17,23,35,37,28,24,39],
[36,30,0,25,30,29,18,30,34,40,38,24,32,40],
[30,23,25,0,30,19,17,14,29,32,34,35,26,32],
[32,28,20,20,0,25,18,20,26,30,43,34,30,38],
[35,29,21,31,25,0,19,21,34,38,31,30,28,42],
[38,39,32,33,32,31,0,25,36,38,35,37,33,37],
[37,33,20,36,30,29,25,0,36,32,34,36,27,42],
[34,27,16,21,24,16,14,14,0,29,34,23,29,34],
[30,15,10,18,20,12,12,18,21,0,31,18,16,37],
[31,13,12,16,7,19,15,16,16,19,0,19,11,38],
[31,22,26,15,16,20,13,14,27,32,31,0,23,25],
[31,26,18,24,20,22,17,23,21,34,39,27,0,36],
[25,11,10,18,12,8,13,8,16,13,12,25,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 199, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,23,29,25,24,20,24,27,25,25,24,25],
[23,0,24,27,23,27,26,25,26,25,26,30,23,27],
[23,26,0,27,24,24,22,21,23,29,27,25,24,25],
[27,23,23,0,26,28,24,22,22,25,29,27,27,25],
[21,27,26,24,0,26,24,24,19,27,30,24,21,26],
[25,23,26,22,24,0,21,20,28,29,24,27,19,24],
[26,24,28,26,26,29,0,25,23,26,29,26,24,33],
[30,25,29,28,26,30,25,0,27,29,31,28,23,28],
[26,24,27,28,31,22,27,23,0,32,28,30,25,27],
[23,25,21,25,23,21,24,21,18,0,21,27,23,23],
[25,24,23,21,20,26,21,19,22,29,0,21,17,24],
[25,20,25,23,26,23,24,22,20,23,29,0,23,24],
[26,27,26,23,29,31,26,27,25,27,33,27,0,24],
[25,23,25,25,24,26,17,22,23,27,26,26,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda5(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 50, 200, "ME-BB", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebb/mebb_14_50.csv", index=False, header=False)

import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg
from kemeny import sc

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,120,123,135,130,119,118,114,122,127,137,127,122,122],
[131,0,138,132,134,136,121,117,123,142,146,133,146,124],
[128,113,0,138,130,124,119,120,124,142,137,132,127,126],
[116,119,113,0,138,112,112,129,112,121,125,122,128,115],
[121,117,121,113,0,115,105,113,109,129,133,115,131,120],
[132,115,127,139,136,0,125,113,125,132,147,134,134,120],
[133,130,132,139,146,126,0,129,128,142,138,156,136,125],
[137,134,131,122,138,138,122,0,128,132,143,131,135,126],
[129,128,127,139,142,126,123,123,0,134,147,139,137,121],
[124,109,109,130,122,119,109,119,117,0,129,124,122,124],
[114,105,114,126,118,104,113,108,104,122,0,116,117,102],
[124,118,119,129,136,117,95,120,112,127,135,0,142,115],
[129,105,124,123,120,117,115,116,114,129,134,109,0,122],
[129,127,125,136,131,131,126,125,130,127,149,136,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 1, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,145,139,144,88,186,130,128,103,152,138,154,158],
[110,0,123,148,116,100,138,133,124,100,150,171,152,136],
[106,128,0,125,126,85,150,118,133,111,130,139,143,154],
[112,103,126,0,142,117,153,91,117,114,144,157,134,132],
[107,135,125,109,0,109,145,120,144,117,140,154,139,152],
[163,151,166,134,142,0,164,135,124,132,132,175,155,142],
[65,113,101,98,106,87,0,102,108,98,105,126,101,112],
[121,118,133,160,131,116,149,0,146,128,156,174,167,136],
[123,127,118,134,107,127,143,105,0,102,158,164,167,130],
[148,151,140,137,134,119,153,123,149,0,145,168,145,156],
[99,101,121,107,111,119,146,95,93,106,0,132,132,110],
[113,80,112,94,97,76,125,77,87,83,119,0,127,110],
[97,99,108,117,112,96,150,84,84,106,119,124,0,117],
[93,115,97,119,99,109,139,115,121,95,141,141,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 2, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,136,99,125,126,123,136,155,111,133,131,89,131],
[137,0,149,120,97,126,132,113,98,131,155,176,110,95],
[115,102,0,82,128,129,104,107,125,118,166,132,74,108],
[152,131,169,0,92,166,144,133,109,132,186,154,143,146],
[126,154,123,159,0,143,143,134,147,141,170,143,118,138],
[125,125,122,85,108,0,143,113,98,117,136,137,140,96],
[128,119,147,107,108,108,0,125,102,122,163,140,121,132],
[115,138,144,118,117,138,126,0,104,131,177,140,106,99],
[96,153,126,142,104,153,149,147,0,127,150,160,90,110],
[140,120,133,119,110,134,129,120,124,0,165,159,89,120],
[118,96,85,65,81,115,88,74,101,86,0,81,104,80],
[120,75,119,97,108,114,111,111,91,92,170,0,109,103],
[162,141,177,108,133,111,130,145,161,162,147,142,0,120],
[120,156,143,105,113,155,119,152,141,131,171,148,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 3, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,145,135,127,134,129,114,122,141,134,130,110,129],
[109,0,113,128,118,148,128,118,131,123,116,123,118,120],
[106,138,0,132,121,121,115,95,138,116,116,117,118,115],
[116,123,119,0,125,129,115,92,113,126,124,113,108,116],
[124,133,130,126,0,152,147,130,133,139,138,117,113,128],
[117,103,130,122,99,0,112,88,108,113,120,99,101,109],
[122,123,136,136,104,139,0,113,131,134,119,112,108,120],
[137,133,156,159,121,163,138,0,150,139,134,134,133,139],
[129,120,113,138,118,143,120,101,0,140,127,118,117,122],
[110,128,135,125,112,138,117,112,111,0,133,117,111,114],
[117,135,135,127,113,131,132,117,124,118,0,131,123,112],
[121,128,134,138,134,152,139,117,133,134,120,0,127,133],
[141,133,133,143,138,150,143,118,134,140,128,124,0,124],
[122,131,136,135,123,142,131,112,129,137,139,118,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 4, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,115,113,102,120,137,121,121,85,142,135,110,116],
[134,0,131,105,129,118,135,129,117,100,153,136,150,142],
[136,120,0,112,110,121,101,133,115,91,130,121,131,118],
[138,146,139,0,126,132,142,151,131,127,156,157,156,121],
[149,122,141,125,0,159,151,129,130,125,139,115,137,139],
[131,133,130,119,92,0,123,118,107,95,131,117,142,129],
[114,116,150,109,100,128,0,137,121,95,125,119,120,86],
[130,122,118,100,122,133,114,0,111,91,131,127,121,111],
[130,134,136,120,121,144,130,140,0,113,123,89,137,105],
[166,151,160,124,126,156,156,160,138,0,154,142,161,139],
[109,98,121,95,112,120,126,120,128,97,0,127,131,97],
[116,115,130,94,136,134,132,124,162,109,124,0,122,124],
[141,101,120,95,114,109,131,130,114,90,120,129,0,97],
[135,109,133,130,112,122,165,140,146,112,154,127,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 5, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,115,59,85,108,91,63,77,103,131,129,92,76],
[142,0,147,98,99,137,109,87,120,101,152,151,79,98],
[136,104,0,120,79,120,139,121,122,101,120,125,108,114],
[192,153,131,0,144,164,146,114,152,141,110,143,159,116],
[166,152,172,107,0,184,150,98,159,105,183,187,140,142],
[143,114,131,87,67,0,102,90,102,92,126,124,133,103],
[160,142,112,105,101,149,0,74,94,95,144,113,118,95],
[188,164,130,137,153,161,177,0,96,127,196,182,158,152],
[174,131,129,99,92,149,157,155,0,81,144,124,136,137],
[148,150,150,110,146,159,156,124,170,0,120,154,192,182],
[120,99,131,141,68,125,107,55,107,131,0,136,120,105],
[122,100,126,108,64,127,138,69,127,97,115,0,94,83],
[159,172,143,92,111,118,133,93,115,59,131,157,0,110],
[175,153,137,135,109,148,156,99,114,69,146,168,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 6, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,137,144,140,139,119,138,121,135,139,152,129,143],
[110,0,124,136,129,122,119,114,107,124,108,124,128,143],
[114,127,0,140,132,125,127,129,129,130,122,134,130,143],
[107,115,111,0,113,111,110,106,115,118,114,126,113,121],
[111,122,119,138,0,129,120,122,104,123,116,133,120,139],
[112,129,126,140,122,0,108,133,128,123,101,132,131,142],
[132,132,124,141,131,143,0,118,121,133,130,136,121,144],
[113,137,122,145,129,118,133,0,117,130,127,120,123,128],
[130,144,122,136,147,123,130,134,0,145,135,144,147,150],
[116,127,121,133,128,128,118,121,106,0,120,128,122,124],
[112,143,129,137,135,150,121,124,116,131,0,133,133,152],
[99,127,117,125,118,119,115,131,107,123,118,0,121,134],
[122,123,121,138,131,120,130,128,104,129,118,130,0,127],
[108,108,108,130,112,109,107,123,101,127,99,117,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 7, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,117,110,136,113,121,107,110,136,96,119,116,115],
[134,0,129,129,143,104,130,111,117,131,112,128,126,127],
[134,122,0,130,141,109,134,116,122,141,120,115,111,121],
[141,122,121,0,143,116,123,120,112,144,109,119,113,123],
[115,108,110,108,0,102,124,110,113,131,84,105,108,107],
[138,147,142,135,149,0,152,125,135,157,124,147,131,132],
[130,121,117,128,127,99,0,114,110,123,111,116,124,126],
[144,140,135,131,141,126,137,0,131,142,126,129,124,137],
[141,134,129,139,138,116,141,120,0,151,120,131,129,138],
[115,120,110,107,120,94,128,109,100,0,91,108,108,119],
[155,139,131,142,167,127,140,125,131,160,0,141,123,144],
[132,123,136,132,146,104,135,122,120,143,110,0,129,138],
[135,125,140,138,143,120,127,127,122,143,128,122,0,127],
[136,124,130,128,144,119,125,114,113,132,107,113,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 8, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,109,120,130,108,155,102,72,104,87,85,73,86],
[135,0,171,105,120,124,150,109,80,89,110,82,101,87],
[142,80,0,111,72,111,160,59,50,82,35,59,84,42],
[131,146,140,0,124,161,140,91,108,131,111,107,106,96],
[121,131,179,127,0,133,118,61,97,70,61,61,102,37],
[143,127,140,90,118,0,172,115,59,93,87,74,96,56],
[96,101,91,111,133,79,0,96,84,68,66,92,37,80],
[149,142,192,160,190,136,155,0,104,138,89,96,114,67],
[179,171,201,143,154,192,167,147,0,150,104,107,136,114],
[147,162,169,120,181,158,183,113,101,0,142,110,122,130],
[164,141,216,140,190,164,185,162,147,109,0,96,160,114],
[166,169,192,144,190,177,159,155,144,141,155,0,160,112],
[178,150,167,145,149,155,214,137,115,129,91,91,0,82],
[165,164,209,155,214,195,171,184,137,121,137,139,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 9, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,119,125,134,124,97,134,129,119,122,125,119,137],
[130,0,128,114,131,121,128,135,127,125,132,125,119,138],
[132,123,0,115,133,115,104,136,117,125,121,131,114,136],
[126,137,136,0,141,131,127,152,150,129,123,140,123,133],
[117,120,118,110,0,127,117,118,120,116,116,124,108,136],
[127,130,136,120,124,0,122,128,128,122,120,125,102,132],
[154,123,147,124,134,129,0,143,147,138,135,156,139,140],
[117,116,115,99,133,123,108,0,126,113,119,114,113,119],
[122,124,134,101,131,123,104,125,0,114,109,129,119,124],
[132,126,126,122,135,129,113,138,137,0,129,131,124,140],
[129,119,130,128,135,131,116,132,142,122,0,136,129,146],
[126,126,120,111,127,126,95,137,122,120,115,0,115,140],
[132,132,137,128,143,149,112,138,132,127,122,136,0,138],
[114,113,115,118,115,119,111,132,127,111,105,111,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 10, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,132,114,84,162,102,136,117,151,139,89,157,132],
[96,0,139,125,107,151,86,149,131,157,128,79,115,123],
[119,112,0,137,113,147,95,139,112,159,151,103,138,119],
[137,126,114,0,119,121,114,106,100,188,118,82,123,112],
[167,144,138,132,0,159,109,124,144,132,132,122,143,166],
[89,100,104,130,92,0,125,118,126,157,117,133,129,125],
[149,165,156,137,142,126,0,126,135,144,133,114,144,137],
[115,102,112,145,127,133,125,0,118,190,122,106,150,136],
[134,120,139,151,107,125,116,133,0,175,132,120,131,150],
[100,94,92,63,119,94,107,61,76,0,114,49,106,98],
[112,123,100,133,119,134,118,129,119,137,0,103,138,117],
[162,172,148,169,129,118,137,145,131,202,148,0,175,126],
[94,136,113,128,108,122,107,101,120,145,113,76,0,109],
[119,128,132,139,85,126,114,115,101,153,134,125,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 11, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,134,117,129,131,126,137,110,124,107,117,135,132],
[125,0,131,109,127,129,135,136,119,123,136,118,132,134],
[117,120,0,115,122,136,124,117,119,121,133,116,138,132],
[134,142,136,0,140,135,128,130,123,122,134,130,132,135],
[122,124,129,111,0,121,126,114,112,115,119,109,137,123],
[120,122,115,116,130,0,130,126,115,113,112,117,132,122],
[125,116,127,123,125,121,0,123,120,116,121,117,118,129],
[114,115,134,121,137,125,128,0,110,127,120,105,136,137],
[141,132,132,128,139,136,131,141,0,128,130,108,131,134],
[127,128,130,129,136,138,135,124,123,0,138,114,139,131],
[144,115,118,117,132,139,130,131,121,113,0,110,130,127],
[134,133,135,121,142,134,134,146,143,137,141,0,145,139],
[116,119,113,119,114,119,133,115,120,112,121,106,0,132],
[119,117,119,116,128,129,122,114,117,120,124,112,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 12, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,129,127,128,140,124,117,119,134,134,125,114,122],
[117,0,118,120,129,131,132,119,122,133,139,128,115,139],
[122,133,0,132,129,133,117,125,134,139,132,130,124,136],
[124,131,119,0,126,125,122,125,116,127,132,125,135,130],
[123,122,122,125,0,128,120,122,114,128,123,116,124,129],
[111,120,118,126,123,0,108,109,113,118,124,123,111,125],
[127,119,134,129,131,143,0,131,115,125,127,125,135,130],
[134,132,126,126,129,142,120,0,112,139,126,127,126,130],
[132,129,117,135,137,138,136,139,0,139,129,126,119,143],
[117,118,112,124,123,133,126,112,112,0,119,117,112,129],
[117,112,119,119,128,127,124,125,122,132,0,115,109,123],
[126,123,121,126,135,128,126,124,125,134,136,0,128,142],
[137,136,127,116,127,140,116,125,132,139,142,123,0,128],
[129,112,115,121,122,126,121,121,108,122,128,109,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 13, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,168,82,125,132,110,140,107,143,130,117,148,132],
[78,0,136,83,91,126,104,99,99,149,122,64,145,138],
[83,115,0,82,134,112,88,149,101,128,122,113,137,121],
[169,168,169,0,165,168,127,154,136,135,144,117,165,189],
[126,160,117,86,0,127,95,115,72,145,133,99,112,130],
[119,125,139,83,124,0,109,119,114,126,123,75,104,136],
[141,147,163,124,156,142,0,165,124,152,140,140,157,183],
[111,152,102,97,136,132,86,0,97,118,110,79,133,132],
[144,152,150,115,179,137,127,154,0,154,152,111,147,147],
[108,102,123,116,106,125,99,133,97,0,104,122,162,143],
[121,129,129,107,118,128,111,141,99,147,0,130,130,144],
[134,187,138,134,152,176,111,172,140,129,121,0,155,152],
[103,106,114,86,139,147,94,118,104,89,121,96,0,120],
[119,113,130,62,121,115,68,119,104,108,107,99,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 14, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,130,117,115,129,127,118,124,118,128,132,127,108],
[129,0,139,124,125,124,130,127,122,130,134,124,120,126],
[121,112,0,116,117,129,121,112,115,111,111,120,116,102],
[134,127,135,0,121,121,126,128,118,128,119,129,120,119],
[136,126,134,130,0,138,141,131,128,128,137,120,129,121],
[122,127,122,130,113,0,125,111,121,127,113,126,117,114],
[124,121,130,125,110,126,0,121,126,124,123,125,126,118],
[133,124,139,123,120,140,130,0,137,135,137,135,117,133],
[127,129,136,133,123,130,125,114,0,115,132,127,127,115],
[133,121,140,123,123,124,127,116,136,0,127,131,128,124],
[123,117,140,132,114,138,128,114,119,124,0,132,127,122],
[119,127,131,122,131,125,126,116,124,120,119,0,119,121],
[124,131,135,131,122,134,125,134,124,123,124,132,0,128],
[143,125,149,132,130,137,133,118,136,127,129,130,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 15, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,132,126,104,132,137,112,135,91,156,103,132,143],
[128,0,104,141,110,99,135,104,146,101,143,97,114,136],
[119,147,0,143,101,106,166,136,146,128,138,108,111,173],
[125,110,108,0,110,118,127,108,123,106,120,111,113,138],
[147,141,150,141,0,121,145,119,151,99,147,109,152,166],
[119,152,145,133,130,0,130,159,145,138,146,117,138,148],
[114,116,85,124,106,121,0,129,113,79,136,94,117,137],
[139,147,115,143,132,92,122,0,129,95,120,141,140,154],
[116,105,105,128,100,106,138,122,0,93,134,117,115,142],
[160,150,123,145,152,113,172,156,158,0,159,118,172,169],
[95,108,113,131,104,105,115,131,117,92,0,106,126,143],
[148,154,143,140,142,134,157,110,134,133,145,0,143,143],
[119,137,140,138,99,113,134,111,136,79,125,108,0,115],
[108,115,78,113,85,103,114,97,109,82,108,108,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 16, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,116,138,131,153,123,147,149,143,158,153,151,136],
[122,0,144,142,137,162,136,160,138,155,137,133,153,154],
[135,107,0,125,133,127,124,128,119,117,145,127,118,138],
[113,109,126,0,118,129,113,117,125,117,134,118,135,123],
[120,114,118,133,0,131,103,142,121,111,137,120,134,115],
[98,89,124,122,120,0,100,98,102,102,117,86,119,100],
[128,115,127,138,148,151,0,135,129,140,142,114,152,146],
[104,91,123,134,109,153,116,0,110,108,113,115,128,120],
[102,113,132,126,130,149,122,141,0,116,136,99,149,123],
[108,96,134,134,140,149,111,143,135,0,117,116,123,112],
[93,114,106,117,114,134,109,138,115,134,0,98,131,104],
[98,118,124,133,131,165,137,136,152,135,153,0,151,128],
[100,98,133,116,117,132,99,123,102,128,120,100,0,127],
[115,97,113,128,136,151,105,131,128,139,147,123,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 17, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,135,122,137,151,118,123,134,132,138,120,130,143],
[127,0,115,116,118,131,121,100,131,131,119,109,107,136],
[116,136,0,126,121,134,116,118,137,133,136,120,115,140],
[129,135,125,0,133,152,119,123,143,135,133,114,122,133],
[114,133,130,118,0,143,130,129,135,133,123,111,121,133],
[100,120,117,99,108,0,99,110,113,109,129,101,108,128],
[133,130,135,132,121,152,0,116,145,129,138,126,128,150],
[128,151,133,128,122,141,135,0,154,130,146,135,126,148],
[117,120,114,108,116,138,106,97,0,116,120,110,114,122],
[119,120,118,116,118,142,122,121,135,0,124,126,113,123],
[113,132,115,118,128,122,113,105,131,127,0,109,119,127],
[131,142,131,137,140,150,125,116,141,125,142,0,132,148],
[121,144,136,129,130,143,123,125,137,138,132,119,0,134],
[108,115,111,118,118,123,101,103,129,128,124,103,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 18, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,121,126,124,133,129,115,118,134,123,143,133,130],
[118,0,132,117,122,127,126,125,120,126,126,137,138,130],
[130,119,0,128,130,126,128,117,118,123,110,136,128,124],
[125,134,123,0,136,133,140,122,133,142,128,139,139,132],
[127,129,121,115,0,131,120,123,130,135,123,140,122,136],
[118,124,125,118,120,0,131,123,123,134,116,136,128,129],
[122,125,123,111,131,120,0,120,126,130,114,133,132,121],
[136,126,134,129,128,128,131,0,124,136,121,135,138,130],
[133,131,133,118,121,128,125,127,0,133,131,135,138,140],
[117,125,128,109,116,117,121,115,118,0,120,125,127,121],
[128,125,141,123,128,135,137,130,120,131,0,136,132,127],
[108,114,115,112,111,115,118,116,116,126,115,0,121,121],
[118,113,123,112,129,123,119,113,113,124,119,130,0,117],
[121,121,127,119,115,122,130,121,111,130,124,130,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 19, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,117,130,120,122,132,111,128,119,128,126,115,117],
[128,0,131,118,116,132,126,118,131,131,132,123,121,129],
[134,120,0,125,113,129,128,117,133,138,137,131,122,120],
[121,133,126,0,113,136,135,118,135,140,131,132,132,118],
[131,135,138,138,0,133,136,114,135,128,142,126,130,133],
[129,119,122,115,118,0,134,117,133,134,129,133,116,126],
[119,125,123,116,115,117,0,115,117,134,129,126,115,119],
[140,133,134,133,137,134,136,0,145,138,125,141,124,135],
[123,120,118,116,116,118,134,106,0,133,125,121,125,115],
[132,120,113,111,123,117,117,113,118,0,120,115,117,108],
[123,119,114,120,109,122,122,126,126,131,0,121,118,119],
[125,128,120,119,125,118,125,110,130,136,130,0,123,119],
[136,130,129,119,121,135,136,127,126,134,133,128,0,131],
[134,122,131,133,118,125,132,116,136,143,132,132,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 20, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,125,131,98,114,118,137,112,137,121,117,132,135],
[141,0,124,135,109,125,131,144,109,120,123,133,136,133],
[126,127,0,111,120,125,131,127,119,130,118,121,142,124],
[120,116,140,0,115,140,123,134,138,146,125,131,155,125],
[153,142,131,136,0,146,131,135,122,145,128,151,147,138],
[137,126,126,111,105,0,107,129,117,129,118,130,130,122],
[133,120,120,128,120,144,0,122,107,135,135,133,135,114],
[114,107,124,117,116,122,129,0,109,126,117,124,142,112],
[139,142,132,113,129,134,144,142,0,140,136,131,147,146],
[114,131,121,105,106,122,116,125,111,0,112,112,133,135],
[130,128,133,126,123,133,116,134,115,139,0,124,134,140],
[134,118,130,120,100,121,118,127,120,139,127,0,139,119],
[119,115,109,96,104,121,116,109,104,118,117,112,0,117],
[116,118,127,126,113,129,137,139,105,116,111,132,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 21, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,152,133,142,121,117,148,125,115,131,121,118,132],
[111,0,114,113,125,121,110,132,119,116,126,108,120,114],
[99,137,0,122,141,116,106,131,131,122,129,122,119,134],
[118,138,129,0,124,128,133,127,149,121,151,116,119,142],
[109,126,110,127,0,129,109,131,136,116,132,106,109,112],
[130,130,135,123,122,0,133,129,153,131,155,114,128,122],
[134,141,145,118,142,118,0,151,149,131,153,128,124,125],
[103,119,120,124,120,122,100,0,123,122,135,124,117,103],
[126,132,120,102,115,98,102,128,0,130,109,99,105,100],
[136,135,129,130,135,120,120,129,121,0,128,112,132,105],
[120,125,122,100,119,96,98,116,142,123,0,105,115,113],
[130,143,129,135,145,137,123,127,152,139,146,0,143,121],
[133,131,132,132,142,123,127,134,146,119,136,108,0,105],
[119,137,117,109,139,129,126,148,151,146,138,130,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 22, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,122,128,123,140,127,111,126,110,134,117,136,115],
[137,0,147,148,148,140,136,128,125,130,133,131,138,130],
[129,104,0,135,117,133,120,107,121,110,127,120,121,114],
[123,103,116,0,134,119,115,119,107,96,130,115,123,109],
[128,103,134,117,0,132,115,119,113,104,127,124,116,106],
[111,111,118,132,119,0,104,120,104,111,132,123,110,107],
[124,115,131,136,136,147,0,121,129,109,136,129,126,123],
[140,123,144,132,132,131,130,0,128,121,127,138,134,122],
[125,126,130,144,138,147,122,123,0,128,134,139,139,119],
[141,121,141,155,147,140,142,130,123,0,151,138,131,131],
[117,118,124,121,124,119,115,124,117,100,0,122,123,114],
[134,120,131,136,127,128,122,113,112,113,129,0,134,118],
[115,113,130,128,135,141,125,117,112,120,128,117,0,108],
[136,121,137,142,145,144,128,129,132,120,137,133,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 23, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,127,129,117,129,91,134,131,134,106,134,111,128],
[116,0,123,124,124,120,114,143,110,117,128,139,126,117],
[124,128,0,132,119,118,119,137,119,114,128,133,123,124],
[122,127,119,0,110,125,127,118,111,119,143,121,125,125],
[134,127,132,141,0,126,119,148,103,130,121,133,115,128],
[122,131,133,126,125,0,112,134,120,121,127,129,132,125],
[160,137,132,124,132,139,0,143,121,136,136,143,129,151],
[117,108,114,133,103,117,108,0,98,124,130,115,110,123],
[120,141,132,140,148,131,130,153,0,123,127,139,129,123],
[117,134,137,132,121,130,115,127,128,0,130,130,117,146],
[145,123,123,108,130,124,115,121,124,121,0,125,124,128],
[117,112,118,130,118,122,108,136,112,121,126,0,120,108],
[140,125,128,126,136,119,122,141,122,134,127,131,0,138],
[123,134,127,126,123,126,100,128,128,105,123,143,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 24, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,123,132,115,131,132,124,106,123,125,123,126,135],
[129,0,130,119,126,127,141,118,107,117,125,116,125,131],
[128,121,0,123,116,130,144,121,115,122,118,124,143,137],
[119,132,128,0,124,129,136,136,116,138,117,132,131,141],
[136,125,135,127,0,125,136,137,119,132,133,107,122,136],
[120,124,121,122,126,0,128,124,117,123,131,118,108,116],
[119,110,107,115,115,123,0,103,83,111,101,108,93,122],
[127,133,130,115,114,127,148,0,115,117,121,121,125,131],
[145,144,136,135,132,134,168,136,0,123,134,138,140,152],
[128,134,129,113,119,128,140,134,128,0,128,130,127,133],
[126,126,133,134,118,120,150,130,117,123,0,121,135,132],
[128,135,127,119,144,133,143,130,113,121,130,0,132,138],
[125,126,108,120,129,143,158,126,111,124,116,119,0,134],
[116,120,114,110,115,135,129,120,99,118,119,113,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 25, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,124,132,131,132,130,135,134,132,135,135,136,128],
[117,0,119,124,125,123,127,135,117,115,121,130,133,125],
[127,132,0,129,130,132,137,129,122,127,136,142,137,137],
[119,127,122,0,114,122,124,125,115,129,123,130,127,125],
[120,126,121,137,0,125,132,132,120,128,123,131,131,122],
[119,128,119,129,126,0,129,125,126,129,128,127,128,129],
[121,124,114,127,119,122,0,131,122,126,118,131,121,117],
[116,116,122,126,119,126,120,0,130,125,129,131,129,125],
[117,134,129,136,131,125,129,121,0,132,130,145,127,132],
[119,136,124,122,123,122,125,126,119,0,123,129,136,116],
[116,130,115,128,128,123,133,122,121,128,0,127,132,115],
[116,121,109,121,120,124,120,120,106,122,124,0,119,122],
[115,118,114,124,120,123,130,122,124,115,119,132,0,123],
[123,126,114,126,129,122,134,126,119,135,136,129,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 26, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,124,126,135,116,124,122,97,129,117,119,125,121],
[132,0,124,133,142,140,126,124,118,131,110,120,123,113],
[127,127,0,129,132,124,128,135,117,139,120,119,123,126],
[125,118,122,0,142,107,126,134,116,133,115,121,121,113],
[116,109,119,109,0,114,116,123,100,115,105,107,115,95],
[135,111,127,144,137,0,121,140,116,124,123,123,118,125],
[127,125,123,125,135,130,0,141,108,132,111,119,132,117],
[129,127,116,117,128,111,110,0,110,128,108,119,116,107],
[154,133,134,135,151,135,143,141,0,139,118,124,145,117],
[122,120,112,118,136,127,119,123,112,0,103,112,123,125],
[134,141,131,136,146,128,140,143,133,148,0,122,126,132],
[132,131,132,130,144,128,132,132,127,139,129,0,123,115],
[126,128,128,130,136,133,119,135,106,128,125,128,0,111],
[130,138,125,138,156,126,134,144,134,126,119,136,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 27, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,97,150,124,147,137,161,129,137,127,157,138,150],
[79,0,101,121,77,118,101,100,76,114,119,97,97,113],
[154,150,0,160,121,140,130,135,104,123,160,154,114,159],
[101,130,91,0,101,106,112,114,86,112,143,121,126,146],
[127,174,130,150,0,122,153,145,113,137,169,143,128,149],
[104,133,111,145,129,0,149,80,86,137,134,131,131,112],
[114,150,121,139,98,102,0,92,86,104,125,127,111,118],
[90,151,116,137,106,171,159,0,107,132,154,127,137,123],
[122,175,147,165,138,165,165,144,0,139,172,130,152,161],
[114,137,128,139,114,114,147,119,112,0,177,147,130,128],
[124,132,91,108,82,117,126,97,79,74,0,138,93,144],
[94,154,97,130,108,120,124,124,121,104,113,0,95,142],
[113,154,137,125,123,120,140,114,99,121,158,156,0,156],
[101,138,92,105,102,139,133,128,90,123,107,109,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 28, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,113,93,125,134,124,133,109,120,106,115,110,144],
[132,0,122,111,169,138,136,116,147,127,126,127,131,142],
[138,129,0,104,131,126,143,110,142,142,114,132,109,124],
[158,140,147,0,138,136,145,125,129,111,124,144,140,155],
[126,82,120,113,0,141,127,95,125,126,98,102,97,120],
[117,113,125,115,110,0,117,97,116,103,96,119,121,134],
[127,115,108,106,124,134,0,103,128,106,105,108,136,137],
[118,135,141,126,156,154,148,0,146,115,120,143,115,129],
[142,104,109,122,126,135,123,105,0,124,106,109,112,140],
[131,124,109,140,125,148,145,136,127,0,109,121,113,144],
[145,125,137,127,153,155,146,131,145,142,0,144,145,188],
[136,124,119,107,149,132,143,108,142,130,107,0,126,124],
[141,120,142,111,154,130,115,136,139,138,106,125,0,139],
[107,109,127,96,131,117,114,122,111,107,63,127,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 29, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,128,81,153,126,140,118,121,115,110,121,123,138],
[138,0,125,102,106,131,146,133,128,93,99,129,141,170],
[123,126,0,109,139,110,122,116,117,123,133,109,117,126],
[170,149,142,0,174,143,148,137,161,126,118,145,156,156],
[98,145,112,77,0,106,147,111,90,123,103,105,98,136],
[125,120,141,108,145,0,173,116,140,126,114,117,138,154],
[111,105,129,103,104,78,0,122,111,104,119,103,127,128],
[133,118,135,114,140,135,129,0,133,122,105,119,116,153],
[130,123,134,90,161,111,140,118,0,111,130,118,135,146],
[136,158,128,125,128,125,147,129,140,0,105,137,130,125],
[141,152,118,133,148,137,132,146,121,146,0,143,138,163],
[130,122,142,106,146,134,148,132,133,114,108,0,130,133],
[128,110,134,95,153,113,124,135,116,121,113,121,0,142],
[113,81,125,95,115,97,123,98,105,126,88,118,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 30, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,111,145,143,123,133,123,131,116,130,117,125,139],
[113,0,115,149,131,106,149,133,127,121,114,116,111,143],
[140,136,0,146,136,134,140,143,125,136,135,122,130,129],
[106,102,105,0,122,109,125,109,94,119,121,95,105,111],
[108,120,115,129,0,116,150,120,119,114,130,110,120,124],
[128,145,117,142,135,0,145,129,121,131,141,114,123,142],
[118,102,111,126,101,106,0,113,105,107,104,103,130,114],
[128,118,108,142,131,122,138,0,121,126,128,102,113,135],
[120,124,126,157,132,130,146,130,0,120,126,105,110,119],
[135,130,115,132,137,120,144,125,131,0,138,127,124,141],
[121,137,116,130,121,110,147,123,125,113,0,93,115,122],
[134,135,129,156,141,137,148,149,146,124,158,0,132,142],
[126,140,121,146,131,128,121,138,141,127,136,119,0,135],
[112,108,122,140,127,109,137,116,132,110,129,109,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 31, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,135,126,125,134,110,154,133,133,138,132,137,116],
[121,0,136,140,121,128,119,144,137,121,122,123,125,125],
[116,115,0,128,104,132,113,129,129,143,110,129,124,117],
[125,111,123,0,108,133,113,147,132,111,123,120,115,121],
[126,130,147,143,0,155,149,151,146,120,153,137,141,146],
[117,123,119,118,96,0,127,135,140,105,111,102,108,111],
[141,132,138,138,102,124,0,138,146,115,109,110,132,117],
[97,107,122,104,100,116,113,0,121,102,110,83,98,120],
[118,114,122,119,105,111,105,130,0,126,103,112,109,117],
[118,130,108,140,131,146,136,149,125,0,135,121,124,126],
[113,129,141,128,98,140,142,141,148,116,0,122,129,132],
[119,128,122,131,114,149,141,168,139,130,129,0,131,144],
[114,126,127,136,110,143,119,153,142,127,122,120,0,126],
[135,126,134,130,105,140,134,131,134,125,119,107,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 32, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,148,127,129,98,140,137,142,132,110,146,124,143],
[107,0,143,107,109,81,131,125,142,142,82,153,111,123],
[103,108,0,120,98,120,127,141,107,114,86,133,97,113],
[124,144,131,0,113,115,135,152,128,125,112,160,136,152],
[122,142,153,138,0,107,180,170,158,155,95,152,139,139],
[153,170,131,136,144,0,164,172,174,151,84,170,133,155],
[111,120,124,116,71,87,0,120,109,108,98,109,83,120],
[114,126,110,99,81,79,131,0,110,127,62,162,94,127],
[109,109,144,123,93,77,142,141,0,113,68,127,94,115],
[119,109,137,126,96,100,143,124,138,0,97,144,136,144],
[141,169,165,139,156,167,153,189,183,154,0,169,123,155],
[105,98,118,91,99,81,142,89,124,107,82,0,100,98],
[127,140,154,115,112,118,168,157,157,115,128,151,0,150],
[108,128,138,99,112,96,131,124,136,107,96,153,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 33, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,142,145,148,138,149,134,141,125,113,151,123,135],
[123,0,135,111,122,122,131,122,122,132,115,132,122,128],
[109,116,0,117,139,125,139,115,124,131,125,140,133,110],
[106,140,134,0,129,132,136,120,140,114,105,132,115,118],
[103,129,112,122,0,118,140,115,113,110,102,127,131,130],
[113,129,126,119,133,0,131,118,134,133,120,138,127,130],
[102,120,112,115,111,120,0,125,116,108,117,109,131,107],
[117,129,136,131,136,133,126,0,138,129,123,139,131,131],
[110,129,127,111,138,117,135,113,0,116,116,127,115,132],
[126,119,120,137,141,118,143,122,135,0,110,125,130,141],
[138,136,126,146,149,131,134,128,135,141,0,142,118,131],
[100,119,111,119,124,113,142,112,124,126,109,0,119,121],
[128,129,118,136,120,124,120,120,136,121,133,132,0,118],
[116,123,141,133,121,121,144,120,119,110,120,130,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 34, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,124,124,123,130,116,121,125,120,117,115,133,118],
[136,0,121,134,126,130,115,142,121,137,137,130,126,126],
[127,130,0,126,127,134,127,127,125,141,130,124,133,122],
[127,117,125,0,115,132,116,124,122,134,131,118,130,117],
[128,125,124,136,0,130,116,126,127,133,134,129,132,134],
[121,121,117,119,121,0,115,134,118,127,123,124,125,121],
[135,136,124,135,135,136,0,124,124,124,126,127,123,131],
[130,109,124,127,125,117,127,0,121,132,130,128,118,118],
[126,130,126,129,124,133,127,130,0,122,132,126,128,124],
[131,114,110,117,118,124,127,119,129,0,116,114,128,112],
[134,114,121,120,117,128,125,121,119,135,0,120,124,118],
[136,121,127,133,122,127,124,123,125,137,131,0,139,122],
[118,125,118,121,119,126,128,133,123,123,127,112,0,123],
[133,125,129,134,117,130,120,133,127,139,133,129,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 35, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,131,129,129,121,114,139,134,129,126,113,115,132],
[129,0,133,119,129,130,132,141,129,138,130,125,131,131],
[120,118,0,122,110,123,122,133,138,113,108,115,109,121],
[122,132,129,0,123,130,132,141,131,120,122,132,141,115],
[122,122,141,128,0,124,123,131,128,127,134,139,130,127],
[130,121,128,121,127,0,109,125,128,133,127,149,126,132],
[137,119,129,119,128,142,0,140,137,129,124,120,114,144],
[112,110,118,110,120,126,111,0,120,126,118,116,118,122],
[117,122,113,120,123,123,114,131,0,128,114,116,140,119],
[122,113,138,131,124,118,122,125,123,0,120,114,125,115],
[125,121,143,129,117,124,127,133,137,131,0,123,119,128],
[138,126,136,119,112,102,131,135,135,137,128,0,122,133],
[136,120,142,110,121,125,137,133,111,126,132,129,0,131],
[119,120,130,136,124,119,107,129,132,136,123,118,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 36, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,147,130,135,150,127,123,152,118,160,122,146,148],
[97,0,119,100,104,119,106,94,106,92,109,91,89,131],
[104,132,0,108,135,133,123,109,118,117,129,112,125,142],
[121,151,143,0,105,131,120,120,134,109,131,114,128,143],
[116,147,116,146,0,136,141,125,138,135,141,134,129,153],
[101,132,118,120,115,0,126,97,131,108,135,124,119,134],
[124,145,128,131,110,125,0,115,125,110,131,134,118,136],
[128,157,142,131,126,154,136,0,143,125,154,129,129,153],
[99,145,133,117,113,120,126,108,0,120,151,119,119,147],
[133,159,134,142,116,143,141,126,131,0,133,135,137,133],
[91,142,122,120,110,116,120,97,100,118,0,97,114,128],
[129,160,139,137,117,127,117,122,132,116,154,0,129,148],
[105,162,126,123,122,132,133,122,132,114,137,122,0,147],
[103,120,109,108,98,117,115,98,104,118,123,103,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 37, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,108,99,141,112,110,135,110,120,103,128,108,94],
[111,0,113,109,157,116,130,140,119,91,105,124,88,96],
[143,138,0,116,152,96,132,136,151,114,123,128,128,116],
[152,142,135,0,178,117,145,161,128,132,135,144,117,141],
[110,94,99,73,0,104,93,120,96,119,99,112,97,95],
[139,135,155,134,147,0,111,156,150,125,140,135,106,130],
[141,121,119,106,158,140,0,157,131,142,113,153,105,105],
[116,111,115,90,131,95,94,0,116,95,104,99,81,106],
[141,132,100,123,155,101,120,135,0,121,118,127,105,87],
[131,160,137,119,132,126,109,156,130,0,127,151,109,108],
[148,146,128,116,152,111,138,147,133,124,0,134,105,129],
[123,127,123,107,139,116,98,152,124,100,117,0,105,108],
[143,163,123,134,154,145,146,170,146,142,146,146,0,106],
[157,155,135,110,156,121,146,145,164,143,122,143,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 38, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,141,122,160,146,131,116,154,153,122,128,112,132],
[124,0,156,126,153,140,131,119,154,148,127,143,121,141],
[110,95,0,124,132,126,109,107,129,142,112,127,109,124],
[129,125,127,0,154,116,126,126,139,147,97,97,115,126],
[91,98,119,97,0,104,102,88,125,117,86,93,75,110],
[105,111,125,135,147,0,110,105,133,122,102,124,103,120],
[120,120,142,125,149,141,0,111,154,133,115,125,119,142],
[135,132,144,125,163,146,140,0,158,160,128,141,126,134],
[97,97,122,112,126,118,97,93,0,133,105,102,93,105],
[98,103,109,104,134,129,118,91,118,0,95,110,110,125],
[129,124,139,154,165,149,136,123,146,156,0,111,128,140],
[123,108,124,154,158,127,126,110,149,141,140,0,118,120],
[139,130,142,136,176,148,132,125,158,141,123,133,0,139],
[119,110,127,125,141,131,109,117,146,126,111,131,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 39, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,135,107,132,133,119,102,145,129,150,114,123,93],
[137,0,116,126,128,137,105,122,165,140,143,127,134,109],
[116,135,0,156,165,156,119,148,157,148,163,150,147,111],
[144,125,95,0,114,140,107,153,122,135,152,109,135,82],
[119,123,86,137,0,132,109,138,161,106,121,126,108,138],
[118,114,95,111,119,0,97,109,113,142,95,116,101,100],
[132,146,132,144,142,154,0,183,127,114,164,148,152,153],
[149,129,103,98,113,142,68,0,69,129,128,120,89,74],
[106,86,94,129,90,138,124,182,0,128,133,109,101,113],
[122,111,103,116,145,109,137,122,123,0,138,121,113,119],
[101,108,88,99,130,156,87,123,118,113,0,89,108,106],
[137,124,101,142,125,135,103,131,142,130,162,0,101,98],
[128,117,104,116,143,150,99,162,150,138,143,150,0,108],
[158,142,140,169,113,151,98,177,138,132,145,153,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 40, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,91,148,112,132,88,112,111,99,121,123,98,98],
[132,0,134,150,132,167,131,149,153,132,124,140,137,109],
[160,117,0,166,143,124,119,135,149,133,123,113,139,107],
[103,101,85,0,126,98,106,90,114,88,126,108,102,104],
[139,119,108,125,0,98,103,111,124,90,134,128,116,106],
[119,84,127,153,153,0,126,128,101,120,131,106,100,116],
[163,120,132,145,148,125,0,152,145,137,139,118,126,140],
[139,102,116,161,140,123,99,0,144,108,101,100,111,106],
[140,98,102,137,127,150,106,107,0,106,116,97,110,86],
[152,119,118,163,161,131,114,143,145,0,131,142,129,132],
[130,127,128,125,117,120,112,150,135,120,0,102,118,111],
[128,111,138,143,123,145,133,151,154,109,149,0,143,140],
[153,114,112,149,135,151,125,140,141,122,133,108,0,122],
[153,142,144,147,145,135,111,145,165,119,140,111,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 41, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,136,152,126,110,148,129,170,112,140,114,166,147],
[135,0,98,136,143,101,140,114,144,123,149,137,166,148],
[115,153,0,111,158,127,169,145,144,152,142,138,173,136],
[99,115,140,0,153,117,155,131,126,115,149,132,141,129],
[125,108,93,98,0,98,128,114,136,90,118,125,121,114],
[141,150,124,134,153,0,149,152,185,161,163,161,149,163],
[103,111,82,96,123,102,0,130,135,89,120,118,135,111],
[122,137,106,120,137,99,121,0,169,109,127,135,161,126],
[81,107,107,125,115,66,116,82,0,99,132,95,129,122],
[139,128,99,136,161,90,162,142,152,0,136,134,175,166],
[111,102,109,102,133,88,131,124,119,115,0,107,123,124],
[137,114,113,119,126,90,133,116,156,117,144,0,146,143],
[85,85,78,110,130,102,116,90,122,76,128,105,0,125],
[104,103,115,122,137,88,140,125,129,85,127,108,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 42, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,92,66,116,102,121,94,172,69,101,155,84,102],
[161,0,122,131,113,131,130,114,164,107,142,151,132,119],
[159,129,0,106,105,107,122,146,182,116,110,166,122,98],
[185,120,145,0,177,176,144,155,183,156,165,175,181,163],
[135,138,146,74,0,134,103,160,148,111,131,170,90,117],
[149,120,144,75,117,0,153,134,182,127,146,181,142,115],
[130,121,129,107,148,98,0,149,175,101,125,166,90,132],
[157,137,105,96,91,117,102,0,142,88,127,151,116,95],
[79,87,69,68,103,69,76,109,0,80,85,150,114,82],
[182,144,135,95,140,124,150,163,171,0,123,151,120,134],
[150,109,141,86,120,105,126,124,166,128,0,136,120,104],
[96,100,85,76,81,70,85,100,101,100,115,0,98,54],
[167,119,129,70,161,109,161,135,137,131,131,153,0,131],
[149,132,153,88,134,136,119,156,169,117,147,197,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 43, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,128,129,113,125,131,132,147,126,117,128,130,128],
[114,0,129,101,97,134,140,124,116,127,93,108,117,128],
[123,122,0,109,92,146,124,118,103,102,101,112,119,123],
[122,150,142,0,129,131,136,120,115,116,112,131,113,134],
[138,154,159,122,0,142,151,142,132,131,139,118,119,132],
[126,117,105,120,109,0,133,115,96,109,115,119,116,116],
[120,111,127,115,100,118,0,115,112,119,116,112,124,104],
[119,127,133,131,109,136,136,0,132,130,116,137,113,136],
[104,135,148,136,119,155,139,119,0,120,122,135,115,123],
[125,124,149,135,120,142,132,121,131,0,106,141,122,140],
[134,158,150,139,112,136,135,135,129,145,0,124,117,138],
[123,143,139,120,133,132,139,114,116,110,127,0,107,128],
[121,134,132,138,132,135,127,138,136,129,134,144,0,131],
[123,123,128,117,119,135,147,115,128,111,113,123,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 44, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,122,136,123,133,134,126,125,125,130,127,139,118],
[132,0,113,113,138,132,128,127,134,132,130,135,141,123],
[129,138,0,128,142,142,138,143,139,135,136,138,133,122],
[115,138,123,0,129,125,139,132,135,119,150,144,148,130],
[128,113,109,122,0,132,121,111,122,133,127,118,121,109],
[118,119,109,126,119,0,132,127,124,135,122,138,130,115],
[117,123,113,112,130,119,0,130,134,122,124,130,136,119],
[125,124,108,119,140,124,121,0,121,119,113,119,115,127],
[126,117,112,116,129,127,117,130,0,133,123,119,140,120],
[126,119,116,132,118,116,129,132,118,0,131,129,136,120],
[121,121,115,101,124,129,127,138,128,120,0,140,124,123],
[124,116,113,107,133,113,121,132,132,122,111,0,121,120],
[112,110,118,103,130,121,115,136,111,115,127,130,0,98],
[133,128,129,121,142,136,132,124,131,131,128,131,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 45, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,131,137,122,127,130,120,133,118,150,132,139,146],
[103,0,114,123,104,116,114,114,123,127,124,128,121,125],
[120,137,0,143,136,138,141,132,135,144,147,137,145,161],
[114,128,108,0,124,125,120,113,122,119,135,126,123,127],
[129,147,115,127,0,121,135,120,124,123,129,144,133,136],
[124,135,113,126,130,0,124,115,130,122,137,139,135,141],
[121,137,110,131,116,127,0,109,119,112,133,128,120,124],
[131,137,119,138,131,136,142,0,145,130,136,148,142,150],
[118,128,116,129,127,121,132,106,0,122,129,129,120,130],
[133,124,107,132,128,129,139,121,129,0,131,133,132,153],
[101,127,104,116,122,114,118,115,122,120,0,121,122,134],
[119,123,114,125,107,112,123,103,122,118,130,0,106,132],
[112,130,106,128,118,116,131,109,131,119,129,145,0,138],
[105,126,90,124,115,110,127,101,121,98,117,119,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 46, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,138,127,133,119,115,118,129,132,131,141,145,143],
[120,0,116,104,104,101,106,143,127,122,109,127,125,131],
[113,135,0,135,126,135,98,137,111,137,130,147,128,143],
[124,147,116,0,131,121,127,117,130,133,143,137,135,139],
[118,147,125,120,0,110,97,111,110,146,130,126,122,130],
[132,150,116,130,141,0,128,126,138,139,117,139,124,131],
[136,145,153,124,154,123,0,141,130,140,146,146,137,151],
[133,108,114,134,140,125,110,0,108,124,116,136,143,132],
[122,124,140,121,141,113,121,143,0,121,138,132,140,155],
[119,129,114,118,105,112,111,127,130,0,145,136,114,145],
[120,142,121,108,121,134,105,135,113,106,0,118,111,138],
[110,124,104,114,125,112,105,115,119,115,133,0,121,96],
[106,126,123,116,129,127,114,108,111,137,140,130,0,144],
[108,120,108,112,121,120,100,119,96,106,113,155,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 47, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,114,126,138,125,129,136,147,139,122,118,134,128],
[119,0,95,115,129,105,128,134,133,118,113,115,115,106],
[137,156,0,124,144,125,151,142,158,149,138,128,147,132],
[125,136,127,0,142,124,133,139,142,132,122,137,145,135],
[113,122,107,109,0,110,123,130,119,116,116,119,120,100],
[126,146,126,127,141,0,119,141,148,130,128,123,146,126],
[122,123,100,118,128,132,0,140,132,122,118,111,128,115],
[115,117,109,112,121,110,111,0,120,116,103,100,125,113],
[104,118,93,109,132,103,119,131,0,121,107,100,120,116],
[112,133,102,119,135,121,129,135,130,0,122,115,122,107],
[129,138,113,129,135,123,133,148,144,129,0,113,116,117],
[133,136,123,114,132,128,140,151,151,136,138,0,121,116],
[117,136,104,106,131,105,123,126,131,129,135,130,0,122],
[123,145,119,116,151,125,136,138,135,144,134,135,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 48, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,152,158,158,215,186,186,132,211,95,221,158,145],
[123,0,89,211,222,215,186,186,186,175,159,192,129,185],
[99,162,0,122,162,162,162,162,162,122,99,162,69,132],
[93,40,129,0,192,156,123,186,103,145,76,192,93,185],
[93,29,89,59,0,152,123,123,69,112,59,158,122,122],
[36,36,89,95,99,0,70,93,139,95,36,99,36,128],
[65,65,89,128,128,181,0,122,128,128,65,128,65,128],
[65,65,89,65,128,158,129,0,105,118,65,118,118,118],
[119,65,89,148,182,112,123,146,0,148,148,118,89,82],
[40,76,129,106,139,156,123,133,103,0,76,139,76,156],
[156,92,152,175,192,215,186,186,103,175,0,192,93,185],
[30,59,89,59,93,152,123,133,133,112,59,0,53,145],
[93,122,182,158,129,215,186,133,162,175,158,198,0,145],
[106,66,119,66,129,123,123,133,169,95,66,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 49, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,173,170,142,197,162,186,208,232,218,104,189,200],
[121,0,91,144,81,131,150,144,137,150,149,106,157,165],
[78,160,0,160,104,155,152,78,134,104,125,119,122,114],
[81,107,91,0,67,152,117,102,152,103,106,149,130,73],
[109,170,147,184,0,139,160,138,171,169,183,114,157,187],
[54,120,96,99,112,0,64,86,137,114,51,93,144,71],
[89,101,99,134,91,187,0,149,172,163,125,162,165,120],
[65,107,173,149,113,165,102,0,142,195,120,104,160,200],
[43,114,117,99,80,114,79,109,0,143,108,65,77,80],
[19,101,147,148,82,137,88,56,108,0,96,92,160,142],
[33,102,126,145,68,200,126,131,143,155,0,109,139,142],
[147,145,132,102,137,158,89,147,186,159,142,0,116,97],
[62,94,129,121,94,107,86,91,174,91,112,135,0,94],
[51,86,137,178,64,180,131,51,171,109,109,154,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 50, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,123,128,88,68,125,119,94,85,64,89,91,73],
[158,0,133,137,131,140,172,182,142,157,123,136,144,107],
[128,118,0,110,108,98,129,112,76,132,135,108,106,86],
[123,114,141,0,166,132,168,127,104,131,120,129,119,123],
[163,120,143,85,0,102,166,143,113,127,103,140,122,108],
[183,111,153,119,149,0,184,144,113,128,140,152,110,92],
[126,79,122,83,85,67,0,92,57,113,82,85,88,83],
[132,69,139,124,108,107,159,0,120,85,112,115,85,86],
[157,109,175,147,138,138,194,131,0,151,121,102,141,133],
[166,94,119,120,124,123,138,166,100,0,113,126,120,103],
[187,128,116,131,148,111,169,139,130,138,0,148,133,134],
[162,115,143,122,111,99,166,136,149,125,103,0,125,114],
[160,107,145,132,129,141,163,166,110,131,118,126,0,104],
[178,144,165,128,143,159,168,165,118,148,117,137,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 51, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,155,131,145,137,138,140,136,154,115,128,162,136],
[135,0,153,144,132,129,151,148,138,157,122,143,150,141],
[96,98,0,115,111,110,123,129,117,127,86,104,152,121],
[120,107,136,0,118,113,146,129,114,130,99,118,161,139],
[106,119,140,133,0,104,145,116,122,151,92,110,146,116],
[114,122,141,138,147,0,153,145,116,151,116,136,143,112],
[113,100,128,105,106,98,0,116,114,126,100,83,125,102],
[111,103,122,122,135,106,135,0,112,132,115,121,122,120],
[115,113,134,137,129,135,137,139,0,145,134,114,158,134],
[97,94,124,121,100,100,125,119,106,0,81,76,126,98],
[136,129,165,152,159,135,151,136,117,170,0,129,163,127],
[123,108,147,133,141,115,168,130,137,175,122,0,174,134],
[89,101,99,90,105,108,126,129,93,125,88,77,0,82],
[115,110,130,112,135,139,149,131,117,153,124,117,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 52, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,111,109,125,127,124,122,123,117,114,122,111,118],
[138,0,126,133,122,135,125,115,125,131,132,131,113,122],
[140,125,0,121,121,128,127,123,127,131,126,123,124,122],
[142,118,130,0,123,119,133,114,110,121,137,128,117,118],
[126,129,130,128,0,136,144,116,132,125,132,128,120,128],
[124,116,123,132,115,0,130,113,126,128,140,130,124,123],
[127,126,124,118,107,121,0,111,114,118,131,117,120,116],
[129,136,128,137,135,138,140,0,116,141,135,134,133,141],
[128,126,124,141,119,125,137,135,0,131,119,131,121,119],
[134,120,120,130,126,123,133,110,120,0,126,120,114,124],
[137,119,125,114,119,111,120,116,132,125,0,126,113,124],
[129,120,128,123,123,121,134,117,120,131,125,0,115,131],
[140,138,127,134,131,127,131,118,130,137,138,136,0,123],
[133,129,129,133,123,128,135,110,132,127,127,120,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 53, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,113,122,123,125,119,119,131,129,130,130,127,135],
[121,0,119,119,127,140,133,115,125,132,133,139,127,137],
[138,132,0,117,134,139,141,134,123,137,133,121,129,139],
[129,132,134,0,145,145,130,140,144,125,130,143,120,152],
[128,124,117,106,0,124,138,115,126,120,127,139,121,134],
[126,111,112,106,127,0,124,110,113,113,126,133,119,115],
[132,118,110,121,113,127,0,109,126,114,123,140,119,117],
[132,136,117,111,136,141,142,0,132,127,135,129,119,136],
[120,126,128,107,125,138,125,119,0,126,132,128,127,138],
[122,119,114,126,131,138,137,124,125,0,128,135,117,133],
[121,118,118,121,124,125,128,116,119,123,0,130,117,119],
[121,112,130,108,112,118,111,122,123,116,121,0,125,132],
[124,124,122,131,130,132,132,132,124,134,134,126,0,135],
[116,114,112,99,117,136,134,115,113,118,132,119,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 54, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,128,118,139,135,122,129,133,120,146,130,130,123],
[130,0,125,134,144,145,140,132,127,121,152,126,126,129],
[123,126,0,137,158,154,145,150,144,127,162,149,146,117],
[133,117,114,0,134,153,127,140,136,132,143,137,135,128],
[112,107,93,117,0,116,102,113,113,117,136,112,108,98],
[116,106,97,98,135,0,123,101,119,108,143,116,126,110],
[129,111,106,124,149,128,0,128,138,110,153,134,128,125],
[122,119,101,111,138,150,123,0,137,111,146,108,115,109],
[118,124,107,115,138,132,113,114,0,105,148,129,122,113],
[131,130,124,119,134,143,141,140,146,0,148,117,142,112],
[105,99,89,108,115,108,98,105,103,103,0,91,101,87],
[121,125,102,114,139,135,117,143,122,134,160,0,135,112],
[121,125,105,116,143,125,123,136,129,109,150,116,0,104],
[128,122,134,123,153,141,126,142,138,139,164,139,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 55, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,135,131,135,137,141,134,120,121,144,145,131,119],
[127,0,124,127,141,140,125,124,120,121,148,144,115,118],
[116,127,0,127,151,144,132,141,137,115,133,146,126,122],
[120,124,124,0,140,149,136,125,152,113,116,139,122,126],
[116,110,100,111,0,131,124,127,122,121,126,125,111,115],
[114,111,107,102,120,0,114,110,109,93,117,121,106,102],
[110,126,119,115,127,137,0,129,120,123,127,135,116,116],
[117,127,110,126,124,141,122,0,118,114,136,124,129,112],
[131,131,114,99,129,142,131,133,0,113,140,130,119,112],
[130,130,136,138,130,158,128,137,138,0,147,154,124,125],
[107,103,118,135,125,134,124,115,111,104,0,139,122,120],
[106,107,105,112,126,130,116,127,121,97,112,0,109,111],
[120,136,125,129,140,145,135,122,132,127,129,142,0,129],
[132,133,129,125,136,149,135,139,139,126,131,140,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 56, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,123,126,111,135,134,146,103,124,136,144,106,120],
[94,0,104,116,105,127,113,142,97,107,129,151,109,106],
[128,147,0,127,132,144,134,149,113,153,160,145,132,137],
[125,135,124,0,139,132,129,125,105,142,154,145,106,118],
[140,146,119,112,0,129,119,137,120,129,134,150,112,126],
[116,124,107,119,122,0,123,133,123,132,122,131,112,126],
[117,138,117,122,132,128,0,107,127,131,142,131,97,145],
[105,109,102,126,114,118,144,0,105,123,128,138,96,103],
[148,154,138,146,131,128,124,146,0,124,144,135,107,119],
[127,144,98,109,122,119,120,128,127,0,131,119,95,123],
[115,122,91,97,117,129,109,123,107,120,0,129,94,108],
[107,100,106,106,101,120,120,113,116,132,122,0,104,108],
[145,142,119,145,139,139,154,155,144,156,157,147,0,134],
[131,145,114,133,125,125,106,148,132,128,143,143,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 57, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,91,110,103,107,71,117,156,124,127,148,116,131],
[117,0,83,86,115,101,79,130,160,128,105,106,114,128],
[160,168,0,116,158,159,144,160,174,170,161,154,124,189],
[141,165,135,0,105,136,128,138,172,153,154,137,146,181],
[148,136,93,146,0,104,108,140,154,139,130,118,98,124],
[144,150,92,115,147,0,128,148,137,118,142,157,115,191],
[180,172,107,123,143,123,0,147,161,170,148,119,120,178],
[134,121,91,113,111,103,104,0,139,128,120,119,110,144],
[95,91,77,79,97,114,90,112,0,87,97,114,107,119],
[127,123,81,98,112,133,81,123,164,0,135,141,103,135],
[124,146,90,97,121,109,103,131,154,116,0,146,144,141],
[103,145,97,114,133,94,132,132,137,110,105,0,93,136],
[135,137,127,105,153,136,131,141,144,148,107,158,0,156],
[120,123,62,70,127,60,73,107,132,116,110,115,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 58, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,142,149,149,131,136,126,132,130,144,135,149,106],
[119,0,158,129,147,129,113,81,130,125,122,150,115,121],
[109,93,0,140,124,127,120,99,127,120,108,120,111,96],
[102,122,111,0,121,112,105,92,111,102,110,120,125,80],
[102,104,127,130,0,123,116,108,130,130,131,132,114,101],
[120,122,124,139,128,0,121,117,121,111,146,140,120,120],
[115,138,131,146,135,130,0,100,108,137,123,127,116,124],
[125,170,152,159,143,134,151,0,145,145,157,158,137,129],
[119,121,124,140,121,130,143,106,0,152,125,117,138,106],
[121,126,131,149,121,140,114,106,99,0,142,152,121,105],
[107,129,143,141,120,105,128,94,126,109,0,145,107,132],
[116,101,131,131,119,111,124,93,134,99,106,0,115,97],
[102,136,140,126,137,131,135,114,113,130,144,136,0,125],
[145,130,155,171,150,131,127,122,145,146,119,154,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 59, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,136,127,127,112,125,113,124,117,123,126,110,111],
[149,0,140,135,151,130,146,121,144,141,143,146,138,151],
[115,111,0,127,138,117,135,125,122,113,133,126,116,113],
[124,116,124,0,127,117,130,122,122,106,120,120,110,126],
[124,100,113,124,0,122,134,115,110,104,126,127,119,134],
[139,121,134,134,129,0,143,129,128,121,130,139,134,131],
[126,105,116,121,117,108,0,120,122,114,114,132,133,119],
[138,130,126,129,136,122,131,0,127,129,124,130,129,135],
[127,107,129,129,141,123,129,124,0,119,127,136,129,124],
[134,110,138,145,147,130,137,122,132,0,136,139,139,134],
[128,108,118,131,125,121,137,127,124,115,0,125,111,127],
[125,105,125,131,124,112,119,121,115,112,126,0,111,123],
[141,113,135,141,132,117,118,122,122,112,140,140,0,138],
[140,100,138,125,117,120,132,116,127,117,124,128,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 60, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,149,134,135,145,148,144,151,148,155,128,121,147],
[94,0,129,133,124,124,107,131,155,111,155,111,108,133],
[102,122,0,132,158,118,144,151,161,135,168,88,89,155],
[117,118,119,0,130,139,130,136,136,118,137,118,124,122],
[116,127,93,121,0,120,131,150,145,134,142,115,103,132],
[106,127,133,112,131,0,134,156,143,127,159,123,132,157],
[103,144,107,121,120,117,0,154,129,130,142,102,127,134],
[107,120,100,115,101,95,97,0,125,105,123,106,76,139],
[100,96,90,115,106,108,122,126,0,126,147,111,109,113],
[103,140,116,133,117,124,121,146,125,0,124,119,74,147],
[96,96,83,114,109,92,109,128,104,127,0,92,71,128],
[123,140,163,133,136,128,149,145,140,132,159,0,110,147],
[130,143,162,127,148,119,124,175,142,177,180,141,0,155],
[104,118,96,129,119,94,117,112,138,104,123,104,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 61, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,130,122,135,126,140,136,115,122,133,125,130,135],
[116,0,126,111,120,119,122,113,132,120,124,126,115,141],
[121,125,0,117,115,111,129,116,124,119,124,118,121,130],
[129,140,134,0,137,127,127,120,130,125,128,122,141,141],
[116,131,136,114,0,122,118,119,113,121,122,125,130,132],
[125,132,140,124,129,0,131,120,128,131,124,126,142,150],
[111,129,122,124,133,120,0,116,121,123,124,121,140,143],
[115,138,135,131,132,131,135,0,141,129,133,132,141,148],
[136,119,127,121,138,123,130,110,0,115,122,121,134,136],
[129,131,132,126,130,120,128,122,136,0,130,129,122,145],
[118,127,127,123,129,127,127,118,129,121,0,122,126,136],
[126,125,133,129,126,125,130,119,130,122,129,0,134,142],
[121,136,130,110,121,109,111,110,117,129,125,117,0,135],
[116,110,121,110,119,101,108,103,115,106,115,109,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 62, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,128,129,132,133,138,136,118,122,120,133,147,135],
[124,0,117,106,140,128,132,125,125,121,124,123,138,127],
[123,134,0,124,125,127,128,136,121,133,136,125,144,141],
[122,145,127,0,145,132,133,137,142,114,133,133,148,137],
[119,111,126,106,0,118,127,124,119,131,116,118,126,122],
[118,123,124,119,133,0,133,126,136,125,116,124,133,139],
[113,119,123,118,124,118,0,120,113,127,127,125,147,124],
[115,126,115,114,127,125,131,0,122,120,123,125,134,127],
[133,126,130,109,132,115,138,129,0,124,125,124,136,139],
[129,130,118,137,120,126,124,131,127,0,122,123,130,126],
[131,127,115,118,135,135,124,128,126,129,0,129,132,135],
[118,128,126,118,133,127,126,126,127,128,122,0,146,135],
[104,113,107,103,125,118,104,117,115,121,119,105,0,122],
[116,124,110,114,129,112,127,124,112,125,116,116,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 63, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,117,122,126,135,115,112,117,113,135,122,123,109],
[129,0,117,125,139,148,119,119,124,118,131,130,128,115],
[134,134,0,136,142,143,121,116,132,113,130,128,136,125],
[129,126,115,0,134,144,127,113,130,113,123,117,127,115],
[125,112,109,117,0,133,114,118,116,113,119,124,120,116],
[116,103,108,107,118,0,108,96,113,99,115,113,112,109],
[136,132,130,124,137,143,0,129,129,116,125,128,135,120],
[139,132,135,138,133,155,122,0,135,133,134,144,135,130],
[134,127,119,121,135,138,122,116,0,110,135,127,120,111],
[138,133,138,138,138,152,135,118,141,0,137,142,131,129],
[116,120,121,128,132,136,126,117,116,114,0,125,120,124],
[129,121,123,134,127,138,123,107,124,109,126,0,120,112],
[128,123,115,124,131,139,116,116,131,120,131,131,0,123],
[142,136,126,136,135,142,131,121,140,122,127,139,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 64, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,116,110,118,119,118,124,117,114,110,117,125,113],
[135,0,118,118,138,144,135,139,135,130,132,130,131,138],
[135,133,0,115,123,141,124,142,118,121,121,124,138,125],
[141,133,136,0,120,139,130,135,127,131,130,136,153,111],
[133,113,128,131,0,135,124,123,113,114,111,112,122,122],
[132,107,110,112,116,0,114,118,121,112,112,122,124,113],
[133,116,127,121,127,137,0,135,131,127,130,121,126,116],
[127,112,109,116,128,133,116,0,118,118,102,107,115,127],
[134,116,133,124,138,130,120,133,0,129,113,127,125,109],
[137,121,130,120,137,139,124,133,122,0,125,127,144,123],
[141,119,130,121,140,139,121,149,138,126,0,120,124,127],
[134,121,127,115,139,129,130,144,124,124,131,0,127,119],
[126,120,113,98,129,127,125,136,126,107,127,124,0,123],
[138,113,126,140,129,138,135,124,142,128,124,132,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 65, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,125,134,121,135,119,110,108,116,120,128,117,118],
[139,0,132,131,122,140,122,141,126,135,145,145,135,130],
[126,119,0,124,120,141,122,129,115,140,142,140,128,114],
[117,120,127,0,118,125,119,117,111,129,128,134,122,128],
[130,129,131,133,0,146,125,121,109,138,146,134,135,124],
[116,111,110,126,105,0,110,105,107,120,118,131,118,111],
[132,129,129,132,126,141,0,122,119,130,124,123,132,127],
[141,110,122,134,130,146,129,0,107,128,128,142,129,117],
[143,125,136,140,142,144,132,144,0,137,142,144,142,144],
[135,116,111,122,113,131,121,123,114,0,133,139,124,121],
[131,106,109,123,105,133,127,123,109,118,0,130,124,113],
[123,106,111,117,117,120,128,109,107,112,121,0,121,112],
[134,116,123,129,116,133,119,122,109,127,127,130,0,131],
[133,121,137,123,127,140,124,134,107,130,138,139,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 66, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,118,121,111,111,101,103,101,129,115,108,132,145],
[127,0,102,160,148,88,121,102,93,106,118,80,96,131],
[133,149,0,146,114,117,117,109,103,147,142,106,125,158],
[130,91,105,0,100,83,105,87,57,101,103,83,79,108],
[140,103,137,151,0,99,100,133,97,135,136,113,128,140],
[140,163,134,168,152,0,125,134,128,152,171,128,144,155],
[150,130,134,146,151,126,0,126,101,137,130,138,105,128],
[148,149,142,164,118,117,125,0,147,144,138,115,124,126],
[150,158,148,194,154,123,150,104,0,158,143,124,127,153],
[122,145,104,150,116,99,114,107,93,0,102,102,96,127],
[136,133,109,148,115,80,121,113,108,149,0,135,106,129],
[143,171,145,168,138,123,113,136,127,149,116,0,135,142],
[119,155,126,172,123,107,146,127,124,155,145,116,0,129],
[106,120,93,143,111,96,123,125,98,124,122,109,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 67, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,118,107,119,120,127,137,114,117,136,129,128,112],
[137,0,131,118,131,133,131,120,126,141,144,118,143,123],
[133,120,0,124,128,137,131,110,136,129,120,110,137,138],
[144,133,127,0,136,140,124,132,129,129,151,119,146,127],
[132,120,123,115,0,116,125,131,121,126,131,120,141,122],
[131,118,114,111,135,0,126,132,129,123,134,122,136,111],
[124,120,120,127,126,125,0,121,122,128,129,121,126,115],
[114,131,141,119,120,119,130,0,126,120,140,131,129,125],
[137,125,115,122,130,122,129,125,0,112,131,118,119,126],
[134,110,122,122,125,128,123,131,139,0,131,125,147,129],
[115,107,131,100,120,117,122,111,120,120,0,118,112,120],
[122,133,141,132,131,129,130,120,133,126,133,0,123,128],
[123,108,114,105,110,115,125,122,132,104,139,128,0,109],
[139,128,113,124,129,140,136,126,125,122,131,123,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 68, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,114,134,137,138,146,114,117,140,141,112,123],
[145,0,127,116,143,141,142,139,128,130,137,131,136,107],
[144,124,0,135,153,138,149,157,140,140,140,153,143,119],
[137,135,116,0,155,138,149,154,132,129,142,142,143,124],
[117,108,98,96,0,131,122,136,114,118,132,121,126,112],
[114,110,113,113,120,0,130,136,108,101,113,127,109,91],
[113,109,102,102,129,121,0,140,110,109,125,120,115,89],
[105,112,94,97,115,115,111,0,109,104,116,116,95,105],
[137,123,111,119,137,143,141,142,0,122,127,129,136,125],
[134,121,111,122,133,150,142,147,129,0,127,134,130,128],
[111,114,111,109,119,138,126,135,124,124,0,127,111,108],
[110,120,98,109,130,124,131,135,122,117,124,0,124,101],
[139,115,108,108,125,142,136,156,115,121,140,127,0,116],
[128,144,132,127,139,160,162,146,126,123,143,150,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 69, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,123,114,109,126,139,131,113,101,123,112,102,126],
[134,0,96,131,140,138,152,116,126,122,118,140,107,141],
[128,155,0,119,122,139,143,124,126,126,140,119,113,135],
[137,120,132,0,119,131,131,114,128,117,125,131,114,129],
[142,111,129,132,0,138,142,141,125,126,122,131,115,128],
[125,113,112,120,113,0,136,109,122,123,118,125,106,134],
[112,99,108,120,109,115,0,124,120,103,111,112,117,109],
[120,135,127,137,110,142,127,0,120,114,115,137,115,133],
[138,125,125,123,126,129,131,131,0,116,122,112,114,140],
[150,129,125,134,125,128,148,137,135,0,124,125,111,128],
[128,133,111,126,129,133,140,136,129,127,0,123,129,133],
[139,111,132,120,120,126,139,114,139,126,128,0,112,136],
[149,144,138,137,136,145,134,136,137,140,122,139,0,143],
[125,110,116,122,123,117,142,118,111,123,118,115,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 70, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,119,124,118,138,130,125,117,132,120,117,123,134],
[117,0,120,120,113,113,114,121,113,113,115,112,118,115],
[132,131,0,120,126,130,128,136,122,114,128,125,126,127],
[127,131,131,0,120,128,122,139,109,128,127,132,125,135],
[133,138,125,131,0,140,126,141,119,126,137,133,137,125],
[113,138,121,123,111,0,130,118,121,110,124,110,118,131],
[121,137,123,129,125,121,0,132,126,122,123,129,132,128],
[126,130,115,112,110,133,119,0,119,114,115,119,130,127],
[134,138,129,142,132,130,125,132,0,136,130,129,133,137],
[119,138,137,123,125,141,129,137,115,0,140,118,123,128],
[131,136,123,124,114,127,128,136,121,111,0,120,114,132],
[134,139,126,119,118,141,122,132,122,133,131,0,112,125],
[128,133,125,126,114,133,119,121,118,128,137,139,0,133],
[117,136,124,116,126,120,123,124,114,123,119,126,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 71, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,113,122,138,132,127,130,123,136,132,141,124,121],
[141,0,134,126,121,118,132,128,128,129,114,141,123,134],
[138,117,0,133,151,137,137,137,105,125,119,144,128,121],
[129,125,118,0,130,118,128,123,110,132,120,145,129,118],
[113,130,100,121,0,140,122,143,102,136,109,154,121,124],
[119,133,114,133,111,0,122,113,113,112,115,149,114,110],
[124,119,114,123,129,129,0,140,114,131,113,157,118,133],
[121,123,114,128,108,138,111,0,94,105,118,118,124,118],
[128,123,146,141,149,138,137,157,0,157,132,146,139,134],
[115,122,126,119,115,139,120,146,94,0,104,153,120,127],
[119,137,132,131,142,136,138,133,119,147,0,147,140,130],
[110,110,107,106,97,102,94,133,105,98,104,0,108,103],
[127,128,123,122,130,137,133,127,112,131,111,143,0,122],
[130,117,130,133,127,141,118,133,117,124,121,148,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 72, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,126,134,111,122,119,138,131,132,135,139,140,125],
[119,0,115,126,129,110,109,139,121,127,111,133,136,133],
[125,136,0,147,126,129,109,143,125,126,119,140,129,127],
[117,125,104,0,114,129,107,129,140,114,121,119,129,122],
[140,122,125,137,0,133,134,135,132,140,127,139,136,135],
[129,141,122,122,118,0,115,123,124,124,122,122,128,120],
[132,142,142,144,117,136,0,143,139,139,136,134,145,149],
[113,112,108,122,116,128,108,0,115,124,124,127,123,111],
[120,130,126,111,119,127,112,136,0,124,121,130,121,117],
[119,124,125,137,111,127,112,127,127,0,115,133,145,137],
[116,140,132,130,124,129,115,127,130,136,0,133,140,125],
[112,118,111,132,112,129,117,124,121,118,118,0,120,114],
[111,115,122,122,115,123,106,128,130,106,111,131,0,123],
[126,118,124,129,116,131,102,140,134,114,126,137,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 73, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,145,132,121,123,133,116,135,113,121,109,134,147],
[120,0,125,126,109,130,129,118,130,115,133,111,140,143],
[106,126,0,121,116,141,141,115,134,117,134,114,113,138],
[119,125,130,0,111,137,133,131,120,118,131,124,116,147],
[130,142,135,140,0,154,135,112,141,121,122,120,129,149],
[128,121,110,114,97,0,118,92,136,98,116,102,118,131],
[118,122,110,118,116,133,0,107,136,100,109,105,128,152],
[135,133,136,120,139,159,144,0,132,125,136,131,135,143],
[116,121,117,131,110,115,115,119,0,101,120,113,114,130],
[138,136,134,133,130,153,151,126,150,0,140,111,143,148],
[130,118,117,120,129,135,142,115,131,111,0,126,129,148],
[142,140,137,127,131,149,146,120,138,140,125,0,121,145],
[117,111,138,135,122,133,123,116,137,108,122,130,0,141],
[104,108,113,104,102,120,99,108,121,103,103,106,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 74, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,131,122,127,131,141,132,138,143,128,136,139,127],
[104,0,111,104,111,104,109,124,112,128,120,109,106,102],
[120,140,0,114,132,130,132,133,126,147,129,134,130,122],
[129,147,137,0,129,135,151,148,144,141,129,138,138,125],
[124,140,119,122,0,114,134,127,127,128,132,125,132,129],
[120,147,121,116,137,0,135,143,138,138,135,129,135,132],
[110,142,119,100,117,116,0,130,127,127,116,122,112,122],
[119,127,118,103,124,108,121,0,117,123,125,122,122,123],
[113,139,125,107,124,113,124,134,0,127,117,122,132,118],
[108,123,104,110,123,113,124,128,124,0,121,124,119,118],
[123,131,122,122,119,116,135,126,134,130,0,127,134,128],
[115,142,117,113,126,122,129,129,129,127,124,0,127,127],
[112,145,121,113,119,116,139,129,119,132,117,124,0,123],
[124,149,129,126,122,119,129,128,133,133,123,124,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 75, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,131,138,140,103,161,151,142,145,145,117,176,165],
[91,0,99,126,114,76,96,118,111,110,121,92,126,121],
[120,152,0,138,127,132,139,148,123,150,151,108,166,156],
[113,125,113,0,123,84,127,118,110,109,113,87,113,119],
[111,137,124,128,0,100,141,151,127,138,127,117,147,130],
[148,175,119,167,151,0,122,157,147,172,167,129,141,148],
[90,155,112,124,110,129,0,157,127,144,137,132,132,145],
[100,133,103,133,100,94,94,0,125,136,120,79,139,125],
[109,140,128,141,124,104,124,126,0,133,127,105,121,109],
[106,141,101,142,113,79,107,115,118,0,120,101,111,130],
[106,130,100,138,124,84,114,131,124,131,0,133,134,138],
[134,159,143,164,134,122,119,172,146,150,118,0,148,156],
[75,125,85,138,104,110,119,112,130,140,117,103,0,110],
[86,130,95,132,121,103,106,126,142,121,113,95,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 76, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,115,116,109,128,127,120,114,105,121,122,114,116],
[124,0,120,120,118,123,119,110,121,107,131,128,116,123],
[136,131,0,118,120,125,126,113,116,123,113,125,116,127],
[135,131,133,0,120,129,134,118,116,124,129,125,122,117],
[142,133,131,131,0,135,142,124,123,117,135,129,129,126],
[123,128,126,122,116,0,125,105,112,116,121,120,109,113],
[124,132,125,117,109,126,0,113,114,113,117,123,120,120],
[131,141,138,133,127,146,138,0,111,122,130,125,132,125],
[137,130,135,135,128,139,137,140,0,138,127,125,133,130],
[146,144,128,127,134,135,138,129,113,0,129,143,123,123],
[130,120,138,122,116,130,134,121,124,122,0,118,110,131],
[129,123,126,126,122,131,128,126,126,108,133,0,115,133],
[137,135,135,129,122,142,131,119,118,128,141,136,0,123],
[135,128,124,134,125,138,131,126,121,128,120,118,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 77, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,127,136,136,126,131,143,125,130,135,135,122,129],
[119,0,117,141,128,134,124,123,138,119,123,115,127,129],
[124,134,0,146,120,126,124,137,119,130,131,116,131,122],
[115,110,105,0,113,108,106,111,103,116,104,107,108,118],
[115,123,131,138,0,122,118,126,129,138,131,125,120,121],
[125,117,125,143,129,0,118,135,134,137,138,125,122,128],
[120,127,127,145,133,133,0,132,129,141,113,116,126,114],
[108,128,114,140,125,116,119,0,101,110,121,125,117,109],
[126,113,132,148,122,117,122,150,0,131,128,123,120,133],
[121,132,121,135,113,114,110,141,120,0,130,128,114,113],
[116,128,120,147,120,113,138,130,123,121,0,126,123,124],
[116,136,135,144,126,126,135,126,128,123,125,0,117,111],
[129,124,120,143,131,129,125,134,131,137,128,134,0,126],
[122,122,129,133,130,123,137,142,118,138,127,140,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 78, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,129,137,123,118,122,125,132,114,124,123,134,127],
[121,0,127,129,124,121,121,132,139,127,122,120,131,112],
[122,124,0,138,117,119,125,133,132,120,125,122,135,133],
[114,122,113,0,110,113,115,113,125,112,110,109,128,117],
[128,127,134,141,0,131,130,129,133,134,116,129,135,128],
[133,130,132,138,120,0,136,137,138,119,129,128,138,118],
[129,130,126,136,121,115,0,124,130,111,123,133,139,123],
[126,119,118,138,122,114,127,0,131,115,112,121,124,117],
[119,112,119,126,118,113,121,120,0,114,123,120,132,112],
[137,124,131,139,117,132,140,136,137,0,127,127,130,132],
[127,129,126,141,135,122,128,139,128,124,0,124,140,124],
[128,131,129,142,122,123,118,130,131,124,127,0,133,120],
[117,120,116,123,116,113,112,127,119,121,111,118,0,115],
[124,139,118,134,123,133,128,134,139,119,127,131,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 79, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,161,155,103,164,109,108,179,134,162,167,133,145],
[161,0,129,156,125,197,92,131,146,148,134,150,167,113],
[90,122,0,134,141,165,161,144,128,145,149,196,120,120],
[96,95,117,0,105,175,114,89,175,151,124,197,155,144],
[148,126,110,146,0,192,81,102,142,147,123,175,142,109],
[87,54,86,76,59,0,93,84,134,72,113,135,54,113],
[142,159,90,137,170,158,0,144,137,148,167,161,153,141],
[143,120,107,162,149,167,107,0,155,123,149,158,143,109],
[72,105,123,76,109,117,114,96,0,108,113,141,97,176],
[117,103,106,100,104,179,103,128,143,0,124,159,150,123],
[89,117,102,127,128,138,84,102,138,127,0,125,123,96],
[84,101,55,54,76,116,90,93,110,92,126,0,86,35],
[118,84,131,96,109,197,98,108,154,101,128,165,0,144],
[106,138,131,107,142,138,110,142,75,128,155,216,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 80, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,131,122,126,121,123,139,145,129,124,117,131,126],
[116,0,129,121,136,116,120,137,139,131,129,128,129,120],
[120,122,0,121,122,96,118,120,126,114,105,122,132,130],
[129,130,130,0,131,122,144,138,147,131,125,118,136,126],
[125,115,129,120,0,123,124,146,137,133,111,116,126,109],
[130,135,155,129,128,0,137,147,137,120,134,127,137,117],
[128,131,133,107,127,114,0,129,137,119,107,129,122,125],
[112,114,131,113,105,104,122,0,116,101,113,114,111,113],
[106,112,125,104,114,114,114,135,0,109,118,93,114,112],
[122,120,137,120,118,131,132,150,142,0,127,114,124,111],
[127,122,146,126,140,117,144,138,133,124,0,126,131,111],
[134,123,129,133,135,124,122,137,158,137,125,0,149,133],
[120,122,119,115,125,114,129,140,137,127,120,102,0,113],
[125,131,121,125,142,134,126,138,139,140,140,118,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 81, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,134,146,128,134,134,135,136,143,141,141,132,123],
[119,0,118,137,136,130,127,128,117,134,123,139,135,116],
[117,133,0,134,132,146,120,126,126,144,127,137,132,128],
[105,114,117,0,113,120,116,115,120,125,111,120,121,117],
[123,115,119,138,0,121,130,128,118,126,130,138,129,121],
[117,121,105,131,130,0,121,131,127,124,109,139,123,114],
[117,124,131,135,121,130,0,127,119,127,119,128,130,121],
[116,123,125,136,123,120,124,0,132,129,126,138,128,127],
[115,134,125,131,133,124,132,119,0,130,114,135,122,107],
[108,117,107,126,125,127,124,122,121,0,119,118,120,106],
[110,128,124,140,121,142,132,125,137,132,0,156,130,120],
[110,112,114,131,113,112,123,113,116,133,95,0,114,110],
[119,116,119,130,122,128,121,123,129,131,121,137,0,130],
[128,135,123,134,130,137,130,124,144,145,131,141,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 82, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,111,125,121,115,133,111,122,116,124,120,113,124],
[137,0,125,126,135,124,132,126,123,132,141,135,136,143],
[140,126,0,117,137,130,130,127,130,140,130,127,141,144],
[126,125,134,0,132,125,137,137,124,134,131,129,134,135],
[130,116,114,119,0,129,135,127,135,134,130,130,128,128],
[136,127,121,126,122,0,131,132,129,137,126,128,140,133],
[118,119,121,114,116,120,0,114,122,118,126,106,126,127],
[140,125,124,114,124,119,137,0,140,137,122,128,132,122],
[129,128,121,127,116,122,129,111,0,119,134,123,131,131],
[135,119,111,117,117,114,133,114,132,0,129,127,142,132],
[127,110,121,120,121,125,125,129,117,122,0,132,133,126],
[131,116,124,122,121,123,145,123,128,124,119,0,149,143],
[138,115,110,117,123,111,125,119,120,109,118,102,0,135],
[127,108,107,116,123,118,124,129,120,119,125,108,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 83, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,122,116,121,121,122,130,138,117,138,123,123,129],
[128,0,140,116,129,129,128,123,143,124,140,132,119,134],
[129,111,0,110,113,119,124,123,125,118,130,123,118,130],
[135,135,141,0,133,130,136,137,145,122,140,136,134,132],
[130,122,138,118,0,126,122,128,132,128,138,140,123,136],
[130,122,132,121,125,0,124,132,136,122,137,132,128,134],
[129,123,127,115,129,127,0,135,135,116,138,131,130,132],
[121,128,128,114,123,119,116,0,133,109,136,132,126,135],
[113,108,126,106,119,115,116,118,0,116,128,127,120,114],
[134,127,133,129,123,129,135,142,135,0,140,143,130,133],
[113,111,121,111,113,114,113,115,123,111,0,122,119,119],
[128,119,128,115,111,119,120,119,124,108,129,0,117,123],
[128,132,133,117,128,123,121,125,131,121,132,134,0,125],
[122,117,121,119,115,117,119,116,137,118,132,128,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 84, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,138,119,85,88,122,112,123,135,136,115,131],
[143,0,125,160,96,116,166,165,166,117,142,175,129,122],
[145,126,0,140,166,115,136,158,125,155,163,166,129,137],
[113,91,111,0,115,107,130,152,119,104,126,189,97,103],
[132,155,85,136,0,96,156,155,128,122,176,174,132,141],
[166,135,136,144,155,0,167,183,165,154,168,194,121,153],
[163,85,115,121,95,84,0,92,143,118,144,122,146,135],
[129,86,93,99,96,68,159,0,148,128,167,189,138,133],
[139,85,126,132,123,86,108,103,0,127,167,194,135,122],
[128,134,96,147,129,97,133,123,124,0,126,144,155,172],
[116,109,88,125,75,83,107,84,84,125,0,165,130,143],
[115,76,85,62,77,57,129,62,57,107,86,0,150,129],
[136,122,122,154,119,130,105,113,116,96,121,101,0,123],
[120,129,114,148,110,98,116,118,129,79,108,122,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 85, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,118,104,103,121,116,107,112,121,135,126,106,116],
[133,0,129,120,111,122,133,117,121,134,129,123,115,121],
[133,122,0,125,113,130,118,119,122,114,133,131,117,125],
[147,131,126,0,127,116,139,111,136,128,127,124,129,121],
[148,140,138,124,0,144,135,126,151,133,138,135,134,130],
[130,129,121,135,107,0,113,107,118,134,139,128,108,111],
[135,118,133,112,116,138,0,100,131,129,136,130,134,114],
[144,134,132,140,125,144,151,0,145,138,132,130,134,126],
[139,130,129,115,100,133,120,106,0,134,130,115,123,108],
[130,117,137,123,118,117,122,113,117,0,125,106,104,111],
[116,122,118,124,113,112,115,119,121,126,0,129,105,95],
[125,128,120,127,116,123,121,121,136,145,122,0,120,120],
[145,136,134,122,117,143,117,117,128,147,146,131,0,115],
[135,130,126,130,121,140,137,125,143,140,156,131,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 86, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,117,84,110,110,50,86,74,101,101,98,71,105],
[173,0,158,107,121,170,126,151,122,121,128,154,143,132],
[134,93,0,96,127,141,118,100,86,107,134,95,96,98],
[167,144,155,0,147,186,131,196,132,130,178,147,158,108],
[141,130,124,104,0,127,122,128,85,115,103,150,94,113],
[141,81,110,65,124,0,71,143,99,106,146,129,117,90],
[201,125,133,120,129,180,0,139,137,128,147,122,143,111],
[165,100,151,55,123,108,112,0,120,128,105,117,119,114],
[177,129,165,119,166,152,114,131,0,142,173,154,144,133],
[150,130,144,121,136,145,123,123,109,0,172,151,131,108],
[150,123,117,73,148,105,104,146,78,79,0,155,136,73],
[153,97,156,104,101,122,129,134,97,100,96,0,120,108],
[180,108,155,93,157,134,108,132,107,120,115,131,0,111],
[146,119,153,143,138,161,140,137,118,143,178,143,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 87, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,98,124,100,100,106,119,103,126,89,98,96,104],
[120,0,89,112,92,81,117,120,116,122,86,95,117,107],
[153,162,0,144,147,123,148,129,151,151,115,134,126,147],
[127,139,107,0,82,106,125,138,123,137,109,106,141,129],
[151,159,104,169,0,131,151,156,151,159,158,124,151,164],
[151,170,128,145,120,0,150,151,151,183,141,145,144,151],
[145,134,103,126,100,101,0,125,134,148,118,116,140,136],
[132,131,122,113,95,100,126,0,133,150,114,106,150,146],
[148,135,100,128,100,100,117,118,0,140,112,117,130,121],
[125,129,100,114,92,68,103,101,111,0,106,91,128,104],
[162,165,136,142,93,110,133,137,139,145,0,135,138,131],
[153,156,117,145,127,106,135,145,134,160,116,0,141,119],
[155,134,125,110,100,107,111,101,121,123,113,110,0,124],
[147,144,104,122,87,100,115,105,130,147,120,132,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 88, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,151,123,74,105,131,103,167,115,125,119,142,121],
[142,0,136,175,150,102,124,131,184,114,140,146,175,117],
[100,115,0,147,104,87,117,105,184,114,149,122,149,141],
[128,76,104,0,139,37,79,38,140,62,117,77,131,88],
[177,101,147,112,0,94,115,109,166,71,155,115,162,133],
[146,149,164,214,157,0,158,167,183,122,145,149,166,151],
[120,127,134,172,136,93,0,76,147,139,124,104,141,174],
[148,120,146,213,142,84,175,0,190,140,113,92,171,148],
[84,67,67,111,85,68,104,61,0,60,61,80,119,98],
[136,137,137,189,180,129,112,111,191,0,149,123,176,87],
[126,111,102,134,96,106,127,138,190,102,0,118,177,111],
[132,105,129,174,136,102,147,159,171,128,133,0,187,154],
[109,76,102,120,89,85,110,80,132,75,74,64,0,121],
[130,134,110,163,118,100,77,103,153,164,140,97,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 89, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,118,127,133,157,143,123,146,135,143,142,140,118],
[112,0,105,111,117,130,129,116,130,113,115,118,112,94],
[133,146,0,139,132,137,122,132,129,149,131,134,125,125],
[124,140,112,0,119,125,125,126,132,138,132,130,121,125],
[118,134,119,132,0,131,127,101,127,124,120,132,116,111],
[94,121,114,126,120,0,130,112,123,120,132,124,107,129],
[108,122,129,126,124,121,0,115,142,124,127,131,134,105],
[128,135,119,125,150,139,136,0,143,139,135,136,134,122],
[105,121,122,119,124,128,109,108,0,121,112,124,132,106],
[116,138,102,113,127,131,127,112,130,0,114,138,110,122],
[108,136,120,119,131,119,124,116,139,137,0,113,122,107],
[109,133,117,121,119,127,120,115,127,113,138,0,118,115],
[111,139,126,130,135,144,117,117,119,141,129,133,0,127],
[133,157,126,126,140,122,146,129,145,129,144,136,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 90, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,143,147,106,184,102,134,177,156,172,147,155,162],
[127,0,92,148,145,112,135,117,161,128,121,140,125,114],
[108,159,0,89,143,135,106,83,163,160,124,102,149,150],
[104,103,162,0,117,95,122,95,129,124,115,129,121,124],
[145,106,108,134,0,115,99,91,156,136,117,141,92,107],
[67,139,116,156,136,0,96,123,154,131,102,86,108,111],
[149,116,145,129,152,155,0,92,141,138,167,98,142,159],
[117,134,168,156,160,128,159,0,166,188,139,159,140,146],
[74,90,88,122,95,97,110,85,0,119,126,77,108,115],
[95,123,91,127,115,120,113,63,132,0,120,111,120,76],
[79,130,127,136,134,149,84,112,125,131,0,126,141,146],
[104,111,149,122,110,165,153,92,174,140,125,0,106,116],
[96,126,102,130,159,143,109,111,143,131,110,145,0,149],
[89,137,101,127,144,140,92,105,136,175,105,135,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 91, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,131,139,128,136,126,136,123,130,141,133,122,143],
[138,0,118,141,129,139,124,140,128,135,139,140,126,137],
[120,133,0,134,135,134,115,124,127,124,137,137,126,131],
[112,110,117,0,113,122,125,125,121,125,133,121,123,123],
[123,122,116,138,0,131,110,131,115,137,147,131,126,137],
[115,112,117,129,120,0,118,133,113,123,136,129,119,128],
[125,127,136,126,141,133,0,139,123,141,150,146,133,133],
[115,111,127,126,120,118,112,0,122,134,135,135,115,132],
[128,123,124,130,136,138,128,129,0,132,135,134,136,132],
[121,116,127,126,114,128,110,117,119,0,123,124,119,129],
[110,112,114,118,104,115,101,116,116,128,0,119,114,124],
[118,111,114,130,120,122,105,116,117,127,132,0,119,128],
[129,125,125,128,125,132,118,136,115,132,137,132,0,130],
[108,114,120,128,114,123,118,119,119,122,127,123,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 92, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,104,126,134,157,145,119,122,110,118,136,124,84],
[118,0,106,125,147,148,105,91,124,135,143,144,156,115],
[147,145,0,141,158,146,141,118,127,144,115,137,139,151],
[125,126,110,0,148,133,131,127,123,110,99,103,120,102],
[117,104,93,103,0,125,118,109,106,92,80,131,126,90],
[94,103,105,118,126,0,83,94,113,130,94,137,105,100],
[106,146,110,120,133,168,0,108,125,118,116,147,124,120],
[132,160,133,124,142,157,143,0,151,121,137,137,151,121],
[129,127,124,128,145,138,126,100,0,112,102,139,136,120],
[141,116,107,141,159,121,133,130,139,0,112,148,122,130],
[133,108,136,152,171,157,135,114,149,139,0,130,128,132],
[115,107,114,148,120,114,104,114,112,103,121,0,143,115],
[127,95,112,131,125,146,127,100,115,129,123,108,0,101],
[167,136,100,149,161,151,131,130,131,121,119,136,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 93, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,131,123,125,138,130,132,134,123,138,134,119,134],
[123,0,122,131,118,112,122,143,128,133,126,115,107,129],
[120,129,0,137,123,123,118,124,127,130,132,115,118,131],
[128,120,114,0,106,117,121,119,128,113,116,118,99,127],
[126,133,128,145,0,132,131,130,142,132,146,117,116,136],
[113,139,128,134,119,0,121,130,141,136,127,120,100,135],
[121,129,133,130,120,130,0,136,138,123,130,121,117,130],
[119,108,127,132,121,121,115,0,125,128,125,122,105,118],
[117,123,124,123,109,110,113,126,0,122,111,115,108,115],
[128,118,121,138,119,115,128,123,129,0,134,117,110,123],
[113,125,119,135,105,124,121,126,140,117,0,104,106,126],
[117,136,136,133,134,131,130,129,136,134,147,0,126,131],
[132,144,133,152,135,151,134,146,143,141,145,125,0,130],
[117,122,120,124,115,116,121,133,136,128,125,120,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 94, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,120,117,119,116,113,120,125,122,118,120,115,121],
[128,0,126,119,126,123,116,123,133,127,137,124,124,114],
[131,125,0,121,121,113,122,129,136,137,135,119,121,126],
[134,132,130,0,123,113,123,123,136,132,137,127,131,125],
[132,125,130,128,0,123,128,128,145,134,137,134,122,133],
[135,128,138,138,128,0,129,137,144,141,143,126,123,130],
[138,135,129,128,123,122,0,124,126,125,131,130,127,129],
[131,128,122,128,123,114,127,0,140,145,139,127,119,125],
[126,118,115,115,106,107,125,111,0,117,130,122,116,113],
[129,124,114,119,117,110,126,106,134,0,126,118,113,116],
[133,114,116,114,114,108,120,112,121,125,0,109,115,114],
[131,127,132,124,117,125,121,124,129,133,142,0,120,122],
[136,127,130,120,129,128,124,132,135,138,136,131,0,126],
[130,137,125,126,118,121,122,126,138,135,137,129,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 95, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,117,144,130,114,119,123,120,106,126,127,127,135],
[119,0,115,133,119,136,111,131,115,125,118,121,119,96],
[134,136,0,158,135,158,127,130,136,120,122,136,144,125],
[107,118,93,0,97,115,107,120,116,98,96,107,112,108],
[121,132,116,154,0,142,115,146,127,112,131,132,134,122],
[137,115,93,136,109,0,100,120,95,95,119,96,123,120],
[132,140,124,144,136,151,0,147,127,120,139,131,131,133],
[128,120,121,131,105,131,104,0,119,120,123,120,131,111],
[131,136,115,135,124,156,124,132,0,122,137,129,143,134],
[145,126,131,153,139,156,131,131,129,0,130,115,138,144],
[125,133,129,155,120,132,112,128,114,121,0,123,134,124],
[124,130,115,144,119,155,120,131,122,136,128,0,135,121],
[124,132,107,139,117,128,120,120,108,113,117,116,0,105],
[116,155,126,143,129,131,118,140,117,107,127,130,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 96, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,123,109,114,111,115,113,108,127,122,120,130],
[141,0,122,124,127,120,115,113,120,128,138,135,142,121],
[140,129,0,121,126,131,127,125,127,121,141,134,138,143],
[128,127,130,0,116,120,119,116,128,114,125,114,125,130],
[142,124,125,135,0,123,123,114,133,129,130,132,136,136],
[137,131,120,131,128,0,129,125,134,123,133,129,120,141],
[140,136,124,132,128,122,0,126,128,125,126,124,129,127],
[136,138,126,135,137,126,125,0,132,128,144,131,127,131],
[138,131,124,123,118,117,123,119,0,118,135,131,123,138],
[143,123,130,137,122,128,126,123,133,0,134,134,141,136],
[124,113,110,126,121,118,125,107,116,117,0,114,118,126],
[129,116,117,137,119,122,127,120,120,117,137,0,140,133],
[131,109,113,126,115,131,122,124,128,110,133,111,0,122],
[121,130,108,121,115,110,124,120,113,115,125,118,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 97, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,118,131,136,129,130,121,132,138,132,117,135,117],
[125,0,123,123,116,116,111,115,133,133,134,130,136,115],
[133,128,0,124,108,107,118,126,113,137,109,114,133,112],
[120,128,127,0,118,119,113,109,122,125,120,118,116,111],
[115,135,143,133,0,129,120,136,119,122,142,123,127,97],
[122,135,144,132,122,0,129,140,126,136,157,136,133,132],
[121,140,133,138,131,122,0,128,139,131,147,132,133,126],
[130,136,125,142,115,111,123,0,133,147,131,118,130,101],
[119,118,138,129,132,125,112,118,0,125,142,111,127,120],
[113,118,114,126,129,115,120,104,126,0,126,115,127,116],
[119,117,142,131,109,94,104,120,109,125,0,121,122,124],
[134,121,137,133,128,115,119,133,140,136,130,0,128,113],
[116,115,118,135,124,118,118,121,124,124,129,123,0,108],
[134,136,139,140,154,119,125,150,131,135,127,138,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 98, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,110,117,113,123,112,102,124,118,118,104,115,118],
[146,0,133,141,154,133,125,129,140,130,135,129,136,134],
[141,118,0,129,131,127,131,126,123,134,141,128,124,134],
[134,110,122,0,134,125,122,124,136,126,131,123,134,128],
[138,97,120,117,0,122,113,116,122,114,118,115,125,123],
[128,118,124,126,129,0,120,135,128,139,121,121,132,135],
[139,126,120,129,138,131,0,134,134,137,141,122,130,137],
[149,122,125,127,135,116,117,0,119,123,133,116,121,129],
[127,111,128,115,129,123,117,132,0,132,117,120,128,130],
[133,121,117,125,137,112,114,128,119,0,117,119,120,128],
[133,116,110,120,133,130,110,118,134,134,0,119,128,131],
[147,122,123,128,136,130,129,135,131,132,132,0,131,129],
[136,115,127,117,126,119,121,130,123,131,123,120,0,131],
[133,117,117,123,128,116,114,122,121,123,120,122,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 99, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,139,134,137,139,146,131,137,157,134,124,133,137],
[128,0,136,141,124,128,134,134,130,142,139,121,140,124],
[112,115,0,115,117,108,125,97,119,135,123,103,118,120],
[117,110,136,0,115,119,124,103,128,132,130,103,143,121],
[114,127,134,136,0,128,132,123,125,138,125,117,122,138],
[112,123,143,132,123,0,130,118,136,134,144,130,120,143],
[105,117,126,127,119,121,0,105,121,128,131,117,116,114],
[120,117,154,148,128,133,146,0,133,138,153,129,134,136],
[114,121,132,123,126,115,130,118,0,144,121,117,126,117],
[94,109,116,119,113,117,123,113,107,0,108,94,120,103],
[117,112,128,121,126,107,120,98,130,143,0,118,133,111],
[127,130,148,148,134,121,134,122,134,157,133,0,127,136],
[118,111,133,108,129,131,135,117,125,131,118,124,0,127],
[114,127,131,130,113,108,137,115,134,148,140,115,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 100, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,125,120,137,141,127,126,131,122,126,117,134,133],
[113,0,130,117,114,136,112,123,104,118,111,109,125,117],
[126,121,0,111,126,133,117,127,113,121,114,118,136,136],
[131,134,140,0,129,160,123,133,132,125,133,131,141,132],
[114,137,125,122,0,138,128,124,114,123,124,119,133,132],
[110,115,118,91,113,0,110,104,107,104,102,112,131,121],
[124,139,134,128,123,141,0,131,124,130,120,118,142,139],
[125,128,124,118,127,147,120,0,124,120,109,127,130,128],
[120,147,138,119,137,144,127,127,0,138,121,130,132,135],
[129,133,130,126,128,147,121,131,113,0,119,130,131,133],
[125,140,137,118,127,149,131,142,130,132,0,132,141,137],
[134,142,133,120,132,139,133,124,121,121,119,0,134,127],
[117,126,115,110,118,120,109,121,119,120,110,117,0,117],
[118,134,115,119,119,130,112,123,116,118,114,124,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 101, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,145,134,138,135,128,124,145,127,144,150,120,158],
[128,0,136,131,152,131,133,126,120,137,147,136,99,137],
[106,115,0,130,111,121,116,111,135,109,130,125,115,126],
[117,120,121,0,110,125,107,112,108,106,135,138,96,136],
[113,99,140,141,0,117,127,120,112,119,144,131,120,133],
[116,120,130,126,134,0,124,116,124,119,151,138,106,136],
[123,118,135,144,124,127,0,129,124,129,139,128,115,136],
[127,125,140,139,131,135,122,0,124,157,153,138,126,134],
[106,131,116,143,139,127,127,127,0,119,127,130,134,153],
[124,114,142,145,132,132,122,94,132,0,136,125,138,153],
[107,104,121,116,107,100,112,98,124,115,0,128,109,121],
[101,115,126,113,120,113,123,113,121,126,123,0,108,118],
[131,152,136,155,131,145,136,125,117,113,142,143,0,161],
[93,114,125,115,118,115,115,117,98,98,130,133,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 102, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,152,144,135,142,150,139,125,127,147,142,132,128],
[133,0,159,137,146,138,148,130,127,136,130,134,121,145],
[99,92,0,126,107,114,125,115,110,117,125,122,108,107],
[107,114,125,0,126,143,117,123,107,98,129,140,119,103],
[116,105,144,125,0,123,126,121,103,121,138,131,116,117],
[109,113,137,108,128,0,124,122,105,103,128,130,129,124],
[101,103,126,134,125,127,0,124,103,110,116,137,121,115],
[112,121,136,128,130,129,127,0,95,124,130,143,126,112],
[126,124,141,144,148,146,148,156,0,134,145,149,157,132],
[124,115,134,153,130,148,141,127,117,0,136,149,152,134],
[104,121,126,122,113,123,135,121,106,115,0,130,121,107],
[109,117,129,111,120,121,114,108,102,102,121,0,106,112],
[119,130,143,132,135,122,130,125,94,99,130,145,0,116],
[123,106,144,148,134,127,136,139,119,117,144,139,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 103, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,107,114,104,100,124,106,135,102,90,129,111,105],
[135,0,106,138,113,125,128,103,118,119,125,124,139,136],
[144,145,0,134,141,137,131,119,140,153,142,144,152,128],
[137,113,117,0,123,112,119,124,131,115,129,127,138,139],
[147,138,110,128,0,124,124,139,141,126,127,147,135,117],
[151,126,114,139,127,0,127,117,147,140,114,144,147,123],
[127,123,120,132,127,124,0,116,129,135,128,132,140,106],
[145,148,132,127,112,134,135,0,135,144,111,136,143,125],
[116,133,111,120,110,104,122,116,0,121,120,120,144,118],
[149,132,98,136,125,111,116,107,130,0,105,140,136,124],
[161,126,109,122,124,137,123,140,131,146,0,132,157,125],
[122,127,107,124,104,107,119,115,131,111,119,0,135,98],
[140,112,99,113,116,104,111,108,107,115,94,116,0,103],
[146,115,123,112,134,128,145,126,133,127,126,153,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 104, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,145,152,146,138,132,147,133,145,136,136,160,123],
[122,0,104,139,115,108,113,124,117,130,147,117,147,107],
[106,147,0,152,126,123,117,135,111,125,147,116,158,107],
[99,112,99,0,125,104,88,107,103,114,123,95,139,101],
[105,136,125,126,0,125,109,126,117,121,110,116,139,106],
[113,143,128,147,126,0,127,125,122,127,111,128,142,126],
[119,138,134,163,142,124,0,147,136,141,143,139,140,130],
[104,127,116,144,125,126,104,0,107,122,116,115,144,103],
[118,134,140,148,134,129,115,144,0,139,133,125,143,125],
[106,121,126,137,130,124,110,129,112,0,128,120,141,114],
[115,104,104,128,141,140,108,135,118,123,0,112,149,108],
[115,134,135,156,135,123,112,136,126,131,139,0,149,131],
[91,104,93,112,112,109,111,107,108,110,102,102,0,103],
[128,144,144,150,145,125,121,148,126,137,143,120,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 105, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,132,114,110,130,131,123,133,123,129,122,122,123],
[119,0,148,130,115,134,139,135,139,129,119,133,116,130],
[119,103,0,111,107,107,128,112,123,108,107,109,116,110],
[137,121,140,0,118,128,134,130,141,106,121,140,119,133],
[141,136,144,133,0,144,142,131,137,120,132,142,127,137],
[121,117,144,123,107,0,111,120,130,114,122,125,109,122],
[120,112,123,117,109,140,0,104,122,114,122,127,118,116],
[128,116,139,121,120,131,147,0,145,126,126,142,121,125],
[118,112,128,110,114,121,129,106,0,109,119,112,113,126],
[128,122,143,145,131,137,137,125,142,0,129,137,114,138],
[122,132,144,130,119,129,129,125,132,122,0,128,112,118],
[129,118,142,111,109,126,124,109,139,114,123,0,122,127],
[129,135,135,132,124,142,133,130,138,137,139,129,0,138],
[128,121,141,118,114,129,135,126,125,113,133,124,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 106, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,128,114,137,125,117,109,125,118,123,124,119,134],
[134,0,132,139,124,138,126,123,128,127,129,132,133,128],
[123,119,0,122,124,122,123,114,114,130,121,126,112,121],
[137,112,129,0,132,127,107,105,124,118,116,127,107,121],
[114,127,127,119,0,119,132,112,117,114,130,131,112,118],
[126,113,129,124,132,0,131,102,125,128,130,126,109,125],
[134,125,128,144,119,120,0,116,121,130,129,128,137,124],
[142,128,137,146,139,149,135,0,124,129,123,157,138,131],
[126,123,137,127,134,126,130,127,0,128,118,129,128,118],
[133,124,121,133,137,123,121,122,123,0,123,128,121,134],
[128,122,130,135,121,121,122,128,133,128,0,127,117,129],
[127,119,125,124,120,125,123,94,122,123,124,0,122,119],
[132,118,139,144,139,142,114,113,123,130,134,129,0,132],
[117,123,130,130,133,126,127,120,133,117,122,132,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 107, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,105,116,150,125,121,110,112,137,139,111,109,131],
[154,0,109,116,130,121,124,128,126,161,139,122,122,112],
[146,142,0,126,161,143,142,118,136,159,152,112,134,117],
[135,135,125,0,147,146,137,119,135,158,136,140,122,135],
[101,121,90,104,0,120,104,98,118,135,127,114,87,118],
[126,130,108,105,131,0,125,122,108,122,115,133,109,107],
[130,127,109,114,147,126,0,113,110,135,118,132,110,135],
[141,123,133,132,153,129,138,0,131,171,163,129,121,137],
[139,125,115,116,133,143,141,120,0,142,132,134,110,116],
[114,90,92,93,116,129,116,80,109,0,120,108,101,99],
[112,112,99,115,124,136,133,88,119,131,0,113,122,114],
[140,129,139,111,137,118,119,122,117,143,138,0,120,123],
[142,129,117,129,164,142,141,130,141,150,129,131,0,125],
[120,139,134,116,133,144,116,114,135,152,137,128,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 108, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,135,145,149,140,148,131,139,149,131,106,129,118],
[119,0,153,119,155,106,151,113,132,161,139,116,140,125],
[116,98,0,104,120,108,134,107,99,160,96,117,116,114],
[106,132,147,0,137,117,140,96,108,126,140,118,107,122],
[102,96,131,114,0,107,125,114,131,151,112,97,113,105],
[111,145,143,134,144,0,144,94,122,155,120,110,109,134],
[103,100,117,111,126,107,0,101,109,114,137,126,110,107],
[120,138,144,155,137,157,150,0,153,155,149,129,117,122],
[112,119,152,143,120,129,142,98,0,164,154,102,141,107],
[102,90,91,125,100,96,137,96,87,0,117,109,87,94],
[120,112,155,111,139,131,114,102,97,134,0,103,101,112],
[145,135,134,133,154,141,125,122,149,142,148,0,110,137],
[122,111,135,144,138,142,141,134,110,164,150,141,0,106],
[133,126,137,129,146,117,144,129,144,157,139,114,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 109, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,154,127,128,126,125,138,133,143,148,141,130,153],
[146,0,141,124,147,136,142,136,126,126,141,115,145,150],
[97,110,0,105,104,116,126,123,99,100,120,112,114,119],
[124,127,146,0,129,135,128,125,112,134,137,123,125,129],
[123,104,147,122,0,132,132,129,101,137,138,121,112,139],
[125,115,135,116,119,0,107,129,117,117,128,110,124,124],
[126,109,125,123,119,144,0,129,102,137,127,116,120,116],
[113,115,128,126,122,122,122,0,112,140,127,128,120,109],
[118,125,152,139,150,134,149,139,0,153,129,144,144,139],
[108,125,151,117,114,134,114,111,98,0,124,121,115,124],
[103,110,131,114,113,123,124,124,122,127,0,119,104,111],
[110,136,139,128,130,141,135,123,107,130,132,0,124,136],
[121,106,137,126,139,127,131,131,107,136,147,127,0,119],
[98,101,132,122,112,127,135,142,112,127,140,115,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 110, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,136,145,148,168,103,151,165,130,103,174,141,179],
[89,0,127,123,120,152,110,131,145,122,109,117,76,123],
[115,124,0,134,152,166,124,173,158,129,134,152,97,147],
[106,128,117,0,136,155,82,132,111,127,134,150,109,130],
[103,131,99,115,0,134,114,120,126,110,81,148,119,139],
[83,99,85,96,117,0,106,159,115,91,103,121,77,90],
[148,141,127,169,137,145,0,147,148,104,127,161,135,138],
[100,120,78,119,131,92,104,0,136,119,104,143,92,104],
[86,106,93,140,125,136,103,115,0,104,114,117,86,149],
[121,129,122,124,141,160,147,132,147,0,104,144,104,140],
[148,142,117,117,170,148,124,147,137,147,0,167,131,129],
[77,134,99,101,103,130,90,108,134,107,84,0,61,87],
[110,175,154,142,132,174,116,159,165,147,120,190,0,154],
[72,128,104,121,112,161,113,147,102,111,122,164,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 111, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,125,171,149,114,153,153,152,79,129,115,110,142],
[73,0,59,89,85,96,64,91,106,37,69,90,80,95],
[126,192,0,144,136,126,106,181,152,100,95,142,94,163],
[80,162,107,0,121,108,108,131,111,104,117,125,115,115],
[102,166,115,130,0,108,114,147,152,79,111,146,103,136],
[137,155,125,143,143,0,99,169,165,96,104,144,106,157],
[98,187,145,143,137,152,0,164,155,112,138,146,147,144],
[98,160,70,120,104,82,87,0,116,61,84,85,74,86],
[99,145,99,140,99,86,96,135,0,76,102,127,127,96],
[172,214,151,147,172,155,139,190,175,0,136,171,124,180],
[122,182,156,134,140,147,113,167,149,115,0,123,129,151],
[136,161,109,126,105,107,105,166,124,80,128,0,111,145],
[141,171,157,136,148,145,104,177,124,127,122,140,0,142],
[109,156,88,136,115,94,107,165,155,71,100,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 112, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,131,113,117,113,121,117,112,119,135,122,125,117],
[124,0,129,106,130,114,104,118,114,139,128,110,141,115],
[120,122,0,98,94,117,91,105,95,114,112,116,112,96],
[138,145,153,0,144,142,130,122,131,133,133,117,128,128],
[134,121,157,107,0,134,114,111,111,136,118,116,123,115],
[138,137,134,109,117,0,127,127,110,126,129,128,132,126],
[130,147,160,121,137,124,0,111,125,126,123,123,117,134],
[134,133,146,129,140,124,140,0,130,134,133,142,157,131],
[139,137,156,120,140,141,126,121,0,125,125,144,131,125],
[132,112,137,118,115,125,125,117,126,0,122,129,136,112],
[116,123,139,118,133,122,128,118,126,129,0,127,135,126],
[129,141,135,134,135,123,128,109,107,122,124,0,121,133],
[126,110,139,123,128,119,134,94,120,115,116,130,0,109],
[134,136,155,123,136,125,117,120,126,139,125,118,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 113, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,117,104,102,92,95,74,130,116,99,119,126,120],
[126,0,154,132,166,163,118,160,148,138,123,141,133,150],
[134,97,0,132,143,120,102,132,136,139,109,130,131,127],
[147,119,119,0,146,117,98,111,142,126,90,130,125,141],
[149,85,108,105,0,93,71,80,126,131,103,117,133,116],
[159,88,131,134,158,0,80,110,146,128,116,128,118,133],
[156,133,149,153,180,171,0,125,175,146,133,134,157,148],
[177,91,119,140,171,141,126,0,175,160,113,143,154,124],
[121,103,115,109,125,105,76,76,0,117,75,115,91,116],
[135,113,112,125,120,123,105,91,134,0,108,128,129,148],
[152,128,142,161,148,135,118,138,176,143,0,135,148,156],
[132,110,121,121,134,123,117,108,136,123,116,0,107,143],
[125,118,120,126,118,133,94,97,160,122,103,144,0,139],
[131,101,124,110,135,118,103,127,135,103,95,108,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 114, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,113,141,116,134,115,127,119,125,126,114,133,141],
[131,0,107,129,116,130,119,114,118,123,116,122,120,134],
[138,144,0,132,116,125,133,119,123,141,108,146,129,145],
[110,122,119,0,114,146,121,112,106,145,120,113,128,120],
[135,135,135,137,0,143,140,131,130,125,143,154,120,151],
[117,121,126,105,108,0,108,109,110,110,112,119,117,144],
[136,132,118,130,111,143,0,135,134,123,121,132,137,147],
[124,137,132,139,120,142,116,0,127,120,119,134,129,147],
[132,133,128,145,121,141,117,124,0,136,125,140,133,163],
[126,128,110,106,126,141,128,131,115,0,123,129,139,149],
[125,135,143,131,108,139,130,132,126,128,0,134,132,137],
[137,129,105,138,97,132,119,117,111,122,117,0,130,154],
[118,131,122,123,131,134,114,122,118,112,119,121,0,138],
[110,117,106,131,100,107,104,104,88,102,114,97,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 115, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,106,108,121,121,136,145,125,128,125,121,136,121],
[122,0,114,129,114,127,151,140,119,133,125,123,121,130],
[145,137,0,124,117,143,151,131,139,157,133,137,148,130],
[143,122,127,0,127,137,153,154,136,139,137,127,149,137],
[130,137,134,124,0,124,147,143,139,135,120,126,143,124],
[130,124,108,114,127,0,130,137,115,149,124,116,122,104],
[115,100,100,98,104,121,0,111,106,106,105,109,130,99],
[106,111,120,97,108,114,140,0,118,129,109,107,120,102],
[126,132,112,115,112,136,145,133,0,126,105,110,139,120],
[123,118,94,112,116,102,145,122,125,0,119,118,120,90],
[126,126,118,114,131,127,146,142,146,132,0,131,122,129],
[130,128,114,124,125,135,142,144,141,133,120,0,143,129],
[115,130,103,102,108,129,121,131,112,131,129,108,0,119],
[130,121,121,114,127,147,152,149,131,161,122,122,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 116, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,161,201,161,167,118,126,125,133,103,177,175,153],
[64,0,107,109,69,104,79,52,89,92,105,119,70,99],
[90,144,0,132,158,128,84,87,116,114,75,160,126,150],
[50,142,119,0,110,119,115,113,83,109,114,168,85,113],
[90,182,93,141,0,152,124,99,74,115,103,153,80,132],
[84,147,123,132,99,0,64,96,89,101,67,153,137,119],
[133,172,167,136,127,187,0,146,73,147,130,218,147,160],
[125,199,164,138,152,155,105,0,122,157,99,161,141,156],
[126,162,135,168,177,162,178,129,0,187,107,191,121,162],
[118,159,137,142,136,150,104,94,64,0,119,163,96,116],
[148,146,176,137,148,184,121,152,144,132,0,206,125,146],
[74,132,91,83,98,98,33,90,60,88,45,0,39,70],
[76,181,125,166,171,114,104,110,130,155,126,212,0,161],
[98,152,101,138,119,132,91,95,89,135,105,181,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 117, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,127,155,172,133,140,124,121,133,159,140,122,148],
[114,0,106,121,157,171,144,131,127,147,178,137,141,135],
[124,145,0,146,173,146,175,145,137,154,159,112,126,131],
[96,130,105,0,158,127,153,130,114,161,156,113,111,129],
[79,94,78,93,0,111,109,94,90,95,127,82,85,96],
[118,80,105,124,140,0,134,112,124,93,158,101,116,112],
[111,107,76,98,142,117,0,121,122,123,130,68,88,126],
[127,120,106,121,157,139,130,0,116,149,154,118,122,136],
[130,124,114,137,161,127,129,135,0,141,143,116,136,129],
[118,104,97,90,156,158,128,102,110,0,157,88,80,157],
[92,73,92,95,124,93,121,97,108,94,0,72,90,116],
[111,114,139,138,169,150,183,133,135,163,179,0,109,140],
[129,110,125,140,166,135,163,129,115,171,161,142,0,138],
[103,116,120,122,155,139,125,115,122,94,135,111,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 118, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,100,122,113,117,116,124,107,119,118,116,115,126],
[136,0,112,134,119,112,115,125,118,120,112,131,119,124],
[151,139,0,150,129,136,134,132,123,136,125,141,126,141],
[129,117,101,0,116,122,129,122,119,135,118,117,124,123],
[138,132,122,135,0,128,127,134,126,143,137,138,112,129],
[134,139,115,129,123,0,128,136,127,137,121,121,137,124],
[135,136,117,122,124,123,0,131,112,133,124,130,114,125],
[127,126,119,129,117,115,120,0,116,120,118,113,121,126],
[144,133,128,132,125,124,139,135,0,139,119,133,132,134],
[132,131,115,116,108,114,118,131,112,0,122,127,120,119],
[133,139,126,133,114,130,127,133,132,129,0,134,123,129],
[135,120,110,134,113,130,121,138,118,124,117,0,122,127],
[136,132,125,127,139,114,137,130,119,131,128,129,0,125],
[125,127,110,128,122,127,126,125,117,132,122,124,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 119, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,108,129,107,120,114,132,100,135,149,135,117],
[147,0,137,135,152,136,140,133,144,124,155,128,136,162],
[139,114,0,136,122,125,130,107,132,116,132,112,143,133],
[143,116,115,0,151,112,124,133,143,123,111,146,154,154],
[122,99,129,100,0,121,126,119,111,110,128,117,124,136],
[144,115,126,139,130,0,126,121,132,128,144,128,143,153],
[131,111,121,127,125,125,0,119,140,97,115,128,134,129],
[137,118,144,118,132,130,132,0,135,126,135,138,133,150],
[119,107,119,108,140,119,111,116,0,102,111,111,105,127],
[151,127,135,128,141,123,154,125,149,0,142,140,141,159],
[116,96,119,140,123,107,136,116,140,109,0,118,143,154],
[102,123,139,105,134,123,123,113,140,111,133,0,144,137],
[116,115,108,97,127,108,117,118,146,110,108,107,0,119],
[134,89,118,97,115,98,122,101,124,92,97,114,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 120, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,138,118,130,106,101,115,119,111,101,137,102,121],
[127,0,114,133,125,118,103,115,118,114,101,124,130,100],
[113,137,0,120,140,129,100,116,125,112,119,127,119,97],
[133,118,131,0,131,118,115,114,124,119,122,137,136,116],
[121,126,111,120,0,124,116,124,125,112,107,127,121,112],
[145,133,122,133,127,0,119,118,111,118,137,144,125,126],
[150,148,151,136,135,132,0,114,107,136,139,159,126,117],
[136,136,135,137,127,133,137,0,148,142,120,133,138,143],
[132,133,126,127,126,140,144,103,0,106,127,144,137,111],
[140,137,139,132,139,133,115,109,145,0,105,122,133,129],
[150,150,132,129,144,114,112,131,124,146,0,140,129,125],
[114,127,124,114,124,107,92,118,107,129,111,0,106,105],
[149,121,132,115,130,126,125,113,114,118,122,145,0,106],
[130,151,154,135,139,125,134,108,140,122,126,146,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 121, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,132,149,133,125,135,140,119,132,133,126,118,124],
[113,0,125,132,131,125,118,127,95,104,123,102,104,112],
[119,126,0,145,130,149,126,157,123,125,141,109,127,136],
[102,119,106,0,120,123,102,117,106,124,124,110,111,113],
[118,120,121,131,0,118,109,136,114,129,124,95,113,111],
[126,126,102,128,133,0,104,126,108,118,130,114,110,124],
[116,133,125,149,142,147,0,152,123,119,146,122,129,126],
[111,124,94,134,115,125,99,0,100,109,137,104,113,121],
[132,156,128,145,137,143,128,151,0,128,148,109,133,142],
[119,147,126,127,122,133,132,142,123,0,137,101,127,130],
[118,128,110,127,127,121,105,114,103,114,0,109,100,115],
[125,149,142,141,156,137,129,147,142,150,142,0,129,146],
[133,147,124,140,138,141,122,138,118,124,151,122,0,134],
[127,139,115,138,140,127,125,130,109,121,136,105,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 122, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,120,135,129,126,128,136,131,128,139,130,130,142],
[123,0,118,128,131,122,131,131,123,116,131,123,134,139],
[131,133,0,131,140,130,127,138,131,123,127,137,132,133],
[116,123,120,0,121,122,118,121,120,104,125,115,129,132],
[122,120,111,130,0,125,121,138,128,116,126,128,127,131],
[125,129,121,129,126,0,141,130,125,113,125,134,134,137],
[123,120,124,133,130,110,0,136,144,126,133,134,140,134],
[115,120,113,130,113,121,115,0,120,115,110,129,119,130],
[120,128,120,131,123,126,107,131,0,119,130,129,134,120],
[123,135,128,147,135,138,125,136,132,0,142,137,141,134],
[112,120,124,126,125,126,118,141,121,109,0,129,132,127],
[121,128,114,136,123,117,117,122,122,114,122,0,126,123],
[121,117,119,122,124,117,111,132,117,110,119,125,0,137],
[109,112,118,119,120,114,117,121,131,117,124,128,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 123, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,116,124,114,108,114,108,115,129,103,95,105,122],
[149,0,144,131,118,136,115,130,142,120,126,136,122,134],
[135,107,0,113,118,119,115,142,127,132,123,130,119,143],
[127,120,138,0,139,128,116,125,135,130,117,136,118,145],
[137,133,133,112,0,120,116,129,133,129,129,138,133,151],
[143,115,132,123,131,0,122,143,132,127,114,131,105,135],
[137,136,136,135,135,129,0,147,132,128,112,127,109,146],
[143,121,109,126,122,108,104,0,126,118,119,148,110,156],
[136,109,124,116,118,119,119,125,0,117,106,121,112,139],
[122,131,119,121,122,124,123,133,134,0,105,127,117,156],
[148,125,128,134,122,137,139,132,145,146,0,135,120,136],
[156,115,121,115,113,120,124,103,130,124,116,0,116,155],
[146,129,132,133,118,146,142,141,139,134,131,135,0,154],
[129,117,108,106,100,116,105,95,112,95,115,96,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 124, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,111,135,128,136,124,136,109,124,132,124,121,134],
[115,0,122,122,118,111,121,121,120,118,121,124,121,127],
[140,129,0,116,116,119,124,122,117,120,133,123,130,137],
[116,129,135,0,120,114,124,118,116,107,121,131,121,149],
[123,133,135,131,0,124,123,133,116,121,144,133,121,133],
[115,140,132,137,127,0,131,126,124,129,137,122,116,127],
[127,130,127,127,128,120,0,123,127,126,135,123,115,137],
[115,130,129,133,118,125,128,0,131,119,126,107,117,134],
[142,131,134,135,135,127,124,120,0,121,130,122,130,138],
[127,133,131,144,130,122,125,132,130,0,134,128,116,137],
[119,130,118,130,107,114,116,125,121,117,0,113,125,128],
[127,127,128,120,118,129,128,144,129,123,138,0,133,139],
[130,130,121,130,130,135,136,134,121,135,126,118,0,143],
[117,124,114,102,118,124,114,117,113,114,123,112,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 125, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,124,151,144,147,138,148,116,118,141,129,157,154],
[108,0,123,138,142,138,105,160,110,114,117,115,135,126],
[127,128,0,130,179,140,137,145,120,130,131,123,160,138],
[100,113,121,0,133,119,116,136,85,113,125,89,127,107],
[107,109,72,118,0,107,127,120,88,123,98,89,128,120],
[104,113,111,132,144,0,136,138,116,121,131,109,94,135],
[113,146,114,135,124,115,0,170,101,140,147,115,124,127],
[103,91,106,115,131,113,81,0,109,113,118,99,126,107],
[135,141,131,166,163,135,150,142,0,134,127,100,150,132],
[133,137,121,138,128,130,111,138,117,0,148,122,131,135],
[110,134,120,126,153,120,104,133,124,103,0,111,114,145],
[122,136,128,162,162,142,136,152,151,129,140,0,165,127],
[94,116,91,124,123,157,127,125,101,120,137,86,0,128],
[97,125,113,144,131,116,124,144,119,116,106,124,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 126, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,116,136,129,118,121,119,121,125,126,125,111,121],
[131,0,129,123,130,135,124,120,117,127,131,131,134,122],
[135,122,0,133,124,133,120,117,121,125,128,132,122,115],
[115,128,118,0,127,123,121,122,122,122,114,121,117,114],
[122,121,127,124,0,126,133,119,116,115,120,133,119,111],
[133,116,118,128,125,0,124,124,113,122,124,115,120,122],
[130,127,131,130,118,127,0,129,125,125,125,120,121,126],
[132,131,134,129,132,127,122,0,128,123,127,134,121,122],
[130,134,130,129,135,138,126,123,0,128,138,127,136,112],
[126,124,126,129,136,129,126,128,123,0,125,121,127,119],
[125,120,123,137,131,127,126,124,113,126,0,131,122,126],
[126,120,119,130,118,136,131,117,124,130,120,0,132,118],
[140,117,129,134,132,131,130,130,115,124,129,119,0,130],
[130,129,136,137,140,129,125,129,139,132,125,133,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 127, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,129,134,130,128,123,127,130,132,128,124,129,131],
[123,0,134,129,120,130,121,124,134,127,137,123,127,127],
[122,117,0,124,131,114,112,119,125,122,114,119,125,116],
[117,122,127,0,126,120,118,122,118,114,119,109,122,117],
[121,131,120,125,0,118,121,117,124,132,124,115,125,128],
[123,121,137,131,133,0,131,127,119,123,124,128,133,130],
[128,130,139,133,130,120,0,125,137,133,139,122,134,121],
[124,127,132,129,134,124,126,0,131,127,128,114,119,132],
[121,117,126,133,127,132,114,120,0,132,127,131,132,123],
[119,124,129,137,119,128,118,124,119,0,121,120,128,115],
[123,114,137,132,127,127,112,123,124,130,0,125,128,115],
[127,128,132,142,136,123,129,137,120,131,126,0,128,137],
[122,124,126,129,126,118,117,132,119,123,123,123,0,116],
[120,124,135,134,123,121,130,119,128,136,136,114,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 128, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,165,144,126,154,132,131,158,164,190,148,207,124],
[87,0,92,66,74,125,56,85,109,76,125,77,106,113],
[86,159,0,112,111,154,104,90,104,111,120,111,126,114],
[107,185,139,0,112,175,98,125,127,100,187,127,134,146],
[125,177,140,139,0,157,109,107,126,124,156,118,166,137],
[97,126,97,76,94,0,68,89,88,65,139,63,113,91],
[119,195,147,153,142,183,0,127,116,131,162,110,171,156],
[120,166,161,126,144,162,124,0,133,120,172,115,148,136],
[93,142,147,124,125,163,135,118,0,150,182,145,171,144],
[87,175,140,151,127,186,120,131,101,0,173,116,164,139],
[61,126,131,64,95,112,89,79,69,78,0,63,122,76],
[103,174,140,124,133,188,141,136,106,135,188,0,176,126],
[44,145,125,117,85,138,80,103,80,87,129,75,0,93],
[127,138,137,105,114,160,95,115,107,112,175,125,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 129, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,129,127,130,128,128,120,131,137,129,132,130,110],
[124,0,115,141,127,129,130,134,143,140,138,138,134,123],
[122,136,0,141,148,143,136,132,140,154,139,140,142,117],
[124,110,110,0,119,124,118,117,130,126,131,116,119,116],
[121,124,103,132,0,128,118,119,129,137,120,127,132,117],
[123,122,108,127,123,0,118,126,125,127,129,134,124,120],
[123,121,115,133,133,133,0,128,143,129,125,130,146,121],
[131,117,119,134,132,125,123,0,136,126,130,128,134,133],
[120,108,111,121,122,126,108,115,0,123,125,119,120,108],
[114,111,97,125,114,124,122,125,128,0,121,127,127,107],
[122,113,112,120,131,122,126,121,126,130,0,131,124,109],
[119,113,111,135,124,117,121,123,132,124,120,0,121,110],
[121,117,109,132,119,127,105,117,131,124,127,130,0,106],
[141,128,134,135,134,131,130,118,143,144,142,141,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 130, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,136,126,128,129,115,123,126,128,130,130,148,138],
[134,0,143,132,134,116,111,122,138,123,121,135,126,134],
[115,108,0,139,125,123,123,115,123,110,124,128,120,135],
[125,119,112,0,111,107,104,118,115,105,118,124,112,121],
[123,117,126,140,0,125,117,113,114,122,128,122,128,136],
[122,135,128,144,126,0,131,124,121,126,141,139,137,141],
[136,140,128,147,134,120,0,134,133,133,148,137,131,140],
[128,129,136,133,138,127,117,0,123,118,143,133,134,140],
[125,113,128,136,137,130,118,128,0,125,128,141,121,124],
[123,128,141,146,129,125,118,133,126,0,138,143,138,138],
[121,130,127,133,123,110,103,108,123,113,0,118,123,117],
[121,116,123,127,129,112,114,118,110,108,133,0,120,120],
[103,125,131,139,123,114,120,117,130,113,128,131,0,119],
[113,117,116,130,115,110,111,111,127,113,134,131,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 131, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,127,122,154,112,116,131,135,133,129,123,118,130],
[127,0,122,117,140,121,121,132,135,127,147,122,131,137],
[124,129,0,135,148,131,127,125,132,127,139,121,129,135],
[129,134,116,0,137,111,113,124,138,119,132,130,118,125],
[97,111,103,114,0,123,114,112,116,109,125,112,117,118],
[139,130,120,140,128,0,124,131,133,121,139,127,119,125],
[135,130,124,138,137,127,0,124,139,128,129,130,125,137],
[120,119,126,127,139,120,127,0,124,132,148,132,121,132],
[116,116,119,113,135,118,112,127,0,124,131,127,115,124],
[118,124,124,132,142,130,123,119,127,0,133,126,119,129],
[122,104,112,119,126,112,122,103,120,118,0,117,118,114],
[128,129,130,121,139,124,121,119,124,125,134,0,122,117],
[133,120,122,133,134,132,126,130,136,132,133,129,0,124],
[121,114,116,126,133,126,114,119,127,122,137,134,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 132, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,111,112,123,117,111,135,117,127,138,120,129,123],
[126,0,115,127,124,116,120,142,114,127,135,117,140,129],
[140,136,0,113,128,136,122,144,112,115,135,125,144,126],
[139,124,138,0,131,125,125,144,130,126,145,136,145,129],
[128,127,123,120,0,141,126,147,120,119,133,117,146,121],
[134,135,115,126,110,0,121,134,132,115,142,119,143,116],
[140,131,129,126,125,130,0,144,118,112,144,124,149,130],
[116,109,107,107,104,117,107,0,110,104,126,108,125,118],
[134,137,139,121,131,119,133,141,0,127,136,129,150,135],
[124,124,136,125,132,136,139,147,124,0,138,129,145,115],
[113,116,116,106,118,109,107,125,115,113,0,116,121,121],
[131,134,126,115,134,132,127,143,122,122,135,0,136,124],
[122,111,107,106,105,108,102,126,101,106,130,115,0,116],
[128,122,125,122,130,135,121,133,116,136,130,127,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 133, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,132,119,114,107,111,117,106,139,133,104,134,118],
[131,0,145,131,122,139,135,123,114,147,144,134,139,128],
[119,106,0,126,110,118,114,113,114,146,129,100,119,124],
[132,120,125,0,105,128,144,115,120,138,138,118,156,120],
[137,129,141,146,0,149,150,119,117,132,153,116,144,136],
[144,112,133,123,102,0,133,101,114,118,133,101,136,133],
[140,116,137,107,101,118,0,117,114,137,120,110,145,113],
[134,128,138,136,132,150,134,0,123,136,132,117,149,124],
[145,137,137,131,134,137,137,128,0,143,135,124,164,135],
[112,104,105,113,119,133,114,115,108,0,103,95,149,105],
[118,107,122,113,98,118,131,119,116,148,0,93,143,118],
[147,117,151,133,135,150,141,134,127,156,158,0,144,141],
[117,112,132,95,107,115,106,102,87,102,108,107,0,111],
[133,123,127,131,115,118,138,127,116,146,133,110,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 134, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,125,118,108,112,126,133,123,115,120,129,127,113],
[127,0,105,119,121,112,125,127,114,112,110,129,124,110],
[126,146,0,131,126,124,127,141,123,118,124,130,134,122],
[133,132,120,0,126,121,121,134,109,112,116,129,125,119],
[143,130,125,125,0,107,121,134,121,119,120,140,134,112],
[139,139,127,130,144,0,118,137,128,119,116,132,127,118],
[125,126,124,130,130,133,0,144,116,127,122,132,126,128],
[118,124,110,117,117,114,107,0,105,96,103,109,122,115],
[128,137,128,142,130,123,135,146,0,121,127,147,140,127],
[136,139,133,139,132,132,124,155,130,0,133,149,131,124],
[131,141,127,135,131,135,129,148,124,118,0,146,131,128],
[122,122,121,122,111,119,119,142,104,102,105,0,126,110],
[124,127,117,126,117,124,125,129,111,120,120,125,0,111],
[138,141,129,132,139,133,123,136,124,127,123,141,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 135, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,138,123,136,140,136,137,138,154,138,124,126,145],
[113,0,123,113,121,126,116,129,132,133,128,124,110,130],
[113,128,0,123,123,132,132,130,126,134,126,131,130,133],
[128,138,128,0,125,128,142,131,140,138,130,139,133,141],
[115,130,128,126,0,128,127,132,136,138,130,129,122,144],
[111,125,119,123,123,0,122,130,134,120,130,123,115,135],
[115,135,119,109,124,129,0,131,137,133,132,125,121,132],
[114,122,121,120,119,121,120,0,125,130,118,120,111,128],
[113,119,125,111,115,117,114,126,0,125,122,125,117,129],
[97,118,117,113,113,131,118,121,126,0,124,116,118,126],
[113,123,125,121,121,121,119,133,129,127,0,123,117,139],
[127,127,120,112,122,128,126,131,126,135,128,0,127,134],
[125,141,121,118,129,136,130,140,134,133,134,124,0,142],
[106,121,118,110,107,116,119,123,122,125,112,117,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 136, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,99,98,96,107,143,77,123,114,121,148,132,180],
[150,0,160,134,116,129,156,112,166,170,156,152,139,171],
[152,91,0,124,94,105,139,109,138,130,109,102,130,150],
[153,117,127,0,126,133,175,124,143,147,122,151,121,141],
[155,135,157,125,0,114,164,147,142,159,108,136,158,177],
[144,122,146,118,137,0,126,155,151,146,93,164,122,165],
[108,95,112,76,87,125,0,114,129,114,91,112,109,121],
[174,139,142,127,104,96,137,0,133,179,110,139,139,142],
[128,85,113,108,109,100,122,118,0,113,114,128,159,123],
[137,81,121,104,92,105,137,72,138,0,98,134,127,157],
[130,95,142,129,143,158,160,141,137,153,0,131,151,174],
[103,99,149,100,115,87,139,112,123,117,120,0,154,104],
[119,112,121,130,93,129,142,112,92,124,100,97,0,129],
[71,80,101,110,74,86,130,109,128,94,77,147,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 137, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,130,120,125,140,115,128,100,127,113,118,106,110],
[126,0,121,124,116,152,120,122,107,121,113,109,109,95],
[121,130,0,138,125,137,108,126,118,131,116,123,132,99],
[131,127,113,0,122,141,113,125,104,131,129,123,111,118],
[126,135,126,129,0,153,109,136,105,135,127,106,112,94],
[111,99,114,110,98,0,96,103,96,111,106,115,114,90],
[136,131,143,138,142,155,0,136,124,135,140,134,132,132],
[123,129,125,126,115,148,115,0,121,128,113,116,131,115],
[151,144,133,147,146,155,127,130,0,142,138,145,130,116],
[124,130,120,120,116,140,116,123,109,0,114,118,128,112],
[138,138,135,122,124,145,111,138,113,137,0,121,122,109],
[133,142,128,128,145,136,117,135,106,133,130,0,132,118],
[145,142,119,140,139,137,119,120,121,123,129,119,0,116],
[141,156,152,133,157,161,119,136,135,139,142,133,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 138, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,124,134,117,123,119,114,111,120,118,112,109,130],
[134,0,125,135,112,119,140,128,121,129,115,116,126,129],
[127,126,0,131,114,140,138,126,123,132,120,121,130,124],
[117,116,120,0,115,117,128,123,116,115,111,113,102,133],
[134,139,137,136,0,133,136,128,130,133,130,129,125,141],
[128,132,111,134,118,0,129,127,113,125,118,116,113,125],
[132,111,113,123,115,122,0,113,120,131,112,122,126,124],
[137,123,125,128,123,124,138,0,126,122,117,119,117,139],
[140,130,128,135,121,138,131,125,0,138,118,131,115,134],
[131,122,119,136,118,126,120,129,113,0,124,127,121,134],
[133,136,131,140,121,133,139,134,133,127,0,127,124,135],
[139,135,130,138,122,135,129,132,120,124,124,0,120,142],
[142,125,121,149,126,138,125,134,136,130,127,131,0,135],
[121,122,127,118,110,126,127,112,117,117,116,109,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 139, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,129,131,132,137,132,144,121,118,122,130,123,124],
[118,0,118,127,114,115,124,124,112,121,108,112,115,112],
[122,133,0,120,130,124,119,118,127,118,112,128,108,119],
[120,124,131,0,142,110,129,125,112,113,110,118,116,111],
[119,137,121,109,0,129,128,130,102,125,124,127,126,119],
[114,136,127,141,122,0,115,128,118,119,121,122,115,113],
[119,127,132,122,123,136,0,124,116,115,124,126,120,116],
[107,127,133,126,121,123,127,0,108,117,128,125,115,115],
[130,139,124,139,149,133,135,143,0,122,118,131,131,129],
[133,130,133,138,126,132,136,134,129,0,125,127,131,128],
[129,143,139,141,127,130,127,123,133,126,0,132,124,127],
[121,139,123,133,124,129,125,126,120,124,119,0,120,113],
[128,136,143,135,125,136,131,136,120,120,127,131,0,124],
[127,139,132,140,132,138,135,136,122,123,124,138,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 140, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,121,124,125,108,110,122,127,115,99,102,114,111],
[140,0,137,138,149,142,119,128,143,132,136,118,120,129],
[130,114,0,142,132,126,119,108,128,117,111,118,110,124],
[127,113,109,0,113,125,110,120,119,113,99,110,111,114],
[126,102,119,138,0,125,125,125,121,123,120,120,110,125],
[143,109,125,126,126,0,111,128,127,108,112,124,120,121],
[141,132,132,141,126,140,0,131,133,130,118,132,126,138],
[129,123,143,131,126,123,120,0,125,113,118,129,123,126],
[124,108,123,132,130,124,118,126,0,129,115,111,122,113],
[136,119,134,138,128,143,121,138,122,0,131,107,126,120],
[152,115,140,152,131,139,133,133,136,120,0,126,134,131],
[149,133,133,141,131,127,119,122,140,144,125,0,132,125],
[137,131,141,140,141,131,125,128,129,125,117,119,0,126],
[140,122,127,137,126,130,113,125,138,131,120,126,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 141, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,139,116,107,132,138,128,135,128,135,123,133,131],
[118,0,123,118,125,136,125,125,115,123,129,130,129,141],
[112,128,0,114,115,132,111,130,128,124,130,113,124,127],
[135,133,137,0,128,132,130,149,129,133,132,108,133,137],
[144,126,136,123,0,133,145,144,143,139,144,133,136,144],
[119,115,119,119,118,0,126,118,116,125,125,104,117,133],
[113,126,140,121,106,125,0,123,121,125,135,131,126,144],
[123,126,121,102,107,133,128,0,119,123,126,121,119,138],
[116,136,123,122,108,135,130,132,0,130,145,121,131,145],
[123,128,127,118,112,126,126,128,121,0,132,116,121,126],
[116,122,121,119,107,126,116,125,106,119,0,120,117,132],
[128,121,138,143,118,147,120,130,130,135,131,0,136,147],
[118,122,127,118,115,134,125,132,120,130,134,115,0,141],
[120,110,124,114,107,118,107,113,106,125,119,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 142, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,97,86,125,89,95,122,109,129,99,116,128,95],
[128,0,100,105,109,126,101,95,121,98,106,138,133,105],
[154,151,0,134,145,115,118,142,130,146,128,148,165,127],
[165,146,117,0,123,130,142,116,133,138,110,132,143,111],
[126,142,106,128,0,108,114,109,112,138,98,127,131,97],
[162,125,136,121,143,0,145,130,116,144,116,147,162,119],
[156,150,133,109,137,106,0,122,124,146,103,149,153,115],
[129,156,109,135,142,121,129,0,123,150,110,156,157,127],
[142,130,121,118,139,135,127,128,0,147,116,146,163,118],
[122,153,105,113,113,107,105,101,104,0,104,124,137,122],
[152,145,123,141,153,135,148,141,135,147,0,146,151,118],
[135,113,103,119,124,104,102,95,105,127,105,0,142,91],
[123,118,86,108,120,89,98,94,88,114,100,109,0,94],
[156,146,124,140,154,132,136,124,133,129,133,160,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 143, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,122,131,132,142,139,121,141,143,134,145,138,145],
[104,0,104,108,110,107,117,104,94,119,121,100,108,102],
[129,147,0,127,136,125,131,107,139,133,123,132,136,136],
[120,143,124,0,120,152,131,110,131,139,142,128,121,132],
[119,141,115,131,0,128,120,127,137,138,128,122,114,124],
[109,144,126,99,123,0,112,114,112,119,135,135,117,114],
[112,134,120,120,131,139,0,110,137,137,135,124,129,111],
[130,147,144,141,124,137,141,0,141,134,142,142,136,138],
[110,157,112,120,114,139,114,110,0,137,134,121,130,125],
[108,132,118,112,113,132,114,117,114,0,125,125,116,118],
[117,130,128,109,123,116,116,109,117,126,0,124,121,136],
[106,151,119,123,129,116,127,109,130,126,127,0,125,140],
[113,143,115,130,137,134,122,115,121,135,130,126,0,126],
[106,149,115,119,127,137,140,113,126,133,115,111,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 144, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,109,128,131,126,124,120,138,129,133,136,114,128],
[119,0,116,126,116,112,118,119,134,124,119,130,116,132],
[142,135,0,136,128,134,123,127,141,116,130,131,127,137],
[123,125,115,0,127,117,111,123,122,104,121,120,122,111],
[120,135,123,124,0,113,118,107,128,124,135,121,122,129],
[125,139,117,134,138,0,130,126,140,131,126,133,130,133],
[127,133,128,140,133,121,0,138,131,127,131,130,121,126],
[131,132,124,128,144,125,113,0,143,135,124,119,119,125],
[113,117,110,129,123,111,120,108,0,114,126,113,104,121],
[122,127,135,147,127,120,124,116,137,0,138,131,118,135],
[118,132,121,130,116,125,120,127,125,113,0,124,113,117],
[115,121,120,131,130,118,121,132,138,120,127,0,127,116],
[137,135,124,129,129,121,130,132,147,133,138,124,0,120],
[123,119,114,140,122,118,125,126,130,116,134,135,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 145, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,118,152,102,103,95,161,126,107,110,116,126,144],
[159,0,110,151,128,118,110,152,153,103,106,121,131,145],
[133,141,0,144,143,98,129,124,160,109,134,115,154,151],
[99,100,107,0,75,88,120,116,103,93,94,105,134,105],
[149,123,108,176,0,131,127,173,123,108,136,123,125,148],
[148,133,153,163,120,0,164,156,157,135,131,115,129,146],
[156,141,122,131,124,87,0,164,146,137,138,136,132,141],
[90,99,127,135,78,95,87,0,139,101,116,72,129,90],
[125,98,91,148,128,94,105,112,0,102,137,107,129,152],
[144,148,142,158,143,116,114,150,149,0,134,106,111,146],
[141,145,117,157,115,120,113,135,114,117,0,85,130,110],
[135,130,136,146,128,136,115,179,144,145,166,0,119,167],
[125,120,97,117,126,122,119,122,122,140,121,132,0,142],
[107,106,100,146,103,105,110,161,99,105,141,84,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 146, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,126,138,119,117,132,141,127,120,142,146,158,134],
[107,0,116,110,113,90,111,121,96,93,124,125,123,108],
[125,135,0,124,131,113,134,126,121,118,159,140,149,121],
[113,141,127,0,122,103,105,122,107,124,135,123,151,106],
[132,138,120,129,0,98,135,125,127,122,134,143,144,113],
[134,161,138,148,153,0,135,123,142,144,162,149,156,124],
[119,140,117,146,116,116,0,148,128,133,154,135,160,115],
[110,130,125,129,126,128,103,0,130,122,145,120,150,117],
[124,155,130,144,124,109,123,121,0,123,150,130,138,121],
[131,158,133,127,129,107,118,129,128,0,133,150,138,117],
[109,127,92,116,117,89,97,106,101,118,0,116,142,108],
[105,126,111,128,108,102,116,131,121,101,135,0,136,124],
[93,128,102,100,107,95,91,101,113,113,109,115,0,100],
[117,143,130,145,138,127,136,134,130,134,143,127,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 147, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,126,195,73,76,146,118,44,195,218,212,95,190],
[111,0,106,171,106,106,109,106,101,164,181,211,85,188],
[125,145,0,196,161,79,91,88,76,129,199,195,60,127],
[56,80,55,0,23,69,54,60,39,88,159,164,87,87],
[178,145,90,228,0,97,139,90,107,145,147,190,96,151],
[175,145,172,182,154,0,91,143,91,199,148,153,81,148],
[105,142,160,197,112,160,0,172,125,170,142,193,187,167],
[133,145,163,191,161,108,79,0,76,194,184,172,117,170],
[207,150,175,212,144,160,126,175,0,236,181,178,79,199],
[56,87,122,163,106,52,81,57,15,0,146,154,52,84],
[33,70,52,92,104,103,109,67,70,105,0,111,87,98],
[39,40,56,87,61,98,58,79,73,97,140,0,85,61],
[156,166,191,164,155,170,64,134,172,199,164,166,0,172],
[61,63,124,164,100,103,84,81,52,167,153,190,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 148, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,121,98,101,131,121,111,127,118,125,114,100,131],
[139,0,135,130,120,138,125,133,133,122,131,119,120,126],
[130,116,0,122,127,143,132,123,138,131,137,134,124,138],
[153,121,129,0,126,160,141,136,160,150,144,123,149,155],
[150,131,124,125,0,137,114,133,114,129,127,121,123,131],
[120,113,108,91,114,0,112,109,128,132,121,102,90,121],
[130,126,119,110,137,139,0,136,126,120,133,116,116,142],
[140,118,128,115,118,142,115,0,124,110,119,120,126,131],
[124,118,113,91,137,123,125,127,0,118,122,102,115,118],
[133,129,120,101,122,119,131,141,133,0,122,115,113,142],
[126,120,114,107,124,130,118,132,129,129,0,115,111,138],
[137,132,117,128,130,149,135,131,149,136,136,0,127,150],
[151,131,127,102,128,161,135,125,136,138,140,124,0,134],
[120,125,113,96,120,130,109,120,133,109,113,101,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 149, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,126,129,137,149,145,135,132,106,138,126,113,138],
[120,0,97,120,101,125,116,103,117,119,123,117,120,109],
[125,154,0,152,129,169,134,109,137,124,132,144,149,163],
[122,131,99,0,122,146,120,90,144,136,139,139,138,131],
[114,150,122,129,0,121,137,106,128,127,137,127,147,130],
[102,126,82,105,130,0,118,111,131,113,132,142,145,123],
[106,135,117,131,114,133,0,110,110,136,133,116,126,141],
[116,148,142,161,145,140,141,0,136,117,140,144,164,126],
[119,134,114,107,123,120,141,115,0,121,112,117,129,147],
[145,132,127,115,124,138,115,134,130,0,141,117,149,140],
[113,128,119,112,114,119,118,111,139,110,0,130,136,122],
[125,134,107,112,124,109,135,107,134,134,121,0,146,132],
[138,131,102,113,104,106,125,87,122,102,115,105,0,115],
[113,142,88,120,121,128,110,125,104,111,129,119,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 150, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,123,109,130,123,124,128,124,139,122,111,114,126],
[115,0,125,123,130,116,128,126,119,135,125,110,126,131],
[128,126,0,127,133,122,136,118,142,128,134,124,116,119],
[142,128,124,0,129,128,122,123,119,135,126,127,118,127],
[121,121,118,122,0,114,122,118,117,124,137,114,120,121],
[128,135,129,123,137,0,133,124,131,122,126,126,127,133],
[127,123,115,129,129,118,0,115,128,122,127,126,121,123],
[123,125,133,128,133,127,136,0,129,123,128,114,117,125],
[127,132,109,132,134,120,123,122,0,127,132,128,122,135],
[112,116,123,116,127,129,129,128,124,0,118,116,124,121],
[129,126,117,125,114,125,124,123,119,133,0,113,117,119],
[140,141,127,124,137,125,125,137,123,135,138,0,126,138],
[137,125,135,133,131,124,130,134,129,127,134,125,0,139],
[125,120,132,124,130,118,128,126,116,130,132,113,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 151, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,104,127,125,110,91,128,98,123,157,99,81,95],
[120,0,117,155,146,125,165,173,111,185,182,106,130,138],
[147,134,0,140,133,96,121,160,132,153,138,125,136,138],
[124,96,111,0,114,135,142,143,98,158,129,101,128,124],
[126,105,118,137,0,101,126,140,122,145,140,127,122,99],
[141,126,155,116,150,0,122,175,123,160,174,133,152,110],
[160,86,130,109,125,129,0,151,105,155,136,101,143,157],
[123,78,91,108,111,76,100,0,85,132,98,54,90,89],
[153,140,119,153,129,128,146,166,0,155,139,100,140,167],
[128,66,98,93,106,91,96,119,96,0,85,51,98,120],
[94,69,113,122,111,77,115,153,112,166,0,79,102,99],
[152,145,126,150,124,118,150,197,151,200,172,0,136,174],
[170,121,115,123,129,99,108,161,111,153,149,115,0,105],
[156,113,113,127,152,141,94,162,84,131,152,77,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 152, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,139,133,144,136,136,124,141,137,135,137,134,131],
[132,0,137,125,127,131,142,122,135,137,135,125,139,125],
[112,114,0,112,134,120,128,119,130,128,121,126,132,113],
[118,126,139,0,131,130,138,131,139,136,132,130,131,123],
[107,124,117,120,0,119,114,120,125,117,126,127,126,111],
[115,120,131,121,132,0,128,113,126,125,128,118,123,110],
[115,109,123,113,137,123,0,123,133,121,120,110,118,129],
[127,129,132,120,131,138,128,0,129,127,118,135,124,125],
[110,116,121,112,126,125,118,122,0,133,127,123,120,114],
[114,114,123,115,134,126,130,124,118,0,127,124,125,115],
[116,116,130,119,125,123,131,133,124,124,0,125,130,115],
[114,126,125,121,124,133,141,116,128,127,126,0,110,101],
[117,112,119,120,125,128,133,127,131,126,121,141,0,117],
[120,126,138,128,140,141,122,126,137,136,136,150,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 153, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,138,112,124,117,111,119,108,120,125,111,129,120],
[131,0,133,121,125,124,121,123,121,132,123,117,134,119],
[113,118,0,111,109,106,128,133,123,126,128,109,123,114],
[139,130,140,0,126,122,125,132,128,124,144,125,126,122],
[127,126,142,125,0,119,125,133,115,128,131,122,127,112],
[134,127,145,129,132,0,123,131,129,138,130,118,131,115],
[140,130,123,126,126,128,0,135,122,123,132,128,131,125],
[132,128,118,119,118,120,116,0,112,130,124,125,127,124],
[143,130,128,123,136,122,129,139,0,122,127,130,126,128],
[131,119,125,127,123,113,128,121,129,0,135,118,118,122],
[126,128,123,107,120,121,119,127,124,116,0,118,117,110],
[140,134,142,126,129,133,123,126,121,133,133,0,131,125],
[122,117,128,125,124,120,120,124,125,133,134,120,0,114],
[131,132,137,129,139,136,126,127,123,129,141,126,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 154, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,68,73,90,76,119,88,108,76,104,117,102,96],
[186,0,119,103,126,118,114,132,134,112,119,117,121,118],
[183,132,0,121,130,143,128,135,125,126,151,125,129,129],
[178,148,130,0,163,119,147,158,138,147,148,149,124,127],
[161,125,121,88,0,122,128,120,141,119,141,103,94,118],
[175,133,108,132,129,0,125,144,135,104,129,116,134,125],
[132,137,123,104,123,126,0,148,98,125,151,121,116,120],
[163,119,116,93,131,107,103,0,102,104,116,106,96,147],
[143,117,126,113,110,116,153,149,0,135,137,145,111,140],
[175,139,125,104,132,147,126,147,116,0,167,123,130,112],
[147,132,100,103,110,122,100,135,114,84,0,109,112,138],
[134,134,126,102,148,135,130,145,106,128,142,0,126,131],
[149,130,122,127,157,117,135,155,140,121,139,125,0,131],
[155,133,122,124,133,126,131,104,111,139,113,120,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 155, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,122,148,123,140,125,126,134,127,126,143,127,132],
[115,0,104,124,111,126,128,117,119,120,105,132,113,117],
[129,147,0,133,127,146,138,136,122,128,121,139,129,150],
[103,127,118,0,123,129,130,125,117,116,113,142,118,120],
[128,140,124,128,0,132,133,145,131,135,119,140,119,131],
[111,125,105,122,119,0,110,129,116,114,95,126,110,123],
[126,123,113,121,118,141,0,142,127,135,119,128,117,130],
[125,134,115,126,106,122,109,0,119,128,101,131,114,126],
[117,132,129,134,120,135,124,132,0,119,114,130,118,127],
[124,131,123,135,116,137,116,123,132,0,106,144,130,139],
[125,146,130,138,132,156,132,150,137,145,0,145,124,147],
[108,119,112,109,111,125,123,120,121,107,106,0,112,113],
[124,138,122,133,132,141,134,137,133,121,127,139,0,128],
[119,134,101,131,120,128,121,125,124,112,104,138,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 156, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,130,129,143,131,136,132,123,133,116,138,125,122],
[130,0,111,112,135,129,122,132,121,135,121,129,129,124],
[121,140,0,135,132,126,122,129,128,133,124,148,135,132],
[122,139,116,0,133,126,127,132,122,127,122,141,122,123],
[108,116,119,118,0,119,108,111,108,125,118,123,116,114],
[120,122,125,125,132,0,133,131,121,124,122,133,125,121],
[115,129,129,124,143,118,0,125,126,127,127,140,133,119],
[119,119,122,119,140,120,126,0,118,134,122,132,118,114],
[128,130,123,129,143,130,125,133,0,126,132,140,130,127],
[118,116,118,124,126,127,124,117,125,0,115,133,121,119],
[135,130,127,129,133,129,124,129,119,136,0,129,128,120],
[113,122,103,110,128,118,111,119,111,118,122,0,124,113],
[126,122,116,129,135,126,118,133,121,130,123,127,0,124],
[129,127,119,128,137,130,132,137,124,132,131,138,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 157, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,116,115,122,119,102,131,120,137,112,126,130],
[147,0,141,131,137,152,143,137,141,148,135,116,147,149],
[142,110,0,130,128,136,122,104,137,99,140,122,118,143],
[135,120,121,0,140,115,114,119,138,123,114,135,122,140],
[136,114,123,111,0,122,119,112,122,121,129,116,126,136],
[129,99,115,136,129,0,129,121,137,123,134,125,132,139],
[132,108,129,137,132,122,0,109,136,121,138,125,128,151],
[149,114,147,132,139,130,142,0,140,119,141,132,136,146],
[120,110,114,113,129,114,115,111,0,112,126,109,121,122],
[131,103,152,128,130,128,130,132,139,0,153,118,122,133],
[114,116,111,137,122,117,113,110,125,98,0,122,119,144],
[139,135,129,116,135,126,126,119,142,133,129,0,128,137],
[125,104,133,129,125,119,123,115,130,129,132,123,0,133],
[121,102,108,111,115,112,100,105,129,118,107,114,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 158, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,143,125,152,118,115,142,151,157,145,123,152,156],
[115,0,138,113,120,137,123,136,132,159,153,172,155,147],
[108,113,0,120,135,114,106,105,132,137,117,115,120,136],
[126,138,131,0,134,117,140,134,152,145,145,151,136,166],
[99,131,116,117,0,115,96,111,123,134,109,132,115,110],
[133,114,137,134,136,0,106,147,135,146,131,144,164,128],
[136,128,145,111,155,145,0,135,150,152,148,155,153,147],
[109,115,146,117,140,104,116,0,132,134,134,123,141,125],
[100,119,119,99,128,116,101,119,0,144,111,109,129,133],
[94,92,114,106,117,105,99,117,107,0,88,99,92,121],
[106,98,134,106,142,120,103,117,140,163,0,125,134,143],
[128,79,136,100,119,107,96,128,142,152,126,0,129,103],
[99,96,131,115,136,87,98,110,122,159,117,122,0,128],
[95,104,115,85,141,123,104,126,118,130,108,148,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 159, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,121,139,118,117,124,121,118,103,145,108,93,151],
[136,0,123,143,136,122,146,122,103,132,152,113,131,122],
[130,128,0,141,135,135,159,116,133,161,178,131,133,122],
[112,108,110,0,106,103,129,128,110,129,150,110,124,117],
[133,115,116,145,0,135,135,124,112,147,158,111,147,128],
[134,129,116,148,116,0,140,128,124,153,175,121,117,138],
[127,105,92,122,116,111,0,120,89,109,139,97,108,116],
[130,129,135,123,127,123,131,0,129,145,159,115,131,127],
[133,148,118,141,139,127,162,122,0,151,135,142,148,153],
[148,119,90,122,104,98,142,106,100,0,153,113,107,119],
[106,99,73,101,93,76,112,92,116,98,0,92,95,104],
[143,138,120,141,140,130,154,136,109,138,159,0,140,132],
[158,120,118,127,104,134,143,120,103,144,156,111,0,126],
[100,129,129,134,123,113,135,124,98,132,147,119,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 160, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,131,116,136,124,126,120,121,143,109,118,117,132],
[146,0,146,136,134,132,139,120,144,147,125,131,146,138],
[120,105,0,135,122,139,111,117,118,129,108,109,116,123],
[135,115,116,0,115,114,130,109,126,109,102,110,125,106],
[115,117,129,136,0,121,134,108,132,129,124,121,128,129],
[127,119,112,137,130,0,143,124,127,124,119,116,126,124],
[125,112,140,121,117,108,0,111,122,133,110,110,121,121],
[131,131,134,142,143,127,140,0,125,139,113,117,126,130],
[130,107,133,125,119,124,129,126,0,132,130,108,121,122],
[108,104,122,142,122,127,118,112,119,0,106,99,112,117],
[142,126,143,149,127,132,141,138,121,145,0,134,140,128],
[133,120,142,141,130,135,141,134,143,152,117,0,129,124],
[134,105,135,126,123,125,130,125,130,139,111,122,0,129],
[119,113,128,145,122,127,130,121,129,134,123,127,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 161, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,109,143,138,121,142,122,162,139,119,139,111,118],
[121,0,94,138,111,132,157,124,134,121,127,150,114,144],
[142,157,0,107,139,128,154,112,121,129,128,169,117,137],
[108,113,144,0,106,145,120,132,130,123,96,120,125,124],
[113,140,112,145,0,136,147,132,125,135,133,130,101,131],
[130,119,123,106,115,0,150,122,147,109,142,138,114,168],
[109,94,97,131,104,101,0,130,107,112,102,118,120,129],
[129,127,139,119,119,129,121,0,137,144,122,153,133,145],
[89,117,130,121,126,104,144,114,0,93,99,129,109,145],
[112,130,122,128,116,142,139,107,158,0,113,139,129,139],
[132,124,123,155,118,109,149,129,152,138,0,167,122,161],
[112,101,82,131,121,113,133,98,122,112,84,0,93,146],
[140,137,134,126,150,137,131,118,142,122,129,158,0,140],
[133,107,114,127,120,83,122,106,106,112,90,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 162, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,123,139,142,144,133,139,139,139,133,143,130,123],
[114,0,108,121,129,117,121,133,127,127,121,126,115,116],
[128,143,0,126,150,134,132,139,132,147,131,143,121,124],
[112,130,125,0,126,117,125,121,129,126,116,133,125,113],
[109,122,101,125,0,120,119,114,119,124,112,113,111,106],
[107,134,117,134,131,0,126,127,135,131,117,138,128,119],
[118,130,119,126,132,125,0,131,132,140,118,123,119,116],
[112,118,112,130,137,124,120,0,128,136,114,131,116,120],
[112,124,119,122,132,116,119,123,0,132,114,133,108,112],
[112,124,104,125,127,120,111,115,119,0,105,121,109,105],
[118,130,120,135,139,134,133,137,137,146,0,139,126,128],
[108,125,108,118,138,113,128,120,118,130,112,0,112,112],
[121,136,130,126,140,123,132,135,143,142,125,139,0,121],
[128,135,127,138,145,132,135,131,139,146,123,139,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 163, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,121,114,111,114,100,106,121,118,90,108,131,102],
[154,0,131,149,139,123,140,129,136,131,139,132,166,123],
[130,120,0,130,133,135,114,122,127,129,114,124,160,120],
[137,102,121,0,106,123,105,119,125,116,121,118,130,99],
[140,112,118,145,0,133,105,141,120,140,112,131,150,116],
[137,128,116,128,118,0,122,109,135,126,112,121,149,121],
[151,111,137,146,146,129,0,142,148,136,125,135,153,126],
[145,122,129,132,110,142,109,0,146,120,118,138,154,117],
[130,115,124,126,131,116,103,105,0,128,119,123,159,111],
[133,120,122,135,111,125,115,131,123,0,117,121,152,103],
[161,112,137,130,139,139,126,133,132,134,0,133,149,129],
[143,119,127,133,120,130,116,113,128,130,118,0,152,107],
[120,85,91,121,101,102,98,97,92,99,102,99,0,78],
[149,128,131,152,135,130,125,134,140,148,122,144,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 164, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,128,124,127,146,119,116,129,120,123,136,135,121],
[142,0,144,121,133,126,129,114,112,128,123,133,133,129],
[123,107,0,123,120,119,110,112,110,107,95,120,135,116],
[127,130,128,0,138,142,139,131,130,117,127,128,143,129],
[124,118,131,113,0,128,118,106,132,117,127,138,127,129],
[105,125,132,109,123,0,127,118,119,133,117,126,117,120],
[132,122,141,112,133,124,0,119,126,116,120,130,124,117],
[135,137,139,120,145,133,132,0,129,115,122,136,142,140],
[122,139,141,121,119,132,125,122,0,112,123,139,134,122],
[131,123,144,134,134,118,135,136,139,0,117,150,125,124],
[128,128,156,124,124,134,131,129,128,134,0,137,113,120],
[115,118,131,123,113,125,121,115,112,101,114,0,115,113],
[116,118,116,108,124,134,127,109,117,126,138,136,0,118],
[130,122,135,122,122,131,134,111,129,127,131,138,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 165, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,129,113,83,117,115,130,126,106,126,113,82,125],
[106,0,106,105,114,132,97,95,156,80,128,112,65,131],
[122,145,0,105,108,51,127,129,132,92,106,82,49,107],
[138,146,146,0,122,122,163,144,110,124,110,96,129,140],
[168,137,143,129,0,58,132,120,141,132,102,101,94,117],
[134,119,200,129,193,0,134,143,135,143,119,166,120,162],
[136,154,124,88,119,117,0,87,130,95,140,111,121,114],
[121,156,122,107,131,108,164,0,123,150,111,117,107,106],
[125,95,119,141,110,116,121,128,0,135,128,125,96,85],
[145,171,159,127,119,108,156,101,116,0,98,128,119,138],
[125,123,145,141,149,132,111,140,123,153,0,162,115,133],
[138,139,169,155,150,85,140,134,126,123,89,0,136,127],
[169,186,202,122,157,131,130,144,155,132,136,115,0,200],
[126,120,144,111,134,89,137,145,166,113,118,124,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 166, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,117,130,127,129,127,120,121,124,123,124,133,120],
[122,0,116,130,126,123,119,124,122,118,130,125,114,133],
[134,135,0,131,132,132,125,137,117,116,126,125,123,115],
[121,121,120,0,128,122,118,133,120,127,117,117,122,127],
[124,125,119,123,0,142,127,128,134,132,131,127,122,126],
[122,128,119,129,109,0,115,124,118,122,118,133,130,122],
[124,132,126,133,124,136,0,130,125,133,123,137,129,132],
[131,127,114,118,123,127,121,0,115,118,114,127,113,125],
[130,129,134,131,117,133,126,136,0,128,124,135,130,123],
[127,133,135,124,119,129,118,133,123,0,128,130,122,124],
[128,121,125,134,120,133,128,137,127,123,0,133,124,126],
[127,126,126,134,124,118,114,124,116,121,118,0,125,123],
[118,137,128,129,129,121,122,138,121,129,127,126,0,119],
[131,118,136,124,125,129,119,126,128,127,125,128,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 167, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,137,126,118,93,105,145,146,108,132,124,138,135],
[120,0,124,113,118,97,109,135,128,132,138,128,132,140],
[114,127,0,112,124,109,108,133,138,120,127,121,120,142],
[125,138,139,0,138,127,129,145,142,124,163,154,137,158],
[133,133,127,113,0,98,121,137,129,109,132,126,140,141],
[158,154,142,124,153,0,136,149,157,126,146,157,136,147],
[146,142,143,122,130,115,0,149,141,130,153,142,144,150],
[106,116,118,106,114,102,102,0,118,122,127,125,132,130],
[105,123,113,109,122,94,110,133,0,105,129,131,123,113],
[143,119,131,127,142,125,121,129,146,0,152,151,143,141],
[119,113,124,88,119,105,98,124,122,99,0,115,108,136],
[127,123,130,97,125,94,109,126,120,100,136,0,120,125],
[113,119,131,114,111,115,107,119,128,108,143,131,0,134],
[116,111,109,93,110,104,101,121,138,110,115,126,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 168, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,126,133,130,133,136,130,127,130,122,133,133,135],
[115,0,138,140,133,128,136,131,129,134,124,130,119,124],
[125,113,0,130,124,121,138,135,132,127,125,123,128,121],
[118,111,121,0,134,120,129,120,126,117,114,120,120,117],
[121,118,127,117,0,108,123,113,116,125,116,123,119,110],
[118,123,130,131,143,0,128,131,138,133,128,116,131,134],
[115,115,113,122,128,123,0,127,125,119,123,113,117,107],
[121,120,116,131,138,120,124,0,129,113,127,125,123,111],
[124,122,119,125,135,113,126,122,0,128,119,129,127,113],
[121,117,124,134,126,118,132,138,123,0,125,116,125,129],
[129,127,126,137,135,123,128,124,132,126,0,132,131,124],
[118,121,128,131,128,135,138,126,122,135,119,0,143,126],
[118,132,123,131,132,120,134,128,124,126,120,108,0,116],
[116,127,130,134,141,117,144,140,138,122,127,125,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 169, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,114,136,107,100,102,114,144,121,127,115,124,130],
[137,0,118,148,137,133,130,129,154,153,154,126,137,121],
[137,133,0,141,145,139,126,108,149,128,150,135,135,124],
[115,103,110,0,119,102,125,116,118,136,141,106,133,115],
[144,114,106,132,0,125,123,131,140,143,156,124,131,123],
[151,118,112,149,126,0,140,126,150,150,138,114,143,126],
[149,121,125,126,128,111,0,118,134,150,149,121,134,135],
[137,122,143,135,120,125,133,0,144,150,148,106,139,132],
[107,97,102,133,111,101,117,107,0,127,117,102,122,102],
[130,98,123,115,108,101,101,101,124,0,129,104,113,102],
[124,97,101,110,95,113,102,103,134,122,0,110,115,105],
[136,125,116,145,127,137,130,145,149,147,141,0,146,131],
[127,114,116,118,120,108,117,112,129,138,136,105,0,108],
[121,130,127,136,128,125,116,119,149,149,146,120,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 170, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,141,126,120,108,122,137,126,139,114,146,132,131],
[135,0,138,139,121,131,127,135,134,135,125,148,134,134],
[110,113,0,118,107,120,106,131,120,122,113,128,129,117],
[125,112,133,0,130,114,122,135,125,133,116,134,127,116],
[131,130,144,121,0,126,134,124,137,127,136,137,135,131],
[143,120,131,137,125,0,134,147,147,147,131,153,134,147],
[129,124,145,129,117,117,0,134,135,140,123,149,136,133],
[114,116,120,116,127,104,117,0,119,127,117,135,129,134],
[125,117,131,126,114,104,116,132,0,131,124,129,120,119],
[112,116,129,118,124,104,111,124,120,0,102,125,124,114],
[137,126,138,135,115,120,128,134,127,149,0,154,130,122],
[105,103,123,117,114,98,102,116,122,126,97,0,121,102],
[119,117,122,124,116,117,115,122,131,127,121,130,0,118],
[120,117,134,135,120,104,118,117,132,137,129,149,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 171, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,79,55,148,79,87,85,111,79,75,136,103,139],
[91,0,31,59,121,55,60,85,84,88,0,121,167,143],
[172,220,0,167,169,196,141,133,132,88,108,169,167,224],
[196,192,84,0,148,112,117,85,144,145,141,220,191,224],
[103,130,82,103,0,79,163,100,84,52,72,131,131,131],
[172,196,55,139,172,0,139,133,84,112,139,200,167,224],
[164,191,110,134,88,112,0,133,79,52,76,191,134,191],
[166,166,118,166,151,118,118,0,87,87,166,194,194,218],
[140,167,119,107,167,167,172,164,0,28,112,167,107,164],
[172,163,163,106,199,139,199,164,223,0,112,227,194,251],
[176,251,143,110,179,112,175,85,139,139,0,203,218,203],
[115,130,82,31,120,51,60,57,84,24,48,0,139,143],
[148,84,84,60,120,84,117,57,144,57,33,112,0,176],
[112,108,27,27,120,27,60,33,87,0,48,108,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 172, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,117,130,138,122,128,127,136,136,120,116,148,117],
[129,0,124,134,143,128,148,125,141,140,135,136,161,130],
[134,127,0,122,143,123,131,122,130,143,134,132,149,128],
[121,117,129,0,147,121,143,120,147,138,120,125,142,133],
[113,108,108,104,0,123,106,115,125,120,98,113,127,120],
[129,123,128,130,128,0,132,129,133,151,121,123,146,141],
[123,103,120,108,145,119,0,115,145,118,122,117,141,123],
[124,126,129,131,136,122,136,0,141,130,126,132,143,123],
[115,110,121,104,126,118,106,110,0,110,100,117,130,123],
[115,111,108,113,131,100,133,121,141,0,95,102,131,109],
[131,116,117,131,153,130,129,125,151,156,0,136,149,134],
[135,115,119,126,138,128,134,119,134,149,115,0,137,127],
[103,90,102,109,124,105,110,108,121,120,102,114,0,113],
[134,121,123,118,131,110,128,128,128,142,117,124,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 173, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,145,114,91,140,141,148,119,126,131,151,103,131],
[97,0,131,121,125,109,155,88,133,108,131,126,147,136],
[106,120,0,121,130,117,111,100,128,121,137,108,134,100],
[137,130,130,0,97,123,112,120,108,98,110,103,95,92],
[160,126,121,154,0,136,138,140,138,108,136,124,130,118],
[111,142,134,128,115,0,127,102,132,123,134,123,115,127],
[110,96,140,139,113,124,0,125,137,125,128,117,122,99],
[103,163,151,131,111,149,126,0,148,136,151,145,114,130],
[132,118,123,143,113,119,114,103,0,142,117,99,107,100],
[125,143,130,153,143,128,126,115,109,0,122,128,111,151],
[120,120,114,141,115,117,123,100,134,129,0,112,131,118],
[100,125,143,148,127,128,134,106,152,123,139,0,129,124],
[148,104,117,156,121,136,129,137,144,140,120,122,0,104],
[120,115,151,159,133,124,152,121,151,100,133,127,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 174, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,160,169,174,156,166,165,118,172,158,152,180,118],
[66,0,135,104,123,96,153,114,117,125,72,132,121,85],
[91,116,0,154,125,113,144,75,129,173,150,135,137,133],
[82,147,97,0,142,104,135,127,106,146,142,136,171,90],
[77,128,126,109,0,144,145,119,140,129,84,119,130,127],
[95,155,138,147,107,0,140,106,143,123,155,133,159,74],
[85,98,107,116,106,111,0,101,101,110,105,132,127,110],
[86,137,176,124,132,145,150,0,111,168,130,125,149,121],
[133,134,122,145,111,108,150,140,0,140,123,147,132,117],
[79,126,78,105,122,128,141,83,111,0,107,110,121,125],
[93,179,101,109,167,96,146,121,128,144,0,179,151,128],
[99,119,116,115,132,118,119,126,104,141,72,0,119,97],
[71,130,114,80,121,92,124,102,119,130,100,132,0,105],
[133,166,118,161,124,177,141,130,134,126,123,154,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 175, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,111,120,122,104,117,118,135,120,112,105,120,126],
[160,0,130,143,137,123,142,144,140,149,134,133,155,137],
[140,121,0,131,138,132,130,136,136,134,141,137,137,132],
[131,108,120,0,121,109,125,133,118,126,143,112,136,118],
[129,114,113,130,0,108,120,132,129,113,125,97,122,117],
[147,128,119,142,143,0,144,138,133,139,138,112,153,138],
[134,109,121,126,131,107,0,135,123,135,131,110,128,120],
[133,107,115,118,119,113,116,0,118,125,124,101,134,104],
[116,111,115,133,122,118,128,133,0,125,119,107,128,119],
[131,102,117,125,138,112,116,126,126,0,122,104,125,119],
[139,117,110,108,126,113,120,127,132,129,0,121,134,108],
[146,118,114,139,154,139,141,150,144,147,130,0,134,131],
[131,96,114,115,129,98,123,117,123,126,117,117,0,118],
[125,114,119,133,134,113,131,147,132,132,143,120,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 176, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,141,136,129,125,122,143,127,135,128,130,125,128],
[104,0,123,109,115,118,112,111,106,119,121,116,110,112],
[110,128,0,112,119,104,104,114,103,118,114,119,106,104],
[115,142,139,0,135,126,129,139,126,130,134,119,121,118],
[122,136,132,116,0,120,117,131,122,129,127,119,124,114],
[126,133,147,125,131,0,112,130,121,134,132,130,139,116],
[129,139,147,122,134,139,0,135,130,138,137,130,128,133],
[108,140,137,112,120,121,116,0,114,126,136,123,115,116],
[124,145,148,125,129,130,121,137,0,135,144,138,139,126],
[116,132,133,121,122,117,113,125,116,0,134,112,116,116],
[123,130,137,117,124,119,114,115,107,117,0,120,122,116],
[121,135,132,132,132,121,121,128,113,139,131,0,131,121],
[126,141,145,130,127,112,123,136,112,135,129,120,0,117],
[123,139,147,133,137,135,118,135,125,135,135,130,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 177, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,108,113,112,115,106,127,123,144,131,112,116],
[143,0,141,137,123,131,149,129,120,141,144,138,109,122],
[147,110,0,108,91,118,144,103,118,94,120,111,113,92],
[143,114,143,0,126,137,124,117,158,134,142,127,129,119],
[138,128,160,125,0,141,144,109,140,137,139,133,134,127],
[139,120,133,114,110,0,140,113,126,131,131,144,109,104],
[136,102,107,127,107,111,0,100,119,95,124,122,110,120],
[145,122,148,134,142,138,151,0,140,145,147,141,130,117],
[124,131,133,93,111,125,132,111,0,128,139,136,125,117],
[128,110,157,117,114,120,156,106,123,0,139,120,108,121],
[107,107,131,109,112,120,127,104,112,112,0,109,111,89],
[120,113,140,124,118,107,129,110,115,131,142,0,104,90],
[139,142,138,122,117,142,141,121,126,143,140,147,0,117],
[135,129,159,132,124,147,131,134,134,130,162,161,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 178, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,124,121,116,131,116,111,126,125,129,130,129,120],
[126,0,128,122,118,129,114,118,124,125,128,125,117,117],
[127,123,0,116,126,126,111,106,128,131,121,134,112,108],
[130,129,135,0,133,138,132,124,134,126,127,144,122,115],
[135,133,125,118,0,144,127,119,142,133,135,136,120,119],
[120,122,125,113,107,0,120,109,128,125,123,125,112,117],
[135,137,140,119,124,131,0,128,130,129,130,137,128,132],
[140,133,145,127,132,142,123,0,137,129,135,142,120,125],
[125,127,123,117,109,123,121,114,0,125,117,137,117,109],
[126,126,120,125,118,126,122,122,126,0,127,132,114,113],
[122,123,130,124,116,128,121,116,134,124,0,127,120,116],
[121,126,117,107,115,126,114,109,114,119,124,0,115,109],
[122,134,139,129,131,139,123,131,134,137,131,136,0,131],
[131,134,143,136,132,134,119,126,142,138,135,142,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 179, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,137,133,122,123,127,123,147,131,140,129,131,118],
[131,0,134,139,114,127,124,131,145,151,145,141,134,115],
[114,117,0,128,109,125,121,119,121,129,129,124,123,112],
[118,112,123,0,127,122,116,110,119,121,138,128,108,107],
[129,137,142,124,0,134,138,122,128,133,146,126,127,115],
[128,124,126,129,117,0,135,140,138,134,125,134,112,122],
[124,127,130,135,113,116,0,131,115,129,138,116,117,123],
[128,120,132,141,129,111,120,0,137,138,129,135,120,131],
[104,106,130,132,123,113,136,114,0,123,124,122,121,101],
[120,100,122,130,118,117,122,113,128,0,129,100,125,105],
[111,106,122,113,105,126,113,122,127,122,0,117,111,124],
[122,110,127,123,125,117,135,116,129,151,134,0,128,113],
[120,117,128,143,124,139,134,131,130,126,140,123,0,116],
[133,136,139,144,136,129,128,120,150,146,127,138,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 180, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,122,150,126,139,139,133,112,134,129,121,147,126],
[128,0,123,152,129,126,156,130,102,131,132,133,148,116],
[129,128,0,142,130,138,150,114,110,144,138,116,149,119],
[101,99,109,0,114,117,123,117,101,110,101,100,128,103],
[125,122,121,137,0,126,136,123,97,122,126,110,117,117],
[112,125,113,134,125,0,144,122,105,120,125,96,136,118],
[112,95,101,128,115,107,0,107,106,119,121,112,125,108],
[118,121,137,134,128,129,144,0,98,122,131,109,135,116],
[139,149,141,150,154,146,145,153,0,149,158,118,165,127],
[117,120,107,141,129,131,132,129,102,0,123,126,126,108],
[122,119,113,150,125,126,130,120,93,128,0,105,141,118],
[130,118,135,151,141,155,139,142,133,125,146,0,163,121],
[104,103,102,123,134,115,126,116,86,125,110,88,0,109],
[125,135,132,148,134,133,143,135,124,143,133,130,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 181, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,122,121,122,118,133,113,123,123,127,131,127,136],
[126,0,128,116,125,125,135,124,134,128,122,129,129,132],
[129,123,0,125,123,128,139,119,136,131,115,139,130,122],
[130,135,126,0,123,120,138,127,139,128,129,130,128,142],
[129,126,128,128,0,124,138,124,143,134,134,128,128,126],
[133,126,123,131,127,0,137,118,135,131,127,126,124,124],
[118,116,112,113,113,114,0,119,131,119,116,119,118,122],
[138,127,132,124,127,133,132,0,142,130,130,128,139,133],
[128,117,115,112,108,116,120,109,0,112,113,115,111,119],
[128,123,120,123,117,120,132,121,139,0,124,132,129,132],
[124,129,136,122,117,124,135,121,138,127,0,130,115,132],
[120,122,112,121,123,125,132,123,136,119,121,0,131,129],
[124,122,121,123,123,127,133,112,140,122,136,120,0,135],
[115,119,129,109,125,127,129,118,132,119,119,122,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 182, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,109,129,98,134,126,142,144,138,80,141,179,111],
[108,0,87,112,80,132,68,115,148,90,97,149,145,97],
[142,164,0,143,133,144,135,181,175,138,103,166,172,132],
[122,139,108,0,109,123,122,129,141,99,113,118,135,91],
[153,171,118,142,0,132,156,151,147,171,118,172,187,107],
[117,119,107,128,119,0,107,137,149,113,114,116,127,89],
[125,183,116,129,95,144,0,144,162,138,103,167,160,99],
[109,136,70,122,100,114,107,0,165,119,89,140,140,121],
[107,103,76,110,104,102,89,86,0,92,91,113,120,78],
[113,161,113,152,80,138,113,132,159,0,116,186,166,113],
[171,154,148,138,133,137,148,162,160,135,0,165,173,109],
[110,102,85,133,79,135,84,111,138,65,86,0,117,102],
[72,106,79,116,64,124,91,111,131,85,78,134,0,95],
[140,154,119,160,144,162,152,130,173,138,142,149,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 183, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,134,126,121,131,114,135,107,119,137,106,126,135],
[127,0,137,125,112,125,126,124,115,131,124,120,131,134],
[117,114,0,107,101,109,104,123,105,98,117,101,102,136],
[125,126,144,0,116,117,122,139,116,113,136,123,119,139],
[130,139,150,135,0,124,136,141,126,130,131,113,133,136],
[120,126,142,134,127,0,115,136,113,130,132,125,126,141],
[137,125,147,129,115,136,0,141,126,123,136,120,137,152],
[116,127,128,112,110,115,110,0,105,106,111,111,101,127],
[144,136,146,135,125,138,125,146,0,133,144,134,129,145],
[132,120,153,138,121,121,128,145,118,0,120,129,131,138],
[114,127,134,115,120,119,115,140,107,131,0,105,118,136],
[145,131,150,128,138,126,131,140,117,122,146,0,134,154],
[125,120,149,132,118,125,114,150,122,120,133,117,0,148],
[116,117,115,112,115,110,99,124,106,113,115,97,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 184, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,138,131,128,138,129,125,131,121,135,130,131,139],
[130,0,139,128,126,131,128,127,129,125,128,133,132,132],
[113,112,0,114,123,123,133,125,121,122,120,130,127,117],
[120,123,137,0,126,134,123,120,128,111,125,136,138,127],
[123,125,128,125,0,124,125,122,132,126,122,124,130,122],
[113,120,128,117,127,0,118,113,122,124,117,119,127,114],
[122,123,118,128,126,133,0,119,127,120,127,126,127,129],
[126,124,126,131,129,138,132,0,137,135,134,128,127,126],
[120,122,130,123,119,129,124,114,0,114,116,126,131,124],
[130,126,129,140,125,127,131,116,137,0,123,129,141,130],
[116,123,131,126,129,134,124,117,135,128,0,130,133,129],
[121,118,121,115,127,132,125,123,125,122,121,0,125,127],
[120,119,124,113,121,124,124,124,120,110,118,126,0,115],
[112,119,134,124,129,137,122,125,127,121,122,124,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 185, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,116,158,148,119,89,110,95,146,121,104,119,124],
[91,0,139,127,92,169,129,144,106,138,75,157,42,92],
[135,112,0,132,100,169,140,159,127,127,125,191,91,130],
[93,124,119,0,124,142,113,153,124,109,70,136,148,142],
[103,159,151,127,0,181,111,213,175,150,58,154,79,156],
[132,82,82,109,70,0,72,156,104,132,84,157,54,59],
[162,122,111,138,140,179,0,102,116,167,140,188,122,140],
[141,107,92,98,38,95,149,0,86,98,38,104,74,97],
[156,145,124,127,76,147,135,165,0,150,99,118,36,106],
[105,113,124,142,101,119,84,153,101,0,75,112,125,101],
[130,176,126,181,193,167,111,213,152,176,0,157,108,199],
[147,94,60,115,97,94,63,147,133,139,94,0,94,88],
[132,209,160,103,172,197,129,177,215,126,143,157,0,187],
[127,159,121,109,95,192,111,154,145,150,52,163,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 186, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,136,111,121,132,104,115,130,131,114,127,106,129],
[138,0,136,111,130,128,112,119,134,129,119,125,118,129],
[115,115,0,97,124,121,105,104,127,125,110,105,110,115],
[140,140,154,0,137,139,129,121,139,139,128,129,123,145],
[130,121,127,114,0,124,98,112,119,132,114,126,99,118],
[119,123,130,112,127,0,108,109,117,128,125,114,111,124],
[147,139,146,122,153,143,0,126,141,153,130,135,129,145],
[136,132,147,130,139,142,125,0,141,138,131,131,118,141],
[121,117,124,112,132,134,110,110,0,125,116,120,110,128],
[120,122,126,112,119,123,98,113,126,0,117,118,114,115],
[137,132,141,123,137,126,121,120,135,134,0,130,120,121],
[124,126,146,122,125,137,116,120,131,133,121,0,119,145],
[145,133,141,128,152,140,122,133,141,137,131,132,0,139],
[122,122,136,106,133,127,106,110,123,136,130,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 187, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,125,126,129,136,113,144,119,126,119,111,113,114],
[118,0,136,123,125,112,113,142,131,132,127,110,116,116],
[126,115,0,117,111,112,108,139,120,119,116,108,108,114],
[125,128,134,0,127,127,118,140,129,136,138,128,118,118],
[122,126,140,124,0,122,121,147,125,128,108,118,132,116],
[115,139,139,124,129,0,117,134,123,152,128,120,129,130],
[138,138,143,133,130,134,0,136,127,143,132,120,126,116],
[107,109,112,111,104,117,115,0,115,112,116,104,118,103],
[132,120,131,122,126,128,124,136,0,134,120,125,121,120],
[125,119,132,115,123,99,108,139,117,0,121,112,122,106],
[132,124,135,113,143,123,119,135,131,130,0,113,134,123],
[140,141,143,123,133,131,131,147,126,139,138,0,133,122],
[138,135,143,133,119,122,125,133,130,129,117,118,0,131],
[137,135,137,133,135,121,135,148,131,145,128,129,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 188, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,118,151,149,139,147,131,136,162,136,132,142,137],
[102,0,108,126,123,128,126,113,123,129,108,122,109,133],
[133,143,0,149,141,122,150,138,141,147,134,126,139,135],
[100,125,102,0,122,123,121,117,129,128,106,91,121,140],
[102,128,110,129,0,121,125,118,124,143,104,97,128,129],
[112,123,129,128,130,0,125,115,115,132,130,110,131,131],
[104,125,101,130,126,126,0,126,125,144,126,114,126,135],
[120,138,113,134,133,136,125,0,149,148,111,127,134,128],
[115,128,110,122,127,136,126,102,0,137,119,115,115,142],
[89,122,104,123,108,119,107,103,114,0,103,114,117,128],
[115,143,117,145,147,121,125,140,132,148,0,133,134,142],
[119,129,125,160,154,141,137,124,136,137,118,0,128,147],
[109,142,112,130,123,120,125,117,136,134,117,123,0,111],
[114,118,116,111,122,120,116,123,109,123,109,104,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 189, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,139,150,147,168,149,117,147,114,157,124,134,133],
[111,0,145,129,146,133,122,120,137,115,138,115,128,124],
[112,106,0,133,130,142,148,103,116,92,130,120,104,121],
[101,122,118,0,145,139,137,102,114,99,156,109,114,119],
[104,105,121,106,0,107,102,101,103,79,120,121,133,101],
[83,118,109,112,144,0,118,107,101,101,123,103,118,96],
[102,129,103,114,149,133,0,104,119,101,114,93,107,113],
[134,131,148,149,150,144,147,0,113,120,147,108,152,133],
[104,114,135,137,148,150,132,138,0,109,136,131,128,141],
[137,136,159,152,172,150,150,131,142,0,157,123,127,127],
[94,113,121,95,131,128,137,104,115,94,0,115,109,107],
[127,136,131,142,130,148,158,143,120,128,136,0,127,131],
[117,123,147,137,118,133,144,99,123,124,142,124,0,121],
[118,127,130,132,150,155,138,118,110,124,144,120,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 190, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,131,127,136,129,123,121,114,126,130,133,131,132],
[123,0,124,119,123,125,131,120,110,115,138,127,127,125],
[120,127,0,122,124,117,117,107,115,124,134,128,124,121],
[124,132,129,0,131,127,120,130,107,125,125,127,119,123],
[115,128,127,120,0,121,115,121,112,115,126,120,122,125],
[122,126,134,124,130,0,121,123,114,124,137,130,116,130],
[128,120,134,131,136,130,0,128,111,132,132,126,135,140],
[130,131,144,121,130,128,123,0,126,129,133,125,124,137],
[137,141,136,144,139,137,140,125,0,133,135,132,134,143],
[125,136,127,126,136,127,119,122,118,0,134,135,117,134],
[121,113,117,126,125,114,119,118,116,117,0,117,116,118],
[118,124,123,124,131,121,125,126,119,116,134,0,116,128],
[120,124,127,132,129,135,116,127,117,134,135,135,0,127],
[119,126,130,128,126,121,111,114,108,117,133,123,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 191, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,119,173,124,134,128,130,124,140,143,167,125,134],
[122,0,109,130,152,110,123,118,103,124,128,127,109,108],
[132,142,0,167,140,155,123,120,150,137,132,131,130,127],
[78,121,84,0,90,97,80,73,105,88,99,95,104,102],
[127,99,111,161,0,113,122,116,131,131,137,139,121,136],
[117,141,96,154,138,0,154,115,132,133,129,143,128,128],
[123,128,128,171,129,97,0,136,134,118,168,161,129,128],
[121,133,131,178,135,136,115,0,130,156,125,116,105,140],
[127,148,101,146,120,119,117,121,0,121,130,160,86,147],
[111,127,114,163,120,118,133,95,130,0,112,133,123,83],
[108,123,119,152,114,122,83,126,121,139,0,150,125,128],
[84,124,120,156,112,108,90,135,91,118,101,0,78,136],
[126,142,121,147,130,123,122,146,165,128,126,173,0,146],
[117,143,124,149,115,123,123,111,104,168,123,115,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 192, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,131,150,125,139,147,149,136,134,129,142,142,136],
[117,0,118,123,112,124,138,117,96,118,110,124,113,119],
[120,133,0,134,112,110,134,121,109,130,109,118,115,123],
[101,128,117,0,102,111,125,127,109,120,119,114,129,118],
[126,139,139,149,0,124,141,113,118,131,124,125,133,132],
[112,127,141,140,127,0,136,127,124,134,114,139,126,122],
[104,113,117,126,110,115,0,114,110,97,108,106,112,114],
[102,134,130,124,138,124,137,0,96,132,120,122,126,124],
[115,155,142,142,133,127,141,155,0,138,120,137,132,145],
[117,133,121,131,120,117,154,119,113,0,117,122,125,126],
[122,141,142,132,127,137,143,131,131,134,0,138,132,142],
[109,127,133,137,126,112,145,129,114,129,113,0,120,125],
[109,138,136,122,118,125,139,125,119,126,119,131,0,124],
[115,132,128,133,119,129,137,127,106,125,109,126,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 193, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,132,132,139,112,139,124,133,134,132,119,121,137],
[121,0,133,118,124,114,127,122,126,131,130,119,121,143],
[119,118,0,113,126,105,125,116,122,115,118,108,102,130],
[119,133,138,0,142,115,134,123,126,141,138,121,106,143],
[112,127,125,109,0,115,118,114,120,123,112,96,97,125],
[139,137,146,136,136,0,156,138,144,137,135,122,126,138],
[112,124,126,117,133,95,0,116,134,126,119,103,112,117],
[127,129,135,128,137,113,135,0,139,134,127,118,122,131],
[118,125,129,125,131,107,117,112,0,116,118,107,104,126],
[117,120,136,110,128,114,125,117,135,0,122,109,109,127],
[119,121,133,113,139,116,132,124,133,129,0,129,124,128],
[132,132,143,130,155,129,148,133,144,142,122,0,122,140],
[130,130,149,145,154,125,139,129,147,142,127,129,0,131],
[114,108,121,108,126,113,134,120,125,124,123,111,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 194, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,124,139,125,121,123,117,124,131,115,135,131,120],
[131,0,122,123,115,133,121,100,117,100,111,121,117,118],
[127,129,0,140,145,132,154,132,121,125,113,136,133,100],
[112,128,111,0,97,112,125,112,106,117,99,118,116,94],
[126,136,106,154,0,120,127,115,122,106,114,121,111,115],
[130,118,119,139,131,0,142,136,126,133,121,153,140,126],
[128,130,97,126,124,109,0,129,128,108,94,127,126,107],
[134,151,119,139,136,115,122,0,129,120,145,154,109,117],
[127,134,130,145,129,125,123,122,0,125,127,121,106,91],
[120,151,126,134,145,118,143,131,126,0,118,141,151,125],
[136,140,138,152,137,130,157,106,124,133,0,139,137,119],
[116,130,115,133,130,98,124,97,130,110,112,0,123,92],
[120,134,118,135,140,111,125,142,145,100,114,128,0,100],
[131,133,151,157,136,125,144,134,160,126,132,159,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 195, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,126,135,121,118,137,125,111,123,135,145,112,123],
[116,0,114,109,119,103,127,116,131,101,108,131,96,113],
[125,137,0,126,122,128,126,135,138,145,113,156,112,135],
[116,142,125,0,139,147,106,148,150,149,118,154,140,118],
[130,132,129,112,0,164,142,126,138,155,116,138,136,143],
[133,148,123,104,87,0,114,115,127,139,129,141,107,122],
[114,124,125,145,109,137,0,152,150,133,141,155,128,134],
[126,135,116,103,125,136,99,0,130,148,96,148,103,140],
[140,120,113,101,113,124,101,121,0,127,121,137,91,132],
[128,150,106,102,96,112,118,103,124,0,100,139,109,112],
[116,143,138,133,135,122,110,155,130,151,0,164,113,127],
[106,120,95,97,113,110,96,103,114,112,87,0,94,117],
[139,155,139,111,115,144,123,148,160,142,138,157,0,139],
[128,138,116,133,108,129,117,111,119,139,124,134,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 196, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,122,124,132,129,123,131,130,121,133,119,119,140],
[125,0,128,117,115,125,123,114,123,125,133,125,121,138],
[129,123,0,123,127,115,128,125,133,120,134,123,114,142],
[127,134,128,0,133,125,131,124,127,123,138,126,125,141],
[119,136,124,118,0,120,114,132,120,119,140,122,119,140],
[122,126,136,126,131,0,125,134,132,131,134,127,125,138],
[128,128,123,120,137,126,0,125,132,117,134,125,127,142],
[120,137,126,127,119,117,126,0,118,128,134,115,118,132],
[121,128,118,124,131,119,119,133,0,126,135,123,131,138],
[130,126,131,128,132,120,134,123,125,0,134,128,123,141],
[118,118,117,113,111,117,117,117,116,117,0,116,114,132],
[132,126,128,125,129,124,126,136,128,123,135,0,120,141],
[132,130,137,126,132,126,124,133,120,128,137,131,0,144],
[111,113,109,110,111,113,109,119,113,110,119,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 197, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,107,102,111,122,120,79,99,117,110,122,108,108],
[118,0,123,132,121,107,118,99,118,84,121,90,87,92],
[144,128,0,118,100,112,126,116,112,119,163,120,119,109],
[149,119,133,0,109,119,102,113,90,122,144,138,102,91],
[140,130,151,142,0,132,151,113,134,148,161,130,121,128],
[129,144,139,132,119,0,144,129,102,129,114,125,115,108],
[131,133,125,149,100,107,0,144,118,104,126,135,120,105],
[172,152,135,138,138,122,107,0,143,130,142,130,127,144],
[152,133,139,161,117,149,133,108,0,159,158,133,145,150],
[134,167,132,129,103,122,147,121,92,0,148,123,118,111],
[141,130,88,107,90,137,125,109,93,103,0,129,85,115],
[129,161,131,113,121,126,116,121,118,128,122,0,130,127],
[143,164,132,149,130,136,131,124,106,133,166,121,0,114],
[143,159,142,160,123,143,146,107,101,140,136,124,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 198, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,112,133,132,132,119,136,127,134,140,119,134,133],
[133,0,117,129,124,133,131,131,134,125,120,125,132,136],
[139,134,0,144,145,131,129,125,131,143,129,130,135,146],
[118,122,107,0,124,110,119,124,119,129,133,137,133,123],
[119,127,106,127,0,121,123,123,118,139,124,127,133,121],
[119,118,120,141,130,0,132,129,147,129,137,128,134,129],
[132,120,122,132,128,119,0,133,126,136,126,143,143,143],
[115,120,126,127,128,122,118,0,136,124,122,123,133,125],
[124,117,120,132,133,104,125,115,0,132,128,127,128,129],
[117,126,108,122,112,122,115,127,119,0,121,140,128,118],
[111,131,122,118,127,114,125,129,123,130,0,124,138,131],
[132,126,121,114,124,123,108,128,124,111,127,0,129,132],
[117,119,116,118,118,117,108,118,123,123,113,122,0,124],
[118,115,105,128,130,122,108,126,122,133,120,119,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 199, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,110,127,122,109,130,111,117,107,105,101,107,120],
[132,0,134,145,134,133,146,126,117,119,130,127,114,138],
[141,117,0,142,129,120,141,117,127,124,126,132,109,140],
[124,106,109,0,119,117,140,99,106,121,110,106,101,111],
[129,117,122,132,0,122,125,120,111,113,118,118,115,133],
[142,118,131,134,129,0,140,118,125,117,123,124,124,137],
[121,105,110,111,126,111,0,111,102,112,109,98,114,122],
[140,125,134,152,131,133,140,0,127,121,137,124,123,148],
[134,134,124,145,140,126,149,124,0,123,122,116,127,133],
[144,132,127,130,138,134,139,130,128,0,129,128,120,137],
[146,121,125,141,133,128,142,114,129,122,0,117,118,135],
[150,124,119,145,133,127,153,127,135,123,134,0,124,132],
[144,137,142,150,136,127,137,128,124,131,133,127,0,137],
[131,113,111,140,118,114,129,103,118,114,116,119,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 251, 200, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbrcwd/mebbrcwd_14_251.csv", index=False, header=False)
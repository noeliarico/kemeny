
import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg
from kemeny import sc

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,498,515,504,529,499,540,504,522,534,582,566,534,493],
[503,0,502,500,503,505,514,499,520,531,527,566,541,506],
[486,499,0,517,503,486,499,515,497,527,526,524,482,506],
[497,501,484,0,547,482,501,520,501,514,546,540,538,479],
[472,498,498,454,0,447,498,517,483,514,529,505,533,481],
[502,496,515,519,554,0,511,492,498,511,538,549,537,502],
[461,487,502,500,503,490,0,513,508,526,526,539,515,478],
[497,502,486,481,484,509,488,0,503,506,539,516,537,452],
[479,481,504,500,518,503,493,498,0,489,541,548,529,477],
[467,470,474,487,487,490,475,495,512,0,501,524,529,481],
[419,474,475,455,472,463,475,462,460,500,0,507,497,459],
[435,435,477,461,496,452,462,485,453,477,494,0,490,460],
[467,460,519,463,468,464,486,464,472,472,504,511,0,491],
[508,495,495,522,520,499,523,549,524,520,542,541,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 1, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,453,559,448,497,501,479,465,466,415,446,497,468],
[491,0,444,464,492,463,500,429,486,526,450,523,501,439],
[548,557,0,506,513,519,523,467,529,577,452,515,577,465],
[442,537,495,0,473,503,478,476,511,498,501,453,514,473],
[553,509,488,528,0,509,550,441,436,484,416,526,476,496],
[504,538,482,498,492,0,543,404,503,479,443,524,502,443],
[500,501,478,523,451,458,0,496,563,575,398,492,502,450],
[522,572,534,525,560,597,505,0,569,555,560,573,503,492],
[536,515,472,490,565,498,438,432,0,559,445,445,422,502],
[535,475,424,503,517,522,426,446,442,0,407,470,489,426],
[586,551,549,500,585,558,603,441,556,594,0,542,539,557],
[555,478,486,548,475,477,509,428,556,531,459,0,425,511],
[504,500,424,487,525,499,499,498,579,512,462,576,0,509],
[533,562,536,528,505,558,551,509,499,575,444,490,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 2, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,527,503,515,489,491,504,536,507,520,556,522,505],
[533,0,519,494,532,497,542,533,547,530,514,558,515,538],
[474,482,0,468,496,468,468,506,528,509,483,547,509,530],
[498,507,533,0,513,512,503,532,586,535,521,557,522,520],
[486,469,505,488,0,498,480,487,531,537,505,543,481,536],
[512,504,533,489,503,0,547,521,532,497,502,519,538,525],
[510,459,533,498,521,454,0,519,528,530,513,544,540,498],
[497,468,495,469,514,480,482,0,508,457,522,518,488,462],
[465,454,473,415,470,469,473,493,0,496,469,502,504,475],
[494,471,492,466,464,504,471,544,505,0,470,487,529,532],
[481,487,518,480,496,499,488,479,532,531,0,528,518,530],
[445,443,454,444,458,482,457,483,499,514,473,0,489,493],
[479,486,492,479,520,463,461,513,497,472,483,512,0,511],
[496,463,471,481,465,476,503,539,526,469,471,508,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 3, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,464,407,445,468,458,458,459,441,458,509,455,442],
[521,0,508,487,481,480,493,538,487,548,508,488,507,519],
[537,493,0,482,488,534,481,535,521,496,460,533,490,486],
[594,514,519,0,474,503,508,547,462,503,453,530,534,517],
[556,520,513,527,0,525,530,523,507,542,515,501,500,507],
[533,521,467,498,476,0,467,493,502,501,477,485,486,513],
[543,508,520,493,471,534,0,524,502,538,492,559,534,550],
[543,463,466,454,478,508,477,0,489,501,471,504,467,520],
[542,514,480,539,494,499,499,512,0,505,539,515,505,490],
[560,453,505,498,459,500,463,500,496,0,470,519,507,552],
[543,493,541,548,486,524,509,530,462,531,0,566,519,557],
[492,513,468,471,500,516,442,497,486,482,435,0,471,472],
[546,494,511,467,501,515,467,534,496,494,482,530,0,505],
[559,482,515,484,494,488,451,481,511,449,444,529,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 4, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,503,538,563,576,480,531,563,525,548,558,542,537,570],
[498,0,509,508,537,490,497,556,500,509,464,501,500,532],
[463,492,0,470,553,483,481,547,476,471,482,519,488,500],
[438,493,531,0,551,464,526,544,495,523,472,526,469,504],
[425,464,448,450,0,430,455,483,432,462,485,492,465,483],
[521,511,518,537,571,0,517,582,500,484,533,547,515,547],
[470,504,520,475,546,484,0,502,496,483,469,520,506,537],
[438,445,454,457,518,419,499,0,436,466,430,470,475,501],
[476,501,525,506,569,501,505,565,0,533,484,533,542,565],
[453,492,530,478,539,517,518,535,468,0,501,548,518,541],
[443,537,519,529,516,468,532,571,517,500,0,491,466,501],
[459,500,482,475,509,454,481,531,468,453,510,0,493,492],
[464,501,513,532,536,486,495,526,459,483,535,508,0,497],
[431,469,501,497,518,454,464,500,436,460,500,509,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 5, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,383,643,463,577,672,668,475,581,684,664,742,536,539],
[618,0,751,586,552,704,547,585,752,719,397,836,590,579],
[358,250,0,331,391,371,328,355,385,288,415,460,297,204],
[538,415,670,0,524,607,576,416,575,577,488,630,356,556],
[424,449,610,477,0,516,608,510,481,528,393,718,523,514],
[329,297,630,394,485,0,578,362,337,400,280,453,202,346],
[333,454,673,425,393,423,0,514,512,428,304,678,230,458],
[526,416,646,585,491,639,487,0,491,554,479,619,312,404],
[420,249,616,426,520,664,489,510,0,419,549,685,322,461],
[317,282,713,424,473,601,573,447,582,0,563,700,329,417],
[337,604,586,513,608,721,697,522,452,438,0,591,434,440],
[259,165,541,371,283,548,323,382,316,301,410,0,282,384],
[465,411,704,645,478,799,771,689,679,672,567,719,0,632],
[462,422,797,445,487,655,543,597,540,584,561,617,369,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 6, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,523,499,530,503,528,518,536,517,533,510,519,536,507],
[478,0,493,509,494,492,518,518,463,490,483,514,502,467],
[502,508,0,512,511,533,533,507,501,498,521,524,531,519],
[471,492,489,0,490,502,504,506,489,503,488,510,512,489],
[498,507,490,511,0,514,526,521,483,506,493,501,511,491],
[473,509,468,499,487,0,504,525,493,508,496,503,498,473],
[483,483,468,497,475,497,0,504,454,478,473,483,451,473],
[465,483,494,495,480,476,497,0,474,485,479,485,507,465],
[484,538,500,512,518,508,547,527,0,502,510,535,515,507],
[468,511,503,498,495,493,523,516,499,0,508,517,516,483],
[491,518,480,513,508,505,528,522,491,493,0,491,529,474],
[482,487,477,491,500,498,518,516,466,484,510,0,504,493],
[465,499,470,489,490,503,550,494,486,485,472,497,0,475],
[494,534,482,512,510,528,528,536,494,518,527,508,526,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 7, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,501,496,526,527,514,499,507,566,544,531,494,513],
[496,0,485,498,525,528,512,499,497,525,480,492,502,475],
[500,516,0,490,521,499,522,484,492,560,514,514,503,512],
[505,503,511,0,565,487,504,503,518,530,522,543,512,494],
[475,476,480,436,0,465,467,481,437,490,510,469,458,457],
[474,473,502,514,536,0,462,491,496,510,529,478,481,519],
[487,489,479,497,534,539,0,493,481,509,511,521,502,490],
[502,502,517,498,520,510,508,0,482,532,528,511,484,512],
[494,504,509,483,564,505,520,519,0,548,542,492,535,508],
[435,476,441,471,511,491,492,469,453,0,447,482,456,502],
[457,521,487,479,491,472,490,473,459,554,0,487,465,518],
[470,509,487,458,532,523,480,490,509,519,514,0,483,459],
[507,499,498,489,543,520,499,517,466,545,536,518,0,513],
[488,526,489,507,544,482,511,489,493,499,483,542,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 8, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,500,437,482,490,419,451,465,478,450,459,527,440],
[524,0,483,500,486,509,444,509,484,521,504,510,466,505],
[501,518,0,483,490,531,479,487,495,527,521,518,528,490],
[564,501,518,0,474,535,501,512,513,550,545,531,552,491],
[519,515,511,527,0,543,477,529,499,547,505,540,530,550],
[511,492,470,466,458,0,461,488,468,492,446,477,481,475],
[582,557,522,500,524,540,0,494,519,489,500,515,508,528],
[550,492,514,489,472,513,507,0,499,513,521,521,490,478],
[536,517,506,488,502,533,482,502,0,503,509,504,511,489],
[523,480,474,451,454,509,512,488,498,0,447,464,516,451],
[551,497,480,456,496,555,501,480,492,554,0,530,499,482],
[542,491,483,470,461,524,486,480,497,537,471,0,556,472],
[474,535,473,449,471,520,493,511,490,485,502,445,0,490],
[561,496,511,510,451,526,473,523,512,550,519,529,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 9, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,518,482,485,529,406,512,459,497,503,363,421,652],
[543,0,552,507,477,600,505,521,587,569,634,518,508,672],
[483,449,0,448,508,463,390,461,499,490,585,425,400,634],
[519,494,553,0,440,473,427,663,440,458,548,444,407,557],
[516,524,493,561,0,527,479,528,550,576,645,512,426,593],
[472,401,538,528,474,0,380,525,489,525,516,395,338,617],
[595,496,611,574,522,621,0,567,656,528,620,554,527,636],
[489,480,540,338,473,476,434,0,423,443,577,462,480,561],
[542,414,502,561,451,512,345,578,0,502,629,380,465,607],
[504,432,511,543,425,476,473,558,499,0,483,394,402,517],
[498,367,416,453,356,485,381,424,372,518,0,385,400,474],
[638,483,576,557,489,606,447,539,621,607,616,0,442,712],
[580,493,601,594,575,663,474,521,536,599,601,559,0,633],
[349,329,367,444,408,384,365,440,394,484,527,289,368,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 10, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,523,535,532,567,521,568,470,529,505,582,533,472,500],
[478,0,477,505,507,497,452,459,423,496,449,458,488,528],
[466,524,0,535,565,479,509,497,463,542,531,477,512,532],
[469,496,466,0,550,472,497,502,497,548,537,513,469,520],
[434,494,436,451,0,474,536,443,465,479,540,506,466,457],
[480,504,522,529,527,0,510,500,507,488,545,478,477,557],
[433,549,492,504,465,491,0,447,463,442,536,472,459,464],
[531,542,504,499,558,501,554,0,513,546,522,545,554,495],
[472,578,538,504,536,494,538,488,0,494,539,533,516,517],
[496,505,459,453,522,513,559,455,507,0,542,461,523,517],
[419,552,470,464,461,456,465,479,462,459,0,496,444,477],
[468,543,524,488,495,523,529,456,468,540,505,0,501,494],
[529,513,489,532,535,524,542,447,485,478,557,500,0,519],
[501,473,469,481,544,444,537,506,484,484,524,507,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 11, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,453,462,497,513,482,513,532,506,497,515,483,505],
[490,0,500,509,489,539,526,498,524,513,531,542,492,516],
[548,501,0,467,498,528,531,521,510,532,523,528,519,507],
[539,492,534,0,518,522,536,506,517,487,556,563,505,532],
[504,512,503,483,0,503,554,501,545,492,532,555,496,524],
[488,462,473,479,498,0,532,460,501,474,547,533,464,492],
[519,475,470,465,447,469,0,447,480,471,501,507,478,464],
[488,503,480,495,500,541,554,0,507,515,552,535,493,544],
[469,477,491,484,456,500,521,494,0,509,500,530,493,467],
[495,488,469,514,509,527,530,486,492,0,515,522,475,525],
[504,470,478,445,469,454,500,449,501,486,0,520,459,470],
[486,459,473,438,446,468,494,466,471,479,481,0,467,502],
[518,509,482,496,505,537,523,508,508,526,542,534,0,501],
[496,485,494,469,477,509,537,457,534,476,531,499,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 12, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,486,522,523,496,510,519,484,428,521,518,513,443],
[512,0,467,505,561,535,496,500,509,443,518,515,516,471],
[515,534,0,512,517,528,504,486,513,439,538,506,533,504],
[479,496,489,0,512,503,497,488,505,419,481,484,504,447],
[478,440,484,489,0,487,476,488,494,461,477,481,452,453],
[505,466,473,498,514,0,523,453,504,432,474,481,479,504],
[491,505,497,504,525,478,0,514,514,458,482,484,514,452],
[482,501,515,513,513,548,487,0,504,501,521,534,523,495],
[517,492,488,496,507,497,487,497,0,451,507,482,467,478],
[573,558,562,582,540,569,543,500,550,0,562,534,539,512],
[480,483,463,520,524,527,519,480,494,439,0,481,489,486],
[483,486,495,517,520,520,517,467,519,467,520,0,492,479],
[488,485,468,497,549,522,487,478,534,462,512,509,0,488],
[558,530,497,554,548,497,549,506,523,489,515,522,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 13, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,424,460,392,481,497,492,462,426,447,396,443,418],
[540,0,439,462,481,531,529,543,468,513,532,500,499,483],
[577,562,0,537,481,557,563,567,496,512,516,459,575,496],
[541,539,464,0,496,553,541,505,503,489,501,515,573,452],
[609,520,520,505,0,548,550,539,487,489,440,451,507,494],
[520,470,444,448,453,0,521,461,430,453,486,452,478,431],
[504,472,438,460,451,480,0,488,454,466,465,427,470,423],
[509,458,434,496,462,540,513,0,464,480,444,449,485,490],
[539,533,505,498,514,571,547,537,0,514,489,490,556,481],
[575,488,489,512,512,548,535,521,487,0,529,478,543,497],
[554,469,485,500,561,515,536,557,512,472,0,464,509,494],
[605,501,542,486,550,549,574,552,511,523,537,0,507,503],
[558,502,426,428,494,523,531,516,445,458,492,494,0,459],
[583,518,505,549,507,570,578,511,520,504,507,498,542,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 14, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,541,619,518,539,503,382,470,490,497,542,498,568],
[577,0,524,566,481,543,550,520,530,594,573,598,549,655],
[460,477,0,515,441,558,482,475,517,586,519,619,513,501],
[382,435,486,0,454,505,399,486,409,495,516,581,497,534],
[483,520,560,547,0,568,543,513,465,580,601,590,561,572],
[462,458,443,496,433,0,465,457,445,477,473,599,508,575],
[498,451,519,602,458,536,0,456,510,530,487,552,478,596],
[619,481,526,515,488,544,545,0,463,602,536,663,506,555],
[531,471,484,592,536,556,491,538,0,505,544,637,505,636],
[511,407,415,506,421,524,471,399,496,0,552,612,490,538],
[504,428,482,485,400,528,514,465,457,449,0,552,480,495],
[459,403,382,420,411,402,449,338,364,389,449,0,385,468],
[503,452,488,504,440,493,523,495,496,511,521,616,0,566],
[433,346,500,467,429,426,405,446,365,463,506,533,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 15, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,470,487,480,531,532,522,487,495,513,502,485,515],
[510,0,486,496,505,518,522,497,499,493,501,497,490,493],
[531,515,0,525,508,546,545,536,518,497,529,500,506,517],
[514,505,476,0,478,509,518,514,495,498,520,520,501,513],
[521,496,493,523,0,535,533,551,506,518,517,510,534,516],
[470,483,455,492,466,0,507,474,486,453,481,468,461,496],
[469,479,456,483,468,494,0,506,474,465,487,488,496,479],
[479,504,465,487,450,527,495,0,473,469,499,490,491,492],
[514,502,483,506,495,515,527,528,0,498,501,485,509,526],
[506,508,504,503,483,548,536,532,503,0,517,497,509,527],
[488,500,472,481,484,520,514,502,500,484,0,489,486,497],
[499,504,501,481,491,533,513,511,516,504,512,0,491,509],
[516,511,495,500,467,540,505,510,492,492,515,510,0,510],
[486,508,484,488,485,505,522,509,475,474,504,492,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 16, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,567,437,420,342,475,512,519,516,460,497,486,428,412],
[434,0,374,404,439,459,472,538,541,508,431,490,437,424],
[564,627,0,588,615,544,489,669,669,519,535,535,560,527],
[581,597,413,0,427,535,556,547,637,496,557,507,529,483],
[659,562,386,574,0,586,564,540,558,555,567,562,521,483],
[526,542,457,466,415,0,470,509,482,443,553,433,466,427],
[489,529,512,445,437,531,0,544,558,514,540,466,502,529],
[482,463,332,454,461,492,457,0,462,451,534,481,453,439],
[485,460,332,364,443,519,443,539,0,505,469,480,488,411],
[541,493,482,505,446,558,487,550,496,0,501,512,499,479],
[504,570,466,444,434,448,461,467,532,500,0,492,589,446],
[515,511,466,494,439,568,535,520,521,489,509,0,459,492],
[573,564,441,472,480,535,499,548,513,502,412,542,0,512],
[589,577,474,518,518,574,472,562,590,522,555,509,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 17, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,437,624,511,558,468,552,534,530,542,474,525,309],
[570,0,588,447,447,505,473,527,580,607,470,473,270,637],
[564,413,0,520,610,415,494,573,555,685,601,547,315,678],
[377,554,481,0,557,569,577,594,506,587,496,548,583,397],
[490,554,391,444,0,433,663,507,537,610,571,460,409,483],
[443,496,586,432,568,0,573,667,519,717,532,468,514,522],
[533,528,507,424,338,428,0,507,501,431,535,511,630,544],
[449,474,428,407,494,334,494,0,558,506,443,398,465,343],
[467,421,446,495,464,482,500,443,0,489,516,377,479,337],
[471,394,316,414,391,284,570,495,512,0,453,371,381,554],
[459,531,400,505,430,469,466,558,485,548,0,518,342,358],
[527,528,454,453,541,533,490,603,624,630,483,0,466,515],
[476,731,686,418,592,487,371,536,522,620,659,535,0,701],
[692,364,323,604,518,479,457,658,664,447,643,486,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 18, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,538,497,533,480,599,484,544,522,490,503,591,567],
[510,0,510,473,495,538,559,504,597,527,535,563,576,556],
[463,491,0,463,522,519,559,491,526,449,494,491,486,459],
[504,528,538,0,523,521,547,557,526,496,520,565,509,587],
[468,506,479,478,0,586,485,419,592,482,448,473,507,544],
[521,463,482,480,415,0,480,396,547,430,435,509,506,464],
[402,442,442,454,516,521,0,459,537,442,405,466,556,518],
[517,497,510,444,582,605,542,0,516,507,493,602,600,524],
[457,404,475,475,409,454,464,485,0,387,453,481,463,447],
[479,474,552,505,519,571,559,494,614,0,485,487,634,542],
[511,466,507,481,553,566,596,508,548,516,0,591,608,613],
[498,438,510,436,528,492,535,399,520,514,410,0,518,495],
[410,425,515,492,494,495,445,401,538,367,393,483,0,467],
[434,445,542,414,457,537,483,477,554,459,388,506,534,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 19, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,497,511,540,532,497,521,540,474,482,507,512,502],
[503,0,524,493,475,484,476,554,476,501,506,487,484,479],
[504,477,0,481,492,531,488,508,486,509,463,496,502,507],
[490,508,520,0,513,520,511,521,490,498,474,486,492,518],
[461,526,509,488,0,506,482,471,483,495,479,452,494,498],
[469,517,470,481,495,0,468,488,494,445,441,453,452,485],
[504,525,513,490,519,533,0,491,535,510,455,495,485,547],
[480,447,493,480,530,513,510,0,482,446,484,477,484,519],
[461,525,515,511,518,507,466,519,0,491,467,479,490,517],
[527,500,492,503,506,556,491,555,510,0,493,486,495,540],
[519,495,538,527,522,560,546,517,534,508,0,535,552,525],
[494,514,505,515,549,548,506,524,522,515,466,0,535,536],
[489,517,499,509,507,549,516,517,511,506,449,466,0,512],
[499,522,494,483,503,516,454,482,484,461,476,465,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 20, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,480,495,492,514,489,486,507,465,498,494,500,513],
[502,0,510,519,504,531,488,471,505,494,516,511,488,508],
[521,491,0,479,472,501,485,475,459,500,472,479,470,495],
[506,482,522,0,480,541,509,473,455,514,476,476,481,479],
[509,497,529,521,0,540,536,507,491,496,511,515,504,517],
[487,470,500,460,461,0,471,450,447,466,489,454,457,478],
[512,513,516,492,465,530,0,494,492,497,505,499,488,477],
[515,530,526,528,494,551,507,0,474,514,521,490,536,511],
[494,496,542,546,510,554,509,527,0,533,514,491,495,489],
[536,507,501,487,505,535,504,487,468,0,486,500,480,489],
[503,485,529,525,490,512,496,480,487,515,0,487,489,510],
[507,490,522,525,486,547,502,511,510,501,514,0,502,532],
[501,513,531,520,497,544,513,465,506,521,512,499,0,488],
[488,493,506,522,484,523,524,490,512,512,491,469,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 21, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,446,487,484,502,446,487,466,514,451,516,476,518],
[527,0,449,514,519,543,480,494,492,499,486,495,525,539],
[555,552,0,553,515,532,507,547,493,559,531,513,528,525],
[514,487,448,0,475,534,477,487,463,493,471,508,497,515],
[517,482,486,526,0,523,456,505,493,501,500,537,502,515],
[499,458,469,467,478,0,448,500,478,504,483,477,476,496],
[555,521,494,524,545,553,0,500,515,501,485,523,532,540],
[514,507,454,514,496,501,501,0,466,503,470,520,514,492],
[535,509,508,538,508,523,486,535,0,538,509,512,485,555],
[487,502,442,508,500,497,500,498,463,0,500,508,476,502],
[550,515,470,530,501,518,516,531,492,501,0,518,511,522],
[485,506,488,493,464,524,478,481,489,493,483,0,464,461],
[525,476,473,504,499,525,469,487,516,525,490,537,0,512],
[483,462,476,486,486,505,461,509,446,499,479,540,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 22, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,530,507,523,573,551,516,477,499,533,552,585,527],
[494,0,549,496,537,528,509,521,514,522,464,558,557,513],
[471,452,0,540,520,522,493,548,517,480,467,486,559,526],
[494,505,461,0,499,507,502,509,523,461,435,493,513,473],
[478,464,481,502,0,556,487,527,497,525,454,508,584,483],
[428,473,479,494,445,0,450,465,494,461,450,498,521,439],
[450,492,508,499,514,551,0,541,410,531,439,534,573,489],
[485,480,453,492,474,536,460,0,469,488,398,537,525,498],
[524,487,484,478,504,507,591,532,0,542,482,504,598,500],
[502,479,521,540,476,540,470,513,459,0,447,494,558,481],
[468,537,534,566,547,551,562,603,519,554,0,570,595,558],
[449,443,515,508,493,503,467,464,497,507,431,0,530,457],
[416,444,442,488,417,480,428,476,403,443,406,471,0,444],
[474,488,475,528,518,562,512,503,501,520,443,544,557,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 23, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,508,524,499,479,509,537,537,485,477,491,513,510],
[499,0,490,521,531,494,495,557,525,525,533,525,537,476],
[493,511,0,547,500,490,495,541,512,508,505,520,566,518],
[477,480,454,0,478,471,509,523,503,493,482,459,509,492],
[502,470,501,523,0,510,492,542,502,538,507,507,540,510],
[522,507,511,530,491,0,526,552,511,493,532,513,556,473],
[492,506,506,492,509,475,0,505,524,494,492,510,547,496],
[464,444,460,478,459,449,496,0,473,477,488,477,493,457],
[464,476,489,498,499,490,477,528,0,468,514,456,518,452],
[516,476,493,508,463,508,507,524,533,0,505,500,501,475],
[524,468,496,519,494,469,509,513,487,496,0,491,545,453],
[510,476,481,542,494,488,491,524,545,501,510,0,537,489],
[488,464,435,492,461,445,454,508,483,500,456,464,0,472],
[491,525,483,509,491,528,505,544,549,526,548,512,529,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 24, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,494,475,455,492,478,491,481,467,511,489,487,478],
[492,0,524,489,482,487,502,482,494,501,511,504,500,517],
[507,477,0,455,462,484,482,519,482,505,487,492,503,488],
[526,512,546,0,504,499,507,526,496,499,524,522,517,492],
[546,519,539,497,0,512,522,508,519,516,529,563,534,520],
[509,514,517,502,489,0,504,506,493,517,516,522,521,514],
[523,499,519,494,479,497,0,517,509,485,530,516,533,503],
[510,519,482,475,493,495,484,0,513,461,505,517,489,500],
[520,507,519,505,482,508,492,488,0,527,511,538,519,494],
[534,500,496,502,485,484,516,540,474,0,506,520,513,508],
[490,490,514,477,472,485,471,496,490,495,0,501,505,473],
[512,497,509,479,438,479,485,484,463,481,500,0,532,466],
[514,501,498,484,467,480,468,512,482,488,496,469,0,480],
[523,484,513,509,481,487,498,501,507,493,528,535,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 25, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,527,525,523,480,509,491,473,535,520,467,491,530,447],
[474,0,487,436,439,532,465,399,515,443,406,487,458,478],
[476,514,0,487,487,502,431,444,569,496,439,546,539,480],
[478,565,514,0,513,517,503,547,629,561,469,595,492,561],
[521,562,514,488,0,594,489,502,523,546,519,548,542,484],
[492,469,499,484,407,0,491,491,504,502,463,543,511,479],
[510,536,570,498,512,510,0,481,575,452,535,483,505,500],
[528,602,557,454,499,510,520,0,553,529,518,505,525,528],
[466,486,432,372,478,497,426,448,0,445,379,425,446,450],
[481,558,505,440,455,499,549,472,556,0,495,551,542,548],
[534,595,562,532,482,538,466,483,622,506,0,565,577,533],
[510,514,455,406,453,458,518,496,576,450,436,0,518,484],
[471,543,462,509,459,490,496,476,555,459,424,483,0,501],
[554,523,521,440,517,522,501,473,551,453,468,517,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 26, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,506,495,486,518,470,507,494,488,513,500,491,471],
[512,0,487,501,485,520,504,534,489,503,520,511,476,500],
[495,514,0,492,505,500,519,522,510,502,517,514,501,505],
[506,500,509,0,512,509,512,523,514,504,534,537,522,500],
[515,516,496,489,0,528,507,520,498,516,527,520,490,508],
[483,481,501,492,473,0,484,498,479,486,514,505,477,493],
[531,497,482,489,494,517,0,504,497,500,517,508,499,492],
[494,467,479,478,481,503,497,0,502,481,508,488,489,468],
[507,512,491,487,503,522,504,499,0,502,505,520,515,499],
[513,498,499,497,485,515,501,520,499,0,544,521,511,483],
[488,481,484,467,474,487,484,493,496,457,0,488,475,482],
[501,490,487,464,481,496,493,513,481,480,513,0,496,473],
[510,525,500,479,511,524,502,512,486,490,526,505,0,492],
[530,501,496,501,493,508,509,533,502,518,519,528,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 27, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,513,501,509,508,558,509,474,512,521,523,522,542,494],
[488,0,500,497,504,523,485,487,481,472,496,497,531,451],
[500,501,0,542,510,484,528,475,499,561,491,521,522,481],
[492,504,459,0,508,494,477,487,464,518,507,491,550,494],
[493,497,491,493,0,538,550,485,534,501,532,531,519,467],
[443,478,517,507,463,0,473,485,481,534,514,499,474,478],
[492,516,473,524,451,528,0,481,519,516,490,491,517,479],
[527,514,526,514,516,516,520,0,507,514,504,494,533,477],
[489,520,502,537,467,520,482,494,0,470,499,509,532,491],
[480,529,440,483,500,467,485,487,531,0,493,529,529,492],
[478,505,510,494,469,487,511,497,502,508,0,460,520,458],
[479,504,480,510,470,502,510,507,492,472,541,0,524,490],
[459,470,479,451,482,527,484,468,469,472,481,477,0,506],
[507,550,520,507,534,523,522,524,510,509,543,511,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 28, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,497,510,476,537,491,471,521,494,509,543,481,546],
[512,0,454,542,477,513,475,475,517,519,503,525,465,512],
[504,547,0,536,535,528,489,474,505,521,514,514,514,547],
[491,459,465,0,467,467,491,434,479,478,462,472,438,485],
[525,524,466,534,0,534,484,483,517,515,510,542,489,513],
[464,488,473,534,467,0,456,477,495,504,489,503,429,489],
[510,526,512,510,517,545,0,485,512,510,510,536,488,504],
[530,526,527,567,518,524,516,0,539,581,534,558,487,543],
[480,484,496,522,484,506,489,462,0,497,449,513,471,482],
[507,482,480,523,486,497,491,420,504,0,476,496,475,488],
[492,498,487,539,491,512,491,467,552,525,0,499,490,521],
[458,476,487,529,459,498,465,443,488,505,502,0,458,500],
[520,536,487,563,512,572,513,514,530,526,511,543,0,525],
[455,489,454,516,488,512,497,458,519,513,480,501,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 29, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,526,511,499,525,489,523,483,475,517,506,473,474],
[533,0,514,505,509,494,503,518,480,452,504,499,551,504],
[475,487,0,496,507,511,498,493,469,451,572,531,524,478],
[490,496,505,0,484,504,523,517,462,488,517,494,551,472],
[502,492,494,517,0,488,509,506,445,470,513,521,511,477],
[476,507,490,497,513,0,499,531,467,482,499,495,526,472],
[512,498,503,478,492,502,0,537,461,503,547,512,570,526],
[478,483,508,484,495,470,464,0,474,463,483,473,521,481],
[518,521,532,539,556,534,540,527,0,492,571,545,568,499],
[526,549,550,513,531,519,498,538,509,0,521,505,580,501],
[484,497,429,484,488,502,454,518,430,480,0,489,554,461],
[495,502,470,507,480,506,489,528,456,496,512,0,555,466],
[528,450,477,450,490,475,431,480,433,421,447,446,0,473],
[527,497,523,529,524,529,475,520,502,500,540,535,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 30, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,477,496,483,479,511,462,509,467,488,507,553,462],
[560,0,513,618,492,474,483,484,518,488,502,481,508,466],
[524,488,0,474,452,435,464,502,501,414,520,481,469,458],
[505,383,527,0,500,445,422,471,455,470,419,491,453,447],
[518,509,549,501,0,561,534,484,570,523,536,557,560,525],
[522,527,566,556,440,0,525,575,492,546,505,548,540,500],
[490,518,537,579,467,476,0,496,515,526,555,522,514,518],
[539,517,499,530,517,426,505,0,518,480,556,437,482,505],
[492,483,500,546,431,509,486,483,0,476,469,432,526,473],
[534,513,587,531,478,455,475,521,525,0,551,538,586,491],
[513,499,481,582,465,496,446,445,532,450,0,434,532,479],
[494,520,520,510,444,453,479,564,569,463,567,0,538,449],
[448,493,532,548,441,461,487,519,475,415,469,463,0,512],
[539,535,543,554,476,501,483,496,528,510,522,552,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 31, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,513,532,491,508,525,521,551,530,465,543,515,485],
[490,0,494,490,450,515,495,458,443,514,456,514,502,502],
[488,507,0,519,494,498,518,467,521,521,499,505,548,486],
[469,511,482,0,484,524,471,472,482,462,500,515,507,462],
[510,551,507,517,0,539,533,482,519,538,507,563,488,477],
[493,486,503,477,462,0,463,463,481,505,443,548,527,462],
[476,506,483,530,468,538,0,481,452,518,461,543,532,451],
[480,543,534,529,519,538,520,0,505,538,516,525,531,506],
[450,558,480,519,482,520,549,496,0,512,482,532,543,496],
[471,487,480,539,463,496,483,463,489,0,423,523,525,483],
[536,545,502,501,494,558,540,485,519,578,0,512,560,494],
[458,487,496,486,438,453,458,476,469,478,489,0,492,463],
[486,499,453,494,513,474,469,470,458,476,441,509,0,433],
[516,499,515,539,524,539,550,495,505,518,507,538,568,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 32, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,556,538,483,516,519,537,518,504,503,503,516,502,514],
[445,0,484,502,461,473,525,536,489,487,481,472,448,471],
[463,517,0,488,490,450,515,505,474,463,473,454,501,437],
[518,499,513,0,499,502,510,542,512,466,503,500,485,474],
[485,540,511,502,0,512,535,518,491,475,495,505,488,493],
[482,528,551,499,489,0,512,514,522,486,501,494,465,505],
[464,476,486,491,466,489,0,489,462,474,472,472,493,468],
[483,465,496,459,483,487,512,0,495,474,487,513,499,449],
[497,512,527,489,510,479,539,506,0,523,502,449,486,505],
[498,514,538,535,526,515,527,527,478,0,501,496,481,517],
[498,520,528,498,506,500,529,514,499,500,0,489,459,480],
[485,529,547,501,496,507,529,488,552,505,512,0,509,512],
[499,553,500,516,513,536,508,502,515,520,542,492,0,531],
[487,530,564,527,508,496,533,552,496,484,521,489,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 33, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,483,500,479,502,502,514,469,477,499,508,511,479],
[508,0,482,505,492,480,472,483,488,487,486,496,512,493],
[518,519,0,523,489,525,515,521,477,510,508,518,504,514],
[501,496,478,0,482,490,505,525,485,497,493,497,519,504],
[522,509,512,519,0,504,506,509,500,515,498,511,509,499],
[499,521,476,511,497,0,509,510,501,480,495,483,499,485],
[499,529,486,496,495,492,0,519,463,488,503,509,477,499],
[487,518,480,476,492,491,482,0,485,486,487,490,509,488],
[532,513,524,516,501,500,538,516,0,519,505,506,526,510],
[524,514,491,504,486,521,513,515,482,0,508,524,512,489],
[502,515,493,508,503,506,498,514,496,493,0,512,511,509],
[493,505,483,504,490,518,492,511,495,477,489,0,514,510],
[490,489,497,482,492,502,524,492,475,489,490,487,0,483],
[522,508,487,497,502,516,502,513,491,512,492,491,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 34, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,508,545,527,519,519,495,516,528,540,496,510,496],
[484,0,515,519,514,513,490,496,526,519,530,502,520,501],
[493,486,0,513,523,506,490,478,505,516,498,478,504,476],
[456,482,488,0,496,472,482,483,478,492,489,461,476,465],
[474,487,478,505,0,498,496,460,480,505,494,469,490,487],
[482,488,495,529,503,0,503,504,490,489,506,478,493,493],
[482,511,511,519,505,498,0,499,513,516,523,486,524,494],
[506,505,523,518,541,497,502,0,532,519,515,480,506,525],
[485,475,496,523,521,511,488,469,0,496,511,474,520,464],
[473,482,485,509,496,512,485,482,505,0,509,477,501,467],
[461,471,503,512,507,495,478,486,490,492,0,488,495,475],
[505,499,523,540,532,523,515,521,527,524,513,0,527,500],
[491,481,497,525,511,508,477,495,481,500,506,474,0,490],
[505,500,525,536,514,508,507,476,537,534,526,501,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 35, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,523,499,529,491,491,516,486,534,513,507,514,510],
[516,0,506,521,519,512,505,530,498,517,552,513,521,517],
[478,495,0,499,510,508,506,477,459,493,505,504,504,494],
[502,480,502,0,523,485,495,498,509,478,509,519,524,494],
[472,482,491,478,0,510,504,492,469,489,506,488,502,496],
[510,489,493,516,491,0,500,508,486,484,522,501,511,493],
[510,496,495,506,497,501,0,507,471,484,506,504,500,496],
[485,471,524,503,509,493,494,0,456,485,514,487,501,492],
[515,503,542,492,532,515,530,545,0,517,528,545,529,516],
[467,484,508,523,512,517,517,516,484,0,504,500,529,502],
[488,449,496,492,495,479,495,487,473,497,0,483,507,485],
[494,488,497,482,513,500,497,514,456,501,518,0,506,488],
[487,480,497,477,499,490,501,500,472,472,494,495,0,480],
[491,484,507,507,505,508,505,509,485,499,516,513,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 36, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,513,493,537,517,523,516,512,515,531,502,499,487],
[518,0,473,429,526,509,471,531,466,529,495,479,471,518],
[488,528,0,491,489,512,499,505,461,509,507,511,494,474],
[508,572,510,0,502,532,523,548,526,548,536,506,485,502],
[464,475,512,499,0,497,498,495,506,529,512,465,463,534],
[484,492,489,469,504,0,489,489,472,506,471,498,452,489],
[478,530,502,478,503,512,0,530,523,529,525,499,486,503],
[485,470,496,453,506,512,471,0,484,498,490,485,454,479],
[489,535,540,475,495,529,478,517,0,537,523,522,539,488],
[486,472,492,453,472,495,472,503,464,0,486,472,442,498],
[470,506,494,465,489,530,476,511,478,515,0,469,457,496],
[499,522,490,495,536,503,502,516,479,529,532,0,513,516],
[502,530,507,516,538,549,515,547,462,559,544,488,0,524],
[514,483,527,499,467,512,498,522,513,503,505,485,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 37, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,505,495,505,485,509,510,511,517,518,528,488,509],
[516,0,499,501,495,496,514,489,501,539,524,513,490,487],
[496,502,0,505,506,506,517,491,498,507,507,509,510,530],
[506,500,496,0,505,501,516,494,496,520,518,526,483,521],
[496,506,495,496,0,504,514,496,516,527,497,515,489,516],
[516,505,495,500,497,0,514,529,522,525,518,530,506,499],
[492,487,484,485,487,487,0,508,512,526,500,489,503,503],
[491,512,510,507,505,472,493,0,495,513,511,516,494,523],
[490,500,503,505,485,479,489,506,0,513,511,491,474,497],
[484,462,494,481,474,476,475,488,488,0,492,496,458,487],
[483,477,494,483,504,483,501,490,490,509,0,509,493,510],
[473,488,492,475,486,471,512,485,510,505,492,0,481,495],
[513,511,491,518,512,495,498,507,527,543,508,520,0,505],
[492,514,471,480,485,502,498,478,504,514,491,506,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 38, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,486,518,517,508,525,522,529,515,518,521,500,498],
[484,0,494,529,509,496,501,494,507,493,495,499,516,495],
[515,507,0,528,516,495,530,505,508,519,514,507,521,510],
[483,472,473,0,491,473,481,494,477,499,481,506,516,464],
[484,492,485,510,0,492,506,480,491,488,485,515,503,485],
[493,505,506,528,509,0,532,489,509,516,500,514,514,488],
[476,500,471,520,495,469,0,498,512,499,506,504,510,499],
[479,507,496,507,521,512,503,0,490,495,513,514,508,521],
[472,494,493,524,510,492,489,511,0,494,508,498,509,505],
[486,508,482,502,513,485,502,506,507,0,476,533,493,484],
[483,506,487,520,516,501,495,488,493,525,0,515,523,483],
[480,502,494,495,486,487,497,487,503,468,486,0,510,476],
[501,485,480,485,498,487,491,493,492,508,478,491,0,470],
[503,506,491,537,516,513,502,480,496,517,518,525,531,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 39, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,497,498,516,545,496,506,500,534,532,512,483,518],
[491,0,502,521,510,521,495,485,463,525,508,501,508,497],
[504,499,0,525,526,517,526,503,530,526,515,522,496,499],
[503,480,476,0,498,522,499,498,506,529,511,512,503,483],
[485,491,475,503,0,490,473,486,479,492,501,482,486,477],
[456,480,484,479,511,0,466,472,491,506,494,476,490,488],
[505,506,475,502,528,535,0,498,506,515,493,489,503,513],
[495,516,498,503,515,529,503,0,498,511,500,499,479,499],
[501,538,471,495,522,510,495,503,0,539,492,508,491,515],
[467,476,475,472,509,495,486,490,462,0,481,480,483,508],
[469,493,486,490,500,507,508,501,509,520,0,500,483,496],
[489,500,479,489,519,525,512,502,493,521,501,0,472,496],
[518,493,505,498,515,511,498,522,510,518,518,529,0,507],
[483,504,502,518,524,513,488,502,486,493,505,505,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 40, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,527,447,483,480,508,446,503,517,470,488,495,549],
[548,0,542,529,536,538,490,469,474,530,445,482,535,492],
[474,459,0,521,443,461,543,497,477,487,459,510,449,484],
[554,472,480,0,463,446,492,488,479,545,475,508,475,498],
[518,465,558,538,0,549,548,511,516,519,515,532,480,526],
[521,463,540,555,452,0,492,483,538,526,424,513,460,525],
[493,511,458,509,453,509,0,475,473,478,442,516,481,548],
[555,532,504,513,490,518,526,0,496,496,531,559,500,556],
[498,527,524,522,485,463,528,505,0,475,442,499,491,517],
[484,471,514,456,482,475,523,505,526,0,477,522,425,507],
[531,556,542,526,486,577,559,470,559,524,0,545,491,555],
[513,519,491,493,469,488,485,442,502,479,456,0,460,558],
[506,466,552,526,521,541,520,501,510,576,510,541,0,535],
[452,509,517,503,475,476,453,445,484,494,446,443,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 41, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,519,462,516,448,413,493,446,440,511,430,490,512],
[512,0,492,468,478,455,410,481,477,488,522,475,494,515],
[482,509,0,469,506,434,466,512,508,482,548,453,483,492],
[539,533,532,0,536,490,470,536,511,480,563,469,484,522],
[485,523,495,465,0,408,456,535,472,474,522,442,468,470],
[553,546,567,511,593,0,468,517,543,580,532,498,553,504],
[588,591,535,531,545,533,0,602,502,479,610,559,577,558],
[508,520,489,465,466,484,399,0,466,452,514,496,517,480],
[555,524,493,490,529,458,499,535,0,446,524,518,474,516],
[561,513,519,521,527,421,522,549,555,0,581,528,459,508],
[490,479,453,438,479,469,391,487,477,420,0,486,450,484],
[571,526,548,532,559,503,442,505,483,473,515,0,479,497],
[511,507,518,517,533,448,424,484,527,542,551,522,0,473],
[489,486,509,479,531,497,443,521,485,493,517,504,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 42, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,528,522,505,538,544,469,552,562,403,544,470,541],
[546,0,546,541,476,543,600,448,542,525,492,556,520,555],
[473,455,0,506,418,523,528,432,517,489,403,489,436,528],
[479,460,495,0,424,501,537,408,525,453,378,460,490,497],
[496,525,583,577,0,559,583,484,591,526,519,542,503,602],
[463,458,478,500,442,0,526,458,520,490,435,478,481,538],
[457,401,473,464,418,475,0,416,507,471,362,520,430,468],
[532,553,569,593,517,543,585,0,608,611,480,573,504,612],
[449,459,484,476,410,481,494,393,0,447,398,478,422,530],
[439,476,512,548,475,511,530,390,554,0,434,487,504,536],
[598,509,598,623,482,566,639,521,603,567,0,592,554,627],
[457,445,512,541,459,523,481,428,523,514,409,0,476,503],
[531,481,565,511,498,520,571,497,579,497,447,525,0,580],
[460,446,473,504,399,463,533,389,471,465,374,498,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 43, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,567,517,494,577,570,532,597,577,519,565,574,514,498],
[434,0,468,446,539,464,492,565,535,451,522,517,472,472],
[484,533,0,449,582,536,525,544,521,496,516,561,472,477],
[507,555,552,0,535,490,531,498,560,517,539,554,500,505],
[424,462,419,466,0,467,455,474,483,462,473,451,438,445],
[431,537,465,511,534,0,515,514,554,495,514,558,532,463],
[469,509,476,470,546,486,0,525,538,502,509,499,451,454],
[404,436,457,503,527,487,476,0,494,500,418,514,422,453],
[424,466,480,441,518,447,463,507,0,445,436,531,420,442],
[482,550,505,484,539,506,499,501,556,0,467,541,457,451],
[436,479,485,462,528,487,492,583,565,534,0,565,463,491],
[427,484,440,447,550,443,502,487,470,460,436,0,430,454],
[487,529,529,501,563,469,550,579,581,544,538,571,0,505],
[503,529,524,496,556,538,547,548,559,550,510,547,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 44, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,619,618,630,493,604,532,444,351,453,462,494,569,649],
[382,0,366,489,199,499,421,367,479,491,382,416,504,456],
[383,635,0,534,351,567,501,386,507,512,588,494,553,482],
[371,512,467,0,359,471,448,483,406,500,378,430,621,333],
[508,802,650,642,0,630,530,574,486,557,484,535,720,537],
[397,502,434,530,371,0,516,457,322,492,555,428,659,418],
[469,580,500,553,471,485,0,382,366,530,496,392,625,520],
[557,634,615,518,427,544,619,0,539,580,591,621,611,550],
[650,522,494,595,515,679,635,462,0,558,577,572,640,529],
[548,510,489,501,444,509,471,421,443,0,499,505,577,630],
[539,619,413,623,517,446,505,410,424,502,0,446,536,485],
[507,585,507,571,466,573,609,380,429,496,555,0,512,588],
[432,497,448,380,281,342,376,390,361,424,465,489,0,466],
[352,545,519,668,464,583,481,451,472,371,516,413,535,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 45, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,526,466,446,472,495,443,539,522,614,479,495,468],
[496,0,568,518,531,505,552,547,454,555,670,462,463,524],
[475,433,0,321,336,357,503,371,424,344,498,349,409,352],
[535,483,680,0,485,497,509,475,618,544,608,464,475,461],
[555,470,665,516,0,574,516,461,586,575,626,507,513,494],
[529,496,644,504,427,0,534,478,532,549,598,513,475,481],
[506,449,498,492,485,467,0,427,508,401,592,446,435,518],
[558,454,630,526,540,523,574,0,610,564,674,500,515,483],
[462,547,577,383,415,469,493,391,0,504,630,439,477,486],
[479,446,657,457,426,452,600,437,497,0,620,420,500,508],
[387,331,503,393,375,403,409,327,371,381,0,334,382,375],
[522,539,652,537,494,488,555,501,562,581,667,0,436,454],
[506,538,592,526,488,526,566,486,524,501,619,565,0,509],
[533,477,649,540,507,520,483,518,515,493,626,547,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 46, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,528,516,515,564,459,504,502,497,488,474,575,552],
[487,0,536,542,474,577,438,480,545,532,455,556,526,508],
[473,465,0,512,408,521,433,447,471,502,451,511,463,524],
[485,459,489,0,454,510,454,425,478,484,494,489,444,538],
[486,527,593,547,0,566,526,523,519,542,501,535,522,505],
[437,424,480,491,435,0,412,430,488,488,427,428,439,488],
[542,563,568,547,475,589,0,506,541,554,453,537,588,589],
[497,521,554,576,478,571,495,0,565,518,492,527,505,566],
[499,456,530,523,482,513,460,436,0,499,499,535,478,491],
[504,469,499,517,459,513,447,483,502,0,436,547,483,525],
[513,546,550,507,500,574,548,509,502,565,0,497,557,524],
[527,445,490,512,466,573,464,474,466,454,504,0,475,527],
[426,475,538,557,479,562,413,496,523,518,444,526,0,536],
[449,493,477,463,496,513,412,435,510,476,477,474,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 47, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,523,497,500,533,493,508,513,511,507,529,512,504],
[503,0,512,480,507,507,482,486,518,520,505,521,518,484],
[478,489,0,456,491,502,467,474,509,494,484,489,492,467],
[504,521,545,0,512,534,505,487,527,505,525,546,520,513],
[501,494,510,489,0,516,486,491,512,514,499,533,497,485],
[468,494,499,467,485,0,464,448,483,520,497,498,494,459],
[508,519,534,496,515,537,0,488,531,542,513,547,524,502],
[493,515,527,514,510,553,513,0,549,541,535,531,505,501],
[488,483,492,474,489,518,470,452,0,504,478,508,502,471],
[490,481,507,496,487,481,459,460,497,0,489,519,504,454],
[494,496,517,476,502,504,488,466,523,512,0,525,497,469],
[472,480,512,455,468,503,454,470,493,482,476,0,477,472],
[489,483,509,481,504,507,477,496,499,497,504,524,0,467],
[497,517,534,488,516,542,499,500,530,547,532,529,534,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 48, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,510,466,454,485,463,444,492,453,518,514,475,521],
[560,0,512,491,484,568,550,523,544,563,538,624,537,568],
[491,489,0,465,453,475,452,452,496,463,433,460,422,464],
[535,510,536,0,518,553,522,499,551,571,582,553,499,493],
[547,517,548,483,0,489,509,507,576,515,489,546,505,485],
[516,433,526,448,512,0,493,464,549,525,467,544,497,499],
[538,451,549,479,492,508,0,458,515,492,525,543,509,542],
[557,478,549,502,494,537,543,0,603,510,530,588,523,553],
[509,457,505,450,425,452,486,398,0,468,448,517,471,472],
[548,438,538,430,486,476,509,491,533,0,477,522,506,500],
[483,463,568,419,512,534,476,471,553,524,0,607,493,541],
[487,377,541,448,455,457,458,413,484,479,394,0,461,430],
[526,464,579,502,496,504,492,478,530,495,508,540,0,527],
[480,433,537,508,516,502,459,448,529,501,460,571,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 49, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,521,538,536,611,463,529,497,549,523,552,486,511,536],
[480,0,543,471,560,486,495,498,502,504,526,470,491,529],
[463,458,0,476,568,429,472,504,469,443,439,432,438,458],
[465,530,525,0,565,462,501,494,496,526,546,507,466,508],
[390,441,433,436,0,430,407,419,454,443,446,379,417,406],
[538,515,572,539,571,0,602,532,566,519,521,482,537,502],
[472,506,529,500,594,399,0,536,547,530,513,451,540,467],
[504,503,497,507,582,469,465,0,539,490,476,454,500,497],
[452,499,532,505,547,435,454,462,0,468,483,457,447,461],
[478,497,558,475,558,482,471,511,533,0,511,465,486,485],
[449,475,562,455,555,480,488,525,518,490,0,491,518,467],
[515,531,569,494,622,519,550,547,544,536,510,0,545,496],
[490,510,563,535,584,464,461,501,554,515,483,456,0,487],
[465,472,543,493,595,499,534,504,540,516,534,505,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 50, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,492,507,517,502,502,517,544,527,509,487,439,548],
[575,0,534,500,556,553,527,505,548,566,524,562,504,589],
[509,467,0,473,547,512,525,533,554,574,508,515,497,584],
[494,501,528,0,533,573,530,505,559,544,523,504,492,565],
[484,445,454,468,0,507,461,505,498,512,480,510,449,563],
[499,448,489,428,494,0,490,498,527,532,504,504,473,557],
[499,474,476,471,540,511,0,528,540,498,525,519,466,552],
[484,496,468,496,496,503,473,0,519,524,540,492,478,527],
[457,453,447,442,503,474,461,482,0,513,485,498,473,527],
[474,435,427,457,489,469,503,477,488,0,468,475,464,521],
[492,477,493,478,521,497,476,461,516,533,0,496,466,546],
[514,439,486,497,491,497,482,509,503,526,505,0,454,564],
[562,497,504,509,552,528,535,523,528,537,535,547,0,562],
[453,412,417,436,438,444,449,474,474,480,455,437,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 51, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,497,509,527,497,567,487,474,467,500,504,521,481],
[508,0,497,483,538,548,545,481,531,527,531,520,556,498],
[504,504,0,528,513,504,545,475,510,477,526,482,539,518],
[492,518,473,0,475,482,506,481,477,500,509,456,526,438],
[474,463,488,526,0,492,543,475,484,507,481,456,501,470],
[504,453,497,519,509,0,544,502,503,499,461,462,501,488],
[434,456,456,495,458,457,0,467,475,465,470,454,490,405],
[514,520,526,520,526,499,534,0,498,491,540,490,469,514],
[527,470,491,524,517,498,526,503,0,527,519,509,533,522],
[534,474,524,501,494,502,536,510,474,0,481,472,481,481],
[501,470,475,492,520,540,531,461,482,520,0,460,523,502],
[497,481,519,545,545,539,547,511,492,529,541,0,577,541],
[480,445,462,475,500,500,511,532,468,520,478,424,0,445],
[520,503,483,563,531,513,596,487,479,520,499,460,556,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 52, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,475,478,475,491,493,482,492,497,513,469,470,490],
[532,0,507,496,503,506,504,491,503,508,526,493,482,519],
[526,494,0,511,482,510,508,497,501,493,510,474,487,507],
[523,505,490,0,492,496,498,500,521,510,534,495,494,501],
[526,498,519,509,0,484,509,485,500,501,507,485,503,500],
[510,495,491,505,517,0,499,485,521,499,507,488,482,504],
[508,497,493,503,492,502,0,504,515,513,522,502,505,512],
[519,510,504,501,516,516,497,0,518,493,523,485,497,514],
[509,498,500,480,501,480,486,483,0,489,520,477,487,500],
[504,493,508,491,500,502,488,508,512,0,529,493,498,494],
[488,475,491,467,494,494,479,478,481,472,0,468,463,482],
[532,508,527,506,516,513,499,516,524,508,533,0,496,504],
[531,519,514,507,498,519,496,504,514,503,538,505,0,514],
[511,482,494,500,501,497,489,487,501,507,519,497,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 53, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,499,505,515,544,509,504,475,528,510,508,527,484],
[502,0,506,529,488,500,463,459,478,495,465,487,484,495],
[502,495,0,485,496,492,440,464,474,483,467,501,497,459],
[496,472,516,0,491,517,465,462,472,519,499,497,504,476],
[486,513,505,510,0,527,492,491,463,507,485,517,471,470],
[457,501,509,484,474,0,469,453,459,506,460,509,453,464],
[492,538,561,536,509,532,0,517,505,499,507,547,513,495],
[497,542,537,539,510,548,484,0,519,494,521,538,517,512],
[526,523,527,529,538,542,496,482,0,530,513,539,501,503],
[473,506,518,482,494,495,502,507,471,0,498,519,481,476],
[491,536,534,502,516,541,494,480,488,503,0,504,510,502],
[493,514,500,504,484,492,454,463,462,482,497,0,478,510],
[474,517,504,497,530,548,488,484,500,520,491,523,0,480],
[517,506,542,525,531,537,506,489,498,525,499,491,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 54, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,497,473,450,485,461,474,464,474,449,452,532,473],
[505,0,498,505,473,492,494,480,487,504,489,497,506,490],
[504,503,0,510,503,509,519,489,508,496,493,490,531,478],
[528,496,491,0,499,511,495,460,491,501,502,482,533,494],
[551,528,498,502,0,521,482,496,521,533,472,504,536,508],
[516,509,492,490,480,0,503,471,487,470,491,473,508,484],
[540,507,482,506,519,498,0,487,525,516,495,497,544,496],
[527,521,512,541,505,530,514,0,530,511,512,536,545,493],
[537,514,493,510,480,514,476,471,0,494,487,470,513,504],
[527,497,505,500,468,531,485,490,507,0,479,493,512,483],
[552,512,508,499,529,510,506,489,514,522,0,505,510,510],
[549,504,511,519,497,528,504,465,531,508,496,0,532,468],
[469,495,470,468,465,493,457,456,488,489,491,469,0,468],
[528,511,523,507,493,517,505,508,497,518,491,533,533,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 55, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,548,548,493,484,450,498,543,518,531,508,478,511,479],
[453,0,510,456,478,475,485,502,449,455,490,472,470,448],
[453,491,0,478,495,433,470,480,495,495,462,433,489,482],
[508,545,523,0,527,493,514,506,494,527,526,490,509,515],
[517,523,506,474,0,481,493,492,529,505,460,457,469,452],
[551,526,568,508,520,0,507,543,501,539,509,498,567,541],
[503,516,531,487,508,494,0,493,492,523,488,510,492,465],
[458,499,521,495,509,458,508,0,523,494,466,449,500,450],
[483,552,506,507,472,500,509,478,0,498,501,454,526,438],
[470,546,506,474,496,462,478,507,503,0,499,506,488,453],
[493,511,539,475,541,492,513,535,500,502,0,469,520,503],
[523,529,568,511,544,503,491,552,547,495,532,0,480,509],
[490,531,512,492,532,434,509,501,475,513,481,521,0,506],
[522,553,519,486,549,460,536,551,563,548,498,492,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 56, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,573,522,466,476,453,433,428,513,565,447,601,479,514],
[428,0,477,262,454,390,325,428,453,526,503,435,371,450],
[479,524,0,474,456,444,431,519,429,529,410,573,460,467],
[535,739,527,0,562,530,514,498,512,642,515,607,518,567],
[525,547,545,439,0,483,426,540,500,524,429,534,434,573],
[548,611,557,471,518,0,451,521,410,569,549,619,465,503],
[568,676,570,487,575,550,0,570,505,589,555,627,446,541],
[573,573,482,503,461,480,431,0,442,500,432,559,459,479],
[488,548,572,489,501,591,496,559,0,567,491,579,594,584],
[436,475,472,359,477,432,412,501,434,0,455,536,371,416],
[554,498,591,486,572,452,446,569,510,546,0,662,460,605],
[400,566,428,394,467,382,374,442,422,465,339,0,415,458],
[522,630,541,483,567,536,555,542,407,630,541,586,0,591],
[487,551,534,434,428,498,460,522,417,585,396,543,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 57, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,489,480,518,488,494,487,492,519,479,540,526,509],
[516,0,477,525,466,533,480,528,463,538,495,550,514,490],
[512,524,0,501,534,518,495,527,520,513,561,518,517,510],
[521,476,500,0,528,519,519,503,485,487,523,533,528,486],
[483,535,467,473,0,519,535,534,493,522,496,503,507,510],
[513,468,483,482,482,0,471,464,481,518,455,532,548,511],
[507,521,506,482,466,530,0,488,479,539,516,547,539,515],
[514,473,474,498,467,537,513,0,514,491,476,506,519,474],
[509,538,481,516,508,520,522,487,0,521,514,550,518,532],
[482,463,488,514,479,483,462,510,480,0,474,484,510,467],
[522,506,440,478,505,546,485,525,487,527,0,519,525,525],
[461,451,483,468,498,469,454,495,451,517,482,0,513,473],
[475,487,484,473,494,453,462,482,483,491,476,488,0,471],
[492,511,491,515,491,490,486,527,469,534,476,528,530,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 58, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,481,485,514,509,546,548,494,516,489,517,479,480],
[508,0,513,476,523,530,532,532,471,506,501,482,513,489],
[520,488,0,507,556,516,507,506,501,504,482,512,498,493],
[516,525,494,0,526,534,503,501,491,526,508,491,546,515],
[487,478,445,475,0,505,510,491,512,459,461,452,482,476],
[492,471,485,467,496,0,526,533,500,488,514,509,508,455],
[455,469,494,498,491,475,0,468,447,479,484,459,514,457],
[453,469,495,500,510,468,533,0,481,490,503,478,497,494],
[507,530,500,510,489,501,554,520,0,487,486,488,525,518],
[485,495,497,475,542,513,522,511,514,0,499,491,509,453],
[512,500,519,493,540,487,517,498,515,502,0,502,525,471],
[484,519,489,510,549,492,542,523,513,510,499,0,523,507],
[522,488,503,455,519,493,487,504,476,492,476,478,0,490],
[521,512,508,486,525,546,544,507,483,548,530,494,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 59, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,493,498,521,527,458,465,468,485,552,451,476,448],
[523,0,449,425,460,560,458,539,497,447,532,438,475,474],
[508,552,0,487,564,547,510,533,495,495,621,511,522,501],
[503,576,514,0,553,539,486,499,495,543,553,499,456,464],
[480,541,437,448,0,517,472,488,488,466,571,426,493,519],
[474,441,454,462,484,0,497,474,399,494,602,422,482,483],
[543,543,491,515,529,504,0,507,454,494,574,521,481,512],
[536,462,468,502,513,527,494,0,470,570,587,512,479,494],
[533,504,506,506,513,602,547,531,0,560,624,478,501,505],
[516,554,506,458,535,507,507,431,441,0,502,470,485,486],
[449,469,380,448,430,399,427,414,377,499,0,377,414,375],
[550,563,490,502,575,579,480,489,523,531,624,0,444,522],
[525,526,479,545,508,519,520,522,500,516,587,557,0,476],
[553,527,500,537,482,518,489,507,496,515,626,479,525,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 60, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,525,513,511,541,506,557,509,546,536,540,529,538,494],
[476,0,476,464,462,470,512,466,468,503,495,457,490,427],
[488,525,0,511,462,480,478,497,503,484,489,556,528,503],
[490,537,490,0,499,470,525,452,495,549,472,516,520,501],
[460,539,539,502,0,513,492,522,504,507,449,505,523,494],
[495,531,521,531,488,0,495,545,488,554,509,560,554,545],
[444,489,523,476,509,506,0,468,511,474,492,507,530,456],
[492,535,504,549,479,456,533,0,488,568,515,513,525,513],
[455,533,498,506,497,513,490,513,0,473,487,546,538,468],
[465,498,517,452,494,447,527,433,528,0,493,518,540,467],
[461,506,512,529,552,492,509,486,514,508,0,527,564,504],
[472,544,445,485,496,441,494,488,455,483,474,0,501,504],
[463,511,473,481,478,447,471,476,463,461,437,500,0,513],
[507,574,498,500,507,456,545,488,533,534,497,497,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 61, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,525,545,497,523,500,494,464,567,547,501,452,521],
[572,0,502,559,506,485,458,477,506,567,534,473,484,494],
[476,499,0,513,467,534,488,509,498,528,528,483,473,473],
[456,442,488,0,478,468,485,458,543,511,582,523,482,508],
[504,495,534,523,0,516,473,509,528,546,518,473,520,524],
[478,516,467,533,485,0,506,508,514,543,544,523,501,495],
[501,543,513,516,528,495,0,522,517,499,530,533,514,546],
[507,524,492,543,492,493,479,0,476,502,554,559,486,514],
[537,495,503,458,473,487,484,525,0,496,559,470,444,449],
[434,434,473,490,455,458,502,499,505,0,495,464,475,466],
[454,467,473,419,483,457,471,447,442,506,0,479,435,471],
[500,528,518,478,528,478,468,442,531,537,522,0,501,456],
[549,517,528,519,481,500,487,515,557,526,566,500,0,450],
[480,507,528,493,477,506,455,487,552,535,530,545,551,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 62, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,350,469,456,463,444,487,469,489,494,467,504,386,525],
[651,0,522,607,594,504,540,604,494,630,563,573,511,572],
[532,479,0,550,415,462,503,481,480,600,485,508,402,575],
[545,394,451,0,391,427,512,462,564,521,401,400,380,497],
[538,407,586,610,0,495,549,457,555,609,483,542,423,576],
[557,497,539,574,506,0,571,503,523,573,481,548,517,596],
[514,461,498,489,452,430,0,569,522,540,424,524,450,566],
[532,397,520,539,544,498,432,0,486,508,439,461,416,573],
[512,507,521,437,446,478,479,515,0,501,524,536,469,544],
[507,371,401,480,392,428,461,493,500,0,459,425,358,528],
[534,438,516,600,518,520,577,562,477,542,0,570,482,594],
[497,428,493,601,459,453,477,540,465,576,431,0,417,531],
[615,490,599,621,578,484,551,585,532,643,519,584,0,668],
[476,429,426,504,425,405,435,428,457,473,407,470,333,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 63, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,488,453,455,520,474,476,495,544,495,480,475,526],
[504,0,477,484,486,501,493,505,493,530,497,441,504,477],
[513,524,0,488,504,534,531,543,524,565,539,527,507,515],
[548,517,513,0,533,548,526,516,531,546,516,497,548,542],
[546,515,497,468,0,536,554,507,511,569,524,485,511,572],
[481,500,467,453,465,0,502,467,471,504,512,478,506,487],
[527,508,470,475,447,499,0,495,495,579,507,479,474,514],
[525,496,458,485,494,534,506,0,510,544,517,497,543,534],
[506,508,477,470,490,530,506,491,0,543,512,472,528,528],
[457,471,436,455,432,497,422,457,458,0,485,441,469,479],
[506,504,462,485,477,489,494,484,489,516,0,460,497,493],
[521,560,474,504,516,523,522,504,529,560,541,0,508,525],
[526,497,494,453,490,495,527,458,473,532,504,493,0,521],
[475,524,486,459,429,514,487,467,473,522,508,476,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 64, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,527,509,487,516,531,508,506,560,524,503,525,535],
[490,0,518,501,483,507,528,513,497,540,539,499,506,513],
[474,483,0,496,461,495,467,506,492,505,538,505,470,492],
[492,500,505,0,499,522,503,513,515,532,533,547,510,530],
[514,518,540,502,0,512,519,518,496,553,523,522,506,512],
[485,494,506,479,489,0,535,543,504,518,511,515,509,526],
[470,473,534,498,482,466,0,513,459,497,506,501,517,533],
[493,488,495,488,483,458,488,0,461,508,498,483,478,502],
[495,504,509,486,505,497,542,540,0,544,531,543,500,536],
[441,461,496,469,448,483,504,493,457,0,507,475,463,482],
[477,462,463,468,478,490,495,503,470,494,0,468,486,494],
[498,502,496,454,479,486,500,518,458,526,533,0,527,527],
[476,495,531,491,495,492,484,523,501,538,515,474,0,527],
[466,488,509,471,489,475,468,499,465,519,507,474,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 65, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,497,509,441,540,507,536,489,475,522,483,518,503],
[499,0,446,499,487,532,519,484,507,476,487,496,518,493],
[504,555,0,531,511,529,520,528,511,521,511,500,549,504],
[492,502,470,0,489,554,548,508,499,470,511,515,505,531],
[560,514,490,512,0,523,531,514,510,492,536,503,530,512],
[461,469,472,447,478,0,492,474,452,428,478,457,475,487],
[494,482,481,453,470,509,0,493,451,457,520,462,472,495],
[465,517,473,493,487,527,508,0,471,479,484,457,485,501],
[512,494,490,502,491,549,550,530,0,497,524,511,532,512],
[526,525,480,531,509,573,544,522,504,0,511,524,539,519],
[479,514,490,490,465,523,481,517,477,490,0,486,526,501],
[518,505,501,486,498,544,539,544,490,477,515,0,539,519],
[483,483,452,496,471,526,529,516,469,462,475,462,0,482],
[498,508,497,470,489,514,506,500,489,482,500,482,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 66, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,503,515,507,479,511,501,474,485,527,525,503,495],
[499,0,507,509,520,474,511,510,482,508,509,511,486,504],
[498,494,0,512,523,490,483,497,474,472,515,499,484,488],
[486,492,489,0,495,480,471,498,465,477,494,512,471,485],
[494,481,478,506,0,471,474,475,470,491,486,509,465,475],
[522,527,511,521,530,0,522,516,489,497,540,527,499,522],
[490,490,518,530,527,479,0,523,501,504,539,498,495,515],
[500,491,504,503,526,485,478,0,464,490,527,509,501,513],
[527,519,527,536,531,512,500,537,0,517,546,540,512,516],
[516,493,529,524,510,504,497,511,484,0,504,527,502,508],
[474,492,486,507,515,461,462,474,455,497,0,500,464,484],
[476,490,502,489,492,474,503,492,461,474,501,0,481,501],
[498,515,517,530,536,502,506,500,489,499,537,520,0,511],
[506,497,513,516,526,479,486,488,485,493,517,500,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 67, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,549,547,538,524,513,525,523,561,545,527,515,527,488],
[452,0,513,519,532,493,479,544,529,508,528,467,515,489],
[454,488,0,508,483,474,486,488,501,478,515,467,526,516],
[463,482,493,0,453,476,433,504,500,491,515,470,510,482],
[477,469,518,548,0,492,441,531,525,496,511,470,495,479],
[488,508,527,525,509,0,508,562,523,504,519,488,520,505],
[476,522,515,568,560,493,0,507,539,492,539,534,533,515],
[478,457,513,497,470,439,494,0,508,480,508,445,496,468],
[440,472,500,501,476,478,462,493,0,461,495,444,505,451],
[456,493,523,510,505,497,509,521,540,0,514,498,522,483],
[474,473,486,486,490,482,462,493,506,487,0,460,483,467],
[486,534,534,531,531,513,467,556,557,503,541,0,517,548],
[474,486,475,491,506,481,468,505,496,479,518,484,0,469],
[513,512,485,519,522,496,486,533,550,518,534,453,532,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 68, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,449,479,496,491,485,464,474,466,475,466,467,459],
[556,0,469,536,503,499,516,515,507,498,490,505,496,483],
[552,532,0,525,499,510,499,527,514,524,492,509,493,511],
[522,465,476,0,512,477,510,475,471,501,491,485,465,480],
[505,498,502,489,0,504,485,485,484,478,504,506,492,472],
[510,502,491,524,497,0,490,495,499,475,501,501,507,479],
[516,485,502,491,516,511,0,479,521,468,489,506,510,523],
[537,486,474,526,516,506,522,0,530,494,530,506,537,521],
[527,494,487,530,517,502,480,471,0,479,530,483,491,504],
[535,503,477,500,523,526,533,507,522,0,505,506,504,480],
[526,511,509,510,497,500,512,471,471,496,0,476,497,462],
[535,496,492,516,495,500,495,495,518,495,525,0,512,470],
[534,505,508,536,509,494,491,464,510,497,504,489,0,498],
[542,518,490,521,529,522,478,480,497,521,539,531,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 69, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,547,451,539,435,458,429,409,441,476,518,489,494,436],
[454,0,379,440,468,355,427,428,430,466,422,423,427,443],
[550,622,0,569,532,526,568,479,557,498,558,500,524,528],
[462,561,432,0,482,424,499,446,505,428,502,466,536,462],
[566,533,469,519,0,481,505,432,437,458,515,463,513,464],
[543,646,475,577,520,0,499,488,519,499,585,474,526,452],
[572,574,433,502,496,502,0,470,478,496,535,475,514,513],
[592,573,522,555,569,513,531,0,549,478,534,520,546,489],
[560,571,444,496,564,482,523,452,0,474,529,490,526,458],
[525,535,503,573,543,502,505,523,527,0,549,474,574,511],
[483,579,443,499,486,416,466,467,472,452,0,535,470,441],
[512,578,501,535,538,527,526,481,511,527,466,0,556,512],
[507,574,477,465,488,475,487,455,475,427,531,445,0,461],
[565,558,473,539,537,549,488,512,543,490,560,489,540,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 70, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,484,480,484,514,496,530,517,497,505,504,498,486],
[485,0,486,480,490,498,479,536,479,482,487,497,503,489],
[517,515,0,493,486,519,491,552,499,478,502,518,494,521],
[521,521,508,0,490,502,492,545,516,496,489,503,490,494],
[517,511,515,511,0,533,529,542,529,515,507,531,499,524],
[487,503,482,499,468,0,480,547,505,496,502,504,503,513],
[505,522,510,509,472,521,0,551,521,528,503,515,509,508],
[471,465,449,456,459,454,450,0,472,459,469,456,448,463],
[484,522,502,485,472,496,480,529,0,484,477,477,483,458],
[504,519,523,505,486,505,473,542,517,0,493,478,509,488],
[496,514,499,512,494,499,498,532,524,508,0,516,503,514],
[497,504,483,498,470,497,486,545,524,523,485,0,479,504],
[503,498,507,511,502,498,492,553,518,492,498,522,0,505],
[515,512,480,507,477,488,493,538,543,513,487,497,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 71, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,502,495,543,504,515,511,456,479,513,505,489,500],
[515,0,490,520,545,520,522,502,494,516,495,503,484,492],
[499,511,0,514,511,490,531,465,483,523,522,474,473,481],
[506,481,487,0,527,521,492,506,462,508,486,499,480,489],
[458,456,490,474,0,481,460,458,434,473,457,443,445,489],
[497,481,511,480,520,0,517,501,499,508,500,487,465,512],
[486,479,470,509,541,484,0,520,460,491,515,486,475,479],
[490,499,536,495,543,500,481,0,481,515,529,491,501,508],
[545,507,518,539,567,502,541,520,0,526,524,497,481,497],
[522,485,478,493,528,493,510,486,475,0,490,496,502,500],
[488,506,479,515,544,501,486,472,477,511,0,474,493,486],
[496,498,527,502,558,514,515,510,504,505,527,0,466,501],
[512,517,528,521,556,536,526,500,520,499,508,535,0,505],
[501,509,520,512,512,489,522,493,504,501,515,500,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 72, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,460,544,569,362,408,340,448,391,570,296,410,466],
[583,0,464,534,548,460,499,543,559,613,505,493,462,522],
[541,537,0,504,593,484,534,498,577,418,621,440,391,615],
[457,467,497,0,463,450,509,436,564,436,445,356,445,438],
[432,453,408,538,0,424,532,439,593,520,570,476,347,615],
[639,541,517,551,577,0,546,585,567,581,576,519,483,494],
[593,502,467,492,469,455,0,433,510,489,587,411,412,352],
[661,458,503,565,562,416,568,0,497,610,555,492,568,517],
[553,442,424,437,408,434,491,504,0,446,645,346,466,540],
[610,388,583,565,481,420,512,391,555,0,549,418,431,501],
[431,496,380,556,431,425,414,446,356,452,0,220,338,446],
[705,508,561,645,525,482,590,509,655,583,781,0,583,598],
[591,539,610,556,654,518,589,433,535,570,663,418,0,612],
[535,479,386,563,386,507,649,484,461,500,555,403,389,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 73, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,451,467,507,484,467,535,519,526,466,492,475,500],
[538,0,441,445,584,442,509,446,534,451,454,521,473,445],
[550,560,0,506,528,486,524,528,569,520,487,528,551,515],
[534,556,495,0,494,502,531,479,500,478,461,519,513,539],
[494,417,473,507,0,437,460,456,539,455,417,468,427,506],
[517,559,515,499,564,0,551,513,549,545,491,591,497,574],
[534,492,477,470,541,450,0,462,450,452,496,518,468,528],
[466,555,473,522,545,488,539,0,531,519,508,455,556,536],
[482,467,432,501,462,452,551,470,0,492,485,500,461,475],
[475,550,481,523,546,456,549,482,509,0,497,596,535,566],
[535,547,514,540,584,510,505,493,516,504,0,576,556,547],
[509,480,473,482,533,410,483,546,501,405,425,0,505,536],
[526,528,450,488,574,504,533,445,540,466,445,496,0,543],
[501,556,486,462,495,427,473,465,526,435,454,465,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 74, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,481,488,512,482,482,487,486,537,434,520,494,527],
[529,0,510,464,534,504,493,512,539,555,479,523,543,524],
[520,491,0,509,524,474,479,493,501,545,478,501,522,504],
[513,537,492,0,539,524,491,540,530,538,479,528,535,502],
[489,467,477,462,0,428,437,409,454,493,423,467,450,489],
[519,497,527,477,573,0,476,470,495,531,509,521,534,508],
[519,508,522,510,564,525,0,519,502,542,500,540,536,541],
[514,489,508,461,592,531,482,0,526,538,476,518,492,492],
[515,462,500,471,547,506,499,475,0,532,447,511,511,507],
[464,446,456,463,508,470,459,463,469,0,446,492,499,430],
[567,522,523,522,578,492,501,525,554,555,0,518,574,518],
[481,478,500,473,534,480,461,483,490,509,483,0,521,490],
[507,458,479,466,551,467,465,509,490,502,427,480,0,496],
[474,477,497,499,512,493,460,509,494,571,483,511,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 75, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,520,536,534,530,486,508,487,520,461,528,528,514],
[517,0,524,552,529,509,499,488,462,486,448,519,493,537],
[481,477,0,536,501,514,509,485,454,509,454,513,470,521],
[465,449,465,0,467,433,438,440,451,455,457,453,466,467],
[467,472,500,534,0,513,496,459,444,514,449,477,479,508],
[471,492,487,568,488,0,476,489,485,500,489,505,491,510],
[515,502,492,563,505,525,0,488,490,502,502,509,481,519],
[493,513,516,561,542,512,513,0,479,512,494,516,489,502],
[514,539,547,550,557,516,511,522,0,509,481,547,530,548],
[481,515,492,546,487,501,499,489,492,0,480,507,518,512],
[540,553,547,544,552,512,499,507,520,521,0,529,515,541],
[473,482,488,548,524,496,492,485,454,494,472,0,499,514],
[473,508,531,535,522,510,520,512,471,483,486,502,0,522],
[487,464,480,534,493,491,482,499,453,489,460,487,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 76, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,539,496,586,508,523,542,503,530,483,509,510,488],
[485,0,538,486,527,452,514,505,553,485,455,536,533,505],
[462,463,0,511,529,499,507,485,507,501,441,518,558,492],
[505,515,490,0,533,484,493,510,530,473,491,555,525,502],
[415,474,472,468,0,442,463,443,426,439,445,461,473,438],
[493,549,502,517,559,0,549,543,512,548,527,529,563,498],
[478,487,494,508,538,452,0,484,500,480,448,530,559,463],
[459,496,516,491,558,458,517,0,522,479,503,533,537,475],
[498,448,494,471,575,489,501,479,0,460,444,490,555,498],
[471,516,500,528,562,453,521,522,541,0,525,533,574,479],
[518,546,560,510,556,474,553,498,557,476,0,540,507,470],
[492,465,483,446,540,472,471,468,511,468,461,0,525,456],
[491,468,443,476,528,438,442,464,446,427,494,476,0,437],
[513,496,509,499,563,503,538,526,503,522,531,545,564,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 77, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,506,498,498,500,489,542,535,510,518,487,486,515],
[486,0,510,501,497,493,473,512,521,468,510,485,472,510],
[495,491,0,488,458,484,464,479,503,451,488,461,492,470],
[503,500,513,0,476,501,497,494,525,482,518,461,495,501],
[503,504,543,525,0,516,509,546,540,496,506,510,506,522],
[501,508,517,500,485,0,496,530,563,493,505,499,493,503],
[512,528,537,504,492,505,0,506,536,498,512,485,480,500],
[459,489,522,507,455,471,495,0,528,457,498,476,474,485],
[466,480,498,476,461,438,465,473,0,467,474,477,458,477],
[491,533,550,519,505,508,503,544,534,0,520,482,501,541],
[483,491,513,483,495,496,489,503,527,481,0,479,501,515],
[514,516,540,540,491,502,516,525,524,519,522,0,502,507],
[515,529,509,506,495,508,521,527,543,500,500,499,0,500],
[486,491,531,500,479,498,501,516,524,460,486,494,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 78, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,525,539,509,513,513,521,512,514,546,510,515,548],
[508,0,500,489,455,515,499,486,480,477,485,510,483,526],
[476,501,0,503,488,520,467,503,508,492,512,501,511,510],
[462,512,498,0,479,520,504,486,503,477,502,534,456,519],
[492,546,513,522,0,521,524,521,516,520,525,530,522,541],
[488,486,481,481,480,0,487,523,466,494,479,520,484,518],
[488,502,534,497,477,514,0,498,521,517,513,500,504,526],
[480,515,498,515,480,478,503,0,485,473,496,502,496,521],
[489,521,493,498,485,535,480,516,0,482,517,520,482,509],
[487,524,509,524,481,507,484,528,519,0,508,542,502,525],
[455,516,489,499,476,522,488,505,484,493,0,519,513,499],
[491,491,500,467,471,481,501,499,481,459,482,0,486,517],
[486,518,490,545,479,517,497,505,519,499,488,515,0,522],
[453,475,491,482,460,483,475,480,492,476,502,484,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 79, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,524,496,435,505,529,571,525,597,504,586,554,567,409],
[477,0,486,454,462,548,497,415,450,468,478,460,445,422],
[505,515,0,499,452,537,603,450,455,516,516,518,529,495],
[566,547,502,0,503,501,578,534,538,528,543,597,471,490],
[496,539,549,498,0,473,531,510,548,522,502,574,468,471],
[472,453,464,500,528,0,579,465,521,546,525,484,481,481],
[430,504,398,423,470,422,0,438,400,480,402,454,431,436],
[476,586,551,467,491,536,563,0,510,500,496,534,455,472],
[404,551,546,463,453,480,601,491,0,494,487,503,495,428],
[497,533,485,473,479,455,521,501,507,0,541,500,487,476],
[415,523,485,458,499,476,599,505,514,460,0,556,472,429],
[447,541,483,404,427,517,547,467,498,501,445,0,505,491],
[434,556,472,530,533,520,570,546,506,514,529,496,0,502],
[592,579,506,511,530,520,565,529,573,525,572,510,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 80, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,494,438,452,460,455,427,554,456,458,471,524,499],
[540,0,479,525,477,486,456,486,529,514,532,433,562,479],
[507,522,0,451,496,461,420,461,543,507,461,431,524,522],
[563,476,550,0,505,466,530,450,576,526,494,475,591,528],
[549,524,505,496,0,445,533,500,555,520,473,498,525,535],
[541,515,540,535,556,0,545,479,612,560,511,518,596,566],
[546,545,581,471,468,456,0,464,521,532,454,429,555,517],
[574,515,540,551,501,522,537,0,586,573,475,499,599,562],
[447,472,458,425,446,389,480,415,0,479,472,424,472,481],
[545,487,494,475,481,441,469,428,522,0,446,443,503,462],
[543,469,540,507,528,490,547,526,529,555,0,467,508,535],
[530,568,570,526,503,483,572,502,577,558,534,0,598,554],
[477,439,477,410,476,405,446,402,529,498,493,403,0,518],
[502,522,479,473,466,435,484,439,520,539,466,447,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 81, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,501,444,510,487,448,531,567,409,527,569,525,503],
[486,0,457,481,484,452,454,509,576,449,539,508,542,452],
[500,544,0,464,520,430,513,557,568,534,526,464,541,488],
[557,520,537,0,481,525,474,478,565,444,510,525,553,523],
[491,517,481,520,0,486,479,533,553,439,484,506,498,478],
[514,549,571,476,515,0,471,516,522,446,491,545,567,488],
[553,547,488,527,522,530,0,576,565,500,538,504,538,509],
[470,492,444,523,468,485,425,0,569,441,459,406,502,511],
[434,425,433,436,448,479,436,432,0,387,443,440,468,452],
[592,552,467,557,562,555,501,560,614,0,544,470,545,549],
[474,462,475,491,517,510,463,542,558,457,0,476,506,508],
[432,493,537,476,495,456,497,595,561,531,525,0,519,498],
[476,459,460,448,503,434,463,499,533,456,495,482,0,490],
[498,549,513,478,523,513,492,490,549,452,493,503,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 82, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,484,482,532,497,507,474,499,483,459,494,502,480],
[504,0,441,474,525,493,496,460,518,502,483,475,507,465],
[517,560,0,509,568,525,531,474,535,517,516,504,534,504],
[519,527,492,0,555,521,540,528,551,541,536,490,510,514],
[469,476,433,446,0,473,455,458,484,470,484,491,497,450],
[504,508,476,480,528,0,503,470,540,488,508,502,514,466],
[494,505,470,461,546,498,0,501,510,497,502,505,506,486],
[527,541,527,473,543,531,500,0,526,525,509,501,517,478],
[502,483,466,450,517,461,491,475,0,478,500,490,508,468],
[518,499,484,460,531,513,504,476,523,0,502,509,520,454],
[542,518,485,465,517,493,499,492,501,499,0,502,504,495],
[507,526,497,511,510,499,496,500,511,492,499,0,531,475],
[499,494,467,491,504,487,495,484,493,481,497,470,0,476],
[521,536,497,487,551,535,515,523,533,547,506,526,525,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 83, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,455,500,504,571,512,465,499,515,482,601,502,533],
[536,0,530,486,495,555,525,550,513,559,522,601,519,534],
[546,471,0,482,490,590,478,542,480,544,517,603,480,511],
[501,515,519,0,510,581,502,496,486,549,502,623,520,514],
[497,506,511,491,0,575,485,545,519,573,510,588,473,545],
[430,446,411,420,426,0,455,476,482,544,484,544,463,498],
[489,476,523,499,516,546,0,501,470,540,500,605,496,528],
[536,451,459,505,456,525,500,0,508,508,517,573,475,485],
[502,488,521,515,482,519,531,493,0,551,526,601,502,509],
[486,442,457,452,428,457,461,493,450,0,515,555,448,485],
[519,479,484,499,491,517,501,484,475,486,0,534,502,507],
[400,400,398,378,413,457,396,428,400,446,467,0,442,424],
[499,482,521,481,528,538,505,526,499,553,499,559,0,561],
[468,467,490,487,456,503,473,516,492,516,494,577,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 84, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,520,494,492,486,520,511,451,512,497,481,481,495,487],
[481,0,489,499,516,506,560,440,527,525,500,519,504,523],
[507,512,0,524,536,514,519,492,536,515,523,508,517,520],
[509,502,477,0,543,512,519,459,499,478,496,510,513,541],
[515,485,465,458,0,512,522,433,526,511,465,477,540,473],
[481,495,487,489,489,0,511,491,496,497,491,519,517,479],
[490,441,482,482,479,490,0,442,493,517,481,444,514,484],
[550,561,509,542,568,510,559,0,573,542,525,523,564,497],
[489,474,465,502,475,505,508,428,0,495,450,483,500,465],
[504,476,486,523,490,504,484,459,506,0,478,507,516,460],
[520,501,478,505,536,510,520,476,551,523,0,523,552,506],
[520,482,493,491,524,482,557,478,518,494,478,0,501,517],
[506,497,484,488,461,484,487,437,501,485,449,500,0,467],
[514,478,481,460,528,522,517,504,536,541,495,484,534,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 85, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,484,501,481,485,510,524,502,507,456,501,449,513],
[506,0,477,489,479,493,493,484,503,474,473,508,476,504],
[517,524,0,506,496,510,520,530,537,520,474,501,511,506],
[500,512,495,0,467,495,518,507,494,507,485,491,493,501],
[520,522,505,534,0,508,528,526,534,513,496,516,511,509],
[516,508,491,506,493,0,519,531,543,529,503,504,524,506],
[491,508,481,483,473,482,0,505,503,496,467,485,471,496],
[477,517,471,494,475,470,496,0,506,504,470,477,486,506],
[499,498,464,507,467,458,498,495,0,497,486,478,480,489],
[494,527,481,494,488,472,505,497,504,0,488,491,532,478],
[545,528,527,516,505,498,534,531,515,513,0,520,503,532],
[500,493,500,510,485,497,516,524,523,510,481,0,515,489],
[552,525,490,508,490,477,530,515,521,469,498,486,0,508],
[488,497,495,500,492,495,505,495,512,523,469,512,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 86, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,512,500,491,495,492,491,509,490,493,504,486,464],
[494,0,508,492,492,502,473,489,474,495,493,515,478,483],
[489,493,0,487,490,505,520,507,499,485,492,507,501,490],
[501,509,514,0,500,515,500,517,500,494,485,526,502,492],
[510,509,511,501,0,519,505,514,500,503,510,520,506,516],
[506,499,496,486,482,0,497,493,503,495,501,499,478,500],
[509,528,481,501,496,504,0,497,500,482,495,503,489,496],
[510,512,494,484,487,508,504,0,523,500,507,522,481,481],
[492,527,502,501,501,498,501,478,0,510,504,518,479,478],
[511,506,516,507,498,506,519,501,491,0,491,518,505,502],
[508,508,509,516,491,500,506,494,497,510,0,512,502,515],
[497,486,494,475,481,502,498,479,483,483,489,0,488,489],
[515,523,500,499,495,523,512,520,522,496,499,513,0,494],
[537,518,511,509,485,501,505,520,523,499,486,512,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 87, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,547,517,501,538,517,527,525,500,542,532,530,514,527],
[454,0,469,478,494,481,505,466,462,493,516,472,493,506],
[484,532,0,495,534,523,505,506,497,529,523,489,527,517],
[500,523,506,0,518,522,527,496,494,521,524,517,524,500],
[463,507,467,483,0,478,502,474,462,491,509,489,514,491],
[484,520,478,479,523,0,501,491,470,504,497,508,488,505],
[474,496,496,474,499,500,0,494,487,509,515,486,513,477],
[476,535,495,505,527,510,507,0,483,521,514,484,517,499],
[501,539,504,507,539,531,514,518,0,502,530,494,547,516],
[459,508,472,480,510,497,492,480,499,0,511,496,503,510],
[469,485,478,477,492,504,486,487,471,490,0,473,503,504],
[471,529,512,484,512,493,515,517,507,505,528,0,525,515],
[487,508,474,477,487,513,488,484,454,498,498,476,0,509],
[474,495,484,501,510,496,524,502,485,491,497,486,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 88, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,534,481,492,492,510,518,501,489,494,485,502,491,539],
[467,0,501,479,457,478,464,484,497,480,459,463,444,480],
[520,500,0,504,468,505,500,519,499,511,487,506,485,522],
[509,522,497,0,484,499,510,488,527,473,477,505,497,501],
[509,544,533,517,0,525,538,512,506,514,516,500,494,539],
[491,523,496,502,476,0,505,498,511,504,492,469,492,502],
[483,537,501,491,463,496,0,486,482,511,476,500,496,502],
[500,517,482,513,489,503,515,0,533,489,494,487,495,509],
[512,504,502,474,495,490,519,468,0,483,514,472,488,499],
[507,521,490,528,487,497,490,512,518,0,500,505,506,510],
[516,542,514,524,485,509,525,507,487,501,0,493,512,511],
[499,538,495,496,501,532,501,514,529,496,508,0,495,520],
[510,557,516,504,507,509,505,506,513,495,489,506,0,526],
[462,521,479,500,462,499,499,492,502,491,490,481,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 89, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,559,449,516,498,483,469,518,491,512,456,462,514],
[536,0,486,462,507,459,462,515,483,512,477,472,484,469],
[442,515,0,477,495,483,464,512,494,457,434,393,431,487],
[552,539,524,0,535,532,527,545,544,567,481,515,527,525],
[485,494,506,466,0,485,487,503,475,497,443,446,457,533],
[503,542,518,469,516,0,470,505,497,499,477,483,491,507],
[518,539,537,474,514,531,0,535,551,502,473,494,540,540],
[532,486,489,456,498,496,466,0,482,502,498,474,474,527],
[483,518,507,457,526,504,450,519,0,473,437,443,489,519],
[510,489,544,434,504,502,499,499,528,0,479,440,469,502],
[489,524,567,520,558,524,528,503,564,522,0,484,514,551],
[545,529,608,486,555,518,507,527,558,561,517,0,537,540],
[539,517,570,474,544,510,461,527,512,532,487,464,0,514],
[487,532,514,476,468,494,461,474,482,499,450,461,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 90, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,522,505,490,501,522,510,515,473,502,484,520,465],
[499,0,504,497,487,497,500,493,510,482,507,482,472,479],
[479,497,0,491,475,504,473,495,495,475,493,471,515,464],
[496,504,510,0,498,509,498,486,515,478,510,503,488,466],
[511,514,526,503,0,546,516,516,527,489,532,502,515,497],
[500,504,497,492,455,0,492,497,517,485,514,477,499,468],
[479,501,528,503,485,509,0,487,524,476,505,473,496,481],
[491,508,506,515,485,504,514,0,513,481,482,480,503,474],
[486,491,506,486,474,484,477,488,0,481,470,475,509,450],
[528,519,526,523,512,516,525,520,520,0,525,498,510,480],
[499,494,508,491,469,487,496,519,531,476,0,490,502,453],
[517,519,530,498,499,524,528,521,526,503,511,0,524,506],
[481,529,486,513,486,502,505,498,492,491,499,477,0,475],
[536,522,537,535,504,533,520,527,551,521,548,495,526,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 91, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,487,488,479,514,479,485,444,523,479,481,530,528],
[538,0,532,499,502,479,465,465,442,539,507,534,498,517],
[514,469,0,512,522,499,467,533,428,516,475,503,485,496],
[513,502,489,0,513,505,493,475,424,476,467,492,501,479],
[522,499,479,488,0,472,493,463,467,521,472,492,529,493],
[487,522,502,496,529,0,470,479,469,478,502,555,565,529],
[522,536,534,508,508,531,0,479,467,507,522,533,527,526],
[516,536,468,526,538,522,522,0,458,540,491,583,547,529],
[557,559,573,577,534,532,534,543,0,576,497,603,567,604],
[478,462,485,525,480,523,494,461,425,0,481,516,520,505],
[522,494,526,534,529,499,479,510,504,520,0,538,538,503],
[520,467,498,509,509,446,468,418,398,485,463,0,457,452],
[471,503,516,500,472,436,474,454,434,481,463,544,0,461],
[473,484,505,522,508,472,475,472,397,496,498,549,540,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 92, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,481,494,496,493,463,469,494,488,487,527,486,482],
[530,0,527,521,503,505,470,474,530,489,510,510,465,491],
[520,474,0,482,493,486,473,474,497,471,488,517,463,484],
[507,480,519,0,493,506,496,489,531,489,490,554,477,485],
[505,498,508,508,0,500,471,479,483,472,493,524,460,464],
[508,496,515,495,501,0,488,469,519,462,478,550,457,479],
[538,531,528,505,530,513,0,507,525,522,526,511,503,491],
[532,527,527,512,522,532,494,0,539,519,532,543,492,525],
[507,471,504,470,518,482,476,462,0,476,506,487,452,481],
[513,512,530,512,529,539,479,482,525,0,517,534,487,491],
[514,491,513,511,508,523,475,469,495,484,0,515,459,457],
[474,491,484,447,477,451,490,458,514,467,486,0,447,455],
[515,536,538,524,541,544,498,509,549,514,542,554,0,479],
[519,510,517,516,537,522,510,476,520,510,544,546,522,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 93, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,493,525,530,482,502,495,518,515,507,511,520,535],
[489,0,481,499,519,486,487,476,507,504,485,471,505,522],
[508,520,0,516,514,473,523,507,535,529,508,477,516,525],
[476,502,485,0,509,477,477,486,485,520,499,508,495,507],
[471,482,487,492,0,464,476,459,501,470,491,452,485,493],
[519,515,528,524,537,0,531,505,525,547,521,486,532,562],
[499,514,478,524,525,470,0,499,511,511,502,487,481,511],
[506,525,494,515,542,496,502,0,541,506,496,482,516,529],
[483,494,466,516,500,476,490,460,0,533,470,488,464,527],
[486,497,472,481,531,454,490,495,468,0,490,483,480,512],
[494,516,493,502,510,480,499,505,531,511,0,483,497,519],
[490,530,524,493,549,515,514,519,513,518,518,0,511,547],
[481,496,485,506,516,469,520,485,537,521,504,490,0,515],
[466,479,476,494,508,439,490,472,474,489,482,454,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 94, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,469,493,432,456,523,472,439,430,395,455,392,482],
[545,0,561,516,527,567,588,486,484,520,479,508,509,472],
[532,440,0,542,459,461,573,536,447,523,459,482,477,455],
[508,485,459,0,472,519,565,498,463,497,431,481,447,404],
[569,474,542,529,0,530,557,548,492,465,531,607,512,514],
[545,434,540,482,471,0,537,476,442,479,426,467,427,430],
[478,413,428,436,444,464,0,421,369,419,410,455,463,434],
[529,515,465,503,453,525,580,0,450,502,486,537,442,456],
[562,517,554,538,509,559,632,551,0,488,503,553,482,535],
[571,481,478,504,536,522,582,499,513,0,528,472,470,518],
[606,522,542,570,470,575,591,515,498,473,0,484,476,564],
[546,493,519,520,394,534,546,464,448,529,517,0,442,441],
[609,492,524,554,489,574,538,559,519,531,525,559,0,574],
[519,529,546,597,487,571,567,545,466,483,437,560,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 95, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,442,374,448,456,557,579,526,456,484,365,371,482],
[517,0,571,528,385,525,509,491,613,506,467,413,469,463],
[559,430,0,487,401,481,521,502,547,450,491,396,435,462],
[627,473,514,0,493,534,496,527,556,420,499,460,481,475],
[553,616,600,508,0,554,611,589,631,494,584,509,467,467],
[545,476,520,467,447,0,566,543,460,560,521,470,476,508],
[444,492,480,505,390,435,0,480,503,440,470,403,389,439],
[422,510,499,474,412,458,521,0,507,407,457,381,417,425],
[475,388,454,445,370,541,498,494,0,418,506,390,426,467],
[545,495,551,581,507,441,561,594,583,0,567,484,503,562],
[517,534,510,502,417,480,531,544,495,434,0,399,459,534],
[636,588,605,541,492,531,598,620,611,517,602,0,480,555],
[630,532,566,520,534,525,612,584,575,498,542,521,0,558],
[519,538,539,526,534,493,562,576,534,439,467,446,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 96, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,549,605,483,539,553,513,517,542,571,557,598,469,532],
[452,0,503,452,496,425,398,455,444,485,478,471,419,457],
[396,498,0,486,509,500,517,444,483,499,488,506,460,510],
[518,549,515,0,529,508,497,473,532,514,537,539,472,501],
[462,505,492,472,0,442,491,477,543,469,519,490,466,500],
[448,576,501,493,559,0,492,436,522,577,489,552,506,538],
[488,603,484,504,510,509,0,474,544,530,473,539,489,533],
[484,546,557,528,524,565,527,0,557,552,533,561,488,497],
[459,557,518,469,458,479,457,444,0,505,491,519,447,487],
[430,516,502,487,532,424,471,449,496,0,497,524,475,505],
[444,523,513,464,482,512,528,468,510,504,0,558,464,481],
[403,530,495,462,511,449,462,440,482,477,443,0,471,492],
[532,582,541,529,535,495,512,513,554,526,537,530,0,525],
[469,544,491,500,501,463,468,504,514,496,520,509,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 97, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,534,552,491,511,511,508,494,499,503,490,501,515,525],
[467,0,459,485,503,471,471,449,484,471,474,468,467,483],
[449,542,0,460,505,486,482,457,473,498,490,494,492,510],
[510,516,541,0,512,502,511,502,496,498,480,470,490,543],
[490,498,496,489,0,474,484,509,478,466,494,492,477,529],
[490,530,515,499,527,0,529,498,519,482,505,458,494,526],
[493,530,519,490,517,472,0,458,472,499,499,493,487,529],
[507,552,544,499,492,503,543,0,489,486,505,490,497,561],
[502,517,528,505,523,482,529,512,0,491,504,498,505,553],
[498,530,503,503,535,519,502,515,510,0,536,516,504,524],
[511,527,511,521,507,496,502,496,497,465,0,516,483,536],
[500,533,507,531,509,543,508,511,503,485,485,0,504,537],
[486,534,509,511,524,507,514,504,496,497,518,497,0,509],
[476,518,491,458,472,475,472,440,448,477,465,464,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 98, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,523,504,500,468,515,485,521,454,474,466,475,462],
[493,0,505,496,516,491,540,500,528,450,477,464,519,494],
[478,496,0,529,487,459,521,455,518,460,449,454,485,488],
[497,505,472,0,535,500,559,500,537,489,467,487,515,494],
[501,485,514,466,0,494,537,470,524,450,478,472,488,506],
[533,510,542,501,507,0,548,499,523,505,498,480,497,506],
[486,461,480,442,464,453,0,449,495,409,450,437,455,466],
[516,501,546,501,531,502,552,0,551,446,478,504,527,482],
[480,473,483,464,477,478,506,450,0,445,468,469,469,459],
[547,551,541,512,551,496,592,555,556,0,500,540,520,514],
[527,524,552,534,523,503,551,523,533,501,0,484,549,524],
[535,537,547,514,529,521,564,497,532,461,517,0,509,492],
[526,482,516,486,513,504,546,474,532,481,452,492,0,454],
[539,507,513,507,495,495,535,519,542,487,477,509,547,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 99, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,519,532,535,486,498,524,526,550,462,542,461,531,517],
[482,0,524,492,508,513,444,527,533,486,516,447,471,509],
[469,477,0,489,464,502,418,496,490,445,507,450,473,484],
[466,509,512,0,473,476,446,498,538,456,505,471,478,490],
[515,493,537,528,0,497,473,488,523,512,533,507,482,513],
[503,488,499,525,504,0,483,487,529,517,530,449,501,479],
[477,557,583,555,528,518,0,533,557,546,528,498,517,551],
[475,474,505,503,513,514,468,0,518,476,539,487,516,514],
[451,468,511,463,478,472,444,483,0,454,468,466,508,470],
[539,515,556,545,489,484,455,525,547,0,555,508,534,552],
[459,485,494,496,468,471,473,462,533,446,0,462,483,510],
[540,554,551,530,494,552,503,514,535,493,539,0,499,526],
[470,530,528,523,519,500,484,485,493,467,518,502,0,522],
[484,492,517,511,488,522,450,487,531,449,491,475,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 100, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,508,516,512,526,504,516,508,504,523,504,517,510],
[505,0,488,491,490,480,501,505,500,497,507,502,498,503],
[493,513,0,504,502,510,517,527,512,507,506,494,512,501],
[485,510,497,0,486,495,485,493,493,499,520,489,485,493],
[489,511,499,515,0,497,494,521,507,496,521,513,499,506],
[475,521,491,506,504,0,479,518,499,489,506,495,482,513],
[497,500,484,516,507,522,0,501,486,485,503,500,478,506],
[485,496,474,508,480,483,500,0,490,478,518,498,488,483],
[493,501,489,508,494,502,515,511,0,507,520,488,499,523],
[497,504,494,502,505,512,516,523,494,0,516,511,513,498],
[478,494,495,481,480,495,498,483,481,485,0,503,482,494],
[497,499,507,512,488,506,501,503,513,490,498,0,497,516],
[484,503,489,516,502,519,523,513,502,488,519,504,0,512],
[491,498,500,508,495,488,495,518,478,503,507,485,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 101, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,485,505,496,476,488,518,505,498,475,518,483,516],
[518,0,524,524,509,523,522,524,521,517,493,536,502,505],
[516,477,0,504,518,508,518,514,505,491,469,514,494,496],
[496,477,497,0,498,493,502,511,483,484,485,518,478,499],
[505,492,483,503,0,493,478,503,465,500,458,495,468,499],
[525,478,493,508,508,0,487,507,475,489,476,509,481,497],
[513,479,483,499,523,514,0,510,484,490,483,509,490,502],
[483,477,487,490,498,494,491,0,495,485,477,492,477,485],
[496,480,496,518,536,526,517,506,0,505,491,523,496,501],
[503,484,510,517,501,512,511,516,496,0,493,510,497,496],
[526,508,532,516,543,525,518,524,510,508,0,532,493,531],
[483,465,487,483,506,492,492,509,478,491,469,0,498,492],
[518,499,507,523,533,520,511,524,505,504,508,503,0,539],
[485,496,505,502,502,504,499,516,500,505,470,509,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 102, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,580,484,501,563,543,481,473,554,483,532,519,498],
[554,0,505,511,488,523,526,479,524,516,501,523,470,533],
[421,496,0,496,508,504,458,540,535,518,524,571,469,530],
[517,490,505,0,493,533,540,500,539,523,522,555,508,565],
[500,513,493,508,0,488,473,570,519,524,548,574,508,505],
[438,478,497,468,513,0,492,463,520,421,445,520,479,542],
[458,475,543,461,528,509,0,519,545,503,486,550,465,526],
[520,522,461,501,431,538,482,0,519,500,494,542,468,481],
[528,477,466,462,482,481,456,482,0,564,522,458,488,532],
[447,485,483,478,477,580,498,501,437,0,477,513,446,541],
[518,500,477,479,453,556,515,507,479,524,0,562,454,460],
[469,478,430,446,427,481,451,459,543,488,439,0,413,494],
[482,531,532,493,493,522,536,533,513,555,547,588,0,475],
[503,468,471,436,496,459,475,520,469,460,541,507,526,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 103, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,535,502,511,506,480,520,537,509,521,501,509,520],
[485,0,554,534,513,515,504,527,493,544,477,530,502,485],
[466,447,0,484,458,470,440,461,462,448,438,426,465,430],
[499,467,517,0,490,527,496,509,480,502,494,503,495,477],
[490,488,543,511,0,480,495,523,504,512,495,497,510,495],
[495,486,531,474,521,0,500,513,496,515,503,497,493,513],
[521,497,561,505,506,501,0,558,512,510,480,497,509,480],
[481,474,540,492,478,488,443,0,477,503,439,488,475,493],
[464,508,539,521,497,505,489,524,0,515,469,506,514,492],
[492,457,553,499,489,486,491,498,486,0,459,490,496,478],
[480,524,563,507,506,498,521,562,532,542,0,501,507,516],
[500,471,575,498,504,504,504,513,495,511,500,0,491,490],
[492,499,536,506,491,508,492,526,487,505,494,510,0,526],
[481,516,571,524,506,488,521,508,509,523,485,511,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 104, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,492,487,513,498,535,489,480,507,494,513,484,479],
[518,0,478,502,535,507,539,499,485,502,511,500,491,522],
[509,523,0,480,500,476,522,484,496,504,515,513,483,515],
[514,499,521,0,551,534,555,499,521,531,531,535,506,506],
[488,466,501,450,0,490,518,485,498,479,492,505,461,471],
[503,494,525,467,511,0,523,492,505,518,512,513,509,488],
[466,462,479,446,483,478,0,467,466,477,500,481,457,480],
[512,502,517,502,516,509,534,0,486,527,518,516,515,505],
[521,516,505,480,503,496,535,515,0,503,488,493,496,511],
[494,499,497,470,522,483,524,474,498,0,500,493,490,489],
[507,490,486,470,509,489,501,483,513,501,0,513,495,497],
[488,501,488,466,496,488,520,485,508,508,488,0,457,485],
[517,510,518,495,540,492,544,486,505,511,506,544,0,482],
[522,479,486,495,530,513,521,496,490,512,504,516,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 105, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,527,435,539,557,453,525,506,506,487,484,462,441,500],
[474,0,438,495,502,441,437,526,508,519,498,451,488,522],
[566,563,0,488,530,496,524,564,508,555,515,499,521,545],
[462,506,513,0,547,524,485,485,585,537,537,510,545,585],
[444,499,471,454,0,467,465,501,540,443,480,472,491,528],
[548,560,505,477,534,0,502,476,545,570,515,491,525,526],
[476,564,477,516,536,499,0,537,530,518,540,472,520,545],
[495,475,437,516,500,525,464,0,529,473,506,474,521,495],
[495,493,493,416,461,456,471,472,0,475,497,425,472,536],
[514,482,446,464,558,431,483,528,526,0,507,495,528,574],
[517,503,486,464,521,486,461,495,504,494,0,427,475,512],
[539,550,502,491,529,510,529,527,576,506,574,0,547,551],
[560,513,480,456,510,476,481,480,529,473,526,454,0,519],
[501,479,456,416,473,475,456,506,465,427,489,450,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 106, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,532,498,505,567,539,511,541,555,529,521,525,549,531],
[469,0,475,501,522,493,492,480,522,502,509,514,517,490],
[503,526,0,519,545,518,504,494,535,533,513,515,518,497],
[496,500,482,0,522,522,500,506,537,507,498,508,533,532],
[434,479,456,479,0,485,477,477,496,488,470,477,495,486],
[462,508,483,479,516,0,480,471,521,503,477,512,507,517],
[490,509,497,501,524,521,0,520,533,537,515,503,523,507],
[460,521,507,495,524,530,481,0,513,537,491,497,548,523],
[446,479,466,464,505,480,468,488,0,481,494,491,505,506],
[472,499,468,494,513,498,464,464,520,0,501,483,529,511],
[480,492,488,503,531,524,486,510,507,500,0,523,510,521],
[476,487,486,493,524,489,498,504,510,518,478,0,510,490],
[452,484,483,468,506,494,478,453,496,472,491,491,0,468],
[470,511,504,469,515,484,494,478,495,490,480,511,533,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 107, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,486,520,496,508,508,490,504,507,485,488,491,512],
[510,0,481,508,499,512,515,503,488,499,503,494,499,507],
[515,520,0,512,516,500,517,504,528,491,521,521,512,497],
[481,493,489,0,500,504,499,501,503,495,509,491,489,501],
[505,502,485,501,0,521,501,482,497,501,474,504,492,496],
[493,489,501,497,480,0,483,483,502,492,493,480,492,495],
[493,486,484,502,500,518,0,495,503,507,491,492,503,497],
[511,498,497,500,519,518,506,0,500,501,519,496,519,501],
[497,513,473,498,504,499,498,501,0,499,488,490,507,496],
[494,502,510,506,500,509,494,500,502,0,511,488,494,499],
[516,498,480,492,527,508,510,482,513,490,0,510,501,496],
[513,507,480,510,497,521,509,505,511,513,491,0,507,523],
[510,502,489,512,509,509,498,482,494,507,500,494,0,502],
[489,494,504,500,505,506,504,500,505,502,505,478,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 108, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,489,514,517,527,520,533,535,519,522,526,510,532],
[492,0,529,503,501,509,522,546,535,545,491,529,504,537],
[512,472,0,507,496,520,491,541,539,510,499,519,502,510],
[487,498,494,0,508,501,517,516,515,534,508,506,485,503],
[484,500,505,493,0,504,499,526,503,507,510,519,477,499],
[474,492,481,500,497,0,502,504,512,528,476,520,481,509],
[481,479,510,484,502,499,0,509,516,497,485,505,496,510],
[468,455,460,485,475,497,492,0,501,500,461,486,461,481],
[466,466,462,486,498,489,485,500,0,501,464,492,470,497],
[482,456,491,467,494,473,504,501,500,0,473,484,483,492],
[479,510,502,493,491,525,516,540,537,528,0,520,497,505],
[475,472,482,495,482,481,496,515,509,517,481,0,469,511],
[491,497,499,516,524,520,505,540,531,518,504,532,0,532],
[469,464,491,498,502,492,491,520,504,509,496,490,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 109, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,561,491,492,518,500,519,530,477,533,554,452,558,485],
[440,0,470,444,411,383,447,423,412,474,485,425,482,460],
[510,531,0,530,479,485,484,495,499,511,512,452,492,480],
[509,557,471,0,498,482,461,445,513,487,550,488,555,469],
[483,590,522,503,0,463,464,452,457,539,511,446,527,485],
[501,618,516,519,538,0,542,550,498,538,531,495,577,504],
[482,554,517,540,537,459,0,499,437,528,514,453,511,467],
[471,578,506,556,549,451,502,0,521,525,506,486,550,456],
[524,589,502,488,544,503,564,480,0,541,526,488,558,509],
[468,527,490,514,462,463,473,476,460,0,491,468,524,499],
[447,516,489,451,490,470,487,495,475,510,0,454,543,471],
[549,576,549,513,555,506,548,515,513,533,547,0,577,491],
[443,519,509,446,474,424,490,451,443,477,458,424,0,461],
[516,541,521,532,516,497,534,545,492,502,530,510,540,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 110, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,539,560,514,574,538,542,530,495,541,551,579,505,503],
[462,0,468,498,513,496,532,526,531,480,565,556,492,495],
[441,533,0,502,471,498,467,481,530,454,466,537,504,475],
[487,503,499,0,513,501,510,517,500,537,532,577,521,523],
[427,488,530,488,0,481,469,518,509,470,469,502,487,499],
[463,505,503,500,520,0,477,498,511,526,532,536,508,480],
[459,469,534,491,532,524,0,523,488,482,525,507,500,497],
[471,475,520,484,483,503,478,0,481,477,557,514,477,462],
[506,470,471,501,492,490,513,520,0,501,527,538,517,520],
[460,521,547,464,531,475,519,524,500,0,499,540,454,502],
[450,436,535,469,532,469,476,444,474,502,0,509,479,459],
[422,445,464,424,499,465,494,487,463,461,492,0,456,474],
[496,509,497,480,514,493,501,524,484,547,522,545,0,513],
[498,506,526,478,502,521,504,539,481,499,542,527,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 111, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,465,486,500,471,461,470,507,463,514,486,516,482],
[485,0,465,456,506,455,455,437,477,439,490,485,458,434],
[536,536,0,538,526,469,489,483,529,470,527,487,520,463],
[515,545,463,0,527,476,459,484,512,465,523,491,509,469],
[501,495,475,474,0,482,453,436,484,457,496,468,515,471],
[530,546,532,525,519,0,467,479,530,461,502,479,509,500],
[540,546,512,542,548,534,0,495,559,501,503,518,533,502],
[531,564,518,517,565,522,506,0,547,497,526,528,530,499],
[494,524,472,489,517,471,442,454,0,470,484,450,466,448],
[538,562,531,536,544,540,500,504,531,0,524,541,549,471],
[487,511,474,478,505,499,498,475,517,477,0,487,501,478],
[515,516,514,510,533,522,483,473,551,460,514,0,504,488],
[485,543,481,492,486,492,468,471,535,452,500,497,0,494],
[519,567,538,532,530,501,499,502,553,530,523,513,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 112, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,508,532,497,493,517,478,472,483,468,471,501,492],
[517,0,518,507,506,514,516,489,504,507,495,478,514,511],
[493,483,0,500,497,480,529,498,483,516,487,484,498,479],
[469,494,501,0,508,482,500,507,478,493,466,470,487,488],
[504,495,504,493,0,487,509,493,486,496,471,464,496,497],
[508,487,521,519,514,0,524,489,494,508,479,471,505,499],
[484,485,472,501,492,477,0,461,469,505,460,461,499,464],
[523,512,503,494,508,512,540,0,490,504,467,489,513,489],
[529,497,518,523,515,507,532,511,0,522,508,490,520,510],
[518,494,485,508,505,493,496,497,479,0,481,469,511,498],
[533,506,514,535,530,522,541,534,493,520,0,509,519,511],
[530,523,517,531,537,530,540,512,511,532,492,0,524,506],
[500,487,503,514,505,496,502,488,481,490,482,477,0,484],
[509,490,522,513,504,502,537,512,491,503,490,495,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 113, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,523,499,483,485,521,504,492,486,495,506,502,519],
[489,0,495,494,501,494,505,510,493,492,483,496,497,510],
[478,506,0,496,498,517,519,517,510,492,494,492,509,515],
[502,507,505,0,509,504,523,515,499,504,482,498,516,526],
[518,500,503,492,0,492,513,511,490,506,495,498,518,513],
[516,507,484,497,509,0,521,499,493,505,477,495,494,516],
[480,496,482,478,488,480,0,491,491,494,479,469,488,506],
[497,491,484,486,490,502,510,0,474,486,489,487,470,517],
[509,508,491,502,511,508,510,527,0,499,483,509,493,528],
[515,509,509,497,495,496,507,515,502,0,503,516,489,522],
[506,518,507,519,506,524,522,512,518,498,0,515,525,536],
[495,505,509,503,503,506,532,514,492,485,486,0,522,517],
[499,504,492,485,483,507,513,531,508,512,476,479,0,507],
[482,491,486,475,488,485,495,484,473,479,465,484,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 114, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,511,494,486,520,485,481,514,517,513,506,481,485],
[523,0,496,485,495,525,527,505,502,512,517,503,503,497],
[490,505,0,473,496,508,514,473,505,501,519,500,459,489],
[507,516,528,0,509,518,507,515,513,520,531,499,497,499],
[515,506,505,492,0,544,512,479,531,501,518,513,482,488],
[481,476,493,483,457,0,480,477,489,474,487,462,458,479],
[516,474,487,494,489,521,0,497,498,503,517,517,474,493],
[520,496,528,486,522,524,504,0,521,518,513,522,493,519],
[487,499,496,488,470,512,503,480,0,503,498,506,453,489],
[484,489,500,481,500,527,498,483,498,0,505,508,476,476],
[488,484,482,470,483,514,484,488,503,496,0,499,459,477],
[495,498,501,502,488,539,484,479,495,493,502,0,487,486],
[520,498,542,504,519,543,527,508,548,525,542,514,0,505],
[516,504,512,502,513,522,508,482,512,525,524,515,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 115, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,446,473,450,512,450,436,456,481,469,429,457,464],
[556,0,486,505,504,484,519,462,511,500,594,487,507,528],
[555,515,0,570,497,602,539,538,454,518,622,516,531,558],
[528,496,431,0,502,510,549,438,527,493,538,505,460,483],
[551,497,504,499,0,528,542,466,500,453,494,521,476,491],
[489,517,399,491,473,0,511,491,450,439,462,408,450,429],
[551,482,462,452,459,490,0,455,478,417,483,483,446,474],
[565,539,463,563,535,510,546,0,501,480,490,551,512,536],
[545,490,547,474,501,551,523,500,0,463,565,564,490,511],
[520,501,483,508,548,562,584,521,538,0,523,566,535,588],
[532,407,379,463,507,539,518,511,436,478,0,500,500,477],
[572,514,485,496,480,593,518,450,437,435,501,0,462,513],
[544,494,470,541,525,551,555,489,511,466,501,539,0,512],
[537,473,443,518,510,572,527,465,490,413,524,488,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 116, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,486,554,457,496,514,522,602,444,434,460,470,550],
[513,0,512,599,486,442,518,504,554,460,478,494,530,445],
[515,489,0,614,460,549,482,550,630,461,460,526,524,500],
[447,402,387,0,376,426,441,461,476,435,406,430,450,406],
[544,515,541,625,0,536,557,589,571,467,525,514,524,524],
[505,559,452,575,465,0,497,534,557,526,422,444,457,490],
[487,483,519,560,444,504,0,449,556,437,508,440,472,529],
[479,497,451,540,412,467,552,0,543,463,462,516,468,467],
[399,447,371,525,430,444,445,458,0,406,419,424,465,421],
[557,541,540,566,534,475,564,538,595,0,496,530,521,486],
[567,523,541,595,476,579,493,539,582,505,0,532,508,528],
[541,507,475,571,487,557,561,485,577,471,469,0,491,494],
[531,471,477,551,477,544,529,533,536,480,493,510,0,522],
[451,556,501,595,477,511,472,534,580,515,473,507,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 117, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,470,488,524,516,507,513,484,496,499,507,539,489],
[526,0,529,543,529,541,531,550,542,496,548,536,546,551],
[531,472,0,499,505,511,516,507,510,497,501,524,517,494],
[513,458,502,0,490,509,491,511,511,512,501,514,511,501],
[477,472,496,511,0,506,476,518,492,471,478,488,520,488],
[485,460,490,492,495,0,497,514,484,459,489,509,499,457],
[494,470,485,510,525,504,0,508,505,484,480,488,492,505],
[488,451,494,490,483,487,493,0,508,483,479,487,491,464],
[517,459,491,490,509,517,496,493,0,471,497,498,532,505],
[505,505,504,489,530,542,517,518,530,0,488,501,527,513],
[502,453,500,500,523,512,521,522,504,513,0,502,525,502],
[494,465,477,487,513,492,513,514,503,500,499,0,509,489],
[462,455,484,490,481,502,509,510,469,474,476,492,0,481],
[512,450,507,500,513,544,496,537,496,488,499,512,520,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 118, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,549,521,492,543,594,497,520,498,528,553,514,532,532],
[452,0,508,513,468,503,488,476,527,513,496,462,537,490],
[480,493,0,475,540,543,484,451,523,485,498,523,557,469],
[509,488,526,0,483,541,503,456,505,475,485,506,521,513],
[458,533,461,518,0,519,472,453,513,510,505,505,506,509],
[407,498,458,460,482,0,434,435,504,497,469,468,480,464],
[504,513,517,498,529,567,0,487,505,515,497,487,546,512],
[481,525,550,545,548,566,514,0,506,521,536,484,551,553],
[503,474,478,496,488,497,496,495,0,522,502,513,524,494],
[473,488,516,526,491,504,486,480,479,0,507,463,464,468],
[448,505,503,516,496,532,504,465,499,494,0,471,522,547],
[487,539,478,495,496,533,514,517,488,538,530,0,533,488],
[469,464,444,480,495,521,455,450,477,537,479,468,0,501],
[469,511,532,488,492,537,489,448,507,533,454,513,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 119, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,564,538,471,479,490,480,511,512,529,499,488,540],
[505,0,477,542,427,503,484,491,520,476,457,461,455,571],
[437,524,0,540,452,534,467,504,510,499,492,450,467,516],
[463,459,461,0,452,503,503,455,497,482,474,465,475,487],
[530,574,549,549,0,553,484,506,555,524,494,502,536,568],
[522,498,467,498,448,0,488,437,501,506,499,486,464,468],
[511,517,534,498,517,513,0,489,558,574,482,521,451,517],
[521,510,497,546,495,564,512,0,563,516,486,500,546,556],
[490,481,491,504,446,500,443,438,0,492,499,457,464,516],
[489,525,502,519,477,495,427,485,509,0,489,510,466,521],
[472,544,509,527,507,502,519,515,502,512,0,498,514,548],
[502,540,551,536,499,515,480,501,544,491,503,0,516,504],
[513,546,534,526,465,537,550,455,537,535,487,485,0,530],
[461,430,485,514,433,533,484,445,485,480,453,497,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 120, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,473,509,488,527,509,524,513,463,465,481,514,554],
[533,0,533,507,512,468,519,489,503,466,502,509,492,552],
[528,468,0,459,522,465,459,513,494,446,473,467,472,506],
[492,494,542,0,510,499,508,554,543,541,465,545,526,533],
[513,489,479,491,0,476,504,530,510,491,503,504,499,514],
[474,533,536,502,525,0,504,511,521,482,479,482,537,513],
[492,482,542,493,497,497,0,520,511,457,481,491,522,509],
[477,512,488,447,471,490,481,0,458,432,472,469,476,496],
[488,498,507,458,491,480,490,543,0,441,468,493,499,514],
[538,535,555,460,510,519,544,569,560,0,542,509,506,578],
[536,499,528,536,498,522,520,529,533,459,0,500,514,527],
[520,492,534,456,497,519,510,532,508,492,501,0,541,524],
[487,509,529,475,502,464,479,525,502,495,487,460,0,546],
[447,449,495,468,487,488,492,505,487,423,474,477,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 121, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,508,530,469,495,542,511,480,500,504,487,529,502],
[492,0,525,503,476,515,515,515,519,517,529,488,522,503],
[493,476,0,479,447,472,499,473,482,466,485,447,509,493],
[471,498,522,0,496,508,492,491,465,500,508,502,513,509],
[532,525,554,505,0,519,520,535,489,540,545,518,535,535],
[506,486,529,493,482,0,543,500,486,514,513,495,500,491],
[459,486,502,509,481,458,0,494,471,495,512,486,502,477],
[490,486,528,510,466,501,507,0,501,513,485,481,523,516],
[521,482,519,536,512,515,530,500,0,507,513,506,507,534],
[501,484,535,501,461,487,506,488,494,0,505,483,503,488],
[497,472,516,493,456,488,489,516,488,496,0,495,491,481],
[514,513,554,499,483,506,515,520,495,518,506,0,539,497],
[472,479,492,488,466,501,499,478,494,498,510,462,0,489],
[499,498,508,492,466,510,524,485,467,513,520,504,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 122, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,526,505,482,489,472,487,513,518,566,495,510,485],
[509,0,527,522,511,545,493,522,529,519,536,488,528,505],
[475,474,0,481,472,516,464,496,505,487,541,508,508,473],
[496,479,520,0,479,510,496,494,517,501,539,489,512,502],
[519,490,529,522,0,509,497,513,538,512,588,506,544,507],
[512,456,485,491,492,0,487,458,517,475,536,475,486,502],
[529,508,537,505,504,514,0,505,508,510,570,499,520,491],
[514,479,505,507,488,543,496,0,519,501,540,517,522,524],
[488,472,496,484,463,484,493,482,0,500,525,492,519,488],
[483,482,514,500,489,526,491,500,501,0,544,509,526,508],
[435,465,460,462,413,465,431,461,476,457,0,429,456,459],
[506,513,493,512,495,526,502,484,509,492,572,0,523,507],
[491,473,493,489,457,515,481,479,482,475,545,478,0,476],
[516,496,528,499,494,499,510,477,513,493,542,494,525,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 123, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,548,505,499,515,512,500,481,563,487,533,493,520,496],
[453,0,474,465,431,506,447,479,483,443,488,463,468,487],
[496,527,0,504,520,498,506,522,542,482,564,497,547,480],
[502,536,497,0,513,497,474,512,527,503,511,524,526,518],
[486,570,481,488,0,483,506,514,502,484,528,505,520,512],
[489,495,503,504,518,0,489,504,558,447,527,498,535,477],
[501,554,495,527,495,512,0,512,538,479,547,518,512,488],
[520,522,479,489,487,497,489,0,526,478,521,499,522,479],
[438,518,459,474,499,443,463,475,0,451,519,468,482,475],
[514,558,519,498,517,554,522,523,550,0,549,529,534,494],
[468,513,437,490,473,474,454,480,482,452,0,468,488,486],
[508,538,504,477,496,503,483,502,533,472,533,0,492,508],
[481,533,454,475,481,466,489,479,519,467,513,509,0,514],
[505,514,521,483,489,524,513,522,526,507,515,493,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 124, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,535,544,555,576,521,452,495,525,478,525,502,523],
[527,0,578,524,502,542,568,552,456,520,534,477,513,505],
[466,423,0,465,453,559,455,507,425,528,541,421,467,475],
[457,477,536,0,515,584,512,494,488,514,528,498,549,514],
[446,499,548,486,0,532,477,522,439,523,530,516,517,550],
[425,459,442,417,469,0,482,494,433,509,514,470,503,454],
[480,433,546,489,524,519,0,494,508,487,451,520,444,491],
[549,449,494,507,479,507,507,0,466,489,523,458,538,436],
[506,545,576,513,562,568,493,535,0,598,563,516,493,548],
[476,481,473,487,478,492,514,512,403,0,537,452,499,463],
[523,467,460,473,471,487,550,478,438,464,0,449,468,485],
[476,524,580,503,485,531,481,543,485,549,552,0,519,531],
[499,488,534,452,484,498,557,463,508,502,533,482,0,551],
[478,496,526,487,451,547,510,565,453,538,516,470,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 125, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,460,431,519,520,485,441,486,521,554,487,614,494],
[489,0,449,426,525,510,471,453,464,451,580,490,521,453],
[541,552,0,485,561,496,572,508,459,528,590,557,585,526],
[570,575,516,0,545,554,549,527,514,510,606,515,585,496],
[482,476,440,456,0,510,489,433,467,497,573,497,546,484],
[481,491,505,447,491,0,494,489,452,484,524,549,531,465],
[516,530,429,452,512,507,0,477,482,470,568,489,539,476],
[560,548,493,474,568,512,524,0,489,500,614,533,534,507],
[515,537,542,487,534,549,519,512,0,529,568,506,557,521],
[480,550,473,491,504,517,531,501,472,0,590,518,543,506],
[447,421,411,395,428,477,433,387,433,411,0,446,453,392],
[514,511,444,486,504,452,512,468,495,483,555,0,593,431],
[387,480,416,416,455,470,462,467,444,458,548,408,0,460],
[507,548,475,505,517,536,525,494,480,495,609,570,541,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 126, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,514,503,535,478,518,515,553,508,532,487,529,519],
[500,0,479,495,514,481,527,505,519,489,490,480,518,462],
[487,522,0,494,522,501,517,530,525,484,531,489,486,534],
[498,506,507,0,518,483,538,496,524,530,528,510,517,518],
[466,487,479,483,0,471,501,481,513,482,497,497,500,500],
[523,520,500,518,530,0,513,553,543,523,500,527,518,536],
[483,474,484,463,500,488,0,494,490,487,487,482,488,508],
[486,496,471,505,520,448,507,0,529,481,493,492,491,516],
[448,482,476,477,488,458,511,472,0,476,470,481,482,485],
[493,512,517,471,519,478,514,520,525,0,523,473,513,515],
[469,511,470,473,504,501,514,508,531,478,0,466,504,513],
[514,521,512,491,504,474,519,509,520,528,535,0,516,519],
[472,483,515,484,501,483,513,510,519,488,497,485,0,507],
[482,539,467,483,501,465,493,485,516,486,488,482,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 127, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,501,517,511,504,506,507,519,507,491,513,487,540],
[489,0,504,527,512,478,518,497,501,467,456,513,506,485],
[500,497,0,483,483,459,496,488,475,484,491,481,440,477],
[484,474,518,0,497,473,498,461,491,491,485,477,464,493],
[490,489,518,504,0,478,467,489,481,459,490,493,457,473],
[497,523,542,528,523,0,500,529,510,500,506,533,487,519],
[495,483,505,503,534,501,0,507,480,498,492,494,503,476],
[494,504,513,540,512,472,494,0,471,455,486,493,507,493],
[482,500,526,510,520,491,521,530,0,489,488,497,494,482],
[494,534,517,510,542,501,503,546,512,0,505,521,538,516],
[510,545,510,516,511,495,509,515,513,496,0,502,517,470],
[488,488,520,524,508,468,507,508,504,480,499,0,496,479],
[514,495,561,537,544,514,498,494,507,463,484,505,0,488],
[461,516,524,508,528,482,525,508,519,485,531,522,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 128, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,476,471,457,468,482,491,479,462,473,469,464,479],
[512,0,510,489,475,503,515,505,497,502,504,492,483,522],
[525,491,0,489,483,502,523,524,492,487,506,510,490,493],
[530,512,512,0,514,532,541,522,499,512,497,507,506,514],
[544,526,518,487,0,499,539,537,499,529,521,534,505,529],
[533,498,499,469,502,0,518,521,491,491,506,522,496,499],
[519,486,478,460,462,483,0,485,475,471,493,492,476,493],
[510,496,477,479,464,480,516,0,467,485,491,510,492,490],
[522,504,509,502,502,510,526,534,0,505,515,515,505,486],
[539,499,514,489,472,510,530,516,496,0,515,516,490,512],
[528,497,495,504,480,495,508,510,486,486,0,510,491,508],
[532,509,491,494,467,479,509,491,486,485,491,0,468,488],
[537,518,511,495,496,505,525,509,496,511,510,533,0,484],
[522,479,508,487,472,502,508,511,515,489,493,513,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 129, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,483,505,480,494,471,511,487,487,523,481,438,480],
[521,0,499,517,493,505,502,530,497,473,564,507,453,508],
[518,502,0,520,502,479,501,507,495,486,536,491,469,479],
[496,484,481,0,491,493,483,520,478,451,524,491,466,467],
[521,508,499,510,0,505,475,521,487,472,508,484,480,479],
[507,496,522,508,496,0,484,512,497,502,519,483,492,510],
[530,499,500,518,526,517,0,512,502,508,515,509,503,494],
[490,471,494,481,480,489,489,0,491,486,521,478,461,489],
[514,504,506,523,514,504,499,510,0,504,527,514,467,477],
[514,528,515,550,529,499,493,515,497,0,517,504,477,513],
[478,437,465,477,493,482,486,480,474,484,0,446,448,483],
[520,494,510,510,517,518,492,523,487,497,555,0,480,499],
[563,548,532,535,521,509,498,540,534,524,553,521,0,517],
[521,493,522,534,522,491,507,512,524,488,518,502,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 130, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,550,528,519,514,537,549,541,537,526,500,545,488,504],
[451,0,502,506,504,482,522,479,514,483,469,530,494,498],
[473,499,0,486,484,496,495,501,444,463,473,508,466,457],
[482,495,515,0,493,510,522,526,515,502,475,544,488,482],
[487,497,517,508,0,552,541,533,499,519,497,498,522,517],
[464,519,505,491,449,0,480,518,482,464,493,496,474,453],
[452,479,506,479,460,521,0,491,459,468,489,505,464,476],
[460,522,500,475,468,483,510,0,477,451,467,467,462,460],
[464,487,557,486,502,519,542,524,0,468,489,496,466,491],
[475,518,538,499,482,537,533,550,533,0,484,544,512,495],
[501,532,528,526,504,508,512,534,512,517,0,555,508,493],
[456,471,493,457,503,505,496,534,505,457,446,0,493,475],
[513,507,535,513,479,527,537,539,535,489,493,508,0,500],
[497,503,544,519,484,548,525,541,510,506,508,526,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 131, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,548,526,503,518,478,492,511,521,522,553,478,493,472],
[453,0,510,499,486,461,517,491,499,515,505,480,467,477],
[475,491,0,502,516,487,509,491,504,491,508,456,486,466],
[498,502,499,0,493,496,522,510,515,520,516,491,476,466],
[483,515,485,508,0,516,547,473,506,520,530,495,486,483],
[523,540,514,505,485,0,519,528,473,520,578,498,484,503],
[509,484,492,479,454,482,0,498,477,467,518,489,442,485],
[490,510,510,491,528,473,503,0,482,531,529,500,461,477],
[480,502,497,486,495,528,524,519,0,495,502,464,477,511],
[479,486,510,481,481,481,534,470,506,0,517,470,449,482],
[448,496,493,485,471,423,483,472,499,484,0,498,436,438],
[523,521,545,510,506,503,512,501,537,531,503,0,457,486],
[508,534,515,525,515,517,559,540,524,552,565,544,0,488],
[529,524,535,535,518,498,516,524,490,519,563,515,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 132, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,503,520,530,519,512,514,524,565,521,512,522,563],
[520,0,488,586,560,573,446,596,512,565,530,509,492,544],
[498,513,0,580,577,519,508,585,539,598,534,502,505,558],
[481,415,421,0,454,510,475,549,424,520,430,476,468,520],
[471,441,424,547,0,518,498,484,466,479,478,459,473,480],
[482,428,482,491,483,0,478,509,448,504,437,452,518,493],
[489,555,493,526,503,523,0,532,486,581,483,487,502,489],
[487,405,416,452,517,492,469,0,439,444,416,455,445,527],
[477,489,462,577,535,553,515,562,0,572,475,539,545,524],
[436,436,403,481,522,497,420,557,429,0,460,454,427,536],
[480,471,467,571,523,564,518,585,526,541,0,497,468,534],
[489,492,499,525,542,549,514,546,462,547,504,0,499,527],
[479,509,496,533,528,483,499,556,456,574,533,502,0,518],
[438,457,443,481,521,508,512,474,477,465,467,474,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 133, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,522,543,524,500,502,502,530,498,535,514,496,507,508],
[479,0,545,508,493,482,523,494,483,557,502,514,498,504],
[458,456,0,499,520,462,467,468,486,471,493,478,486,492],
[477,493,502,0,487,480,514,490,470,511,516,490,502,526],
[501,508,481,514,0,493,485,481,526,486,510,509,517,486],
[499,519,539,521,508,0,534,509,504,516,539,531,503,519],
[499,478,534,487,516,467,0,473,480,512,541,516,494,487],
[471,507,533,511,520,492,528,0,504,513,501,506,557,496],
[503,518,515,531,475,497,521,497,0,558,524,525,521,500],
[466,444,530,490,515,485,489,488,443,0,491,482,485,506],
[487,499,508,485,491,462,460,500,477,510,0,455,487,498],
[505,487,523,511,492,470,485,495,476,519,546,0,488,492],
[494,503,515,499,484,498,507,444,480,516,514,513,0,503],
[493,497,509,475,515,482,514,505,501,495,503,509,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 134, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,526,542,518,528,519,476,534,500,506,528,510,510],
[501,0,544,527,469,494,522,471,501,468,491,541,495,519],
[475,457,0,481,467,472,514,483,474,437,458,486,454,486],
[459,474,520,0,470,513,532,500,476,526,486,526,459,475],
[483,532,534,531,0,527,581,527,533,506,512,521,491,526],
[473,507,529,488,474,0,525,483,498,470,450,483,502,489],
[482,479,487,469,420,476,0,476,500,433,475,470,470,472],
[525,530,518,501,474,518,525,0,531,512,478,492,465,523],
[467,500,527,525,468,503,501,470,0,465,453,490,504,526],
[501,533,564,475,495,531,568,489,536,0,494,550,475,505],
[495,510,543,515,489,551,526,523,548,507,0,547,507,527],
[473,460,515,475,480,518,531,509,511,451,454,0,474,519],
[491,506,547,542,510,499,531,536,497,526,494,527,0,539],
[491,482,515,526,475,512,529,478,475,496,474,482,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 135, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,515,542,507,523,493,509,502,524,518,535,546,488],
[484,0,519,534,489,513,496,485,497,533,506,498,523,493],
[486,482,0,539,488,500,495,487,481,501,474,504,521,494],
[459,467,462,0,477,473,474,471,475,484,457,484,500,472],
[494,512,513,524,0,526,506,500,491,521,519,521,530,512],
[478,488,501,528,475,0,481,499,476,501,500,519,520,486],
[508,505,506,527,495,520,0,500,505,527,532,539,530,486],
[492,516,514,530,501,502,501,0,489,493,509,519,529,479],
[499,504,520,526,510,525,496,512,0,538,501,534,535,497],
[477,468,500,517,480,500,474,508,463,0,493,490,534,484],
[483,495,527,544,482,501,469,492,500,508,0,520,533,502],
[466,503,497,517,480,482,462,482,467,511,481,0,503,488],
[455,478,480,501,471,481,471,472,466,467,468,498,0,457],
[513,508,507,529,489,515,515,522,504,517,499,513,544,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 136, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,517,527,508,513,522,508,514,509,527,546,496,504,505],
[484,0,512,485,485,489,528,477,499,495,523,498,471,490],
[474,489,0,480,485,474,501,474,504,487,489,480,483,495],
[493,516,521,0,513,515,535,506,530,497,530,507,492,479],
[488,516,516,488,0,508,513,501,484,492,516,506,503,492],
[479,512,527,486,493,0,519,503,497,492,515,522,494,494],
[493,473,500,466,488,482,0,478,477,479,507,480,471,507],
[487,524,527,495,500,498,523,0,498,493,522,507,504,515],
[492,502,497,471,517,504,524,503,0,506,514,504,496,509],
[474,506,514,504,509,509,522,508,495,0,524,514,479,515],
[455,478,512,471,485,486,494,479,487,477,0,473,456,493],
[505,503,521,494,495,479,521,494,497,487,528,0,485,482],
[497,530,518,509,498,507,530,497,505,522,545,516,0,502],
[496,511,506,522,509,507,494,486,492,486,508,519,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 137, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,469,481,483,515,518,527,504,467,475,454,512,484],
[491,0,504,477,434,519,532,494,474,467,455,492,507,466],
[532,497,0,511,442,534,491,480,479,460,478,519,478,468],
[520,524,490,0,451,482,499,479,466,446,459,450,459,474],
[518,567,559,550,0,563,524,514,482,504,489,550,556,496],
[486,482,467,519,438,0,503,502,459,441,466,479,471,457],
[483,469,510,502,477,498,0,476,488,440,494,512,475,457],
[474,507,521,522,487,499,525,0,528,454,518,508,507,491],
[497,527,522,535,519,542,513,473,0,504,542,523,566,529],
[534,534,541,555,497,560,561,547,497,0,487,555,574,513],
[526,546,523,542,512,535,507,483,459,514,0,517,529,471],
[547,509,482,551,451,522,489,493,478,446,484,0,525,494],
[489,494,523,542,445,530,526,494,435,427,472,476,0,457],
[517,535,533,527,505,544,544,510,472,488,530,507,544,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 138, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,484,541,514,503,528,483,471,550,487,467,545,493],
[501,0,524,475,537,502,513,474,444,537,510,455,518,532],
[517,477,0,537,490,499,497,513,474,526,489,471,496,526],
[460,526,464,0,501,499,460,484,458,553,495,455,504,513],
[487,464,511,500,0,508,504,511,454,534,500,460,489,487],
[498,499,502,502,493,0,494,476,493,546,493,480,491,529],
[473,488,504,541,497,507,0,500,456,549,519,450,498,451],
[518,527,488,517,490,525,501,0,468,511,519,449,506,508],
[530,557,527,543,547,508,545,533,0,601,500,516,536,524],
[451,464,475,448,467,455,452,490,400,0,451,432,492,472],
[514,491,512,506,501,508,482,482,501,550,0,507,538,501],
[534,546,530,546,541,521,551,552,485,569,494,0,510,540],
[456,483,505,497,512,510,503,495,465,509,463,491,0,495],
[508,469,475,488,514,472,550,493,477,529,500,461,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 139, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,535,518,491,494,504,496,524,498,515,530,530,528,510],
[466,0,504,472,482,468,447,465,447,482,469,501,487,529],
[483,497,0,514,441,494,475,479,492,513,505,510,482,484],
[510,529,487,0,493,482,530,503,488,501,461,493,500,481],
[507,519,560,508,0,473,486,506,509,526,538,494,498,523],
[497,533,507,519,528,0,494,501,517,515,492,501,490,516],
[505,554,526,471,515,507,0,486,541,534,481,538,481,536],
[477,536,522,498,495,500,515,0,506,517,487,520,508,564],
[503,554,509,513,492,484,460,495,0,518,483,516,523,545],
[486,519,488,500,475,486,467,484,483,0,486,464,483,503],
[471,532,496,540,463,509,520,514,518,515,0,547,500,526],
[471,500,491,508,507,500,463,481,485,537,454,0,470,519],
[473,514,519,501,503,511,520,493,478,518,501,531,0,523],
[491,472,517,520,478,485,465,437,456,498,475,482,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 140, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,524,476,536,506,517,517,493,540,540,509,509,516,503],
[477,0,456,489,488,528,503,483,528,502,547,484,500,517],
[525,545,0,506,503,523,536,508,537,532,546,524,528,492],
[465,512,495,0,464,517,492,484,558,512,516,506,530,467],
[495,513,498,537,0,505,524,505,530,512,535,518,540,485],
[484,473,478,484,496,0,473,482,510,522,501,479,497,506],
[484,498,465,509,477,528,0,481,514,488,499,487,507,512],
[508,518,493,517,496,519,520,0,551,543,530,508,507,480],
[461,473,464,443,471,491,487,450,0,489,466,469,465,470],
[461,499,469,489,489,479,513,458,512,0,520,488,516,476],
[492,454,455,485,466,500,502,471,535,481,0,475,504,450],
[492,517,477,495,483,522,514,493,532,513,526,0,491,461],
[485,501,473,471,461,504,494,494,536,485,497,510,0,474],
[498,484,509,534,516,495,489,521,531,525,551,540,527,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 141, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,534,537,497,466,526,475,494,514,520,555,559,479,508],
[467,0,497,511,494,479,432,490,490,481,522,545,474,516],
[464,504,0,506,539,489,504,511,529,515,534,522,456,479],
[504,490,495,0,500,506,504,493,540,526,490,492,475,514],
[535,507,462,501,0,481,465,478,458,492,518,512,476,504],
[475,522,512,495,520,0,481,496,516,483,536,539,500,549],
[526,569,497,497,536,520,0,508,523,530,535,574,526,554],
[507,511,490,508,523,505,493,0,531,506,520,496,488,504],
[487,511,472,461,543,485,478,470,0,502,513,528,465,505],
[481,520,486,475,509,518,471,495,499,0,503,528,464,530],
[446,479,467,511,483,465,466,481,488,498,0,512,477,456],
[442,456,479,509,489,462,427,505,473,473,489,0,434,495],
[522,527,545,526,525,501,475,513,536,537,524,567,0,512],
[493,485,522,487,497,452,447,497,496,471,545,506,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 142, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,508,496,502,519,474,493,467,536,509,490,500,499],
[492,0,556,521,537,537,515,488,501,552,575,494,513,512],
[493,445,0,510,519,511,483,443,443,487,487,466,456,470],
[505,480,491,0,548,497,498,484,465,536,526,511,506,484],
[499,464,482,453,0,531,465,494,498,471,514,516,484,458],
[482,464,490,504,470,0,448,456,476,521,479,490,492,468],
[527,486,518,503,536,553,0,527,502,534,538,553,538,545],
[508,513,558,517,507,545,474,0,494,545,529,503,506,473],
[534,500,558,536,503,525,499,507,0,537,519,554,502,474],
[465,449,514,465,530,480,467,456,464,0,515,461,488,487],
[492,426,514,475,487,522,463,472,482,486,0,496,486,483],
[511,507,535,490,485,511,448,498,447,540,505,0,499,499],
[501,488,545,495,517,509,463,495,499,513,515,502,0,519],
[502,489,531,517,543,533,456,528,527,514,518,502,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 143, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,497,478,472,489,505,540,479,492,507,472,506,527],
[520,0,509,486,504,522,500,545,495,521,508,502,508,508],
[504,492,0,481,499,508,491,501,478,501,510,461,493,523],
[523,515,520,0,504,519,519,537,505,562,546,499,500,533],
[529,497,502,497,0,503,491,519,522,524,525,508,492,544],
[512,479,493,482,498,0,494,513,516,509,494,474,473,542],
[496,501,510,482,510,507,0,512,485,530,533,489,501,523],
[461,456,500,464,482,488,489,0,460,511,497,468,490,531],
[522,506,523,496,479,485,516,541,0,516,513,469,481,524],
[509,480,500,439,477,492,471,490,485,0,504,460,488,507],
[494,493,491,455,476,507,468,504,488,497,0,489,460,523],
[529,499,540,502,493,527,512,533,532,541,512,0,513,550],
[495,493,508,501,509,528,500,511,520,513,541,488,0,511],
[474,493,478,468,457,459,478,470,477,494,478,451,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 144, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,517,521,545,525,489,497,507,554,520,546,489,520],
[499,0,493,497,543,509,495,488,488,520,499,523,505,459],
[484,508,0,499,538,489,525,477,465,516,487,512,501,469],
[480,504,502,0,509,519,523,481,498,532,491,504,513,482],
[456,458,463,492,0,475,476,468,458,502,491,485,493,469],
[476,492,512,482,526,0,491,491,460,527,513,500,517,478],
[512,506,476,478,525,510,0,456,503,525,473,525,475,457],
[504,513,524,520,533,510,545,0,509,532,496,511,535,455],
[494,513,536,503,543,541,498,492,0,565,526,497,512,492],
[447,481,485,469,499,474,476,469,436,0,500,515,479,451],
[481,502,514,510,510,488,528,505,475,501,0,489,507,484],
[455,478,489,497,516,501,476,490,504,486,512,0,512,465],
[512,496,500,488,508,484,526,466,489,522,494,489,0,482],
[481,542,532,519,532,523,544,546,509,550,517,536,519,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 145, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,543,531,484,500,482,504,527,563,566,504,485,574,481],
[458,0,547,495,497,534,504,562,535,547,466,503,551,476],
[470,454,0,529,492,479,525,546,550,536,426,463,539,476],
[517,506,472,0,460,478,491,528,508,514,464,435,522,458],
[501,504,509,541,0,524,525,547,530,530,500,481,561,467],
[519,467,522,523,477,0,498,508,536,549,421,483,507,450],
[497,497,476,510,476,503,0,540,504,541,491,439,549,439],
[474,439,455,473,454,493,461,0,477,511,459,431,520,447],
[438,466,451,493,471,465,497,524,0,492,431,417,481,420],
[435,454,465,487,471,452,460,490,509,0,445,399,504,432],
[497,535,575,537,501,580,510,542,570,556,0,497,526,492],
[516,498,538,566,520,518,562,570,584,602,504,0,601,513],
[427,450,462,479,440,494,452,481,520,497,475,400,0,411],
[520,525,525,543,534,551,562,554,581,569,509,488,590,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 146, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,508,503,525,528,521,528,526,487,525,462,527,545,496],
[493,0,482,500,527,496,500,567,494,531,487,507,499,483],
[498,519,0,500,482,484,478,509,437,489,449,476,468,484],
[476,501,501,0,522,518,478,526,484,527,468,464,522,482],
[473,474,519,479,0,505,452,540,468,463,468,467,530,502],
[480,505,517,483,496,0,450,546,441,469,446,483,493,495],
[473,501,523,523,549,551,0,554,517,514,526,532,523,497],
[475,434,492,475,461,455,447,0,478,510,461,461,479,467],
[514,507,564,517,533,560,484,523,0,527,505,490,523,513],
[476,470,512,474,538,532,487,491,474,0,486,471,501,480],
[539,514,552,533,533,555,475,540,496,515,0,495,539,526],
[474,494,525,537,534,518,469,540,511,530,506,0,554,485],
[456,502,533,479,471,508,478,522,478,500,462,447,0,463],
[505,518,517,519,499,506,504,534,488,521,475,516,538,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 147, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,488,510,487,495,515,489,498,490,483,502,503,476],
[518,0,542,529,512,478,489,501,508,500,509,490,508,525],
[513,459,0,480,491,492,473,488,464,446,492,497,490,496],
[491,472,521,0,486,513,522,483,472,490,457,478,476,466],
[514,489,510,515,0,494,511,474,466,491,501,478,451,494],
[506,523,509,488,507,0,499,500,503,481,500,460,500,493],
[486,512,528,479,490,502,0,465,498,458,462,489,468,488],
[512,500,513,518,527,501,536,0,545,501,486,507,514,496],
[503,493,537,529,535,498,503,456,0,485,483,481,465,469],
[511,501,555,511,510,520,543,500,516,0,509,500,497,474],
[518,492,509,544,500,501,539,515,518,492,0,494,525,504],
[499,511,504,523,523,541,512,494,520,501,507,0,478,499],
[498,493,511,525,550,501,533,487,536,504,476,523,0,523],
[525,476,505,535,507,508,513,505,532,527,497,502,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 148, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,525,502,511,510,521,493,514,522,540,523,532,512,520],
[476,0,475,509,490,496,460,484,493,500,472,478,497,510],
[499,526,0,523,539,501,518,520,506,533,516,532,507,538],
[490,492,478,0,478,460,463,479,478,517,473,491,481,506],
[491,511,462,523,0,526,495,508,498,534,502,508,510,518],
[480,505,500,541,475,0,504,530,522,539,517,507,528,511],
[508,541,483,538,506,497,0,511,519,524,505,541,541,519],
[487,517,481,522,493,471,490,0,503,506,506,514,503,514],
[479,508,495,523,503,479,482,498,0,515,492,502,509,493],
[461,501,468,484,467,462,477,495,486,0,479,474,470,491],
[478,529,485,528,499,484,496,495,509,522,0,507,492,519],
[469,523,469,510,493,494,460,487,499,527,494,0,478,490],
[489,504,494,520,491,473,460,498,492,531,509,523,0,490],
[481,491,463,495,483,490,482,487,508,510,482,511,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 149, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,519,509,507,511,537,543,495,495,502,536,500,517],
[518,0,486,492,517,518,557,498,544,530,524,563,481,506],
[482,515,0,498,497,488,536,466,521,558,514,523,469,502],
[492,509,503,0,561,508,551,526,519,553,536,571,532,494],
[494,484,504,440,0,505,511,483,486,515,502,537,495,475],
[490,483,513,493,496,0,514,505,516,502,511,524,481,486],
[464,444,465,450,490,487,0,472,480,480,481,507,486,496],
[458,503,535,475,518,496,529,0,540,557,537,530,521,498],
[506,457,480,482,515,485,521,461,0,523,505,504,463,496],
[506,471,443,448,486,499,521,444,478,0,491,496,449,449],
[499,477,487,465,499,490,520,464,496,510,0,494,466,494],
[465,438,478,430,464,477,494,471,497,505,507,0,493,464],
[501,520,532,469,506,520,515,480,538,552,535,508,0,485],
[484,495,499,507,526,515,505,503,505,552,507,537,516,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 150, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,456,510,474,499,480,490,492,490,505,529,533,494],
[511,0,463,508,478,466,524,532,474,488,498,556,482,500],
[545,538,0,516,491,521,560,478,501,518,504,546,570,524],
[491,493,485,0,464,498,497,451,461,474,501,531,500,482],
[527,523,510,537,0,501,502,507,465,507,526,604,560,514],
[502,535,480,503,500,0,488,534,522,465,518,558,469,491],
[521,477,441,504,499,513,0,494,494,500,497,525,496,470],
[511,469,523,550,494,467,507,0,479,505,509,554,516,534],
[509,527,500,540,536,479,507,522,0,511,509,565,547,526],
[511,513,483,527,494,536,501,496,490,0,467,551,500,483],
[496,503,497,500,475,483,504,492,492,534,0,521,501,500],
[472,445,455,470,397,443,476,447,436,450,480,0,469,446],
[468,519,431,501,441,532,505,485,454,501,500,532,0,510],
[507,501,477,519,487,510,531,467,475,518,501,555,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 151, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,508,492,515,539,418,478,457,479,486,492,555,482],
[534,0,534,483,512,492,479,494,446,430,491,471,504,455],
[493,467,0,501,530,481,474,480,472,454,479,511,536,488],
[509,518,500,0,489,540,432,438,477,454,471,510,507,429],
[486,489,471,512,0,506,472,486,482,457,453,499,483,465],
[462,509,520,461,495,0,459,459,444,463,487,486,510,466],
[583,522,527,569,529,542,0,531,497,514,524,566,548,525],
[523,507,521,563,515,542,470,0,490,517,510,523,542,472],
[544,555,529,524,519,557,504,511,0,494,531,521,511,522],
[522,571,547,547,544,538,487,484,507,0,542,550,529,549],
[515,510,522,530,548,514,477,491,470,459,0,492,539,483],
[509,530,490,491,502,515,435,478,480,451,509,0,534,484],
[446,497,465,494,518,491,453,459,490,472,462,467,0,470],
[519,546,513,572,536,535,476,529,479,452,518,517,531,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 152, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,514,506,509,506,500,463,498,489,479,475,491,494],
[535,0,511,523,526,535,539,508,529,510,484,517,485,502],
[487,490,0,518,504,488,506,490,504,486,485,495,486,487],
[495,478,483,0,450,500,490,462,501,495,483,471,464,514],
[492,475,497,551,0,494,503,466,517,499,486,496,519,506],
[495,466,513,501,507,0,496,502,531,506,495,508,482,484],
[501,462,495,511,498,505,0,488,525,507,492,495,509,503],
[538,493,511,539,535,499,513,0,539,523,505,503,517,528],
[503,472,497,500,484,470,476,462,0,490,470,478,473,491],
[512,491,515,506,502,495,494,478,511,0,455,511,485,487],
[522,517,516,518,515,506,509,496,531,546,0,514,511,518],
[526,484,506,530,505,493,506,498,523,490,487,0,499,516],
[510,516,515,537,482,519,492,484,528,516,490,502,0,489],
[507,499,514,487,495,517,498,473,510,514,483,485,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 153, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,499,493,518,486,472,530,527,502,581,491,478,551],
[514,0,501,442,493,432,469,473,507,431,547,459,455,490],
[502,500,0,462,506,463,547,480,500,434,545,472,392,439],
[508,559,539,0,528,479,487,504,536,454,570,533,488,492],
[483,508,495,473,0,453,515,526,524,461,559,482,471,479],
[515,569,538,522,548,0,547,514,549,450,553,576,454,515],
[529,532,454,514,486,454,0,496,535,451,572,513,484,484],
[471,528,521,497,475,487,505,0,488,452,525,473,468,487],
[474,494,501,465,477,452,466,513,0,465,514,489,449,459],
[499,570,567,547,540,551,550,549,536,0,576,565,551,551],
[420,454,456,431,442,448,429,476,487,425,0,480,418,445],
[510,542,529,468,519,425,488,528,512,436,521,0,443,550],
[523,546,609,513,530,547,517,533,552,450,583,558,0,541],
[450,511,562,509,522,486,517,514,542,450,556,451,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 154, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,513,574,563,516,533,534,479,667,557,527,431,461],
[485,0,431,490,537,422,364,457,514,548,513,446,367,379],
[488,570,0,552,609,588,481,510,620,623,416,577,502,509],
[427,511,449,0,566,502,345,501,473,540,473,451,420,452],
[438,464,392,435,0,460,329,417,407,525,482,372,406,351],
[485,579,413,499,541,0,403,431,399,641,431,406,430,438],
[468,637,520,656,672,598,0,525,495,633,495,589,439,528],
[467,544,491,500,584,570,476,0,459,556,498,507,386,433],
[522,487,381,528,594,602,506,542,0,585,518,439,428,507],
[334,453,378,461,476,360,368,445,416,0,473,421,283,362],
[444,488,585,528,519,570,506,503,483,528,0,500,471,444],
[474,555,424,550,629,595,412,494,562,580,501,0,390,455],
[570,634,499,581,595,571,562,615,573,718,530,611,0,535],
[540,622,492,549,650,563,473,568,494,639,557,546,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 155, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,472,481,486,509,509,497,483,487,480,502,483,492],
[531,0,497,498,502,473,518,490,493,495,485,505,518,487],
[529,504,0,506,513,511,506,496,468,495,506,499,515,507],
[520,503,495,0,513,501,487,502,477,474,487,489,491,473],
[515,499,488,488,0,488,507,482,489,494,512,520,510,469],
[492,528,490,500,513,0,499,493,462,485,471,493,503,489],
[492,483,495,514,494,502,0,474,490,485,461,501,514,470],
[504,511,505,499,519,508,527,0,502,508,497,509,522,481],
[518,508,533,524,512,539,511,499,0,521,501,505,509,487],
[514,506,506,527,507,516,516,493,480,0,495,510,516,471],
[521,516,495,514,489,530,540,504,500,506,0,520,512,502],
[499,496,502,512,481,508,500,492,496,491,481,0,519,501],
[518,483,486,510,491,498,487,479,492,485,489,482,0,478],
[509,514,494,528,532,512,531,520,514,530,499,500,523,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 156, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,480,489,477,498,500,506,497,501,484,482,498,505],
[516,0,500,526,522,515,516,507,528,507,491,506,525,533],
[521,501,0,500,512,496,525,515,513,520,513,492,531,515],
[512,475,501,0,501,488,518,521,500,500,509,504,523,520],
[524,479,489,500,0,491,508,518,523,518,498,523,508,529],
[503,486,505,513,510,0,518,541,510,506,512,493,512,529],
[501,485,476,483,493,483,0,487,498,489,498,489,499,491],
[495,494,486,480,483,460,514,0,497,492,481,478,505,508],
[504,473,488,501,478,491,503,504,0,502,508,491,489,510],
[500,494,481,501,483,495,512,509,499,0,519,470,504,520],
[517,510,488,492,503,489,503,520,493,482,0,483,512,511],
[519,495,509,497,478,508,512,523,510,531,518,0,518,532],
[503,476,470,478,493,489,502,496,512,497,489,483,0,507],
[496,468,486,481,472,472,510,493,491,481,490,469,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 157, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,486,508,488,492,483,529,508,504,526,505,455,505],
[486,0,501,495,498,477,481,502,475,542,519,470,469,500],
[515,500,0,508,526,503,495,547,525,508,524,513,478,511],
[493,506,493,0,514,467,495,525,476,485,467,497,484,489],
[513,503,475,487,0,489,480,502,494,481,504,470,459,477],
[509,524,498,534,512,0,499,509,502,514,510,527,506,508],
[518,520,506,506,521,502,0,520,500,509,527,510,490,516],
[472,499,454,476,499,492,481,0,501,493,516,467,439,488],
[493,526,476,525,507,499,501,500,0,505,537,525,474,522],
[497,459,493,516,520,487,492,508,496,0,499,524,483,515],
[475,482,477,534,497,491,474,485,464,502,0,479,465,495],
[496,531,488,504,531,474,491,534,476,477,522,0,483,518],
[546,532,523,517,542,495,511,562,527,518,536,518,0,532],
[496,501,490,512,524,493,485,513,479,486,506,483,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 158, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,563,502,395,603,518,522,432,495,381,507,558,518,524],
[438,0,414,453,436,514,460,401,337,374,373,469,398,393],
[499,587,0,553,548,578,601,478,401,459,430,691,573,576],
[606,548,448,0,533,636,487,483,448,434,442,573,455,553],
[398,565,453,468,0,576,489,444,387,486,408,489,462,484],
[483,487,423,365,425,0,481,395,287,410,454,468,459,477],
[479,541,400,514,512,520,0,436,451,365,387,517,468,487],
[569,600,523,518,557,606,565,0,419,455,449,581,450,577],
[506,664,600,553,614,714,550,582,0,547,449,678,600,540],
[620,627,542,567,515,591,636,546,454,0,544,626,534,512],
[494,628,571,559,593,547,614,552,552,457,0,631,476,605],
[443,532,310,428,512,533,484,420,323,375,370,0,397,435],
[483,603,428,546,539,542,533,551,401,467,525,604,0,500],
[477,608,425,448,517,524,514,424,461,489,396,566,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 159, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,519,505,502,543,527,490,465,460,481,564,483,464],
[512,0,487,490,513,582,562,513,492,496,521,547,508,488],
[482,514,0,452,511,513,519,473,516,467,501,500,451,476],
[496,511,549,0,528,588,564,492,476,536,507,540,477,514],
[499,488,490,473,0,547,529,504,431,444,457,547,498,488],
[458,419,488,413,454,0,513,482,464,437,467,499,412,444],
[474,439,482,437,472,488,0,458,421,445,445,488,422,512],
[511,488,528,509,497,519,543,0,462,523,485,490,439,483],
[536,509,485,525,570,537,580,539,0,507,480,568,493,517],
[541,505,534,465,557,564,556,478,494,0,460,533,495,513],
[520,480,500,494,544,534,556,516,521,541,0,525,497,517],
[437,454,501,461,454,502,513,511,433,468,476,0,478,487],
[518,493,550,524,503,589,579,562,508,506,504,523,0,522],
[537,513,525,487,513,557,489,518,484,488,484,514,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 160, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,445,540,536,457,425,445,480,487,428,496,490,404],
[526,0,396,453,493,487,451,450,535,488,462,477,493,402],
[556,605,0,571,623,486,550,467,521,598,487,539,495,469],
[461,548,430,0,516,389,470,461,506,463,493,567,506,328],
[465,508,378,485,0,470,519,484,484,479,479,480,438,391],
[544,514,515,612,531,0,447,453,518,487,533,543,553,416],
[576,550,451,531,482,554,0,521,567,528,560,547,522,435],
[556,551,534,540,517,548,480,0,607,532,534,601,505,522],
[521,466,480,495,517,483,434,394,0,468,485,521,457,442],
[514,513,403,538,522,514,473,469,533,0,478,590,501,465],
[573,539,514,508,522,468,441,467,516,523,0,487,471,419],
[505,524,462,434,521,458,454,400,480,411,514,0,523,531],
[511,508,506,495,563,448,479,496,544,500,530,478,0,492],
[597,599,532,673,610,585,566,479,559,536,582,470,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 161, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,493,545,485,469,506,575,491,448,504,481,492,507],
[534,0,543,487,549,522,496,598,500,502,519,493,544,537],
[508,458,0,450,459,491,483,537,490,436,457,473,511,451],
[456,514,551,0,479,507,509,577,474,460,479,513,485,476],
[516,452,542,522,0,503,539,551,497,482,518,476,475,551],
[532,479,510,494,498,0,531,608,479,442,533,478,539,498],
[495,505,518,492,462,470,0,565,505,483,512,487,479,502],
[426,403,464,424,450,393,436,0,424,404,460,436,431,442],
[510,501,511,527,504,522,496,577,0,484,527,530,502,484],
[553,499,565,541,519,559,518,597,517,0,552,513,521,525],
[497,482,544,522,483,468,489,541,474,449,0,501,484,507],
[520,508,528,488,525,523,514,565,471,488,500,0,495,486],
[509,457,490,516,526,462,522,570,499,480,517,506,0,526],
[494,464,550,525,450,503,499,559,517,476,494,515,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 162, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,442,510,485,507,519,486,490,459,461,480,490,491],
[522,0,507,523,530,513,554,522,510,502,469,519,498,508],
[559,494,0,526,529,519,531,512,524,505,517,525,519,505],
[491,478,475,0,501,503,500,473,491,497,460,492,485,488],
[516,471,472,500,0,476,511,483,496,476,490,512,506,476],
[494,488,482,498,525,0,506,495,466,508,475,504,474,471],
[482,447,470,501,490,495,0,475,485,448,475,497,496,468],
[515,479,489,528,518,506,526,0,497,500,468,519,507,488],
[511,491,477,510,505,535,516,504,0,498,472,516,492,472],
[542,499,496,504,525,493,553,501,503,0,503,527,512,490],
[540,532,484,541,511,526,526,533,529,498,0,541,506,508],
[521,482,476,509,489,497,504,482,485,474,460,0,479,468],
[511,503,482,516,495,527,505,494,509,489,495,522,0,478],
[510,493,496,513,525,530,533,513,529,511,493,533,523,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 163, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,568,532,493,572,481,515,507,492,528,555,510,492,475],
[433,0,515,487,461,471,458,464,485,454,506,483,481,439],
[469,486,0,507,563,530,495,495,515,540,568,509,528,521],
[508,514,494,0,525,499,427,458,514,518,581,482,469,478],
[429,540,438,476,0,479,420,474,486,505,511,487,489,470],
[520,530,471,502,522,0,488,484,519,506,548,484,510,452],
[486,543,506,574,581,513,0,517,505,539,594,519,513,541],
[494,537,506,543,527,517,484,0,475,501,550,570,505,518],
[509,516,486,487,515,482,496,526,0,470,463,474,496,460],
[473,547,461,483,496,495,462,500,531,0,523,412,522,429],
[446,495,433,420,490,453,407,451,538,478,0,431,481,416],
[491,518,492,519,514,517,482,431,527,589,570,0,542,484],
[509,520,473,532,512,491,488,496,505,479,520,459,0,463],
[526,562,480,523,531,549,460,483,541,572,585,517,538,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 164, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,511,514,507,514,516,537,508,506,533,542,489,545],
[507,0,496,498,532,509,515,533,502,500,553,528,510,514],
[490,505,0,494,529,518,518,518,507,497,502,511,491,513],
[487,503,507,0,491,531,494,546,499,506,526,510,517,523],
[494,469,472,510,0,500,478,508,486,502,501,497,484,505],
[487,492,483,470,501,0,460,490,476,490,482,474,446,504],
[485,486,483,507,523,541,0,539,501,508,528,531,472,549],
[464,468,483,455,493,511,462,0,478,500,521,490,463,519],
[493,499,494,502,515,525,500,523,0,479,488,495,500,488],
[495,501,504,495,499,511,493,501,522,0,515,535,499,502],
[468,448,499,475,500,519,473,480,513,486,0,499,481,506],
[459,473,490,491,504,527,470,511,506,466,502,0,494,527],
[512,491,510,484,517,555,529,538,501,502,520,507,0,535],
[456,487,488,478,496,497,452,482,513,499,495,474,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 165, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,505,553,583,560,547,535,592,589,547,532,493,540],
[492,0,503,562,547,559,510,498,585,557,608,508,470,512],
[496,498,0,530,612,567,540,512,550,539,529,494,492,523],
[448,439,471,0,550,473,500,445,514,472,535,503,454,513],
[418,454,389,451,0,459,442,429,480,467,514,397,419,386],
[441,442,434,528,542,0,481,433,548,526,502,480,470,462],
[454,491,461,501,559,520,0,448,555,508,559,464,512,479],
[466,503,489,556,572,568,553,0,551,580,585,496,498,510],
[409,416,451,487,521,453,446,450,0,513,518,484,416,447],
[412,444,462,529,534,475,493,421,488,0,428,450,433,428],
[454,393,472,466,487,499,442,416,483,573,0,429,411,474],
[469,493,507,498,604,521,537,505,517,551,572,0,510,503],
[508,531,509,547,582,531,489,503,585,568,590,491,0,507],
[461,489,478,488,615,539,522,491,554,573,527,498,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 166, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,508,485,481,526,527,528,504,518,507,508,482,503],
[483,0,467,453,459,500,505,471,473,490,479,477,458,465],
[493,534,0,498,488,541,518,535,524,515,495,525,530,536],
[516,548,503,0,505,541,540,530,497,525,504,518,491,538],
[520,542,513,496,0,553,545,520,509,543,517,543,553,541],
[475,501,460,460,448,0,453,509,454,504,466,492,450,489],
[474,496,483,461,456,548,0,533,497,503,496,484,484,525],
[473,530,466,471,481,492,468,0,481,494,485,486,488,495],
[497,528,477,504,492,547,504,520,0,545,494,492,489,510],
[483,511,486,476,458,497,498,507,456,0,470,479,481,459],
[494,522,506,497,484,535,505,516,507,531,0,495,491,526],
[493,524,476,483,458,509,517,515,509,522,506,0,486,489],
[519,543,471,510,448,551,517,513,512,520,510,515,0,500],
[498,536,465,463,460,512,476,506,491,542,475,512,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 167, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,554,515,515,541,495,519,479,502,537,494,504,517,505],
[447,0,479,495,512,485,474,476,484,492,476,516,482,488],
[486,522,0,506,523,494,516,485,483,525,474,525,503,508],
[486,506,495,0,494,482,508,489,485,484,471,528,523,499],
[460,489,478,507,0,473,489,466,481,505,459,510,482,478],
[506,516,507,519,528,0,524,512,507,513,486,521,511,523],
[482,527,485,493,512,477,0,477,481,497,492,525,500,493],
[522,525,516,512,535,489,524,0,515,530,512,530,526,526],
[499,517,518,516,520,494,520,486,0,509,513,523,515,517],
[464,509,476,517,496,488,504,471,492,0,482,533,502,490],
[507,525,527,530,542,515,509,489,488,519,0,526,539,530],
[497,485,476,473,491,480,476,471,478,468,475,0,471,496],
[484,519,498,478,519,490,501,475,486,499,462,530,0,523],
[496,513,493,502,523,478,508,475,484,511,471,505,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 168, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,482,486,509,502,484,496,485,488,497,508,478,511],
[503,0,507,507,511,513,480,491,489,478,504,513,505,531],
[519,494,0,491,510,505,467,501,479,483,496,515,500,503],
[515,494,510,0,500,514,492,517,494,499,502,528,511,518],
[492,490,491,501,0,494,474,488,478,482,469,535,496,498],
[499,488,496,487,507,0,461,476,482,465,490,493,513,499],
[517,521,534,509,527,540,0,502,521,495,496,552,521,519],
[505,510,500,484,513,525,499,0,498,492,513,545,522,528],
[516,512,522,507,523,519,480,503,0,502,517,550,513,533],
[513,523,518,502,519,536,506,509,499,0,521,532,501,532],
[504,497,505,499,532,511,505,488,484,480,0,520,497,508],
[493,488,486,473,466,508,449,456,451,469,481,0,470,485],
[523,496,501,490,505,488,480,479,488,500,504,531,0,510],
[490,470,498,483,503,502,482,473,468,469,493,516,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 169, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,511,481,513,480,492,494,505,462,492,491,476,512],
[510,0,507,494,488,504,498,489,494,476,482,479,487,476],
[490,494,0,465,485,478,472,491,475,476,455,471,474,465],
[520,507,536,0,497,532,500,500,509,510,509,502,505,509],
[488,513,516,504,0,523,502,510,504,494,514,498,507,503],
[521,497,523,469,478,0,499,495,496,489,491,489,478,490],
[509,503,529,501,499,502,0,517,499,508,522,475,501,511],
[507,512,510,501,491,506,484,0,498,485,480,481,459,481],
[496,507,526,492,497,505,502,503,0,491,514,497,488,488],
[539,525,525,491,507,512,493,516,510,0,508,482,503,504],
[509,519,546,492,487,510,479,521,487,493,0,508,484,498],
[510,522,530,499,503,512,526,520,504,519,493,0,502,499],
[525,514,527,496,494,523,500,542,513,498,517,499,0,522],
[489,525,536,492,498,511,490,520,513,497,503,502,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 170, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,481,458,472,487,480,498,485,458,459,482,464,448],
[506,0,471,491,474,516,488,493,476,458,485,495,520,503],
[520,530,0,495,531,527,524,512,533,505,509,509,572,471],
[543,510,506,0,463,496,470,481,516,472,478,501,498,546],
[529,527,470,538,0,527,502,527,512,496,506,521,517,524],
[514,485,474,505,474,0,524,501,477,457,515,492,510,496],
[521,513,477,531,499,477,0,506,516,482,492,469,550,503],
[503,508,489,520,474,500,495,0,507,476,480,477,520,532],
[516,525,468,485,489,524,485,494,0,498,500,490,512,489],
[543,543,496,529,505,544,519,525,503,0,519,490,550,545],
[542,516,492,523,495,486,509,521,501,482,0,503,515,480],
[519,506,492,500,480,509,532,524,511,511,498,0,514,491],
[537,481,429,503,484,491,451,481,489,451,486,487,0,474],
[553,498,530,455,477,505,498,469,512,456,521,510,527,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 171, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,555,532,524,503,522,522,484,529,555,527,531,518],
[509,0,530,462,478,469,464,500,524,491,485,484,501,495],
[446,471,0,510,464,461,473,519,450,508,481,479,472,483],
[469,539,491,0,473,444,503,512,515,478,482,502,514,510],
[477,523,537,528,0,476,500,527,533,543,544,504,550,528],
[498,532,540,557,525,0,499,536,513,523,545,525,535,557],
[479,537,528,498,501,502,0,542,542,521,503,514,530,518],
[479,501,482,489,474,465,459,0,469,493,508,489,514,490],
[517,477,551,486,468,488,459,532,0,511,505,499,486,479],
[472,510,493,523,458,478,480,508,490,0,504,481,510,507],
[446,516,520,519,457,456,498,493,496,497,0,488,498,500],
[474,517,522,499,497,476,487,512,502,520,513,0,517,511],
[470,500,529,487,451,466,471,487,515,491,503,484,0,492],
[483,506,518,491,473,444,483,511,522,494,501,490,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 172, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,541,532,530,538,539,501,521,558,540,522,489,508,519],
[460,0,511,475,486,482,487,495,505,485,492,497,486,502],
[469,490,0,495,484,485,493,488,511,494,497,486,470,488],
[471,526,506,0,500,501,488,508,511,518,495,473,488,489],
[463,515,517,501,0,488,499,495,528,498,511,482,473,483],
[462,519,516,500,513,0,490,501,524,495,493,479,499,511],
[500,514,508,513,502,511,0,516,504,510,510,490,497,500],
[480,506,513,493,506,500,485,0,537,509,498,466,486,502],
[443,496,490,490,473,477,497,464,0,486,495,479,470,479],
[461,516,507,483,503,506,491,492,515,0,504,502,483,507],
[479,509,504,506,490,508,491,503,506,497,0,474,490,511],
[512,504,515,528,519,522,511,535,522,499,527,0,516,503],
[493,515,531,513,528,502,504,515,531,518,511,485,0,488],
[482,499,513,512,518,490,501,499,522,494,490,498,513,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 173, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,502,498,544,417,445,510,500,560,493,478,480,478],
[517,0,493,561,560,463,489,589,551,583,534,542,480,554],
[499,508,0,548,567,482,473,561,541,551,493,494,495,540],
[503,440,453,0,508,439,433,466,469,510,454,447,473,466],
[457,441,434,493,0,393,425,460,443,474,442,443,438,439],
[584,538,519,562,608,0,537,566,564,574,515,496,536,535],
[556,512,528,568,576,464,0,587,563,598,527,524,529,534],
[491,412,440,535,541,435,414,0,533,514,481,481,452,487],
[501,450,460,532,558,437,438,468,0,494,462,463,452,463],
[441,418,450,491,527,427,403,487,507,0,462,439,446,442],
[508,467,508,547,559,486,474,520,539,539,0,473,515,493],
[523,459,507,554,558,505,477,520,538,562,528,0,510,569],
[521,521,506,528,563,465,472,549,549,555,486,491,0,489],
[523,447,461,535,562,466,467,514,538,559,508,432,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 174, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,538,521,479,538,531,593,512,505,519,590,540,533,511],
[463,0,468,468,467,458,565,515,467,518,529,527,533,508],
[480,533,0,466,477,498,580,513,515,482,539,518,515,475],
[522,533,535,0,534,520,576,534,525,507,539,505,517,488],
[463,534,524,467,0,487,549,530,477,514,527,524,517,504],
[470,543,503,481,514,0,585,497,510,521,515,515,514,499],
[408,436,421,425,452,416,0,437,436,464,463,490,486,468],
[489,486,488,467,471,504,564,0,499,505,529,522,555,490],
[496,534,486,476,524,491,565,502,0,514,511,513,526,506],
[482,483,519,494,487,480,537,496,487,0,492,552,534,490],
[411,472,462,462,474,486,538,472,490,509,0,525,523,519],
[461,474,483,496,477,486,511,479,488,449,476,0,505,501],
[468,468,486,484,484,487,515,446,475,467,478,496,0,467],
[490,493,526,513,497,502,533,511,495,511,482,500,534,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 175, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,512,502,518,497,489,514,507,534,482,481,496,524],
[495,0,509,519,491,494,512,526,494,514,502,480,499,511],
[489,492,0,495,492,483,500,511,490,514,498,495,496,503],
[499,482,506,0,489,479,487,530,473,500,480,495,497,516],
[483,510,509,512,0,518,504,509,515,534,475,508,537,536],
[504,507,518,522,483,0,496,520,507,540,487,498,526,519],
[512,489,501,514,497,505,0,528,542,539,509,483,510,517],
[487,475,490,471,492,481,473,0,471,492,476,494,487,491],
[494,507,511,528,486,494,459,530,0,534,501,490,517,538],
[467,487,487,501,467,461,462,509,467,0,461,460,473,506],
[519,499,503,521,526,514,492,525,500,540,0,516,549,520],
[520,521,506,506,493,503,518,507,511,541,485,0,488,518],
[505,502,505,504,464,475,491,514,484,528,452,513,0,505],
[477,490,498,485,465,482,484,510,463,495,481,483,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 176, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,492,503,494,496,516,487,511,507,532,498,527,505],
[503,0,520,492,498,495,531,495,502,494,517,490,512,528],
[509,481,0,511,484,471,489,494,491,489,493,487,492,490],
[498,509,490,0,487,499,503,501,490,487,506,500,497,509],
[507,503,517,514,0,493,513,517,497,505,522,504,514,508],
[505,506,530,502,508,0,511,510,497,508,535,492,524,520],
[485,470,512,498,488,490,0,477,481,488,492,474,479,479],
[514,506,507,500,484,491,524,0,508,504,532,506,506,525],
[490,499,510,511,504,504,520,493,0,499,512,502,488,506],
[494,507,512,514,496,493,513,497,502,0,526,512,492,519],
[469,484,508,495,479,466,509,469,489,475,0,488,497,509],
[503,511,514,501,497,509,527,495,499,489,513,0,507,512],
[474,489,509,504,487,477,522,495,513,509,504,494,0,509],
[496,473,511,492,493,481,522,476,495,482,492,489,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 177, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,464,527,501,494,519,467,475,495,484,491,500,507],
[489,0,476,529,512,522,478,489,496,504,483,481,485,476],
[537,525,0,534,553,547,485,513,500,509,471,536,509,508],
[474,472,467,0,515,466,497,494,469,454,489,456,484,486],
[500,489,448,486,0,489,517,479,464,499,449,491,478,492],
[507,479,454,535,512,0,524,467,480,487,456,482,482,473],
[482,523,516,504,484,477,0,492,494,462,490,473,492,512],
[534,512,488,507,522,534,509,0,503,495,512,522,518,514],
[526,505,501,532,537,521,507,498,0,514,518,537,488,508],
[506,497,492,547,502,514,539,506,487,0,519,536,526,550],
[517,518,530,512,552,545,511,489,483,482,0,508,507,506],
[510,520,465,545,510,519,528,479,464,465,493,0,479,511],
[501,516,492,517,523,519,509,483,513,475,494,522,0,498],
[494,525,493,515,509,528,489,487,493,451,495,490,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 178, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,520,531,533,514,522,521,552,519,521,515,535,495,521],
[481,0,505,520,526,502,517,522,497,508,501,517,520,512],
[470,496,0,499,497,476,490,503,497,517,492,499,493,492],
[468,481,502,0,475,498,493,500,490,497,485,521,486,476],
[487,475,504,526,0,504,516,535,475,499,470,510,496,476],
[479,499,525,503,497,0,512,530,503,511,503,492,515,507],
[480,484,511,508,485,489,0,511,483,493,489,496,499,506],
[449,479,498,501,466,471,490,0,473,486,474,489,460,494],
[482,504,504,511,526,498,518,528,0,498,527,514,510,518],
[480,493,484,504,502,490,508,515,503,0,493,502,502,480],
[486,500,509,516,531,498,512,527,474,508,0,510,505,501],
[466,484,502,480,491,509,505,512,487,499,491,0,481,483],
[506,481,508,515,505,486,502,541,491,499,496,520,0,521],
[480,489,509,525,525,494,495,507,483,521,500,518,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 179, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,515,464,482,512,469,472,463,512,510,521,503,492],
[513,0,498,469,467,535,465,499,512,515,519,495,507,473],
[486,503,0,442,472,489,478,473,488,489,497,509,498,443],
[537,532,559,0,512,525,502,547,504,557,549,532,523,485],
[519,534,529,489,0,536,519,532,502,509,504,529,530,506],
[489,466,512,476,465,0,452,480,479,515,523,492,517,500],
[532,536,523,499,482,549,0,533,518,538,513,531,519,519],
[529,502,528,454,469,521,468,0,493,511,512,498,514,470],
[538,489,513,497,499,522,483,508,0,537,531,520,529,494],
[489,486,512,444,492,486,463,490,464,0,476,480,465,478],
[491,482,504,452,497,478,488,489,470,525,0,510,504,490],
[480,506,492,469,472,509,470,503,481,521,491,0,525,476],
[498,494,503,478,471,484,482,487,472,536,497,476,0,468],
[509,528,558,516,495,501,482,531,507,523,511,525,533,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 180, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,468,503,523,511,520,519,534,509,532,528,524,550],
[489,0,512,498,519,520,482,493,536,536,494,509,516,538],
[533,489,0,486,500,537,474,522,521,516,535,511,518,519],
[498,503,515,0,525,502,489,499,498,499,475,509,527,539],
[478,482,501,476,0,507,474,477,489,488,525,509,480,534],
[490,481,464,499,494,0,495,489,500,500,512,495,483,505],
[481,519,527,512,527,506,0,516,536,507,541,538,512,532],
[482,508,479,502,524,512,485,0,552,514,540,534,503,525],
[467,465,480,503,512,501,465,449,0,481,484,507,473,502],
[492,465,485,502,513,501,494,487,520,0,544,524,503,498],
[469,507,466,526,476,489,460,461,517,457,0,478,487,525],
[473,492,490,492,492,506,463,467,494,477,523,0,477,533],
[477,485,483,474,521,518,489,498,528,498,514,524,0,539],
[451,463,482,462,467,496,469,476,499,503,476,468,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 181, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,524,493,483,500,491,476,514,513,515,482,496,513],
[540,0,537,513,521,529,509,542,490,522,519,515,521,520],
[477,464,0,483,464,498,492,490,495,482,520,487,499,467],
[508,488,518,0,507,522,473,516,493,513,507,505,489,517],
[518,480,537,494,0,520,520,522,485,535,511,493,504,498],
[501,472,503,479,481,0,485,498,478,488,501,496,501,486],
[510,492,509,528,481,516,0,496,499,522,496,487,486,520],
[525,459,511,485,479,503,505,0,462,487,518,495,477,473],
[487,511,506,508,516,523,502,539,0,523,507,504,511,518],
[488,479,519,488,466,513,479,514,478,0,513,500,509,516],
[486,482,481,494,490,500,505,483,494,488,0,467,478,500],
[519,486,514,496,508,505,514,506,497,501,534,0,501,521],
[505,480,502,512,497,500,515,524,490,492,523,500,0,505],
[488,481,534,484,503,515,481,528,483,485,501,480,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 182, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,467,459,508,465,480,480,445,490,489,464,465,462],
[541,0,509,501,537,509,494,518,488,528,521,491,495,461],
[534,492,0,494,502,523,528,507,496,516,518,499,501,496],
[542,500,507,0,518,541,495,498,473,499,497,501,482,499],
[493,464,499,483,0,495,511,487,471,508,503,482,483,464],
[536,492,478,460,506,0,490,487,466,496,494,481,480,463],
[521,507,473,506,490,511,0,504,477,518,520,491,480,476],
[521,483,494,503,514,514,497,0,486,497,534,501,493,470],
[556,513,505,528,530,535,524,515,0,547,518,535,496,514],
[511,473,485,502,493,505,483,504,454,0,485,490,476,496],
[512,480,483,504,498,507,481,467,483,516,0,498,466,484],
[537,510,502,500,519,520,510,500,466,511,503,0,513,482],
[536,506,500,519,518,521,521,508,505,525,535,488,0,507],
[539,540,505,502,537,538,525,531,487,505,517,519,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 183, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,502,500,502,519,482,530,494,553,539,526,506,524],
[516,0,481,503,550,507,493,505,488,559,528,536,521,535],
[499,520,0,480,495,462,498,496,444,533,531,500,515,497],
[501,498,521,0,538,530,528,540,510,576,521,511,544,534],
[499,451,506,463,0,466,461,501,445,531,473,480,508,507],
[482,494,539,471,535,0,518,506,467,545,505,510,523,535],
[519,508,503,473,540,483,0,522,487,543,514,539,523,510],
[471,496,505,461,500,495,479,0,467,519,517,469,505,504],
[507,513,557,491,556,534,514,534,0,541,521,545,518,543],
[448,442,468,425,470,456,458,482,460,0,460,457,484,482],
[462,473,470,480,528,496,487,484,480,541,0,503,519,533],
[475,465,501,490,521,491,462,532,456,544,498,0,489,519],
[495,480,486,457,493,478,478,496,483,517,482,512,0,517],
[477,466,504,467,494,466,491,497,458,519,468,482,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 184, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,513,463,493,505,553,501,586,560,519,539,558,519,515],
[488,0,517,572,546,533,499,545,554,551,498,531,539,490],
[538,484,0,501,453,540,526,554,554,534,517,519,498,469],
[508,429,500,0,439,487,475,500,457,516,451,496,442,454],
[496,455,548,562,0,539,531,537,518,564,501,529,489,502],
[448,468,461,514,462,0,485,509,482,474,480,504,437,484],
[500,502,475,526,470,516,0,593,544,609,475,518,496,477],
[415,456,447,501,464,492,408,0,450,498,434,464,396,445],
[441,447,447,544,483,519,457,551,0,494,471,468,417,436],
[482,450,467,485,437,527,392,503,507,0,430,504,441,444],
[462,503,484,550,500,521,526,567,530,571,0,496,508,484],
[443,470,482,505,472,497,483,537,533,497,505,0,466,470],
[482,462,503,559,512,564,505,605,584,560,493,535,0,491],
[486,511,532,547,499,517,524,556,565,557,517,531,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 185, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,435,471,475,556,540,496,533,442,542,469,474,461],
[537,0,458,462,499,483,501,441,500,490,543,447,485,467],
[566,543,0,429,573,592,543,543,554,487,577,486,539,559],
[530,539,572,0,560,587,598,556,553,497,593,527,520,584],
[526,502,428,441,0,517,516,482,496,481,471,510,427,470],
[445,518,409,414,484,0,506,459,450,395,476,445,394,428],
[461,500,458,403,485,495,0,517,493,421,519,451,436,452],
[505,560,458,445,519,542,484,0,489,448,514,452,498,469],
[468,501,447,448,505,551,508,512,0,490,503,505,458,431],
[559,511,514,504,520,606,580,553,511,0,587,535,471,546],
[459,458,424,408,530,525,482,487,498,414,0,445,452,497],
[532,554,515,474,491,556,550,549,496,466,556,0,496,495],
[527,516,462,481,574,607,565,503,543,530,549,505,0,520],
[540,534,442,417,531,573,549,532,570,455,504,506,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 186, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,521,538,484,528,521,514,527,520,515,512,519,524],
[486,0,511,510,513,506,489,500,494,519,480,508,503,526],
[480,490,0,486,484,500,485,478,485,488,484,512,516,496],
[463,491,515,0,484,495,478,522,476,471,495,512,500,504],
[517,488,517,517,0,530,514,515,501,499,502,518,528,520],
[473,495,501,506,471,0,453,489,461,486,541,489,497,486],
[480,512,516,523,487,548,0,511,515,507,522,547,509,531],
[487,501,523,479,486,512,490,0,455,487,481,506,483,500],
[474,507,516,525,500,540,486,546,0,516,512,494,483,539],
[481,482,513,530,502,515,494,514,485,0,521,520,532,505],
[486,521,517,506,499,460,479,520,489,480,0,498,542,503],
[489,493,489,489,483,512,454,495,507,481,503,0,492,498],
[482,498,485,501,473,504,492,518,518,469,459,509,0,507],
[477,475,505,497,481,515,470,501,462,496,498,503,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 187, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,434,396,364,404,457,443,448,448,449,400,490,448],
[542,0,562,517,489,513,581,596,574,548,578,504,526,545],
[567,439,0,442,441,489,501,544,543,598,525,409,438,555],
[605,484,559,0,473,461,480,551,588,538,527,509,526,608],
[637,512,560,528,0,573,598,589,627,541,613,491,544,623],
[597,488,512,540,428,0,497,583,577,557,535,486,505,532],
[544,420,500,521,403,504,0,536,542,482,515,471,459,535],
[558,405,457,450,412,418,465,0,492,455,483,482,497,534],
[553,427,458,413,374,424,459,509,0,466,460,388,450,505],
[553,453,403,463,460,444,519,546,535,0,517,505,457,468],
[552,423,476,474,388,466,486,518,541,484,0,445,469,528],
[601,497,592,492,510,515,530,519,613,496,556,0,527,629],
[511,475,563,475,457,496,542,504,551,544,532,474,0,548],
[553,456,446,393,378,469,466,467,496,533,473,372,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 188, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,371,521,488,453,457,558,509,493,461,525,498,418,415],
[630,0,551,464,511,454,630,679,564,475,510,411,607,527],
[480,450,0,518,531,481,607,571,545,521,548,491,558,460],
[513,537,483,0,530,540,572,629,547,435,548,568,576,494],
[548,490,470,471,0,498,649,595,605,527,603,526,566,431],
[544,547,520,461,503,0,630,531,513,427,528,499,513,534],
[443,371,394,429,352,371,0,545,414,379,471,449,431,387],
[492,322,430,372,406,470,456,0,391,401,401,378,493,327],
[508,437,456,454,396,488,587,610,0,440,530,497,516,425],
[540,526,480,566,474,574,622,600,561,0,519,542,581,479],
[476,491,453,453,398,473,530,600,471,482,0,464,528,471],
[503,590,510,433,475,502,552,623,504,459,537,0,537,521],
[583,394,443,425,435,488,570,508,485,420,473,464,0,409],
[586,474,541,507,570,467,614,674,576,522,530,480,592,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 189, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,541,472,540,482,489,500,501,509,478,476,567,510],
[491,0,484,460,492,439,455,460,458,466,433,453,512,503],
[460,517,0,481,533,507,497,492,491,503,452,508,531,457],
[529,541,520,0,480,577,494,513,524,507,458,565,573,508],
[461,509,468,521,0,477,446,465,482,488,496,498,526,472],
[519,562,494,424,524,0,469,490,503,499,482,477,525,504],
[512,546,504,507,555,532,0,545,511,498,473,518,527,509],
[501,541,509,488,536,511,456,0,552,560,475,558,549,469],
[500,543,510,477,519,498,490,449,0,540,440,509,534,510],
[492,535,498,494,513,502,503,441,461,0,469,461,590,455],
[523,568,549,543,505,519,528,526,561,532,0,560,578,481],
[525,548,493,436,503,524,483,443,492,540,441,0,542,488],
[434,489,470,428,475,476,474,452,467,411,423,459,0,440],
[491,498,544,493,529,497,492,532,491,546,520,513,561,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 190, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,533,486,547,490,470,512,518,470,477,504,488,529,516],
[468,0,446,497,496,466,477,502,458,436,477,468,515,481],
[515,555,0,540,480,494,507,524,500,498,535,499,507,537],
[454,504,461,0,482,450,472,495,450,450,483,471,495,477],
[511,505,521,519,0,476,483,508,486,513,523,503,512,499],
[531,535,507,551,525,0,509,533,502,503,519,495,503,512],
[489,524,494,529,518,492,0,521,470,473,524,498,513,504],
[483,499,477,506,493,468,480,0,492,466,474,466,492,493],
[531,543,501,551,515,499,531,509,0,490,521,526,538,543],
[524,565,503,551,488,498,528,535,511,0,510,518,532,516],
[497,524,466,518,478,482,477,527,480,491,0,486,485,480],
[513,533,502,530,498,506,503,535,475,483,515,0,524,494],
[472,486,494,506,489,498,488,509,463,469,516,477,0,486],
[485,520,464,524,502,489,497,508,458,485,521,507,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 191, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,575,537,537,484,518,530,484,448,474,503,505,546,514],
[426,0,511,501,443,476,438,454,463,452,485,438,530,509],
[464,490,0,497,450,481,459,426,451,461,439,400,503,515],
[464,500,504,0,487,533,497,468,504,470,515,467,529,531],
[517,558,551,514,0,542,512,534,485,512,506,501,557,578],
[483,525,520,468,459,0,506,516,475,475,464,474,533,489],
[471,563,542,504,489,495,0,467,508,486,489,487,531,541],
[517,547,575,533,467,485,534,0,499,508,498,489,563,511],
[553,538,550,497,516,526,493,502,0,536,491,506,563,551],
[527,549,540,531,489,526,515,493,465,0,515,494,561,517],
[498,516,562,486,495,537,512,503,510,486,0,450,565,528],
[496,563,601,534,500,527,514,512,495,507,551,0,574,568],
[455,471,498,472,444,468,470,438,438,440,436,427,0,487],
[487,492,486,470,423,512,460,490,450,484,473,433,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 192, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,442,596,526,553,468,506,523,494,494,545,466,564],
[491,0,475,548,483,464,523,564,536,561,477,448,518,558],
[559,526,0,618,528,512,479,551,526,511,529,560,520,587],
[405,453,383,0,360,431,321,500,435,376,397,445,427,496],
[475,518,473,641,0,473,365,508,467,425,456,464,429,555],
[448,537,489,570,528,0,417,436,481,566,487,405,475,515],
[533,478,522,680,636,584,0,625,500,588,545,563,541,576],
[495,437,450,501,493,565,376,0,485,511,460,533,488,493],
[478,465,475,566,534,520,501,516,0,437,440,469,576,502],
[507,440,490,625,576,435,413,490,564,0,471,490,519,564],
[507,524,472,604,545,514,456,541,561,530,0,513,542,607],
[456,553,441,556,537,596,438,468,532,511,488,0,555,491],
[535,483,481,574,572,526,460,513,425,482,459,446,0,513],
[437,443,414,505,446,486,425,508,499,437,394,510,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 193, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,526,501,503,500,515,488,526,511,523,505,530,544,507],
[475,0,468,505,482,513,507,516,494,494,488,499,525,491],
[500,533,0,520,503,513,534,554,495,503,504,529,557,488],
[498,496,481,0,501,495,507,506,504,505,481,489,521,491],
[501,519,498,500,0,528,518,512,503,500,482,532,516,521],
[486,488,488,506,473,0,515,517,504,506,475,495,520,501],
[513,494,467,494,483,486,0,517,506,511,477,516,509,477],
[475,485,447,495,489,484,484,0,488,497,461,490,515,490],
[490,507,506,497,498,497,495,513,0,507,476,509,527,491],
[478,507,498,496,501,495,490,504,494,0,494,497,508,491],
[496,513,497,520,519,526,524,540,525,507,0,520,522,517],
[471,502,472,512,469,506,485,511,492,504,481,0,517,487],
[457,476,444,480,485,481,492,486,474,493,479,484,0,465],
[494,510,513,510,480,500,524,511,510,510,484,514,536,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 194, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,513,509,497,488,499,502,548,503,506,518,494,493,512],
[488,0,498,481,493,474,489,512,468,501,501,463,495,498],
[492,503,0,483,511,500,487,500,482,494,507,485,488,499],
[504,520,518,0,521,482,504,552,474,523,520,505,514,529],
[513,508,490,480,0,487,502,523,475,506,512,500,504,505],
[502,527,501,519,514,0,499,516,487,508,499,495,517,509],
[499,512,514,497,499,502,0,537,483,507,498,486,514,514],
[453,489,501,449,478,485,464,0,449,471,481,473,482,490],
[498,533,519,527,526,514,518,552,0,527,524,521,535,540],
[495,500,507,478,495,493,494,530,474,0,519,494,495,511],
[483,500,494,481,489,502,503,520,477,482,0,500,511,532],
[507,538,516,496,501,506,515,528,480,507,501,0,497,516],
[508,506,513,487,497,484,487,519,466,506,490,504,0,511],
[489,503,502,472,496,492,487,511,461,490,469,485,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 195, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,483,534,528,522,500,516,535,514,499,504,511,493],
[506,0,511,529,522,526,493,505,495,506,516,488,511,509],
[518,490,0,518,493,502,505,501,510,512,502,509,498,493],
[467,472,483,0,516,469,480,494,497,480,492,499,475,452],
[473,479,508,485,0,475,492,483,489,498,505,484,479,477],
[479,475,499,532,526,0,505,480,513,497,494,510,509,502],
[501,508,496,521,509,496,0,496,524,526,496,535,525,471],
[485,496,500,507,518,521,505,0,529,516,502,512,502,492],
[466,506,491,504,512,488,477,472,0,488,487,489,499,485],
[487,495,489,521,503,504,475,485,513,0,489,484,488,497],
[502,485,499,509,496,507,505,499,514,512,0,505,503,474],
[497,513,492,502,517,491,466,489,512,517,496,0,507,483],
[490,490,503,526,522,492,476,499,502,513,498,494,0,480],
[508,492,508,549,524,499,530,509,516,504,527,518,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 196, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,537,498,481,503,513,525,524,486,488,496,508,534,521],
[464,0,467,449,466,447,466,477,496,461,471,468,530,485],
[503,534,0,491,463,457,506,514,460,486,493,511,538,524],
[520,552,510,0,489,489,522,519,525,480,532,531,555,522],
[498,535,538,512,0,485,537,512,518,513,513,531,531,510],
[488,554,544,512,516,0,514,520,489,489,504,549,544,485],
[476,535,495,479,464,487,0,521,485,466,459,476,538,462],
[477,524,487,482,489,481,480,0,484,459,450,481,535,498],
[515,505,541,476,483,512,516,517,0,480,461,509,543,511],
[513,540,515,521,488,512,535,542,521,0,484,511,586,551],
[505,530,508,469,488,497,542,551,540,517,0,506,545,521],
[493,533,490,470,470,452,525,520,492,490,495,0,519,496],
[467,471,463,446,470,457,463,466,458,415,456,482,0,468],
[480,516,477,479,491,516,539,503,490,450,480,505,533,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 197, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,493,476,485,458,486,483,475,474,479,475,481,458],
[520,0,491,497,484,476,485,499,489,486,500,520,520,471],
[508,510,0,481,485,480,470,491,495,505,506,526,496,493],
[525,504,520,0,498,471,505,499,531,527,514,542,541,505],
[516,517,516,503,0,503,504,528,521,497,492,541,522,483],
[543,525,521,530,498,0,515,529,531,520,552,573,529,532],
[515,516,531,496,497,486,0,517,505,489,504,500,522,489],
[518,502,510,502,473,472,484,0,492,498,520,520,496,488],
[526,512,506,470,480,470,496,509,0,498,514,528,526,491],
[527,515,496,474,504,481,512,503,503,0,513,515,510,482],
[522,501,495,487,509,449,497,481,487,488,0,531,503,472],
[526,481,475,459,460,428,501,481,473,486,470,0,505,457],
[520,481,505,460,479,472,479,505,475,491,498,496,0,486],
[543,530,508,496,518,469,512,513,510,519,529,544,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 198, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,478,477,462,503,477,484,481,519,498,482,514,472],
[511,0,511,536,477,516,507,540,481,555,535,542,542,493],
[523,490,0,485,468,518,513,521,499,538,542,524,533,527],
[524,465,516,0,481,485,525,524,495,513,529,517,520,483],
[539,524,533,520,0,508,502,530,498,534,541,530,536,484],
[498,485,483,516,493,0,520,543,509,547,559,540,529,472],
[524,494,488,476,499,481,0,484,506,533,498,497,494,503],
[517,461,480,477,471,458,517,0,479,498,537,464,490,491],
[520,520,502,506,503,492,495,522,0,509,562,540,515,500],
[482,446,463,488,467,454,468,503,492,0,498,510,502,464],
[503,466,459,472,460,442,503,464,439,503,0,472,478,506],
[519,459,477,484,471,461,504,537,461,491,529,0,504,469],
[487,459,468,481,465,472,507,511,486,499,523,497,0,484],
[529,508,474,518,517,529,498,510,501,537,495,532,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 199, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,543,522,530,516,516,490,541,524,499,520,504,485],
[508,0,568,521,558,518,530,489,520,573,532,541,575,528],
[458,433,0,474,500,461,477,461,458,495,472,465,504,463],
[479,480,527,0,528,502,474,474,505,509,504,508,525,450],
[471,443,501,473,0,472,470,459,499,499,478,493,481,453],
[485,483,540,499,529,0,517,490,506,556,516,507,529,512],
[485,471,524,527,531,484,0,504,503,491,488,534,509,510],
[511,512,540,527,542,511,497,0,532,566,524,538,549,500],
[460,481,543,496,502,495,498,469,0,534,488,496,520,477],
[477,428,506,492,502,445,510,435,467,0,475,443,467,444],
[502,469,529,497,523,485,513,477,513,526,0,510,515,470],
[481,460,536,493,508,494,467,463,505,558,491,0,529,487],
[497,426,497,476,520,472,492,452,481,534,486,472,0,468],
[516,473,538,551,548,489,491,501,524,557,531,514,533,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 1001, 200, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbrcwd/mebbrcwd_14_1001.csv", index=False, header=False)